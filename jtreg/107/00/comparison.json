{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,3 +130,3 @@\n-            if (summary.getTotalFailureCount() > 0) {\n-                StringWriter sw = new StringWriter();\n-                try (PrintWriter pw = new PrintWriter(sw)) {\n+            StringWriter sw = new StringWriter();\n+            try (PrintWriter pw = new PrintWriter(sw)) {\n+                if (summary.getTotalFailureCount() > 0) {\n@@ -138,1 +138,0 @@\n-                    summary.printTo(pw);\n@@ -140,0 +139,20 @@\n+\n+                \/\/ The format of the following output is assumed in the JUnit SummaryReporter\n+                pw.println();\n+                pw.print(\"[ JUnit Containers: \");\n+                pw.print(\"found \" + summary.getContainersFoundCount());\n+                pw.print(\", started \" + summary.getContainersStartedCount());\n+                pw.print(\", succeeded \" + summary.getContainersSucceededCount());\n+                pw.print(\", failed \" + summary.getContainersFailedCount());\n+                pw.print(\", aborted \" + summary.getContainersAbortedCount());\n+                pw.print(\", skipped \" + summary.getContainersSkippedCount());\n+                pw.println(\"]\");\n+                pw.print(\"[ JUnit Tests: \");\n+                pw.print(\"found \" + summary.getTestsFoundCount());\n+                pw.print(\", started \" + summary.getTestsStartedCount());\n+                pw.print(\", succeeded \" + summary.getTestsSucceededCount());\n+                pw.print(\", failed \" + summary.getTestsFailedCount());\n+                pw.print(\", aborted \" + summary.getTestsAbortedCount());\n+                pw.print(\", skipped \" + summary.getTestsSkippedCount());\n+                pw.println(\"]\");\n+\n@@ -141,1 +160,4 @@\n-                throw new Exception(\"JUnit test failure\");\n+\n+                if (summary.getTotalFailureCount() > 0) {\n+                    throw new Exception(\"JUnit test failure\");\n+                }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JUnitRunner.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-  * in http:\/\/openjdk.java.net\/jtreg\/tag-spec.txt.\n+  * in http:\/\/openjdk.org\/jtreg\/tag-spec.txt.\n@@ -145,2 +145,7 @@\n-                \/\/super.scanFile(file);\n-                modifiedScanFile(file);\n+                File junitRoot = properties.getJUnitRoot(file);\n+                if (junitRoot != null) {\n+                    scanJUnitFile(junitRoot, file);\n+                } else {\n+                    \/\/super.scanFile(file);\n+                    modifiedScanFile(file);\n+                }\n@@ -300,1 +305,0 @@\n-        Map<String,String> tagValues;\n@@ -302,10 +306,3 @@\n-            PackageImportParser p = new PackageImportParser(tngRoot, file);\n-            p.parse();\n-            String className = p.inferClassName();\n-            try (BufferedReader in = new BufferedReader(new FileReader(file))) {\n-                tagValues = readTestNGComments(file, in);\n-                if (tagValues == null) {\n-                    tagValues = new HashMap<>();\n-                    \/\/ could read more of file looking for annotations like @Test, @Factory\n-                    \/\/ to guess whether this is really a test file or not\n-                }\n+            scanFile(tngRoot, file, \"testngClass\", true);\n+        }\n+    }\n@@ -313,8 +310,5 @@\n-                tagValues.put(\"packageRoot\", getRootDir().toURI().relativize(tngRoot.toURI()).getPath());\n-                if (className == null) {\n-                    tagValues.put(\"error\", \"cannot determine class name\");\n-                } else {\n-                    tagValues.put(\"testngClass\", className);\n-                }\n-                if (p.importsJUnit)\n-                    tagValues.put(\"importsJUnit\", \"true\");\n+    protected void scanJUnitFile(File junitRoot, File file) throws TestSuite.Fault {\n+        if (isJUnitTest(file)) {\n+            scanFile(junitRoot, file, \"junitClass\", false);\n+        }\n+    }\n@@ -322,4 +316,12 @@\n-                Set<String> libDirs = properties.getLibDirs(file);\n-                if (libDirs != null && !libDirs.isEmpty()) {\n-                    tagValues.put(\"library\", StringUtils.join(libDirs, \" \"));\n-                }\n+    protected void scanFile(File junitRoot, File file, String classPropertyName, boolean setImportsJUnit) throws TestSuite.Fault {\n+        Map<String,String> tagValues;\n+        PackageImportParser p = new PackageImportParser(junitRoot, file);\n+        p.parse();\n+        String className = p.inferClassName();\n+        try (BufferedReader in = new BufferedReader(new FileReader(file))) {\n+            tagValues = readComments(file, in);\n+            if (tagValues == null) {\n+                tagValues = new HashMap<>();\n+                \/\/ could read more of file looking for annotations like @Test, @Factory\n+                \/\/ to guess whether this is really a test file or not\n+            }\n@@ -327,3 +329,13 @@\n-                foundTestDescription(tagValues, file, \/*line*\/0);\n-            } catch (IOException e) {\n-                error(i18n, \"finder.ioError\", file);\n+            tagValues.put(\"packageRoot\", getRootDir().toURI().relativize(junitRoot.toURI()).getPath());\n+            if (className == null) {\n+                tagValues.put(\"error\", \"cannot determine class name\");\n+            } else {\n+                tagValues.put(classPropertyName, className);\n+            }\n+            if (setImportsJUnit &&  p.importsJUnit) {\n+                tagValues.put(\"importsJUnit\", \"true\");\n+            }\n+\n+            Set<String> libDirs = properties.getLibDirs(file);\n+            if (libDirs != null && !libDirs.isEmpty()) {\n+                tagValues.put(\"library\", StringUtils.join(libDirs, \" \"));\n@@ -331,0 +343,4 @@\n+\n+            foundTestDescription(tagValues, file, \/*line*\/0);\n+        } catch (IOException e) {\n+            error(i18n, \"finder.ioError\", file);\n@@ -335,1 +351,1 @@\n-        private final File tngRoot;\n+        private final File rootDir;\n@@ -340,2 +356,2 @@\n-        PackageImportParser(File tngRoot, File file) {\n-            this.tngRoot = tngRoot;\n+        PackageImportParser(File rootDir, File file) {\n+            this.rootDir = rootDir;\n@@ -397,1 +413,1 @@\n-            String path = tngRoot.toURI().relativize(file.toURI()).getPath();\n+            String path = rootDir.toURI().relativize(file.toURI()).getPath();\n@@ -412,1 +428,1 @@\n-    private Map<String,String> readTestNGComments(File file, BufferedReader in) throws IOException {\n+    private Map<String,String> readComments(File file, BufferedReader in) throws IOException {\n@@ -448,0 +464,10 @@\n+        return isClassOrInterfaceFile(file);\n+    }\n+\n+    protected boolean isJUnitTest(File file) {\n+        \/\/ for now, ignore comments and annotations, and\n+        \/\/ assume *.java is a test\n+        return isClassOrInterfaceFile(file);\n+    }\n+\n+    private boolean isClassOrInterfaceFile(File file) {\n@@ -471,1 +497,2 @@\n-        boolean testNG = tagValues.containsKey(\"testngClass\");\n+        boolean isTestNG = tagValues.containsKey(\"testngClass\");\n+        boolean isJUnit = tagValues.containsKey(\"junitClass\");\n@@ -477,1 +504,1 @@\n-        if (testNG) {\n+        if (isTestNG) {\n@@ -484,0 +511,7 @@\n+        } else if (isJUnit) {\n+            if (tagValues.get(\"run\") != null) {\n+                tagValues.put(\"error\", PARSE_BAD_RUN);\n+            }\n+            String className = tagValues.get(\"junitClass\");\n+            newTagValues.put(\"run\", Action.REASON_ASSUMED_ACTION + \" junit \"\n+                    + className + LINESEP);\n@@ -573,1 +607,1 @@\n-        if (match(value, JUNIT_ACTION))\n+        if (match(value, JUNIT_ACTION) || isJUnit)\n@@ -576,1 +610,1 @@\n-        if (match(value, TESTNG_ACTION) || testNG)\n+        if (match(value, TESTNG_ACTION) || isTestNG)\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionTestFinder.java","additions":73,"deletions":39,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,8 @@\n+    boolean isJUnit(File file) throws TestSuite.Fault {\n+        return getEntry(file).junitRoot != null;\n+    }\n+\n+    File getJUnitRoot(File file) throws TestSuite.Fault {\n+        return getEntry(file).junitRoot;\n+    }\n+\n@@ -207,0 +215,2 @@\n+            final File junitRoot;\n+            private final Set<File> junitDirs;\n@@ -246,0 +256,3 @@\n+                    \/\/ add the list of JUnit dirs\n+                    junitDirs = initFileSet(parent == null ? null : parent.junitDirs, \"JUnit.dirs\", dir);\n+\n@@ -276,0 +289,1 @@\n+                    junitDirs = parent.junitDirs;\n@@ -289,0 +303,1 @@\n+                junitRoot = initJUnitRoot(parent, dir);\n@@ -432,0 +447,15 @@\n+            private File initJUnitRoot(Entry parent, File dir) {\n+                if (parent == null)\n+                    return null;\n+\n+                if (parent.junitRoot != null)\n+                    return parent.junitRoot;\n+\n+                for (File junitDir: junitDirs) {\n+                    if (includes(junitDir, dir))\n+                        return junitDir;\n+                }\n+\n+                return null;\n+            }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/TestProperties.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n@@ -30,0 +35,1 @@\n+import java.util.Set;\n@@ -31,0 +37,2 @@\n+import com.sun.javatest.Status;\n+import com.sun.javatest.regtest.agent.JDK_Version;\n@@ -32,0 +40,1 @@\n+import com.sun.javatest.regtest.config.Locations;\n@@ -33,0 +42,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -66,1 +76,1 @@\n-     *             for the action or are improperly formated.\n+     *             for the action or are improperly formatted.\n@@ -73,1 +83,2 @@\n-        if (args.isEmpty())\n+        userSpecified = reason.startsWith(SREASON_USER_SPECIFIED);\n+        if (userSpecified && args.isEmpty())\n@@ -80,1 +91,1 @@\n-        if (!getClassArgs().isEmpty())\n+        if (userSpecified && !getClassArgs().isEmpty())\n@@ -85,0 +96,82 @@\n+    boolean userSpecified = false;\n+\n+    \/\/ cache results?\n+    @Override\n+    protected Status build() throws TestRunException {\n+        if (userSpecified) {\n+            return super.build();\n+        } else {\n+            JDK_Version v = script.getCompileJDKVersion();\n+            Map<String,String> buildOpts = new HashMap<>();\n+            if (v.compareTo(JDK_Version.V1_6) >= 0) {\n+                buildOpts.put(\"implicit\", \"none\");\n+            }\n+            Locations locations = script.locations;\n+            Set<String> buildArgs = new LinkedHashSet<>(script.getLibBuildArgs());\n+            if (buildArgs.isEmpty()) {\n+                buildArgs.addAll(listModules(locations.absLibSrcList(Locations.LibLocn.Kind.SYS_MODULE)));\n+                buildArgs.addAll(listModules(locations.absLibSrcList(Locations.LibLocn.Kind.USER_MODULE)));\n+                buildArgs.addAll(listClasses(locations.absLibSrcList(Locations.LibLocn.Kind.PACKAGE)));\n+            }\n+            try {\n+                Path testSrcDir = locations.absTestSrcDir();\n+                switch (locations.getDirKind(testSrcDir)) {\n+                    case PACKAGE:\n+                        buildArgs.addAll(listClasses(List.of(testSrcDir)));\n+                        break;\n+                    case SYS_MODULE:\n+                    case USER_MODULE:\n+                        buildArgs.addAll(listModules(List.of(testSrcDir)));\n+                        break;\n+                }\n+            } catch (Locations.Fault e) {\n+                return Status.error(e.getMessage());\n+            }\n+            BuildAction ba = new BuildAction();\n+            return ba.build(buildOpts, new ArrayList<>(buildArgs), SREASON_ASSUMED_BUILD, script);\n+        }\n+    }\n+\n+    private List<String> listClasses(List<Path> roots) {\n+        List<String> classes = new ArrayList<>();\n+        for (Path root: roots)\n+            listClasses(root, null, classes);\n+        return classes;\n+    }\n+\n+    private void listClasses(Path dir, String pkg, List<String> classes) {\n+        \/\/ candidate for Files.walkFileTree\n+        for (Path f : FileUtils.listFiles(dir)) {\n+            String f_name = f.getFileName().toString();\n+            if (Files.isDirectory(f)) {\n+                listClasses(f, pkg == null ? f_name : pkg + \".\" + f_name, classes);\n+            } else if (f_name.endsWith(\".java\")) {\n+                String c_name = f_name.substring(0, f_name.length() - 5);\n+                classes.add(pkg == null ? c_name : pkg + \".\" + c_name);\n+            }\n+        }\n+    }\n+\n+    private Set<String> listModules(List<Path> roots) {\n+        Set<String> modules = new LinkedHashSet<>();\n+        for (Path root: roots) {\n+            for (Path f : FileUtils.listFiles(root)) {\n+                if (Files.isDirectory(f)) {\n+                    modules.add(f.getFileName() + \"\/*\");\n+                }\n+            }\n+        }\n+        return modules;\n+    }\n+\n+    @Override\n+    public void endAction(Status s) {\n+        super.endAction(s);\n+        if (script.isCheck())\n+            return;\n+        script.getJUnitSummaryReporter().add(script.getTestResult(), section);\n+\n+\/\/        String jtrPath = script.getTestResult().getWorkRelativePath();\n+\/\/        String tngPath = jtrPath.replaceAll(\"\\\\.jtr$\", \".testng-results.xml\");\n+\/\/        script.saveScratchFile(TESTNG_RESULTS_XML, Path.of(tngPath));\n+    }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/JUnitAction.java","additions":97,"deletions":4,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-import com.sun.javatest.regtest.report.TestNGReporter;\n+import com.sun.javatest.regtest.report.SummaryReporter;\n@@ -189,6 +189,7 @@\n-            if (td.getParameter(\"importsJUnit\") != null) {\n-                needJUnit = true;\n-                needTestNG = true;\n-            } else {\n-                for (Action a : actionList) {\n-                    if (a instanceof JUnitAction) {\n+            for (Action a : actionList) {\n+                if (a instanceof JUnitAction) {\n+                    needJUnit = true;\n+                } else if (a instanceof TestNGAction) {\n+                    needTestNG = true;\n+                    \/\/ check for using mixed-mode\n+                    if (td.getParameter(\"importsJUnit\") != null) {\n@@ -196,2 +197,0 @@\n-                    } else if (a instanceof TestNGAction) {\n-                        needTestNG = true;\n@@ -1096,2 +1095,6 @@\n-    TestNGReporter getTestNGReporter() {\n-        return TestNGReporter.instance(workDir);\n+    SummaryReporter getTestNGSummaryReporter() {\n+        return SummaryReporter.forTestNG(workDir);\n+    }\n+\n+    SummaryReporter getJUnitSummaryReporter() {\n+        return SummaryReporter.forJUnit(workDir);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-        script.getTestNGReporter().add(script.getTestResult(), section);\n+        script.getTestNGSummaryReporter().add(script.getTestResult(), section);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/TestNGAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,3 +114,7 @@\n-                TestNGReporter tng = TestNGReporter.instance(params.getWorkDirectory());\n-                if (!tng.isEmpty())\n-                    tng.writeReport(rd);\n+                for (var sr : List.of(\n+                        SummaryReporter.forTestNG(params.getWorkDirectory()),\n+                        SummaryReporter.forJUnit(params.getWorkDirectory()))) {\n+                    if (!sr.isEmpty()) {\n+                        sr.writeReport(rd);\n+                    }\n+                }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/RegressionReporter.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,283 @@\n+\/*\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javatest.regtest.report;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.WeakHashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.sun.javatest.TestDescription;\n+import com.sun.javatest.TestResult;\n+import com.sun.javatest.WorkDirectory;\n+import com.sun.javatest.regtest.agent.ActionHelper.OutputHandler.OutputKind;\n+\n+\/**\n+ * Class to generate aggregate reports for collections of tests, such as JUnit and TestNG tests.\n+ *\/\n+public abstract class SummaryReporter {\n+    private static final Map<WorkDirectory, Map<Class<?>, SummaryReporter>> instanceMap\n+            = new WeakHashMap<>();\n+\n+    \/**\n+     * A summary reporter that aggregates info for TestNG tests, using info written\n+     * to stdout in each test by TestNG.\n+     *\n+     * @param wd the work directory for the test run\n+     * @return the summary reporter\n+     *\/\n+    public static SummaryReporter forTestNG(WorkDirectory wd) {\n+        return instanceMap.computeIfAbsent(wd, wd_ -> new HashMap<>())\n+                .computeIfAbsent(TestNGSummaryReporter.class, c_ -> new TestNGSummaryReporter());\n+    }\n+\n+    \/**\n+     * A summary reporter that aggregates info for JUnit tests, using info written\n+     * to stderr in each test by JUnitRunner, using a SummaryGeneratingListener.\n+     *\n+     * @param wd the work directory for the test run\n+     * @return the summary reporter\n+     *\/\n+    public static SummaryReporter forJUnit(WorkDirectory wd) {\n+        return instanceMap.computeIfAbsent(wd, wd_ -> new HashMap<>())\n+                .computeIfAbsent(JUnitSummaryReporter.class, c_ -> new JUnitSummaryReporter());\n+    }\n+\n+    \/**\n+     * Returns {@code true} if there is no content to be shown.\n+     *\n+     * @return {@code true} if there is no content to be shown\n+     *\/\n+    public abstract boolean isEmpty();\n+\n+    \/**\n+     * Adds the results for an action in a test.\n+     *\n+     * @param tr the test result for the test\n+     * @param s  the section containing the output for the action\n+     *\/\n+    public abstract void add(TestResult tr, TestResult.Section s);\n+\n+    \/**\n+     * Writes a summary report about the tests that executed.\n+     *\n+     * @param reportDir the directory in which to write the report\n+     * @throws IOException if there is a problem writing the report\n+     *\/\n+    public abstract void writeReport(File reportDir) throws IOException;\n+\n+    \/**\n+     * A summary reporter that aggregates info for TestNG tests, using info written\n+     * to stdout in each test by TestNG.\n+     *\/\n+    private static class TestNGSummaryReporter extends SummaryReporter {\n+\n+        private final Map<String, Info> infoMap = new TreeMap<>();\n+\n+        @Override\n+        public boolean isEmpty() {\n+            return infoMap.isEmpty();\n+        }\n+\n+        static final String testsPrefix = \"Total tests run:\";\n+        static final Pattern testsPattern = Pattern.compile(\"[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]*\");\n+        static final String configPrefix = \"Configuration Failures:\";\n+        static final Pattern configPattern = Pattern.compile(\"[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]*\");\n+\n+        @Override\n+        public synchronized void add(TestResult tr, TestResult.Section s) {\n+            try {\n+                TestDescription td = tr.getDescription();\n+                String group = td.getParameter(\"packageRoot\");\n+                if (group == null)\n+                    group = td.getRootRelativePath();\n+                Info info = infoMap.get(group);\n+                if (info == null)\n+                    infoMap.put(group, info = new Info());\n+                String out = s.getOutput(OutputKind.STDOUT.name);\n+                if (out != null) {\n+                    Matcher tm = getMatcher(out, testsPrefix, testsPattern);\n+                    if (tm != null && tm.matches()) {\n+                        info.count += Integer.parseInt(tm.group(1));\n+                        info.failureCount += Integer.parseInt(tm.group(2));\n+                        info.skippedCount += Integer.parseInt(tm.group(3));\n+                    }\n+                    Matcher cm = getMatcher(out, configPrefix, configPattern);\n+                    if (cm != null && cm.matches()) {\n+                        info.configFailureCount += Integer.parseInt(cm.group(1));\n+                        info.configSkippedCount += Integer.parseInt(cm.group(2));\n+                    }\n+                }\n+            } catch (TestResult.Fault e) {\n+                \/\/ should not occur with tr still in memory\n+            }\n+        }\n+\n+        private Matcher getMatcher(String out, String prefix, Pattern p) {\n+            int pos = out.lastIndexOf(prefix);\n+            if (pos == -1)\n+                return null;\n+\n+            int endPos = out.indexOf(\"\\n\", pos);\n+            if (endPos == -1)\n+                return null;\n+\n+            return p.matcher(out.substring(pos, endPos));\n+        }\n+\n+        @Override\n+        public void writeReport(File reportDir) throws IOException {\n+            File reportTextDir = new File(reportDir, \"text\");\n+            reportTextDir.mkdirs();\n+            File f = new File(reportTextDir, \"testng.txt\");\n+            try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f)))) {\n+                for (Map.Entry<String, Info> e : infoMap.entrySet()) {\n+                    out.println(e.getKey() + \" \" + e.getValue());\n+                }\n+            }\n+        }\n+\n+        static class Info {\n+            int count;\n+            \/\/        int successCount;\n+            int failureCount;\n+            int skippedCount;\n+            int configFailureCount;\n+            int configSkippedCount;\n+\n+            @Override\n+            public String toString() {\n+                return \"total: \" + count\n+                        + \", passed: \" + (count - failureCount - skippedCount)\n+                        + \", failed: \" + failureCount\n+                        + \", skipped: \" + skippedCount\n+                        + \", config failed: \" + configFailureCount\n+                        + \", config skipped: \" + configSkippedCount;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A summary reporter that aggregates info for JUnit tests, using info written\n+     * to stderr in each test by JUnitRunner, using a SummaryGeneratingListener.\n+     *\/\n+    private static class JUnitSummaryReporter extends SummaryReporter {\n+\n+        private final Map<String, Info> infoMap = new TreeMap<>();\n+\n+        @Override\n+        public boolean isEmpty() {\n+            return infoMap.isEmpty();\n+        }\n+\n+        static final Pattern infoPattern = Pattern.compile(\"(?s)\\\\[ JUnit Containers:.*JUnit Tests:.*]\");\n+        static final Pattern numberPattern = Pattern.compile(\"[0-9]+\");\n+\n+        @Override\n+        public synchronized void add(TestResult tr, TestResult.Section s) {\n+            try {\n+                TestDescription td = tr.getDescription();\n+                String group = td.getParameter(\"packageRoot\");\n+                if (group == null)\n+                    group = td.getRootRelativePath();\n+                Info info = infoMap.computeIfAbsent(group, g -> new Info());\n+                String out = s.getOutput(OutputKind.STDERR.name);\n+                if (out != null) {\n+                    Matcher m1 = infoPattern.matcher(out);\n+                    if (m1.find()) {\n+                        Matcher m2 = numberPattern.matcher(m1.group());\n+\n+                        info.containers.count += nextInt(m2);\n+                        info.containers.started += nextInt(m2);\n+                        info.containers.succeeded += nextInt(m2);\n+                        info.containers.failed += nextInt(m2);\n+                        info.containers.aborted += nextInt(m2);\n+                        info.containers.skipped += nextInt(m2);\n+                        info.tests.count += nextInt(m2);\n+                        info.tests.started += nextInt(m2);\n+                        info.tests.succeeded += nextInt(m2);\n+                        info.tests.failed += nextInt(m2);\n+                        info.tests.aborted += nextInt(m2);\n+                        info.tests.skipped += nextInt(m2);\n+                    }\n+                }\n+            } catch (TestResult.Fault e) {\n+                \/\/ should not occur with tr still in memory\n+            }\n+        }\n+\n+        private int nextInt(Matcher m) {\n+            return m.find() ? Integer.parseInt(m.group()) : 0;\n+        }\n+\n+        @Override\n+        public void writeReport(File reportDir) throws IOException {\n+            File reportTextDir = new File(reportDir, \"text\");\n+            reportTextDir.mkdirs();\n+            File f = new File(reportTextDir, \"junit.txt\");\n+            try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f)))) {\n+                for (Map.Entry<String, Info> e: infoMap.entrySet()) {\n+                    out.println(e.getKey() + \" \" + e.getValue());\n+                }\n+            }\n+        }\n+\n+        static class Counts {\n+            int count;\n+            int started;\n+            int succeeded;\n+            int failed;\n+            int aborted;\n+            int skipped;\n+            public String toString() {\n+                return count\n+                        + \", skipped: \" + skipped\n+                        + \", started: \" + started\n+                        + \", succeeded: \" + succeeded\n+                        + \", failed: \" + failed\n+                        + \", aborted: \" + aborted;\n+            }\n+        }\n+\n+        static class Info {\n+            final Counts containers = new Counts();\n+            final Counts tests = new Counts();\n+\n+            @Override\n+            public String toString() {\n+                return \"containers: \" + containers + \"; tests: \" + tests;\n+            }\n+        }\n+    }\n+\n+}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/SummaryReporter.java","additions":283,"deletions":0,"binary":false,"changes":283,"status":"added"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javatest.regtest.report;\n-\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.util.Map;\n-import java.util.TreeMap;\n-import java.util.WeakHashMap;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-import com.sun.javatest.TestDescription;\n-import com.sun.javatest.TestResult;\n-import com.sun.javatest.WorkDirectory;\n-import com.sun.javatest.regtest.agent.ActionHelper.OutputHandler.OutputKind;\n-\n-\/**\n- * Class to generate aggregate reports for groups of TestNG tests\n- *\/\n-public class TestNGReporter {\n-    private static final Map<WorkDirectory,TestNGReporter> instanceMap\n-            = new WeakHashMap<>();\n-\n-    public static TestNGReporter instance(WorkDirectory wd) {\n-        TestNGReporter r = instanceMap.get(wd);\n-        if (r == null) {\n-            instanceMap.put(wd, r = new TestNGReporter());\n-        }\n-        return r;\n-    }\n-\n-    Map<String, Info> infoMap = new TreeMap<>();\n-\n-    boolean isEmpty() {\n-        return infoMap.isEmpty();\n-    }\n-\n-    static final String testsPrefix = \"Total tests run:\";\n-    static final Pattern testsPattern = Pattern.compile(\"[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]*\");\n-    static final String configPrefix = \"Configuration Failures:\";\n-    static final Pattern configPattern = Pattern.compile(\"[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]*\");\n-\n-    public synchronized void add(TestResult tr, TestResult.Section s) {\n-        try {\n-            TestDescription td = tr.getDescription();\n-            String group = td.getParameter(\"packageRoot\");\n-            if (group == null)\n-                group = td.getRootRelativePath();\n-            Info info = infoMap.get(group);\n-            if (info == null)\n-                infoMap.put(group, info = new Info());\n-            String out = s.getOutput(OutputKind.STDOUT.name);\n-            if (out != null) {\n-                Matcher tm = getMatcher(out, testsPrefix, testsPattern);\n-                if (tm != null && tm.matches()) {\n-                    info.count += Integer.parseInt(tm.group(1));\n-                    info.failureCount += Integer.parseInt(tm.group(2));\n-                    info.skippedCount += Integer.parseInt(tm.group(3));\n-                }\n-                Matcher cm = getMatcher(out, configPrefix, configPattern);\n-                if (cm != null && cm.matches()) {\n-                    info.configFailureCount += Integer.parseInt(cm.group(1));\n-                    info.configSkippedCount += Integer.parseInt(cm.group(2));\n-                }\n-            }\n-        } catch (TestResult.Fault e) {\n-            \/\/ should not occur with tr still in memory\n-        }\n-    }\n-\n-    private Matcher getMatcher(String out, String prefix, Pattern p) {\n-        int pos = out.lastIndexOf(prefix);\n-        if (pos == -1)\n-            return null;\n-\n-        int endPos = out.indexOf(\"\\n\", pos);\n-        if (endPos == -1)\n-            return null;\n-\n-        return p.matcher(out.substring(pos, endPos));\n-    }\n-\n-    public void writeReport(File reportDir) throws IOException {\n-        File reportTextDir = new File(reportDir, \"text\");\n-        reportTextDir.mkdirs();\n-        File f = new File(reportTextDir, \"testng.txt\");\n-        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f)))) {\n-            for (Map.Entry<String,Info> e: infoMap.entrySet()) {\n-                out.println(e.getKey() + \" \" + e.getValue());\n-            }\n-        }\n-    }\n-\n-    static class Info {\n-        int count;\n-\/\/        int successCount;\n-        int failureCount;\n-        int skippedCount;\n-        int configFailureCount;\n-        int configSkippedCount;\n-\n-        @Override\n-        public String toString() {\n-            return \"total: \" + count\n-                    + \", passed: \" + (count - failureCount -skippedCount)\n-                    + \", failed: \" + failureCount\n-                    + \", skipped: \" + skippedCount\n-                    + \", config failed: \" + configFailureCount\n-                    + \", config skipped: \" + configSkippedCount;\n-        }\n-    }\n-}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/TestNGReporter.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n-$(BUILDTESTDIR)\/TestNGLibTest.ok: \\\n+$(BUILDTESTDIR)\/JUnitLibTest.ok: \\\n@@ -38,1 +38,1 @@\n-\t\t$(TESTDIR)\/testng \\\n+\t\t$(TESTDIR)\/junit \\\n@@ -44,1 +44,1 @@\n-\t$(BUILDTESTDIR)\/TestNGLibTest.ok\n+\t$(BUILDTESTDIR)\/JUnitLibTest.ok\n","filename":"test\/junit\/JUnitLibTest.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/testng\/TestNGLibTest.gmk","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-TestNG.dirs = tngNoLib tngAbsLib tngRelLib\n+JUnit.dirs = juNoLib juAbsLib juRelLib\n","filename":"test\/junit\/TEST.ROOT","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/testng\/TEST.ROOT","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junit\/juAbsLib\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testng\/tngAbsLib\/TEST.properties","status":"copied"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p;\n+\n+import libpkg.*;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class JUnitTest {\n+    @Test\n+    public void test() {\n+        System.out.println(new LibClass().hello());\n+    }\n+}\n","filename":"test\/junit\/juAbsLib\/p\/JUnitTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class JUnitTest {\n+    @Test\n+    public void test() {\n+        System.out.println(\"hello\");\n+    }\n+}\n","filename":"test\/junit\/juNoLib\/p\/JUnitTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junit\/juRelLib\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testng\/tngRelLib\/TEST.properties","status":"copied"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package p;\n+\n+import libpkg.*;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class JUnitTest {\n+    @Test\n+    public void test() {\n+        System.out.println(new LibClass().hello());\n+    }\n+}\n","filename":"test\/junit\/juRelLib\/p\/JUnitTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junit\/lib\/libpkg\/LibClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testng\/lib\/libpkg\/LibClass.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junit\/std\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testng\/std\/Test.java","status":"copied"},{"patch":"@@ -0,0 +1,41 @@\n+#\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#----------------------------------------------------------------------\n+\n+$(BUILDTESTDIR)\/JUnitLibsTest.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t$(TESTDIR)\/junitLibs\/tests\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/JUnitLibsTest.ok\n+\n","filename":"test\/junitLibs\/JUnitLibsTest.gmk","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junitLibs\/extlibs\/extLib\/ExtLib.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testngLibs\/extlibs\/extLib\/ExtLib.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junitLibs\/tests\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testngLibs\/tests\/TEST.ROOT","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-TestNG.dirs = .\n+JUnit.dirs = .\n","filename":"test\/junitLibs\/tests\/junit\/TEST.properties","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/testngLibs\/tests\/testng\/TEST.properties","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.Test;\n","filename":"test\/junitLibs\/tests\/junit\/Test2.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/testngLibs\/tests\/testng\/Test2.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junitLibs\/tests\/libs\/absLib\/AbsLib.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testngLibs\/tests\/libs\/absLib\/AbsLib.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junitLibs\/tests\/libs\/relLib\/RelLib.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testngLibs\/tests\/libs\/relLib\/RelLib.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/junitLibs\/tests\/simple\/Test1.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/testngLibs\/tests\/simple\/Test1.java","status":"copied"}]}