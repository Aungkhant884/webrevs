{"files":[{"patch":"@@ -3,1 +3,2 @@\n-_Nothing noteworthy, yet_\n+* Fixed setting default environment variables on Windows\n+  * [CODETOOLS-7903515](https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903515)\n","filename":"CHANGELOG.md","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2152,1 +2152,0 @@\n-        Map<String, String> sysEnv = System.getenv();\n@@ -2156,1 +2155,1 @@\n-            addEnvVars(envVars, sysEnv, DEFAULT_WINDOWS_ENV_VARS);\n+            addEnvVars(envVars, DEFAULT_WINDOWS_ENV_VARS);\n@@ -2158,1 +2157,1 @@\n-            addEnvVars(envVars, sysEnv, \"PATH\"); \/\/ accept user's path, for now\n+            addEnvVars(envVars, \"PATH\"); \/\/ accept user's path, for now\n@@ -2160,3 +2159,3 @@\n-            addEnvVars(envVars, sysEnv, DEFAULT_UNIX_ENV_VARS);\n-            addEnvVars(envVars, sysEnv, e -> e.getKey().startsWith(\"XDG_\"));\n-            addEnvVars(envVars, sysEnv, \"PATH=\/bin:\/usr\/bin:\/usr\/sbin\");\n+            addEnvVars(envVars, DEFAULT_UNIX_ENV_VARS);\n+            addEnvVarsByName(envVars, name -> name.startsWith(\"XDG_\"));\n+            addEnvVars(envVars, \"PATH=\/bin:\/usr\/bin:\/usr\/sbin\");\n@@ -2164,2 +2163,2 @@\n-        addEnvVars(envVars, sysEnv, envVarArgs);\n-        addEnvVars(envVars, sysEnv, e -> e.getKey().startsWith(\"JTREG_\"));\n+        addEnvVars(envVars, envVarArgs);\n+        addEnvVarsByName(envVars, name -> name.startsWith(\"JTREG_\"));\n@@ -2170,2 +2169,2 @@\n-    private void addEnvVars(Map<String, String> table, Map<String, String> sysEnv, String list) {\n-        addEnvVars(table, sysEnv, list.split(\",\"));\n+    private void addEnvVars(Map<String, String> table, String list) {\n+        addEnvVars(table, list.split(\",\"));\n@@ -2174,2 +2173,2 @@\n-    private void addEnvVars(Map<String, String> table, Map<String, String> sysEnv, String[] list) {\n-        addEnvVars(table, sysEnv, List.of(list));\n+    private void addEnvVars(Map<String, String> table, String[] list) {\n+        addEnvVars(table, List.of(list));\n@@ -2178,1 +2177,1 @@\n-    private void addEnvVars(Map<String, String> table, Map<String, String> sysEnv, List<String> list) {\n+    private void addEnvVars(Map<String, String> table, List<String> list) {\n@@ -2188,1 +2187,1 @@\n-                String value = sysEnv.get(s);\n+                String value = getEnvironmentVariableOrNull(s);\n@@ -2199,3 +2198,5 @@\n-    private void addEnvVars(Map<String, String> table, Map<String, String> sysEnv, Predicate<Map.Entry<String, String>> filter) {\n-        sysEnv.entrySet().stream()\n-                .filter(filter)\n+    \/\/ This method streams over a case-sensitive set of entries, returned by System.getenv();\n+    \/\/ Custom name filters can be implemented in a case-insensitive manner.\n+    private void addEnvVarsByName(Map<String, String> table, Predicate<String> nameFilter) {\n+        System.getenv().entrySet().stream()\n+                .filter(e -> nameFilter.test(e.getKey()))\n@@ -2205,0 +2206,5 @@\n+    \/\/ 7903515: Use case-insensitive System.getenv(String) here.\n+    private static String getEnvironmentVariableOrNull(String name) {\n+        return System.getenv(name);\n+    }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"}]}