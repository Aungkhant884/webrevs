{"files":[{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javatest.regtest.agent;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+ * {@code TestThreadFactory} allows some customization of test execution.\n+ * The jtreg creates new thread for each test using {@code new Thread(ThreadGroup tg, Runnable task);}.\n+ * The implementation of this interface might provide user-defined threads for test execution.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * new Thread(tg, () -> { ....; task.run(); ....; });\n+ * or\n+ * new VirtualThread(task);\n+ * <\/pre>\n+ * Implementation may be specified on the {@code jtreg} command line\n+ * using {@code -testThreadFactory} and {@code -testThreadFactoryPath} arguments.\n+ * It is executed by tested JDK in {@code agentvm} and {@code othervm} modes.\n+ *\/\n+public interface TestThreadFactory {\n+    static TestThreadFactory getInstance(String className, String path) {\n+        ClassLoader loader = ClassLoader.getSystemClassLoader();\n+        if (path != null) {\n+            SearchPath classpath = new SearchPath(path);\n+            List<URL> urls = new ArrayList<>();\n+            for (Path f : classpath.asList()) {\n+                try {\n+                    urls.add(f.toUri().toURL());\n+                } catch (MalformedURLException e) {\n+                }\n+            }\n+            loader = new URLClassLoader(urls.toArray(new URL[urls.size()]), loader);\n+        }\n+        try {\n+            Class<? extends TestThreadFactory> clz = loader.loadClass(className).asSubclass(TestThreadFactory.class);\n+            Constructor<? extends TestThreadFactory> ctor = clz.getDeclaredConstructor();\n+            TestThreadFactory factory = ctor.newInstance();\n+            return factory;\n+        } catch (ClassNotFoundException | InvocationTargetException | NoSuchMethodException\n+                 | InstantiationException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/**\n+     * This method should return unstarted thread which executes test task.\n+     * @param tg ThreadGroup to run test\n+     * @param task The test task\n+     *\/\n+    Thread newThread(ThreadGroup tg, Runnable task);\n+\n+}\n\\ No newline at end of file\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestThreadFactory.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}