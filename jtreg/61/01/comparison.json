{"files":[{"patch":"@@ -1,1 +1,1 @@\n-# Building The Regression Test Harness for the OpenJDK platform: jtreg\n+# The Regression Test Harness for the OpenJDK platform: `jtreg`\n@@ -3,1 +3,2 @@\n-(This information is also available at <http:\/\/openjdk.java.net\/jtreg\/build.html>)\n+* For details on writing tests for `jtreg`, see\n+  [The JDK Test Framework: Tag Language Specification][tagspec].\n@@ -5,2 +6,2 @@\n-jtreg depends on a number of external components:\n-    JT Harness, TestNG, JUnit, AsmTools, Ant, and JCov.\n+* For details on building `jtreg`, see\n+  [doc\/building.md](doc\/building.md).\n@@ -8,3 +9,2 @@\n-The fundamental way to build jtreg is with GNU make, specifying where to find\n-those external components, but a script is also available that will download\n-appropriate copies of those components before building jtreg.\n+* For additional details about `jtreg`, see\n+  [The `jtreg` FAQ][faq].\n@@ -12,1 +12,2 @@\n-## Building jtreg with the build.sh script\n+* For details on running JDK tests using the JDK _make test_ framework, see\n+  [Using \"make test\" (the run-test framework)][make-test].\n@@ -14,2 +15,3 @@\n-This is the recommended way to build jtreg, for those that want a simple,\n-basic way to build jtreg.\n+[faq]: https:\/\/openjdk.java.net\/jtreg\/faq.html\n+[tagspec]: https:\/\/openjdk.java.net\/jtreg\/tag-spec.html\n+[make-test]: https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/testing.md\n@@ -17,1 +19,1 @@\n-*Note:* The _build.sh_ script supersedes the earlier _build-all.sh_ script.\n+## Using IntelliJ IDEA\n@@ -19,132 +21,3 @@\n-The script is intended to be run in a Unix-like shell, such as `bash` on Linux or\n-Mac OS X, or with Cygwin or WSL on Windows. At a minimum, you must either set\n-the `JAVA_HOME` environment variable or specify the location of the JDK to be\n-used to build jtreg with the `--jdk` command-line option. It must be JDK 11 or later.\n-\n-    % cd jtreg-root-directory\n-    % sh make\/build.sh --jdk JDK-directory\n-\n-If your shell is not compatible with `bash`, you may need to invoke `bash` explicitly:\n-\n-    % bash make\/build.sh --jdk JDK-directory\n-\n-The script will create a build sub-directory, download and build dependencies,\n-and finally build jtreg itself. The resulting image will be in\n-_build\/images\/jtreg_.\n-\n-If you have access to the public Internet, no environment variables need to be\n-specified to get a standard build of jtreg. However, you can set environment\n-variables used to define the location of dependencies to be downloaded.\n-These are documented in _make\/build.sh_ and normally  specified in\n-_make\/build-support\/version-numbers_ and _make\/build-support\/*\/version-numbers_.\n-\n-## Building jtreg with GNU Make\n-\n-The Makefile is in _make\/Makefile_, and creates deliverables in the _build\/_\n-directory, similar to OpenJDK. By default, the build file just builds an image\n-for jtreg. You can build jtreg from a Unix-like command shell with the following\n-commands:\n-\n-    % cd <jtreg-root-directory>\n-    % make -C make\n-\n-## Dependencies\n-\n-jtreg has a number of build dependencies. These can be set with values on the\n-make command line or with values in _make\/Defs.gmk_. You can also include the\n-appropriate license files in the jtreg image, by setting the appropriate make\n-variables.\n-\n-* JDK 11 (or better):\n-    Set `JDKHOME` to the JDK or equivalent used to build jtreg. It must be\n-    equivalent to JDK 11 or later.\n-\n-* JT Harness:\n-    See <https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/JT+Harness>.\n-    Set `JTHARNESS_HOME` to the installed copy of the version of JT Harness to be\n-    used. It should be version 6.0-b14 or better.\n-\n-* Ant:\n-    See <http:\/\/ant.apache.org\/>. Set `ANTHOME` to an installed copy of Ant. It\n-    should be version 1.10.x. or better.\n-\n-* AsmTools:\n-    See <https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/asmtools>.\n-    Set `ASMTOOLS_HOME` to the installed copy of the version of AsmTools to be\n-    used. It should be version 7.0-b09 or better.\n-\n-    Note: Do not confuse this component with ASM bytecode engineering library\n-    available at <http:\/\/asm.ow2.org\/>\n-\n-* JUnit:\n-    See <http:\/\/junit.org\/>. The recommended version is currently JUnit 4.13.2.\n-    JUnit has a dependency on Hamcrest. The recommended version is currently 2.2.\n-\n-* TestNG:\n-    See <http:\/\/testng.org\/>. The recommended version is currently 7.3.0.\n-    (Do not use 7.4.0 to run OpenJDK tests.)\n-    TestNG has dependencies on JCommander and Google Guice.\n-    The recommended version of JCommander is 1.78.\n-    The recommended version of Google Guice is 4.2.3.\n-\n-The following dependencies are optional.\n-\n-* JCov:\n-    See <https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/jcov>.\n-    Set `JCOV_HOME` to the installed copy of the version of JCov to be used.\n-    It should be version 3.0-b07 or better.\n-\n-* JDK 1.8:\n-    This is used when running some of the tests. Set `JDK8HOME` to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-* JDK 9:\n-    This is used when running some of the tests. Set `JDK9HOME` to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-* JDK 14:\n-    This is used when running some of the tests. Set `JDK14HOME` to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-* JDK 18:\n-  This is used when running some of the tests. Set `JDK18HOME` to run these\n-  tests. It need not be set if you are just building jtreg.\n-\n-The recommended versions are also defined in `make\/build-support\/version-numbers`.\n-\n-## Running jtreg Self-Tests\n-\n-The tests can be invoked with individual make targets, or collectively via the\n-`test` target.\n-\n-Some of the tests need to pop up windows while they execute. No interaction with\n-these windows is normally required. Since this can be a problem on a headless\n-server machine, and an annoyance on a personal workstation, the tests will\n-attempt to use VNC to create a dummy X-server for use by the tests while they\n-are running. Various implementations of VNC are available, such as from\n-<http:\/\/www.realvnc.com\/>. Using VNC is optional; it is not required in order to\n-run the tests.\n-\n-By default, VNC will be used if `vncserver` is found on your execution path, or\n-if VNC_HOME points to an installed copy of VNC. To explicitly disable the use of\n-VNC, set the VNC environment variable to one of false, off, no, or 0. Unless\n-explicitly disabled, the tests will check the following:\n-\n-*   You must have a password set in _$HOME\/.vnc\/passwd_. This is the standard\n-    location used by the vncserver command.\n-*   If you set the environment variable `VNC_HOME`, it will be prepended to your\n-    execution path to find vncserver.\n-*   vncserver must be on your execution path, after `VNC_HOME` has been added,\n-    if set.\n-\n-If the tests find any issue with using VNC, it will not be used. If VNC is used\n-to create a dummy X server, the server will be terminated when the test is\n-complete.\n-\n-The logic for using VNC is encapsulated within the script _make\/display.sh_.\n-\n-## Using the IntelliJ IDE\n-\n-The jtreg repo also contains a plugin for the IntelliJ IDE.\n-This is a convenience plugin which adds jtreg capabilities to the IntelliJ IDE.\n-With this plugin, OpenJDK developers can write, run, and debug jtreg tests\n+The `jtreg` repo also contains a plugin for the IntelliJ IDEA IDE.\n+This is a convenience plugin which adds `jtreg` capabilities to the IDE.\n+With this plugin, OpenJDK developers can write, run, and debug `jtreg` tests\n","filename":"README.md","additions":16,"deletions":143,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+# Building The Regression Test Harness for the OpenJDK platform: `jtreg`\n+\n+(This information is also available at <http:\/\/openjdk.java.net\/jtreg\/build.html>)\n+\n+`jtreg` depends on a number of external components:\n+    JT Harness, TestNG, JUnit, AsmTools, and JCov.\n+\n+The fundamental way to build `jtreg` is with GNU make, specifying where to find\n+those external components, but a script is also available that will download\n+appropriate copies of those components before building `jtreg`.\n+\n+## Building `jtreg` with the `build.sh` script\n+\n+This is the recommended way to build `jtreg`, for those that want a simple,\n+basic way to build `jtreg`.\n+\n+*Note:* The _build.sh_ script supersedes the earlier _build-all.sh_ script.\n+\n+The script is intended to be run in a Unix-like shell, such as `bash` on Linux or\n+Mac OS X, or with Cygwin or WSL on Windows. At a minimum, you must either set\n+the `JAVA_HOME` environment variable or specify the location of the JDK to be\n+used to build `jtreg` with the `--jdk` command-line option. It must be a\n+recent build of JDK 11 or later.\n+\n+    % cd jtreg-root-directory\n+    % sh make\/build.sh --jdk JDK-directory\n+\n+If your shell is not compatible with `bash`, you may need to invoke `bash`\n+explicitly:\n+\n+    % bash make\/build.sh --jdk JDK-directory\n+\n+The script will create a `build` sub-directory, download and build dependencies,\n+and finally build `jtreg` itself. The resulting image will be in\n+_build\/images\/jtreg_ .\n+\n+If you have access to the public Internet, no environment variables need to be\n+specified to get a standard build of `jtreg`. However, you can set environment\n+variables used to define the location of dependencies to be downloaded.\n+These are documented in _make\/build.sh_ and are normally specified in\n+_make\/build-support\/version-numbers_ and _make\/build-support\/*\/version-numbers_ .\n+\n+## Building `jtreg` with GNU Make\n+\n+If you don't want to use `build.sh` to build `jtreg`, you can invoke the\n+makefile directly, or by writing and using your own alternative wrapper.\n+\n+The makefiles require a  number of variables to be set, identifying the parts of\n+all the dependencies. In general, there are two kinds of variable to be set for\n+each dependency: the location of any jar files that may be required to use the\n+component, and the location of any \"legal notices\" (such as license files) that\n+may need to be included in the `jtreg` image.\n+\n+There are five dependencies that need to be made available.  The following\n+lists the variables that need to be set for each dependency.\n+\n+1. [JT Harness] (JavaTest)\n+   * `JAVATEST_JAR`: a jar file containing the classes for JT Harness\n+   * `JTHARNESS_NOTICES`: any legal notices that may be required to use JT Harness\n+\n+2. [AsmTools]\n+   * `ASMTOOLS_JAR`: a jar file containing the classes for AsmTools\n+   * `ASMTOOLS_NOTICES`: any legal notices that may be required to use AsmTools\n+\n+3. [JCov]\n+   * `JCOV_JAR`: a jar file containing the main set classes for JCov tools\n+   * `JCOV_NETWORK_SAVER_JAR`: a jar file containing the classes to inject into\n+     a JVM to save coverage information\n+   * `JCOV_NOTICES`: any legal notices that may be required to use JCov\n+\n+4. [JUnit]\n+   * `JUNIT_JARS`: a list of one or more jar files containing the classes\n+     for JUnit and its dependencies: the list may be a series of jar files or\n+     a singleton \"uber-jar\"\n+   * `JUNIT_NOTICES`: any legal notices that be required to use JUnit\n+\n+   Consult the JUnit documentation to see if there are any additional\n+   dependencies that may be required when running JUnit.\n+\n+5. [TestNG]\n+   * `TESTNG_JARS`: a list of one or more jar files containing the classes\n+     for TestNG and its dependencies: the list may be a series of jar files or\n+     a singleton \"uber-jar\"\n+   * `TESTNG_NOTICES`: any legal notices that be required to use TestNG\n+\n+   Consult the TestNG documentation to see if there are any additional\n+   dependencies that may be required when running TestNG.\n+\n+In general, any jar files identified by `*_JAR` or `*_JARS` variables will be\n+copied to the `lib` directory in the generated image.  Any files identified by\n+`*_NOTICES` variables will be copied to a component-specific subdirectory\n+of the `legal` directory in the generated image.\n+\n+[AsmTools]: https:\/\/github.com\/openjdk\/asmtools\n+[JCov]: https:\/\/github.com\/openjdk\/jcov\n+[JT Harness]: https:\/\/github.com\/openjdk\/jtharness\n+[JUnit]: https:\/\/junit.org\/\n+[TestNG]: https:\/\/testng.org\/\n+\n+\n+## Running `jtreg` Self-Tests\n+\n+The tests can be invoked with individual make targets, or collectively via the\n+`test` target.\n+\n+Some tests depend on specific versions of JDK being available, specified\n+by the following variables: `JDK8HOME`, `JDK9HOME`, `JDK14HOME`, `JDK18HOME`.\n+A test that requires any of these version of JDK will be skipped if the\n+variable is not set.\n+\n+Some of the tests need to pop up windows while they execute. No interaction with\n+these windows is normally required. Since this can be a problem on a headless\n+server machine, and an annoyance on a personal workstation, the tests will\n+attempt to use VNC to create a dummy X-server for use by the tests while they\n+are running. Various implementations of VNC are available, such as from\n+<http:\/\/www.realvnc.com\/>. Using VNC is optional; it is not required in order to\n+run the tests.\n+\n+By default, VNC will be used if `vncserver` is found on your execution path, or\n+if VNC_HOME points to an installed copy of VNC. To explicitly disable the use of\n+VNC, set the VNC environment variable to one of false, off, no, or 0. Unless\n+explicitly disabled, the tests will check the following:\n+\n+*   You must have a password set in _$HOME\/.vnc\/passwd_. This is the standard\n+    location used by the vncserver command.\n+*   If you set the environment variable `VNC_HOME`, it will be prepended to your\n+    execution path to find vncserver.\n+*   vncserver must be on your execution path, after `VNC_HOME` has been added,\n+    if set.\n+\n+If the tests find any issue with using VNC, it will not be used. If VNC is used\n+to create a dummy X server, the server will be terminated when the test is\n+complete.\n+\n+The logic for using VNC is encapsulated within the script _make\/display.sh_.\n","filename":"doc\/building.md","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -51,1 +51,1 @@\n-DEV_NULL = \/dev\/null \n+DEV_NULL = \/dev\/null\n@@ -84,11 +84,3 @@\n-#----- Java:  http:\/\/openjdk.java.net\/  http:\/\/jdk.java.net\/\n-#\n-# Explicit JDK versions, for use as needed by tests, all optional for build.\n-# At a minimum, JDKHOME must be set, either directly or indirectly. (See below).\n-\n-ifndef JDK5HOME\n-  ifdef SLASHJAVA\n-    JDK5HOME = $(SLASHJAVA)\/re\/jdk\/1.5.0\/archive\/fcs\/binaries\/linux-i586\n-  endif\n-endif\n-JDK5HOME := $(call FullPath,$(JDK5HOME))\n+# Notices are optional or may be empty\n+# JCov is optional\n+# The following are not optional ...\n@@ -96,4 +88,2 @@\n-ifndef JDK6HOME\n-  ifdef SLASHJAVA\n-    JDK6HOME = $(SLASHJAVA)\/re\/jdk\/1.6.0\/archive\/fcs\/binaries\/linux-i586\n-  endif\n+ifndef JDKHOME\n+$(error JDKHOME not set)\n@@ -101,1 +91,0 @@\n-JDK6HOME := $(call FullPath,$(JDK6HOME))\n@@ -103,4 +92,2 @@\n-ifndef JDK7HOME\n-  ifdef SLASHJAVA\n-    JDK7HOME = $(SLASHJAVA)\/re\/jdk\/1.7.0\/archive\/fcs\/binaries\/linux-i586\n-  endif\n+ifndef JAVATEST_JAR\n+$(error JAVATEST_JAR not set)\n@@ -108,1 +95,0 @@\n-JDK7HOME := $(call FullPath,$(JDK7HOME))\n@@ -110,4 +96,2 @@\n-ifndef JDK8HOME\n-  ifdef SLASHJAVA\n-    JDK8HOME = $(SLASHJAVA)\/re\/jdk\/1.8.0\/promoted\/latest\/binaries\/linux-i586\n-  endif\n+ifndef ASMTOOLS_JAR\n+$(error ASMTOOLS_JAR not set)\n@@ -115,1 +99,0 @@\n-JDK8HOME := $(call FullPath,$(JDK8HOME))\n@@ -117,4 +100,2 @@\n-ifndef JDK9HOME\n-  ifdef SLASHJAVA\n-    JDK9HOME = $(SLASHJAVA)\/re\/jdk\/9\/promoted\/latest\/binaries\/linux-i586\n-  endif\n+ifndef JUNIT_JARS\n+$(error JUNIT_JARS not set)\n@@ -122,6 +103,0 @@\n-JDK9HOME := $(call FullPath,$(JDK9HOME))\n-\n-# The JDK used to build jtreg and to run most tests.\n-# It should be set to JDK 8 or later.\n-# If not set, it defaults to $(JDK8HOME), or to $(J2SEHOME) for backwards\n-# compatibility\n@@ -129,8 +104,2 @@\n-ifndef JDKHOME\n-  ifdef JDK8HOME\n-    JDKHOME = $(JDK8HOME)\n-  else\n-    ifdef J2SEHOME\n-      JDKHOME = $(J2SEHOME)\n-    endif\n-  endif\n+ifndef TESTNG_JARS\n+$(error TESTNG_JARS not set)\n@@ -158,220 +127,0 @@\n-#----- JavaTest: https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/JT+Harness\n-#\n-# At a minimum, JAVATEST_JAR must be set, either directly or indirectly.\n-# If not set explicitly, it defaults to values derived from JAVATEST_HOME,\n-# JTHARNESS_HOME or SLASH_JAVA.\n-# Set JTHARNESS_LICENSE and JTHARNESS_COPYRIGHT to include license and\n-# copyright files in the product image. If not set explicitly, these \n-# default to values derived from JAVATEST_HOME, JTHARNESS_HOME or SLASH_JAVA.\n-\n-ifndef JTHARNESS_HOME\n-  ifdef SLASHJAVA\n-    JTHARNESS_HOME = $(SLASHJAVA)\/re\/jtharness\/6.0\/promoted\/ea\/b11\/binaries\/\n-  endif\n-endif \n-\n-ifndef JAVATEST_HOME\n-  ifdef JTHARNESS_HOME\n-    JAVATEST_HOME = $(JTHARNESS_HOME)\n-  else\n-    ifdef SLASHJAVA\n-      JAVATEST_HOME = $(SLASHJAVA)\/re\/javatest\/6.0\/promoted\/latest\/binaries\/javatest\/\n-    endif\n-  endif\n-endif\n-\n-ifndef JAVATEST_JAR\n-  ifdef JAVATEST_HOME\n-    JAVATEST_JAR = $(JAVATEST_HOME)\/lib\/javatest.jar\n-  endif\n-endif\n-JAVATEST_JAR := $(call FullPath,$(JAVATEST_JAR))\n-\n-ifndef JTHARNESS_LICENSE\n-  JTHARNESS_LICENSE = $(wildcard $(JTHARNESS_HOME)\/legal\/license.txt)\n-endif\n-JTHARNESS_LICENSE := $(call FullPath,$(JTHARNESS_LICENSE))\n-\n-ifndef JTHARNESS_COPYRIGHT\n-  JTHARNESS_COPYRIGHT = $(wildcard $(JTHARNESS_HOME)\/legal\/copyright.txt)\n-endif\n-JTHARNESS_COPYRIGHT := $(call FullPath,$(JTHARNESS_COPYRIGHT))\n-\n-#----- JCov 3.0:  https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/jcov\n-#\n-# JCov is optional. \n-# If provided, coverage-collection features in jtreg will be enabled.\n-#\n-# To include support for JCov, JCOV_JAR and JCOV_NETWORK_SAVER_JAR\n-# must be set. If not set explicitly, these default to values derived\n-# from JCOV_HOME or SLASH_JAVA.\n-# Set JCOV_LICENSE to include the license file in the product image.\n-# If not set explicitly, this defaults to a value derived from JCOV_HOME \n-# or SLASH_JAVA.\n-\n-ifndef JCOV_HOME\n-  ifdef SLASHJAVA\n-    JCOV_HOME = $(SLASHJAVA)\/re\/jcov\/3.0\/promoted\/fcs\/latest\/binaries\/jcov_3.0\/\n-  endif\n-endif\n-\n-ifndef JCOV_JAR\n-  ifdef JCOV_HOME\n-    JCOV_JAR = $(JCOV_HOME)\/lib\/jcov.jar\n-  endif\n-endif\n-JCOV_JAR := $(call FullPath,$(JCOV_JAR))\n-\n-ifndef JCOV_NETWORK_SAVER_JAR\n-  ifdef JCOV_HOME\n-    JCOV_NETWORK_SAVER_JAR = $(JCOV_HOME)\/lib\/jcov_network_saver.jar\n-  endif\n-endif\n-JCOV_NETWORK_SAVER_JAR := $(call FullPath,$(JCOV_NETWORK_SAVER_JAR))\n-\n-ifndef JCOV_LICENSE\n-  ifdef JCOV_HOME\n-    JCOV_LICENSE = $(wildcard $(JCOV_HOME)\/LICENSE)\n-  endif\n-endif\n-JCOV_LICENSE := $(call FullPath,$(JCOV_LICENSE))\n-\n-JCOV = $(JDK6HOME)\/bin\/java -jar $(JCOV_JAR)\n-\n-#----- AsmTools 7.0:  https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/asmtools\n-#\n-# AsmTools is required, to support the execution of tests using\n-# *.jasm and *.jcod files.\n-#\n-# ASMTOOLS_JAR must be set, either directly or indirectly.\n-# If not set explicitly, it defaults to a value derived from\n-# ASMTOOLS_HOME or SLASHJAVA.\n-# Set ASMTOOLS_LICENSE to include the license file in the product image.\n-# If not set explicitly, this defaults to a value derived from \n-# ASMTOOLS_HOME or SLASH_JAVA.\n-\n-ifndef ASMTOOLS_HOME\n-  ifdef SLASHJAVA\n-    ASMTOOLS_HOME = $(SLASHJAVA)\/re\/asmtools\/7.0\/promoted\/opensource\/ea\/b08\/binaries\/asmtools-7.0\/\n-  endif\n-endif\n-\n-ifndef ASMTOOLS_JAR\n-  ASMTOOLS_JAR = $(ASMTOOLS_HOME)\/lib\/asmtools.jar\n-endif\n-ASMTOOLS_JAR := $(call FullPath,$(ASMTOOLS_JAR))\n-\n-ifndef ASMTOOLS_LICENSE\n-  ASMTOOLS_LICENSE = $(wildcard $(ASMTOOLS_HOME)\/LICENSE)\n-endif\n-ASMTOOLS_LICENSE := $(call FullPath,$(ASMTOOLS_LICENSE))\n-\n-#----- JUnit 4.10: http:\/\/www.junit.org\/\n-# https:\/\/sourceforge.net\/projects\/junit\/files\/junit\/4.10\/junit-4.10.jar\/download\n-#\n-# JUnit is required, to support the execution of tests using JUnit\n-#\n-# JUNIT_JAR must be set, either directly or indirectly.\n-# If not set explicitly, it defaults to a value derived from\n-# JUNIT_HOME or SLASHJAVA.\n-# Set JUNIT_LICENSE to include the license file in the product image.\n-# If not set explicitly, this defaults to a value derived from \n-# JUNIT_HOME or SLASH_JAVA.\n-\n-ifndef JUNIT_HOME\n-  ifdef SLASHJAVA\n-    JUNIT_HOME = $(SLASHJAVA)\/devtools\/share\/junit\/junit-4.10\/\n-  endif\n-endif\n-\n-ifndef JUNIT_JAR\n-  ifdef JUNIT_HOME\n-    JUNIT_JAR = $(JUNIT_HOME)\/junit-4.10.jar\n-  endif\n-endif\n-JUNIT_JAR := $(call FullPath,$(JUNIT_JAR))\n-\n-ifndef JUNIT_LICENSE\n-  ifdef JUNIT_HOME\n-    JUNIT_LICENSE = $(wildcard $(JUNIT_HOME)\/LICENSE.txt)\n-  endif\n-endif\n-JUNIT_LICENSE := $(call FullPath,$(JUNIT_LICENSE))\n-\n-#----- TestNG 6.9.5: see http:\/\/www.testng.org\/\n-# http:\/\/testng.org\/doc\/download.html\n-#\n-# TestNG is required, to support the execution of tests using TestNG\n-#\n-# TESTNG_JAR must be set, either directly or indirectly.\n-# If not set explicitly, it defaults to a value derived from\n-# TESTNG_HOME or SLASHJAVA.\n-# Set TESTNG_LICENSE to include the license file in the product image.\n-# If not set explicitly, this defaults to a value derived from \n-# TESTNG_HOME or SLASH_JAVA.\n-\n-ifndef TESTNG_HOME\n-  ifdef SLASHJAVA\n-    TESTNG_HOME = $(SLASHJAVA)\/devtools\/share\/testng\/testng-6.9.5\n-  endif\n-endif\n-TESTNG_HOME := $(call FullPath,$(TESTNG_HOME))\n-\n-ifndef TESTNG_JAR\n-  ifdef TESTNG_HOME\n-    TESTNG_JAR = $(TESTNG_HOME)\/testng-6.9.5.jar\n-  endif\n-endif\n-TESTNG_JAR := $(call FullPath,$(TESTNG_JAR))\n-\n-ifndef TESTNG_LICENSE\n-  TESTNG_LICENSE = $(wildcard $(TESTNG_HOME)\/LICENSE.txt)\n-endif\n-TESTNG_LICENSE := $(call FullPath,$(JUNIT_LICENSE))\n-\n-# TestNG requires jcommander, which may or may not be bundled with TESTNG_JAR.\n-# If it is not, set JCOMMANDER_JAR to an appropriate version\n-ifndef JCOMMANDER_JAR\n-  ifdef TESTNG_HOME\n-    JCOMMANDER_JAR = $(wildcard $(TESTNG_HOME)\/jcommander-1.48.jar)\n-  endif\n-endif\n-ifdef JCOMMANDER_JAR\n-    JCOMMANDER_JAR := $(call FullPath,$(JCOMMANDER_JAR))\n-endif\n-\n-# Newer versions of TestNG require Google Guice\n-ifdef GOOGLE_GUICE_JAR\n-    GOOGLE_GUICE_JAR := $(call FullPath,$(GOOGLE_GUICE_JAR))\n-endif\n-\n-# Newer versions of JUnit require Hamcrest\n-ifdef HAMCREST_JAR\n-    HAMCREST_JAR := $(call FullPath,$(HAMCREST_JAR))\n-endif\n-\n-#----- Ant:  http:\/\/ant.apache.org\/\n-#\n-# Ant is required, to support the provision of a <jtreg> Ant task\n-#\n-# ANT_JAR must be set, either directly or indirectly.\n-# If not set explicitly, it defaults to a value derived from\n-# ANTHOME or SLASHJAVA. The jar file is just used when building\n-# jtreg, and is not included in the product image.\n-\n-ifndef ANTHOME\n-  ifdef SLASHJAVA\n-    ANTHOME = $(SLASHJAVA)\/devtools\/share\/ant\/1.9.4\n-  endif\n-endif\n-\n-ifndef ANT_JAR\n-  ifdef ANTHOME\n-    ANT_JAR = $(ANTHOME)\/lib\/ant.jar\n-  endif\n-endif\n-ANT_JAR := $(call FullPath,$(ANT_JAR))\n-\n-ifdef ANTHOME\n-  ANT = $(ANTHOME)\/bin\/ant\n-endif\n@@ -451,2 +200,2 @@\n-#BUILD_ZIPDATE:sh = \/bin\/date '+%d %h %Y' \n-BUILD_ZIPDATE_CMD = \/bin\/date  '+%d %h %Y' \n+#BUILD_ZIPDATE:sh = \/bin\/date '+%d %h %Y'\n+BUILD_ZIPDATE_CMD = \/bin\/date  '+%d %h %Y'\n","filename":"make\/Defs.gmk","additions":16,"deletions":267,"binary":false,"changes":283,"status":"modified"},{"patch":"@@ -63,12 +63,0 @@\n-ifdef JDK1_1HOME\n-\t@echo \"JDK1_1HOME          = $(JDK1_1HOME)\"\n-endif\n-ifdef JDK5HOME\n-\t@echo \"JDK5HOME            = $(JDK5HOME)\"\n-endif\n-ifdef JDK6HOME\n-\t@echo \"JDK6HOME            = $(JDK6HOME)\"\n-endif\n-ifdef JDK7HOME\n-\t@echo \"JDK7HOME            = $(JDK7HOME)\"\n-endif\n@@ -92,2 +80,1 @@\n-\t@echo \"JTHARNESS_LICENSE   = $(JTHARNESS_LICENSE)\"\n-\t@echo \"JTHARNESS_COPYRIGHT = $(JTHARNESS_COPYRIGHT)\"\n+\t@echo \"JTHARNESS_NOTICES   = $(JTHARNESS_NOTICES)\"\n@@ -95,1 +82,2 @@\n-\t@echo \"JCOV_LICENSE        = $(JCOV_LICENSE)\"\n+\t@echo \"JCOV_NETWORK_SAVER_JAR = $(JCOV_NETWORK_SAVER_JAR)\"\n+\t@echo \"JCOV_NOTICES        = $(JCOV_NOTICES)\"\n@@ -97,9 +85,5 @@\n-\t@echo \"ASMTOOLS_LICENSE    = $(ASMTOOLS_LICENSE)\"\n-\t@echo \"JUNIT_JAR           = $(JUNIT_JAR)\"\n-\t@echo \"JUNIT_LICENSE       = $(JUNIT_LICENSE)\"\n-\t@echo \"TESTNG_HOME         = $(TESTNG_HOME)\"\n-\t@echo \"TESTNG_JAR          = $(TESTNG_JAR)\"\n-\t@echo \"TESTNG_LICENSE      = $(TESTNG_LICENSE)\"\n-\t@echo \"JCOMMANDER_JAR      = $(JCOMMANDER_JAR)\"\n-\t@echo \"GOOGLE_JUICE_JAR    = $(GOOGLE_JUICE_JAR)\"\n-\t@echo \"HAMCREST_JAR        = $(HAMCREST_JAR)\"\n+\t@echo \"ASMTOOLS_NOTICES    = $(ASMTOOLS_NOTICES)\"\n+\t@echo \"JUNIT_JARS          = $(JUNIT_JARS)\"\n+\t@echo \"JUNIT_NOTICES       = $(JUNIT_NOTICES)\"\n+\t@echo \"TESTNG_JARS         = $(TESTNG_JARS)\"\n+\t@echo \"TESTNG_NOTICES      = $(TESTNG_NOTICES)\"\n","filename":"make\/Makefile","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1995, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,4 @@\n+EMPTY :=\n+SPACE := $(EMPTY) $(EMPTY)\n+AS_CLASSPATH = $(subst $(SPACE),$(PS),$(strip $1))\n+\n","filename":"make\/Platform.gmk","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -811,0 +811,22 @@\n+#-----\n+# Create aggregate settings\n+\n+ASMTOOLS_NOTICES=\"$(mixed_path \"${ASMTOOLS_LICENSE}\")\"\n+info \"ASMTOOLS_NOTICES: ${ASMTOOLS_NOTICES}\"\n+\n+JCOV_NOTICES=\"$(mixed_path \"${JCOV_LICENSE}\")\"\n+info \"JCOV_NOTICES: ${JCOV_NOTICES}\"\n+\n+JTHARNESS_NOTICES=\"$(mixed_path \"${JTHARNESS_COPYRIGHT}\") $(mixed_path \"${JTHARNESS_LICENSE}\")\"\n+info \"JTHARNESS_NOTICES: ${JTHARNESS_NOTICES}\"\n+\n+TESTNG_JARS=\"$(mixed_path \"${TESTNG_JAR}\") $(mixed_path \"${GOOGLE_GUICE_JAR}\") $(mixed_path \"${JCOMMANDER_JAR}\")\"\n+info \"TESTNG_JARS: ${TESTNG_JARS}\"\n+TESTNG_NOTICES=\"$(mixed_path \"${TESTNG_LICENSE}\")\"\n+info \"TESTNG_NOTICES: ${TESTNG_NOTICES}\"\n+\n+JUNIT_JARS=\"$(mixed_path \"${JUNIT_JAR}\") $(mixed_path \"${HAMCREST_JAR}\")\"\n+info \"JUNIT_JARS: ${JUNIT_JARS}\"\n+JUNIT_NOTICES=\"$(mixed_path \"${JUNIT_LICENSE}\")\"\n+info \"JUNIT_NOTICES: ${JUNIT_NOTICES}\"\n+\n@@ -834,0 +856,6 @@\n+check_files() {\n+    for i in \"$@\" ; do\n+        check_file \"$i\"\n+    done\n+}\n+\n@@ -854,17 +882,13 @@\n-check_file \"${ANT}\"\n-check_file \"${ASMTOOLS_JAR}\"\n-check_file \"${ASMTOOLS_LICENSE}\"\n-check_file \"${GOOGLE_GUICE_JAR}\"\n-check_file \"${HAMCREST_JAR}\"\n-check_dir  \"${JAVA_HOME}\"\n-check_file \"${JCOMMANDER_JAR}\"\n-check_file \"${JCOV_JAR}\"\n-check_file \"${JCOV_LICENSE}\"\n-check_file \"${JCOV_NETWORK_SAVER_JAR}\"\n-check_file \"${JTHARNESS_COPYRIGHT}\"\n-check_file \"${JTHARNESS_JAVATEST_JAR}\"\n-check_file \"${JTHARNESS_LICENSE}\"\n-check_file \"${JUNIT_JAR}\"\n-check_file \"${JUNIT_LICENSE}\"\n-check_file \"${TESTNG_JAR}\"\n-check_file \"${TESTNG_LICENSE}\"\n+check_file  \"${ANT}\"\n+check_file  \"${ASMTOOLS_JAR}\"\n+check_files  ${ASMTOOLS_NOTICES}\n+check_dir   \"${JAVA_HOME}\"\n+check_file  \"${JCOV_JAR}\"\n+check_files  ${JCOV_NOTICES}\n+check_file  \"${JCOV_NETWORK_SAVER_JAR}\"\n+check_file  \"${JTHARNESS_JAVATEST_JAR}\"\n+check_files  ${JTHARNESS_NOTICES}\n+check_files  ${JUNIT_JARS}\n+check_files  ${JUNIT_NOTICES}\n+check_files  ${TESTNG_JARS}\n+check_files  ${TESTNG_NOTICES}\n@@ -879,1 +903,1 @@\n-     ASMTOOLS_LICENSE=\"${ASMTOOLS_LICENSE}\"                   \\\n+     ASMTOOLS_NOTICES=\"${ASMTOOLS_NOTICES}\"                   \\\n@@ -885,2 +909,0 @@\n-     GOOGLE_GUICE_JAR=\"${GOOGLE_GUICE_JAR}\"                   \\\n-     HAMCREST_JAR=\"${HAMCREST_JAR}\"                           \\\n@@ -888,1 +910,0 @@\n-     JCOMMANDER_JAR=\"${JCOMMANDER_JAR}\"                       \\\n@@ -890,1 +911,0 @@\n-     JCOV_LICENSE=\"${JCOV_LICENSE}\"                           \\\n@@ -892,0 +912,1 @@\n+     JCOV_NOTICES=\"${JCOV_NOTICES}\"                           \\\n@@ -893,6 +914,5 @@\n-     JTHARNESS_COPYRIGHT=\"${JTHARNESS_COPYRIGHT}\"             \\\n-     JTHARNESS_LICENSE=\"${JTHARNESS_LICENSE}\"                 \\\n-     JUNIT_JAR=\"$(mixed_path \"${JUNIT_JAR}\")\"                 \\\n-     JUNIT_LICENSE=\"${JUNIT_LICENSE}\"                         \\\n-     TESTNG_JAR=\"$(mixed_path \"${TESTNG_JAR}\")\"               \\\n-     TESTNG_LICENSE=\"${TESTNG_LICENSE}\"                       \\\n+     JTHARNESS_NOTICES=\"${JTHARNESS_NOTICES}\"                 \\\n+     JUNIT_JARS=\"${JUNIT_JARS}\"                               \\\n+     JUNIT_NOTICES=\"${JUNIT_NOTICES}\"                         \\\n+     TESTNG_JARS=\"${TESTNG_JARS}\"                             \\\n+     TESTNG_NOTICES=\"${TESTNG_NOTICES}\"                       \\\n","filename":"make\/build.sh","additions":48,"deletions":28,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+JUNIT_CLASSPATH = $(call AS_CLASSPATH,$(JUNIT_JARS))\n+TESTNG_CLASSPATH = $(call AS_CLASSPATH,$(TESTNG_JARS))\n+\n@@ -38,1 +41,1 @@\n-\tCLASSPATH=\"$(CLASSDIR)$(PS)$(JAVATEST_JAR)$(PS)$(JUNIT_JAR)$(PS)$(TESTNG_JAR)\" \\\n+\tCLASSPATH=\"$(CLASSDIR)$(PS)$(JAVATEST_JAR)$(PS)$(JUNIT_CLASSPATH)$(PS)$(TESTNG_CLASSPATH)\" \\\n@@ -53,1 +56,1 @@\n-\tCLASSPATH=\"$(CLASSDIR)$(PS)$(JAVATEST_JAR)$(PS)$(JUNIT_JAR)$(PS)$(TESTNG_JAR)\" \\\n+\tCLASSPATH=\"$(CLASSDIR)$(PS)$(JAVATEST_JAR)$(PS)$(JUNIT_CLASSPATH)$(PS)$(TESTNG_CLASSPATH)\" \\\n@@ -87,1 +90,15 @@\n-\t$(CLASSDIR)\/com\/sun\/javatest\/regtest\/tool\/jtlogo.png\n+\t$(CLASSDIR)\/com\/sun\/javatest\/regtest\/tool\/jtlogo.png \\\n+\t$(CLASSDIR)\/com\/sun\/javatest\/regtest\/tool\/jars.properties\n+\n+$(BUILDDIR)\/classes\/com\/sun\/javatest\/regtest\/tool\/jars.properties: \\\n+\t$(ASMTOOLS_JAR) \\\n+\t$(JCOV_JAR) $(JCOV_NETWORK_SAVER_JAR) \\\n+\t$(TESTNG_JARS) \\\n+\t$(JUNIT_JARS)\n+\t( \\\n+\t    echo \"asmtools=$(notdir $(ASMTOOLS_JAR))\" ; \\\n+\t    echo \"jcov=$(notdir $(JCOV_JAR))\" ; \\\n+\t    echo \"jcov-network-saver=$(notdir $(JCOV_NETWORK_SAVER_JAR))\" ; \\\n+\t    echo \"testng=$(notdir $(TESTNG_JARS))\" ; \\\n+\t    echo \"junit=$(notdir $(JUNIT_JARS))\" \\\n+\t) > $@\n@@ -156,1 +173,2 @@\n-\t\t$(BUILDDIR)\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties\n+\t\t$(BUILDDIR)\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties \\\n+\t\t$(BUILDDIR)\/classes\/com\/sun\/javatest\/regtest\/tool\/jars.properties\n@@ -222,0 +240,16 @@\n+#----------------------------------------------------------------------\n+\n+# Import a file to a given directory, and add the target to the list of\n+# dependencies for TARGETS.ZIP.jtreg\n+#  1: the file to be imported\n+#  2: the target directory\n+#\n+define IMPORT_FILE\n+$(2)\/$(notdir $(1)): $(call PosixPath,$(1))\n+\t$(RM) -f $$@\n+\t$(MKDIR) -p $$(@D)\n+\t$(CP) $$< $$@\n+\n+TARGETS.ZIP.jtreg += $(2)\/$(notdir $(1))\n+endef\n+\n@@ -235,17 +269,1 @@\n-$(JTREG_IMAGEDIR)\/legal\/jtharness\/license.txt: $(call PosixPath,$(JTHARNESS_LICENSE))\n-\t$(RM) -f $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n-\n-ifdef JTHARNESS_LICENSE\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/legal\/jtharness\/license.txt\n-endif\n-\n-$(JTREG_IMAGEDIR)\/legal\/jtharness\/copyright.txt: $(call PosixPath,$(JTHARNESS_COPYRIGHT))\n-\t$(RM) -f $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n-\n-ifdef JTHARNESS_COPYRIGHT\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/legal\/jtharness\/copyright.txt\n-endif\n+$(foreach file,$(JTHARNESS_NOTICES),$(eval $(call IMPORT_FILE,$(file),$(JTREG_IMAGEDIR)\/legal\/jtharness)))\n@@ -257,6 +275,1 @@\n-$(JTREG_IMAGEDIR)\/lib\/junit.jar: $(call PosixPath,$(JUNIT_JAR))\n-\t$(RM) -f $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n-\n-TARGETS.ZIP.jtreg += $(JTREG_IMAGEJARDIR)\/junit.jar\n+$(foreach jar,$(JUNIT_JARS),$(eval $(call IMPORT_FILE,$(jar),$(JTREG_IMAGEDIR)\/lib)))\n@@ -264,8 +277,1 @@\n-ifdef JUNIT_LICENSE\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/legal\/junit\/LICENSE\n-endif\n-\n-$(JTREG_IMAGEDIR)\/legal\/junit\/LICENSE: $(call PosixPath,$(JUNIT_LICENSE))\n-\t$(RM) -f $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n+$(foreach file,$(JUNIT_NOTICES),$(eval $(call IMPORT_FILE,$(file),$(JTREG_IMAGEDIR)\/legal\/junit)))\n@@ -277,39 +283,1 @@\n-$(JTREG_IMAGEDIR)\/lib\/testng.jar: $(call PosixPath,$(TESTNG_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $(TESTNG_JAR) $@\n-\tjquery=`$(JAR) tf $@ | $(GREP) 'jquery.*.js'` ; \\\n-\tif [ -n \"$$jquery\" ]; then \\\n-\t    $(RM) $(BUILDDIR)\/$$jquery ; $(MKDIR) -p `dirname $(BUILDDIR)\/$$jquery` ; $(TOUCH) $(BUILDDIR)\/$$jquery ; \\\n-\t    $(JAR) uf $@ -C $(BUILDDIR) $$jquery ; \\\n-\tfi\n-\t- $(ZIP) -d $@ Version.java\n-\n-TARGETS.ZIP.jtreg += $(JTREG_IMAGEJARDIR)\/testng.jar\n-\n-$(JTREG_IMAGEDIR)\/lib\/jcommander.jar: $(call PosixPath,$(JCOMMANDER_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $(JCOMMANDER_JAR) $@\n-\n-ifdef JCOMMANDER_JAR\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEJARDIR)\/jcommander.jar\n-endif\n-\n-$(JTREG_IMAGEDIR)\/lib\/guice.jar: $(call PosixPath,$(GOOGLE_GUICE_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $(GOOGLE_GUICE_JAR) $@\n-\n-ifdef GOOGLE_GUICE_JAR\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEJARDIR)\/guice.jar\n-endif\n-\n-$(JTREG_IMAGEDIR)\/lib\/hamcrest.jar: $(call PosixPath,$(HAMCREST_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $(HAMCREST_JAR) $@\n-\n-ifdef HAMCREST_JAR\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEJARDIR)\/hamcrest.jar\n-endif\n+$(foreach jar,$(TESTNG_JARS),$(eval $(call IMPORT_FILE,$(jar),$(JTREG_IMAGEDIR)\/lib)))\n@@ -317,7 +285,1 @@\n-$(JTREG_IMAGEDIR)\/legal\/testng\/LICENSE: $(call PosixPath,$(TESTNG_LICENSE))\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@ \n-\n-ifdef TESTNG_LICENSE\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/legal\/testng\/LICENSE\n-endif\n+$(foreach file,$(TESTNG_NOTICES),$(eval $(call IMPORT_FILE,$(file),$(JTREG_IMAGEDIR)\/legal\/testng)))\n@@ -329,4 +291,1 @@\n-$(JTREG_IMAGEDIR)\/lib\/jcov.jar: $(call PosixPath,$(JCOV_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n+$(eval $(call IMPORT_FILE,$(JCOV_JAR),$(JTREG_IMAGEDIR)\/lib))\n@@ -334,3 +293,1 @@\n-ifdef JCOV_JAR\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/lib\/jcov.jar\n-endif\n+$(eval $(call IMPORT_FILE,$(JCOV_NETWORK_SAVER_JAR),$(JTREG_IMAGEDIR)\/lib))\n@@ -338,17 +295,1 @@\n-$(JTREG_IMAGEDIR)\/lib\/jcov_network_saver.jar: $(call PosixPath,$(JCOV_NETWORK_SAVER_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n-\n-ifdef JCOV_NETWORK_SAVER_JAR\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/lib\/jcov_network_saver.jar\n-endif\n-\n-$(JTREG_IMAGEDIR)\/legal\/jcov\/LICENSE: $(call PosixPath,$(JCOV_LICENSE))\n-\t$(RM) -f $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n-\n-ifdef JCOV_LICENSE\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/legal\/jcov\/LICENSE\n-endif\n+$(foreach file,$(JCOV_NOTICES),$(eval $(call IMPORT_FILE,$(file),$(JTREG_IMAGEDIR)\/legal\/jcov)))\n@@ -360,4 +301,1 @@\n-$(JTREG_IMAGEDIR)\/lib\/asmtools.jar: $(call PosixPath,$(ASMTOOLS_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n+$(eval $(call IMPORT_FILE,$(ASMTOOLS_JAR),$(JTREG_IMAGEDIR)\/lib))\n@@ -365,4 +303,1 @@\n-ifdef ASMTOOLS_JAR\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/lib\/asmtools.jar\n-    $(JTREG_IMAGEDIR)\/lib\/jtreg.jar: $(JTREG_IMAGEDIR)\/lib\/asmtools.jar\n-endif\n+$(JTREG_IMAGEDIR)\/lib\/jtreg.jar: $(JTREG_IMAGEDIR)\/lib\/$(notdir $(ASMTOOLS_JAR))\n@@ -370,4 +305,1 @@\n-$(JTREG_IMAGEDIR)\/legal\/asmtools\/LICENSE: $(call PosixPath,$(ASMTOOLS_LICENSE))\n-\t$(RM) -f $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $< $@\n+$(foreach file,$(ASMTOOLS_NOTICES),$(eval $(call IMPORT_FILE,$(file),$(JTREG_IMAGEDIR)\/legal\/asmtools)))\n@@ -375,3 +307,13 @@\n-ifdef ASMTOOLS_LICENSE\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEDIR)\/legal\/asmtools\/LICENSE\n-endif\n+#----------------------------------------------------------------------\n+#\n+# convenience aggregate value for tests\n+\n+ALL_JTREG_JARS = \\\n+\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(ASMTOOL_JAR))) \\\n+\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(JCOV_JAR))) \\\n+\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(JCOV_NETWORK_SAVER_JAR))) \\\n+\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(ASMTOOL_JAR))) \\\n+\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(JUNIT_JARS))) \\\n+\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(TESTNG_JARS))) \\\n","filename":"make\/jtreg.gmk","additions":62,"deletions":120,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import java.util.stream.Collectors;\n@@ -112,0 +113,5 @@\n+                \/\/ print list of jar files in path\n+                out.println(name + \": \" + path.asList().stream()\n+                        .map(Path::getFileName)\n+                        .map(Object::toString)\n+                        .collect(Collectors.joining(\", \")));\n@@ -113,0 +119,2 @@\n+                    \/\/ look inside jar metadata for details for those jar files that do\n+                    \/\/ not seem to have a version in their filename\n@@ -114,5 +122,11 @@\n-                        try (JarFile j = new JarFile(jar.toFile())) {\n-                            Attributes attrs = j.getManifest().getMainAttributes();\n-                            String v = attrs.getValue(Attributes.Name.IMPLEMENTATION_VERSION);\n-                            if (v == null) {\n-                                v = attrs.getValue(\"Bundle-Version\");\n+                        String fn = jar.getFileName().toString();\n+                        if (!fn.matches(\"(?i)[a-z0-9-_]+-[0-9](\\\\.[0-9]+)+\\\\.jar\")) {\n+                            try (JarFile j = new JarFile(jar.toFile())) {\n+                                Attributes attrs = j.getManifest().getMainAttributes();\n+                                String v = attrs.getValue(Attributes.Name.IMPLEMENTATION_VERSION);\n+                                if (v == null) {\n+                                    v = attrs.getValue(\"Bundle-Version\");\n+                                }\n+                                String suffix = (path.asList().size() == 1)\n+                                        ? \"\" : \" (\" + jar.getFileName() + \")\";\n+                                out.println(name + suffix + \": version \" + (v == null ? \"unknown\" : v)); \/\/ need i18n\n@@ -120,3 +134,0 @@\n-                            String suffix = (path.asList().size() == 1)\n-                                    ? \"\" : \" (\" + jar.getFileName() + \")\";\n-                            out.println(name + suffix + \": version \" + (v == null ? \"unknown\" : v)); \/\/ need i18n\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Help.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -57,3 +57,3 @@\n-    public JCovManager(Path libDir) {\n-        jcov_jar = toFile(new JarFinder(\"jcov.jar\").libDir(libDir).getFile());\n-        jcov_network_saver_jar = toFile(new JarFinder(\"jcov_network_saver.jar\").libDir(libDir).getFile());\n+    public JCovManager(JarManager jarManager) {\n+        jcov_jar = toFile(jarManager.getFile(\"jcov\"));\n+        jcov_network_saver_jar = toFile(jarManager.getFile(\"jcov-network-saver\"));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/JCovManager.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javatest.regtest.tool;\n-\n-import java.io.File;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import com.sun.javatest.regtest.agent.SearchPath;\n-\n-\/**\n- *\n- *\/\n-public class JarFinder {\n-\n-    private List<String> jars;\n-    private List<String> classes;\n-    private Path libDir;\n-\n-    JarFinder(String first, String... rest) {\n-        jars = new ArrayList<>();\n-        jars.add(first);\n-        jars.addAll(Arrays.asList(rest));\n-    }\n-\n-    JarFinder classes(String... classes) {\n-        this.classes = Arrays.asList(classes);\n-        return this;\n-    }\n-\n-    JarFinder classes(Class<?>... classes) {\n-        this.classes = new ArrayList<>();\n-        for (Class<?> c : classes)\n-            this.classes.add(c.getName());\n-        return this;\n-    }\n-\n-    JarFinder libDir(Path libDir) {\n-        this.libDir = libDir;\n-        return this;\n-    }\n-\n-    SearchPath getPath() {\n-        SearchPath result = new SearchPath();\n-        for (String jar: jars) {\n-            String v = System.getProperty(jar);\n-            if (v == null)\n-                break;\n-            result.append(v);\n-        }\n-        if (!result.isEmpty())\n-            return result;\n-\n-        String home = System.getProperty(\"jtreg.home\");\n-        if (home != null) {\n-            Path lib = Path.of(home).resolve(\"lib\");\n-            for (String jar : jars) {\n-                result.append(lib.resolve(jar));\n-            }\n-            if (!result.isEmpty())\n-                return result;\n-        }\n-\n-        if (classes != null)  {\n-            for (String className: classes) {\n-                String resName = className.replace(\".\", \"\/\") + \".class\";\n-                try {\n-                    URL url = SearchPath.class.getClassLoader().getResource(resName);\n-                    if (url != null) {\n-                        \/\/ use URI to avoid encoding issues, e.g. Program%20Files\n-                        URI uri = url.toURI();\n-                        if (uri.getScheme().equals(\"jar\")) {\n-                            String ssp = uri.getRawSchemeSpecificPart();\n-                            int sep = ssp.lastIndexOf(\"!\");\n-                            uri = new URI(ssp.substring(0, sep));\n-                        } else if (uri.getScheme().equals(\"file\")) {\n-                            \/\/ not a jar, try the root path of class files\n-                            String ssp = uri.getRawSchemeSpecificPart();\n-                            int sep = ssp.indexOf(resName);\n-                            uri = new URI(\"file:\/\/\" + ssp.substring(0, sep));\n-                        }\n-                        if (uri.getScheme().equals(\"file\"))\n-                            result.append(Path.of(uri));\n-                    }\n-                } catch (URISyntaxException ignore) {\n-                    ignore.printStackTrace(System.err);\n-                }\n-            }\n-            if (!result.isEmpty())\n-                return result;\n-        }\n-\n-        if (libDir != null) {\n-            for (String jar : jars) {\n-                result.append(libDir.resolve(jar));\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    Path getFile() {\n-        SearchPath p = getPath();\n-        if (p != null) {\n-            List<Path> files = p.asList();\n-            if (files.size() == 1)\n-                return files.get(0);\n-        }\n-        return null;\n-    }\n-}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/JarFinder.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javatest.regtest.tool;\n+\n+import com.sun.javatest.regtest.agent.SearchPath;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.LinkOption;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Properties;\n+\n+\/**\n+ * A manager for collections of jar files defined in jar.properties.\n+ *\/\n+public class JarManager {\n+\n+    private final Properties props = new Properties();\n+    private final Path libDir;\n+\n+    \/**\n+     * Returns the location of the code source for a class.\n+     * The location may be a {@link Files#isRegularFile(Path,LinkOption[]) regular file}\n+     * (for a jar file)\n+     * or a {@link Files#isDirectory(Path,LinkOption[]) directory}\n+     * (for a \"classes\" directory).\n+     *\n+     * @param clazz the class\n+     * @return a path for the location\n+     *\/\n+    static Path forClass(Class<?> clazz) {\n+        URL u = clazz.getProtectionDomain().getCodeSource().getLocation();\n+        try {\n+            return Path.of(u.toURI());\n+        } catch (URISyntaxException e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    \/**\n+     * Creates a manager for the jar files in a given directory.\n+     *\n+     * @param libDir the directory\n+     *\/\n+    JarManager(Path libDir) {\n+\n+        InputStream in = getClass().getResourceAsStream(\"jars.properties\");\n+        if (in == null) {\n+            throw new Error(\"Can't find jars.properties\");\n+        }\n+        try (InputStreamReader r = new InputStreamReader(in)) {\n+            props.load(r);\n+        } catch (IOException e) {\n+            throw new Error(\"problem reading jars.properties\");\n+        }\n+\n+        this.libDir = libDir;\n+    }\n+\n+    \/**\n+     * Returns a search path for the jar files for a named component.\n+     *\n+     * By default, the jar files are found using entries in a\n+     * resource properties file, {@code jars.properties}, but can\n+     * be overridden if needed by setting a system property identifying\n+     * the jar files.  The name of the system property is\n+     * the component name followed by {@code \".path\"}.\n+     *\n+     * @param name the name of the component\n+     * @return the search path for the component\n+     *\/\n+    SearchPath getPath(String name) {\n+        SearchPath result = new SearchPath();\n+        String p = System.getProperty(name + \".path\");\n+        if (p != null) {\n+            result.append(p);\n+            if (!result.isEmpty()) {\n+                return result;\n+            }\n+        }\n+\n+        String jars = props.getProperty(name);\n+        if (jars != null) {\n+            for (String jar : jars.split(\"\\\\s+\")) {\n+                result.append(libDir.resolve(jar));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    \/**\n+     * Returns the path for the named jar, or {@code null} if the jar cannot be found.\n+     * @param name the name\n+     * @return the path\n+     *\/\n+    Path getFile(String name) {\n+        List<Path> files = getPath(name).asList();\n+        return files.size() == 1 ? files.get(0) : null;\n+    }\n+}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/JarManager.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -241,10 +241,0 @@\n-\/\/    \/**\n-\/\/     * Exception to report a problem while executing in Main.\n-\/\/     *\/\n-\/\/    public static class Fault extends Exception {\n-\/\/        static final long serialVersionUID = -6780999176737139046L;\n-\/\/        public Fault(I18NResourceBundle i18n, String s, Object... args) {\n-\/\/            super(i18n.getString(s, args));\n-\/\/        }\n-\/\/    }\n-\n@@ -1053,7 +1043,1 @@\n-        \/\/ FIXME: work around bug CODETOOLS-6466752\n-        javatest_jar = new JarFinder(\"javatest.jar\")\n-                .classes(Harness.class)\n-                .getFile();\n-        if (javatest_jar != null) {\n-            System.setProperty(\"javatestClassDir\", javatest_jar.toString());\n-        }\n+        javatest_jar = JarManager.forClass(Harness.class);\n@@ -1061,9 +1045,7 @@\n-        jtreg_jar = new JarFinder(\"jtreg.jar\")\n-                .classes(getClass())\n-                .getFile();\n-        if (jtreg_jar != null) {\n-            jcovManager = new JCovManager(jtreg_jar.getParent());\n-            if (jcovManager.isJCovInstalled()) {\n-                options = new ArrayList<>(options);\n-                options.addAll(jcovManager.options);\n-            }\n+        jtreg_jar = JarManager.forClass(getClass());\n+        jarManager = new JarManager(jtreg_jar.getParent());\n+\n+        jcovManager = new JCovManager(jarManager);\n+        if (jcovManager.isJCovInstalled()) {\n+            options = new ArrayList<>(options);\n+            options.addAll(jcovManager.options);\n@@ -1670,4 +1652,3 @@\n-        asmtoolsPath = new JarFinder(\"asmtools.jar\")\n-                .classes(\"org.openjdk.asmtools.Main\")\n-                .libDir(libDir)\n-                .getPath();\n+        JarManager jarManager = new JarManager(libDir);\n+\n+        asmtoolsPath = jarManager.getPath(\"asmtools\");\n@@ -1695,38 +1676,4 @@\n-        testngPath = new JarFinder(\"testng.jar\", \"jcommander.jar\", \"guice.jar\")\n-                .classes(\"org.testng.annotations.Test\", \"com.beust.jcommander.JCommander\", \"com.google.inject.Stage\")\n-                .libDir(libDir)\n-                .getPath();\n-        \/\/ handle TestNG specially\n-        help.addVersionHelper(out -> {\n-            List<URL> urls = new ArrayList<>();\n-            for (Path f : testngPath.asList()) {\n-                try {\n-                    urls.add(f.toUri().toURL());\n-                } catch (MalformedURLException e) {\n-                    \/\/ ignore\n-                }\n-            }\n-            String v = null;\n-            try (URLClassLoader cl = new URLClassLoader(urls.toArray(new URL[0]))) {\n-                Class<?> c = cl.loadClass(\"org.testng.internal.Version\");\n-                Method m = c.getMethod(\"getVersionString\");\n-                v = (String) m.invoke(null);\n-            } catch (ReflectiveOperationException | IOException e) {\n-                \/\/ ignore\n-            }\n-            out.println(\"TestNG (testng.jar): version \" + (v == null ? \"unknown\" : v)); \/\/ need i18n\n-        });\n-        SearchPath notTestNGPath = new SearchPath();\n-        for (Path f : testngPath.asList()) {\n-            if (!f.getFileName().toString().equals(\"testng.jar\")) {\n-                notTestNGPath.append(f);\n-            }\n-        }\n-        \/\/ jcommander really does have no obvious version info, so leave it as \"unknown\"\n-        help.addPathVersionHelper(\"TestNG\", notTestNGPath);\n-\n-        junitPath = new JarFinder(\"junit.jar\", \"hamcrest.jar\")\n-                .classes(\"org.junit.runner.JUnitCore\", \"org.hamcrest.SelfDescribing\")\n-                .libDir(libDir)\n-                .getPath();\n-        \/\/ no convenient version info for junit.jar\n+        testngPath = jarManager.getPath(\"testng\");\n+        help.addPathVersionHelper(\"TestNG\", testngPath);\n+\n+        junitPath = jarManager.getPath(\"junit\");\n@@ -2501,0 +2448,1 @@\n+    private final JarManager jarManager;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":16,"deletions":68,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -32,9 +32,0 @@\n-ifdef JCOMMANDER_JAR\n-$(BUILDDIR)\/Basic.check.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/jcommander.jar\n-endif\n-\n-ifdef GOOGLE_GUICE_JAR\n-$(BUILDDIR)\/Basic.check.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/guice.jar\n-endif\n@@ -42,1 +33,0 @@\n-ifdef HAMCREST_JAR\n@@ -44,8 +34,1 @@\n-\t$(JTREG_IMAGEDIR)\/lib\/hamcrest.jar\n-endif\n-\n-$(BUILDDIR)\/Basic.check.ok: \\\n-                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/junit.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/testng.jar \\\n+                $(ALL_JTREG_JARS) \\\n@@ -83,18 +66,0 @@\n-ifdef JCOMMANDER_JAR\n-$(BUILDDIR)\/Basic.othervm.ok \\\n-$(BUILDDIR)\/Basic.agentvm.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/jcommander.jar\n-endif\n-\n-ifdef GOOGLE_GUICE_JAR\n-$(BUILDDIR)\/Basic.othervm.ok \\\n-$(BUILDDIR)\/Basic.agentvm.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/guice.jar\n-endif\n-\n-ifdef HAMCREST_JAR\n-$(BUILDDIR)\/Basic.othervm.ok \\\n-$(BUILDDIR)\/Basic.agentvm.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/hamcrest.jar\n-endif\n-\n@@ -103,4 +68,1 @@\n-                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/junit.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/testng.jar \\\n+                $(ALL_JTREG_JARS) \\\n","filename":"test\/basic\/Basic.gmk","additions":2,"deletions":40,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-\t$(GREP) 'grant.*junit.jar' $(@:%.ok=%)\/work\/JUnit\/simple.policy_new\n-\t$(GREP) 'grant.*testng.jar' $(@:%.ok=%)\/work\/TestNG\/simple.policy_new\n+\t$(GREP) 'grant.*junit[^ ]*.jar' $(@:%.ok=%)\/work\/JUnit\/simple.policy_new\n+\t$(GREP) 'grant.*testng[^ ]*.jar' $(@:%.ok=%)\/work\/TestNG\/simple.policy_new\n","filename":"test\/policy\/PolicyTest.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,3 +66,5 @@\n-\t\t    -e 's|%BUILD%.images.jtreg.lib.guice\\.jar.||g' \\\n-\t\t    -e 's|%BUILD%.images.jtreg.lib.hamcrest\\.jar.||g' \\\n-\t\t    -e 's|%BUILD%.images.jtreg.lib.jcommander\\.jar.||g' \\\n+\t\t    -e 's|junit-[A-Za-z0-9.-]*\\.jar|junit.jar|g' \\\n+\t\t    -e 's|testng-[A-Za-z0-9.-]*\\.jar|testng.jar|g' \\\n+\t\t    -e 's|%BUILD%.images.jtreg.lib.guice[A-Za-z0-9.-]*\\.jar.||g' \\\n+\t\t    -e 's|%BUILD%.images.jtreg.lib.hamcrest[A-Za-z0-9.-]*\\.jar.||g' \\\n+\t\t    -e 's|%BUILD%.images.jtreg.lib.jcommander[A-Za-z0-9.-]*\\.jar.||g' \\\n","filename":"test\/rerun\/RerunTest.gmk","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,3 @@\n-TESTS.jtreg += $(BUILDDIR)\/TestSanityTest.ok\n+# Test disabled following cleanup to `make sanity` in $(TOPDIR)\/make\/Makefile\n+# See CODETOOLS-7903111\n+# TESTS.jtreg += $(BUILDDIR)\/TestSanityTest.ok\n","filename":"test\/sanityTest\/SanityTest.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,3 +31,1 @@\n-\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/junit.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/testng.jar \\\n+\t\t$(ALL_JTREG_JARS) \\\n","filename":"test\/testng-junit\/TestNGJUnitTest.gmk","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,6 +40,0 @@\n-ifdef ANT\n-\tJAVA_HOME=$(JDKHOME) $(ANT) -f $(TESTDIR)\/vmopts\/build.xml \\\n-\t\t-Dbuild.jtreg=$(BUILDDIR)\/jtreg \\\n-\t\t-Djtreg.jar=$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n-\t\t-Dtestjdk=$(JDK8HOME)\n-endif\n","filename":"test\/vmopts\/TestVMOpts.gmk","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,70 +0,0 @@\n-<project name=\"vmopts-test\" default=\"go\" basedir=\"..\/..\/make\">\n-\n-    <property name=\"build.jtreg\" value=\"..\/build\/jtreg\"\/>\n-    <property name=\"vmopts.tests\" value=\"..\/test\/vmopts\"\/>\n-\n-    <property name=\"jtreg.jar\" value=\"dist\/lib\/jtreg.jar\"\/>\n-    <property name=\"testjdk\" value=\"\/tl\/jdk\/1.6.0\"\/>\n-\n-    <target name=\"go\" depends=\"defs,args.othervm,args.agentvm,fileset.othervm,fileset.agentvm\"\/>\n-\n-    <target name=\"defs\">\n-        <taskdef name=\"jtreg\"\n-            classname=\"com.sun.javatest.regtest.Main$$Ant\"\n-            classpath=\"${jtreg.jar}\"\n-        \/>\n-    <\/target>\n-\n-    <target name=\"args.othervm\">\n-        <jtreg\n-            jdk=\"${testjdk}\"\n-            workDir=\"${build.jtreg}\/ant-args.othervm\/work\"\n-            reportDir=\"${build.jtreg}\/ant-args.othervm\/report\"\n-            verbose=\"fail\" >\n-            <arg value=\"-Dfoo=bar\" \/>\n-            <arg value=\"-Xbootclasspath\/p:baz.jar\" \/>\n-            <arg file=\"${vmopts.tests}\" \/>\n-        <\/jtreg>\n-    <\/target>\n-\n-    <target name=\"args.agentvm\">\n-        <jtreg\n-            agentvm=\"true\"\n-            jdk=\"${testjdk}\"\n-            workDir=\"${build.jtreg}\/ant-args.agentvm\/work\"\n-            reportDir=\"${build.jtreg}\/ant-args.agentvm\/report\"\n-            verbose=\"fail\" >\n-            <arg value=\"-Dfoo=bar\" \/>\n-            <arg value=\"-Xbootclasspath\/p:baz.jar\" \/>\n-            <arg file=\"${vmopts.tests}\" \/>\n-        <\/jtreg>\n-    <\/target>\n-\n-    <target name=\"fileset.othervm\">\n-        <jtreg\n-            jdk=\"${testjdk}\"\n-            workDir=\"${build.jtreg}\/ant-fileset.othervm\/work\"\n-            reportDir=\"${build.jtreg}\/ant-fileset.othervm\/report\"\n-            dir=\"${vmopts.tests}\"\n-            verbose=\"fail\" >\n-            <arg value=\"-Dfoo=bar\" \/>\n-            <arg value=\"-Xbootclasspath\/p:baz.jar\" \/>\n-            <include name=\"**\"\/>\n-        <\/jtreg>\n-    <\/target>\n-\n-    <target name=\"fileset.agentvm\">\n-        <jtreg\n-            agentvm=\"true\"\n-            jdk=\"${testjdk}\"\n-            workDir=\"${build.jtreg}\/ant-fileset.agentvm\/work\"\n-            reportDir=\"${build.jtreg}\/ant-fileset.agentvm\/report\"\n-            dir=\"${vmopts.tests}\"\n-            verbose=\"fail\" >\n-            <arg value=\"-Dfoo=bar\" \/>\n-            <arg value=\"-Xbootclasspath\/p:baz.jar\" \/>\n-            <include name=\"**\"\/>\n-        <\/jtreg>\n-    <\/target>\n-\n-<\/project>\n","filename":"test\/vmopts\/build.xml","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"}]}