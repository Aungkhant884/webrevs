{"files":[{"patch":"@@ -0,0 +1,85 @@\n+# Testing `jtreg`\n+\n+This note describes the mechanisms used to test `jtreg` itself.\n+\n+The test infrastructure uses GNU make and makefiles.\n+\n+While `jtreg` is a test harness for running tests, it is not particularly well-suited\n+to hosting a general set of tests for testing the operation of the `jtreg` tool itself.\n+For a start, you would have recursive invocations of `jtreg`, an outer one to run the\n+tests and then often an inner invocation as the subject of a particular test.\n+Also, many tests of the `jtreg` tool are negative tests, designed to test whether\n+specific error conditions are detected and reported correctly, so we need an easy way\n+to check the outcome and output from an invocation of `jtreg`. However, makefile targets,\n+dependencies and rules provide a suitably flexible environment to support the code\n+needed to test jtreg.\n+\n+## Makefiles\n+\n+At the top level, all tests have an associated `make` target, which by convention\n+is of the form _testName_`.ok`. This corresponds to the path for a \"marker file\",\n+which is updated when the thest has been executed successfully.\n+\n+With only a few exceptions, the files for each test are grouped in a subdirectory\n+of the main `test` directory. Each such directory contains a `*.gmk` file defining\n+one or more `*.ok` targets for tests in that directory. The `*.ok` targets are added\n+into a cumulative `TESTS.jtreg` variable, so that the top-level Makefile can have\n+code of the form:\n+\n+```makefile\n+include $(TESTDIR)\/*\/*.gmk      # include all the tests' makefiles\n+\n+test: $(TESTS.jtreg)            # the main test target depends on all the individual test targets\n+\n+```\n+\n+Each `*.ok` target for a test specifies any dependencies, so that the test will\n+be rerun if any of the dependencies are updated and become newer than the target itself.\n+\n+The rules for a test target form a short makefile \"script\" that executes the\n+steps of the test. The last rule typically updates the `*.ok` target, with\n+a command like\n+\n+```makefile\n+        echo \"Test passed at `date`\" > $@\n+```\n+\n+This rule will only be executed if all the preceding steps succeed. implying that\n+the test has behaved as expected.  If any part of the test execution fails, the\n+corresponding rule should return a non-zero exit code.\n+\n+If a test depends on resources or environment that may or may not be available,\n+the test target can be conditionally included in `TESTS.jtreg` using `ifdef` or similar\n+mechanisms.\n+\n+Any individual test can be run in isolation by running `make` with the full\n+absolute pathname for the marker file (that is, the `*.ok` target fort the test)\n+as the target to be built.\n+\n+## Tests\n+\n+Tests of `jtreg` functionality generally come in one of two forms:\n+\n+1. The test executes `jtreg` on a small associated test suite, and verifies the output\n+   is as expected. It may be the case that some tests in the test suite are expected\n+   to fail, and so it is common the catch the output from `jtreg` written to the console\n+   stream and to `grep` it for the expected results.\n+\n+   Some tests may use `*.ok` targets that encode `agentvm` or `othervm` in their name\n+   and then use makefile macros to extract that token from the target name, and use\n+   it to construct an option to pass to `jtreg`. This allows one set of rules to\n+   be used to run `jtreg` in the two different modes.\n+\n+    * _Example_: See `test\/libBuildArgs\/LibBuildArgsTest.gmk`\n+\n+2. The test is a standalone Java program to be compiled and executed as a unit\n+   test for some specific functionality within jtreg.\n+\n+   * _Example:_ See `test\/osTest.OSTest.gmk` and `test\/osTest.OSTest.gmk`\n+\n+   * _Note:_ now that jtreg relies on using JDK >= 11, it may be possible to use\n+     the \"source-code launcher\" feature introduced in JDK 9 to compile and run\n+     some of these tests.\n+\n+\n+\n","filename":"test\/README.md","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+# Tests in `test\/share\/basic`\n+\n+The tests in this test suite are designed to exercise the basic abilities of `jtreg` to\n+find, execute, and report on a full variety of tests. The tests also contain\n+a variety of errors, to help verify they are correctly handled by `jtreg`.\n+\n+Note that the tests in this test suite have atypical and very stylized names and titles.\n+The title of each test in the test suite is the expected text of the status message\n+when the test executes as expected. The tests are grouped according to the primary\n+action in the test, and the filename is a short description of the primary\n+characteristic of the test.  The underlying intent is that when tests do _not_\n+execute as expected, a review of the generated report files will help identify\n+any unexpected results, such as a test named `Pass.java` in the list of tests that failed,\n+or a test named `Fail.java` in the list of tests that passed.\n+\n+If you add new tests into this collection, you will also need to update\n+the code in the method `setExpectedTestStats` in `test\/basic\/Basic.java`.\n+For each new action that you add, you must update the count of expected number\n+of such actions, and the count for the expected outcome.\n+\n+This test suite is used in the following tests\n+\n+* `test\/basic\/Basic.gmk`\n+        -- tests the ability to find and execute tests, in both `agentvm` and `othervm` modes\n+\n+* `test\/basic\/ReportOnlyTest.gmk`\n+        -- tests the ability to report on previously executed tests\n+\n+* `test\/statsTests\/StatsTests.gmk`\n+        -- tests the ability to format the statistics reported at the end of a run\n+\n+If you add new tests into this collection you will probably have to update the\n+makefile rules for the first two, and you may have to update the makefile rules\n+for the third, depending on what kind of new test you add.\n\\ No newline at end of file\n","filename":"test\/share\/basic\/README.md","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"}]}