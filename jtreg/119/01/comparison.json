{"files":[{"patch":"@@ -1,696 +0,0 @@\n-\/*\n- * Copyright (c) 1995, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javatest.regtest.tool;\n-\n-\n-\/* ============================================================================\n- *\n- * This is a minimally modified copy of Runtime.Version from JDK 11,\n- * for the sole purpose of parsing a JDK version string.\n- *\n- * When jtreg is updated to use JDK 9 or later as a baseline JDK, this code\n- * should be replaced with direct use of {@code java.lang.Runtime.Version}.\n- *\n- * ============================================================================ *\/\n-\n-\n-import java.math.BigInteger;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-\/**\n- * A representation of a version string for an implementation of the\n- * Java&nbsp;SE Platform.  A version string consists of a version number\n- * optionally followed by pre-release and build information.\n- *\n- * <h2><a id=\"verNum\">Version numbers<\/a><\/h2>\n- *\n- * <p> A <em>version number<\/em>, {@code $VNUM}, is a non-empty sequence of\n- * elements separated by period characters (U+002E).  An element is either\n- * zero, or an unsigned integer numeral without leading zeros.  The final\n- * element in a version number must not be zero.  When an element is\n- * incremented, all subsequent elements are removed.  The format is: <\/p>\n- *\n- * <blockquote><pre>\n- * [1-9][0-9]*((\\.0)*\\.[1-9][0-9]*)*\n- * <\/pre><\/blockquote>\n- *\n- * <p> The sequence may be of arbitrary length but the first four elements\n- * are assigned specific meanings, as follows:<\/p>\n- *\n- * <blockquote><pre>\n- * $FEATURE.$INTERIM.$UPDATE.$PATCH\n- * <\/pre><\/blockquote>\n- *\n- * <ul>\n- *\n- * <li><p> <a id=\"FEATURE\">{@code $FEATURE}<\/a> &#x2014; The\n- * feature-release counter, incremented for every feature release\n- * regardless of release content.  Features may be added in a feature\n- * release; they may also be removed, if advance notice was given at least\n- * one feature release ahead of time.  Incompatible changes may be made\n- * when justified. <\/p><\/li>\n- *\n- * <li><p> <a id=\"INTERIM\">{@code $INTERIM}<\/a> &#x2014; The\n- * interim-release counter, incremented for non-feature releases that\n- * contain compatible bug fixes and enhancements but no incompatible\n- * changes, no feature removals, and no changes to standard APIs.\n- * <\/p><\/li>\n- *\n- * <li><p> <a id=\"UPDATE\">{@code $UPDATE}<\/a> &#x2014; The update-release\n- * counter, incremented for compatible update releases that fix security\n- * issues, regressions, and bugs in newer features. <\/p><\/li>\n- *\n- * <li><p> <a id=\"PATCH\">{@code $PATCH}<\/a> &#x2014; The emergency\n- * patch-release counter, incremented only when it's necessary to produce\n- * an emergency release to fix a critical issue. <\/p><\/li>\n- *\n- * <\/ul>\n- *\n- * <p> The fifth and later elements of a version number are free for use by\n- * platform implementors, to identify implementor-specific patch\n- * releases. <\/p>\n- *\n- * <p> A version number never has trailing zero elements.  If an element\n- * and all those that follow it logically have the value zero then all of\n- * them are omitted. <\/p>\n- *\n- * <p> The sequence of numerals in a version number is compared to another\n- * such sequence in numerical, pointwise fashion; <em>e.g.<\/em>, {@code\n- * 10.0.4} is less than {@code 10.1.2}.  If one sequence is shorter than\n- * another then the missing elements of the shorter sequence are considered\n- * to be less than the corresponding elements of the longer sequence;\n- * <em>e.g.<\/em>, {@code 10.0.2} is less than {@code 10.0.2.1}. <\/p>\n- *\n- * <h2><a id=\"verStr\">Version strings<\/a><\/h2>\n- *\n- * <p> A <em>version string<\/em>, {@code $VSTR}, is a version number {@code\n- * $VNUM}, as described above, optionally followed by pre-release and build\n- * information, in one of the following formats: <\/p>\n- *\n- * <blockquote><pre>\n- *     $VNUM(-$PRE)?\\+$BUILD(-$OPT)?\n- *     $VNUM-$PRE(-$OPT)?\n- *     $VNUM(+-$OPT)?\n- * <\/pre><\/blockquote>\n- *\n- * <p> where: <\/p>\n- *\n- * <ul>\n- *\n- * <li><p> <a id=\"pre\">{@code $PRE}<\/a>, matching {@code ([a-zA-Z0-9]+)}\n- * &#x2014; A pre-release identifier.  Typically {@code ea}, for a\n- * potentially unstable early-access release under active development, or\n- * {@code internal}, for an internal developer build. <\/p><\/li>\n- *\n- * <li><p> <a id=\"build\">{@code $BUILD}<\/a>, matching {@code\n- * (0|[1-9][0-9]*)} &#x2014; The build number, incremented for each promoted\n- * build.  {@code $BUILD} is reset to {@code 1} when any portion of {@code\n- * $VNUM} is incremented. <\/p><\/li>\n- *\n- * <li><p> <a id=\"opt\">{@code $OPT}<\/a>, matching {@code ([-a-zA-Z0-9.]+)}\n- * &#x2014; Additional build information, if desired.  In the case of an\n- * {@code internal} build this will often contain the date and time of the\n- * build. <\/p><\/li>\n- *\n- * <\/ul>\n- *\n- * <p> A version string {@code 10-ea} matches {@code $VNUM = \"10\"} and\n- * {@code $PRE = \"ea\"}.  The version string {@code 10+-ea} matches\n- * {@code $VNUM = \"10\"} and {@code $OPT = \"ea\"}. <\/p>\n- *\n- * <p> When comparing two version strings, the value of {@code $OPT}, if\n- * present, may or may not be significant depending on the chosen\n- * comparison method.  The comparison methods {@link #compareTo(RuntimeVersion)\n- * compareTo()} and {@link #compareToIgnoreOptional(RuntimeVersion)\n- * compareToIgnoreOptional()} should be used consistently with the\n- * corresponding methods {@link #equals(Object) equals()} and {@link\n- * #equalsIgnoreOptional(Object) equalsIgnoreOptional()}.  <\/p>\n- *\n- * <p> A <em>short version string<\/em>, {@code $SVSTR}, often useful in\n- * less formal contexts, is a version number optionally followed by a\n- * pre-release identifier:<\/p>\n- *\n- * <blockquote><pre>\n- *     $VNUM(-$PRE)?\n- * <\/pre><\/blockquote>\n- *\n- * <p>This is a <a href=\".\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code RuntimeVersion} may have unpredictable results and should be avoided.\n- * <\/p>\n- *\n- * @since  9\n- *\/\n-public final class RuntimeVersion\n-        implements Comparable<RuntimeVersion>\n-{\n-    private final List<Integer> version;\n-    private final Optional<String> pre;\n-    private final Optional<Integer> build;\n-    private final Optional<String>  optional;\n-\n-    \/*\n-     * List of version number components passed to this constructor MUST\n-     * be at least unmodifiable (ideally immutable). In the case on an\n-     * unmodifiable list, the caller MUST hand the list over to this\n-     * constructor and never change the underlying list.\n-     *\/\n-    private RuntimeVersion(List<Integer> unmodifiableListOfVersions,\n-                    Optional<String> pre,\n-                    Optional<Integer> build,\n-                    Optional<String> optional)\n-    {\n-        this.version = unmodifiableListOfVersions;\n-        this.pre = pre;\n-        this.build = build;\n-        this.optional = optional;\n-    }\n-\n-    \/**\n-     * Parses the given string as a valid\n-     * <a href=\"#verStr\">version string<\/a> containing a\n-     * <a href=\"#verNum\">version number<\/a> followed by pre-release and\n-     * build information.\n-     *\n-     * @param  s\n-     *         A string to interpret as a version\n-     *\n-     * @throws  IllegalArgumentException\n-     *          If the given string cannot be interpreted as a valid\n-     *          version\n-     *\n-     * @throws  NullPointerException\n-     *          If the given string is {@code null}\n-     *\n-     * @throws  NumberFormatException\n-     *          If an element of the version number or the build number\n-     *          cannot be represented as an {@link Integer}\n-     *\n-     * @return  The RuntimeVersion of the given string\n-     *\/\n-    public static RuntimeVersion parse(String s) {\n-        if (s == null)\n-            throw new NullPointerException();\n-\n-        \/\/ Shortcut to avoid initializing VersionPattern when creating\n-        \/\/ feature-version constants during startup\n-        if (isSimpleNumber(s)) {\n-            return new RuntimeVersion(Arrays.asList(Integer.parseInt(s)),\n-                    Optional.empty(), Optional.empty(), Optional.empty());\n-        }\n-        Matcher m = VersionPattern.VSTR_PATTERN.matcher(s);\n-        if (!m.matches())\n-            throw new IllegalArgumentException(\"Invalid version string: '\"\n-                    + s + \"'\");\n-\n-        \/\/ $VNUM is a dot-separated list of integers of arbitrary length\n-        String[] split = m.group(VersionPattern.VNUM_GROUP).split(\"\\\\.\");\n-        Integer[] version = new Integer[split.length];\n-        for (int i = 0; i < split.length; i++) {\n-            version[i] = Integer.parseInt(split[i]);\n-        }\n-\n-        Optional<String> pre = Optional.ofNullable(\n-                m.group(VersionPattern.PRE_GROUP));\n-\n-        String b = m.group(VersionPattern.BUILD_GROUP);\n-        \/\/ $BUILD is an integer\n-        Optional<Integer> build = (b == null)\n-                ? Optional.empty()\n-                : Optional.of(Integer.parseInt(b));\n-\n-        Optional<String> optional = Optional.ofNullable(\n-                m.group(VersionPattern.OPT_GROUP));\n-\n-        \/\/ empty '+'\n-        if (!build.isPresent()) {\n-            if (m.group(VersionPattern.PLUS_GROUP) != null) {\n-                if (optional.isPresent()) {\n-                    if (pre.isPresent())\n-                        throw new IllegalArgumentException(\"'+' found with\"\n-                                + \" pre-release and optional components:'\" + s\n-                                + \"'\");\n-                } else {\n-                    throw new IllegalArgumentException(\"'+' found with neither\"\n-                            + \" build or optional components: '\" + s + \"'\");\n-                }\n-            } else {\n-                if (optional.isPresent() && !pre.isPresent()) {\n-                    throw new IllegalArgumentException(\"optional component\"\n-                            + \" must be preceeded by a pre-release component\"\n-                            + \" or '+': '\" + s + \"'\");\n-                }\n-            }\n-        }\n-        return new RuntimeVersion(Arrays.asList(version), pre, build, optional);\n-    }\n-\n-    private static boolean isSimpleNumber(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char c = s.charAt(i);\n-            char lowerBound = (i > 0) ? '0' : '1';\n-            if (c < lowerBound || c > '9') {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    \/**\n-     * Returns the value of the <a href=\"#FEATURE\">feature<\/a> element of\n-     * the version number.\n-     *\n-     * @return The value of the feature element\n-     *\n-     * @since 10\n-     *\/\n-    public int feature() {\n-        return version.get(0);\n-    }\n-\n-    \/**\n-     * Returns the value of the <a href=\"#INTERIM\">interim<\/a> element of\n-     * the version number, or zero if it is absent.\n-     *\n-     * @return The value of the interim element, or zero\n-     *\n-     * @since 10\n-     *\/\n-    public int interim() {\n-        return (version.size() > 1 ? version.get(1) : 0);\n-    }\n-\n-    \/**\n-     * Returns the value of the <a href=\"#UPDATE\">update<\/a> element of the\n-     * version number, or zero if it is absent.\n-     *\n-     * @return The value of the update element, or zero\n-     *\n-     * @since 10\n-     *\/\n-    public int update() {\n-        return (version.size() > 2 ? version.get(2) : 0);\n-    }\n-\n-    \/**\n-     * Returns the value of the <a href=\"#PATCH\">patch<\/a> element of the\n-     * version number, or zero if it is absent.\n-     *\n-     * @return The value of the patch element, or zero\n-     *\n-     * @since 10\n-     *\/\n-    public int patch() {\n-        return (version.size() > 3 ? version.get(3) : 0);\n-    }\n-\n-    \/**\n-     * Returns the value of the major element of the version number.\n-     *\n-     * @deprecated As of Java&nbsp;SE 10, the first element of a version\n-     * number is not the major-release number but the feature-release\n-     * counter, incremented for every time-based release.  Use the {@link\n-     * #feature()} method in preference to this method.  For compatibility,\n-     * this method returns the value of the <a href=\"#FEATURE\">feature<\/a>\n-     * element.\n-     *\n-     * @return The value of the feature element\n-     *\/\n-    @Deprecated(\/*since = \"10\"*\/)\n-    public int major() {\n-        return feature();\n-    }\n-\n-    \/**\n-     * Returns the value of the minor element of the version number, or\n-     * zero if it is absent.\n-     *\n-     * @deprecated As of Java&nbsp;SE 10, the second element of a version\n-     * number is not the minor-release number but the interim-release\n-     * counter, incremented for every interim release.  Use the {@link\n-     * #interim()} method in preference to this method.  For compatibility,\n-     * this method returns the value of the <a href=\"#INTERIM\">interim<\/a>\n-     * element, or zero if it is absent.\n-     *\n-     * @return The value of the interim element, or zero\n-     *\/\n-    @Deprecated(\/*since = \"10\"*\/)\n-    public int minor() {\n-        return interim();\n-    }\n-\n-    \/**\n-     * Returns the value of the security element of the version number, or\n-     * zero if it is absent.\n-     *\n-     * @deprecated As of Java&nbsp;SE 10, the third element of a version\n-     * number is not the security level but the update-release counter,\n-     * incremented for every update release.  Use the {@link #update()}\n-     * method in preference to this method.  For compatibility, this method\n-     * returns the value of the <a href=\"#UPDATE\">update<\/a> element, or\n-     * zero if it is absent.\n-     *\n-     * @return  The value of the update element, or zero\n-     *\/\n-    @Deprecated(\/*since = \"10\"*\/)\n-    public int security() {\n-        return update();\n-    }\n-\n-    \/**\n-     * Returns an unmodifiable {@link java.util.List List} of the integers\n-     * represented in the <a href=\"#verNum\">version number<\/a>.\n-     * The {@code List} always contains at least one element corresponding to\n-     * the <a href=\"#FEATURE\">feature version number<\/a>.\n-     *\n-     * @return  An unmodifiable list of the integers\n-     *          represented in the version number\n-     *\/\n-    public List<Integer> version() {\n-        return version;\n-    }\n-\n-    \/**\n-     * Returns the optional <a href=\"#pre\">pre-release<\/a> information.\n-     *\n-     * @return  The optional pre-release information as a String\n-     *\/\n-    public Optional<String> pre() {\n-        return pre;\n-    }\n-\n-    \/**\n-     * Returns the <a href=\"#build\">build number<\/a>.\n-     *\n-     * @return  The optional build number.\n-     *\/\n-    public Optional<Integer> build() {\n-        return build;\n-    }\n-\n-    \/**\n-     * Returns <a href=\"#opt\">optional<\/a> additional identifying build\n-     * information.\n-     *\n-     * @return  Additional build information as a String\n-     *\/\n-    public Optional<String> optional() {\n-        return optional;\n-    }\n-\n-    \/**\n-     * Compares this version to another.\n-     *\n-     * <p> Each of the components in the <a href=\"#verStr\">version<\/a> is\n-     * compared in the following order of precedence: version numbers,\n-     * pre-release identifiers, build numbers, optional build information.\n-     * <\/p>\n-     *\n-     * <p> Comparison begins by examining the sequence of version numbers.\n-     * If one sequence is shorter than another, then the missing elements\n-     * of the shorter sequence are considered to be less than the\n-     * corresponding elements of the longer sequence. <\/p>\n-     *\n-     * <p> A version with a pre-release identifier is always considered to\n-     * be less than a version without one.  Pre-release identifiers are\n-     * compared numerically when they consist only of digits, and\n-     * lexicographically otherwise.  Numeric identifiers are considered to\n-     * be less than non-numeric identifiers.  <\/p>\n-     *\n-     * <p> A version without a build number is always less than one with a\n-     * build number; otherwise build numbers are compared numerically. <\/p>\n-     *\n-     * <p> The optional build information is compared lexicographically.\n-     * During this comparison, a version with optional build information is\n-     * considered to be greater than a version without one. <\/p>\n-     *\n-     * @param  obj\n-     *         The object to be compared\n-     *\n-     * @return  A negative integer, zero, or a positive integer if this\n-     *          {@code RuntimeVersion} is less than, equal to, or greater than the\n-     *          given {@code RuntimeVersion}\n-     *\n-     * @throws  NullPointerException\n-     *          If the given object is {@code null}\n-     *\/\n-    @Override\n-    public int compareTo(RuntimeVersion obj) {\n-        return compare(obj, false);\n-    }\n-\n-    \/**\n-     * Compares this version to another disregarding optional build\n-     * information.\n-     *\n-     * <p> Two versions are compared by examining the version string as\n-     * described in {@link #compareTo(RuntimeVersion)} with the exception that the\n-     * optional build information is always ignored. <\/p>\n-     *\n-     * <p> This method provides ordering which is consistent with\n-     * {@code equalsIgnoreOptional()}. <\/p>\n-     *\n-     * @param  obj\n-     *         The object to be compared\n-     *\n-     * @return  A negative integer, zero, or a positive integer if this\n-     *          {@code RuntimeVersion} is less than, equal to, or greater than the\n-     *          given {@code RuntimeVersion}\n-     *\n-     * @throws  NullPointerException\n-     *          If the given object is {@code null}\n-     *\/\n-    public int compareToIgnoreOptional(RuntimeVersion obj) {\n-        return compare(obj, true);\n-    }\n-\n-    private int compare(RuntimeVersion obj, boolean ignoreOpt) {\n-        if (obj == null)\n-            throw new NullPointerException();\n-\n-        int ret = compareVersion(obj);\n-        if (ret != 0)\n-            return ret;\n-\n-        ret = comparePre(obj);\n-        if (ret != 0)\n-            return ret;\n-\n-        ret = compareBuild(obj);\n-        if (ret != 0)\n-            return ret;\n-\n-        if (!ignoreOpt)\n-            return compareOptional(obj);\n-\n-        return 0;\n-    }\n-\n-    private int compareVersion(RuntimeVersion obj) {\n-        int size = version.size();\n-        int oSize = obj.version().size();\n-        int min = Math.min(size, oSize);\n-        for (int i = 0; i < min; i++) {\n-            int val = version.get(i);\n-            int oVal = obj.version().get(i);\n-            if (val != oVal)\n-                return val - oVal;\n-        }\n-        return size - oSize;\n-    }\n-\n-    private int comparePre(RuntimeVersion obj) {\n-        Optional<String> oPre = obj.pre();\n-        if (!pre.isPresent()) {\n-            if (oPre.isPresent())\n-                return 1;\n-        } else {\n-            if (!oPre.isPresent())\n-                return -1;\n-            String val = pre.get();\n-            String oVal = oPre.get();\n-            if (val.matches(\"\\\\d+\")) {\n-                return (oVal.matches(\"\\\\d+\")\n-                        ? (new BigInteger(val)).compareTo(new BigInteger(oVal))\n-                        : -1);\n-            } else {\n-                return (oVal.matches(\"\\\\d+\")\n-                        ? 1\n-                        : val.compareTo(oVal));\n-            }\n-        }\n-        return 0;\n-    }\n-\n-    private int compareBuild(RuntimeVersion obj) {\n-        Optional<Integer> oBuild = obj.build();\n-        if (oBuild.isPresent()) {\n-            return (build.isPresent()\n-                    ? build.get().compareTo(oBuild.get())\n-                    : -1);\n-        } else if (build.isPresent()) {\n-            return 1;\n-        }\n-        return 0;\n-    }\n-\n-    private int compareOptional(RuntimeVersion obj) {\n-        Optional<String> oOpt = obj.optional();\n-        if (!optional.isPresent()) {\n-            if (oOpt.isPresent())\n-                return -1;\n-        } else {\n-            if (!oOpt.isPresent())\n-                return 1;\n-            return optional.get().compareTo(oOpt.get());\n-        }\n-        return 0;\n-    }\n-\n-    \/**\n-     * Returns a string representation of this version.\n-     *\n-     * @return  The version string\n-     *\/\n-    @Override\n-    public String toString() {\n-        StringBuilder sb\n-                = new StringBuilder(version.stream()\n-                .map(Object::toString)\n-                .collect(Collectors.joining(\".\")));\n-\n-        pre.ifPresent(v -> sb.append(\"-\").append(v));\n-\n-        if (build.isPresent()) {\n-            sb.append(\"+\").append(build.get());\n-            if (optional.isPresent())\n-                sb.append(\"-\").append(optional.get());\n-        } else {\n-            if (optional.isPresent()) {\n-                sb.append(pre.isPresent() ? \"-\" : \"+-\");\n-                sb.append(optional.get());\n-            }\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    \/**\n-     * Determines whether this {@code RuntimeVersion} is equal to another object.\n-     *\n-     * <p> Two {@code RuntimeVersion}s are equal if and only if they represent the\n-     * same version string.\n-     *\n-     * @param  obj\n-     *         The object to which this {@code RuntimeVersion} is to be compared\n-     *\n-     * @return  {@code true} if, and only if, the given object is a {@code\n-     *          RuntimeVersion} that is identical to this {@code RuntimeVersion}\n-     *\n-     *\/\n-    @Override\n-    public boolean equals(Object obj) {\n-        boolean ret = equalsIgnoreOptional(obj);\n-        if (!ret)\n-            return false;\n-\n-        RuntimeVersion that = (RuntimeVersion)obj;\n-        return (this.optional().equals(that.optional()));\n-    }\n-\n-    \/**\n-     * Determines whether this {@code RuntimeVersion} is equal to another\n-     * disregarding optional build information.\n-     *\n-     * <p> Two {@code RuntimeVersion}s are equal if and only if they represent the\n-     * same version string disregarding the optional build information.\n-     *\n-     * @param  obj\n-     *         The object to which this {@code RuntimeVersion} is to be compared\n-     *\n-     * @return  {@code true} if, and only if, the given object is a {@code\n-     *          RuntimeVersion} that is identical to this {@code RuntimeVersion}\n-     *          ignoring the optional build information\n-     *\n-     *\/\n-    public boolean equalsIgnoreOptional(Object obj) {\n-        if (this == obj)\n-            return true;\n-        if (!(obj instanceof RuntimeVersion))\n-            return false;\n-\n-        RuntimeVersion that = (RuntimeVersion)obj;\n-        return (this.version().equals(that.version())\n-                && this.pre().equals(that.pre())\n-                && this.build().equals(that.build()));\n-    }\n-\n-    \/**\n-     * Returns the hash code of this version.\n-     *\n-     * @return  The hashcode of this version\n-     *\/\n-    @Override\n-    public int hashCode() {\n-        int h = 1;\n-        int p = 17;\n-\n-        h = p * h + version.hashCode();\n-        h = p * h + pre.hashCode();\n-        h = p * h + build.hashCode();\n-        h = p * h + optional.hashCode();\n-\n-        return h;\n-    }\n-}\n-\n-class VersionPattern {\n-    \/\/ $VNUM(-$PRE)?(\\+($BUILD)?(\\-$OPT)?)?\n-    \/\/ RE limits the format of version strings\n-    \/\/ ([1-9][0-9]*(?:(?:\\.0)*\\.[1-9][0-9]*)*)(?:-([a-zA-Z0-9]+))?(?:(\\+)(0|[1-9][0-9]*)?)?(?:-([-a-zA-Z0-9.]+))?\n-\n-    private static final String VNUM\n-            = \"(?<VNUM>[1-9][0-9]*(?:(?:\\\\.0)*\\\\.[1-9][0-9]*)*)\";\n-    private static final String PRE      = \"(?:-(?<PRE>[a-zA-Z0-9]+))?\";\n-    private static final String BUILD\n-            = \"(?:(?<PLUS>\\\\+)(?<BUILD>0|[1-9][0-9]*)?)?\";\n-    private static final String OPT      = \"(?:-(?<OPT>[-a-zA-Z0-9.]+))?\";\n-    private static final String VSTR_FORMAT = VNUM + PRE + BUILD + OPT;\n-\n-    static final Pattern VSTR_PATTERN = Pattern.compile(VSTR_FORMAT);\n-\n-    static final String VNUM_GROUP  = \"VNUM\";\n-    static final String PRE_GROUP   = \"PRE\";\n-    static final String PLUS_GROUP  = \"PLUS\";\n-    static final String BUILD_GROUP = \"BUILD\";\n-    static final String OPT_GROUP   = \"OPT\";\n-}\n\\ No newline at end of file\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/RuntimeVersion.java","additions":0,"deletions":696,"binary":false,"changes":696,"status":"deleted"},{"patch":"@@ -76,1 +76,1 @@\n-            RuntimeVersion v = RuntimeVersion.parse(versionString);\n+            Runtime.Version v = Runtime.Version.parse(versionString);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Version.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}