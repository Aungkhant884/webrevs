{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.util.List;\n+import java.util.stream.Collectors;\n@@ -34,0 +36,2 @@\n+import org.testng.IMethodInstance;\n+import org.testng.IMethodInterceptor;\n@@ -40,0 +44,1 @@\n+import org.testng.TestNGException;\n@@ -85,0 +90,1 @@\n+        String testQuery = System.getProperty(\"test.query\");\n@@ -90,0 +96,3 @@\n+        if (testQuery != null) {\n+            testng.setMethodInterceptor(new FilterMethods(className, testQuery));\n+        }\n@@ -242,0 +251,26 @@\n+\n+    private static class FilterMethods implements IMethodInterceptor {\n+\n+        private final String testClass;\n+        private final String testQuery;\n+\n+        public FilterMethods(String testClass, String testQuery) {\n+            this.testClass = testClass;\n+            this.testQuery = testQuery;\n+        }\n+\n+        @Override\n+        public List<IMethodInstance> intercept(List<IMethodInstance> ms, ITestContext c) {\n+            List<IMethodInstance> result =\n+                    ms.stream()\n+                      .filter(mi -> testQuery.equals(mi.getMethod()\n+                                                       .getMethodName()))\n+                      .collect(Collectors.toList());\n+\n+            if (result.isEmpty()) {\n+                throw new TestNGException(\"Could not find method with name [\" + testQuery + \"] in class [\" + testClass + \"]\");\n+            }\n+\n+            return result;\n+        }\n+    }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestNGRunner.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"","filename":"test\/testngQueryTest\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/4499340\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,263 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#----------------------------------------------------------------------\n+#\n+# Execute all (6) test methods in the test suite\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.all.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/ \\\n+\t\t > $(@:%.ok=%)\/jt.log 2>&1\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m11(): success test Test1.m12(): success test Test1.m13(): success test Test2.m21(): success test Test2.m22(): success test Test2.m23(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n+\tfi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.all.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Execute a single specific method (Test1.m12) using the query syntax  Test1.java?m12\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.m12.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n+\t\t > $(@:%.ok=%)\/jt.log 2>&1\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m12(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n+\tfi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.m12.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Execute a mixture of 4 tests:\n+# - a single specific method (Test1.m12) using the query syntax  Test1.java?m12\n+# - all (3) test methods in Test2.java\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.m12.Test2.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test2.java \\\n+\t\t > $(@:%.ok=%)\/jt.log 2>&1\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m12(): success test Test2.m21(): success test Test2.m22(): success test Test2.m23(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n+\tfi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.m12.Test2.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Execute tests when duplicates are given: last one wins (m13, m12)\n+# See related test for the reverse order\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.m13.m12.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n+\t\t > $(@:%.ok=%)\/jt.log 2>&1\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m12(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n+\tfi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.m13.m12.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Execute tests when duplicates are given: last one wins (m12, m13)\n+# See related test for the reverse order\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.m12.m13.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n+\t\t > $(@:%.ok=%)\/jt.log 2>&1\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m13(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n+\tfi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.m12.m13.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Execute tests when duplicates are given: last one wins (m13, all)\n+# See related test for the reverse order\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.m13.all.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java \\\n+\t\t > $(@:%.ok=%)\/jt.log 2>&1\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m11(): success test Test1.m12(): success test Test1.m13(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n+\tfi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.m13.all.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Execute tests when duplicates are given: last one wins (all, m13)\n+# See related test for the reverse order\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.all.m13.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n+\t\t > $(@:%.ok=%)\/jt.log 2>&1\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m13(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n+\tfi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.all.m13.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Invalid use of query\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.invalidQuery.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c?m13 \\\n+\t\t\t> $(@:%.ok=%)\/jt.log 2>&1 || \\\n+\t\ttrue \"non-zero exit code from jtreg intentionally ignored\"\n+\t$(GREP) -s \"Error: Invalid use of query component: a\/b\/c?m13\" $(@:%.ok=%)\/jt.log\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.invalidQuery.ok\n+\n+\n+#----------------------------------------------------------------------\n+#\n+# Invalid method name\n+\n+$(BUILDTESTDIR)\/TestNGQueryTest.invalidMethod.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%)\n+\t$(MKDIR) $(@:%.ok=%)\n+\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-va \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m14 \\\n+\t\t\t> $(@:%.ok=%)\/jt.log 2>&1 || \\\n+\t\ttrue \"non-zero exit code from jtreg intentionally ignored\"\n+\t$(GREP) -s 'Could not find method with name \\[m14] in class \\[Test1]' $(@:%.ok=%)\/jt.log\n+\t$(GREP) -s \"TEST RESULT: Failed. Execution failed: .*TestNGException: Could not find method with name\" $(@:%.ok=%)\/jt.log\n+\techo $@ passed at `date` > $@\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.invalidMethod.ok\n+\n+#----------------------------------------------------------------------\n+#\n+# Convenience target\n+\n+testng-query-tests: \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.all.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.m12.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.m12.Test2.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.m13.m12.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.m12.m13.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.m13.all.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.all.m13.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.invalidQuery.ok \\\n+    $(BUILDTESTDIR)\/TestNGQueryTest.invalidMethod.ok\n","filename":"test\/testngQueryTest\/TestNGQueryTest.gmk","additions":263,"deletions":0,"binary":false,"changes":263,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-JUnit.dirs = .\n\\ No newline at end of file\n+TestNG.dirs = .\n","filename":"test\/testngQueryTest\/a\/b\/c\/TEST.properties","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/junitQueryTest\/a\/b\/c\/TEST.properties","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import org.junit.jupiter.api.Test;\n+import org.testng.annotations.Test;\n@@ -45,1 +45,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/testngQueryTest\/a\/b\/c\/Test1.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/junitQueryTest\/a\/b\/c\/Test1.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import org.junit.jupiter.api.Test;\n+import org.testng.annotations.Test;\n@@ -45,1 +45,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/testngQueryTest\/a\/b\/c\/Test2.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/junitQueryTest\/a\/b\/c\/Test2.java","status":"copied"}]}