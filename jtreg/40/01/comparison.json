{"files":[{"patch":"@@ -43,8 +43,0 @@\n-\n-    - name: 'Upload artifact ${{ github.event.repository.name }}-build-${{ github.sha }}'\n-      if: always()\n-      uses: actions\/upload-artifact@v2\n-      with:\n-        name: ${{ github.event.repository.name }}-build-${{ github.sha }}\n-        path: |\n-          build\/images\/jtreg\n","filename":".github\/workflows\/test.yml","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -9,2 +9,2 @@\n-Currently Maintained By:\n-    Jonathan Gibbons\n+Currently Maintained As Part Of:\n+    OpenJDK CodeTools Project\n@@ -12,1 +12,1 @@\n-Other Contributors:\n+Other Early Contributors:\n@@ -16,0 +16,1 @@\n+    John Rose\n@@ -19,0 +20,4 @@\n+Since open-sourcing the code in 2006, and the use of first Mercurial and\n+subsequently Git, the Contributors are tracked in the SCM metadata.\n+For all recent contributors and contributions, see `git shortlog` or `git log`.\n+\n","filename":"CONTRIBUTORS","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-used to build jtreg with the `--jdk` command-line option. It must be JDK 8 or later.\n+used to build jtreg with the `--jdk` command-line option. It must be JDK 11 or later.\n@@ -58,1 +58,1 @@\n-* JDK 1.8 (or better):\n+* JDK 11 (or better):\n@@ -60,1 +60,1 @@\n-    equivalent to JDK 8 or later.\n+    equivalent to JDK 11 or later.\n@@ -80,2 +80,4 @@\n-    See <http:\/\/junit.org\/>. The recommended version is currently JUnit 4.13.2.\n-    JUnit has a dependency on Hamcrest. The recommended version is currently 2.2.\n+    See <http:\/\/junit.org\/>. The recommended version is currently JUnit 5.8.1.\n+    JUnit is integrated via its `junit-platform-console-standalone` artefact.\n+    This \"uber\" JAR contains all required dependencies, including JUnit 4.13.2\n+    and Hamcrest 1.3.\n@@ -97,12 +99,0 @@\n-* JDK 1.5:\n-    This is used when running some of the tests. Set `JDK5HOME` to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-* JDK 1.6:\n-    This is used when running some of the tests. Set `JDK6HOME` to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-* JDK 1.7:\n-    This is used when running some of the tests. Set `JDK7HOME` to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n","filename":"README.md","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * Checks the value of System.getProperty(\"os.version\") against an expected value.\n+ * For more info, see\n+ * JDK-8253702: BigSur version number reported as 10.16, should be 11.nn\n+ * https:\/\/bugs.openjdk.java.net\/browse\/JDK-8253702\n+ *\/\n+public class CheckJavaOSVersion {\n+    public static void main(String... args) {\n+        checkJavaOSVersion(args[0]);\n+    }\n+\n+    private static void checkJavaOSVersion(String expectVersion) {\n+        String osVersion = System.getProperty(\"os.version\");\n+        if (!osVersion.equals(expectVersion)) {\n+            System.err.println(\"The version of JDK you are using does not report the OS version correctly.\");\n+            System.err.println(\"    java.home:    \" + System.getProperty(\"java.home\"));\n+            System.err.println(\"    java.version: \" + System.getProperty(\"java.version\"));\n+            System.err.println(\"    os.version:   \" + osVersion + \"  (expected: \" + expectVersion + \")\");\n+            System.err.println(\"Use a more recent update of this version of JDK, or a newer version of JDK.\");\n+            System.exit(1);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"make\/CheckJavaOSVersion.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,24 +144,3 @@\n-# Only use -source -target, to support legacy platforms, when building with JDK 8\n-# Otherwise, use default values for $JDKHOME\/bin\/javac\n-SUPPORT_OLD_SOURCE_TARGET = $(shell $(JDKJAVAC) -version 2>&1 | grep '[8]' > \/dev\/null && echo true )\n-ifneq ($(SUPPORT_OLD_SOURCE_TARGET),)\n-    OLD_JAVAC_SOURCE_TARGET = -source 1.2 -target 1.1\n-    AGENT_JAVAC_SOURCE_TARGET = -source 5 -target 5\n-    TOOL_JAVAC_SOURCE_TARGET = -source 8 -target 8\n-    REGTEST_TOOL_PATCH_JAVA_BASE_OPTIONS =\n-else\n-    EXTRA_LINT_OPTS = -rawtypes,-unchecked\n-    REGTEST_TOOL_PATCH_JAVA_BASE_OPTIONS = --patch-module java.base=$(JAVADIR)\n-endif \n-\n-ifdef JDK5HOME\n-    JDK5_BOOTCLASSPATH = -bootclasspath $(JDK5HOME)\/jre\/lib\/rt.jar\n-endif\n-ifdef JDK8HOME\n-    JDK8_BOOTCLASSPATH = -bootclasspath $(JDK8HOME)\/jre\/lib\/rt.jar\n-endif\n-\n-# for files needed to run othervm tests on oldest supported platforms\n-REGTEST_OLD_JAVAC = $(JDKHOME)\/bin\/javac\n-REGTEST_OLD_JAVAC_OPTIONS = \\\n-\t$(OLD_JAVAC_SOURCE_TARGET) $(JDK5_BOOTCLASSPATH) -Xlint:all,-options,-deprecation,$(EXTRA_LINT_OPTS) -Werror\n+AGENT_JAVAC_SOURCE_TARGET = --release 8\n+TOOL_JAVAC_SOURCE_TARGET = --release 11\n+REGTEST_TOOL_PATCH_JAVA_BASE_OPTIONS = --patch-module java.base=$(JAVADIR)\n@@ -169,1 +148,1 @@\n-# for files needed to run agentvm tests (on platforms back to JDK 1.5)\n+# for files needed to run agentvm and othervm tests (on platforms back to JDK 8)\n@@ -172,1 +151,1 @@\n-\t$(AGENT_JAVAC_SOURCE_TARGET) $(JDK5_BOOTCLASSPATH) -Xlint:all,-options,-deprecation,$(EXTRA_LINT_OPTS) -Werror\n+\t$(AGENT_JAVAC_SOURCE_TARGET) -Xlint:all,-options,-deprecation -Werror\n@@ -177,1 +156,1 @@\n-\t$(TOOL_JAVAC_SOURCE_TARGET) $(JDK8_BOOTCLASSPATH) -Xlint:all,-options,-deprecation -Werror\n+\t$(TOOL_JAVAC_SOURCE_TARGET) -Xlint:all,-options,-deprecation -Werror\n@@ -369,5 +348,0 @@\n-# Newer versions of JUnit require Hamcrest\n-ifdef HAMCREST_JAR\n-    HAMCREST_JAR := $(call FullPath,$(HAMCREST_JAR))\n-endif\n-\n","filename":"make\/Defs.gmk","additions":7,"deletions":33,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-test: $(INITIAL_TESTS) $(TESTS) $(FINAL_TESTS)\n+test: checkJavaOSVersion $(INITIAL_TESTS) $(TESTS) $(FINAL_TESTS)\n@@ -49,1 +49,1 @@\n-quick-test: $(INITIAL_TESTS)\n+quick-test: checkJavaOSVersion $(INITIAL_TESTS)\n@@ -107,1 +107,0 @@\n-\t@echo \"HAMCREST_JAR        = $(HAMCREST_JAR)\"\n@@ -114,0 +113,7 @@\n+checkJavaOSVersion:\n+ifeq ($(OS_NAME), macosx)\n+\t$(JDKJAVA) CheckJavaOSVersion.java $(OS_VERSION)\n+endif\n+\n+#----------------------------------------------------------------------\n+\n","filename":"make\/Makefile","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-JTREG_VERSION=6.2\n+JTREG_VERSION=7\n@@ -38,3 +38,0 @@\n-DEFAULT_HAMCREST_VERSION=2.2\n-DEFAULT_HAMCREST_JAR_CHECKSUM=1820c0968dba3a11a1b30669bb1f01978a91dedc\n-\n@@ -50,2 +47,3 @@\n-DEFAULT_JUNIT_VERSION=4.13.2\n-DEFAULT_JUNIT_JAR_CHECKSUM=8ac9e16d933b6fb43bc7f576336b8f4d7eb5ba12\n+# JUnit 5.y.z = JUnit Platform 1.y.z + JUnit Jupiter 5.y.z + JUnit Vintage 5.y.z\n+DEFAULT_JUNIT_VERSION=1.8.1\n+DEFAULT_JUNIT_JAR_CHECKSUM=0e01bf93820f644fbcf46ff20f43833c6624d8dd\n","filename":"make\/build-support\/version-numbers","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,11 +167,0 @@\n-# Hamcrest (required by JUnit)\n-#     Checksum variables:\n-#         HAMCREST_JAR_CHECKSUM: checksum of jar\n-#\n-#     1. HAMCREST_JAR\n-#         The path to hamcrest.jar.\n-#     2a. HAMCREST_JAR_URL\n-#         The full URL for the jar.\n-#     2b. HAMCREST_JAR_URL_BASE + HAMCREST_VERSION\n-#         The individual URL components used to construct the full URL.\n-#\n@@ -228,1 +217,1 @@\n-# JUnit (requires HamCrest)\n+# JUnit\n@@ -233,1 +222,1 @@\n-#         The path to asmtools.jar and LICENSE respectively.\n+#         The path to junit.jar and LICENSE respectively.\n@@ -261,1 +250,1 @@\n-    echo \"      Path to JDK; must be JDK 8 or higher\"\n+    echo \"      Path to JDK; must be JDK 11 or higher\"\n@@ -337,4 +326,0 @@\n-HAMCREST_VERSION=\"${HAMCREST_VERSION:-${DEFAULT_HAMCREST_VERSION}}\"\n-HAMCREST_JAR_URL_BASE=\"${HAMCREST_JAR_URL_BASE:-${MAVEN_REPO_URL_BASE}}\"\n-HAMCREST_JAR_CHECKSUM=\"${HAMCREST_JAR_CHECKSUM:-${DEFAULT_HAMCREST_JAR_CHECKSUM}}\"\n-\n@@ -375,1 +360,1 @@\n-        grep -E '^(ANT|ASM|ASMTOOLS|GOOGLE_GUICE|HAMCREST|JCOMMANDER|JCOV|JTHARNESS|JUNIT|TESTNG)_[A-Z_]*=' | \\\n+        grep -E '^(ANT|ASM|ASMTOOLS|GOOGLE_GUICE|JCOMMANDER|JCOV|JTHARNESS|JUNIT|TESTNG)_[A-Z_]*=' | \\\n@@ -444,2 +429,2 @@\n-    if [ \"${vnum:-0}\" -lt \"8\" ]; then\n-        error \"JDK 8 or newer is required to build jtreg\"\n+    if [ \"${vnum:-0}\" -lt \"11\" ]; then\n+        error \"JDK 11 or newer is required to build jtreg\"\n@@ -449,0 +434,13 @@\n+\n+checkJavaOSVersion() {\n+  # This checks that the value in the Java \"os.version\" system property\n+  # is as expected.  While it is OK to *build* jtreg with a JDK with this bug,\n+  # some of the `jtreg` self-tests will fail: notably, test\/problemList.\n+  # See https:\/\/bugs.openjdk.java.net\/browse\/JDK-8253702\n+  case `uname` in\n+    Darwin )\n+      OS_VERSION=`defaults read loginwindow SystemVersionStampAsString`\n+      ${JAVA_HOME}\/bin\/java ${mydir}\/CheckJavaOSVersion.java ${OS_VERSION}\n+  esac\n+}\n+\n@@ -451,0 +449,1 @@\n+#checkJavaOSVersion   #temp: check for presence of the JDK os.version bug (JDK-8253702)\n@@ -685,1 +684,1 @@\n-            JUNIT_JAR_URL=\"${JUNIT_JAR_URL_BASE}\/junit\/junit\/${JUNIT_VERSION}\/junit-${JUNIT_VERSION}.jar\"\n+            JUNIT_JAR_URL=\"${JUNIT_JAR_URL_BASE}\/org\/junit\/platform\/junit-platform-console-standalone\/${JUNIT_VERSION}\/junit-platform-console-standalone-${JUNIT_VERSION}.jar\"\n@@ -692,1 +691,1 @@\n-        JUNIT_JAR=\"${JUNIT_DEPS_DIR}\/$(basename ${JUNIT_JAR_URL})\"\n+        JUNIT_JAR=\"${JUNIT_DEPS_DIR}\/junit.jar\"\n@@ -817,28 +816,0 @@\n-#----- HamCrest Core (required by JUnit) -----\n-setup_hamcrest() {\n-    check_arguments \"${FUNCNAME}\" 0 $#\n-\n-    if [ -n \"${HAMCREST_JAR:-}\" ]; then\n-        return\n-    fi\n-\n-    if [ -z \"${HAMCREST_JAR_URL:-}\" ]; then\n-        if [ -n \"${HAMCREST_JAR_URL_BASE:-}\" ]; then\n-            HAMCREST_JAR_URL=\"${HAMCREST_JAR_URL_BASE}\/org\/hamcrest\/hamcrest\/${HAMCREST_VERSION}\/hamcrest-${HAMCREST_VERSION}.jar\"\n-        fi\n-    fi\n-\n-    local HAMCREST_DEPS_DIR=\"${DEPS_DIR}\/hamcrest\"\n-\n-    if [ -n \"${HAMCREST_JAR_URL:-}\" ]; then\n-        HAMCREST_JAR=\"${HAMCREST_DEPS_DIR}\/$(basename \"${HAMCREST_JAR_URL}\")\"\n-        download_and_checksum \"${HAMCREST_JAR_URL}\" \"${HAMCREST_JAR}\" \"${HAMCREST_JAR_CHECKSUM}\"\n-        return\n-    fi\n-\n-    error \"None of HAMCREST_JAR, HAMCREST_JAR_URL or HAMCREST_JAR_URL_BASE are set\"\n-    exit 1\n-}\n-setup_hamcrest\n-info \"HAMCREST_JAR: ${HAMCREST_JAR}\"\n-\n@@ -893,1 +864,0 @@\n-check_file \"${HAMCREST_JAR}\"\n@@ -923,1 +893,0 @@\n-     HAMCREST_JAR=\"${HAMCREST_JAR}\"                           \\\n","filename":"make\/build.sh","additions":23,"deletions":54,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,19 +30,1 @@\n-### The following files are required to run othervm tests\n-\n-REGTEST-OTHERVM-CLASSES = AppletWrapper GetSystemProperty MainWrapper AStatus StringArray\n-JAVAFILES.com.sun.javatest.regtest-othervm = \\\n-\t$(REGTEST-OTHERVM-CLASSES:%=$(JAVADIR)\/com\/sun\/javatest\/regtest\/agent\/%.java)\n-\n-# TODO: set -bootclasspath to JDK 1.1 classes?\n-$(BUILDDIR)\/classes.com.sun.javatest.regtest-othervm.ok: \\\n-\t\t$(JAVAFILES.com.sun.javatest.regtest-othervm) \\\n-\t\t$(call PosixPath,$(JAVATEST_JAR))\n-\t$(MKDIR) -p $(CLASSDIR)\n-\tCLASSPATH=\"$(CLASSDIR)$(PS)$(JAVATEST_JAR)\" \\\n-\t    $(REGTEST_OLD_JAVAC) $(REGTEST_OLD_JAVAC_OPTIONS) \\\n-\t\t-d $(CLASSDIR) \\\n-\t\t-encoding ISO8859-1 \\\n-\t\t$(JAVAFILES.com.sun.javatest.regtest-othervm)\n-\techo \"classes built at `date`\" > $@\n-\n-### The following files are required to run agentvm tests, as far back as JDK 1.5\n+### The following files are required to run agentvm and othervm tests, as far back as JDK 8\n@@ -51,1 +33,1 @@\n-\t$(filter-out $(JAVAFILES.com.sun.javatest.regtest-othervm), $(shell $(FIND) $(JAVADIR)\/com\/sun\/javatest\/regtest\/agent -name \\*.java ))\n+\t$(shell $(FIND) $(JAVADIR)\/com\/sun\/javatest\/regtest\/agent -name \\*.java )\n@@ -54,2 +36,2 @@\n-\t\t$(JAVAFILES.com.sun.javatest.regtest-agentvm) \\\n-\t\t$(BUILDDIR)\/classes.com.sun.javatest.regtest-othervm.ok\n+\t\t$(JAVAFILES.com.sun.javatest.regtest-agentvm)\n+\t$(MKDIR) -p $(CLASSDIR)\n@@ -84,0 +66,1 @@\n+# The hardcoded use of --release 9 reflects the introduction of the Java Platform Module System\n@@ -87,1 +70,1 @@\n-\t    $(REGTEST_TOOL_JAVAC) $(REGTEST_TOOL_JAVAC_OPTIONS) $(REGTEST_TOOL_PATCH_JAVA_BASE_OPTIONS) \\\n+\t    $(REGTEST_TOOL_JAVAC) $(REGTEST_TOOL_JAVAC_OPTIONS) --release 9 $(REGTEST_TOOL_PATCH_JAVA_BASE_OPTIONS) \\\n@@ -331,9 +314,0 @@\n-$(JTREG_IMAGEDIR)\/lib\/hamcrest.jar: $(call PosixPath,$(HAMCREST_JAR))\n-\t$(RM) $@\n-\t$(MKDIR) -p $(@D)\n-\t$(CP) $(HAMCREST_JAR) $@\n-\n-ifdef HAMCREST_JAR\n-    TARGETS.ZIP.jtreg += $(JTREG_IMAGEJARDIR)\/hamcrest.jar\n-endif\n-\n","filename":"make\/jtreg.gmk","additions":7,"deletions":33,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-pluginVersion = 1.13\n+pluginVersion = 1.14\n@@ -6,1 +6,1 @@\n-<li>Fix compatibility with 2021.2<\/li>\\\n+<li>Fix debugging support for 2021.3<\/li>\\\n","filename":"plugins\/idea\/gradle.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            javaParameters.getProgramParametersList().add(\"-debug:-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=127.0.0.1:\" + runner.address);\n+            javaParameters.getProgramParametersList().add(\"-debug:-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=127.0.0.1:\" + runner.address());\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/JTRegConfigurationRunnableState.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import com.oracle.plugin.jtreg.configuration.JTRegConfiguration;\n@@ -55,1 +54,11 @@\n-    public String address;\n+    private String address;\n+\n+    public String address() {\n+        return address;\n+    }\n+\n+    @Override\n+    public void execute(@NotNull ExecutionEnvironment environment) throws ExecutionException {\n+        address = DebuggerUtils.getInstance().findAvailableDebugAddress(true);\n+        super.execute(environment);\n+    }\n@@ -61,1 +70,0 @@\n-        address = DebuggerUtils.getInstance().findAvailableDebugAddress(true);\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/executors\/JTRegDebuggerRunner.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,1 @@\n-# Verify java version (1.)8 or newer used to run jtreg\n+# Verify java version 11 or newer used to run jtreg\n@@ -148,2 +148,2 @@\n-elif [ \"$version\" -lt 8 ]; then\n-    echo \"java version 8 or later is required to run jtreg\"\n+elif [ \"$version\" -lt 11 ]; then\n+    echo \"java version 11 or later is required to run jtreg\"\n","filename":"src\/share\/bin\/jtreg.sh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        List<DiffReader> list = new ArrayList<DiffReader>();\n+        List<DiffReader> list = new ArrayList<>();\n@@ -71,2 +71,2 @@\n-            List<int[]> testCounts = new ArrayList<int[]>();\n-            MultiMap<String, TestResult> table = new MultiMap<String, TestResult>();\n+            List<int[]> testCounts = new ArrayList<>();\n+            MultiMap<String, TestResult> table = new MultiMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/Diff.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-            commandLineHelpQuery = new ArrayList<String>();\n+            commandLineHelpQuery = new ArrayList<>();\n@@ -227,1 +227,1 @@\n-        Set<String> groups = new LinkedHashSet<String>();\n+        Set<String> groups = new LinkedHashSet<>();\n@@ -231,1 +231,1 @@\n-                new LinkedHashMap<String, SortedMap<String, Option>>();\n+            new LinkedHashMap<>();\n@@ -233,1 +233,1 @@\n-            map.put(g, new TreeMap<String, Option>(new CaseInsensitiveStringComparator()));\n+            map.put(g, new TreeMap<>(new CaseInsensitiveStringComparator()));\n@@ -243,1 +243,1 @@\n-            List<HelpTree.Node> nodesForGroup = new ArrayList<HelpTree.Node>();\n+            List<HelpTree.Node> nodesForGroup = new ArrayList<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/Help.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                list = new ArrayList<V>(index);\n+                list = new ArrayList<>(index);\n@@ -89,2 +89,2 @@\n-        names = new ArrayList<String>();\n-        map = new TreeMap<K, Entry<V>>();\n+        names = new ArrayList<>();\n+        map = new TreeMap<>();\n@@ -119,1 +119,1 @@\n-            put(k, de = new Entry<V>(this));\n+            put(k, de = new Entry<>(this));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/MultiMap.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        List<TestResult> list = new ArrayList<TestResult>();\n+        List<TestResult> list = new ArrayList<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/ReportReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    protected List<int[]> testCounts = new ArrayList<int[]>();\n+    protected List<int[]> testCounts = new ArrayList<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/Reporter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-        List<File> pDirs = new ArrayList<File>();\n+        List<File> pDirs = new ArrayList<>();\n@@ -102,1 +102,1 @@\n-        List<File> pDirs = new ArrayList<File>();\n+        List<File> pDirs = new ArrayList<>();\n@@ -135,2 +135,2 @@\n-    private Map<String, File> historyIndex = new LinkedHashMap<String, File>();\n-    private Map<String, File> platformIndex = new LinkedHashMap<String, File>();\n+    private Map<String, File> historyIndex = new LinkedHashMap<>();\n+    private Map<String, File> platformIndex = new LinkedHashMap<>();\n@@ -247,1 +247,1 @@\n-                pMap = new HashMap<String, File>();\n+                pMap = new HashMap<>();\n@@ -270,2 +270,2 @@\n-            LinkedList<YearDay> results = new LinkedList<YearDay>();\n-            List<YearDay> keys = new ArrayList<YearDay>(keySet());\n+            LinkedList<YearDay> results = new LinkedList<>();\n+            List<YearDay> keys = new ArrayList<>(keySet());\n@@ -285,2 +285,2 @@\n-        final Set<String> platforms = new TreeSet<String>();\n-        final Map<String, Info> infoTable = new HashMap<String, Info>();\n+        final Set<String> platforms = new TreeSet<>();\n+        final Map<String, Info> infoTable = new HashMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/SuperDiff.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -285,1 +286,1 @@\n-                    addPaths(dir, s.getIncludedFiles());\n+                    addPaths(dir.toPath(), s.getIncludedFiles());\n@@ -312,1 +313,1 @@\n-        private void addPaths(File dir, String[] paths) {\n+        private void addPaths(Path dir, String[] paths) {\n@@ -315,1 +316,1 @@\n-                    tool.antFileArgs.add(new File(dir, p));\n+                    tool.antFileArgs.add(dir.resolve(p));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/Main.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -70,0 +71,11 @@\n+        this(log, outputDir, testJdk.toPath());\n+    }\n+\n+    \/**\n+     * Creates a timeout handler.\n+     *\n+     * @param log to which messages should be written\n+     * @param outputDir a directory in which diagnostic information may be written\n+     * @param testJdk the JDK being tested\n+     *\/\n+    public TimeoutHandler(PrintWriter log, File outputDir, Path testJdk) {\n@@ -72,1 +84,1 @@\n-        this.testJdk = testJdk;\n+        this.testJdk = testJdk.toFile();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/TimeoutHandler.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+@SuppressWarnings(\"removal\") \/\/ Security Manager and related APIs\n@@ -86,6 +87,3 @@\n-                    AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                        @Override\n-                        public Object run() {\n-                            System.setSecurityManager(secMgr);\n-                            return null;\n-                        }\n+                    AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n+                        System.setSecurityManager(secMgr);\n+                        return null;\n@@ -112,10 +110,6 @@\n-                    AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                        @Override\n-                        public Object run() {\n-                            for (Provider p : sp) {\n-                                Security.removeProvider(p.getName());\n-                            }\n-                            for (Provider p : securityProviders) {\n-                                Security.addProvider(p);\n-                            }\n-                            return null;\n+                    AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n+                        for (Provider p : sp) {\n+                            Security.removeProvider(p.getName());\n+                        }\n+                        for (Provider p : securityProviders) {\n+                            Security.addProvider(p);\n@@ -123,0 +117,1 @@\n+                        return null;\n@@ -194,1 +189,1 @@\n-        Map<Object, Object> h = new HashMap<Object, Object>();\n+        Map<Object, Object> h = new HashMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/ActionHelper.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+@SuppressWarnings(\"removal\") \/\/ Security Manager and related APIs\n@@ -319,1 +320,1 @@\n-        List<String> l = new ArrayList<String>(n);\n+        List<String> l = new ArrayList<>(n);\n@@ -327,1 +328,1 @@\n-        Set<String> s = new LinkedHashSet<String>(n);\n+        Set<String> s = new LinkedHashSet<>(n);\n@@ -335,1 +336,1 @@\n-        Map<String, String> p = new HashMap<String, String>(n, 1.0f);\n+        Map<String, String> p = new HashMap<>(n, 1.0f);\n@@ -377,1 +378,1 @@\n-    private final Map<OutputKind, Writer> writers = new EnumMap<OutputKind, Writer>(OutputKind.class);\n+    private final Map<OutputKind, Writer> writers = new EnumMap<>(OutputKind.class);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/AgentServer.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -50,2 +50,0 @@\n-import java.awt.event.ItemEvent;\n-import java.awt.event.ItemListener;\n@@ -59,2 +57,2 @@\n-import java.util.Dictionary;\n-import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.HashMap;\n@@ -65,2 +63,0 @@\n-  *\n-  * @author Iris A Garcia\n@@ -68,0 +64,1 @@\n+@SuppressWarnings(\"removal\") \/\/ Applet and related APIs\n@@ -70,2 +67,2 @@\n-    public static void main(String [] args) {\n-        String [] appArgs;\n+    public static void main(String[] args) {\n+        String[] appArgs;\n@@ -76,1 +73,1 @@\n-            char [] buf = new char[1024];\n+            char[] buf = new char[1024];\n@@ -94,2 +91,2 @@\n-            appletParams = stringToDictionary(appArgs[i++]);\n-            appletAtts   = stringToDictionary(appArgs[i++]);\n+            appletParams = stringToMap(appArgs[i++]);\n+            appletAtts   = stringToMap(appArgs[i++]);\n@@ -108,1 +105,1 @@\n-            status = AStatus.failed(\"Thread interrupted: \" + t.toString());\n+            status = AStatus.failed(\"Thread interrupted: \" + t);\n@@ -115,1 +112,1 @@\n-    private static Dictionary stringToDictionary(String s) {\n+    private static Map<String,String> stringToMap(String s) {\n@@ -117,1 +114,1 @@\n-        Dictionary retVal = new Hashtable(3);\n+        Map<String,String> retVal = new HashMap<>(3);\n@@ -121,1 +118,1 @@\n-    } \/\/ stringToDictionary()\n+    } \/\/ stringToMap()\n@@ -134,2 +131,2 @@\n-            int width  = Integer.parseInt((String) appletAtts.get(\"width\"));\n-            int height = Integer.parseInt((String) appletAtts.get(\"height\"));\n+            int width  = Integer.parseInt(appletAtts.get(\"width\"));\n+            int height = Integer.parseInt(appletAtts.get(\"height\"));\n@@ -168,1 +165,1 @@\n-                    status = AStatus.failed(\"Thread interrupted: \" + e.toString());\n+                    status = AStatus.failed(\"Thread interrupted: \" + e);\n@@ -191,9 +188,5 @@\n-                Class eventQueueClass = EventQueue.class;\n-                Method isDispatchThread  = eventQueueClass.getMethod(\"isDispatchThread\", new Class[] {});\n-                Method invokeAndWait = eventQueueClass.getMethod(\"invokeAndWait\", new Class[] { Runnable.class });\n-                if (!((Boolean) (isDispatchThread.invoke(null, new Object[] { }))).booleanValue()) {\n-                    invokeAndWait.invoke(null, new Object[] { new Runnable() {\n-                            public void run() {\n-                                c.validate();\n-                            }\n-                        }});\n+                Class<?> eventQueueClass = EventQueue.class;\n+                Method isDispatchThread  = eventQueueClass.getMethod(\"isDispatchThread\");\n+                Method invokeAndWait = eventQueueClass.getMethod(\"invokeAndWait\", Runnable.class );\n+                if (!((Boolean) (isDispatchThread.invoke(null)))) {\n+                    invokeAndWait.invoke(null, (Runnable) c::validate);\n@@ -230,1 +223,1 @@\n-            return (String) appletParams.get(name);\n+            return appletParams.get(name);\n@@ -262,1 +255,1 @@\n-            status = AStatus.failed(\"Applet thread threw exception: \" + e.toString());\n+            status = AStatus.failed(\"Applet thread threw exception: \" + e);\n@@ -338,1 +331,1 @@\n-                    String [] boxNames = {\"fixed\", \"variable\"};\n+                    String[] boxNames = {\"fixed\", \"variable\"};\n@@ -415,1 +408,1 @@\n-                Class cls = Class.forName(className);\n+                Class<?> cls = Class.forName(className);\n@@ -462,1 +455,1 @@\n-        private void makeCheckboxPanel(String [] name, GridBagLayout gridbag, GridBagConstraints c) {\n+        private void makeCheckboxPanel(String[] name, GridBagLayout gridbag, GridBagConstraints c) {\n@@ -486,2 +479,2 @@\n-    private static Dictionary appletParams;\n-    private static Dictionary appletAtts;\n+    private static Map<String,String> appletParams;\n+    private static Map<String,String> appletAtts;\n@@ -498,1 +491,1 @@\n-    public CheckboxPanel(AppletPanel appletPanel, String [] boxNames) {\n+    public CheckboxPanel(AppletPanel appletPanel, String[] boxNames) {\n@@ -512,5 +505,1 @@\n-        b1.addItemListener(new ItemListener() {\n-            public void itemStateChanged(ItemEvent event) {\n-                panel.setFixedSize();\n-            }\n-        });\n+        b1.addItemListener(event -> panel.setFixedSize());\n@@ -518,5 +507,1 @@\n-        b2.addItemListener(new ItemListener() {\n-            public void itemStateChanged(ItemEvent event) {\n-                panel.setVariableSize();\n-            }\n-        });\n+        b2.addItemListener(event -> panel.setVariableSize());\n@@ -533,0 +518,1 @@\n+\/\/ @SuppressWarnings(\"removal\") \/\/ Applet and related APIs\n@@ -675,1 +661,1 @@\n-                AStatus.failed(\"Thread interrupted: \" + e.toString()).exit();\n+                AStatus.failed(\"Thread interrupted: \" + e).exit();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/AppletWrapper.java","additions":32,"deletions":46,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-            = new HashMap<String,JDK_Version>();\n+            = new HashMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JDK_Version.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n- *\n- * @author John R. Rose\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JUnitRunner.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+@SuppressWarnings(\"removal\") \/\/ Security Manager and related APIs\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JavaTestSecurityManager.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -36,0 +35,1 @@\n+import java.nio.file.Path;\n@@ -148,2 +148,2 @@\n-                List<URL> urls = new ArrayList<URL>();\n-                for (File f : classpath.asList()) {\n+                List<URL> urls = new ArrayList<>();\n+                for (Path f : classpath.asList()) {\n@@ -151,1 +151,1 @@\n-                        urls.add(f.toURI().toURL());\n+                        urls.add(f.toUri().toURL());\n@@ -426,1 +426,1 @@\n-                    ArrayList<Thread> list = new ArrayList<Thread>(num);\n+                    ArrayList<Thread> list = new ArrayList<>(num);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/MainActionHelper.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-  *\n-  * @author Iris A Garcia\n@@ -40,1 +38,1 @@\n-    public static void main(String [] args) {\n+    public static void main(String[] args) {\n@@ -65,1 +63,1 @@\n-            AStatus.failed(MAIN_CANT_READ_ARGS + e.toString()).exit();\n+            AStatus.failed(MAIN_CANT_READ_ARGS + e).exit();\n@@ -91,1 +89,1 @@\n-            AStatus.passed(MAIN_SKIPPED + e.toString())\n+            AStatus.passed(MAIN_SKIPPED + e)\n@@ -94,1 +92,1 @@\n-            AStatus.failed(MAIN_THREW_EXCEPT + e.toString())\n+            AStatus.failed(MAIN_THREW_EXCEPT + e)\n@@ -110,1 +108,1 @@\n-                    Class layerClass;\n+                    Class<?> layerClass;\n@@ -116,4 +114,4 @@\n-                    Method bootMethod = layerClass.getMethod(\"boot\", new Class[] { });\n-                    Object bootLayer = bootMethod.invoke(null, new Object[] { });\n-                    Method findLoaderMth = layerClass.getMethod(\"findLoader\", new Class[] { String.class });\n-                    cl = (ClassLoader) findLoaderMth.invoke(bootLayer, new Object[] { moduleName });\n+                    Method bootMethod = layerClass.getMethod(\"boot\");\n+                    Object bootLayer = bootMethod.invoke(null);\n+                    Method findLoaderMth = layerClass.getMethod(\"findLoader\", String.class);\n+                    cl = (ClassLoader) findLoaderMth.invoke(bootLayer, moduleName);\n@@ -125,3 +123,3 @@\n-                Class c = Class.forName(className, false, cl);\n-                Method mainMethod = c.getMethod(\"main\", new Class[] { String[].class });\n-                mainMethod.invoke(null, new Object[] { args });\n+                Class<?> c = Class.forName(className, false, cl);\n+                Method mainMethod = c.getMethod(\"main\", String[].class);\n+                mainMethod.invoke(null, (Object) args);\n@@ -163,1 +161,1 @@\n-        private final String [] args;\n+        private final String[] args;\n@@ -181,1 +179,1 @@\n-            AStatus.failed(MAIN_THREW_EXCEPT + e.toString()).exit();\n+            AStatus.failed(MAIN_THREW_EXCEPT + e).exit();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/MainWrapper.java","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.io.File;\n-import java.lang.reflect.Array;\n@@ -32,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -54,1 +53,1 @@\n-    static ClassLoader addModules(List<File> libs, Set<String> modules) throws Fault {\n+    static ClassLoader addModules(List<Path> libs, Set<String> modules) throws Fault {\n@@ -56,1 +55,0 @@\n-        List<Object> paths = new ArrayList<Object>();\n@@ -58,5 +56,0 @@\n-            for (File lib : libs) {\n-                for (File file : lib.listFiles()) {\n-                    paths.add(toPathMethod.invoke(file));\n-                }\n-            }\n@@ -72,2 +65,2 @@\n-            Object finder = moduleFinderOfMethod.invoke(null, new Object[] { paths.toArray(emptyArrayOfPaths) });\n-            Object emptyFinder = moduleFinderOfMethod.invoke(null,  new Object[] { emptyArrayOfPaths });\n+            Object finder = moduleFinderOfMethod.invoke(null, new Object[] { libs.toArray(new Path[0]) });\n+            Object emptyFinder = moduleFinderOfMethod.invoke(null,  new Object[] { new Path[0] });\n@@ -79,7 +72,4 @@\n-        } catch (SecurityException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (IllegalAccessException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (IllegalArgumentException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (InvocationTargetException e) {\n+        } catch (SecurityException\n+                | IllegalAccessException\n+                | IllegalArgumentException\n+                | InvocationTargetException e) {\n@@ -113,1 +103,1 @@\n-             *  if (opt_module.isPresent())\n+             *  if (!opt_module.isPresent())\n@@ -116,2 +106,2 @@\n-            Object opt_module = findModuleMethod.invoke(bootLayer, moduleName);\n-            if (!((Boolean) isPresentMethod.invoke(opt_module, new Object[0]))) {\n+            Optional<?> opt_module = (Optional<?>) findModuleMethod.invoke(bootLayer, moduleName);\n+            if (!opt_module.isPresent()) {\n@@ -124,1 +114,1 @@\n-            Object module = getMethod.invoke(opt_module);\n+            Object module = opt_module.get();\n@@ -147,7 +137,4 @@\n-        } catch (SecurityException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (IllegalAccessException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (IllegalArgumentException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (InvocationTargetException e) {\n+        } catch (SecurityException\n+                | IllegalAccessException\n+                | IllegalArgumentException\n+                | InvocationTargetException e) {\n@@ -163,11 +150,0 @@\n-            \/\/ new in Java SE 7\n-            Class<?> pathClass = Class.forName(\"java.nio.file.Path\");\n-            toPathMethod = File.class.getDeclaredMethod(\"toPath\");\n-            emptyArrayOfPaths = (Object[]) Array.newInstance(pathClass, 0);\n-            Class<?> pathArrayClass = emptyArrayOfPaths.getClass();\n-\n-            \/\/ new in Java SE 8\n-            Class<?> optionalClass = Class.forName(\"java.util.Optional\");\n-            isPresentMethod = optionalClass.getDeclaredMethod(\"isPresent\");\n-            getMethod = optionalClass.getDeclaredMethod(\"get\");\n-\n@@ -176,1 +152,1 @@\n-            moduleFinderOfMethod = moduleFinderClass.getDeclaredMethod(\"of\", pathArrayClass);\n+            moduleFinderOfMethod = moduleFinderClass.getDeclaredMethod(\"of\", Path[].class);\n@@ -201,11 +177,6 @@\n-        } catch (ClassNotFoundException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (NoSuchMethodException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (SecurityException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (IllegalAccessException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (IllegalArgumentException e) {\n-            throw new Fault(\"unexpected exception: \" + e, e);\n-        } catch (InvocationTargetException e) {\n+        } catch (ClassNotFoundException\n+                | NoSuchMethodException\n+                | SecurityException\n+                | IllegalAccessException\n+                |IllegalArgumentException\n+                | InvocationTargetException e) {\n@@ -233,10 +204,0 @@\n-    \/\/ on java.util.Optional\n-    private static Method isPresentMethod;\n-    private static Method getMethod;\n-\n-    \/\/ on java.io.File\n-    private static Method toPathMethod;\n-\n-    \/\/ on java.nio.file.Path\n-    private static Object[] emptyArrayOfPaths;\n-\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/ModuleHelper.java","additions":24,"deletions":63,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+@SuppressWarnings(\"removal\") \/\/ Security Manager and related APIs\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/RegressionSecurityManager.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -35,0 +39,1 @@\n+import java.util.stream.Collectors;\n@@ -37,2 +42,2 @@\n- * A path, as in an ordered set of file system locations, such as directories,\n- * zip files and jar files.\n+ * A search path, as in an ordered set of file system locations,\n+ * such as directories, zip files and jar files.\n@@ -42,1 +47,1 @@\n-     * Create an empty path.\n+     * Creates an empty search path.\n@@ -44,2 +49,1 @@\n-    public SearchPath() {\n-    }\n+    public SearchPath() { }\n@@ -48,1 +52,1 @@\n-     * Create a path containing the concatenation of a series of files.\n+     * Creates a search path containing a series of entries.\n@@ -50,1 +54,2 @@\n-     * @param files the files to be included in the search path\n+     *\n+     * @param entries the entries to be included in the search path\n@@ -52,2 +57,2 @@\n-    public SearchPath(File... files) {\n-        append(files);\n+    public SearchPath(Path... entries) {\n+        append(entries);\n@@ -57,1 +62,1 @@\n-     * Create a path containing the concatenation of a series of paths.\n+     * Creates a search path containing the concatenation of a series of search paths.\n@@ -59,0 +64,1 @@\n+     *\n@@ -66,1 +72,1 @@\n-     * Create a path containing the concatenation of a series of paths.\n+     * Creates a search path containing the concatenation of a series of search paths.\n@@ -68,1 +74,4 @@\n-     * @param paths the paths to be included in the search path\n+     *\n+     * @param paths the search paths to be included in the new search path\n+     *\n+     * @throws InvalidPathException if any of the paths contain invalid file paths\n@@ -70,1 +79,1 @@\n-    public SearchPath(String... paths) {\n+    public SearchPath(String... paths) throws InvalidPathException {\n@@ -75,3 +84,4 @@\n-     * Append a series of files to the path.  Files that do not exist\n-     * are ignored.\n-     * @param files files to be added to the path\n+     * Appends a series of entries to this search path.\n+     * Entries that do not exist are ignored.\n+     *\n+     * @param entries the entries to be added to the path\n@@ -80,4 +90,4 @@\n-    public SearchPath append(Collection<File> files) {\n-        for (File f: files) {\n-            if (f.exists()) {\n-                entries.add(f);\n+    public SearchPath append(Collection<Path> entries) {\n+        for (Path e: entries) {\n+            if (Files.exists(e)) {\n+                this.entries.add(e);\n@@ -90,3 +100,4 @@\n-     * Append a series of files to the path.  Files that do not exist\n-     * are ignored.\n-     * @param files files to be added to the path\n+     * Appends a series of entries to this search path.\n+     * Entries that do not exist are ignored.\n+     *\n+     * @param entries entries to be added to the path\n@@ -94,0 +105,2 @@\n+     *\n+     * @throws InvalidPathException if any of the files are invalid\n@@ -95,4 +108,4 @@\n-    public SearchPath append(File... files) {\n-        for (File f: files) {\n-            if (f.exists()) {\n-                entries.add(f);\n+    public SearchPath append(Path... entries) throws InvalidPathException {\n+        for (Path e: entries) {\n+            if (Files.exists(e)) {\n+                this.entries.add(e);\n@@ -105,2 +118,4 @@\n-     * Append a series of paths to the path.\n-     * @param paths paths to be added to the path\n+     * Appends a series of paths to this search path.\n+     *\n+     * @param paths paths to be added to the search path\n+     *\n@@ -117,2 +132,3 @@\n-     * Append a series of paths to the path.\n-     * @param paths paths to be added to the path\n+     * Appends a series of paths to this search path.\n+     *\n+     * @param paths paths to be added to the search path\n@@ -120,0 +136,2 @@\n+     *\n+     * @throws InvalidPathException if any of the paths contain invalid file paths\n@@ -121,1 +139,1 @@\n-    public SearchPath append(String... paths) {\n+    public SearchPath append(String... paths) throws InvalidPathException {\n@@ -125,2 +143,2 @@\n-                    File f = new File(q);\n-                    if (f.exists()) {\n+                    Path f = Paths.get(q);\n+                    if (Files.exists(f)) {\n@@ -136,2 +154,3 @@\n-     * Remove files from a path.\n-     * @param files files to be removed from the path\n+     * Removes entries from this search path.\n+     *\n+     * @param entries entries to be removed from the search path\n@@ -140,2 +159,2 @@\n-    public SearchPath removeAll(Collection<File> files) {\n-        entries.removeAll(files);\n+    public SearchPath removeAll(Collection<Path> entries) {\n+        this.entries.removeAll(entries);\n@@ -145,1 +164,0 @@\n-\n@@ -147,2 +165,3 @@\n-     * Retain just specified files on a path.\n-     * @param files files to be retained the path\n+     * Retains just specified entries on this search path.\n+     *\n+     * @param entries entries to be retained in the search path\n@@ -150,0 +169,2 @@\n+     *\n+     * @throws InvalidPathException if any of the entries are invalid\n@@ -151,2 +172,2 @@\n-    public SearchPath retainAll(Collection<File> files) {\n-        entries.retainAll(files);\n+    public SearchPath retainAll(Collection<Path> entries) {\n+        this.entries.retainAll(entries);\n@@ -157,2 +178,3 @@\n-     * Return the series of files that are currently on the path.\n-     * @return the files on the path\n+     * Returns the list of entries that are currently on this search path.\n+     *\n+     * @return the entries on the search path\n@@ -160,2 +182,2 @@\n-    public List<File> asList() {\n-        return new ArrayList<File>(entries);\n+    public List<Path> asList() {\n+        return new ArrayList<>(entries);\n@@ -165,2 +187,4 @@\n-     * Check if this path is empty.\n-     * @return true if this path does not have any files on it\n+     * Checks if this search path is empty.\n+     *\n+     * @return {@code true} if this path does not have any entries on it,\n+     *      and {@code false} otherwise\n@@ -173,2 +197,3 @@\n-     * Return the string value of this path.\n-     * @return the string value of this path\n+     * Returns the string value of this search path.\n+     *\n+     * @return the string value of this search path\n@@ -179,1 +204,1 @@\n-        for (File e: entries) {\n+        for (Path e: entries) {\n@@ -190,1 +215,1 @@\n-    private final Set<File> entries = new LinkedHashSet<File>();\n+    private final Set<Path> entries = new LinkedHashSet<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/SearchPath.java","additions":79,"deletions":54,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import java.util.Vector;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -35,2 +36,0 @@\n- *\n- * @author Iris A Garcia\n@@ -70,1 +69,1 @@\n-     * array of arbitrary length.  Then end of each element in the array is\n+     * array of arbitrary length.  The end of each element in the array is\n@@ -72,1 +71,1 @@\n-     * separator immeidately before the end of the string, the final element\n+     * separator immediately before the end of the string, the final element\n@@ -84,1 +83,1 @@\n-        Vector v = new Vector();\n+        List<String> v = new ArrayList<>();\n@@ -86,1 +85,1 @@\n-        int tokenEnd   = 0;\n+        int tokenEnd;\n@@ -89,1 +88,1 @@\n-            v.addElement(s.substring(tokenStart, tokenEnd));\n+            v.add(s.substring(tokenStart, tokenEnd));\n@@ -92,1 +91,1 @@\n-        v.addElement(s.substring(tokenStart));\n+        v.add(s.substring(tokenStart));\n@@ -94,3 +93,1 @@\n-        String [] retVal = new String[v.size()];\n-        v.copyInto(retVal);\n-        return retVal;\n+        return v.toArray(new String[0]);\n@@ -114,1 +111,1 @@\n-        Vector v = new Vector();\n+        List<String> v = new ArrayList<>();\n@@ -116,1 +113,1 @@\n-        int tokenEnd   = 0;\n+        int tokenEnd;\n@@ -119,1 +116,1 @@\n-            v.addElement(s.substring(tokenStart, tokenEnd));\n+            v.add(s.substring(tokenStart, tokenEnd));\n@@ -123,3 +120,1 @@\n-        String [] retVal = new String[v.size()];\n-        v.copyInto(retVal);\n-        return retVal;\n+        return v.toArray(new String[0]);\n@@ -142,1 +137,1 @@\n-        Vector v = new Vector();\n+        List<String> v = new ArrayList<>();\n@@ -144,1 +139,1 @@\n-        int tokenEnd   = 0;\n+        int tokenEnd;\n@@ -158,1 +153,1 @@\n-            v.addElement(s.substring(tokenStart, tokenEnd));\n+            v.add(s.substring(tokenStart, tokenEnd));\n@@ -162,3 +157,1 @@\n-        String [] retVal = new String[v.size()];\n-        v.copyInto(retVal);\n-        return retVal;\n+        return v.toArray(new String[0]);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/StringArray.java","additions":17,"deletions":24,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n- *\n- * @author jjg\n+ * TestRunner to run TestNG tests.\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestNGRunner.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private final Map<String, Entry> cache = new HashMap<String, Entry>();\n+    private final Map<String, Entry> cache = new HashMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/CachingTestFilter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,3 @@\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -42,0 +45,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -112,1 +116,1 @@\n-    private File classDir;\n+    private Path classDir;\n@@ -117,1 +121,1 @@\n-    private File bootClassDir;\n+    private Path bootClassDir;\n@@ -138,3 +142,7 @@\n-        File baseDir = params.getTestSuite().getRootDir();\n-        classDir = new File(outDir, \"classes\");\n-        bootClassDir = new File(outDir, \"bootClasses\");\n+        compile(params, jdk, outDir.toPath());\n+    }\n+\n+    void compile(RegressionParameters params, JDK jdk, Path outDir) throws Fault {\n+        Path baseDir = params.getTestSuite().getRootDir().toPath();\n+        classDir = outDir.resolve(\"classes\");\n+        bootClassDir = outDir.resolve(\"bootClasses\");\n@@ -146,1 +154,1 @@\n-    File getClassDir() {\n+    Path getClassDir() {\n@@ -150,1 +158,1 @@\n-    File getBootClassDir() {\n+    Path getBootClassDir() {\n@@ -162,2 +170,2 @@\n-    private List<String> compile(JDK jdk, File classDir, SearchPath classpath,\n-            File srcDir, List<String> files, boolean allowDirs) throws Fault {\n+    private List<String> compile(JDK jdk, Path classDir, SearchPath classpath,\n+            Path srcDir, List<String> files, boolean allowDirs) throws Fault {\n@@ -170,2 +178,8 @@\n-        javacArgs.add(classDir.getPath());\n-        classDir.mkdirs();\n+        javacArgs.add(classDir.toString());\n+\n+        try {\n+            \/\/ ensure classDir exists before creating the search path for -classpath\n+            Files.createDirectories(classDir);\n+        } catch (IOException e) {\n+            throw new Fault(\"cannot create classes directory\", e);\n+        }\n@@ -181,5 +195,0 @@\n-        if (!classDir.exists()) {\n-            needCompilation = true;\n-            classDir.mkdirs();\n-        }\n-\n@@ -195,2 +204,2 @@\n-            File f = new File(srcDir, e);\n-            if (!f.exists()) {\n+            Path f = srcDir.resolve(e);\n+            if (!Files.exists(f)) {\n@@ -203,2 +212,2 @@\n-            for (File sf: expandJavaFiles(f, allowDirs)) {\n-                javacArgs.add(sf.getPath());\n+            for (Path sf: expandJavaFiles(f, allowDirs)) {\n+                javacArgs.add(sf.toString());\n@@ -208,3 +217,5 @@\n-                File cf = new File(classDir, cn.replace(\".\", File.separator) + \".class\");\n-                if (!cf.exists() || sf.lastModified() > cf.lastModified()) {\n-                    needCompilation = true;\n+                if (!needCompilation) {\n+                    Path cf = classDir.resolve(cn.replace(\".\", File.separator) + \".class\");\n+                    if (!Files.exists(cf) || FileUtils.compareLastModifiedTimes(sf, cf) > 0) {\n+                        needCompilation = true;\n+                    }\n@@ -217,1 +228,1 @@\n-            pArgs.add(jdk.getJavacProg().getPath());\n+            pArgs.add(jdk.getJavacProg().toString());\n@@ -255,2 +266,2 @@\n-    private List<File> expandJavaFiles(File file, boolean allowDirs) throws Fault {\n-        List<File> results = new ArrayList<>();\n+    private List<Path> expandJavaFiles(Path file, boolean allowDirs) throws Fault {\n+        List<Path> results = new ArrayList<>();\n@@ -270,3 +281,3 @@\n-    private void expandJavaFiles(File file, boolean allowDirs, boolean rejectBadFiles, List<File> results) throws Fault {\n-        if (file.isFile()) {\n-            if (file.getName().endsWith(\".java\")) {\n+    private void expandJavaFiles(Path file, boolean allowDirs, boolean rejectBadFiles, List<Path> results) throws Fault {\n+        if (Files.isRegularFile(file)) {\n+            if (file.getFileName().toString().endsWith(\".java\")) {\n@@ -279,1 +290,1 @@\n-        } else if (file.isDirectory()) {\n+        } else if (Files.isDirectory(file)) {\n@@ -281,5 +292,2 @@\n-                File[] children = file.listFiles();\n-                if (children != null) {\n-                    for (File child : children) {\n-                        expandJavaFiles(child, true, false, results);\n-                    }\n+                for (Path child : FileUtils.listFiles(file)) {\n+                    expandJavaFiles(child, true, false, results);\n@@ -295,7 +303,3 @@\n-    private String getClassNameFromFile(File file) throws Fault {\n-        StringBuilder sb = new StringBuilder();\n-        try (BufferedReader in = new BufferedReader(new FileReader(file))) {\n-            String line;\n-            while ((line = in.readLine()) != null) {\n-                sb.append(line).append(\"\\n\");\n-            }\n+    private String getClassNameFromFile(Path file) throws Fault {\n+        try {\n+            return getClassNameFromSource(Files.readString(file));\n@@ -305,1 +309,0 @@\n-        return getClassNameFromSource(sb.toString());\n@@ -311,1 +314,1 @@\n-            Pattern.compile(\"(?:public\\\\s+)?(?:class|enum|interface)\\\\s+(\\\\w+)\");\n+            Pattern.compile(\"(?:public\\\\s+)?(?:class|enum|interface|record)\\\\s+(\\\\w+)\");\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/ExtraPropDefns.java","additions":48,"deletions":45,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n@@ -30,2 +30,0 @@\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n@@ -35,0 +33,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -49,0 +49,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -59,1 +60,1 @@\n-        File root = new File(args[0]);\n+        Path root = Path.of(args[0]);\n@@ -79,1 +80,1 @@\n-    final File root;\n+    final Path root;\n@@ -88,1 +89,1 @@\n-    GroupManager(PrintWriter out, File root, List<String> files) throws IOException {\n+    GroupManager(PrintWriter out, Path root, List<String> files) throws IOException {\n@@ -100,8 +101,3 @@\n-            File file = new File(root, f);\n-            FileInputStream fin;\n-            try {\n-                fin = new FileInputStream(file);\n-            } catch (FileNotFoundException e) {\n-                if (optional)\n-                    continue;\n-                throw e;\n+            Path file = root.resolve(f);\n+            if (optional && !Files.exists(file)) {\n+                continue;\n@@ -110,1 +106,2 @@\n-            try {\n+\n+            try (BufferedReader in = Files.newBufferedReader(file)){\n@@ -112,1 +109,1 @@\n-                p.load(new BufferedInputStream(fin));\n+                p.load(in);\n@@ -119,2 +116,0 @@\n-            } finally {\n-                fin.close();\n@@ -135,1 +130,1 @@\n-    public Set<File> getFiles(String group) throws InvalidGroup {\n+    public Set<Path> getFiles(String group) throws InvalidGroup {\n@@ -164,5 +159,5 @@\n-                List<Set<File>> allFiles = Arrays.asList(e.includeFiles, e.excludeFiles);\n-                for (Set<File> files: allFiles) {\n-                    for (File f: files) {\n-                        if (!f.exists()) {\n-                            URI u = root.toURI().relativize(f.toURI());\n+                List<Set<Path>> allFiles = Arrays.asList(e.includeFiles, e.excludeFiles);\n+                for (Set<Path> files: allFiles) {\n+                    for (Path f: files) {\n+                        if (!Files.exists(f)) {\n+                            URI u = root.toUri().relativize(f.toUri());\n@@ -184,1 +179,1 @@\n-            nodes.put(g, new TarjanNode<Group>(g) {\n+            nodes.put(g, new TarjanNode<>(g) {\n@@ -187,3 +182,3 @@\n-                    List<TarjanNode<Group>> deps = new ArrayList<> ();\n-                    for (Entry e: data.entries) {\n-                        for (Group g: e.includeGroups) {\n+                    List<TarjanNode<Group>> deps = new ArrayList<>();\n+                    for (Entry e : data.entries) {\n+                        for (Group g : e.includeGroups) {\n@@ -225,1 +220,1 @@\n-    private void error(File f, Group g, String message) {\n+    private void error(Path f, Group g, String message) {\n@@ -233,1 +228,1 @@\n-        private Set<File> files;\n+        private Set<Path> files;\n@@ -249,1 +244,1 @@\n-        Set<File> getFiles() {\n+        Set<Path> getFiles() {\n@@ -252,2 +247,2 @@\n-                Set<File> inclFiles = new HashSet<>();\n-                Set<File> exclFiles = new HashSet<>();\n+                Set<Path> inclFiles = new HashSet<>();\n+                Set<Path> exclFiles = new HashSet<>();\n@@ -267,2 +262,2 @@\n-        private void addFiles(Collection<File> files, Collection<File> includes, Collection<File> excludes) {\n-            for (File incl: includes) {\n+        private void addFiles(Collection<Path> files, Collection<Path> includes, Collection<Path> excludes) {\n+            for (Path incl: includes) {\n@@ -272,1 +267,1 @@\n-                if (incl.isFile())\n+                if (Files.isRegularFile(incl))\n@@ -274,2 +269,2 @@\n-                else if (incl.isDirectory()) {\n-                    Set<File> excludesForIncl = filter(incl, excludes);\n+                else if (Files.isDirectory(incl)) {\n+                    Set<Path> excludesForIncl = filter(incl, excludes);\n@@ -293,0 +288,9 @@\n+        private void addFile(Collection<Path> files, Path file) {\n+            for (Iterator<Path> iter = files.iterator(); iter.hasNext(); ) {\n+                Path f = iter.next();\n+                if (contains(file, f))\n+                    iter.remove();\n+            }\n+            files.add(file);\n+        }\n+\n@@ -302,0 +306,9 @@\n+        private boolean contains(Collection<Path> files, Path file) {\n+            for (Path f: files) {\n+                if (f.equals(file) || contains(f, file)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n@@ -309,0 +322,4 @@\n+        private boolean contains(Path dir, Path file) {\n+            return file.startsWith(dir);\n+        }\n+\n@@ -324,0 +341,11 @@\n+        private Set<Path> filter(Path dir, Collection<Path> files) {\n+            Set<Path> results = null;\n+            for (Path f: files) {\n+                if (f.startsWith(dir)) {\n+                    if (results == null) results = new LinkedHashSet<>();\n+                    results.add(f);\n+                }\n+            }\n+            return results == null ? Set.of() : results;\n+        }\n+\n@@ -335,0 +363,11 @@\n+        private List<Path> list(Path file) {\n+            List<Path> children = new ArrayList<>();\n+            for (Path f: FileUtils.listFiles(file)) {\n+                String fn = f.getFileName().toString();\n+                if (Files.isDirectory(f) && !ignoreDirs.contains(fn)\n+                        || Files.isRegularFile(f) && allowExtns.contains(getExtension(fn)))\n+                    children.add(f);\n+            }\n+            return children;\n+        }\n+\n@@ -347,1 +386,1 @@\n-        final File origin;\n+        final Path origin;\n@@ -349,2 +388,2 @@\n-        final Set<File> includeFiles = new LinkedHashSet<>();\n-        final Set<File> excludeFiles = new LinkedHashSet<>();\n+        final Set<Path> includeFiles = new LinkedHashSet<>();\n+        final Set<Path> excludeFiles = new LinkedHashSet<>();\n@@ -354,1 +393,1 @@\n-        Entry(File origin, File root, String def) {\n+        Entry(Path origin, Path root, String def) {\n@@ -375,1 +414,1 @@\n-                    File f = name.equals(\"\") ? root : new File(root, name);\n+                    Path f = name.equals(\"\") ? root : root.resolve(name);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/GroupManager.java","additions":83,"deletions":44,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n@@ -87,0 +90,2 @@\n+     *\n+     * @throws InvalidPathException if the path is invalid\n@@ -88,2 +93,2 @@\n-    public static JDK of(String javaHome) {\n-        return of(new File(javaHome));\n+    public static JDK of(String javaHome) throws InvalidPathException {\n+        return of(Path.of(javaHome));\n@@ -99,1 +104,1 @@\n-    public static synchronized JDK of(File javaHome) {\n+    public static synchronized JDK of(Path javaHome) {\n@@ -106,1 +111,1 @@\n-    private static final Map<File, JDK> cache = new HashMap<>();\n+    private static final Map<Path, JDK> cache = new HashMap<>();\n@@ -113,1 +118,1 @@\n-    private JDK(File jdk) {\n+    private JDK(Path jdk) {\n@@ -115,1 +120,1 @@\n-        absJDK = jdk.getAbsoluteFile();\n+        absJDK = jdk.toAbsolutePath();\n@@ -145,0 +150,2 @@\n+     *\n+     * @see #getHomeDirectory()\n@@ -147,0 +154,9 @@\n+        return jdk.toFile();\n+    }\n+\n+    \/**\n+     * Returns the home directory for the JDK, as specified when the object was created.\n+     *\n+     * @return the home directory for the JDK\n+     *\/\n+    public Path getHomeDirectory() {\n@@ -154,0 +170,2 @@\n+     *\n+     * @see #getAbsoluteHomeDirectory()\n@@ -156,0 +174,9 @@\n+        return absJDK.toFile();\n+    }\n+\n+    \/**\n+     * Returns the absolute path of the home directory for the JDK.\n+     *\n+     * @return the absolute path of the home directory for the JDK\n+     *\/\n+    public Path getAbsoluteHomeDirectory() {\n@@ -164,1 +191,1 @@\n-    public File getJavaProg() {\n+    public Path getJavaProg() {\n@@ -173,1 +200,1 @@\n-    public File getJavacProg() {\n+    public Path getJavacProg() {\n@@ -186,6 +213,6 @@\n-    public File getProg(String command, boolean checkExe) {\n-        File bin = new File(absJDK, \"bin\");\n-        File prog = new File(bin, command);\n-        if (!prog.exists() && checkExe) {\n-            File prog_exe = new File(bin, command + \".exe\");\n-            if (prog_exe.exists()) {\n+    public Path getProg(String command, boolean checkExe) {\n+        Path bin = absJDK.resolve(\"bin\");\n+        Path prog = bin.resolve(command);\n+        if (!Files.exists(prog) && checkExe) {\n+            Path prog_exe = bin.resolve(command + \".exe\");\n+            if (Files.exists(prog_exe)) {\n@@ -204,1 +231,1 @@\n-        return jdk.exists();\n+        return Files.exists(jdk);\n@@ -211,0 +238,2 @@\n+     *\n+     * @see #getHomeDirectory()\n@@ -213,1 +242,1 @@\n-        return jdk.getPath();\n+        return jdk.toString();\n@@ -220,0 +249,2 @@\n+     *\n+     * @see #getAbsoluteHomeDirectory()\n@@ -222,1 +253,1 @@\n-        return absJDK.getPath();\n+        return absJDK.toString();\n@@ -233,1 +264,1 @@\n-        return new SearchPath(new File(new File(absJDK, \"lib\"), \"tools.jar\"));\n+        return new SearchPath(absJDK.resolve(\"lib\").resolve(\"tools.jar\"));\n@@ -302,1 +333,1 @@\n-        pb.command(getJavaProg().getPath(), GetSystemProperty.class.getName(), VERSION_PROPERTY);\n+        pb.command(getJavaProg().toString(), GetSystemProperty.class.getName(), VERSION_PROPERTY);\n@@ -358,1 +389,1 @@\n-            cmdArgs.add(getJavaProg().getPath());\n+            cmdArgs.add(getJavaProg().toString());\n@@ -550,3 +581,3 @@\n-            File ctSym = new File(new File(absJDK, \"lib\"), \"ct.sym\");\n-            if (ctSym.exists()) {\n-                try (JarFile jar = new JarFile(ctSym)) {\n+            Path ctSym = absJDK.resolve(\"lib\").resolve(\"ct.sym\");\n+            if (Files.exists(ctSym)) {\n+                try (JarFile jar = new JarFile(ctSym.toFile())) {\n@@ -610,1 +641,1 @@\n-        cmdArgs.add(getJavaProg().getPath());\n+        cmdArgs.add(getJavaProg().toString());\n@@ -711,2 +742,2 @@\n-    private final File jdk;\n-    private final File absJDK;\n+    private final Path jdk;\n+    private final Path absJDK;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/JDK.java","additions":58,"deletions":27,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -41,0 +43,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -177,2 +180,2 @@\n-            for (File dir : patchPath.asList()) {\n-                File[] subdirs = dir.listFiles();\n+            for (Path dir : patchPath.asList()) {\n+                List<Path> subdirs = FileUtils.listFiles(dir);\n@@ -180,4 +183,5 @@\n-                    Arrays.sort(subdirs); \/\/ for repeatability; good enough for now\n-                    for (File subdir: subdirs) {\n-                        if (subdir.isDirectory()) {\n-                            mergeHandler.handleOption(Option.PATCH_MODULE, \"--patch-module\", subdir.getName() + \"=\" + subdir);\n+                    Collections.sort(subdirs); \/\/ for repeatability; good enough for now\n+                    for (Path subdir: subdirs) {\n+                        if (Files.isDirectory(subdir)) {\n+                            String moduleName = subdir.getFileName().toString();\n+                            mergeHandler.handleOption(Option.PATCH_MODULE, \"--patch-module\",  moduleName + \"=\" + subdir);\n@@ -325,1 +329,1 @@\n-         * @param keySet the separator to follow the key if one is specified\n+         * @param keySep the separator to follow the key if one is specified\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/JDKOpts.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,4 @@\n-import java.net.URI;\n-import java.net.URISyntaxException;\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -42,0 +44,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -56,0 +59,3 @@\n+        public Fault(String msg, Throwable cause) {\n+            super(msg, cause);\n+        }\n@@ -69,2 +75,2 @@\n-        public final File absSrcDir;\n-        public final File absClsDir;\n+        public final Path absSrcDir;\n+        public final Path absClsDir;\n@@ -73,1 +79,1 @@\n-        LibLocn(String name, File absSrcDir, File absClsDir, Kind kind) {\n+        LibLocn(String name, Path absSrcDir, Path absClsDir, Kind kind) {\n@@ -117,2 +123,2 @@\n-        public final File absSrcFile;\n-        public final File absClsFile;\n+        public final Path absSrcFile;\n+        public final Path absClsFile;\n@@ -120,1 +126,1 @@\n-        ClassLocn(LibLocn lib, String optModule, String className, File absSrcFile, File absClsFile) {\n+        ClassLocn(LibLocn lib, String optModule, String className, Path absSrcFile, Path absClsFile) {\n@@ -129,3 +135,3 @@\n-            return absClsFile.exists()\n-                    && absClsFile.canRead()\n-                    && (absClsFile.lastModified() > absSrcFile.lastModified());\n+            return Files.exists(absClsFile)\n+                    && Files.isReadable(absClsFile)\n+                    && FileUtils.compareLastModifiedTimes(absClsFile, absSrcFile) > 0;\n@@ -146,9 +152,9 @@\n-    private final File absTestFile;\n-    private final File absBaseSrcDir;\n-    private final File absTestSrcDir;\n-    private final File absBaseClsDir;\n-    private final File absTestClsDir;\n-    private final File absTestPatchDir;\n-    private final File absTestModulesDir;\n-    private final File absTestWorkDir;\n-    private final String relLibDir;\n+    private final Path absTestFile;\n+    private final Path absBaseSrcDir;\n+    private final Path absTestSrcDir;\n+    private final Path absBaseClsDir;\n+    private final Path absTestClsDir;\n+    private final Path absTestPatchDir;\n+    private final Path absTestModulesDir;\n+    private final Path absTestWorkDir;\n+    private final Path relLibDir;\n@@ -177,5 +183,6 @@\n-        absTestFile = td.getFile().getAbsoluteFile();\n-        File relTestFile = td.getRootRelativeFile();\n-        String relTestDir = relTestFile.getParent();\n-        if (relTestDir == null)\n-            relTestDir = \"\";\n+        absTestFile = td.getFile().toPath().toAbsolutePath();\n+        Path relTestFile = td.getRootRelativeFile().toPath();\n+        Path relTestDir = relTestFile.getParent();\n+        if (relTestDir == null) {\n+            relTestDir = Path.of(\".\");  \/\/ use normalize later to eliminate \".\"\n+        }\n@@ -183,1 +190,1 @@\n-        String testName = relTestFile.getName();\n+        String testName = relTestFile.getFileName().toString();\n@@ -189,1 +196,1 @@\n-        String relTestSrcDir = relLibDir = (packageRoot != null) ? packageRoot : relTestDir;\n+        Path relTestSrcDir = relLibDir = (packageRoot != null) ? Path.of(packageRoot) : relTestDir;\n@@ -191,2 +198,2 @@\n-        absBaseSrcDir = params.getTestSuite().getRootDir();\n-        absTestSrcDir = new File(absBaseSrcDir, relTestSrcDir);\n+        absBaseSrcDir = params.getTestSuite().getRootDir().toPath();\n+        absTestSrcDir = absBaseSrcDir.resolve(relTestSrcDir).normalize();\n@@ -194,2 +201,3 @@\n-        File relTestWorkDir = new File(relTestDir, uniqueTestSubDir);\n-        absTestWorkDir = params.getWorkDirectory().getFile(relTestWorkDir.getPath());\n+        Path workDirRoot = params.getWorkDirectory().getRoot().toPath();\n+        Path relTestWorkDir = relTestDir.resolve(uniqueTestSubDir);\n+        absTestWorkDir = workDirRoot.resolve(relTestWorkDir);\n@@ -197,4 +205,3 @@\n-        absBaseClsDir = getThreadSafeDir(params.getWorkDirectory().getFile(\"classes\"),\n-                params.getConcurrency());\n-        String relTestClsDir = (packageRoot != null) ? packageRoot\n-                : useUniqueClassDir ? new File(relTestDir, uniqueTestSubDir).getPath()\n+        absBaseClsDir = getThreadSafeDir(workDirRoot.resolve(\"classes\"), params.getConcurrency());\n+        Path relTestClsDir = (packageRoot != null) ? Path.of(packageRoot)\n+                : useUniqueClassDir ? relTestDir.resolve(uniqueTestSubDir)\n@@ -202,1 +209,1 @@\n-        absTestClsDir = new File(absBaseClsDir, relTestClsDir);\n+        absTestClsDir = absBaseClsDir.resolve(relTestClsDir).normalize();\n@@ -210,2 +217,2 @@\n-        absTestPatchDir = new File(absTestClsDir, \"patches\");\n-        absTestModulesDir = new File(absTestClsDir, \"modules\");\n+        absTestPatchDir = absTestClsDir.resolve(\"patches\");\n+        absTestModulesDir = absTestClsDir.resolve(\"modules\");\n@@ -234,2 +241,2 @@\n-            checkLibPath(libTail);\n-            if (new File(absBaseSrcDir, libTail).exists()) {\n+            checkLibPath(Path.of(libTail));\n+            if (Files.exists(absBaseSrcDir.resolve(libTail))) {\n@@ -239,2 +246,3 @@\n-                    for (File extRoot: testSuite.getExternalLibRoots(td)) {\n-                        if (new File(extRoot, libTail).exists()) {\n+                    for (File extRootFile: testSuite.getExternalLibRoots(td)) {\n+                        Path extRoot = extRootFile.toPath();\n+                        if (Files.exists(extRoot.resolve(libTail))) {\n@@ -254,1 +262,1 @@\n-                File dir = null;\n+                Path dir = null;\n@@ -256,1 +264,1 @@\n-                    dir = testJDK.getAbsoluteFile();\n+                    dir = testJDK.getAbsoluteHomeDirectory();\n@@ -258,1 +266,1 @@\n-                    dir = jtpath.asList().get(0).getParentFile().getParentFile();\n+                    dir = jtpath.asList().get(0).getParent().getParent();\n@@ -262,2 +270,2 @@\n-                    File absLib = new File(dir, libTail);\n-                    if (absLib.exists())\n+                    Path absLib = dir.resolve(libTail);\n+                    if (Files.exists(absLib))\n@@ -268,3 +276,3 @@\n-            checkLibPath(relLibDir.replace(File.separatorChar, '\/') + \"\/\" + lib);\n-            if (new File(absTestSrcDir, lib).exists())\n-                return createLibLocn(lib, absTestSrcDir, new File(absBaseClsDir, relLibDir));\n+            checkLibPath(relLibDir.resolve(lib));\n+            if (Files.exists(absTestSrcDir.resolve(lib)))\n+                return createLibLocn(lib, absTestSrcDir, absBaseClsDir.resolve(relLibDir));\n@@ -275,7 +283,4 @@\n-    private void checkLibPath(String lib) throws Fault {\n-        try {\n-            String l = new URI(lib).normalize().toString();\n-            if (l.equals(\"..\") || l.startsWith(\"..\/\"))\n-                throw new Fault(\"effective library path is outside the test suite: \" + l);\n-        } catch (URISyntaxException e) {\n-            throw new Fault(\"invalid library path: \" + lib);\n+    private void checkLibPath(Path lib) throws Fault {\n+        Path l = lib.normalize();\n+        if (l.startsWith(Path.of(\"..\"))) {\n+            throw new Fault(\"effective library path is outside the test suite: \" + l);\n@@ -294,1 +299,1 @@\n-    private LibLocn createLibLocn(String lib, File absBaseSrcDir, File absBaseClsDir) throws Fault {\n+    private LibLocn createLibLocn(String lib, Path absBaseSrcDir, Path absBaseClsDir) throws Fault {\n@@ -296,2 +301,2 @@\n-        File absLib = normalize(new File(absBaseSrcDir, relLib));\n-        if (absLib.isFile() && absLib.getName().endsWith(\".jar\")) {\n+        Path absLib = absBaseSrcDir.resolve(relLib).normalize();\n+        if (Files.isRegularFile(absLib) && absLib.getFileName().toString().endsWith(\".jar\")) {\n@@ -300,1 +305,1 @@\n-            if (!absLib.isDirectory())\n+            if (!Files.isDirectory(absLib))\n@@ -302,2 +307,2 @@\n-            File absLibSrcDir = absLib;\n-            File absLibClsDir = normalize(new File(absBaseClsDir, lib));\n+            Path absLibSrcDir = absLib;\n+            Path absLibClsDir = absBaseClsDir.resolve(relLib).normalize();\n@@ -323,1 +328,1 @@\n-    public Set<LibLocn.Kind> getDirKinds(File absSrcDir) {\n+    public Set<LibLocn.Kind> getDirKinds(Path absSrcDir) {\n@@ -325,3 +330,3 @@\n-        for (File f: absSrcDir.listFiles()) {\n-            if (f.isDirectory()) {\n-                if (isSystemModule(f.getName())) {\n+        for (Path f : FileUtils.listFiles(absSrcDir)) {\n+            if (Files.isDirectory(f)) {\n+                if (isSystemModule(f.getFileName().toString())) {\n@@ -329,1 +334,1 @@\n-                } else if (new File(f, \"module-info.java\").exists()) {\n+                } else if (Files.exists((f.resolve(\"module-info.java\")))) {\n@@ -337,0 +342,1 @@\n+\n@@ -356,1 +362,1 @@\n-    public LibLocn.Kind getDirKind(File absSrcDir) throws Fault {\n+    public LibLocn.Kind getDirKind(Path absSrcDir) throws Fault {\n@@ -376,1 +382,1 @@\n-    public File absTestFile() {\n+    public Path absTestFile() {\n@@ -384,1 +390,1 @@\n-    public File absTestSrcDir() {\n+    public Path absTestSrcDir() {\n@@ -393,1 +399,1 @@\n-    public File absTestSrcDir(String optModule) {\n+    public Path absTestSrcDir(String optModule) {\n@@ -404,1 +410,1 @@\n-    public File absTestSrcFile(String optModule, File srcFile) {\n+    public Path absTestSrcFile(String optModule, File srcFile) {\n@@ -416,2 +422,2 @@\n-    public List<File> absTestSrcPath() {\n-        List<File> list = new ArrayList<>();\n+    public List<Path> absTestSrcPath() {\n+        List<Path> list = new ArrayList<>();\n@@ -432,2 +438,2 @@\n-    public List<File> absLibSrcList(LibLocn.Kind kind) {\n-        List<File> list = new ArrayList<>();\n+    public List<Path> absLibSrcList(LibLocn.Kind kind) {\n+        List<Path> list = new ArrayList<>();\n@@ -446,2 +452,2 @@\n-    public List<File> absLibSrcJarList() {\n-        List<File> list = new ArrayList<>();\n+    public List<Path> absLibSrcJarList() {\n+        List<Path> list = new ArrayList<>();\n@@ -450,2 +456,2 @@\n-                File f = l.absClsDir;\n-                if (f.isFile() && f.getName().endsWith(\".jar\") && f.exists())\n+                Path f = l.absClsDir;\n+                if (Files.isRegularFile(f) && f.getFileName().toString().endsWith(\".jar\") && Files.exists(f))\n@@ -465,1 +471,1 @@\n-    public File absBaseClsDir() {\n+    public Path absBaseClsDir() {\n@@ -473,1 +479,1 @@\n-    public File absTestClsDir() {\n+    public Path absTestClsDir() {\n@@ -483,1 +489,1 @@\n-    public File absTestClsDir(String optModule) {\n+    public Path absTestClsDir(String optModule) {\n@@ -487,1 +493,1 @@\n-            return new File(absTestPatchDir(), optModule);\n+            return absTestPatchDir().resolve(optModule);\n@@ -489,1 +495,1 @@\n-            return new File(absTestModulesDir(), optModule);\n+            return absTestModulesDir().resolve(optModule);\n@@ -499,2 +505,2 @@\n-    public List<File> absTestClsPath() {\n-        List<File> list = new ArrayList<>();\n+    public List<Path> absTestClsPath() {\n+        List<Path> list = new ArrayList<>();\n@@ -517,2 +523,2 @@\n-    public List<File> absLibClsList(LibLocn.Kind kind) {\n-        List<File> list = new ArrayList<>();\n+    public List<Path> absLibClsList(LibLocn.Kind kind) {\n+        List<Path> list = new ArrayList<>();\n@@ -532,2 +538,2 @@\n-    public File absTestWorkFile(String name) {\n-        return new File(absTestWorkDir, name);\n+    public Path absTestWorkFile(String name) {\n+        return absTestWorkDir.resolve(name);\n@@ -541,1 +547,1 @@\n-    public File absTestModulesDir() {\n+    public Path absTestModulesDir() {\n@@ -550,1 +556,1 @@\n-    public File absTestPatchDir() {\n+    public Path absTestPatchDir() {\n@@ -629,1 +635,1 @@\n-            if (getFile(absTestSrcDir, moduleName).exists()) {\n+            if (Files.exists(getFile(absTestSrcDir, moduleName))) {\n@@ -633,1 +639,1 @@\n-                if (l.kind == LibLocn.Kind.SYS_MODULE && getFile(l.absSrcDir, moduleName).exists()) {\n+                if (l.kind == LibLocn.Kind.SYS_MODULE && Files.exists(getFile(l.absSrcDir, moduleName))) {\n@@ -639,1 +645,1 @@\n-            if (getFile(absTestSrcDir, moduleName).exists()) {\n+            if (Files.exists(getFile(absTestSrcDir, moduleName))) {\n@@ -644,1 +650,1 @@\n-                if (l.kind == LibLocn.Kind.USER_MODULE && getFile(l.absSrcDir, moduleName).exists()) {\n+                if (l.kind == LibLocn.Kind.USER_MODULE && Files.exists(getFile(l.absSrcDir, moduleName))) {\n@@ -674,1 +680,1 @@\n-            File sf, cf;\n+            Path sf, cf;\n@@ -676,1 +682,1 @@\n-            if ((sf = getFile(locn.absSrcDir, optModule, relSrc)).exists()) {\n+            if (Files.exists(sf = getFile(locn.absSrcDir, optModule, relSrc))) {\n@@ -686,2 +692,2 @@\n-                    if ((sf = new File(absTestSrcDir, baseName)).exists()) {\n-                        cf = new File(absTestClsDir, relCls);\n+                    if (Files.exists(sf = absTestSrcDir.resolve(baseName))) {\n+                        cf = absTestClsDir.resolve(relCls);\n@@ -715,1 +721,1 @@\n-        File pkgSrcDir, pkgClsDir;\n+        Path pkgSrcDir, pkgClsDir;\n@@ -725,1 +731,1 @@\n-        if (!pkgSrcDir.isDirectory())\n+        if (!Files.isDirectory(pkgSrcDir))\n@@ -728,6 +734,13 @@\n-        for (File sf: pkgSrcDir.listFiles()) {\n-            String fn = sf.getName();\n-            if (sf.isDirectory()) {\n-                if (recursive) {\n-                    String subpkg = (optPackage == null) ? fn : optPackage + \".\" + fn;\n-                    locateClassesInPackage(l, optModule, subpkg, true, results);\n+        try (DirectoryStream<Path> ds = Files.newDirectoryStream(pkgSrcDir)) {\n+            for (Path sf : ds) {\n+                String fn = sf.getFileName().toString();\n+                if (Files.isDirectory(sf)) {\n+                    if (recursive) {\n+                        String subpkg = (optPackage == null) ? fn : optPackage + \".\" + fn;\n+                        locateClassesInPackage(l, optModule, subpkg, true, results);\n+                    }\n+                } else if (Files.isReadable(sf) && hasExtn(fn, extns)) {\n+                    String cn = fn.substring(0, fn.lastIndexOf(\".\"));\n+                    String className = (optPackage == null) ? cn : optPackage + \".\" + cn;\n+                    Path cf = pkgClsDir.resolve(cn + \".class\");\n+                    results.add(new ClassLocn(l, optModule, className, sf, cf));\n@@ -735,5 +748,0 @@\n-            } else if (sf.isFile() && hasExtn(fn, extns)) {\n-                String cn = fn.substring(0, fn.lastIndexOf(\".\"));\n-                String className = (optPackage == null) ? cn : optPackage + \".\" + cn;\n-                File cf = new File(pkgClsDir, cn + \".class\");\n-                results.add(new ClassLocn(l, optModule, className, sf, cf));\n@@ -741,0 +749,2 @@\n+        } catch (IOException e) {\n+            throw new Fault(\"error reading directory \" + pkgSrcDir, e);\n@@ -746,6 +756,2 @@\n-    private File getFile(File absBaseDir, String optModule) {\n-        return (optModule == null) ? absBaseDir : new File(absBaseDir, optModule);\n-    }\n-\n-    private File getFile(File absBaseDir, String optModule, String relFile) {\n-        return new File(getFile(absBaseDir, optModule), relFile);\n+    private Path getFile(Path absBaseDir, String optModule) {\n+        return (optModule == null) ? absBaseDir : absBaseDir.resolve(optModule);\n@@ -754,2 +760,2 @@\n-    private static File normalize(File f) {\n-        return new File(f.toURI().normalize());\n+    private Path getFile(Path absBaseDir, String optModule, String relFile) {\n+        return getFile(absBaseDir, optModule).resolve(relFile);\n@@ -770,1 +776,1 @@\n-    private static final ThreadLocal<Integer> uniqueNum = new ThreadLocal<Integer>() {\n+    private static final ThreadLocal<Integer> uniqueNum = new ThreadLocal<>() {\n@@ -777,1 +783,1 @@\n-    private File getThreadSafeDir(File file, int concurrency) {\n+    private Path getThreadSafeDir(Path file, int concurrency) {\n@@ -780,1 +786,1 @@\n-                : new File(file, String.valueOf(getCurrentThreadId()));\n+                : file.resolve(String.valueOf(getCurrentThreadId()));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/Locations.java","additions":133,"deletions":127,"binary":false,"changes":260,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-        List<Integer> v = new ArrayList<Integer>();\n+        List<Integer> v = new ArrayList<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/OS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n- *\n- * @author Iris A Garcia\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/ParseException.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,3 +39,1 @@\n- *\n- * @author Dmitry Fazunenko\n- * @author jjg\n+ * The set of named values used for evaluating expressions in test descriptions.\n@@ -59,1 +57,1 @@\n-     * Creates a context for used with nteh specified parameters.\n+     * Creates a context for used with the specified parameters.\n@@ -70,1 +68,1 @@\n-        values = new HashMap<String, String>();\n+        values = new HashMap<>();\n@@ -152,2 +150,2 @@\n-        Map<String, Boolean> vmBools = new HashMap<String, Boolean>();\n-        Map<String, String> vmProps = new HashMap<String, String>();\n+        Map<String, Boolean> vmBools = new HashMap<>();\n+        Map<String, String> vmProps = new HashMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionContext.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        super(\"regtest\", new ArrayList<Map<String, String>>(), new String[] { });\n+        super(\"regtest\", new ArrayList<>(), new String[] { });\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n@@ -41,0 +44,1 @@\n+import java.util.Objects;\n@@ -63,0 +67,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -64,0 +69,1 @@\n+import com.sun.javatest.util.I18NResourceBundle;\n@@ -140,1 +146,1 @@\n-    public void setExcludeLists(File[] files) {\n+    public void setExcludeLists(Path[] files) {\n@@ -143,1 +149,1 @@\n-        mep.setExcludeFiles(files);\n+        mep.setExcludeFiles(FileUtils.toFiles(files));\n@@ -466,1 +472,1 @@\n-            List<File> matchList = getMatchLists();\n+            List<Path> matchList = getMatchLists();\n@@ -472,1 +478,4 @@\n-                    el = new ExcludeList(matchList.toArray(new File[]{}));\n+                    el = new ExcludeList(matchList.stream()\n+                            .map(Path::toFile)\n+                            .collect(Collectors.toList())\n+                            .toArray(new File[0]));\n@@ -633,1 +642,6 @@\n-        String v;\n+        try {\n+            String v;\n+\n+            v = data.get(prefix + ENVVARS);\n+            if (v != null)\n+                setEnvVars(deserializeEnv(v, \"\\n\"));\n@@ -635,3 +649,3 @@\n-        v = data.get(prefix + ENVVARS);\n-        if (v != null)\n-            setEnvVars(deserializeEnv(v, \"\\n\"));\n+            v = data.get(prefix + CHECK);\n+            if (v != null)\n+                setCheck(v.equals(\"true\"));\n@@ -639,3 +653,3 @@\n-        v = data.get(prefix + CHECK);\n-        if (v != null)\n-            setCheck(v.equals(\"true\"));\n+            v = data.get(prefix + EXEC_MODE);\n+            if (v != null)\n+                setExecMode(ExecMode.valueOf(v));\n@@ -643,3 +657,3 @@\n-        v = data.get(prefix + EXEC_MODE);\n-        if (v != null)\n-            setExecMode(ExecMode.valueOf(v));\n+            v = data.get(prefix + IGNORE);\n+            if (v != null)\n+                setIgnoreKind(IgnoreKind.valueOf(v));\n@@ -647,3 +661,3 @@\n-        v = data.get(prefix + IGNORE);\n-        if (v != null)\n-            setIgnoreKind(IgnoreKind.valueOf(v));\n+            v = data.get(prefix + COMPILE_JDK);\n+            if (v != null)\n+                setCompileJDK(JDK.of(v));\n@@ -651,3 +665,3 @@\n-        v = data.get(prefix + COMPILE_JDK);\n-        if (v != null)\n-            setCompileJDK(JDK.of(v));\n+            v = data.get(prefix + TEST_JDK);\n+            if (v != null)\n+                setTestJDK(JDK.of(v));\n@@ -655,3 +669,3 @@\n-        v = data.get(prefix + TEST_JDK);\n-        if (v != null)\n-            setTestJDK(JDK.of(v));\n+            v = data.get(prefix + TEST_VM_OPTIONS);\n+            if (v != null && v.length() > 0)\n+                setTestVMOptions(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n@@ -659,3 +673,3 @@\n-        v = data.get(prefix + TEST_VM_OPTIONS);\n-        if (v != null && v.length() > 0)\n-            setTestVMOptions(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n+            v = data.get(prefix + TEST_COMPILER_OPTIONS);\n+            if (v != null && v.length() > 0)\n+                setTestCompilerOptions(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n@@ -663,3 +677,3 @@\n-        v = data.get(prefix + TEST_COMPILER_OPTIONS);\n-        if (v != null && v.length() > 0)\n-            setTestCompilerOptions(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n+            v = data.get(prefix + TEST_JAVA_OPTIONS);\n+            if (v != null && v.length() > 0)\n+                setTestJavaOptions(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n@@ -667,3 +681,3 @@\n-        v = data.get(prefix + TEST_JAVA_OPTIONS);\n-        if (v != null && v.length() > 0)\n-            setTestJavaOptions(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n+            v = data.get(prefix + RETAIN_ARGS);\n+            if (v != null && v.length() > 0)\n+                setRetainArgs(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n@@ -671,3 +685,3 @@\n-        v = data.get(prefix + RETAIN_ARGS);\n-        if (v != null && v.length() > 0)\n-            setRetainArgs(Arrays.asList(StringUtils.splitSeparator(\"\\n\", v)));\n+            v = data.get(prefix + JUNIT);\n+            if (v != null)\n+                setJUnitPath(new SearchPath(v));\n@@ -675,3 +689,3 @@\n-        v = data.get(prefix + JUNIT);\n-        if (v != null)\n-            setJUnitPath(new SearchPath(v));\n+            v = data.get(prefix + TESTNG);\n+            if (v != null)\n+                setTestNGPath(new SearchPath(v));\n@@ -679,3 +693,3 @@\n-        v = data.get(prefix + TESTNG);\n-        if (v != null)\n-            setTestNGPath(new SearchPath(v));\n+            v = data.get(prefix + ASMTOOLS);\n+            if (v != null)\n+                setAsmToolsPath(new SearchPath(v));\n@@ -683,3 +697,3 @@\n-        v = data.get(prefix + ASMTOOLS);\n-        if (v != null)\n-            setAsmToolsPath(new SearchPath(v));\n+            v = data.get(prefix + TIMELIMIT);\n+            if (v != null)\n+                setTimeLimit(Integer.parseInt(v));\n@@ -687,3 +701,3 @@\n-        v = data.get(prefix + TIMELIMIT);\n-        if (v != null)\n-            setTimeLimit(Integer.parseInt(v));\n+            v = data.get(prefix + REPORTDIR);\n+            if (v != null)\n+                setReportDir(Path.of(v));\n@@ -691,3 +705,3 @@\n-        v = data.get(prefix + REPORTDIR);\n-        if (v != null)\n-            setReportDir(new File(v));\n+            v = data.get(prefix + EXCLUSIVE_LOCK);\n+            if (v != null)\n+                setExclusiveLock(Path.of(v));\n@@ -695,3 +709,3 @@\n-        v = data.get(prefix + EXCLUSIVE_LOCK);\n-        if (v != null)\n-            setExclusiveLock(new File(v));\n+            v = data.get(prefix + NATIVEDIR);\n+            if (v != null)\n+                setNativeDir(Path.of(v));\n@@ -699,3 +713,3 @@\n-        v = data.get(prefix + NATIVEDIR);\n-        if (v != null)\n-            setNativeDir(new File(v));\n+            v = data.get(prefix + TIMEOUT_HANDLER);\n+            if (v != null)\n+                setTimeoutHandler(v);\n@@ -703,3 +717,3 @@\n-        v = data.get(prefix + TIMEOUT_HANDLER);\n-        if (v != null)\n-            setTimeoutHandler(v);\n+            v = data.get(prefix + TIMEOUT_HANDLER_PATH);\n+            if (v != null)\n+                setTimeoutHandlerPath(v);\n@@ -707,3 +721,3 @@\n-        v = data.get(prefix + TIMEOUT_HANDLER_PATH);\n-        if (v != null)\n-            setTimeoutHandlerPath(v);\n+            v = data.get(prefix + TIMEOUT_HANDLER_TIMEOUT);\n+            if (v != null)\n+                setTimeoutHandlerTimeout(v);\n@@ -711,3 +725,6 @@\n-        v = data.get(prefix + TIMEOUT_HANDLER_TIMEOUT);\n-        if (v != null)\n-            setTimeoutHandlerTimeout(v);\n+        } catch (InvalidPathException e) {\n+            \/\/ This is unlikely to happen, but pretty serious if it does.\n+            \/\/ Since we only put valid paths into the parameters, there should be\n+            \/\/ no issue retrieving them after the save-load sequence.\n+            throw new Interview.Fault(i18n, \"rp.badPath\", e.getInput(), e.getMessage());\n+        }\n@@ -763,1 +780,1 @@\n-            data.put(prefix + REPORTDIR, reportDir.getPath());\n+            data.put(prefix + REPORTDIR, reportDir.toString());\n@@ -766,1 +783,1 @@\n-            data.put(prefix + EXCLUSIVE_LOCK, exclusiveLock.getPath());\n+            data.put(prefix + EXCLUSIVE_LOCK, exclusiveLock.toString());\n@@ -769,1 +786,1 @@\n-            data.put(prefix + NATIVEDIR, nativeDir.getPath());\n+            data.put(prefix + NATIVEDIR, nativeDir.toString());\n@@ -777,1 +794,1 @@\n-            for (File file: timeoutHandlerPath) {\n+            for (Path file: timeoutHandlerPath) {\n@@ -966,1 +983,1 @@\n-            File jtClsDir = ProductInfo.getJavaTestClassDir();\n+            Path jtClsDir = ProductInfo.getJavaTestClassDir().toPath();\n@@ -969,2 +986,2 @@\n-            if (jtClsDir.getName().equals(\"javatest.jar\")) {\n-                File installDir = jtClsDir.getParentFile();\n+            if (jtClsDir.getFileName().toString().equals(\"javatest.jar\")) {\n+                Path installDir = jtClsDir.getParent();\n@@ -972,2 +989,2 @@\n-                File jtreg = new File(installDir, \"jtreg.jar\");\n-                if (jtreg.exists()) {\n+                Path jtreg = installDir.resolve(\"jtreg.jar\");\n+                if (Files.exists(jtreg)) {\n@@ -978,1 +995,1 @@\n-                    javaTestClassPath.append(new File(location.toURI()));\n+                    javaTestClassPath.append(Path.of(location.toURI()));\n@@ -1027,1 +1044,1 @@\n-            opts.add(\"-Djava.library.path=\" + nativeDir.getAbsolutePath());\n+            opts.add(\"-Djava.library.path=\" + nativeDir.toAbsolutePath());\n@@ -1152,3 +1169,2 @@\n-    public void setReportDir(File reportDir) {\n-        reportDir.getClass(); \/\/ null check\n-        this.reportDir = reportDir;\n+    public void setReportDir(Path reportDir) {\n+        this.reportDir = Objects.requireNonNull(reportDir);\n@@ -1157,1 +1173,1 @@\n-    public File getReportDir() {\n+    public Path getReportDir() {\n@@ -1161,1 +1177,1 @@\n-    private File reportDir;\n+    private Path reportDir;\n@@ -1165,3 +1181,2 @@\n-    public void setExclusiveLock(File exclusiveLock) {\n-        exclusiveLock.getClass(); \/\/ null check\n-        this.exclusiveLock = exclusiveLock;\n+    public void setExclusiveLock(Path exclusiveLock) {\n+        this.exclusiveLock = Objects.requireNonNull(exclusiveLock);\n@@ -1170,1 +1185,1 @@\n-    public File getExclusiveLock() {\n+    public Path getExclusiveLock() {\n@@ -1174,1 +1189,1 @@\n-    private File exclusiveLock;\n+    private Path exclusiveLock;\n@@ -1178,1 +1193,1 @@\n-    public void setNativeDir(File nativeDir) {\n+    public void setNativeDir(Path nativeDir) {\n@@ -1182,1 +1197,1 @@\n-    public File getNativeDir() {\n+    public Path getNativeDir() {\n@@ -1186,1 +1201,1 @@\n-    private File nativeDir;\n+    private Path nativeDir;\n@@ -1208,1 +1223,1 @@\n-                this.timeoutHandlerPath.add(new File(f));\n+                this.timeoutHandlerPath.add(Path.of(f));\n@@ -1213,3 +1228,2 @@\n-    public void setTimeoutHandlerPath(List<File> timeoutHandlerPath) {\n-        timeoutHandlerPath.getClass(); \/\/ null check\n-        this.timeoutHandlerPath = timeoutHandlerPath;\n+    public void setTimeoutHandlerPath(List<Path> timeoutHandlerPath) {\n+        this.timeoutHandlerPath = Objects.requireNonNull(timeoutHandlerPath);\n@@ -1218,1 +1232,1 @@\n-    List<File> getTimeoutHandlerPath() {\n+    List<Path> getTimeoutHandlerPath() {\n@@ -1222,1 +1236,1 @@\n-    private List<File> timeoutHandlerPath;\n+    private List<Path> timeoutHandlerPath;\n@@ -1242,1 +1256,1 @@\n-    public void setMatchLists(File[] files) {\n+    public void setMatchLists(Path[] files) {\n@@ -1246,1 +1260,1 @@\n-    List<File> getMatchLists() {\n+    List<Path> getMatchLists() {\n@@ -1250,1 +1264,1 @@\n-    private List<File> matchLists;\n+    private List<Path> matchLists;\n@@ -1334,1 +1348,1 @@\n-            put(map, \"test.nativepath\", getNativeDir(), File::getAbsolutePath);\n+            put(map, \"test.nativepath\", getNativeDir(), p -> p.toAbsolutePath().toString());\n@@ -1351,1 +1365,1 @@\n-    private OS getTestOS() {\n+    public OS getTestOS() {\n@@ -1375,0 +1389,2 @@\n+\n+    private static final I18NResourceBundle i18n = I18NResourceBundle.getBundleForClass(RegressionParameters.class);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionParameters.java","additions":117,"deletions":101,"binary":false,"changes":218,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-  * @author Iris A Garcia\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionTestFinder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,1 +192,1 @@\n-        GroupManager g = new GroupManager(out, getRootDir(), properties.getGroupFiles());\n+        GroupManager g = new GroupManager(out, getRootDir().toPath(), properties.getGroupFiles());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionTestSuite.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -53,0 +55,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -69,3 +72,3 @@\n-    private final File baseDir;\n-    private File reportDir;\n-    private File workDir;\n+    private final Path baseDir;\n+    private Path reportDir;\n+    private Path workDir;\n@@ -74,1 +77,1 @@\n-    Map<File, Entry> map = new TreeMap<>();\n+    Map<Path, Entry> map = new TreeMap<>();\n@@ -77,1 +80,1 @@\n-        final File rootDir;\n+        final Path rootDir;\n@@ -85,1 +88,1 @@\n-        File reportDir;\n+        Path reportDir;\n@@ -87,1 +90,1 @@\n-        Entry(File rootDir) {\n+        Entry(Path rootDir) {\n@@ -93,1 +96,1 @@\n-        final File file;\n+        final Path file;\n@@ -96,1 +99,1 @@\n-        public FileId(File file, String id) {\n+        public FileId(Path file, String id) {\n@@ -102,1 +105,1 @@\n-    public TestManager(PrintWriter out, File baseDir, TestFinder.ErrorHandler errHandler) {\n+    public TestManager(PrintWriter out, Path baseDir, TestFinder.ErrorHandler errHandler) {\n@@ -104,1 +107,1 @@\n-        this.baseDir = baseDir.getAbsoluteFile();\n+        this.baseDir = baseDir.toAbsolutePath();\n@@ -108,3 +111,3 @@\n-    public void addTestFiles(Collection<File> testFiles, boolean ignoreEmptyFiles) throws Fault {\n-        Map<File, File> rootDirCache = new HashMap<>();\n-        for (File tf: testFiles) {\n+    public void addTestFiles(Collection<Path> testFiles, boolean ignoreEmptyFiles) throws Fault {\n+        Map<Path, Path> rootDirCache = new HashMap<>();\n+        for (Path tf: testFiles) {\n@@ -116,1 +119,1 @@\n-        Map<File, File> rootDirCache = new HashMap<>();\n+        Map<Path, Path> rootDirCache = new HashMap<>();\n@@ -122,3 +125,3 @@\n-    private void addTest(Map<File, File> rootDirCache, File tf, String id, boolean ignoreEmptyFiles) throws Fault {\n-        File f = canon(tf);\n-        if (!f.exists())\n+    private void addTest(Map<Path, Path> rootDirCache, Path tf, String id, boolean ignoreEmptyFiles) throws Fault {\n+        Path f = canon(tf.toFile()).toPath();\n+        if (!Files.exists(f))\n@@ -126,1 +129,1 @@\n-        File rootDir = getRootDir(rootDirCache, f);\n+        Path rootDir = getRootDir(rootDirCache, f);\n@@ -144,2 +147,2 @@\n-            File rootDir = canon((sep == 0) ? baseDir : new File(g.substring(0, sep)));\n-            if (!new File(rootDir, \"TEST.ROOT\").exists())\n+            Path rootDir = canon((sep == 0) ? baseDir : Path.of(g.substring(0, sep)));\n+            if (!Files.exists(rootDir.resolve(\"TEST.ROOT\")))\n@@ -165,2 +168,2 @@\n-                e.testSuite = RegressionTestSuite.open(e.rootDir, errHandler);\n-                if (!e.testSuite.getRootDir().equals(e.rootDir)) {\n+                e.testSuite = RegressionTestSuite.open(e.rootDir.toFile(), errHandler);\n+                if (!e.testSuite.getRootDir().toPath().equals(e.rootDir)) {\n@@ -181,1 +184,1 @@\n-    public void setWorkDirectory(File wd) {\n+    public void setWorkDirectory(Path wd) {\n@@ -189,1 +192,1 @@\n-    public File getWorkDirectory() {\n+    public Path getWorkDirectory() {\n@@ -196,1 +199,1 @@\n-        Entry e = map.get(ts.getRootDir());\n+        Entry e = map.get(ts.getRootDir().toPath());\n@@ -202,1 +205,2 @@\n-            File wd = (e.subdir == null) ? workDir : new File(workDir, e.subdir);\n+            Path wd = (e.subdir == null) ? workDir : workDir.resolve(e.subdir);\n+            File wdf = wd.toFile();\n@@ -204,4 +208,4 @@\n-                if (WorkDirectory.isWorkDirectory(wd))\n-                    e.workDir = WorkDirectory.open(wd, ts);\n-                else if (wd.exists())\n-                    e.workDir = WorkDirectory.convert(wd, ts);\n+                if (WorkDirectory.isWorkDirectory(wdf))\n+                    e.workDir = WorkDirectory.open(wdf, ts);\n+                else if (Files.exists(wd))\n+                    e.workDir = WorkDirectory.convert(wdf, ts);\n@@ -209,1 +213,1 @@\n-                    e.workDir = WorkDirectory.create(wd, ts);\n+                    e.workDir = WorkDirectory.create(wdf, ts);\n@@ -211,1 +215,1 @@\n-                throw new Fault(i18n, \"tm.cantRead\", wd.getName(), ex);\n+                throw new Fault(i18n, \"tm.cantRead\", wd.getFileName().toString(), ex);\n@@ -213,1 +217,1 @@\n-                throw new Fault(i18n, \"tm.cantRead\", wd.getName(), ex);\n+                throw new Fault(i18n, \"tm.cantRead\", wd.getFileName().toString(), ex);\n@@ -220,1 +224,1 @@\n-    public void setReportDirectory(File rd) {\n+    public void setReportDirectory(Path rd) {\n@@ -228,1 +232,1 @@\n-    public File getReportDirectory() {\n+    public Path getReportDirectory() {\n@@ -234,2 +238,2 @@\n-    public File getReportDirectory(RegressionTestSuite ts) throws Fault {\n-        Entry e = map.get(ts.getRootDir());\n+    public Path getReportDirectory(RegressionTestSuite ts) throws Fault {\n+        Entry e = map.get(ts.getRootDir().toPath());\n@@ -241,1 +245,1 @@\n-            e.reportDir = (e.subdir == null) ? reportDir : new File(reportDir, e.subdir);\n+            e.reportDir = (e.subdir == null) ? reportDir : reportDir.resolve(e.subdir);\n@@ -250,1 +254,1 @@\n-        Entry e = map.get(ts.getRootDir());\n+        Entry e = map.get(ts.getRootDir().toPath());\n@@ -259,1 +263,1 @@\n-        Entry e = map.get(ts.getRootDir());\n+        Entry e = map.get(ts.getRootDir().toPath());\n@@ -274,1 +278,1 @@\n-        for (File f: expandGroups(e)) {\n+        for (Path f: expandGroups(e)) {\n@@ -319,1 +323,1 @@\n-        Entry e = map.get(ts.getRootDir());\n+        Entry e = map.get(ts.getRootDir().toPath());\n@@ -325,1 +329,1 @@\n-    private Entry getEntry(File rootDir) {\n+    private Entry getEntry(Path rootDir) {\n@@ -334,1 +338,1 @@\n-     * @param cache a cache of earlier results to improve performance\n+     * @param rootDirCache a cache of earlier results to improve performance\n@@ -337,1 +341,1 @@\n-     *      or null if these is no such directory\n+     *      or null if there is no such directory\n@@ -339,1 +343,1 @@\n-    private File getRootDir(Map<File, File> rootDirCache, File file) {\n+    private Path getRootDir(Map<Path, Path> rootDirCache, Path file) {\n@@ -342,3 +346,3 @@\n-        if (file.isFile())\n-            return getRootDir(rootDirCache, file.getParentFile());\n-        File ts = rootDirCache.get(file);\n+        if (Files.isRegularFile(file))\n+            return getRootDir(rootDirCache, file.getParent());\n+        Path ts = rootDirCache.get(file);\n@@ -346,2 +350,2 @@\n-            ts = new File(file, \"TEST.ROOT\").exists()\n-                    ? file : getRootDir(rootDirCache, file.getParentFile());\n+            ts = Files.exists(file.resolve(\"TEST.ROOT\"))\n+                    ? file : getRootDir(rootDirCache, file.getParent());\n@@ -358,1 +362,1 @@\n-        if (WorkDirectory.isWorkDirectory(workDir))\n+        if (WorkDirectory.isWorkDirectory(workDir.toFile()))\n@@ -364,2 +368,2 @@\n-        if (workDir.exists()) {\n-            if (!workDir.isDirectory())\n+        if (Files.exists(workDir)) {\n+            if (!Files.isDirectory(workDir))\n@@ -367,2 +371,2 @@\n-            for (File f: workDir.listFiles()) {\n-                String subdir = f.getName();\n+            for (Path f: FileUtils.listFiles(workDir)) {\n+                String subdir = f.getFileName().toString();\n@@ -370,3 +374,3 @@\n-                if (WorkDirectory.isUsableWorkDirectory(f)) {\n-                    File tsr = getTestSuiteForWorkDirectory(f);\n-                    Entry e = map.get(tsr);\n+                if (WorkDirectory.isUsableWorkDirectory(f.toFile())) {\n+                    File tsr = getTestSuiteForWorkDirectory(f.toFile());\n+                    Entry e = map.get(tsr.toPath());\n@@ -382,3 +386,3 @@\n-                String subdir = e.rootDir.getName();\n-                if (e.rootDir.getParentFile() != null)\n-                    subdir = e.rootDir.getParentFile().getName() + \"_\" + subdir;\n+                String subdir = e.rootDir.getFileName().toString();\n+                if (e.rootDir.getParent() != null)\n+                    subdir = e.rootDir.getParent().getFileName() + \"_\" + subdir;\n@@ -418,1 +422,1 @@\n-    private Set<File> expandGroups(Entry e) throws Fault {\n+    private Set<Path> expandGroups(Entry e) throws Fault {\n@@ -420,1 +424,1 @@\n-            Set<File> results = new LinkedHashSet<>();\n+            Set<Path> results = new LinkedHashSet<>();\n@@ -447,1 +451,1 @@\n-        File f = file.isAbsolute() ? file : new File(baseDir, file.getPath());\n+        File f = file.isAbsolute() ? file : new File(baseDir.toFile(), file.getPath());\n@@ -455,0 +459,9 @@\n+    Path canon(Path file) {\n+        Path f = file.isAbsolute() ? file : baseDir.resolve(file);\n+        try {\n+            return f.toRealPath();\n+        } catch (IOException e) {\n+            return getNormalizedFile(f);\n+        }\n+    }\n+\n@@ -459,1 +472,6 @@\n-    static String getRelativePath(File base, File f, String id) {\n+    static Path getNormalizedFile(Path f) {\n+        return f.toAbsolutePath().normalize();\n+    }\n+\n+    static String getRelativePath(Path base, Path f, String id) {\n+        \/\/ maybe use base.relativize(f) ?\n@@ -461,1 +479,1 @@\n-        for ( ; f != null; f = f.getParentFile()) {\n+        for ( ; f != null; f = f.getParent()) {\n@@ -469,1 +487,1 @@\n-            sb.insert(0, f.getName());\n+            sb.insert(0, f.getFileName().toString());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/TestManager.java","additions":88,"deletions":70,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-                    Set<File> set = (parent == null) ? new LinkedHashSet<File>() : new LinkedHashSet<>(parent);\n+                    Set<File> set = (parent == null) ? new LinkedHashSet<>() : new LinkedHashSet<>(parent);\n@@ -322,1 +322,1 @@\n-                    Set<String> set = (parent == null) ? new LinkedHashSet<String>() : new LinkedHashSet<>(parent);\n+                    Set<String> set = (parent == null) ? new LinkedHashSet<>() : new LinkedHashSet<>(parent);\n@@ -345,1 +345,1 @@\n-                    Set<String> set = (parent == null) ? new LinkedHashSet<String>() : new LinkedHashSet<>(parent);\n+                    Set<String> set = (parent == null) ? new LinkedHashSet<>() : new LinkedHashSet<>(parent);\n@@ -364,1 +364,1 @@\n-                    Set<String> set = (parent == null) ? new LinkedHashSet<String>() : new LinkedHashSet<>(parent);\n+                    Set<String> set = (parent == null) ? new LinkedHashSet<>() : new LinkedHashSet<>(parent);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/TestProperties.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,2 @@\n+rp.badPath=\"Bad path: {0}: {1}\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/i18n.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -59,0 +61,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -71,2 +74,0 @@\n- *\n- * @author Iris A Garcia\n@@ -137,1 +138,1 @@\n-            File nativeDir = script.getNativeDir();\n+            Path nativeDir = script.getNativeDir();\n@@ -159,1 +160,1 @@\n-                    envVars.put(libPathName, nativeDir.getPath());\n+                    envVars.put(libPathName, nativeDir.toString());\n@@ -161,1 +162,1 @@\n-                    envVars.put(libPathName, libPath + File.pathSeparator + nativeDir.getPath());\n+                    envVars.put(libPathName, libPath + File.pathSeparator + nativeDir);\n@@ -175,3 +176,3 @@\n-        File f = script.absTestWorkFile(getName() + \".\" + script.getNextSerial() + \".jta\");\n-        f.getParentFile().mkdirs();\n-        return f;\n+        Path f = script.absTestWorkFile(getName() + \".\" + script.getNextSerial() + \".jta\");\n+        FileUtils.createDirectories(f.getParent());\n+        return f.toFile();\n@@ -280,2 +281,1 @@\n-        File newPolicy = new File(script.absTestScratchDir(),\n-                                  (fileName.getName()) + \"_new\");\n+        File newPolicy = script.absTestScratchDir().resolve(fileName.getName() + \"_new\").toFile();\n@@ -288,1 +288,1 @@\n-                        + script.absTestClsTopDir().getPath().replace(FILESEP, \"{\/}\")\n+                        + script.absTestClsTopDir().toString().replace(FILESEP, \"{\/}\")\n@@ -297,1 +297,1 @@\n-                List<File> libs = new ArrayList<>();\n+                List<Path> libs = new ArrayList<>();\n@@ -305,2 +305,2 @@\n-                for (File lib : libs) {\n-                    fw.write(\"grant codebase \\\"\" + lib.toURI() + \"\\\" {\" + LINESEP);\n+                for (Path lib : libs) {\n+                    fw.write(\"grant codebase \\\"\" + lib.toUri() + \"\\\" {\" + LINESEP);\n@@ -323,1 +323,1 @@\n-            throw new TestRunException(POLICY_WRITE_PROB + newPolicy.toString());\n+            throw new TestRunException(POLICY_WRITE_PROB + newPolicy);\n@@ -325,1 +325,1 @@\n-            throw new TestRunException(POLICY_SM_PROB + newPolicy.toString());\n+            throw new TestRunException(POLICY_SM_PROB + newPolicy);\n@@ -345,1 +345,1 @@\n-        File policyFile = new File(script.absTestSrcDir(), value);\n+        File policyFile = script.absTestSrcDir().resolve(value).toFile();\n@@ -518,1 +518,1 @@\n-        for (File dir: pp.asList()) {\n+        for (Path dir: pp.asList()) {\n@@ -524,2 +524,2 @@\n-    private void getModules(File dir, Set<String> results) {\n-        for (File f: dir.listFiles()) {\n+    private void getModules(Path dir, Set<String> results) {\n+        for (Path f: FileUtils.listFiles(dir)) {\n@@ -527,2 +527,2 @@\n-                results.add(f.getName());\n-            } else if (f.getName().endsWith(\".jar\")) {\n+                results.add(f.getFileName().toString());\n+            } else if (f.getFileName().toString().endsWith(\".jar\")) {\n@@ -534,3 +534,3 @@\n-    private boolean isModule(File f) {\n-        if (f.isDirectory()) {\n-            if (script.systemModules.contains(f.getName())) {\n+    private boolean isModule(Path f) {\n+        if (Files.isDirectory(f)) {\n+            if (script.systemModules.contains(f.getFileName().toString())) {\n@@ -539,1 +539,1 @@\n-            if (new File(f, \"module-info.class\").exists())\n+            if (Files.exists(f.resolve(\"module-info.class\")))\n@@ -541,1 +541,1 @@\n-            if (new File(f, \"module-info.java\").exists())\n+            if (Files.exists(f.resolve(\"module-info.java\")))\n@@ -547,1 +547,1 @@\n-    private static final Map<File, String> automaticNames = new ConcurrentHashMap<>();\n+    private static final Map<Path, String> automaticNames = new ConcurrentHashMap<>();\n@@ -552,1 +552,1 @@\n-    private String getAutomaticModuleName(File f) {\n+    private String getAutomaticModuleName(Path f) {\n@@ -560,1 +560,1 @@\n-        try (JarFile jar = new JarFile(f)) {\n+        try (JarFile jar = new JarFile(f.toFile())) {\n@@ -573,1 +573,1 @@\n-        String fn = f.getName();\n+        String fn = f.getFileName().toString();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Action.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -86,1 +87,1 @@\n-    public void java(Map<String, String> envArgs, String javaCmd, Map<String, String> javaProps, List<String> javaOpts, String className, List<String> classArgs) {\n+    public void java(Map<String, String> envArgs, Path javaCmd, Map<String, String> javaProps, List<String> javaOpts, String className, List<String> classArgs) {\n@@ -95,1 +96,1 @@\n-        pw.println(indent + escape(javaCmd) + CONT);\n+        pw.println(indent + escape(javaCmd.toString()) + CONT);\n@@ -125,1 +126,1 @@\n-    void javac(Map<String, String> envArgs, String javacCmd, List<String> javacVMOpts, Map<String, String> javacProps, List<String> javacArgs) {\n+    void javac(Map<String, String> envArgs, Path javacCmd, List<String> javacVMOpts, Map<String, String> javacProps, List<String> javacArgs) {\n@@ -134,1 +135,1 @@\n-        pw.println(indent + escape(javacCmd) + CONT);\n+        pw.println(indent + escape(javacCmd.toString()) + CONT);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ActionRecorder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,0 @@\n-import java.util.Queue;\n@@ -107,1 +106,1 @@\n-            cmd.add(jdk.getJavaProg().getPath());\n+            cmd.add(jdk.getJavaProg().toString());\n@@ -890,1 +889,1 @@\n-            return (dir.getAbsolutePath() + \" \" + jdk.getAbsoluteFile() + \" \" + StringUtils.join(vmOpts, \" \"));\n+            return (dir.getAbsolutePath() + \" \" + jdk.getAbsoluteHomeDirectory() + \" \" + StringUtils.join(vmOpts, \" \"));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,0 @@\n- * @author Iris A Garcia\n@@ -163,1 +162,1 @@\n-        return Collections.singleton(new File(script.absTestSrcDir(), htmlFN));\n+        return Set.of(script.absTestSrcDir().resolve(htmlFN).toFile());\n@@ -241,1 +240,1 @@\n-        command.add(script.getJavaProg());\n+        command.add(script.getJavaProg().toString());\n@@ -299,1 +298,1 @@\n-            cmd.setExecDir(script.absTestScratchDir());\n+            cmd.setExecDir(script.absTestScratchDir().toFile());\n@@ -407,1 +406,1 @@\n-            htmlFN = new File(script.absTestSrcDir(), htmlFN).getPath();\n+            htmlFN = script.absTestSrcDir().resolve(htmlFN).toString();\n@@ -641,1 +640,1 @@\n-    private String  manual   = \"unset\";\n+    private String  manual   = \"unset\"; \/\/ or \"novalue\", \"done\", \"yesno\"\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/AppletAction.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -45,0 +46,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -52,1 +54,0 @@\n- * @author Iris A Garcia\n@@ -142,1 +143,1 @@\n-                    files.add(cl.absSrcFile);\n+                    files.add(cl.absSrcFile.toFile());\n@@ -193,1 +194,2 @@\n-                    if (cl.absSrcFile.lastModified() > now) {\n+                    long sfMillis = FileUtils.getLastModifiedTime(cl.absSrcFile).toMillis();\n+                    if (sfMillis > now) {\n@@ -195,1 +197,1 @@\n-                                DateFormat.getDateTimeInstance().format(new Date(cl.absSrcFile.lastModified()))));\n+                                DateFormat.getDateTimeInstance().format(new Date(sfMillis))));\n@@ -219,2 +221,2 @@\n-            for (File dir: script.locations.absLibClsList(LibLocn.Kind.PACKAGE)) {\n-                dir.mkdirs();\n+            for (Path dir: script.locations.absLibClsList(LibLocn.Kind.PACKAGE)) {\n+                FileUtils.createDirectories(dir);\n@@ -272,1 +274,1 @@\n-                    files.add(cl.absSrcFile);\n+                    files.add(cl.absSrcFile.toFile());\n@@ -312,1 +314,1 @@\n-            files.add(cl.absSrcFile);\n+            files.add(cl.absSrcFile.toFile());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/BuildAction.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.nio.file.Files;\n@@ -39,0 +40,2 @@\n+import javax.lang.model.SourceVersion;\n+\n@@ -46,1 +49,0 @@\n- * @author Iris A Garcia\n@@ -73,1 +75,1 @@\n-     *             for the action or are improperly formated.\n+     *             for the action or are improperly formatted.\n@@ -88,4 +90,10 @@\n-        for (String currArg : args) {\n-            if ((currArg.indexOf(File.separatorChar) != -1)\n-                    || (currArg.indexOf('\/') != -1))\n-                throw new ParseException(CLEAN_BAD_CLASSNAME + currArg);\n+        for (String arg : args) {\n+            \/\/ allow \"clean default package\" marker\n+            if (\"*\".equals(arg))\n+                continue;\n+            \/\/ allow qualified class name with optional \"clean any package\" pattern\n+            String name = arg.endsWith(\".*\") ? arg.substring(0, arg.length() - 2) : arg;\n+            if (SourceVersion.isName(name))\n+                continue;\n+            \/\/ detected a syntactically invalid class name\n+            throw new ParseException(CLEAN_BAD_CLASSNAME + arg);\n@@ -127,1 +135,1 @@\n-                    File dir = script.absTestClsDir();\n+                    File dir = script.absTestClsDir().toFile();\n@@ -153,2 +161,2 @@\n-                    File victim = new File(script.absTestClsDir(),\n-                                           arg.replace('.', File.separatorChar) + \".class\");\n+                    File victim = script.absTestClsDir().resolve(\n+                                           arg.replace('.', File.separatorChar) + \".class\").toFile();\n@@ -168,1 +176,1 @@\n-        Set<File> files = new LinkedHashSet<File>();\n+        Set<File> files = new LinkedHashSet<>();\n@@ -170,1 +178,1 @@\n-            \/\/ the arguments to clean are classnames or package names with wildcards\n+            \/\/ the arguments to clean are class names or package names with wildcards\n@@ -173,2 +181,2 @@\n-                    if (cl.absSrcFile.exists())\n-                        files.add(cl.absSrcFile);\n+                    if (Files.exists(cl.absSrcFile))\n+                        files.add(cl.absSrcFile.toFile());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/CleanAction.java","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -79,1 +81,0 @@\n- * @author Iris A Garcia\n@@ -197,1 +198,1 @@\n-            destDir = multiModule ? locations.absTestModulesDir() : locations.absTestClsDir(module);\n+            destDir = multiModule ? locations.absTestModulesDir().toFile() : locations.absTestClsDir(module).toFile();\n@@ -199,1 +200,1 @@\n-            destDir = (module == null) ? libLocn.absClsDir : new File(libLocn.absClsDir, module);\n+            destDir = ((module == null) ? libLocn.absClsDir : libLocn.absClsDir.resolve(module)).toFile();\n@@ -219,2 +220,2 @@\n-                    File absSourceFile = locations.absTestSrcFile(module, sourceFile);\n-                    if (!absSourceFile.exists())\n+                    Path absSourceFile = locations.absTestSrcFile(module, sourceFile);\n+                    if (!Files.exists(absSourceFile))\n@@ -222,1 +223,1 @@\n-                    args.set(i, absSourceFile.getPath());\n+                    args.set(i, absSourceFile.toString());\n@@ -235,2 +236,2 @@\n-                    File absSourceFile = locations.absTestSrcFile(null, sourceFile);\n-                    if (!absSourceFile.exists())\n+                    Path absSourceFile = locations.absTestSrcFile(null, sourceFile);\n+                    if (!Files.exists(absSourceFile))\n@@ -238,1 +239,1 @@\n-                    args.set(i, absSourceFile.getPath());\n+                    args.set(i, absSourceFile.toString());\n@@ -576,1 +577,1 @@\n-        String javacCmd = script.getJavacProg();\n+        Path javacCmd = script.getJavacProg();\n@@ -611,1 +612,1 @@\n-        command.add(javacCmd);\n+        command.add(javacCmd.toString());\n@@ -647,1 +648,1 @@\n-        cmd.setExecDir(script.absTestScratchDir())\n+        cmd.setExecDir(script.absTestScratchDir().toFile())\n@@ -689,1 +690,1 @@\n-        String javacProg = script.getJavacProg();\n+        Path javacProg = script.getJavacProg();\n@@ -787,1 +788,1 @@\n-        File refFile = new File(script.absTestSrcDir(), value);\n+        File refFile = script.absTestSrcDir().resolve(value).toFile();\n@@ -826,1 +827,1 @@\n-        File refFile = new File(script.absTestSrcDir(), ref);\n+        File refFile = script.absTestSrcDir().resolve(ref).toFile();\n@@ -875,1 +876,1 @@\n-            File refFile = new File(script.absTestSrcDir(), ref);\n+            Path refFile = script.absTestSrcDir().resolve(ref);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/CompileAction.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -42,1 +44,1 @@\n-    public DefaultTimeoutHandler(PrintWriter log, File outputDir, File testJdk) {\n+    public DefaultTimeoutHandler(PrintWriter log, File outputDir, Path testJdk) {\n@@ -59,1 +61,1 @@\n-            File jstack = findJstack();\n+            Path jstack = findJstack();\n@@ -66,1 +68,1 @@\n-            ProcessBuilder pb = new ProcessBuilder(jstack.getAbsolutePath(), pid + \"\");\n+            ProcessBuilder pb = new ProcessBuilder(jstack.toAbsolutePath().toString(), pid + \"\");\n@@ -82,5 +84,6 @@\n-    private File findJstack() {\n-        File jstack = new File(new File(testJdk, \"bin\"), \"jstack\");\n-        if (!jstack.exists()) {\n-            jstack = new File(new File(testJdk, \"bin\"), \"jstack.exe\");\n-            if (!jstack.exists()) {\n+    private Path findJstack() {\n+        Path p = testJdk.toPath();\n+        Path jstack = p.resolve(\"bin\").resolve(\"jstack\");\n+        if (!Files.exists(jstack)) {\n+            jstack = p.resolve(\"bin\").resolve(\"jstack.exe\");\n+            if (!Files.exists(jstack)) {\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/DefaultTimeoutHandler.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n- * @author Iris A Garcia\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/IgnoreAction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n- * @author John R. Rose\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/JUnitAction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -49,2 +50,2 @@\n-            File el = params.getExclusiveLock();\n-            lock = (el == null) ? new SimpleLock() : new MultiVMLock(el);\n+            Path el = params.getExclusiveLock();\n+            lock = (el == null) ? new SimpleLock() : new MultiVMLock(el.toFile());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Lock.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.nio.file.Path;\n@@ -69,1 +70,0 @@\n- * @author Iris A Garcia\n@@ -432,1 +432,1 @@\n-        String javaCmd = script.getJavaProg();\n+        Path javaCmd = script.getJavaProg();\n@@ -488,1 +488,1 @@\n-        command.add(javaCmd);\n+        command.add(javaCmd.toString());\n@@ -509,1 +509,1 @@\n-            cmd.setExecDir(script.absTestScratchDir());\n+            cmd.setExecDir(script.absTestScratchDir().toFile());\n@@ -573,1 +573,1 @@\n-        List<File> stdLibs = new SearchPath()\n+        List<Path> stdLibs = new SearchPath()\n@@ -603,1 +603,1 @@\n-        String javaProg = script.getJavaProg();\n+        Path javaProg = script.getJavaProg();\n@@ -790,1 +790,1 @@\n-    private String  manual  = \"unset\";\n+    private String  manual  = \"unset\"; \/\/ or \"novalue\"\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/MainAction.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.file.Path;\n@@ -240,2 +241,2 @@\n-            for (File file: modulePath.asList()) {\n-                table.addRow(label, file.getPath());\n+            for (Path file: modulePath.asList()) {\n+                table.addRow(label, file.toString());\n@@ -248,2 +249,2 @@\n-            for (File file: sourcePath.asList()) {\n-                table.addRow(label, file.getPath());\n+            for (Path file: sourcePath.asList()) {\n+                table.addRow(label, file.toString());\n@@ -256,2 +257,2 @@\n-            for (File file: classPath.asList()) {\n-                table.addRow(label, file.getPath());\n+            for (Path file: classPath.asList()) {\n+                table.addRow(label, file.toString());\n@@ -264,2 +265,2 @@\n-            for (File file: bootClassPathAppend.asList()) {\n-                table.addRow(label, file.getPath());\n+            for (Path file: bootClassPathAppend.asList()) {\n+                table.addRow(label, file.toString());\n@@ -274,2 +275,2 @@\n-                for (File file: e.getValue().asList()) {\n-                    table.addRow(label, module, file.getPath());\n+                for (Path file: e.getValue().asList()) {\n+                    table.addRow(label, module, file.toString());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ModuleConfig.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-            statusTable = new HashMap<Integer, Status>();\n+            statusTable = new HashMap<>();\n@@ -84,1 +84,1 @@\n-            statusTable = new HashMap<Integer, Status>();\n+            statusTable = new HashMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ProcessCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.io.BufferedInputStream;\n-import java.io.BufferedOutputStream;\n@@ -31,2 +29,0 @@\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n@@ -37,0 +33,1 @@\n+import java.io.UncheckedIOException;\n@@ -41,0 +38,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n@@ -73,0 +73,1 @@\n+import com.sun.javatest.regtest.config.OS;\n@@ -79,0 +80,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -88,1 +90,0 @@\n-  * @author Iris A Garcia\n@@ -144,0 +145,5 @@\n+        OS testOs = params.getTestOS();\n+        testResult.putProperty(\"testJDK_OS\", testOs.toString());\n+        testResult.putProperty(\"testJDK_os.name\", testOs.name);\n+        testResult.putProperty(\"testJDK_os.version\", testOs.version);\n+        testResult.putProperty(\"testJDK_os.arch\", testOs.arch);\n@@ -187,1 +193,1 @@\n-                for (Action a: actionList) {\n+                for (Action a : actionList) {\n@@ -208,2 +214,2 @@\n-                for (Action a: actionList) {\n-                    for (String m: a.getModules()) {\n+                for (Action a : actionList) {\n+                    for (String m : a.getModules()) {\n@@ -238,1 +244,1 @@\n-                for (LibLocn lib: locations.getLibs()) {\n+                for (LibLocn lib : locations.getLibs()) {\n@@ -260,1 +266,1 @@\n-                    if (lib.absClsDir.isFile() && lib.absClsDir.getName().endsWith(\".jar\")) {\n+                    if (Files.isRegularFile(lib.absClsDir) && lib.absClsDir.getFileName().toString().endsWith(\".jar\")) {\n@@ -267,1 +273,1 @@\n-                while (! actionList.isEmpty()) {\n+                while (!actionList.isEmpty()) {\n@@ -286,1 +292,2 @@\n-                | TestSuite.Fault e) {\n+                | TestSuite.Fault\n+                | FileUtils.NIOFileOperationException e) {\n@@ -288,0 +295,10 @@\n+        } catch (UncheckedIOException e) {\n+            String msg = \"IO exception: \" + e.getMessage();\n+            if (e.getCause() != null)\n+                msg += \" (\" + e.getCause() + \")\";\n+            status = error(msg);\n+        } catch (InvalidPathException e) {\n+            String msg = \"Invalid path: \" + e.getInput() + \"; \" + e.getMessage();\n+            if (e.getCause() != null)\n+                msg += \" (\" + e.getCause() + \")\";\n+            status = error(msg);\n@@ -325,1 +342,1 @@\n-        pw.println(jdk.getAbsoluteFile());\n+        pw.println(jdk.getAbsoluteHomeDirectory());\n@@ -495,1 +512,1 @@\n-     * tests is on a per action basis rather than on a per test basis, this\n+     * tests is on a per-action basis rather than on a per-test basis, this\n@@ -507,6 +524,6 @@\n-     * Get the timeout to be used for an action.  The timeout will be scaled by\n-     * the timeoutFactor as necessary.  The default timeout for any action as\n-     * per the tag-spec is 120 seconds scaled by a value found in the\n-     * environment (\"javatestTimeoutFactor\").\n-     * The timeout factor is available as both an integer (for backward\n-     * compatibility) and a floating point number\n+     * Returns the timeout to be used for an action.\n+     *\n+     * If no debug options have been set, the result will be the given value,\n+     * or a default value if the given value is negative, scaled by the timeout factor.\n+     *\n+     * If debug options have been set, the result will be 0, meaning \"no timeout\".\n@@ -514,4 +531,3 @@\n-     * @param time The initial timeout which may need to be scaled according\n-     *             to the provided timeoutFactor.  If the initial timeout is\n-     *             less than zero, then the default timeout will be returned.\n-     * @return     The timeout in seconds.\n+     * @param time the value of the timeout specified in the action,\n+     *             or -1 if no value was specified\n+     * @return     the timeout, in seconds\n@@ -520,3 +536,4 @@\n-        if (time < 0)\n-            time = 120;\n-        return (int) (time * getTimeoutFactor());\n+        final int DEFAULT_ACTION_TIMEOUT = 120; \/\/ seconds\n+        return isTimeoutsEnabled()\n+                ? (int) ((time < 0 ? DEFAULT_ACTION_TIMEOUT : time) * getTimeoutFactor())\n+                : 0;\n@@ -530,1 +547,3 @@\n-                \/\/ use [1] to get the floating point timeout factor\n+                \/\/ The timeout factor is available as both an integer (for backward compatibility)\n+                \/\/ and a floating point number.\n+                \/\/ Use [1] to get the floating point timeout factor\n@@ -544,0 +563,10 @@\n+    \/**\n+     * Returns whether timeouts are (generally) enabled.\n+     *\n+     * @return {@code true} if timeouts are enabled, and {@code false} otherwise\n+     *\/\n+    protected boolean isTimeoutsEnabled() {\n+        \/\/ for now, timeouts are always enabled, unless debug options have been specified for the test\n+        return getTestDebugOptions().isEmpty();\n+    }\n+\n@@ -675,1 +704,1 @@\n-    File getNativeDir() {\n+    Path getNativeDir() {\n@@ -712,1 +741,1 @@\n-    File absTestWorkFile(String name) {\n+    Path absTestWorkFile(String name) {\n@@ -716,1 +745,1 @@\n-    File absTestSrcDir() {\n+    Path absTestSrcDir() {\n@@ -720,1 +749,1 @@\n-    File absTestClsDir() {\n+    Path absTestClsDir() {\n@@ -724,2 +753,2 @@\n-    File absTestScratchDir() {\n-        return scratchDirectory.dir.getAbsoluteFile();\n+    Path absTestScratchDir() {\n+        return scratchDirectory.dir.toPath().toAbsolutePath();\n@@ -728,1 +757,1 @@\n-    File absTestClsTopDir() {\n+    Path absTestClsTopDir() {\n@@ -732,1 +761,1 @@\n-    private boolean useBootClassPath(File classdir) throws TestClassException {\n+    private boolean useBootClassPath(Path classdir) throws TestClassException {\n@@ -734,1 +763,1 @@\n-            String rel = locations.absBaseClsDir().toURI().relativize(classdir.toURI()).getPath();\n+            String rel = locations.absBaseClsDir().toUri().relativize(classdir.toFile().toURI()).getPath();\n@@ -764,1 +793,1 @@\n-                File testSrcDir = locations.absTestSrcDir(module);\n+                Path testSrcDir = locations.absTestSrcDir(module);\n@@ -792,1 +821,1 @@\n-                sp.append(new File(libLocn.absSrcDir, module));\n+                sp.append(libLocn.absSrcDir.resolve(module));\n@@ -817,1 +846,1 @@\n-                File md = workDir.getFile(\"modules\");\n+                Path md = workDir.getFile(\"modules\").toPath();\n@@ -918,1 +947,1 @@\n-                File md = workDir.getFile(\"modules\");\n+                Path md = workDir.getFile(\"modules\").toPath();\n@@ -967,1 +996,1 @@\n-    private void install(SearchPath path, File dir) throws TestRunException {\n+    private void install(SearchPath path, Path dir) throws TestRunException {\n@@ -969,2 +998,2 @@\n-            if (dir.exists()) {\n-                if (!dir.isDirectory())\n+            if (Files.exists(dir)) {\n+                if (!Files.isDirectory(dir))\n@@ -973,1 +1002,1 @@\n-                dir.mkdirs();\n+                FileUtils.createDirectories(dir);\n@@ -976,5 +1005,5 @@\n-            for (File jar: path.asList()) {\n-                File target = new File(dir, jar.getName());\n-                if (target.exists()\n-                        && target.length() == jar.length()\n-                        && target.lastModified() == jar.lastModified()) {\n+            for (Path jar: path.asList()) {\n+                Path target = dir.resolve(jar.getFileName());\n+                if (Files.exists(target)\n+                        && FileUtils.size(target) == FileUtils.size(jar)\n+                        && FileUtils.compareLastModifiedTimes(target, jar) == 0) {\n@@ -985,2 +1014,2 @@\n-                try (OutputStream out = new BufferedOutputStream(new FileOutputStream(target));\n-                        InputStream in = new BufferedInputStream(new FileInputStream(jar))) {\n+                try (OutputStream out = Files.newOutputStream(target);\n+                        InputStream in = Files.newInputStream(jar)) {\n@@ -995,1 +1024,5 @@\n-                target.setLastModified(jar.lastModified());\n+                try {\n+                    Files.setLastModifiedTime(target, FileUtils.getLastModifiedTime(jar));\n+                } catch (IOException e) {\n+                    throw new TestRunException(\"cannot set last modified time for \" + target, e);\n+                }\n@@ -1009,4 +1042,4 @@\n-        File testModulesDir = locations.absTestPatchDir();\n-        if (testModulesDir.isDirectory()) {\n-            for (File f: testModulesDir.listFiles()) {\n-                if (f.isDirectory())\n+        Path testModulesDir = locations.absTestPatchDir();\n+        if (Files.isDirectory(testModulesDir)) {\n+            for (Path f : FileUtils.listFiles(testModulesDir)) {\n+                if (Files.isDirectory(f))\n@@ -1025,4 +1058,4 @@\n-        File testModulesDir = locations.absTestModulesDir();\n-        if (testModulesDir.isDirectory()) {\n-            for (File f: testModulesDir.listFiles()) {\n-                if (f.isDirectory())\n+        Path testModulesDir = locations.absTestModulesDir();\n+        if (Files.isDirectory(testModulesDir)) {\n+            for (Path f : FileUtils.listFiles(testModulesDir)) {\n+                if (Files.isDirectory(f))\n@@ -1108,2 +1141,2 @@\n-    String getJavaProg() {\n-        return params.getTestJDK().getJavaProg().getPath();\n+    Path getJavaProg() {\n+        return params.getTestJDK().getJavaProg();\n@@ -1122,2 +1155,2 @@\n-    String getJavacProg() {\n-        return params.getCompileJDK().getJavacProg().getPath();\n+    Path getJavacProg() {\n+        return params.getCompileJDK().getJavacProg();\n@@ -1135,2 +1168,2 @@\n-        p.put(\"test.file\", locations.absTestFile().getPath());\n-        p.put(\"test.src\", locations.absTestSrcDir().getPath());\n+        p.put(\"test.file\", locations.absTestFile().toString());\n+        p.put(\"test.src\", locations.absTestSrcDir().toString());\n@@ -1138,1 +1171,1 @@\n-        p.put(\"test.classes\", locations.absTestClsDir().getPath());\n+        p.put(\"test.classes\", locations.absTestClsDir().toString());\n@@ -1168,1 +1201,1 @@\n-    private String toString(List<File> files) {\n+    private String toString(List<Path> files) {\n@@ -1170,1 +1203,1 @@\n-                .map(File::getPath)\n+                .map(Path::toString)\n@@ -1173,0 +1206,6 @@\n+\/\/    \/\/ where\n+\/\/    private String toString(List<File> files) {\n+\/\/        return files.stream()\n+\/\/                .map(File::getPath)\n+\/\/                .collect(Collectors.joining(File.pathSeparator));\n+\/\/    }\n@@ -1188,1 +1227,1 @@\n-            vmOpts.addAllPatchModules(new SearchPath(params.getWorkDirectory().getFile(\"patches\")));\n+            vmOpts.addAllPatchModules(new SearchPath(params.getWorkDirectory().getFile(\"patches\").toPath()));\n@@ -1198,1 +1237,1 @@\n-            if (agent.matches(absTestScratchDir(), jdk, vmOpts.toList())) {\n+            if (agent.matches(absTestScratchDir().toFile(), jdk, vmOpts.toList())) {\n@@ -1213,1 +1252,1 @@\n-        Agent agent = p.getAgent(absTestScratchDir(), jdk, vmOpts.toList(), envVars);\n+        Agent agent = p.getAgent(absTestScratchDir().toFile(), jdk, vmOpts.toList(), envVars);\n@@ -1260,2 +1299,2 @@\n-    void saveScratchFile(File file, File dest) {\n-        scratchDirectory.retainFile(file, dest);\n+    void saveScratchFile(Path file, Path dest) {\n+        scratchDirectory.retainFile(file.toFile(), dest.toFile());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":115,"deletions":76,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    private static final Set<File> badDirs = new HashSet<File>();\n+    private static final Set<File> badDirs = new HashSet<>();\n@@ -170,1 +170,1 @@\n-        Set<File> cantDelete = new LinkedHashSet<File>();\n+        Set<File> cantDelete = new LinkedHashSet<>();\n@@ -426,1 +426,1 @@\n-        private static ThreadLocal<ThreadInfo> threadInfo = new ThreadLocal<ThreadInfo>() {\n+        private static ThreadLocal<ThreadInfo> threadInfo = new ThreadLocal<>() {\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ScratchDirectory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.file.Files;\n@@ -32,1 +33,0 @@\n-import java.util.Collections;\n@@ -53,1 +53,0 @@\n- * @author Iris A Garcia\n@@ -162,1 +161,1 @@\n-        return Collections.singleton(new File(script.absTestSrcDir(), shellFN));\n+        return Set.of(script.absTestSrcDir().resolve(shellFN).toFile());\n@@ -189,1 +188,1 @@\n-        File shellFile = new File(script.absTestSrcDir(), shellFN);\n+        File shellFile = script.absTestSrcDir().resolve(shellFN).toFile();\n@@ -199,1 +198,1 @@\n-            mkdirs(script.absTestClsDir());\n+            mkdirs(script.absTestClsDir().toFile());\n@@ -229,1 +228,1 @@\n-            File nativeDir = script.getNativeDir();\n+            Path nativeDir = script.getNativeDir();\n@@ -231,1 +230,1 @@\n-                env.put(\"TESTNATIVEPATH\", nativeDir.getAbsolutePath());\n+                env.put(\"TESTNATIVEPATH\", nativeDir.toAbsolutePath().toString());\n@@ -239,1 +238,1 @@\n-                File java_exe = new File(new File(script.getTestJDK().getFile(), \"bin\"), \"java.exe\");\n+                Path java_exe = script.getTestJDK().getHomeDirectory().resolve(\"bin\").resolve(\"java.exe\");\n@@ -241,1 +240,1 @@\n-                if (java_exe.exists()) {\n+                if (Files.exists(java_exe)) {\n@@ -293,1 +292,1 @@\n-                    .setExecDir(script.absTestScratchDir())\n+                    .setExecDir(script.absTestScratchDir().toFile())\n@@ -337,1 +336,1 @@\n-        private String fixupSep(List<File> files) {\n+        private String fixupSep(List<Path> files) {\n@@ -339,1 +338,1 @@\n-            for (File f: files) {\n+            for (Path f: files) {\n@@ -345,3 +344,6 @@\n-        private String fixupSep(File f) {\n-            return fixupSep(f.getPath());\n-        }\n+    private String fixupSep(Path f) {\n+        return fixupSep(f.toString());\n+    }\n+    private String fixupSep(File f) {\n+        return fixupSep(f.getPath());\n+    }\n@@ -419,1 +421,1 @@\n-    private String  manual  = \"unset\";\n+    private String  manual  = \"unset\"; \/\/ or \"novalue\"\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ShellAction.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -30,1 +31,0 @@\n-import java.util.Collections;\n@@ -43,0 +43,1 @@\n+import com.sun.javatest.regtest.util.FileUtils;\n@@ -75,1 +76,1 @@\n-     *             for the action or are improperly formated.\n+     *             for the action or are improperly formatted.\n@@ -116,1 +117,1 @@\n-                File testSrcDir = locations.absTestSrcDir();\n+                Path testSrcDir = locations.absTestSrcDir();\n@@ -119,1 +120,1 @@\n-                        buildArgs.addAll(listClasses(Collections.singletonList(testSrcDir)));\n+                        buildArgs.addAll(listClasses(List.of(testSrcDir)));\n@@ -123,1 +124,1 @@\n-                        buildArgs.addAll(listModules(Collections.singletonList(testSrcDir)));\n+                        buildArgs.addAll(listModules(List.of(testSrcDir)));\n@@ -134,1 +135,1 @@\n-    private List<String> listClasses(List<File> roots) {\n+    private List<String> listClasses(List<Path> roots) {\n@@ -136,1 +137,1 @@\n-        for (File root: roots)\n+        for (Path root: roots)\n@@ -141,4 +142,5 @@\n-    private void listClasses(File dir, String pkg, List<String> classes) {\n-        for (File f: dir.listFiles()) {\n-            String f_name = f.getName();\n-            if (f.isDirectory())\n+    private void listClasses(Path dir, String pkg, List<String> classes) {\n+        \/\/ candidate for Files.walkFileTree\n+        for (Path f : FileUtils.listFiles(dir)) {\n+            String f_name = f.getFileName().toString();\n+            if (Files.isDirectory(f)) {\n@@ -146,1 +148,1 @@\n-            else if (f_name.endsWith(\".java\")) {\n+            } else if (f_name.endsWith(\".java\")) {\n@@ -153,1 +155,1 @@\n-    private Set<String> listModules(List<File> roots) {\n+    private Set<String> listModules(List<Path> roots) {\n@@ -155,4 +157,5 @@\n-        for (File root: roots) {\n-            for (File f: root.listFiles()) {\n-                if (f.isDirectory())\n-                    modules.add(f.getName() + \"\/*\");\n+        for (Path root: roots) {\n+            for (Path f : FileUtils.listFiles(root)) {\n+                if (Files.isDirectory(f)) {\n+                    modules.add(f.getFileName() + \"\/*\");\n+                }\n@@ -164,1 +167,1 @@\n-    private static final File TESTNG_RESULTS_XML = new File(\"testng-results.xml\");\n+    private static final Path TESTNG_RESULTS_XML = Path.of(\"testng-results.xml\");\n@@ -174,1 +177,1 @@\n-        script.saveScratchFile(TESTNG_RESULTS_XML, new File(tngPath));\n+        script.saveScratchFile(TESTNG_RESULTS_XML, Path.of(tngPath));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/TestNGAction.java","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n- *\n- * @author Iris A Garcia\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/TestRunException.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.nio.file.Path;\n@@ -64,1 +65,1 @@\n-    public void setClassPath(List<File> path) throws MalformedURLException {\n+    public void setClassPath(List<Path> path) throws MalformedURLException {\n@@ -67,2 +68,2 @@\n-        for (File f: path) {\n-            urls[u++] = f.toURI().toURL();\n+        for (Path f: path) {\n+            urls[u++] = f.toUri().toURL();\n@@ -97,2 +98,2 @@\n-        File outDir = script.absTestScratchDir();\n-        File testJDK = script.getTestJDK().getAbsoluteFile();\n+        File outDir = script.absTestScratchDir().toFile();\n+        Path testJDK = script.getTestJDK().getAbsoluteHomeDirectory();\n@@ -104,1 +105,1 @@\n-                TimeoutHandler th = ctor.newInstance(log, outDir, testJDK);\n+                TimeoutHandler th = ctor.newInstance(log, outDir, testJDK.toFile());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/TimeoutHandlerProvider.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -67,1 +69,1 @@\n-        File rd = params.getReportDir();\n+        File rd = params.getReportDir().toFile();\n@@ -128,1 +130,1 @@\n-        this.reportDir = testManager.getReportDirectory();\n+        this.reportDir = testManager.getReportDirectory().toFile();\n@@ -146,1 +148,1 @@\n-            fixupReports(reportDir, testManager.getWorkDirectory());\n+            fixupReports(reportDir, testManager.getWorkDirectory().toFile());\n@@ -214,3 +216,3 @@\n-                File rd = testManager.getReportDirectory(testSuite);\n-                html.writeAttr(HTMLWriter.HREF, \"..\/\" + encode(rd.getName()) + \"\/index.html\");\n-                html.write(rd.getName());\n+                Path rd = testManager.getReportDirectory(testSuite);\n+                html.writeAttr(HTMLWriter.HREF, \"..\/\" + encode(rd.getFileName().toString()) + \"\/index.html\");\n+                html.write(rd.getFileName().toString());\n@@ -363,3 +365,3 @@\n-                File f = new File(new File(testManager.getReportDirectory(ts), \"text\"), \"summary.txt\");\n-                if (f.exists()) {\n-                    String s = read(f);\n+                Path f = testManager.getReportDirectory(ts).resolve(\"text\").resolve(\"summary.txt\");\n+                if (Files.exists(f)) {\n+                    String s = Files.readString(f);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/RegressionReporter.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -66,2 +66,0 @@\n- *\n- * @author ksrini\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/XMLWriter.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.nio.file.Path;\n@@ -112,2 +113,2 @@\n-                    for (File jar: path.asList()) {\n-                        try (JarFile j = new JarFile(jar)) {\n+                    for (Path jar: path.asList()) {\n+                        try (JarFile j = new JarFile(jar.toFile())) {\n@@ -120,1 +121,1 @@\n-                                    ? \"\" : \" (\" + jar.getName() + \")\";\n+                                    ? \"\" : \" (\" + jar.getFileName() + \")\";\n@@ -356,1 +357,1 @@\n-            map.put(g, new TreeMap<String, Option>(new CaseInsensitiveStringComparator()));\n+            map.put(g, new TreeMap<>(new CaseInsensitiveStringComparator()));\n@@ -479,2 +480,2 @@\n-        List<File> cp = new SearchPath(System.getProperty(\"java.class.path\")).asList();\n-        if (cp.size() == 1 && cp.get(0).getName().equals(\"jtreg.jar\")) {\n+        List<Path> cp = new SearchPath(System.getProperty(\"java.class.path\")).asList();\n+        if (cp.size() == 1 && cp.get(0).getFileName().toString().equals(\"jtreg.jar\")) {\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Help.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.nio.file.Path;\n@@ -56,3 +57,3 @@\n-    public JCovManager(File libDir) {\n-        jcov_jar = new JarFinder(\"jcov.jar\").libDir(libDir).getFile();\n-        jcov_network_saver_jar = new JarFinder(\"jcov_network_saver.jar\").libDir(libDir).getFile();\n+    public JCovManager(Path libDir) {\n+        jcov_jar = toFile(new JarFinder(\"jcov.jar\").libDir(libDir).getFile());\n+        jcov_network_saver_jar = toFile(new JarFinder(\"jcov_network_saver.jar\").libDir(libDir).getFile());\n@@ -66,0 +67,4 @@\n+    private static File toFile(Path p) {\n+        return p == null ? null : p.toFile();\n+    }\n+\n@@ -173,1 +178,1 @@\n-        List<String> opts = new ArrayList<String>();\n+        List<String> opts = new ArrayList<>();\n@@ -246,1 +251,1 @@\n-        List<String> opts = new ArrayList<String>();\n+        List<String> opts = new ArrayList<>();\n@@ -307,1 +312,1 @@\n-        List<String> opts = new ArrayList<String>();\n+        List<String> opts = new ArrayList<>();\n@@ -331,1 +336,1 @@\n-        List<String> opts = new ArrayList<String>();\n+        List<String> opts = new ArrayList<>();\n@@ -362,1 +367,1 @@\n-        List<String> opts = new ArrayList<String>();\n+        List<String> opts = new ArrayList<>();\n@@ -410,1 +415,1 @@\n-        List<String> lines = new ArrayList<String>();\n+        List<String> lines = new ArrayList<>();\n@@ -440,2 +445,2 @@\n-                List<String> args = new ArrayList<String>();\n-                args.add(jdk.getJavaProg().getPath());\n+                List<String> args = new ArrayList<>();\n+                args.add(jdk.getJavaProg().toString());\n@@ -482,2 +487,2 @@\n-    private List<String> includeOpts = new ArrayList<String>();\n-    private List<String> excludeOpts = new ArrayList<String>();\n+    private List<String> includeOpts = new ArrayList<>();\n+    private List<String> excludeOpts = new ArrayList<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/JCovManager.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -45,1 +46,1 @@\n-    private File libDir;\n+    private Path libDir;\n@@ -48,1 +49,1 @@\n-        jars = new ArrayList<String>();\n+        jars = new ArrayList<>();\n@@ -59,1 +60,1 @@\n-        this.classes = new ArrayList<String>();\n+        this.classes = new ArrayList<>();\n@@ -65,1 +66,1 @@\n-    JarFinder libDir(File libDir) {\n+    JarFinder libDir(Path libDir) {\n@@ -83,1 +84,1 @@\n-            File lib = new File(home, \"lib\");\n+            Path lib = Path.of(home).resolve(\"lib\");\n@@ -85,1 +86,1 @@\n-                result.append(new File(lib, jar));\n+                result.append(lib.resolve(jar));\n@@ -110,1 +111,1 @@\n-                            result.append(new File(uri.getPath()));\n+                            result.append(Path.of(uri));\n@@ -122,1 +123,1 @@\n-                result.append(new File(libDir, jar));\n+                result.append(libDir.resolve(jar));\n@@ -129,1 +130,1 @@\n-    File getFile() {\n+    Path getFile() {\n@@ -132,1 +133,1 @@\n-            List<File> files = p.asList();\n+            List<Path> files = p.asList();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/JarFinder.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.io.File;\n+import java.nio.file.InvalidPathException;\n@@ -188,5 +188,5 @@\n-        o.process(arg, value);\n-    }\n-\n-    public void addFile(File file) throws BadArgs {\n-        fileOption.process(null, file.getPath());\n+        try {\n+            o.process(arg, value);\n+        } catch (InvalidPathException e) {\n+            throw new BadArgs(i18n, \"opt.bad.path.for.option\", arg, e.getInput(), e.getMessage());\n+        }\n@@ -237,2 +237,2 @@\n-    private Map<String, Option> simpleOptions = new HashMap<String, Option>();\n-    private List<Option> matchOptions = new ArrayList<Option>();\n+    private Map<String, Option> simpleOptions = new HashMap<>();\n+    private List<Option> matchOptions = new ArrayList<>();\n@@ -241,1 +241,1 @@\n-    private Map<String, String> locks = new HashMap<String, String>();\n+    private Map<String, String> locks = new HashMap<>();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/OptionDecoder.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.io.InputStreamReader;\n@@ -49,0 +50,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -67,0 +70,1 @@\n+import java.util.stream.Collectors;\n@@ -134,0 +138,1 @@\n+@SuppressWarnings(\"removal\") \/\/ Security Manager and related APIs\n@@ -142,0 +147,2 @@\n+        checkJavaOSVersion();\n+\n@@ -184,0 +191,35 @@\n+    private static void checkJavaOSVersion() {\n+        String osName = System.getProperty(\"os.name\");\n+        if (osName != null && osName.equals(\"Mac OS X\")) {\n+            try {\n+                String expectVersion;\n+                Process p = new ProcessBuilder(\"defaults\", \"read\", \"loginwindow\", \"SystemVersionStampAsString\")\n+                        .redirectErrorStream(true)\n+                        .start();\n+                try (InputStream in = p.getInputStream();\n+                    BufferedReader r = new BufferedReader(new InputStreamReader(in))) {\n+                    expectVersion = r.lines().collect(Collectors.joining());\n+                }\n+                p.waitFor();\n+\n+                checkJavaOSVersion(expectVersion);\n+\n+            } catch (IOException | InterruptedException e) {\n+                System.err.println(\"Error getting OS version: \" + e);\n+                System.exit(99);\n+            }\n+        }\n+    }\n+\n+    private static void checkJavaOSVersion(String expectVersion) {\n+        String osVersion = System.getProperty(\"os.version\");\n+        if (!osVersion.equals(expectVersion)) {\n+            System.err.println(\"The version of JDK you are using to run jtreg does not report the OS version correctly.\");\n+            System.err.println(\"    java.home:    \" + System.getProperty(\"java.home\"));\n+            System.err.println(\"    java.version: \" + System.getProperty(\"java.version\"));\n+            System.err.println(\"    os.version:   \" + osVersion + \"  (expected: \" + expectVersion + \")\");\n+            System.err.println(\"Use a more recent update of this version of JDK, or a newer version of JDK.\");\n+            System.exit(1);\n+        }\n+    }\n+\n@@ -298,1 +340,1 @@\n-                workDirArg = new File(arg);\n+                workDirArg = Path.of(arg);\n@@ -327,1 +369,1 @@\n-                reportDirArg = new File(arg);\n+                reportDirArg = Path.of(arg);\n@@ -442,1 +484,1 @@\n-                baseDirArg = new File(arg);\n+                baseDirArg = Path.of(arg);\n@@ -473,1 +515,1 @@\n-                excludeListArgs.add(f);\n+                excludeListArgs.add(f.toPath());\n@@ -481,1 +523,1 @@\n-                matchListArgs.add(f);\n+                matchListArgs.add(f.toPath());\n@@ -509,1 +551,1 @@\n-                    observerPathArg.add(new File(f));\n+                    observerPathArg.add(Path.of(f));\n@@ -531,1 +573,1 @@\n-                    timeoutHandlerPathArg.add(new File(f));\n+                    timeoutHandlerPathArg.add(Path.of(f));\n@@ -626,1 +668,1 @@\n-                exclusiveLockArg = f;\n+                exclusiveLockArg = f.toPath();\n@@ -640,1 +682,1 @@\n-                nativeDirArg = f;\n+                nativeDirArg = f.toPath();\n@@ -749,1 +791,1 @@\n-                    classPathAppendArg.add(new File(f));\n+                    classPathAppendArg.add(Path.of(f));\n@@ -985,1 +1027,1 @@\n-                    File file = new File(arg.substring(0, sep));\n+                    Path file = Path.of(arg.substring(0, sep));\n@@ -989,1 +1031,1 @@\n-                    testFileArgs.add(new File(arg));\n+                    testFileArgs.add(Path.of(arg));\n@@ -1016,1 +1058,1 @@\n-            System.setProperty(\"javatestClassDir\", javatest_jar.getPath());\n+            System.setProperty(\"javatestClassDir\", javatest_jar.toString());\n@@ -1023,1 +1065,1 @@\n-            jcovManager = new JCovManager(jtreg_jar.getParentFile());\n+            jcovManager = new JCovManager(jtreg_jar.getParent());\n@@ -1033,1 +1075,1 @@\n-                try (JarFile jf = new JarFile(javatest_jar)) {\n+                try (JarFile jf = new JarFile(javatest_jar.toFile())) {\n@@ -1099,1 +1141,1 @@\n-        File baseDir;\n+        Path baseDir;\n@@ -1101,1 +1143,1 @@\n-            baseDir = new File(System.getProperty(\"user.dir\"));\n+            baseDir = Path.of(System.getProperty(\"user.dir\"));\n@@ -1103,1 +1145,1 @@\n-            if (!baseDirArg.exists())\n+            if (!Files.exists(baseDirArg))\n@@ -1105,1 +1147,1 @@\n-            baseDir = baseDirArg.getAbsoluteFile();\n+            baseDir = baseDirArg.toAbsolutePath();\n@@ -1110,1 +1152,1 @@\n-            antFileArgs.addAll(readFileList(new File(antFileList)));\n+            antFileArgs.addAll(readFileList(Path.of(antFileList)));\n@@ -1170,1 +1212,1 @@\n-            testJDK = com.sun.javatest.regtest.config.JDK.of(f);\n+            testJDK = com.sun.javatest.regtest.config.JDK.of(f.toPath());\n@@ -1214,1 +1256,1 @@\n-            workDirArg = new File(\"JTwork\");\n+            workDirArg = Path.of(\"JTwork\");\n@@ -1218,1 +1260,1 @@\n-            reportDirArg = new File(\"JTreport\");\n+            reportDirArg = Path.of(\"JTreport\");\n@@ -1249,1 +1291,1 @@\n-        makeDir(new File(workDirArg, \"scratch\"), true);\n+        makeDir(workDirArg.resolve(\"scratch\"), true);\n@@ -1256,1 +1298,1 @@\n-                File reportTextDir = new File(reportDirArg, \"text\");\n+                Path reportTextDir = reportDirArg.resolve(\"text\");\n@@ -1258,1 +1300,1 @@\n-                File cmdArgsFile = new File(reportTextDir, \"cmdArgs.txt\");\n+                Path cmdArgsFile = reportTextDir.resolve(\"cmdArgs.txt\");\n@@ -1260,1 +1302,1 @@\n-                try (BufferedWriter cmdArgsWriter = new BufferedWriter(new FileWriter(cmdArgsFile))) {\n+                try (BufferedWriter cmdArgsWriter = Files.newBufferedWriter(cmdArgsFile)) {\n@@ -1273,2 +1315,2 @@\n-            jcovManager.setWorkDir(getNormalizedFile(workDirArg));\n-            jcovManager.setReportDir(getNormalizedFile(reportDirArg));\n+            jcovManager.setWorkDir(getNormalizedFile(workDirArg.toFile()));\n+            jcovManager.setReportDir(getNormalizedFile(reportDirArg.toFile()));\n@@ -1344,1 +1386,1 @@\n-                            p.setSecurityPolicy(policyFile);\n+                            p.setSecurityPolicy(policyFile.toFile());\n@@ -1396,1 +1438,1 @@\n-                    out.println(\"Results written to \" + canon(workDirArg));\n+                    out.println(\"Results written to \" + canon(workDirArg.toFile()));\n@@ -1459,3 +1501,3 @@\n-        File jtregJava = jtregJDK.getProg(\"java\", true);\n-        File jdkJava = jdk.getProg(\"java\", true);\n-        if (!jdkJava.getName().equals(jtregJava.getName())) {\n+        Path jtregJava = jtregJDK.getProg(\"java\", true);\n+        Path jdkJava = jdk.getProg(\"java\", true);\n+        if (!jdkJava.getFileName().equals(jtregJava.getFileName())) {\n@@ -1500,1 +1542,1 @@\n-                            Set<File> files = gm.getFiles(g);\n+                            Set<Path> files = gm.getFiles(g);\n@@ -1504,2 +1546,2 @@\n-                            for (File f : files)\n-                                fset.add(ts.getRootDir().toURI().relativize(f.toURI()).getPath());\n+                            for (Path f : files)\n+                                fset.add(ts.getRootDir().toURI().relativize(f.toUri()).getPath());\n@@ -1601,2 +1643,1 @@\n-    private static List<File> readFileList(File file) throws Fault {\n-        BufferedReader r;\n+    private static List<Path> readFileList(Path file) throws Fault {\n@@ -1604,10 +1645,2 @@\n-            r = new BufferedReader(new FileReader(file));\n-        } catch (FileNotFoundException e) {\n-            throw new Fault(i18n, \"main.cantOpenFile\", file);\n-        }\n-        try {\n-            List<File> list = new ArrayList<>();\n-            String line;\n-            while ((line = r.readLine()) != null)\n-                list.add(new File(line));\n-            return list;\n+            List<String> lines = Files.readAllLines(file);\n+            return lines.stream().map(Path::of).collect(Collectors.toList());\n@@ -1616,6 +1649,1 @@\n-        } finally {\n-            try {\n-                r.close();\n-            } catch (IOException e) {\n-                \/\/ ignore\n-            }\n+\n@@ -1640,1 +1668,1 @@\n-        File libDir = jtreg_jar.getParentFile();\n+        Path libDir = jtreg_jar.getParent();\n@@ -1647,2 +1675,2 @@\n-            for (File f : asmtoolsPath.asList()) {\n-                try (JarFile jf = new JarFile(f)) {\n+            for (Path f : asmtoolsPath.asList()) {\n+                try (JarFile jf = new JarFile(f.toFile())) {\n@@ -1674,1 +1702,1 @@\n-            for (File f : testngPath.asList()) {\n+            for (Path f : testngPath.asList()) {\n@@ -1676,1 +1704,1 @@\n-                    urls.add(f.toURI().toURL());\n+                    urls.add(f.toUri().toURL());\n@@ -1692,2 +1720,2 @@\n-        for (File f : testngPath.asList()) {\n-            if (!f.getName().equals(\"testng.jar\")) {\n+        for (Path f : testngPath.asList()) {\n+            if (!f.getFileName().toString().equals(\"testng.jar\")) {\n@@ -1700,1 +1728,1 @@\n-        junitPath = new JarFinder(\"junit.jar\", \"hamcrest.jar\")\n+        junitPath = new JarFinder(\"junit.jar\")\n@@ -1712,2 +1740,2 @@\n-        File pfile = new File(workDirArg, \"jtreg.policy\");\n-        try (BufferedWriter pout = new BufferedWriter(new FileWriter(pfile))) {\n+        Path pfile = workDirArg.resolve(\"jtreg.policy\");\n+        try (BufferedWriter pout = Files.newBufferedWriter(pfile)) {\n@@ -1715,2 +1743,2 @@\n-            for (File f: Arrays.asList(jtreg_jar, javatest_jar)) {\n-                pout.write(\"grant codebase \\\"\" + f.toURI().toURL() + \"\\\" {\" + LINESEP);\n+            for (Path f: Arrays.asList(jtreg_jar, javatest_jar)) {\n+                pout.write(\"grant codebase \\\"\" + f.toUri().toURL() + \"\\\" {\" + LINESEP);\n@@ -1726,0 +1754,15 @@\n+    private void makeDir(Path dir, boolean quiet) throws Fault {\n+        \/\/ FIXME: I18N\n+        if (Files.isDirectory(dir))\n+            return;\n+        if (!quiet)\n+            out.println(\"Directory \\\"\" + dir + \"\\\" not found: creating\");\n+        try {\n+            Files.createDirectories(dir);\n+        } catch (IOException e) {\n+            Fault f = new Fault(i18n, \"main.cantCreateDir\", dir);\n+            f.initCause(e);\n+            throw f;\n+        }\n+    }\n+\n@@ -1738,2 +1781,2 @@\n-    private static List<File> pathToFiles(String path) {\n-        List<File> files = new ArrayList<>();\n+    private static List<Path> pathToFiles(String path) {\n+        List<Path> files = new ArrayList<>();\n@@ -1742,1 +1785,1 @@\n-                files.add(new File(f));\n+                files.add(Path.of(f));\n@@ -1747,1 +1790,1 @@\n-    private static SearchPath filesToAbsolutePath(List<File> files) {\n+    private static SearchPath filesToAbsolutePath(List<Path> files) {\n@@ -1749,2 +1792,2 @@\n-        for (File f: files) {\n-            p.append(getNormalizedFile(f));\n+        for (Path f: files) {\n+            p.append(getNormalizedFile(f.toFile()).toPath());\n@@ -1787,2 +1830,2 @@\n-            rp.setExcludeLists(excludeListArgs.toArray(new File[excludeListArgs.size()]));\n-            rp.setMatchLists(matchListArgs.toArray(new File[matchListArgs.size()]));\n+            rp.setExcludeLists(excludeListArgs.toArray(new Path[0]));\n+            rp.setMatchLists(matchListArgs.toArray(new Path[0]));\n@@ -1834,1 +1877,1 @@\n-            File rd = testManager.getReportDirectory(testSuite);\n+            Path rd = testManager.getReportDirectory(testSuite);\n@@ -1913,1 +1956,1 @@\n-    private static Harness.Observer getObserver(List<File> observerPath, String observerClassName)\n+    private static Harness.Observer getObserver(List<Path> observerPath, String observerClassName)\n@@ -1922,1 +1965,1 @@\n-                for (File f: observerPath) {\n+                for (Path f: observerPath) {\n@@ -1924,1 +1967,1 @@\n-                        urls[u++] = f.toURI().toURL();\n+                        urls[u++] = f.toUri().toURL();\n@@ -2361,2 +2404,2 @@\n-                for (File f : new SearchPath(PATH).asList()) {\n-                    if (new File(f, \"wsl.exe\").exists()) {\n+                for (Path f : new SearchPath(PATH).asList()) {\n+                    if (Files.exists(f.resolve(\"wsl.exe\"))) {\n@@ -2402,1 +2445,1 @@\n-    private File workDirArg;\n+    private Path workDirArg;\n@@ -2404,1 +2447,1 @@\n-    private List<File> excludeListArgs = new ArrayList<>();\n+    private List<Path> excludeListArgs = new ArrayList<>();\n@@ -2410,1 +2453,1 @@\n-    private File reportDirArg;\n+    private Path reportDirArg;\n@@ -2412,1 +2455,1 @@\n-    public List<File> testFileArgs = new ArrayList<>();\n+    public List<Path> testFileArgs = new ArrayList<>();\n@@ -2416,1 +2459,1 @@\n-    public final List<File> antFileArgs = new ArrayList<>();\n+    public final List<Path> antFileArgs = new ArrayList<>();\n@@ -2419,1 +2462,1 @@\n-    private File baseDirArg;\n+    private Path baseDirArg;\n@@ -2433,1 +2476,1 @@\n-    private List<File> observerPathArg;\n+    private List<Path> observerPathArg;\n@@ -2435,1 +2478,1 @@\n-    private List<File> timeoutHandlerPathArg;\n+    private List<Path> timeoutHandlerPathArg;\n@@ -2448,2 +2491,2 @@\n-    private List<File> classPathAppendArg = new ArrayList<>();\n-    private File nativeDirArg;\n+    private List<Path> classPathAppendArg = new ArrayList<>();\n+    private Path nativeDirArg;\n@@ -2455,2 +2498,2 @@\n-    private File exclusiveLockArg;\n-    private List<File> matchListArgs = new ArrayList<>();\n+    private Path exclusiveLockArg;\n+    private List<Path> matchListArgs = new ArrayList<>();\n@@ -2458,2 +2501,2 @@\n-    private File javatest_jar;\n-    private File jtreg_jar;\n+    private Path javatest_jar;\n+    private Path jtreg_jar;\n@@ -2463,1 +2506,1 @@\n-    private File policyFile;\n+    private Path policyFile;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":140,"deletions":97,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-help.copyright.txt=Copyright (c) 1999, 2021, Oracle and\/or its affiliates. \\\n+help.copyright.txt=Copyright (c) 1999, 2022, Oracle and\/or its affiliates. \\\n@@ -160,0 +160,1 @@\n+    Any timeout for a test is automatically disabled when this option is used. \\\n@@ -512,0 +513,1 @@\n+opt.bad.path.for.option=bad path for option {0}: {1}; {2}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javatest.regtest.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * Utilities for handling files.\n+ *\/\n+public class FileUtils {\n+    \/**\n+     * An unchecked IO exception to be thrown when various NIO file operations fail,\n+     * and throw a checked IO exception.\n+     *\/\n+    public static class NIOFileOperationException extends UncheckedIOException {\n+        private static final long serialVersionUID = 0;\n+\n+        \/**\n+         * The operation that caused an exception.\n+         *\/\n+        enum Op {MKDIRS, LAST_MOD, LIST, SIZE}\n+\n+        \/**\n+         * Creates an unchecked IO exception for a checked IO exception\n+         * that was caused by an operation on a file.\n+         *\n+         * @param op    the operation\n+         * @param p     the file\n+         * @param cause the IO exception\n+         *\/\n+        NIOFileOperationException(Op op, Path p, IOException cause) {\n+            super(getMessage(op, p), cause);\n+        }\n+\n+        private static String getMessage(Op op, Path p) {\n+            switch (op) {\n+                case MKDIRS:\n+                    return \"Cannot create directories for \" + p;\n+                case LAST_MOD:\n+                    return \"Cannot access last-modified time for \" + p;\n+                case LIST:\n+                    return \"Cannot list directory \" + p;\n+                case SIZE:\n+                    return \"Cannot determine size of file \" + p;\n+                default:\n+                    return \"Cannot perform unknown operation for \" + p;\n+            }\n+        }\n+    }\n+\n+    private FileUtils() { }\n+\n+    \/**\n+     * Returns the size of a file, in bytes.\n+     *\n+     * @param p the file\n+     *\n+     * @return the size of a file, in bytes\n+     *\n+     * @throws NIOFileOperationException if an IO exception arose while accessing the size\n+     *\/\n+    public static long size(Path p) throws NIOFileOperationException {\n+        try {\n+            return Files.size(p);\n+        } catch (IOException e) {\n+            throw new NIOFileOperationException(NIOFileOperationException.Op.SIZE, p, e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns the time that a file was last modified.\n+     *\n+     * @param p the file\n+     *\n+     * @return the time the file was last modified\n+     *\n+     * @throws NIOFileOperationException if an IO exception arose while accessing the time\n+     *\/\n+    public static FileTime getLastModifiedTime(Path p) throws NIOFileOperationException {\n+        try {\n+            return Files.getLastModifiedTime(p);\n+        } catch (IOException e) {\n+            throw new NIOFileOperationException(NIOFileOperationException.Op.LAST_MOD, p, e);\n+        }\n+    }\n+\n+    \/**\n+     * Compares the times that a pair of files were last modified.\n+     *\n+     * @param p1 the first file\n+     * @param p2 the second file\n+     *\n+     * @return {@code -1}, {@code 0} or {@code 1} according to whether the last modified time of the first file\n+     *          is less than, equal to, or greater than the last modified time of the second file\n+     *\n+     * @throws NIOFileOperationException if an IO exception arose while accessing the time for either file\n+     *\/\n+    public static int compareLastModifiedTimes(Path p1, Path p2) {\n+        return getLastModifiedTime(p1).compareTo(getLastModifiedTime(p2));\n+    }\n+\n+    \/**\n+     * Creates a directory by creating all non-existent parent directories first.\n+     * No exception is thrown if the directory already exists.\n+     *\n+     * @param dir the directory\n+     *\n+     * @throws NIOFileOperationException if an IO exception arose while creating the directories\n+     *\n+     * @see Files#createDirectories(Path, FileAttribute[])\n+     *\/\n+    public static void createDirectories(Path dir) {\n+        try {\n+            Files.createDirectories(dir);\n+        } catch (IOException e) {\n+            throw new NIOFileOperationException(NIOFileOperationException.Op.MKDIRS, dir, e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns the list of contents of a directory.\n+     *\n+     * @param dir the directory\n+     *\n+     * @return the list of contents\n+     *\/\n+    public static List<Path> listFiles(Path dir) {\n+        List<Path> files = new ArrayList<>();\n+        try (DirectoryStream<Path> ds = Files.newDirectoryStream(dir)) {\n+            for (Path p : ds) {\n+                files.add(p);\n+            }\n+        } catch (IOException e) {\n+            throw new NIOFileOperationException(NIOFileOperationException.Op.LIST, dir, e);\n+        }\n+        return files;\n+    }\n+\n+    \/**\n+     * Converts an array of paths to an array of file.\n+     *\n+     * @param paths the array of paths\n+     *\n+     * @return the array of files\n+     *\/\n+    public static File[] toFiles(Path[] paths) {\n+        return Stream.of(paths)\n+                .map(Path::toFile)\n+                .collect(Collectors.toList())\n+                .toArray(new File[0]);\n+    }\n+}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/util\/FileUtils.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"},{"patch":"@@ -196,2 +196,2 @@\n-        Map<File, Set<String>> undefinedNames = new TreeMap<File, Set<String>>();\n-        Map<File, Set<String>> unusedNames = new TreeMap<File, Set<String>>();\n+        Map<File, Set<String>> undefinedNames = new TreeMap<>();\n+        Map<File, Set<String>> unusedNames = new TreeMap<>();\n@@ -215,1 +215,1 @@\n-                table.put(f, s = new TreeSet<String>());\n+                table.put(f, s = new TreeSet<>());\n@@ -238,1 +238,1 @@\n-            e.definitions = new TreeSet<File>();\n+            e.definitions = new TreeSet<>();\n@@ -249,1 +249,1 @@\n-            e.references = new TreeSet<File>();\n+            e.references = new TreeSet<>();\n@@ -306,1 +306,1 @@\n-                fileSets = new ArrayList<FileSet>();\n+                fileSets = new ArrayList<>();\n@@ -329,2 +329,2 @@\n-    List<File> patternFiles = new ArrayList<File>();\n-    List<File> argFiles = new ArrayList<File>();\n+    List<File> patternFiles = new ArrayList<>();\n+    List<File> argFiles = new ArrayList<>();\n@@ -332,2 +332,2 @@\n-    Map<String, NameInfo> nameTable = new TreeMap<String, NameInfo>();\n-    List<PatternInfo> patterns = new ArrayList<PatternInfo>();\n+    Map<String, NameInfo> nameTable = new TreeMap<>();\n+    List<PatternInfo> patterns = new ArrayList<>();\n","filename":"src\/share\/classes\/com\/sun\/jct\/utils\/i18ncheck\/Main.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -821,0 +821,3 @@\n+Test timeouts are automatically disabled when a test is being debugged,\n+as indicated by the use of the `-debug` option.\n+\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+# Testing `jtreg`\n+\n+This note describes the mechanisms used to test `jtreg` itself.\n+\n+The test infrastructure uses GNU make and makefiles.\n+\n+While `jtreg` is a test harness for running tests, it is not particularly well-suited\n+to hosting a general set of tests for testing the operation of the `jtreg` tool itself.\n+For a start, you would have recursive invocations of `jtreg`, an outer one to run the\n+tests and then often an inner invocation as the subject of a particular test.\n+Also, many tests of the `jtreg` tool are negative tests, designed to test whether\n+specific error conditions are detected and reported correctly, so we need an easy way\n+to check the outcome and output from an invocation of `jtreg`. However, makefile targets,\n+dependencies and rules provide a suitably flexible environment to support the code\n+needed to test jtreg.\n+\n+## Makefiles\n+\n+At the top level, all tests have an associated `make` target, which by convention\n+is of the form _testName_`.ok`. This corresponds to the path for a \"marker file\",\n+which is updated when the thest has been executed successfully.\n+\n+With only a few exceptions, the files for each test are grouped in a subdirectory\n+of the main `test` directory. Each such directory contains a `*.gmk` file defining\n+one or more `*.ok` targets for tests in that directory. The `*.ok` targets are added\n+into a cumulative `TESTS.jtreg` variable, so that the top-level Makefile can have\n+code of the form:\n+\n+```makefile\n+include $(TESTDIR)\/*\/*.gmk      # include all the tests' makefiles\n+\n+test: $(TESTS.jtreg)            # the main test target depends on all the individual test targets\n+\n+```\n+\n+Each `*.ok` target for a test specifies any dependencies, so that the test will\n+be rerun if any of the dependencies are updated and become newer than the target itself.\n+\n+The rules for a test target form a short makefile \"script\" that executes the\n+steps of the test. The last rule typically updates the `*.ok` target, with\n+a command like\n+\n+```makefile\n+        echo \"Test passed at `date`\" > $@\n+```\n+\n+This rule will only be executed if all the preceding steps succeed. implying that\n+the test has behaved as expected.  If any part of the test execution fails, the\n+corresponding rule should return a non-zero exit code.\n+\n+If a test depends on resources or environment that may or may not be available,\n+the test target can be conditionally included in `TESTS.jtreg` using `ifdef` or similar\n+mechanisms.\n+\n+Any individual test can be run in isolation by running `make` with the full\n+absolute pathname for the marker file (that is, the `*.ok` target fort the test)\n+as the target to be built.\n+\n+## Tests\n+\n+Tests of `jtreg` functionality generally come in one of two forms:\n+\n+1. The test executes `jtreg` on a small associated test suite, and verifies the output\n+   is as expected. It may be the case that some tests in the test suite are expected\n+   to fail, and so it is common the catch the output from `jtreg` written to the console\n+   stream and to `grep` it for the expected results.\n+\n+   Some tests may use `*.ok` targets that encode `agentvm` or `othervm` in their name\n+   and then use makefile macros to extract that token from the target name, and use\n+   it to construct an option to pass to `jtreg`. This allows one set of rules to\n+   be used to run `jtreg` in the two different modes.\n+\n+    * _Example_: See `test\/libBuildArgs\/LibBuildArgsTest.gmk`\n+\n+2. The test is a standalone Java program to be compiled and executed as a unit\n+   test for some specific functionality within jtreg.\n+\n+   * _Example:_ See `test\/osTest.OSTest.gmk` and `test\/osTest.OSTest.gmk`\n+\n+   * _Note:_ now that jtreg relies on using JDK >= 11, it may be possible to use\n+     the \"source-code launcher\" feature introduced in JDK 9 to compile and run\n+     some of these tests.\n+\n+\n+\n","filename":"test\/README.md","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/SecurityManager\/SecurityManagerTests.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/addmods\/AddModulesTest.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,5 +42,0 @@\n-ifdef HAMCREST_JAR\n-$(BUILDDIR)\/Basic.check.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/hamcrest.jar\n-endif\n-\n@@ -66,1 +61,1 @@\n-\t$(GREP) -s 'Test results: passed: 155; error: 83' $(@:%.ok=%\/log)  > \/dev\/null\n+\t$(GREP) -s 'Test results: passed: 156; error: 84' $(@:%.ok=%\/log)  > \/dev\/null\n@@ -94,6 +89,0 @@\n-ifdef HAMCREST_JAR\n-$(BUILDDIR)\/Basic.othervm.ok \\\n-$(BUILDDIR)\/Basic.agentvm.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/hamcrest.jar\n-endif\n-\n","filename":"test\/basic\/Basic.gmk","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.nio.file.Path;\n@@ -169,2 +170,2 @@\n-        numPassed += 4; numFailed += 0; numError  += 6;\n-        numClean  += 10;\n+        numPassed += 5; numFailed += 0; numError  += 7;\n+        numClean  += 12;\n@@ -357,1 +358,1 @@\n-            rp.setExcludeLists(new File[0]);\n+            rp.setExcludeLists(new Path[0]);\n","filename":"test\/basic\/Basic.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-\t$(GREP) -s 'Test results: passed: 92; failed: 44; error: 87' $(@:%.ok=%.jt.log)  > \/dev\/null\n+\t$(GREP) -s 'Test results: passed: 93; failed: 44; error: 88' $(@:%.ok=%.jt.log)  > \/dev\/null\n","filename":"test\/basic\/ReportOnlyTest.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/bootclasspath\/BootClassPathTest.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-\t$(JDK8HOME)\/bin\/java \\\n+\t$(JDKHOME)\/bin\/java \\\n@@ -40,0 +40,1 @@\n+\t\t-jdk:$(JDK8HOME) \\\n","filename":"test\/ignoresymbolfile\/IgnoreSymbolFileTest.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/javac\/JavacTests.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-ifdef JDK9HOME\n-\n@@ -41,1 +39,4 @@\n-\t$(JDK9HOME)\/bin\/java -cp \"$(@:%.ok=%)\/classes$(PS)$(JTREG_IMAGEDIR)\/lib\/jtreg.jar\" \\\n+\t$(JDKHOME)\/bin\/java -cp \"$(@:%.ok=%)\/classes$(PS)$(JTREG_IMAGEDIR)\/lib\/jtreg.jar\" \\\n+\t\t-Djava.io.tmpdir=$(@:%.ok=%) \\\n+\t\tJDKModulesTest -Ddummy.vm.option\n+\t$(JDKHOME)\/bin\/java -cp \"$(@:%.ok=%)\/classes$(PS)$(JTREG_IMAGEDIR)\/lib\/jtreg.jar\" \\\n@@ -48,1 +49,0 @@\n-endif\n","filename":"test\/jdkModulesTest\/JDKModulesTest.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,3 @@\n-        Files.createFile(testSuiteDir.resolve(\"TEST.ROOT\"));\n+        if (!Files.exists(testSuiteDir.resolve(\"TEST.ROOT\"))) {\n+            Files.createFile(testSuiteDir.resolve(\"TEST.ROOT\"));\n+        }\n@@ -78,2 +80,2 @@\n-                Arrays.asList(\"java.desktop\", \"jdk.compiler\", \"java.corba\"),\n-                Arrays.asList(\"java.corba\"));\n+                Arrays.asList(\"java.desktop\", \"jdk.compiler\", \"java.se\"),\n+                Arrays.asList(\"java.se\"));\n@@ -85,1 +87,1 @@\n-                Arrays.asList(\"java.desktop\", \"jdk.compiler\", \"java.corba\"),\n+                Arrays.asList(\"java.desktop\", \"jdk.compiler\", \"java.se\"),\n@@ -92,2 +94,2 @@\n-                Arrays.asList(\"java.desktop\", \"jdk.compiler\", \"java.corba\"),\n-                Arrays.asList(\"java.desktop\", \"java.corba\"));\n+                Arrays.asList(\"java.desktop\", \"jdk.compiler\", \"java.se\"),\n+                Arrays.asList(\"java.desktop\", \"java.se\"));\n","filename":"test\/jdkModulesTest\/JDKModulesTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg \\\n@@ -46,1 +46,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg \\\n@@ -60,1 +60,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg \\\n","filename":"test\/keywords\/testKeywords.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/modlibs\/ModLibsTest.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -55,1 +55,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -68,1 +68,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/modules\/ModulesTest.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -47,1 +47,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/preview\/PreviewTest.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -55,1 +55,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -79,1 +79,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -107,1 +107,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/refIgnoreLines\/RefIgnoreLines.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -54,1 +54,1 @@\n-\t    $(JTREG_IMAGEDIR)\/bin\/jtreg \\\n+\t    JTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg \\\n@@ -63,0 +63,1 @@\n+\t\t    -e '\/JTREG_JAVA=\/d' \\\n@@ -66,1 +67,0 @@\n-\t\t    -e 's|%BUILD%.images.jtreg.lib.hamcrest\\.jar.||g' \\\n","filename":"test\/rerun\/RerunTest.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-\t$(JDK8HOME)\/bin\/javac \\\n+\t$(JDKHOME)\/bin\/javac \\\n@@ -41,1 +41,1 @@\n-\tcd $(@:%.ok=%) && $(JDK8HOME)\/bin\/java \\\n+\tcd $(@:%.ok=%) && $(JDKJAVA) \\\n@@ -44,0 +44,1 @@\n+\t\t$(JDK8HOME) \\\n","filename":"test\/rerun2\/RerunTest2.gmk","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,2 @@\n-        File testSuite = new File(args[0]);\n+        File jdk = new File(args[0]);\n+        File testSuite = new File(args[1]);\n@@ -40,1 +41,1 @@\n-            test(testSuite, mode);\n+            test(jdk, testSuite, mode);\n@@ -46,1 +47,1 @@\n-    void test(File testSuite, String mode) throws Exception {\n+    void test(File jdk, File testSuite, String mode) throws Exception {\n@@ -51,1 +52,1 @@\n-        runTests(testSuite, initialWorkDir, initialReportDir, mode);\n+        runTests(jdk, testSuite, initialWorkDir, initialReportDir, mode);\n@@ -62,1 +63,1 @@\n-    void runTests(File ts, File wd, File rd, String mode) throws Exception {\n+    void runTests(File jdk, File ts, File wd, File rd, String mode) throws Exception {\n@@ -64,0 +65,1 @@\n+            \"-jdk:\" + jdk,\n","filename":"test\/rerun2\/RerunTest2.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+# Tests in `test\/share\/basic`\n+\n+The tests in this test suite are designed to exercise the basic abilities of `jtreg` to\n+find, execute, and report on a full variety of tests. The tests also contain\n+a variety of errors, to help verify they are correctly handled by `jtreg`.\n+\n+Note that the tests in this test suite have atypical and very stylized names and titles.\n+The title of each test in the test suite is the expected text of the status message\n+when the test executes as expected. The tests are grouped according to the primary\n+action in the test, and the filename is a short description of the primary\n+characteristic of the test.  The underlying intent is that when tests do _not_\n+execute as expected, a review of the generated report files will help identify\n+any unexpected results, such as a test named `Pass.java` in the list of tests that failed,\n+or a test named `Fail.java` in the list of tests that passed.\n+\n+If you add new tests into this collection, you will also need to update\n+the code in the method `setExpectedTestStats` in `test\/basic\/Basic.java`.\n+For each new action that you add, you must update the count of expected number\n+of such actions, and the count for the expected outcome.\n+\n+This test suite is used in the following tests\n+\n+* `test\/basic\/Basic.gmk`\n+        -- tests the ability to find and execute tests, in both `agentvm` and `othervm` modes\n+\n+* `test\/basic\/ReportOnlyTest.gmk`\n+        -- tests the ability to report on previously executed tests\n+\n+* `test\/statsTests\/StatsTests.gmk`\n+        -- tests the ability to format the statistics reported at the end of a run\n+\n+If you add new tests into this collection you will probably have to update the\n+makefile rules for the first two, and you may have to update the makefile rules\n+for the third, depending on what kind of new test you add.\n\\ No newline at end of file\n","filename":"test\/share\/basic\/README.md","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -48,0 +48,5 @@\n+\n+\/* @test\n+ * @summary Error: Parse Exception: Bad classname provided for `clean': JARandom.class\n+ * @run clean JARandom.class\n+ *\/\n","filename":"test\/share\/basic\/clean\/BadTag.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,6 @@\n- * @run clean JARandom.class\n+ * @run clean JARandom\n+ *\/\n+\n+\/* @test\n+ * @summary Passed: Clean Successful\n+ * @run clean abc.def.JARandom\n","filename":"test\/share\/basic\/clean\/Pass.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg \\\n","filename":"test\/shell\/testShell.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,5 @@\n-\tif [ \"$$count\" -ne 3 ]; then echo \"error: output does not contain expected lines\" ; exit 1 ; fi\n+\tif [ \"$$count\" -ne 3 ]; then \\\n+\t\techo \"***\" $(@:%.ok=%\/jt.log) ; cat $(@:%.ok=%\/jt.log) ; \\\n+\t\techo \"***\" $(@:%.ok=%)\/work\/StreamsTest.jtr ; cat $(@:%.ok=%)\/work\/StreamsTest.jtr ; \\\n+\t\techo \"error: output does not contain expected lines\" ; exit 1 ; \\\n+\tfi\n","filename":"test\/streams\/StreamsTest.gmk","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg \\\n","filename":"test\/testng-junit\/TestNGJUnitTest.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -53,1 +53,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -79,1 +79,1 @@\n-\t$(JDK8HOME)\/bin\/javac -cp $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t$(JDKHOME)\/bin\/javac -cp $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n@@ -82,1 +82,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -100,1 +100,1 @@\n-\t$(JDK8HOME)\/bin\/javac -cp $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t$(JDKHOME)\/bin\/javac -cp $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n@@ -103,1 +103,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n","filename":"test\/timeouthandlers\/TimeoutHandlerTest.gmk","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n@@ -41,1 +41,1 @@\n-\tJAVA_HOME=$(JDK8HOME) $(ANT) -f $(TESTDIR)\/vmopts\/build.xml \\\n+\tJAVA_HOME=$(JDKHOME) $(ANT) -f $(TESTDIR)\/vmopts\/build.xml \\\n","filename":"test\/vmopts\/TestVMOpts.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}