{"files":[{"patch":"@@ -0,0 +1,34 @@\n+package com.sun.javatest.regtest.config;\n+\n+import com.sun.javatest.CrashOnlyParameters;\n+import com.sun.javatest.CrashOnlyTestSuite;\n+import com.sun.javatest.InterviewParameters;\n+import com.sun.javatest.TestSuite;\n+\n+import java.util.function.Consumer;\n+\n+public class CrashOnlyParametersImpl extends RegressionParameters implements CrashOnlyParameters\n+{\n+\n+    \/**\n+     * Creates an object to handle the parameters for a test run.\n+     *\n+     * @param tag       a string to identify the set of parameters\n+     * @param testSuite the test suite\n+     * @param logger    an object to which to write logging messages\n+     * @throws InterviewParameters.Fault if a problem occurs while creating this object\n+     *\/\n+    public CrashOnlyParametersImpl(String tag, RegressionTestSuite testSuite, Consumer<String> logger) throws Fault {\n+        super(tag, testSuite, logger);\n+    }\n+\n+    public CrashOnlyParametersImpl(RegressionParameters regPar) throws Fault {\n+        super(regPar);\n+    }\n+\n+\n+    @Override\n+    public RegressionTestSuite getTestSuite() {\n+        return super.getTestSuite();\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/CrashOnlyParametersImpl.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+package com.sun.javatest.regtest.config;\n+\n+import com.sun.javatest.TestFinder;\n+\n+import java.io.PrintWriter;\n+import java.nio.file.Path;\n+\n+public class CrashOnlyTestManager extends TestManager{\n+\n+    public CrashOnlyTestManager(PrintWriter out, Path baseDir, TestFinder.ErrorHandler errHandler) {\n+        super(out, baseDir, errHandler);\n+    }\n+}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/CrashOnlyTestManager.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+package com.sun.javatest.regtest.config;\n+\n+import com.sun.javatest.*;\n+\n+import java.io.File;\n+\n+public class CrashOnlyTestSuite extends RegressionTestSuite {\n+\n+    \/**\n+     * Creates a {@code RegressionTestSuite} object for the test suite identified by a given path.\n+     *\n+     * @param testSuiteRoot the root directory of the test suite\n+     * @param errHandler    a handler that can be used to report any problems encountered by\n+     *                      the test suite's test handler\n+     * @throws Fault if there are problems reading the {@code TEST.ROOT} file.\n+     *\/\n+    public CrashOnlyTestSuite(File testSuiteRoot, TestFinder.ErrorHandler errHandler) throws Fault {\n+        super(testSuiteRoot, errHandler);\n+    }\n+\n+    @Override\n+    public TestRunner createTestRunner() {\n+        return new CrashOnlyTestRunner();\n+    }\n+\n+    public interface ParametersFactory {\n+        CrashOnlyParametersImpl create(com.sun.javatest.CrashOnlyTestSuite ts) throws TestSuite.Fault;\n+    }\n+\n+    \/**public class ParametersFactory {\n+        @Override\n+        CrashOnlyParametersImpl create(RegressionTestSuite ts) throws TestSuite.Fault;\n+    }\n+\n+    private static RegressionTestSuite.ParametersFactory factory;\n+\n+    @Override\n+    public RegressionParameters createInterview() throws TestSuite.Fault {\n+        try {\n+            return (factory != null) ? factory.create(this) \/\/ expected case\n+                    : new RegressionParameters(\"regtest\", this, System.err::println); \/\/ fallback\n+        } catch (InterviewParameters.Fault e) {\n+            throw new TestSuite.Fault(i18n, \"suite.cantCreateInterview\", e.getMessage());\n+        }\n+    }*\/\n+}\n\\ No newline at end of file\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/CrashOnlyTestSuite.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -77,1 +77,1 @@\n-    implements Parameters.EnvParameters, Parameters.TestWideParameters\n+    implements Parameters.EnvParameters\n@@ -99,0 +99,46 @@\n+    public RegressionParameters(RegressionParameters regPar) throws Interview.Fault{\n+        super(regPar.getTag(), regPar.getTestSuite());\n+        this.asmToolsPath = regPar.asmToolsPath;\n+        this.basicTestProperties = regPar.basicTestProperties;\n+        this.envVars = regPar.envVars;\n+        this.check = regPar.check;\n+        this.compileJDK = regPar.testJDK;\n+        this.excludeListFilter = regPar.excludeListFilter;\n+        this.logger = regPar.logger;\n+        this.exclusiveLock = regPar.exclusiveLock;\n+        this.execMode = regPar.execMode;\n+        this.exprContext = regPar.exprContext;\n+        this.filterFaults = regPar.filterFaults;\n+        this.ignoreKind = regPar.ignoreKind;\n+        this.javaTestClassPath = regPar.javaTestClassPath;\n+        this.junitPath = regPar.junitPath;\n+        this.testngPath = regPar.testngPath;\n+        this.keywordsFilter = regPar.keywordsFilter;\n+        this.matchListFilter = regPar.matchListFilter;\n+        this.matchLists = regPar.matchLists;\n+        this.nativeDir = regPar.nativeDir;\n+        this.priorStatusFilter = regPar.priorStatusFilter;\n+        this.refIgnoreLinesPattern = regPar.refIgnoreLinesPattern;\n+        this.relevantTestFilter = regPar.relevantTestFilter;\n+        this.reportDir = regPar.reportDir;\n+        this.retainArgs = regPar.retainArgs;\n+        this.retainFilesPattern = regPar.retainFilesPattern;\n+        \/\/this.retainStatusSet = regPar.retainStatusSet;\n+        this.testCompilerOpts = regPar.testCompilerOpts;\n+        this.testDebugOpts = regPar.testDebugOpts;\n+        this.testJavaOpts = regPar.testJavaOpts;\n+        this.testJDK = regPar.testJDK;\n+        this.testQueries = regPar.testQueries;\n+        this.testThreadFactory = regPar.testThreadFactory;\n+        this.testThreadFactoryPath = regPar.testThreadFactoryPath;\n+        this.testVMOpts = regPar.testVMOpts;\n+        this.timeLimit = regPar.timeLimit;\n+        this.timeoutHandlerClassName = regPar.timeoutHandlerClassName;\n+        this.timeoutHandlerPath = regPar.timeoutHandlerPath;\n+        this.timeoutHandlerProvider = regPar.timeoutHandlerProvider;\n+        this.timeoutHandlerTimeout = regPar.timeoutHandlerTimeout;\n+        this.useWindowsSubsystemForLinux = regPar.useWindowsSubsystemForLinux;\n+        \/\/this.iTests = regPar.iTests;\n+        \/\/this.kflFiles = regPar.kflFiles;\n+    }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionParameters.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+import com.sun.javatest.CrashOnlyHarness;\n@@ -117,0 +118,1 @@\n+import com.sun.javatest.Parameters;\n@@ -1243,0 +1245,11 @@\n+        if (crashOnly){\n+            RegressionTestSuite.setParametersFactory(ts -> {\n+                try {\n+                    return createParameters(testManager, ts);\n+                } catch (BadArgs\n+                         | Fault ex) {\n+                    throw new TestSuite.Fault(i18n, \"main.cantCreateParameters\", ex.getMessage());\n+                }\n+            });\n+        }\n+\n@@ -1294,1 +1307,1 @@\n-            RegressionParameters params = createParameters(testManager, ts);\n+            Parameters params = createParameters(testManager, ts);\n@@ -1303,1 +1316,1 @@\n-                    Agent.Pool p = Agent.Pool.instance(params);\n+                    Agent.Pool p = Agent.Pool.instance((RegressionParameters)params);\n@@ -1334,1 +1347,1 @@\n-                showTool(params);\n+                showTool((RegressionParameters)params);\n@@ -1339,1 +1352,1 @@\n-                    testStats.addAll(batchHarness(params, quiet));\n+                    testStats.addAll(batchHarness((RegressionParameters)params, quiet));\n@@ -1624,1 +1637,1 @@\n-            TestManager testManager, RegressionTestSuite testSuite)\n+            TestManager testManager, RegressionTestSuite testSuite, RegressionParameters p)\n@@ -1628,1 +1641,0 @@\n-            RegressionParameters rp = new RegressionParameters(\"regtest\", testSuite, out::println);\n@@ -1631,1 +1643,1 @@\n-            rp.setWorkDirectory(workDir);\n+            p.setWorkDirectory(workDir);\n@@ -1634,1 +1646,1 @@\n-            rp.setFile(workDir.getFile(\"config.jti\"));\n+            p.setFile(workDir.getFile(\"config.jti\"));\n@@ -1636,1 +1648,1 @@\n-            rp.setRetainArgs(retainArgs);\n+            p.setRetainArgs(retainArgs);\n@@ -1641,1 +1653,1 @@\n-            rp.setTests(testManager.getTests(testSuite));\n+            p.setTests(testManager.getTests(testSuite));\n@@ -1647,1 +1659,1 @@\n-                rp.setTestQueries(testQueries);\n+                p.setTestQueries(testQueries);\n@@ -1655,1 +1667,1 @@\n-                rp.setKeywordsExpr(expr);\n+                p.setKeywordsExpr(expr);\n@@ -1658,2 +1670,2 @@\n-            rp.setExcludeLists(excludeListArgs.toArray(new Path[0]));\n-            rp.setMatchLists(matchListArgs.toArray(new Path[0]));\n+            p.setExcludeLists(excludeListArgs.toArray(new Path[0]));\n+            p.setMatchLists(matchListArgs.toArray(new Path[0]));\n@@ -1662,1 +1674,1 @@\n-                rp.setPriorStatusValues(null);\n+                p.setPriorStatusValues(null);\n@@ -1669,1 +1681,1 @@\n-                rp.setPriorStatusValues(b);\n+                p.setPriorStatusValues(b);\n@@ -1679,1 +1691,1 @@\n-                    rp.setConcurrency(c);\n+                    p.setConcurrency(c);\n@@ -1687,1 +1699,1 @@\n-                    rp.setTimeoutFactor(timeoutFactorArg);\n+                    p.setTimeoutFactor(timeoutFactorArg);\n@@ -1694,1 +1706,1 @@\n-                rp.setTimeoutHandler(timeoutHandlerClassName);\n+                p.setTimeoutHandler(timeoutHandlerClassName);\n@@ -1698,1 +1710,1 @@\n-                rp.setTimeoutHandlerPath(timeoutHandlerPathArg);\n+                p.setTimeoutHandlerPath(timeoutHandlerPathArg);\n@@ -1702,1 +1714,1 @@\n-                rp.setTimeoutHandlerTimeout(timeoutHandlerTimeoutArg);\n+                p.setTimeoutHandlerTimeout(timeoutHandlerTimeoutArg);\n@@ -1706,1 +1718,1 @@\n-                rp.setTestThreadFactory(testThreadFactory);\n+                p.setTestThreadFactory(testThreadFactory);\n@@ -1710,1 +1722,1 @@\n-                rp.setTestThreadFactoryPath(testThreadFactoryPathArg);\n+                p.setTestThreadFactoryPath(testThreadFactoryPathArg);\n@@ -1715,1 +1727,1 @@\n-                rp.setReportDir(rd);\n+                p.setReportDir(rd);\n@@ -1718,1 +1730,1 @@\n-                rp.setExclusiveLock(exclusiveLockArg);\n+                p.setExclusiveLock(exclusiveLockArg);\n@@ -1720,2 +1732,2 @@\n-            if (!rp.isValid())\n-                throw new Fault(i18n, \"main.badParams\", rp.getErrorMessage());\n+            if (!p.isValid())\n+                throw new Fault(i18n, \"main.badParams\", p.getErrorMessage());\n@@ -1724,1 +1736,1 @@\n-                rp.setTestVMOptions(testVMOpts);\n+                p.setTestVMOptions(testVMOpts);\n@@ -1727,1 +1739,1 @@\n-                rp.setTestCompilerOptions(testCompilerOpts);\n+                p.setTestCompilerOptions(testCompilerOpts);\n@@ -1730,1 +1742,1 @@\n-                rp.setTestJavaOptions(testJavaOpts);\n+                p.setTestJavaOptions(testJavaOpts);\n@@ -1733,8 +1745,7 @@\n-                rp.setTestDebugOptions(testDebugOpts);\n-\n-            rp.setCheck(checkFlag);\n-            rp.setCrashOnly(crashOnly);\n-            rp.setExecMode(execMode);\n-            rp.setEnvVars(getEnvVars());\n-            rp.setCompileJDK((compileJDK != null) ? compileJDK : testJDK);\n-            rp.setTestJDK(testJDK);\n+                p.setTestDebugOptions(testDebugOpts);\n+\n+            p.setCheck(checkFlag);\n+            p.setExecMode(execMode);\n+            p.setEnvVars(getEnvVars());\n+            p.setCompileJDK((compileJDK != null) ? compileJDK : testJDK);\n+            p.setTestJDK(testJDK);\n@@ -1742,1 +1753,1 @@\n-                rp.setIgnoreKind(ignoreKind);\n+                p.setIgnoreKind(ignoreKind);\n@@ -1745,1 +1756,1 @@\n-                rp.setJUnitPath(junitPath);\n+                p.setJUnitPath(junitPath);\n@@ -1748,1 +1759,1 @@\n-                rp.setTestNGPath(testngPath);\n+                p.setTestNGPath(testngPath);\n@@ -1751,1 +1762,1 @@\n-                rp.setAsmToolsPath(asmtoolsPath);\n+                p.setAsmToolsPath(asmtoolsPath);\n@@ -1755,1 +1766,1 @@\n-                    rp.setTimeLimit(Integer.parseInt(timeLimitArg));\n+                    p.setTimeLimit(Integer.parseInt(timeLimitArg));\n@@ -1762,1 +1773,1 @@\n-                rp.setNativeDir(nativeDirArg);\n+                p.setNativeDir(nativeDirArg);\n@@ -1764,1 +1775,1 @@\n-            rp.setUseWindowsSubsystemForLinux(useWindowsSubsystemForLinux);\n+            p.setUseWindowsSubsystemForLinux(useWindowsSubsystemForLinux);\n@@ -1766,1 +1777,1 @@\n-            rp.initExprContext(); \/\/ will invoke\/init jdk.getProperties(params)\n+            p.initExprContext(); \/\/ will invoke\/init jdk.getProperties(params)\n@@ -1768,4 +1779,1 @@\n-            return rp;\n-        } catch (Interview.Fault f) {\n-            \/\/ TODO: fix bad string -- need more helpful resource here\n-            throw new Fault(i18n, \"main.cantOpenTestSuite\", testSuite.getRootDir(), f);\n+            return p;\n@@ -1777,0 +1785,14 @@\n+    private RegressionParameters createParameters(TestManager testManager, RegressionTestSuite testSuite) throws BadArgs, Fault{\n+        try{\n+            RegressionParameters p = new RegressionParameters(\"regtest\", testSuite, out::println);\n+            if(crashOnly){\n+                p = new CrashOnlyParametersImpl(p);\n+            }\n+            return createParameters(testManager, testSuite, p);\n+        }\n+        catch (Interview.Fault f) {\n+            \/\/ TODO: fix bad string -- need more helpful resource here\n+            throw new Fault(i18n, \"main.cantOpenTestSuite\", testSuite.getRootDir(), f);\n+        }\n+    }\n+\n@@ -1902,0 +1924,3 @@\n+                if(crashOnly){\n+                    h = new CrashOnlyHarness();\n+                }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":75,"deletions":50,"binary":false,"changes":125,"status":"modified"}]}