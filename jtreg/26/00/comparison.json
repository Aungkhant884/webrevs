{"files":[{"patch":"@@ -1998,0 +1998,9 @@\n+                        String section, stream;\n+                        int sep = showStream.indexOf(\"\/\");\n+                        if (sep == -1) {\n+                            section = null;\n+                            stream = showStream;\n+                        } else {\n+                            section = showStream.substring(0, sep);\n+                            stream = showStream.substring(sep + 1);\n+                        }\n@@ -2000,5 +2009,7 @@\n-                            String text = s.getOutput(showStream);\n-                            \/\/ need to handle internal newlines properly\n-                            if (text != null) {\n-                                out.println(\"### Section \" + s.getTitle());\n-                                out.println(text);\n+                            if (section == null || section.equals(s.getTitle())) {\n+                                String text = s.getOutput(stream);\n+                                \/\/ need to handle internal newlines properly\n+                                if (text != null) {\n+                                    out.println(\"### Section \" + s.getTitle());\n+                                    out.println(text);\n+                                }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -245,3 +245,8 @@\n-help.main.show.desc=Show information from a section in the results file for a test. \\\n-    For example, -show:rerun\n-help.main.show.arg=<section-name>\n+help.main.show.desc=Show the contents of a stream in a specific section or in all \\\n+    sections of the results file for a test. \\\n+    The content is shown as originally written to the stream: \\\n+    that is, without the escape encoding used in the .jtr file. \\\n+    If no section name is given, the output for the named stream in all sections \\\n+    is shown.\\n\\\n+    For example, -show:rerun  -show:main\/System.out\n+help.main.show.arg=[<section-name>\/]<stream-name>\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-    A platform equivalent to JDK 1.7.0 or later is required.\n+    A platform equivalent to JDK 1.8.0 or later is required.\n","filename":"src\/share\/doc\/javatest\/regtest\/README","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -330,1 +330,1 @@\n-Blocks of text within a .jtr file use `\\` to escape certain characters\n+Blocks of text within a .jtr file use `\\` to [escape](#jtr-encoding) certain characters\n@@ -333,1 +333,1 @@\n-the jtreg `-show` option, the escapes are automatically taken into acocunt.\n+the jtreg `-show` option, the escapes are automatically taken into account.\n@@ -841,4 +841,5 @@\n-2.  Use the JavaTest harness GUI.\n-3.  View the test's `.jtr` file.\n-4.  Use the `-show` option. For example,\n-    * `jtreg -show:System.out` _test-name_\n+2.  Use the JavaTest (JT Harness) harness GUI.\n+3.  View the test's `.jtr` file. \n+    _Note: some characters in the file may be [encoded](#jtr-encoding)._\n+4.  Use the `-show` option to display the unencoded content of a stream. For example,\n+    * `jtreg -w` _work-dir_ `-show:System.out` _test-name_\n@@ -860,0 +861,41 @@\n+### Why are there extra `\\` characters in the output from a test in a .jtr file? {#jtr-encoding}\n+\n+By design, the contents of a `.jtr` file, including any output from tests, is represented in a way\n+that can be read back in again by `jtreg` and related tools. To that end, characters that are not\n+standard ASCII characters (printable characters, and `CR`, `LF`, `SP`, `HT`) are encoded with escape sequences..\n+Characters outside that set are represented by `\\uXXXX`, and `\\` itself as written as `\\\\`.\n+Anyone viewing the contents of a `.jtr` directly, such as in a plain-text editor, or using\n+command-line tools like `grep` need to be aware of that encoding and take it into account.\n+\n+To view the unencoded output from a test that has been recorded in a `.jtr` file, \n+use the `jtreg` `-show:name` option.\n+\n+    $ jtreg -w:\/path\/to\/work-dir -show:System.out \/path\/to\/test\n+\n+The `-show` option can also be used to see the `rerun` script that is provided in the `.jtr` file,\n+and which may also contain escape sequences. This script allows you to [rerun the test stand-alone](#rerun),\n+without the use of the `jtreg` infrastructure.\n+\n+### What names can I use with the `-show` option\n+\n+All recent versions of `jtreg` accept the name of an output stream as the name. \n+\n+    $ jtreg ...  -show:stream-name ...\n+\n+The name of each output stream appears after a series of dashes and before a colon `:`\n+in the `.jtr` file.  For example, here is a heading for a stream named `System.out`:\n+\n+    ----------System.out:(1\/501)----------\n+\n+More recent versions (6.2 onwards) support an optional section name as well. \n+See the command-line help for specific details in the version you are using.\n+\n+    $ jtreg ... -show:section-name\/stream-name\n+\n+The name of all the sections appear in the `testresult` part of the `.jtr` file,\n+and individually after `#section:` at the beginning of each section. For example,\n+\n+    sections=script_messages build compile build main\n+\n+    #section:compile\n+\n@@ -877,1 +919,1 @@\n-### I'd like to run my test standalone, without using jtreg: how do I do that?\n+### I'd like to run my test standalone, without using jtreg: how do I do that? {#rerun}\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":49,"deletions":7,"binary":false,"changes":56,"status":"modified"}]}