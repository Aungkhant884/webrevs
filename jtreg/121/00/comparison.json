{"files":[{"patch":"@@ -1,335 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.jct.utils.i18ncheck;\n-\n-import java.io.BufferedInputStream;\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.TreeMap;\n-import java.util.TreeSet;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.FileScanner;\n-\n-import org.apache.tools.ant.Task;\n-import org.apache.tools.ant.types.FileSet;\n-\n-\/**\n- *\n- * @author jjg\n- *\/\n-public class Main {\n-    public static void main(String[] args) {\n-        try {\n-            boolean ok = new Main().run(args);\n-            exit(ok ? 0 : 1);\n-        } catch (Exception e) {\n-            System.err.println(e.toString());\n-            e.printStackTrace(System.err);\n-            exit(2);\n-        }\n-    }\n-\n-\n-    public boolean run(String[] args) throws Exception {\n-        \/\/ scan a set of files to build up a list of i18n tags,\n-        \/\/ the files that define them and the files that reference them,\n-        \/\/ in order to determine any issues.\n-        int i;\n-        for (i = 0; i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.equals(\"-p\") && i + 1 < args.length)\n-                addPatternFile(new File(args[++i]));\n-            else if (arg.startsWith(\"-\"))\n-                throw new Exception(\"unknown option: \" + arg);\n-            else\n-                break;\n-        }\n-\n-        for ( ; i < args.length; i++)\n-            addArgFile(new File(args[i]));\n-\n-        return execute();\n-    }\n-\n-    void addPatternFile(File file) {\n-\/\/        System.err.println(\"add pattern file \" + file);\n-        patternFiles.add(file);\n-    }\n-\n-    void addArgFile(File file) {\n-\/\/        System.err.println(\"add file \" + file);\n-        argFiles.add(file);\n-    }\n-\n-    void addArgFiles(File baseDir, String[] files) {\n-        if (files == null)\n-            return;\n-        for (String f: files)\n-            addArgFile(new File(baseDir, f));\n-    }\n-\n-    boolean execute() throws IOException {\n-        for (File file: patternFiles)\n-            readPatterns(file);\n-\n-        for (File file: argFiles) {\n-            if (file.isDirectory())\n-                readDirectory(file);\n-            else {\n-                String extn = getExtension(file);\n-                if (equal(extn, \".properties\"))\n-                    readProperties(file);\n-                else\n-                    readFile(file);\n-            }\n-        }\n-\n-        return report(nameTable);\n-    }\n-\n-    void readPatterns(File file) throws IOException {\n-\/\/        System.err.println(\"read pattern file \" + file);\n-        BufferedReader in = new BufferedReader(new FileReader(file));\n-        String line;\n-        while ((line = in.readLine()) != null) {\n-            line = line.trim();\n-            if (line.length() == 0 || line.startsWith(\"#\"))\n-                continue;\n-            String[] words = line.split(\" +\");\n-            if (words.length < 2)\n-                continue;\n-            Pattern pat = Pattern.compile(words[0]);\n-            String[] keys = new String[words.length - 1];\n-            System.arraycopy(words, 1, keys, 0, keys.length);\n-            patterns.add(new PatternInfo(pat, keys));\n-        }\n-        in.close();\n-    }\n-\n-    void readDirectory(File dir) throws IOException {\n-        File[] children = dir.listFiles();\n-        for (File file: children) {\n-            if (file.isDirectory())\n-                continue;\n-            String extn = getExtension(file);\n-            if (equal(extn, \".properties\"))\n-                readProperties(file);\n-            else if (equal(extn, \".java\"))\n-                readFile(file);\n-\n-        }\n-    }\n-\n-    void readProperties(File file) throws IOException {\n-\/\/        System.err.println(\"read properties file \" + file);\n-        InputStream in = new BufferedInputStream(new FileInputStream(file));\n-        Properties p = new Properties();\n-        p.load(in);\n-        in.close();\n-        for (Enumeration<?> e = p.propertyNames(); e.hasMoreElements(); ) {\n-            String n = (String) e.nextElement();\n-            define(n, file);\n-        }\n-    }\n-\n-    void readFile(File file) throws IOException {\n-\/\/        System.err.println(\"read source file \" + file);\n-        BufferedReader in = new BufferedReader(new FileReader(file));\n-        String line;\n-        while ((line = in.readLine()) != null) {\n-            for (PatternInfo p: patterns) {\n-                Matcher m = p.pattern.matcher(line);\n-                if (m.find()) {\n-                    for (String k: p.keys) {\n-                        Matcher g = groupNumber.matcher(k);\n-                        if (g.find()) {\n-                            int n = Integer.valueOf(g.group(1));\n-                            String name = k.substring(0, g.start()) + m.group(n) + k.substring(g.end());\n-                            refer(name, file);\n-                        } else\n-                            refer(k, file);\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-        in.close();\n-\n-    }\n-\n-    boolean report(Map<String, NameInfo> table) {\n-        \/\/ invert the data structure to get File -> Set<name>\n-        Map<File, Set<String>> undefinedNames = new TreeMap<>();\n-        Map<File, Set<String>> unusedNames = new TreeMap<>();\n-        for (NameInfo e: table.values()) {\n-            if (e.definitions == null || e.definitions.size() == 0)\n-                insert(undefinedNames, e.name, e.references);\n-            if (e.references == null || e.references.size() == 0)\n-                insert(unusedNames, e.name, e.definitions);\n-        }\n-\n-        write(\"undefined\", undefinedNames);\n-        write(\"unused\", unusedNames);\n-\n-        return (undefinedNames.size() == 0 && unusedNames.size() == 0);\n-    }\n-\n-    void insert(Map<File, Set<String>> table, String name, Set<File> files) {\n-        for (File f: files) {\n-            Set<String> s = table.get(f);\n-            if (s == null)\n-                table.put(f, s = new TreeSet<>());\n-            s.add(name);\n-        }\n-    }\n-\n-    void write(String title, Map<File, Set<String>> table) {\n-        if (table.size() > 0) {\n-            System.err.println(\"The following files have \" + title + \" names\");\n-            for (Map.Entry<File, Set<String>> e: table.entrySet()) {\n-                System.err.println(\"  \" + e.getKey());\n-                for (String n: e.getValue())\n-                    System.err.println(\"     \" + n);\n-            }\n-        }\n-    }\n-\n-    void define(String name, File file) {\n-        NameInfo e = nameTable.get(name);\n-        if (e == null) {\n-            e = new NameInfo(name);\n-            nameTable.put(name, e);\n-        }\n-        if (e.definitions == null)\n-            e.definitions = new TreeSet<>();\n-        e.definitions.add(file);\n-    }\n-\n-    void refer(String name, File file) {\n-        NameInfo e = nameTable.get(name);\n-        if (e == null) {\n-            e = new NameInfo(name);\n-            nameTable.put(name, e);\n-        }\n-        if (e.references == null)\n-            e.references = new TreeSet<>();\n-        e.references.add(file);\n-    }\n-\n-    String getExtension(File f) {\n-        String n = f.getName();\n-        int dot = n.lastIndexOf(\".\");\n-        return (dot == -1 ? null : n.substring(dot));\n-    }\n-\n-    void error(String message) {\n-        System.err.println(message);\n-    }\n-\n-    private static <T> boolean equal(T t1, T t2) {\n-        return (t1 == null ? t2 == null : t1.equals(t2));\n-    }\n-\n-    private static void exit(int rc) {\n-        try {\n-            SecurityManager sm = System.getSecurityManager();\n-                if (sm != null)\n-                    sm.checkExit(rc);\n-            System.exit(rc);\n-        } catch (SecurityException ignore) {\n-        }\n-    }\n-\n-    class NameInfo {\n-        NameInfo(String name) {\n-            this.name = name;\n-        }\n-        final String name;\n-        Set<File> definitions;\n-        Set<File> references;\n-    }\n-\n-    class PatternInfo {\n-        PatternInfo(Pattern pattern, String[] keys) {\n-            this.pattern = pattern;\n-            this.keys = keys;\n-        }\n-\n-        final Pattern pattern;\n-        final String[] keys;\n-    }\n-\n-    public static class Ant extends Task {\n-        File patternFile;\n-        List<FileSet> fileSets;\n-\n-        public void setPatternFile(File file) {\n-            patternFile = file;\n-        }\n-\n-        public void addFileSet(FileSet fs) {\n-            if (fileSets == null)\n-                fileSets = new ArrayList<>();\n-            fileSets.add(fs);\n-        }\n-\n-        @Override\n-        public void execute() {\n-            Main m = new Main();\n-            m.addPatternFile(patternFile);\n-            for (FileSet fs: fileSets) {\n-                FileScanner s = fs.getDirectoryScanner(getProject());\n-                m.addArgFiles(s.getBasedir(), s.getIncludedFiles());\n-            }\n-\n-            try {\n-                boolean ok = m.execute();\n-                if (!ok)\n-                    throw new BuildException(\"Errors occurred\");\n-            } catch (IOException e) {\n-                throw new BuildException(e);\n-            }\n-        }\n-    }\n-\n-    List<File> patternFiles = new ArrayList<>();\n-    List<File> argFiles = new ArrayList<>();\n-\n-    Map<String, NameInfo> nameTable = new TreeMap<>();\n-    List<PatternInfo> patterns = new ArrayList<>();\n-    Pattern groupNumber = Pattern.compile(\"\\\\\\\\([0-9]*)\");\n-}\n","filename":"src\/share\/classes\/com\/sun\/jct\/utils\/i18ncheck\/Main.java","additions":0,"deletions":335,"binary":false,"changes":335,"status":"deleted"}]}