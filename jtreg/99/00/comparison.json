{"files":[{"patch":"@@ -845,1 +845,1 @@\n-3.  View the test's `.jtr` file. \n+3.  View the test's `.jtr` file.\n@@ -873,1 +873,1 @@\n-To view the unencoded output from a test that has been recorded in a `.jtr` file, \n+To view the unencoded output from a test that has been recorded in a `.jtr` file,\n@@ -884,1 +884,1 @@\n-All recent versions of `jtreg` accept the name of an output stream as the name. \n+All recent versions of `jtreg` accept the name of an output stream as the name.\n@@ -893,1 +893,1 @@\n-More recent versions (6.2 onwards) support an optional section name as well. \n+More recent versions (6.2 onwards) support an optional section name as well.\n@@ -1028,1 +1028,1 @@\n-The agent pool is a collection of reusable VMs that can be used to run \n+The agent pool is a collection of reusable VMs that can be used to run\n@@ -1044,1 +1044,1 @@\n-The default is double the number of tests that may run \n+The default is double the number of tests that may run\n@@ -1309,1 +1309,1 @@\n-used to run tests), or you can override the default value for some or all tests with the \n+used to run tests), or you can override the default value for some or all tests with the\n@@ -1809,1 +1809,1 @@\n-and run the code.  In addition, to compile the code you must also specify the \n+and run the code.  In addition, to compile the code you must also specify the\n@@ -1818,1 +1818,1 @@\n-implicit `@build` actions and the ensuing `@compile` actions. \n+implicit `@build` actions and the ensuing `@compile` actions.\n@@ -1822,1 +1822,1 @@\n-and its subdirectories by configuring an entry for `enablePreview` in the \n+and its subdirectories by configuring an entry for `enablePreview` in the\n@@ -2099,0 +2099,31 @@\n+### How do I find the path for the TestNG or JUnit jar files?\n+\n+It should not be necessary to determine the path for the TestNG or JUnit jar\n+files when using the jtreg built-in support to run TestNG or JUnit tests,\n+because jtreg will automatically set up all the necessary paths.  But sometimes\n+it may be desirable for test code, such as a \"driver\" test, to run a set of\n+TestNG or JUnit tests with some special set of options, perhaps in a separate\n+JVM. In such situations, in may be necessary to construct a class path\n+containing the paths for the necessary libraries.\n+\n+The best way to determine the path of the jar file for a library is to use the\n+protection domain and code source for a representative class in the  library,\n+such as with the following code:\n+\n+```java\n+import java.security.ProtectionDomain;\n+import java.security.CodeSource;\n+\n+...\n+\n+    public Path getPath(Class<?> libraryClass) {\n+        CodeSource cs = libraryClass.getProtectionDomain().getCodeSource();\n+        return Path.of(URI.create(cs.getLocation().toString()));\n+    }\n+```\n+\n+Note that starting with jtreg version 7, the convention for naming the jar file\n+for the library is to use the base name of the jar file that was specified when\n+jtreg was built, and that this name may depend on the version of the library.\n+For this reason, you should not assume a fixed name for the library jar file.\n+\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":41,"deletions":10,"binary":false,"changes":51,"status":"modified"}]}