{"files":[{"patch":"@@ -204,1 +204,1 @@\n-Yes. Several options provided with `jtreg` influence the output per test.  \n+Yes. Several options provided with `jtreg` influence the output per test.\n@@ -1025,0 +1025,57 @@\n+### My tests take a long time to run: how do I find where the time goes?\n+\n+The [`.jtr`](#jtr-file) file for each test contains timing information\n+for each action executed by the test and for the test as a whole.\n+\n+* There is a section in each `.jtr` file for each action executed as\n+  part of the test, and in each section there is a line of the form:\n+\n+      elapsed time (seconds): NNNN\n+\n+  where _NNNN_ is the elapsed time (wall-clock time) taken to execute the\n+  action.\n+\n+* In the _testresult_ data near the top of each `.jtr` file, there is\n+  a line of the form:\n+\n+      elapsed=MILLIS HH:MM:SS.MIL\n+\n+  giving the time in two forms: first as the total number of milliseconds,\n+  and then the same value expressed in hours, minutes, and seconds including\n+  fractions of a second.\n+\n+  This line can easily be extracted by external tools, to aggregate\n+  information about any desired set of tests.\n+\n+jtreg writes a simple summary of test execution times to a file in\n+the [report directory](#report-work-dirs), called `text\/timeStats.txt`.\n+This file contains data to create a histogram giving the number of\n+tests taking a given time to execute, rounded to the nearest second.\n+These values are then followed by the mean and standard deviation\n+of the test execution times.  If there are any tests taking an\n+unexpectedly long time to execute, they can be determined by examining\n+the `elapsed` entries in the `.jtr` files.\n+\n+### How do I find the tests that took longest to run?\n+\n+Using the [`elapsed`](#my-tests-take-a-long-time-to-run-how-do-i-find-where-the-time-goes)\n+time written into each `.jtr` file, you can find the slowest tests with \n+a command such as the following:\n+\n+    grep -r \"^elapsed=\" DIRS | sed -e 's\/\\\\:\/:\/g' | sort -t = -k 2 -n -r\n+\n+where _DIRS_ is one or more directories containing `.jtr` files to be\n+examined. The command scans the input files and directories looking for\n+the `elapsed` lines, and then sorts the lines by the millisecond value\n+in descending order.\n+\n+You can also use the `head` command to limit the output to the desired\n+number of the slowest tests, represented here by _COUNT_:\n+\n+    grep -r \"^elapsed=\" DIRS | sed -e 's\/\\\\:\/:\/g' | sort -t = -k 2 -n -r | head -n COUNT\n+\n+_Note:_ there is also an entry named `totalTime` in the _testresult_ data in\n+each `.jtr` file, giving the execution time in seconds. As such, it is\n+approximately equivalent to the value given in the `elapsed` value, after allowing\n+for the different units (seconds compared to milliseconds) in the two values.\n+\n@@ -1047,1 +1104,1 @@\n-to keep idle VMs available for potential reuse;  \n+to keep idle VMs available for potential reuse;\n@@ -1055,1 +1112,1 @@\n-to keep idle VMs available for potential reuse;  \n+to keep idle VMs available for potential reuse;\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":60,"deletions":3,"binary":false,"changes":63,"status":"modified"}]}