{"files":[{"patch":"@@ -3,1 +3,1 @@\n-pluginVersion = 1.15\n+pluginVersion = 1.16\n@@ -6,1 +6,1 @@\n-<li>Fix NPE when resolving @library tag<\/li>\\\n+<li>CODETOOLS-7903300: Add test library support to jtreg plugin<\/li>\\\n","filename":"plugins\/idea\/gradle.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import com.intellij.openapi.roots.libraries.Library;\n@@ -44,0 +45,1 @@\n+import com.oracle.plugin.jtreg.service.JTRegService;\n@@ -45,0 +47,1 @@\n+import java.io.File;\n@@ -67,0 +70,1 @@\n+        Library jtregLib;\n@@ -90,0 +94,1 @@\n+            jtregLib = null;\n@@ -123,1 +128,2 @@\n-        if (isJtreg || isTestNg) {\n+        boolean isJUnit = JTRegUtils.isJUnitTestData(project, file);\n+        if (isJtreg || isTestNg || isJUnit) {\n@@ -137,0 +143,9 @@\n+                if (isTestNg || isJUnit) {\n+                    String libDir = JTRegService.getInstance(project).getJTRegDir();\n+                    Library library = JTRegUtils.createJTRegLibrary(project, libDir);\n+                    testInfo.jtregLib = library;\n+                    rootModel.addLibrary(library);\n+                } else if (testInfo.jtregLib != null) {\n+                    rootModel.removeLibrary(testInfo.jtregLib);\n+                    testInfo.jtregLib = null;\n+                }\n@@ -145,0 +160,4 @@\n+                if (testInfo.jtregLib != null) {\n+                    rootModel.removeLibrary(testInfo.jtregLib);\n+                    testInfo.jtregLib = null;\n+                }\n@@ -164,1 +183,2 @@\n-        if (!file.exists() || JTRegUtils.isJTRegTestData(project, file) || JTRegUtils.isTestNGTestData(project, file)) {\n+        if (!file.exists() || JTRegUtils.isJTRegTestData(project, file)\n+                || JTRegUtils.isTestNGTestData(project, file) || JTRegUtils.isJUnitTestData(project, file)) {\n@@ -170,0 +190,4 @@\n+                    if (testInfo.jtregLib != null) {\n+                        rootModel.removeLibrary(testInfo.jtregLib);\n+                        testInfo.jtregLib = null;\n+                    }\n@@ -180,0 +204,2 @@\n+        \/\/ Record the library reference count used by the module.\n+        Map<Module, Integer> moduleLibRefCount = new HashMap<>();\n@@ -191,0 +217,1 @@\n+            moduleLibRefCount.clear();\n@@ -237,0 +264,32 @@\n+            \/**\n+             * Add the project library to the module.\n+             *\/\n+            void addLibrary(Library library) {\n+                Integer i = moduleLibRefCount.get(modifiableRootModel.getModule());\n+                if (i == null) {\n+                    LOG.info(\"Adding library in module: \" + modifiableRootModel.getModule().getName());\n+                    ApplicationManager.getApplication().runWriteAction(() -> {\n+                        modifiableRootModel.addLibraryEntry(library);\n+                    });\n+                }\n+                moduleLibRefCount.put(modifiableRootModel.getModule(), i == null ? 1 : i + 1);\n+            }\n+\n+            \/**\n+             * Remove the project library from the module.\n+             *\/\n+            void removeLibrary(Library library) {\n+                Integer i = moduleLibRefCount.get(modifiableRootModel.getModule());\n+                if (i == null) {\n+                    \/\/ skip\n+                } else if (i == 1) {\n+                    LOG.info(\"Removing library in module: \" + modifiableRootModel.getModule().getName());\n+                    Optional<OrderEntry> entry = Arrays.stream(modifiableRootModel.getOrderEntries())\n+                            .filter(orderEntry -> orderEntry.getPresentableName().equals(library.getName())).findFirst();\n+                    entry.ifPresent(orderEntry -> modifiableRootModel.removeOrderEntry(orderEntry));\n+                    moduleLibRefCount.remove(modifiableRootModel.getModule());\n+                } else if (i > 1) {\n+                    moduleLibRefCount.put(modifiableRootModel.getModule(), i - 1);\n+                }\n+            }\n+\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/components\/JTRegFileManagerListener.java","additions":62,"deletions":3,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import com.intellij.lang.ant.config.AntConfiguration;\n@@ -39,0 +38,1 @@\n+import com.intellij.openapi.application.ApplicationManager;\n@@ -56,0 +56,1 @@\n+import java.io.File;\n@@ -136,0 +137,10 @@\n+        ApplicationManager.getApplication().runWriteAction(() -> {\n+            \/\/ Create or update the project library.\n+            String oldDir = service.getJTRegDir();\n+            String newDir = jtregDir.getText().trim();\n+            if (oldDir == null || oldDir.isBlank()) {\n+                JTRegUtils.createJTRegLibrary(project, newDir);\n+            } else {\n+                JTRegUtils.updateJTRegLibrary(project, oldDir, newDir);\n+            }\n+        });\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/service\/ui\/JTRegServiceConfigurable.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import com.intellij.openapi.application.ApplicationManager;\n@@ -31,0 +32,4 @@\n+import com.intellij.openapi.roots.OrderRootType;\n+import com.intellij.openapi.roots.libraries.Library;\n+import com.intellij.openapi.roots.libraries.LibraryTable;\n+import com.intellij.openapi.roots.libraries.LibraryTablesRegistrar;\n@@ -37,0 +42,1 @@\n+import java.io.File;\n@@ -318,0 +324,59 @@\n+    \/**\n+     * Judge whether the given file is a junit test.\n+     *\/\n+    public static boolean isJUnitTestData(Project project, VirtualFile file) {\n+        return isJUnitTestData(PsiUtil.getPsiFile(project, file));\n+    }\n+\n+    \/**\n+     * Judge whether the given file has the junit import statement.\n+     *\/\n+    public static boolean isJUnitTestData(PsiFile file) {\n+        if (file instanceof PsiJavaFile) {\n+            return Stream.of(((PsiJavaFile) file).getImportList().getImportStatements())\n+                    .anyMatch(JTRegUtils::isJunitImport);\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Judge whether the statement is a junit import statement.\n+     *\/\n+    public static boolean isJunitImport(PsiImportStatement importStatement) {\n+        String qualifiedName = importStatement.getQualifiedName();\n+        return qualifiedName != null && qualifiedName.startsWith(\"org.junit\");\n+    }\n+\n+    \/**\n+     * Create (if not existing) and get the jtreg project library.\n+     *\/\n+    public static Library createJTRegLibrary(Project project, String jtregDir) {\n+        return updateJTRegLibrary(project, null, jtregDir);\n+    }\n+\n+    \/**\n+     * Update the jtreg project library. The library would be created if it doesn't exist.\n+     *\/\n+    public static Library updateJTRegLibrary(Project project, String oldJtregDir, String newJtregDir) {\n+        LibraryTable libraryTable = LibraryTablesRegistrar.getInstance().getLibraryTable(project);\n+        final LibraryTable.ModifiableModel tableModel = libraryTable.getModifiableModel();\n+        Library library = tableModel.getLibraryByName(\"jtreg-libs\");\n+        if (library == null) {\n+            library = tableModel.createLibrary(\"jtreg-libs\");\n+        }\n+        final Library.ModifiableModel libraryModel = library.getModifiableModel();\n+        String oldDir = \"file:\/\/\" + oldJtregDir + File.separator + \"lib\";\n+        if (oldJtregDir != null && !oldJtregDir.isBlank() && libraryModel.isJarDirectory(oldDir, OrderRootType.CLASSES)) {\n+            libraryModel.removeRoot(oldDir, OrderRootType.CLASSES);\n+        }\n+        String newDir = \"file:\/\/\" + newJtregDir + File.separator + \"lib\";\n+        if (newJtregDir != null && !newJtregDir.isBlank() && !libraryModel.isJarDirectory(newDir, OrderRootType.CLASSES)) {\n+            libraryModel.addJarDirectory(newDir, true);\n+        }\n+        ApplicationManager.getApplication().runWriteAction(() -> {\n+            libraryModel.commit();\n+            tableModel.commit();\n+        });\n+        return library;\n+    }\n+\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/util\/JTRegUtils.java","additions":66,"deletions":1,"binary":false,"changes":67,"status":"modified"}]}