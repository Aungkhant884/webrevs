{"files":[{"patch":"@@ -28,0 +28,9 @@\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.LauncherSession;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n@@ -32,1 +41,0 @@\n-\n@@ -38,1 +46,3 @@\n-        JUNIT_NO_DRIVER        = \"No JUnit 4 driver (install junit.jar next to jtreg.jar)\";\n+        JUNIT_NO_DRIVER        = \"No JUnit driver (install junit-platform-console-standalone.jar next to jtreg.jar)\";\n+    private static final boolean\n+        JUNIT_RUN_WITH_JUNIT_4 = Flags.get(\"runWithJUnit4\");\n@@ -72,0 +82,8 @@\n+        if (JUNIT_RUN_WITH_JUNIT_4) {\n+            runWithJUnit4(mainClass);\n+        } else {\n+            runWithJUnitPlatform(mainClass);\n+        }\n+    }\n+\n+    private static void runWithJUnit4(Class<?> mainClass) throws Exception {\n@@ -94,0 +112,36 @@\n+    private static void runWithJUnitPlatform(Class<?> mainClass) throws Exception {\n+        \/\/ https:\/\/junit.org\/junit5\/docs\/current\/user-guide\/#launcher-api-execution\n+        Thread.currentThread().setContextClassLoader(mainClass.getClassLoader());\n+        try {\n+\n+            LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n+                .selectors(DiscoverySelectors.selectClass(mainClass))\n+                .build();\n+\n+            SummaryGeneratingListener summaryGeneratingListener = new SummaryGeneratingListener();\n+\n+            try (LauncherSession session = LauncherFactory.openSession()) {\n+                Launcher launcher = session.getLauncher();\n+                launcher.registerTestExecutionListeners(summaryGeneratingListener);\n+                launcher.execute(request);\n+            }\n+\n+            TestExecutionSummary summary = summaryGeneratingListener.getSummary();\n+            if (summary.getTotalFailureCount() > 0) {\n+                StringWriter sw = new StringWriter();\n+                try (PrintWriter pw = new PrintWriter(sw)) {\n+                    pw.println(\"JavaTest Message: JUnit Platform Failure(s): \" + summary.getTotalFailureCount());\n+                    pw.println();\n+                    for (TestExecutionSummary.Failure failure : summary.getFailures()) {\n+                        failure.getException().printStackTrace(pw);\n+                    }\n+                    summary.printTo(pw);\n+                }\n+                System.err.println(sw);\n+                throw new Exception(\"JUnit test failure\");\n+            }\n+\n+        } catch (NoClassDefFoundError ex) {\n+            throw new Exception(JUNIT_NO_DRIVER, ex);\n+        }\n+    }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JUnitRunner.java","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-\t    $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n-\t    $(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n@@ -38,2 +38,2 @@\n-\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n-\t$(GREP) -s 'Test results: passed: 1; failed: 1' $(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t\t\ttrue \"non-zero exit code from JavaTest intentionally ignored\"\n+\t$(GREP) -s 'Test results: passed: 2; failed: 1' $(@:%.ok=%\/jt.log)  > \/dev\/null\n","filename":"test\/junitTrace\/JUnitTrace.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.params.*;\n+import org.junit.jupiter.params.provider.*;\n+\n+\/*\n+ * @test\n+ * @run junit JupiterTests\n+ *\/\n+class JupiterTests {\n+\n+    @BeforeAll\n+    static void initAll() {\n+    }\n+\n+    @BeforeEach\n+    void init() {\n+    }\n+\n+    @Test\n+    void succeedingTest() {\n+    }\n+\n+    @Test\n+    @Disabled(\"for demonstration purposes\")\n+    void skippedTest() {\n+        Assertions.fail(\"test should have been executed\");\n+    }\n+\n+    @Test\n+    void abortedTest() {\n+        Assumptions.assumeTrue(false, \"abort test execution mid-flight\");\n+        Assertions.fail(\"test should have been aborted\");\n+    }\n+\n+    @ParameterizedTest(name = \"[{index}] test(''{0}'')\")\n+    @NullSource\n+    @EmptySource\n+    @ValueSource(strings = {\" \", \"   \", \"\\t\", \"\\n\", \"\\r\\n\"})\n+    void nullEmptyAndBlankStrings(String text) {\n+        Assertions.assertTrue(text == null || text.isBlank());\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+    }\n+\n+    @AfterAll\n+    static void tearDownAll() {\n+    }\n+\n+}\n","filename":"test\/junitTrace\/JupiterTests.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}