{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,3 @@\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.params.*;\n+import org.junit.jupiter.params.provider.*;\n@@ -31,0 +33,19 @@\n+\n+    @BeforeAll\n+    static void initAll() {\n+    }\n+\n+    @BeforeEach\n+    void init() {\n+    }\n+\n+    @Test\n+    void succeedingTest() {\n+    }\n+\n+    @Test\n+    @Disabled(\"for demonstration purposes\")\n+    void skippedTest() {\n+        Assertions.fail(\"test should have been executed\");\n+    }\n+\n@@ -32,2 +53,3 @@\n-    void test() {\n-        System.out.println(\"Pass\");\n+    void abortedTest() {\n+        Assumptions.assumeTrue(false, \"abort test execution mid-flight\");\n+        Assertions.fail(\"test should have been aborted\");\n@@ -35,0 +57,17 @@\n+\n+    @ParameterizedTest(name = \"[{index}] test(''{0}'')\")\n+    @NullSource\n+    @EmptySource\n+    @ValueSource(strings = {\" \", \"   \", \"\\t\", \"\\n\", \"\\r\\n\"})\n+    void nullEmptyAndBlankStrings(String text) {\n+        Assertions.assertTrue(text == null || text.isBlank());\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+    }\n+\n+    @AfterAll\n+    static void tearDownAll() {\n+    }\n+\n","filename":"test\/junitTrace\/JupiterTests.java","additions":43,"deletions":4,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+\n","filename":"test\/junitTrace\/Pass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}