{"files":[{"patch":"@@ -1,196 +0,0 @@\n-Building The Regression Test Harness for the OpenJDK platform: jtreg\n-\n-(This information is also available at http:\/\/openjdk.java.net\/jtreg\/build.html)\n-\n-jtreg depends on a number of external components:\n-\tJT Harness, TestNG, JUnit, AsmTools, Ant, and JCov.\n-\n-The fundamental way to build jtreg is with GNU make, specifying where to find\n-those external components, but a script is also available that will download\n-appropriate copies of those components before building jtreg.\n-\n-Building jtreg with the build-all.sh script\n-\n-This is the recommended way to build jtreg, for those that want a simple,\n-basic way to build jtreg.\n-\n-The script is intended to be run in a Unix-like shell, such as bash on Linux or\n-Mac OS X, or with Cygwin or WSL on Windows. It takes one argument which is the\n-installation of JDK to be used to build jtreg. In addition, Ant must be on your\n-execution path as well as a suitable version of Java to run Ant. The version of\n-JDK must be either JDK 7 or JDK 8.\n-\n-    % cd jtreg-root-directory\n-    % sh make\/build-all.sh JDK-directory\n-\n-The script will create a build sub-directory, download and build dependencies,\n-and finally build jtreg itself. The resulting image will be in\n-build\/images\/jtreg.\n-\n-No environment variables need to be specified to get a standard build of jtreg.\n-However, the following environment variables may be set, for a non-standard\n-build:\n-\n-ASMTOOLS_VERSION, JCOV_VERSION, JTHARNESS_VERSION\n-   These variables may be set to the name of a tag identifying a specific\n-   changeset in the corresponding OpenJDK repository, or to the pseudo-tag \"tip\".\n-\n-MAKE_ARGS\n-   Arguments for the internal invocation of \"make\". The default is to just build\n-   jtreg, but setting this environment variable allows additional targets, such\n-   as test targets, to be run. The explicit target to build jtreg is \"build\";\n-   the target to run some basic sanity tests is \"quick-test\"; and the target\n-   to run all tests is \"test\". You can also use the make \"-j\" option to build\n-   targets in parallel. For example:\n-      MAKE_ARGS=\"-j 4 build quick-test\" sh make\/build-all.sh\n-\n-UNZIP_OPTS, WGET_OPTS\n-   These two variables default to \"-q\", to suppress unnecessary output.\n-   You can set these variables to change the default behavior.\n-\n-Building jtreg with GNU Make\n-\n-The Makefile is in make\/Makefile, and creates deliverables in the build\/\n-directory, similar to OpenJDK. By default, the build file just builds an image\n-for jtreg. You can build jtreg from a Unix-like command shell with the following\n-commands:\n-\n-    % cd <jtreg-root-directory>\n-    % make -C make\n-\n-Dependencies\n-\n-jtreg has a number of build dependencies. These can be set with values on the\n-make command line or with values in make\/Defs.gmk. You can also include the\n-appropriate license files in the jtreg image, by setting the appropriate make\n-variables. These are documented in make\/Defs.gmk\n-\n-JDK 1.8 (or better)\n-    Set JDKHOME to the JDK or equivalent used to build jtreg. It must be\n-    equivalent to JDK 1.8 or later.\n-\n-JT Harness\n-    See https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/JT+Harness.\n-    Set JTHARNESS_HOME to the installed copy of the version of JT Harness to be\n-    used. It should be version 5.0 or better.\n-\n-Ant\n-    See http:\/\/ant.apache.org\/. Set ANTHOME to an installed copy of Ant. It\n-    should be version 1.9.x. or better.\n-\n-AsmTools\n-    See https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/asmtools. \n-    Set ASMTOOLS_HOME to the installed copy of the version of AsmTools to be \n-    used. It should be version 6.0 or better.\n-\n-    Note: Do not confuse this component with ASM bytecode engineering library\n-    available at http:\/\/asm.ow2.org\/\n-\n-JUnit\n-    See http:\/\/junit.org\/. The recommended version is currently JUnit 4.10.\n-\n-TestNG\n-    See http:\/\/testng.org\/. The recommended version is currently 6.9.5.\n-\n-The following dependencies are optional.\n-\n-JCov\n-    See https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/jcov. \n-    Set JCOV_HOME to the installed copy of the version of JCov to be used. \n-    It should be version 2.0 or better.\n-\n-JDK 1.5\n-    This is used when running some of the tests. Set JDK5HOME to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-JDK 1.6\n-    This is used when running some of the tests. Set JDK6HOME to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-JDK 1.7\n-    This is used when running some of the tests. Set JDK7HOME to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-JDK 1.8\n-    This is used when running some of the tests. Set JDK8HOME to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-JDK 9\n-    This is used when running some of the tests. Set JDK9HOME to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-JDK 14\n-    This is used when running some of the tests. Set JDK14HOME to run these\n-    tests. It need not be set if you are just building jtreg.\n-\n-Running jtreg Self-Tests\n-\n-The tests can be invoked with individual make targets, or collectively via the\n-\"test\" target.\n-\n-Some of the tests need to pop up windows while they execute. No interaction with\n-these windows is normally required. Since this can be a problem on a headless\n-server machine, and an annoyance on a personal workstation, the tests will\n-attempt to use VNC to create a dummy X-server for use by the tests while they\n-are running. Various implementations of VNC are available, such as from\n-http:\/\/www.realvnc.com\/. Using VNC is optional; it is not required in order to\n-run the tests.\n-\n-By default, VNC will be used if vncserver is found on your execution path, or\n-if VNC_HOME points to an installed copy of VNC. To explicitly disable the use of\n-VNC, set the VNC environment variable to one of false, off, no, or 0. Unless\n-explicitly disabled, the tests will check the following:\n-\n-*   You must have a password set in $HOME\/.vnc\/passwd. This is the standard\n-    location used by the vncserver command.\n-*   If you set the environment variable VNC_HOME, it will be prepended to your\n-    execution path to find vncserver.\n-*   vncserver must be on your execution path, after VNC_HOME has been added,\n-    if set.\n-\n-If the tests find any issue with using VNC, it will not be used. If VNC is used\n-to create a dummy X server, the server will be terminated when the test is\n-complete.\n-\n-The logic for using VNC is encapsulated within the script make\/display.sh.\n-\n-Building jtreg with Ant\n-\n-It is possible to build jtreg with Ant, but this is primarily intended as a\n-convenience while working on the jtreg source code. If you are building jtreg\n-to run OpenJDK tests, it is recommended that you build jtreg using the Makefile,\n-perhaps via the build-all.sh wrapper script.\n-\n-The build file is in make\/build.xml; it creates intermediate files in the build\/\n-directory and deliverables in the dist\/ directory. By default, the build file\n-just builds jtreg, but does not run any tests. You can build jtreg from a\n-Unix-like command shell with the following commands:\n-\n-    % cd jtreg-root-directory\n-    % ant -f make\/build.xml\n-\n-You can also use this build file when creating a NetBeans free form project with\n-an existing build file.\n-\n-Dependencies\n-\n-Some of the tasks that are used are listed as \"Optional Tasks\" in the Ant\n-manual. You may need to make sure that these tasks are available for use by Ant.\n-For example, on Ubuntu Linux these tasks are in the ant-optional package.\n-\n-Running Tests\n-\n-Some of the tests can be invoked with individual targets beginning\n-\"-jtreg-test-\", or collectively via the \"jtreg-test\" target. (The use of\n-\"jtreg-test\" rather than \"test\" is to protect against interactions with JUnit in\n-older versions of NetBeans.)\n-\n-Using the IntelliJ IDE\n-\n-The jtreg repo also contains a plugin for the IntelliJ IDE.\n-This is a convenience plugin which adds jtreg capabilities to the IntelliJ IDE. \n-With this plugin, OpenJDK developers can write, run, and debug jtreg tests \n-without leaving their IDE environment.  For more details, see the file \n-`plugins\/idea\/README.md` in this repo.\n-\n-\n","filename":"README-v5","additions":0,"deletions":196,"binary":false,"changes":196,"status":"deleted"},{"patch":"@@ -1,317 +0,0 @@\n-#!\/bin\/bash\n-\n-#\n-# Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-set -e\n-set -u\n-\n-if [ \"$#\" -ne 1 ]; then\n-    echo \"Usage: $0 \/path\/to\/jdk\/1.8\/image\" >&2\n-    exit 1\n-fi\n-\n-if [ ! -d $1 ]; then\n-    echo \"Error: '$1' is not a directory\" >&2\n-    exit 1\n-fi\n-\n-if [ ! -x $1\/bin\/java ]; then\n-    echo \"Error: Could not find an executable binary at '$1\/bin\/java'\" >&2\n-    exit 1\n-fi\n-\n-JAVA_VERSION=$($1\/bin\/java -version 2>&1 | grep \"^.* version \\\".*\\\"$\" | sed 's\/.*\\\"\\(.*\\)\\\".*\/\\1\/')\n-\n-if case ${JAVA_VERSION} in 1.8*) false ;; *) true; esac; then\n-    echo \"Error: Expected a path to JDK with version 1.8, got version ${JAVA_VERSION}\" >&2\n-    exit 1\n-fi\n-\n-case `uname` in CYGWIN*) CYGWIN=1 ;; *) CYGWIN=0 ;; esac\n-\n-native_path() {\n-    if [ $CYGWIN -eq 1 ]; then echo `cygpath -w $1`; else echo $1; fi\n-}\n-\n-mixed_path() {\n-    if [ $CYGWIN -eq 1 ]; then echo `cygpath -m $1`; else echo $1; fi\n-}\n-\n-get_scm_type() {\n-    if [ -d .hg ]; then\n-        echo \"HG\"\n-    elif [ -d .git ]; then\n-        echo \"GIT\"\n-    else \n-        echo \"Error: unrecognized repository, it must be Git or Mercurial\" >&2\n-        exit 1\n-    fi\n-}\n-\n-SCM_TYPE=`get_scm_type`\n-\n-get_root() {\n-   case $SCM_TYPE in\n-       HG)  hg root ;;\n-       GIT) git rev-parse --show-toplevel ;;\n-       *) echo \"Error: unknown SCM\" >&2 ; exit 1 ;;\n-   esac\n-}\n-\n-get_tag_info() {\n-   case $SCM_TYPE in\n-       HG)  hg tags | grep jtreg | head -1 ;;\n-       GIT) git describe ;;\n-       *) echo \"Error: unknown SCM\" >&2 ; exit 1 ;;\n-   esac\n-}\n-\n-export JAVA_HOME=$1\n-export PATH=\"$JAVA_HOME:$PATH\"\n-\n-if [ -n \"`which sha1sum`\" ]; then\n-    SHASUM=sha1sum;\n-elif [ -n \"`which shasum`\" ]; then\n-    SHASUM=\"shasum -a 1\"\n-else\n-    echo \"Error: can't find shasum or sha1sum\" >&2\n-    exit 1\n-fi\n-\n-UNZIP=unzip\n-UNZIP_OPTS=\"${UNZIP_OPTS:--q} -u\"\n-WGET=wget\n-WGET_OPTS=${WGET_OPTS:--q}\n-\n-\n-ROOT=`get_root`\n-\n-BUILD_DIR=${BUILD_DIR:-${ROOT}\/build}\n-\n-if [ \"${SKIP_WGET:-}\" = \"\" -a -d ${BUILD_DIR} ]; then\n-    echo \"Error: Build directory '${BUILD_DIR}' already exists\" >&2\n-    exit 1\n-fi\n-\n-mkdir -p ${BUILD_DIR}\n-\n-WGet() {\n-    if [ \"${SKIP_WGET:-}\" != \"\" -a -r $2 ]; then\n-        echo \"Skipping download of $1...\"\n-    else\n-        ${WGET} ${WGET_OPTS} \"$1\" -O \"$2\"\n-    fi\n-}\n-\n-# DEPENDENCIES\n-##############\n-\n-APACHE_ANT_URL=https:\/\/archive.apache.org\/dist\/ant\/binaries\n-MAVEN_REPO_URL=https:\/\/repo1.maven.org\/maven2\n-\n-CODE_TOOLS_URL=\"${CODE_TOOLS_URL:-https:\/\/git.openjdk.java.net}\"\n-# The following are Mercurial tags for the corresponding OpenJDK Code Tools repo\n-ASMTOOLS_VERSION=${ASMTOOLS_VERSION:-7.0-b08} # early access for 7.0\n-JTHARNESS_VERSION=${JTHARNESS_VERSION:-jt6.0-b11} # early access for 6.0\n-JCOV_VERSION=${JCOV_VERSION:-jcov3.0-b05} # jcov3.0, ASM 6.2\n-\n-# ANT\n-#####\n-\n-ANT_DIR=${BUILD_DIR}\/ant\n-mkdir -p ${ANT_DIR}\n-\n-ANT_VERSION=${ANT_VERSION:-apache-ant-1.9.4}\n-ANT_ZIP=${ANT_DIR}\/${ANT_VERSION}.zip\n-WGet ${APACHE_ANT_URL}\/${ANT_VERSION}-bin.zip ${ANT_ZIP}\n-echo \"ec57a35eb869a307abdfef8712f3688fff70887f  ${ANT_ZIP}\" | ${SHASUM} --check -\n-${UNZIP} ${UNZIP_OPTS} -d ${ANT_DIR} ${ANT_ZIP}\n-\n-ANT_JAR=${ANT_DIR}\/${ANT_VERSION}\/lib\/ant.jar\n-ANT=${ANT_DIR}\/${ANT_VERSION}\/bin\/ant\n-\n-# ASMTOOLS\n-##########\n-\n-ASMTOOLS_BUILD_DIR=${BUILD_DIR}\/asmtools\n-mkdir -p ${ASMTOOLS_BUILD_DIR}\n-\n-# Build asmtools\n-ASMTOOLS_SRC_ZIP=${ASMTOOLS_BUILD_DIR}\/source.zip\n-WGet ${CODE_TOOLS_URL}\/asmtools\/archive\/${ASMTOOLS_VERSION}.zip ${ASMTOOLS_SRC_ZIP}\n-${UNZIP} ${UNZIP_OPTS} -d ${ASMTOOLS_BUILD_DIR} ${ASMTOOLS_SRC_ZIP}\n-\n-if [ \"${ASMTOOLS_VERSION}\" = \"tip\" ]; then\n-    ASMTOOLS_VERSION=`cd ${ASMTOOLS_BUILD_DIR} ; ls -d asmtools-* | sed -e 's\/asmtools-\/\/'`\n-fi\n-\n-ASMTOOLS_SRC=${ASMTOOLS_BUILD_DIR}\/asmtools-${ASMTOOLS_VERSION}\n-ASMTOOLS_DIST=${ASMTOOLS_BUILD_DIR}\/build\n-${ANT} -DBUILD_DIR=`native_path ${ASMTOOLS_DIST}` -f `native_path ${ASMTOOLS_SRC}\/build\/build.xml`\n-ASMTOOLS_JAR=${ASMTOOLS_DIST}\/binaries\/lib\/asmtools.jar\n-ASMTOOLS_LICENSE=${ASMTOOLS_SRC}\/LICENSE\n-\n-# JAVATEST\n-##########\n-\n-JTHARNESS_BUILD_DIR=${BUILD_DIR}\/jtharness\n-mkdir -p ${JTHARNESS_BUILD_DIR}\n-\n-# Build jtharness\n-JTHARNESS_SRC_ZIP=${JTHARNESS_BUILD_DIR}\/source.zip\n-WGet ${CODE_TOOLS_URL}\/jtharness\/archive\/${JTHARNESS_VERSION}.zip ${JTHARNESS_SRC_ZIP}\n-${UNZIP} ${UNZIP_OPTS} -d ${JTHARNESS_BUILD_DIR} ${JTHARNESS_SRC_ZIP}\n-\n-if [ \"${JTHARNESS_VERSION}\" = \"tip\" ]; then\n-    JTHARNESS_VERSION=`cd ${JTHARNESS_BUILD_DIR} ; ls -d jtharness-* | sed -e 's\/jtharness-\/\/'`\n-fi\n-\n-JTHARNESS_SRC=${JTHARNESS_BUILD_DIR}\/jtharness-${JTHARNESS_VERSION}\n-JTHARNESS_DIST=${JTHARNESS_BUILD_DIR}\/build\n-${ANT} -DBUILD_DIR=`native_path ${JTHARNESS_DIST}` -f `native_path ${JTHARNESS_SRC}\/build\/build.xml`\n-\n-JAVATEST_JAR=${JTHARNESS_DIST}\/binaries\/lib\/javatest.jar\n-JTHARNESS_LICENSE=${JTHARNESS_SRC}\/legal\/license.txt\n-JTHARNESS_COPYRIGHT=${JTHARNESS_SRC}\/legal\/copyright.txt\n-\n-# JCOV\n-######\n-\n-JCOV_BUILD_DIR=${BUILD_DIR}\/jcov\n-mkdir -p ${JCOV_BUILD_DIR}\n-\n-# Get jcov dependencies\n-JCOV_DEPS_DIR=${JCOV_BUILD_DIR}\/deps\n-mkdir -p ${JCOV_DEPS_DIR}\n-\n-ASM_JAR=${JCOV_DEPS_DIR}\/asm-6.2.jar\n-ASM_JAR_CHECKSUM='1b6c4ff09ce03f3052429139c2a68e295cae6604'\n-WGet ${MAVEN_REPO_URL}\/org\/ow2\/asm\/asm\/6.2\/asm-6.2.jar ${ASM_JAR}\n-echo \"${ASM_JAR_CHECKSUM}  ${ASM_JAR}\" | ${SHASUM} --check -\n-\n-ASM_TREE_JAR=${JCOV_DEPS_DIR}\/asm-tree-6.2.jar\n-ASM_TREE_JAR_CHECKSUM='61570e046111559f38d4e0e580c005f75988c0a6'\n-WGet ${MAVEN_REPO_URL}\/org\/ow2\/asm\/asm-tree\/6.2\/asm-tree-6.2.jar ${ASM_TREE_JAR}\n-echo \"${ASM_TREE_JAR_CHECKSUM}  ${ASM_TREE_JAR}\" | ${SHASUM} --check -\n-\n-ASM_UTIL_JAR=${JCOV_DEPS_DIR}\/asm-utils-6.2.jar\n-ASM_UTIL_JAR_CHECKSUM='a9690730f92cc79eeadc20e400ebb41eccce10b1'\n-WGet ${MAVEN_REPO_URL}\/org\/ow2\/asm\/asm-util\/6.2\/asm-util-6.2.jar ${ASM_UTIL_JAR}\n-echo \"${ASM_UTIL_JAR_CHECKSUM}  ${ASM_UTIL_JAR}\" | ${SHASUM} --check -\n-\n-# Build jcov\n-JCOV_SRC_ZIP=${JCOV_BUILD_DIR}\/source.zip\n-WGet ${CODE_TOOLS_URL}\/jcov\/archive\/${JCOV_VERSION}.zip ${JCOV_SRC_ZIP}\n-${UNZIP} ${UNZIP_OPTS} -d ${JCOV_BUILD_DIR} ${JCOV_SRC_ZIP}\n-\n-if [ \"${JCOV_VERSION}\" = \"tip\" ]; then\n-    JCOV_VERSION=`cd ${JCOV_BUILD_DIR} ; ls -d jcov-* | sed -e 's\/jcov-\/\/'`\n-fi\n-\n-JCOV_SRC=${JCOV_BUILD_DIR}\/jcov-${JCOV_VERSION}\n-JCOV_DIST=${JCOV_BUILD_DIR}\/build\n-( cd ${JCOV_SRC}\/build\n-${ANT} -Dresult.dir=`native_path ${JCOV_DIST}`   \\\n-    -Dasm.jar=`native_path ${ASM_JAR}`           \\\n-    -Dasm.checksum=${ASM_JAR_CHECKSUM}           \\\n-    -Dasm.tree.jar=`native_path ${ASM_TREE_JAR}` \\\n-    -Dasm.tree.checksum=${ASM_TREE_JAR_CHECKSUM} \\\n-    -Dasm.util.jar=`native_path ${ASM_UTIL_JAR}` \\\n-    -Dasm.util.checksum=${ASM_UTIL_JAR_CHECKSUM} \\\n-    -Djavatestjar=`native_path ${JAVATEST_JAR}`  \\\n-    -Dverify.strict=                             \\\n-    -f `native_path ${JCOV_SRC}\/build\/build.xml`\n-)\n-\n-JCOV_JAR=${JCOV_DIST}\/jcov_3.0\/jcov.jar\n-JCOV_NETWORK_SAVER_JAR=${JCOV_DIST}\/jcov_3.0\/jcov_network_saver.jar\n-JCOV_LICENSE=${JCOV_SRC}\/LICENSE\n-\n-# JTREG\n-#######\n-\n-# Get jtreg dependencies\n-JTREG_DEPS_DIR=${BUILD_DIR}\/deps\n-mkdir -p ${JTREG_DEPS_DIR}\n-\n-## JUnit\n-JUNIT_DEPS_DIR=${JTREG_DEPS_DIR}\/junit\n-mkdir -p ${JUNIT_DEPS_DIR}\n-\n-JUNIT_JAR=${JUNIT_DEPS_DIR}\/junit-4.10.jar\n-WGet ${MAVEN_REPO_URL}\/junit\/junit\/4.10\/junit-4.10.jar ${JUNIT_JAR}\n-echo \"e4f1766ce7404a08f45d859fb9c226fc9e41a861  ${JUNIT_JAR}\" | ${SHASUM} --check -\n-\n-${UNZIP} ${UNZIP_OPTS} ${JUNIT_JAR} LICENSE.txt -d ${JUNIT_DEPS_DIR}\n-JUNIT_LICENSE=${JUNIT_DEPS_DIR}\/LICENSE.txt\n-\n-## TestNG\n-TESTNG_DEPS_DIR=${JTREG_DEPS_DIR}\/testng\n-mkdir -p ${TESTNG_DEPS_DIR}\n-\n-TESTNG_JAR=${TESTNG_DEPS_DIR}\/testng-6.9.5.jar\n-WGet ${MAVEN_REPO_URL}\/org\/testng\/testng\/6.9.5\/testng-6.9.5.jar ${TESTNG_JAR}\n-echo \"5d12ea207fc47c3f341a3f8ecc88a3eac396a777  ${TESTNG_JAR}\" | ${SHASUM} --check -\n-\n-TESTNG_LICENSE=${TESTNG_DEPS_DIR}\/LICENSE.txt\n-WGet https:\/\/raw.githubusercontent.com\/cbeust\/testng\/testng-6.9.5\/LICENSE.txt ${TESTNG_LICENSE}\n-\n-JCOMMANDER_JAR=${TESTNG_DEPS_DIR}\/jcommander-1.72.jar\n-WGet ${MAVEN_REPO_URL}\/com\/beust\/jcommander\/1.72\/jcommander-1.72.jar ${JCOMMANDER_JAR}\n-echo \"6375e521c1e11d6563d4f25a07ce124ccf8cd171  ${JCOMMANDER_JAR}\" | ${SHASUM} --check -\n-\n-\n-## Set version and build numbers to the latest tagged version by default\n-TAG_INFO=`get_tag_info`\n-if [ -z ${BUILD_NUMBER:-} ]; then\n-    BUILD_NUMBER=`echo $TAG_INFO | sed 's\/jtreg\\([0-9]\\.[0-9]\\)-\\(b[0-9]*\\).*\/\\2\/'`\n-fi\n-if [ -z ${BUILD_VERSION:-} ]; then\n-    BUILD_VERSION=`echo $TAG_INFO | sed 's\/jtreg\\([0-9]\\.[0-9]\\)-\\(b[0-9]*\\).*\/\\1\/'`\n-fi\n-\n-# Build jtreg\n-cd ${ROOT}\/make\n-make JUNIT_JAR=`mixed_path ${JUNIT_JAR}`              \\\n-     JUNIT_LICENSE=${JUNIT_LICENSE}                   \\\n-     TESTNG_JAR=`mixed_path ${TESTNG_JAR}`            \\\n-     TESTNG_LICENSE=${TESTNG_LICENSE}                 \\\n-     JCOMMANDER_JAR=${JCOMMANDER_JAR}                 \\\n-     ANT=${ANT}                                       \\\n-     ANT_JAR=`mixed_path ${ANT_JAR}`                  \\\n-     JCOV_JAR=${JCOV_JAR}                             \\\n-     JCOV_LICENSE=${JCOV_LICENSE}                     \\\n-     JCOV_NETWORK_SAVER_JAR=${JCOV_NETWORK_SAVER_JAR} \\\n-     JAVATEST_JAR=`mixed_path ${JAVATEST_JAR}`        \\\n-     JTHARNESS_LICENSE=${JTHARNESS_LICENSE}           \\\n-     JTHARNESS_COPYRIGHT=${JTHARNESS_COPYRIGHT}       \\\n-     ASMTOOLS_JAR=${ASMTOOLS_JAR}                     \\\n-     ASMTOOLS_LICENSE=${ASMTOOLS_LICENSE}             \\\n-     BUILD_VERSION=${BUILD_VERSION}                   \\\n-     BUILD_MILESTONE=${BUILD_MILESTONE:=dev}          \\\n-     BUILD_NUMBER=${BUILD_NUMBER}                     \\\n-     JDKHOME=$JAVA_HOME                               \\\n-     ${MAKE_ARGS:-}\n","filename":"make\/build-all.sh","additions":0,"deletions":317,"binary":false,"changes":317,"status":"deleted"}]}