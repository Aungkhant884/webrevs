{"files":[{"patch":"@@ -387,3 +387,7 @@\n-        HelpTree.Node n = new HelpTree.Node(i18n, \"help.tests\",\n-                new String[] { \"at\", \"groups\" });\n-        commandHelpTree.addNode(n);\n+        HelpTree.Node testsNode = new HelpTree.Node(i18n, \"help.tests\",\n+                \/\/new String[] { \"at\", \"groups\", \"summary\" },\n+                new HelpTree.Node(i18n, \"help.tests\", \"at\"),\n+                new HelpTree.Node(i18n, \"help.tests\", \"groups\"),\n+                new HelpTree.Node(i18n, \"help.tests.summary\",\n+                        new String[] { \"directory\", \"file\", \"group\", \"at-file\" }));\n+        commandHelpTree.addNode(testsNode);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Help.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -353,0 +353,25 @@\n+help.tests.summary.name=Summary\n+help.tests.summary.desc=\\\n+    The following kinds of arguments can be used to specify tests to be executed.\\\n+    In these examples, square brackets are used to indicate optional parts.\n+\n+help.tests.summary.at-file.name=@file\n+help.tests.summary.at-file.desc=\\\n+    A file containing values to be treated as if on the command-line.\n+\n+help.tests.summary.group.name=[path]:group-name\n+help.tests.summary.group.desc=\\\n+    A group of tests, as defined in the TEST.groups file in the testsuite root \\\n+    directory.  If given, path specifies the testsuite root directory. If not \\\n+    given, it defaults to the one enclosing the current directory.\n+\n+help.tests.summary.directory.name=directory\n+help.tests.summary.directory.desc=\\\n+    All tests found in and under the given directory.\n+\n+help.tests.summary.file.name=file[#id]\n+help.tests.summary.file.desc=\\\n+    Either all tests in the given file if no id is given, or the specified \\\n+    test if an id is given. A file contains multiple tests if there are \\\n+    multiple test descriptions, in separate comment blocks.\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -438,2 +438,4 @@\n-that file by appending `#id`_N_ to the file path, where N is the number of\n-the test within the file, where `0` identifies the first test.\n+that file by appending `#`_ID_ to the file path, where _ID_ is either defined\n+in the test itself after the `@test` tag, or the string `id`_N_  if no id is \n+explicitly defined, where N is the number of the test within the file, \n+and where `0` identifies the first test. \n@@ -441,1 +443,1 @@\n-If you wish to specify a long list of files, you can put the list in a file\n+If you wish to specify a long list of arguments, you can put the list in a file\n@@ -447,1 +449,15 @@\n-You may also refine the set of tests to be run in various ways:\n+To summarise, you can use the following to specify tests to be run:\n+\n+| Argument                | Description                                         |\n+|-------------------------|-----------------------------------------------------|\n+| _directory_             | All tests found in files in and under the directory |\n+| _file[#id]_             | All tests in a file, or a specific test in a file   |\n+| _[directory]_`:`_group_ | All tests in a group defined for a testsuite        |   \n+| `@`_file_               | Expand arguments in a file                          |\n+\n+\n+You can further refine the set of tests to be run in various ways.\n+\n+### How do I refine the set of sets to run?\n+\n+You can refine the set of tests to be run in various ways:\n@@ -1082,0 +1098,11 @@\n+### My system is unusable while I run tests. How do I fix that?\n+\n+* If you are using the `-conc` or `-concurrency` option to run tests in parallel,\n+  try reducing the number of tests to be run at the same time.\n+* Use VM options, like `-Xmx`, to limit the amount of memory available to each process.\n+* Try reducing the priority used to run `jtreg` and the processes it runs. \n+  On POSIX systems, you can use the `nice` command to control the priority of a process.\n+\n+The JDK [`make test`](#how-do-i-run-jdk-jtreg-tests-using-make-test-and-the-jdk-makefile-infrastructure)\n+framework automatically uses these techniques to reduce the load on a system.  \n+\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"}]}