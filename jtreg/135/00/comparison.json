{"files":[{"patch":"@@ -144,5 +144,3 @@\n-        } catch (TestSuite.Fault e) {\n-            throw new Fault(i18n, \"main.cantOpenFile\", f, e);\n-        } catch (WorkDirectory.Fault e) {\n-            throw new Fault(i18n, \"main.cantOpenFile\", f, e);\n-        } catch (IOException e) {\n+        } catch (TestSuite.Fault\n+                 | WorkDirectory.Fault\n+                 | IOException e) {\n@@ -161,1 +159,1 @@\n-    private static I18NResourceBundle i18n = I18NResourceBundle.getBundleForClass(Diff.class);\n+    private static final I18NResourceBundle i18n = I18NResourceBundle.getBundleForClass(Diff.class);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/Diff.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/diff\/HTMLWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -154,9 +154,5 @@\n-        } catch (ClassNotFoundException e) {\n-            return null;\n-        } catch (IllegalAccessException e) {\n-            return null;\n-        } catch (IllegalArgumentException e) {\n-            return null;\n-        } catch (NoSuchMethodException e) {\n-            return null;\n-        } catch (InvocationTargetException e) {\n+        } catch (ClassNotFoundException\n+                 | IllegalAccessException\n+                 | IllegalArgumentException\n+                 | NoSuchMethodException\n+                 | InvocationTargetException e) {\n@@ -197,9 +193,5 @@\n-        } catch (ClassNotFoundException e) {\n-            return null;\n-        } catch (IllegalAccessException e) {\n-            return null;\n-        } catch (IllegalArgumentException e) {\n-            return null;\n-        } catch (NoSuchMethodException e) {\n-            return null;\n-        } catch (InvocationTargetException e) {\n+        } catch (ClassNotFoundException\n+                 | InvocationTargetException\n+                 | NoSuchMethodException\n+                 | IllegalArgumentException\n+                 | IllegalAccessException e) {\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/GetJDKProperties.java","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Arrays;\n@@ -239,1 +240,1 @@\n-                    printJDKInfo(msgPW, \"compile JDK\", getCompileJDK(), Collections.<String>emptyList());\n+                    printJDKInfo(msgPW, \"compile JDK\", getCompileJDK(), Collections.emptyList());\n@@ -423,3 +424,1 @@\n-            List<String> args = new ArrayList<>();\n-            for (int i = 2; i < tokens.length; i++)\n-                args.add(tokens[i]);\n+            List<String> args = new ArrayList<>(Arrays.asList(tokens).subList(2, tokens.length));\n@@ -463,1 +462,1 @@\n-            fast = fast && (arg.indexOf(\"${\") == -1);\n+            fast = fast && (!arg.contains(\"${\"));\n@@ -475,1 +474,1 @@\n-    private static final Pattern namePattern = Pattern.compile(\"\\\\$\\\\{([A-Za-z0-9._]+)\\\\}\");\n+    private static final Pattern namePattern = Pattern.compile(\"\\\\$\\\\{([A-Za-z0-9._]+)}\");\n@@ -480,1 +479,1 @@\n-        StringBuffer sb = null;\n+        StringBuilder sb = null;\n@@ -488,1 +487,1 @@\n-                sb = new StringBuffer();\n+                sb = new StringBuilder();\n@@ -495,1 +494,1 @@\n-            sb.append(arg.substring(pos, m.start()));\n+            sb.append(arg, pos, m.start());\n@@ -552,2 +551,2 @@\n-            } catch (TestEnvironment.Fault e) {\n-            } catch (NumberFormatException e) {\n+            } catch (TestEnvironment.Fault\n+                     | NumberFormatException e) {\n@@ -612,1 +611,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n@@ -1255,2 +1254,1 @@\n-        Map<String, String> envVars = new HashMap<>();\n-        envVars.putAll(getEnvVars());\n+        Map<String, String> envVars = new HashMap<>(getEnvVars());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}