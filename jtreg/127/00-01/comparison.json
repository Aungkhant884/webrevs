{"files":[{"patch":"@@ -133,4 +133,0 @@\n-                \/\/ capture messages printed to standard streams by default\n-                \/\/ converting them into test report entries\n-                .configurationParameter(LauncherConstants.CAPTURE_STDOUT_PROPERTY_NAME, \"true\")\n-                .configurationParameter(LauncherConstants.CAPTURE_STDERR_PROPERTY_NAME, \"true\")\n@@ -205,0 +201,32 @@\n+        @Override\n+        public void executionSkipped(TestIdentifier identifier, String reason) {\n+            if (identifier.isTest()) {\n+                String status = \"SKIPPED\";\n+                String source = toSourceString(identifier);\n+                String name = identifier.getDisplayName();\n+                lock.lock();\n+                try {\n+                    printer.printf(\"%-10s %s '%s' %s%n\", status, source, name, reason);\n+                }\n+                finally {\n+                    lock.unlock();\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void executionStarted(TestIdentifier identifier) {\n+            if (identifier.isTest()) {\n+                String status = \"STARTED\";\n+                String source = toSourceString(identifier);\n+                String name = identifier.getDisplayName();\n+                lock.lock();\n+                try {\n+                    printer.printf(\"%-10s %s '%s'%n\", status, source, name);\n+                }\n+                finally {\n+                    lock.unlock();\n+                }\n+            }\n+        }\n+\n@@ -210,1 +238,0 @@\n-                    \/\/ always print a status line for a finished test\n@@ -212,7 +239,0 @@\n-                    String source = toSourceString(identifier);\n-                    String name = identifier.getDisplayName();\n-                    printer.printf(\"%10s: %s '%s'%n\", status, source, name);\n-                    \/\/ that's all for successful a test\n-                    if (status == TestExecutionResult.Status.SUCCESSFUL) {\n-                        return;\n-                    }\n@@ -220,2 +240,1 @@\n-                        result.getThrowable().ifPresent(printer::println);\n-                        return;\n+                        result.getThrowable().ifPresent(printer::println); \/\/ not the entire stack trace\n@@ -223,1 +242,6 @@\n-                    result.getThrowable().ifPresent(throwable -> throwable.printStackTrace(printer));\n+                    if (status == TestExecutionResult.Status.FAILED) {\n+                        result.getThrowable().ifPresent(throwable -> throwable.printStackTrace(printer));\n+                    }\n+                    String source = toSourceString(identifier);\n+                    String name = identifier.getDisplayName();\n+                    printer.printf(\"%-10s %s '%s'%n\", status, source, name);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JUnitRunner.java","additions":39,"deletions":15,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        Assertions.fail(\"test should have been executed\");\n+        Assertions.fail(\"test should NOT be executed\");\n@@ -61,1 +61,1 @@\n-    @ValueSource(strings = {\" \", \"   \", \"\\t\", \"\\n\", \"\\r\\n\"})\n+    @ValueSource(strings = {\" \", \"   \", \"\\t\"})\n@@ -66,0 +66,9 @@\n+    @Disabled\n+    @ParameterizedTest\n+    @ValueSource(ints = {0, 1, 2})\n+    void test(int i) {\n+        System.err.println(\"i=\" + i);\n+        Assertions.assertNotEquals(1, i);\n+        System.err.println(i + \" is not 1\");\n+    }\n+\n","filename":"test\/junitTrace\/JupiterTests.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}