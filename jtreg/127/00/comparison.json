{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.TestSource;\n@@ -29,1 +31,3 @@\n-import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+import org.junit.platform.launcher.LauncherConstants;\n@@ -32,0 +36,3 @@\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.core.LauncherConfig;\n@@ -37,0 +44,1 @@\n+import java.io.PrintStream;\n@@ -40,0 +48,3 @@\n+import java.util.Optional;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -117,1 +128,0 @@\n-            \/\/ if test.query is set, treat it as a method name to be executed\n@@ -119,0 +129,1 @@\n+                \/\/ if test.query is set, treat it as a method name to be executed\n@@ -122,0 +133,4 @@\n+                \/\/ capture messages printed to standard streams by default\n+                \/\/ converting them into test report entries\n+                .configurationParameter(LauncherConstants.CAPTURE_STDOUT_PROPERTY_NAME, \"true\")\n+                .configurationParameter(LauncherConstants.CAPTURE_STDERR_PROPERTY_NAME, \"true\")\n@@ -126,4 +141,7 @@\n-            try (LauncherSession session = LauncherFactory.openSession()) {\n-                Launcher launcher = session.getLauncher();\n-                launcher.registerTestExecutionListeners(summaryGeneratingListener);\n-                launcher.execute(request);\n+            LauncherConfig launcherConfig = LauncherConfig.builder()\n+                .addTestExecutionListeners(new PrintingListener(System.err))\n+                .addTestExecutionListeners(summaryGeneratingListener)\n+                .build();\n+\n+            try (LauncherSession session = LauncherFactory.openSession(launcherConfig)) {\n+                session.getLauncher().execute(request);\n@@ -133,9 +151,1 @@\n-            StringWriter sw = new StringWriter();\n-            try (PrintWriter pw = new PrintWriter(sw)) {\n-                if (summary.getTotalFailureCount() > 0) {\n-                    pw.println(\"JavaTest Message: JUnit Platform Failure(s): \" + summary.getTotalFailureCount());\n-                    pw.println();\n-                    for (TestExecutionSummary.Failure failure : summary.getFailures()) {\n-                        failure.getException().printStackTrace(pw);\n-                    }\n-                }\n+            System.err.println(summarize(summary));\n@@ -143,24 +153,2 @@\n-                \/\/ The format of the following output is assumed in the JUnit SummaryReporter\n-                pw.println();\n-                pw.print(\"[ JUnit Containers: \");\n-                pw.print(\"found \" + summary.getContainersFoundCount());\n-                pw.print(\", started \" + summary.getContainersStartedCount());\n-                pw.print(\", succeeded \" + summary.getContainersSucceededCount());\n-                pw.print(\", failed \" + summary.getContainersFailedCount());\n-                pw.print(\", aborted \" + summary.getContainersAbortedCount());\n-                pw.print(\", skipped \" + summary.getContainersSkippedCount());\n-                pw.println(\"]\");\n-                pw.print(\"[ JUnit Tests: \");\n-                pw.print(\"found \" + summary.getTestsFoundCount());\n-                pw.print(\", started \" + summary.getTestsStartedCount());\n-                pw.print(\", succeeded \" + summary.getTestsSucceededCount());\n-                pw.print(\", failed \" + summary.getTestsFailedCount());\n-                pw.print(\", aborted \" + summary.getTestsAbortedCount());\n-                pw.print(\", skipped \" + summary.getTestsSkippedCount());\n-                pw.println(\"]\");\n-\n-                System.err.println(sw);\n-\n-                if (summary.getTotalFailureCount() > 0) {\n-                    throw new Exception(\"JUnit test failure\");\n-                }\n+            if (summary.getTotalFailureCount() > 0) {\n+                throw new Exception(\"JUnit test failure\");\n@@ -173,0 +161,93 @@\n+\n+    static String summarize(TestExecutionSummary summary) {\n+        StringWriter sw = new StringWriter();\n+        try (PrintWriter pw = new PrintWriter(sw)) {\n+            if (summary.getTotalFailureCount() > 0) {\n+                pw.println(\"JavaTest Message: JUnit Platform Failure(s): \" + summary.getTotalFailureCount());\n+            }\n+\n+            \/\/ The format of the following output is assumed in the JUnit SummaryReporter\n+            pw.println();\n+            pw.print(\"[ JUnit Containers: \");\n+            pw.print(\"found \" + summary.getContainersFoundCount());\n+            pw.print(\", started \" + summary.getContainersStartedCount());\n+            pw.print(\", succeeded \" + summary.getContainersSucceededCount());\n+            pw.print(\", failed \" + summary.getContainersFailedCount());\n+            pw.print(\", aborted \" + summary.getContainersAbortedCount());\n+            pw.print(\", skipped \" + summary.getContainersSkippedCount());\n+            pw.println(\"]\");\n+            pw.print(\"[ JUnit Tests: \");\n+            pw.print(\"found \" + summary.getTestsFoundCount());\n+            pw.print(\", started \" + summary.getTestsStartedCount());\n+            pw.print(\", succeeded \" + summary.getTestsSucceededCount());\n+            pw.print(\", failed \" + summary.getTestsFailedCount());\n+            pw.print(\", aborted \" + summary.getTestsAbortedCount());\n+            pw.print(\", skipped \" + summary.getTestsSkippedCount());\n+            pw.println(\"]\");\n+        }\n+        return sw.toString();\n+    }\n+\n+    static class PrintingListener implements TestExecutionListener {\n+\n+        final PrintWriter printer;\n+        final Lock lock;\n+\n+        PrintingListener(PrintStream stream) {\n+            this(new PrintWriter(stream, true));\n+        }\n+\n+        PrintingListener(PrintWriter printer) {\n+            this.printer = printer;\n+            this.lock = new ReentrantLock();\n+        }\n+\n+        @Override\n+        public void executionFinished(TestIdentifier identifier, TestExecutionResult result) {\n+            if (identifier.isTest()) {\n+                lock.lock();\n+                try {\n+                    \/\/ always print a status line for a finished test\n+                    TestExecutionResult.Status status = result.getStatus();\n+                    String source = toSourceString(identifier);\n+                    String name = identifier.getDisplayName();\n+                    printer.printf(\"%10s: %s '%s'%n\", status, source, name);\n+                    \/\/ that's all for successful a test\n+                    if (status == TestExecutionResult.Status.SUCCESSFUL) {\n+                        return;\n+                    }\n+                    if (status == TestExecutionResult.Status.ABORTED) {\n+                        result.getThrowable().ifPresent(printer::println);\n+                        return;\n+                    }\n+                    result.getThrowable().ifPresent(throwable -> throwable.printStackTrace(printer));\n+                }\n+                finally {\n+                    lock.unlock();\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void reportingEntryPublished(TestIdentifier identifier, ReportEntry entry) {\n+            lock.lock();\n+            try {\n+                printer.println(identifier.getDisplayName() + \" -> \" + entry.getTimestamp());\n+                entry.getKeyValuePairs().forEach((key, value) -> printer.println(key + \" -> \" + value));\n+            }\n+            finally {\n+                lock.unlock();\n+            }\n+        }\n+\n+        private static String toSourceString(TestIdentifier identifier) {\n+            Optional<TestSource> optionalTestSource = identifier.getSource();\n+            if (!optionalTestSource.isPresent()) return \"<no test source>\";\n+            TestSource testSource = optionalTestSource.get();\n+            if (testSource instanceof MethodSource) {\n+                MethodSource source = (MethodSource) testSource;\n+                return source.getClassName() + \"::\" + source.getMethodName();\n+            }\n+            return testSource.toString();\n+        }\n+    }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JUnitRunner.java","additions":120,"deletions":39,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+INITIAL_TESTS += \\\n+\t$(BUILDTESTDIR)\/JUnitTrace.agentvm.ok\n","filename":"test\/junitTrace\/JUnitTrace.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}