{"files":[{"patch":"@@ -85,1 +85,0 @@\n-# JCov is optional\n","filename":"make\/Defs.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,3 +81,0 @@\n-\t@echo \"JCOV_JAR            = $(JCOV_JAR)\"\n-\t@echo \"JCOV_NETWORK_SAVER_JAR = $(JCOV_NETWORK_SAVER_JAR)\"\n-\t@echo \"JCOV_NOTICES        = $(JCOV_NOTICES)\"\n","filename":"make\/Makefile","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,167 +0,0 @@\n-#!\/bin\/bash\n-\n-#\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-mydir=\"$(dirname ${BASH_SOURCE[0]})\"\n-log_module=\"$(basename \"${BASH_SOURCE[0]}\")\"\n-\n-. \"${mydir}\/..\/build-common.sh\"\n-. \"${mydir}\/version-numbers\"\n-\n-JCOV_SRC_TAG=\"${JCOV_SRC_TAG:-${DEFAULT_JCOV_SRC_TAG}}\"\n-JCOV_SRC_ARCHIVE_CHECKSUM=\"${JCOV_SRC_ARCHIVE_CHECKSUM:-${DEFAULT_JCOV_SRC_ARCHIVE_CHECKSUM}}\"\n-\n-ANT_VERSION=\"${ANT_VERSION:-${DEFAULT_ANT_VERSION}}\"\n-ANT_ARCHIVE_CHECKSUM=\"${ANT_ARCHIVE_CHECKSUM:-${DEFAULT_ANT_ARCHIVE_CHECKSUM}}\"\n-\n-ASM_VERSION=\"${ASM_VERSION:-${DEFAULT_ASM_VERSION}}\"\n-ASM_URL_BASE=\"${ASM_URL_BASE:-${MAVEN_REPO_URL_BASE}}\"\n-ASM_JAR_CHECKSUM=\"${ASM_JAR_CHECKSUM:-${DEFAULT_ASM_JAR_CHECKSUM}}\"\n-ASM_TREE_JAR_CHECKSUM=\"${ASM_TREE_JAR_CHECKSUM:-${DEFAULT_ASM_TREE_JAR_CHECKSUM}}\"\n-ASM_UTIL_JAR_CHECKSUM=\"${ASM_UTIL_JAR_CHECKSUM:-${DEFAULT_ASM_UTIL_JAR_CHECKSUM}}\"\n-\n-JTHARNESS_SRC_TAG=\"${JTHARNESS_SRC_TAG:-${DEFAULT_JTHARNESS_SRC_TAG}}\"\n-JTHARNESS_SRC_ARCHIVE_CHECKSUM=\"${JTHARNESS_SRC_ARCHIVE_CHECKSUM:-${DEFAULT_JTHARNESS_SRC_ARCHIVE_CHECKSUM}}\"\n-\n-setup_ant\n-info \"ANT: ${ANT}\"\n-\n-setup_jcov_src() {\n-    check_arguments \"${FUNCNAME}\" 1 $#\n-\n-    local dir=\"$1\"\n-\n-    # Build jcov\n-    local JCOV_LOCAL_SRC_ARCHIVE=\"${dir}\/..\/source.zip\"\n-    if [ \"${JCOV_SRC_TAG}\" = \"tip\" -o \"${JCOV_SRC_TAG}\" = \"master\" ]; then\n-        local BRANCH=\"master\"\n-        get_archive_no_checksum \"${CODE_TOOLS_URL_BASE}\/jcov\/archive\/${BRANCH}.zip\" \"${JCOV_LOCAL_SRC_ARCHIVE}\" \"${dir}\"\n-        JCOV_SRC_DIR=\"${dir}\/jcov-${BRANCH}\"\n-    else\n-        get_archive \"${CODE_TOOLS_URL_BASE}\/jcov\/archive\/${JCOV_SRC_TAG}.zip\" \"${JCOV_LOCAL_SRC_ARCHIVE}\" \"${dir}\" \"${JCOV_SRC_ARCHIVE_CHECKSUM}\"\n-        JCOV_SRC_DIR=\"${dir}\/jcov-${JCOV_SRC_TAG}\"\n-    fi\n-}\n-\n-setup_asm() {\n-    check_arguments \"${FUNCNAME}\" 0 $#\n-\n-    local ASM_DEPS_DIR=\"${DEPS_DIR}\/asm\"\n-\n-    ASM_JAR=\"${ASM_DEPS_DIR}\/asm-${ASM_VERSION}.jar\"\n-    download_and_checksum \"${ASM_URL_BASE}\/org\/ow2\/asm\/asm\/${ASM_VERSION}\/asm-${ASM_VERSION}.jar\" \"${ASM_JAR}\" \"${ASM_JAR_CHECKSUM}\"\n-\n-    ASM_TREE_JAR=\"${ASM_DEPS_DIR}\/asm-tree-${ASM_VERSION}.jar\"\n-    download_and_checksum \"${ASM_URL_BASE}\/org\/ow2\/asm\/asm-tree\/${ASM_VERSION}\/asm-tree-${ASM_VERSION}.jar\" \"${ASM_TREE_JAR}\" \"${ASM_TREE_JAR_CHECKSUM}\"\n-\n-    ASM_UTIL_JAR=\"${ASM_DEPS_DIR}\/asm-utils-${ASM_VERSION}.jar\"\n-    download_and_checksum \"${ASM_URL_BASE}\/org\/ow2\/asm\/asm-util\/${ASM_VERSION}\/asm-util-${ASM_VERSION}.jar\" \"${ASM_UTIL_JAR}\" \"${ASM_UTIL_JAR_CHECKSUM}\"\n-}\n-\n-setup_jtharness_javatest_jar() {\n-    check_arguments \"${FUNCNAME}\" 0 $#\n-\n-    if [ -n \"${JTHARNESS_JAVATEST_JAR:-}\" ]; then\n-        return\n-    fi\n-\n-    JTHARNESS_JAVATEST_JAR=\"$(find \"${DEPS_DIR}\" -name jtharness.jar)\"\n-    if [ -n \"${JTHARNESS_JAVATEST_JAR}\" ]; then\n-        return\n-    fi\n-\n-    if [ -z \"${JTHARNESS_ARCHIVE_URL:-}\" ]; then\n-        if [ -n \"${JTHARNESS_ARCHIVE_URL_BASE:-}\" ]; then\n-            JTHARNESS_ARCHIVE_URL=\"${JTHARNESS_ARCHIVE_URL_BASE}\/${JTHARNESS_VERSION}\/${JTHARNESS_BUILD_NUMBER}\/${JTHARNESS_FILE}\"\n-        fi\n-    fi\n-    \n-    if [ -n \"${JTHARNESS_ARCHIVE_URL:-}\" ]; then\n-        local JTHARNESS_DEPS_DIR=\"${DEPS_DIR}\/jtharness\"\n-        local JTHARNESS_LOCAL_ARCHIVE_FILE=\"${DEPS_DIR}\/$(basename \"${JTHARNESS_ARCHIVE_URL}\")\"\n-        get_archive \"${JTHARNESS_ARCHIVE_URL}\" \"${JTHARNESS_LOCAL_ARCHIVE_FILE}\" \"${JTHARNESS_DEPS_DIR}\" \"${JTHARNESS_ARCHIVE_CHECKSUM}\"\n-        JTHARNESS_JAVATEST_JAR=\"${JTHARNESS_DEPS_DIR}\/${JTHARNESS_ARCHIVE_DIR_NAME}\/lib\/javatest.jar\"\n-        JTHARNESS_LICENSE=\"$(dirname \"${JTHARNESS_JAVATEST_JAR}\")\/..\/legal\/license.txt\"\n-        JTHARNESS_COPYRIGHT=\"$(dirname \"${JTHARNESS_JAVATEST_JAR}\")\/..\/legal\/copyright.txt\"\n-        return\n-    fi\n-\n-    info \"Neither JTHARNESS_ARCHIVE_URL or JTHARNESS_ARCHIVE_URL_BASE is set, building from source\"\n-    export JTHARNESS_BUILD_RESULTS_FILE=\"${BUILD_DIR}\/deps\/jtharness.results\"\n-    (\n-        export BUILD_DIR=\"${BUILD_DIR}\/deps\/jtharness\"\n-        export BUILD_RESULTS_FILE=\"${JTHARNESS_BUILD_RESULTS_FILE}\"\n-        export JTHARNESS_SRC_TAG=\"${JTHARNESS_SRC_TAG}\"\n-        export JTHARNESS_SRC_ARCHIVE_CHECKSUM=\"${JTHARNESS_SRC_ARCHIVE_CHECKSUM}\"\n-        export ANT=\"${ANT}\"\n-        bash \"${mydir}\/..\/jtharness\/build.sh\"\n-    )\n-    ret=$?\n-    if [ ! $ret = 0 ]; then\n-        exit ${ret}\n-    fi\n-    . \"${JTHARNESS_BUILD_RESULTS_FILE}\"\n-}\n-\n-build_jcov() {\n-    check_arguments \"${FUNCNAME}\" 0 $#\n-\n-    setup_asm\n-    setup_jtharness_javatest_jar\n-\n-    local JCOV_SRC_DIR_BASE=\"${BUILD_DIR}\/src\"\n-    setup_jcov_src \"${JCOV_SRC_DIR_BASE}\"\n-\n-    local JCOV_DIST=\"${BUILD_DIR}\/build\"\n-    (\n-        cd \"${JCOV_SRC_DIR}\/build\"\n-        \"${ANT}\" -Dresult.dir=\"$(native_path \"${JCOV_DIST}\")\"               \\\n-                 -Dasm.jar=\"$(native_path \"${ASM_JAR}\")\"                    \\\n-                 -Dasm.checksum=\"${ASM_JAR_CHECKSUM}\"                       \\\n-                 -Dasm.tree.jar=\"$(native_path \"${ASM_TREE_JAR}\")\"          \\\n-                 -Dasm.tree.checksum=\"${ASM_TREE_JAR_CHECKSUM}\"             \\\n-                 -Dasm.util.jar=\"$(native_path \"${ASM_UTIL_JAR}\")\"          \\\n-                 -Dasm.util.checksum=\"${ASM_UTIL_JAR_CHECKSUM}\"             \\\n-                 -Djavatestjar=\"$(native_path \"${JTHARNESS_JAVATEST_JAR}\")\" \\\n-                 -Dverify.strict=                                           \\\n-                 -f \"$(native_path \"${JCOV_SRC_DIR}\/build\/build.xml\")\"\n-    )\n-\n-    local JCOV_DIST_JCOV_DIR=\"$(ls -d \"${JCOV_DIST}\/jcov\"*)\"\n-    JCOV_JAR=\"${JCOV_DIST_JCOV_DIR}\/jcov.jar\"\n-    JCOV_NETWORK_SAVER_JAR=\"${JCOV_DIST_JCOV_DIR}\/jcov_network_saver.jar\"\n-    JCOV_LICENSE=\"${JCOV_SRC_DIR}\/LICENSE\"\n-}\n-build_jcov\n-\n-if [ ! x\"$BUILD_RESULTS_FILE\" = x\"\" ]; then\n-    mkdir -p \"$(dirname \"${BUILD_RESULTS_FILE}\")\"\n-    cat > \"${BUILD_RESULTS_FILE}\" << EOF\n-JCOV_JAR=\"${JCOV_JAR}\"\n-JCOV_NETWORK_SAVER_JAR=\"${JCOV_NETWORK_SAVER_JAR}\"\n-JCOV_LICENSE=\"${JCOV_LICENSE}\"\n-EOF\n-fi\n","filename":"make\/build-support\/jcov\/build.sh","additions":0,"deletions":167,"binary":false,"changes":167,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-#\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-DEFAULT_JCOV_SRC_TAG=jcov3.0-b07\n-DEFAULT_JCOV_SRC_ARCHIVE_CHECKSUM=c5c26085750628d58de275b3f50a7409300c0497\n-\n-DEFAULT_ANT_VERSION=1.10.8\n-DEFAULT_ANT_ARCHIVE_CHECKSUM=dbe187ce2963f9df8a67de8aaff3b0a437d06978\n-\n-DEFAULT_ASM_VERSION=8.0\n-DEFAULT_ASM_JAR_CHECKSUM=d1a17d07c60e9e82c8b31b1d8f9ca98726418db4\n-DEFAULT_ASM_TREE_JAR_CHECKSUM=7b31ca94da9f57334a5aed79b40f2b88c5ee9f4f\n-DEFAULT_ASM_UTIL_JAR_CHECKSUM=b21996293fd49851ed9017cfde3191e49f77fbd0\n-\n-DEFAULT_JTHARNESS_SRC_TAG=jt6.0-b13\n-DEFAULT_JTHARNESS_SRC_ARCHIVE_CHECKSUM=43936b2616476fcac8ee4bd0132e73c015119337\n","filename":"make\/build-support\/jcov\/version-numbers","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -44,3 +44,0 @@\n-DEFAULT_JCOV_SRC_TAG=jcov3.0-b07\n-DEFAULT_JCOV_SRC_ARCHIVE_CHECKSUM=c5c26085750628d58de275b3f50a7409300c0497\n-\n","filename":"make\/build-support\/version-numbers","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,2 +51,1 @@\n-# * JT Harness, JCov, and AsmTools are downloaded or built from\n-#   source.\n+# * JT Harness and AsmTools are downloaded or built from source.\n@@ -120,1 +119,1 @@\n-# Ant (required to build AsmTools, JCov and JT Harness)\n+# Ant (required to build AsmTools and JT Harness)\n@@ -178,14 +177,0 @@\n-# JCov\n-#     Checksum variables:\n-#         JCOV_ARCHIVE_CHECKSUM: checksum of binary archive\n-#         JCOV_SRC_ARCHIVE_CHECKSUM: checksum of source archive\n-#\n-#     1. JCOV_JAR + JCOV_NETWORK_SAVER_JAR + JCOV_LICENSE\n-#         The path to jcov.jar, jcov_network_saver.jar, and LICENSE respectively.\n-#     2a. JCOV_ARCHIVE_URL\n-#         The full URL for the archive.\n-#     2b. JCOV_ARCHIVE_URL_BASE + JCOV_VERSION + JCOV_BUILD_NUMBER + JCOV_FILE\n-#         The individual URL components used to construct the full URL.\n-#     3. JCOV_SRC_TAG\n-#         The SCM repository tag to use when building from source.\n-#\n@@ -329,4 +314,0 @@\n-# Not available in Maven\n-JCOV_SRC_TAG=\"${JCOV_SRC_TAG:-${DEFAULT_JCOV_SRC_TAG}}\"\n-JCOV_SRC_ARCHIVE_CHECKSUM=\"${JCOV_SRC_ARCHIVE_CHECKSUM:-${DEFAULT_JCOV_SRC_ARCHIVE_CHECKSUM}}\"\n-\n@@ -359,1 +340,1 @@\n-        grep -E '^(ANT|ASM|ASMTOOLS|GOOGLE_GUICE|HAMCREST|JCOMMANDER|JCOV|JTHARNESS|JUNIT|TESTNG)_[A-Z_]*=' | \\\n+        grep -E '^(ANT|ASM|ASMTOOLS|GOOGLE_GUICE|HAMCREST|JCOMMANDER|JTHARNESS|JUNIT|TESTNG)_[A-Z_]*=' | \\\n@@ -521,65 +502,0 @@\n-#----- JCov -----\n-setup_jcov() {\n-    check_arguments \"${FUNCNAME}\" 0 $#\n-\n-    if [ -n \"${JCOV_JAR:-}\" -a -n \"${JCOV_NETWORK_SAVER_JAR:-}\" ]; then\n-        return\n-    fi\n-\n-    if [ -z \"${JCOV_ARCHIVE_URL:-}\" ]; then\n-        if [ -n \"${JCOV_ARCHIVE_URL_BASE:-}\" ]; then\n-            JCOV_ARCHIVE_URL=\"${JCOV_ARCHIVE_URL_BASE}\/${JCOV_VERSION}\/${JCOV_BUILD_NUMBER}\/${JCOV_FILE}\"\n-        fi\n-    fi\n-\n-    local JCOV_DEPS_DIR=\"${DEPS_DIR}\/jcov\"\n-\n-    if [ -n \"${JTHARNESS_ARCHIVE_URL:-}\" ]; then\n-        local JCOV_LOCAL_ARCHIVE_FILE=\"${DEPS_DIR}\/$(basename \"${JCOV_ARCHIVE_URL}\")\"\n-        get_archive \"${JCOV_ARCHIVE_URL}\" \"${JCOV_LOCAL_ARCHIVE_FILE}\" \"${JCOV_DEPS_DIR}\" \"${JCOV_ARCHIVE_CHECKSUM}\"\n-        JCOV_JAR=\"${JCOV_DEPS_DIR}\/jcov_${JCOV_VERSION}\/lib\/jcov.jar\"\n-        JCOV_NETWORK_SAVER_JAR=\"${JCOV_DEPS_DIR}\/jcov_${JCOV_VERSION}\/lib\/jcov_network_saver.jar\"\n-        return\n-    fi\n-\n-    info \"None of JCOV_JAR, JCOV_ARCHIVE_URL or JCOV_ARCHIVE_URL_BASE are set; building from source\"\n-    export JCOV_BUILD_RESULTS_FILE=\"${DEPS_DIR}\/jcov.results\"\n-    (\n-        export BUILD_DIR=\"${JCOV_DEPS_DIR}\"\n-        export BUILD_RESULTS_FILE=\"${JCOV_BUILD_RESULTS_FILE}\"\n-        export JCOV_SRC_TAG=\"${JCOV_SRC_TAG}\"\n-        export JCOV_SRC_ARCHIVE_CHECKSUM=\"${JCOV_SRC_ARCHIVE_CHECKSUM}\"\n-        export ANT=\"${ANT}\"\n-        export JTHARNESS_JAVATEST_JAR=\"${JTHARNESS_JAVATEST_JAR}\"\n-        bash \"${mydir}\/build-support\/jcov\/build.sh\"\n-    )\n-    ret=$?\n-    if [ ! $ret = 0 ]; then\n-        exit ${ret}\n-    fi\n-    . \"${JCOV_BUILD_RESULTS_FILE}\"\n-}\n-setup_jcov\n-info \"JCOV_JAR: ${JCOV_JAR}\"\n-info \"JCOV_NETWORK_SAVER_JAR: ${JCOV_NETWORK_SAVER_JAR}\"\n-\n-#----- JCov License -----\n-# TODO: File issue to include LICENSE in the jcov binary bundle\n-setup_jcov_license() {\n-    check_arguments \"${FUNCNAME}\" 0 $#\n-\n-    if [ -n \"${JCOV_LICENSE:-}\" ]; then\n-        return\n-    fi\n-\n-    if [ -z \"${JCOV_SRC:-}\" ]; then\n-        local JCOV_SRC_DEPS_DIR=\"${DEPS_DIR}\/jcov-src\"\n-        local JCOV_LOCAL_SRC_ARCHIVE_FILE=\"${JCOV_SRC_DEPS_DIR}\/source.zip\"\n-        get_archive \"${CODE_TOOLS_URL_BASE}\/jcov\/archive\/${JCOV_SRC_TAG}.zip\" \"${JCOV_LOCAL_SRC_ARCHIVE_FILE}\" \"${JCOV_SRC_DEPS_DIR}\" \"${JCOV_SRC_ARCHIVE_CHECKSUM}\"\n-        JCOV_SRC=\"${JCOV_SRC_DEPS_DIR}\/jcov-${JCOV_SRC_TAG}\"\n-    fi\n-    JCOV_LICENSE=\"${JCOV_SRC}\/LICENSE\"\n-}\n-setup_jcov_license\n-info \"JCOV_LICENSE: ${JCOV_LICENSE}\"\n-\n@@ -817,3 +733,0 @@\n-JCOV_NOTICES=\"$(mixed_path \"${JCOV_LICENSE}\")\"\n-info \"JCOV_NOTICES: ${JCOV_NOTICES}\"\n-\n@@ -886,3 +799,0 @@\n-check_file  \"${JCOV_JAR}\"\n-check_files  ${JCOV_NOTICES}\n-check_file  \"${JCOV_NETWORK_SAVER_JAR}\"\n@@ -910,3 +820,0 @@\n-     JCOV_JAR=\"${JCOV_JAR}\"                                   \\\n-     JCOV_NETWORK_SAVER_JAR=\"${JCOV_NETWORK_SAVER_JAR}\"       \\\n-     JCOV_NOTICES=\"${JCOV_NOTICES}\"                           \\\n","filename":"make\/build.sh","additions":3,"deletions":96,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-\t$(JCOV_JAR) $(JCOV_NETWORK_SAVER_JAR) \\\n@@ -100,2 +99,0 @@\n-\t    echo \"jcov=$(notdir $(JCOV_JAR))\" ; \\\n-\t    echo \"jcov-network-saver=$(notdir $(JCOV_NETWORK_SAVER_JAR))\" ; \\\n@@ -287,10 +284,0 @@\n-#----------------------------------------------------------------------\n-#\n-# import JCov\n-\n-$(eval $(call IMPORT_FILE,$(JCOV_JAR),$(JTREG_IMAGEDIR)\/lib))\n-\n-$(eval $(call IMPORT_FILE,$(JCOV_NETWORK_SAVER_JAR),$(JTREG_IMAGEDIR)\/lib))\n-\n-$(foreach file,$(JCOV_NOTICES),$(eval $(call IMPORT_FILE,$(file),$(JTREG_IMAGEDIR)\/legal\/jcov)))\n-\n@@ -315,2 +302,0 @@\n-\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(JCOV_JAR))) \\\n-\t$(addprefix $(JTREG_IMAGEDIR)\/lib\/,$(notdir $(JCOV_NETWORK_SAVER_JAR))) \\\n","filename":"make\/jtreg.gmk","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,506 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javatest.regtest.tool;\n-\n-import java.io.BufferedReader;\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.PrintWriter;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.jar.JarFile;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-import com.sun.javatest.regtest.BadArgs;\n-import com.sun.javatest.regtest.agent.Flags;\n-import com.sun.javatest.regtest.agent.SearchPath;\n-import com.sun.javatest.regtest.config.JDK;\n-import com.sun.javatest.util.I18NResourceBundle;\n-\n-import static com.sun.javatest.regtest.tool.Option.ArgType.*;\n-\n-\/**\n- * Manager to drive jcov code coverage tool.\n- *\/\n-public class JCovManager {\n-    public JCovManager(JarManager jarManager) {\n-        jcov_jar = toFile(jarManager.getFile(\"jcov\"));\n-        jcov_network_saver_jar = toFile(jarManager.getFile(\"jcov-network-saver\"));\n-\n-        if (System.getProperty(\"jcov.port\") != null)\n-            grabberPort = Integer.getInteger(\"jcov.port\");\n-        if (System.getProperty(\"jcov.command_port\") != null)\n-            grabberCommandPort = Integer.getInteger(\"jcov.command_port\");\n-    }\n-\n-    private static File toFile(Path p) {\n-        return p == null ? null : p.toFile();\n-    }\n-\n-    public static final String JCOV = \"jcov\";\n-    final List<? extends Option> options = Arrays.asList(\n-        new Option(STD, JCOV, \"jcov\/classes\", \"-jcov\/classes\") {\n-            public void process(String opt, String arg) {\n-                classes = new File(arg);\n-            }\n-        },\n-\n-        new Option(STD, JCOV, null, \"-jcov\/include\") {\n-            public void process(String opt, String arg) {\n-                includeOpts.add(arg);\n-            }\n-        },\n-\n-        new Option(STD, JCOV, null, \"-jcov\/include_list\") {\n-            public void process(String opt, String arg) throws BadArgs {\n-                try {\n-                    includeOpts.addAll(splitLines(new File(arg)));\n-                } catch (FileNotFoundException e) {\n-                    throw new BadArgs(i18n, \"jcov.file.not.found\", arg);\n-                } catch (IOException e) {\n-                    throw new BadArgs(i18n, \"jcov.error.reading.file\", arg, e);\n-                }\n-            }\n-        },\n-\n-        new Option(STD, JCOV, null, \"-jcov\/exclude\") {\n-            public void process(String opt, String arg) {\n-                excludeOpts.add(arg);\n-            }\n-        },\n-\n-        new Option(STD, JCOV, \"jcov\/source\", \"-jcov\/source\", \"-jcov\/sourcepath\") {\n-            public void process(String opt, String arg) {\n-                source = new SearchPath(arg);\n-            }\n-        },\n-\n-        new Option(STD, JCOV, null, \"-jcov\/patch\") {\n-            public void process(String opt, String arg) {\n-                patch = new File(arg);\n-            }\n-        },\n-\n-        new Option(NONE, JCOV, \"jcov-verbose\", \"-jcov\/verbose\") {\n-            public void process(String opt, String arg) {\n-                verbose = \"-verbose\";\n-            }\n-        },\n-\n-        new Option(NONE, JCOV, \"jcov-verbose\", \"-jcov\/verbosemore\") {\n-            public void process(String opt, String arg) {\n-                verbose = \"-verbosemore\";\n-            }\n-        },\n-\n-        new Option(NONE, JCOV, \"jcov-print-env\", \"-jcov\/print-env\") {\n-            public void process(String opt, String arg) {\n-                printEnv = true;\n-            }\n-        }\n-    );\n-\n-    String version() {\n-        if (version == null) {\n-            List<String> opts = Arrays.asList(\"-version\");\n-            Task t = new Task(opts) {\n-                @Override\n-                void processLine(String line) {\n-                    if (version == null)\n-                        version = line;\n-                }\n-\n-            };\n-            t.run();\n-            if (version == null)\n-                version = \"JCov version unknown\";\n-        }\n-        return version;\n-    }\n-\n-    boolean isJCovInstalled() {\n-        return (jcov_jar != null) && (jcov_network_saver_jar != null);\n-    }\n-\n-    boolean isEnabled() {\n-        return (classes != null);\n-    }\n-\n-    void setWorkDir(File workDir) {\n-        workDir = workDir.getAbsoluteFile();\n-        instrClasses = new File(workDir, \"jcov\/classes\");\n-        instrModules = new File(instrClasses, \"modules\");\n-        template = new File(workDir, \"jcov\/template.xml\");\n-        results = new File(workDir, \"jcov\/results.xml\");\n-    }\n-\n-    void setReportDir(File reportDir) {\n-        report = new File(reportDir, \"jcov\");\n-        patchReport = new File(reportDir, \"text\/patch.txt\");\n-    }\n-\n-    void setTestJDK(JDK testJDK) {\n-        this.testJDK = testJDK;\n-    }\n-\n-    void instrumentClasses() {\n-        List<String> opts = new ArrayList<>();\n-        opts.add(\"instr\");\n-\n-        delete(instrClasses);\n-        instrClasses.mkdirs();\n-\n-        opts.add(\"-output\");\n-        opts.add(instrClasses.getPath());\n-\n-        delete(template);\n-        opts.add(\"-template\");\n-        opts.add(template.getPath());\n-\n-        for (String i: includeOpts) {\n-            opts.add(\"-include\");\n-            opts.add(i);\n-        }\n-\n-        for (String e: excludeOpts) {\n-            opts.add(\"-exclude\");\n-            opts.add(e);\n-        }\n-\n-        if (verbose != null) {\n-            opts.add(\"-verbose\");\n-        }\n-\n-        if (printEnv)\n-            opts.add(\"-print-env\");\n-\n-        if (containsClass(classes, \"java\/lang\/Shutdown\")) {\n-            opts.add(\"-include\");\n-            opts.add(\"java\/lang\/Shutdown\");\n-            opts.add(\"-saveatend\");\n-            opts.add(\"java\/lang\/Shutdown.runHooks\");\n-        }\n-\n-        opts.add(classes.getPath());\n-\n-        \/\/ Uugh, best to run Instr on the test JDK because it may try to read\n-        \/\/ platform classes from the bootclasspath or system image\n-        new Task(testJDK, opts).run();\n-\n-        if (classes.isFile()) {\n-            File result = new File(instrClasses, classes.getName());\n-            if (result.exists()) {\n-                \/\/ work around weird Instr behavior for -output\n-                String classesFile = classes.getName().equals(\"modules\") ? \"classes\" : \"classes.jar\";\n-                File instrJar = new File(instrClasses.getParent(), classesFile);\n-                instrJar.delete();\n-                result.renameTo(instrJar);\n-                instrClasses.delete();\n-                instrClasses = instrJar;\n-            }\n-        }\n-    }\n-\n-    private boolean containsClass(File file, String name) {\n-        if (file.isDirectory())\n-            return new File(file, name.replace('\/', File.separatorChar) + \".class\").exists();\n-        try (JarFile j = new JarFile(file)) {\n-            return (j.getEntry(name + \".class\") != null);\n-        } catch (IOException ex) {\n-            return false;\n-        }\n-    }\n-\n-    void startGrabber() {\n-        if (grabber != null)\n-            throw new IllegalStateException();\n-\n-        results.delete();\n-\n-        List<String> opts = new ArrayList<>();\n-        opts.add(\"grabber\");\n-        opts.add(\"-port\");\n-        opts.add(\"0\");\n-        opts.add(\"-command\");\n-        opts.add(\"0\");\n-\n-        opts.add(\"-output\");\n-        opts.add(results.getPath());\n-\n-        opts.add(\"-template\");\n-        opts.add(template.getPath());\n-\n-        if (verbose != null)\n-            opts.add(verbose);\n-\n-        if (printEnv)\n-            opts.add(\"-print-env\");\n-\n-        Task t = new Task(opts) {\n-            Pattern skip = Pattern.compile(\"[A-Z]+\\\\s*:.*\");\n-            Pattern ports = Pattern.compile(\"Server started .*:([0-9]+)\\\\. .*? ([0-9]+)\\\\. .*\");\n-            @Override\n-            void processLine(String line) {\n-                super.processLine(line);\n-                if (!skip.matcher(line).matches()) {\n-                    Matcher m = ports.matcher(line);\n-                    if (m.matches()) {\n-                        synchronized (JCovManager.this) {\n-                            grabberPort = Integer.parseInt(m.group(1));\n-                            grabberCommandPort = Integer.parseInt(m.group(2));\n-                            JCovManager.this.notify();\n-                        }\n-                    }\n-                }\n-            }\n-\n-        };\n-        grabber = new Thread(t);\n-        grabber.start();\n-\n-        try {\n-            long now = System.currentTimeMillis();\n-            long endTime = now + 30 * 1000; \/\/ wait 30 seconds for grabber to start\n-            synchronized (this) {\n-                while (now < endTime && grabberPort == 0) {\n-                    wait(endTime - now);\n-                }\n-            }\n-        } catch (InterruptedException e) {\n-            System.err.println(\"Interrupted while waiting for jcov grabber to initialize\");\n-        }\n-\n-        if (showJCov)\n-            System.err.println(\"jcov grabber port: \" + grabberPort + \", command port: \" + grabberCommandPort);\n-\n-        if (grabberPort == 0 || grabberCommandPort == 0)\n-            System.err.println(\"Warning: jcov grabber not initialized correctly\");\n-    }\n-\n-    void stopGrabber() {\n-        List<String> opts = new ArrayList<>();\n-        opts.add(\"grabberManager\");\n-\n-        if (printEnv)\n-            opts.add(\"-print-env\");\n-\n-        if (grabberCommandPort != 0) {\n-            opts.add(\"-command_port\");\n-            opts.add(String.valueOf(grabberCommandPort));\n-        }\n-\n-        opts.add(\"-stop\");\n-\n-        new Task(opts).run();\n-\n-        final int MAX_JOIN_TIME = 30*1000; \/\/ 30 seconds\n-        try {\n-            grabber.join(MAX_JOIN_TIME);\n-        } catch (InterruptedException e) {\n-            System.err.println(\"Interrupted while waiting for jcov grabber to exit\");\n-        }\n-    }\n-\n-    void writeReport() {\n-        List<String> opts = new ArrayList<>();\n-        opts.add(\"repgen\");\n-\n-        opts.add(\"-source\");\n-        opts.add(source.toString());\n-\n-        opts.add(\"-output\");\n-        opts.add(report.getPath());\n-\n-        for (String i: includeOpts) {\n-            opts.add(\"-include\");\n-            opts.add(i);\n-        }\n-\n-        for (String e: excludeOpts) {\n-            opts.add(\"-exclude\");\n-            opts.add(e);\n-        }\n-\n-        if (printEnv)\n-            opts.add(\"-print-env\");\n-\n-        opts.add(results.getPath());\n-\n-        new Task(opts).run();\n-\n-        if (patch != null)\n-            writePatchReport();\n-    }\n-\n-    void writePatchReport() {\n-        List<String> opts = new ArrayList<>();\n-        opts.add(\"diffcoverage\");\n-\n-        opts.add(\"-replaceDiff\");\n-        opts.add(\"[^ ]+\/classes\/:\");\n-\n-        opts.add(results.getPath());\n-        opts.add(patch.getPath());\n-\n-        patchReport.getParentFile().mkdirs();\n-        final PrintWriter out;\n-        try {\n-            out = new PrintWriter(new BufferedWriter(new FileWriter(patchReport)));\n-            new Task(opts) {\n-                String lastLine;\n-                @Override\n-                public void run() {\n-                    super.run();\n-                    if (lastLine != null)\n-                        super.processLine(lastLine);\n-                }\n-                @Override\n-                void processLine(String line) {\n-                    out.println(line);\n-                    lastLine = line;\n-                }\n-            }.run();\n-            out.close();\n-        } catch (IOException e) {\n-            System.err.println(\"Cannot open \" + patchReport + \": \" + e);\n-        }\n-    }\n-\n-    boolean delete(File file) {\n-        boolean ok = true;\n-        if (file.exists()) {\n-            if (file.isDirectory()) {\n-                for (File f: file.listFiles())\n-                    ok &= delete(f);\n-            }\n-            ok &= file.delete();\n-        }\n-        if (!ok)\n-            System.err.println(\"Warning: failed to delete \" + file);\n-        return ok;\n-    }\n-\n-    List<String> splitLines(File f) throws IOException {\n-        List<String> lines = new ArrayList<>();\n-        BufferedReader in = new BufferedReader(new FileReader(f));\n-        String line;\n-        try {\n-            while ((line = in.readLine()) != null) {\n-                if (line.length() == 0 || line.startsWith(\"#\"))\n-                    continue;\n-                lines.add(line);\n-            }\n-            return lines;\n-        } finally {\n-            in.close();\n-        }\n-    }\n-\n-    private static final JDK thisJDK = JDK.of(System.getProperty(\"java.home\"));\n-\n-    class Task implements Runnable {\n-        Task(List<String> opts) {\n-            this(thisJDK, opts);\n-        }\n-\n-        Task(JDK jdk, List<String> opts) {\n-            this.jdk = jdk;\n-            name = opts.get(0);\n-            this.opts = opts;\n-        }\n-\n-        public void run() {\n-            try {\n-                List<String> args = new ArrayList<>();\n-                args.add(jdk.getJavaProg().toString());\n-                args.add(\"-jar\");\n-                args.add(jcov_jar.getPath());\n-                args.addAll(opts);\n-                ProcessBuilder pb = new ProcessBuilder(args);\n-                if (showJCov)\n-                    System.err.println(\"EXEC: \" + args);\n-                pb.redirectErrorStream(true);\n-                Process p = pb.start();\n-                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n-                String line;\n-                while ((line = in.readLine()) != null) {\n-                    processLine(line);\n-                }\n-                int rc = p.waitFor();\n-                if (showJCov)\n-                    System.err.println(\"EXEC: \" + name + \" finished, rc=\" + rc);\n-            } catch (InterruptedException e) {\n-                System.err.println(\"Error running jcov: \" + e);\n-            } catch (IOException e) {\n-                System.err.println(\"Error running jcov: \" + e);\n-            }\n-        }\n-\n-        void processLine(String line) {\n-            System.out.println(\"[jcov:\" + name + \"] \" + line);\n-        }\n-\n-        JDK jdk;\n-        String name;\n-        List<String> opts;\n-    }\n-\n-    File jcov_jar;\n-    File jcov_network_saver_jar;\n-\n-    private File classes;\n-    private File patch;\n-    private SearchPath source;\n-    private String verbose;\n-    private boolean printEnv;\n-    private List<String> includeOpts = new ArrayList<>();\n-    private List<String> excludeOpts = new ArrayList<>();\n-\n-    JDK testJDK;\n-    File instrClasses;\n-    File instrModules;\n-    File template;\n-    File results;\n-    File report;\n-    File patchReport;\n-    int grabberPort;\n-    int grabberCommandPort;\n-    String version;\n-\n-    private Thread grabber;\n-    static final boolean showJCov = Flags.get(\"showJCov\");\n-    static final String JCOV_EXPORT_PACKAGE = \"com.sun.tdk.jcov.runtime\";\n-\n-    private static I18NResourceBundle i18n = I18NResourceBundle.getBundleForClass(Tool.class);\n-}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/JCovManager.java","additions":0,"deletions":506,"binary":false,"changes":506,"status":"deleted"},{"patch":"@@ -800,7 +800,0 @@\n-        new Option(WILDCARD, JDK, null, \"-Xrunjcov\") {\n-            @Override\n-            public void process(String opt, String arg) {\n-                testVMOpts.add(opt);\n-            }\n-        },\n-\n@@ -1048,6 +1041,0 @@\n-        jcovManager = new JCovManager(jarManager);\n-        if (jcovManager.isJCovInstalled()) {\n-            options = new ArrayList<>(options);\n-            options.addAll(jcovManager.options);\n-        }\n-\n@@ -1075,8 +1062,0 @@\n-        if (jcovManager != null && jcovManager.isJCovInstalled()) {\n-            help.addVersionHelper(new VersionHelper() {\n-                @Override\n-                public void showVersion(PrintWriter out) {\n-                    out.println(jcovManager.version());\n-                }\n-            });\n-        }\n@@ -1295,46 +1274,1 @@\n-        if (jcovManager.isEnabled()) {\n-            jcovManager.setTestJDK(testJDK);\n-            jcovManager.setWorkDir(getNormalizedFile(workDirArg.toFile()));\n-            jcovManager.setReportDir(getNormalizedFile(reportDirArg.toFile()));\n-            jcovManager.instrumentClasses();\n-            final String XBOOTCLASSPATH_P = \"-Xbootclasspath\/p:\";\n-            final String XMS = \"-Xms\";\n-            final String defaultInitialHeap = \"64m\";\n-            String insert = jcovManager.instrClasses + File.pathSeparator\n-                    + jcovManager.jcov_network_saver_jar;\n-            boolean found_Xbootclasspath_p = false;\n-            boolean found_Xms = false;\n-            for (int i = 0; i < testVMOpts.size(); i++) {\n-                String opt = testVMOpts.get(i);\n-                if (opt.startsWith(XBOOTCLASSPATH_P)) {\n-                    opt = opt.substring(0, XBOOTCLASSPATH_P.length())\n-                            + insert + File.pathSeparator\n-                            + opt.substring(XBOOTCLASSPATH_P.length());\n-                    testVMOpts.set(i, opt);\n-                    found_Xbootclasspath_p = true;\n-                    break;\n-                } else if (opt.startsWith(XMS))\n-                    found_Xms = true;\n-            }\n-            if (!found_Xbootclasspath_p) {\n-                if (jcovManager.instrModules.exists()) {\n-                    patchModulesInVMOpts(jcovManager.instrModules);\n-                } else {\n-                    testVMOpts.add(XBOOTCLASSPATH_P + insert);\n-                }\n-\n-            }\n-            if (!found_Xms)\n-                testVMOpts.add(XMS + defaultInitialHeap);\n-            jcovManager.startGrabber();\n-            testVMOpts.add(\"-Djcov.port=\" + jcovManager.grabberPort);\n-\n-            if (JCovManager.showJCov)\n-                System.err.println(\"Modified VM opts: \" + testVMOpts);\n-        }\n-\n-        try {\n-            Harness.setClassDir(ProductInfo.getJavaTestClassDir());\n-\n-            \/\/ Allow keywords to begin with a numeric\n-            Keywords.setAllowNumericKeywords(RegressionKeywords.allowNumericKeywords);\n+        Harness.setClassDir(ProductInfo.getJavaTestClassDir());\n@@ -1342,2 +1276,2 @@\n-            if (httpdFlag)\n-                startHttpServer();\n+        \/\/ Allow keywords to begin with a numeric\n+        Keywords.setAllowNumericKeywords(RegressionKeywords.allowNumericKeywords);\n@@ -1345,2 +1279,2 @@\n-            if (multiRun && guiFlag)\n-                throw new Fault(i18n, \"main.onlyOneTestSuiteInGuiMode\");\n+        if (httpdFlag)\n+            startHttpServer();\n@@ -1348,2 +1282,2 @@\n-            testStats = new TestStats();\n-            boolean foundEmptyGroup = false;\n+        if (multiRun && guiFlag)\n+            throw new Fault(i18n, \"main.onlyOneTestSuiteInGuiMode\");\n@@ -1351,9 +1285,2 @@\n-            for (RegressionTestSuite ts: testManager.getTestSuites()) {\n-\n-                if (multiRun && (verbose != null && verbose.multiRun))\n-                    out.println(\"Running tests in \" + ts.getRootDir());\n-\n-                RegressionParameters params = createParameters(testManager, ts);\n-                String[] tests = params.getTests();\n-                if (tests != null && tests.length == 0)\n-                    foundEmptyGroup = true;\n+        testStats = new TestStats();\n+        boolean foundEmptyGroup = false;\n@@ -1361,29 +1288,1 @@\n-                checkLockFiles(params.getWorkDirectory().getRoot(), \"start\");\n-\n-                switch (execMode) {\n-                    case AGENTVM:\n-                        Agent.Pool p = Agent.Pool.instance(params);\n-                        if (allowSetSecurityManagerFlag) {\n-                            initPolicyFile();\n-                            p.setSecurityPolicy(policyFile.toFile());\n-                        }\n-                        if (timeoutFactorArg != null) {\n-                            p.setTimeoutFactor(timeoutFactorArg);\n-                        }\n-                        if (maxPoolSize == -1) {\n-                            \/\/ The default max pool size depends on the concurrency\n-                            \/\/ and whether there are additional VM options to be set\n-                            \/\/ when executing tests, as compared to when compiling tests.\n-                            \/\/ Also, the classpath for compile actions is typically\n-                            \/\/ different for compile actions and main actions.\n-                            int factor = 2; \/\/ (testJavaOpts.isEmpty() ? 1 : 2);\n-                            maxPoolSize = params.getConcurrency() * factor;\n-                        }\n-                        p.setMaxPoolSize(maxPoolSize);\n-                        p.setIdleTimeout(poolIdleTimeout);\n-                        break;\n-                    case OTHERVM:\n-                        break;\n-                    default:\n-                        throw new AssertionError();\n-                }\n+        for (RegressionTestSuite ts: testManager.getTestSuites()) {\n@@ -1391,3 +1290,2 @@\n-                \/\/ Before we install our own security manager (which will restrict access\n-                \/\/ to the system properties), take a copy of the system properties.\n-                TestEnvironment.addDefaultPropTable(\"(system properties)\", System.getProperties());\n+            if (multiRun && (verbose != null && verbose.multiRun))\n+                out.println(\"Running tests in \" + ts.getRootDir());\n@@ -1395,9 +1293,13 @@\n-                if (guiFlag) {\n-                    showTool(params);\n-                    return EXIT_OK;\n-                } else {\n-                    try {\n-                        boolean quiet = (multiRun && !(verbose != null && verbose.multiRun));\n-                        testStats.addAll(batchHarness(params, quiet));\n-                    } finally {\n-                        checkLockFiles(params.getWorkDirectory().getRoot(), \"done\");\n+            RegressionParameters params = createParameters(testManager, ts);\n+            String[] tests = params.getTests();\n+            if (tests != null && tests.length == 0)\n+                foundEmptyGroup = true;\n+\n+            checkLockFiles(params.getWorkDirectory().getRoot(), \"start\");\n+\n+            switch (execMode) {\n+                case AGENTVM:\n+                    Agent.Pool p = Agent.Pool.instance(params);\n+                    if (allowSetSecurityManagerFlag) {\n+                        initPolicyFile();\n+                        p.setSecurityPolicy(policyFile.toFile());\n@@ -1405,17 +1307,19 @@\n-                }\n-                if (verbose != null && verbose.multiRun)\n-                    out.println();\n-            }\n-\n-            if (multiRun) {\n-                if (verbose != null && verbose.multiRun) {\n-                    out.println(\"Overall summary:\");\n-                }\n-                testStats.showResultStats(out);\n-                if (reportMode != ReportMode.NONE) {\n-                    RegressionReporter r = new RegressionReporter(out);\n-                    r.report(testManager);\n-                }\n-                if (!reportOnlyFlag) {\n-                    out.println(\"Results written to \" + canon(workDirArg.toFile()));\n-                }\n+                    if (timeoutFactorArg != null) {\n+                        p.setTimeoutFactor(timeoutFactorArg);\n+                    }\n+                    if (maxPoolSize == -1) {\n+                        \/\/ The default max pool size depends on the concurrency\n+                        \/\/ and whether there are additional VM options to be set\n+                        \/\/ when executing tests, as compared to when compiling tests.\n+                        \/\/ Also, the classpath for compile actions is typically\n+                        \/\/ different for compile actions and main actions.\n+                        int factor = 2; \/\/ (testJavaOpts.isEmpty() ? 1 : 2);\n+                        maxPoolSize = params.getConcurrency() * factor;\n+                    }\n+                    p.setMaxPoolSize(maxPoolSize);\n+                    p.setIdleTimeout(poolIdleTimeout);\n+                    break;\n+                case OTHERVM:\n+                    break;\n+                default:\n+                    throw new AssertionError();\n@@ -1424,7 +1328,3 @@\n-            return (testStats.counts[Status.ERROR] > 0 ? EXIT_TEST_ERROR\n-                    : testStats.counts[Status.FAILED] > 0 ? EXIT_TEST_FAILED\n-                    : testStats.counts[Status.PASSED] == 0 && !foundEmptyGroup ? EXIT_NO_TESTS\n-                    : errors != 0 ? EXIT_FAULT\n-                    : EXIT_OK);\n-\n-        } finally {\n+            \/\/ Before we install our own security manager (which will restrict access\n+            \/\/ to the system properties), take a copy of the system properties.\n+            TestEnvironment.addDefaultPropTable(\"(system properties)\", System.getProperties());\n@@ -1432,7 +1332,9 @@\n-            if (jcovManager.isEnabled()) {\n-                jcovManager.stopGrabber();\n-                if (jcovManager.results.exists()) {\n-                    jcovManager.writeReport();\n-                    out.println(\"JCov report written to \" + canon(new File(jcovManager.report, \"index.html\")));\n-                } else {\n-                    out.println(\"Note: no jcov results found; no report generated\");\n+            if (guiFlag) {\n+                showTool(params);\n+                return EXIT_OK;\n+            } else {\n+                try {\n+                    boolean quiet = (multiRun && !(verbose != null && verbose.multiRun));\n+                    testStats.addAll(batchHarness(params, quiet));\n+                } finally {\n+                    checkLockFiles(params.getWorkDirectory().getRoot(), \"done\");\n@@ -1441,1 +1343,2 @@\n-\n+            if (verbose != null && verbose.multiRun)\n+                out.println();\n@@ -1443,1 +1346,0 @@\n-    }\n@@ -1445,7 +1347,3 @@\n-    private void patchModulesInVMOpts(File modules) {\n-        if (modules.exists()) {\n-            List<String> instrMods = new ArrayList<>();\n-            for (File module : modules.listFiles()) {\n-                if (module.isDirectory() && !module.getName().equals(\"java.base\")) {\n-                    instrMods.add(module.getName());\n-                }\n+        if (multiRun) {\n+            if (verbose != null && verbose.multiRun) {\n+                out.println(\"Overall summary:\");\n@@ -1453,19 +1351,7 @@\n-            for (File module : modules.listFiles()) {\n-                if (module.isDirectory()) {\n-                    String patchOption = module.getName() + \"=\" + module.getAbsolutePath();\n-                    if (module.getName().equals(\"java.base\")) {\n-                        patchOption += File.pathSeparator + jcovManager.jcov_network_saver_jar;\n-\n-                        \/\/ export jcov package to instrumented modules\n-                        if (!instrMods.isEmpty()) {\n-                            testVMOpts.add(\"--add-exports\");\n-                            String exportOption = \"java.base\/\"\n-                                    + JCovManager.JCOV_EXPORT_PACKAGE\n-                                    + \"=\"\n-                                    + StringUtils.join(instrMods, \",\");\n-                            testVMOpts.add(exportOption);\n-                        }\n-                    }\n-                    testVMOpts.add(\"--patch-module\");\n-                    testVMOpts.add(patchOption);\n-                }\n+            testStats.showResultStats(out);\n+            if (reportMode != ReportMode.NONE) {\n+                RegressionReporter r = new RegressionReporter(out);\n+                r.report(testManager);\n+            }\n+            if (!reportOnlyFlag) {\n+                out.println(\"Results written to \" + canon(workDirArg.toFile()));\n@@ -1474,0 +1360,6 @@\n+\n+        return (testStats.counts[Status.ERROR] > 0 ? EXIT_TEST_ERROR\n+                : testStats.counts[Status.FAILED] > 0 ? EXIT_TEST_FAILED\n+                : testStats.counts[Status.PASSED] == 0 && !foundEmptyGroup ? EXIT_NO_TESTS\n+                : errors != 0 ? EXIT_FAULT\n+                : EXIT_OK);\n@@ -1834,8 +1726,0 @@\n-            for (String o: testVMOpts) {\n-                if (o.startsWith(\"-Xrunjcov\")) {\n-                    if (!testVMOpts.contains(\"-XX:+EnableJVMPIInstructionStartEvent\"))\n-                        testVMOpts.add(\"-XX:+EnableJVMPIInstructionStartEvent\");\n-                    break;\n-                }\n-            }\n-\n@@ -2456,2 +2340,0 @@\n-    JCovManager jcovManager;\n-\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":74,"deletions":192,"binary":false,"changes":266,"status":"modified"},{"patch":"@@ -48,41 +48,0 @@\n-help.jcov.name=JCov-related options\n-help.jcov.desc=\\\n-    jtreg provides support for using the jcov code coverage tool to gather \\\n-    code coverage information while tests are being run. At a minimum, you \\\n-    must specify where to find the classes to be monitored, and where to find \\\n-    source code for those classes. For more details, see the JCov User Guide \\\n-    and the command line help for the jcov programs: \\\n-    Instr, Grabber, GrabberManager and RepGen.\\n\n-\n-help.jcov.jcov_classes.desc=\\\n-    Specify where to find the classes to be monitored.  The classes will be \\\n-    statically instrumented in a temporary directory, and prefixed to the \\\n-    system boot class path.\n-help.jcov.jcov_classes.arg=<directory>\n-help.jcov.jcov_exclude.desc=\\\n-    Specify a pattern for the classes not to be monitored. Default is none.\n-help.jcov.jcov_exclude.arg=<regexp>\n-help.jcov.jcov_include.desc=\\\n-    Specify a pattern for the classes to be monitored. Default is all classes.\n-help.jcov.jcov_include.arg=<regexp>\n-help.jcov.jcov_include_list.desc=\\\n-    Specify a file containing patterns for the classes to be monitored. \\\n-    Each line of the file should contain a single regular expression.\n-help.jcov.jcov_include_list.arg=<file>\n-help.jcov.jcov_print_env.desc=\\\n-    Enable a debugging option to view the settings for each jcov command \\\n-    that is executed.\n-help.jcov.jcov_source.desc=\\\n-    Specify where to find the source code for the classes to be monitored. \\\n-    The source code will be used when generating the final report.\n-help.jcov.jcov_source.arg=<searchpath>\n-help.jcov.jcov_patch.desc=\\\n-    Specify a patch file to be used to generate a coverage report for the \\\n-    lines modified in the patch. A summary will be printed to the console, \\\n-    with details being written to text\/patch.txt in the main report directory.\n-help.jcov.jcov_patch.arg=<patch-file>\n-help.jcov.jcov_verbose.desc=\\\n-    Enable verbose output from the jcov tools that are executed.\n-help.jcov.jcov_verbosemore.desc=\\\n-    Enable the most verbose output from the jcov tools that are executed.\n-\n@@ -112,2 +71,0 @@\n-help.jdk.Xrunjcov.desc=Options for running jcov\n-help.jdk.Xrunjcov.arg=*\n@@ -453,3 +410,0 @@\n-jcov.error.reading.file=Error reading file {0}: {1}\n-jcov.file.not.found=File not found: {0}\n-\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-#\n-# Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# This target collects coverage data for jtreg itself, by creating\n-# an instrumented copy of jtreg.jar, then running the jtreg tests\n-# (as defined by \"make test\"), collecting the results with the grabber\n-# and finally generating a report.\n-\n-\n-COVDIR = $(BUILDDIR)\/coverage\n-\n-coverage:\n-\t$(RM) $(COVDIR)\n-\t$(MAKE) BUILDDIR=$(COVDIR)\/work\n-\t$(JCOV) instr -template $(COVDIR)\/template.xml $(COVDIR)\/work\/images\/jtreg\/lib\/jtreg.jar\n-\techo \"Class-Path: javatest.jar jh.jar jcov_network_saver.jar\" > $(COVDIR)\/manifest\n-\t$(JAR) umf $(COVDIR)\/manifest $(COVDIR)\/work\/images\/jtreg\/lib\/jtreg.jar\n-\t$(JCOV) grabber -verbose -template $(COVDIR)\/template.xml -output $(COVDIR)\/results.xml &\n-\tsleep 5\n-\t- $(MAKE) BUILDDIR=$(COVDIR)\/work -k test\n-\t$(JCOV) grabberManager -stop\n-\t$(JCOV) repgen -source $(TOPDIR)\/src\/share\/classes -output $(COVDIR)\/report $(COVDIR)\/results.xml\n-\n-\t\n","filename":"test\/coverage.gmk","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -26,8 +26,0 @@\n-ifdef JCOV_HOME\n-    JCOV_JARS=\\\n-\t-Djcov.jar=$(JCOV_HOME)\/lib\/jcov.jar \\\n-\t-Djcov_network_saver.jar=$(JCOV_HOME)\/lib\/jcov_network_saver.jar\n-else \n-    STATIC_JCOV_KEYS=\\\n-\t$(GREP) help.jcov $(JAVADIR)\/com\/sun\/javatest\/regtest\/tool\/i18n.properties | $(SED) -e 's\/\\(.*\\)=.*\/i18n: \\1\/' >> $(@:%.ok=%.log)\n-endif\n@@ -55,1 +47,0 @@\n-\t\t$(JCOV_JARS) \\\n@@ -58,1 +49,0 @@\n-\t$(STATIC_JCOV_KEYS)\n","filename":"test\/i18n\/i18n.com.sun.javatest.regtest.gmk","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-#\n-# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#----------------------------------------------------------------------\n-\n-$(BUILDDIR)\/jcov.othervm.ok \\\n-$(BUILDDIR)\/jcov.agentvm.ok: \\\n-                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/jcov.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/jcov_network_saver.jar \n-\t$(RM) $(@:%.ok=%\/lib) $(@:%.ok=%\/work) $(@:%.ok=%\/report)\n-\t$(MKDIR) -p $(@:%.ok=%\/lib)\n-\t$(JDK8HOME)\/bin\/javac -d $(@:%.ok=%\/lib) -Xlint -Werror \\\n-\t\t`find $(TESTDIR)\/jcov\/src\/ -name \\*.java`\n-\t$(JDK8HOME)\/bin\/java \\\n-\t\t-Djavatest.regtest.showCmd=true \\\n-\t\t-Djavatest.regtest.debugChild=true \\\n-\t\t-Djavatest.regtest.showJCov=true \\\n-\t\t-Djavatest.regtest.traceAgent=true \\\n-\t\t-jar $(ABS_JTREG_IMAGEJARDIR)\/jtreg.jar \\\n-\t\t-w:$(@:%.ok=%\/work) \\\n-\t\t-r:$(@:%.ok=%\/report) \\\n-\t\t$(@:$(BUILDDIR)\/jcov.%.ok=-%) \\\n-\t\t-jcov\/classes:$(@:%.ok=%\/lib) \\\n-\t\t-jcov\/source:$(TESTDIR)\/jcov\/src\/ \\\n-\t\t$(TESTDIR)\/jcov\/test\/ \\\n-\t\t> $(@:%.ok=%\/log 2>&1) \\\n-\t    || (cat $(@:%.ok=%\/log) ; exit 1)\n-\tif [ ! -r $(@:%.ok=%\/work)\/jcov\/template.xml ]; then exit 1; fi\n-\tif [ ! -r $(@:%.ok=%\/work)\/jcov\/results.xml ]; then exit 1; fi\n-\tif [ ! -r $(@:%.ok=%\/work)\/jcov\/classes\/com\/acme\/Library.class ]; then exit 1; fi\n-\tif [ ! -r $(@:%.ok=%\/report)\/jcov\/index.html ]; then exit 1; fi\n-\tif [ ! -r $(@:%.ok=%\/report)\/jcov\/com\/acme\/Library.html ]; then exit 1; fi\n-\techo $@ passed at `date` > $@\n-\n-ifdef JCOV_HOME\n-\n-TESTS.jtreg += \\\n-\t$(BUILDDIR)\/jcov.othervm.ok \\\n-\t$(BUILDDIR)\/jcov.agentvm.ok\n-endif #JCOV_HOME\n","filename":"test\/jcov\/jcov.gmk","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.acme;\n-\n-import java.util.*;\n-\n-public class Library {\n-    public Library() {\n-        System.out.println(\"creating library\");\n-    }\n-\n-    public void add(String s) {\n-        list.add(s);\n-    }\n-\n-    public void remove(String s) {\n-        list.remove(s);\n-    }\n-\n-    List<String> list = new ArrayList<String>();\n-}\n","filename":"test\/jcov\/src\/com\/acme\/Library.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"","filename":"test\/jcov\/test\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- *\/\n-\n-import com.acme.Library;  \/\/ will be on bootclasspath\n-\n-public class Test {\n-    public static void main(String... args) {\n-        new Test().run();\n-    }\n-\n-    void run() {\n-        Library l = new Library();\n-        l.add(\"abc\");\n-        l.add(\"def\");\n-    }\n-}\n-\n","filename":"test\/jcov\/test\/Test.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-#\n-# Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-ifdef JCOV_HOME\n-\n-$(BUILDDIR)\/jcovtest.ok: \\\n-\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n-\t$(RM) $(BUILDDIR)\/jcov\n-\t$(MKDIR) $(BUILDDIR)\/jcov\n-\t$(JCOV) Instr \\\n-\t\t-include com\/sun\/javatest\/regtest\/.\\* \\\n-\t\t-template $(BUILDDIR)\/jcov\/template.xml \\\n-\t\t-implantrt $(JCOV_HOME)\/lib\/jcov_network_saver.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n-\t$(JCOV) Grabber \\\n-\t\t-output $(BUILDDIR)\/jcov\/result.xml \\\n-\t\t-template $(BUILDDIR)\/jcov\/template.xml & \\\n-\t$(MAKE) test ; \\\n-\t$(JCOV) GrabberManager -stop\n-\t$(JCOV) RepGen \\\n-\t\t-sourcepath $(JAVADIR) \\\n-\t\t-output $(BUILDDIR)\/jcov\/report \\\n-\t\t$(BUILDDIR)\/jcov\/result.xml\n-\techo \"test passed at `date`\" > $@\n-\t\n-\n-# convenience target\n-test.jcov: $(BUILDDIR)\/jcovtest.ok\n-\n-endif\n-\n","filename":"test\/jcovtest.gmk","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"}]}