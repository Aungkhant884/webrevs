{"files":[{"patch":"@@ -137,3 +137,2 @@\n-                cleanup.next = prev;\n-                ResourceCleanup newSegment = (ResourceCleanup) FST.compareAndExchangeRelease(this, prev, cleanup);\n-                if (newSegment == ResourceCleanup.CLOSED_LIST) {\n+                if (prev == ResourceCleanup.CLOSED_LIST) {\n+                    cleanup.next = null; \/\/ Sanity, as long as two threads can't add same `cleanup` it's ok to release next\n@@ -142,2 +141,0 @@\n-                } else if (newSegment == prev) {\n-                    return; \/\/victory\n@@ -145,0 +142,4 @@\n+                cleanup.next = prev;\n+                if (FST.compareAndSet(this, prev, cleanup)) {\n+                    return; \/\/victory\n+                };\n@@ -154,1 +155,4 @@\n-            if (FST.getAcquire(this) != ResourceCleanup.CLOSED_LIST) {\n+            \/\/\n+            \/\/ That's a speculative check\n+            ResourceCleanup prev = (ResourceCleanup) FST.getAcquire(this);\n+            if (prev != ResourceCleanup.CLOSED_LIST) {\n@@ -156,1 +160,0 @@\n-                ResourceCleanup prev = null;\n@@ -158,3 +161,2 @@\n-                    prev = (ResourceCleanup) FST.getAcquire(this);\n-                    \/\/ no need to check for DUMMY, since only one thread can get here!\n-                    if (FST.weakCompareAndSetRelease(this, prev, ResourceCleanup.CLOSED_LIST)) {\n+                    \/\/ do atomic CAS (with full fence), to prevent races with add method\n+                    if (FST.compareAndSet(this, prev, ResourceCleanup.CLOSED_LIST)) {\n@@ -163,0 +165,2 @@\n+                    \/\/ Refresh prev\n+                    prev = (ResourceCleanup) FST.getAcquire(this);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SharedScope.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}