{"files":[{"patch":"@@ -242,0 +242,28 @@\n+    @Test(dataProvider = \"scopes\")\n+    public void testScopeHandles(Supplier<ResourceScope> scopeFactory) {\n+        ResourceScope scope = scopeFactory.get();\n+        acquireRecursive(scope, 5);\n+        if (!scope.isImplicit()) {\n+            scope.close();\n+        }\n+    }\n+\n+    private void acquireRecursive(ResourceScope scope, int acquireCount) {\n+        ResourceScope.Handle handle = scope.acquire();\n+        try {\n+            if (acquireCount > 0) {\n+                \/\/ recursive acquire\n+                acquireRecursive(scope, acquireCount - 1);\n+            }\n+            if (!scope.isImplicit()) {\n+                scope.close();\n+                fail();\n+            }\n+        } catch (IllegalStateException ex) {\n+            \/\/ ok\n+        }\n+        handle.close();\n+        handle.close(); \/\/ make sure it's idempotent\n+        handle.close(); \/\/ make sure it's idempotent\n+    }\n+\n@@ -266,0 +294,10 @@\n+\n+    @DataProvider\n+    static Object[][] scopes() {\n+        return new Object[][] {\n+                { (Supplier<ResourceScope>)ResourceScope::newConfinedScope },\n+                { (Supplier<ResourceScope>)ResourceScope::newSharedScope },\n+                { (Supplier<ResourceScope>)ResourceScope::newImplicitScope },\n+                { (Supplier<ResourceScope>)ResourceScope::globalScope }\n+        };\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestResourceScope.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"}]}