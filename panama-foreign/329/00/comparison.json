{"files":[{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -33,0 +33,1 @@\n+import jdk.internal.jextract.impl.LayoutUtils.CanonicalABIType;\n@@ -42,0 +43,2 @@\n+import static jdk.internal.jextract.impl.LayoutUtils.CANONICAL_FIELD;\n+\n@@ -98,1 +101,1 @@\n-            Bool(\"_Bool\", CSupport.C_BOOL),\n+            Bool(\"_Bool\", CLinker.C_CHAR.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_CHAR)),\n@@ -102,1 +105,1 @@\n-            Char(\"char\", CSupport.C_CHAR),\n+            Char(\"char\", CLinker.C_CHAR.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_CHAR)),\n@@ -114,1 +117,1 @@\n-            Short(\"short\", CSupport.C_SHORT),\n+            Short(\"short\", CLinker.C_SHORT.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_SHORT)),\n@@ -118,1 +121,1 @@\n-            Int(\"int\", CSupport.C_INT),\n+            Int(\"int\", CLinker.C_INT.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_INT)),\n@@ -122,1 +125,1 @@\n-            Long(\"long\", CSupport.C_LONG),\n+            Long(\"long\", CLinker.C_LONG.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_LONG)),\n@@ -126,1 +129,1 @@\n-            LongLong(\"long long\", CSupport.C_LONGLONG),\n+            LongLong(\"long long\", CLinker.C_LONGLONG.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_LONGLONG)),\n@@ -134,1 +137,1 @@\n-            Float(\"float\", CSupport.C_FLOAT),\n+            Float(\"float\", CLinker.C_FLOAT.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_FLOAT)),\n@@ -138,1 +141,1 @@\n-            Double(\"double\",CSupport.C_DOUBLE),\n+            Double(\"double\",CLinker.C_DOUBLE.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_DOUBLE)),\n@@ -142,1 +145,1 @@\n-            LongDouble(\"long double\", CSupport.C_LONGDOUBLE),\n+            LongDouble(\"long double\", CLinker.C_LONGDOUBLE.withAttribute(CANONICAL_FIELD, CanonicalABIType.C_LONGDOUBLE)),\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/incubator\/jextract\/Type.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -94,1 +94,1 @@\n-        return CSupport.toJavaStringRestricted(value);\n+        return CLinker.toJavaStringRestricted(value);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/EvalResult.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -82,1 +82,1 @@\n-            MemoryHandles.asAddressVarHandle(CSupport.C_POINTER.varHandle(long.class));\n+            MemoryHandles.asAddressVarHandle(CLinker.C_POINTER.varHandle(long.class));\n@@ -87,2 +87,2 @@\n-            MemorySegment src = CSupport.toCString(file, scope);\n-            MemorySegment cargs = scope.allocateArray(CSupport.C_POINTER, args.length);\n+            MemorySegment src = CLinker.toCString(file, scope);\n+            MemorySegment cargs = scope.allocateArray(CLinker.C_POINTER, args.length);\n@@ -90,1 +90,1 @@\n-                MemoryAccess.setAddressAtIndex(cargs, i, CSupport.toCString(args[i], scope));\n+                MemoryAccess.setAddressAtIndex(cargs, i, CLinker.toCString(args[i], scope));\n@@ -92,1 +92,1 @@\n-            MemorySegment outAddress = scope.allocate(CSupport.C_POINTER);\n+            MemorySegment outAddress = scope.allocate(CLinker.C_POINTER);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Index.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import jdk.incubator.foreign.CSupport;\n-import jdk.incubator.foreign.ForeignLinker;\n+import jdk.incubator.foreign.CLinker;\n@@ -42,0 +41,1 @@\n+    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n@@ -44,1 +44,1 @@\n-            CSupport.toCString(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY)\n+            CLinker.toCString(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY)\n@@ -52,4 +52,3 @@\n-                ForeignLinker abi = CSupport.getSystemLinker();\n-                String putenv = abi.name().equals(CSupport.Win64.NAME) ?\n-                        \"_putenv\" : \"putenv\";\n-                MethodHandle PUT_ENV = abi.downcallHandle(LibraryLookup.ofDefault().lookup(putenv),\n+                CLinker linker = CLinker.getInstance();\n+                String putenv = IS_WINDOWS ? \"_putenv\" : \"putenv\";\n+                MethodHandle PUT_ENV = linker.downcallHandle(LibraryLookup.ofDefault().lookup(putenv),\n@@ -57,1 +56,1 @@\n-                                FunctionDescriptor.of(CSupport.C_INT, CSupport.C_POINTER));\n+                                FunctionDescriptor.of(CLinker.C_INT, CLinker.C_POINTER));\n@@ -75,1 +74,1 @@\n-        String str = CSupport.toJavaStringRestricted(buf);\n+        String str = CLinker.toJavaStringRestricted(buf);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/LibClang.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -55,4 +55,4 @@\n-        try (MemorySegment file = MemorySegment.allocateNative(CSupport.C_POINTER);\n-             MemorySegment line = MemorySegment.allocateNative(CSupport.C_INT);\n-             MemorySegment col = MemorySegment.allocateNative(CSupport.C_INT);\n-             MemorySegment offset = MemorySegment.allocateNative(CSupport.C_INT)) {\n+        try (MemorySegment file = MemorySegment.allocateNative(CLinker.C_POINTER);\n+             MemorySegment line = MemorySegment.allocateNative(CLinker.C_INT);\n+             MemorySegment col = MemorySegment.allocateNative(CLinker.C_INT);\n+             MemorySegment offset = MemorySegment.allocateNative(CLinker.C_INT)) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceLocation.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -66,1 +66,1 @@\n-        try (MemorySegment pathStr = CSupport.toCString(path.toAbsolutePath().toString())) {\n+        try (MemorySegment pathStr = CLinker.toCString(path.toAbsolutePath().toString())) {\n@@ -92,2 +92,2 @@\n-                MemoryAccess.setAddress(start.asSlice(FILENAME_OFFSET), CSupport.toCString(inMemoryFiles[i].file, scope));\n-                MemoryAccess.setAddress(start.asSlice(CONTENTS_OFFSET), CSupport.toCString(inMemoryFiles[i].contents, scope));\n+                MemoryAccess.setAddress(start.asSlice(FILENAME_OFFSET), CLinker.toCString(inMemoryFiles[i].file, scope));\n+                MemoryAccess.setAddress(start.asSlice(CONTENTS_OFFSET), CLinker.toCString(inMemoryFiles[i].contents, scope));\n@@ -123,2 +123,2 @@\n-        MemorySegment p = MemorySegment.allocateNative(CSupport.C_POINTER);\n-        MemorySegment pCnt = MemorySegment.allocateNative(CSupport.C_INT);\n+        MemorySegment p = MemorySegment.allocateNative(CLinker.C_POINTER);\n+        MemorySegment pCnt = MemorySegment.allocateNative(CLinker.C_INT);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -112,1 +112,1 @@\n-        try (MemorySegment cfname = CSupport.toCString(fieldName)) {\n+        try (MemorySegment cfname = CLinker.toCString(fieldName)) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h$constants.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h$constants_0.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h$constants_1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n@@ -644,1 +644,1 @@\n-    private static final MemorySegment CINDEX_VERSION_STRING$SEGMENT_CONSTANT_ = CSupport.toCString(\"0.59\");\n+    private static final MemorySegment CINDEX_VERSION_STRING$SEGMENT_CONSTANT_ = CLinker.toCString(\"0.59\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h$constants_2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,1 @@\n-import jdk.incubator.foreign.CSupport;\n-import jdk.incubator.foreign.ForeignLinker;\n+import jdk.incubator.foreign.CLinker;\n@@ -44,1 +43,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -49,1 +47,3 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.C_DOUBLE;\n+import static jdk.incubator.foreign.CLinker.C_LONGLONG;\n+import static jdk.incubator.foreign.CLinker.C_POINTER;\n@@ -53,1 +53,1 @@\n-    private final static ForeignLinker ABI = CSupport.getSystemLinker();\n+    private final static CLinker LINKER = CLinker.getInstance();\n@@ -106,1 +106,1 @@\n-                        ABI.downcallHandle(addr, mt, fdesc);\n+                        LINKER.downcallHandle(addr, mt, fdesc);\n@@ -111,1 +111,1 @@\n-        return ABI.upcallStub(handle, fdesc);\n+        return LINKER.upcallStub(handle, fdesc);\n@@ -190,1 +190,1 @@\n-            MethodHandle mh = ABI.downcallHandle(symbol, mt, f);\n+            MethodHandle mh = LINKER.downcallHandle(symbol, mt, f);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.foreign.GroupLayout;\n@@ -33,0 +34,3 @@\n+import jdk.incubator.foreign.SequenceLayout;\n+import jdk.incubator.foreign.ValueLayout;\n+import jdk.internal.jextract.impl.LayoutUtils.CanonicalABIType;\n@@ -53,0 +57,1 @@\n+import java.util.ArrayList;\n@@ -56,0 +61,1 @@\n+import java.util.Optional;\n@@ -57,0 +63,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -61,0 +69,1 @@\n+import static jdk.internal.jextract.impl.LayoutUtils.CANONICAL_FIELD;\n@@ -69,0 +78,5 @@\n+    private static final ClassDesc CD_MEMORY_LAYOUT = desc(MemoryLayout.class);\n+    private static final ClassDesc CD_Constable = desc(Constable.class);\n+    private static final ClassDesc CD_GROUP_LAYOUT = desc(GroupLayout.class);\n+    private static final ClassDesc CD_SEQUENCE_LAYOUT = desc(SequenceLayout.class);\n+    private static final ClassDesc CD_FUNCTION_DESC = desc(FunctionDescriptor.class);\n@@ -167,1 +181,2 @@\n-        DirectMethodHandleDesc MH_makeCString = findRuntimeHelperBootstrap(\n+        DirectMethodHandleDesc MH_makeCString = MethodHandleDesc.ofMethod(\n+                Kind.INTERFACE_STATIC,\n@@ -170,3 +185,1 @@\n-                methodType(\n-                        MemorySegment.class,\n-                        String.class)\n+                desc(methodType(MemorySegment.class, String.class))\n@@ -301,0 +314,6 @@\n+        if (constable instanceof MemoryLayout) {\n+            return (T) describeLayout((MemoryLayout) constable);\n+        } else if (constable instanceof FunctionDescriptor) {\n+            return (T) describeDescriptor((FunctionDescriptor) constable);\n+        }\n+\n@@ -304,0 +323,114 @@\n+    private static final MethodHandleDesc MH_VOID_FUNCTION\n+        = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.STATIC, CD_FUNCTION_DESC, \"ofVoid\",\n+                MethodTypeDesc.of(CD_FUNCTION_DESC, CD_MEMORY_LAYOUT.arrayType()));\n+\n+    private static final MethodHandleDesc MH_FUNCTION\n+        = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.STATIC, CD_FUNCTION_DESC, \"of\",\n+                MethodTypeDesc.of(CD_FUNCTION_DESC, CD_MEMORY_LAYOUT, CD_MEMORY_LAYOUT.arrayType()));\n+\n+    private static ConstantDesc describeDescriptor(FunctionDescriptor descriptor) {\n+        List<ConstantDesc> constants = new ArrayList<>();\n+        boolean hasReturn = descriptor.returnLayout().isPresent();\n+        constants.add(hasReturn ? MH_FUNCTION : MH_VOID_FUNCTION);\n+        if (hasReturn) {\n+            constants.add(describeLayout(descriptor.returnLayout().get()));\n+        }\n+        for (MemoryLayout argLayout : descriptor.argumentLayouts()) {\n+            constants.add(describeLayout(argLayout));\n+        }\n+        return DynamicConstantDesc.ofNamed(\n+            ConstantDescs.BSM_INVOKE, \"function\", CD_FUNCTION_DESC, constants.toArray(ConstantDesc[]::new));\n+    }\n+\n+    private static ConstantDesc describeLayout(MemoryLayout layout) {\n+        if (layout instanceof GroupLayout) {\n+            return describeGroupLayout((GroupLayout) layout);\n+        } else if (layout instanceof SequenceLayout) {\n+            return describeSequenceLayout((SequenceLayout) layout);\n+        } else if(layout instanceof ValueLayout) {\n+            return describeValueLayout((ValueLayout) layout);\n+        }\n+\n+        return layout.describeConstable().orElseThrow();\n+    }\n+\n+    private static final MethodHandleDesc MH_WITH_BIT_ALIGNMENT\n+        = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_VIRTUAL, CD_MEMORY_LAYOUT, \"withBitAlignment\",\n+                MethodTypeDesc.of(CD_MEMORY_LAYOUT, CD_long));\n+\n+    private static final MethodHandleDesc MH_WITH_ATTRIBUTE\n+        = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_VIRTUAL, CD_MEMORY_LAYOUT, \"withAttribute\",\n+                MethodTypeDesc.of(CD_MEMORY_LAYOUT, CD_String, CD_Constable));\n+\n+    private static <T> DynamicConstantDesc<T> decorateLayoutConstant(MemoryLayout layout, DynamicConstantDesc<T> desc) {\n+        return decorateLayoutConstant(layout, desc, layout.attributes());\n+    }\n+\n+    private static <T> DynamicConstantDesc<T> decorateLayoutConstant(MemoryLayout layout, DynamicConstantDesc<T> desc,\n+                                                                     Stream<String> attributes) {\n+        if (!hasNaturalAlignment(layout)) {\n+            desc = DynamicConstantDesc.ofNamed(BSM_INVOKE, \"withBitAlignment\", desc.constantType(), MH_WITH_BIT_ALIGNMENT,\n+                    desc, layout.bitAlignment());\n+        }\n+        for (String name : attributes.collect(Collectors.toList())) {\n+            Constable value = layout.attribute(name).get();\n+            desc = DynamicConstantDesc.ofNamed(BSM_INVOKE, \"withAttribute\", desc.constantType(), MH_WITH_ATTRIBUTE,\n+                    desc, name, value.describeConstable().orElseThrow());\n+        }\n+\n+        return desc;\n+    }\n+\n+    private static boolean hasNaturalAlignment(MemoryLayout layout) {\n+        return layout.hasSize() && layout.bitSize() == layout.bitAlignment();\n+    }\n+\n+    private static final MethodHandleDesc MH_STRUCT\n+        = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofStruct\",\n+                MethodTypeDesc.of(CD_GROUP_LAYOUT, CD_MEMORY_LAYOUT.arrayType()));\n+\n+    private static final MethodHandleDesc MH_UNION\n+        = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofUnion\",\n+                MethodTypeDesc.of(CD_GROUP_LAYOUT, CD_MEMORY_LAYOUT.arrayType()));\n+\n+    private static ConstantDesc describeGroupLayout(GroupLayout layout) {\n+        List<MemoryLayout> elements = layout.memberLayouts();\n+        ConstantDesc[] constants = new ConstantDesc[1 + elements.size()];\n+        constants[0] = layout.isStruct() ? MH_STRUCT : MH_UNION;\n+        for (int i = 0 ; i < elements.size() ; i++) {\n+            constants[i + 1] = describeLayout(elements.get(i));\n+        }\n+        return decorateLayoutConstant(layout, DynamicConstantDesc.ofNamed(\n+                ConstantDescs.BSM_INVOKE, layout.isStruct() ? \"struct\" : \"union\",\n+                CD_GROUP_LAYOUT, constants));\n+    }\n+\n+    private static final MethodHandleDesc MH_SIZED_SEQUENCE\n+        = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofSequence\",\n+                MethodTypeDesc.of(CD_SEQUENCE_LAYOUT, CD_long, CD_MEMORY_LAYOUT));\n+\n+    private static final MethodHandleDesc MH_UNSIZED_SEQUENCE\n+         = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofSequence\",\n+                MethodTypeDesc.of(CD_SEQUENCE_LAYOUT, CD_MEMORY_LAYOUT));\n+\n+    private static ConstantDesc describeSequenceLayout(SequenceLayout layout) {\n+        return decorateLayoutConstant(layout, layout.elementCount().isPresent() ?\n+            DynamicConstantDesc.ofNamed(ConstantDescs.BSM_INVOKE, \"value\",\n+                    CD_SEQUENCE_LAYOUT, MH_SIZED_SEQUENCE,\n+                    layout.elementCount().getAsLong(), describeLayout(layout.elementLayout())) :\n+            DynamicConstantDesc.ofNamed(ConstantDescs.BSM_INVOKE, \"value\",\n+                    CD_SEQUENCE_LAYOUT, MH_UNSIZED_SEQUENCE,\n+                    describeLayout(layout.elementLayout())));\n+    }\n+\n+    private static ConstantDesc describeValueLayout(ValueLayout layout) {\n+        Optional<Constable> constantNameOp = layout.attribute(CANONICAL_FIELD);\n+        if (constantNameOp.isPresent()) {\n+            CanonicalABIType canonicalABIType = (CanonicalABIType) constantNameOp.get();\n+            return decorateLayoutConstant(layout, canonicalABIType.descriptor(),\n+                layout.attributes().filter(attr -> !CANONICAL_FIELD.equals(attr) && !attr.startsWith(\"abi\/\")));\n+        }\n+\n+        return layout.describeConstable().orElseThrow();\n+    }\n+\n@@ -393,1 +526,1 @@\n-                    mt.describeConstable().orElseThrow()\n+                    desc(mt)\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ClassConstantHelper.java","additions":138,"deletions":5,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n-import jdk.incubator.foreign.CSupport;\n-import jdk.incubator.foreign.ForeignLinker;\n+import jdk.incubator.foreign.CLinker;\n@@ -33,0 +32,1 @@\n+import jdk.incubator.foreign.ValueLayout;\n@@ -36,0 +36,2 @@\n+\n+import java.lang.constant.DynamicConstantDesc;\n@@ -39,0 +41,2 @@\n+import static java.lang.constant.ConstantDescs.BSM_GET_STATIC_FINAL;\n+\n@@ -43,1 +47,4 @@\n-    private static ForeignLinker abi = CSupport.getSystemLinker();\n+    public static final String CANONICAL_FIELD = \"jextract\/constant_name\";\n+    private static final ValueLayout POINTER_LAYOUT = CLinker.C_POINTER\n+            .withAttribute(CANONICAL_FIELD, CanonicalABIType.C_POINTER);\n+\n@@ -91,4 +98,1 @@\n-                if (!abi.name().equals(CSupport.SysV.NAME)) {\n-                    throw new UnsupportedOperationException(\"unsupported: \" + t.kind());\n-                }\n-                return CSupport.SysV.C_COMPLEX_LONGDOUBLE;\n+                throw new UnsupportedOperationException(\"unsupported: \" + t.kind());\n@@ -114,1 +118,1 @@\n-                return CSupport.C_POINTER;\n+                return POINTER_LAYOUT;\n@@ -141,1 +145,1 @@\n-                return CSupport.C_POINTER;\n+                return POINTER_LAYOUT;\n@@ -205,8 +209,37 @@\n-        switch ((int)size) {\n-            case 8: return Primitive.Kind.Char;\n-            case 16: return Primitive.Kind.Short;\n-            case 32: return Primitive.Kind.Int;\n-            case 64: return abi.name().equals(CSupport.Win64.NAME) ?\n-                    Primitive.Kind.LongLong : Primitive.Kind.Long;\n-            default:\n-                throw new IllegalStateException(\"Cannot infer container layout\");\n+        return switch ((int) size) {\n+            case 8 -> Primitive.Kind.Char;\n+            case 16 -> Primitive.Kind.Short;\n+            case 32 -> Primitive.Kind.Int;\n+            case 64 -> Primitive.Kind.LongLong;\n+            default -> throw new IllegalStateException(\"Cannot infer container layout\");\n+        };\n+    }\n+\n+    public enum CanonicalABIType {\n+        C_CHAR(canonicalLayoutConstantDesc(\"C_CHAR\")),\n+        C_SHORT(canonicalLayoutConstantDesc(\"C_SHORT\")),\n+        C_INT(canonicalLayoutConstantDesc(\"C_INT\")),\n+        C_LONG(canonicalLayoutConstantDesc(\"C_LONG\")),\n+        C_LONGLONG(canonicalLayoutConstantDesc(\"C_LONGLONG\")),\n+        C_FLOAT(canonicalLayoutConstantDesc(\"C_FLOAT\")),\n+        C_DOUBLE(canonicalLayoutConstantDesc(\"C_DOUBLE\")),\n+        C_LONGDOUBLE(canonicalLayoutConstantDesc(\"C_LONGDOUBLE\")),\n+        C_POINTER(canonicalLayoutConstantDesc(\"C_POINTER\"));\n+\n+        private final DynamicConstantDesc<ValueLayout> descriptor;\n+\n+        CanonicalABIType(DynamicConstantDesc<ValueLayout> descriptor) {\n+            this.descriptor = descriptor;\n+        }\n+\n+        public DynamicConstantDesc<ValueLayout> descriptor() {\n+            return descriptor;\n+        }\n+\n+        private static DynamicConstantDesc<ValueLayout> canonicalLayoutConstantDesc(String name) {\n+            return DynamicConstantDesc.ofNamed(\n+                BSM_GET_STATIC_FINAL,\n+                name,\n+                ValueLayout.class.describeConstable().orElseThrow(),\n+                CLinker.class.describeConstable().orElseThrow()\n+            );\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/LayoutUtils.java","additions":50,"deletions":17,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                ClassDesc.of(pkgName, \"RuntimeHelper\"), ClassDesc.of(\"jdk.incubator.foreign\", \"CSupport\"),\n+                ClassDesc.of(pkgName, \"RuntimeHelper\"), ClassDesc.of(\"jdk.incubator.foreign\", \"CLinker\"),\n@@ -114,16 +114,1 @@\n-    private static String getCLangConstantsHolder() {\n-        String prefix = \"jdk.incubator.foreign.CSupport.\";\n-        String abi = CSupport.getSystemLinker().name();\n-        switch (abi) {\n-            case CSupport.SysV.NAME:\n-                return prefix + \"SysV\";\n-            case CSupport.Win64.NAME:\n-                return prefix + \"Win64\";\n-            case CSupport.AArch64.NAME:\n-                return prefix + \"AArch64\";\n-            default:\n-                throw new UnsupportedOperationException(\"Unsupported ABI: \" + abi);\n-        }\n-    }\n-\n-    static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();\n+    static final String C_LANG_CONSTANTS_HOLDER = \"jdk.incubator.foreign.CLinker\";\n@@ -254,2 +239,2 @@\n-        return CSupport.C_LONGDOUBLE.bitSize() == 128\n-            && CSupport.C_LONGDOUBLE.equals(layout);\n+        return CLinker.C_LONGDOUBLE.bitSize() == 128\n+            && CLinker.C_LONGDOUBLE.equals(layout);\n@@ -291,1 +276,1 @@\n-            argLayouts[argLayouts.length - 1] = CSupport.C_VA_LIST;\n+            argLayouts[argLayouts.length - 1] = CLinker.C_VA_LIST;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.incubator.foreign.CSupport;\n@@ -36,0 +35,2 @@\n+import jdk.internal.jextract.impl.LayoutUtils.CanonicalABIType;\n+\n@@ -44,1 +45,0 @@\n-import java.util.ArrayList;\n@@ -51,0 +51,1 @@\n+import static jdk.internal.jextract.impl.LayoutUtils.CANONICAL_FIELD;\n@@ -55,12 +56,0 @@\n-    private static final String ABI_CLASS_ATTR;\n-    private static final int CONSTANTS_PER_CLASS = Integer.getInteger(\"jextract.constants.per.class\", 1000);\n-\n-    static {\n-        String abi = CSupport.getSystemLinker().name();\n-        ABI_CLASS_ATTR = switch (abi) {\n-            case CSupport.SysV.NAME -> CSupport.SysV.CLASS_ATTRIBUTE_NAME;\n-            case CSupport.Win64.NAME -> CSupport.Win64.CLASS_ATTRIBUTE_NAME;\n-            case CSupport.AArch64.NAME -> CSupport.AArch64.CLASS_ATTRIBUTE_NAME;\n-            default -> throw new UnsupportedOperationException(\"Unsupported Foreign Linker: \" + abi);\n-        };\n-    }\n@@ -393,2 +382,2 @@\n-            if (l == CSupport.SysV.C_COMPLEX_LONGDOUBLE) {\n-                append(\"C_COMPLEX_LONGDOUBLE\");\n+            if (((GroupLayout) l).isStruct()) {\n+                append(\"MemoryLayout.ofStruct(\\n\");\n@@ -396,15 +385,6 @@\n-                if (((GroupLayout) l).isStruct()) {\n-                    append(\"MemoryLayout.ofStruct(\\n\");\n-                } else {\n-                    append(\"MemoryLayout.ofUnion(\\n\");\n-                }\n-                incrAlign();\n-                String delim = \"\";\n-                for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {\n-                    append(delim);\n-                    indent();\n-                    emitLayoutString(e);\n-                    delim = \",\\n\";\n-                }\n-                append(\"\\n\");\n-                decrAlign();\n+                append(\"MemoryLayout.ofUnion(\\n\");\n+            }\n+            incrAlign();\n+            String delim = \"\";\n+            for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {\n+                append(delim);\n@@ -412,1 +392,2 @@\n-                append(\")\");\n+                emitLayoutString(e);\n+                delim = \",\\n\";\n@@ -414,0 +395,4 @@\n+            append(\"\\n\");\n+            decrAlign();\n+            indent();\n+            append(\")\");\n@@ -474,1 +459,1 @@\n-        append(\" = CSupport.toCString(\\\"\");\n+        append(\" = CLinker.toCString(\\\"\");\n@@ -531,31 +516,4 @@\n-        if (matchLayout(vl, CSupport.C_BOOL)) {\n-            return \"C_BOOL\";\n-        } else if (matchLayout(vl, CSupport.C_CHAR)) {\n-            return \"C_CHAR\";\n-        } else if (matchLayout(vl, CSupport.C_SHORT)) {\n-            return \"C_SHORT\";\n-        } else if (matchLayout(vl, CSupport.C_INT)) {\n-            return \"C_INT\";\n-        } else if (matchLayout(vl, CSupport.C_LONG)) {\n-            return \"C_LONG\";\n-        } else if (matchLayout(vl, CSupport.C_LONGLONG)) {\n-            return \"C_LONGLONG\";\n-        } else if (matchLayout(vl, CSupport.C_FLOAT)) {\n-            return \"C_FLOAT\";\n-        } else if (matchLayout(vl, CSupport.C_DOUBLE)) {\n-            return \"C_DOUBLE\";\n-        } else if (matchLayout(vl, CSupport.C_LONGDOUBLE)) {\n-            return \"C_LONGDOUBLE\";\n-        } else if (matchLayout(vl, CSupport.C_POINTER)) {\n-            return \"C_POINTER\";\n-        } else {\n-            throw new RuntimeException(\"should not reach here, problematic layout: \" + vl);\n-        }\n-    }\n-\n-    private static boolean matchLayout(ValueLayout a, ValueLayout b) {\n-        if (a == b) return true;\n-        return (a.bitSize() == b.bitSize() &&\n-                a.order() == b.order() &&\n-                a.bitAlignment() == b.bitAlignment() &&\n-                a.attribute(ABI_CLASS_ATTR).equals(b.attribute(ABI_CLASS_ATTR)));\n+        return vl.attribute(CANONICAL_FIELD)\n+            .map(CanonicalABIType.class::cast)\n+            .map(CanonicalABIType::name)\n+            .orElseThrow(() -> new RuntimeException(\"should not reach here, problematic layout: \" + vl));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/SourceConstantHelper.java","additions":22,"deletions":64,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -4,2 +4,1 @@\n-import jdk.incubator.foreign.CSupport;\n-import jdk.incubator.foreign.ForeignLinker;\n+import jdk.incubator.foreign.CLinker;\n@@ -21,1 +20,1 @@\n-import static ${C_LANG}.*;\n+import static jdk.incubator.foreign.CLinker.*;\n@@ -27,1 +26,1 @@\n-    private final static ForeignLinker ABI = CSupport.getSystemLinker();\n+    private final static CLinker LINKER = CLinker.getInstance();\n@@ -80,1 +79,1 @@\n-                        ABI.downcallHandle(addr, mt, fdesc);\n+                        LINKER.downcallHandle(addr, mt, fdesc);\n@@ -85,1 +84,1 @@\n-        return ABI.upcallStub(handle, fdesc);\n+        return LINKER.upcallStub(handle, fdesc);\n@@ -168,1 +167,1 @@\n-            MethodHandle mh = ABI.downcallHandle(symbol, mt, f);\n+            MethodHandle mh = LINKER.downcallHandle(symbol, mt, f);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -113,1 +113,1 @@\n-        return actual -> assertEquals(CSupport.toJavaString(actual), expected);\n+        return actual -> assertEquals(CLinker.toJavaString(actual), expected);\n","filename":"test\/jdk\/tools\/jextract\/ConstantsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -109,2 +109,2 @@\n-        checkField(pointLayout, \"i\", CSupport.C_INT);\n-        checkField(pointLayout, \"j\", CSupport.C_INT);\n+        checkField(pointLayout, \"i\", CLinker.C_INT);\n+        checkField(pointLayout, \"j\", CLinker.C_INT);\n@@ -117,3 +117,3 @@\n-        checkField(point3DLayout, \"i\", CSupport.C_INT);\n-        checkField(point3DLayout, \"j\", CSupport.C_INT);\n-        checkField(point3DLayout, \"k\", CSupport.C_INT);\n+        checkField(point3DLayout, \"i\", CLinker.C_INT);\n+        checkField(point3DLayout, \"j\", CLinker.C_INT);\n+        checkField(point3DLayout, \"k\", CLinker.C_INT);\n","filename":"test\/jdk\/tools\/jextract\/RepeatedDeclsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -57,3 +57,3 @@\n-            checkField(fooLayout, \"x\",  CSupport.C_INT);\n-            checkField(fooLayout, \"y\",  CSupport.C_INT);\n-            checkField(fooLayout, \"z\",  CSupport.C_INT);\n+            checkField(fooLayout, \"x\",  CLinker.C_INT);\n+            checkField(fooLayout, \"y\",  CLinker.C_INT);\n+            checkField(fooLayout, \"z\",  CLinker.C_INT);\n@@ -69,2 +69,2 @@\n-            checkField(foo2Layout, \"i\",  CSupport.C_INT);\n-            checkField(foo2Layout, \"l\",  CSupport.C_LONG);\n+            checkField(foo2Layout, \"i\",  CLinker.C_INT);\n+            checkField(foo2Layout, \"l\",  CLinker.C_LONG);\n@@ -83,2 +83,2 @@\n-            checkField(barLayout, \"f1\",  CSupport.C_FLOAT);\n-            checkField(barLayout, \"f2\",  CSupport.C_FLOAT);\n+            checkField(barLayout, \"f1\",  CLinker.C_FLOAT);\n+            checkField(barLayout, \"f2\",  CLinker.C_FLOAT);\n@@ -94,2 +94,2 @@\n-            checkField(bar2Layout, \"f\",  CSupport.C_FLOAT);\n-            checkField(bar2Layout, \"d\",  CSupport.C_DOUBLE);\n+            checkField(bar2Layout, \"f\",  CLinker.C_FLOAT);\n+            checkField(bar2Layout, \"d\",  CLinker.C_DOUBLE);\n","filename":"test\/jdk\/tools\/jextract\/Test8240811.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -54,2 +54,2 @@\n-            checkField(intOrFloatLayout, \"i\",  CSupport.C_INT);\n-            checkField(intOrFloatLayout, \"f\", CSupport.C_FLOAT);\n+            checkField(intOrFloatLayout, \"i\",  CLinker.C_INT);\n+            checkField(intOrFloatLayout, \"f\", CLinker.C_FLOAT);\n","filename":"test\/jdk\/tools\/jextract\/UniondeclTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import static jdk.incubator.foreign.CSupport.C_INT;\n-import static jdk.incubator.foreign.CSupport.C_POINTER;\n+import static jdk.incubator.foreign.CLinker.C_INT;\n+import static jdk.incubator.foreign.CLinker.C_POINTER;\n","filename":"test\/jdk\/tools\/jextract\/incompleteArray\/IncompleteArrayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"test\/jdk\/tools\/jextract\/test8241925\/LibTest8241925Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"test\/jdk\/tools\/jextract\/test8244959\/Test8244959.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"test\/jdk\/tools\/jextract\/test8245003\/Test8245003.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"test\/jdk\/tools\/jextract\/test8246341\/LibTest8246341Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static jdk.incubator.foreign.CSupport.*;\n+import static jdk.incubator.foreign.CLinker.*;\n","filename":"test\/jdk\/tools\/jextract\/test8252016\/Test8252016.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -56,1 +56,1 @@\n-            MemorySegment seg = scope.allocateArray(CSupport.C_INT, array);\n+            MemorySegment seg = scope.allocateArray(CLinker.C_INT, array);\n","filename":"test\/jdk\/tools\/jextract\/test8252121\/Test8252121.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -57,1 +57,1 @@\n-        CSupport.freeMemoryRestricted(addr);\n+        CLinker.freeMemoryRestricted(addr);\n","filename":"test\/jdk\/tools\/jextract\/test8253102\/LibTest8253102Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -55,1 +55,1 @@\n-        MemorySegment seg = RuntimeHelper.asArrayRestricted(addr, CSupport.C_INT, 6);\n+        MemorySegment seg = RuntimeHelper.asArrayRestricted(addr, CLinker.C_INT, 6);\n","filename":"test\/jdk\/tools\/jextract\/test8253159\/LibTest8253159Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,6 +53,6 @@\n-import static jdk.incubator.foreign.CSupport.C_CHAR;\n-import static jdk.incubator.foreign.CSupport.C_DOUBLE;\n-import static jdk.incubator.foreign.CSupport.C_FLOAT;\n-import static jdk.incubator.foreign.CSupport.C_INT;\n-import static jdk.incubator.foreign.CSupport.C_LONGLONG;\n-import static jdk.incubator.foreign.CSupport.C_SHORT;\n+import static jdk.incubator.foreign.CLinker.C_CHAR;\n+import static jdk.incubator.foreign.CLinker.C_DOUBLE;\n+import static jdk.incubator.foreign.CLinker.C_FLOAT;\n+import static jdk.incubator.foreign.CLinker.C_INT;\n+import static jdk.incubator.foreign.CLinker.C_LONGLONG;\n+import static jdk.incubator.foreign.CLinker.C_SHORT;\n","filename":"test\/jdk\/tools\/jextract\/testClassGen\/TestClassGeneration.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.CLinker;\n@@ -90,13 +90,13 @@\n-        checkField(g, \"sc\", CSupport.C_CHAR);\n-        checkField(g, \"uc\", CSupport.C_CHAR);\n-        checkField(g, \"s\",  CSupport.C_SHORT);\n-        checkField(g, \"us\", CSupport.C_SHORT);\n-        checkField(g, \"i\",  CSupport.C_INT);\n-        checkField(g, \"ui\", CSupport.C_INT);\n-        checkField(g, \"l\",  CSupport.C_LONG);\n-        checkField(g, \"ul\", CSupport.C_LONG);\n-        checkField(g, \"ll\", CSupport.C_LONGLONG);\n-        checkField(g, \"ull\",CSupport.C_LONGLONG);\n-        checkField(g, \"f\",  CSupport.C_FLOAT);\n-        checkField(g, \"d\",  CSupport.C_DOUBLE);\n-        checkField(g, \"ld\", CSupport.C_LONGDOUBLE);\n+        checkField(g, \"sc\", CLinker.C_CHAR);\n+        checkField(g, \"uc\", CLinker.C_CHAR);\n+        checkField(g, \"s\",  CLinker.C_SHORT);\n+        checkField(g, \"us\", CLinker.C_SHORT);\n+        checkField(g, \"i\",  CLinker.C_INT);\n+        checkField(g, \"ui\", CLinker.C_INT);\n+        checkField(g, \"l\",  CLinker.C_LONG);\n+        checkField(g, \"ul\", CLinker.C_LONG);\n+        checkField(g, \"ll\", CLinker.C_LONGLONG);\n+        checkField(g, \"ull\",CLinker.C_LONGLONG);\n+        checkField(g, \"f\",  CLinker.C_FLOAT);\n+        checkField(g, \"d\",  CLinker.C_DOUBLE);\n+        checkField(g, \"ld\", CLinker.C_LONGDOUBLE);\n","filename":"test\/jdk\/tools\/jextract\/testStruct\/LibStructTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import static jdk.incubator.foreign.CLinker.C_VA_LIST;\n@@ -81,1 +82,1 @@\n-        try (VaList vaList = VaList.make(b ->\n+        try (CLinker.VaList vaList = CLinker.VaList.make(b ->\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}