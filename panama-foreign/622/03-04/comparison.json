{"files":[{"patch":"@@ -158,2 +158,1 @@\n- * they have originated from. Let {@code H} be a heap segment, and {@code AT} be the type of the Java array\n- * backing {@code H} and {@code A} be the alignment of the addresses produced by {@code H}; then:\n+ * they have originated from, as shown in the following table:\n@@ -161,10 +160,27 @@\n- * <ul>\n- *     <li>if {@code AT = boolean[]}, then {@code A = 1}\n- *     <li>if {@code AT = byte[]}, then {@code A = 1}\n- *     <li>if {@code AT = short[]}, then {@code A = 2}\n- *     <li>if {@code AT = char[]}, then {@code A = 2}\n- *     <li>if {@code AT = int[]}, then {@code A = 4}\n- *     <li>if {@code AT = float[]}, then {@code A = 4}\n- *     <li>if {@code AT = long[]}, then {@code A = 8}\n- *     <li>if {@code AT = double[]}, then {@code A = 8}\n- * <\/ul>\n+ * <blockquote><table class=\"plain\">\n+ * <caption style=\"display:none\">Array type of an array backing a segment and its address alignment<\/caption>\n+ * <thead>\n+ * <tr>\n+ *     <th scope=\"col\">Array type<\/th>\n+ *     <th scope=\"col\">Alignment<\/th>\n+ * <\/tr>\n+ * <\/thead>\n+ * <tbody>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code boolean[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 1}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code byte[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 1}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code char[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 2}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code short[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 2}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code int[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 4}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code float[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 4}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code long[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 8}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code double[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 8}<\/td><\/tr>\n+ * <\/tbody>\n+ * <\/table><\/blockquote>\n@@ -1045,6 +1061,2 @@\n-        if (srcElementLayout.byteAlignment() > srcElementLayout.byteSize()) {\n-            throw new IllegalArgumentException(\"Source layout alignment greater than its size\");\n-        }\n-        if (dstElementLayout.byteAlignment() > dstElementLayout.byteSize()) {\n-            throw new IllegalArgumentException(\"Destination layout alignment greater than its size\");\n-        }\n+        Utils.checkNotHyperAligned(srcElementLayout, \"Source layout alignment greater than its size\");\n+        Utils.checkNotHyperAligned(dstElementLayout, \"Destination layout alignment greater than its size\");\n@@ -1402,0 +1414,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1418,0 +1431,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1438,0 +1452,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1454,0 +1469,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1473,0 +1489,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1489,0 +1506,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1508,0 +1526,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1524,0 +1543,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1543,0 +1563,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1559,0 +1580,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1578,0 +1600,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1594,0 +1617,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1613,0 +1637,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1629,0 +1654,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -1663,3 +1689,1 @@\n-        if (srcLayout.byteAlignment() > srcLayout.byteSize()) {\n-            throw new IllegalArgumentException(\"Source layout alignment greater than its size\");\n-        }\n+        Utils.checkNotHyperAligned(srcLayout, \"Source layout alignment greater than its size\");\n@@ -1713,3 +1737,1 @@\n-        if (dstLayout.byteAlignment() > dstLayout.byteSize()) {\n-            throw new IllegalArgumentException(\"Destination layout alignment greater than its size\");\n-        }\n+        Utils.checkNotHyperAligned(dstLayout, \"Source layout alignment greater than its size\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":46,"deletions":24,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -127,3 +127,1 @@\n-        if (elementLayout.byteAlignment() > elementLayout.byteSize()) {\n-            throw new IllegalArgumentException(\"Element layout alignment greater than its size\");\n-        }\n+        Utils.checkNotHyperAligned(elementLayout, \"Element layout alignment greater than its size\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -270,0 +270,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -278,0 +279,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -286,0 +288,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -294,0 +297,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -302,0 +306,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -310,0 +315,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -318,0 +324,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -326,0 +333,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -334,0 +342,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -342,0 +351,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -350,0 +360,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -358,0 +369,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -366,0 +378,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n@@ -374,0 +387,1 @@\n+        Utils.checkNotHyperAligned(layout, \"Layout alignment greater than its size\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -181,0 +181,7 @@\n+\n+    @ForceInline\n+    public static void checkNotHyperAligned(MemoryLayout layout, String msg) {\n+        if (layout.byteAlignment() > layout.byteSize()) {\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -256,0 +256,12 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedSrc() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(new byte[] { 1, 2, 3, 4 }, 0, segment, JAVA_BYTE.withBitAlignment(16), 0, 4);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedDst() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, JAVA_BYTE.withBitAlignment(16), 0, new byte[] { 1, 2, 3, 4 }, 0, 4);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            assertAligned(align, layout, () -> MemorySegment.copy(arr, 0, segment, layout, 0, 1));\n+            assertAligned(align, layout, () -> MemorySegment.copy(segment, layout, 0, arr, 0, 1));\n@@ -62,0 +62,1 @@\n+            MemorySegment other = segmentFactory.apply(arr);\n@@ -63,1 +64,0 @@\n-                MemorySegment other = segmentFactory.apply(arr);\n@@ -66,0 +66,3 @@\n+            assertAligned(align, layout, () -> {\n+                MemorySegment.copy(other, layout, 0, segment, layout, 0, 1);\n+            });\n@@ -82,2 +85,0 @@\n-        } catch (Throwable ex) {\n-            fail(\"Unexpected exception\" + ex);\n@@ -95,11 +96,17 @@\n-    record SegmentsAndAlignment(MemorySegment segment, int align) {\n-        static SegmentsAndAlignment[] HEAP_SEGMENTS_AND_ALIGNMENTS = {\n-                new SegmentsAndAlignment(MemorySegment.ofArray(new byte[8]), 1),\n-                new SegmentsAndAlignment(MemorySegment.ofArray(new short[4]), 2),\n-                new SegmentsAndAlignment(MemorySegment.ofArray(new char[4]), 2),\n-                new SegmentsAndAlignment(MemorySegment.ofArray(new int[2]), 4),\n-                new SegmentsAndAlignment(MemorySegment.ofArray(new float[2]), 4),\n-                new SegmentsAndAlignment(MemorySegment.ofArray(new long[1]), 8),\n-                new SegmentsAndAlignment(MemorySegment.ofArray(new double[1]), 8),\n-                new SegmentsAndAlignment(MemorySegment.allocateNative(8, ResourceScope.newImplicitScope()), -1),\n-        };\n+    enum SegmentAndAlignment {\n+        HEAP_BYTE(MemorySegment.ofArray(new byte[8]), 1),\n+        HEAP_SHORT(MemorySegment.ofArray(new short[4]), 2),\n+        HEAP_CHAR(MemorySegment.ofArray(new char[4]), 2),\n+        HEAP_INT(MemorySegment.ofArray(new int[2]), 4),\n+        HEAP_FLOAT(MemorySegment.ofArray(new float[2]), 4),\n+        HEAP_LONG(MemorySegment.ofArray(new long[1]), 8),\n+        HEAP_DOUBLE(MemorySegment.ofArray(new double[1]), 8),\n+        NATIVE(MemorySegment.allocateNative(8, ResourceScope.newImplicitScope()), -1);\n+\n+        final MemorySegment segment;\n+        final int align;\n+\n+        SegmentAndAlignment(MemorySegment segment, int align) {\n+            this.segment = segment;\n+            this.align = align;\n+        }\n@@ -111,1 +118,1 @@\n-        for (SegmentsAndAlignment testCase : SegmentsAndAlignment.HEAP_SEGMENTS_AND_ALIGNMENTS) {\n+        for (SegmentAndAlignment testCase : SegmentAndAlignment.values()) {\n","filename":"test\/jdk\/java\/foreign\/TestHeapAlignment.java","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import org.testng.SkipException;\n@@ -43,1 +44,1 @@\n-    static class Accessor<T, X, L> {\n+    static class Accessor<T, X, L extends ValueLayout> {\n@@ -93,1 +94,22 @@\n-        static <L, X> Accessor<MemorySegment, X, L> ofSegment(L layout, X value,\n+        @SuppressWarnings(\"unchecked\")\n+        void testHyperAligned() {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                MemorySegment segment = MemorySegment.allocateNative(64, scope);\n+                T t = transform.apply(segment);\n+                L alignedLayout = (L)layout.withBitAlignment(layout.byteSize() * 8 * 2);\n+                try {\n+                    segmentSetter.set(t, alignedLayout, 0, value);\n+                    fail();\n+                } catch (IllegalArgumentException exception) {\n+                    assertTrue(exception.getMessage().contains(\"greater\"));\n+                }\n+                try {\n+                    segmentGetter.get(t, alignedLayout, 0);\n+                    fail();\n+                } catch (IllegalArgumentException exception) {\n+                    assertTrue(exception.getMessage().contains(\"greater\"));\n+                }\n+            }\n+        }\n+\n+        static <L extends ValueLayout, X> Accessor<MemorySegment, X, L> ofSegment(L layout, X value,\n@@ -99,1 +121,1 @@\n-        static <L, X> Accessor<MemoryAddress, X, L> ofAddress(L layout, X value,\n+        static <L extends ValueLayout, X> Accessor<MemoryAddress, X, L> ofAddress(L layout, X value,\n@@ -116,0 +138,18 @@\n+    @Test(dataProvider = \"segmentAccessors\")\n+    public void testSegmentAccessHyper(String testName, Accessor<?, ?, ?> accessor) {\n+        if (testName.contains(\"index\")) {\n+            accessor.testHyperAligned();\n+        } else {\n+            throw new SkipException(\"Skipping\");\n+        }\n+    }\n+\n+    @Test(dataProvider = \"addressAccessors\")\n+    public void testAddressAccessHyper(String testName, Accessor<?, ?, ?> accessor) {\n+        if (testName.contains(\"index\")) {\n+            accessor.testHyperAligned();\n+        } else {\n+            throw new SkipException(\"Skipping\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import static jdk.incubator.foreign.ValueLayout.JAVA_BYTE;\n@@ -84,2 +85,4 @@\n-    interface Getter<X> {\n-        X get(MemorySegment segment, ValueLayout layout, long index);\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedSrc() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, 0, segment, JAVA_BYTE.withBitAlignment(16), 0, 4);\n@@ -88,2 +91,4 @@\n-    interface Setter<X> {\n-        void set(MemorySegment segment, ValueLayout layout, long index, X val);\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedDst() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, JAVA_BYTE.withBitAlignment(16), 0, segment, 0, 4);\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -130,0 +130,5 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAligned() {\n+        MemorySegment.ofArray(new byte[8]).elements(MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT.withBitAlignment(64)));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}