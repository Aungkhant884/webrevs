{"files":[{"patch":"@@ -190,0 +190,7 @@\n+                .filter(fc -> {\n+                    if (fc.isBitField()) {\n+                        \/\/ only non-empty and named bit fields are generated\n+                        return fc.getBitFieldWidth() != 0 && !fc.spelling().isEmpty();\n+                    }\n+                    return true;\n+                })\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TreeMaker.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemorySegment;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @modules jdk.incubator.jextract\n+ * @build JextractToolRunner\n+ * @bug 8260705\n+ * @summary jextract crash with libbart's types.h\n+ * @run testng\/othervm -Dforeign.restricted=permit Test8260705\n+ *\/\n+public class Test8260705 extends JextractToolRunner {\n+    @Test\n+    public void testPointerFields() {\n+        Path outputPath = getOutputFilePath(\"output\");\n+        Path headerFile = getInputFilePath(\"test8260705.h\");\n+        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        try(Loader loader = classLoader(outputPath)) {\n+            Class<?> FooClass = loader.loadClass(\"test8260705_h$Foo\");\n+            checkMethod(FooClass, \"c$get\", byte.class, MemorySegment.class);\n+            checkMethod(FooClass, \"c$get\", byte.class, MemorySegment.class, long.class);\n+            checkMethod(FooClass, \"c$set\", void.class, MemorySegment.class, byte.class);\n+            checkMethod(FooClass, \"c$set\", void.class, MemorySegment.class, long.class, byte.class);\n+\n+            Class<?> Foo2Class = loader.loadClass(\"test8260705_h$Foo2\");\n+            checkMethod(Foo2Class, \"z$get\", int.class, MemorySegment.class);\n+            checkMethod(Foo2Class, \"z$get\", int.class, MemorySegment.class, long.class);\n+            checkMethod(Foo2Class, \"z$set\", void.class, MemorySegment.class, int.class);\n+            checkMethod(Foo2Class, \"z$set\", void.class, MemorySegment.class, long.class, int.class);\n+            checkMethod(Foo2Class, \"w$get\", int.class, MemorySegment.class);\n+            checkMethod(Foo2Class, \"w$get\", int.class, MemorySegment.class, long.class);\n+            checkMethod(Foo2Class, \"w$set\", void.class, MemorySegment.class, int.class);\n+            checkMethod(Foo2Class, \"w$set\", void.class, MemorySegment.class, long.class, int.class);\n+\n+            assertNotNull(loader.loadClass(\"test8260705_h$Foo3\"));\n+\n+            Class<?> Foo4Class = loader.loadClass(\"test8260705_h$Foo4\");\n+            assertTrue(sizeof(Foo4Class) == 8L);\n+\n+            Class<?> Foo5Class = loader.loadClass(\"test8260705_h$Foo5\");\n+            assertTrue(sizeof(Foo5Class) == 4L);\n+\n+        } finally {\n+            deleteDir(outputPath);\n+        }\n+    }\n+\n+    private long sizeof(Class<?> cls) {\n+        Method m = findMethod(cls, \"sizeof\");\n+        try {\n+            return (long)m.invoke(null);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/tools\/jextract\/Test8260705.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+struct Foo {\n+    int: 0;\n+    char c;\n+};\n+\n+struct Foo2 {\n+    int z;\n+    int: 16;\n+    int y:16;\n+    int w;\n+};\n+\n+struct Foo3 {\n+    int: 0;\n+    int: 32;\n+};\n+\n+struct Foo4 {\n+  int    a:3;\n+  int    b:2;\n+  int     :0; \/\/ Force alignment to next boundary.\n+  int    c:4;\n+  int    d:3;\n+};\n+\n+struct Foo5 {\n+  int    a:3;\n+  int    b:2;\n+  int    c:4;\n+  int    d:3;\n+};\n","filename":"test\/jdk\/tools\/jextract\/test8260705.h","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}