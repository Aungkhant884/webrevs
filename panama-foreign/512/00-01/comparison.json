{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess.Scope;\n@@ -825,3 +826,3 @@\n-                public Object acquireScope(Buffer targetBuffer, boolean async) {\n-                    var targetScope = targetBuffer.scope();\n-                    if (targetScope == null || targetScope.isImplicit()) {\n+                public Scope.Handle acquireScope(Buffer buffer, boolean async) {\n+                    var scope = buffer.scope();\n+                    if (scope == null || scope.isImplicit()) {\n@@ -830,1 +831,1 @@\n-                    if (async && targetScope.ownerThread() != null) {\n+                    if (async && scope.ownerThread() != null) {\n@@ -833,1 +834,1 @@\n-                    return targetScope.acquire();\n+                    return scope.acquire();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess.Scope;\n@@ -94,1 +95,1 @@\n-    Object acquireScope(Buffer targetBuffer, boolean async);\n+    Scope.Handle acquireScope(Buffer buffer, boolean async);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -101,0 +101,4 @@\n+       interface Handle {\n+            Scope scope();\n+        }\n+\n@@ -107,1 +111,3 @@\n-        Object acquire();\n+        Handle acquire();\n+\n+        void release(Handle handle);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess.Scope;\n@@ -467,1 +468,1 @@\n-    static Object acquireScope(ByteBuffer bb, boolean async) {\n+    static Scope.Handle acquireScope(ByteBuffer bb, boolean async) {\n@@ -471,1 +472,1 @@\n-    private static void releaseScope(Object handle) {\n+    private static void releaseScope(Scope.Handle handle) {\n@@ -475,1 +476,1 @@\n-            ((AutoCloseable)handle).close();\n+            handle.scope().release(handle);\n@@ -527,1 +528,1 @@\n-    static record Releaser(Object handle) implements Runnable {\n+    static record Releaser(Scope.Handle handle) implements Runnable {\n@@ -530,2 +531,2 @@\n-        static Runnable of(Object handle) { return new Releaser(handle); }\n-        static Runnable ofNullable(Object handle) {\n+        static Runnable of(Scope.Handle handle) { return new Releaser(handle); }\n+        static Runnable ofNullable(Scope.Handle handle) {\n@@ -538,1 +539,1 @@\n-    private static long bufferAddress(ByteBuffer buf) {\n+    static long bufferAddress(ByteBuffer buf) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-                    a = ((DirectBuffer)bb).address();\n+                    a = IOUtil.bufferAddress(bb);\n@@ -437,1 +437,1 @@\n-                    a = ((DirectBuffer)dst).address() + pos;\n+                    a = IOUtil.bufferAddress(dst) + pos;\n@@ -711,1 +711,1 @@\n-                    a = ((DirectBuffer)bb).address();\n+                    a = IOUtil.bufferAddress(bb);\n@@ -714,1 +714,1 @@\n-                    a = ((DirectBuffer)src).address() + pos;\n+                    a = IOUtil.bufferAddress(src) + pos;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousSocketChannelImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    public Handle acquire() {\n+    public HandleImpl acquire() {\n@@ -120,1 +120,1 @@\n-        public ResourceScope scope() {\n+        public ResourceScopeImpl scope() {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ConfinedScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,2 +126,1 @@\n-    @Override\n-    public final void release(Handle handle) {\n+    private final void release0(HandleImpl handle) {\n@@ -133,1 +132,1 @@\n-            ((HandleImpl) handle).close();\n+            handle.close();\n@@ -139,1 +138,14 @@\n-    boolean checkHandle(Handle handle) {\n+    @Override\n+    public final void release(ResourceScope.Handle handle) {\n+        release0((HandleImpl)handle);\n+    }\n+\n+    @Override\n+    public final void release(ScopedMemoryAccess.Scope.Handle handle) {\n+        release0((HandleImpl)handle);\n+    }\n+\n+    @Override\n+    public abstract HandleImpl acquire();\n+\n+    boolean checkHandle(ResourceScope.Handle handle) {\n@@ -146,1 +158,2 @@\n-    interface HandleImpl extends Handle, AutoCloseable {\n+    interface HandleImpl extends ResourceScope.Handle, ScopedMemoryAccess.Scope.Handle {\n+\n@@ -148,0 +161,2 @@\n+        ResourceScopeImpl scope();\n+\n@@ -227,1 +242,1 @@\n-        public Handle acquire() {\n+        public HandleImpl acquire() {\n@@ -242,1 +257,1 @@\n-        boolean checkHandle(Handle handle) {\n+        boolean checkHandle(ResourceScope.Handle handle) {\n@@ -253,1 +268,1 @@\n-            public ResourceScope scope() {\n+            public ResourceScopeImpl scope() {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    public Handle acquire() {\n+    public HandleImpl acquire() {\n@@ -178,1 +178,1 @@\n-        public ResourceScope scope() {\n+        public ResourceScopeImpl scope() {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SharedScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-\n@@ -174,1 +173,1 @@\n-            assertEquals(sc1.write(writeBuffers, 0, 32), expectedCount);\n+            assertEquals(writeNBytes(sc1, writeBuffers, 0, 32, expectedCount), expectedCount);\n@@ -197,1 +196,1 @@\n-            assertEquals(sc1.write(writeBuffers, 0, 32), expectedCount);\n+            assertEquals(writeNBytes(sc1, writeBuffers, 0, 32, expectedCount), expectedCount);\n@@ -211,0 +210,14 @@\n+    static long writeNBytes(SocketChannel channel,\n+                            ByteBuffer[] buffers, int offset, int len,\n+                            long bytes)\n+        throws Exception\n+    {\n+        long total = 0L;\n+        do {\n+            long n = channel.write(buffers, offset, len);\n+            assertTrue(n > 0, \"got:\" + n);\n+            total += n;\n+        } while (total < bytes);\n+        return total;\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/channels\/TestSocketChannels.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"}]}