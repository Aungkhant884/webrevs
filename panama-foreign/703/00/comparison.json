{"files":[{"patch":"@@ -32,4 +32,4 @@\n-    SysV,\n-    Win64,\n-    LinuxAArch64,\n-    MacOsAArch64;\n+    SYS_V,\n+    WIN_64,\n+    LINUX_A_ARCH_64,\n+    MAC_OS_A_ARCH_64;\n@@ -50,1 +50,1 @@\n-                ABI = Win64;\n+                ABI = WIN_64;\n@@ -52,1 +52,1 @@\n-                ABI = SysV;\n+                ABI = SYS_V;\n@@ -56,1 +56,1 @@\n-                ABI = MacOsAArch64;\n+                ABI = MAC_OS_A_ARCH_64;\n@@ -59,1 +59,1 @@\n-                ABI = LinuxAArch64;\n+                ABI = LINUX_A_ARCH_64;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class SystemLookup implements SymbolLookup {\n+public final class SystemLookup implements SymbolLookup {\n@@ -47,1 +47,1 @@\n-    static final SystemLookup INSTANCE = new SystemLookup();\n+    private static final SystemLookup INSTANCE = new SystemLookup();\n@@ -50,1 +50,1 @@\n-    private static final SymbolLookup fallbackLookup = name -> Optional.empty();\n+    private static final SymbolLookup FALLBACK_LOOKUP = name -> Optional.empty();\n@@ -56,1 +56,1 @@\n-    private static final SymbolLookup syslookup = makeSystemLookup();\n+    private static final SymbolLookup SYSTEM_LOOKUP = makeSystemLookup();\n@@ -58,1 +58,1 @@\n-    private static final SymbolLookup makeSystemLookup() {\n+    private static SymbolLookup makeSystemLookup() {\n@@ -61,2 +61,2 @@\n-                case SysV, LinuxAArch64, MacOsAArch64 -> libLookup(libs -> libs.load(jdkLibraryPath(\"syslookup\")));\n-                case Win64 -> makeWindowsLookup(); \/\/ out of line to workaround javac crash\n+                case SYS_V, LINUX_A_ARCH_64, MAC_OS_A_ARCH_64 -> libLookup(libs -> libs.load(jdkLibraryPath(\"syslookup\")));\n+                case WIN_64 -> makeWindowsLookup(); \/\/ out of line to workaround javac crash\n@@ -68,1 +68,1 @@\n-            return fallbackLookup;\n+            return FALLBACK_LOOKUP;\n@@ -122,2 +122,2 @@\n-            case SysV, LinuxAArch64, MacOsAArch64 -> \"lib\";\n-            case Win64 -> \"bin\";\n+            case SYS_V, LINUX_A_ARCH_64, MAC_OS_A_ARCH_64 -> \"lib\";\n+            case WIN_64 -> \"bin\";\n@@ -136,1 +136,1 @@\n-        return syslookup.lookup(name);\n+        return SYSTEM_LOOKUP.lookup(name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.foreign.NativeMemorySegmentImpl;\n@@ -66,1 +65,4 @@\n-public class SharedUtils {\n+public final class SharedUtils {\n+\n+    private SharedUtils() {\n+    }\n@@ -73,1 +75,1 @@\n-    private static final MethodHandle MH_REACHBILITY_FENCE;\n+    private static final MethodHandle MH_REACHABILITY_FENCE;\n@@ -82,1 +84,1 @@\n-            MH_REACHBILITY_FENCE = lookup.findStatic(Reference.class, \"reachabilityFence\",\n+            MH_REACHABILITY_FENCE = lookup.findStatic(Reference.class, \"reachabilityFence\",\n@@ -230,4 +232,4 @@\n-            case Win64 -> Windowsx64Linker.getInstance();\n-            case SysV -> SysVx64Linker.getInstance();\n-            case LinuxAArch64 -> LinuxAArch64Linker.getInstance();\n-            case MacOsAArch64 -> MacOsAArch64Linker.getInstance();\n+            case WIN_64 -> Windowsx64Linker.getInstance();\n+            case SYS_V -> SysVx64Linker.getInstance();\n+            case LINUX_A_ARCH_64 -> LinuxAArch64Linker.getInstance();\n+            case MAC_OS_A_ARCH_64 -> MacOsAArch64Linker.getInstance();\n@@ -300,1 +302,1 @@\n-        return MH_REACHBILITY_FENCE.asType(MethodType.methodType(void.class, type));\n+        return MH_REACHABILITY_FENCE.asType(MethodType.methodType(void.class, type));\n@@ -334,4 +336,4 @@\n-            case Win64 -> Windowsx64Linker.newVaList(actions, session);\n-            case SysV -> SysVx64Linker.newVaList(actions, session);\n-            case LinuxAArch64 -> LinuxAArch64Linker.newVaList(actions, session);\n-            case MacOsAArch64 -> MacOsAArch64Linker.newVaList(actions, session);\n+            case WIN_64 -> Windowsx64Linker.newVaList(actions, session);\n+            case SYS_V -> SysVx64Linker.newVaList(actions, session);\n+            case LINUX_A_ARCH_64 -> LinuxAArch64Linker.newVaList(actions, session);\n+            case MAC_OS_A_ARCH_64 -> MacOsAArch64Linker.newVaList(actions, session);\n@@ -343,4 +345,4 @@\n-            case Win64 -> Windowsx64Linker.newVaListOfAddress(address, session);\n-            case SysV -> SysVx64Linker.newVaListOfAddress(address, session);\n-            case LinuxAArch64 -> LinuxAArch64Linker.newVaListOfAddress(address, session);\n-            case MacOsAArch64 -> MacOsAArch64Linker.newVaListOfAddress(address, session);\n+            case WIN_64 -> Windowsx64Linker.newVaListOfAddress(address, session);\n+            case SYS_V -> SysVx64Linker.newVaListOfAddress(address, session);\n+            case LINUX_A_ARCH_64 -> LinuxAArch64Linker.newVaListOfAddress(address, session);\n+            case MAC_OS_A_ARCH_64 -> MacOsAArch64Linker.newVaListOfAddress(address, session);\n@@ -352,4 +354,4 @@\n-            case Win64 -> Windowsx64Linker.emptyVaList();\n-            case SysV -> SysVx64Linker.emptyVaList();\n-            case LinuxAArch64 -> LinuxAArch64Linker.emptyVaList();\n-            case MacOsAArch64 -> MacOsAArch64Linker.emptyVaList();\n+            case WIN_64 -> Windowsx64Linker.emptyVaList();\n+            case SYS_V -> SysVx64Linker.emptyVaList();\n+            case LINUX_A_ARCH_64 -> LinuxAArch64Linker.emptyVaList();\n+            case MAC_OS_A_ARCH_64 -> MacOsAArch64Linker.emptyVaList();\n@@ -375,1 +377,1 @@\n-    public static class SimpleVaArg {\n+    public static final class SimpleVaArg {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"}]}