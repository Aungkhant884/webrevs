{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import jdk.internal.foreign.MemoryAddressImpl;\n+\n@@ -33,6 +35,0 @@\n-import java.lang.foreign.ValueLayout;\n-import jdk.internal.foreign.MemoryAddressImpl;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n@@ -42,6 +38,0 @@\n-import java.util.Objects;\n-\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-\n-import static java.lang.invoke.MethodType.methodType;\n@@ -202,1 +192,1 @@\n-public abstract class Binding {\n+public interface Binding {\n@@ -210,1 +200,1 @@\n-    public static class Context implements AutoCloseable {\n+    class Context implements AutoCloseable {\n@@ -300,9 +290,1 @@\n-    private final Tag tag;\n-\n-    private Binding(Tag tag) {\n-        this.tag = tag;\n-    }\n-\n-    public Tag tag() {\n-        return tag;\n-    }\n+    Tag tag();\n@@ -310,1 +292,1 @@\n-    public abstract void verify(Deque<Class<?>> stack);\n+    void verify(Deque<Class<?>> stack);\n@@ -312,2 +294,2 @@\n-    public abstract void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                                   BindingInterpreter.LoadFunc loadFunc, Context context);\n+    void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n+                   BindingInterpreter.LoadFunc loadFunc, Context context);\n@@ -325,1 +307,1 @@\n-    public static VMStore vmStore(VMStorage storage, Class<?> type) {\n+    static VMStore vmStore(VMStorage storage, Class<?> type) {\n@@ -330,1 +312,1 @@\n-    public static VMLoad vmLoad(VMStorage storage, Class<?> type) {\n+    static VMLoad vmLoad(VMStorage storage, Class<?> type) {\n@@ -335,1 +317,1 @@\n-    public static BufferStore bufferStore(long offset, Class<?> type) {\n+    static BufferStore bufferStore(long offset, Class<?> type) {\n@@ -341,1 +323,1 @@\n-    public static BufferLoad bufferLoad(long offset, Class<?> type) {\n+    static BufferLoad bufferLoad(long offset, Class<?> type) {\n@@ -347,1 +329,1 @@\n-    public static Copy copy(MemoryLayout layout) {\n+    static Copy copy(MemoryLayout layout) {\n@@ -351,1 +333,1 @@\n-    public static Allocate allocate(MemoryLayout layout) {\n+    static Allocate allocate(MemoryLayout layout) {\n@@ -355,1 +337,1 @@\n-    public static BoxAddress boxAddress() {\n+    static BoxAddress boxAddress() {\n@@ -359,6 +341,2 @@\n-    public static UnboxAddress unboxAddress() {\n-        return UnboxAddress.INSTANCE.get(MemoryAddress.class);\n-    }\n-\n-    public static UnboxAddress unboxAddress(Class<?> carrier) {\n-        return UnboxAddress.INSTANCE.get(carrier);\n+    static UnboxAddress unboxAddress() {\n+        return UnboxAddress.INSTANCE;\n@@ -367,1 +345,1 @@\n-    public static ToSegment toSegment(MemoryLayout layout) {\n+    static ToSegment toSegment(MemoryLayout layout) {\n@@ -371,1 +349,1 @@\n-    public static ToSegment toSegment(long byteSize) {\n+    static ToSegment toSegment(long byteSize) {\n@@ -375,1 +353,1 @@\n-    public static Dup dup() {\n+    static Dup dup() {\n@@ -380,1 +358,1 @@\n-    public static Binding.Builder builder() {\n+    static Binding.Builder builder() {\n@@ -384,13 +362,0 @@\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-        Binding binding = (Binding) o;\n-        return tag == binding.tag;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(tag);\n-    }\n-\n@@ -400,1 +365,1 @@\n-    public static class Builder {\n+    class Builder {\n@@ -443,5 +408,0 @@\n-        public Binding.Builder unboxAddress(Class<?> carrier) {\n-            bindings.add(Binding.unboxAddress(carrier));\n-            return this;\n-        }\n-\n@@ -459,1 +419,1 @@\n-            return new ArrayList<>(bindings);\n+            return List.copyOf(bindings);\n@@ -463,32 +423,3 @@\n-    abstract static class Move extends Binding {\n-        private final VMStorage storage;\n-        private final Class<?> type;\n-\n-        private Move(Tag tag, VMStorage storage, Class<?> type) {\n-            super(tag);\n-            this.storage = storage;\n-            this.type = type;\n-        }\n-\n-        public VMStorage storage() {\n-            return storage;\n-        }\n-\n-        public Class<?> type() {\n-            return type;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            if (!super.equals(o)) return false;\n-            Move move = (Move) o;\n-            return Objects.equals(storage, move.storage) &&\n-                    Objects.equals(type, move.type);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(super.hashCode(), storage, type);\n-        }\n+    interface Move extends Binding {\n+        VMStorage storage();\n+        Class<?> type();\n@@ -502,3 +433,4 @@\n-    public static class VMStore extends Move {\n-        private VMStore(VMStorage storage, Class<?> type) {\n-            super(Tag.VM_STORE, storage, type);\n+    record VMStore(VMStorage storage, Class<?> type) implements Move {\n+        @Override\n+        public Tag tag() {\n+            return Tag.VM_STORE;\n@@ -519,8 +451,0 @@\n-\n-        @Override\n-        public String toString() {\n-            return \"VMStore{\" +\n-                    \"storage=\" + storage() +\n-                    \", type=\" + type() +\n-                    '}';\n-        }\n@@ -534,3 +458,4 @@\n-    public static class VMLoad extends Move {\n-        private VMLoad(VMStorage storage, Class<?> type) {\n-            super(Tag.VM_LOAD, storage, type);\n+    record VMLoad(VMStorage storage, Class<?> type) implements Move {\n+        @Override\n+        public Tag tag() {\n+            return Tag.VM_LOAD;\n@@ -549,8 +474,0 @@\n-\n-        @Override\n-        public String toString() {\n-            return \"VMLoad{\" +\n-                    \"storage=\" + storage() +\n-                    \", type=\" + type() +\n-                    '}';\n-        }\n@@ -559,40 +476,3 @@\n-    private abstract static class Dereference extends Binding {\n-        private final long offset;\n-        private final Class<?> type;\n-\n-        private Dereference(Tag tag, long offset, Class<?> type) {\n-            super(tag);\n-            this.offset = offset;\n-            this.type = type;\n-        }\n-\n-        public long offset() {\n-            return offset;\n-        }\n-\n-        public Class<?> type() {\n-            return type;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            if (!super.equals(o)) return false;\n-            Dereference that = (Dereference) o;\n-            return offset == that.offset &&\n-                    Objects.equals(type, that.type);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(super.hashCode(), offset, type);\n-        }\n-\n-        public VarHandle varHandle() {\n-            \/\/ alignment is set to 1 byte here to avoid exceptions for cases where we do super word\n-            \/\/ copies of e.g. 2 int fields of a struct as a single long, while the struct is only\n-            \/\/ 4-byte-aligned (since it only contains ints)\n-            ValueLayout layout = MemoryLayout.valueLayout(type(), ByteOrder.nativeOrder()).withBitAlignment(8);\n-            return MethodHandles.insertCoordinates(MethodHandles.memorySegmentViewVarHandle(layout), 1, offset);\n-        }\n+    interface Dereference extends Binding {\n+        long offset();\n+        Class<?> type();\n@@ -607,3 +487,4 @@\n-    public static class BufferStore extends Dereference {\n-        private BufferStore(long offset, Class<?> type) {\n-            super(Tag.BUFFER_STORE, offset, type);\n+    record BufferStore(long offset, Class<?> type) implements Dereference {\n+        @Override\n+        public Tag tag() {\n+            return Tag.BUFFER_STORE;\n@@ -628,8 +509,0 @@\n-\n-        @Override\n-        public String toString() {\n-            return \"BufferStore{\" +\n-                    \"offset=\" + offset() +\n-                    \", type=\" + type() +\n-                    '}';\n-        }\n@@ -644,3 +517,4 @@\n-    public static class BufferLoad extends Dereference {\n-        private BufferLoad(long offset, Class<?> type) {\n-            super(Tag.BUFFER_LOAD, offset, type);\n+    record BufferLoad(long offset, Class<?> type) implements Dereference {\n+        @Override\n+        public Tag tag() {\n+            return Tag.BUFFER_LOAD;\n@@ -664,8 +538,0 @@\n-\n-        @Override\n-        public String toString() {\n-            return \"BufferLoad{\" +\n-                    \"offset=\" + offset() +\n-                    \", type=\" + type() +\n-                    '}';\n-        }\n@@ -680,10 +546,1 @@\n-    public static class Copy extends Binding {\n-        private final long size;\n-        private final long alignment;\n-\n-        private Copy(long size, long alignment) {\n-            super(Tag.COPY_BUFFER);\n-            this.size = size;\n-            this.alignment = alignment;\n-        }\n-\n+    record Copy(long size, long alignment) implements Binding {\n@@ -695,8 +552,0 @@\n-        public long size() {\n-            return size;\n-        }\n-\n-        public long alignment() {\n-            return alignment;\n-        }\n-\n@@ -704,6 +553,2 @@\n-        public String toString() {\n-            return \"Copy{\" +\n-                    \"tag=\" + tag() +\n-                    \", size=\" + size +\n-                    \", alignment=\" + alignment +\n-                    '}';\n+        public Tag tag() {\n+            return Tag.COPY_BUFFER;\n@@ -726,15 +571,0 @@\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            if (!super.equals(o)) return false;\n-            Copy copy = (Copy) o;\n-            return size == copy.size &&\n-                    alignment == copy.alignment;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(super.hashCode(), size, alignment);\n-        }\n@@ -747,10 +577,1 @@\n-    public static class Allocate extends Binding {\n-        private final long size;\n-        private final long alignment;\n-\n-        private Allocate(long size, long alignment) {\n-            super(Tag.ALLOC_BUFFER);\n-            this.size = size;\n-            this.alignment = alignment;\n-        }\n-\n+    record Allocate(long size, long alignment) implements Binding {\n@@ -761,8 +582,0 @@\n-        public long size() {\n-            return size;\n-        }\n-\n-        public long alignment() {\n-            return alignment;\n-        }\n-\n@@ -770,6 +583,2 @@\n-        public String toString() {\n-            return \"AllocateBuffer{\" +\n-                    \"tag=\" + tag() +\n-                    \"size=\" + size +\n-                    \", alignment=\" + alignment +\n-                    '}';\n+        public Tag tag() {\n+            return Tag.ALLOC_BUFFER;\n@@ -788,15 +597,0 @@\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            if (!super.equals(o)) return false;\n-            Allocate allocate = (Allocate) o;\n-            return size == allocate.size &&\n-                    alignment == allocate.alignment;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(super.hashCode(), size, alignment);\n-        }\n@@ -810,11 +604,2 @@\n-    public static class UnboxAddress extends Binding {\n-\n-        static final ClassValue<UnboxAddress> INSTANCE = new ClassValue<>() {\n-            @Override\n-            protected UnboxAddress computeValue(Class<?> type) {\n-                return new UnboxAddress(type);\n-            }\n-        };\n-\n-        final Class<?> carrier;\n-        final MethodHandle toAddress;\n+    record UnboxAddress() implements Binding {\n+        static final UnboxAddress INSTANCE = new UnboxAddress();\n@@ -822,8 +607,3 @@\n-        private UnboxAddress(Class<?> carrier) {\n-            super(Tag.UNBOX_ADDRESS);\n-            this.carrier = carrier;\n-            try {\n-                this.toAddress = MethodHandles.lookup().findVirtual(carrier, \"address\", MethodType.methodType(MemoryAddress.class));\n-            } catch (Throwable ex) {\n-                throw new IllegalArgumentException(ex);\n-            }\n+        @Override\n+        public Tag tag() {\n+            return Tag.UNBOX_ADDRESS;\n@@ -835,1 +615,1 @@\n-            SharedUtils.checkType(actualType, carrier);\n+            SharedUtils.checkType(actualType, Addressable.class);\n@@ -844,5 +624,0 @@\n-\n-        @Override\n-        public String toString() {\n-            return \"UnboxAddress{}\";\n-        }\n@@ -856,4 +631,6 @@\n-    public static class BoxAddress extends Binding {\n-        private static final BoxAddress INSTANCE = new BoxAddress();\n-        private BoxAddress() {\n-            super(Tag.BOX_ADDRESS);\n+    record BoxAddress() implements Binding {\n+        static final BoxAddress INSTANCE = new BoxAddress();\n+\n+        @Override\n+        public Tag tag() {\n+            return Tag.BOX_ADDRESS;\n@@ -874,5 +651,0 @@\n-\n-        @Override\n-        public String toString() {\n-            return \"BoxAddress{}\";\n-        }\n@@ -886,13 +658,1 @@\n-    public static class ToSegment extends Binding {\n-        private final long size;\n-        \/\/ FIXME alignment?\n-\n-        public ToSegment(long size) {\n-            super(Tag.TO_SEGMENT);\n-            this.size = size;\n-        }\n-\n-        public long size() {\n-            return size;\n-        }\n-\n+    record ToSegment(long size) implements Binding {\n@@ -903,0 +663,5 @@\n+        @Override\n+        public Tag tag() {\n+            return Tag.TO_SEGMENT;\n+        }\n+\n@@ -917,21 +682,0 @@\n-\n-        @Override\n-        public String toString() {\n-            return \"ToSegemnt{\" +\n-                    \"size=\" + size +\n-                    '}';\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            if (!super.equals(o)) return false;\n-            ToSegment toSegemnt = (ToSegment) o;\n-            return size == toSegemnt.size;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(super.hashCode(), size);\n-        }\n@@ -945,4 +689,6 @@\n-    public static class Dup extends Binding {\n-        private static final Dup INSTANCE = new Dup();\n-        private Dup() {\n-            super(Tag.DUP);\n+    record Dup() implements Binding {\n+        static final Dup INSTANCE = new Dup();\n+\n+        @Override\n+        public Tag tag() {\n+            return Tag.DUP;\n@@ -961,11 +707,0 @@\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            return o != null && getClass() == o.getClass();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"Dup{}\";\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":75,"deletions":340,"binary":false,"changes":415,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                Binding.unboxAddress(Addressable.class),\n+                Binding.unboxAddress(),\n@@ -104,1 +104,1 @@\n-                    Binding.unboxAddress(MemorySegment.class),\n+                    Binding.unboxAddress(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-        if (expectedType != actualType) {\n+        if (!expectedType.isAssignableFrom(actualType)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-                            .unboxAddress(MemorySegment.class);\n+                            .unboxAddress();\n@@ -387,1 +387,1 @@\n-                    bindings.unboxAddress(carrier);\n+                    bindings.unboxAddress();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-                    bindings.unboxAddress(carrier);\n+                    bindings.unboxAddress();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-                            .unboxAddress(MemorySegment.class);\n+                            .unboxAddress();\n@@ -219,1 +219,1 @@\n-                    bindings.unboxAddress(carrier);\n+                    bindings.unboxAddress();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) }\n+            { unboxAddress(), vmStore(r9, long.class) }\n@@ -94,1 +94,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -124,1 +124,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -146,1 +146,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -168,1 +168,1 @@\n-                unboxAddress(MemorySegment.class),\n+                unboxAddress(),\n@@ -206,1 +206,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -209,1 +209,1 @@\n-                unboxAddress(MemorySegment.class),\n+                unboxAddress(),\n@@ -214,1 +214,1 @@\n-                unboxAddress(MemorySegment.class),\n+                unboxAddress(),\n@@ -237,1 +237,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -261,2 +261,2 @@\n-            { unboxAddress(MemorySegment.class), vmStore(r10, long.class) },\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) }\n+            { unboxAddress(), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) }\n@@ -290,2 +290,2 @@\n-            { unboxAddress(MemorySegment.class), vmStore(r10, long.class) },\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -328,1 +328,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -382,3 +382,3 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n-            { copy(struct), unboxAddress(MemorySegment.class), vmStore(r0, long.class) },\n-            { copy(struct), unboxAddress(MemorySegment.class), vmStore(r1, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n+            { copy(struct), unboxAddress(), vmStore(r0, long.class) },\n+            { copy(struct), unboxAddress(), vmStore(r1, long.class) },\n@@ -391,1 +391,1 @@\n-            { copy(struct), unboxAddress(MemorySegment.class), vmStore(stackStorage(0), long.class) },\n+            { copy(struct), unboxAddress(), vmStore(stackStorage(0), long.class) },\n@@ -412,1 +412,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n@@ -435,1 +435,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r9, long.class) },\n+            { unboxAddress(), vmStore(r9, long.class) },\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -99,1 +99,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -130,1 +130,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -160,1 +160,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -190,1 +190,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -215,1 +215,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -246,1 +246,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -281,1 +281,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -338,1 +338,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -381,1 +381,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -403,1 +403,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -462,2 +462,2 @@\n-            { unboxAddress(MemorySegment.class), vmStore(r11, long.class) },\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r11, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -494,1 +494,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) }\n+            { unboxAddress(), vmStore(r10, long.class) }\n@@ -86,1 +86,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -108,1 +108,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -132,1 +132,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -163,1 +163,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -168,1 +168,1 @@\n-                unboxAddress(MemorySegment.class),\n+                unboxAddress(),\n@@ -200,1 +200,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -234,1 +234,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -264,1 +264,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -267,1 +267,1 @@\n-                unboxAddress(MemorySegment.class),\n+                unboxAddress(),\n@@ -295,1 +295,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -316,1 +316,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -340,1 +340,1 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n@@ -369,2 +369,2 @@\n-            { unboxAddress(Addressable.class), vmStore(r10, long.class) },\n-            { copy(struct), unboxAddress(MemorySegment.class), vmStore(rcx, long.class) },\n+            { unboxAddress(), vmStore(r10, long.class) },\n+            { copy(struct), unboxAddress(), vmStore(rcx, long.class) },\n@@ -374,1 +374,1 @@\n-            { copy(struct), unboxAddress(MemorySegment.class), vmStore(stackStorage(0), long.class) },\n+            { copy(struct), unboxAddress(), vmStore(stackStorage(0), long.class) },\n@@ -378,1 +378,1 @@\n-            { copy(struct), unboxAddress(MemorySegment.class), vmStore(stackStorage(4), long.class) },\n+            { copy(struct), unboxAddress(), vmStore(stackStorage(4), long.class) },\n@@ -382,1 +382,1 @@\n-            { copy(struct), unboxAddress(MemorySegment.class), vmStore(stackStorage(8), long.class) },\n+            { copy(struct), unboxAddress(), vmStore(stackStorage(8), long.class) },\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}