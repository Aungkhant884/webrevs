{"files":[{"patch":"@@ -631,1 +631,1 @@\n-         * backed by the global resource scope (see {@link ResourceScope#globalScope()}).\n+         * backed by the {@link ResourceScope#globalScope() global} resource scope.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-     * The returned segment is associated with the global resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment is associated with the {@link ResourceScope#globalScope() global} resource scope.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.internal.ref.CleanerFactory;\n@@ -400,2 +399,0 @@\n-     * @throws UnsupportedOperationException if this segment's contents cannot be copied into a {@link byte[]} instance,\n-     * e.g. its size is greater than {@link Integer#MAX_VALUE}.\n@@ -403,1 +400,2 @@\n-     * thread owning this segment.\n+     * thread owning this segment, or if this segment's contents cannot be copied into a {@link byte[]} instance,\n+     * e.g. its size is greater than {@link Integer#MAX_VALUE}.\n@@ -410,2 +408,0 @@\n-     * @throws UnsupportedOperationException if this segment's contents cannot be copied into a {@link short[]} instance,\n-     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer#MAX_VALUE}.\n@@ -413,1 +409,2 @@\n-     * thread owning this segment.\n+     * thread owning this segment, or if this segment's contents cannot be copied into a {@link short[]} instance,\n+     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer#MAX_VALUE}\n@@ -420,2 +417,0 @@\n-     * @throws UnsupportedOperationException if this segment's contents cannot be copied into a {@link char[]} instance,\n-     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer#MAX_VALUE}.\n@@ -423,1 +418,2 @@\n-     * thread owning this segment.\n+     * thread owning this segment, or if this segment's contents cannot be copied into a {@link char[]} instance,\n+     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer#MAX_VALUE}.\n@@ -430,2 +426,0 @@\n-     * @throws UnsupportedOperationException if this segment's contents cannot be copied into a {@link int[]} instance,\n-     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer#MAX_VALUE}.\n@@ -433,1 +427,2 @@\n-     * thread owning this segment.\n+     * thread owning this segment, or if this segment's contents cannot be copied into a {@link int[]} instance,\n+     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer#MAX_VALUE}.\n@@ -440,2 +435,0 @@\n-     * @throws UnsupportedOperationException if this segment's contents cannot be copied into a {@link float[]} instance,\n-     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer#MAX_VALUE}.\n@@ -443,1 +436,2 @@\n-     * thread owning this segment.\n+     * thread owning this segment, or if this segment's contents cannot be copied into a {@link float[]} instance,\n+     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer#MAX_VALUE}.\n@@ -450,2 +444,0 @@\n-     * @throws UnsupportedOperationException if this segment's contents cannot be copied into a {@link long[]} instance,\n-     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer#MAX_VALUE}.\n@@ -453,1 +445,2 @@\n-     * thread owning this segment.\n+     * thread owning this segment, or if this segment's contents cannot be copied into a {@link long[]} instance,\n+     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer#MAX_VALUE}.\n@@ -460,2 +453,0 @@\n-     * @throws UnsupportedOperationException if this segment's contents cannot be copied into a {@link double[]} instance,\n-     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer#MAX_VALUE}.\n@@ -463,1 +454,2 @@\n-     * thread owning this segment.\n+     * thread owning this segment, or if this segment's contents cannot be copied into a {@link double[]} instance,\n+     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer#MAX_VALUE}.\n@@ -472,4 +464,4 @@\n-     * If the buffer is read-only (see {@link ByteBuffer#isReadOnly()}), the resulting segment will also be read-only\n-     * (see {@link #isReadOnly()}). The scope associated with this segment can either be the <em>global<\/em> resource scope\n-     * (see {@link ResourceScope#globalScope()}), in case the buffer has been created independently, or to some other\n-     * (possibly closeable) resource scope, in case the buffer has been obtained using {@link #asByteBuffer()}.\n+     * If the buffer is {@link ByteBuffer#isReadOnly() read-only}, the resulting segment will also be\n+     * {@link ByteBuffer#isReadOnly() read-only}. The scope associated with this segment can either be the\n+     * {@link ResourceScope#globalScope() global} resource scope, in case the buffer has been created independently,\n+     * or to some other (possibly closeable) resource scope, in case the buffer has been obtained using {@link #asByteBuffer()}.\n@@ -488,1 +480,1 @@\n-     * The returned segment's resource scope is set to the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n@@ -499,1 +491,1 @@\n-     * The returned segment's resource scope is set to the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n@@ -510,1 +502,1 @@\n-     * The returned segment's resource scope is set to the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n@@ -521,1 +513,1 @@\n-     * The returned segment's resource scope is set to the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n@@ -532,1 +524,1 @@\n-     * The returned segment's resource scope is set to the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n@@ -543,1 +535,1 @@\n-     * The returned segment's resource scope is set to the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n@@ -554,1 +546,1 @@\n-     * The returned segment's resource scope is set to the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment's resource scope is set to the {@link ResourceScope#globalScope() global} resource scope.\n@@ -573,2 +565,2 @@\n-     *\n-     * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n+     * <p>\n+     * The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n@@ -593,2 +585,2 @@\n-     *\n-     * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n+     * <p>\n+     * The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n@@ -617,2 +609,2 @@\n-     *\n-     * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n+     * <p>\n+     * The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n@@ -622,1 +614,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n+     * @throws IllegalArgumentException if {@code bytesSize <= 0}.\n@@ -637,2 +629,2 @@\n-     *\n-     * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n+     * <p>\n+     * The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n@@ -643,1 +635,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n+     * @throws IllegalArgumentException if {@code bytesSize <= 0}.\n@@ -654,2 +646,2 @@\n-     *\n-     * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n+     * <p>\n+     * The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n@@ -660,1 +652,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes < 0}, or if {@code alignmentBytes}\n+     * @throws IllegalArgumentException if {@code bytesSize <= 0}, {@code alignmentBytes <= 0}, or if {@code alignmentBytes}\n@@ -672,2 +664,2 @@\n-     *\n-     * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n+     * <p>\n+     * The block of off-heap memory associated with the returned native memory segment is initialized to zero.\n@@ -679,1 +671,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes < 0}, or if {@code alignmentBytes}\n+     * @throws IllegalArgumentException if {@code bytesSize <= 0}, {@code alignmentBytes <= 0}, or if {@code alignmentBytes}\n@@ -688,1 +680,1 @@\n-        if (alignmentBytes < 0 ||\n+        if (alignmentBytes <= 0 ||\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":42,"deletions":50,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -81,3 +81,3 @@\n- * Shared resource scopes (see {@link #ofShared()}), support strong thread-confinement guarantees. A shared resource scope\n- * has no owner thread; as such resources associated with this scope can be accessed by multiple threads. This might be useful\n- * when multiple threads need to access the same resource concurrently (e.g. in the case of parallel processing). For instance, a client\n+ * Shared resource scopes (see {@link #ofShared()}), on the other hand, have no owner thread; as such resources associated\n+ * with this shared resource scopes can be accessed by multiple threads. This might be useful when multiple threads need\n+ * to access the same resource concurrently (e.g. in the case of parallel processing). For instance, a client\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-     * Returns a native allocator which responds to allocation requests by recycling a single segment; that is,\n+     * Returns a segment allocator which responds to allocation requests by recycling a single segment; that is,\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-            throw new UnsupportedOperationException(String.format(\"Segment size is not a multiple of %d. Size: %d\", elemSize, length));\n+            throw new IllegalStateException(String.format(\"Segment size is not a multiple of %d. Size: %d\", elemSize, length));\n@@ -345,1 +345,1 @@\n-            throw new UnsupportedOperationException(String.format(\"Segment is too large to wrap as %s. Size: %d\", typeName, length));\n+            throw new IllegalStateException(String.format(\"Segment is too large to wrap as %s. Size: %d\", typeName, length));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+        checkConfinementIfNeeded();\n@@ -65,0 +66,7 @@\n+    private void checkConfinementIfNeeded() {\n+        Thread segmentThread = segment.scope().ownerThread();\n+        if (segmentThread != null && segmentThread != Thread.currentThread()) {\n+            throw new IllegalStateException(\"Attempt to allocate outside confinement thread\");\n+        }\n+    }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-            expectedExceptions = UnsupportedOperationException.class)\n+            expectedExceptions = IllegalStateException.class)\n@@ -120,1 +120,1 @@\n-            expectedExceptions = UnsupportedOperationException.class)\n+            expectedExceptions = IllegalStateException.class)\n@@ -122,1 +122,1 @@\n-        if (layout.byteSize() == 1) throw new UnsupportedOperationException(); \/\/make it fail\n+        if (layout.byteSize() == 1) throw new IllegalStateException(); \/\/make it fail\n@@ -130,1 +130,1 @@\n-            expectedExceptions = UnsupportedOperationException.class)\n+            expectedExceptions = IllegalStateException.class)\n@@ -132,1 +132,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout);\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofConfined());\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -457,1 +457,1 @@\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    @Test(expectedExceptions = IllegalStateException.class)\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}