{"files":[{"patch":"@@ -61,0 +61,1 @@\n+import static java.lang.invoke.MethodHandles.constant;\n@@ -266,1 +267,1 @@\n-        throw new IllegalArgumentException(\"Size too large: \" + size);\n+        throw new IllegalArgumentException(\"No type for size: \" + size + \" isFloat=\" + useFloat);\n@@ -390,1 +391,1 @@\n-            scopeFilter = insertArguments(identity(Binding.Context.class), 0, Binding.Context.DUMMY);\n+            scopeFilter = constant(Binding.Context.class, Binding.Context.DUMMY);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.MemoryScope;\n@@ -255,7 +256,5 @@\n-                    try (ResourceScope localScope = ResourceScope.ofConfined()) {\n-                        MemorySegment slice = stackPtr().asSegmentRestricted(layout.byteSize(), localScope);\n-                        MemorySegment seg = allocator.allocate(layout);\n-                        seg.copyFrom(slice);\n-                        postAlignStack(layout);\n-                        yield seg;\n-                    }\n+                    MemorySegment slice = stackPtr().asSegmentRestricted(layout.byteSize(), scope());\n+                    MemorySegment seg = allocator.allocate(layout);\n+                    seg.copyFrom(slice);\n+                    postAlignStack(layout);\n+                    yield seg;\n@@ -265,6 +264,4 @@\n-                    try (ResourceScope localScope = ResourceScope.ofConfined()) {\n-                        MemorySegment slice = stackPtr().asSegmentRestricted(layout.byteSize(), localScope);\n-                        Object res = reader.get(slice);\n-                        postAlignStack(layout);\n-                        yield res;\n-                    }\n+                    MemorySegment slice = stackPtr().asSegmentRestricted(layout.byteSize(), scope());\n+                    Object res = reader.get(slice);\n+                    postAlignStack(layout);\n+                    yield res;\n@@ -312,6 +309,4 @@\n-                    try (ResourceScope scope = ResourceScope.ofConfined()) {\n-                        MemorySegment slice = ptr.asSegmentRestricted(layout.byteSize(), scope);\n-                        MemorySegment seg = allocator.allocate(layout);\n-                        seg.copyFrom(slice);\n-                        yield seg;\n-                    }\n+                    MemorySegment slice = ptr.asSegmentRestricted(layout.byteSize(), scope());\n+                    MemorySegment seg = allocator.allocate(layout);\n+                    seg.copyFrom(slice);\n+                    yield seg;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64VaList.java","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.incubator.foreign.SegmentAllocator;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.MemoryScope;\n@@ -233,7 +234,5 @@\n-                    try (ResourceScope localScope = ResourceScope.ofConfined()) {\n-                        MemorySegment slice = stackPtr().asSegmentRestricted(layout.byteSize(), localScope);\n-                        MemorySegment seg = allocator.allocate(layout);\n-                        seg.copyFrom(slice);\n-                        postAlignStack(layout);\n-                        yield seg;\n-                    }\n+                    MemorySegment slice = stackPtr().asSegmentRestricted(layout.byteSize(), scope());\n+                    MemorySegment seg = allocator.allocate(layout);\n+                    seg.copyFrom(slice);\n+                    postAlignStack(layout);\n+                    yield seg;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -121,6 +121,4 @@\n-                    try (ResourceScope localScope = ResourceScope.ofConfined()) {\n-                        MemorySegment struct = structAddr.asSegmentRestricted(layout.byteSize(), localScope);\n-                        MemorySegment seg = allocator.allocate(layout);\n-                        seg.copyFrom(struct);\n-                        yield seg;\n-                    }\n+                    MemorySegment struct = structAddr.asSegmentRestricted(layout.byteSize(), scope());\n+                    MemorySegment seg = allocator.allocate(layout);\n+                    seg.copyFrom(struct);\n+                    yield seg;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(8, 8, scope);\n+            MemorySegment segment = MemorySegment.allocateNative(8, scope);\n@@ -83,1 +83,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(8, 8, scope);\n+            MemorySegment segment = MemorySegment.allocateNative(8, scope);\n","filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,2 +87,1 @@\n-        mh = mh.asSpreader(Object[].class, args.length);\n-        Object res = mh.invoke(args);\n+        Object res = mh.invokeWithArguments(args);\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm TestNativeScope\n+ * @run testng\/othervm TestSegmentAllocators\n@@ -51,1 +51,1 @@\n-public class TestNativeScope {\n+public class TestSegmentAllocators {\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/foreign\/TestNativeScope.java","status":"renamed"},{"patch":"@@ -96,2 +96,1 @@\n-            mh = mh.asSpreader(Object[].class, paramTypes.size() + 1);\n-            Object res = mh.invoke(callArgs);\n+            Object res = mh.invokeWithArguments(callArgs);\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.incubator.foreign.ResourceScope;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,26 +36,0 @@\n-\n-JNIEXPORT jobject JNICALL Java_org_openjdk_bench_jdk_incubator_foreign_CallOverhead_identityStruct\n-  (JNIEnv *env, jclass cls, jobject pointBuf) {\n-    Point *pInput = (Point*)(*env)->GetDirectBufferAddress(env, pointBuf);\n-    Point p = identity_struct(*pInput);\n-    Point *ret = (Point*)malloc(sizeof(Point));\n-    ret->x = p.x;\n-    ret->y = p.y;\n-    return (jobject)(*env)->NewDirectByteBuffer(env, ret, sizeof(Point));\n-}\n-\n-JNIEXPORT jobject JNICALL Java_org_openjdk_bench_jdk_incubator_foreign_CallOverhead_identityStructAlloc\n-  (JNIEnv *env, jclass cls, jobject pointBuf, jobject resBuf) {\n-    Point *pInput = (Point*)(*env)->GetDirectBufferAddress(env, pointBuf);\n-    Point p = identity_struct(*pInput);\n-    Point *pOutput = (Point*)(*env)->GetDirectBufferAddress(env, resBuf);\n-    pOutput->x = p.x;\n-    pOutput->y = p.y;\n-    return resBuf;\n-}\n-\n-JNIEXPORT void JNICALL Java_org_openjdk_bench_jdk_incubator_foreign_CallOverhead_freeStruct\n- (JNIEnv *env, jclass cls, jobject pointBuf) {\n-    void *buf = (void*)(*env)->GetDirectBufferAddress(env, pointBuf);\n-    free(buf);\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libCallOverheadJNI.c","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"}]}