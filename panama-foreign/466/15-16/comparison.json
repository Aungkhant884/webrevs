{"files":[{"patch":"@@ -280,1 +280,2 @@\n-     * platform's default charset, storing the result into a new native memory segment.\n+     * platform's default charset, storing the result into a new native memory segment, associated with\n+     * a fresh {@link ResourceScope#ofDefault() default scope}.\n@@ -297,1 +298,1 @@\n-     * storing the result into a new native memory segment.\n+     * storing the result into a new native memory segment, associated with a fresh {@link ResourceScope#ofDefault() default scope}.\n@@ -316,1 +317,1 @@\n-     * storing the result into a native memory segment allocated using the provided scope.\n+     * storing the result into a native memory segment allocated using the provided allocator.\n@@ -352,1 +353,1 @@\n-     * storing the result into a new native memory segment native memory segment allocated using the provided scope.\n+     * storing the result into a new native memory segment native memory segment allocated using the provided allocator.\n@@ -595,2 +596,1 @@\n-         * The memory segment returned by this method will be allocated using\n-         * {@link MemorySegment#allocateNative(long, long)}, and will have to be closed separately.\n+         * The memory segment returned by this method is associated with a fresh {@link ResourceScope#ofDefault() default scope}.\n@@ -711,2 +711,2 @@\n-         * Constructs a new {@code VaList} using a builder (see {@link Builder}), associated with a fresh shared,\n-         * non-closeable {@link ResourceScope resource scope}.\n+         * Constructs a new {@code VaList} using a builder (see {@link Builder}), associated with a fresh\n+         * a fresh {@link ResourceScope#ofDefault() default scope}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-     * be processed in parallel by multiple threads (if the segment is shared).\n+     * be processed in parallel by multiple threads.\n@@ -557,3 +557,2 @@\n-     * The returned segment is associated with a fresh, shared, resource scope which will be automatically closed when\n-     * the segment (or any slices and views derived from it) is no longer in use.\n-     * The scope associated with the returned segment cannot be closed directly e.g. by calling {@link ResourceScope#close()}.\n+     * The returned segment is associated with a fresh {@link ResourceScope#ofDefault() default scope}. Resources associated with this\n+     * segment will be automatically released when the returned segment (or any slices and views derived from it) is no longer in use.\n@@ -601,3 +600,2 @@\n-     * The returned segment is associated with a fresh, shared resource scope, which will be automatically closed when\n-     * the segment (or any slices and views derived from it) is no longer in use.\n-     * The scope associated with the returned segment cannot be closed directly e.g. by calling {@link ResourceScope#close()}.\n+     * The returned segment is associated with a fresh {@link ResourceScope#ofDefault() default scope}. Resources associated with this\n+     * segment will be automatically released when the returned segment (or any slices and views derived from it) is no longer in use.\n@@ -643,3 +641,3 @@\n-     * and alignment constraints (in bytes). The returned segment is associated with a fresh, shared resource scope,\n-     * which will be automatically closed when the segment (or any slices and views derived from it) is no longer in use.\n-     * The scope associated with the returned segment cannot be closed directly e.g. by calling {@link ResourceScope#close()}.\n+     * and alignment constraints (in bytes). The returned segment is associated with a fresh {@link ResourceScope#ofDefault() default scope}.\n+     * Resources associated with this segment will be automatically released when the returned segment\n+     * (or any slices and views derived from it) is no longer in use.\n@@ -690,3 +688,2 @@\n-     * The returned segment is associated with a fresh, shared resource scope, which will be automatically closed when\n-     * the segment (or any slices and views derived from it) is no longer in use. The scope associated with the returned\n-     * segment cannot be closed directly e.g. by calling {@link ResourceScope#close()}.\n+     * The returned segment is associated with a fresh {@link ResourceScope#ofDefault() default scope}. Resources associated with this\n+     * segment will be automatically released when the returned segment (or any slices and views derived from it) is no longer in use.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * <h2>Explicit deallocation<\/h2>\n+ * <h2>Explicit closure<\/h2>\n@@ -59,1 +59,1 @@\n- * <h2>Implicit deallocation<\/h2>\n+ * <h2>Implicit closure<\/h2>\n@@ -255,0 +255,17 @@\n+    \/**\n+     * Create a new <em>default scope<\/em>, a shared, non-closeable scope which only features implicit closure.\n+     * This resource scope is used as a valid default where no resource scope is provided by the user. For instance, this code:\n+     * <blockquote><pre>{@code\n+    MemorySegment.allocateNative(10);\n+     * }<\/pre><\/blockquote>\n+     * is equivalent to the following code:\n+     * <blockquote><pre>{@code\n+    MemorySegment.allocateNative(10, ResourceScope.ofDefault());\n+     * }<\/pre><\/blockquote>\n+     *\n+     * @return a new default scope.\n+     *\/\n+    static ResourceScope ofDefault() {\n+        return MemoryScope.createDefault();\n+    }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.foreign.NativeMemorySegmentImpl;\n@@ -42,9 +43,7 @@\n- *  This interface models a memory allocator. Clients implementing this interface\n- *  must implement the {@link #allocate(long, long)} method. This interface defines several default methods\n- *  which can be useful to create segments from several kinds of Java values such as primitives and arrays.\n- *  This interface can be seen as a thin wrapper around the basic capabilities for creating native segments\n- *  (e.g. {@link MemorySegment#allocateNative(long, long)}); since {@link SegmentAllocator} is a <em>functional interface<\/em>,\n- *  clients can easily obtain a native allocator instance as follows:\n- * <blockquote><pre>{@code\n-SegmentAllocator defaultAllocator = MemorySegment::allocateNative;\n- * }<\/pre><\/blockquote>\n+ * This interface models a memory allocator. Clients implementing this interface\n+ * must implement the {@link #allocate(long, long)} method. This interface defines several default methods\n+ * which can be useful to create segments from several kinds of Java values such as primitives and arrays.\n+ * This interface can be seen as a thin wrapper around the basic capabilities for creating native segments\n+ * (e.g. {@link MemorySegment#allocateNative(long, long)}); since {@link SegmentAllocator} is a <em>functional interface<\/em>,\n+ * clients can easily obtain a native allocator by using either a lambda expression or a method reference.\n+ * <p>\n@@ -447,1 +446,5 @@\n-     * factory.\n+     * factory. This code is equivalent (but likely more efficient) to the following:\n+     * <blockquote><pre>{@code\n+    Resource scope = ...\n+    SegmentAllocator scoped = (size, align) -> MemorySegment.allocateNative(size, align, scope);\n+     * }<\/pre><\/blockquote>\n@@ -454,1 +457,14 @@\n-        return ((MemoryScope)scope).allocator();\n+        return (MemoryScope)scope;\n+    }\n+\n+    \/**\n+     * Returns the default native allocator which creates segments using the default\n+     * {@link MemorySegment#allocateNative(long, long) native segment factory}. This code is equivalent\n+     * (but likely more efficient) to the following:\n+     * <blockquote><pre>{@code\n+    SegmentAllocator defaultAllocator = (size, align) -> MemorySegment.allocateNative(size, align);\n+     * }<\/pre><\/blockquote>\n+     * @return the default native allocator.\n+     *\/\n+    static SegmentAllocator ofDefault() {\n+        return NativeMemorySegmentImpl.DEFAULT_ALLOCATOR;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-public abstract class MemoryScope implements ResourceScope, ScopedMemoryAccess.Scope {\n+public abstract class MemoryScope implements ResourceScope, ScopedMemoryAccess.Scope, SegmentAllocator {\n@@ -58,2 +58,0 @@\n-    @Stable\n-    SegmentAllocator allocator;\n@@ -189,2 +187,1 @@\n-     * Return a scoped allocator; the instance returned by this method is lazily created and then shared\n-     * upon subsequent requests.\n+     * Allocates a segment using this scope. Used by {@link SegmentAllocator#scoped(ResourceScope)}.\n@@ -192,5 +189,3 @@\n-    public SegmentAllocator allocator() {\n-        if (allocator == null) {\n-            allocator = (size, align) -> MemorySegment.allocateNative(size, align, this);\n-        }\n-        return allocator;\n+    @Override\n+    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n+        return MemorySegment.allocateNative(bytesSize, bytesAlignment, this);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -48,0 +49,2 @@\n+    public static final SegmentAllocator DEFAULT_ALLOCATOR = MemorySegment::allocateNative;\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}