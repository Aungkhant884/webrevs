{"files":[{"patch":"@@ -433,5 +433,16 @@\n-     * Returns a native arena-based allocator which allocates a memory segment of a certain fixed size (using malloc)\n-     * and then responds to allocation request by returning different slices of the same segment (until no further allocation is possible,\n-     * in which case a new segment, of the same fixed size, is allocated). This can be useful when clients want to\n-     * perform multiple allocation requests while avoiding the cost associated with allocating a new off-heap memory\n-     * region upon each allocation request.\n+     * Returns a native unbounded arena-based allocator.\n+     * <p>\n+     * The returned allocator allocates a memory segment {@code S} of a certain fixed size (using malloc) and then\n+     * responds to allocation requests in one of the following ways:\n+     * <ul>\n+     *     <li>if the size of the allocation requests is smaller than the size of {@code S}, and {@code S} has a <em>free<\/em>\n+     *     slice {@code S'} which fits that allocation request, return that {@code S'}.\n+     *     <li>if the size of the allocation requests is smaller than the size of {@code S}, and {@code S} has no <em>free<\/em>\n+     *     slices which fits that allocation request, allocate a new segment {@code S'} (using malloc), which has same size as {@code S}\n+     *     and set {@code S = S'}; the allocator then tries to respond to the same allocation request again.\n+     *     <li>if the size of the allocation requests is bigger than the size of {@code S}, allocate a new segment {@code S'}\n+     *     (using malloc), which has a sufficient size to satisfy the allocation request, and return {@code S'}.\n+     * <\/ul>\n+     * <p>\n+     * This segment allocator can be useful when clients want to perform multiple allocation requests while avoiding the\n+     * cost associated with allocating a new off-heap memory region upon each allocation request.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-import java.util.function.Function;\n@@ -360,1 +359,0 @@\n-        System.err.println(specializedHandle.type().descriptorString());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}