{"files":[{"patch":"@@ -133,3 +133,4 @@\n-     * which can be used to call a target foreign function at the given address. If the provided method\n-     * type's return type is {@code MemorySegment}, then the resulting method handle features an additional\n-     * prefix parameter, of type {@link SegmentAllocator}), which will be used by the linker runtime\n+     * which can be used to call a target foreign function at the given address.\n+     * <p>\n+     * If the provided method type's return type is {@code MemorySegment}, then the resulting method handle features\n+     * an additional prefix parameter, of type {@link SegmentAllocator}), which will be used by the linker runtime\n@@ -144,3 +145,1 @@\n-     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch,\n-     * or if {@code type} has a prefix carrier of type {@link SegmentAllocator} but the return descriptor\n-     * in {@code function} is not a {@link GroupLayout}.\n+     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch.\n@@ -155,3 +154,4 @@\n-     * which can be used to call a target foreign function at the given address. If the provided method\n-     * type's return type is {@code MemorySegment}, then the provided allocator will be used by the linker runtime\n-     * to allocate structs returned by-value.\n+     * which can be used to call a target foreign function at the given address.\n+     * <p>\n+     * If the provided method type's return type is {@code MemorySegment}, then the provided allocator will be used by\n+     * the linker runtime to allocate structs returned by-value.\n@@ -166,3 +166,1 @@\n-     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch,\n-     * or if {@code type} has a prefix carrier of type {@link SegmentAllocator} but the return descriptor\n-     * in {@code function} is not a {@link GroupLayout}.\n+     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch.\n@@ -194,3 +192,1 @@\n-     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch,\n-     * or if {@code type} has a prefix carrier of type {@link SegmentAllocator} but the return descriptor\n-     * in {@code function} is not a {@link GroupLayout}.\n+     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch.\n@@ -201,3 +197,2 @@\n-     * Allocates a native segment whose base address (see {@link MemorySegment#address}) and scope which can be\n-     * passed to other foreign functions (as a function pointer); calling such a function pointer\n-     * from native code will result in the execution of the provided method handle.\n+     * Allocates a native segment with given scope which can be passed to other foreign functions (as a function pointer);\n+     * calling such a function pointer from native code will result in the execution of the provided method handle.\n@@ -217,3 +212,2 @@\n-     * Allocates a native segment whose base address (see {@link MemorySegment#address}) and scope which can be\n-     * passed to other foreign functions (as a function pointer); calling such a function pointer\n-     * from native code will result in the execution of the provided method handle.\n+     * Allocates a native segment which can be passed to other foreign functions (as a function pointer);\n+     * calling such a function pointer from native code will result in the execution of the provided method handle.\n@@ -675,3 +669,0 @@\n-         * Any native resource required by the execution of this method will be allocated in the resource scope\n-         * associated with this instance (see {@link #scope()}).\n-         * <p>\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n- * is reachable; this can be achieved by creating the segment using the {@link MemoryAddress#asSegmentRestricted(long, Runnable, ResourceScope)}.\n+ * is reachable; this can be achieved by creating the segment using the {@link MemoryAddress#asSegmentRestricted(long, ResourceScope)}.\n@@ -54,1 +54,1 @@\n-MemorySegment errnoSegment = errno.address().asRestrictedSegment(4, errno);\n+MemorySegment errnoSegment = errno.address().asSegmentRestricted(4, ResourceScope.ofShared(errno, Cleaner.create()));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-     * Returns a new confined native memory segment with given size, and whose base address is this address. This method\n+     * Returns a shared native memory segment with given size, and whose base address is this address. This method\n@@ -103,1 +103,1 @@\n-    asSegmentRestricted(byteSize, null, ResourceScope.ofShared(Cleaner.create()));\n+    asSegmentRestricted(byteSize, null, ResourceScope.globalScope());\n@@ -121,1 +121,1 @@\n-     * Returns a new confined native memory segment with given size, and whose base address is this address. This method\n+     * Returns a native memory segment with given size and resource scope, and whose base address is this address. This method\n@@ -131,2 +131,1 @@\n-     * Calling {@link ResourceScope#close()} on the scope associated with the returned segment will <em>not<\/em> result in releasing any\n-     * memory resources. This method is equivalent to the following code:\n+     * This method is equivalent to the following code:\n@@ -134,1 +133,1 @@\n-    asSegmentRestricted(byteSize, null, ResourceScope.ofConfined(Cleaner.create()));\n+    asSegmentRestricted(byteSize, null, scope);\n@@ -153,1 +152,1 @@\n-     * Returns a new native memory segment with given size, and whose base address is this address. This method\n+     * Returns a new native memory segment with given size and resource scope, and whose base address is this address. This method\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -777,1 +777,1 @@\n-     * The returned is associated with the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n+     * The returned segment is associated with the <em>global<\/em> resource scope (see {@link ResourceScope#globalScope()}).\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n- * becomes <em>unreachable<\/em>.\n+ * becomes <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>.\n@@ -77,1 +77,1 @@\n- * After creating a confined resource scopeon, only the owner thread will be allowed to directly manipulate the resources\n+ * After creating a confined resource scope, only the owner thread will be allowed to directly manipulate the resources\n@@ -158,1 +158,1 @@\n-     *     <li>one or more locks (see {@link #acquire()}) associated with this resource scope have not been closed<\/li>\n+     *     <li>one or more handles (see {@link #acquire()}) associated with this resource scope have not been closed<\/li>\n@@ -219,1 +219,1 @@\n-     * @return a new confined scope, managed by {@code cleaner}; the resulting scope is closeable if {@code closeable == true}.\n+     * @return a new confined scope, managed by {@code cleaner} (where provided).\n@@ -227,1 +227,1 @@\n-     * @return a new shared scope, managed by {@code cleaner}.\n+     * @return a new shared scope.\n@@ -249,1 +249,1 @@\n-     * @return a new shared scope, managed by {@code cleaner}; the resulting scope is closeable if {@code closeable == true}.\n+     * @return a new shared scope, managed by {@code cleaner} (where provided).\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- *  This is interface models a memory allocator. Clients implementing this interface\n+ *  This interface models a memory allocator. Clients implementing this interface\n@@ -452,1 +452,1 @@\n-     * knows that he has fully processed the contents of the allocated segment before the subsequent allocation request\n+     * knows that they have fully processed the contents of the allocated segment before the subsequent allocation request\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,3 +67,3 @@\n- * is <em>unreachable<\/em> is not optimal. Clients that operate under these assumptions might want to be able to programmatically\n- * release the memory associated with a memory segment. This can be done, using the {@link jdk.incubator.foreign.ResourceScope}\n- * abstraction, as shown below:\n+ * is <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a> is not optimal.\n+ * Clients that operate under these assumptions might want to be able to programmatically release the memory associated\n+ * with a memory segment. This can be done, using the {@link jdk.incubator.foreign.ResourceScope} abstraction, as shown below:\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}