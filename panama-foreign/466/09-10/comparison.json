{"files":[{"patch":"@@ -132,1 +132,1 @@\n-     * Obtain a foreign method handle, with the given type and featuring the given function descriptor,\n+     * Obtains a foreign method handle, with the given type and featuring the given function descriptor,\n@@ -180,5 +180,7 @@\n-     * Obtain a foreign method handle, with the given type and featuring the given function descriptor,\n-     * which can be used to call a target foreign function at the given address, which is passed as\n-     * the first dynamic parameter to the resulting method handle. If the provided method\n-     * type's return type is {@code MemorySegment}, then the resulting method handle features an additional\n-     * prefix parameter (inserted immediately after the address parameter), of type {@link SegmentAllocator}),\n+     * Obtains a foreign method handle, with the given type and featuring the given function descriptor, which can be\n+     * used to call a target foreign function at an address.\n+     * The resulting method handle features a prefix parameter (as the first parameter) corresponding to the address, of\n+     * type {@link Addressable}.\n+     * <p>\n+     * If the provided method type's return type is {@code MemorySegment}, then the resulting method handle features an\n+     * additional prefix parameter (inserted immediately after the address parameter), of type {@link SegmentAllocator}),\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n- * This example is almost identical to the one shown above; this time we first create a so called <em>resource scope<\/em>,\n+ * This example is almost identical to the prior one; this time we first create a so called <em>resource scope<\/em>,\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n-        MemorySegment segment = allocator.allocate(size, align);\n-        return segment;\n+        return allocator.allocate(size, align);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-class ConfinedScope extends MemoryScope {\n+final class ConfinedScope extends MemoryScope {\n@@ -89,1 +89,1 @@\n-    static class ConfinedResourceList extends ResourceList {\n+    static final class ConfinedResourceList extends ResourceList {\n@@ -115,1 +115,1 @@\n-    class ConfinedHandle implements Handle {\n+    final class ConfinedHandle implements Handle {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ConfinedScope.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}