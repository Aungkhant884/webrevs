{"files":[{"patch":"@@ -81,1 +81,1 @@\n- * {@link #mapping()} method.\n+ * {@link #toMemoryMapping()} method.\n@@ -237,1 +237,1 @@\n-     * Returns a spliterator for this given memory segment. The returned spliterator reports {@link Spliterator#SIZED},\n+     * Returns a spliterator for this memory segment. The returned spliterator reports {@link Spliterator#SIZED},\n@@ -886,2 +886,2 @@\n-     * A memory mapping represents an association between a mapped memory segment and the underlying file\n-     * descriptor associated with that segment. A memory mapping provides capabilities to manipulate memory-mapped\n+     * A memory mapping represents an association between a mapped memory segment (referred to as the <em>target<\/em> segment)\n+     * and the underlying file descriptor associated with that segment. A memory mapping provides capabilities to manipulate memory-mapped\n@@ -900,3 +900,3 @@\n-         * Obtains the memory segment associated with this memory mapping.\n-         * @return the memory segment associated with this memory mapping.\n-         * @throws IllegalStateException if this mapping's segment is not alive, or if this mapping's segment is confined\n+         * Obtains the target memory segment associated with this memory mapping.\n+         * @return the target memory segment associated with this memory mapping.\n+         * @throws IllegalStateException if the target segment is not alive, or if the target segment is confined\n@@ -911,1 +911,1 @@\n-         * @throws IllegalStateException if this mapping's segment is not alive, or if this mapping's segment is confined\n+         * @throws IllegalStateException if the target segment is not alive, or if the target segment is confined\n@@ -917,1 +917,1 @@\n-         * Tells whether or not the contents of this mapping's segment is resident in physical\n+         * Tells whether or not the contents of the target segment is resident in physical\n@@ -921,1 +921,1 @@\n-         * that all of the data in this mapping's segment is resident in physical memory and\n+         * that all of the data in the target segment is resident in physical memory and\n@@ -931,1 +931,1 @@\n-         * @return  {@code true} if it is likely that the contents of this mapping's segment\n+         * @return  {@code true} if it is likely that the contents of the target segment\n@@ -934,1 +934,1 @@\n-         * @throws IllegalStateException if this mapping's segment is not alive, or if this mapping's segment is confined\n+         * @throws IllegalStateException if the target segment is not alive, or if the target segment is confined\n@@ -940,1 +940,1 @@\n-         * Loads the contents of this mapping's segment into physical memory.\n+         * Loads the contents of the target segment into physical memory.\n@@ -943,1 +943,1 @@\n-         * this contents of this mapping's segment is resident in physical memory.  Invoking this\n+         * this contents of the target segment is resident in physical memory.  Invoking this\n@@ -947,1 +947,1 @@\n-         * @throws IllegalStateException if this mapping's segment is not alive, or if this mapping's segment is confined\n+         * @throws IllegalStateException if the target segment is not alive, or if the target segment is confined\n@@ -953,1 +953,1 @@\n-         * Unloads the contents of this mapping's segment from physical memory.\n+         * Unloads the contents of the target segment from physical memory.\n@@ -955,1 +955,1 @@\n-         * <p> This method makes a best effort to ensure that the contents of this mapping's segment are\n+         * <p> This method makes a best effort to ensure that the contents of the target segment are\n@@ -960,1 +960,1 @@\n-         * @throws IllegalStateException if this mapping's segment is not alive, or if this mapping's segment is confined\n+         * @throws IllegalStateException if the target segment is not alive, or if the target segment is confined\n@@ -966,1 +966,1 @@\n-         * Forces any changes made to the contents of this mapping's segment to be written to the\n+         * Forces any changes made to the contents of the target segment to be written to the\n@@ -977,1 +977,1 @@\n-         * <p> If this mapping's segment was not mapped in read\/write mode ({@link\n+         * <p> If the target segment was not mapped in read\/write mode ({@link\n@@ -985,1 +985,1 @@\n-         * @throws IllegalStateException if this mapping's segment is not alive, or if this mapping's segment is confined\n+         * @throws IllegalStateException if the target segment is not alive, or if the target segment is confined\n@@ -997,1 +997,1 @@\n-    Optional<MemoryMapping> mapping();\n+    Optional<MemoryMapping> toMemoryMapping();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-    public Optional<MemoryMapping> mapping() {\n+    public Optional<MemoryMapping> toMemoryMapping() {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    public Optional<MemoryMapping> mapping() {\n+    public Optional<MemoryMapping> toMemoryMapping() {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-            segment.mapping().ifPresent(MemoryMapping::force);\n+            segment.toMemoryMapping().ifPresent(MemoryMapping::force);\n@@ -281,1 +281,1 @@\n-                segment.mapping().ifPresent(MemoryMapping::force);\n+                segment.toMemoryMapping().ifPresent(MemoryMapping::force);\n@@ -723,4 +723,4 @@\n-        LOAD(m -> m.mapping().ifPresent(MemoryMapping::load)),\n-        UNLOAD(m -> m.mapping().ifPresent(MemoryMapping::unload)),\n-        IS_LOADED(m -> m.mapping().ifPresent(MemoryMapping::isLoaded)),\n-        FORCE(m -> m.mapping().ifPresent(MemoryMapping::force)),\n+        LOAD(m -> m.toMemoryMapping().ifPresent(MemoryMapping::load)),\n+        UNLOAD(m -> m.toMemoryMapping().ifPresent(MemoryMapping::unload)),\n+        IS_LOADED(m -> m.toMemoryMapping().ifPresent(MemoryMapping::isLoaded)),\n+        FORCE(m -> m.toMemoryMapping().ifPresent(MemoryMapping::force)),\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-            SpliteratorTestHelper.testSpliterator(() -> MemorySegment.spliterator(segment, layout),\n+            SpliteratorTestHelper.testSpliterator(() -> segment.spliterator(layout),\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        return new SumSegment(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT), SEGMENT_TO_INT).invoke();\n+        return new SumSegment(segment.spliterator(SEQUENCE_LAYOUT), SEGMENT_TO_INT).invoke();\n@@ -125,1 +125,1 @@\n-        return new SumSegment(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT_BULK), SEGMENT_TO_INT_BULK).invoke();\n+        return new SumSegment(segment.spliterator(SEQUENCE_LAYOUT_BULK), SEGMENT_TO_INT_BULK).invoke();\n@@ -130,1 +130,1 @@\n-        return StreamSupport.stream(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT), true)\n+        return StreamSupport.stream(segment.spliterator(SEQUENCE_LAYOUT), true)\n@@ -136,1 +136,1 @@\n-        return StreamSupport.stream(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT_BULK), true)\n+        return StreamSupport.stream(segment.spliterator(SEQUENCE_LAYOUT_BULK), true)\n@@ -153,1 +153,1 @@\n-        return StreamSupport.stream(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT), false)\n+        return StreamSupport.stream(segment.spliterator(SEQUENCE_LAYOUT), false)\n@@ -160,1 +160,1 @@\n-        return StreamSupport.stream(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT), true)\n+        return StreamSupport.stream(segment.spliterator(SEQUENCE_LAYOUT), true)\n@@ -167,1 +167,1 @@\n-        return StreamSupport.stream(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT_BULK), false)\n+        return StreamSupport.stream(segment.spliterator(SEQUENCE_LAYOUT_BULK), false)\n@@ -174,1 +174,1 @@\n-        return StreamSupport.stream(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT_BULK), true)\n+        return StreamSupport.stream(segment.spliterator(SEQUENCE_LAYOUT_BULK), true)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}