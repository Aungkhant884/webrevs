{"files":[{"patch":"@@ -388,1 +388,5 @@\n-            closer = dropArguments(closer, 0, Throwable.class); \/\/ (Throwable, V) -> V\n+            if (!upcall) {\n+                closer = dropArguments(closer, 0, Throwable.class); \/\/ (Throwable, V) -> V\n+            } else {\n+                closer = collectArguments(closer, 0, MH_HANDLE_UNCAUGHT_EXCEPTION); \/\/ (Throwable, V) -> V\n+            }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-        boolean useSpec = false;\n-        run(useSpec);\n+        run(\/* useSpec = *\/ false, \/* isVoid = *\/ true);\n+        run(\/* useSpec = *\/ false, \/* isVoid = *\/ false);\n@@ -60,2 +60,2 @@\n-        boolean useSpec = true;\n-        run(useSpec);\n+        run(\/* useSpec = *\/ true, \/* isVoid = *\/ true);\n+        run(\/* useSpec = *\/ true, \/* isVoid = *\/ false);\n@@ -64,1 +64,1 @@\n-    private void run(boolean useSpec) throws IOException, InterruptedException {\n+    private void run(boolean useSpec, boolean isVoid) throws IOException, InterruptedException {\n@@ -77,1 +77,2 @@\n-                \"ThrowingUpcall\")\n+                \"ThrowingUpcall\",\n+                isVoid ? \"void\" : \"non-void\")\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import jdk.incubator.foreign.Addressable;\n@@ -27,1 +26,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -38,1 +36,2 @@\n-    private static final MethodHandle downcall;\n+    private static final MethodHandle downcallVoid;\n+    private static final MethodHandle downcallNonVoid;\n@@ -44,1 +43,1 @@\n-        downcall = CLinker.systemCLinker().downcallHandle(\n+        downcallVoid = CLinker.systemCLinker().downcallHandle(\n@@ -48,0 +47,4 @@\n+        downcallNonVoid = CLinker.systemCLinker().downcallHandle(\n+            lookup.lookup(\"f10_I_I_\").orElseThrow(),\n+                FunctionDescriptor.of(C_INT, C_INT, C_POINTER)\n+        );\n@@ -62,1 +65,5 @@\n-        test();\n+        if (args[0].equals(\"void\")) {\n+            testVoid();\n+        } else {\n+            testNonVoid();\n+        }\n@@ -65,1 +72,1 @@\n-    public static void test() throws Throwable {\n+    public static void testVoid() throws Throwable {\n@@ -73,1 +80,14 @@\n-            downcall.invoke(stub); \/\/ should call Shutdown.exit(1);\n+            downcallVoid.invoke(stub); \/\/ should call Shutdown.exit(1);\n+        }\n+    }\n+\n+    public static void testNonVoid() throws Throwable {\n+        MethodHandle handle = MethodHandles.identity(int.class);\n+        handle = MethodHandles.collectArguments(handle, 0, MH_throwException);\n+        MethodHandle invoker = MethodHandles.exactInvoker(MethodType.methodType(int.class, int.class));\n+        handle = MethodHandles.insertArguments(invoker, 0, handle);\n+\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            NativeSymbol stub = CLinker.systemCLinker().upcallStub(handle, FunctionDescriptor.of(C_INT, C_INT), scope);\n+\n+            downcallNonVoid.invoke(42, stub); \/\/ should call Shutdown.exit(1);\n","filename":"test\/jdk\/java\/foreign\/ThrowingUpcall.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"}]}