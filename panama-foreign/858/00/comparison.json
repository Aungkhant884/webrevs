{"files":[{"patch":"@@ -125,0 +125,3 @@\n+        if (!segment.isNative()) {\n+            return strlen_byte(segment, start);\n+        }\n@@ -136,1 +139,1 @@\n-                len = strlen_byte(segment);\n+                len = strlen_byte(segment, 0);\n@@ -189,1 +192,1 @@\n-    private static int strlen_byte(MemorySegment segment) {\n+    private static int strlen_byte(MemorySegment segment, long start) {\n@@ -191,2 +194,2 @@\n-        for (int offset = 0; offset >= 0; offset += 2) {\n-            short curr = segment.get(JAVA_SHORT, offset);\n+        for (int offset = 0; offset >= 0; offset += 1) {\n+            short curr = segment.get(JAVA_BYTE, start + offset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -92,0 +92,25 @@\n+    @Test(dataProvider = \"strings\")\n+    public void testStringsHeap(String testString) {\n+        for (Charset charset : singleByteCharsets()) {\n+            try (Arena arena = Arena.ofConfined()) {\n+                MemorySegment text = arena.allocateFrom(testString, charset);\n+                text = toHeapSegment(text);\n+\n+                int expectedByteLength =\n+                        testString.getBytes(charset).length + 1;\n+\n+                assertEquals(text.byteSize(), expectedByteLength);\n+\n+                String roundTrip = text.getString(0, charset);\n+                if (charset.newEncoder().canEncode(testString)) {\n+                    assertEquals(roundTrip, testString);\n+                }\n+            }\n+        }\n+    }\n+\n+    MemorySegment toHeapSegment(MemorySegment segment) {\n+        var heapArray = segment.toArray(JAVA_BYTE);\n+        return MemorySegment.ofArray(heapArray);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}