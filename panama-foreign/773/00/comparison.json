{"files":[{"patch":"@@ -490,0 +490,1 @@\n+         * In such cases, using {@link #groupElement(long)} might be preferable.\n@@ -500,0 +501,17 @@\n+        \/**\n+         * Returns a path element which selects a member layout with the given index in a group layout.\n+         * The path element returned by this method does not alter the number of free dimensions of any path\n+         * that is combined with such element.\n+         *\n+         * @param index the index of the group element to be selected.\n+         * @return a path element which selects the group element with the given index.\n+         * @throws IllegalArgumentException if {@code index < 0}.\n+         *\/\n+        static PathElement groupElement(long index) {\n+            if (index < 0) {\n+                throw new IllegalArgumentException(\"Index < 0\");\n+            }\n+            return new LayoutPath.PathElementImpl(PathKind.GROUP_ELEMENT,\n+                    path -> path.groupElement(index));\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -140,0 +140,18 @@\n+    public LayoutPath groupElement(long index) {\n+        check(GroupLayout.class, \"attempting to select a group element from a non-group layout\");\n+        GroupLayout g = (GroupLayout)layout;\n+        long elemSize = g.memberLayouts().size();\n+        long offset = 0;\n+        MemoryLayout elem = null;\n+        for (int i = 0; i <= index; i++) {\n+            if (i == elemSize) {\n+                throw badLayoutPath(\"cannot resolve element \" + index + \" in layout \" + layout);\n+            }\n+            elem = g.memberLayouts().get(i);\n+            if (g instanceof StructLayout && i < index) {\n+                offset += elem.bitSize();\n+            }\n+        }\n+        return LayoutPath.nestedPath(elem, this.offset + offset, strides, bounds, this);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.function.IntFunction;\n@@ -101,0 +102,12 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testTooBigGroupElementIndex() {\n+        GroupLayout g = MemoryLayout.structLayout(JAVA_INT);\n+        g.byteOffset(groupElement(1));\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNegativeGroupElementIndex() {\n+        GroupLayout g = MemoryLayout.structLayout(JAVA_INT);\n+        g.byteOffset(groupElement(-1));\n+    }\n+\n@@ -242,2 +255,2 @@\n-    @Test\n-    public void testStructPaths() {\n+    @Test(dataProvider = \"groupSelectors\")\n+    public void testStructPaths(IntFunction<PathElement> groupSelector) {\n@@ -246,4 +259,4 @@\n-                ValueLayout.JAVA_BYTE.withName(\"1\"),\n-                ValueLayout.JAVA_CHAR.withName(\"2\"),\n-                ValueLayout.JAVA_FLOAT.withName(\"3\"),\n-                ValueLayout.JAVA_LONG.withName(\"4\")\n+                ValueLayout.JAVA_BYTE.withName(\"0\"),\n+                ValueLayout.JAVA_CHAR.withName(\"1\"),\n+                ValueLayout.JAVA_FLOAT.withName(\"2\"),\n+                ValueLayout.JAVA_LONG.withName(\"3\")\n@@ -254,3 +267,3 @@\n-        for (int i = 1 ; i <= 4 ; i++) {\n-            MemoryLayout selected = g.select(groupElement(String.valueOf(i)));\n-            assertTrue(selected == g.memberLayouts().get(i - 1));\n+        for (int i = 0 ; i < 4 ; i++) {\n+            MemoryLayout selected = g.select(groupSelector.apply(i));\n+            assertTrue(selected == g.memberLayouts().get(i));\n@@ -261,5 +274,5 @@\n-        for (int i = 1 ; i <= 4 ; i++) {\n-            long bitOffset = g.bitOffset(groupElement(String.valueOf(i)));\n-            assertEquals(offsets[i - 1], bitOffset);\n-            long byteOffset = g.byteOffset(groupElement(String.valueOf(i)));\n-            assertEquals((offsets[i - 1]) >>> 3, byteOffset);\n+        for (int i = 0 ; i < 4 ; i++) {\n+            long bitOffset = g.bitOffset(groupSelector.apply(i));\n+            assertEquals(offsets[i], bitOffset);\n+            long byteOffset = g.byteOffset(groupSelector.apply(i));\n+            assertEquals((offsets[i]) >>> 3, byteOffset);\n@@ -269,2 +282,2 @@\n-    @Test\n-    public void testUnionPaths() {\n+    @Test(dataProvider = \"groupSelectors\")\n+    public void testUnionPaths(IntFunction<PathElement> groupSelector) {\n@@ -273,4 +286,4 @@\n-                ValueLayout.JAVA_BYTE.withName(\"1\"),\n-                ValueLayout.JAVA_CHAR.withName(\"2\"),\n-                ValueLayout.JAVA_FLOAT.withName(\"3\"),\n-                ValueLayout.JAVA_LONG.withName(\"4\")\n+                ValueLayout.JAVA_BYTE.withName(\"0\"),\n+                ValueLayout.JAVA_CHAR.withName(\"1\"),\n+                ValueLayout.JAVA_FLOAT.withName(\"2\"),\n+                ValueLayout.JAVA_LONG.withName(\"3\")\n@@ -281,3 +294,3 @@\n-        for (int i = 1 ; i <= 4 ; i++) {\n-            MemoryLayout selected = g.select(groupElement(String.valueOf(i)));\n-            assertTrue(selected == g.memberLayouts().get(i - 1));\n+        for (int i = 0 ; i < 4 ; i++) {\n+            MemoryLayout selected = g.select(groupSelector.apply(i));\n+            assertTrue(selected == g.memberLayouts().get(i));\n@@ -288,5 +301,5 @@\n-        for (int i = 1 ; i <= 4 ; i++) {\n-            long bitOffset = g.bitOffset(groupElement(String.valueOf(i)));\n-            assertEquals(offsets[i - 1], bitOffset);\n-            long byteOffset = g.byteOffset(groupElement(String.valueOf(i)));\n-            assertEquals((offsets[i - 1]) >>> 3, byteOffset);\n+        for (int i = 0 ; i < 4 ; i++) {\n+            long bitOffset = g.bitOffset(groupSelector.apply(i));\n+            assertEquals(offsets[i], bitOffset);\n+            long byteOffset = g.byteOffset(groupSelector.apply(i));\n+            assertEquals((offsets[i]) >>> 3, byteOffset);\n@@ -296,0 +309,8 @@\n+    @DataProvider\n+    public static Object[][] groupSelectors() {\n+        return new Object[][] {\n+                { (IntFunction<PathElement>) PathElement::groupElement }, \/\/ by index\n+                { (IntFunction<PathElement>) i -> PathElement.groupElement(String.valueOf(i)) } \/\/ by name\n+        };\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":49,"deletions":28,"binary":false,"changes":77,"status":"modified"}]}