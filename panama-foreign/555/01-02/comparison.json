{"files":[{"patch":"@@ -28,0 +28,4 @@\n+\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.misc.ScopedMemoryAccess;\n+import jdk.internal.misc.Unsafe;\n@@ -50,9 +54,11 @@\n-    private static final ByteOrder NATIVE_ORDER = ByteOrder.nativeOrder();\n-    private static final ByteOrder NON_NATIVE_ORDER = NATIVE_ORDER == ByteOrder.LITTLE_ENDIAN\n-            ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN;\n-    private static final ValueLayout ARR_LAYOUT_16_N = MemoryLayout.valueLayout(16, NATIVE_ORDER).withBitAlignment(8);\n-    private static final ValueLayout ARR_LAYOUT_16_NN = MemoryLayout.valueLayout(16, NON_NATIVE_ORDER).withBitAlignment(8);\n-    private static final ValueLayout ARR_LAYOUT_32_N = MemoryLayout.valueLayout(32, NATIVE_ORDER).withBitAlignment(8);\n-    private static final ValueLayout ARR_LAYOUT_32_NN = MemoryLayout.valueLayout(32, NON_NATIVE_ORDER).withBitAlignment(8);\n-    private static final ValueLayout ARR_LAYOUT_64_N = MemoryLayout.valueLayout(64, NATIVE_ORDER).withBitAlignment(8);\n-    private static final ValueLayout ARR_LAYOUT_64_NN = MemoryLayout.valueLayout(64, NON_NATIVE_ORDER).withBitAlignment(8);\n+\n+    private static final ScopedMemoryAccess scopedMemoryAccess = ScopedMemoryAccess.getScopedMemoryAccess();\n+    private static final Unsafe unsafe = Unsafe.getUnsafe();\n+\n+    private static final int BYTE_BASE = unsafe.arrayBaseOffset(byte[].class);\n+    private static final int CHAR_BASE = unsafe.arrayBaseOffset(char[].class);\n+    private static final int SHORT_BASE = unsafe.arrayBaseOffset(short[].class);\n+    private static final int INT_BASE = unsafe.arrayBaseOffset(int[].class);\n+    private static final int FLOAT_BASE = unsafe.arrayBaseOffset(float[].class);\n+    private static final int LONG_BASE = unsafe.arrayBaseOffset(long[].class);\n+    private static final int DOUBLE_BASE = unsafe.arrayBaseOffset(double[].class);\n@@ -76,0 +82,1 @@\n+        Objects.requireNonNull(srcArray);\n@@ -77,3 +84,6 @@\n-        MemorySegment srcSegmentSlice = MemorySegment.ofArray(srcArray).asSlice(srcIndexBytes, srcCopyLengthBytes);\n-        MemorySegment dstSegmentSlice = dstSegment.asSlice(dstOffsetBytes, srcCopyLengthBytes);\n-        dstSegmentSlice.copyFrom(srcSegmentSlice);\n+        Objects.checkFromIndexSize(srcIndexBytes, srcCopyLengthBytes, srcArray.length);\n+        AbstractMemorySegmentImpl destImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthBytes, false);\n+        scopedMemoryAccess.copyMemory(null, destImpl.scope(),\n+                srcArray, BYTE_BASE + srcIndexBytes,\n+                destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthBytes);\n@@ -96,3 +106,7 @@\n-        MemorySegment srcSegmentSlice = srcSegment.asSlice(srcOffsetBytes, dstCopyLengthBytes);\n-        MemorySegment dstSegmentSlice = MemorySegment.ofArray(dstArray).asSlice(dstIndexBytes, dstCopyLengthBytes);\n-        dstSegmentSlice.copyFrom(srcSegmentSlice);\n+        Objects.requireNonNull(dstArray);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthBytes, false);\n+        Objects.checkFromIndexSize(dstIndexBytes, dstCopyLengthBytes, dstArray.length);\n+        scopedMemoryAccess.copyMemory(srcImpl.scope(), null,\n+                srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                dstArray, BYTE_BASE + dstIndexBytes, dstCopyLengthBytes);\n@@ -134,0 +148,1 @@\n+        Objects.requireNonNull(srcArray);\n@@ -135,4 +150,12 @@\n-        MemorySegment srcSegmentSlice =\n-                MemorySegment.ofArray(srcArray).asSlice(srcIndexChars * 2L, srcCopyLengthChars * 2L);\n-        MemorySegment dstSegmentSlice = dstSegment.asSlice(dstOffsetBytes, srcCopyLengthChars * 2L);\n-        dstSegmentSlice.copyFrom(order == NATIVE_ORDER ? ARR_LAYOUT_16_N : ARR_LAYOUT_16_NN, srcSegmentSlice, ARR_LAYOUT_16_N);\n+        Objects.checkFromIndexSize(srcIndexChars, srcCopyLengthChars, srcArray.length);\n+        AbstractMemorySegmentImpl destImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthChars << 1, false);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(null, destImpl.scope(),\n+                    srcArray, CHAR_BASE + (srcIndexChars << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthChars << 1);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(null, destImpl.scope(),\n+                    srcArray, CHAR_BASE + (srcIndexChars << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthChars << 1, 2);\n+        }\n@@ -174,4 +197,13 @@\n-        MemorySegment srcSegmentSlice = srcSegment.asSlice(srcOffsetBytes, dstCopyLengthChars * 2L);\n-        MemorySegment dstSegmentSlice =\n-                MemorySegment.ofArray(dstArray).asSlice(dstIndexChars * 2L, dstCopyLengthChars * 2L);\n-        dstSegmentSlice.copyFrom(ARR_LAYOUT_16_N, srcSegmentSlice, order == NATIVE_ORDER ? ARR_LAYOUT_16_N : ARR_LAYOUT_16_NN);\n+        Objects.requireNonNull(dstArray);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthChars << 1, false);\n+        Objects.checkFromIndexSize(dstIndexChars, dstCopyLengthChars, dstArray.length);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, CHAR_BASE + (dstIndexChars << 1), dstCopyLengthChars << 1);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, CHAR_BASE + (dstIndexChars << 1), dstCopyLengthChars << 1, 2);\n+        }\n@@ -213,0 +245,1 @@\n+        Objects.requireNonNull(srcArray);\n@@ -214,4 +247,12 @@\n-        MemorySegment srcSegmentSlice =\n-                MemorySegment.ofArray(srcArray).asSlice(srcIndexShorts * 2L, srcCopyLengthShorts * 2L);\n-        MemorySegment dstSegmentSlice = dstSegment.asSlice(dstOffsetBytes, srcCopyLengthShorts * 2L);\n-        dstSegmentSlice.copyFrom(order == NATIVE_ORDER ? ARR_LAYOUT_16_N : ARR_LAYOUT_16_NN, srcSegmentSlice, ARR_LAYOUT_16_N);\n+        Objects.checkFromIndexSize(srcIndexShorts, srcCopyLengthShorts, srcArray.length);\n+        AbstractMemorySegmentImpl destImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthShorts << 1, false);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(null, destImpl.scope(),\n+                    srcArray, SHORT_BASE + (srcIndexShorts << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthShorts << 1);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(null, destImpl.scope(),\n+                    srcArray, SHORT_BASE + (srcIndexShorts << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthShorts << 1, 2);\n+        }\n@@ -253,4 +294,13 @@\n-        MemorySegment srcSegmentSlice = srcSegment.asSlice(srcOffsetBytes, dstCopyLengthShorts * 2L);\n-        MemorySegment dstSegmentSlice =\n-                MemorySegment.ofArray(dstArray).asSlice(dstIndexShorts * 2L, dstCopyLengthShorts * 2L);\n-        dstSegmentSlice.copyFrom(ARR_LAYOUT_16_N, srcSegmentSlice, order == NATIVE_ORDER ? ARR_LAYOUT_16_N : ARR_LAYOUT_16_NN);\n+        Objects.requireNonNull(dstArray);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthShorts << 1, false);\n+        Objects.checkFromIndexSize(dstIndexShorts, dstCopyLengthShorts, dstArray.length);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, SHORT_BASE + (dstIndexShorts << 1), dstCopyLengthShorts << 1);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, SHORT_BASE + (dstIndexShorts << 1), dstCopyLengthShorts << 1, 2);\n+        }\n@@ -292,0 +342,1 @@\n+        Objects.requireNonNull(srcArray);\n@@ -293,4 +344,12 @@\n-        MemorySegment srcSegmentSlice =\n-                MemorySegment.ofArray(srcArray).asSlice(srcIndexInts * 4L, srcCopyLengthInts * 4L);\n-        MemorySegment dstSegmentSlice = dstSegment.asSlice(dstOffsetBytes, srcCopyLengthInts * 4L);\n-        dstSegmentSlice.copyFrom(order == NATIVE_ORDER ? ARR_LAYOUT_32_N : ARR_LAYOUT_32_NN, srcSegmentSlice, ARR_LAYOUT_32_N);\n+        Objects.checkFromIndexSize(srcIndexInts, srcCopyLengthInts, srcArray.length);\n+        AbstractMemorySegmentImpl destImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthInts << 2, false);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(null, destImpl.scope(),\n+                    srcArray, INT_BASE + (srcIndexInts << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthInts << 2);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(null, destImpl.scope(),\n+                    srcArray, INT_BASE + (srcIndexInts << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthInts << 2, 4);\n+        }\n@@ -332,4 +391,13 @@\n-        MemorySegment srcSegmentSlice = srcSegment.asSlice(srcOffsetBytes, dstCopyLengthInts * 4L);\n-        MemorySegment dstSegmentSlice =\n-                MemorySegment.ofArray(dstArray).asSlice(dstIndexInts * 4L, dstCopyLengthInts * 4L);\n-        dstSegmentSlice.copyFrom(ARR_LAYOUT_32_N, srcSegmentSlice, order == NATIVE_ORDER ? ARR_LAYOUT_32_N : ARR_LAYOUT_32_NN);\n+        Objects.requireNonNull(dstArray);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthInts << 2, false);\n+        Objects.checkFromIndexSize(dstIndexInts, dstCopyLengthInts, dstArray.length);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, INT_BASE + (dstIndexInts << 2), dstCopyLengthInts << 2);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, INT_BASE + (dstIndexInts << 2), dstCopyLengthInts << 2, 4);\n+        }\n@@ -371,0 +439,1 @@\n+        Objects.requireNonNull(srcArray);\n@@ -372,4 +441,12 @@\n-        MemorySegment srcSegmentSlice =\n-                MemorySegment.ofArray(srcArray).asSlice(srcIndexFloats * 4L, srcCopyLengthFloats * 4L);\n-        MemorySegment dstSegmentSlice = dstSegment.asSlice(dstOffsetBytes, srcCopyLengthFloats * 4L);\n-        dstSegmentSlice.copyFrom(order == NATIVE_ORDER ? ARR_LAYOUT_32_N : ARR_LAYOUT_32_NN, srcSegmentSlice, ARR_LAYOUT_32_N);\n+        Objects.checkFromIndexSize(srcIndexFloats, srcCopyLengthFloats, srcArray.length);\n+        AbstractMemorySegmentImpl destImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthFloats << 2, false);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(null, destImpl.scope(),\n+                    srcArray, FLOAT_BASE + (srcIndexFloats << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthFloats << 2);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(null, destImpl.scope(),\n+                    srcArray, FLOAT_BASE + (srcIndexFloats << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthFloats << 2, 4);\n+        }\n@@ -411,4 +488,13 @@\n-        MemorySegment srcSegmentSlice = srcSegment.asSlice(srcOffsetBytes, dstCopyLengthFloats * 4L);\n-        MemorySegment dstSegmentSlice =\n-                MemorySegment.ofArray(dstArray).asSlice(dstIndexFloats * 4L, dstCopyLengthFloats * 4L);\n-        dstSegmentSlice.copyFrom(ARR_LAYOUT_32_N, srcSegmentSlice, order == NATIVE_ORDER ? ARR_LAYOUT_32_N : ARR_LAYOUT_32_NN);\n+        Objects.requireNonNull(dstArray);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthFloats << 2, false);\n+        Objects.checkFromIndexSize(dstIndexFloats, dstCopyLengthFloats, dstArray.length);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, FLOAT_BASE + (dstIndexFloats << 2), dstCopyLengthFloats << 2);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, FLOAT_BASE + (dstIndexFloats << 2), dstCopyLengthFloats << 2, 4);\n+        }\n@@ -450,0 +536,1 @@\n+        Objects.requireNonNull(srcArray);\n@@ -451,4 +538,12 @@\n-        MemorySegment srcSegmentSlice =\n-                MemorySegment.ofArray(srcArray).asSlice(srcIndexLongs * 8L, srcCopyLengthLongs * 8L);\n-        MemorySegment dstSegmentSlice = dstSegment.asSlice(dstOffsetBytes, srcCopyLengthLongs * 8L);\n-        dstSegmentSlice.copyFrom(order == NATIVE_ORDER ? ARR_LAYOUT_64_N : ARR_LAYOUT_64_NN, srcSegmentSlice, ARR_LAYOUT_64_N);\n+        Objects.checkFromIndexSize(srcIndexLongs, srcCopyLengthLongs, srcArray.length);\n+        AbstractMemorySegmentImpl destImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthLongs << 3, false);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(null, destImpl.scope(),\n+                    srcArray, LONG_BASE + (srcIndexLongs << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthLongs << 3);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(null, destImpl.scope(),\n+                    srcArray, LONG_BASE + (srcIndexLongs << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthLongs << 3, 8);\n+        }\n@@ -490,4 +585,13 @@\n-        MemorySegment srcSegmentSlice = srcSegment.asSlice(srcOffsetBytes, dstCopyLengthLongs * 8L);\n-        MemorySegment dstSegmentSlice =\n-                MemorySegment.ofArray(dstArray).asSlice(dstIndexLongs * 8L, dstCopyLengthLongs * 8L);\n-        dstSegmentSlice.copyFrom(ARR_LAYOUT_64_N, srcSegmentSlice, order == NATIVE_ORDER ? ARR_LAYOUT_64_N : ARR_LAYOUT_64_NN);\n+        Objects.requireNonNull(dstArray);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthLongs << 3, false);\n+        Objects.checkFromIndexSize(dstIndexLongs, dstCopyLengthLongs, dstArray.length);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, LONG_BASE + (dstIndexLongs << 3), dstCopyLengthLongs << 3);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, LONG_BASE + (dstIndexLongs << 3), dstCopyLengthLongs << 3, 8);\n+        }\n@@ -529,0 +633,1 @@\n+        Objects.requireNonNull(srcArray);\n@@ -530,4 +635,12 @@\n-        MemorySegment srcSegmentSlice =\n-                MemorySegment.ofArray(srcArray).asSlice(srcIndexDoubles * 8L, srcCopyLengthDoubles * 8L);\n-        MemorySegment dstSegmentSlice = dstSegment.asSlice(dstOffsetBytes, srcCopyLengthDoubles * 8L);\n-        dstSegmentSlice.copyFrom(order == NATIVE_ORDER ? ARR_LAYOUT_64_N : ARR_LAYOUT_64_NN, srcSegmentSlice, ARR_LAYOUT_64_N);\n+        Objects.checkFromIndexSize(srcIndexDoubles, srcCopyLengthDoubles, srcArray.length);\n+        AbstractMemorySegmentImpl destImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthDoubles << 3, false);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(null, destImpl.scope(),\n+                    srcArray, DOUBLE_BASE + (srcIndexDoubles << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthDoubles << 3);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(null, destImpl.scope(),\n+                    srcArray, DOUBLE_BASE + (srcIndexDoubles << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthDoubles << 3, 8);\n+        }\n@@ -569,4 +682,13 @@\n-        MemorySegment srcSegmentSlice = srcSegment.asSlice(srcOffsetBytes, dstCopyLengthDoubles * 8L);\n-        MemorySegment dstSegmentSlice =\n-                MemorySegment.ofArray(dstArray).asSlice(dstIndexDoubles * 8L, dstCopyLengthDoubles * 8L);\n-        dstSegmentSlice.copyFrom(ARR_LAYOUT_64_N, srcSegmentSlice, order == NATIVE_ORDER ? ARR_LAYOUT_64_N : ARR_LAYOUT_64_NN);\n+        Objects.requireNonNull(dstArray);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthDoubles << 3, false);\n+        Objects.checkFromIndexSize(dstIndexDoubles, dstCopyLengthDoubles, dstArray.length);\n+        if (order == ByteOrder.nativeOrder()) {\n+            scopedMemoryAccess.copyMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, DOUBLE_BASE + (dstIndexDoubles << 3), dstCopyLengthDoubles << 3);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(srcImpl.scope(), null,\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n+                    dstArray, DOUBLE_BASE + (dstIndexDoubles << 3), dstCopyLengthDoubles << 3, 8);\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryCopy.java","additions":185,"deletions":63,"binary":false,"changes":248,"status":"modified"}]}