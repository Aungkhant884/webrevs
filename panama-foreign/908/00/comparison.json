{"files":[{"patch":"@@ -215,51 +215,0 @@\n-    @Test()\n-    public void testJumboSegment() {\n-        testWithJumboSegment(\"testJumboSegment\", segment -> {\n-            segment.fill((byte) 1);\n-            segment.set(JAVA_BYTE, Integer.MAX_VALUE + 10L, (byte) 0);\n-            String big = segment.getString(100);\n-        });\n-    }\n-\n-    @Test()\n-    public void testStringLargerThanMaxInt() {\n-        testWithJumboSegment(\"testStringLargerThanMaxInt\", segment -> {\n-            segment.fill((byte) 1);\n-            segment.set(JAVA_BYTE, Integer.MAX_VALUE + 10L, (byte) 0);\n-            assertThrows(IllegalArgumentException.class, () -> {\n-                segment.getString(0);\n-            });\n-        });\n-    }\n-\n-    private static void testWithJumboSegment(String testName, Consumer<MemorySegment> tester) {\n-        Path path = Paths.get(\"mapped_file\");\n-        try {\n-            \/\/ Relly try to make sure the file is deleted after use\n-            path.toFile().deleteOnExit();\n-            deleteIfExistsOrThrow(path);\n-            try (RandomAccessFile raf = new RandomAccessFile(path.toFile(), \"rw\")) {\n-                FileChannel fc = raf.getChannel();\n-                try (Arena arena = Arena.ofConfined()) {\n-                    var segment = fc.map(FileChannel.MapMode.READ_WRITE, 0L, (long) Integer.MAX_VALUE + 100, arena);\n-                    tester.accept(segment);\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw new AssertionError(e);\n-        } catch (OutOfMemoryError oome) {\n-            \/\/ Unfortunately, we run out of memory and cannot run this test in this configuration\n-            System.out.println(\"Skipping test because of insufficient memory: \" + testName);\n-        } finally {\n-            deleteIfExistsOrThrow(path);\n-        }\n-    }\n-\n-    private static void deleteIfExistsOrThrow(Path file) {\n-        try {\n-            Files.deleteIfExists(file);\n-        } catch (IOException ioe) {\n-            throw new AssertionError(\"Unable to delete mapped file: \" + file);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+import org.testng.annotations.*;\n+\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.function.Consumer;\n+\n+import static java.lang.foreign.ValueLayout.*;\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.foreign\n+ * @requires sun.arch.data.model == \"64\"\n+ *\n+ * @run testng\/othervm -Xmx6G TestStringEncodingJumbo\n+ *\/\n+\n+public class TestStringEncodingJumbo {\n+\n+    @Test()\n+    public void testJumboSegment() {\n+        testWithJumboSegment(\"testJumboSegment\", segment -> {\n+            segment.fill((byte) 1);\n+            segment.set(JAVA_BYTE, Integer.MAX_VALUE + 10L, (byte) 0);\n+            String big = segment.getString(100);\n+            assertEquals(big.length(), Integer.MAX_VALUE - (100 - 10));\n+        });\n+    }\n+\n+    @Test()\n+    public void testStringLargerThanMaxInt() {\n+        testWithJumboSegment(\"testStringLargerThanMaxInt\", segment -> {\n+            segment.fill((byte) 1);\n+            segment.set(JAVA_BYTE, Integer.MAX_VALUE + 10L, (byte) 0);\n+            assertThrows(IllegalArgumentException.class, () -> {\n+                segment.getString(0);\n+            });\n+        });\n+    }\n+\n+    private static void testWithJumboSegment(String testName, Consumer<MemorySegment> tester) {\n+        Path path = Paths.get(\"mapped_file\");\n+        try {\n+            \/\/ Relly try to make sure the file is deleted after use\n+            path.toFile().deleteOnExit();\n+            deleteIfExistsOrThrow(path);\n+            try (RandomAccessFile raf = new RandomAccessFile(path.toFile(), \"rw\")) {\n+                FileChannel fc = raf.getChannel();\n+                try (Arena arena = Arena.ofConfined()) {\n+                    var segment = fc.map(FileChannel.MapMode.READ_WRITE, 0L, (long) Integer.MAX_VALUE + 100, arena);\n+                    tester.accept(segment);\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new AssertionError(e);\n+        } catch (OutOfMemoryError oome) {\n+            \/\/ Unfortunately, we run out of memory and cannot run this test in this configuration\n+            System.out.println(\"Skipping test because of insufficient memory: \" + testName);\n+        } finally {\n+            deleteIfExistsOrThrow(path);\n+        }\n+    }\n+\n+    private static void deleteIfExistsOrThrow(Path file) {\n+        try {\n+            Files.deleteIfExists(file);\n+        } catch (IOException ioe) {\n+            throw new AssertionError(\"Unable to delete mapped file: \" + file);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/TestStringEncodingJumbo.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}