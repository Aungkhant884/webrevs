{"files":[{"patch":"@@ -641,0 +641,1 @@\n+    ExceptionHandlingMark ehm(thread);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -378,0 +378,1 @@\n+    ExceptionHandlingMark ehm(thread);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1423,0 +1423,1 @@\n+    ExceptionHandlingMark ehm(thread);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+\n@@ -101,1 +102,1 @@\n-              if (!thread->has_pending_exception()) {\n+              if (!jt->is_exception_handling()) {\n@@ -139,1 +140,1 @@\n-#define SCOPED_EXC LANG MEMACCESS \"$Scope$ScopedAccessException;\"\n+#define SCOPED_ERR LANG MEMACCESS \"$Scope$ScopedAccessError;\"\n@@ -145,1 +146,1 @@\n-    {CC \"closeScope0\",   CC \"(\" SCOPE SCOPED_EXC \")V\",           FN_PTR(ScopedMemoryAccess_closeScope)},\n+    {CC \"closeScope0\",   CC \"(\" SCOPE SCOPED_ERR \")V\",           FN_PTR(ScopedMemoryAccess_closeScope)},\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -163,1 +163,4 @@\n-  return fetch_unroll_info_helper(thread, exec_mode);\n+  UnrollBlock* result = fetch_unroll_info_helper(thread, exec_mode);\n+  thread->check_and_handle_async_exceptions(true);\n+\n+  return result;\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1715,0 +1715,1 @@\n+  _is_exception_handling = false;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1210,0 +1210,1 @@\n+  bool             _is_exception_handling;\n@@ -1590,0 +1591,3 @@\n+  bool is_exception_handling() const             { return _is_exception_handling; }\n+  void set_is_exception_handling(bool val)       { _is_exception_handling = val; }\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -509,0 +509,10 @@\n+\/\/ Implementation of ExceptionHandlingMark\n+\n+ExceptionHandlingMark::ExceptionHandlingMark(JavaThread* jt) : _jt(jt) {\n+  jt->set_is_exception_handling(true);\n+}\n+\n+ExceptionHandlingMark::~ExceptionHandlingMark() {\n+  _jt->set_is_exception_handling(false);\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+class JavaThread;\n@@ -325,0 +326,9 @@\n+class ExceptionHandlingMark {\n+private:\n+  JavaThread* _jt;\n+\n+public:\n+  ExceptionHandlingMark(JavaThread* jt);\n+  ~ExceptionHandlingMark();\n+};\n+\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -26,1 +26,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -48,1 +48,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -69,1 +69,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -91,1 +91,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -112,1 +112,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -133,1 +133,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -154,1 +154,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -175,1 +175,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -195,1 +195,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -216,1 +216,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -237,1 +237,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -258,1 +258,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -279,1 +279,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -300,1 +300,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -321,1 +321,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -342,1 +342,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -363,1 +363,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -384,1 +384,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -405,1 +405,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -426,1 +426,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -449,1 +449,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -470,1 +470,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -491,1 +491,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -514,1 +514,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -535,1 +535,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -556,1 +556,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -577,1 +577,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -598,1 +598,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -619,1 +619,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -640,1 +640,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -661,1 +661,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -682,1 +682,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n- * interrupted with a {@link Scope.ScopedAccessException}.\n+ * interrupted with a {@link Scope.ScopedAccessError}.\n@@ -80,1 +80,1 @@\n-        closeScope0(scope, Scope.ScopedAccessException.INSTANCE);\n+        closeScope0(scope, Scope.ScopedAccessError.INSTANCE);\n@@ -83,1 +83,1 @@\n-    native void closeScope0(Scope scope, Scope.ScopedAccessException exception);\n+    native void closeScope0(Scope scope, Scope.ScopedAccessError exception);\n@@ -101,1 +101,1 @@\n-         * Exception thrown when memory access fails because the memory has already been released.\n+         * Error thrown when memory access fails because the memory has already been released.\n@@ -103,1 +103,1 @@\n-         * is thrown (sometimes, this instance can be thrown asynchronosuly inside VM code). For this reason,\n+         * is thrown (sometimes, this instance can be thrown asynchronously inside VM code). For this reason,\n@@ -107,2 +107,4 @@\n-        final class ScopedAccessException extends RuntimeException {\n-            private ScopedAccessException() { }\n+        final class ScopedAccessError extends Error {\n+            private ScopedAccessError() {\n+                super(\"Attempt to access an already released memory resource\", null, false, false);\n+            }\n@@ -111,1 +113,1 @@\n-            public static final ScopedAccessException INSTANCE = new ScopedAccessException();\n+            public static final ScopedAccessError INSTANCE = new ScopedAccessError();\n@@ -128,1 +130,1 @@\n-          } catch (Scope.ScopedAccessException ex) {\n+          } catch (Scope.ScopedAccessError ex) {\n@@ -159,1 +161,1 @@\n-          } catch (Scope.ScopedAccessException ex) {\n+          } catch (Scope.ScopedAccessError ex) {\n@@ -187,1 +189,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n@@ -212,1 +214,1 @@\n-        } catch (Scope.ScopedAccessException ex) {\n+        } catch (Scope.ScopedAccessError ex) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -372,1 +372,1 @@\n-        } catch (ScopedMemoryAccess.Scope.ScopedAccessException ex) {\n+        } catch (ScopedMemoryAccess.Scope.ScopedAccessError ex) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-     * @throws ScopedAccessException if this scope is already closed.\n+     * @throws ScopedAccessError if this scope is already closed.\n@@ -171,1 +171,1 @@\n-            throw ScopedAccessException.INSTANCE;\n+            throw ScopedAccessError.INSTANCE;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @run testng\/othervm -XX:-TieredCompilation TestHandshake\n@@ -52,1 +53,1 @@\n-    static final int ITERATIONS = 5;\n+    static final int ITERATIONS = 10;\n@@ -54,1 +55,1 @@\n-    static final int MAX_DELAY_MILLIS = 2000;\n+    static final int MAX_DELAY_MILLIS = 500;\n@@ -63,1 +64,1 @@\n-            for (int i = 0; i < ThreadLocalRandom.current().nextInt(Runtime.getRuntime().availableProcessors()); i++) {\n+            for (int i = 0; i < Runtime.getRuntime().availableProcessors() ; i++) {\n@@ -122,0 +123,18 @@\n+    static class SegmentFillAccessor implements Runnable {\n+\n+        final MemorySegment segment;\n+\n+        SegmentFillAccessor(MemorySegment segment) {\n+            this.segment = segment;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                segment.fill((byte)ThreadLocalRandom.current().nextInt(10));\n+            } catch (IllegalStateException ex) {\n+                \/\/ do nothing\n+            }\n+        }\n+    }\n+\n@@ -218,0 +237,1 @@\n+                { (Function<MemorySegment, Runnable>)SegmentFillAccessor::new },\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"}]}