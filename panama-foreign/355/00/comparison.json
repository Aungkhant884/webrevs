{"files":[{"patch":"@@ -25,3 +25,3 @@\n-- **foreign-memaccess**: Contains the developement of the foreign memory access API for [JEP 370](https:\/\/openjdk.java.net\/jeps\/370), which can be used to interact with different kinds of memory resources, including so-called off-heap or native memory.\n-- **foreign-abi**: Contains the developement of the foreign function interface (FFI), which can be used to call native code in a .dll\/.so\/.dylib, or to create a native function pointer to a Java method which can be passed to code in a native library.\n-- **foreign-jextract**: Contains the development of an API to parse native headers, which can be used to create an abstract representation (declarations) from a C header file. This branch also provides an accompanying extraction tool (jextract), which is built on top of the API, and can be used to generate Java bindings to access functions and\/or structs in a native library described by a given header file.\n+- **foreign-memaccess**: Contains the developement of the foreign memory access API for [JEP 370](https:\/\/openjdk.java.net\/jeps\/370), which can be used to interact with different kinds of memory resources, including so-called off-heap or native memory. More information on how to use the foreign memory access API can be found [here](doc\/panama_memaccess.md).\n+- **foreign-abi**: Contains the developement of the foreign linker API for [JEP 389](https:\/\/openjdk.java.net\/jeps\/389), which can be used to call native code in a .dll\/.so\/.dylib, or to create a native function pointer to a Java method which can be passed to code in a native library. More information on how to use the foreign linker API can be found [here](doc\/panama_ffi.md).\n+- **foreign-jextract**: Contains the development of an API to parse native headers, which can be used to create an abstract representation (declarations) from a C header file. This branch also provides an accompanying extraction tool (jextract), which is built on top of the API, and can be used to generate Java bindings to access functions and\/or structs in a native library described by a given header file. More information on how to use the jextract tool can be found [here](doc\/panama_jextract.md).\n@@ -34,5 +34,0 @@\n-\n-Samples\n-=======\n-\n-Please see [doc\/panama_jextract.md](doc\/panama_jextract.md) for examples on how to use `jextract` to work with common native libraries.\n","filename":"README.md","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,442 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<head>\n+  <meta charset=\"utf-8\" \/>\n+  <meta name=\"generator\" content=\"pandoc\" \/>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n+  <title>panama_ffi<\/title>\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <style type=\"text\/css\">\n+a.sourceLine { display: inline-block; line-height: 1.25; }\n+a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }\n+a.sourceLine:empty { height: 1.2em; }\n+.sourceCode { overflow: visible; }\n+code.sourceCode { white-space: pre; position: relative; }\n+div.sourceCode { margin: 1em 0; }\n+pre.sourceCode { margin: 0; }\n+@media screen {\n+div.sourceCode { overflow: auto; }\n+}\n+@media print {\n+code.sourceCode { white-space: pre-wrap; }\n+a.sourceLine { text-indent: -1em; padding-left: 1em; }\n+}\n+pre.numberSource a.sourceLine\n+  { position: relative; left: -4em; }\n+pre.numberSource a.sourceLine::before\n+  { content: attr(title);\n+    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n+    border: none; pointer-events: all; display: inline-block;\n+    -webkit-touch-callout: none; -webkit-user-select: none;\n+    -khtml-user-select: none; -moz-user-select: none;\n+    -ms-user-select: none; user-select: none;\n+    padding: 0 4px; width: 4em;\n+    color: #aaaaaa;\n+  }\n+pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n+div.sourceCode\n+  {  }\n+@media screen {\n+a.sourceLine::before { text-decoration: underline; }\n+}\n+code span.al { color: #ff0000; font-weight: bold; } \/* Alert *\/\n+code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Annotation *\/\n+code span.at { color: #7d9029; } \/* Attribute *\/\n+code span.bn { color: #40a070; } \/* BaseN *\/\n+code span.bu { } \/* BuiltIn *\/\n+code span.cf { color: #007020; font-weight: bold; } \/* ControlFlow *\/\n+code span.ch { color: #4070a0; } \/* Char *\/\n+code span.cn { color: #880000; } \/* Constant *\/\n+code span.co { color: #60a0b0; font-style: italic; } \/* Comment *\/\n+code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } \/* CommentVar *\/\n+code span.do { color: #ba2121; font-style: italic; } \/* Documentation *\/\n+code span.dt { color: #902000; } \/* DataType *\/\n+code span.dv { color: #40a070; } \/* DecVal *\/\n+code span.er { color: #ff0000; font-weight: bold; } \/* Error *\/\n+code span.ex { } \/* Extension *\/\n+code span.fl { color: #40a070; } \/* Float *\/\n+code span.fu { color: #06287e; } \/* Function *\/\n+code span.im { } \/* Import *\/\n+code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Information *\/\n+code span.kw { color: #007020; font-weight: bold; } \/* Keyword *\/\n+code span.op { color: #666666; } \/* Operator *\/\n+code span.ot { color: #007020; } \/* Other *\/\n+code span.pp { color: #bc7a00; } \/* Preprocessor *\/\n+code span.sc { color: #4070a0; } \/* SpecialChar *\/\n+code span.ss { color: #bb6688; } \/* SpecialString *\/\n+code span.st { color: #4070a0; } \/* String *\/\n+code span.va { color: #19177c; } \/* Variable *\/\n+code span.vs { color: #4070a0; } \/* VerbatimString *\/\n+code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Warning *\/\n+  <\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+<\/head>\n+<body>\n+<nav id=\"TOC\">\n+<ul>\n+<li><a href=\"#state-of-foreign-function-support\">State of foreign function support<\/a><ul>\n+<li><a href=\"#native-addresses\">Native addresses<\/a><\/li>\n+<li><a href=\"#symbol-lookups\">Symbol lookups<\/a><\/li>\n+<li><a href=\"#c-linker\">C Linker<\/a><\/li>\n+<li><a href=\"#downcalls\">Downcalls<\/a><\/li>\n+<li><a href=\"#upcalls\">Upcalls<\/a><\/li>\n+<li><a href=\"#native-scope\">Native scope<\/a><\/li>\n+<li><a href=\"#varargs\">Varargs<\/a><\/li>\n+<li><a href=\"#appendix-full-source-code\">Appendix: full source code<\/a><\/li>\n+<\/ul><\/li>\n+<\/ul>\n+<\/nav>\n+<h2 id=\"state-of-foreign-function-support\">State of foreign function support<\/h2>\n+<p><strong>September 2020<\/strong><\/p>\n+<ul>\n+<li>Tweaked references to restricted segments to use new API<\/li>\n+<li>Tweak signature of LibraryLookup::lookup<\/li>\n+<li>Replaced usages of ForeignLinker with CLinker, as per new API<\/li>\n+<\/ul>\n+<p><strong>Maurizio Cimadamore<\/strong><\/p>\n+<p>In this document we explore the main concepts behind Panama's foreign function support; as we shall see, the central abstraction in the foreign function support is the so called <em>foreign linker<\/em>, an abstraction that allows clients to construct <em>native<\/em> method handles — that is, method handles whose invocation targets a native function defined in some native library. As we shall see, Panama foreign function support is completely expressed in terms of Java code and no intermediate native code is required.<\/p>\n+<h3 id=\"native-addresses\">Native addresses<\/h3>\n+<p>Before we dive into the specifics of the foreign function support, it would be useful to briefly recap some of the main concepts we have learned when exploring the <a href=\"http:\/\/cr.openjdk.java.net\/~mcimadamore\/panama\/foreign-memaccess.html\">foreign memory access support<\/a>. The Foreign Memory Access API allows client to create and manipulate <em>memory segments<\/em>. A memory segment is a view over a memory source (either on- or off-heap) which is spatially bounded, temporally bounded and thread-confined. The guarantees ensure that dereferencing a segment that has been created by Java code is always <em>safe<\/em>, and can never result in a VM crash, or, worse, in silent memory corruption.<\/p>\n+<p>Now, in the case of memory segments, the above properties (spatial bounds, temporal bounds and confinement) can be known <em>in full<\/em> when the segment is created. But when we interact with native libraries we will often be receiving <em>raw<\/em> pointers; such pointers have no spatial bounds (does a <code>char*<\/code> in C refer to one <code>char<\/code>, or a <code>char<\/code> array of a given size?), no notion of temporal bounds, nor thread-confinement. Raw addresses in our interop support are modelled using the <code>MemoryAddress<\/code> abstraction.<\/p>\n+<p>A memory address is just what the name implies: it encapsulates a memory address (either on- or off-heap). Since, in order to dereference memory using a memory access var handle, we need a segment, it follows that it is <em>not<\/em> possible to directly dereference a memory address — to do that we need a segment first. So clients can proceed in three different ways here.<\/p>\n+<p>First, if the memory address is known to belong to a segment the client <em>already<\/em> owns, a <em>rebase<\/em> operation can be performed; in other words, the client can ask the address what is its offset relative to a given segment, and then proceed to dereference the original segment accordingly:<\/p>\n+<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">100<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\">...<\/a>\n+<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\">MemoryAddress addr = <span class=\"kw\">... <\/span><span class=\"co\">\/\/obtain address from native code<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb1-4\" title=\"4\"><span class=\"dt\">int<\/span> x = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(segment, addr.<span class=\"fu\">segmentOffset<\/span>(segment));    <\/a><\/code><\/pre><\/div>\n+<p>Secondly, if the client does <em>not<\/em> have a segment which contains a given memory address, it can create one <em>unsafely<\/em>, using the <code>MemoryAddress::asSegmentRestricted<\/code>; this can also be useful to inject extra knowledge about spatial bounds which might be available in the native library the client is interacting with:<\/p>\n+<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb2-1\" title=\"1\">MemoryAddress addr = <span class=\"kw\">... <\/span><span class=\"co\">\/\/obtain address from native code<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb2-2\" title=\"2\">MemorySegment segment = addr.<span class=\"fu\">asSegmentRestricted<\/span>(<span class=\"dv\">100<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb2-3\" title=\"3\"><span class=\"dt\">int<\/span> x = MemoryAccess.<span class=\"fu\">getInt<\/span>(segment);<\/a><\/code><\/pre><\/div>\n+<p>Alternatively, the client can fall back to use the so called <em>everything<\/em> segment - that is, a primordial segment which covers the entire native heap. Since this segment is available as a constant, dereference can happen without the need of creating any additional segment instances:<\/p>\n+<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb3-1\" title=\"1\">MemoryAddress addr = <span class=\"kw\">... <\/span><span class=\"co\">\/\/obtain address from native code<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb3-2\" title=\"2\"><span class=\"dt\">int<\/span> x = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr.<span class=\"fu\">toRawLongValue<\/span>());<\/a><\/code><\/pre><\/div>\n+<p>Of course, since accessing the entire native heap is inherently <em>unsafe<\/em>, accessing the <em>everything<\/em> segment is considered a <em>restricted<\/em> operation which is only allowed after explicit opt in by setting the <code>foreign.restricted=permit<\/code> runtime flag.<\/p>\n+<p><code>MemoryAddress<\/code>, like <code>MemorySegment<\/code> , implements the <code>Addressable<\/code> interface, which is a functional interface whose method projects an entity down to a <code>MemoryAddress<\/code> instance. In the case of <code>MemoryAddress<\/code> such a projection is the identity function; in the case of a memory segment, the projection returns the <code>MemoryAddres<\/code> instance for the segment's base address. This abstraction allows to pass either memory address or memory segments where an address is expected (this is especially useful when generating native bindings).<\/p>\n+<h3 id=\"symbol-lookups\">Symbol lookups<\/h3>\n+<p>The first ingredient of any foreign function support is a mechanism to lookup symbols in native libraries. In traditional Java\/JNI, this is done via the <code>System::loadLibrary<\/code> and <code>System::load<\/code> methods, which internally map into calls to <code>dlopen<\/code>. In Panama, library lookups are modeled more directly, using a class called<code>LibraryLookup<\/code> (similar to a method handle lookup), which provides capabilities to lookup named symbols in a given native library; we can obtain a library lookup in 3 different ways:<\/p>\n+<ul>\n+<li><code>LibraryLookup::ofDefault<\/code> — returns the library lookup which can <em>see<\/em> all the symbols that have been loaded with the VM<\/li>\n+<li><code>LibraryLookup::ofPath<\/code> — creates a library lookup associated with the library found at the given absolute path<\/li>\n+<li><code>LibraryLookup::ofLibrary<\/code> — creates a library lookup associated with the library with given name (this might require setting the <code>java.library.path<\/code> variable accordingly)<\/li>\n+<\/ul>\n+<p>Once a lookup has been obtained, a client can use it to retrieve handles to library symbols (either global variables or functions) using the <code>lookup(String)<\/code> method, which returns an <code>Optional&lt;LibraryLookup.Symbol&gt;<\/code>. A lookup symbol is just a proxy for a memory address (in fact, it implements <code>Addressable<\/code>) and a name.<\/p>\n+<p>For instance, the following code can be used to lookup the <code>clang_getClangVersion<\/code> function provided by the <code>clang<\/code> library:<\/p>\n+<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\">LibraryLookup libclang = LibraryLookup.<span class=\"fu\">ofLibrary<\/span>(<span class=\"st\">&quot;clang&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb4-2\" title=\"2\">LibraryLookup.<span class=\"fu\">Symbol<\/span> clangVersion = libclang.<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;clang_getClangVersion&quot;<\/span>).<span class=\"fu\">get<\/span>();<\/a><\/code><\/pre><\/div>\n+<p>One crucial distinction between the library loading support of the Foreign Linker API and of JNI is that JNI libraries are loaded into a class loader. Furthermore, to preserve <a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/guides\/jni\/jni-12.html#libmanage\">classloader integrity<\/a> integrity, the same JNI library cannot be loaded into more than one classloader. The foreign function support described here is more primitive — the Foreign Linker API allows clients to target native libraries directly, without any intervening JNI code. Crucially, Java objects are never passed to and from native code by the Foreign Linker API. Because of this, libraries loaded through the <code>LibraryLookup<\/code> hook are not tied to any class loader and can be (re)loaded as many times as needed.<\/p>\n+<h3 id=\"c-linker\">C Linker<\/h3>\n+<p>At the core of Panama foreign function support we find the <code>CLinker<\/code> abstraction. This abstraction plays a dual role: first, for downcalls, it allows to model native function calls as plain <code>MethodHandle<\/code> calls (see <code>ForeignLinker::downcallHandle<\/code>); second, for upcalls, it allows to convert an existing <code>MethodHandle<\/code> (which might point to some Java method) into a <code>MemorySegment<\/code> which could then be passed to native functions as a function pointer (see <code>ForeignLinker::upcallStub<\/code>):<\/p>\n+<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb5-1\" title=\"1\"><span class=\"kw\">interface<\/span> CLinker {<\/a>\n+<a class=\"sourceLine\" id=\"cb5-2\" title=\"2\">    MethodHandle <span class=\"fu\">downcallHandle<\/span>(Addressable func, MethodType type, FunctionDescriptor function);<\/a>\n+<a class=\"sourceLine\" id=\"cb5-3\" title=\"3\">    MemorySegment <span class=\"fu\">upcallStub<\/span>(MethodHandle target, FunctionDescriptor function);<\/a>\n+<a class=\"sourceLine\" id=\"cb5-4\" title=\"4\">    ...<\/a>\n+<a class=\"sourceLine\" id=\"cb5-5\" title=\"5\">    <span class=\"dt\">static<\/span> CLinker <span class=\"fu\">getInstance<\/span>() { <span class=\"kw\">... <\/span>}<\/a>\n+<a class=\"sourceLine\" id=\"cb5-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n+<p>In the following sections we will dive deeper into how downcall handles and upcall stubs are created; here we want to focus on the similarities between these two routines. First, both take a <code>FunctionDescriptor<\/code> instance — essentially an aggregate of memory layouts which is used to describe the signature of a foreign function in full. Speaking of C, the <code>CLinker<\/code> class defines many layout constants (one for each main C primitive type) — these layouts can be combined using a <code>FunctionDescriptor<\/code> to describe the signature of a C function. For instance, assuming we have a C function taking a <code>char*<\/code> and returning a <code>long<\/code> we can model such a function with the following descriptor:<\/p>\n+<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb6-1\" title=\"1\">FunctionDescriptor func = FunctionDescriptor.<span class=\"fu\">of<\/span>(CLinker.<span class=\"fu\">C_LONG<\/span>, CLinker.<span class=\"fu\">C_POINTER<\/span>);<\/a><\/code><\/pre><\/div>\n+<p>The layouts used above will be mapped to the right layout according to the platform we are executing on. This also means that these layouts will be platform dependent and that e.g. <code>C_LONG<\/code> will be a 32 bit value layout on Windows, while being a 64-bit value on Linux.<\/p>\n+<p>Layouts defined in the <code>CLinker<\/code> class are not only handy, as they already model the C types we want to work on; they also contain hidden pieces of information which the foreign linker support uses in order to compute the calling sequence associated with a given function descriptor. For instance, the two C types <code>int<\/code> and <code>float<\/code> might share a similar memory layout (they both are expressed as 32 bit values), but are typically passed using different machine registers. The layout attributes attached to the C-specific layouts in the <code>CLinker<\/code> class ensures that arguments and return values are interpreted in the correct way.<\/p>\n+<p>Another similarity between <code>downcallHandle<\/code> and <code>upcallStub<\/code> is that they both accept (either directly, or indirectly) a <code>MethodType<\/code> instance. The method type describes the Java signatures that clients will be using when interacting with said downcall handles, or upcall stubs. The C linker implementation adds constraints on which layouts can be used with which Java carrier — for instance by enforcing that the size of the Java carrier is equal to that of the corresponding layout, or by making sure that certain layouts are associated with specific carriers. The following table shows the Java carrier vs. layout mappings enforced by the Linux\/macOS foreign linker implementation:<\/p>\n+<table>\n+<thead>\n+<tr class=\"header\">\n+<th>C layout<\/th>\n+<th>Java carrier<\/th>\n+<\/tr>\n+<\/thead>\n+<tbody>\n+<tr class=\"odd\">\n+<td><code>C_BOOL<\/code><\/td>\n+<td><code>byte<\/code><\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td><code>C_CHAR<\/code><\/td>\n+<td><code>byte<\/code><\/td>\n+<\/tr>\n+<tr class=\"odd\">\n+<td><code>C_SHORT<\/code><\/td>\n+<td><code>short<\/code><\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td><code>C_INT<\/code><\/td>\n+<td><code>int<\/code><\/td>\n+<\/tr>\n+<tr class=\"odd\">\n+<td><code>C_LONG<\/code><\/td>\n+<td><code>long<\/code><\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td><code>C_LONGLONG<\/code><\/td>\n+<td><code>long<\/code><\/td>\n+<\/tr>\n+<tr class=\"odd\">\n+<td><code>C_FLOAT<\/code><\/td>\n+<td><code>float<\/code><\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td><code>C_DOUBLE<\/code><\/td>\n+<td><code>double<\/code><\/td>\n+<\/tr>\n+<tr class=\"odd\">\n+<td><code>C_POINTER<\/code><\/td>\n+<td><code>MemoryAddress<\/code><\/td>\n+<\/tr>\n+<tr class=\"even\">\n+<td><code>GroupLayout<\/code><\/td>\n+<td><code>MemorySegment<\/code><\/td>\n+<\/tr>\n+<\/tbody>\n+<\/table>\n+<p>Aside from the mapping between primitive layout and primitive Java carriers (which might vary across platforms), it is important to note how all pointer layouts must correspond to a <code>MemoryAddress<\/code> carrier, whereas structs (whose layout is defined by a <code>GroupLayout<\/code>) must be associated with a <code>MemorySegment<\/code> carrier.<\/p>\n+<h3 id=\"downcalls\">Downcalls<\/h3>\n+<p>We will now look at how foreign functions can be called from Java using the foreign linker abstraction. Assume we wanted to call the following function from the standard C library:<\/p>\n+<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb7-1\" title=\"1\"><span class=\"dt\">size_t<\/span> strlen(<span class=\"dt\">const<\/span> <span class=\"dt\">char<\/span> *s);<\/a><\/code><\/pre><\/div>\n+<p>In order to do that, we have to:<\/p>\n+<ul>\n+<li>lookup the <code>strlen<\/code> symbol<\/li>\n+<li><p>describe the signature of the C function using the layouts in the <code>CLinker<\/code> class<\/p><\/li>\n+<li>select a Java signature we want to <em>overlay<\/em> on the native function — this will be the signature that clients of the native method handles will interact with<\/li>\n+<li><p>create a <em>downcall<\/em> native method handle with the above information, using the standard C foreign linker<\/p><\/li>\n+<\/ul>\n+<p>Here's an example of how we might want to do that (a full listing of all the examples in this and subsequent sections will be provided in the <a href=\"#appendix:%20full-source-code\">appendix<\/a>):<\/p>\n+<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb8-1\" title=\"1\">MethodHandle strlen = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb8-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;strlen&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb8-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb8-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">of<\/span>(C_LONG, C_POINTER)<\/a>\n+<a class=\"sourceLine\" id=\"cb8-5\" title=\"5\">);<\/a><\/code><\/pre><\/div>\n+<p>Note that, since the function <code>strlen<\/code> is part of the standard C library, which is loaded with the VM, we can just use the default lookup to look it up. The rest is pretty straightforward — the only tricky detail is how to model <code>size_t<\/code>: typically this type has the size of a pointer, so we can use <code>C_LONG<\/code> on Linux, but we'd have to use <code>C_LONGLONG<\/code> on Windows. On the Java side, we model the <code>size_t<\/code> using a <code>long<\/code> and the pointer is modeled using a <code>MemoryAddress<\/code> parameter.<\/p>\n+<p>One we have obtained the downcall native method handle, we can just use it as any other method handle:<\/p>\n+<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb9-1\" title=\"1\"><span class=\"dt\">long<\/span> len = strlen.<span class=\"fu\">invokeExact<\/span>(CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;Hello&quot;<\/span>).<span class=\"fu\">address<\/span>()) <span class=\"co\">\/\/ 5<\/span><\/a><\/code><\/pre><\/div>\n+<p>Here we are using one of the helper methods in <code>CLinker<\/code> to convert a Java string into an off-heap memory segment which contains a <code>NULL<\/code> terminated C string. We then pass that segment to the method handle and retrieve our result in a Java <code>long<\/code>. Note how all this has been possible <em>without<\/em> any piece of intervening native code — all the interop code can be expressed in (low level) Java.<\/p>\n+<p>Now that we have seen the basics of how foreign function calls are supported in Panama, let's add some additional considerations. First, it is important to note that, albeit the interop code is written in Java, the above code can <em>not<\/em> be considered 100% safe. There are many arbitrary decisions to be made when setting up downcall method handles such as the one above, some of which might be obvious to us (e.g. how many parameters does the function take), but which cannot ultimately be verified by the Panama runtime. After all, a symbol in a dynamic library is, mostly a numeric offset and, unless we are using a shared library with debugging information, no type information is attached to a given library symbol. This means that, in this case, the Panama runtime has to <em>trust<\/em> our description of the <code>strlen<\/code> function. For this reason, access to the foreign linker is a restricted operation, which can only be performed if the runtime flag <code>foreign.restricted=permit<\/code> is passed on the command line of the Java launcher <a href=\"#1\"><sup>1<\/sup><\/a>.<\/p>\n+<p>Finally let's talk about the life-cycle of some of the entities involved here; first, as a downcall native handle wraps a lookup symbol, the library from which the symbol has been loaded will stay loaded until there are reachable downcall handles referring to one of its symbols; in the above example, this consideration is less important, given the use of the default lookup object, which can be assumed to stay alive for the entire duration of the application.<\/p>\n+<p>Certain functions might return pointers, or structs; it is important to realize that if a function returns a pointer (or a <code>MemoryAddress<\/code>), no life-cycle whatsoever is attached to that pointer. It is then up to the client to e.g. free the memory associated with that pointer, or do nothing (in case the library is responsible for the life-cycle of that pointer). If a library returns a struct by value, things are different, as a <em>fresh<\/em>, confined memory segment is allocated off-heap and returned to the callee. It is the responsibility of the callee to cleanup that struct's segment (using <code>MemorySegment::close<\/code>) <a href=\"#2\"><sup>2<\/sup><\/a>.<\/p>\n+<p>Performance-wise, the reader might ask how efficient calling a foreign function using a native method handle is; the answer is <em>very<\/em>. The JVM comes with some special support for native method handles, so that, if a give method handle is invoked many times (e.g, inside an <em>hot<\/em> loop), the JIT compiler might decide to just generate a snippet of assembly code required to call the native function, and execute that directly. In most cases, invoking native function this way is as efficient as doing so through JNI <a href=\"#3a\"><sup>3a<\/sup><\/a><a href=\"#3b\"><sup>3b<\/sup><\/a>.<\/p>\n+<h3 id=\"upcalls\">Upcalls<\/h3>\n+<p>Sometimes, it is useful to pass Java code as a function pointer to some native function; we can achieve that by using foreign linker support for upcalls. To demonstrate this, let's consider the following function from the C standard library:<\/p>\n+<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb10-1\" title=\"1\"><span class=\"dt\">void<\/span> qsort(<span class=\"dt\">void<\/span> *base, <span class=\"dt\">size_t<\/span> nmemb, <span class=\"dt\">size_t<\/span> size,<\/a>\n+<a class=\"sourceLine\" id=\"cb10-2\" title=\"2\">           <span class=\"dt\">int<\/span> (*compar)(<span class=\"dt\">const<\/span> <span class=\"dt\">void<\/span> *, <span class=\"dt\">const<\/span> <span class=\"dt\">void<\/span> *));<\/a><\/code><\/pre><\/div>\n+<p>This is a function that can be used to sort the contents of an array, using a custom comparator function — <code>compar<\/code> — which is passed as a function pointer. To be able to call the <code>qsort<\/code> function from Java we have first to create a downcall native method handle for it:<\/p>\n+<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\">MethodHandle qsort = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;qsort&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">void<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">ofVoid<\/span>(C_POINTER, C_LONG, C_LONG, C_POINTER)<\/a>\n+<a class=\"sourceLine\" id=\"cb11-5\" title=\"5\">);<\/a><\/code><\/pre><\/div>\n+<p>As before, we use <code>C_LONG<\/code> and <code>long.class<\/code> to map the C <code>size_t<\/code> type, and we use <code>MemoryAddess.class<\/code> both for the first pointer parameter (the array pointer) and the last parameter (the function pointer).<\/p>\n+<p>This time, in order to invoke the <code>qsort<\/code> downcall handle, we need a <em>function pointer<\/em> to be passed as the last parameter; this is where the upcall support in foreign linker comes in handy, as it allows us to create a function pointer out of an existing method handle. First, let's write a function that can compare two int elements (passed as pointers):<\/p>\n+<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb12-1\" title=\"1\"><span class=\"kw\">class<\/span> Qsort {<\/a>\n+<a class=\"sourceLine\" id=\"cb12-2\" title=\"2\">    <span class=\"dt\">static<\/span> <span class=\"dt\">int<\/span> <span class=\"fu\">qsortCompare<\/span>(MemoryAddress addr1, MemoryAddress addr2) {<\/a>\n+<a class=\"sourceLine\" id=\"cb12-3\" title=\"3\">        <span class=\"kw\">return<\/span> MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr1.<span class=\"fu\">toRawLongValue<\/span>()) - <\/a>\n+<a class=\"sourceLine\" id=\"cb12-4\" title=\"4\">               MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr2.<span class=\"fu\">toRawLongValue<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb12-5\" title=\"5\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb12-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n+<p>Here we can see that the function is performing some <em>unsafe<\/em> dereference of the pointer contents, by using the <em>everything<\/em> segment. Now let's create a method handle pointing to the comparator function above:<\/p>\n+<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb13-1\" title=\"1\">MethodHandle comparHandle = MethodHandles.<span class=\"fu\">lookup<\/span>()<\/a>\n+<a class=\"sourceLine\" id=\"cb13-2\" title=\"2\">                                         .<span class=\"fu\">findStatic<\/span>(Qsort.<span class=\"fu\">class<\/span>, <span class=\"st\">&quot;qsortCompare&quot;<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb13-3\" title=\"3\">                                                     MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>));<\/a><\/code><\/pre><\/div>\n+<p>Now that we have a method handle for our Java comparator function, we can create a function pointer, using the foreign linker upcall support — as for downcalls, we have to describe the signature of the foreign function pointer using the layouts in the <code>CLinker<\/code> class:<\/p>\n+<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\">MemorySegment comparFunc = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">upcallStub<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\">    comparHandle,<\/a>\n+<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\">    FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_POINTER)<\/a>\n+<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">);<\/a><\/code><\/pre><\/div>\n+<p>So, we finally have a memory segment — <code>comparFunc<\/code> — containing a stub that can be used to invoke our Java comparator function; this means we now have all we need to call the <code>qsort<\/code> downcall handle:<\/p>\n+<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb15-1\" title=\"1\">MemorySegment array = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">4<\/span> * <span class=\"dv\">10<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb15-2\" title=\"2\">array.<span class=\"fu\">copyFrom<\/span>(MemorySegment.<span class=\"fu\">ofArray<\/span>(<span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[] { <span class=\"dv\">0<\/span>, <span class=\"dv\">9<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">6<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">8<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">7<\/span> }));<\/a>\n+<a class=\"sourceLine\" id=\"cb15-3\" title=\"3\">qsort.<span class=\"fu\">invokeExact<\/span>(array.<span class=\"fu\">address<\/span>(), <span class=\"dv\">10L<\/span>, <span class=\"dv\">4L<\/span>, comparFunc.<span class=\"fu\">address<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb15-4\" title=\"4\"><span class=\"dt\">int<\/span>[] sorted = array.<span class=\"fu\">toIntArray<\/span>(); <span class=\"co\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/a><\/code><\/pre><\/div>\n+<p>The above code creates an off-heap array, then copies the contents of a Java array on it (we shall see in the next <a href=\"#native-scope\">section<\/a> ways to do that more succinctly), and then pass the array to the <code>qsort<\/code> handle, along with the comparator function we obtained from the foreign linker. As a side-effect, after the call, the contents of the off-heap array will be sorted (as instructed by our comparator function, written in Java). We can than extract a new Java array from the segment, which contains the sorted elements. This is a more advanced example, but one that shows how powerful the native interop support provided by the foreign linker abstraction is, allowing full bidirectional interop support between Java and native.<\/p>\n+<p>As before, we conclude with a quick note on life-cycle. First, the life-cycle of the upcall stub is tied to that of the segment returned by the foreign linker. When the segment is closed, the upcall is uninstalled from the VM and will no longer be a valid function pointer. Second, the life-cycle of structs (if any) passed by value to the Java upcall function is independent from that of the upcall <a href=\"#4\"><sup>4<\/sup><\/a>, so again the user will have to pay attention not to leak memory and to call <code>MemorySegment::close<\/code> on any segments obtained through an upcall.<\/p>\n+<h3 id=\"native-scope\">Native scope<\/h3>\n+<p>Idiomatic C code implicitly relies on stack allocation to allow for concise variable declarations; consider this example:<\/p>\n+<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb16-1\" title=\"1\"><span class=\"dt\">void<\/span> foo(<span class=\"dt\">int<\/span> i, <span class=\"dt\">int<\/span> *size);<\/a>\n+<a class=\"sourceLine\" id=\"cb16-2\" title=\"2\"><\/a>\n+<a class=\"sourceLine\" id=\"cb16-3\" title=\"3\"><span class=\"dt\">int<\/span> size = <span class=\"dv\">5<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb16-4\" title=\"4\">foo(<span class=\"dv\">42<\/span>, &amp;size);<\/a><\/code><\/pre><\/div>\n+<p>Here the function <code>foo<\/code> takes an output parameter, a pointer to an <code>int<\/code> variable. Unfortunately (and we have seen part of that pain in the <code>qsort<\/code> example above), implementing this idiom in Panama is not straightforward:<\/p>\n+<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb17-1\" title=\"1\">MethodHandle foo = ...<\/a>\n+<a class=\"sourceLine\" id=\"cb17-2\" title=\"2\">MemorySegment size = MemorySegment.<span class=\"fu\">allocateNative<\/span>(C_INT);<\/a>\n+<a class=\"sourceLine\" id=\"cb17-3\" title=\"3\">MemoryAccess.<span class=\"fu\">setInt<\/span>(size, <span class=\"dv\">5<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb17-4\" title=\"4\">foo.<span class=\"fu\">invokeExact<\/span>(<span class=\"dv\">42<\/span>, size);<\/a><\/code><\/pre><\/div>\n+<p>There are a number of issues with the above code snippet:<\/p>\n+<ul>\n+<li>compared to the C code, it is very verbose<\/li>\n+<li>allocation is very slow compared to C; allocating the <code>size<\/code> variable now takes a full <code>malloc<\/code>, while in C the variable was simply stack-allocated<\/li>\n+<li>we end up with a standalone segment with its own temporal bounds, which will have to be <em>closed<\/em> later, to avoid leaks<\/li>\n+<\/ul>\n+<p>To address these problems, Panama provides a <code>NativeScope<\/code> abstraction, which can be used to group allocation so as to achieve superior allocation performance, but also so that groups of logically-related segments can share the same temporal bounds, and can therefore be closed at once (e.g. by using a single <em>try-with-resources<\/em> statement). With the help of native scopes, the above code can be rewritten as follows:<\/p>\n+<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb18-1\" title=\"1\"><span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb18-2\" title=\"2\">    MemorySegment size = scope.<span class=\"fu\">allocate<\/span>(C_INT, <span class=\"dv\">5<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb18-3\" title=\"3\">    foo.<span class=\"fu\">invokeExact<\/span>(<span class=\"dv\">42<\/span>, size);<\/a>\n+<a class=\"sourceLine\" id=\"cb18-4\" title=\"4\">}<\/a><\/code><\/pre><\/div>\n+<p>It's easy to see how this code improves over the former in many ways; first, native scopes have primitives to allocate <em>and<\/em> initialize the contents of a segment; secondly, native scope use more efficient allocation underneath, so that not every allocation request is turned into a <code>malloc<\/code> — in fact, if the size of memory to be used is known before hand, clients can also use the bounded variant of native scope, using the <code>NativeScope::boundedScope(long size)<\/code> factory <a href=\"#5\"><sup>5<\/sup><\/a>. Third, a native scope can be used as a single temporal bound for all the segments allocated within it: that is, if the code needs to instantiate other variables, it can keep doing so using the same scope — when the <em>try-with-resource<\/em> statement completes, all resources associated with the scope will be freed.<\/p>\n+<p>There are at least two cases where allocation of native resources occurs <em>outside<\/em> a native scope:<\/p>\n+<ul>\n+<li>structs segments returned by native calls (or passed to upcalls Java methods)<\/li>\n+<li>upcall stubs segments returned by the foreign linker<\/li>\n+<\/ul>\n+<p>In these cases, the API gives us a segment which feature <em>its own<\/em> temporal bounds — this is handy, as we can use the segment to control the lifecycle of the resource allocated by the foreign linker support; but it is also a bit unfortunate: if the surrounding code happens to already have a native scope, these new segments won't be able to interoperate with it, and a separate <em>try-with-resource<\/em> segment should be used.<\/p>\n+<p>To alleviate this problem, and allow <em>all<\/em> segments to be managed using the <em>same<\/em> native scope, the native scope API not only supports the ability to allocate <em>new<\/em> segments, but it also allows to take ownership of <em>existing<\/em> ones. To see an example of this, let's go back to our <code>qsort<\/code> example, and see how we can make it better by using native scopes:<\/p>\n+<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb19-1\" title=\"1\"><span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb19-2\" title=\"2\">    comparFunc = scope.<span class=\"fu\">register<\/span>(comparFunc);<\/a>\n+<a class=\"sourceLine\" id=\"cb19-3\" title=\"3\">    MemorySegment array = scope.<span class=\"fu\">allocateArray<\/span>(C_INT, <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[] { <span class=\"dv\">0<\/span>, <span class=\"dv\">9<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">6<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">8<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">7<\/span> });<\/a>\n+<a class=\"sourceLine\" id=\"cb19-4\" title=\"4\">    qsort.<span class=\"fu\">invokeExact<\/span>(array, <span class=\"dv\">10L<\/span>, <span class=\"dv\">4L<\/span>, comparFunc);<\/a>\n+<a class=\"sourceLine\" id=\"cb19-5\" title=\"5\">    <span class=\"dt\">int<\/span>[] sorted = array.<span class=\"fu\">toIntArray<\/span>(); <span class=\"co\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb19-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n+<p>Not only native scope helps in making the allocation of the native array simpler (we no longer need to create an heap segment, and dump its contents onto the off-heap array); but we can also use the native scope to <em>register<\/em> the existing upcall stub segments. When we do that, we obtain a <em>new<\/em> segment, whose temporal bounds are the same as that of the native scope; the old segment will be killed and will no longer be usable. As with all segments returned by native scope, the registered segment we get back will be non-closeable — the only way to close it is to close the native scope it belongs to.<\/p>\n+<p>In short, native scopes are a good way to manage the lifecycle of multiple, logically-related segments, and, despite their simplicity, they provide a fairly good usability and performance boost.<\/p>\n+<h3 id=\"varargs\">Varargs<\/h3>\n+<p>Some C functions are <em>variadic<\/em> and can take an arbitrary number of arguments. Perhaps the most common example of this is the <code>printf<\/code> function, defined in the C standard library:<\/p>\n+<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb20-1\" title=\"1\"><span class=\"dt\">int<\/span> printf(<span class=\"dt\">const<\/span> <span class=\"dt\">char<\/span> *format, ...);<\/a><\/code><\/pre><\/div>\n+<p>This function takes a format string, which features zero or more <em>holes<\/em>, and then can take a number of additional arguments that is identical to the number of holes in the format string.<\/p>\n+<p>The foreign function support can support variadic calls, but with a caveat: the client must provide a specialized Java signature, and a specialized description of the C signature. For instance, let's say we wanted to model the following C call:<\/p>\n+<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb21-1\" title=\"1\">printf(<span class=\"st\">&quot;%d plus %d equals %d&quot;<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>);<\/a><\/code><\/pre><\/div>\n+<p>To do this using the foreign function support provided by Panama we would have to build a <em>specialized<\/em> downcall handle for that call shape <a href=\"#6\"><sup>6<\/sup><\/a>:<\/p>\n+<div class=\"sourceCode\" id=\"cb22\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb22-1\" title=\"1\">MethodHandle printf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb22-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;printf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb22-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb22-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_INT, C_INT, C_INT)<\/a>\n+<a class=\"sourceLine\" id=\"cb22-5\" title=\"5\">);<\/a><\/code><\/pre><\/div>\n+<p>Then we can call the specialized downcall handle as usual:<\/p>\n+<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb23-1\" title=\"1\">printf.<span class=\"fu\">invoke<\/span>(CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d&quot;<\/span>).<span class=\"fu\">address<\/span>(), <span class=\"dv\">2<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>); <span class=\"co\">\/\/prints &quot;2 plus 2 equals 4&quot;<\/span><\/a><\/code><\/pre><\/div>\n+<p>While this works, it is easy to see how such an approach is not very desirable:<\/p>\n+<ul>\n+<li>If the variadic function needs to be called with many different shapes, we have to create many different downcall handles<\/li>\n+<li>while this approach works for downcalls (since the Java code is in charge of determining which and how many arguments should be passed) it fails to scale to upcalls; in that case, the call comes from native code, so we have no way to guarantee that the shape of the upcall stub we have created will match that required by the native function.<\/li>\n+<\/ul>\n+<p>To mitigate these issues, the standard C foreign linker comes equipped with support for C variable argument lists — or <code>va_list<\/code>. When a variadic function is called, C code has to unpack the variadic arguments by creating a <code>va_list<\/code> structure, and then accessing the variadic arguments through the <code>va_list<\/code> one by one (using the <code>va_arg<\/code> macro). To facilitate interop between standard variadic functions and <code>va_list<\/code> many C library functions in fact define <em>two<\/em> flavors of the same function, one using standard variadic signature, one using an extra <code>va_list<\/code> parameter. For instance, in the case of <code>printf<\/code> we can find that a <code>va_list<\/code>-accepting function performing the same task is also defined:<\/p>\n+<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb24-1\" title=\"1\"><span class=\"dt\">int<\/span> vprintf(<span class=\"dt\">const<\/span> <span class=\"dt\">char<\/span> *format, <span class=\"dt\">va_list<\/span> ap);<\/a><\/code><\/pre><\/div>\n+<p>The behavior of this function is the same as before — the only difference is that the ellipsis notation <code>...<\/code> has been replaced with a single <code>va_list<\/code> parameter; in other words, the function is no longer variadic.<\/p>\n+<p>It is indeed fairly easy to create a downcall for <code>vprintf<\/code>:<\/p>\n+<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb25-1\" title=\"1\">MethodHandle vprintf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb25-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;vprintf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb25-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, VaList.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb25-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_VA_LIST));<\/a><\/code><\/pre><\/div>\n+<p>Here, the notable thing is that <code>CLinker<\/code> comes equipped with the special <code>C_VA_LIST<\/code> layout (the layout of a <code>va_list<\/code> parameter) as well as a <code>VaList<\/code> carrier, which can be used to construct and represent variable argument lists from Java code.<\/p>\n+<p>To call the <code>vprintf<\/code> handle we need to create an instance of <code>VaList<\/code> which contains the arguments we want to pass to the <code>vprintf<\/code> function — we can do so, as follows:<\/p>\n+<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb26-1\" title=\"1\">vprintf.<span class=\"fu\">invoke<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb26-2\" title=\"2\">        CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d&quot;<\/span>).<span class=\"fu\">address<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb26-3\" title=\"3\">        VaList.<span class=\"fu\">make<\/span>(builder -&gt;<\/a>\n+<a class=\"sourceLine\" id=\"cb26-4\" title=\"4\">                        builder.<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb26-5\" title=\"5\">                               .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb26-6\" title=\"6\">                               .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">4<\/span>))<\/a>\n+<a class=\"sourceLine\" id=\"cb26-7\" title=\"7\">); <span class=\"co\">\/\/prints &quot;2 plus 2 equals 4&quot;<\/span><\/a><\/code><\/pre><\/div>\n+<p>While the callee has to do more work to call the <code>vprintf<\/code> handle, note that that now we're back in a place where the downcall handle <code>vprintf<\/code> can be shared across multiple callees. A <code>VaList<\/code> object created this way has its own lifetime (<code>VaList<\/code> also supports a <code>close<\/code> operation), so it is up to the callee to make sure that the <code>VaList<\/code> instance is closed (or attached to some existing native scope) so as to avoid leaks.<\/p>\n+<p>Another advantage of using <code>VaList<\/code> is that this approach also scales to upcall stubs — it is therefore possible for clients to create upcalls stubs which take a <code>VaList<\/code> and then, from the Java upcall, read the arguments packed inside the <code>VaList<\/code> one by one using the methods provided by the <code>VaList<\/code> API (e.g. <code>VaList::vargAsInt(MemoryLayout)<\/code>), which mimic the behavior of the C <code>va_arg<\/code> macro.<\/p>\n+<h3 id=\"appendix-full-source-code\">Appendix: full source code<\/h3>\n+<p>The full source code containing most of the code shown throughout this document can be seen below:<\/p>\n+<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb27-1\" title=\"1\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.Addressable;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-3\" title=\"3\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.FunctionDescriptor;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.LibraryLookup;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-5\" title=\"5\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-6\" title=\"6\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-7\" title=\"7\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemorySegment;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-8\" title=\"8\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-9\" title=\"9\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-10\" title=\"10\"><span class=\"kw\">import<\/span><span class=\"im\"> java.lang.invoke.MethodHandle;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-11\" title=\"11\"><span class=\"kw\">import<\/span><span class=\"im\"> java.lang.invoke.MethodHandles;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-12\" title=\"12\"><span class=\"kw\">import<\/span><span class=\"im\"> java.lang.invoke.MethodType;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-13\" title=\"13\"><span class=\"kw\">import<\/span><span class=\"im\"> java.util.Arrays;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-14\" title=\"14\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-15\" title=\"15\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-16\" title=\"16\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-17\" title=\"17\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> Examples {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-18\" title=\"18\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-19\" title=\"19\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-20\" title=\"20\">        <span class=\"fu\">strlen<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb27-21\" title=\"21\">        <span class=\"fu\">qsort<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb27-22\" title=\"22\">        <span class=\"fu\">printf<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb27-23\" title=\"23\">        <span class=\"fu\">vprintf<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb27-24\" title=\"24\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-25\" title=\"25\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-26\" title=\"26\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">strlen<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-27\" title=\"27\">        MethodHandle strlen = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb27-28\" title=\"28\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;strlen&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-29\" title=\"29\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-30\" title=\"30\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_LONG, C_POINTER)<\/a>\n+<a class=\"sourceLine\" id=\"cb27-31\" title=\"31\">        );<\/a>\n+<a class=\"sourceLine\" id=\"cb27-32\" title=\"32\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-33\" title=\"33\">        <span class=\"kw\">try<\/span> (MemorySegment hello = CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;Hello&quot;<\/span>)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-34\" title=\"34\">            <span class=\"dt\">long<\/span> len = (<span class=\"dt\">long<\/span>) strlen.<span class=\"fu\">invokeExact<\/span>(hello.<span class=\"fu\">address<\/span>()); <span class=\"co\">\/\/ 5<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-35\" title=\"35\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(len);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-36\" title=\"36\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-37\" title=\"37\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-38\" title=\"38\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-39\" title=\"39\">    <span class=\"dt\">static<\/span> <span class=\"kw\">class<\/span> Qsort {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-40\" title=\"40\">        <span class=\"dt\">static<\/span> <span class=\"dt\">int<\/span> <span class=\"fu\">qsortCompare<\/span>(MemoryAddress addr1, MemoryAddress addr2) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-41\" title=\"41\">            <span class=\"dt\">int<\/span> v1 = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr1.<span class=\"fu\">toRawLongValue<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb27-42\" title=\"42\">            <span class=\"dt\">int<\/span> v2 = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr2.<span class=\"fu\">toRawLongValue<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb27-43\" title=\"43\">            <span class=\"kw\">return<\/span> v1 - v2;<\/a>\n+<a class=\"sourceLine\" id=\"cb27-44\" title=\"44\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-45\" title=\"45\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-46\" title=\"46\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-47\" title=\"47\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">qsort<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-48\" title=\"48\">        MethodHandle qsort = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb27-49\" title=\"49\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;qsort&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-50\" title=\"50\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">void<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-51\" title=\"51\">                FunctionDescriptor.<span class=\"fu\">ofVoid<\/span>(C_POINTER, C_LONG, C_LONG, C_POINTER)<\/a>\n+<a class=\"sourceLine\" id=\"cb27-52\" title=\"52\">        );<\/a>\n+<a class=\"sourceLine\" id=\"cb27-53\" title=\"53\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-54\" title=\"54\">        MethodHandle comparHandle = MethodHandles.<span class=\"fu\">lookup<\/span>()<\/a>\n+<a class=\"sourceLine\" id=\"cb27-55\" title=\"55\">                .<span class=\"fu\">findStatic<\/span>(Qsort.<span class=\"fu\">class<\/span>, <span class=\"st\">&quot;qsortCompare&quot;<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb27-56\" title=\"56\">                        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>));<\/a>\n+<a class=\"sourceLine\" id=\"cb27-57\" title=\"57\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-58\" title=\"58\">        MemorySegment comparFunc = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">upcallStub<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb27-59\" title=\"59\">                comparHandle,<\/a>\n+<a class=\"sourceLine\" id=\"cb27-60\" title=\"60\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_POINTER)<\/a>\n+<a class=\"sourceLine\" id=\"cb27-61\" title=\"61\">        );<\/a>\n+<a class=\"sourceLine\" id=\"cb27-62\" title=\"62\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-63\" title=\"63\">        <span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-64\" title=\"64\">            comparFunc = scope.<span class=\"fu\">register<\/span>(comparFunc);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-65\" title=\"65\">            MemorySegment array = scope.<span class=\"fu\">allocateArray<\/span>(C_INT, <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[] { <span class=\"dv\">0<\/span>, <span class=\"dv\">9<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">6<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">8<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">7<\/span> });<\/a>\n+<a class=\"sourceLine\" id=\"cb27-66\" title=\"66\">            qsort.<span class=\"fu\">invokeExact<\/span>(array.<span class=\"fu\">address<\/span>(), <span class=\"dv\">10L<\/span>, <span class=\"dv\">4L<\/span>, comparFunc.<span class=\"fu\">address<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb27-67\" title=\"67\">            <span class=\"dt\">int<\/span>[] sorted = array.<span class=\"fu\">toIntArray<\/span>(); <span class=\"co\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-68\" title=\"68\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"bu\">Arrays<\/span>.<span class=\"fu\">toString<\/span>(sorted));<\/a>\n+<a class=\"sourceLine\" id=\"cb27-69\" title=\"69\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-70\" title=\"70\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-71\" title=\"71\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-72\" title=\"72\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">printf<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-73\" title=\"73\">        MethodHandle printf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb27-74\" title=\"74\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;printf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-75\" title=\"75\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-76\" title=\"76\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_INT, C_INT, C_INT)<\/a>\n+<a class=\"sourceLine\" id=\"cb27-77\" title=\"77\">        );<\/a>\n+<a class=\"sourceLine\" id=\"cb27-78\" title=\"78\">        <span class=\"kw\">try<\/span> (MemorySegment s = CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-79\" title=\"79\">            printf.<span class=\"fu\">invoke<\/span>(s.<span class=\"fu\">address<\/span>(), <span class=\"dv\">2<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-80\" title=\"80\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-81\" title=\"81\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-82\" title=\"82\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-83\" title=\"83\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">vprintf<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-84\" title=\"84\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-85\" title=\"85\">        MethodHandle vprintf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb27-86\" title=\"86\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;vprintf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-87\" title=\"87\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, CLinker.<span class=\"fu\">VaList<\/span>.<span class=\"fu\">class<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb27-88\" title=\"88\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_VA_LIST));<\/a>\n+<a class=\"sourceLine\" id=\"cb27-89\" title=\"89\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-90\" title=\"90\">        <span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-91\" title=\"91\">            MemorySegment s = CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>, scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-92\" title=\"92\">            CLinker.<span class=\"fu\">VaList<\/span> vlist = CLinker.<span class=\"fu\">VaList<\/span>.<span class=\"fu\">make<\/span>(builder -&gt;<\/a>\n+<a class=\"sourceLine\" id=\"cb27-93\" title=\"93\">                     builder.<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb27-94\" title=\"94\">                            .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb27-95\" title=\"95\">                            .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">4<\/span>), scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-96\" title=\"96\">            vprintf.<span class=\"fu\">invoke<\/span>(s.<span class=\"fu\">address<\/span>(), vlist);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-97\" title=\"97\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-98\" title=\"98\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-99\" title=\"99\">}<\/a><\/code><\/pre><\/div>\n+<ul>\n+<li><a id=\"1\"\/>(<sup>1<\/sup>):<small> In reality this is not entirely new; even in JNI, when you call a <code>native<\/code> method the VM trusts that the corresponding implementing function in C will feature compatible parameter types and return values; if not a crash might occur.<\/small><\/li>\n+<li><a id=\"2\"\/>(<sup>2<\/sup>):<small> In the fututre we might consider knobs to allow structs returned by value to be allocated on-heap rather than off-heap. If these structs are always passed back and forth in an opaque manner, there could be a significant performance advantage in avoiding an off-heap allocation.<\/small><\/li>\n+<li><a id=\"3a\"\/>(<sup>3a<\/sup>):<small> At the time of writing, support for native method intrinsics has been disabled by default due to some spurious VM crash being detected when running <code>jextract<\/code> with the intrinsics support enabled. While we work to rectify this situation, the intrinsics support can still be enabled using the <code>-Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true<\/code> flag.<\/small><\/li>\n+<li><a id=\"3b\"\/>(<sup>3b<\/sup>):<small> As an advanced option, Panama allows the user to opt-in to remove Java to native thread transitions; while, in the general case it is unsafe doing so (removing thread transitions could have a negative impact on GC for long running native functions, and could crash the VM if the downcall needs to pop back out in Java, e.g. via an upcall), greater efficiency can be achieved; performance sensitive users should consider this option at least for the functions that are called more frquently, assuming that these functions are <em>leaf<\/em> functions (e.g. do not go back to Java via an upcall) and are relatively short-lived.<\/small><\/li>\n+<li><a id=\"4\"\/>(<sup>4<\/sup>):<small> This might change in the future, as we might want to tie the lifecycle of structs created for an upcall to the lifecycle of the upcall itself so that e.g. any segment that are created ahead of calling a Java upcall, are released immediately after the upcall returns<\/small><\/li>\n+<li><a id=\"5\"\/>(<sup>5<\/sup>):<small> We are currently investigating alternate allocation strategies to make allocation inside native scopes even faster<\/small><\/li>\n+<li><a id=\"6\"\/>(<sup>6<\/sup>):<small> On Windows, layouts for variadic arguments have to be adjusted using the <code>CLinker.Win64.asVarArg(ValueLayout)<\/code>; this is necessay because the Windows ABI passes variadic arguments using different rules than the ones used for ordinary arguments.<\/small><\/li>\n+<\/ul>\n+<\/body>\n+<\/html>\n","filename":"doc\/panama_ffi.html","additions":442,"deletions":0,"binary":false,"changes":442,"status":"added"},{"patch":"@@ -0,0 +1,465 @@\n+## State of foreign function support\n+\n+**September 2020**\n+\n+* Tweaked references to restricted segments to use new API\n+* Tweak signature of LibraryLookup::lookup\n+* Replaced usages of ForeignLinker with CLinker, as per new API\n+\n+**Maurizio Cimadamore**\n+\n+In this document we explore the main concepts behind Panama's foreign function support; as we shall see, the central abstraction in the foreign function support is the so called *foreign linker*, an abstraction that allows clients to construct *native* method handles — that is, method handles whose invocation targets a native function defined in some native library. As we shall see, Panama foreign function support is completely expressed in terms of Java code and no intermediate native code is required.\n+\n+### Native addresses\n+\n+Before we dive into the specifics of the foreign function support, it would be useful to briefly recap some of the main concepts we have learned when exploring the [foreign memory access support](http:\/\/cr.openjdk.java.net\/~mcimadamore\/panama\/foreign-memaccess.html). The Foreign Memory Access API allows client to create and manipulate *memory segments*. A memory segment is a view over a memory source (either on- or off-heap) which is spatially bounded, temporally bounded and thread-confined. The guarantees ensure that dereferencing a segment that has been created by Java code is always *safe*, and can never result in a VM crash, or, worse, in silent memory corruption.\n+\n+Now, in the case of memory segments, the above properties (spatial bounds, temporal bounds and confinement) can be known *in full* when the segment is created. But when we interact with native libraries we will often be receiving *raw* pointers; such pointers have no spatial bounds (does a `char*` in C refer to one `char`, or a `char` array of a given size?), no notion of temporal bounds, nor thread-confinement. Raw addresses in our interop support are modelled using the `MemoryAddress` abstraction.\n+\n+A memory address is just what the name implies: it encapsulates a memory address (either on- or off-heap). Since, in order to dereference memory using a memory access var handle, we need a segment, it follows that it is *not* possible to directly dereference a memory address — to do that we need a segment first. So clients can proceed in three different ways here.\n+\n+First, if the memory address is known to belong to a segment the client *already* owns, a *rebase* operation can be performed; in other words, the client can ask the address what is its offset relative to a given segment, and then proceed to dereference the original segment accordingly:\n+\n+```java\n+MemorySegment segment = MemorySegment.allocateNative(100);\n+...\n+MemoryAddress addr = ... \/\/obtain address from native code\n+int x = MemoryAccess.getIntAtOffset(segment, addr.segmentOffset(segment));    \n+```\n+\n+Secondly, if the client does *not* have a segment which contains a given memory address, it can create one *unsafely*, using the `MemoryAddress::asSegmentRestricted`; this can also be useful to inject extra knowledge about spatial bounds which might be available in the native library the client is interacting with:\n+\n+```java\n+MemoryAddress addr = ... \/\/obtain address from native code\n+MemorySegment segment = addr.asSegmentRestricted(100);\n+int x = MemoryAccess.getInt(segment);\n+```\n+\n+Alternatively, the client can fall back to use the so called *everything* segment - that is, a primordial segment which covers the entire native heap. Since this segment is available as a constant, dereference can happen without the need of creating any additional segment instances:\n+\n+```java\n+MemoryAddress addr = ... \/\/obtain address from native code\n+int x = MemoryAccess.getIntAtOffset(MemorySegment.ofNativeRestricted(), addr.toRawLongValue());\n+```\n+\n+Of course, since accessing the entire native heap is inherently *unsafe*, accessing the *everything* segment is considered a *restricted* operation which is only allowed after explicit opt in by setting the `foreign.restricted=permit` runtime flag.\n+\n+`MemoryAddress`, like `MemorySegment` , implements the `Addressable` interface, which is a functional interface whose method projects an entity down to a `MemoryAddress` instance. In the case of `MemoryAddress` such a projection is the identity function; in the case of a memory segment, the projection returns the `MemoryAddres` instance for the segment's base address. This abstraction allows to pass either memory address or memory segments where an address is expected (this is especially useful when generating native bindings).\n+\n+### Symbol lookups\n+\n+The first ingredient of any foreign function support is a mechanism to lookup symbols in native libraries. In traditional Java\/JNI, this is done via the `System::loadLibrary` and `System::load` methods, which internally map into calls to `dlopen`. In Panama, library lookups are modeled more directly, using a  class called`LibraryLookup`  (similar to a method handle lookup),  which provides capabilities to lookup named symbols in a given native library; we can obtain a library lookup in 3 different ways:\n+\n+* `LibraryLookup::ofDefault`  — returns the library lookup which can *see* all the symbols that have been loaded with the VM\n+* `LibraryLookup::ofPath` — creates a library lookup associated with the library found at the given absolute path\n+* `LibraryLookup::ofLibrary` — creates a library lookup associated with the library with given name (this might require setting the `java.library.path` variable accordingly)\n+\n+Once a lookup has been obtained, a client can use it to retrieve handles to library symbols (either global variables or functions) using the `lookup(String)` method, which returns an  `Optional<LibraryLookup.Symbol>`. A lookup symbol is just a proxy for a memory address (in fact, it implements `Addressable`) and a name.\n+\n+For instance, the following code can be used to lookup the `clang_getClangVersion` function provided by the `clang` library:\n+\n+```java\n+LibraryLookup libclang = LibraryLookup.ofLibrary(\"clang\");\n+LibraryLookup.Symbol clangVersion = libclang.lookup(\"clang_getClangVersion\").get();\n+```\n+\n+One crucial distinction between the library loading support of the  Foreign Linker API and of JNI is that JNI libraries are loaded into a  class loader. Furthermore, to preserve [classloader integrity](https:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/guides\/jni\/jni-12.html#libmanage) integrity, the same JNI library cannot be loaded into more than one  classloader.  The foreign function support described here is more  primitive — the Foreign Linker API allows clients to target native  libraries directly, without any intervening JNI code. Crucially, Java  objects are never passed to and from native code by the Foreign Linker API. Because of this, libraries loaded through the `LibraryLookup` hook are not tied to any class loader and can be (re)loaded as many times as needed.\n+\n+### C Linker\n+\n+At the core of Panama foreign function support we find the `CLinker` abstraction. This abstraction plays a dual role: first, for downcalls, it allows to model native function calls as plain `MethodHandle` calls (see `ForeignLinker::downcallHandle`); second, for upcalls, it allows to convert an existing `MethodHandle` (which might point to some Java method) into a `MemorySegment` which could then be passed to native functions as a function pointer (see `ForeignLinker::upcallStub`):\n+\n+```java\n+interface CLinker {\n+    MethodHandle downcallHandle(Addressable func, MethodType type, FunctionDescriptor function);\n+    MemorySegment upcallStub(MethodHandle target, FunctionDescriptor function);\n+    ...\n+    static CLinker getInstance() { ... }\n+}\n+```\n+\n+In the following sections we will dive deeper into how downcall handles and upcall stubs are created; here we want to focus on the similarities between these two routines. First, both take a `FunctionDescriptor` instance — essentially an aggregate of memory layouts which is used to describe the signature of a foreign function in full. Speaking of C, the `CLinker` class defines many layout constants (one for each main C primitive type) — these layouts can be combined using a `FunctionDescriptor` to describe the signature of a C function. For instance, assuming we have a C function taking a `char*` and returning a `long` we can model such a function with the following descriptor:\n+\n+```java\n+FunctionDescriptor func = FunctionDescriptor.of(CLinker.C_LONG, CLinker.C_POINTER);\n+```\n+\n+The layouts used above will be mapped to the right layout according to the platform we are executing on. This also means that these layouts will be platform dependent and that e.g. `C_LONG` will be a 32 bit value layout on Windows, while being a 64-bit value on Linux.\n+\n+Layouts defined in the `CLinker` class are not only handy, as they already model the C types we want to work on; they also contain hidden pieces of information which the foreign linker support uses in order to compute the calling sequence associated with a given function descriptor. For instance, the two C types `int` and `float` might share a similar memory layout (they both are expressed as 32 bit values), but are typically passed using different machine registers. The layout attributes attached to the C-specific layouts in the `CLinker` class ensures that arguments and return values are interpreted in the correct way.\n+\n+Another similarity between `downcallHandle` and `upcallStub` is that they both accept (either directly, or indirectly) a `MethodType` instance. The method type describes the Java signatures that clients will be using when interacting with said downcall handles, or upcall stubs. The C linker implementation adds constraints on which layouts can be used with which Java carrier — for instance by enforcing that the size of the Java carrier is equal to that of the corresponding layout, or by making sure that certain layouts are associated with specific carriers. The following table shows the Java carrier vs. layout mappings enforced by the Linux\/macOS foreign linker implementation:\n+\n+| C layout      | Java carrier    |\n+| ------------- | --------------- |\n+| `C_BOOL`      | `byte`          |\n+| `C_CHAR`      | `byte`          |\n+| `C_SHORT`     | `short`         |\n+| `C_INT`       | `int`           |\n+| `C_LONG`      | `long`          |\n+| `C_LONGLONG`  | `long`          |\n+| `C_FLOAT`     | `float`         |\n+| `C_DOUBLE`    | `double`        |\n+| `C_POINTER`   | `MemoryAddress` |\n+| `GroupLayout` | `MemorySegment` |\n+\n+Aside from the mapping between primitive layout and primitive Java carriers (which might vary across platforms), it is important to note how all pointer layouts must correspond to a `MemoryAddress` carrier, whereas structs (whose layout is defined by a `GroupLayout`) must be associated with a `MemorySegment` carrier.\n+\n+### Downcalls\n+\n+We will now look at how foreign functions can be called from Java using the foreign linker abstraction. Assume we wanted to call the following function from the standard C library:\n+\n+```c\n+size_t strlen(const char *s);\n+```\n+\n+In order to do that, we have to:\n+\n+* lookup the `strlen` symbol\n+* describe the signature of the C function using the layouts in the `CLinker` class\n+\n+* select a Java signature we want to *overlay* on the native function — this will be the signature that clients of the native method handles will interact with\n+* create a *downcall* native method handle with the above information, using the standard C foreign linker\n+\n+Here's an example of how we might want to do that (a full listing of all the examples in this and subsequent sections will be provided in the [appendix](#appendix: full-source-code)):\n+\n+```java\n+MethodHandle strlen = CLinker.getInstance().downcallHandle(\n+\t\tLibraryLookup.ofDefault().lookup(\"strlen\").get(),\n+        MethodType.methodType(long.class, MemoryAddress.class),\n+        FunctionDescriptor.of(C_LONG, C_POINTER)\n+);\n+```\n+\n+Note that, since the function `strlen` is part of the standard C library, which is loaded with the VM, we can just use the default lookup to look it up. The rest is pretty straightforward — the only tricky detail is how to model `size_t`: typically this type has the size of a pointer, so we can use `C_LONG` on Linux, but we'd have to use `C_LONGLONG` on Windows. On the Java side, we model the `size_t` using a `long` and the pointer is modeled using a `MemoryAddress` parameter.\n+\n+One we have obtained the downcall native method handle, we can just use it as any other method handle:\n+\n+```java\n+long len = strlen.invokeExact(CLinker.toCString(\"Hello\").address()) \/\/ 5\n+```\n+\n+Here we are using one of the helper methods in `CLinker` to convert a Java string into an off-heap memory segment which contains a `NULL` terminated C string. We then pass that segment to the method handle and retrieve our result in a Java `long`. Note how all this has been possible *without* any piece of intervening native code — all the interop code can be expressed in (low level) Java.\n+\n+Now that we have seen the basics of how foreign function calls are supported in Panama, let's add some additional considerations. First, it is important to note that, albeit the interop code is written in Java, the above code can *not* be considered 100% safe. There are many arbitrary decisions to be made when setting up downcall method handles such as the one above, some of which might be obvious to us (e.g. how many parameters does the function take), but which cannot ultimately be verified by the Panama runtime. After all, a symbol in a dynamic library is, mostly a numeric offset and, unless we are using a shared library with debugging information, no type information is attached to a given library symbol. This means that, in this case, the Panama runtime has to *trust* our description of the `strlen` function. For this reason, access to the foreign linker is a restricted operation, which can only be performed if the runtime flag `foreign.restricted=permit` is passed on the command line of the Java launcher <a href=\"#1\"><sup>1<\/sup><\/a>.\n+\n+Finally let's talk about the life-cycle of some of the entities involved here; first, as a downcall native handle wraps a lookup symbol, the library from which the symbol has been loaded will stay loaded until there are reachable downcall handles referring to one of its symbols; in the above example, this consideration is less important, given the use of the default lookup object, which can be assumed to stay alive for the entire duration of the application.\n+\n+Certain functions might return pointers, or structs; it is important to realize that if a function returns a pointer (or a `MemoryAddress`), no life-cycle whatsoever is attached to that pointer. It is then up to the client to e.g. free the memory associated with that pointer, or do nothing (in case the library is responsible for the life-cycle of that pointer). If a library returns a struct by value, things are different, as a *fresh*, confined memory segment is allocated off-heap and returned to the callee. It is the responsibility of the callee to cleanup that struct's segment (using `MemorySegment::close`) <a href=\"#2\"><sup>2<\/sup><\/a>.\n+\n+Performance-wise, the reader might ask how efficient calling a foreign function using a native method handle is; the answer is *very*. The JVM comes with some special support for native method handles, so that, if a give method handle is invoked many times (e.g, inside an *hot* loop), the JIT compiler might decide to just generate a snippet of assembly code required to call the native function, and execute that directly. In most cases, invoking native function this way is as efficient as doing so through JNI <a href=\"#3a\"><sup>3a<\/sup><\/a><a href=\"#3b\"><sup>3b<\/sup><\/a>.\n+\n+### Upcalls\n+\n+Sometimes, it is useful to pass Java code as a function pointer to some native function; we can achieve that by using foreign linker support for upcalls. To demonstrate this, let's consider the following function from the C standard library:\n+\n+```c\n+void qsort(void *base, size_t nmemb, size_t size,\n+           int (*compar)(const void *, const void *));\n+```\n+\n+This is a function that can be used to sort the contents of an array, using a custom comparator function — `compar` — which is passed as a function pointer. To be able to call the `qsort` function from Java we have first to create a downcall native method handle for it:\n+\n+```java\n+MethodHandle qsort = CLinker.getInstance().downcallHandle(\n+\t\tLibraryLookup.ofDefault().lookup(\"qsort\").get(),\n+        MethodType.methodType(void.class, MemoryAddress.class, long.class, long.class, MemoryAddress.class),\n+        FunctionDescriptor.ofVoid(C_POINTER, C_LONG, C_LONG, C_POINTER)\n+);\n+```\n+\n+As before, we use `C_LONG` and `long.class` to map the C `size_t` type, and we use `MemoryAddess.class` both for the first pointer parameter (the array pointer) and the last parameter (the function pointer).\n+\n+This time, in order to invoke the `qsort` downcall handle, we need a *function pointer* to be passed as the last parameter; this is where the upcall support in foreign linker comes in handy, as it allows us to create a function pointer out of an existing method handle. First, let's write a function that can compare two int elements (passed as pointers):\n+\n+```java\n+class Qsort {\n+\tstatic int qsortCompare(MemoryAddress addr1, MemoryAddress addr2) {\n+\t\treturn MemoryAccess.getIntAtOffset(MemorySegment.ofNativeRestricted(), addr1.toRawLongValue()) - \n+\t    \t   MemoryAccess.getIntAtOffset(MemorySegment.ofNativeRestricted(), addr2.toRawLongValue());\n+\t}\n+}\n+```\n+\n+Here we can see that the function is performing some *unsafe* dereference of the pointer contents, by using the *everything* segment. Now let's create a method handle pointing to the comparator function above:\n+\n+```java\n+MethodHandle comparHandle = MethodHandles.lookup()\n+                                         .findStatic(Qsort.class, \"qsortCompare\",\n+                                                     MethodType.methodType(int.class, MemoryAddress.class, MemoryAddress.class));\n+```\n+\n+Now that we have a method handle for our Java comparator function, we can create a function pointer, using the foreign linker upcall support  — as for downcalls,  we have to describe the signature of the foreign function pointer using the layouts in the `CLinker` class:\n+\n+```java\n+MemorySegment comparFunc = CLinker.getInstance().upcallStub(\n+    comparHandle,\n+    FunctionDescriptor.of(C_INT, C_POINTER, C_POINTER)\n+);\n+```\n+\n+So, we finally have a memory segment — `comparFunc` — containing a stub that can be used to invoke our Java comparator function; this means we now have all we need to call the `qsort` downcall handle:\n+\n+```java\n+MemorySegment array = MemorySegment.allocateNative(4 * 10);\n+array.copyFrom(MemorySegment.ofArray(new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 }));\n+qsort.invokeExact(array.address(), 10L, 4L, comparFunc.address());\n+int[] sorted = array.toIntArray(); \/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n+```\n+\n+The above code creates an off-heap array, then copies the contents of a Java array on it (we shall see in the next [section](#native-scope) ways to do that more succinctly), and then pass the array to the `qsort` handle, along with the comparator function we obtained from the foreign linker.  As a side-effect, after the call, the contents of the off-heap array will be sorted (as instructed by our comparator function, written in Java). We can than extract a new Java array from the segment, which contains the sorted elements. This is a more advanced example, but one that shows how powerful the native interop support provided by the foreign linker abstraction is, allowing full bidirectional interop support between Java and native.\n+\n+As before, we conclude with a quick note on life-cycle. First, the life-cycle of the upcall stub is tied to that of the segment returned by the foreign linker. When the segment is closed, the upcall is uninstalled from the VM and will no longer be a valid function pointer. Second, the life-cycle of structs (if any) passed by value to the Java upcall function is independent from that of the upcall <a href=\"#4\"><sup>4<\/sup><\/a>, so again the user will have to pay attention not to leak memory and to call `MemorySegment::close` on any segments obtained through an upcall.\n+\n+### Native scope\n+\n+Idiomatic C code implicitly relies on stack allocation to allow for concise variable declarations; consider this example:\n+\n+```c\n+void foo(int i, int *size);\n+\n+int size = 5;\n+foo(42, &size);\n+```\n+\n+Here the function `foo` takes an output parameter, a pointer to an `int` variable. Unfortunately (and we have seen part of that pain in the `qsort` example above), implementing this idiom in Panama is not straightforward:\n+\n+```java\n+MethodHandle foo = ...\n+MemorySegment size = MemorySegment.allocateNative(C_INT);\n+MemoryAccess.setInt(size, 5);\n+foo.invokeExact(42, size);\n+```\n+\n+There are a number of issues with the above code snippet:\n+\n+* compared to the C code, it is very verbose\n+* allocation is very slow compared to C; allocating the `size` variable now takes a full `malloc`, while in C the variable was simply stack-allocated\n+* we end up with a standalone segment with its own temporal bounds, which will have to be *closed* later, to avoid leaks\n+\n+To address these problems, Panama provides a `NativeScope` abstraction, which can be used to group allocation so as to achieve superior allocation performance, but also so that groups of logically-related segments can share the same temporal bounds, and can therefore be closed at once (e.g. by using a single *try-with-resources* statement). With the help of native scopes, the above code can be rewritten as follows:\n+\n+```java\n+try (NativeScope scope = NativeScope.unboundedScope()) {\n+\tMemorySegment size = scope.allocate(C_INT, 5);\n+\tfoo.invokeExact(42, size);\n+}\n+```\n+\n+It's easy to see how this code improves over the former in many ways; first, native scopes have primitives to allocate *and* initialize the contents of a segment; secondly, native scope use more efficient allocation underneath, so that not every allocation request is turned into a `malloc` — in fact, if the size of memory to be used is known before hand, clients can also use the bounded variant of native scope, using the `NativeScope::boundedScope(long size)` factory <a href=\"#5\"><sup>5<\/sup><\/a>. Third, a native scope can be used as a single temporal bound for all the segments allocated within it: that is, if the code needs to instantiate other variables, it can keep doing so using the same scope — when the *try-with-resource* statement completes, all resources associated with the scope will be freed.\n+\n+There are at least two cases where allocation of native resources occurs *outside* a native scope:\n+\n+* structs segments returned by native calls (or passed to upcalls Java methods)\n+* upcall stubs segments returned by the foreign linker\n+\n+In these cases, the API gives us a segment which feature *its own* temporal bounds — this is handy, as we can use the segment to control the lifecycle of the resource allocated by the foreign linker support; but it is also a bit unfortunate: if the surrounding code happens to already have a native scope, these new segments won't be able to interoperate with it, and a separate *try-with-resource* segment should be used.\n+\n+To alleviate this problem, and allow *all* segments to be managed using the *same* native scope, the native scope API not only supports the ability to allocate *new* segments, but it also allows to take ownership of *existing* ones. To see an example of this, let's go back to our `qsort` example, and see how we can make it better by using native scopes:\n+\n+```java\n+try (NativeScope scope = NativeScope.unboundedScope()) {\n+    comparFunc = scope.register(comparFunc);\n+    MemorySegment array = scope.allocateArray(C_INT, new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 });\n+    qsort.invokeExact(array, 10L, 4L, comparFunc);\n+    int[] sorted = array.toIntArray(); \/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n+}\n+```\n+\n+Not only native scope helps in making the allocation of the native array simpler (we no longer need to create an heap segment, and dump its contents onto the off-heap array); but we can also use the native scope to *register* the existing upcall stub segments. When we do that, we obtain a *new* segment, whose temporal bounds are the same as that of the native scope; the old segment will be killed and will no longer be usable. As with all segments returned by native scope, the registered segment we get back will be non-closeable — the only way to close it is to close the native scope it belongs to.\n+\n+In short, native scopes are a good way to manage the lifecycle of multiple, logically-related segments, and, despite their simplicity, they provide a fairly good usability and performance boost.\n+\n+### Varargs\n+\n+Some C functions are *variadic* and can take an arbitrary number of arguments. Perhaps the most common example of this is the `printf` function, defined in the C standard library:\n+\n+```c\n+int printf(const char *format, ...);\n+```\n+\n+This function takes a format string, which features zero or more *holes*, and then can take a number of additional arguments that is identical to the number of holes in the format string.\n+\n+The foreign function support can support variadic calls, but with a caveat: the client must provide a specialized Java signature, and a specialized description of the C signature. For instance, let's say we wanted to model the following C call:\n+\n+```C\n+printf(\"%d plus %d equals %d\", 2, 2, 4);\n+```\n+\n+To do this using the foreign function support provided by Panama we would have to build a *specialized* downcall handle for that call shape <a href=\"#6\"><sup>6<\/sup><\/a>:\n+\n+```java\n+MethodHandle printf = CLinker.getInstance().downcallHandle(\n+\t\tLibraryLookup.ofDefault().lookup(\"printf\").get(),\n+        MethodType.methodType(int.class, MemoryAddress.class, int.class, int.class, int.class),\n+        FunctionDescriptor.of(C_INT, C_POINTER, C_INT, C_INT, C_INT)\n+);\n+```\n+\n+Then we can call the specialized downcall handle as usual:\n+\n+```java\n+printf.invoke(CLinker.toCString(\"%d plus %d equals %d\").address(), 2, 2, 4); \/\/prints \"2 plus 2 equals 4\"\n+```\n+\n+While this works, it is easy to see how such an approach is not very desirable:\n+\n+* If the variadic function needs to be called with many different shapes, we have to create many different downcall handles\n+* while this approach works for downcalls (since the Java code is in charge of determining which and how many arguments should be passed) it fails to scale to upcalls; in that case, the call comes from native code, so we have no way to guarantee that the shape of the upcall stub we have created will match that required by the native function.\n+\n+To mitigate these issues, the standard C foreign linker comes equipped with support for C variable argument lists — or `va_list`.  When a variadic function is called, C code has to unpack the variadic arguments by creating a `va_list` structure, and then accessing the variadic arguments through the `va_list` one by one (using the `va_arg` macro). To facilitate interop between standard variadic functions and `va_list` many C library functions in fact define *two* flavors of the same function, one using standard variadic signature, one using an extra `va_list` parameter. For instance, in the case of `printf` we can find that a `va_list`-accepting function performing the same task is also defined:\n+\n+```c\n+int vprintf(const char *format, va_list ap);\n+```\n+\n+The behavior of this function is the same as before — the only difference is that the ellipsis notation `...` has been replaced with a single `va_list` parameter; in other words, the function is no longer variadic.\n+\n+It is indeed fairly easy to create a downcall for `vprintf`:\n+\n+```java\n+MethodHandle vprintf = CLinker.getInstance().downcallHandle(\n+\t\tLibraryLookup.ofDefault().lookup(\"vprintf\").get(),\n+\t\tMethodType.methodType(int.class, MemoryAddress.class, VaList.class),\n+        FunctionDescriptor.of(C_INT, C_POINTER, C_VA_LIST));\n+```\n+\n+Here, the notable thing is that `CLinker` comes equipped with the special `C_VA_LIST` layout (the layout of a `va_list` parameter) as well as a `VaList` carrier, which can be used to construct and represent variable argument lists from Java code.\n+\n+To call the `vprintf` handle we need to create an instance of `VaList` which contains the arguments we want to pass to the `vprintf` function — we can do so, as follows:\n+\n+```java\n+vprintf.invoke(\n+\t\tCLinker.toCString(\"%d plus %d equals %d\").address(),\n+        VaList.make(builder ->\n+                   \t\tbuilder.vargFromInt(C_INT, 2)\n+                               .vargFromInt(C_INT, 2)\n+                               .vargFromInt(C_INT, 4))\n+); \/\/prints \"2 plus 2 equals 4\"\n+```\n+\n+While the callee has to do more work to call the `vprintf` handle, note that that now we're back in a place where the downcall handle  `vprintf` can be shared across multiple callees. A `VaList` object created this way has its own lifetime (`VaList` also supports a `close` operation), so it is up to the callee to make sure that the `VaList` instance is closed (or attached to some existing native scope) so as to avoid leaks.\n+\n+Another advantage of using `VaList` is that this approach also scales to upcall stubs — it is therefore possible for clients to create upcalls stubs which take a `VaList` and then, from the Java upcall, read the arguments packed inside the `VaList` one by one using the methods provided by the `VaList` API (e.g. `VaList::vargAsInt(MemoryLayout)`), which mimic the behavior of the C `va_arg` macro.\n+\n+### Appendix: full source code\n+\n+The full source code containing most of the code shown throughout this document can be seen below:\n+\n+```java\n+import jdk.incubator.foreign.Addressable;\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.FunctionDescriptor;\n+import jdk.incubator.foreign.LibraryLookup;\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.NativeScope;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.Arrays;\n+\n+import static jdk.incubator.foreign.CLinker.*;\n+\n+public class Examples {\n+\n+    public static void main(String[] args) throws Throwable {\n+        strlen();\n+        qsort();\n+        printf();\n+        vprintf();\n+    }\n+\n+    public static void strlen() throws Throwable {\n+        MethodHandle strlen = CLinker.getInstance().downcallHandle(\n+                LibraryLookup.ofDefault().lookup(\"strlen\").get(),\n+                MethodType.methodType(long.class, MemoryAddress.class),\n+                FunctionDescriptor.of(C_LONG, C_POINTER)\n+        );\n+\n+        try (MemorySegment hello = CLinker.toCString(\"Hello\")) {\n+            long len = (long) strlen.invokeExact(hello.address()); \/\/ 5\n+            System.out.println(len);\n+        }\n+    }\n+\n+    static class Qsort {\n+        static int qsortCompare(MemoryAddress addr1, MemoryAddress addr2) {\n+            int v1 = MemoryAccess.getIntAtOffset(MemorySegment.ofNativeRestricted(), addr1.toRawLongValue());\n+            int v2 = MemoryAccess.getIntAtOffset(MemorySegment.ofNativeRestricted(), addr2.toRawLongValue());\n+            return v1 - v2;\n+        }\n+    }\n+\n+    public static void qsort() throws Throwable {\n+        MethodHandle qsort = CLinker.getInstance().downcallHandle(\n+                LibraryLookup.ofDefault().lookup(\"qsort\").get(),\n+                MethodType.methodType(void.class, MemoryAddress.class, long.class, long.class, MemoryAddress.class),\n+                FunctionDescriptor.ofVoid(C_POINTER, C_LONG, C_LONG, C_POINTER)\n+        );\n+\n+        MethodHandle comparHandle = MethodHandles.lookup()\n+                .findStatic(Qsort.class, \"qsortCompare\",\n+                        MethodType.methodType(int.class, MemoryAddress.class, MemoryAddress.class));\n+\n+        MemorySegment comparFunc = CLinker.getInstance().upcallStub(\n+                comparHandle,\n+                FunctionDescriptor.of(C_INT, C_POINTER, C_POINTER)\n+        );\n+\n+        try (NativeScope scope = NativeScope.unboundedScope()) {\n+            comparFunc = scope.register(comparFunc);\n+            MemorySegment array = scope.allocateArray(C_INT, new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 });\n+            qsort.invokeExact(array.address(), 10L, 4L, comparFunc.address());\n+            int[] sorted = array.toIntArray(); \/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n+            System.out.println(Arrays.toString(sorted));\n+        }\n+    }\n+\n+    public static void printf() throws Throwable {\n+        MethodHandle printf = CLinker.getInstance().downcallHandle(\n+                LibraryLookup.ofDefault().lookup(\"printf\").get(),\n+                MethodType.methodType(int.class, MemoryAddress.class, int.class, int.class, int.class),\n+                FunctionDescriptor.of(C_INT, C_POINTER, C_INT, C_INT, C_INT)\n+        );\n+        try (MemorySegment s = CLinker.toCString(\"%d plus %d equals %d\\n\")) {\n+            printf.invoke(s.address(), 2, 2, 4);\n+        }\n+    }\n+\n+    public static void vprintf() throws Throwable {\n+\n+        MethodHandle vprintf = CLinker.getInstance().downcallHandle(\n+                LibraryLookup.ofDefault().lookup(\"vprintf\").get(),\n+                MethodType.methodType(int.class, MemoryAddress.class, CLinker.VaList.class),\n+                FunctionDescriptor.of(C_INT, C_POINTER, C_VA_LIST));\n+\n+        try (NativeScope scope = NativeScope.unboundedScope()) {\n+            MemorySegment s = CLinker.toCString(\"%d plus %d equals %d\\n\", scope);\n+            CLinker.VaList vlist = CLinker.VaList.make(builder ->\n+                     builder.vargFromInt(C_INT, 2)\n+                            .vargFromInt(C_INT, 2)\n+                            .vargFromInt(C_INT, 4), scope);\n+            vprintf.invoke(s.address(), vlist);\n+        }\n+    }\n+}\n+```\n+\n+\n+\n+\n+\n+\n+\n+* <a id=\"1\"\/>(<sup>1<\/sup>):<small> In reality this is not entirely new; even in JNI, when you call a `native` method the VM trusts that the corresponding implementing function in C will feature compatible parameter types and return values; if not a crash might occur.<\/small>\n+* <a id=\"2\"\/>(<sup>2<\/sup>):<small> In the fututre we might consider knobs to allow structs returned by value to be allocated on-heap rather than off-heap. If these structs are always passed back and forth in an opaque manner, there could be a significant performance advantage in avoiding an off-heap allocation.<\/small>\n+* <a id=\"3a\"\/>(<sup>3a<\/sup>):<small> At the time of writing, support for native method intrinsics has been disabled by default due to some spurious VM crash being detected when running `jextract` with the intrinsics support enabled. While we work to rectify this situation, the intrinsics support can still be enabled using the ` -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true` flag.<\/small>\n+* <a id=\"3b\"\/>(<sup>3b<\/sup>):<small> As an advanced option, Panama allows the user to opt-in to remove Java to native thread transitions; while, in the general case it is unsafe doing so (removing thread transitions could have a negative impact on GC for long running native functions, and could crash the VM if the downcall needs to pop back out in Java, e.g. via an upcall), greater efficiency can be achieved; performance sensitive users should consider this option at least for the functions that are called more frquently, assuming that these functions are *leaf* functions (e.g. do not go back to Java via an upcall) and are relatively short-lived.<\/small>\n+* <a id=\"4\"\/>(<sup>4<\/sup>):<small> This might change in the future, as we might want to tie the lifecycle of structs created for an upcall to the lifecycle of the upcall itself so that e.g. any segment that are created ahead of calling a Java upcall, are released immediately after the upcall returns<\/small>\n+* <a id=\"5\"\/>(<sup>5<\/sup>):<small> We are currently investigating alternate allocation strategies to make allocation inside native scopes even faster<\/small>\n+* <a id=\"6\"\/>(<sup>6<\/sup>):<small> On Windows, layouts for variadic arguments have to be adjusted using the `CLinker.Win64.asVarArg(ValueLayout)`; this is necessay because the Windows ABI passes variadic arguments using different rules than the ones used for ordinary arguments.<\/small>\n+\n+\n","filename":"doc\/panama_ffi.md","additions":465,"deletions":0,"binary":false,"changes":465,"status":"added"},{"patch":"@@ -7,70 +7,69 @@\n-  <title>Using Panama &quot;foreign&quot; JDK<\/title>\n-  <style>\n-    code{white-space: pre-wrap;}\n-    span.smallcaps{font-variant: small-caps;}\n-    span.underline{text-decoration: underline;}\n-    div.column{display: inline-block; vertical-align: top; width: 50%;}\n-    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n-    ul.task-list{list-style: none;}\n-    pre > code.sourceCode { white-space: pre; position: relative; }\n-    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n-    pre > code.sourceCode > span:empty { height: 1.2em; }\n-    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n-    div.sourceCode { margin: 1em 0; }\n-    pre.sourceCode { margin: 0; }\n-    @media screen {\n-    div.sourceCode { overflow: auto; }\n-    }\n-    @media print {\n-    pre > code.sourceCode { white-space: pre-wrap; }\n-    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n-    }\n-    pre.numberSource code\n-      { counter-reset: source-line 0; }\n-    pre.numberSource code > span\n-      { position: relative; left: -4em; counter-increment: source-line; }\n-    pre.numberSource code > span > a:first-child::before\n-      { content: counter(source-line);\n-        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n-        border: none; display: inline-block;\n-        -webkit-touch-callout: none; -webkit-user-select: none;\n-        -khtml-user-select: none; -moz-user-select: none;\n-        -ms-user-select: none; user-select: none;\n-        padding: 0 4px; width: 4em;\n-        color: #aaaaaa;\n-      }\n-    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n-    div.sourceCode\n-      {   }\n-    @media screen {\n-    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n-    }\n-    code span.al { color: #ff0000; font-weight: bold; } \/* Alert *\/\n-    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Annotation *\/\n-    code span.at { color: #7d9029; } \/* Attribute *\/\n-    code span.bn { color: #40a070; } \/* BaseN *\/\n-    code span.bu { } \/* BuiltIn *\/\n-    code span.cf { color: #007020; font-weight: bold; } \/* ControlFlow *\/\n-    code span.ch { color: #4070a0; } \/* Char *\/\n-    code span.cn { color: #880000; } \/* Constant *\/\n-    code span.co { color: #60a0b0; font-style: italic; } \/* Comment *\/\n-    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } \/* CommentVar *\/\n-    code span.do { color: #ba2121; font-style: italic; } \/* Documentation *\/\n-    code span.dt { color: #902000; } \/* DataType *\/\n-    code span.dv { color: #40a070; } \/* DecVal *\/\n-    code span.er { color: #ff0000; font-weight: bold; } \/* Error *\/\n-    code span.ex { } \/* Extension *\/\n-    code span.fl { color: #40a070; } \/* Float *\/\n-    code span.fu { color: #06287e; } \/* Function *\/\n-    code span.im { } \/* Import *\/\n-    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Information *\/\n-    code span.kw { color: #007020; font-weight: bold; } \/* Keyword *\/\n-    code span.op { color: #666666; } \/* Operator *\/\n-    code span.ot { color: #007020; } \/* Other *\/\n-    code span.pp { color: #bc7a00; } \/* Preprocessor *\/\n-    code span.sc { color: #4070a0; } \/* SpecialChar *\/\n-    code span.ss { color: #bb6688; } \/* SpecialString *\/\n-    code span.st { color: #4070a0; } \/* String *\/\n-    code span.va { color: #19177c; } \/* Variable *\/\n-    code span.vs { color: #4070a0; } \/* VerbatimString *\/\n-    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Warning *\/\n+  <title>panama_jextract<\/title>\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <style type=\"text\/css\">\n+a.sourceLine { display: inline-block; line-height: 1.25; }\n+a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }\n+a.sourceLine:empty { height: 1.2em; }\n+.sourceCode { overflow: visible; }\n+code.sourceCode { white-space: pre; position: relative; }\n+div.sourceCode { margin: 1em 0; }\n+pre.sourceCode { margin: 0; }\n+@media screen {\n+div.sourceCode { overflow: auto; }\n+}\n+@media print {\n+code.sourceCode { white-space: pre-wrap; }\n+a.sourceLine { text-indent: -1em; padding-left: 1em; }\n+}\n+pre.numberSource a.sourceLine\n+  { position: relative; left: -4em; }\n+pre.numberSource a.sourceLine::before\n+  { content: attr(title);\n+    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n+    border: none; pointer-events: all; display: inline-block;\n+    -webkit-touch-callout: none; -webkit-user-select: none;\n+    -khtml-user-select: none; -moz-user-select: none;\n+    -ms-user-select: none; user-select: none;\n+    padding: 0 4px; width: 4em;\n+    color: #aaaaaa;\n+  }\n+pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n+div.sourceCode\n+  {  }\n+@media screen {\n+a.sourceLine::before { text-decoration: underline; }\n+}\n+code span.al { color: #ff0000; font-weight: bold; } \/* Alert *\/\n+code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Annotation *\/\n+code span.at { color: #7d9029; } \/* Attribute *\/\n+code span.bn { color: #40a070; } \/* BaseN *\/\n+code span.bu { } \/* BuiltIn *\/\n+code span.cf { color: #007020; font-weight: bold; } \/* ControlFlow *\/\n+code span.ch { color: #4070a0; } \/* Char *\/\n+code span.cn { color: #880000; } \/* Constant *\/\n+code span.co { color: #60a0b0; font-style: italic; } \/* Comment *\/\n+code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } \/* CommentVar *\/\n+code span.do { color: #ba2121; font-style: italic; } \/* Documentation *\/\n+code span.dt { color: #902000; } \/* DataType *\/\n+code span.dv { color: #40a070; } \/* DecVal *\/\n+code span.er { color: #ff0000; font-weight: bold; } \/* Error *\/\n+code span.ex { } \/* Extension *\/\n+code span.fl { color: #40a070; } \/* Float *\/\n+code span.fu { color: #06287e; } \/* Function *\/\n+code span.im { } \/* Import *\/\n+code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Information *\/\n+code span.kw { color: #007020; font-weight: bold; } \/* Keyword *\/\n+code span.op { color: #666666; } \/* Operator *\/\n+code span.ot { color: #007020; } \/* Other *\/\n+code span.pp { color: #bc7a00; } \/* Preprocessor *\/\n+code span.sc { color: #4070a0; } \/* SpecialChar *\/\n+code span.ss { color: #bb6688; } \/* SpecialString *\/\n+code span.st { color: #4070a0; } \/* String *\/\n+code span.va { color: #19177c; } \/* Variable *\/\n+code span.vs { color: #4070a0; } \/* VerbatimString *\/\n+code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Warning *\/\n@@ -79,3 +78,0 @@\n-  <!--[if lt IE 9]>\n-    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\n-  <![endif]-->\n@@ -84,8 +80,1 @@\n-<header id=\"title-block-header\">\n-<h1 class=\"title\">Using Panama \"foreign\" JDK<\/h1>\n-<\/header>\n-<nav id=\"TOC\" role=\"doc-toc\">\n-<ul>\n-<li><a href=\"#using-panama-foreign-jextract-jdk\">Using Panama \"foreign-jextract\" JDK<\/a>\n-<ul>\n-<li><a href=\"#hello-world\">Hello World<\/a>\n+<nav id=\"TOC\">\n@@ -93,0 +82,2 @@\n+<li><a href=\"#using-the-jextract-tool\">Using the <code>jextract<\/code> tool<\/a><ul>\n+<li><a href=\"#hello-world\">Hello World<\/a><ul>\n@@ -100,2 +91,1 @@\n-<li><a href=\"#embedding-python-interpreter-in-your-java-program-mac-os\">Embedding Python interpreter in your Java program (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#embedding-python-interpreter-in-your-java-program-mac-os\">Embedding Python interpreter in your Java program (Mac OS)<\/a><ul>\n@@ -106,2 +96,1 @@\n-<li><a href=\"#using-readline-library-from-java-code-mac-os\">Using readline library from Java code (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-readline-library-from-java-code-mac-os\">Using readline library from Java code (Mac OS)<\/a><ul>\n@@ -112,2 +101,1 @@\n-<li><a href=\"#using-libcurl-from-java-mac-os\">Using libcurl from Java (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-libcurl-from-java-mac-os\">Using libcurl from Java (Mac OS)<\/a><ul>\n@@ -118,2 +106,1 @@\n-<li><a href=\"#using-blas-library\">Using BLAS library<\/a>\n-<ul>\n+<li><a href=\"#using-blas-library\">Using BLAS library<\/a><ul>\n@@ -125,2 +112,1 @@\n-<li><a href=\"#using-lapack-library-mac-os\">Using LAPACK library (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-lapack-library-mac-os\">Using LAPACK library (Mac OS)<\/a><ul>\n@@ -131,2 +117,1 @@\n-<li><a href=\"#using-libproc-library-to-list-processes-from-java-mac-os\">Using libproc library to list processes from Java (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-libproc-library-to-list-processes-from-java-mac-os\">Using libproc library to list processes from Java (Mac OS)<\/a><ul>\n@@ -137,2 +122,1 @@\n-<li><a href=\"#using-libgit2-from-java-mac-os\">Using libgit2 from Java (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-libgit2-from-java-mac-os\">Using libgit2 from Java (Mac OS)<\/a><ul>\n@@ -145,2 +129,1 @@\n-<li><a href=\"#using-sqlite3-library-from-java-mac-os\">Using sqlite3 library from Java (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-sqlite3-library-from-java-mac-os\">Using sqlite3 library from Java (Mac OS)<\/a><ul>\n@@ -151,2 +134,1 @@\n-<li><a href=\"#using-opengl-library-from-java-mac-os\">Using OpenGL library from Java (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-opengl-library-from-java-mac-os\">Using OpenGL library from Java (Mac OS)<\/a><ul>\n@@ -157,2 +139,1 @@\n-<li><a href=\"#using-tensorflow-mac-os\">Using tensorflow (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-tensorflow-mac-os\">Using tensorflow (Mac OS)<\/a><ul>\n@@ -165,2 +146,1 @@\n-<li><a href=\"#using-time.h-mac-os\">Using time.h (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-time.h-mac-os\">Using time.h (Mac OS)<\/a><ul>\n@@ -171,2 +151,1 @@\n-<li><a href=\"#using-libclang-library-mac-os\">Using libclang library (Mac OS)<\/a>\n-<ul>\n+<li><a href=\"#using-libclang-library-mac-os\">Using libclang library (Mac OS)<\/a><ul>\n@@ -181,3 +160,3 @@\n-<h1 id=\"using-panama-foreign-jextract-jdk\">Using Panama \"foreign-jextract\" JDK<\/h1>\n-<p>You can build \"foreign-jextract\" branch of panama repo <a href=\"https:\/\/github.com\/openjdk\/panama-foreign\">https:\/\/github.com\/openjdk\/panama-foreign<\/a><\/p>\n-<p>Using foreign function call in Java involves the following two steps:<\/p>\n+<h1 id=\"using-the-jextract-tool\">Using the <code>jextract<\/code> tool<\/h1>\n+<p><code>jextract<\/code> is a simple - but convenient - tool which generates a Java API from one or more native C headers. The tool can be obtained by building the <a href=\"https:\/\/github.com\/openjdk\/panama-foreign\">foreign-jextract<\/a> branch of Panama foreign repository.<\/p>\n+<p>Interacting with the <code>jextract<\/code> tool usually involves two steps:<\/p>\n@@ -185,2 +164,2 @@\n-<li>Use <strong>jextract<\/strong> tool to generate java interface for your C header file(s)<\/li>\n-<li>Invoke C functions via the jextracted Java interface<\/li>\n+<li>Use the <code>jextract<\/code> tool to generate a java interface for some C header files<\/li>\n+<li>Write a Java program which invokes the wrapper API points generated by <code>jextract<\/code><\/li>\n@@ -188,0 +167,11 @@\n+<p>The <code>jextract<\/code> tool provides some basic options in order to control how the extraction process works; these are listed below:<\/p>\n+<ul>\n+<li><code>-C &lt;String&gt;<\/code> - specify arguments to be passed to the underlying Clang parser<\/li>\n+<li><code>-I &lt;String&gt;<\/code> - specify include files path<\/li>\n+<li><code>-l &lt;String&gt;<\/code> - specify a library (name or full absolute path) which should be linked when the generated API is loaded<\/li>\n+<li><code>-d &lt;String&gt;<\/code> - specify where to place generated files<\/li>\n+<li><code>-t &lt;String&gt;<\/code> specify the target package for the generated classes<\/li>\n+<li><code>--filter &lt;String&gt;<\/code> - simple string-based filtering mechanism; only symbols from headers whose absolute path contains the specified string will be included in the generated API<\/li>\n+<li><code>--source<\/code> - generate java sources instead of classfiles<\/li>\n+<\/ul>\n+<p>The remainder of this documents shows some basic usage examples of the <code>jextract<\/code> tool.<\/p>\n@@ -190,8 +180,8 @@\n-<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\"><\/a><\/span>\n-<span id=\"cb1-2\"><a href=\"#cb1-2\"><\/a><span class=\"pp\">#ifndef helloworld_h<\/span><\/span>\n-<span id=\"cb1-3\"><a href=\"#cb1-3\"><\/a><span class=\"pp\">#define helloworld_h<\/span><\/span>\n-<span id=\"cb1-4\"><a href=\"#cb1-4\"><\/a><\/span>\n-<span id=\"cb1-5\"><a href=\"#cb1-5\"><\/a><span class=\"kw\">extern<\/span> <span class=\"dt\">void<\/span> helloworld(<span class=\"dt\">void<\/span>);<\/span>\n-<span id=\"cb1-6\"><a href=\"#cb1-6\"><\/a><\/span>\n-<span id=\"cb1-7\"><a href=\"#cb1-7\"><\/a><span class=\"pp\">#endif <\/span><span class=\"co\">\/* helloworld_h *\/<\/span><\/span>\n-<span id=\"cb1-8\"><a href=\"#cb1-8\"><\/a><\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\"><span class=\"pp\">#ifndef helloworld_h<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\"><span class=\"pp\">#define helloworld_h<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb1-4\" title=\"4\"><\/a>\n+<a class=\"sourceLine\" id=\"cb1-5\" title=\"5\"><span class=\"kw\">extern<\/span> <span class=\"dt\">void<\/span> helloworld(<span class=\"dt\">void<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb1-6\" title=\"6\"><\/a>\n+<a class=\"sourceLine\" id=\"cb1-7\" title=\"7\"><span class=\"pp\">#endif <\/span><span class=\"co\">\/* helloworld_h *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb1-8\" title=\"8\"><\/a><\/code><\/pre><\/div>\n@@ -199,8 +189,8 @@\n-<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb2-1\"><a href=\"#cb2-1\"><\/a><\/span>\n-<span id=\"cb2-2\"><a href=\"#cb2-2\"><\/a><span class=\"pp\">#include <\/span><span class=\"im\">&lt;stdio.h&gt;<\/span><\/span>\n-<span id=\"cb2-3\"><a href=\"#cb2-3\"><\/a><\/span>\n-<span id=\"cb2-4\"><a href=\"#cb2-4\"><\/a><span class=\"pp\">#include <\/span><span class=\"im\">&quot;helloworld.h&quot;<\/span><\/span>\n-<span id=\"cb2-5\"><a href=\"#cb2-5\"><\/a><\/span>\n-<span id=\"cb2-6\"><a href=\"#cb2-6\"><\/a><span class=\"dt\">void<\/span> helloworld(<span class=\"dt\">void<\/span>) {<\/span>\n-<span id=\"cb2-7\"><a href=\"#cb2-7\"><\/a>    printf(<span class=\"st\">&quot;Hello World!<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>);<\/span>\n-<span id=\"cb2-8\"><a href=\"#cb2-8\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb2-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb2-2\" title=\"2\"><span class=\"pp\">#include <\/span><span class=\"im\">&lt;stdio.h&gt;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb2-3\" title=\"3\"><\/a>\n+<a class=\"sourceLine\" id=\"cb2-4\" title=\"4\"><span class=\"pp\">#include <\/span><span class=\"im\">&quot;helloworld.h&quot;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb2-5\" title=\"5\"><\/a>\n+<a class=\"sourceLine\" id=\"cb2-6\" title=\"6\"><span class=\"dt\">void<\/span> helloworld(<span class=\"dt\">void<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb2-7\" title=\"7\">    printf(<span class=\"st\">&quot;Hello World!<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb2-8\" title=\"8\">}<\/a><\/code><\/pre><\/div>\n@@ -208,2 +198,2 @@\n-<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\"><\/a><\/span>\n-<span id=\"cb3-2\"><a href=\"#cb3-2\"><\/a><span class=\"fu\">cc<\/span> -shared -o libhelloworld.dylib helloworld.c<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb3-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb3-2\" title=\"2\"><span class=\"fu\">cc<\/span> -shared -o libhelloworld.dylib helloworld.c<\/a><\/code><\/pre><\/div>\n@@ -211,2 +201,2 @@\n-<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\"><\/a><\/span>\n-<span id=\"cb4-2\"><a href=\"#cb4-2\"><\/a><span class=\"ex\">jextract<\/span> -t org.hello -lhelloworld helloworld.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb4-2\" title=\"2\"><span class=\"ex\">jextract<\/span> -t org.hello -lhelloworld helloworld.h<\/a><\/code><\/pre><\/div>\n@@ -214,8 +204,8 @@\n-<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb5-1\"><a href=\"#cb5-1\"><\/a><\/span>\n-<span id=\"cb5-2\"><a href=\"#cb5-2\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.hello.helloworld_h.*;<\/span><\/span>\n-<span id=\"cb5-3\"><a href=\"#cb5-3\"><\/a><\/span>\n-<span id=\"cb5-4\"><a href=\"#cb5-4\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> HelloWorld {<\/span>\n-<span id=\"cb5-5\"><a href=\"#cb5-5\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb5-6\"><a href=\"#cb5-6\"><\/a>        <span class=\"fu\">helloworld<\/span>();<\/span>\n-<span id=\"cb5-7\"><a href=\"#cb5-7\"><\/a>    }<\/span>\n-<span id=\"cb5-8\"><a href=\"#cb5-8\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb5-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb5-2\" title=\"2\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.hello.helloworld_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb5-3\" title=\"3\"><\/a>\n+<a class=\"sourceLine\" id=\"cb5-4\" title=\"4\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> HelloWorld {<\/a>\n+<a class=\"sourceLine\" id=\"cb5-5\" title=\"5\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb5-6\" title=\"6\">        <span class=\"fu\">helloworld<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb5-7\" title=\"7\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb5-8\" title=\"8\">}<\/a><\/code><\/pre><\/div>\n@@ -223,2 +213,2 @@\n-<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\"><\/a><\/span>\n-<span id=\"cb6-2\"><a href=\"#cb6-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign HelloWorld.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb6-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb6-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign HelloWorld.java<\/a><\/code><\/pre><\/div>\n@@ -227,7 +217,7 @@\n-<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\"><\/a><\/span>\n-<span id=\"cb7-2\"><a href=\"#cb7-2\"><\/a><span class=\"ex\">jextract<\/span> \\<\/span>\n-<span id=\"cb7-3\"><a href=\"#cb7-3\"><\/a>  -l python2.7 \\<\/span>\n-<span id=\"cb7-4\"><a href=\"#cb7-4\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb7-5\"><a href=\"#cb7-5\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/python2.7\/ \\<\/span>\n-<span id=\"cb7-6\"><a href=\"#cb7-6\"><\/a>  -t org.python \\<\/span>\n-<span id=\"cb7-7\"><a href=\"#cb7-7\"><\/a>   \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/python2.7\/Python.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb7-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb7-2\" title=\"2\"><span class=\"ex\">jextract<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb7-3\" title=\"3\">  -l python2.7 \\<\/a>\n+<a class=\"sourceLine\" id=\"cb7-4\" title=\"4\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb7-5\" title=\"5\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/python2.7\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb7-6\" title=\"6\">  -t org.python \\<\/a>\n+<a class=\"sourceLine\" id=\"cb7-7\" title=\"7\">   \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/python2.7\/Python.h<\/a><\/code><\/pre><\/div>\n@@ -235,17 +225,17 @@\n-<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb8-1\"><a href=\"#cb8-1\"><\/a><\/span>\n-<span id=\"cb8-2\"><a href=\"#cb8-2\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb8-3\"><a href=\"#cb8-3\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/span>\n-<span id=\"cb8-4\"><a href=\"#cb8-4\"><\/a><span class=\"co\">\/\/ import jextracted python &#39;header&#39; class<\/span><\/span>\n-<span id=\"cb8-5\"><a href=\"#cb8-5\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.python.Python_h.*;<\/span><\/span>\n-<span id=\"cb8-6\"><a href=\"#cb8-6\"><\/a><\/span>\n-<span id=\"cb8-7\"><a href=\"#cb8-7\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> PythonMain {<\/span>\n-<span id=\"cb8-8\"><a href=\"#cb8-8\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb8-9\"><a href=\"#cb8-9\"><\/a>        <span class=\"bu\">String<\/span> script = <span class=\"st\">&quot;print(sum([33, 55, 66])); print(&#39;Hello from Python!&#39;)<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>;<\/span>\n-<span id=\"cb8-10\"><a href=\"#cb8-10\"><\/a><\/span>\n-<span id=\"cb8-11\"><a href=\"#cb8-11\"><\/a>        <span class=\"fu\">Py_Initialize<\/span>();<\/span>\n-<span id=\"cb8-12\"><a href=\"#cb8-12\"><\/a>        <span class=\"kw\">try<\/span> (var str = <span class=\"fu\">toCString<\/span>(script)) {<\/span>\n-<span id=\"cb8-13\"><a href=\"#cb8-13\"><\/a>            <span class=\"fu\">PyRun_SimpleStringFlags<\/span>(str, NULL);<\/span>\n-<span id=\"cb8-14\"><a href=\"#cb8-14\"><\/a>            <span class=\"fu\">Py_Finalize<\/span>();<\/span>\n-<span id=\"cb8-15\"><a href=\"#cb8-15\"><\/a>        }<\/span>\n-<span id=\"cb8-16\"><a href=\"#cb8-16\"><\/a>    }<\/span>\n-<span id=\"cb8-17\"><a href=\"#cb8-17\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb8-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb8-2\" title=\"2\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb8-3\" title=\"3\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb8-4\" title=\"4\"><span class=\"co\">\/\/ import jextracted python &#39;header&#39; class<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb8-5\" title=\"5\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.python.Python_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb8-6\" title=\"6\"><\/a>\n+<a class=\"sourceLine\" id=\"cb8-7\" title=\"7\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> PythonMain {<\/a>\n+<a class=\"sourceLine\" id=\"cb8-8\" title=\"8\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb8-9\" title=\"9\">        <span class=\"bu\">String<\/span> script = <span class=\"st\">&quot;print(sum([33, 55, 66])); print(&#39;Hello from Python!&#39;)<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb8-10\" title=\"10\"><\/a>\n+<a class=\"sourceLine\" id=\"cb8-11\" title=\"11\">        <span class=\"fu\">Py_Initialize<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb8-12\" title=\"12\">        <span class=\"kw\">try<\/span> (var str = <span class=\"fu\">toCString<\/span>(script)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb8-13\" title=\"13\">            <span class=\"fu\">PyRun_SimpleStringFlags<\/span>(str, NULL);<\/a>\n+<a class=\"sourceLine\" id=\"cb8-14\" title=\"14\">            <span class=\"fu\">Py_Finalize<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb8-15\" title=\"15\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb8-16\" title=\"16\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb8-17\" title=\"17\">}<\/a><\/code><\/pre><\/div>\n@@ -253,4 +243,4 @@\n-<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb9-1\"><a href=\"#cb9-1\"><\/a><\/span>\n-<span id=\"cb9-2\"><a href=\"#cb9-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb9-3\"><a href=\"#cb9-3\"><\/a>    -Djava.library.path=\/System\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib \\<\/span>\n-<span id=\"cb9-4\"><a href=\"#cb9-4\"><\/a>    PythonMain.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb9-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb9-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb9-3\" title=\"3\">    -Djava.library.path=\/System\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib \\<\/a>\n+<a class=\"sourceLine\" id=\"cb9-4\" title=\"4\">    PythonMain.java<\/a><\/code><\/pre><\/div>\n@@ -259,5 +249,5 @@\n-<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\"><\/a><\/span>\n-<span id=\"cb10-2\"><a href=\"#cb10-2\"><\/a><span class=\"ex\">jextract<\/span> \\<\/span>\n-<span id=\"cb10-3\"><a href=\"#cb10-3\"><\/a>  -l readline -t org.unix \\<\/span>\n-<span id=\"cb10-4\"><a href=\"#cb10-4\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb10-5\"><a href=\"#cb10-5\"><\/a>   \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/readline\/readline.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb10-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb10-2\" title=\"2\"><span class=\"ex\">jextract<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb10-3\" title=\"3\">  -l readline -t org.unix \\<\/a>\n+<a class=\"sourceLine\" id=\"cb10-4\" title=\"4\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb10-5\" title=\"5\">   \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/readline\/readline.h<\/a><\/code><\/pre><\/div>\n@@ -265,17 +255,17 @@\n-<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb11-1\"><a href=\"#cb11-1\"><\/a><\/span>\n-<span id=\"cb11-2\"><a href=\"#cb11-2\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.unix.readline_h.*;<\/span><\/span>\n-<span id=\"cb11-3\"><a href=\"#cb11-3\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb11-4\"><a href=\"#cb11-4\"><\/a><\/span>\n-<span id=\"cb11-5\"><a href=\"#cb11-5\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> Readline {<\/span>\n-<span id=\"cb11-6\"><a href=\"#cb11-6\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb11-7\"><a href=\"#cb11-7\"><\/a>        <span class=\"kw\">try<\/span> (var str = <span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;name? &quot;<\/span>)) {<\/span>\n-<span id=\"cb11-8\"><a href=\"#cb11-8\"><\/a>            <span class=\"co\">\/\/ call &quot;readline&quot; API<\/span><\/span>\n-<span id=\"cb11-9\"><a href=\"#cb11-9\"><\/a>            var p = <span class=\"fu\">readline<\/span>(str);<\/span>\n-<span id=\"cb11-10\"><a href=\"#cb11-10\"><\/a><\/span>\n-<span id=\"cb11-11\"><a href=\"#cb11-11\"><\/a>            <span class=\"co\">\/\/ print char* as is<\/span><\/span>\n-<span id=\"cb11-12\"><a href=\"#cb11-12\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(p);<\/span>\n-<span id=\"cb11-13\"><a href=\"#cb11-13\"><\/a>            <span class=\"co\">\/\/ convert char* ptr from readline as Java String &amp; print it<\/span><\/span>\n-<span id=\"cb11-14\"><a href=\"#cb11-14\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;Hello, &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(p));<\/span>\n-<span id=\"cb11-15\"><a href=\"#cb11-15\"><\/a>        }<\/span>\n-<span id=\"cb11-16\"><a href=\"#cb11-16\"><\/a>    }<\/span>\n-<span id=\"cb11-17\"><a href=\"#cb11-17\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.unix.readline_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\"><\/a>\n+<a class=\"sourceLine\" id=\"cb11-5\" title=\"5\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> Readline {<\/a>\n+<a class=\"sourceLine\" id=\"cb11-6\" title=\"6\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb11-7\" title=\"7\">        <span class=\"kw\">try<\/span> (var str = <span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;name? &quot;<\/span>)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb11-8\" title=\"8\">            <span class=\"co\">\/\/ call &quot;readline&quot; API<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb11-9\" title=\"9\">            var p = <span class=\"fu\">readline<\/span>(str);<\/a>\n+<a class=\"sourceLine\" id=\"cb11-10\" title=\"10\"><\/a>\n+<a class=\"sourceLine\" id=\"cb11-11\" title=\"11\">            <span class=\"co\">\/\/ print char* as is<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb11-12\" title=\"12\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(p);<\/a>\n+<a class=\"sourceLine\" id=\"cb11-13\" title=\"13\">            <span class=\"co\">\/\/ convert char* ptr from readline as Java String &amp; print it<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb11-14\" title=\"14\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;Hello, &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(p));<\/a>\n+<a class=\"sourceLine\" id=\"cb11-15\" title=\"15\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb11-16\" title=\"16\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb11-17\" title=\"17\">}<\/a><\/code><\/pre><\/div>\n@@ -288,5 +278,5 @@\n-<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb13-1\"><a href=\"#cb13-1\"><\/a><\/span>\n-<span id=\"cb13-2\"><a href=\"#cb13-2\"><\/a><span class=\"ex\">jextract<\/span> -t org.unix -lcurl \\<\/span>\n-<span id=\"cb13-3\"><a href=\"#cb13-3\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/span>\n-<span id=\"cb13-4\"><a href=\"#cb13-4\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/curl\/ \\<\/span>\n-<span id=\"cb13-5\"><a href=\"#cb13-5\"><\/a>  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/curl\/curl.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb13-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb13-2\" title=\"2\"><span class=\"ex\">jextract<\/span> -t org.unix -lcurl \\<\/a>\n+<a class=\"sourceLine\" id=\"cb13-3\" title=\"3\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb13-4\" title=\"4\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/curl\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb13-5\" title=\"5\">  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/curl\/curl.h<\/a><\/code><\/pre><\/div>\n@@ -294,24 +284,24 @@\n-<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb14-1\"><a href=\"#cb14-1\"><\/a><\/span>\n-<span id=\"cb14-2\"><a href=\"#cb14-2\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/span>\n-<span id=\"cb14-3\"><a href=\"#cb14-3\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.jextract.curl_h.*;<\/span><\/span>\n-<span id=\"cb14-4\"><a href=\"#cb14-4\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb14-5\"><a href=\"#cb14-5\"><\/a><\/span>\n-<span id=\"cb14-6\"><a href=\"#cb14-6\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> CurlMain {<\/span>\n-<span id=\"cb14-7\"><a href=\"#cb14-7\"><\/a>   <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb14-8\"><a href=\"#cb14-8\"><\/a>       var urlStr = args[<span class=\"dv\">0<\/span>];<\/span>\n-<span id=\"cb14-9\"><a href=\"#cb14-9\"><\/a>       <span class=\"fu\">curl_global_init<\/span>(<span class=\"fu\">CURL_GLOBAL_DEFAULT<\/span>());<\/span>\n-<span id=\"cb14-10\"><a href=\"#cb14-10\"><\/a>       var curl = <span class=\"fu\">curl_easy_init<\/span>();<\/span>\n-<span id=\"cb14-11\"><a href=\"#cb14-11\"><\/a>       <span class=\"kw\">if<\/span>(!curl.<span class=\"fu\">equals<\/span>(NULL)) {<\/span>\n-<span id=\"cb14-12\"><a href=\"#cb14-12\"><\/a>           <span class=\"kw\">try<\/span> (var url = <span class=\"fu\">toCString<\/span>(urlStr)) {<\/span>\n-<span id=\"cb14-13\"><a href=\"#cb14-13\"><\/a>               <span class=\"fu\">curl_easy_setopt<\/span>(curl, <span class=\"fu\">CURLOPT_URL<\/span>(), url.<span class=\"fu\">address<\/span>());<\/span>\n-<span id=\"cb14-14\"><a href=\"#cb14-14\"><\/a>               <span class=\"dt\">int<\/span> res = <span class=\"fu\">curl_easy_perform<\/span>(curl);<\/span>\n-<span id=\"cb14-15\"><a href=\"#cb14-15\"><\/a>               <span class=\"kw\">if<\/span> (res != <span class=\"fu\">CURLE_OK<\/span>()) {<\/span>\n-<span id=\"cb14-16\"><a href=\"#cb14-16\"><\/a>                   <span class=\"bu\">String<\/span> error = <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">curl_easy_strerror<\/span>(res));<\/span>\n-<span id=\"cb14-17\"><a href=\"#cb14-17\"><\/a>                   <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;Curl error: &quot;<\/span> + error);<\/span>\n-<span id=\"cb14-18\"><a href=\"#cb14-18\"><\/a>                   <span class=\"fu\">curl_easy_cleanup<\/span>(curl);<\/span>\n-<span id=\"cb14-19\"><a href=\"#cb14-19\"><\/a>               }<\/span>\n-<span id=\"cb14-20\"><a href=\"#cb14-20\"><\/a>           }<\/span>\n-<span id=\"cb14-21\"><a href=\"#cb14-21\"><\/a>       }<\/span>\n-<span id=\"cb14-22\"><a href=\"#cb14-22\"><\/a>       <span class=\"fu\">curl_global_cleanup<\/span>();<\/span>\n-<span id=\"cb14-23\"><a href=\"#cb14-23\"><\/a>   }<\/span>\n-<span id=\"cb14-24\"><a href=\"#cb14-24\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.jextract.curl_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb14-5\" title=\"5\"><\/a>\n+<a class=\"sourceLine\" id=\"cb14-6\" title=\"6\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> CurlMain {<\/a>\n+<a class=\"sourceLine\" id=\"cb14-7\" title=\"7\">   <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb14-8\" title=\"8\">       var urlStr = args[<span class=\"dv\">0<\/span>];<\/a>\n+<a class=\"sourceLine\" id=\"cb14-9\" title=\"9\">       <span class=\"fu\">curl_global_init<\/span>(<span class=\"fu\">CURL_GLOBAL_DEFAULT<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb14-10\" title=\"10\">       var curl = <span class=\"fu\">curl_easy_init<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb14-11\" title=\"11\">       <span class=\"kw\">if<\/span>(!curl.<span class=\"fu\">equals<\/span>(NULL)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb14-12\" title=\"12\">           <span class=\"kw\">try<\/span> (var url = <span class=\"fu\">toCString<\/span>(urlStr)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb14-13\" title=\"13\">               <span class=\"fu\">curl_easy_setopt<\/span>(curl, <span class=\"fu\">CURLOPT_URL<\/span>(), url.<span class=\"fu\">address<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb14-14\" title=\"14\">               <span class=\"dt\">int<\/span> res = <span class=\"fu\">curl_easy_perform<\/span>(curl);<\/a>\n+<a class=\"sourceLine\" id=\"cb14-15\" title=\"15\">               <span class=\"kw\">if<\/span> (res != <span class=\"fu\">CURLE_OK<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb14-16\" title=\"16\">                   <span class=\"bu\">String<\/span> error = <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">curl_easy_strerror<\/span>(res));<\/a>\n+<a class=\"sourceLine\" id=\"cb14-17\" title=\"17\">                   <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;Curl error: &quot;<\/span> + error);<\/a>\n+<a class=\"sourceLine\" id=\"cb14-18\" title=\"18\">                   <span class=\"fu\">curl_easy_cleanup<\/span>(curl);<\/a>\n+<a class=\"sourceLine\" id=\"cb14-19\" title=\"19\">               }<\/a>\n+<a class=\"sourceLine\" id=\"cb14-20\" title=\"20\">           }<\/a>\n+<a class=\"sourceLine\" id=\"cb14-21\" title=\"21\">       }<\/a>\n+<a class=\"sourceLine\" id=\"cb14-22\" title=\"22\">       <span class=\"fu\">curl_global_cleanup<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb14-23\" title=\"23\">   }<\/a>\n+<a class=\"sourceLine\" id=\"cb14-24\" title=\"24\">}<\/a><\/code><\/pre><\/div>\n@@ -319,4 +309,4 @@\n-<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb15-1\"><a href=\"#cb15-1\"><\/a><\/span>\n-<span id=\"cb15-2\"><a href=\"#cb15-2\"><\/a><span class=\"co\"># run this shell script by passing a URL as first argument<\/span><\/span>\n-<span id=\"cb15-3\"><a href=\"#cb15-3\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb15-4\"><a href=\"#cb15-4\"><\/a>    -Djava.library.path=\/usr\/lib CurlMain.java <span class=\"va\">$*<\/span><\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb15-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb15-2\" title=\"2\"><span class=\"co\"># run this shell script by passing a URL as first argument<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb15-3\" title=\"3\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb15-4\" title=\"4\">    -Djava.library.path=\/usr\/lib CurlMain.java <span class=\"va\">$*<\/span><\/a><\/code><\/pre><\/div>\n@@ -329,2 +319,2 @@\n-<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb16-1\"><a href=\"#cb16-1\"><\/a><\/span>\n-<span id=\"cb16-2\"><a href=\"#cb16-2\"><\/a><span class=\"ex\">brew<\/span> install openblas<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb16-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb16-2\" title=\"2\"><span class=\"ex\">brew<\/span> install openblas<\/a><\/code><\/pre><\/div>\n@@ -334,4 +324,4 @@\n-<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb17-1\"><a href=\"#cb17-1\"><\/a><\/span>\n-<span id=\"cb17-2\"><a href=\"#cb17-2\"><\/a><span class=\"ex\">jextract<\/span> -C <span class=\"st\">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;<\/span> \\<\/span>\n-<span id=\"cb17-3\"><a href=\"#cb17-3\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb17-4\"><a href=\"#cb17-4\"><\/a>  -l openblas -t blas \/usr\/local\/opt\/openblas\/include\/cblas.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb17-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb17-2\" title=\"2\"><span class=\"ex\">jextract<\/span> -C <span class=\"st\">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb17-3\" title=\"3\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb17-4\" title=\"4\">  -l openblas -t blas \/usr\/local\/opt\/openblas\/include\/cblas.h<\/a><\/code><\/pre><\/div>\n@@ -339,47 +329,47 @@\n-<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb18-1\"><a href=\"#cb18-1\"><\/a><\/span>\n-<span id=\"cb18-2\"><a href=\"#cb18-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/span>\n-<span id=\"cb18-3\"><a href=\"#cb18-3\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/span>\n-<span id=\"cb18-4\"><a href=\"#cb18-4\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/span>\n-<span id=\"cb18-5\"><a href=\"#cb18-5\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> blas.*;<\/span><\/span>\n-<span id=\"cb18-6\"><a href=\"#cb18-6\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> blas.cblas_h.*;<\/span><\/span>\n-<span id=\"cb18-7\"><a href=\"#cb18-7\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb18-8\"><a href=\"#cb18-8\"><\/a><\/span>\n-<span id=\"cb18-9\"><a href=\"#cb18-9\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> TestBlas {<\/span>\n-<span id=\"cb18-10\"><a href=\"#cb18-10\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb18-11\"><a href=\"#cb18-11\"><\/a>        <span class=\"dt\">int<\/span> Layout;<\/span>\n-<span id=\"cb18-12\"><a href=\"#cb18-12\"><\/a>        <span class=\"dt\">int<\/span> transa;<\/span>\n-<span id=\"cb18-13\"><a href=\"#cb18-13\"><\/a><\/span>\n-<span id=\"cb18-14\"><a href=\"#cb18-14\"><\/a>        <span class=\"dt\">double<\/span> alpha, beta;<\/span>\n-<span id=\"cb18-15\"><a href=\"#cb18-15\"><\/a>        <span class=\"dt\">int<\/span> m, n, lda, incx, incy, i;<\/span>\n-<span id=\"cb18-16\"><a href=\"#cb18-16\"><\/a><\/span>\n-<span id=\"cb18-17\"><a href=\"#cb18-17\"><\/a>        Layout = <span class=\"fu\">CblasColMajor<\/span>();<\/span>\n-<span id=\"cb18-18\"><a href=\"#cb18-18\"><\/a>        transa = <span class=\"fu\">CblasNoTrans<\/span>();<\/span>\n-<span id=\"cb18-19\"><a href=\"#cb18-19\"><\/a><\/span>\n-<span id=\"cb18-20\"><a href=\"#cb18-20\"><\/a>        m = <span class=\"dv\">4<\/span>; <span class=\"co\">\/* Size of Column ( the number of rows ) *\/<\/span><\/span>\n-<span id=\"cb18-21\"><a href=\"#cb18-21\"><\/a>        n = <span class=\"dv\">4<\/span>; <span class=\"co\">\/* Size of Row ( the number of columns ) *\/<\/span><\/span>\n-<span id=\"cb18-22\"><a href=\"#cb18-22\"><\/a>        lda = <span class=\"dv\">4<\/span>; <span class=\"co\">\/* Leading dimension of 5 * 4 matrix is 5 *\/<\/span><\/span>\n-<span id=\"cb18-23\"><a href=\"#cb18-23\"><\/a>        incx = <span class=\"dv\">1<\/span>;<\/span>\n-<span id=\"cb18-24\"><a href=\"#cb18-24\"><\/a>        incy = <span class=\"dv\">1<\/span>;<\/span>\n-<span id=\"cb18-25\"><a href=\"#cb18-25\"><\/a>        alpha = <span class=\"dv\">1<\/span>;<\/span>\n-<span id=\"cb18-26\"><a href=\"#cb18-26\"><\/a>        beta = <span class=\"dv\">0<\/span>;<\/span>\n-<span id=\"cb18-27\"><a href=\"#cb18-27\"><\/a><\/span>\n-<span id=\"cb18-28\"><a href=\"#cb18-28\"><\/a>        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb18-29\"><a href=\"#cb18-29\"><\/a>            var a = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[] {<\/span>\n-<span id=\"cb18-30\"><a href=\"#cb18-30\"><\/a>                <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">2.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">3.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">4.<\/span><span class=\"dv\">0<\/span>,<\/span>\n-<span id=\"cb18-31\"><a href=\"#cb18-31\"><\/a>                <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>,<\/span>\n-<span id=\"cb18-32\"><a href=\"#cb18-32\"><\/a>                <span class=\"fl\">3.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">4.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">5.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">6.<\/span><span class=\"dv\">0<\/span>,<\/span>\n-<span id=\"cb18-33\"><a href=\"#cb18-33\"><\/a>                <span class=\"fl\">5.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">6.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">7.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">8.<\/span><span class=\"dv\">0<\/span><\/span>\n-<span id=\"cb18-34\"><a href=\"#cb18-34\"><\/a>            });<\/span>\n-<span id=\"cb18-35\"><a href=\"#cb18-35\"><\/a>            var x = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[] {<\/span>\n-<span id=\"cb18-36\"><a href=\"#cb18-36\"><\/a>                <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">2.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span><\/span>\n-<span id=\"cb18-37\"><a href=\"#cb18-37\"><\/a>            });<\/span>\n-<span id=\"cb18-38\"><a href=\"#cb18-38\"><\/a>            var y = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, n);<\/span>\n-<span id=\"cb18-39\"><a href=\"#cb18-39\"><\/a><\/span>\n-<span id=\"cb18-40\"><a href=\"#cb18-40\"><\/a>            <span class=\"fu\">cblas_dgemv<\/span>(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);<\/span>\n-<span id=\"cb18-41\"><a href=\"#cb18-41\"><\/a>            <span class=\"co\">\/* Print y *\/<\/span><\/span>\n-<span id=\"cb18-42\"><a href=\"#cb18-42\"><\/a>            <span class=\"kw\">for<\/span> (i = <span class=\"dv\">0<\/span>; i &lt; n; i++) {<\/span>\n-<span id=\"cb18-43\"><a href=\"#cb18-43\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">print<\/span>(<span class=\"bu\">String<\/span><span class=\"fu\">.format<\/span>(<span class=\"st\">&quot; y<\/span><span class=\"sc\">%d<\/span><span class=\"st\"> = <\/span><span class=\"sc\">%f\\n<\/span><span class=\"st\">&quot;<\/span>, i, MemoryAccess.<span class=\"fu\">getDoubleAtIndex<\/span>(y, i)));<\/span>\n-<span id=\"cb18-44\"><a href=\"#cb18-44\"><\/a>            }<\/span>\n-<span id=\"cb18-45\"><a href=\"#cb18-45\"><\/a>        }<\/span>\n-<span id=\"cb18-46\"><a href=\"#cb18-46\"><\/a>    }<\/span>\n-<span id=\"cb18-47\"><a href=\"#cb18-47\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb18-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb18-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-3\" title=\"3\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-5\" title=\"5\"><span class=\"kw\">import<\/span><span class=\"im\"> blas.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-6\" title=\"6\"><span class=\"kw\">import static<\/span><span class=\"im\"> blas.cblas_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-7\" title=\"7\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-8\" title=\"8\"><\/a>\n+<a class=\"sourceLine\" id=\"cb18-9\" title=\"9\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> TestBlas {<\/a>\n+<a class=\"sourceLine\" id=\"cb18-10\" title=\"10\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb18-11\" title=\"11\">        <span class=\"dt\">int<\/span> Layout;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-12\" title=\"12\">        <span class=\"dt\">int<\/span> transa;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-13\" title=\"13\"><\/a>\n+<a class=\"sourceLine\" id=\"cb18-14\" title=\"14\">        <span class=\"dt\">double<\/span> alpha, beta;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-15\" title=\"15\">        <span class=\"dt\">int<\/span> m, n, lda, incx, incy, i;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-16\" title=\"16\"><\/a>\n+<a class=\"sourceLine\" id=\"cb18-17\" title=\"17\">        Layout = <span class=\"fu\">CblasColMajor<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb18-18\" title=\"18\">        transa = <span class=\"fu\">CblasNoTrans<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb18-19\" title=\"19\"><\/a>\n+<a class=\"sourceLine\" id=\"cb18-20\" title=\"20\">        m = <span class=\"dv\">4<\/span>; <span class=\"co\">\/* Size of Column ( the number of rows ) *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-21\" title=\"21\">        n = <span class=\"dv\">4<\/span>; <span class=\"co\">\/* Size of Row ( the number of columns ) *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-22\" title=\"22\">        lda = <span class=\"dv\">4<\/span>; <span class=\"co\">\/* Leading dimension of 5 * 4 matrix is 5 *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-23\" title=\"23\">        incx = <span class=\"dv\">1<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-24\" title=\"24\">        incy = <span class=\"dv\">1<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-25\" title=\"25\">        alpha = <span class=\"dv\">1<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-26\" title=\"26\">        beta = <span class=\"dv\">0<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb18-27\" title=\"27\"><\/a>\n+<a class=\"sourceLine\" id=\"cb18-28\" title=\"28\">        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb18-29\" title=\"29\">            var a = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[] {<\/a>\n+<a class=\"sourceLine\" id=\"cb18-30\" title=\"30\">                <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">2.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">3.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">4.<\/span><span class=\"dv\">0<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb18-31\" title=\"31\">                <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb18-32\" title=\"32\">                <span class=\"fl\">3.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">4.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">5.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">6.<\/span><span class=\"dv\">0<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb18-33\" title=\"33\">                <span class=\"fl\">5.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">6.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">7.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">8.<\/span><span class=\"dv\">0<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-34\" title=\"34\">            });<\/a>\n+<a class=\"sourceLine\" id=\"cb18-35\" title=\"35\">            var x = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[] {<\/a>\n+<a class=\"sourceLine\" id=\"cb18-36\" title=\"36\">                <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">2.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span>, <span class=\"fl\">1.<\/span><span class=\"dv\">0<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-37\" title=\"37\">            });<\/a>\n+<a class=\"sourceLine\" id=\"cb18-38\" title=\"38\">            var y = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, n);<\/a>\n+<a class=\"sourceLine\" id=\"cb18-39\" title=\"39\"><\/a>\n+<a class=\"sourceLine\" id=\"cb18-40\" title=\"40\">            <span class=\"fu\">cblas_dgemv<\/span>(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);<\/a>\n+<a class=\"sourceLine\" id=\"cb18-41\" title=\"41\">            <span class=\"co\">\/* Print y *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-42\" title=\"42\">            <span class=\"kw\">for<\/span> (i = <span class=\"dv\">0<\/span>; i &lt; n; i++) {<\/a>\n+<a class=\"sourceLine\" id=\"cb18-43\" title=\"43\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">print<\/span>(<span class=\"bu\">String<\/span><span class=\"fu\">.format<\/span>(<span class=\"st\">&quot; y<\/span><span class=\"sc\">%d<\/span><span class=\"st\"> = <\/span><span class=\"sc\">%f\\n<\/span><span class=\"st\">&quot;<\/span>, i, MemoryAccess.<span class=\"fu\">getDoubleAtIndex<\/span>(y, i)));<\/a>\n+<a class=\"sourceLine\" id=\"cb18-44\" title=\"44\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb18-45\" title=\"45\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb18-46\" title=\"46\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb18-47\" title=\"47\">}<\/a><\/code><\/pre><\/div>\n@@ -387,5 +377,5 @@\n-<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb19-1\"><a href=\"#cb19-1\"><\/a><\/span>\n-<span id=\"cb19-2\"><a href=\"#cb19-2\"><\/a><span class=\"ex\">jextract<\/span> \\<\/span>\n-<span id=\"cb19-3\"><a href=\"#cb19-3\"><\/a>  -C <span class=\"st\">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;<\/span> \\<\/span>\n-<span id=\"cb19-4\"><a href=\"#cb19-4\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb19-5\"><a href=\"#cb19-5\"><\/a>  -l openblas -t blas \/usr\/local\/opt\/openblas\/include\/cblas.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb19-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb19-2\" title=\"2\"><span class=\"ex\">jextract<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb19-3\" title=\"3\">  -C <span class=\"st\">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb19-4\" title=\"4\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb19-5\" title=\"5\">  -l openblas -t blas \/usr\/local\/opt\/openblas\/include\/cblas.h<\/a><\/code><\/pre><\/div>\n@@ -395,6 +385,6 @@\n-<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb20-1\"><a href=\"#cb20-1\"><\/a><\/span>\n-<span id=\"cb20-2\"><a href=\"#cb20-2\"><\/a><span class=\"ex\">jextract<\/span> \\<\/span>\n-<span id=\"cb20-3\"><a href=\"#cb20-3\"><\/a>   -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb20-4\"><a href=\"#cb20-4\"><\/a>   -l lapacke -t lapack \\<\/span>\n-<span id=\"cb20-5\"><a href=\"#cb20-5\"><\/a>   --filter lapacke.h \\<\/span>\n-<span id=\"cb20-6\"><a href=\"#cb20-6\"><\/a>   \/usr\/local\/opt\/lapack\/include\/lapacke.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb20-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb20-2\" title=\"2\"><span class=\"ex\">jextract<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb20-3\" title=\"3\">   -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb20-4\" title=\"4\">   -l lapacke -t lapack \\<\/a>\n+<a class=\"sourceLine\" id=\"cb20-5\" title=\"5\">   --filter lapacke.h \\<\/a>\n+<a class=\"sourceLine\" id=\"cb20-6\" title=\"6\">   \/usr\/local\/opt\/lapack\/include\/lapacke.h<\/a><\/code><\/pre><\/div>\n@@ -402,57 +392,57 @@\n-<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb21-1\"><a href=\"#cb21-1\"><\/a><\/span>\n-<span id=\"cb21-2\"><a href=\"#cb21-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/span>\n-<span id=\"cb21-3\"><a href=\"#cb21-3\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/span>\n-<span id=\"cb21-4\"><a href=\"#cb21-4\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemorySegment;<\/span><\/span>\n-<span id=\"cb21-5\"><a href=\"#cb21-5\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/span>\n-<span id=\"cb21-6\"><a href=\"#cb21-6\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> lapack.*;<\/span><\/span>\n-<span id=\"cb21-7\"><a href=\"#cb21-7\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> lapack.lapacke_h.*;<\/span><\/span>\n-<span id=\"cb21-8\"><a href=\"#cb21-8\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb21-9\"><a href=\"#cb21-9\"><\/a><\/span>\n-<span id=\"cb21-10\"><a href=\"#cb21-10\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> TestLapack {<\/span>\n-<span id=\"cb21-11\"><a href=\"#cb21-11\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb21-12\"><a href=\"#cb21-12\"><\/a><\/span>\n-<span id=\"cb21-13\"><a href=\"#cb21-13\"><\/a>        <span class=\"co\">\/* Locals *\/<\/span><\/span>\n-<span id=\"cb21-14\"><a href=\"#cb21-14\"><\/a>        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb21-15\"><a href=\"#cb21-15\"><\/a>            var A = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[]{<\/span>\n-<span id=\"cb21-16\"><a href=\"#cb21-16\"><\/a>                    <span class=\"dv\">1<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">3<\/span><\/span>\n-<span id=\"cb21-17\"><a href=\"#cb21-17\"><\/a>            });<\/span>\n-<span id=\"cb21-18\"><a href=\"#cb21-18\"><\/a>            var b = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[]{<\/span>\n-<span id=\"cb21-19\"><a href=\"#cb21-19\"><\/a>                    -<span class=\"dv\">10<\/span>, <span class=\"dv\">12<\/span>, <span class=\"dv\">14<\/span>, <span class=\"dv\">16<\/span>, <span class=\"dv\">18<\/span>, -<span class=\"dv\">3<\/span>, <span class=\"dv\">14<\/span>, <span class=\"dv\">12<\/span>, <span class=\"dv\">16<\/span>, <span class=\"dv\">16<\/span><\/span>\n-<span id=\"cb21-20\"><a href=\"#cb21-20\"><\/a>            });<\/span>\n-<span id=\"cb21-21\"><a href=\"#cb21-21\"><\/a>            <span class=\"dt\">int<\/span> info, m, n, lda, ldb, nrhs;<\/span>\n-<span id=\"cb21-22\"><a href=\"#cb21-22\"><\/a><\/span>\n-<span id=\"cb21-23\"><a href=\"#cb21-23\"><\/a>            <span class=\"co\">\/* Initialization *\/<\/span><\/span>\n-<span id=\"cb21-24\"><a href=\"#cb21-24\"><\/a>            m = <span class=\"dv\">5<\/span>;<\/span>\n-<span id=\"cb21-25\"><a href=\"#cb21-25\"><\/a>            n = <span class=\"dv\">3<\/span>;<\/span>\n-<span id=\"cb21-26\"><a href=\"#cb21-26\"><\/a>            nrhs = <span class=\"dv\">2<\/span>;<\/span>\n-<span id=\"cb21-27\"><a href=\"#cb21-27\"><\/a>            lda = <span class=\"dv\">5<\/span>;<\/span>\n-<span id=\"cb21-28\"><a href=\"#cb21-28\"><\/a>            ldb = <span class=\"dv\">5<\/span>;<\/span>\n-<span id=\"cb21-29\"><a href=\"#cb21-29\"><\/a><\/span>\n-<span id=\"cb21-30\"><a href=\"#cb21-30\"><\/a>            <span class=\"co\">\/* Print Entry Matrix *\/<\/span><\/span>\n-<span id=\"cb21-31\"><a href=\"#cb21-31\"><\/a>            <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"st\">&quot;Entry Matrix A&quot;<\/span>, m, n, A, lda );<\/span>\n-<span id=\"cb21-32\"><a href=\"#cb21-32\"><\/a>            <span class=\"co\">\/* Print Right Rand Side *\/<\/span><\/span>\n-<span id=\"cb21-33\"><a href=\"#cb21-33\"><\/a>            <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"st\">&quot;Right Hand Side b&quot;<\/span>, n, nrhs, b, ldb );<\/span>\n-<span id=\"cb21-34\"><a href=\"#cb21-34\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>();<\/span>\n-<span id=\"cb21-35\"><a href=\"#cb21-35\"><\/a>            <\/span>\n-<span id=\"cb21-36\"><a href=\"#cb21-36\"><\/a>            <span class=\"co\">\/* Executable statements *\/<\/span><\/span>\n-<span id=\"cb21-37\"><a href=\"#cb21-37\"><\/a>            <span class=\"co\">\/\/            printf( &quot;LAPACKE_dgels (col-major, high-level) Example Program Results\\n&quot; );<\/span><\/span>\n-<span id=\"cb21-38\"><a href=\"#cb21-38\"><\/a>            <span class=\"co\">\/* Solve least squares problem*\/<\/span><\/span>\n-<span id=\"cb21-39\"><a href=\"#cb21-39\"><\/a>            info = <span class=\"fu\">LAPACKE_dgels<\/span>(<span class=\"fu\">LAPACK_COL_MAJOR<\/span>(), (<span class=\"dt\">byte<\/span>)<span class=\"ch\">&#39;N&#39;<\/span>, m, n, nrhs, A, lda, b, ldb);<\/span>\n-<span id=\"cb21-40\"><a href=\"#cb21-40\"><\/a> <\/span>\n-<span id=\"cb21-41\"><a href=\"#cb21-41\"><\/a>            <span class=\"co\">\/* Print Solution *\/<\/span><\/span>\n-<span id=\"cb21-42\"><a href=\"#cb21-42\"><\/a>            <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"st\">&quot;Solution&quot;<\/span>, n, nrhs, b, ldb );<\/span>\n-<span id=\"cb21-43\"><a href=\"#cb21-43\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>();<\/span>\n-<span id=\"cb21-44\"><a href=\"#cb21-44\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(info);<\/span>\n-<span id=\"cb21-45\"><a href=\"#cb21-45\"><\/a>        }   <\/span>\n-<span id=\"cb21-46\"><a href=\"#cb21-46\"><\/a>    }   <\/span>\n-<span id=\"cb21-47\"><a href=\"#cb21-47\"><\/a>    <\/span>\n-<span id=\"cb21-48\"><a href=\"#cb21-48\"><\/a>    <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"bu\">String<\/span> msg, <span class=\"dt\">int<\/span> m, <span class=\"dt\">int<\/span> n, MemorySegment mat, <span class=\"dt\">int<\/span> ldm) {<\/span>\n-<span id=\"cb21-49\"><a href=\"#cb21-49\"><\/a>        <span class=\"dt\">int<\/span> i, j;<\/span>\n-<span id=\"cb21-50\"><a href=\"#cb21-50\"><\/a>        <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">\\n<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>, msg);<\/span>\n-<span id=\"cb21-51\"><a href=\"#cb21-51\"><\/a><\/span>\n-<span id=\"cb21-52\"><a href=\"#cb21-52\"><\/a>        <span class=\"kw\">for<\/span>( i = <span class=\"dv\">0<\/span>; i &lt; m; i++ ) {<\/span>\n-<span id=\"cb21-53\"><a href=\"#cb21-53\"><\/a>            <span class=\"kw\">for<\/span>( j = <span class=\"dv\">0<\/span>; j &lt; n; j++ ) <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot; <\/span><span class=\"sc\">%6.2f<\/span><span class=\"st\">&quot;<\/span>, MemoryAccess.<span class=\"fu\">getDoubleAtIndex<\/span>(mat, i+j*ldm));<\/span>\n-<span id=\"cb21-54\"><a href=\"#cb21-54\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>( <span class=\"st\">&quot;<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span> );<\/span>\n-<span id=\"cb21-55\"><a href=\"#cb21-55\"><\/a>        }<\/span>\n-<span id=\"cb21-56\"><a href=\"#cb21-56\"><\/a>    }<\/span>\n-<span id=\"cb21-57\"><a href=\"#cb21-57\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb21-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb21-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-3\" title=\"3\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemorySegment;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-5\" title=\"5\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-6\" title=\"6\"><span class=\"kw\">import<\/span><span class=\"im\"> lapack.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-7\" title=\"7\"><span class=\"kw\">import static<\/span><span class=\"im\"> lapack.lapacke_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-8\" title=\"8\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-9\" title=\"9\"><\/a>\n+<a class=\"sourceLine\" id=\"cb21-10\" title=\"10\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> TestLapack {<\/a>\n+<a class=\"sourceLine\" id=\"cb21-11\" title=\"11\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb21-12\" title=\"12\"><\/a>\n+<a class=\"sourceLine\" id=\"cb21-13\" title=\"13\">        <span class=\"co\">\/* Locals *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-14\" title=\"14\">        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb21-15\" title=\"15\">            var A = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[]{<\/a>\n+<a class=\"sourceLine\" id=\"cb21-16\" title=\"16\">                    <span class=\"dv\">1<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">3<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-17\" title=\"17\">            });<\/a>\n+<a class=\"sourceLine\" id=\"cb21-18\" title=\"18\">            var b = scope.<span class=\"fu\">allocateArray<\/span>(C_DOUBLE, <span class=\"kw\">new<\/span> <span class=\"dt\">double<\/span>[]{<\/a>\n+<a class=\"sourceLine\" id=\"cb21-19\" title=\"19\">                    -<span class=\"dv\">10<\/span>, <span class=\"dv\">12<\/span>, <span class=\"dv\">14<\/span>, <span class=\"dv\">16<\/span>, <span class=\"dv\">18<\/span>, -<span class=\"dv\">3<\/span>, <span class=\"dv\">14<\/span>, <span class=\"dv\">12<\/span>, <span class=\"dv\">16<\/span>, <span class=\"dv\">16<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-20\" title=\"20\">            });<\/a>\n+<a class=\"sourceLine\" id=\"cb21-21\" title=\"21\">            <span class=\"dt\">int<\/span> info, m, n, lda, ldb, nrhs;<\/a>\n+<a class=\"sourceLine\" id=\"cb21-22\" title=\"22\"><\/a>\n+<a class=\"sourceLine\" id=\"cb21-23\" title=\"23\">            <span class=\"co\">\/* Initialization *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-24\" title=\"24\">            m = <span class=\"dv\">5<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb21-25\" title=\"25\">            n = <span class=\"dv\">3<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb21-26\" title=\"26\">            nrhs = <span class=\"dv\">2<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb21-27\" title=\"27\">            lda = <span class=\"dv\">5<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb21-28\" title=\"28\">            ldb = <span class=\"dv\">5<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb21-29\" title=\"29\"><\/a>\n+<a class=\"sourceLine\" id=\"cb21-30\" title=\"30\">            <span class=\"co\">\/* Print Entry Matrix *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-31\" title=\"31\">            <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"st\">&quot;Entry Matrix A&quot;<\/span>, m, n, A, lda );<\/a>\n+<a class=\"sourceLine\" id=\"cb21-32\" title=\"32\">            <span class=\"co\">\/* Print Right Rand Side *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-33\" title=\"33\">            <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"st\">&quot;Right Hand Side b&quot;<\/span>, n, nrhs, b, ldb );<\/a>\n+<a class=\"sourceLine\" id=\"cb21-34\" title=\"34\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb21-35\" title=\"35\">            <\/a>\n+<a class=\"sourceLine\" id=\"cb21-36\" title=\"36\">            <span class=\"co\">\/* Executable statements *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-37\" title=\"37\">            <span class=\"co\">\/\/            printf( &quot;LAPACKE_dgels (col-major, high-level) Example Program Results\\n&quot; );<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-38\" title=\"38\">            <span class=\"co\">\/* Solve least squares problem*\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-39\" title=\"39\">            info = <span class=\"fu\">LAPACKE_dgels<\/span>(<span class=\"fu\">LAPACK_COL_MAJOR<\/span>(), (<span class=\"dt\">byte<\/span>)<span class=\"ch\">&#39;N&#39;<\/span>, m, n, nrhs, A, lda, b, ldb);<\/a>\n+<a class=\"sourceLine\" id=\"cb21-40\" title=\"40\"> <\/a>\n+<a class=\"sourceLine\" id=\"cb21-41\" title=\"41\">            <span class=\"co\">\/* Print Solution *\/<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-42\" title=\"42\">            <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"st\">&quot;Solution&quot;<\/span>, n, nrhs, b, ldb );<\/a>\n+<a class=\"sourceLine\" id=\"cb21-43\" title=\"43\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb21-44\" title=\"44\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(info);<\/a>\n+<a class=\"sourceLine\" id=\"cb21-45\" title=\"45\">        }   <\/a>\n+<a class=\"sourceLine\" id=\"cb21-46\" title=\"46\">    }   <\/a>\n+<a class=\"sourceLine\" id=\"cb21-47\" title=\"47\">    <\/a>\n+<a class=\"sourceLine\" id=\"cb21-48\" title=\"48\">    <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">print_matrix_colmajor<\/span>(<span class=\"bu\">String<\/span> msg, <span class=\"dt\">int<\/span> m, <span class=\"dt\">int<\/span> n, MemorySegment mat, <span class=\"dt\">int<\/span> ldm) {<\/a>\n+<a class=\"sourceLine\" id=\"cb21-49\" title=\"49\">        <span class=\"dt\">int<\/span> i, j;<\/a>\n+<a class=\"sourceLine\" id=\"cb21-50\" title=\"50\">        <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">\\n<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>, msg);<\/a>\n+<a class=\"sourceLine\" id=\"cb21-51\" title=\"51\"><\/a>\n+<a class=\"sourceLine\" id=\"cb21-52\" title=\"52\">        <span class=\"kw\">for<\/span>( i = <span class=\"dv\">0<\/span>; i &lt; m; i++ ) {<\/a>\n+<a class=\"sourceLine\" id=\"cb21-53\" title=\"53\">            <span class=\"kw\">for<\/span>( j = <span class=\"dv\">0<\/span>; j &lt; n; j++ ) <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot; <\/span><span class=\"sc\">%6.2f<\/span><span class=\"st\">&quot;<\/span>, MemoryAccess.<span class=\"fu\">getDoubleAtIndex<\/span>(mat, i+j*ldm));<\/a>\n+<a class=\"sourceLine\" id=\"cb21-54\" title=\"54\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>( <span class=\"st\">&quot;<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span> );<\/a>\n+<a class=\"sourceLine\" id=\"cb21-55\" title=\"55\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb21-56\" title=\"56\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb21-57\" title=\"57\">}<\/a><\/code><\/pre><\/div>\n@@ -460,5 +450,5 @@\n-<div class=\"sourceCode\" id=\"cb22\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb22-1\"><a href=\"#cb22-1\"><\/a><\/span>\n-<span id=\"cb22-2\"><a href=\"#cb22-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit \\<\/span>\n-<span id=\"cb22-3\"><a href=\"#cb22-3\"><\/a>    --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb22-4\"><a href=\"#cb22-4\"><\/a>    -Djava.library.path=\/usr\/local\/opt\/lapack\/lib \\<\/span>\n-<span id=\"cb22-5\"><a href=\"#cb22-5\"><\/a>    TestLapack.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb22\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb22-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb22-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit \\<\/a>\n+<a class=\"sourceLine\" id=\"cb22-3\" title=\"3\">    --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb22-4\" title=\"4\">    -Djava.library.path=\/usr\/local\/opt\/lapack\/lib \\<\/a>\n+<a class=\"sourceLine\" id=\"cb22-5\" title=\"5\">    TestLapack.java<\/a><\/code><\/pre><\/div>\n@@ -467,6 +457,6 @@\n-<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb23-1\"><a href=\"#cb23-1\"><\/a><\/span>\n-<span id=\"cb23-2\"><a href=\"#cb23-2\"><\/a><span class=\"ex\">jextract<\/span> \\<\/span>\n-<span id=\"cb23-3\"><a href=\"#cb23-3\"><\/a>  -t org.unix \\<\/span>\n-<span id=\"cb23-4\"><a href=\"#cb23-4\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb23-5\"><a href=\"#cb23-5\"><\/a>  --filter libproc.h \\<\/span>\n-<span id=\"cb23-6\"><a href=\"#cb23-6\"><\/a>  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/libproc.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb23-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb23-2\" title=\"2\"><span class=\"ex\">jextract<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb23-3\" title=\"3\">  -t org.unix \\<\/a>\n+<a class=\"sourceLine\" id=\"cb23-4\" title=\"4\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb23-5\" title=\"5\">  --filter libproc.h \\<\/a>\n+<a class=\"sourceLine\" id=\"cb23-6\" title=\"6\">  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/libproc.h<\/a><\/code><\/pre><\/div>\n@@ -474,34 +464,34 @@\n-<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb24-1\"><a href=\"#cb24-1\"><\/a><\/span>\n-<span id=\"cb24-2\"><a href=\"#cb24-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker;<\/span><\/span>\n-<span id=\"cb24-3\"><a href=\"#cb24-3\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemorySegment;<\/span><\/span>\n-<span id=\"cb24-4\"><a href=\"#cb24-4\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/span>\n-<span id=\"cb24-5\"><a href=\"#cb24-5\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> org.unix.*;<\/span><\/span>\n-<span id=\"cb24-6\"><a href=\"#cb24-6\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/span>\n-<span id=\"cb24-7\"><a href=\"#cb24-7\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.unix.libproc_h.*;<\/span><\/span>\n-<span id=\"cb24-8\"><a href=\"#cb24-8\"><\/a><\/span>\n-<span id=\"cb24-9\"><a href=\"#cb24-9\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> LibprocMain {<\/span>\n-<span id=\"cb24-10\"><a href=\"#cb24-10\"><\/a>    <span class=\"kw\">private<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">final<\/span> <span class=\"dt\">int<\/span> NAME_BUF_MAX = <span class=\"dv\">256<\/span>;<\/span>\n-<span id=\"cb24-11\"><a href=\"#cb24-11\"><\/a><\/span>\n-<span id=\"cb24-12\"><a href=\"#cb24-12\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb24-13\"><a href=\"#cb24-13\"><\/a>        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb24-14\"><a href=\"#cb24-14\"><\/a>            <span class=\"co\">\/\/ get the number of processes<\/span><\/span>\n-<span id=\"cb24-15\"><a href=\"#cb24-15\"><\/a>            <span class=\"dt\">int<\/span> numPids = <span class=\"fu\">proc_listallpids<\/span>(NULL, <span class=\"dv\">0<\/span>);<\/span>\n-<span id=\"cb24-16\"><a href=\"#cb24-16\"><\/a>            <span class=\"co\">\/\/ allocate an array<\/span><\/span>\n-<span id=\"cb24-17\"><a href=\"#cb24-17\"><\/a>            var pids = scope.<span class=\"fu\">allocateArray<\/span>(CLinker.<span class=\"fu\">C_INT<\/span>, numPids);<\/span>\n-<span id=\"cb24-18\"><a href=\"#cb24-18\"><\/a>            <span class=\"co\">\/\/ list all the pids into the native array<\/span><\/span>\n-<span id=\"cb24-19\"><a href=\"#cb24-19\"><\/a>            <span class=\"fu\">proc_listallpids<\/span>(pids, numPids);<\/span>\n-<span id=\"cb24-20\"><a href=\"#cb24-20\"><\/a>            <span class=\"co\">\/\/ convert native array to java array<\/span><\/span>\n-<span id=\"cb24-21\"><a href=\"#cb24-21\"><\/a>            <span class=\"dt\">int<\/span>[] jpids = pids.<span class=\"fu\">toIntArray<\/span>();<\/span>\n-<span id=\"cb24-22\"><a href=\"#cb24-22\"><\/a>            <span class=\"co\">\/\/ buffer for process name<\/span><\/span>\n-<span id=\"cb24-23\"><a href=\"#cb24-23\"><\/a>            var nameBuf = scope.<span class=\"fu\">allocateArray<\/span>(CLinker.<span class=\"fu\">C_CHAR<\/span>, NAME_BUF_MAX);<\/span>\n-<span id=\"cb24-24\"><a href=\"#cb24-24\"><\/a>            <span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span>; i &lt; jpids.<span class=\"fu\">length<\/span>; i++) {<\/span>\n-<span id=\"cb24-25\"><a href=\"#cb24-25\"><\/a>                <span class=\"dt\">int<\/span> pid = jpids[i];<\/span>\n-<span id=\"cb24-26\"><a href=\"#cb24-26\"><\/a>                <span class=\"co\">\/\/ get the process name<\/span><\/span>\n-<span id=\"cb24-27\"><a href=\"#cb24-27\"><\/a>                <span class=\"fu\">proc_name<\/span>(pid, nameBuf, NAME_BUF_MAX);<\/span>\n-<span id=\"cb24-28\"><a href=\"#cb24-28\"><\/a>                <span class=\"bu\">String<\/span> procName = CLinker.<span class=\"fu\">toJavaString<\/span>(nameBuf);<\/span>\n-<span id=\"cb24-29\"><a href=\"#cb24-29\"><\/a>                <span class=\"co\">\/\/ print pid and process name<\/span><\/span>\n-<span id=\"cb24-30\"><a href=\"#cb24-30\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%d<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>, pid, procName);<\/span>\n-<span id=\"cb24-31\"><a href=\"#cb24-31\"><\/a>            }<\/span>\n-<span id=\"cb24-32\"><a href=\"#cb24-32\"><\/a>        }<\/span>\n-<span id=\"cb24-33\"><a href=\"#cb24-33\"><\/a>    }<\/span>\n-<span id=\"cb24-34\"><a href=\"#cb24-34\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb24-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb24-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-3\" title=\"3\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemorySegment;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-5\" title=\"5\"><span class=\"kw\">import<\/span><span class=\"im\"> org.unix.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-6\" title=\"6\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-7\" title=\"7\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.unix.libproc_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-8\" title=\"8\"><\/a>\n+<a class=\"sourceLine\" id=\"cb24-9\" title=\"9\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> LibprocMain {<\/a>\n+<a class=\"sourceLine\" id=\"cb24-10\" title=\"10\">    <span class=\"kw\">private<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">final<\/span> <span class=\"dt\">int<\/span> NAME_BUF_MAX = <span class=\"dv\">256<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb24-11\" title=\"11\"><\/a>\n+<a class=\"sourceLine\" id=\"cb24-12\" title=\"12\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb24-13\" title=\"13\">        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb24-14\" title=\"14\">            <span class=\"co\">\/\/ get the number of processes<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-15\" title=\"15\">            <span class=\"dt\">int<\/span> numPids = <span class=\"fu\">proc_listallpids<\/span>(NULL, <span class=\"dv\">0<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb24-16\" title=\"16\">            <span class=\"co\">\/\/ allocate an array<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-17\" title=\"17\">            var pids = scope.<span class=\"fu\">allocateArray<\/span>(CLinker.<span class=\"fu\">C_INT<\/span>, numPids);<\/a>\n+<a class=\"sourceLine\" id=\"cb24-18\" title=\"18\">            <span class=\"co\">\/\/ list all the pids into the native array<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-19\" title=\"19\">            <span class=\"fu\">proc_listallpids<\/span>(pids, numPids);<\/a>\n+<a class=\"sourceLine\" id=\"cb24-20\" title=\"20\">            <span class=\"co\">\/\/ convert native array to java array<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-21\" title=\"21\">            <span class=\"dt\">int<\/span>[] jpids = pids.<span class=\"fu\">toIntArray<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb24-22\" title=\"22\">            <span class=\"co\">\/\/ buffer for process name<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-23\" title=\"23\">            var nameBuf = scope.<span class=\"fu\">allocateArray<\/span>(CLinker.<span class=\"fu\">C_CHAR<\/span>, NAME_BUF_MAX);<\/a>\n+<a class=\"sourceLine\" id=\"cb24-24\" title=\"24\">            <span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span>; i &lt; jpids.<span class=\"fu\">length<\/span>; i++) {<\/a>\n+<a class=\"sourceLine\" id=\"cb24-25\" title=\"25\">                <span class=\"dt\">int<\/span> pid = jpids[i];<\/a>\n+<a class=\"sourceLine\" id=\"cb24-26\" title=\"26\">                <span class=\"co\">\/\/ get the process name<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-27\" title=\"27\">                <span class=\"fu\">proc_name<\/span>(pid, nameBuf, NAME_BUF_MAX);<\/a>\n+<a class=\"sourceLine\" id=\"cb24-28\" title=\"28\">                <span class=\"bu\">String<\/span> procName = CLinker.<span class=\"fu\">toJavaString<\/span>(nameBuf);<\/a>\n+<a class=\"sourceLine\" id=\"cb24-29\" title=\"29\">                <span class=\"co\">\/\/ print pid and process name<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb24-30\" title=\"30\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%d<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>, pid, procName);<\/a>\n+<a class=\"sourceLine\" id=\"cb24-31\" title=\"31\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb24-32\" title=\"32\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb24-33\" title=\"33\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb24-34\" title=\"34\">}<\/a><\/code><\/pre><\/div>\n@@ -509,4 +499,4 @@\n-<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb25-1\"><a href=\"#cb25-1\"><\/a><\/span>\n-<span id=\"cb25-2\"><a href=\"#cb25-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit \\<\/span>\n-<span id=\"cb25-3\"><a href=\"#cb25-3\"><\/a>    --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb25-4\"><a href=\"#cb25-4\"><\/a>    -Djava.library.path=\/usr\/lib LibprocMain.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb25-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb25-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit \\<\/a>\n+<a class=\"sourceLine\" id=\"cb25-3\" title=\"3\">    --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb25-4\" title=\"4\">    -Djava.library.path=\/usr\/lib LibprocMain.java<\/a><\/code><\/pre><\/div>\n@@ -522,7 +512,7 @@\n-<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb26-1\"><a href=\"#cb26-1\"><\/a><\/span>\n-<span id=\"cb26-2\"><a href=\"#cb26-2\"><\/a><span class=\"ex\">jextract<\/span> \\<\/span>\n-<span id=\"cb26-3\"><a href=\"#cb26-3\"><\/a>  -t com.github -lgit2 \\<\/span>\n-<span id=\"cb26-4\"><a href=\"#cb26-4\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/span>\n-<span id=\"cb26-5\"><a href=\"#cb26-5\"><\/a>  -I <span class=\"va\">${LIBGIT2_HOME}<\/span>\/include\/ \\<\/span>\n-<span id=\"cb26-6\"><a href=\"#cb26-6\"><\/a>  -I <span class=\"va\">${LIBGIT2_HOME}<\/span>\/include\/git2 \\<\/span>\n-<span id=\"cb26-7\"><a href=\"#cb26-7\"><\/a>  <span class=\"va\">${LIBGIT2_HOME}<\/span>\/include\/git2.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb26-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb26-2\" title=\"2\"><span class=\"ex\">jextract<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb26-3\" title=\"3\">  -t com.github -lgit2 \\<\/a>\n+<a class=\"sourceLine\" id=\"cb26-4\" title=\"4\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb26-5\" title=\"5\">  -I <span class=\"va\">${LIBGIT2_HOME}<\/span>\/include\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb26-6\" title=\"6\">  -I <span class=\"va\">${LIBGIT2_HOME}<\/span>\/include\/git2 \\<\/a>\n+<a class=\"sourceLine\" id=\"cb26-7\" title=\"7\">  <span class=\"va\">${LIBGIT2_HOME}<\/span>\/include\/git2.h<\/a><\/code><\/pre><\/div>\n@@ -530,23 +520,23 @@\n-<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb27-1\"><a href=\"#cb27-1\"><\/a><\/span>\n-<span id=\"cb27-2\"><a href=\"#cb27-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/span>\n-<span id=\"cb27-3\"><a href=\"#cb27-3\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/span>\n-<span id=\"cb27-4\"><a href=\"#cb27-4\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> com.github.git2_h.*;<\/span><\/span>\n-<span id=\"cb27-5\"><a href=\"#cb27-5\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb27-6\"><a href=\"#cb27-6\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/span>\n-<span id=\"cb27-7\"><a href=\"#cb27-7\"><\/a><\/span>\n-<span id=\"cb27-8\"><a href=\"#cb27-8\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> GitClone {<\/span>\n-<span id=\"cb27-9\"><a href=\"#cb27-9\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb27-10\"><a href=\"#cb27-10\"><\/a>          <span class=\"kw\">if<\/span> (args.<span class=\"fu\">length<\/span> != <span class=\"dv\">2<\/span>) {<\/span>\n-<span id=\"cb27-11\"><a href=\"#cb27-11\"><\/a>              <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;java GitClone &lt;url&gt; &lt;path&gt;&quot;<\/span>);<\/span>\n-<span id=\"cb27-12\"><a href=\"#cb27-12\"><\/a>              <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(<span class=\"dv\">1<\/span>);<\/span>\n-<span id=\"cb27-13\"><a href=\"#cb27-13\"><\/a>          }<\/span>\n-<span id=\"cb27-14\"><a href=\"#cb27-14\"><\/a>          <span class=\"fu\">git_libgit2_init<\/span>();<\/span>\n-<span id=\"cb27-15\"><a href=\"#cb27-15\"><\/a>          <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb27-16\"><a href=\"#cb27-16\"><\/a>              var repo = scope.<span class=\"fu\">allocate<\/span>(C_POINTER);<\/span>\n-<span id=\"cb27-17\"><a href=\"#cb27-17\"><\/a>              var url = <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">0<\/span>], scope);<\/span>\n-<span id=\"cb27-18\"><a href=\"#cb27-18\"><\/a>              var path = <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">1<\/span>], scope);<\/span>\n-<span id=\"cb27-19\"><a href=\"#cb27-19\"><\/a>              <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"fu\">git_clone<\/span>(repo, url, path, NULL));<\/span>\n-<span id=\"cb27-20\"><a href=\"#cb27-20\"><\/a>          }<\/span>\n-<span id=\"cb27-21\"><a href=\"#cb27-21\"><\/a>          <span class=\"fu\">git_libgit2_shutdown<\/span>();<\/span>\n-<span id=\"cb27-22\"><a href=\"#cb27-22\"><\/a>    }<\/span>\n-<span id=\"cb27-23\"><a href=\"#cb27-23\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb27-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-3\" title=\"3\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-4\" title=\"4\"><span class=\"kw\">import static<\/span><span class=\"im\"> com.github.git2_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-5\" title=\"5\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-6\" title=\"6\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb27-7\" title=\"7\"><\/a>\n+<a class=\"sourceLine\" id=\"cb27-8\" title=\"8\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> GitClone {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-9\" title=\"9\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-10\" title=\"10\">          <span class=\"kw\">if<\/span> (args.<span class=\"fu\">length<\/span> != <span class=\"dv\">2<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-11\" title=\"11\">              <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;java GitClone &lt;url&gt; &lt;path&gt;&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-12\" title=\"12\">              <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(<span class=\"dv\">1<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-13\" title=\"13\">          }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-14\" title=\"14\">          <span class=\"fu\">git_libgit2_init<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb27-15\" title=\"15\">          <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb27-16\" title=\"16\">              var repo = scope.<span class=\"fu\">allocate<\/span>(C_POINTER);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-17\" title=\"17\">              var url = <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">0<\/span>], scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-18\" title=\"18\">              var path = <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">1<\/span>], scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb27-19\" title=\"19\">              <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"fu\">git_clone<\/span>(repo, url, path, NULL));<\/a>\n+<a class=\"sourceLine\" id=\"cb27-20\" title=\"20\">          }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-21\" title=\"21\">          <span class=\"fu\">git_libgit2_shutdown<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb27-22\" title=\"22\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb27-23\" title=\"23\">}<\/a><\/code><\/pre><\/div>\n@@ -554,6 +544,6 @@\n-<div class=\"sourceCode\" id=\"cb28\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb28-1\"><a href=\"#cb28-1\"><\/a><\/span>\n-<span id=\"cb28-2\"><a href=\"#cb28-2\"><\/a><span class=\"co\"># file run.sh<\/span><\/span>\n-<span id=\"cb28-3\"><a href=\"#cb28-3\"><\/a><\/span>\n-<span id=\"cb28-4\"><a href=\"#cb28-4\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb28-5\"><a href=\"#cb28-5\"><\/a>    -Djava.library.path=<span class=\"va\">${LIBGIT2_HOME}<\/span>\/build\/ \\<\/span>\n-<span id=\"cb28-6\"><a href=\"#cb28-6\"><\/a>    GitClone.java <span class=\"va\">$*<\/span><\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb28\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb28-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb28-2\" title=\"2\"><span class=\"co\"># file run.sh<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb28-3\" title=\"3\"><\/a>\n+<a class=\"sourceLine\" id=\"cb28-4\" title=\"4\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb28-5\" title=\"5\">    -Djava.library.path=<span class=\"va\">${LIBGIT2_HOME}<\/span>\/build\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb28-6\" title=\"6\">    GitClone.java <span class=\"va\">$*<\/span><\/a><\/code><\/pre><\/div>\n@@ -561,2 +551,2 @@\n-<div class=\"sourceCode\" id=\"cb29\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb29-1\"><a href=\"#cb29-1\"><\/a><\/span>\n-<span id=\"cb29-2\"><a href=\"#cb29-2\"><\/a><span class=\"fu\">sh<\/span> run.sh https:\/\/github.com\/libgit2\/libgit2.git libgit2<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb29\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb29-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb29-2\" title=\"2\"><span class=\"fu\">sh<\/span> run.sh https:\/\/github.com\/libgit2\/libgit2.git libgit2<\/a><\/code><\/pre><\/div>\n@@ -565,5 +555,5 @@\n-<div class=\"sourceCode\" id=\"cb30\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb30-1\"><a href=\"#cb30-1\"><\/a><\/span>\n-<span id=\"cb30-2\"><a href=\"#cb30-2\"><\/a><span class=\"ex\">jextract<\/span> \\<\/span>\n-<span id=\"cb30-3\"><a href=\"#cb30-3\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb30-4\"><a href=\"#cb30-4\"><\/a>  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/sqlite3.h \\<\/span>\n-<span id=\"cb30-5\"><a href=\"#cb30-5\"><\/a>  -t org.sqlite -lsqlite3<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb30\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb30-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb30-2\" title=\"2\"><span class=\"ex\">jextract<\/span> \\<\/a>\n+<a class=\"sourceLine\" id=\"cb30-3\" title=\"3\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb30-4\" title=\"4\">  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/sqlite3.h \\<\/a>\n+<a class=\"sourceLine\" id=\"cb30-5\" title=\"5\">  -t org.sqlite -lsqlite3<\/a><\/code><\/pre><\/div>\n@@ -571,93 +561,93 @@\n-<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb31-1\"><a href=\"#cb31-1\"><\/a><\/span>\n-<span id=\"cb31-2\"><a href=\"#cb31-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/span>\n-<span id=\"cb31-3\"><a href=\"#cb31-3\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/span>\n-<span id=\"cb31-4\"><a href=\"#cb31-4\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/span>\n-<span id=\"cb31-5\"><a href=\"#cb31-5\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/span>\n-<span id=\"cb31-6\"><a href=\"#cb31-6\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.sqlite.sqlite3_h.*;<\/span><\/span>\n-<span id=\"cb31-7\"><a href=\"#cb31-7\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb31-8\"><a href=\"#cb31-8\"><\/a><\/span>\n-<span id=\"cb31-9\"><a href=\"#cb31-9\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> SqliteMain {<\/span>\n-<span id=\"cb31-10\"><a href=\"#cb31-10\"><\/a>   <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) <span class=\"kw\">throws<\/span> <span class=\"bu\">Exception<\/span> {<\/span>\n-<span id=\"cb31-11\"><a href=\"#cb31-11\"><\/a>        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb31-12\"><a href=\"#cb31-12\"><\/a>            <span class=\"co\">\/\/ char** errMsgPtrPtr;<\/span><\/span>\n-<span id=\"cb31-13\"><a href=\"#cb31-13\"><\/a>            var errMsgPtrPtr = scope.<span class=\"fu\">allocate<\/span>(C_POINTER);<\/span>\n-<span id=\"cb31-14\"><a href=\"#cb31-14\"><\/a><\/span>\n-<span id=\"cb31-15\"><a href=\"#cb31-15\"><\/a>            <span class=\"co\">\/\/ sqlite3** dbPtrPtr;<\/span><\/span>\n-<span id=\"cb31-16\"><a href=\"#cb31-16\"><\/a>            var dbPtrPtr = scope.<span class=\"fu\">allocate<\/span>(C_POINTER);<\/span>\n-<span id=\"cb31-17\"><a href=\"#cb31-17\"><\/a><\/span>\n-<span id=\"cb31-18\"><a href=\"#cb31-18\"><\/a>            <span class=\"dt\">int<\/span> rc = <span class=\"fu\">sqlite3_open<\/span>(<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;employee.db&quot;<\/span>,scope), dbPtrPtr);<\/span>\n-<span id=\"cb31-19\"><a href=\"#cb31-19\"><\/a>            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/span>\n-<span id=\"cb31-20\"><a href=\"#cb31-20\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_open failed: &quot;<\/span> + rc);<\/span>\n-<span id=\"cb31-21\"><a href=\"#cb31-21\"><\/a>                <span class=\"kw\">return<\/span>;<\/span>\n-<span id=\"cb31-22\"><a href=\"#cb31-22\"><\/a>            } <span class=\"kw\">else<\/span> {<\/span>\n-<span id=\"cb31-23\"><a href=\"#cb31-23\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;employee db opened&quot;<\/span>);<\/span>\n-<span id=\"cb31-24\"><a href=\"#cb31-24\"><\/a>            }<\/span>\n-<span id=\"cb31-25\"><a href=\"#cb31-25\"><\/a><\/span>\n-<span id=\"cb31-26\"><a href=\"#cb31-26\"><\/a>            <span class=\"co\">\/\/ sqlite3* dbPtr;<\/span><\/span>\n-<span id=\"cb31-27\"><a href=\"#cb31-27\"><\/a>            var dbPtr = MemoryAccess.<span class=\"fu\">getAddress<\/span>(dbPtrPtr);<\/span>\n-<span id=\"cb31-28\"><a href=\"#cb31-28\"><\/a><\/span>\n-<span id=\"cb31-29\"><a href=\"#cb31-29\"><\/a>            <span class=\"co\">\/\/ create a new table<\/span><\/span>\n-<span id=\"cb31-30\"><a href=\"#cb31-30\"><\/a>            var sql = <span class=\"fu\">toCString<\/span>(<\/span>\n-<span id=\"cb31-31\"><a href=\"#cb31-31\"><\/a>                <span class=\"st\">&quot;CREATE TABLE EMPLOYEE (&quot;<\/span>  +<\/span>\n-<span id=\"cb31-32\"><a href=\"#cb31-32\"><\/a>                <span class=\"st\">&quot;  ID INT PRIMARY KEY NOT NULL,&quot;<\/span> +<\/span>\n-<span id=\"cb31-33\"><a href=\"#cb31-33\"><\/a>                <span class=\"st\">&quot;  NAME TEXT NOT NULL,&quot;<\/span>    +<\/span>\n-<span id=\"cb31-34\"><a href=\"#cb31-34\"><\/a>                <span class=\"st\">&quot;  SALARY REAL NOT NULL )&quot;<\/span>, scope);<\/span>\n-<span id=\"cb31-35\"><a href=\"#cb31-35\"><\/a><\/span>\n-<span id=\"cb31-36\"><a href=\"#cb31-36\"><\/a>            rc = <span class=\"fu\">sqlite3_exec<\/span>(dbPtr, sql, NULL, NULL, errMsgPtrPtr);<\/span>\n-<span id=\"cb31-37\"><a href=\"#cb31-37\"><\/a><\/span>\n-<span id=\"cb31-38\"><a href=\"#cb31-38\"><\/a>            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/span>\n-<span id=\"cb31-39\"><a href=\"#cb31-39\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_exec failed: &quot;<\/span> + rc);<\/span>\n-<span id=\"cb31-40\"><a href=\"#cb31-40\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;SQL error: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr)));<\/span>\n-<span id=\"cb31-41\"><a href=\"#cb31-41\"><\/a>                <span class=\"fu\">sqlite3_free<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr));<\/span>\n-<span id=\"cb31-42\"><a href=\"#cb31-42\"><\/a>            } <span class=\"kw\">else<\/span> {<\/span>\n-<span id=\"cb31-43\"><a href=\"#cb31-43\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;employee table created&quot;<\/span>);<\/span>\n-<span id=\"cb31-44\"><a href=\"#cb31-44\"><\/a>            }<\/span>\n-<span id=\"cb31-45\"><a href=\"#cb31-45\"><\/a><\/span>\n-<span id=\"cb31-46\"><a href=\"#cb31-46\"><\/a>            <span class=\"co\">\/\/ insert two rows<\/span><\/span>\n-<span id=\"cb31-47\"><a href=\"#cb31-47\"><\/a>            sql = <span class=\"fu\">toCString<\/span>(<\/span>\n-<span id=\"cb31-48\"><a href=\"#cb31-48\"><\/a>                <span class=\"st\">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;<\/span> +<\/span>\n-<span id=\"cb31-49\"><a href=\"#cb31-49\"><\/a>                    <span class=\"st\">&quot;VALUES (134, &#39;Xyz&#39;, 200000.0); &quot;<\/span> +<\/span>\n-<span id=\"cb31-50\"><a href=\"#cb31-50\"><\/a>                <span class=\"st\">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;<\/span> +<\/span>\n-<span id=\"cb31-51\"><a href=\"#cb31-51\"><\/a>                    <span class=\"st\">&quot;VALUES (333, &#39;Abc&#39;, 100000.0);&quot;<\/span>, scope<\/span>\n-<span id=\"cb31-52\"><a href=\"#cb31-52\"><\/a>            );<\/span>\n-<span id=\"cb31-53\"><a href=\"#cb31-53\"><\/a>            rc = <span class=\"fu\">sqlite3_exec<\/span>(dbPtr, sql, NULL, NULL, errMsgPtrPtr);<\/span>\n-<span id=\"cb31-54\"><a href=\"#cb31-54\"><\/a><\/span>\n-<span id=\"cb31-55\"><a href=\"#cb31-55\"><\/a>            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/span>\n-<span id=\"cb31-56\"><a href=\"#cb31-56\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_exec failed: &quot;<\/span> + rc);<\/span>\n-<span id=\"cb31-57\"><a href=\"#cb31-57\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;SQL error: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr)));<\/span>\n-<span id=\"cb31-58\"><a href=\"#cb31-58\"><\/a>                <span class=\"fu\">sqlite3_free<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr));<\/span>\n-<span id=\"cb31-59\"><a href=\"#cb31-59\"><\/a>            } <span class=\"kw\">else<\/span> {<\/span>\n-<span id=\"cb31-60\"><a href=\"#cb31-60\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;rows inserted&quot;<\/span>);<\/span>\n-<span id=\"cb31-61\"><a href=\"#cb31-61\"><\/a>            }<\/span>\n-<span id=\"cb31-62\"><a href=\"#cb31-62\"><\/a><\/span>\n-<span id=\"cb31-63\"><a href=\"#cb31-63\"><\/a>            <span class=\"dt\">int<\/span>[] rowNum = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">1<\/span>];<\/span>\n-<span id=\"cb31-64\"><a href=\"#cb31-64\"><\/a>            <span class=\"co\">\/\/ callback to print rows from SELECT query<\/span><\/span>\n-<span id=\"cb31-65\"><a href=\"#cb31-65\"><\/a>            var callback = sqlite3_exec$callback.<span class=\"fu\">allocate<\/span>((a, argc, argv, columnNames) -&gt; {<\/span>\n-<span id=\"cb31-66\"><a href=\"#cb31-66\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;Row num: &quot;<\/span> + rowNum[<span class=\"dv\">0<\/span>]++);<\/span>\n-<span id=\"cb31-67\"><a href=\"#cb31-67\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;numColumns = &quot;<\/span> + argc);<\/span>\n-<span id=\"cb31-68\"><a href=\"#cb31-68\"><\/a>                var argv_seg = argv.<span class=\"fu\">asSegmentRestricted<\/span>(C_POINTER.<span class=\"fu\">byteSize<\/span>() * argc);<\/span>\n-<span id=\"cb31-69\"><a href=\"#cb31-69\"><\/a>                var columnNames_seg = columnNames.<span class=\"fu\">asSegmentRestricted<\/span>(C_POINTER.<span class=\"fu\">byteSize<\/span>() * argc);<\/span>\n-<span id=\"cb31-70\"><a href=\"#cb31-70\"><\/a>                <span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span>; i &lt; argc; i++) {<\/span>\n-<span id=\"cb31-71\"><a href=\"#cb31-71\"><\/a>                     <span class=\"bu\">String<\/span> name = <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddressAtIndex<\/span>(columnNames_seg, i));<\/span>\n-<span id=\"cb31-72\"><a href=\"#cb31-72\"><\/a>                     <span class=\"bu\">String<\/span> value = <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddressAtIndex<\/span>(argv_seg, i));<\/span>\n-<span id=\"cb31-73\"><a href=\"#cb31-73\"><\/a>                     <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%s<\/span><span class=\"st\"> = <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>, name, value);<\/span>\n-<span id=\"cb31-74\"><a href=\"#cb31-74\"><\/a>                }<\/span>\n-<span id=\"cb31-75\"><a href=\"#cb31-75\"><\/a>                <span class=\"kw\">return<\/span> <span class=\"dv\">0<\/span>;<\/span>\n-<span id=\"cb31-76\"><a href=\"#cb31-76\"><\/a>            }, scope);<\/span>\n-<span id=\"cb31-77\"><a href=\"#cb31-77\"><\/a><\/span>\n-<span id=\"cb31-78\"><a href=\"#cb31-78\"><\/a>            <span class=\"co\">\/\/ select query<\/span><\/span>\n-<span id=\"cb31-79\"><a href=\"#cb31-79\"><\/a>            sql = <span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;SELECT * FROM EMPLOYEE&quot;<\/span>, scope);<\/span>\n-<span id=\"cb31-80\"><a href=\"#cb31-80\"><\/a>            rc = <span class=\"fu\">sqlite3_exec<\/span>(dbPtr, sql, callback, NULL, errMsgPtrPtr);<\/span>\n-<span id=\"cb31-81\"><a href=\"#cb31-81\"><\/a><\/span>\n-<span id=\"cb31-82\"><a href=\"#cb31-82\"><\/a>            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/span>\n-<span id=\"cb31-83\"><a href=\"#cb31-83\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_exec failed: &quot;<\/span> + rc);<\/span>\n-<span id=\"cb31-84\"><a href=\"#cb31-84\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;SQL error: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr)));<\/span>\n-<span id=\"cb31-85\"><a href=\"#cb31-85\"><\/a>                <span class=\"fu\">sqlite3_free<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr));<\/span>\n-<span id=\"cb31-86\"><a href=\"#cb31-86\"><\/a>            } <span class=\"kw\">else<\/span> {<\/span>\n-<span id=\"cb31-87\"><a href=\"#cb31-87\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;done&quot;<\/span>);<\/span>\n-<span id=\"cb31-88\"><a href=\"#cb31-88\"><\/a>            }<\/span>\n-<span id=\"cb31-89\"><a href=\"#cb31-89\"><\/a><\/span>\n-<span id=\"cb31-90\"><a href=\"#cb31-90\"><\/a>            <span class=\"fu\">sqlite3_close<\/span>(dbPtr);<\/span>\n-<span id=\"cb31-91\"><a href=\"#cb31-91\"><\/a>        }<\/span>\n-<span id=\"cb31-92\"><a href=\"#cb31-92\"><\/a>    }<\/span>\n-<span id=\"cb31-93\"><a href=\"#cb31-93\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb31-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-3\" title=\"3\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-5\" title=\"5\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-6\" title=\"6\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.sqlite.sqlite3_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-7\" title=\"7\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-8\" title=\"8\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-9\" title=\"9\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> SqliteMain {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-10\" title=\"10\">   <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) <span class=\"kw\">throws<\/span> <span class=\"bu\">Exception<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-11\" title=\"11\">        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-12\" title=\"12\">            <span class=\"co\">\/\/ char** errMsgPtrPtr;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-13\" title=\"13\">            var errMsgPtrPtr = scope.<span class=\"fu\">allocate<\/span>(C_POINTER);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-14\" title=\"14\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-15\" title=\"15\">            <span class=\"co\">\/\/ sqlite3** dbPtrPtr;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-16\" title=\"16\">            var dbPtrPtr = scope.<span class=\"fu\">allocate<\/span>(C_POINTER);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-17\" title=\"17\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-18\" title=\"18\">            <span class=\"dt\">int<\/span> rc = <span class=\"fu\">sqlite3_open<\/span>(<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;employee.db&quot;<\/span>,scope), dbPtrPtr);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-19\" title=\"19\">            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-20\" title=\"20\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_open failed: &quot;<\/span> + rc);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-21\" title=\"21\">                <span class=\"kw\">return<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb31-22\" title=\"22\">            } <span class=\"kw\">else<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-23\" title=\"23\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;employee db opened&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-24\" title=\"24\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb31-25\" title=\"25\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-26\" title=\"26\">            <span class=\"co\">\/\/ sqlite3* dbPtr;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-27\" title=\"27\">            var dbPtr = MemoryAccess.<span class=\"fu\">getAddress<\/span>(dbPtrPtr);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-28\" title=\"28\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-29\" title=\"29\">            <span class=\"co\">\/\/ create a new table<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-30\" title=\"30\">            var sql = <span class=\"fu\">toCString<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb31-31\" title=\"31\">                <span class=\"st\">&quot;CREATE TABLE EMPLOYEE (&quot;<\/span>  +<\/a>\n+<a class=\"sourceLine\" id=\"cb31-32\" title=\"32\">                <span class=\"st\">&quot;  ID INT PRIMARY KEY NOT NULL,&quot;<\/span> +<\/a>\n+<a class=\"sourceLine\" id=\"cb31-33\" title=\"33\">                <span class=\"st\">&quot;  NAME TEXT NOT NULL,&quot;<\/span>    +<\/a>\n+<a class=\"sourceLine\" id=\"cb31-34\" title=\"34\">                <span class=\"st\">&quot;  SALARY REAL NOT NULL )&quot;<\/span>, scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-35\" title=\"35\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-36\" title=\"36\">            rc = <span class=\"fu\">sqlite3_exec<\/span>(dbPtr, sql, NULL, NULL, errMsgPtrPtr);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-37\" title=\"37\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-38\" title=\"38\">            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-39\" title=\"39\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_exec failed: &quot;<\/span> + rc);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-40\" title=\"40\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;SQL error: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr)));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-41\" title=\"41\">                <span class=\"fu\">sqlite3_free<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-42\" title=\"42\">            } <span class=\"kw\">else<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-43\" title=\"43\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;employee table created&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-44\" title=\"44\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb31-45\" title=\"45\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-46\" title=\"46\">            <span class=\"co\">\/\/ insert two rows<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-47\" title=\"47\">            sql = <span class=\"fu\">toCString<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb31-48\" title=\"48\">                <span class=\"st\">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;<\/span> +<\/a>\n+<a class=\"sourceLine\" id=\"cb31-49\" title=\"49\">                    <span class=\"st\">&quot;VALUES (134, &#39;Xyz&#39;, 200000.0); &quot;<\/span> +<\/a>\n+<a class=\"sourceLine\" id=\"cb31-50\" title=\"50\">                <span class=\"st\">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;<\/span> +<\/a>\n+<a class=\"sourceLine\" id=\"cb31-51\" title=\"51\">                    <span class=\"st\">&quot;VALUES (333, &#39;Abc&#39;, 100000.0);&quot;<\/span>, scope<\/a>\n+<a class=\"sourceLine\" id=\"cb31-52\" title=\"52\">            );<\/a>\n+<a class=\"sourceLine\" id=\"cb31-53\" title=\"53\">            rc = <span class=\"fu\">sqlite3_exec<\/span>(dbPtr, sql, NULL, NULL, errMsgPtrPtr);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-54\" title=\"54\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-55\" title=\"55\">            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-56\" title=\"56\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_exec failed: &quot;<\/span> + rc);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-57\" title=\"57\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;SQL error: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr)));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-58\" title=\"58\">                <span class=\"fu\">sqlite3_free<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-59\" title=\"59\">            } <span class=\"kw\">else<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-60\" title=\"60\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;rows inserted&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-61\" title=\"61\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb31-62\" title=\"62\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-63\" title=\"63\">            <span class=\"dt\">int<\/span>[] rowNum = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">1<\/span>];<\/a>\n+<a class=\"sourceLine\" id=\"cb31-64\" title=\"64\">            <span class=\"co\">\/\/ callback to print rows from SELECT query<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-65\" title=\"65\">            var callback = sqlite3_exec$callback.<span class=\"fu\">allocate<\/span>((a, argc, argv, columnNames) -&gt; {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-66\" title=\"66\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;Row num: &quot;<\/span> + rowNum[<span class=\"dv\">0<\/span>]++);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-67\" title=\"67\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;numColumns = &quot;<\/span> + argc);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-68\" title=\"68\">                var argv_seg = argv.<span class=\"fu\">asSegmentRestricted<\/span>(C_POINTER.<span class=\"fu\">byteSize<\/span>() * argc);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-69\" title=\"69\">                var columnNames_seg = columnNames.<span class=\"fu\">asSegmentRestricted<\/span>(C_POINTER.<span class=\"fu\">byteSize<\/span>() * argc);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-70\" title=\"70\">                <span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span>; i &lt; argc; i++) {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-71\" title=\"71\">                     <span class=\"bu\">String<\/span> name = <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddressAtIndex<\/span>(columnNames_seg, i));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-72\" title=\"72\">                     <span class=\"bu\">String<\/span> value = <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddressAtIndex<\/span>(argv_seg, i));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-73\" title=\"73\">                     <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%s<\/span><span class=\"st\"> = <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>, name, value);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-74\" title=\"74\">                }<\/a>\n+<a class=\"sourceLine\" id=\"cb31-75\" title=\"75\">                <span class=\"kw\">return<\/span> <span class=\"dv\">0<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb31-76\" title=\"76\">            }, scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-77\" title=\"77\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-78\" title=\"78\">            <span class=\"co\">\/\/ select query<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb31-79\" title=\"79\">            sql = <span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;SELECT * FROM EMPLOYEE&quot;<\/span>, scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-80\" title=\"80\">            rc = <span class=\"fu\">sqlite3_exec<\/span>(dbPtr, sql, callback, NULL, errMsgPtrPtr);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-81\" title=\"81\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-82\" title=\"82\">            <span class=\"kw\">if<\/span> (rc != <span class=\"dv\">0<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-83\" title=\"83\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;sqlite3_exec failed: &quot;<\/span> + rc);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-84\" title=\"84\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;SQL error: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr)));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-85\" title=\"85\">                <span class=\"fu\">sqlite3_free<\/span>(MemoryAccess.<span class=\"fu\">getAddress<\/span>(errMsgPtrPtr));<\/a>\n+<a class=\"sourceLine\" id=\"cb31-86\" title=\"86\">            } <span class=\"kw\">else<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb31-87\" title=\"87\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;done&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-88\" title=\"88\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb31-89\" title=\"89\"><\/a>\n+<a class=\"sourceLine\" id=\"cb31-90\" title=\"90\">            <span class=\"fu\">sqlite3_close<\/span>(dbPtr);<\/a>\n+<a class=\"sourceLine\" id=\"cb31-91\" title=\"91\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb31-92\" title=\"92\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb31-93\" title=\"93\">}<\/a><\/code><\/pre><\/div>\n@@ -665,4 +655,4 @@\n-<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb32-1\"><a href=\"#cb32-1\"><\/a><\/span>\n-<span id=\"cb32-2\"><a href=\"#cb32-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit \\<\/span>\n-<span id=\"cb32-3\"><a href=\"#cb32-3\"><\/a>   --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb32-4\"><a href=\"#cb32-4\"><\/a>   -Djava.library.path=\/usr\/lib SqliteMain.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb32-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb32-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit \\<\/a>\n+<a class=\"sourceLine\" id=\"cb32-3\" title=\"3\">   --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb32-4\" title=\"4\">   -Djava.library.path=\/usr\/lib SqliteMain.java<\/a><\/code><\/pre><\/div>\n@@ -671,5 +661,5 @@\n-<div class=\"sourceCode\" id=\"cb33\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb33-1\"><a href=\"#cb33-1\"><\/a><\/span>\n-<span id=\"cb33-2\"><a href=\"#cb33-2\"><\/a><span class=\"ex\">jextract<\/span> -t opengl -lGL -l\/System\/Library\/Frameworks\/GLUT.framework\/Versions\/Current\/GLUT \\<\/span>\n-<span id=\"cb33-3\"><a href=\"#cb33-3\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/span>\n-<span id=\"cb33-4\"><a href=\"#cb33-4\"><\/a>  -C-F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks \\<\/span>\n-<span id=\"cb33-5\"><a href=\"#cb33-5\"><\/a>  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\/GLUT.framework\/Headers\/glut.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb33\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb33-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb33-2\" title=\"2\"><span class=\"ex\">jextract<\/span> -t opengl -lGL -l\/System\/Library\/Frameworks\/GLUT.framework\/Versions\/Current\/GLUT \\<\/a>\n+<a class=\"sourceLine\" id=\"cb33-3\" title=\"3\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb33-4\" title=\"4\">  -C-F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks \\<\/a>\n+<a class=\"sourceLine\" id=\"cb33-5\" title=\"5\">  \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\/GLUT.framework\/Headers\/glut.h<\/a><\/code><\/pre><\/div>\n@@ -677,58 +667,58 @@\n-<div class=\"sourceCode\" id=\"cb34\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb34-1\"><a href=\"#cb34-1\"><\/a><\/span>\n-<span id=\"cb34-2\"><a href=\"#cb34-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker;<\/span><\/span>\n-<span id=\"cb34-3\"><a href=\"#cb34-3\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb34-4\"><a href=\"#cb34-4\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/span>\n-<span id=\"cb34-5\"><a href=\"#cb34-5\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> opengl.glut_h.*;<\/span><\/span>\n-<span id=\"cb34-6\"><a href=\"#cb34-6\"><\/a><\/span>\n-<span id=\"cb34-7\"><a href=\"#cb34-7\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> Teapot {<\/span>\n-<span id=\"cb34-8\"><a href=\"#cb34-8\"><\/a>    <span class=\"kw\">private<\/span> <span class=\"dt\">float<\/span> rot = <span class=\"dv\">0<\/span>;<\/span>\n-<span id=\"cb34-9\"><a href=\"#cb34-9\"><\/a><\/span>\n-<span id=\"cb34-10\"><a href=\"#cb34-10\"><\/a>    <span class=\"fu\">Teapot<\/span>(NativeScope scope) {<\/span>\n-<span id=\"cb34-11\"><a href=\"#cb34-11\"><\/a>        <span class=\"co\">\/\/ Reset Background<\/span><\/span>\n-<span id=\"cb34-12\"><a href=\"#cb34-12\"><\/a>        <span class=\"fu\">glClearColor<\/span>(<span class=\"fl\">0f<\/span>, <span class=\"fl\">0f<\/span>, <span class=\"fl\">0f<\/span>, <span class=\"fl\">0f<\/span>);<\/span>\n-<span id=\"cb34-13\"><a href=\"#cb34-13\"><\/a>        <span class=\"co\">\/\/ Setup Lighting<\/span><\/span>\n-<span id=\"cb34-14\"><a href=\"#cb34-14\"><\/a>        <span class=\"fu\">glShadeModel<\/span>(<span class=\"fu\">GL_SMOOTH<\/span>());<\/span>\n-<span id=\"cb34-15\"><a href=\"#cb34-15\"><\/a>        var pos = scope.<span class=\"fu\">allocateArray<\/span>(C_FLOAT, <span class=\"kw\">new<\/span> <span class=\"dt\">float<\/span>[] {<span class=\"fl\">0.0f<\/span>, <span class=\"fl\">15.0f<\/span>, -<span class=\"fl\">15.0f<\/span>, <span class=\"dv\">0<\/span>});<\/span>\n-<span id=\"cb34-16\"><a href=\"#cb34-16\"><\/a>        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_POSITION<\/span>(), pos);<\/span>\n-<span id=\"cb34-17\"><a href=\"#cb34-17\"><\/a>        var spec = scope.<span class=\"fu\">allocateArray<\/span>(C_FLOAT, <span class=\"kw\">new<\/span> <span class=\"dt\">float<\/span>[] {<span class=\"dv\">1<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">0<\/span>});<\/span>\n-<span id=\"cb34-18\"><a href=\"#cb34-18\"><\/a>        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_AMBIENT<\/span>(), spec);<\/span>\n-<span id=\"cb34-19\"><a href=\"#cb34-19\"><\/a>        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_DIFFUSE<\/span>(), spec);<\/span>\n-<span id=\"cb34-20\"><a href=\"#cb34-20\"><\/a>        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_SPECULAR<\/span>(), spec);<\/span>\n-<span id=\"cb34-21\"><a href=\"#cb34-21\"><\/a>        var shini = scope.<span class=\"fu\">allocate<\/span>(C_FLOAT, <span class=\"dv\">113<\/span>);<\/span>\n-<span id=\"cb34-22\"><a href=\"#cb34-22\"><\/a>        <span class=\"fu\">glMaterialfv<\/span>(<span class=\"fu\">GL_FRONT<\/span>(), <span class=\"fu\">GL_SHININESS<\/span>(), shini);<\/span>\n-<span id=\"cb34-23\"><a href=\"#cb34-23\"><\/a>        <span class=\"fu\">glEnable<\/span>(<span class=\"fu\">GL_LIGHTING<\/span>());<\/span>\n-<span id=\"cb34-24\"><a href=\"#cb34-24\"><\/a>        <span class=\"fu\">glEnable<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>());<\/span>\n-<span id=\"cb34-25\"><a href=\"#cb34-25\"><\/a>        <span class=\"fu\">glEnable<\/span>(<span class=\"fu\">GL_DEPTH_TEST<\/span>());<\/span>\n-<span id=\"cb34-26\"><a href=\"#cb34-26\"><\/a>    }<\/span>\n-<span id=\"cb34-27\"><a href=\"#cb34-27\"><\/a><\/span>\n-<span id=\"cb34-28\"><a href=\"#cb34-28\"><\/a>    <span class=\"dt\">void<\/span> <span class=\"fu\">display<\/span>() {<\/span>\n-<span id=\"cb34-29\"><a href=\"#cb34-29\"><\/a>        <span class=\"fu\">glClear<\/span>(<span class=\"fu\">GL_COLOR_BUFFER_BIT<\/span>() | <span class=\"fu\">GL_DEPTH_BUFFER_BIT<\/span>());<\/span>\n-<span id=\"cb34-30\"><a href=\"#cb34-30\"><\/a>        <span class=\"fu\">glPushMatrix<\/span>();<\/span>\n-<span id=\"cb34-31\"><a href=\"#cb34-31\"><\/a>        <span class=\"fu\">glRotatef<\/span>(-<span class=\"fl\">20f<\/span>, <span class=\"fl\">1f<\/span>, <span class=\"fl\">1f<\/span>, <span class=\"fl\">0f<\/span>);<\/span>\n-<span id=\"cb34-32\"><a href=\"#cb34-32\"><\/a>        <span class=\"fu\">glRotatef<\/span>(rot, <span class=\"fl\">0f<\/span>, <span class=\"fl\">1f<\/span>, <span class=\"fl\">0f<\/span>);<\/span>\n-<span id=\"cb34-33\"><a href=\"#cb34-33\"><\/a>        <span class=\"fu\">glutSolidTeapot<\/span>(<span class=\"fl\">0.5d<\/span>);<\/span>\n-<span id=\"cb34-34\"><a href=\"#cb34-34\"><\/a>        <span class=\"fu\">glPopMatrix<\/span>();<\/span>\n-<span id=\"cb34-35\"><a href=\"#cb34-35\"><\/a>        <span class=\"fu\">glutSwapBuffers<\/span>();<\/span>\n-<span id=\"cb34-36\"><a href=\"#cb34-36\"><\/a>    }<\/span>\n-<span id=\"cb34-37\"><a href=\"#cb34-37\"><\/a><\/span>\n-<span id=\"cb34-38\"><a href=\"#cb34-38\"><\/a>    <span class=\"dt\">void<\/span> <span class=\"fu\">onIdle<\/span>() {<\/span>\n-<span id=\"cb34-39\"><a href=\"#cb34-39\"><\/a>        rot += <span class=\"fl\">0.<\/span><span class=\"dv\">1<\/span>;<\/span>\n-<span id=\"cb34-40\"><a href=\"#cb34-40\"><\/a>        <span class=\"fu\">glutPostRedisplay<\/span>();<\/span>\n-<span id=\"cb34-41\"><a href=\"#cb34-41\"><\/a>    }<\/span>\n-<span id=\"cb34-42\"><a href=\"#cb34-42\"><\/a><\/span>\n-<span id=\"cb34-43\"><a href=\"#cb34-43\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb34-44\"><a href=\"#cb34-44\"><\/a>        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb34-45\"><a href=\"#cb34-45\"><\/a>            var argc = scope.<span class=\"fu\">allocate<\/span>(C_INT, <span class=\"dv\">0<\/span>);<\/span>\n-<span id=\"cb34-46\"><a href=\"#cb34-46\"><\/a>            <span class=\"fu\">glutInit<\/span>(argc, argc);<\/span>\n-<span id=\"cb34-47\"><a href=\"#cb34-47\"><\/a>            <span class=\"fu\">glutInitDisplayMode<\/span>(<span class=\"fu\">GLUT_DOUBLE<\/span>() | <span class=\"fu\">GLUT_RGB<\/span>() | <span class=\"fu\">GLUT_DEPTH<\/span>());<\/span>\n-<span id=\"cb34-48\"><a href=\"#cb34-48\"><\/a>            <span class=\"fu\">glutInitWindowSize<\/span>(<span class=\"dv\">500<\/span>, <span class=\"dv\">500<\/span>);<\/span>\n-<span id=\"cb34-49\"><a href=\"#cb34-49\"><\/a>            <span class=\"fu\">glutCreateWindow<\/span>(CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;Hello Panama!&quot;<\/span>, scope));<\/span>\n-<span id=\"cb34-50\"><a href=\"#cb34-50\"><\/a>            var teapot = <span class=\"kw\">new<\/span> <span class=\"fu\">Teapot<\/span>(scope);<\/span>\n-<span id=\"cb34-51\"><a href=\"#cb34-51\"><\/a>            var displayStub = glutDisplayFunc$func.<span class=\"fu\">allocate<\/span>(teapot::display, scope);<\/span>\n-<span id=\"cb34-52\"><a href=\"#cb34-52\"><\/a>            var idleStub = glutIdleFunc$func.<span class=\"fu\">allocate<\/span>(teapot::onIdle, scope);<\/span>\n-<span id=\"cb34-53\"><a href=\"#cb34-53\"><\/a>            <span class=\"fu\">glutDisplayFunc<\/span>(displayStub);<\/span>\n-<span id=\"cb34-54\"><a href=\"#cb34-54\"><\/a>            <span class=\"fu\">glutIdleFunc<\/span>(idleStub);<\/span>\n-<span id=\"cb34-55\"><a href=\"#cb34-55\"><\/a>            <span class=\"fu\">glutMainLoop<\/span>();<\/span>\n-<span id=\"cb34-56\"><a href=\"#cb34-56\"><\/a>        }<\/span>\n-<span id=\"cb34-57\"><a href=\"#cb34-57\"><\/a>    }<\/span>\n-<span id=\"cb34-58\"><a href=\"#cb34-58\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb34\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb34-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb34-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb34-3\" title=\"3\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb34-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb34-5\" title=\"5\"><span class=\"kw\">import static<\/span><span class=\"im\"> opengl.glut_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb34-6\" title=\"6\"><\/a>\n+<a class=\"sourceLine\" id=\"cb34-7\" title=\"7\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> Teapot {<\/a>\n+<a class=\"sourceLine\" id=\"cb34-8\" title=\"8\">    <span class=\"kw\">private<\/span> <span class=\"dt\">float<\/span> rot = <span class=\"dv\">0<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb34-9\" title=\"9\"><\/a>\n+<a class=\"sourceLine\" id=\"cb34-10\" title=\"10\">    <span class=\"fu\">Teapot<\/span>(NativeScope scope) {<\/a>\n+<a class=\"sourceLine\" id=\"cb34-11\" title=\"11\">        <span class=\"co\">\/\/ Reset Background<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb34-12\" title=\"12\">        <span class=\"fu\">glClearColor<\/span>(<span class=\"fl\">0f<\/span>, <span class=\"fl\">0f<\/span>, <span class=\"fl\">0f<\/span>, <span class=\"fl\">0f<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-13\" title=\"13\">        <span class=\"co\">\/\/ Setup Lighting<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb34-14\" title=\"14\">        <span class=\"fu\">glShadeModel<\/span>(<span class=\"fu\">GL_SMOOTH<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb34-15\" title=\"15\">        var pos = scope.<span class=\"fu\">allocateArray<\/span>(C_FLOAT, <span class=\"kw\">new<\/span> <span class=\"dt\">float<\/span>[] {<span class=\"fl\">0.0f<\/span>, <span class=\"fl\">15.0f<\/span>, -<span class=\"fl\">15.0f<\/span>, <span class=\"dv\">0<\/span>});<\/a>\n+<a class=\"sourceLine\" id=\"cb34-16\" title=\"16\">        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_POSITION<\/span>(), pos);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-17\" title=\"17\">        var spec = scope.<span class=\"fu\">allocateArray<\/span>(C_FLOAT, <span class=\"kw\">new<\/span> <span class=\"dt\">float<\/span>[] {<span class=\"dv\">1<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">0<\/span>});<\/a>\n+<a class=\"sourceLine\" id=\"cb34-18\" title=\"18\">        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_AMBIENT<\/span>(), spec);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-19\" title=\"19\">        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_DIFFUSE<\/span>(), spec);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-20\" title=\"20\">        <span class=\"fu\">glLightfv<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>(), <span class=\"fu\">GL_SPECULAR<\/span>(), spec);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-21\" title=\"21\">        var shini = scope.<span class=\"fu\">allocate<\/span>(C_FLOAT, <span class=\"dv\">113<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-22\" title=\"22\">        <span class=\"fu\">glMaterialfv<\/span>(<span class=\"fu\">GL_FRONT<\/span>(), <span class=\"fu\">GL_SHININESS<\/span>(), shini);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-23\" title=\"23\">        <span class=\"fu\">glEnable<\/span>(<span class=\"fu\">GL_LIGHTING<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb34-24\" title=\"24\">        <span class=\"fu\">glEnable<\/span>(<span class=\"fu\">GL_LIGHT0<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb34-25\" title=\"25\">        <span class=\"fu\">glEnable<\/span>(<span class=\"fu\">GL_DEPTH_TEST<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb34-26\" title=\"26\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb34-27\" title=\"27\"><\/a>\n+<a class=\"sourceLine\" id=\"cb34-28\" title=\"28\">    <span class=\"dt\">void<\/span> <span class=\"fu\">display<\/span>() {<\/a>\n+<a class=\"sourceLine\" id=\"cb34-29\" title=\"29\">        <span class=\"fu\">glClear<\/span>(<span class=\"fu\">GL_COLOR_BUFFER_BIT<\/span>() | <span class=\"fu\">GL_DEPTH_BUFFER_BIT<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb34-30\" title=\"30\">        <span class=\"fu\">glPushMatrix<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb34-31\" title=\"31\">        <span class=\"fu\">glRotatef<\/span>(-<span class=\"fl\">20f<\/span>, <span class=\"fl\">1f<\/span>, <span class=\"fl\">1f<\/span>, <span class=\"fl\">0f<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-32\" title=\"32\">        <span class=\"fu\">glRotatef<\/span>(rot, <span class=\"fl\">0f<\/span>, <span class=\"fl\">1f<\/span>, <span class=\"fl\">0f<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-33\" title=\"33\">        <span class=\"fu\">glutSolidTeapot<\/span>(<span class=\"fl\">0.5d<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-34\" title=\"34\">        <span class=\"fu\">glPopMatrix<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb34-35\" title=\"35\">        <span class=\"fu\">glutSwapBuffers<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb34-36\" title=\"36\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb34-37\" title=\"37\"><\/a>\n+<a class=\"sourceLine\" id=\"cb34-38\" title=\"38\">    <span class=\"dt\">void<\/span> <span class=\"fu\">onIdle<\/span>() {<\/a>\n+<a class=\"sourceLine\" id=\"cb34-39\" title=\"39\">        rot += <span class=\"fl\">0.<\/span><span class=\"dv\">1<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb34-40\" title=\"40\">        <span class=\"fu\">glutPostRedisplay<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb34-41\" title=\"41\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb34-42\" title=\"42\"><\/a>\n+<a class=\"sourceLine\" id=\"cb34-43\" title=\"43\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb34-44\" title=\"44\">        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb34-45\" title=\"45\">            var argc = scope.<span class=\"fu\">allocate<\/span>(C_INT, <span class=\"dv\">0<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-46\" title=\"46\">            <span class=\"fu\">glutInit<\/span>(argc, argc);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-47\" title=\"47\">            <span class=\"fu\">glutInitDisplayMode<\/span>(<span class=\"fu\">GLUT_DOUBLE<\/span>() | <span class=\"fu\">GLUT_RGB<\/span>() | <span class=\"fu\">GLUT_DEPTH<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb34-48\" title=\"48\">            <span class=\"fu\">glutInitWindowSize<\/span>(<span class=\"dv\">500<\/span>, <span class=\"dv\">500<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-49\" title=\"49\">            <span class=\"fu\">glutCreateWindow<\/span>(CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;Hello Panama!&quot;<\/span>, scope));<\/a>\n+<a class=\"sourceLine\" id=\"cb34-50\" title=\"50\">            var teapot = <span class=\"kw\">new<\/span> <span class=\"fu\">Teapot<\/span>(scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-51\" title=\"51\">            var displayStub = glutDisplayFunc$func.<span class=\"fu\">allocate<\/span>(teapot::display, scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-52\" title=\"52\">            var idleStub = glutIdleFunc$func.<span class=\"fu\">allocate<\/span>(teapot::onIdle, scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-53\" title=\"53\">            <span class=\"fu\">glutDisplayFunc<\/span>(displayStub);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-54\" title=\"54\">            <span class=\"fu\">glutIdleFunc<\/span>(idleStub);<\/a>\n+<a class=\"sourceLine\" id=\"cb34-55\" title=\"55\">            <span class=\"fu\">glutMainLoop<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb34-56\" title=\"56\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb34-57\" title=\"57\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb34-58\" title=\"58\">}<\/a><\/code><\/pre><\/div>\n@@ -736,3 +726,3 @@\n-<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb35-1\"><a href=\"#cb35-1\"><\/a><\/span>\n-<span id=\"cb35-2\"><a href=\"#cb35-2\"><\/a><span class=\"ex\">java<\/span> -XstartOnFirstThread -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb35-3\"><a href=\"#cb35-3\"><\/a>    -Djava.library.path=.:\/System\/Library\/Frameworks\/OpenGL.framework\/Versions\/Current\/Libraries\/ Teapot.java <span class=\"va\">$*<\/span><\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb35-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb35-2\" title=\"2\"><span class=\"ex\">java<\/span> -XstartOnFirstThread -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb35-3\" title=\"3\">    -Djava.library.path=.:\/System\/Library\/Frameworks\/OpenGL.framework\/Versions\/Current\/Libraries\/ Teapot.java <span class=\"va\">$*<\/span><\/a><\/code><\/pre><\/div>\n@@ -747,9 +737,9 @@\n-<div class=\"sourceCode\" id=\"cb36\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb36-1\"><a href=\"#cb36-1\"><\/a><\/span>\n-<span id=\"cb36-2\"><a href=\"#cb36-2\"><\/a><span class=\"ex\">jextract<\/span> --source \\<\/span>\n-<span id=\"cb36-3\"><a href=\"#cb36-3\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/span>\n-<span id=\"cb36-4\"><a href=\"#cb36-4\"><\/a>  -t org.tensorflow \\<\/span>\n-<span id=\"cb36-5\"><a href=\"#cb36-5\"><\/a>  -I <span class=\"va\">${LIBTENSORFLOW_HOME}<\/span>\/include \\<\/span>\n-<span id=\"cb36-6\"><a href=\"#cb36-6\"><\/a>  -l <span class=\"va\">${LIBTENSORFLOW_HOME}<\/span>\/lib\/libtensorflow.dylib \\<\/span>\n-<span id=\"cb36-7\"><a href=\"#cb36-7\"><\/a>  <span class=\"va\">${LIBTENSORFLOW_HOME}<\/span>\/include\/tensorflow\/c\/c_api.h<\/span>\n-<span id=\"cb36-8\"><a href=\"#cb36-8\"><\/a><\/span>\n-<span id=\"cb36-9\"><a href=\"#cb36-9\"><\/a><span class=\"ex\">javac<\/span> --add-modules jdk.incubator.foreign org\/tensorflow\/*.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb36\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb36-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb36-2\" title=\"2\"><span class=\"ex\">jextract<\/span> --source \\<\/a>\n+<a class=\"sourceLine\" id=\"cb36-3\" title=\"3\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb36-4\" title=\"4\">  -t org.tensorflow \\<\/a>\n+<a class=\"sourceLine\" id=\"cb36-5\" title=\"5\">  -I <span class=\"va\">${LIBTENSORFLOW_HOME}<\/span>\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb36-6\" title=\"6\">  -l <span class=\"va\">${LIBTENSORFLOW_HOME}<\/span>\/lib\/libtensorflow.dylib \\<\/a>\n+<a class=\"sourceLine\" id=\"cb36-7\" title=\"7\">  <span class=\"va\">${LIBTENSORFLOW_HOME}<\/span>\/include\/tensorflow\/c\/c_api.h<\/a>\n+<a class=\"sourceLine\" id=\"cb36-8\" title=\"8\"><\/a>\n+<a class=\"sourceLine\" id=\"cb36-9\" title=\"9\"><span class=\"ex\">javac<\/span> --add-modules jdk.incubator.foreign org\/tensorflow\/*.java<\/a><\/code><\/pre><\/div>\n@@ -759,32 +749,32 @@\n-<div class=\"sourceCode\" id=\"cb37\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb37-1\"><a href=\"#cb37-1\"><\/a><\/span>\n-<span id=\"cb37-2\"><a href=\"#cb37-2\"><\/a><span class=\"im\">import<\/span> tensorflow <span class=\"im\">as<\/span> tf<\/span>\n-<span id=\"cb37-3\"><a href=\"#cb37-3\"><\/a><span class=\"im\">from<\/span> tensorflow.keras <span class=\"im\">import<\/span> models, layers<\/span>\n-<span id=\"cb37-4\"><a href=\"#cb37-4\"><\/a><span class=\"im\">from<\/span> tensorflow.keras.datasets <span class=\"im\">import<\/span> mnist<\/span>\n-<span id=\"cb37-5\"><a href=\"#cb37-5\"><\/a><\/span>\n-<span id=\"cb37-6\"><a href=\"#cb37-6\"><\/a>model <span class=\"op\">=<\/span> tf.keras.models.Sequential([<\/span>\n-<span id=\"cb37-7\"><a href=\"#cb37-7\"><\/a>  tf.keras.layers.Flatten(input_shape<span class=\"op\">=<\/span>(<span class=\"dv\">28<\/span>, <span class=\"dv\">28<\/span>)),<\/span>\n-<span id=\"cb37-8\"><a href=\"#cb37-8\"><\/a>  tf.keras.layers.Dense(<span class=\"dv\">128<\/span>,activation<span class=\"op\">=<\/span><span class=\"st\">&#39;relu&#39;<\/span>),<\/span>\n-<span id=\"cb37-9\"><a href=\"#cb37-9\"><\/a>  tf.keras.layers.Dense(<span class=\"dv\">10<\/span>, activation<span class=\"op\">=<\/span><span class=\"st\">&#39;softmax&#39;<\/span>)<\/span>\n-<span id=\"cb37-10\"><a href=\"#cb37-10\"><\/a>])<\/span>\n-<span id=\"cb37-11\"><a href=\"#cb37-11\"><\/a><\/span>\n-<span id=\"cb37-12\"><a href=\"#cb37-12\"><\/a>model.<span class=\"bu\">compile<\/span>(<\/span>\n-<span id=\"cb37-13\"><a href=\"#cb37-13\"><\/a>    loss<span class=\"op\">=<\/span><span class=\"st\">&#39;sparse_categorical_crossentropy&#39;<\/span>,<\/span>\n-<span id=\"cb37-14\"><a href=\"#cb37-14\"><\/a>    optimizer<span class=\"op\">=<\/span>tf.keras.optimizers.Adam(<span class=\"fl\">0.001<\/span>),<\/span>\n-<span id=\"cb37-15\"><a href=\"#cb37-15\"><\/a>    metrics<span class=\"op\">=<\/span>[<span class=\"st\">&#39;accuracy&#39;<\/span>],<\/span>\n-<span id=\"cb37-16\"><a href=\"#cb37-16\"><\/a>)<\/span>\n-<span id=\"cb37-17\"><a href=\"#cb37-17\"><\/a><\/span>\n-<span id=\"cb37-18\"><a href=\"#cb37-18\"><\/a><span class=\"bu\">print<\/span>(model.summary())<\/span>\n-<span id=\"cb37-19\"><a href=\"#cb37-19\"><\/a><\/span>\n-<span id=\"cb37-20\"><a href=\"#cb37-20\"><\/a>(train_images, train_labels), (test_images, test_labels) <span class=\"op\">=<\/span> mnist.load_data()<\/span>\n-<span id=\"cb37-21\"><a href=\"#cb37-21\"><\/a><\/span>\n-<span id=\"cb37-22\"><a href=\"#cb37-22\"><\/a>train_images <span class=\"op\">=<\/span> train_images<span class=\"op\">\/<\/span><span class=\"fl\">255.0<\/span><\/span>\n-<span id=\"cb37-23\"><a href=\"#cb37-23\"><\/a>test_images <span class=\"op\">=<\/span> test_images<span class=\"op\">\/<\/span><span class=\"fl\">255.0<\/span><\/span>\n-<span id=\"cb37-24\"><a href=\"#cb37-24\"><\/a><\/span>\n-<span id=\"cb37-25\"><a href=\"#cb37-25\"><\/a>model.fit(train_images, train_labels,<\/span>\n-<span id=\"cb37-26\"><a href=\"#cb37-26\"><\/a>    epochs<span class=\"op\">=<\/span><span class=\"dv\">4<\/span>, batch_size<span class=\"op\">=<\/span><span class=\"dv\">128<\/span>, verbose<span class=\"op\">=<\/span><span class=\"dv\">1<\/span>)<\/span>\n-<span id=\"cb37-27\"><a href=\"#cb37-27\"><\/a><\/span>\n-<span id=\"cb37-28\"><a href=\"#cb37-28\"><\/a>test_loss, test_accuracy <span class=\"op\">=<\/span> model.evaluate(test_images, test_labels)<\/span>\n-<span id=\"cb37-29\"><a href=\"#cb37-29\"><\/a><\/span>\n-<span id=\"cb37-30\"><a href=\"#cb37-30\"><\/a><span class=\"bu\">print<\/span>(test_loss, test_accuracy)<\/span>\n-<span id=\"cb37-31\"><a href=\"#cb37-31\"><\/a><\/span>\n-<span id=\"cb37-32\"><a href=\"#cb37-32\"><\/a>model.save(<span class=\"st\">&quot;saved_mnist_model&quot;<\/span>)<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb37\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><a class=\"sourceLine\" id=\"cb37-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-2\" title=\"2\"><span class=\"im\">import<\/span> tensorflow <span class=\"im\">as<\/span> tf<\/a>\n+<a class=\"sourceLine\" id=\"cb37-3\" title=\"3\"><span class=\"im\">from<\/span> tensorflow.keras <span class=\"im\">import<\/span> models, layers<\/a>\n+<a class=\"sourceLine\" id=\"cb37-4\" title=\"4\"><span class=\"im\">from<\/span> tensorflow.keras.datasets <span class=\"im\">import<\/span> mnist<\/a>\n+<a class=\"sourceLine\" id=\"cb37-5\" title=\"5\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-6\" title=\"6\">model <span class=\"op\">=<\/span> tf.keras.models.Sequential([<\/a>\n+<a class=\"sourceLine\" id=\"cb37-7\" title=\"7\">  tf.keras.layers.Flatten(input_shape<span class=\"op\">=<\/span>(<span class=\"dv\">28<\/span>, <span class=\"dv\">28<\/span>)),<\/a>\n+<a class=\"sourceLine\" id=\"cb37-8\" title=\"8\">  tf.keras.layers.Dense(<span class=\"dv\">128<\/span>,activation<span class=\"op\">=<\/span><span class=\"st\">&#39;relu&#39;<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb37-9\" title=\"9\">  tf.keras.layers.Dense(<span class=\"dv\">10<\/span>, activation<span class=\"op\">=<\/span><span class=\"st\">&#39;softmax&#39;<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb37-10\" title=\"10\">])<\/a>\n+<a class=\"sourceLine\" id=\"cb37-11\" title=\"11\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-12\" title=\"12\">model.<span class=\"bu\">compile<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb37-13\" title=\"13\">    loss<span class=\"op\">=<\/span><span class=\"st\">&#39;sparse_categorical_crossentropy&#39;<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb37-14\" title=\"14\">    optimizer<span class=\"op\">=<\/span>tf.keras.optimizers.Adam(<span class=\"fl\">0.001<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb37-15\" title=\"15\">    metrics<span class=\"op\">=<\/span>[<span class=\"st\">&#39;accuracy&#39;<\/span>],<\/a>\n+<a class=\"sourceLine\" id=\"cb37-16\" title=\"16\">)<\/a>\n+<a class=\"sourceLine\" id=\"cb37-17\" title=\"17\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-18\" title=\"18\"><span class=\"bu\">print<\/span>(model.summary())<\/a>\n+<a class=\"sourceLine\" id=\"cb37-19\" title=\"19\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-20\" title=\"20\">(train_images, train_labels), (test_images, test_labels) <span class=\"op\">=<\/span> mnist.load_data()<\/a>\n+<a class=\"sourceLine\" id=\"cb37-21\" title=\"21\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-22\" title=\"22\">train_images <span class=\"op\">=<\/span> train_images<span class=\"op\">\/<\/span><span class=\"fl\">255.0<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb37-23\" title=\"23\">test_images <span class=\"op\">=<\/span> test_images<span class=\"op\">\/<\/span><span class=\"fl\">255.0<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb37-24\" title=\"24\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-25\" title=\"25\">model.fit(train_images, train_labels,<\/a>\n+<a class=\"sourceLine\" id=\"cb37-26\" title=\"26\">    epochs<span class=\"op\">=<\/span><span class=\"dv\">4<\/span>, batch_size<span class=\"op\">=<\/span><span class=\"dv\">128<\/span>, verbose<span class=\"op\">=<\/span><span class=\"dv\">1<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb37-27\" title=\"27\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-28\" title=\"28\">test_loss, test_accuracy <span class=\"op\">=<\/span> model.evaluate(test_images, test_labels)<\/a>\n+<a class=\"sourceLine\" id=\"cb37-29\" title=\"29\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-30\" title=\"30\"><span class=\"bu\">print<\/span>(test_loss, test_accuracy)<\/a>\n+<a class=\"sourceLine\" id=\"cb37-31\" title=\"31\"><\/a>\n+<a class=\"sourceLine\" id=\"cb37-32\" title=\"32\">model.save(<span class=\"st\">&quot;saved_mnist_model&quot;<\/span>)<\/a><\/code><\/pre><\/div>\n@@ -792,50 +782,50 @@\n-<div class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb38-1\"><a href=\"#cb38-1\"><\/a><\/span>\n-<span id=\"cb38-2\"><a href=\"#cb38-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.*;<\/span><\/span>\n-<span id=\"cb38-3\"><a href=\"#cb38-3\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb38-4\"><a href=\"#cb38-4\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess.*;<\/span><\/span>\n-<span id=\"cb38-5\"><a href=\"#cb38-5\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.*;<\/span><\/span>\n-<span id=\"cb38-6\"><a href=\"#cb38-6\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.tensorflow.c_api_h.*;<\/span><\/span>\n-<span id=\"cb38-7\"><a href=\"#cb38-7\"><\/a><\/span>\n-<span id=\"cb38-8\"><a href=\"#cb38-8\"><\/a><span class=\"co\">\/\/ simple program that loads saved model and prints basic info on operations in it<\/span><\/span>\n-<span id=\"cb38-9\"><a href=\"#cb38-9\"><\/a><\/span>\n-<span id=\"cb38-10\"><a href=\"#cb38-10\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> TensorflowLoadSavedModel {<\/span>\n-<span id=\"cb38-11\"><a href=\"#cb38-11\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span><span class=\"kw\">... <\/span>args) <span class=\"kw\">throws<\/span> <span class=\"bu\">Exception<\/span> {<\/span>\n-<span id=\"cb38-12\"><a href=\"#cb38-12\"><\/a>        <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;TensorFlow C library version: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_Version<\/span>()));<\/span>\n-<span id=\"cb38-13\"><a href=\"#cb38-13\"><\/a><\/span>\n-<span id=\"cb38-14\"><a href=\"#cb38-14\"><\/a>        <span class=\"kw\">if<\/span> (args.<span class=\"fu\">length<\/span> == <span class=\"dv\">0<\/span>) {<\/span>\n-<span id=\"cb38-15\"><a href=\"#cb38-15\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;java TensorflowLoadSavedModel &lt;saved model dir&gt;&quot;<\/span>);<\/span>\n-<span id=\"cb38-16\"><a href=\"#cb38-16\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(<span class=\"dv\">1<\/span>);<\/span>\n-<span id=\"cb38-17\"><a href=\"#cb38-17\"><\/a>        }<\/span>\n-<span id=\"cb38-18\"><a href=\"#cb38-18\"><\/a><\/span>\n-<span id=\"cb38-19\"><a href=\"#cb38-19\"><\/a>        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb38-20\"><a href=\"#cb38-20\"><\/a>            var graph = <span class=\"fu\">TF_NewGraph<\/span>();<\/span>\n-<span id=\"cb38-21\"><a href=\"#cb38-21\"><\/a>            var status = <span class=\"fu\">TF_NewStatus<\/span>();<\/span>\n-<span id=\"cb38-22\"><a href=\"#cb38-22\"><\/a>            var sessionOpts = <span class=\"fu\">TF_NewSessionOptions<\/span>();<\/span>\n-<span id=\"cb38-23\"><a href=\"#cb38-23\"><\/a><\/span>\n-<span id=\"cb38-24\"><a href=\"#cb38-24\"><\/a>            var savedModelDir = <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">0<\/span>], scope);<\/span>\n-<span id=\"cb38-25\"><a href=\"#cb38-25\"><\/a>            var tags = scope.<span class=\"fu\">allocate<\/span>(C_POINTER, <span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;serve&quot;<\/span>, scope));<\/span>\n-<span id=\"cb38-26\"><a href=\"#cb38-26\"><\/a>            var session = <span class=\"fu\">TF_LoadSessionFromSavedModel<\/span>(sessionOpts, NULL, savedModelDir, tags, <span class=\"dv\">1<\/span>, graph, NULL, status);<\/span>\n-<span id=\"cb38-27\"><a href=\"#cb38-27\"><\/a><\/span>\n-<span id=\"cb38-28\"><a href=\"#cb38-28\"><\/a>            <span class=\"kw\">if<\/span> (<span class=\"fu\">TF_GetCode<\/span>(status) != <span class=\"fu\">TF_OK<\/span>()) {<\/span>\n-<span id=\"cb38-29\"><a href=\"#cb38-29\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err.printf<\/span>(<span class=\"st\">&quot;cannot load session from saved model: <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>,<\/span>\n-<span id=\"cb38-30\"><a href=\"#cb38-30\"><\/a>                    <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_Message<\/span>(status)));<\/span>\n-<span id=\"cb38-31\"><a href=\"#cb38-31\"><\/a>            } <span class=\"kw\">else<\/span> {<\/span>\n-<span id=\"cb38-32\"><a href=\"#cb38-32\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;load session from saved model works!&quot;<\/span>);<\/span>\n-<span id=\"cb38-33\"><a href=\"#cb38-33\"><\/a>            }<\/span>\n-<span id=\"cb38-34\"><a href=\"#cb38-34\"><\/a><\/span>\n-<span id=\"cb38-35\"><a href=\"#cb38-35\"><\/a>            <span class=\"co\">\/\/ print operations<\/span><\/span>\n-<span id=\"cb38-36\"><a href=\"#cb38-36\"><\/a>            var size = scope.<span class=\"fu\">allocate<\/span>(C_LONGLONG);<\/span>\n-<span id=\"cb38-37\"><a href=\"#cb38-37\"><\/a>            var operation = NULL;<\/span>\n-<span id=\"cb38-38\"><a href=\"#cb38-38\"><\/a>            <span class=\"kw\">while<\/span> (!(operation = <span class=\"fu\">TF_GraphNextOperation<\/span>(graph, size)).<span class=\"fu\">equals<\/span>(NULL)) {<\/span>\n-<span id=\"cb38-39\"><a href=\"#cb38-39\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%s<\/span><span class=\"st\"> : <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>,<\/span>\n-<span id=\"cb38-40\"><a href=\"#cb38-40\"><\/a>                    <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_OperationName<\/span>(operation)),<\/span>\n-<span id=\"cb38-41\"><a href=\"#cb38-41\"><\/a>                    <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_OperationOpType<\/span>(operation)));<\/span>\n-<span id=\"cb38-42\"><a href=\"#cb38-42\"><\/a>            }<\/span>\n-<span id=\"cb38-43\"><a href=\"#cb38-43\"><\/a><\/span>\n-<span id=\"cb38-44\"><a href=\"#cb38-44\"><\/a>            <span class=\"fu\">TF_DeleteGraph<\/span>(graph);<\/span>\n-<span id=\"cb38-45\"><a href=\"#cb38-45\"><\/a>            <span class=\"fu\">TF_DeleteSession<\/span>(session, status);<\/span>\n-<span id=\"cb38-46\"><a href=\"#cb38-46\"><\/a>            <span class=\"fu\">TF_DeleteSessionOptions<\/span>(sessionOpts);<\/span>\n-<span id=\"cb38-47\"><a href=\"#cb38-47\"><\/a>            <span class=\"fu\">TF_DeleteStatus<\/span>(status);<\/span>\n-<span id=\"cb38-48\"><a href=\"#cb38-48\"><\/a>        }<\/span>\n-<span id=\"cb38-49\"><a href=\"#cb38-49\"><\/a>    }<\/span>\n-<span id=\"cb38-50\"><a href=\"#cb38-50\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb38-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb38-3\" title=\"3\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb38-4\" title=\"4\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb38-5\" title=\"5\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb38-6\" title=\"6\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.tensorflow.c_api_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb38-7\" title=\"7\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-8\" title=\"8\"><span class=\"co\">\/\/ simple program that loads saved model and prints basic info on operations in it<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb38-9\" title=\"9\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-10\" title=\"10\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> TensorflowLoadSavedModel {<\/a>\n+<a class=\"sourceLine\" id=\"cb38-11\" title=\"11\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span><span class=\"kw\">... <\/span>args) <span class=\"kw\">throws<\/span> <span class=\"bu\">Exception<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb38-12\" title=\"12\">        <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;TensorFlow C library version: &quot;<\/span> + <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_Version<\/span>()));<\/a>\n+<a class=\"sourceLine\" id=\"cb38-13\" title=\"13\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-14\" title=\"14\">        <span class=\"kw\">if<\/span> (args.<span class=\"fu\">length<\/span> == <span class=\"dv\">0<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb38-15\" title=\"15\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;java TensorflowLoadSavedModel &lt;saved model dir&gt;&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-16\" title=\"16\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(<span class=\"dv\">1<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-17\" title=\"17\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb38-18\" title=\"18\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-19\" title=\"19\">        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb38-20\" title=\"20\">            var graph = <span class=\"fu\">TF_NewGraph<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb38-21\" title=\"21\">            var status = <span class=\"fu\">TF_NewStatus<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb38-22\" title=\"22\">            var sessionOpts = <span class=\"fu\">TF_NewSessionOptions<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb38-23\" title=\"23\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-24\" title=\"24\">            var savedModelDir = <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">0<\/span>], scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-25\" title=\"25\">            var tags = scope.<span class=\"fu\">allocate<\/span>(C_POINTER, <span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;serve&quot;<\/span>, scope));<\/a>\n+<a class=\"sourceLine\" id=\"cb38-26\" title=\"26\">            var session = <span class=\"fu\">TF_LoadSessionFromSavedModel<\/span>(sessionOpts, NULL, savedModelDir, tags, <span class=\"dv\">1<\/span>, graph, NULL, status);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-27\" title=\"27\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-28\" title=\"28\">            <span class=\"kw\">if<\/span> (<span class=\"fu\">TF_GetCode<\/span>(status) != <span class=\"fu\">TF_OK<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb38-29\" title=\"29\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err.printf<\/span>(<span class=\"st\">&quot;cannot load session from saved model: <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb38-30\" title=\"30\">                    <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_Message<\/span>(status)));<\/a>\n+<a class=\"sourceLine\" id=\"cb38-31\" title=\"31\">            } <span class=\"kw\">else<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb38-32\" title=\"32\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;load session from saved model works!&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-33\" title=\"33\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb38-34\" title=\"34\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-35\" title=\"35\">            <span class=\"co\">\/\/ print operations<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb38-36\" title=\"36\">            var size = scope.<span class=\"fu\">allocate<\/span>(C_LONGLONG);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-37\" title=\"37\">            var operation = NULL;<\/a>\n+<a class=\"sourceLine\" id=\"cb38-38\" title=\"38\">            <span class=\"kw\">while<\/span> (!(operation = <span class=\"fu\">TF_GraphNextOperation<\/span>(graph, size)).<span class=\"fu\">equals<\/span>(NULL)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb38-39\" title=\"39\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%s<\/span><span class=\"st\"> : <\/span><span class=\"sc\">%s\\n<\/span><span class=\"st\">&quot;<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb38-40\" title=\"40\">                    <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_OperationName<\/span>(operation)),<\/a>\n+<a class=\"sourceLine\" id=\"cb38-41\" title=\"41\">                    <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">TF_OperationOpType<\/span>(operation)));<\/a>\n+<a class=\"sourceLine\" id=\"cb38-42\" title=\"42\">            }<\/a>\n+<a class=\"sourceLine\" id=\"cb38-43\" title=\"43\"><\/a>\n+<a class=\"sourceLine\" id=\"cb38-44\" title=\"44\">            <span class=\"fu\">TF_DeleteGraph<\/span>(graph);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-45\" title=\"45\">            <span class=\"fu\">TF_DeleteSession<\/span>(session, status);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-46\" title=\"46\">            <span class=\"fu\">TF_DeleteSessionOptions<\/span>(sessionOpts);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-47\" title=\"47\">            <span class=\"fu\">TF_DeleteStatus<\/span>(status);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-48\" title=\"48\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb38-49\" title=\"49\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb38-50\" title=\"50\">}<\/a><\/code><\/pre><\/div>\n@@ -843,3 +833,3 @@\n-<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb39-1\"><a href=\"#cb39-1\"><\/a><\/span>\n-<span id=\"cb39-2\"><a href=\"#cb39-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb39-3\"><a href=\"#cb39-3\"><\/a>   TensorflowLoadSavedModel.java saved_mnist_model<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb39-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb39-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb39-3\" title=\"3\">   TensorflowLoadSavedModel.java saved_mnist_model<\/a><\/code><\/pre><\/div>\n@@ -848,4 +838,4 @@\n-<div class=\"sourceCode\" id=\"cb40\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb40-1\"><a href=\"#cb40-1\"><\/a><\/span>\n-<span id=\"cb40-2\"><a href=\"#cb40-2\"><\/a><span class=\"ex\">jextract<\/span> -t org.unix \\<\/span>\n-<span id=\"cb40-3\"><a href=\"#cb40-3\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/span>\n-<span id=\"cb40-4\"><a href=\"#cb40-4\"><\/a>   \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/time.h<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb40\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb40-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb40-2\" title=\"2\"><span class=\"ex\">jextract<\/span> -t org.unix \\<\/a>\n+<a class=\"sourceLine\" id=\"cb40-3\" title=\"3\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\<\/a>\n+<a class=\"sourceLine\" id=\"cb40-4\" title=\"4\">   \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/time.h<\/a><\/code><\/pre><\/div>\n@@ -853,15 +843,15 @@\n-<div class=\"sourceCode\" id=\"cb41\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb41-1\"><a href=\"#cb41-1\"><\/a><\/span>\n-<span id=\"cb41-2\"><a href=\"#cb41-2\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.unix.time_h.*;<\/span><\/span>\n-<span id=\"cb41-3\"><a href=\"#cb41-3\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb41-4\"><a href=\"#cb41-4\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.*;<\/span><\/span>\n-<span id=\"cb41-5\"><a href=\"#cb41-5\"><\/a><\/span>\n-<span id=\"cb41-6\"><a href=\"#cb41-6\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> PanamaTime {<\/span>\n-<span id=\"cb41-7\"><a href=\"#cb41-7\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb41-8\"><a href=\"#cb41-8\"><\/a>        <span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb41-9\"><a href=\"#cb41-9\"><\/a>            var now = scope.<span class=\"fu\">allocate<\/span>(C_LONG, <span class=\"bu\">System<\/span>.<span class=\"fu\">currentTimeMillis<\/span>() \/ <span class=\"dv\">1000<\/span>);<\/span>\n-<span id=\"cb41-10\"><a href=\"#cb41-10\"><\/a>            MemorySegment time = tm.<span class=\"fu\">allocate<\/span>(scope);<\/span>\n-<span id=\"cb41-11\"><a href=\"#cb41-11\"><\/a>            <span class=\"fu\">localtime_r<\/span>(now, time);<\/span>\n-<span id=\"cb41-12\"><a href=\"#cb41-12\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">err.printf<\/span>(<span class=\"st\">&quot;Time = <\/span><span class=\"sc\">%d<\/span><span class=\"st\">:<\/span><span class=\"sc\">%d\\n<\/span><span class=\"st\">&quot;<\/span>, tm.<span class=\"fu\">tm_hour<\/span>$<span class=\"fu\">get<\/span>(time), tm.<span class=\"fu\">tm_min<\/span>$<span class=\"fu\">get<\/span>(time));<\/span>\n-<span id=\"cb41-13\"><a href=\"#cb41-13\"><\/a>        }<\/span>\n-<span id=\"cb41-14\"><a href=\"#cb41-14\"><\/a>    }<\/span>\n-<span id=\"cb41-15\"><a href=\"#cb41-15\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb41\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb41-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb41-2\" title=\"2\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.unix.time_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb41-3\" title=\"3\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb41-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb41-5\" title=\"5\"><\/a>\n+<a class=\"sourceLine\" id=\"cb41-6\" title=\"6\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> PanamaTime {<\/a>\n+<a class=\"sourceLine\" id=\"cb41-7\" title=\"7\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb41-8\" title=\"8\">        <span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb41-9\" title=\"9\">            var now = scope.<span class=\"fu\">allocate<\/span>(C_LONG, <span class=\"bu\">System<\/span>.<span class=\"fu\">currentTimeMillis<\/span>() \/ <span class=\"dv\">1000<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb41-10\" title=\"10\">            MemorySegment time = tm.<span class=\"fu\">allocate<\/span>(scope);<\/a>\n+<a class=\"sourceLine\" id=\"cb41-11\" title=\"11\">            <span class=\"fu\">localtime_r<\/span>(now, time);<\/a>\n+<a class=\"sourceLine\" id=\"cb41-12\" title=\"12\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">err.printf<\/span>(<span class=\"st\">&quot;Time = <\/span><span class=\"sc\">%d<\/span><span class=\"st\">:<\/span><span class=\"sc\">%d\\n<\/span><span class=\"st\">&quot;<\/span>, tm.<span class=\"fu\">tm_hour<\/span>$<span class=\"fu\">get<\/span>(time), tm.<span class=\"fu\">tm_min<\/span>$<span class=\"fu\">get<\/span>(time));<\/a>\n+<a class=\"sourceLine\" id=\"cb41-13\" title=\"13\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb41-14\" title=\"14\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb41-15\" title=\"15\">}<\/a><\/code><\/pre><\/div>\n@@ -869,2 +859,2 @@\n-<div class=\"sourceCode\" id=\"cb42\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb42-1\"><a href=\"#cb42-1\"><\/a><\/span>\n-<span id=\"cb42-2\"><a href=\"#cb42-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign PanamaTime.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb42\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb42-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb42-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign PanamaTime.java<\/a><\/code><\/pre><\/div>\n@@ -873,9 +863,9 @@\n-<div class=\"sourceCode\" id=\"cb43\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb43-1\"><a href=\"#cb43-1\"><\/a><\/span>\n-<span id=\"cb43-2\"><a href=\"#cb43-2\"><\/a><span class=\"co\"># LIBCLANG_HOME is the directory where you&#39;ve installed llvm 9.x or above<\/span><\/span>\n-<span id=\"cb43-3\"><a href=\"#cb43-3\"><\/a><\/span>\n-<span id=\"cb43-4\"><a href=\"#cb43-4\"><\/a><span class=\"ex\">jextract<\/span> --source -t org.llvm.clang -lclang \\<\/span>\n-<span id=\"cb43-5\"><a href=\"#cb43-5\"><\/a>  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/span>\n-<span id=\"cb43-6\"><a href=\"#cb43-6\"><\/a>  -I <span class=\"va\">${LIBCLANG_HOME}<\/span>\/include\/ \\<\/span>\n-<span id=\"cb43-7\"><a href=\"#cb43-7\"><\/a>  -I <span class=\"va\">${LIBCLANG_HOME}<\/span>\/include\/clang-c \\<\/span>\n-<span id=\"cb43-8\"><a href=\"#cb43-8\"><\/a>  <span class=\"va\">${LIBCLANG_HOME}<\/span>\/include\/clang-c\/Index.h<\/span>\n-<span id=\"cb43-9\"><a href=\"#cb43-9\"><\/a><span class=\"ex\">javac<\/span> --add-modules jdk.incubator.foreign org\/llvm\/clang\/*.java<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb43\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb43-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb43-2\" title=\"2\"><span class=\"co\"># LIBCLANG_HOME is the directory where you&#39;ve installed llvm 9.x or above<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb43-3\" title=\"3\"><\/a>\n+<a class=\"sourceLine\" id=\"cb43-4\" title=\"4\"><span class=\"ex\">jextract<\/span> --source -t org.llvm.clang -lclang \\<\/a>\n+<a class=\"sourceLine\" id=\"cb43-5\" title=\"5\">  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb43-6\" title=\"6\">  -I <span class=\"va\">${LIBCLANG_HOME}<\/span>\/include\/ \\<\/a>\n+<a class=\"sourceLine\" id=\"cb43-7\" title=\"7\">  -I <span class=\"va\">${LIBCLANG_HOME}<\/span>\/include\/clang-c \\<\/a>\n+<a class=\"sourceLine\" id=\"cb43-8\" title=\"8\">  <span class=\"va\">${LIBCLANG_HOME}<\/span>\/include\/clang-c\/Index.h<\/a>\n+<a class=\"sourceLine\" id=\"cb43-9\" title=\"9\"><span class=\"ex\">javac<\/span> --add-modules jdk.incubator.foreign org\/llvm\/clang\/*.java<\/a><\/code><\/pre><\/div>\n@@ -883,58 +873,58 @@\n-<div class=\"sourceCode\" id=\"cb44\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb44-1\"><a href=\"#cb44-1\"><\/a><\/span>\n-<span id=\"cb44-2\"><a href=\"#cb44-2\"><\/a><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.*;<\/span><\/span>\n-<span id=\"cb44-3\"><a href=\"#cb44-3\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/span>\n-<span id=\"cb44-4\"><a href=\"#cb44-4\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/span>\n-<span id=\"cb44-5\"><a href=\"#cb44-5\"><\/a><span class=\"kw\">import static<\/span><span class=\"im\"> org.llvm.clang.Index_h.*;<\/span><\/span>\n-<span id=\"cb44-6\"><a href=\"#cb44-6\"><\/a><\/span>\n-<span id=\"cb44-7\"><a href=\"#cb44-7\"><\/a><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> ASTPrinter {<\/span>\n-<span id=\"cb44-8\"><a href=\"#cb44-8\"><\/a>    <span class=\"kw\">private<\/span> <span class=\"dt\">static<\/span> <span class=\"bu\">String<\/span> <span class=\"fu\">asJavaString<\/span>(MemorySegment clangStr) {<\/span>\n-<span id=\"cb44-9\"><a href=\"#cb44-9\"><\/a>        <span class=\"bu\">String<\/span> str = <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">clang_getCString<\/span>(clangStr));<\/span>\n-<span id=\"cb44-10\"><a href=\"#cb44-10\"><\/a>        <span class=\"fu\">clang_disposeString<\/span>(clangStr);<\/span>\n-<span id=\"cb44-11\"><a href=\"#cb44-11\"><\/a>        <span class=\"kw\">return<\/span> str;<\/span>\n-<span id=\"cb44-12\"><a href=\"#cb44-12\"><\/a>    }<\/span>\n-<span id=\"cb44-13\"><a href=\"#cb44-13\"><\/a><\/span>\n-<span id=\"cb44-14\"><a href=\"#cb44-14\"><\/a>    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/span>\n-<span id=\"cb44-15\"><a href=\"#cb44-15\"><\/a>        <span class=\"kw\">if<\/span> (args.<span class=\"fu\">length<\/span> == <span class=\"dv\">0<\/span>) {<\/span>\n-<span id=\"cb44-16\"><a href=\"#cb44-16\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;java ASTPrinter &lt;C source or header&gt;&quot;<\/span>);<\/span>\n-<span id=\"cb44-17\"><a href=\"#cb44-17\"><\/a>            <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(<span class=\"dv\">1<\/span>);<\/span>\n-<span id=\"cb44-18\"><a href=\"#cb44-18\"><\/a>        }<\/span>\n-<span id=\"cb44-19\"><a href=\"#cb44-19\"><\/a><\/span>\n-<span id=\"cb44-20\"><a href=\"#cb44-20\"><\/a>        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/span>\n-<span id=\"cb44-21\"><a href=\"#cb44-21\"><\/a>            <span class=\"co\">\/\/ parse the C header\/source passed from the command line<\/span><\/span>\n-<span id=\"cb44-22\"><a href=\"#cb44-22\"><\/a>            var index = <span class=\"fu\">clang_createIndex<\/span>(<span class=\"dv\">0<\/span>, <span class=\"dv\">0<\/span>);<\/span>\n-<span id=\"cb44-23\"><a href=\"#cb44-23\"><\/a>            var tu = <span class=\"fu\">clang_parseTranslationUnit<\/span>(index, <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">0<\/span>], scope),<\/span>\n-<span id=\"cb44-24\"><a href=\"#cb44-24\"><\/a>                    NULL, <span class=\"dv\">0<\/span>, NULL, <span class=\"dv\">0<\/span>, <span class=\"fu\">CXTranslationUnit_None<\/span>());<\/span>\n-<span id=\"cb44-25\"><a href=\"#cb44-25\"><\/a>            <span class=\"co\">\/\/ array trick to update within lambda<\/span><\/span>\n-<span id=\"cb44-26\"><a href=\"#cb44-26\"><\/a>            var level = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">1<\/span>];<\/span>\n-<span id=\"cb44-27\"><a href=\"#cb44-27\"><\/a>            var visitor = <span class=\"kw\">new<\/span> MemorySegment[<span class=\"dv\">1<\/span>];<\/span>\n-<span id=\"cb44-28\"><a href=\"#cb44-28\"><\/a><\/span>\n-<span id=\"cb44-29\"><a href=\"#cb44-29\"><\/a>            <span class=\"co\">\/\/ clang Cursor visitor callback<\/span><\/span>\n-<span id=\"cb44-30\"><a href=\"#cb44-30\"><\/a>            visitor[<span class=\"dv\">0<\/span>] = clang_visitChildren$visitor.<span class=\"fu\">allocate<\/span>((cursor, parent, data) -&gt; {<\/span>\n-<span id=\"cb44-31\"><a href=\"#cb44-31\"><\/a>                var kind = <span class=\"fu\">clang_getCursorKind<\/span>(cursor);<\/span>\n-<span id=\"cb44-32\"><a href=\"#cb44-32\"><\/a>                var name = <span class=\"fu\">asJavaString<\/span>(<span class=\"fu\">clang_getCursorSpelling<\/span>(cursor));<\/span>\n-<span id=\"cb44-33\"><a href=\"#cb44-33\"><\/a>                var kindName = <span class=\"fu\">asJavaString<\/span>(<span class=\"fu\">clang_getCursorKindSpelling<\/span>(kind));<\/span>\n-<span id=\"cb44-34\"><a href=\"#cb44-34\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%s<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s<\/span><span class=\"st\">&quot;<\/span>, <span class=\"st\">&quot; &quot;<\/span>.<span class=\"fu\">repeat<\/span>(level[<span class=\"dv\">0<\/span>]), kindName, name);<\/span>\n-<span id=\"cb44-35\"><a href=\"#cb44-35\"><\/a>                var type = <span class=\"fu\">clang_getCursorType<\/span>(cursor);<\/span>\n-<span id=\"cb44-36\"><a href=\"#cb44-36\"><\/a>                <span class=\"kw\">if<\/span> (CXType.<span class=\"fu\">kind<\/span>$<span class=\"fu\">get<\/span>(type) != <span class=\"fu\">CXType_Invalid<\/span>()) {<\/span>\n-<span id=\"cb44-37\"><a href=\"#cb44-37\"><\/a>                    var typeName = <span class=\"fu\">asJavaString<\/span>(<span class=\"fu\">clang_getTypeSpelling<\/span>(type));<\/span>\n-<span id=\"cb44-38\"><a href=\"#cb44-38\"><\/a>                    <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot; &lt;<\/span><span class=\"sc\">%s<\/span><span class=\"st\">&gt;&quot;<\/span>, typeName);<\/span>\n-<span id=\"cb44-39\"><a href=\"#cb44-39\"><\/a>                }<\/span>\n-<span id=\"cb44-40\"><a href=\"#cb44-40\"><\/a>                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>();<\/span>\n-<span id=\"cb44-41\"><a href=\"#cb44-41\"><\/a><\/span>\n-<span id=\"cb44-42\"><a href=\"#cb44-42\"><\/a>                <span class=\"co\">\/\/ visit children<\/span><\/span>\n-<span id=\"cb44-43\"><a href=\"#cb44-43\"><\/a>                level[<span class=\"dv\">0<\/span>]++;<\/span>\n-<span id=\"cb44-44\"><a href=\"#cb44-44\"><\/a>                <span class=\"fu\">clang_visitChildren<\/span>(cursor, visitor[<span class=\"dv\">0<\/span>], NULL);<\/span>\n-<span id=\"cb44-45\"><a href=\"#cb44-45\"><\/a>                level[<span class=\"dv\">0<\/span>]--;<\/span>\n-<span id=\"cb44-46\"><a href=\"#cb44-46\"><\/a><\/span>\n-<span id=\"cb44-47\"><a href=\"#cb44-47\"><\/a>                <span class=\"kw\">return<\/span> <span class=\"fu\">CXChildVisit_Continue<\/span>();<\/span>\n-<span id=\"cb44-48\"><a href=\"#cb44-48\"><\/a>            });<\/span>\n-<span id=\"cb44-49\"><a href=\"#cb44-49\"><\/a><\/span>\n-<span id=\"cb44-50\"><a href=\"#cb44-50\"><\/a>            <span class=\"co\">\/\/ get the AST root and visit it<\/span><\/span>\n-<span id=\"cb44-51\"><a href=\"#cb44-51\"><\/a>            var root = <span class=\"fu\">clang_getTranslationUnitCursor<\/span>(tu);<\/span>\n-<span id=\"cb44-52\"><a href=\"#cb44-52\"><\/a>            <span class=\"fu\">clang_visitChildren<\/span>(root, visitor[<span class=\"dv\">0<\/span>], NULL);<\/span>\n-<span id=\"cb44-53\"><a href=\"#cb44-53\"><\/a><\/span>\n-<span id=\"cb44-54\"><a href=\"#cb44-54\"><\/a>            <span class=\"fu\">clang_disposeTranslationUnit<\/span>(tu);<\/span>\n-<span id=\"cb44-55\"><a href=\"#cb44-55\"><\/a>            <span class=\"fu\">clang_disposeIndex<\/span>(index);<\/span>\n-<span id=\"cb44-56\"><a href=\"#cb44-56\"><\/a>        }<\/span>\n-<span id=\"cb44-57\"><a href=\"#cb44-57\"><\/a>    }<\/span>\n-<span id=\"cb44-58\"><a href=\"#cb44-58\"><\/a>}<\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb44\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb44-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-3\" title=\"3\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-4\" title=\"4\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress.NULL;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-5\" title=\"5\"><span class=\"kw\">import static<\/span><span class=\"im\"> org.llvm.clang.Index_h.*;<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-6\" title=\"6\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-7\" title=\"7\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> ASTPrinter {<\/a>\n+<a class=\"sourceLine\" id=\"cb44-8\" title=\"8\">    <span class=\"kw\">private<\/span> <span class=\"dt\">static<\/span> <span class=\"bu\">String<\/span> <span class=\"fu\">asJavaString<\/span>(MemorySegment clangStr) {<\/a>\n+<a class=\"sourceLine\" id=\"cb44-9\" title=\"9\">        <span class=\"bu\">String<\/span> str = <span class=\"fu\">toJavaStringRestricted<\/span>(<span class=\"fu\">clang_getCString<\/span>(clangStr));<\/a>\n+<a class=\"sourceLine\" id=\"cb44-10\" title=\"10\">        <span class=\"fu\">clang_disposeString<\/span>(clangStr);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-11\" title=\"11\">        <span class=\"kw\">return<\/span> str;<\/a>\n+<a class=\"sourceLine\" id=\"cb44-12\" title=\"12\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb44-13\" title=\"13\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-14\" title=\"14\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) {<\/a>\n+<a class=\"sourceLine\" id=\"cb44-15\" title=\"15\">        <span class=\"kw\">if<\/span> (args.<span class=\"fu\">length<\/span> == <span class=\"dv\">0<\/span>) {<\/a>\n+<a class=\"sourceLine\" id=\"cb44-16\" title=\"16\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">err<\/span>.<span class=\"fu\">println<\/span>(<span class=\"st\">&quot;java ASTPrinter &lt;C source or header&gt;&quot;<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-17\" title=\"17\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">exit<\/span>(<span class=\"dv\">1<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-18\" title=\"18\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb44-19\" title=\"19\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-20\" title=\"20\">        <span class=\"kw\">try<\/span> (var scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb44-21\" title=\"21\">            <span class=\"co\">\/\/ parse the C header\/source passed from the command line<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-22\" title=\"22\">            var index = <span class=\"fu\">clang_createIndex<\/span>(<span class=\"dv\">0<\/span>, <span class=\"dv\">0<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-23\" title=\"23\">            var tu = <span class=\"fu\">clang_parseTranslationUnit<\/span>(index, <span class=\"fu\">toCString<\/span>(args[<span class=\"dv\">0<\/span>], scope),<\/a>\n+<a class=\"sourceLine\" id=\"cb44-24\" title=\"24\">                    NULL, <span class=\"dv\">0<\/span>, NULL, <span class=\"dv\">0<\/span>, <span class=\"fu\">CXTranslationUnit_None<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb44-25\" title=\"25\">            <span class=\"co\">\/\/ array trick to update within lambda<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-26\" title=\"26\">            var level = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">1<\/span>];<\/a>\n+<a class=\"sourceLine\" id=\"cb44-27\" title=\"27\">            var visitor = <span class=\"kw\">new<\/span> MemorySegment[<span class=\"dv\">1<\/span>];<\/a>\n+<a class=\"sourceLine\" id=\"cb44-28\" title=\"28\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-29\" title=\"29\">            <span class=\"co\">\/\/ clang Cursor visitor callback<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-30\" title=\"30\">            visitor[<span class=\"dv\">0<\/span>] = clang_visitChildren$visitor.<span class=\"fu\">allocate<\/span>((cursor, parent, data) -&gt; {<\/a>\n+<a class=\"sourceLine\" id=\"cb44-31\" title=\"31\">                var kind = <span class=\"fu\">clang_getCursorKind<\/span>(cursor);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-32\" title=\"32\">                var name = <span class=\"fu\">asJavaString<\/span>(<span class=\"fu\">clang_getCursorSpelling<\/span>(cursor));<\/a>\n+<a class=\"sourceLine\" id=\"cb44-33\" title=\"33\">                var kindName = <span class=\"fu\">asJavaString<\/span>(<span class=\"fu\">clang_getCursorKindSpelling<\/span>(kind));<\/a>\n+<a class=\"sourceLine\" id=\"cb44-34\" title=\"34\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot;<\/span><span class=\"sc\">%s<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s<\/span><span class=\"st\"> <\/span><span class=\"sc\">%s<\/span><span class=\"st\">&quot;<\/span>, <span class=\"st\">&quot; &quot;<\/span>.<span class=\"fu\">repeat<\/span>(level[<span class=\"dv\">0<\/span>]), kindName, name);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-35\" title=\"35\">                var type = <span class=\"fu\">clang_getCursorType<\/span>(cursor);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-36\" title=\"36\">                <span class=\"kw\">if<\/span> (CXType.<span class=\"fu\">kind<\/span>$<span class=\"fu\">get<\/span>(type) != <span class=\"fu\">CXType_Invalid<\/span>()) {<\/a>\n+<a class=\"sourceLine\" id=\"cb44-37\" title=\"37\">                    var typeName = <span class=\"fu\">asJavaString<\/span>(<span class=\"fu\">clang_getTypeSpelling<\/span>(type));<\/a>\n+<a class=\"sourceLine\" id=\"cb44-38\" title=\"38\">                    <span class=\"bu\">System<\/span>.<span class=\"fu\">out.printf<\/span>(<span class=\"st\">&quot; &lt;<\/span><span class=\"sc\">%s<\/span><span class=\"st\">&gt;&quot;<\/span>, typeName);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-39\" title=\"39\">                }<\/a>\n+<a class=\"sourceLine\" id=\"cb44-40\" title=\"40\">                <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb44-41\" title=\"41\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-42\" title=\"42\">                <span class=\"co\">\/\/ visit children<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-43\" title=\"43\">                level[<span class=\"dv\">0<\/span>]++;<\/a>\n+<a class=\"sourceLine\" id=\"cb44-44\" title=\"44\">                <span class=\"fu\">clang_visitChildren<\/span>(cursor, visitor[<span class=\"dv\">0<\/span>], NULL);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-45\" title=\"45\">                level[<span class=\"dv\">0<\/span>]--;<\/a>\n+<a class=\"sourceLine\" id=\"cb44-46\" title=\"46\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-47\" title=\"47\">                <span class=\"kw\">return<\/span> <span class=\"fu\">CXChildVisit_Continue<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb44-48\" title=\"48\">            });<\/a>\n+<a class=\"sourceLine\" id=\"cb44-49\" title=\"49\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-50\" title=\"50\">            <span class=\"co\">\/\/ get the AST root and visit it<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb44-51\" title=\"51\">            var root = <span class=\"fu\">clang_getTranslationUnitCursor<\/span>(tu);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-52\" title=\"52\">            <span class=\"fu\">clang_visitChildren<\/span>(root, visitor[<span class=\"dv\">0<\/span>], NULL);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-53\" title=\"53\"><\/a>\n+<a class=\"sourceLine\" id=\"cb44-54\" title=\"54\">            <span class=\"fu\">clang_disposeTranslationUnit<\/span>(tu);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-55\" title=\"55\">            <span class=\"fu\">clang_disposeIndex<\/span>(index);<\/a>\n+<a class=\"sourceLine\" id=\"cb44-56\" title=\"56\">        }<\/a>\n+<a class=\"sourceLine\" id=\"cb44-57\" title=\"57\">    }<\/a>\n+<a class=\"sourceLine\" id=\"cb44-58\" title=\"58\">}<\/a><\/code><\/pre><\/div>\n@@ -942,3 +932,3 @@\n-<div class=\"sourceCode\" id=\"cb45\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb45-1\"><a href=\"#cb45-1\"><\/a><\/span>\n-<span id=\"cb45-2\"><a href=\"#cb45-2\"><\/a><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/span>\n-<span id=\"cb45-3\"><a href=\"#cb45-3\"><\/a>    ASTPrinter.java <span class=\"va\">$*<\/span><\/span><\/code><\/pre><\/div>\n+<div class=\"sourceCode\" id=\"cb45\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><a class=\"sourceLine\" id=\"cb45-1\" title=\"1\"><\/a>\n+<a class=\"sourceLine\" id=\"cb45-2\" title=\"2\"><span class=\"ex\">java<\/span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \\<\/a>\n+<a class=\"sourceLine\" id=\"cb45-3\" title=\"3\">    ASTPrinter.java <span class=\"va\">$*<\/span><\/a><\/code><\/pre><\/div>\n","filename":"doc\/panama_jextract.html","additions":774,"deletions":784,"binary":false,"changes":1558,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-% Using Panama \"foreign\" JDK\n-\n@@ -5,1 +3,8 @@\n-# Using Panama \"foreign-jextract\" JDK\n+# Using the `jextract` tool\n+\n+`jextract` is a simple - but convenient - tool which generates a Java API from one or more native C headers. The tool can be obtained by building the [foreign-jextract](https:\/\/github.com\/openjdk\/panama-foreign) branch of Panama foreign repository.\n+\n+Interacting with the `jextract` tool usually involves two steps:\n+\n+1. Use the `jextract` tool to generate a java interface for some C header files\n+2. Write a Java program which invokes the wrapper API points generated by `jextract`\n@@ -7,1 +12,1 @@\n-You can build \"foreign-jextract\" branch of panama repo [https:\/\/github.com\/openjdk\/panama-foreign](https:\/\/github.com\/openjdk\/panama-foreign)\n+The `jextract` tool provides some basic options in order to control how the extraction process works; these are listed below:\n@@ -9,1 +14,7 @@\n-Using foreign function call in Java involves the following two steps:\n+* `-C <String>` - specify arguments to be passed to the underlying Clang parser\n+* `-I <String>` - specify include files path\n+* `-l <String>` - specify a library (name or full absolute path) which should be linked when the generated API is loaded\n+* `-d <String>` - specify where to place generated files\n+* `-t <String>`  specify the target package for the generated classes\n+* `--filter <String>` - simple string-based filtering mechanism; only symbols from headers whose absolute path contains the specified string will be included in the generated API\n+* `--source` - generate java sources instead of classfiles\n@@ -11,2 +22,1 @@\n-1. Use **jextract** tool to generate java interface for your C header file(s)\n-2. Invoke C functions via the jextracted Java interface\n+The remainder of this documents shows some basic usage examples of the `jextract` tool.\n","filename":"doc\/panama_jextract.md","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,283 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<head>\n+  <meta charset=\"utf-8\" \/>\n+  <meta name=\"generator\" content=\"pandoc\" \/>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n+  <title>panama_memaccess<\/title>\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <style type=\"text\/css\">\n+a.sourceLine { display: inline-block; line-height: 1.25; }\n+a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }\n+a.sourceLine:empty { height: 1.2em; }\n+.sourceCode { overflow: visible; }\n+code.sourceCode { white-space: pre; position: relative; }\n+div.sourceCode { margin: 1em 0; }\n+pre.sourceCode { margin: 0; }\n+@media screen {\n+div.sourceCode { overflow: auto; }\n+}\n+@media print {\n+code.sourceCode { white-space: pre-wrap; }\n+a.sourceLine { text-indent: -1em; padding-left: 1em; }\n+}\n+pre.numberSource a.sourceLine\n+  { position: relative; left: -4em; }\n+pre.numberSource a.sourceLine::before\n+  { content: attr(title);\n+    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n+    border: none; pointer-events: all; display: inline-block;\n+    -webkit-touch-callout: none; -webkit-user-select: none;\n+    -khtml-user-select: none; -moz-user-select: none;\n+    -ms-user-select: none; user-select: none;\n+    padding: 0 4px; width: 4em;\n+    color: #aaaaaa;\n+  }\n+pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n+div.sourceCode\n+  {  }\n+@media screen {\n+a.sourceLine::before { text-decoration: underline; }\n+}\n+code span.al { color: #ff0000; font-weight: bold; } \/* Alert *\/\n+code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Annotation *\/\n+code span.at { color: #7d9029; } \/* Attribute *\/\n+code span.bn { color: #40a070; } \/* BaseN *\/\n+code span.bu { } \/* BuiltIn *\/\n+code span.cf { color: #007020; font-weight: bold; } \/* ControlFlow *\/\n+code span.ch { color: #4070a0; } \/* Char *\/\n+code span.cn { color: #880000; } \/* Constant *\/\n+code span.co { color: #60a0b0; font-style: italic; } \/* Comment *\/\n+code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } \/* CommentVar *\/\n+code span.do { color: #ba2121; font-style: italic; } \/* Documentation *\/\n+code span.dt { color: #902000; } \/* DataType *\/\n+code span.dv { color: #40a070; } \/* DecVal *\/\n+code span.er { color: #ff0000; font-weight: bold; } \/* Error *\/\n+code span.ex { } \/* Extension *\/\n+code span.fl { color: #40a070; } \/* Float *\/\n+code span.fu { color: #06287e; } \/* Function *\/\n+code span.im { } \/* Import *\/\n+code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Information *\/\n+code span.kw { color: #007020; font-weight: bold; } \/* Keyword *\/\n+code span.op { color: #666666; } \/* Operator *\/\n+code span.ot { color: #007020; } \/* Other *\/\n+code span.pp { color: #bc7a00; } \/* Preprocessor *\/\n+code span.sc { color: #4070a0; } \/* SpecialChar *\/\n+code span.ss { color: #bb6688; } \/* SpecialString *\/\n+code span.st { color: #4070a0; } \/* String *\/\n+code span.va { color: #19177c; } \/* Variable *\/\n+code span.vs { color: #4070a0; } \/* VerbatimString *\/\n+code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Warning *\/\n+  <\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+<\/head>\n+<body>\n+<nav id=\"TOC\">\n+<ul>\n+<li><a href=\"#state-of-foreign-memory-support\">State of foreign memory support<\/a><ul>\n+<li><a href=\"#segments\">Segments<\/a><\/li>\n+<li><a href=\"#memory-access-handles\">Memory access handles<\/a><\/li>\n+<li><a href=\"#safety\">Safety<\/a><\/li>\n+<li><a href=\"#layouts\">Layouts<\/a><\/li>\n+<li><a href=\"#var-handle-combinators\">Var handle combinators<\/a><\/li>\n+<li><a href=\"#segment-accessors\">Segment accessors<\/a><\/li>\n+<li><a href=\"#interoperability\">Interoperability<\/a><\/li>\n+<li><a href=\"#unsafe-segments\">Unsafe segments<\/a><\/li>\n+<li><a href=\"#confinement\">Confinement<\/a><\/li>\n+<li><a href=\"#implicit-deallocation\">Implicit deallocation<\/a><\/li>\n+<\/ul><\/li>\n+<\/ul>\n+<\/nav>\n+<h2 id=\"state-of-foreign-memory-support\">State of foreign memory support<\/h2>\n+<p><strong>September 2020<\/strong><\/p>\n+<ul>\n+<li>Updated section on restricted segments reflecting new, simpler API<\/li>\n+<li>Revamped section on confinement to add description of shared segments<\/li>\n+<li>Added section on implicit deallocation<\/li>\n+<\/ul>\n+<p><strong>Maurizio Cimadamore<\/strong><\/p>\n+<p>A crucial part of any native interop story lies in the ability of accessing off-heap memory in an efficient fashion. Panama achieves this goal through the so called Foreign Memory Access API. This API has been made available as an incubating API in Java <a href=\"https:\/\/openjdk.java.net\/jeps\/370\">14<\/a> ad <a href=\"https:\/\/openjdk.java.net\/jeps\/383\">15<\/a>, and is, to date, the most mature part of the Panama interop story.<\/p>\n+<h3 id=\"segments\">Segments<\/h3>\n+<p>Memory segments are abstractions which can be used to model memory regions, located either on- or off- the Java heap. Segments can be allocated from native memory (e.g. like a <code>malloc<\/code>), or can be wrapped around existing memory sources (e.g. a Java array or a <code>ByteBuffer<\/code>). Memory segments provide <em>strong<\/em> guarantees which make memory dereference operation <em>safe<\/em>. More specifically, each segment provides:<\/p>\n+<ul>\n+<li><em>spatial bounds<\/em> - that is, a segment has a base address and a size, and accessing a segment outside those boundaries is forbidden<\/li>\n+<li><em>temporal bounds<\/em> - that is, a segment has a <em>state<\/em> - meaning that it can be used and then <em>closed<\/em> when the memory backing the segment is no longer needed (note, this might trigger deallocation of said memory)<\/li>\n+<li><em>thread-confinement<\/em> - that is, a segment is a view over a memory region that is <em>owned<\/em> by the thread which created it. Attempting to dereference or close a segment outside the confinement thread is forbidden (this is crucial to avoid access vs. close races in multi-threaded scenario)<\/li>\n+<\/ul>\n+<p>For instance, the following snippet allocates 100 bytes off-heap:<\/p>\n+<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\"><span class=\"kw\">try<\/span> (MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">100<\/span>)) {<\/a>\n+<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\">    ...<\/a>\n+<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\">} <span class=\"co\">\/\/ frees memory<\/span><\/a><\/code><\/pre><\/div>\n+<p>Since segments are <code>AutoCloseable<\/code> they can be used inside a <em>try-with-resources<\/em> statement, which helps ensure that memory will be released when the segment is no longer needed.<\/p>\n+<p>Memory segments support <em>slicing<\/em> — that is, given a segment, it is possible to create a new segment whose spatial bounds are stricter than that of the original segment:<\/p>\n+<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb2-1\" title=\"1\">MemorySegment segment = MemorySement.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb2-2\" title=\"2\">MemorySegment slice = segment.<span class=\"fu\">asSlice<\/span>(<span class=\"dv\">4<\/span>, <span class=\"dv\">4<\/span>);<\/a><\/code><\/pre><\/div>\n+<p>The above code creates a slice that starts at offset 4 and has a length of 4 bytes. Slices have the <em>same<\/em> temporal bounds as the parent segment - this means that when the parent segment is closed, all the slices derived from it are also closed. The opposite is also true, closing a slice closes the parent segment (and all the other slices derived from it). If a library wants to share a slice, but prevent a client from closing it (could be useful e.g. when implementing a slab allocator), the library could prevent a client from closing the slice by creating a <em>non-closeable<\/em> view:<\/p>\n+<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb3-1\" title=\"1\">MemorySegment sharedSlice = slice.<span class=\"fu\">withAccessModes<\/span>(ALL_ACCESS &amp; ~CLOSE);<\/a><\/code><\/pre><\/div>\n+<p>Any attempt to call <code>close<\/code> on <code>sharedSlice<\/code> will be met with an exception. Memory segments support various access modes (including those for read\/write access) which can be used to constrain the set of operations available to clients.<\/p>\n+<h3 id=\"memory-access-handles\">Memory access handles<\/h3>\n+<p>Dereferencing memory associated with segments is made possible by using <em>memory access var handles<\/em>. A memory access var handle is a special kind of var handle which takes a memory segment access coordinate, together with a byte offset — the offset, relative to the segment's base address at which the dereference operation should occur. A memory access var handle can be obtained as follows:<\/p>\n+<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\">VarHandle intHandle = MemoryHandles.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"bu\">ByteOrder<\/span>.<span class=\"fu\">nativeOrder<\/span>())    <\/a><\/code><\/pre><\/div>\n+<p>To create a dereference handle we have to specify a carrier type — the type we want to use e.g. to extract values from memory, as well as to whether any byte swapping should be applied when contents are read from or stored to memory. Additionally, the user can supply an extra alignment parameter (not shown here) — this can be useful to impose additional constraints on how memory dereferences should occur; for instance, a client might want to prevent access to misaligned 32 bit values.<\/p>\n+<p>For instance, to read 10 int values from a segment, we can write the following code:<\/p>\n+<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb5-1\" title=\"1\">MemorySegment segment = ...<\/a>\n+<a class=\"sourceLine\" id=\"cb5-2\" title=\"2\"><span class=\"dt\">int<\/span>[] values = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">10<\/span>];<\/a>\n+<a class=\"sourceLine\" id=\"cb5-3\" title=\"3\"><span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span> ; i &lt; values.<span class=\"fu\">length<\/span> ; i++) {<\/a>\n+<a class=\"sourceLine\" id=\"cb5-4\" title=\"4\">    values[i] = (<span class=\"dt\">int<\/span>)intHandle.<span class=\"fu\">get<\/span>(segment, (<span class=\"dt\">long<\/span>)i * <span class=\"dv\">4<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb5-5\" title=\"5\">}<\/a><\/code><\/pre><\/div>\n+<p>Memory access var handles (as any other var handle) are <em>strongly<\/em> typed; and to get maximum efficiency, it is generally necessary to introduce casts to make sure that the access coordinates match the expected types — in this case we have to cast <code>i * 4<\/code> into a long; similarly, since the signature polymorphic method <code>VarHandle::get<\/code> notionally returns <code>Object<\/code> a cast is necessary to force the right return type the var handle operation.<\/p>\n+<p>Note that, since the offset of the dereference operation is expressed in bytes, we have to manually compute the starting offset, by multiplying the logical index <code>i<\/code> by <code>4<\/code> — the size (in bytes) of a Java int value; this is not dissimilar to what happens with the <code>ByteBuffer<\/code> absolute get\/put methods. We shall see later how memory layouts help us achieving higher level, structured access.<\/p>\n+<h3 id=\"safety\">Safety<\/h3>\n+<p>The memory access API provides basic safety guarantees for memory dereference operations. More specifically, dereferencing memory should either succeed, or result in a runtime exception - but, crucially, should never result in a VM crash, or, more subtly, in memory corruption occurring <em>outside<\/em> the region of memory associated with a memory segment.<\/p>\n+<p>To enforce this, strong spatial and temporal checks are enforced upon every access. Consider the following code:<\/p>\n+<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb6-1\" title=\"1\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb6-2\" title=\"2\">intHandle.<span class=\"fu\">get<\/span>(segment, <span class=\"dv\">8<\/span>); <span class=\"co\">\/\/throws ISE<\/span><\/a><\/code><\/pre><\/div>\n+<p>The above code leads to a runtime exception, as we trying to access memory outside the segment's bounds — the access operation starts at offset 8 (which is within bounds), but ends at offset 11 (which is outside bounds).<\/p>\n+<p>Similarly, attempting to access an already closed segment leads to a failure:<\/p>\n+<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb7-1\" title=\"1\">segment.<span class=\"fu\">close<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb7-2\" title=\"2\">intHandle.<span class=\"fu\">get<\/span>(segment, <span class=\"dv\">0<\/span>); <span class=\"co\">\/\/throws ISE<\/span><\/a><\/code><\/pre><\/div>\n+<p>This time, the access occurs within the spatial bounds implied by the segment, but when access occurs, the segment has already been <em>closed<\/em>, so the access operation fails. This is crucial to guarantee safety: since memory segments ensure <em>deterministic deallocation<\/em>, the above code might end up attempting to dereference already freed memory.<\/p>\n+<p>On top of basic spatial and temporal bound guarantees, memory segments also enforce thread-confinement guarantees, which will be discussed in a later <a href=\"#Confinement\">section<\/a>. Note that, while these checks might seem expensive when considered in isolation, the Foreign Memory Access API is designed and implemented such that the JIT compiler can hoist most, if not all, such checks outside hot loops. Hence, memory access efficiency is not negatively impacted by the safety requirements of the API.<\/p>\n+<h3 id=\"layouts\">Layouts<\/h3>\n+<p>Expressing byte offsets (as in the <a href=\"#memory-access-handles\">above<\/a> example) can lead to code that is hard to read, and very fragile — as memory layout invariants are captured, implicitly, in the constants used to scale offsets. To address this issue, we add a <em>memory layout<\/em> API which allows clients to define memory layouts <em>programmatically<\/em>. For instance, the layout of the array used in the above example can be expressed using the following code:<\/p>\n+<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb8-1\" title=\"1\">MemoryLayout intArray = MemoryLayout.<span class=\"fu\">ofSequence<\/span>(<span class=\"dv\">10<\/span>, MemoryLayout.<span class=\"fu\">ofValueBits<\/span>(<span class=\"dv\">32<\/span>));<\/a><\/code><\/pre><\/div>\n+<p>That is, our layout is a repetition of 10 elements whose size is 32 bit each. The advantage of defining a memory layout upfront, using an API, is that we can then query on the layout — for instance we can compute the offset of the 3rd element of the array:<\/p>\n+<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb9-1\" title=\"1\"><span class=\"dt\">long<\/span> element3 = intArray.<span class=\"fu\">byteOffset<\/span>(PathElement.<span class=\"fu\">sequenceElement<\/span>(<span class=\"dv\">3<\/span>)); <span class=\"co\">\/\/ 12<\/span><\/a><\/code><\/pre><\/div>\n+<p>To specify which nested layout element should be used for the offset calculation we use a so called <em>layout path<\/em> - that is, a selection expression that navigates the layout, from the <em>root<\/em> layout, down to the leaf layout we wish to select (in this case the 3rd layout element in the sequence).<\/p>\n+<p>Layouts can also be used to obtain memory access var handles; so we can rewrite the above example as follows:<\/p>\n+<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb10-1\" title=\"1\">MemorySegment segment = ...<\/a>\n+<a class=\"sourceLine\" id=\"cb10-2\" title=\"2\"><span class=\"dt\">int<\/span>[] values = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">10<\/span>];<\/a>\n+<a class=\"sourceLine\" id=\"cb10-3\" title=\"3\">VarHandle elemHandle = intArray.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, PathElement.<span class=\"fu\">sequenceElement<\/span>());<\/a>\n+<a class=\"sourceLine\" id=\"cb10-4\" title=\"4\"><span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span> ; i &lt; values.<span class=\"fu\">length<\/span> ; i++) {<\/a>\n+<a class=\"sourceLine\" id=\"cb10-5\" title=\"5\">    values[i] = (<span class=\"dt\">int<\/span>)elemHandle.<span class=\"fu\">get<\/span>(segment, (<span class=\"dt\">long<\/span>)i);<\/a>\n+<a class=\"sourceLine\" id=\"cb10-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n+<p>In the above, <code>elemHandle<\/code> is a var handle whose type is <code>int<\/code> , which takes two access coordinates:<\/p>\n+<ol type=\"1\">\n+<li>a <code>MemorySegment<\/code> instance; the segment whose memory should be dereferenced<\/li>\n+<li>a <em>logical<\/em> index, which is used to select the element of the sequence we want to access<\/li>\n+<\/ol>\n+<p>In other words, manual offset computation is no longer needed — offsets and strides can in fact be derived from the layout object.<\/p>\n+<p>Memory layouts shine when structured access is needed — consider the following C declaration:<\/p>\n+<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\"><span class=\"kw\">typedef<\/span> <span class=\"kw\">struct<\/span> {<\/a>\n+<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\">    <span class=\"dt\">char<\/span> kind;<\/a>\n+<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">    <span class=\"dt\">int<\/span> value;<\/a>\n+<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\">} TaggedValues[<span class=\"dv\">5<\/span>];<\/a><\/code><\/pre><\/div>\n+<p>The above C declaration can be modeled using the layout below:<\/p>\n+<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><a class=\"sourceLine\" id=\"cb12-1\" title=\"1\">SequenceLayout taggedValues <span class=\"op\">=<\/span> <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofSequence<\/span>(<span class=\"dv\">5<\/span><span class=\"op\">,<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb12-2\" title=\"2\">    <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofStruct<\/span>(<\/a>\n+<a class=\"sourceLine\" id=\"cb12-3\" title=\"3\">        <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofValueBits<\/span>(<span class=\"dv\">8<\/span><span class=\"op\">,<\/span> <span class=\"va\">ByteOrder<\/span>.<span class=\"at\">nativeOrder<\/span>()).<span class=\"at\">withName<\/span>(<span class=\"st\">&quot;kind&quot;<\/span>)<span class=\"op\">,<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb12-4\" title=\"4\">        <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofPaddingBits<\/span>(<span class=\"dv\">24<\/span>)<span class=\"op\">,<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb12-5\" title=\"5\">        <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofValueBits<\/span>(<span class=\"dv\">32<\/span><span class=\"op\">,<\/span> <span class=\"va\">ByteOrder<\/span>.<span class=\"at\">nativeOrder<\/span>()).<span class=\"at\">withName<\/span>(<span class=\"st\">&quot;value&quot;<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb12-6\" title=\"6\">    )<\/a>\n+<a class=\"sourceLine\" id=\"cb12-7\" title=\"7\">).<span class=\"at\">withName<\/span>(<span class=\"st\">&quot;TaggedValues&quot;<\/span>)<span class=\"op\">;<\/span><\/a><\/code><\/pre><\/div>\n+<p>Here we assume that we need to insert some padding after the <code>kind<\/code> field to honor the alignment requirements of the <code>value<\/code> field <a href=\"#1\"><sup>1<\/sup><\/a>. Now, if we had to access the <code>value<\/code> field of all the elements of the array using manual offset computation, the code would quickly become pretty hard to read — on each iteration we would have to remember that the stride of the array is 8 bytes and that the offset of the <code>value<\/code> field relative to the <code>TaggedValue<\/code> struct is 4 bytes. This gives us an access expression like <code>(i * 8) + 4<\/code>, where <code>i<\/code> is the index of the element whose <code>value<\/code> field needs to be accessed.<\/p>\n+<p>With memory layouts, we can simply compute, once and for all, the memory access var handle to access the <code>value<\/code> field inside the sequence, as follows:<\/p>\n+<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb13-1\" title=\"1\">VarHandle valuesHandle = taggedValues.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>,<\/a>\n+<a class=\"sourceLine\" id=\"cb13-2\" title=\"2\">                                               PathElement.<span class=\"fu\">sequenceElement<\/span>(),<\/a>\n+<a class=\"sourceLine\" id=\"cb13-3\" title=\"3\">                                               PathElement.<span class=\"fu\">groupElement<\/span>(<span class=\"st\">&quot;value&quot;<\/span>));<\/a><\/code><\/pre><\/div>\n+<p>When using this var handle, no manual offset computation will be required: the resulting <code>valuesHandle<\/code> will feature an additional <code>long<\/code> coordinate which can be used to select the desired <code>value<\/code> field from the sequence.<\/p>\n+<h3 id=\"var-handle-combinators\">Var handle combinators<\/h3>\n+<p>The attentive reader might have noted how rich the var handles returned by the layout API are, compared to the simple memory access var handle we have seen at play <a href=\"#memory-access-handles\">here<\/a>. How do we go from a simple access var handle that takes a byte offset to a var handle that can dereference a complex layout path? The answer is, by using var handle <em>combinators<\/em>. Developers familiar with the method handle API know how simpler method handles can be combined into more complex ones using the various combinator methods in the <code>MethodHandles<\/code> API. These methods allow, for instance, to insert (or bind) arguments into a target method handle, filter return values, permute arguments and much more.<\/p>\n+<p>Sadly, none of these features are available when working with var handles. The Foreign Memory Access API rectifies this, by adding a rich set of var handle combinators in the <code>MemoryHandles<\/code> class; with these tools, developers can express var handle transformations such as:<\/p>\n+<ul>\n+<li>mapping a var handle carrier type into a different one, using an embedding\/projection method handle pairs<\/li>\n+<li>filter one or more var handle access coordinates using unary filters<\/li>\n+<li>permute var handle access coordinates<\/li>\n+<li>bind concrete access coordinates to an existing var handle<\/li>\n+<\/ul>\n+<p>Without diving too deep, let's consider how we might want to take a basic memory access handle and turn it into a var handle which dereference a segment at a specific offset (again using the <code>taggedValues<\/code> layout defined previously):<\/p>\n+<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\">VarHandle intHandle = MemoryHandles.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"bu\">ByteOrder<\/span>.<span class=\"fu\">nativeOrder<\/span>()); <span class=\"co\">\/\/ (MS, J) -&gt; I<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\"><span class=\"dt\">long<\/span> offsetOfValue = taggedValues.<span class=\"fu\">byteOffset<\/span>(PathElement.<span class=\"fu\">sequenceElement<\/span>(<span class=\"dv\">0<\/span>),<\/a>\n+<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\">                                             PathElement.<span class=\"fu\">groupElement<\/span>(<span class=\"st\">&quot;value&quot;<\/span>));<\/a>\n+<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">VarHandle valueHandle = MemoryHandles.<span class=\"fu\">insertCoordinates<\/span>(intHandle, <span class=\"dv\">0<\/span>, offsetOfValue); <span class=\"co\">\/\/ (MS) -&gt; I<\/span><\/a><\/code><\/pre><\/div>\n+<p>We have been able to derive, from a basic memory access var handle, a new var handle that dereferences a segment at a given fixed offset. It is easy to see how other, richer, var handles obtained using the layout API can be constructed manually using the var handle combinator API.<\/p>\n+<h3 id=\"segment-accessors\">Segment accessors<\/h3>\n+<p>Building complex memory access var handles using layout paths and the combinator API is useful, especially for structured access. But in simple cases, creating a <code>VarHandle<\/code> just to be able to read an int value at a given segment offset can be perceived as overkill. For this reason, the foreign memory access API provides ready-made static accessors in the <code>MemoryAccess<\/code> class, which allows to dereference a segment in various ways. For instance, if a client wants to read an int value from a segment, one of the following methods can be used:<\/p>\n+<ul>\n+<li><code>MemoryAccess::getInt(MemorySegment)<\/code> — reads an int value (4 bytes) starting at the segment's base address<\/li>\n+<li><code>MemoryAccess::getIntAtOffset(MemorySegment, long)<\/code> — reads an int value (4 bytes) starting at the address <code>A = B + O<\/code> where <code>B<\/code> is the segment's base address, and <code>O<\/code> is an offset (in bytes) supplied by the client<\/li>\n+<li><code>MemoryAccess::getIntAtIndex(MemorySegment, long)<\/code> — reads an int value (4 bytes) starting at the address <code>A = B + (4 * I)<\/code> where <code>B<\/code> is the segment's base address, and <code>I<\/code> is a logical index supplied by the client; this accessor is useful for mimicking array access.<\/li>\n+<\/ul>\n+<p>In other words, at least in simple cases, memory dereference operations can be achieved without the need of going through the <code>VarHandle<\/code> API; of course in more complex cases (structured and\/or multidimensional access, fenced access) the full power of the <code>VarHandle<\/code> API might still come in handy.<\/p>\n+<h3 id=\"interoperability\">Interoperability<\/h3>\n+<p>Memory segments are pretty flexible when it comes to interacting with existing memory sources. For instance it is possible to:<\/p>\n+<ul>\n+<li>create segment from a Java array<\/li>\n+<li>convert a segment into a Java array<\/li>\n+<li>create a segment from a byte buffer<\/li>\n+<li>convert a segment into a byte buffer<\/li>\n+<\/ul>\n+<p>For instance, thanks to bi-directional integration with the byte buffer API, it is possible for users to create a memory segment, and then de-reference it using the byte buffer API, as follows:<\/p>\n+<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb15-1\" title=\"1\">MemorySegment segment = ...<\/a>\n+<a class=\"sourceLine\" id=\"cb15-2\" title=\"2\"><span class=\"dt\">int<\/span>[] values = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">10<\/span>];<\/a>\n+<a class=\"sourceLine\" id=\"cb15-3\" title=\"3\"><span class=\"bu\">ByteBuffer<\/span> bb = segment.<span class=\"fu\">asByteBuffer<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb15-4\" title=\"4\"><span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span> ; i &lt; values.<span class=\"fu\">length<\/span> ; i++) {<\/a>\n+<a class=\"sourceLine\" id=\"cb15-5\" title=\"5\">    values[i] = bb.<span class=\"fu\">getInt<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb15-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n+<p>The only thing to remember is that, when a byte buffer view is created out of a memory segment, the buffer has the same temporal bound and thread-confinement guarantees as those of the segment it originated from. This means that if the segment is closed, any subsequent attempt to dereference its memory via a (previously obtained) byte buffer view will fail with an exception.<\/p>\n+<h3 id=\"unsafe-segments\">Unsafe segments<\/h3>\n+<p>It is sometimes necessary to create a segment out of an existing memory source, which might be managed by native code. This is the case, for instance, if we want to create a segment out of memory managed by a custom allocator.<\/p>\n+<p>The ByteBuffer API allows such a move, through a JNI <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/jni\/spec\/functions.html#NewDirectByteBuffer\">method<\/a>, namely <code>NewDirectByteBuffer<\/code>. This native method can be used to wrap a long address in a fresh byte buffer instance which is then returned to unsuspecting Java code.<\/p>\n+<p>Memory segments provide a similar capability - that is, given an address (which might have been obtained through some native calls), it is possible to wrap a segment around it, with given spatial, temporal and confinement bounds; a cleanup action to be executed when the segment is closed might also be specified.<\/p>\n+<p>For instance, assuming we have an address pointing at some externally managed memory block, we can construct an <em>unsafe<\/em> segment, as follows:<\/p>\n+<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb16-1\" title=\"1\">MemoryAddress addr = MemoryAddress.<span class=\"fu\">ofLong<\/span>(someLongAddr);<\/a>\n+<a class=\"sourceLine\" id=\"cb16-2\" title=\"2\">var unsafeSegment = addr.<span class=\"fu\">asSegmentRestricted<\/span>(<span class=\"dv\">10<\/span>);<\/a><\/code><\/pre><\/div>\n+<p>The above code creates a new confined unsafe segment from a given address; the size of the segment is 10 bytes; the confinement thread is the current thread, and there's no cleanup action associated with the segment (that can be changed as needed by calling <code>MemorySegment::withCleanupAction<\/code>).<\/p>\n+<p>Of course, segments created this way are completely <em>unsafe<\/em>. There is no way for the runtime to verify that the provided address indeed points to a valid memory location, or that the size of the memory region pointed to by <code>addr<\/code> is indeed 10 bytes. Similarly, there are no guarantees that the underlying memory region associated with <code>addr<\/code> will not be deallocated <em>prior<\/em> to the call to <code>MemorySegment::close<\/code>.<\/p>\n+<p>For these reasons, creating unsafe segments is a <em>restricted<\/em> operation in the Foreign Memory Access API. Restricted operations can only be performed if the running application has set a read-only runtime property — <code>foreign.restricted=permit<\/code>. Any attempt to call restricted operations without said runtime property will fail with a runtime exception.<\/p>\n+<p>We plan, in the future, to make access to restricted operations more integrated with the module system; that is, certain modules might <em>require<\/em> restricted native access; when an application which depends on said modules is executed, the user might need to provide <em>permissions<\/em> to said modules to perform restricted native operations, or the runtime will refuse to build the application's module graph.<\/p>\n+<h3 id=\"confinement\">Confinement<\/h3>\n+<p>In addition to spatial and temporal bounds, segments also feature thread-confinement. That is, a segment is <em>owned<\/em> by the thread which created it, and no other thread can access the contents on the segment, or perform certain operations (such as <code>close<\/code>) on it. Thread confinement, while restrictive, is crucial to guarantee optimal memory access performance even in a multi-threaded environment.<\/p>\n+<p>The Foreign Memory Access API provides several ways to relax the thread confinement barriers. First, threads can cooperatively share segments by performing explicit <em>handoff<\/em> operations, where a thread releases its ownership on a given segment and transfers it onto another thread. Consider the following code:<\/p>\n+<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb17-1\" title=\"1\">MemorySegment segmentA = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>); <span class=\"co\">\/\/ confined by thread A<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb17-2\" title=\"2\">...<\/a>\n+<a class=\"sourceLine\" id=\"cb17-3\" title=\"3\">var segmentB = segmentA.<span class=\"fu\">withOwnerThread<\/span>(threadB); <span class=\"co\">\/\/ confined by thread B<\/span><\/a><\/code><\/pre><\/div>\n+<p>This pattern of access is also known as <em>serial confinement<\/em> and might be useful in producer\/consumer use cases where only one thread at a time needs to access a segment. Note that, to make the handoff operation safe, the API <em>kills<\/em> the original segment (as if <code>close<\/code> was called, but without releasing the underlying memory) and returns a <em>new<\/em> segment with the correct owner. The implementation also makes sure that all writes by the first thread are flushed into memory by the time the second thread accesses the segment.<\/p>\n+<p>When serial confinement is not enough, clients can optionally remove thread ownership, that is, turn a confined segment into a <em>shared<\/em> one which can be accessed — and closed — concurrently, by multiple threads<a href=\"#2\"><sup>2<\/sup><\/a>. As before, sharing a segment kills the original segment and returns a new segment with no owner thread:<\/p>\n+<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb18-1\" title=\"1\">MemorySegment segmentA = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>); <span class=\"co\">\/\/ confined by thread A<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb18-2\" title=\"2\">...<\/a>\n+<a class=\"sourceLine\" id=\"cb18-3\" title=\"3\">var sharedSegment = segmentA.<span class=\"fu\">withOwnerThread<\/span>(<span class=\"kw\">null<\/span>); <span class=\"co\">\/\/ shared segment<\/span><\/a><\/code><\/pre><\/div>\n+<p>A shared segments is especially useful when multiple threads need to operate on the segment's contents in <em>parallel<\/em> (e.g. using a framework such as Fork\/Join) — by obtaining a <code>Spliterator<\/code> instance out of a memory segment. For instance to sum all the 32 bit values of a memory segment in parallel, we can use the following code:<\/p>\n+<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb19-1\" title=\"1\">SequenceLayout seq = MemoryLayout.<span class=\"fu\">ofSequence<\/span>(<span class=\"dv\">1_000_000<\/span>, MemoryLayouts.<span class=\"fu\">JAVA_INT<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb19-2\" title=\"2\">SequenceLayout seq_bulk = seq.<span class=\"fu\">reshape<\/span>(-<span class=\"dv\">1<\/span>, <span class=\"dv\">100<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb19-3\" title=\"3\">VarHandle intHandle = seq.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"fu\">sequenceElement<\/span>());    <\/a>\n+<a class=\"sourceLine\" id=\"cb19-4\" title=\"4\"><\/a>\n+<a class=\"sourceLine\" id=\"cb19-5\" title=\"5\"><span class=\"dt\">int<\/span> sum = StreamSupport.<span class=\"fu\">stream<\/span>(MemorySegment.<span class=\"fu\">spliterator<\/span>(segment.<span class=\"fu\">withOwnerThread<\/span>(<span class=\"kw\">null<\/span>), seq_bulk), <span class=\"kw\">true<\/span>)<\/a>\n+<a class=\"sourceLine\" id=\"cb19-6\" title=\"6\">                .<span class=\"fu\">mapToInt<\/span>(slice -&gt; {<\/a>\n+<a class=\"sourceLine\" id=\"cb19-7\" title=\"7\">                    <span class=\"dt\">int<\/span> res = <span class=\"dv\">0<\/span>;<\/a>\n+<a class=\"sourceLine\" id=\"cb19-8\" title=\"8\">                    <span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span>; i &lt; <span class=\"dv\">100<\/span> ; i++) {<\/a>\n+<a class=\"sourceLine\" id=\"cb19-9\" title=\"9\">                        res += MemoryAccess.<span class=\"fu\">getIntAtIndex<\/span>(slice, i);<\/a>\n+<a class=\"sourceLine\" id=\"cb19-10\" title=\"10\">                    }<\/a>\n+<a class=\"sourceLine\" id=\"cb19-11\" title=\"11\">                    <span class=\"kw\">return<\/span> res;<\/a>\n+<a class=\"sourceLine\" id=\"cb19-12\" title=\"12\">                }).<span class=\"fu\">sum<\/span>();<\/a><\/code><\/pre><\/div>\n+<p>The <code>MemorySegment::spliterator<\/code> takes a segment, a <em>sequence<\/em> layout and returns a spliterator instance which splits the segment into chunks which corresponds to the elements in the provided sequence layout. Here, we want to sum elements in an array which contains a million of elements; now, doing a parallel sum where each computation processes <em>exactly<\/em> one element would be inefficient, so instead we use the layout API to derive a <em>bulk<\/em> sequence layout. The bulk layout is a sequence layout which has the same size of the original layouts, but where the elements are arranged into groups of 100 elements — which should make it more amenable to parallel processing.<\/p>\n+<p>Once we have the spliterator, we can use it to construct a parallel stream and sum the contents of the segment in parallel. Since the segment operated upon by the spliterator is shared, the segment can be accessed from multiple threads concurrently; the spliterator API ensures that the access occurs in a regular fashion: a slice is created from the original segment, and given to a thread to perform some computation — thus ensuring that no two threads can ever operate concurrently on the same memory region.<\/p>\n+<p>Shared segment can also be useful to perform serial confinement in cases where the thread handing off the segment does not know which other thread will continue the work on the segment, for instance:<\/p>\n+<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb20-1\" title=\"1\"><span class=\"co\">\/\/ thread A<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb20-2\" title=\"2\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>); <span class=\"co\">\/\/ confined by thread A<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb20-3\" title=\"3\"><span class=\"co\">\/\/do some work<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb20-4\" title=\"4\">segment = segment.<span class=\"fu\">withOwnerThread<\/span>(<span class=\"kw\">null<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb20-5\" title=\"5\"><\/a>\n+<a class=\"sourceLine\" id=\"cb20-6\" title=\"6\"><span class=\"co\">\/\/ thread B<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb20-7\" title=\"7\">segment.<span class=\"fu\">withOwnerThread<\/span>(<span class=\"bu\">Thread<\/span>.<span class=\"fu\">currentThread<\/span>()); <span class=\"co\">\/\/ now confined by thread B<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb20-8\" title=\"8\"><span class=\"co\">\/\/ do some more work<\/span><\/a><\/code><\/pre><\/div>\n+<p>That is, multiple threads can <em>race<\/em> to acquire a given shared segment — the API ensures that only one of them will succeed in acquiring ownership of the shared segment.<\/p>\n+<h3 id=\"implicit-deallocation\">Implicit deallocation<\/h3>\n+<p>While memory segment feature <em>deterministic deallocation<\/em> they can also be registered against a <code>Cleaner<\/code>, to make sure that the memory resources associated with a segment are released when the GC determines that the segment is no longer <em>reachable<\/em>:<\/p>\n+<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb21-1\" title=\"1\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">100<\/span>);<\/a>\n+<a class=\"sourceLine\" id=\"cb21-2\" title=\"2\">Cleaner cleaner = Cleaner.<span class=\"fu\">create<\/span>();<\/a>\n+<a class=\"sourceLine\" id=\"cb21-3\" title=\"3\">segment.<span class=\"fu\">registerCleaner<\/span>(cleaner);<\/a>\n+<a class=\"sourceLine\" id=\"cb21-4\" title=\"4\"><span class=\"co\">\/\/ do some work<\/span><\/a>\n+<a class=\"sourceLine\" id=\"cb21-5\" title=\"5\">segment = <span class=\"kw\">null<\/span>; <span class=\"co\">\/\/ Cleaner might reclaim the segment memory now<\/span><\/a><\/code><\/pre><\/div>\n+<p>Note that registering a segment with a cleaner doesn't prevent clients from calling <code>MemorySegment::close<\/code> explicitly; the API will guarantee that the segment's cleanup action will be called at most once — either explicitly, or implicitly (by a cleaner). Moreover, since an unreachable segment cannot (by definition) be accessed by any thread, the cleaner can always release any memory resources associated with an unreachable segment, regardless of whether it is a confined, or a shared segment.<\/p>\n+<ul>\n+<li><a id=\"1\"\/>(<sup>1<\/sup>):<small> In general, deriving a complete layout from a C <code>struct<\/code> declaration is no trivial matter, and it's one of those areas where tooling can help greatly.<\/small><\/li>\n+<li><a id=\"2\"\/>(<sup>2<\/sup>):<small> Shared segments rely on VM thread-local handshakes (JEP <a href=\"https:\/\/openjdk.java.net\/jeps\/312\">312<\/a>) to implement lock-free, safe, shared memory access; that is, when it comes to memory access, there should no difference in performance between a shared segment and a confined segment. On the other hand, <code>MemorySegment::close<\/code> might be slower on shared segments than on confined ones.<\/small><\/li>\n+<\/ul>\n+<\/body>\n+<\/html>\n","filename":"doc\/panama_memaccess.html","additions":283,"deletions":0,"binary":false,"changes":283,"status":"added"},{"patch":"@@ -0,0 +1,312 @@\n+## State of foreign memory support\n+\n+**September 2020**\n+\n+* Updated section on restricted segments reflecting new, simpler API\n+* Revamped section on confinement to add description of shared segments\n+* Added section on implicit deallocation\n+\n+**Maurizio Cimadamore**\n+\n+A crucial part of any native interop story lies in the ability of accessing off-heap memory in an efficient fashion. Panama achieves this goal through the so called Foreign Memory Access API. This API has been made available as an incubating API in Java [14](https:\/\/openjdk.java.net\/jeps\/370) ad [15](https:\/\/openjdk.java.net\/jeps\/383), and is, to date, the most mature part of the Panama interop story.\n+\n+### Segments\n+\n+Memory segments are abstractions which can be used to model memory regions, located either on- or off- the Java heap. Segments can be allocated from native memory (e.g. like a `malloc`), or can be wrapped around existing memory sources (e.g. a Java array or a `ByteBuffer`). Memory segments provide *strong* guarantees which make memory dereference operation *safe*. More specifically, each segment provides:\n+\n+* *spatial bounds* - that is, a segment has a base address and a size, and accessing a segment outside those boundaries is forbidden\n+* *temporal bounds* - that is, a segment has a _state_ - meaning that it can be used and then _closed_ when the memory backing the segment is no longer needed (note, this might trigger deallocation of said memory)\n+* *thread-confinement*  - that is, a segment is a view over a memory region that is *owned* by the thread which created it. Attempting to dereference  or close a segment outside the confinement thread is forbidden (this is crucial to avoid access vs. close races in multi-threaded scenario)\n+\n+For instance, the following snippet allocates 100 bytes off-heap:\n+\n+```java\n+try (MemorySegment segment = MemorySegment.allocateNative(100)) {\n+    ...\n+} \/\/ frees memory\n+```\n+\n+Since segments are `AutoCloseable` they can be used inside a *try-with-resources* statement, which helps ensure that memory will be released when the segment is no longer needed.\n+\n+Memory segments support *slicing* — that is, given a segment, it is possible to create a new segment whose spatial bounds are stricter than that of the original segment:\n+\n+```java\n+MemorySegment segment = MemorySement.allocateNative(10);\n+MemorySegment slice = segment.asSlice(4, 4);\n+```\n+\n+The above code creates a slice that starts at offset 4 and has a length of 4 bytes. Slices have the *same* temporal bounds as the parent segment - this means that when the parent segment is closed, all the slices derived from it are also closed. The opposite is also true, closing a slice closes the parent segment (and all the other slices derived from it). If a library wants to share a slice, but prevent a client from closing it (could be useful e.g. when implementing a slab allocator), the library could prevent a client from closing the slice by creating a *non-closeable* view:\n+\n+```java\n+MemorySegment sharedSlice = slice.withAccessModes(ALL_ACCESS & ~CLOSE);\n+```\n+\n+Any attempt to call `close` on `sharedSlice` will be met with an exception. Memory segments support various access modes (including those for read\/write access) which can be used to constrain the set of operations available to clients.\n+\n+### Memory access handles\n+\n+Dereferencing memory associated with segments is made possible by using *memory access var handles*. A memory access var handle is a special kind of var handle which takes a memory segment access coordinate, together with a byte offset — the offset, relative to the segment's base address at which the dereference operation should occur. A memory access var handle can be obtained as follows:\n+\n+```java\n+VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder())    \n+```\n+\n+To create a dereference handle we have to specify a carrier type — the type we want to use e.g. to extract values from memory, as well as to whether any byte swapping should be applied when contents are read from or stored to memory. Additionally, the user can supply an extra alignment parameter (not shown here) — this can be useful to impose additional constraints on how memory dereferences should occur; for instance, a client might want to prevent access to misaligned 32 bit values.\n+\n+For instance, to read 10 int values from a segment, we can write the following code:\n+\n+```java\n+MemorySegment segment = ...\n+int[] values = new int[10];\n+for (int i = 0 ; i < values.length ; i++) {\n+    values[i] = (int)intHandle.get(segment, (long)i * 4);\n+}\n+```\n+\n+Memory access var handles (as any other var handle) are *strongly* typed; and to get maximum efficiency, it is generally necessary to introduce casts to make sure that the access coordinates match the expected types — in this case we have to cast `i * 4` into a long; similarly, since the signature polymorphic method `VarHandle::get` notionally returns `Object` a cast is necessary to force the right return type the var handle operation.\n+\n+Note that, since the offset of the dereference operation is expressed in bytes, we have to manually compute the starting offset, by multiplying the logical index `i` by `4` — the size (in bytes) of a Java int value; this is not dissimilar to what happens with the `ByteBuffer` absolute get\/put methods. We shall see later how memory layouts help us achieving higher level, structured access.\n+\n+### Safety\n+\n+The memory access API provides basic safety guarantees for memory dereference operations. More specifically, dereferencing memory should either succeed, or result in a runtime exception - but, crucially, should never result in a VM crash, or, more subtly, in memory corruption occurring *outside* the region of memory associated with a memory segment.\n+\n+To enforce this, strong spatial and temporal checks are enforced upon every access. Consider the following code:\n+\n+```java\n+MemorySegment segment = MemorySegment.allocateNative(10);\n+intHandle.get(segment, 8); \/\/throws ISE\n+```\n+\n+The above code leads to a runtime exception, as we trying to access memory outside the segment's bounds — the access operation starts at offset 8 (which is within bounds), but ends at offset 11 (which is outside bounds).\n+\n+Similarly, attempting to access an already closed segment leads to a failure:\n+\n+```java\n+segment.close();\n+intHandle.get(segment, 0); \/\/throws ISE\n+```\n+\n+This time, the access occurs within the spatial bounds implied by the segment, but when access occurs, the segment has already been *closed*, so the access operation fails. This is crucial to guarantee safety: since memory segments ensure *deterministic deallocation*, the above code might end up attempting to dereference already freed memory.\n+\n+On top of basic spatial and temporal bound guarantees, memory segments also enforce thread-confinement guarantees, which will be discussed in a later [section](#Confinement). Note that, while these checks might seem expensive when considered in isolation, the Foreign Memory Access API is designed and implemented such that the JIT compiler can hoist most, if not all, such checks outside hot loops. Hence, memory access efficiency is not negatively impacted by the safety requirements of the API.\n+\n+### Layouts\n+\n+Expressing byte offsets (as in the [above](#memory-access-handles) example) can lead to code that is hard to read, and very fragile — as memory layout invariants are captured, implicitly, in the constants used to scale offsets. To address this issue, we add a *memory layout* API which allows clients to define memory layouts *programmatically*. For instance, the layout of the array used in the above example can be expressed using the following code:\n+\n+```java\n+MemoryLayout intArray = MemoryLayout.ofSequence(10, MemoryLayout.ofValueBits(32));\n+```\n+\n+That is, our layout is a repetition of 10 elements whose size is 32 bit each. The advantage of defining a memory layout upfront, using an API, is that we can then query on the layout — for instance we can compute the offset of the 3rd element of the array:\n+\n+```java\n+long element3 = intArray.byteOffset(PathElement.sequenceElement(3)); \/\/ 12\n+```\n+\n+To specify which nested layout element should be used for the offset calculation we use a so called *layout path* - that is, a selection expression that navigates the layout, from the *root* layout, down to the leaf layout we wish to select (in this case the 3rd layout element in the sequence).\n+\n+Layouts can also be used to obtain memory access var handles; so we can rewrite the above example as follows:\n+\n+```java\n+MemorySegment segment = ...\n+int[] values = new int[10];\n+VarHandle elemHandle = intArray.varHandle(int.class, PathElement.sequenceElement());\n+for (int i = 0 ; i < values.length ; i++) {\n+    values[i] = (int)elemHandle.get(segment, (long)i);\n+}\n+```\n+\n+In the above, `elemHandle` is a var handle whose type is `int` , which takes two access coordinates:\n+\n+1. a `MemorySegment` instance; the segment whose memory should be dereferenced\n+2. a *logical* index, which is used to select the element of the sequence we want to access\n+\n+In other words, manual offset computation is no longer needed — offsets and strides can in fact be derived from the layout object.\n+\n+Memory layouts shine when structured access is needed — consider the following C declaration:\n+\n+```c\n+typedef struct {\n+\tchar kind;\n+    int value;\n+} TaggedValues[5];\n+```\n+\n+The above C declaration can be modeled using the layout below:\n+\n+```javascript\n+SequenceLayout taggedValues = MemoryLayout.ofSequence(5,\n+    MemoryLayout.ofStruct(\n+        MemoryLayout.ofValueBits(8, ByteOrder.nativeOrder()).withName(\"kind\"),\n+        MemoryLayout.ofPaddingBits(24),\n+        MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()).withName(\"value\")\n+    )\n+).withName(\"TaggedValues\");\n+```\n+\n+Here we assume that we need to insert some padding after the `kind` field to honor the alignment requirements of the `value` field <a href=\"#1\"><sup>1<\/sup><\/a>. Now, if we had to access the `value` field of all the elements of the array using manual offset computation, the code would quickly become pretty hard to read — on each iteration we would have to remember that the stride of the array is 8 bytes and that the offset of the `value` field relative to the `TaggedValue` struct is 4 bytes. This gives us an access expression like `(i * 8) + 4`, where `i` is the index of the element whose `value` field needs to be accessed.\n+\n+With memory layouts, we can simply compute, once and for all, the memory access var handle to access the `value` field inside the sequence, as follows:\n+\n+```java\n+VarHandle valuesHandle = taggedValues.varHandle(int.class,\n+                                               PathElement.sequenceElement(),\n+                                               PathElement.groupElement(\"value\"));\n+```\n+\n+When using this var handle, no manual offset computation will be required: the resulting `valuesHandle` will feature an additional `long` coordinate which can be used to select  the desired `value` field from the sequence.\n+\n+### Var handle combinators\n+\n+The attentive reader might have noted how rich the var handles returned by the layout API are, compared to the simple memory access var handle we have seen at play [here](#memory-access-handles). How do we go from a simple access var handle that takes a byte offset to a var handle that can dereference a complex layout path? The answer is, by using var handle *combinators*. Developers familiar with the method handle API know how simpler method handles can be combined into more complex ones using the various combinator methods in the `MethodHandles` API. These methods allow, for instance, to insert (or bind) arguments into a target method handle, filter return values, permute arguments and much more.\n+\n+Sadly, none of these features are available when working with var handles. The Foreign Memory Access API rectifies this, by adding a rich set of var handle combinators in the `MemoryHandles` class; with these tools, developers can express var handle transformations such as:\n+\n+* mapping a var handle carrier type into a different one, using an embedding\/projection method handle pairs\n+* filter one or more var handle access coordinates using unary filters\n+* permute var handle access coordinates\n+* bind concrete access coordinates to an existing var handle\n+\n+Without diving too deep, let's consider how we might want to take a basic memory access handle and turn it into a var handle which dereference a segment at a specific offset (again using the `taggedValues` layout defined previously):\n+\n+```java\n+VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder()); \/\/ (MS, J) -> I\n+long offsetOfValue = taggedValues.byteOffset(PathElement.sequenceElement(0),\n+                                             PathElement.groupElement(\"value\"));\n+VarHandle valueHandle = MemoryHandles.insertCoordinates(intHandle, 0, offsetOfValue); \/\/ (MS) -> I\n+```\n+\n+We have been able to derive, from a basic memory access var handle, a new var handle that dereferences a segment at a given fixed offset. It is easy to see how other, richer, var handles obtained using the layout API can be constructed manually using the var handle combinator API.\n+\n+### Segment accessors\n+\n+Building complex memory access var handles using layout paths and the combinator API is useful, especially for structured access. But in simple cases, creating a `VarHandle` just to be able to read an int value at a given segment offset can be perceived as overkill. For this reason, the foreign memory access API provides ready-made static accessors in the `MemoryAccess` class, which allows to dereference a segment in various ways. For instance, if a client wants to read an int value from a segment, one of the following methods can be used:\n+\n+* `MemoryAccess::getInt(MemorySegment)` — reads an int value (4 bytes) starting at the segment's base address\n+* `MemoryAccess::getIntAtOffset(MemorySegment, long)` — reads an int value (4 bytes) starting at the address `A = B + O` where `B` is the segment's base address, and `O` is an offset (in bytes) supplied by the client\n+* `MemoryAccess::getIntAtIndex(MemorySegment, long)` — reads an int value (4 bytes) starting at the address `A = B + (4 * I)` where `B` is the segment's base address, and `I` is a logical index supplied by the client; this accessor is useful for mimicking array access.\n+\n+In other words, at least in simple cases, memory dereference operations can be achieved without the need of going through the `VarHandle` API; of course in more complex cases (structured and\/or multidimensional access, fenced access) the full power of the `VarHandle` API might still come in handy.\n+\n+### Interoperability\n+\n+Memory segments are pretty flexible when it comes to interacting with existing memory sources. For instance it is possible to:\n+\n+* create segment from a Java array\n+* convert a segment into a Java array\n+* create a segment from a byte buffer\n+* convert a segment into a byte buffer\n+\n+For instance, thanks to bi-directional integration with the byte buffer API, it is possible for users to create a memory segment, and then de-reference it using the byte buffer API, as follows:\n+\n+```java\n+MemorySegment segment = ...\n+int[] values = new int[10];\n+ByteBuffer bb = segment.asByteBuffer();\n+for (int i = 0 ; i < values.length ; i++) {\n+    values[i] = bb.getInt();\n+}\n+```\n+\n+The only thing to remember is that, when a byte buffer view is created out of a memory segment, the buffer has the same temporal bound and thread-confinement guarantees as those of the segment it originated from. This means that if the segment is closed, any subsequent attempt to dereference its memory via a (previously obtained) byte buffer view will fail with an exception.\n+\n+### Unsafe segments\n+\n+It is sometimes necessary to create a segment out of an existing memory source, which might be managed by native code. This is the case, for instance, if we want to create a segment out of memory managed by a custom allocator.\n+\n+The ByteBuffer API allows such a move, through a JNI [method](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/jni\/spec\/functions.html#NewDirectByteBuffer), namely `NewDirectByteBuffer`. This native method can be used to wrap a long address in a fresh byte buffer instance which is then returned to unsuspecting Java code.\n+\n+Memory segments provide a similar capability - that is, given an address (which might have been obtained through some native calls), it is possible to wrap a segment around it, with given spatial, temporal and confinement bounds; a cleanup action to be executed when the segment is closed might also be specified.\n+\n+For instance, assuming we have an address pointing at some externally managed memory block, we can construct an *unsafe* segment, as follows:\n+\n+```java\n+MemoryAddress addr = MemoryAddress.ofLong(someLongAddr);\n+var unsafeSegment = addr.asSegmentRestricted(10);\n+```\n+\n+The above code creates a new confined unsafe segment from a given address; the size of the segment is 10 bytes; the confinement thread is the current thread, and there's no cleanup action associated with the segment (that can be changed as needed by calling `MemorySegment::withCleanupAction`).\n+\n+Of course, segments created this way are completely *unsafe*. There is no way for the runtime to verify that the provided address indeed points to a valid memory location, or that the size of the memory region pointed to by `addr` is indeed 10 bytes. Similarly, there are no guarantees that the underlying memory region associated with `addr` will not be deallocated *prior* to the call to `MemorySegment::close`.\n+\n+For these reasons, creating unsafe segments is a *restricted* operation in the Foreign Memory Access API. Restricted operations can only be performed if the running application has set a read-only runtime property — `foreign.restricted=permit`. Any attempt to call restricted operations without said runtime property will fail with a runtime exception.\n+\n+We plan, in the future, to make access to restricted operations more integrated with the module system; that is, certain modules might *require* restricted native access; when an application which depends on said modules is executed, the user might need to provide *permissions* to said modules to perform restricted native operations, or the runtime will refuse to build the application's module graph.\n+\n+### Confinement\n+\n+In addition to spatial and temporal bounds, segments also feature thread-confinement. That is, a segment is *owned* by the thread which created it, and no other thread can access the contents on the segment, or perform certain operations (such as `close`) on it. Thread confinement, while restrictive, is crucial to guarantee optimal memory access performance even in a multi-threaded environment.\n+\n+The Foreign Memory Access API provides several ways to relax the thread confinement barriers. First, threads can cooperatively share segments by performing explicit *handoff* operations, where a thread releases its ownership on a given segment and transfers it onto another thread. Consider the following code:\n+\n+```java\n+MemorySegment segmentA = MemorySegment.allocateNative(10); \/\/ confined by thread A\n+...\n+var segmentB = segmentA.withOwnerThread(threadB); \/\/ confined by thread B\n+```\n+\n+This pattern of access is also known as *serial confinement* and might be useful in producer\/consumer use cases where only one thread at a time needs to access a segment. Note that, to make the handoff operation safe, the API *kills* the original segment (as if `close` was called, but without releasing the underlying memory) and returns a *new* segment with the correct owner. The implementation also makes sure that all writes by the first thread are flushed into memory by the time the second thread accesses the segment.\n+\n+When serial confinement is not enough, clients can optionally remove thread ownership, that is, turn a confined segment into a *shared* one which can be accessed — and closed — concurrently, by multiple threads<a href=\"#2\"><sup>2<\/sup><\/a>. As before, sharing a segment kills the original segment and returns a new segment with no owner thread:\n+\n+```java\n+MemorySegment segmentA = MemorySegment.allocateNative(10); \/\/ confined by thread A\n+...\n+var sharedSegment = segmentA.withOwnerThread(null); \/\/ shared segment\n+```\n+\n+A shared segments is especially useful when multiple threads need to operate on the segment's contents in *parallel* (e.g. using a framework such as Fork\/Join) — by obtaining a `Spliterator` instance out of a memory segment. For instance to sum all the 32 bit values of a memory segment in parallel, we can use the following code:\n+\n+```java\n+SequenceLayout seq = MemoryLayout.ofSequence(1_000_000, MemoryLayouts.JAVA_INT);\n+SequenceLayout seq_bulk = seq.reshape(-1, 100);\n+VarHandle intHandle = seq.varHandle(int.class, sequenceElement());    \n+\n+int sum = StreamSupport.stream(MemorySegment.spliterator(segment.withOwnerThread(null), seq_bulk), true)\n+                .mapToInt(slice -> {\n+\t\t\t\t\tint res = 0;\n+        \t\t\tfor (int i = 0; i < 100 ; i++) {\n+            \t\t\tres += MemoryAccess.getIntAtIndex(slice, i);\n+        \t\t\t}\n+        \t\t\treturn res;\n+                }).sum();\n+```\n+\n+The `MemorySegment::spliterator` takes a segment, a *sequence* layout and returns a spliterator instance which splits the segment into chunks which corresponds to the elements in the provided sequence layout. Here, we want to sum elements in an array which contains a million of elements; now, doing a parallel sum where each computation processes *exactly* one element would be inefficient, so instead we use the layout API to derive a *bulk* sequence layout. The bulk layout is a sequence layout which has the same size of the original layouts, but where the elements are arranged into groups of 100 elements — which should make it more amenable to parallel processing.\n+\n+Once we have the spliterator, we can use it to construct a parallel stream and sum the contents of the segment in parallel. Since the segment operated upon by the spliterator is shared, the segment can be accessed from multiple threads concurrently; the spliterator API ensures that the access occurs in a regular fashion: a slice is created from the original segment, and given to a thread to perform some computation — thus ensuring that no two threads can ever operate concurrently on the same memory region.\n+\n+Shared segment can also be useful to perform serial confinement in cases where the thread handing off the segment does not know which other thread will continue the work on the segment, for instance:\n+\n+```java\n+\/\/ thread A\n+MemorySegment segment = MemorySegment.allocateNative(10); \/\/ confined by thread A\n+\/\/do some work\n+segment = segment.withOwnerThread(null);\n+\n+\/\/ thread B\n+segment.withOwnerThread(Thread.currentThread()); \/\/ now confined by thread B\n+\/\/ do some more work\n+```\n+\n+That is, multiple threads can *race* to acquire a given shared segment — the API ensures that only one of them will succeed in acquiring ownership of the shared segment.\n+\n+### Implicit deallocation\n+\n+While memory segment feature *deterministic deallocation* they can also be registered against a `Cleaner`, to make sure that the memory resources associated with a segment are released when the GC determines that the segment is no longer *reachable*:\n+\n+```java\n+MemorySegment segment = MemorySegment.allocateNative(100);\n+Cleaner cleaner = Cleaner.create();\n+segment.registerCleaner(cleaner);\n+\/\/ do some work\n+segment = null; \/\/ Cleaner might reclaim the segment memory now\n+```\n+\n+Note that registering a segment with a cleaner doesn't prevent clients from calling `MemorySegment::close` explicitly; the API will guarantee that the segment's cleanup action will be called at most once — either explicitly, or implicitly (by a cleaner). Moreover, since an unreachable segment cannot (by definition) be accessed by any thread, the cleaner can always release any memory resources associated with an unreachable segment, regardless of whether it is a confined, or a shared segment.\n+\n+* <a id=\"1\"\/>(<sup>1<\/sup>):<small> In general, deriving a complete layout from a C `struct` declaration is no trivial matter, and it's one of those areas where tooling can help greatly.<\/small>\n+* <a id=\"2\"\/>(<sup>2<\/sup>):<small> Shared segments rely on VM thread-local handshakes (JEP [312](https:\/\/openjdk.java.net\/jeps\/312)) to implement lock-free, safe, shared memory access; that is, when it comes to memory access, there should no difference in performance between a shared segment and a confined segment. On the other hand, `MemorySegment::close` might be slower on shared segments than on confined ones.<\/small>\n+\n","filename":"doc\/panama_memaccess.md","additions":312,"deletions":0,"binary":false,"changes":312,"status":"added"}]}