{"files":[{"patch":"@@ -62,1 +62,1 @@\n-                    MethodType.methodType(void.class, int.class, MemoryAddress.class, List.class, List.class));\n+                    MethodType.methodType(void.class, int.class, MemoryAddress.class, List.class));\n@@ -73,2 +73,1 @@\n-        List<Consumer<Object>> checks = new ArrayList<>();\n-        List<Arg> args = makeArgs(paramTypes, fields, checks);\n+        List<Arg> args = makeArgs(paramTypes, fields);\n@@ -77,1 +76,1 @@\n-            MethodHandle checker = MethodHandles.insertArguments(MH_CHECK, 2, checks, args);\n+            MethodHandle checker = MethodHandles.insertArguments(MH_CHECK, 2, args);\n@@ -85,1 +84,1 @@\n-            CallInfo.argIDs(callInfo, writeBack);\n+            CallInfo.argIDs(callInfo, argIDs);\n@@ -111,1 +110,1 @@\n-    private static List<Arg> makeArgs(List<ParamType> paramTypes, List<StructFieldType> fields, List<Consumer<Object>> checks) throws ReflectiveOperationException {\n+    private static List<Arg> makeArgs(List<ParamType> paramTypes, List<StructFieldType> fields) throws ReflectiveOperationException {\n@@ -115,0 +114,1 @@\n+            List<Consumer<Object>> checks = new ArrayList<>();\n@@ -118,2 +118,2 @@\n-                ? Arg.structArg(type, layout, arg)\n-                : Arg.primitiveArg(type, layout, arg));\n+                ? Arg.structArg(type, layout, arg, checks)\n+                : Arg.primitiveArg(type, layout, arg, checks));\n@@ -124,2 +124,1 @@\n-    private static void check(int index, MemoryAddress ptr, List<Consumer<Object>> checks, List<Arg> args) {\n-        Consumer<Object> check = checks.get(index);\n+    private static void check(int index, MemoryAddress ptr, List<Arg> args) {\n@@ -127,1 +126,0 @@\n-\n@@ -130,0 +128,1 @@\n+        List<Consumer<Object>> checks = varArg.checks;\n@@ -133,1 +132,1 @@\n-            check.accept(obj);\n+            checks.forEach(check -> check.accept(obj));\n@@ -160,0 +159,1 @@\n+        final List<Consumer<Object>> checks;\n@@ -161,1 +161,1 @@\n-        private Arg(NativeType id, MemoryLayout layout, Object value, MethodHandle getter) {\n+        private Arg(NativeType id, MemoryLayout layout, Object value, MethodHandle getter, List<Consumer<Object>> checks) {\n@@ -166,0 +166,1 @@\n+            this.checks = checks;\n@@ -168,2 +169,2 @@\n-        private static Arg primitiveArg(NativeType id, MemoryLayout layout, Object value) {\n-            return new Arg(id, layout, value, layout.varHandle().toMethodHandle(VarHandle.AccessMode.GET));\n+        private static Arg primitiveArg(NativeType id, MemoryLayout layout, Object value, List<Consumer<Object>> checks) {\n+            return new Arg(id, layout, value, layout.varHandle().toMethodHandle(VarHandle.AccessMode.GET), checks);\n@@ -172,2 +173,2 @@\n-        private static Arg structArg(NativeType id, MemoryLayout layout, Object value) {\n-            return new Arg(id, layout, value, MethodHandles.identity(MemorySegment.class));\n+        private static Arg structArg(NativeType id, MemoryLayout layout, Object value, List<Consumer<Object>> checks) {\n+            return new Arg(id, layout, value, MethodHandles.identity(MemorySegment.class), checks);\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include <stdlib.h>\n@@ -229,0 +230,1 @@\n+            default: exit(-1); \/\/ invalid id\n","filename":"test\/jdk\/java\/foreign\/libVarArgs.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}