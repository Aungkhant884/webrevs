{"files":[{"patch":"@@ -136,1 +136,1 @@\n-    int sum = segment.parallelStream(MemoryLayouts.JAVA_INT)\n+    int sum = segment.elements(MemoryLayouts.JAVA_INT).parallel()\n@@ -184,1 +184,1 @@\n-    StreamSupport.stream(segment.spliterator(), false);\n+    StreamSupport.stream(segment.spliterator(elementLayout), false);\n@@ -191,14 +191,1 @@\n-    Stream<MemorySegment> stream(MemoryLayout elementLayout);\n-\n-    \/**\n-     * Returns a parallel {@code Stream} over disjoint slices (whose size matches that of the specified layout)\n-     * in this segment. Calling this method is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    StreamSupport.stream(segment.spliterator(), true);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param elementLayout the layout to be used for splitting.\n-     * @return a parallel {@code Stream} over disjoint slices in this segment.\n-     * @throws IllegalArgumentException if this segment size is not a multiple of the size of {@code elementLayout}.\n-     *\/\n-    Stream<MemorySegment> parallelStream(MemoryLayout elementLayout);\n+    Stream<MemorySegment> elements(MemoryLayout elementLayout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-    public Stream<MemorySegment> stream(MemoryLayout elementLayout) {\n+    public Stream<MemorySegment> elements(MemoryLayout elementLayout) {\n@@ -133,5 +133,0 @@\n-    @Override\n-    public Stream<MemorySegment> parallelStream(MemoryLayout elementLayout) {\n-        return StreamSupport.stream(spliterator(elementLayout), true);\n-    }\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            long streamParallel = segment.parallelStream(layout.elementLayout())\n+            long streamParallel = segment.elements(layout.elementLayout()).parallel()\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-import java.util.stream.StreamSupport;\n@@ -128,1 +127,1 @@\n-        return segment.parallelStream(ELEM_LAYOUT).mapToInt(SEGMENT_TO_INT).sum();\n+        return segment.elements(ELEM_LAYOUT).parallel().mapToInt(SEGMENT_TO_INT).sum();\n@@ -133,1 +132,1 @@\n-        return segment.parallelStream(ELEM_LAYOUT_BULK).mapToInt(SEGMENT_TO_INT_BULK).sum();\n+        return segment.elements(ELEM_LAYOUT_BULK).parallel().mapToInt(SEGMENT_TO_INT_BULK).sum();\n@@ -149,1 +148,1 @@\n-        return segment.stream(ELEM_LAYOUT)\n+        return segment.elements(ELEM_LAYOUT)\n@@ -156,1 +155,1 @@\n-        return segment.parallelStream(ELEM_LAYOUT)\n+        return segment.elements(ELEM_LAYOUT).parallel()\n@@ -163,1 +162,1 @@\n-        return segment.stream(ELEM_LAYOUT_BULK)\n+        return segment.elements(ELEM_LAYOUT_BULK)\n@@ -170,1 +169,1 @@\n-        return segment.parallelStream(ELEM_LAYOUT_BULK)\n+        return segment.elements(ELEM_LAYOUT_BULK).parallel()\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}