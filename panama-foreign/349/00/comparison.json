{"files":[{"patch":"@@ -54,1 +54,1 @@\n-                MethodHandle PUT_ENV = linker.downcallHandle(LibraryLookup.ofDefault().lookup(putenv),\n+                MethodHandle PUT_ENV = linker.downcallHandle(LibraryLookup.ofDefault().lookup(putenv).get(),\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/LibClang.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.nio.file.Path;\n@@ -44,1 +45,0 @@\n-import java.util.Objects;\n@@ -46,0 +46,1 @@\n+import java.util.stream.Stream;\n@@ -64,1 +65,1 @@\n-                          return LibraryLookup.ofPath(libName);\n+                          return LibraryLookup.ofPath(Path.of(libName));\n@@ -110,11 +111,3 @@\n-        for (LibraryLookup l : LIBRARIES) {\n-            try {\n-                return Optional.of(l.lookup(sym));\n-            } catch (Throwable t) {\n-            }\n-        }\n-        try {\n-            return Optional.of(LibraryLookup.ofDefault().lookup(sym));\n-        } catch (Throwable t) {\n-            return Optional.empty();\n-        }\n+        return Stream.of(LIBRARIES)\n+                .flatMap(l -> l.lookup(sym).stream())\n+                .findFirst();\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -15,0 +15,1 @@\n+import java.nio.file.Path;\n@@ -17,1 +18,0 @@\n-import java.util.Objects;\n@@ -19,0 +19,1 @@\n+import java.util.stream.Stream;\n@@ -35,1 +36,1 @@\n-                          return LibraryLookup.ofPath(libName);\n+                          return LibraryLookup.ofPath(Path.of(libName));\n@@ -85,11 +86,3 @@\n-        for (LibraryLookup l : LIBRARIES) {\n-            try {\n-                return Optional.of(l.lookup(sym));\n-            } catch (Throwable t) {\n-            }\n-        }\n-        try {\n-            return Optional.of(LibraryLookup.ofDefault().lookup(sym));\n-        } catch (Throwable t) {\n-            return Optional.empty();\n-        }\n+        return Stream.of(LIBRARIES)\n+                .flatMap(l -> l.lookup(sym).stream())\n+                .findFirst();\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"}]}