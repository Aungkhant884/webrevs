{"files":[{"patch":"@@ -115,1 +115,1 @@\n-     * into a new memory segment obtained by calling {@code this.allocate(B + N)}, where:\n+     * into a new memory segment obtained by calling {@code this.allocate(B + N, 1)}, where:\n@@ -129,1 +129,1 @@\n-        MemorySegment segment = allocateNoInit(bytes.length + termCharSize);\n+        MemorySegment segment = allocateNoInit(bytes.length + termCharSize, 1);\n@@ -139,1 +139,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -146,1 +147,1 @@\n-        MemorySegment addr = allocateNoInit(layout);\n+        MemorySegment addr = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -153,1 +154,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -160,1 +162,1 @@\n-        MemorySegment addr = allocateNoInit(layout);\n+        MemorySegment addr = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -167,1 +169,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -174,1 +177,1 @@\n-        MemorySegment addr = allocateNoInit(layout);\n+        MemorySegment addr = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -181,1 +184,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -188,1 +192,1 @@\n-        MemorySegment addr = allocateNoInit(layout);\n+        MemorySegment addr = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -195,1 +199,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -202,1 +207,1 @@\n-        MemorySegment addr = allocateNoInit(layout);\n+        MemorySegment addr = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -209,1 +214,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -216,1 +222,1 @@\n-        MemorySegment addr = allocateNoInit(layout);\n+        MemorySegment addr = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -223,1 +229,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -230,1 +237,1 @@\n-        MemorySegment addr = allocateNoInit(layout);\n+        MemorySegment addr = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -238,1 +245,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -246,1 +254,1 @@\n-        MemorySegment segment = allocateNoInit(layout);\n+        MemorySegment segment = allocateNoInit(layout.byteSize(), layout.byteAlignment());\n@@ -253,1 +261,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(elements.length * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -264,1 +273,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(elements.length * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -275,1 +285,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(elements.length * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -286,1 +297,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(elements.length * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -297,1 +309,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(elements.length * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -308,1 +321,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(elements.length * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -319,1 +333,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(elements.length * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -331,1 +346,1 @@\n-        MemorySegment segment = allocateNoInit(elementLayout, size);\n+        MemorySegment segment = allocateNoInit(elementLayout.byteSize() * size, elementLayout.byteAlignment());\n@@ -340,1 +355,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -351,1 +367,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     * @implSpec the default implementation for this method calls\n+     * {@code this.allocate(count * elementLayout.byteSize(), elementLayout.byteAlignment())}.\n@@ -430,1 +447,1 @@\n-    private MemorySegment allocateNoInit(MemoryLayout layout) {\n+    private MemorySegment allocateNoInit(long byteSize, long byteAlignment) {\n@@ -432,16 +449,2 @@\n-                arenaImpl.allocateNoInit(layout) :\n-                allocate(layout);\n-    }\n-\n-    @ForceInline\n-    private MemorySegment allocateNoInit(long size) {\n-        return this instanceof ArenaImpl arenaImpl ?\n-                arenaImpl.allocateNoInit(size) :\n-                allocate(size);\n-    }\n-\n-    @ForceInline\n-    private MemorySegment allocateNoInit(MemoryLayout layout, long size) {\n-        return this instanceof ArenaImpl arenaImpl ?\n-                arenaImpl.allocateNoInit(layout, size) :\n-                allocate(layout, size);\n+                arenaImpl.allocateNoInit(byteSize, byteAlignment) :\n+                allocate(byteSize, byteAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":48,"deletions":45,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -55,18 +55,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegment(byteSize, byteAlignment, session, false, shouldReserveMemory);\n-    }\n-\n-    public MemorySegment allocateNoInit(long byteSize) {\n-        return allocateNoInit(byteSize, 1);\n-    }\n-\n-    public MemorySegment allocateNoInit(MemoryLayout layout) {\n-        Objects.requireNonNull(layout);\n-        return allocateNoInit(layout.byteSize(), layout.byteAlignment());\n-    }\n-\n-    public MemorySegment allocateNoInit(MemoryLayout layout, long size) {\n-        Objects.requireNonNull(layout);\n-        if (size < 0) {\n-            throw new IllegalArgumentException(\"Negative array size\");\n-        }\n-        return allocateNoInit(layout.byteSize() * size, layout.byteAlignment());\n+        return NativeMemorySegmentImpl.makeNativeSegment(byteSize, byteAlignment, session, shouldReserveMemory);\n@@ -77,2 +60,2 @@\n-        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n-        return NativeMemorySegmentImpl.makeNativeSegment(byteSize, byteAlignment, session, true, shouldReserveMemory);\n+        MemorySegment segment = allocateNoInit(byteSize, byteAlignment);\n+        return segment.fill((byte)0);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaImpl.java","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-                                                  boolean shouldInit, boolean shouldReserve) {\n+                                                  boolean shouldReserve) {\n@@ -131,3 +131,0 @@\n-        if (shouldInit) {\n-            UNSAFE.setMemory(buf, alignedSize, (byte)0);\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-    private final long maxAlign;\n@@ -40,1 +39,0 @@\n-        this.maxAlign = ((AbstractMemorySegmentImpl)segment).maxAlignMask();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SlicingAllocator.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+    @Stable\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/VM.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    public MemorySegment alloc() {\n+    public MemorySegment alloc_confined() {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocFromTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}