{"files":[{"patch":"@@ -164,11 +164,0 @@\n-  StubLocations locs;\n-  locs.set(StubLocations::TARGET_ADDRESS, _abi._scratch1);\n-  if (_needs_return_buffer) {\n-    locs.set_frame_data(StubLocations::RETURN_BUFFER, allocated_frame_size);\n-    allocated_frame_size += 8; \/\/ for address spill\n-  }\n-  if (_captured_state_mask != 0) {\n-    locs.set_frame_data(StubLocations::CAPTURED_STATE_MASK, allocated_frame_size);\n-    allocated_frame_size += 8;\n-  }\n-\n@@ -181,1 +170,3 @@\n-    \/\/ spill area can be shared with the above, so we take the max of the 2\n+    \/\/ spill area can be shared with shadow space and out args,\n+    \/\/ since they are only used before the call,\n+    \/\/ and spill area is only used after.\n@@ -187,0 +178,11 @@\n+  StubLocations locs;\n+  locs.set(StubLocations::TARGET_ADDRESS, _abi._scratch1);\n+  if (_needs_return_buffer) {\n+    locs.set_frame_data(StubLocations::RETURN_BUFFER, allocated_frame_size);\n+    allocated_frame_size += 8; \/\/ for address spill\n+  }\n+  if (_captured_state_mask != 0) {\n+    locs.set_frame_data(StubLocations::CAPTURED_STATE_MASK, allocated_frame_size);\n+    allocated_frame_size += 8;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -161,11 +161,0 @@\n-  StubLocations locs;\n-  locs.set(StubLocations::TARGET_ADDRESS, _abi._scratch1);\n-  if (_needs_return_buffer) {\n-    locs.set_frame_data(StubLocations::RETURN_BUFFER, allocated_frame_size);\n-    allocated_frame_size += 8;\n-  }\n-  if (_captured_state_mask != 0) {\n-    locs.set_frame_data(StubLocations::CAPTURED_STATE_MASK, allocated_frame_size);\n-    allocated_frame_size += 8;\n-  }\n-\n@@ -179,1 +168,3 @@\n-    \/\/ spill area can be shared with the above, so we take the max of the 2\n+    \/\/ spill area can be shared with shadow space and out args,\n+    \/\/ since they are only used before the call,\n+    \/\/ and spill area is only used after.\n@@ -184,0 +175,12 @@\n+\n+  StubLocations locs;\n+  locs.set(StubLocations::TARGET_ADDRESS, _abi._scratch1);\n+  if (_needs_return_buffer) {\n+    locs.set_frame_data(StubLocations::RETURN_BUFFER, allocated_frame_size);\n+    allocated_frame_size += 8;\n+  }\n+  if (_captured_state_mask != 0) {\n+    locs.set_frame_data(StubLocations::CAPTURED_STATE_MASK, allocated_frame_size);\n+    allocated_frame_size += 8;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -194,0 +194,4 @@\n+    public int numLeadingParams() {\n+        return 2 + (linkerOptions.hasCapturedCallState() ? 1 : 0); \/\/ 2 for addr, allocator\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-    public static MethodHandle adaptDowncallForIMR(MethodHandle handle, FunctionDescriptor cDesc) {\n+    public static MethodHandle adaptDowncallForIMR(MethodHandle handle, FunctionDescriptor cDesc, CallingSequence sequence) {\n@@ -116,1 +116,2 @@\n-        if (handle.type().parameterType(2) != MemorySegment.class)\n+        int imrAddrIdx = sequence.numLeadingParams();\n+        if (handle.type().parameterType(imrAddrIdx) != MemorySegment.class)\n@@ -123,1 +124,1 @@\n-        handle = mergeArguments(handle, 0, 3);  \/\/ (MemorySegment, MemorySegment, SegmentAllocator, ...) MemorySegment\n+        handle = mergeArguments(handle, 0, 1 + imrAddrIdx);  \/\/ (MemorySegment, MemorySegment, SegmentAllocator, ...) MemorySegment\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-            handle = SharedUtils.adaptDowncallForIMR(handle, cDesc);\n+            handle = SharedUtils.adaptDowncallForIMR(handle, cDesc, bindings.callingSequence);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-            handle = SharedUtils.adaptDowncallForIMR(handle, cDesc);\n+            handle = SharedUtils.adaptDowncallForIMR(handle, cDesc, bindings.callingSequence);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-            handle = SharedUtils.adaptDowncallForIMR(handle, cDesc);\n+            handle = SharedUtils.adaptDowncallForIMR(handle, cDesc, bindings.callingSequence);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.foreign.MemoryLayout;\n@@ -39,0 +40,2 @@\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.StructLayout;\n@@ -43,0 +46,2 @@\n+import java.util.Map;\n+import java.util.function.Consumer;\n@@ -45,0 +50,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_DOUBLE;\n@@ -46,0 +52,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n@@ -59,1 +66,1 @@\n-    private record SaveValuesCase(String nativeTarget, String threadLocalName) {}\n+    private record SaveValuesCase(String nativeTarget, FunctionDescriptor nativeDesc, String threadLocalName, Consumer<Object> resultCheck) {}\n@@ -64,1 +71,1 @@\n-        MethodHandle handle = downcallHandle(testCase.nativeTarget(), FunctionDescriptor.ofVoid(JAVA_INT), stl);\n+        MethodHandle handle = downcallHandle(testCase.nativeTarget(), testCase.nativeDesc(), stl);\n@@ -71,1 +78,5 @@\n-            handle.invoke(saveSeg, testValue);\n+            boolean needsAllocator = testCase.nativeDesc().returnLayout().map(StructLayout.class::isInstance).orElse(false);\n+            Object result = needsAllocator\n+                ? handle.invoke(arena, saveSeg, testValue)\n+                : handle.invoke(saveSeg, testValue);\n+            testCase.resultCheck().accept(result);\n@@ -81,1 +92,17 @@\n-        cases.add(new SaveValuesCase(\"set_errno\", \"errno\"));\n+        cases.add(new SaveValuesCase(\"set_errno_V\", FunctionDescriptor.ofVoid(JAVA_INT), \"errno\", o -> {}));\n+        cases.add(new SaveValuesCase(\"set_errno_I\", FunctionDescriptor.of(JAVA_INT, JAVA_INT), \"errno\", o -> assertEquals((int) o, 42)));\n+        cases.add(new SaveValuesCase(\"set_errno_D\", FunctionDescriptor.of(JAVA_DOUBLE, JAVA_INT), \"errno\", o -> assertEquals((double) o, 42.0)));\n+\n+        cases.add(structCase(\"SL\",  Map.of(JAVA_LONG.withName(\"x\"), 42L)));\n+        cases.add(structCase(\"SLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                           JAVA_LONG.withName(\"y\"), 42L)));\n+        cases.add(structCase(\"SLLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                            JAVA_LONG.withName(\"y\"), 42L,\n+                                            JAVA_LONG.withName(\"z\"), 42L)));\n+        cases.add(structCase(\"SD\",  Map.of(JAVA_DOUBLE.withName(\"x\"), 42D)));\n+        cases.add(structCase(\"SDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                           JAVA_DOUBLE.withName(\"y\"), 42D)));\n+        cases.add(structCase(\"SDDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                            JAVA_DOUBLE.withName(\"y\"), 42D,\n+                                            JAVA_DOUBLE.withName(\"z\"), 42D)));\n+\n@@ -83,2 +110,2 @@\n-            cases.add(new SaveValuesCase(\"SetLastError\", \"GetLastError\"));\n-            cases.add(new SaveValuesCase(\"WSASetLastError\", \"WSAGetLastError\"));\n+            cases.add(new SaveValuesCase(\"SetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"GetLastError\", o -> {}));\n+            cases.add(new SaveValuesCase(\"WSASetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"WSAGetLastError\", o -> {}));\n@@ -90,0 +117,14 @@\n+    static SaveValuesCase structCase(String name, Map<MemoryLayout, Object> fields) {\n+        StructLayout layout = MemoryLayout.structLayout(fields.keySet().toArray(MemoryLayout[]::new));\n+\n+        Consumer<Object> check = o -> {};\n+        for (var field : fields.entrySet()) {\n+            MemoryLayout fieldLayout = field.getKey();\n+            VarHandle fieldHandle = layout.varHandle(MemoryLayout.PathElement.groupElement(fieldLayout.name().get()));\n+            Object value = field.getValue();\n+            check = check.andThen(o -> assertEquals(fieldHandle.get(o), value));\n+        }\n+\n+        return new SaveValuesCase(\"set_errno_\" + name, FunctionDescriptor.of(layout, JAVA_INT), \"errno\", check);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":47,"deletions":6,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-EXPORT void set_errno(int value) {\n+EXPORT void set_errno_V(int value) {\n@@ -35,0 +35,88 @@\n+\n+EXPORT int set_errno_I(int value) {\n+    errno = value;\n+    return 42;\n+}\n+\n+EXPORT double set_errno_D(int value) {\n+    errno = value;\n+    return 42.0;\n+}\n+\n+struct SL {\n+    long long x;\n+};\n+\n+EXPORT struct SL set_errno_SL(int value) {\n+    errno = value;\n+    struct SL s;\n+    s.x = 42;\n+    return s;\n+}\n+\n+struct SLL {\n+    long long x;\n+    long long y;\n+};\n+\n+EXPORT struct SLL set_errno_SLL(int value) {\n+    errno = value;\n+    struct SLL s;\n+    s.x = 42;\n+    s.y = 42;\n+    return s;\n+}\n+\n+struct SLLL {\n+    long long x;\n+    long long y;\n+    long long z;\n+};\n+\n+EXPORT struct SLLL set_errno_SLLL(int value) {\n+    errno = value;\n+    struct SLLL s;\n+    s.x = 42;\n+    s.y = 42;\n+    s.z = 42;\n+    return s;\n+}\n+\n+struct SD {\n+    double x;\n+};\n+\n+EXPORT struct SD set_errno_SD(int value) {\n+    errno = value;\n+    struct SD s;\n+    s.x = 42.0;\n+    return s;\n+}\n+\n+struct SDD {\n+    double x;\n+    double y;\n+};\n+\n+EXPORT struct SDD set_errno_SDD(int value) {\n+    errno = value;\n+    struct SDD s;\n+    s.x = 42.0;\n+    s.y = 42.0;\n+    return s;\n+}\n+\n+struct SDDD {\n+    double x;\n+    double y;\n+    double z;\n+};\n+\n+EXPORT struct SDDD set_errno_SDDD(int value) {\n+    errno = value;\n+    struct SDDD s;\n+    s.x = 42.0;\n+    s.y = 42.0;\n+    s.z = 42.0;\n+    return s;\n+}\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/libCaptureCallState.c","additions":89,"deletions":1,"binary":false,"changes":90,"status":"modified"}]}