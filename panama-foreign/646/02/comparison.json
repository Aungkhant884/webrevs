{"files":[{"patch":"@@ -215,0 +215,14 @@\n+\n+        \/**\n+         * Names of function parameters (from typedef), if any\n+         * @return The optional list of function parameter names.\n+         *\/\n+        Optional<List<String>> parameterNames();\n+\n+        \/**\n+         * Returns a Function type that has the given parameter names.\n+         *\n+         * @param paramNames parameter names for this function type.\n+         * @return new Function type with the given parameter names.\n+         *\/\n+        Function withParameterNames(List<String> paramNames);\n@@ -467,1 +481,1 @@\n-        return new TypeImpl.FunctionImpl(varargs, Stream.of(arguments).collect(Collectors.toList()), returnType);\n+        return new TypeImpl.FunctionImpl(varargs, Stream.of(arguments).collect(Collectors.toList()), returnType, null);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/incubator\/jextract\/Type.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    TypeRef(CXCursor_TypeRef()),\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/CursorKind.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.util.List;\n+import java.util.Optional;\n@@ -44,0 +46,1 @@\n+    private final Optional<List<String>> parameterNames;\n@@ -51,0 +54,1 @@\n+        this.parameterNames = functionInfo.parameterNames();\n@@ -63,0 +67,8 @@\n+    private String parameterName(int i) {\n+        String name = \"\";\n+        if (parameterNames.isPresent()) {\n+            name = parameterNames.get().get(i);\n+        }\n+        return name.isEmpty()? \"_x\" + i : name;\n+    }\n+\n@@ -69,1 +81,3 @@\n-            append(delim + fiType.parameterType(i).getName() + \" x\" + i);\n+            append(delim + fiType.parameterType(i).getName());\n+            append(\" \");\n+            append(parameterName(i));\n@@ -95,1 +109,2 @@\n-            Constant mhConstant = constantBuilder.addMethodHandle(className(), className(), FunctionInfo.ofFunctionPointer(downcallType, fiType, fiDesc), true);\n+            Constant mhConstant = constantBuilder.addMethodHandle(className(), className(),\n+                 FunctionInfo.ofFunctionPointer(downcallType, fiType, fiDesc, parameterNames), true);\n@@ -106,1 +121,3 @@\n-                append(delim + fiType.parameterType(i).getName() + \" x\" + i);\n+                append(delim + fiType.parameterType(i).getName());\n+                append(\" \");\n+                append(parameterName(i));\n@@ -126,1 +143,1 @@\n-                            String paramExpr = \"x\" + i;\n+                            String paramExpr = parameterName(i);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -59,2 +59,3 @@\n-        static FunctionInfo ofFunctionPointer(MethodType upcallType, MethodType downcallType, FunctionDescriptor functionDescriptor) {\n-            return new FunctionInfo(upcallType, downcallType, functionDescriptor, false, Optional.empty());\n+        static FunctionInfo ofFunctionPointer(MethodType upcallType, MethodType downcallType, FunctionDescriptor functionDescriptor,\n+                 Optional<List<String>> parameterNames) {\n+            return new FunctionInfo(upcallType, downcallType, functionDescriptor, false, parameterNames);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/JavaSourceBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -231,3 +231,4 @@\n-        return functionInfo(func, name, false, (mtype, desc) -> FunctionInfo.ofFunctionPointer(mtype, getMethodType(func, true), desc))\n-                .map(fInfo -> currentBuilder.addFunctionalInterface(Utils.javaSafeIdentifier(name), fInfo))\n-                .orElse(null);\n+        return functionInfo(func, name, false,\n+                 (mtype, desc) -> FunctionInfo.ofFunctionPointer(mtype, getMethodType(func, true), desc, func.parameterNames()))\n+                 .map(fInfo -> currentBuilder.addFunctionalInterface(Utils.javaSafeIdentifier(name), fInfo))\n+                 .orElse(null);\n@@ -284,5 +285,1 @@\n-        if (type instanceof Type.Delegated) {\n-            Type.Delegated delegated = (Type.Delegated) type;\n-            return (delegated.kind() == Type.Delegated.Kind.POINTER) ?\n-                    getAsFunctionPointer(delegated.type()) : null;\n-        } else if (type instanceof Type.Function) {\n+        if (type instanceof Type.Function) {\n@@ -296,0 +293,2 @@\n+        } else if (Utils.isPointerType(type)) {\n+            return getAsFunctionPointer(((Type.Delegated)type).type());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -260,0 +260,30 @@\n+        Type.Function funcType = null;\n+        boolean isFuncPtrType = false;\n+        if (canonicalType instanceof Type.Function) {\n+            funcType = (Type.Function)canonicalType;\n+        } else if (Utils.isPointerType(canonicalType)) {\n+            Type pointeeType = null;\n+            try {\n+                pointeeType = ((Type.Delegated)canonicalType).type();\n+            } catch (NullPointerException npe) {\n+                \/\/ exception thrown for unresolved pointee type. Ignore if we hit that case.\n+            }\n+            if (pointeeType instanceof Type.Function) {\n+                funcType = (Type.Function)pointeeType;\n+                isFuncPtrType = true;\n+            }\n+        }\n+        if (funcType != null) {\n+            List<String> params = c.children().\n+                filter(ch -> ch.kind() == CursorKind.ParmDecl).\n+                map(this::createTree).\n+                map(Declaration.Variable.class::cast).\n+                map(Declaration::name).\n+                collect(Collectors.toList());\n+            if (!params.isEmpty()) {\n+                canonicalType = funcType.withParameterNames(params);\n+                if (isFuncPtrType) {\n+                    canonicalType = new TypeImpl.PointerImpl(canonicalType);\n+                }\n+            }\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TreeMaker.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -244,0 +244,1 @@\n+        private final Optional<List<String>> paramNames;\n@@ -245,1 +246,1 @@\n-        public FunctionImpl(boolean varargs, List<Type> argtypes, Type restype) {\n+        public FunctionImpl(boolean varargs, List<Type> argtypes, Type restype, List<String> paramNames) {\n@@ -250,0 +251,5 @@\n+            this.paramNames = Optional.ofNullable(paramNames);\n+        }\n+\n+        public FunctionImpl(boolean varargs, List<Type> argtypes, Type restype) {\n+            this(varargs, argtypes, restype, null);\n@@ -272,0 +278,11 @@\n+        @Override\n+        public Type.Function withParameterNames(List<String> paramNames) {\n+            Objects.requireNonNull(paramNames);\n+            return new FunctionImpl(varargs, argtypes, restype, paramNames);\n+        }\n+\n+        @Override\n+        public Optional<List<String>> parameterNames() {\n+            return paramNames;\n+        }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeImpl.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.stream.Collectors;\n@@ -45,0 +46,1 @@\n+import jdk.internal.clang.TypeKind;\n@@ -200,1 +202,5 @@\n-                return new TypeImpl.PointerImpl(reference(t.getPointeeType()));\n+                if (t.getPointeeType().kind() == TypeKind.FunctionProto) {\n+                    return new TypeImpl.PointerImpl(makeType(t.getPointeeType()));\n+                } else {\n+                    return new TypeImpl.PointerImpl(reference(t.getPointeeType()));\n+                }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeMaker.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.incubator.jextract.Type.Delegated;\n@@ -325,0 +326,9 @@\n+    static boolean isPointerType(jdk.incubator.jextract.Type type) {\n+        if (type instanceof Delegated) {\n+            Delegated delegated = (Delegated) type;\n+            return delegated.kind() == Delegated.Kind.POINTER;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/Utils.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+        commands.add(\"-parameters\");\n","filename":"test\/jdk\/tools\/jextract\/JtregJextractSources.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+import test.jextract.test8281764.*;\n+\n+\/*\n+ * @test id=sources\n+ * @bug 8281764\n+ * @summary jextract does not generate parameter names for function pointer typedefs\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run main\/othervm JtregJextractSources -l Test8281764 -t test.jextract.test8281764 -- test8281764.h\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8281764\n+ *\/\n+public class Test8281764 {\n+    @Test\n+    public void testFunctionalInterfaceParameterNames() throws NoSuchMethodException {\n+        var apply = func.class.getMethod(\"apply\", int.class);\n+        assertEquals(apply.getParameters()[0].getName(), \"foo\");\n+        apply = fptr.class.getMethod(\"apply\", int.class, int.class);\n+        assertEquals(apply.getParameters()[0].getName(), \"x\");\n+        assertEquals(apply.getParameters()[1].getName(), \"y\");\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8281764\/Test8281764.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -23,1 +23,0 @@\n-package p2;\n@@ -25,3 +24,2 @@\n-public interface TestIntf {\n-    String test();\n-}\n+typedef void func(int foo);\n+typedef void (*fptr)(int x, int y);\n","filename":"test\/jdk\/tools\/jextract\/test8281764\/test8281764.h","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/m2\/p2\/TestIntf.java","status":"copied"}]}