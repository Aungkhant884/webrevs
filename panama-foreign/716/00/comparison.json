{"files":[{"patch":"@@ -48,1 +48,1 @@\n- * A symbol lookup is created with respect to a particular library (or libraries). Subsequently, the {@link SymbolLookup#lookup(String)}\n+ * A symbol lookup is created with respect to a particular library (or libraries). Subsequently, the {@link SymbolLookup#find(String)}\n@@ -67,1 +67,1 @@\n- * {@snippet lang=java :\n+ * {@snippet lang = java:\n@@ -70,1 +70,1 @@\n- *     MemorySegment glGetString = libGL.lookup(\"glGetString\").orElseThrow();\n+ *     MemorySegment glGetString = libGL.find(\"glGetString\").orElseThrow();\n@@ -73,1 +73,1 @@\n- * }\n+ *}\n@@ -83,1 +83,1 @@\n- * MemorySegment glGetString = libGL.lookup(\"glGetString\").orElseThrow();\n+ * MemorySegment glGetString = libGL.find(\"glGetString\").orElseThrow();\n@@ -94,4 +94,4 @@\n- * {@snippet lang=java :\n- * libraryLookup(\"libGL.so\", session).lookup(\"glGetString\").isPresent(); \/\/ true\n- * loaderLookup().lookup(\"glGetString\").isPresent(); \/\/ false\n- * }\n+ * {@snippet lang = java:\n+ * libraryLookup(\"libGL.so\", session).find(\"glGetString\").isPresent(); \/\/ true\n+ * loaderLookup().find(\"glGetString\").isPresent(); \/\/ false\n+ *}\n@@ -102,1 +102,1 @@\n- * {@snippet lang=java :\n+ * {@snippet lang = java:\n@@ -104,2 +104,2 @@\n- * libraryLookup(\"libGL.so\", session).lookup(\"glGetString\").isPresent(); \/\/ true\n- * }\n+ * libraryLookup(\"libGL.so\", session).find(\"glGetString\").isPresent(); \/\/ true\n+ *}\n@@ -113,1 +113,1 @@\n- * {@snippet lang=java :\n+ * {@snippet lang = java:\n@@ -116,2 +116,2 @@\n- * MemorySegment malloc = stdlib.lookup(\"malloc\").orElseThrow();\n- * }\n+ * MemorySegment malloc = stdlib.find(\"malloc\").orElseThrow();\n+ *}\n@@ -128,1 +128,1 @@\n-    Optional<MemorySegment> lookup(String name);\n+    Optional<MemorySegment> find(String name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n- * {@snippet lang=java :\n+ * {@snippet lang = java:\n@@ -117,1 +117,1 @@\n- *     stdlib.lookup(\"strlen\").get(),\n+ *     stdlib.find(\"strlen\").get(),\n@@ -126,1 +126,1 @@\n- * }\n+ *}\n@@ -129,1 +129,1 @@\n- * to {@linkplain java.lang.foreign.SymbolLookup#lookup(java.lang.String) look up} the {@code strlen} symbol in the\n+ * to {@linkplain java.lang.foreign.SymbolLookup#find(java.lang.String) look up} the {@code strlen} symbol in the\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            MemorySegment funcs = MemorySegment.ofAddress(fallbackLibLookup.lookup(\"funcs\").orElseThrow().address(),\n+            MemorySegment funcs = MemorySegment.ofAddress(fallbackLibLookup.find(\"funcs\").orElseThrow().address(),\n@@ -95,1 +95,1 @@\n-            lookup = name -> finalLookup.lookup(name).or(() -> fallbackLookup.apply(name));\n+            lookup = name -> finalLookup.find(name).or(() -> fallbackLookup.apply(name));\n@@ -135,2 +135,2 @@\n-    public Optional<MemorySegment> lookup(String name) {\n-        return SYSTEM_LOOKUP.lookup(name);\n+    public Optional<MemorySegment> find(String name) {\n+        return SYSTEM_LOOKUP.find(name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        MemorySegment addr = lib.lookup(\"inc\").get();\n+        MemorySegment addr = lib.find(\"inc\").get();\n","filename":"test\/jdk\/java\/foreign\/LibraryLookupTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-            LINKER.defaultLookup().lookup(\"free\").get(), FunctionDescriptor.ofVoid(C_POINTER));\n+            LINKER.defaultLookup().find(\"free\").get(), FunctionDescriptor.ofVoid(C_POINTER));\n@@ -92,1 +92,1 @@\n-            LINKER.defaultLookup().lookup(\"malloc\").get(), FunctionDescriptor.of(C_POINTER, C_LONG_LONG));\n+            LINKER.defaultLookup().find(\"malloc\").get(), FunctionDescriptor.of(C_POINTER, C_LONG_LONG));\n@@ -111,1 +111,1 @@\n-        return SymbolLookup.loaderLookup().lookup(name).orElseThrow();\n+        return SymbolLookup.loaderLookup().find(name).orElseThrow();\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-        final static MethodHandle strcat = abi.downcallHandle(abi.defaultLookup().lookup(\"strcat\").get(),\n+        final static MethodHandle strcat = abi.downcallHandle(abi.defaultLookup().find(\"strcat\").get(),\n@@ -158,1 +158,1 @@\n-        final static MethodHandle strcmp = abi.downcallHandle(abi.defaultLookup().lookup(\"strcmp\").get(),\n+        final static MethodHandle strcmp = abi.downcallHandle(abi.defaultLookup().find(\"strcmp\").get(),\n@@ -161,1 +161,1 @@\n-        final static MethodHandle puts = abi.downcallHandle(abi.defaultLookup().lookup(\"puts\").get(),\n+        final static MethodHandle puts = abi.downcallHandle(abi.defaultLookup().find(\"puts\").get(),\n@@ -164,1 +164,1 @@\n-        final static MethodHandle strlen = abi.downcallHandle(abi.defaultLookup().lookup(\"strlen\").get(),\n+        final static MethodHandle strlen = abi.downcallHandle(abi.defaultLookup().find(\"strlen\").get(),\n@@ -167,1 +167,1 @@\n-        final static MethodHandle gmtime = abi.downcallHandle(abi.defaultLookup().lookup(\"gmtime\").get(),\n+        final static MethodHandle gmtime = abi.downcallHandle(abi.defaultLookup().find(\"gmtime\").get(),\n@@ -170,1 +170,1 @@\n-        final static MethodHandle qsort = abi.downcallHandle(abi.defaultLookup().lookup(\"qsort\").get(),\n+        final static MethodHandle qsort = abi.downcallHandle(abi.defaultLookup().find(\"qsort\").get(),\n@@ -177,1 +177,1 @@\n-        final static MethodHandle rand = abi.downcallHandle(abi.defaultLookup().lookup(\"rand\").get(),\n+        final static MethodHandle rand = abi.downcallHandle(abi.defaultLookup().find(\"rand\").get(),\n@@ -180,1 +180,1 @@\n-        final static MethodHandle vprintf = abi.downcallHandle(abi.defaultLookup().lookup(\"vprintf\").get(),\n+        final static MethodHandle vprintf = abi.downcallHandle(abi.defaultLookup().find(\"vprintf\").get(),\n@@ -183,1 +183,1 @@\n-        final static MemorySegment printfAddr = abi.defaultLookup().lookup(\"printf\").get();\n+        final static MemorySegment printfAddr = abi.defaultLookup().find(\"printf\").get();\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        assertFalse(SymbolLookup.loaderLookup().lookup(\"f\").isEmpty());\n+        assertFalse(SymbolLookup.loaderLookup().find(\"f\").isEmpty());\n@@ -57,1 +57,1 @@\n-        assertTrue(SymbolLookup.loaderLookup().lookup(\"nonExistent\").isEmpty());\n+        assertTrue(SymbolLookup.loaderLookup().find(\"nonExistent\").isEmpty());\n@@ -63,1 +63,1 @@\n-                SymbolLookup.loaderLookup().lookup(\"c\").get().address(),\n+                SymbolLookup.loaderLookup().find(\"c\").get().address(),\n","filename":"test\/jdk\/java\/foreign\/TestClassLoaderFindNative.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        assertTrue(Linker.nativeLinker().defaultLookup().lookup(\"nonExistentSymbol\").isEmpty());\n+        assertTrue(Linker.nativeLinker().defaultLookup().find(\"nonExistentSymbol\").isEmpty());\n","filename":"test\/jdk\/java\/foreign\/TestFallbackLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        MethodHandle mh = LINKER.downcallHandle(SymbolLookup.loaderLookup().lookup(\"get_null\").get(),\n+        MethodHandle mh = LINKER.downcallHandle(SymbolLookup.loaderLookup().find(\"get_null\").get(),\n@@ -76,1 +76,1 @@\n-        MethodHandle mh = LINKER.downcallHandle(SymbolLookup.loaderLookup().lookup(\"get_null\").get(),\n+        MethodHandle mh = LINKER.downcallHandle(SymbolLookup.loaderLookup().find(\"get_null\").get(),\n","filename":"test\/jdk\/java\/foreign\/TestNULLAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        assertTrue(loaderLookup.lookup(\"Java_TestLoaderLookupJNI_loaderLookup0\").isPresent());\n+        assertTrue(loaderLookup.find(\"Java_TestLoaderLookupJNI_loaderLookup0\").isPresent());\n@@ -48,1 +48,1 @@\n-        assertTrue(loaderLookup.lookup(\"Java_TestLoaderLookupJNI_loaderLookup0\").isPresent());\n+        assertTrue(loaderLookup.find(\"Java_TestLoaderLookupJNI_loaderLookup0\").isPresent());\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/TestLoaderLookupJNI.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        return SymbolLookup.loaderLookup().lookup(\"foo\").get();\n+        return SymbolLookup.loaderLookup().find(\"foo\").get();\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/lookup\/Lookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            LINKER.defaultLookup().lookup(\"free\").get(), FunctionDescriptor.ofVoid(ValueLayout.ADDRESS));\n+            LINKER.defaultLookup().find(\"free\").get(), FunctionDescriptor.ofVoid(ValueLayout.ADDRESS));\n@@ -77,1 +77,1 @@\n-            LINKER.defaultLookup().lookup(\"malloc\").get(), FunctionDescriptor.of(ValueLayout.ADDRESS.asUnbounded(), ValueLayout.JAVA_LONG));\n+            LINKER.defaultLookup().find(\"malloc\").get(), FunctionDescriptor.of(ValueLayout.ADDRESS.asUnbounded(), ValueLayout.JAVA_LONG));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CLayouts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            func_addr = loaderLibs.lookup(\"func\").orElseThrow();\n+            func_addr = loaderLibs.find(\"func\").orElseThrow();\n@@ -103,1 +103,1 @@\n-            identity_addr = loaderLibs.lookup(\"identity\").orElseThrow();\n+            identity_addr = loaderLibs.find(\"identity\").orElseThrow();\n@@ -108,1 +108,1 @@\n-        identity_struct_addr = loaderLibs.lookup(\"identity_struct\").orElseThrow();\n+        identity_struct_addr = loaderLibs.find(\"identity_struct\").orElseThrow();\n@@ -113,1 +113,1 @@\n-        identity_struct_3_addr = loaderLibs.lookup(\"identity_struct_3\").orElseThrow();\n+        identity_struct_3_addr = loaderLibs.find(\"identity_struct_3\").orElseThrow();\n@@ -118,1 +118,1 @@\n-        identity_memory_address_addr = loaderLibs.lookup(\"identity_memory_address\").orElseThrow();\n+        identity_memory_address_addr = loaderLibs.find(\"identity_memory_address\").orElseThrow();\n@@ -123,1 +123,1 @@\n-        identity_memory_address_3_addr = loaderLibs.lookup(\"identity_memory_address_3\").orElseThrow();\n+        identity_memory_address_3_addr = loaderLibs.find(\"identity_memory_address_3\").orElseThrow();\n@@ -128,1 +128,1 @@\n-        args1_addr = loaderLibs.lookup(\"args1\").orElseThrow();\n+        args1_addr = loaderLibs.find(\"args1\").orElseThrow();\n@@ -133,1 +133,1 @@\n-        args2_addr = loaderLibs.lookup(\"args2\").orElseThrow();\n+        args2_addr = loaderLibs.find(\"args2\").orElseThrow();\n@@ -138,1 +138,1 @@\n-        args3_addr = loaderLibs.lookup(\"args3\").orElseThrow();\n+        args3_addr = loaderLibs.find(\"args3\").orElseThrow();\n@@ -143,1 +143,1 @@\n-        args4_addr = loaderLibs.lookup(\"args4\").orElseThrow();\n+        args4_addr = loaderLibs.find(\"args4\").orElseThrow();\n@@ -148,1 +148,1 @@\n-        args5_addr = loaderLibs.lookup(\"args5\").orElseThrow();\n+        args5_addr = loaderLibs.find(\"args5\").orElseThrow();\n@@ -153,1 +153,1 @@\n-        args10_addr = loaderLibs.lookup(\"args10\").orElseThrow();\n+        args10_addr = loaderLibs.find(\"args10\").orElseThrow();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadHelper.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        F_LONG = abi.downcallHandle(loaderLibs.lookup(\"func_as_long\").get(),\n+        F_LONG = abi.downcallHandle(loaderLibs.find(\"func_as_long\").get(),\n@@ -71,1 +71,1 @@\n-        F_PTR = abi.downcallHandle(loaderLibs.lookup(\"func_as_ptr\").get(),\n+        F_PTR = abi.downcallHandle(loaderLibs.find(\"func_as_ptr\").get(),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    static MemorySegment qsort_addr = abi.defaultLookup().lookup(\"qsort\").get();\n+    static MemorySegment qsort_addr = abi.defaultLookup().find(\"qsort\").get();\n@@ -79,1 +79,1 @@\n-            native_compar = SymbolLookup.loaderLookup().lookup(\"compar\").orElseThrow();\n+            native_compar = SymbolLookup.loaderLookup().find(\"compar\").orElseThrow();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/QSort.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        STRLEN = abi.downcallHandle(abi.defaultLookup().lookup(\"strlen\").get(),\n+        STRLEN = abi.downcallHandle(abi.defaultLookup().find(\"strlen\").get(),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-                SymbolLookup.loaderLookup().lookup(name).orElseThrow(),\n+                SymbolLookup.loaderLookup().find(name).orElseThrow(),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/Upcalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        MH_ellipsis = linker.downcallHandle(loaderLibs.lookup(\"ellipsis\").get(),\n+        MH_ellipsis = linker.downcallHandle(loaderLibs.find(\"ellipsis\").get(),\n@@ -62,1 +62,1 @@\n-        MH_vaList = linker.downcallHandle(loaderLibs.lookup(\"vaList\").get(),\n+        MH_vaList = linker.downcallHandle(loaderLibs.find(\"vaList\").get(),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/VaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                loaderLibs.lookup(\"distance\").get(),\n+                loaderLibs.find(\"distance\").get(),\n@@ -59,1 +59,1 @@\n-                loaderLibs.lookup(\"distance_ptrs\").get(),\n+                loaderLibs.find(\"distance_ptrs\").get(),\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}