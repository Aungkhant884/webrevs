{"files":[{"patch":"@@ -187,2 +187,2 @@\n-     * @throws IllegalArgumentException if this segment size is not a multiple of the size of {@code elementLayout},\n-     * or if this segment size is smaller than the size of {@code elementLayout}.\n+     * @throws IllegalArgumentException if the {@code elementLayout} size is zero, or the segment size modulo the\n+     * {@code elementLayout} size is greater than zero.\n@@ -201,2 +201,2 @@\n-     * @throws IllegalArgumentException if this segment size is not a multiple of the size of {@code elementLayout},\n-     * or if this segment size is smaller than the size of {@code elementLayout}.\n+     * @throws IllegalArgumentException if the {@code elementLayout} size is zero, or the segment size modulo the\n+     * {@code elementLayout} size is greater than zero.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -121,0 +121,3 @@\n+        if (elementLayout.byteSize() == 0) {\n+            throw new IllegalArgumentException(\"Element layout size cannot be zero\");\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -121,0 +121,10 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadSpliteratorElementSizeZero() {\n+        MemorySegment.ofArray(new byte[7]).spliterator(MemoryLayout.sequenceLayout(0, MemoryLayouts.JAVA_INT));\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadStreamElementSizeZero() {\n+        MemorySegment.ofArray(new byte[7]).elements(MemoryLayout.sequenceLayout(0, MemoryLayouts.JAVA_INT));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}