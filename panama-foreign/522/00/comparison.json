{"files":[{"patch":"@@ -187,1 +187,2 @@\n-     * @throws IllegalArgumentException if this segment size is not a multiple of the size of {@code elementLayout}.\n+     * @throws IllegalArgumentException if this segment size is not a multiple of the size of {@code elementLayout},\n+     * or if this segment size is smaller than the size of {@code elementLayout}.\n@@ -200,1 +201,2 @@\n-     * @throws IllegalArgumentException if this segment size is not a multiple of the size of {@code elementLayout}.\n+     * @throws IllegalArgumentException if this segment size is not a multiple of the size of {@code elementLayout},\n+     * or if this segment size is smaller than the size of {@code elementLayout}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -101,0 +101,20 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadSpliteratorElementSizeTooBig() {\n+        MemorySegment.ofArray(new byte[2]).spliterator(MemoryLayouts.JAVA_INT);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadStreamElementSizeTooBig() {\n+        MemorySegment.ofArray(new byte[2]).elements(MemoryLayouts.JAVA_INT);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadSpliteratorElementSizeNotMultiple() {\n+        MemorySegment.ofArray(new byte[7]).spliterator(MemoryLayouts.JAVA_INT);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadStreamElementSizeNotMultiple() {\n+        MemorySegment.ofArray(new byte[7]).elements(MemoryLayouts.JAVA_INT);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}