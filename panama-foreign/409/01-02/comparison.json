{"files":[{"patch":"@@ -233,1 +233,12 @@\n-        return UnsupportedLayouts.isUnsupported(layout);\n+        if (layout instanceof ValueLayout) {\n+            return UnsupportedLayouts.isUnsupported((ValueLayout)layout);\n+        } else if (layout instanceof GroupLayout) {\n+            GroupLayout gl = (GroupLayout)layout;\n+            for (MemoryLayout ml : gl.memberLayouts()) {\n+                if (isUnsupported(ml)) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        return false;\n@@ -401,1 +412,3 @@\n-            warn(\"skipping \" + fieldName + \" because of unsupported type usage: \" + layout.name().get());\n+            String name = parent != null? parent.name() + \".\" : \"\";\n+            name += fieldName;\n+            warn(\"skipping \" + name + \" because of unsupported type usage: \" + layout.name().get());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -452,0 +452,4 @@\n+        if (UnsupportedLayouts.isUnsupported(vl)) {\n+            return \"MemoryLayout.ofPaddingBits(\" + vl.bitSize() + \")\";\n+        }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/SourceConstantHelper.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.incubator.foreign.CLinker;\n@@ -32,0 +31,3 @@\n+\/*\n+ * Layouts for the primitive types not supported by ABI implementations.\n+ *\/\n@@ -35,0 +37,3 @@\n+    private static final String ATTR_UNSUPPORTED = \"jextract.abi.unsupported.types\";\n+    private static final String ATTR_SOURCE_FORM = \"jextract.abi.unsupported.types.source.form\";\n+\n@@ -36,1 +41,1 @@\n-            withName(\"__int128\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.LONG_LONG);\n+            withName(\"__int128\").withAttribute(ATTR_UNSUPPORTED, true);\n@@ -39,1 +44,1 @@\n-            withName(\"long double\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.DOUBLE);\n+            withName(\"long double\").withAttribute(ATTR_UNSUPPORTED, true);\n@@ -42,1 +47,1 @@\n-            withName(\"_float128\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.DOUBLE);\n+            withName(\"_float128\").withAttribute(ATTR_UNSUPPORTED, true);\n@@ -45,1 +50,1 @@\n-            withName(\"__fp16\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.FLOAT);\n+            withName(\"__fp16\").withAttribute(ATTR_UNSUPPORTED, true);\n@@ -48,1 +53,1 @@\n-            withName(\"char16\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.SHORT);\n+            withName(\"char16\").withAttribute(ATTR_UNSUPPORTED, true);\n@@ -51,1 +56,1 @@\n-            withName(\"wchar_t\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.SHORT);\n+            withName(\"wchar_t\").withAttribute(ATTR_UNSUPPORTED, true);\n@@ -53,4 +58,2 @@\n-    public static boolean isUnsupported(MemoryLayout layout) {\n-        return layout == __INT128 || layout == LONG_DOUBLE ||\n-                layout == _FLOAT128  || layout == __FP16 ||\n-                layout == CHAR16 ||  layout == WCHAT_T;\n+    static boolean isUnsupported(ValueLayout vl) {\n+        return vl.attribute(ATTR_UNSUPPORTED).isPresent();\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnsupportedLayouts.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.GroupLayout;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemoryLayout.PathElement;\n+import org.testng.annotations.Test;\n+\n+import test.jextract.unsupported.unsupported_h;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+import static test.jextract.unsupported.unsupported_h.*;\n+\n+\/*\n+ * @test id=classes\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run driver JtregJextract -l unsupported -t test.jextract.unsupported -- unsupported.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibUnsupportedTest\n+ *\/\n+\n+\/*\n+ * @test id=sources\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ *\n+ * @run driver JtregJextractSources -l unsupported -t test.jextract.unsupported -- unsupported.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibUnsupportedTest\n+ *\/\n+\n+public class LibUnsupportedTest {\n+    @Test\n+    public void testAllocateFoo() {\n+        try (var seg = Foo.allocate()) {\n+            Foo.i$set(seg, 32);\n+            Foo.c$set(seg, (byte)'z');\n+            assertEquals(Foo.i$get(seg), 32);\n+            assertEquals(Foo.c$get(seg), (byte)'z');\n+        }\n+    }\n+\n+    @Test\n+    public void testGetFoo() {\n+        var seg = getFoo().asSegmentRestricted(Foo.sizeof());\n+        Foo.i$set(seg, 42);\n+        Foo.c$set(seg, (byte)'j');\n+        assertEquals(Foo.i$get(seg), 42);\n+        assertEquals(Foo.c$get(seg), (byte)'j');\n+    }\n+\n+    private static void checkField(GroupLayout group, String fieldName, MemoryLayout expected) {\n+        assertEquals(group.select(PathElement.groupElement(fieldName)), expected.withName(fieldName));\n+    }\n+\n+    @Test\n+    public void testFieldTypes() {\n+        GroupLayout g = (GroupLayout)Foo.$LAYOUT();\n+        checkField(g, \"i\", CLinker.C_INT);\n+        checkField(g, \"c\", CLinker.C_CHAR);\n+    }\n+\n+    @Test\n+    public void testIgnoredMethods() {\n+        assertNull(findMethod(unsupported_h.class, \"func\"));\n+        assertNull(findMethod(unsupported_h.class, \"makeFoo\"));\n+        assertNull(findMethod(unsupported_h.class, \"copyFoo\"));\n+    }\n+\n+    private Method findMethod(Class<?> cls, String name) {\n+        for (Method m : cls.getMethods()) {\n+            if (m.getName().equals(name)) {\n+                return m;\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/LibUnsupportedTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"unsupported.h\"\n+\n+static Foo f = { 42, 343.55, 'j' };\n+\n+EXPORT Foo* getFoo() {\n+    return &f;\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/libUnsupported.c","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif \/\/ __cplusplus\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+typedef struct Foo {\n+    int i;\n+    long double ld;\n+    char c;\n+} Foo;\n+\n+EXPORT void func(long double ll);\n+EXPORT Foo* getFoo();\n+EXPORT Foo makeFoo();\n+EXPORT void copyFoo(Foo f1, Foo f2);\n+\n+long double ld;\n+\n+#ifdef __cplusplus\n+}\n+#endif \/\/ __cplusplus\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/unsupported.h","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}