{"files":[{"patch":"@@ -817,1 +817,1 @@\n-<a class=\"sourceLine\" id=\"cb38-36\" title=\"36\">            var size = scope.<span class=\"fu\">allocate<\/span>(C_LONGLONG);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-36\" title=\"36\">            var size = scope.<span class=\"fu\">allocate<\/span>(C_LONG_LONG);<\/a>\n","filename":"doc\/panama_jextract.html","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -869,1 +869,1 @@\n-            var size = scope.allocate(C_LONGLONG);\n+            var size = scope.allocate(C_LONG_LONG);\n","filename":"doc\/panama_jextract.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.jextract.impl.UnsupportedLayouts;\n@@ -106,5 +107,1 @@\n-            Char16(\"char16\", null),\n-            \/**\n-             * {@code char32} type.\n-             *\/\n-            Char32(\"char32\", null),\n+            Char16(\"char16\", UnsupportedLayouts.CHAR16),\n@@ -130,1 +127,1 @@\n-            Int128(\"__int128\", null),\n+            Int128(\"__int128\", UnsupportedLayouts.__INT128),\n@@ -139,0 +136,4 @@\n+            \/**\n+              * {@code long double} type.\n+              *\/\n+            LongDouble(\"long double\", UnsupportedLayouts.LONG_DOUBLE),\n@@ -142,1 +143,1 @@\n-            Float128(\"float128\", null),\n+            Float128(\"float128\", UnsupportedLayouts._FLOAT128),\n@@ -146,1 +147,1 @@\n-            HalfFloat(\"__fp16\", null),\n+            HalfFloat(\"__fp16\", UnsupportedLayouts.__FP16),\n@@ -150,1 +151,1 @@\n-            WChar(\"wchar_t\", null);\n+            WChar(\"wchar_t\", UnsupportedLayouts.WCHAR_T);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/incubator\/jextract\/Type.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+            case LongDouble:\n+                return Primitive.Kind.LongDouble.layout().orElseThrow(unsupported);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/LayoutUtils.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -232,0 +232,29 @@\n+    private static boolean isUnsupported(MemoryLayout layout) {\n+        if (layout instanceof ValueLayout) {\n+            return UnsupportedLayouts.isUnsupported((ValueLayout)layout);\n+        } else if (layout instanceof GroupLayout) {\n+            GroupLayout gl = (GroupLayout)layout;\n+            for (MemoryLayout ml : gl.memberLayouts()) {\n+                if (isUnsupported(ml)) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private static MemoryLayout isUnsupported(FunctionDescriptor desc) {\n+        if (isUnsupported(desc.returnLayout().orElse(null))) {\n+            return desc.returnLayout().orElse(null);\n+        }\n+\n+        for (MemoryLayout argLayout : desc.argumentLayouts()) {\n+            if (isUnsupported(argLayout)) {\n+                return argLayout;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n@@ -238,1 +267,0 @@\n-        MethodType mtype = typeTranslator.getMethodType(funcTree.type());\n@@ -245,0 +273,8 @@\n+        MemoryLayout unsupportedLayout = isUnsupported(descriptor);\n+        if (unsupportedLayout != null) {\n+            warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage: \" + unsupportedLayout.name().get());\n+            return null;\n+        }\n+\n+        MethodType mtype = typeTranslator.getMethodType(funcTree.type());\n+\n@@ -270,2 +306,1 @@\n-        header().addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), mtype,\n-                Type.descriptorFor(funcTree.type()).orElseThrow(), funcTree.type().varargs(), paramNames, annos, returnAnno);\n+\n@@ -283,2 +318,9 @@\n-                toplevelBuilder.addFunctionalInterface(name, fitype,\n-                        Type.descriptorFor(f).orElseThrow(), param.type());\n+                FunctionDescriptor fpDesc = Type.descriptorFor(f).orElseThrow();\n+                unsupportedLayout = isUnsupported(fpDesc);\n+                if (unsupportedLayout != null) {\n+                    warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage: \" +\n+                            unsupportedLayout.name().get() + \" in \" + param.name());\n+                    return null;\n+                }\n+\n+                toplevelBuilder.addFunctionalInterface(name, fitype, fpDesc, param.type());\n@@ -288,0 +330,4 @@\n+\n+        header().addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), mtype,\n+                Type.descriptorFor(funcTree.type()).orElseThrow(), funcTree.type().varargs(), paramNames, annos, returnAnno);\n+\n@@ -376,0 +422,6 @@\n+        if (isUnsupported(layout)) {\n+            String name = parent != null? parent.name() + \".\" : \"\";\n+            name += fieldName;\n+            warn(\"skipping \" + name + \" because of unsupported type usage: \" + layout.name().get());\n+        }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":57,"deletions":5,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -452,0 +452,4 @@\n+        if (UnsupportedLayouts.isUnsupported(vl)) {\n+            return \"MemoryLayout.ofPaddingBits(\" + vl.bitSize() + \")\";\n+        }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/SourceConstantHelper.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -215,0 +215,1 @@\n+                return Type.primitive(Primitive.Kind.WChar);\n@@ -216,0 +217,1 @@\n+                return Type.primitive(Primitive.Kind.Char16);\n@@ -217,0 +219,1 @@\n+                return Type.primitive(Primitive.Kind.HalfFloat);\n@@ -218,1 +221,7 @@\n-            case UInt128: \/\/unsupported\n+                return Type.primitive(Primitive.Kind.Int128);\n+            case LongDouble: \/\/unsupported\n+                return Type.primitive(Primitive.Kind.LongDouble);\n+            case UInt128: { \/\/unsupported\n+                Type iType = Type.primitive(Primitive.Kind.Int128);\n+                return Type.qualified(Delegated.Kind.UNSIGNED, iType);\n+            }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeMaker.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+            case LongDouble:\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeTranslator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.jextract.impl;\n+\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.ValueLayout;\n+import java.nio.ByteOrder;\n+\n+\/*\n+ * Layouts for the primitive types not supported by ABI implementations.\n+ *\/\n+public final class UnsupportedLayouts {\n+    private UnsupportedLayouts() {}\n+\n+    private static final String ATTR_UNSUPPORTED = \"jextract.abi.unsupported.types\";\n+    private static final String ATTR_SOURCE_FORM = \"jextract.abi.unsupported.types.source.form\";\n+\n+    public static final ValueLayout __INT128 = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+            withName(\"__int128\").withAttribute(ATTR_UNSUPPORTED, true);\n+\n+    public static final ValueLayout LONG_DOUBLE = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+            withName(\"long double\").withAttribute(ATTR_UNSUPPORTED, true);\n+\n+    public static final ValueLayout _FLOAT128 = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+            withName(\"_float128\").withAttribute(ATTR_UNSUPPORTED, true);\n+\n+    public static final ValueLayout __FP16 = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+            withName(\"__fp16\").withAttribute(ATTR_UNSUPPORTED, true);\n+\n+    public static final ValueLayout CHAR16 = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+            withName(\"char16\").withAttribute(ATTR_UNSUPPORTED, true);\n+\n+    public static final ValueLayout WCHAR_T = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+            withName(\"wchar_t\").withAttribute(ATTR_UNSUPPORTED, true);\n+\n+    static boolean isUnsupported(ValueLayout vl) {\n+        return vl.attribute(ATTR_UNSUPPORTED).isPresent();\n+    }\n+}\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnsupportedLayouts.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.GroupLayout;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemoryLayout.PathElement;\n+import org.testng.annotations.Test;\n+\n+import test.jextract.unsupported.unsupported_h;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+import static test.jextract.unsupported.unsupported_h.*;\n+\n+\/*\n+ * @test id=classes\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run driver JtregJextract -l unsupported -t test.jextract.unsupported -- unsupported.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibUnsupportedTest\n+ *\/\n+\n+\/*\n+ * @test id=sources\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ *\n+ * @run driver JtregJextractSources -l unsupported -t test.jextract.unsupported -- unsupported.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibUnsupportedTest\n+ *\/\n+\n+public class LibUnsupportedTest {\n+    @Test\n+    public void testAllocateFoo() {\n+        try (var seg = Foo.allocate()) {\n+            Foo.i$set(seg, 32);\n+            Foo.c$set(seg, (byte)'z');\n+            assertEquals(Foo.i$get(seg), 32);\n+            assertEquals(Foo.c$get(seg), (byte)'z');\n+        }\n+    }\n+\n+    @Test\n+    public void testGetFoo() {\n+        var seg = getFoo().asSegmentRestricted(Foo.sizeof());\n+        Foo.i$set(seg, 42);\n+        Foo.c$set(seg, (byte)'j');\n+        assertEquals(Foo.i$get(seg), 42);\n+        assertEquals(Foo.c$get(seg), (byte)'j');\n+    }\n+\n+    private static void checkField(GroupLayout group, String fieldName, MemoryLayout expected) {\n+        assertEquals(group.select(PathElement.groupElement(fieldName)), expected.withName(fieldName));\n+    }\n+\n+    @Test\n+    public void testFieldTypes() {\n+        GroupLayout g = (GroupLayout)Foo.$LAYOUT();\n+        checkField(g, \"i\", CLinker.C_INT);\n+        checkField(g, \"c\", CLinker.C_CHAR);\n+    }\n+\n+    @Test\n+    public void testIgnoredMethods() {\n+        assertNull(findMethod(unsupported_h.class, \"func\"));\n+        assertNull(findMethod(unsupported_h.class, \"func2\"));\n+        assertNull(findMethod(unsupported_h.class, \"func3\"));\n+        assertNull(findMethod(unsupported_h.class, \"func4\"));\n+        assertNull(findMethod(unsupported_h.class, \"makeFoo\"));\n+        assertNull(findMethod(unsupported_h.class, \"copyFoo\"));\n+    }\n+\n+    private Method findMethod(Class<?> cls, String name) {\n+        for (Method m : cls.getMethods()) {\n+            if (m.getName().equals(name)) {\n+                return m;\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/LibUnsupportedTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"unsupported.h\"\n+\n+static Foo f = { 42, 343.55, 'j' };\n+\n+EXPORT Foo* getFoo() {\n+    return &f;\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/libUnsupported.c","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif \/\/ __cplusplus\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+typedef struct Foo {\n+    int i;\n+    long double ld;\n+    char c;\n+} Foo;\n+\n+EXPORT void func(long double ll);\n+EXPORT void func2(void (*f)(long double l));\n+EXPORT void func3(long double (*f)());\n+EXPORT void func4(void (*f)(Foo f));\n+EXPORT Foo* getFoo();\n+EXPORT Foo makeFoo();\n+EXPORT void copyFoo(Foo f1, Foo f2);\n+\n+long double ld;\n+\n+#ifdef __cplusplus\n+}\n+#endif \/\/ __cplusplus\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/unsupported.h","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -54,0 +54,1 @@\n+    long double ld;\n","filename":"test\/jdk\/tools\/jextract\/testStruct\/struct.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}