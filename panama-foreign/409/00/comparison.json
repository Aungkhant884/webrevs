{"files":[{"patch":"@@ -817,1 +817,1 @@\n-<a class=\"sourceLine\" id=\"cb38-36\" title=\"36\">            var size = scope.<span class=\"fu\">allocate<\/span>(C_LONGLONG);<\/a>\n+<a class=\"sourceLine\" id=\"cb38-36\" title=\"36\">            var size = scope.<span class=\"fu\">allocate<\/span>(C_LONG_LONG);<\/a>\n","filename":"doc\/panama_jextract.html","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -869,1 +869,1 @@\n-            var size = scope.allocate(C_LONGLONG);\n+            var size = scope.allocate(C_LONG_LONG);\n","filename":"doc\/panama_jextract.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.jextract.impl.UnsupportedLayouts;\n@@ -106,5 +107,1 @@\n-            Char16(\"char16\", null),\n-            \/**\n-             * {@code char32} type.\n-             *\/\n-            Char32(\"char32\", null),\n+            Char16(\"char16\", UnsupportedLayouts.CHAR16),\n@@ -130,1 +127,1 @@\n-            Int128(\"__int128\", null),\n+            Int128(\"__int128\", UnsupportedLayouts.__INT128),\n@@ -139,0 +136,4 @@\n+            \/**\n+              * {@code long double} type.\n+              *\/\n+            LongDouble(\"long double\", UnsupportedLayouts.LONG_DOUBLE),\n@@ -142,1 +143,1 @@\n-            Float128(\"float128\", null),\n+            Float128(\"float128\", UnsupportedLayouts._FLOAT128),\n@@ -146,1 +147,1 @@\n-            HalfFloat(\"__fp16\", null),\n+            HalfFloat(\"__fp16\", UnsupportedLayouts.__FP16),\n@@ -150,1 +151,1 @@\n-            WChar(\"wchar_t\", null);\n+            WChar(\"wchar_t\", UnsupportedLayouts.WCHAT_T);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/incubator\/jextract\/Type.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+            case LongDouble:\n+                return Primitive.Kind.LongDouble.layout().orElseThrow(unsupported);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/LayoutUtils.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -232,0 +232,20 @@\n+    private static boolean isUnsupported(MemoryLayout layout) {\n+        return UnsupportedLayouts.isUnsupported(layout);\n+    }\n+\n+    private boolean warnUnsupported(FunctionDescriptor desc, String name) {\n+        if (isUnsupported(desc.returnLayout().orElse(null))) {\n+            MemoryLayout layout = desc.returnLayout().get();\n+            warn(\"skipping \" + name + \" because of unsupported type usage: \" + layout.name().get());\n+            return true;\n+        }\n+\n+        for (MemoryLayout argLayout : desc.argumentLayouts()) {\n+            if (isUnsupported(argLayout)) {\n+                warn(\"skipping \" + name + \" because of unsupported type usage: \" + argLayout.name().get());\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -238,1 +258,0 @@\n-        MethodType mtype = typeTranslator.getMethodType(funcTree.type());\n@@ -245,0 +264,5 @@\n+        if (warnUnsupported(descriptor, funcTree.name())) {\n+            return null;\n+        }\n+        MethodType mtype = typeTranslator.getMethodType(funcTree.type());\n+\n@@ -376,0 +400,4 @@\n+        if (isUnsupported(layout)) {\n+            warn(\"skipping \" + fieldName + \" because of unsupported type usage: \" + layout.name().get());\n+        }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -215,0 +215,1 @@\n+                return Type.primitive(Primitive.Kind.WChar);\n@@ -216,0 +217,1 @@\n+                return Type.primitive(Primitive.Kind.Char16);\n@@ -217,0 +219,1 @@\n+                return Type.primitive(Primitive.Kind.HalfFloat);\n@@ -218,1 +221,7 @@\n-            case UInt128: \/\/unsupported\n+                return Type.primitive(Primitive.Kind.Int128);\n+            case LongDouble: \/\/unsupported\n+                return Type.primitive(Primitive.Kind.LongDouble);\n+            case UInt128: { \/\/unsupported\n+                Type iType = Type.primitive(Primitive.Kind.Int128);\n+                return Type.qualified(Delegated.Kind.UNSIGNED, iType);\n+            }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeMaker.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+            case LongDouble:\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeTranslator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.jextract.impl;\n+\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.ValueLayout;\n+import java.nio.ByteOrder;\n+\n+public final class UnsupportedLayouts {\n+    private UnsupportedLayouts() {}\n+\n+    public static final ValueLayout __INT128 = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+            withName(\"__int128\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.LONG_LONG);\n+\n+    public static final ValueLayout LONG_DOUBLE = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+            withName(\"long double\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.DOUBLE);\n+\n+    public static final ValueLayout _FLOAT128 = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+            withName(\"_float128\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.DOUBLE);\n+\n+    public static final ValueLayout __FP16 = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+            withName(\"__fp16\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.FLOAT);\n+\n+    public static final ValueLayout CHAR16 = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+            withName(\"char16\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.SHORT);\n+\n+    public static final ValueLayout WCHAT_T = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+            withName(\"wchar_t\").withAttribute(CLinker.TypeKind.ATTR_NAME, CLinker.TypeKind.SHORT);\n+\n+    public static boolean isUnsupported(MemoryLayout layout) {\n+        return layout == __INT128 || layout == LONG_DOUBLE || layout == _FLOAT128  ||\n+                layout == __FP16 || layout == WCHAT_T;\n+    }\n+}\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnsupportedLayouts.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -54,0 +54,1 @@\n+    long double ld;\n","filename":"test\/jdk\/tools\/jextract\/testStruct\/struct.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}