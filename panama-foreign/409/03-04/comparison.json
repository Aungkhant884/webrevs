{"files":[{"patch":"@@ -247,1 +247,1 @@\n-    private boolean warnUnsupported(FunctionDescriptor desc, String name) {\n+    private static MemoryLayout isUnsupported(FunctionDescriptor desc) {\n@@ -249,3 +249,1 @@\n-            MemoryLayout layout = desc.returnLayout().get();\n-            warn(\"skipping \" + name + \" because of unsupported type usage: \" + layout.name().get());\n-            return true;\n+            return desc.returnLayout().orElse(null);\n@@ -256,2 +254,1 @@\n-                warn(\"skipping \" + name + \" because of unsupported type usage: \" + argLayout.name().get());\n-                return true;\n+                return argLayout;\n@@ -260,1 +257,2 @@\n-        return false;\n+\n+        return null;\n@@ -275,1 +273,3 @@\n-        if (warnUnsupported(descriptor, funcTree.name())) {\n+        MemoryLayout unsupportedLayout = isUnsupported(descriptor);\n+        if (unsupportedLayout != null) {\n+            warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage: \" + unsupportedLayout.name().get());\n@@ -278,0 +278,1 @@\n+\n@@ -305,2 +306,1 @@\n-        header().addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), mtype,\n-                Type.descriptorFor(funcTree.type()).orElseThrow(), funcTree.type().varargs(), paramNames, annos, returnAnno);\n+\n@@ -318,2 +318,9 @@\n-                toplevelBuilder.addFunctionalInterface(name, fitype,\n-                        Type.descriptorFor(f).orElseThrow(), param.type());\n+                FunctionDescriptor fpDesc = Type.descriptorFor(f).orElseThrow();\n+                unsupportedLayout = isUnsupported(fpDesc);\n+                if (unsupportedLayout != null) {\n+                    warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage: \" +\n+                            unsupportedLayout.name().get() + \" in \" + param.name());\n+                    return null;\n+                }\n+\n+                toplevelBuilder.addFunctionalInterface(name, fitype, fpDesc, param.type());\n@@ -323,0 +330,4 @@\n+\n+        header().addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), mtype,\n+                Type.descriptorFor(funcTree.type()).orElseThrow(), funcTree.type().varargs(), paramNames, annos, returnAnno);\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -87,0 +87,3 @@\n+        assertNull(findMethod(unsupported_h.class, \"func2\"));\n+        assertNull(findMethod(unsupported_h.class, \"func3\"));\n+        assertNull(findMethod(unsupported_h.class, \"func4\"));\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/LibUnsupportedTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,3 @@\n+EXPORT void func2(void (*f)(long double l));\n+EXPORT void func3(long double (*f)());\n+EXPORT void func4(void (*f)(Foo f));\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/unsupported.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}