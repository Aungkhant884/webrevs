{"files":[{"patch":"@@ -405,1 +405,1 @@\n-                new ArenaAllocator(scope);\n+                new ArenaAllocator.UnboundedArenaAllocator(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-import java.util.OptionalLong;\n+public abstract class ArenaAllocator implements SegmentAllocator {\n@@ -9,1 +9,1 @@\n-public class ArenaAllocator implements SegmentAllocator {\n+    protected MemorySegment segment;\n@@ -11,2 +11,1 @@\n-    private final SegmentAllocator allocator;\n-    private MemorySegment segment;\n+    protected long sp = 0L;\n@@ -14,38 +13,2 @@\n-    private static final long BLOCK_SIZE = 4 * 1024;\n-    private static final long MAX_ALLOC_SIZE = BLOCK_SIZE \/ 2;\n-\n-    private long sp = 0L;\n-\n-    public ArenaAllocator(ResourceScope scope) {\n-        this(BLOCK_SIZE, scope);\n-    }\n-\n-    ArenaAllocator(long initialSize, ResourceScope scope) {\n-        this.allocator = (size, align) -> MemorySegment.allocateNative(size, align, scope);\n-        this.segment = allocator.allocate(initialSize, 1);\n-    }\n-\n-    MemorySegment newSegment(long size, long align) {\n-        return allocator.allocate(size, align);\n-    }\n-\n-    @Override\n-    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-        checkConfinementIfNeeded();\n-        if (Utils.alignUp(bytesSize, bytesAlignment) > MAX_ALLOC_SIZE) {\n-            return newSegment(bytesSize, bytesAlignment);\n-        }\n-        \/\/ try to slice from current segment first...\n-        MemorySegment slice = trySlice(bytesSize, bytesAlignment);\n-        if (slice == null) {\n-            \/\/ ... if that fails, allocate a new segment and slice from there\n-            sp = 0L;\n-            segment = newSegment(BLOCK_SIZE, 1L);\n-            slice = trySlice(bytesSize, bytesAlignment);\n-            if (slice == null) {\n-                \/\/ this should not be possible - allocations that do not fit in BLOCK_SIZE should get their own\n-                \/\/ standalone segment (see above).\n-                throw new AssertionError(\"Cannot get here!\");\n-            }\n-        }\n-        return slice;\n+    ArenaAllocator(MemorySegment segment) {\n+        this.segment = segment;\n@@ -54,1 +17,1 @@\n-    private MemorySegment trySlice(long bytesSize, long bytesAlignment) {\n+    MemorySegment trySlice(long bytesSize, long bytesAlignment) {\n@@ -66,3 +29,3 @@\n-    private void checkConfinementIfNeeded() {\n-        Thread segmentThread = segment.scope().ownerThread();\n-        if (segmentThread != null && segmentThread != Thread.currentThread()) {\n+    void checkConfinementIfNeeded() {\n+        Thread ownerThread = scope().ownerThread();\n+        if (ownerThread != null && ownerThread != Thread.currentThread()) {\n@@ -73,0 +36,38 @@\n+    ResourceScope scope() {\n+        return segment.scope();\n+    }\n+\n+    public static class UnboundedArenaAllocator extends ArenaAllocator {\n+\n+        private static final long DEFAULT_BLOCK_SIZE = 4 * 1024;\n+        private static final long DEFAULT_MAX_ALLOC_SIZE = DEFAULT_BLOCK_SIZE \/ 2;\n+\n+        public UnboundedArenaAllocator(ResourceScope scope) {\n+            super(MemorySegment.allocateNative(DEFAULT_BLOCK_SIZE, 1, scope));\n+        }\n+\n+        private MemorySegment newSegment(long size, long align) {\n+            return MemorySegment.allocateNative(size, align, segment.scope());\n+        }\n+\n+        @Override\n+        public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n+            checkConfinementIfNeeded();\n+            \/\/ try to slice from current segment first...\n+            MemorySegment slice = trySlice(bytesSize, bytesAlignment);\n+            if (slice != null) {\n+                return slice;\n+            } else {\n+                if (Utils.alignUp(bytesSize, bytesAlignment) > DEFAULT_MAX_ALLOC_SIZE) {\n+                    \/\/ too big\n+                    return newSegment(bytesSize, bytesAlignment);\n+                } else {\n+                    \/\/ allocate a new segment and slice from there\n+                    sp = 0L;\n+                    segment = newSegment(DEFAULT_BLOCK_SIZE, 1L);\n+                    return trySlice(bytesSize, bytesAlignment);\n+                }\n+            }\n+        }\n+    }\n+\n@@ -76,1 +77,1 @@\n-            super(size, scope);\n+            super(MemorySegment.allocateNative(size, 1, scope));\n@@ -80,2 +81,9 @@\n-        MemorySegment newSegment(long size, long align) {\n-            throw new OutOfMemoryError(\"Not enough space left to allocate\");\n+        public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n+            checkConfinementIfNeeded();\n+            \/\/ try to slice from current segment first...\n+            MemorySegment slice = trySlice(bytesSize, bytesAlignment);\n+            if (slice != null) {\n+                return slice;\n+            } else {\n+                throw new OutOfMemoryError(\"Not enough space left to allocate\");\n+            }\n@@ -103,1 +111,1 @@\n-                return new ArenaAllocator(scope);\n+                return new UnboundedArenaAllocator(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":58,"deletions":50,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -114,0 +114,16 @@\n+    @Test(expectedExceptions = OutOfMemoryError.class)\n+    public void testTooBigForBoundedArena() {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(10, scope);\n+            allocator.allocate(12);\n+        }\n+    }\n+\n+    @Test\n+    public void testBiggerThanBlockForBoundedArena() {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(4 * 1024 * 2, scope);\n+            allocator.allocate(4 * 1024 + 1); \/\/ should be ok\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}