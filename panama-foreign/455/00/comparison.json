{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.incubator.jextract.JextractTool;\n@@ -153,0 +154,5 @@\n+        Class<?> clazz = getJavaType(constant.type());\n+        if (clazz == null) {\n+            warn(\"skipping \" + constant.name() + \" because of unsupported type usage\");\n+            return null;\n+        }\n@@ -155,1 +161,1 @@\n-                typeTranslator.getJavaType(constant.type()), constant.value());\n+                clazz, constant.value());\n@@ -247,1 +253,6 @@\n-        MethodType fitype = typeTranslator.getMethodType(func, false);\n+        MethodType fitype = getMethodType(func, false);\n+        if (fitype == null) {\n+            warn(\"skipping \" + name + \" because of unsupported type usage\");\n+            return false;\n+        }\n+\n@@ -279,1 +290,5 @@\n-        MethodType mtype = typeTranslator.getMethodType(funcTree.type());\n+        MethodType mtype = getMethodType(funcTree.type());\n+        if (mtype == null) {\n+            warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage\");\n+            return null;\n+        }\n@@ -420,1 +435,0 @@\n-        Class<?> clazz = typeTranslator.getJavaType(type);\n@@ -436,0 +450,7 @@\n+            Class<?> clazz = getJavaType(type);\n+            if (clazz == null) {\n+                String name = parent != null? parent.name() + \".\" : \"\";\n+                name += fieldName;\n+                warn(\"skipping \" + name + \" because of unsupported type usage\");\n+                return null;\n+            }\n@@ -459,0 +480,36 @@\n+\n+    private Class<?> getJavaType(Type type) {\n+        try {\n+            return typeTranslator.getJavaType(type);\n+        } catch (UnsupportedOperationException uoe) {\n+            warn(uoe.toString());\n+            if (JextractTool.DEBUG) {\n+                uoe.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private MethodType getMethodType(Type.Function type) {\n+        try {\n+            return typeTranslator.getMethodType(type);\n+        } catch (UnsupportedOperationException uoe) {\n+            warn(uoe.toString());\n+            if (JextractTool.DEBUG) {\n+                uoe.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private MethodType getMethodType(Type.Function type, boolean varargsCheck) {\n+        try {\n+            return typeTranslator.getMethodType(type, varargsCheck);\n+        } catch (UnsupportedOperationException uoe) {\n+            warn(uoe.toString());\n+            if (JextractTool.DEBUG) {\n+                uoe.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":61,"deletions":4,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                throw new UnsupportedOperationException();\n+                throw new UnsupportedOperationException(\"size: \" + (int)layout.bitSize());\n@@ -106,1 +106,1 @@\n-                throw new UnsupportedOperationException();\n+                throw new UnsupportedOperationException(\"declaration kind: \" + t.tree().kind());\n@@ -113,1 +113,1 @@\n-            throw new UnsupportedOperationException();\n+            throw new UnsupportedOperationException(\"vector\");\n@@ -121,1 +121,1 @@\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(t.getClass().toString());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeTranslator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8240181\n+ * @run testng\/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8261893\n@@ -44,5 +44,5 @@\n-            assertNotNull(loader.loadClass(\"test8261893_h$permits_\");\n-            assertNotNull(loader.loadClass(\"test8261893_h$record_\");\n-            assertNotNull(loader.loadClass(\"test8261893_h$sealed_\");\n-            assertNotNull(loader.loadClass(\"test8261893_h$var_\");\n-            assertNotNull(loader.loadClass(\"test8261893_h$yield_\");\n+            assertNotNull(loader.loadClass(\"test8261893_h$permits_\"));\n+            assertNotNull(loader.loadClass(\"test8261893_h$record_\"));\n+            assertNotNull(loader.loadClass(\"test8261893_h$sealed_\"));\n+            assertNotNull(loader.loadClass(\"test8261893_h$var_\"));\n+            assertNotNull(loader.loadClass(\"test8261893_h$yield_\"));\n","filename":"test\/jdk\/tools\/jextract\/Test8261893.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}