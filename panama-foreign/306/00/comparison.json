{"files":[{"patch":"@@ -109,1 +109,1 @@\n-    static void reserveMemory(long size, int cap) {\n+    static void reserveMemory(long size, long cap) {\n@@ -188,1 +188,1 @@\n-    private static boolean tryReserveMemory(long size, int cap) {\n+    private static boolean tryReserveMemory(long size, long cap) {\n@@ -206,1 +206,1 @@\n-    static void unreserveMemory(long size, int cap) {\n+    static void unreserveMemory(long size, long cap) {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -830,0 +830,15 @@\n+\n+                @Override\n+                public void reserveMemory(long size, long cap) {\n+                    Bits.reserveMemory(size, cap);\n+                }\n+\n+                @Override\n+                public void unreserveMemory(long size, long cap) {\n+                    Bits.unreserveMemory(size, cap);\n+                }\n+\n+                @Override\n+                public int pageSize() {\n+                    return Bits.pageSize();\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -107,0 +107,15 @@\n+\n+    \/**\n+     * Used by {@code jdk.internal.foreign.NativeMemorySegmentImpl}.\n+     *\/\n+    void reserveMemory(long size, long cap);\n+\n+    \/**\n+     * Used by {@code jdk.internal.foreign.NativeMemorySegmentImpl}.\n+     *\/\n+    void unreserveMemory(long size, long cap);\n+\n+    \/**\n+     * Used by {@code jdk.internal.foreign.NativeMemorySegmentImpl}.\n+     *\/\n+    int pageSize();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-        JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import jdk.internal.access.JavaNioAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -34,0 +32,1 @@\n+import jdk.internal.misc.VM;\n@@ -71,1 +70,0 @@\n-        JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();\n@@ -88,4 +86,2 @@\n-        long alignedSize = bytesSize;\n-\n-        if (alignmentBytes > MAX_ALIGN) {\n-            alignedSize = bytesSize + (alignmentBytes - 1);\n+        if (VM.isDirectMemoryPageAligned()) {\n+            alignmentBytes = Math.max(alignmentBytes, nioAccess.pageSize());\n@@ -93,0 +89,5 @@\n+        long alignedSize = alignmentBytes > MAX_ALIGN ?\n+                bytesSize + (alignmentBytes - 1) :\n+                bytesSize;\n+\n+        nioAccess.reserveMemory(alignedSize, bytesSize);\n@@ -99,1 +100,4 @@\n-        MemoryScope scope = MemoryScope.create(null, () -> unsafe.freeMemory(buf));\n+        MemoryScope scope = MemoryScope.create(null, () -> {\n+            unsafe.freeMemory(buf);\n+            nioAccess.unreserveMemory(alignedSize, bytesSize);\n+        });\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng TestByteBuffer\n+ * @run testng\/othervm -XX:MaxDirectMemorySize=3000000000 TestByteBuffer\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @run testng TestMismatch\n+ * @run testng\/othervm -XX:MaxDirectMemorySize=5000000000 TestMismatch\n","filename":"test\/jdk\/java\/foreign\/TestMismatch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}