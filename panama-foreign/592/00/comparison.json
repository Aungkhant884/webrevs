{"files":[{"patch":"@@ -30,3 +30,0 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n@@ -34,1 +31,0 @@\n-import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,1 +34,1 @@\n-    static CLinker.UpcallStub allocate(CXCursorVisitor fi) {\n+    static NativeSymbol allocate(CXCursorVisitor fi) {\n@@ -41,1 +37,1 @@\n-    static CLinker.UpcallStub allocate(CXCursorVisitor fi, ResourceScope scope) {\n+    static NativeSymbol allocate(CXCursorVisitor fi, ResourceScope scope) {\n@@ -44,1 +40,2 @@\n-    static CXCursorVisitor ofAddress(MemoryAddress addr) {\n+    static CXCursorVisitor ofAddress(MemoryAddress addr, ResourceScope scope) {\n+        NativeSymbol symbol = NativeSymbol.ofAddress(\"CXCursorVisitor::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);\n@@ -47,1 +44,1 @@\n-                return (int)constants$13.CXCursorVisitor$MH.invokeExact((Addressable)addr, x0, x1, x2);\n+                return (int)constants$13.CXCursorVisitor$MH.invokeExact(symbol, x0, x1, x2);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXCursorVisitor.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.incubator.foreign.NativeSymbol;\n@@ -80,1 +81,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(addr -> MemorySegment.ofAddressNative(addr, layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddressNative(symbol.address(), layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n@@ -99,1 +100,1 @@\n-    static final <Z> CLinker.UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n+    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n@@ -103,1 +104,1 @@\n-    static final <Z> CLinker.UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n@@ -122,1 +123,1 @@\n-        private final Addressable symbol;\n+        private final NativeSymbol symbol;\n@@ -125,1 +126,1 @@\n-        private VarargsInvoker(Addressable symbol, FunctionDescriptor function) {\n+        private VarargsInvoker(NativeSymbol symbol, FunctionDescriptor function) {\n@@ -138,1 +139,1 @@\n-        static MethodHandle make(Addressable symbol, FunctionDescriptor function) {\n+        static MethodHandle make(NativeSymbol symbol, FunctionDescriptor function) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -79,10 +79,1 @@\n-            append(MEMBER_MODS + \" CLinker.UpcallStub allocate(\" + className() + \" fi) {\\n\");\n-            incrAlign();\n-            indent();\n-            append(\"return RuntimeHelper.upcallStub(\" + className() + \".class, fi, \" + functionDesc.accessExpression() + \", \" +\n-                    \"\\\"\" + fiType.toMethodDescriptorString() + \"\\\");\\n\");\n-            decrAlign();\n-            indent();\n-            append(\"}\\n\");\n-            indent();\n-            append(MEMBER_MODS + \" CLinker.UpcallStub allocate(\" + className() + \" fi, ResourceScope scope) {\\n\");\n+            append(MEMBER_MODS + \" NativeSymbol allocate(\" + className() + \" fi, ResourceScope scope) {\\n\");\n@@ -105,1 +96,1 @@\n-            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemoryAddress addr) {\\n\");\n+            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemoryAddress addr, ResourceScope scope) {\\n\");\n@@ -108,0 +99,2 @@\n+            append(\"NativeSymbol symbol = NativeSymbol.ofAddress(\");\n+            append(\"\\\"\" + className() + \"::\\\" + Long.toHexString(addr.toRawLongValue()), addr, scope);\");\n@@ -123,1 +116,1 @@\n-            append(mhConstant.accessExpression() + \".invokeExact((Addressable)addr\");\n+            append(mhConstant.accessExpression() + \".invokeExact(symbol\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get());\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), ResourceScope.globalScope());\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        append(fiName + \" \" + javaName + \" (MemorySegment segment) {\\n\");\n+        append(fiName + \" \" + javaName + \" (MemorySegment segment, ResourceScope scope) {\\n\");\n@@ -154,1 +154,1 @@\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(segment));\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(segment), scope);\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,0 +7,1 @@\n+import jdk.incubator.foreign.NativeSymbol;\n@@ -51,1 +52,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(addr -> MemorySegment.ofAddressNative(addr, layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddressNative(symbol.address(), layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n@@ -70,5 +71,1 @@\n-    static final <Z> CLinker.UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n-        return upcallStub(fi, z, fdesc, mtypeDesc, ResourceScope.newConfinedScope());\n-    }\n-\n-    static final <Z> CLinker.UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n@@ -93,1 +90,1 @@\n-        private final Addressable symbol;\n+        private final NativeSymbol symbol;\n@@ -96,1 +93,1 @@\n-        private VarargsInvoker(Addressable symbol, FunctionDescriptor function) {\n+        private VarargsInvoker(NativeSymbol symbol, FunctionDescriptor function) {\n@@ -109,1 +106,1 @@\n-        static MethodHandle make(Addressable symbol, FunctionDescriptor function) {\n+        static MethodHandle make(NativeSymbol symbol, FunctionDescriptor function) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            Bar.foo(bar).apply(42);\n+            Bar.foo(bar, scope).apply(42);\n@@ -67,1 +67,1 @@\n-            Foo.ofAddress(Bar.foo$get(bar)).apply(42);\n+            Foo.ofAddress(Bar.foo$get(bar), scope).apply(42);\n@@ -87,1 +87,1 @@\n-            Foo.ofAddress(f$get()).apply(42);\n+            Foo.ofAddress(f$get(), scope).apply(42);\n@@ -98,1 +98,1 @@\n-            Baz.fp(baz).apply(42);\n+            Baz.fp(baz, scope).apply(42);\n@@ -109,1 +109,1 @@\n-            Baz.fp.ofAddress(Baz.fp$get(baz)).apply(42);\n+            Baz.fp.ofAddress(Baz.fp$get(baz), scope).apply(42);\n@@ -129,1 +129,1 @@\n-            fp.ofAddress(fp$get()).apply(42);\n+            fp.ofAddress(fp$get(), scope).apply(42);\n","filename":"test\/jdk\/tools\/jextract\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            var sumIface = Foo.sum.ofAddress(funcPtr);\n+            var sumIface = Foo.sum.ofAddress(funcPtr, scope);\n","filename":"test\/jdk\/tools\/jextract\/test8261511\/Test8261511.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.foreign.NativeSymbol;\n@@ -216,1 +217,1 @@\n-        checkMethod(fiClass, \"allocate\", CLinker.UpcallStub.class, fiClass);\n+        checkMethod(fiClass, \"allocate\", NativeSymbol.class, fiClass, ResourceScope.class);\n","filename":"test\/jdk\/tools\/jextract\/testClassGen\/TestClassGeneration.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}