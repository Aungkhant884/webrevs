{"files":[{"patch":"@@ -44,1 +44,1 @@\n- * of {@link HeapMemorySegmentImpl} are defined (e.g. {@link OfFloat}, so that each subclass can override the\n+ * of {@link HeapMemorySegmentImpl} are defined (e.g. {@link OfFloat}), so that each subclass can override the\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n- * This class provide support for constructing layout paths; that is, starting from a root path (see {@link #rootPath(MemoryLayout)},\n+ * This class provide support for constructing layout paths; that is, starting from a root path (see {@link #rootPath(MemoryLayout)}),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                        \/\/ We record the max index used for any union member so we can leave off from there\n+                        \/\/ We record the max index used for any union member so that we can leave off from there\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemoryInspectionUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-     * Add a cleanup action. If a failure occurred (because of a add vs. close race), call the cleanup action.\n+     * Add a cleanup action. If a failure occurred (because of an add vs. close race), call the cleanup action.\n@@ -103,1 +103,1 @@\n-     * cleanup memory. From the perspective of the client, such a failure would manifest as a factory\n+     * clean up memory. From the perspective of the client, such a failure would manifest as a factory\n@@ -198,1 +198,1 @@\n-     * a confined session and this method is called outside of the owner thread.\n+     * a confined session and this method is called outside the owner thread.\n@@ -224,1 +224,1 @@\n-     * a confined session and this method is called outside of the owner thread.\n+     * a confined session and this method is called outside the owner thread.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n- * ABI-specific). Note that each argument has it's own recipe, which is indicated by '[number]:' (though, the only\n+ * ABI-specific). Note that each argument has its own recipe, which is indicated by '[number]:' (though, the only\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-            \/\/ adjust return type so it matches the inferred type of the effective\n+            \/\/ adjust return type so that it matches the inferred type of the effective\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,2 +248,2 @@\n-        MacOs, non-VA   | FW in regs       | FW on the stack                 | FW on the stack\n-        MacOs, VA       | FW in regs       | CW on the stack                 | CW on the stack\n+        macOS, non-VA   | FW in regs       | FW on the stack                 | FW on the stack\n+        macOS, VA       | FW in regs       | CW on the stack                 | CW on the stack\n@@ -259,1 +259,1 @@\n-        MacOs           | CW in regs       | CW on the stack                 | CW on the stack\n+        macOS           | CW in regs       | CW on the stack                 | CW on the stack\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * ABI implementation for macOS on Apple silicon. Based on AAPCS with\n+ * ABI implementation for macOS on Apple Silicon. Based on AAPCS with\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    \/\/ r2-7 and v4-7 so they are omitted here.\n+    \/\/ r2-7 and v4-7 so, they are omitted here.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/windows\/WindowsAArch64CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        \/\/ Aggregates or scalars passed on the stack are aligned to the greater of\n+        \/\/ Aggregates or scalars passed on the stack are aligned to the greatest of\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/LinuxRISCV64CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-            \/\/ok, let's pass pass on registers\n+            \/\/ok, let's pass on registers\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        \/\/ No 128-bit integers in the Windows C ABI. There are __m128(i|d) intrinsic types but they act just\n+        \/\/ No 128-bit integers in the Windows C ABI. There are __m128(i|d) intrinsic types but, they act just\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}