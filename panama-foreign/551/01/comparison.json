{"files":[{"patch":"@@ -30,7 +30,7 @@\n-$(eval $(call SetupJdkLibrary, BUILD_LIBCSTDLIB, \\\n-    NAME := syslookup, \\\n-    CFLAGS := $(CFLAGS_JDKLIB), \\\n-    CXXFLAGS := $(CXXFLAGS_JDKLIB), \\\n-    LDFLAGS := -Wl$(COMMA)--no-as-needed -lc -lm -ldl $(LDFLAGS_JDKLIB) $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    LIBS := $(LIBCXX), \\\n-))\n+  $(eval $(call SetupJdkLibrary, BUILD_SYSLOOKUPLIB, \\\n+      NAME := syslookup, \\\n+      CFLAGS := $(CFLAGS_JDKLIB), \\\n+      CXXFLAGS := $(CXXFLAGS_JDKLIB), \\\n+      LDFLAGS := $(LDFLAGS_JDKLIB) -Wl$(COMMA)--no-as-needed, \\\n+      LIBS := $(LIBCXX) -lc -lm -ldl, \\\n+  ))\n@@ -40,8 +40,7 @@\n-$(eval $(call SetupJdkLibrary, BUILD_LIBCSTDLIB, \\\n-    NAME := syslookup, \\\n-    CFLAGS := $(CFLAGS_JDKLIB), \\\n-    CXXFLAGS := $(CXXFLAGS_JDKLIB), \\\n-    LDFLAGS := $(LDFLAGS_JDKLIB) $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    LIBS := $(LIBCXX), \\\n-))\n-\n+  $(eval $(call SetupJdkLibrary, BUILD_SYSLOOKUPLIB, \\\n+      NAME := syslookup, \\\n+      CFLAGS := $(CFLAGS_JDKLIB), \\\n+      CXXFLAGS := $(CXXFLAGS_JDKLIB), \\\n+      LDFLAGS := $(LDFLAGS_JDKLIB), \\\n+      LIBS := $(LIBCXX), \\\n+  ))\n@@ -51,1 +50,1 @@\n-TARGETS += $(BUILD_LIBCSTDLIB)\n+TARGETS += $(BUILD_SYSLOOKUPLIB)\n","filename":"make\/modules\/jdk.incubator.foreign\/Lib.gmk","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -138,1 +138,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -142,0 +142,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -157,2 +160,0 @@\n-     * @see SymbolLookup\n-     *\n@@ -163,1 +164,4 @@\n-     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch.\n+     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch, or if the symbol\n+     *                                  is {@link MemoryAddress#NULL}\n+     *\n+     * @see SymbolLookup\n@@ -174,2 +178,0 @@\n-     * @see SymbolLookup\n-     *\n@@ -183,0 +185,2 @@\n+     *\n+     * @see SymbolLookup\n@@ -199,2 +203,0 @@\n-     * @see SymbolLookup\n-     *\n@@ -205,0 +207,2 @@\n+     *\n+     * @see SymbolLookup\n@@ -367,1 +371,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -394,1 +398,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -468,1 +472,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -494,1 +498,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -649,1 +653,1 @@\n-         * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+         * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -670,1 +674,1 @@\n-         * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+         * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n@@ -156,1 +156,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -807,1 +807,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,6 @@\n- * A symbol lookup. Exposes a lookup operation for searching symbols, see {@link SymbolLookup#lookup(String)}.\n+ * A symbol lookup. Exposes a lookup operation for searching symbol addresses by name, see {@link SymbolLookup#lookup(String)}.\n+ * A symbol lookup can be used to lookup a symbol in a loaded library. Clients can obtain a {@linkplain #loaderLookup() loader lookup},\n+ * which can be used to search symbols in libraries loaded by the current classloader (e.g. using {@link System#load(String)},\n+ * or {@link System#loadLibrary(String)}).\n+ * Alternatively, clients can obtain a {@linkplain CLinker#systemLookup() platform-dependent lookup}, to search symbols\n+ * in the standard C library.\n@@ -56,1 +61,1 @@\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SymbolLookup.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n- * Here, we lookup the {@code strlen} symbol in the <em>default<\/em> library lookup (see {@link jdk.incubator.foreign.LibraryLookup#ofDefault()}).\n+ * Here, we lookup the {@code strlen} symbol in the {@linkplain jdk.incubator.foreign.CLinker#systemLookup() system lookup}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-        private static final CLinker linker = getSystemLinker();\n+        private static final CLinker SYS_LINKER = getSystemLinker();\n@@ -448,1 +448,1 @@\n-        static final MethodHandle MH_MALLOC = linker.downcallHandle(CLinker.systemLookup().lookup(\"malloc\").get(),\n+        static final MethodHandle MH_MALLOC = SYS_LINKER.downcallHandle(CLinker.systemLookup().lookup(\"malloc\").get(),\n@@ -452,1 +452,1 @@\n-        static final MethodHandle MH_FREE = linker.downcallHandle(CLinker.systemLookup().lookup(\"free\").get(),\n+        static final MethodHandle MH_FREE = SYS_LINKER.downcallHandle(CLinker.systemLookup().lookup(\"free\").get(),\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n- * changes to the status of a snippet: it can created with <code>eval<\/code>,\n+ * changes to the status of a snippet: it can be created with <code>eval<\/code>,\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    static SymbolLookup lookup = SymbolLookup.loaderLookup();\n+    static final SymbolLookup LOOKUP = SymbolLookup.loaderLookup();\n@@ -63,1 +63,1 @@\n-                lookup.lookup(\"struct_func\").get(),\n+                LOOKUP.lookup(\"struct_func\").get(),\n@@ -78,1 +78,1 @@\n-                lookup.lookup(\"addr_func\").get(),\n+                LOOKUP.lookup(\"addr_func\").get(),\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-        final static SymbolLookup LOOKUP;\n+        static final SymbolLookup LOOKUP;\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    static SymbolLookup lookup = SymbolLookup.loaderLookup();\n+    static final SymbolLookup LOOKUP = SymbolLookup.loaderLookup();\n@@ -65,1 +65,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n@@ -92,1 +92,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    private static final MemoryAddress dummyTarget = MemoryAddress.ofLong(1);\n+    private static final MemoryAddress DUMMY_TARGET = MemoryAddress.ofLong(1);\n@@ -54,1 +54,1 @@\n-            ABI.downcallHandle(dummyTarget, mt, desc);\n+            ABI.downcallHandle(DUMMY_TARGET, mt, desc);\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    static SymbolLookup lookup = SymbolLookup.loaderLookup();\n+    static final SymbolLookup LOOKUP = SymbolLookup.loaderLookup();\n@@ -91,1 +91,1 @@\n-            MemoryAddress ma = lookup.lookup(name).get();\n+            MemoryAddress ma = LOOKUP.lookup(name).get();\n@@ -101,1 +101,1 @@\n-            MemoryAddress ma = lookup.lookup(\"empty\").get();\n+            MemoryAddress ma = LOOKUP.lookup(\"empty\").get();\n@@ -116,1 +116,1 @@\n-            MemoryAddress ma = lookup.lookup(\"identity_va\").get();\n+            MemoryAddress ma = LOOKUP.lookup(\"identity_va\").get();\n@@ -131,1 +131,1 @@\n-                MemoryAddress ma = lookup.lookup(\"invoke_high_arity\" + i).get();\n+                MemoryAddress ma = LOOKUP.lookup(\"invoke_high_arity\" + i).get();\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    static SymbolLookup lookup = SymbolLookup.loaderLookup();\n+    static final SymbolLookup LOOKUP = SymbolLookup.loaderLookup();\n@@ -54,1 +54,1 @@\n-        assertFalse(lookup.lookup(\"f\").isEmpty());\n+        assertFalse(LOOKUP.lookup(\"f\").isEmpty());\n@@ -59,1 +59,1 @@\n-        assertTrue(lookup.lookup(\"nonExistent\").isEmpty());\n+        assertTrue(LOOKUP.lookup(\"nonExistent\").isEmpty());\n@@ -64,1 +64,1 @@\n-        MemorySegment segment = lookup.lookup(\"c\").get().asSegment(MemoryLayouts.JAVA_INT.byteSize(), ResourceScope.globalScope());\n+        MemorySegment segment = LOOKUP.lookup(\"c\").get().asSegment(MemoryLayouts.JAVA_INT.byteSize(), ResourceScope.globalScope());\n","filename":"test\/jdk\/java\/foreign\/TestSymbolLookup.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    static SymbolLookup lookup = SymbolLookup.loaderLookup();\n+    static final SymbolLookup LOOKUP = SymbolLookup.loaderLookup();\n@@ -95,1 +95,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n@@ -113,1 +113,1 @@\n-        MemoryAddress addr = lookup.lookup(fName).get();\n+        MemoryAddress addr = LOOKUP.lookup(fName).get();\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    static final MemoryAddress varargsAddr =\n+    static final MemoryAddress VARARGS_ADDR =\n@@ -104,1 +104,1 @@\n-            MethodHandle downcallHandle = abi.downcallHandle(varargsAddr, mt, desc);\n+            MethodHandle downcallHandle = abi.downcallHandle(VARARGS_ADDR, mt, desc);\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    static SymbolLookup lookup = SymbolLookup.loaderLookup();\n+    static final SymbolLookup LOOKUP = SymbolLookup.loaderLookup();\n@@ -102,1 +102,1 @@\n-        return abi.downcallHandle(lookup.lookup(symbol).get(), mt, fd);\n+        return abi.downcallHandle(LOOKUP.lookup(symbol).get(), mt, fd);\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}