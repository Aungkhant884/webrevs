{"files":[{"patch":"@@ -546,1 +546,1 @@\n-     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to {@code sizeof(size_t) * 8}, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -549,1 +549,2 @@\n-     * MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder())\n+     *             .withBitAlignment(<address size>);\n@@ -552,1 +553,2 @@\n-    public static final OfAddress ADDRESS = new OfAddress(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfAddress ADDRESS = new OfAddress(ByteOrder.nativeOrder())\n+            .withBitAlignment(ValueLayout.ADDRESS_SIZE_BITS);\n@@ -576,1 +578,1 @@\n-     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 16, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -579,1 +581,1 @@\n-     * MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -582,1 +584,1 @@\n-    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -586,1 +588,1 @@\n-     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 16, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -589,1 +591,1 @@\n-     * MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -592,1 +594,1 @@\n-    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -596,1 +598,1 @@\n-     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 32, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -599,1 +601,1 @@\n-     * MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -602,1 +604,1 @@\n-    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -606,1 +608,1 @@\n-     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 64, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -609,1 +611,1 @@\n-     * MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(64);\n@@ -613,1 +615,1 @@\n-            .withBitAlignment(8);\n+            .withBitAlignment(64);\n@@ -617,1 +619,1 @@\n-     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 32, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -620,1 +622,1 @@\n-     * MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -623,1 +625,1 @@\n-    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -627,1 +629,1 @@\n-     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 64, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -630,1 +632,1 @@\n-     * MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(64);\n@@ -633,1 +635,1 @@\n-    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder()).withBitAlignment(64);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":23,"deletions":21,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -65,0 +65,9 @@\n+import static java.lang.foreign.ValueLayout.ADDRESS;\n+import static java.lang.foreign.ValueLayout.JAVA_BOOLEAN;\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n+import static java.lang.foreign.ValueLayout.JAVA_CHAR;\n+import static java.lang.foreign.ValueLayout.JAVA_DOUBLE;\n+import static java.lang.foreign.ValueLayout.JAVA_FLOAT;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+import static java.lang.foreign.ValueLayout.JAVA_SHORT;\n@@ -701,1 +710,1 @@\n-        emitGetStatic(ValueLayout.class, valueLayoutConstantName, valueLayoutType.descriptorString());\n+        emitGetStatic(BindingSpecializer.class, valueLayoutConstantName, valueLayoutType.descriptorString());\n@@ -707,1 +716,1 @@\n-            return \"JAVA_BOOLEAN\";\n+            return \"JAVA_BOOLEAN_UNALIGNED\";\n@@ -709,1 +718,1 @@\n-            return \"JAVA_BYTE\";\n+            return \"JAVA_BYTE_UNALIGNED\";\n@@ -711,1 +720,1 @@\n-            return \"JAVA_SHORT\";\n+            return \"JAVA_SHORT_UNALIGNED\";\n@@ -713,1 +722,1 @@\n-            return \"JAVA_CHAR\";\n+            return \"JAVA_CHAR_UNALIGNED\";\n@@ -715,1 +724,1 @@\n-            return \"JAVA_INT\";\n+            return \"JAVA_INT_UNALIGNED\";\n@@ -717,1 +726,1 @@\n-            return \"JAVA_LONG\";\n+            return \"JAVA_LONG_UNALIGNED\";\n@@ -719,1 +728,1 @@\n-            return \"JAVA_FLOAT\";\n+            return \"JAVA_FLOAT_UNALIGNED\";\n@@ -721,1 +730,1 @@\n-            return \"JAVA_DOUBLE\";\n+            return \"JAVA_DOUBLE_UNALIGNED\";\n@@ -723,1 +732,1 @@\n-            return \"ADDRESS\";\n+            return \"ADDRESS_UNALIGNED\";\n@@ -949,0 +958,11 @@\n+\n+    \/\/ unaligned constants\n+    public final static ValueLayout.OfBoolean JAVA_BOOLEAN_UNALIGNED = JAVA_BOOLEAN;\n+    public final static ValueLayout.OfByte JAVA_BYTE_UNALIGNED = JAVA_BYTE;\n+    public final static ValueLayout.OfShort JAVA_SHORT_UNALIGNED = JAVA_SHORT.withBitAlignment(8);\n+    public final static ValueLayout.OfChar JAVA_CHAR_UNALIGNED = JAVA_CHAR.withBitAlignment(8);\n+    public final static ValueLayout.OfInt JAVA_INT_UNALIGNED = JAVA_INT.withBitAlignment(8);\n+    public final static ValueLayout.OfLong JAVA_LONG_UNALIGNED = JAVA_LONG.withBitAlignment(8);\n+    public final static ValueLayout.OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withBitAlignment(8);\n+    public final static ValueLayout.OfDouble JAVA_DOUBLE_UNALIGNED = JAVA_DOUBLE.withBitAlignment(8);\n+    public final static ValueLayout.OfAddress ADDRESS_UNALIGNED = ADDRESS.withBitAlignment(8);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":30,"deletions":10,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -329,0 +329,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -330,1 +331,1 @@\n-            this.elementLayout = elementLayout;\n+            this.elementLayout = (L)elementLayout.withBitAlignment(8);\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -110,0 +111,7 @@\n+    static final ValueLayout.OfChar BB_CHAR = JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN).withBitAlignment(8);\n+    static final ValueLayout.OfShort BB_SHORT = JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN).withBitAlignment(8);\n+    static final ValueLayout.OfInt BB_INT = JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN).withBitAlignment(8);\n+    static final ValueLayout.OfLong BB_LONG = JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN).withBitAlignment(8);\n+    static final ValueLayout.OfFloat BB_FLOAT = JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN).withBitAlignment(8);\n+    static final ValueLayout.OfDouble BB_DOUBLE = JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN).withBitAlignment(8);\n+\n@@ -112,2 +120,2 @@\n-                    JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN).withName(\"index\"),\n-                    JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN).withName(\"value\")\n+                    BB_INT.withName(\"index\"),\n+                    BB_FLOAT.withName(\"value\")\n@@ -116,27 +124,7 @@\n-    static SequenceLayout bytes = MemoryLayout.sequenceLayout(100,\n-            JAVA_BYTE\n-    );\n-\n-    static SequenceLayout chars = MemoryLayout.sequenceLayout(100,\n-            JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN)\n-    );\n-\n-    static SequenceLayout shorts = MemoryLayout.sequenceLayout(100,\n-            JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN)\n-    );\n-\n-    static SequenceLayout ints = MemoryLayout.sequenceLayout(100,\n-            JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN)\n-    );\n-\n-    static SequenceLayout floats = MemoryLayout.sequenceLayout(100,\n-            JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN)\n-    );\n-\n-    static SequenceLayout longs = MemoryLayout.sequenceLayout(100,\n-            JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN)\n-    );\n-\n-    static SequenceLayout doubles = MemoryLayout.sequenceLayout(100,\n-            JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN)\n-    );\n+    static SequenceLayout bytes = MemoryLayout.sequenceLayout(100, JAVA_BYTE);\n+    static SequenceLayout chars = MemoryLayout.sequenceLayout(100, BB_CHAR);\n+    static SequenceLayout shorts = MemoryLayout.sequenceLayout(100, BB_SHORT);\n+    static SequenceLayout ints = MemoryLayout.sequenceLayout(100, BB_INT);\n+    static SequenceLayout floats = MemoryLayout.sequenceLayout(100, BB_FLOAT);\n+    static SequenceLayout longs = MemoryLayout.sequenceLayout(100, BB_LONG);\n+    static SequenceLayout doubles = MemoryLayout.sequenceLayout(100, BB_DOUBLE);\n@@ -843,1 +831,1 @@\n-                (base) -> initBytes(base, chars, (addr, pos) -> addr.setAtIndex(JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN), pos, (char)(long)pos));\n+                (base) -> initBytes(base, chars, (addr, pos) -> addr.setAtIndex(BB_CHAR, pos, (char)(long)pos));\n@@ -845,1 +833,1 @@\n-                (base) -> initBytes(base, shorts, (addr, pos) -> addr.setAtIndex(JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN), pos, (short)(long)pos));\n+                (base) -> initBytes(base, shorts, (addr, pos) -> addr.setAtIndex(BB_SHORT, pos, (short)(long)pos));\n@@ -847,1 +835,1 @@\n-                (base) -> initBytes(base, ints, (addr, pos) -> addr.setAtIndex(JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN), pos, (int)(long)pos));\n+                (base) -> initBytes(base, ints, (addr, pos) -> addr.setAtIndex(BB_INT, pos, (int)(long)pos));\n@@ -849,1 +837,1 @@\n-                (base) -> initBytes(base, floats, (addr, pos) -> addr.setAtIndex(JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN), pos, (float)(long)pos));\n+                (base) -> initBytes(base, floats, (addr, pos) -> addr.setAtIndex(BB_FLOAT, pos, (float)(long)pos));\n@@ -851,1 +839,1 @@\n-                (base) -> initBytes(base, longs, (addr, pos) -> addr.setAtIndex(JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN), pos, (long)pos));\n+                (base) -> initBytes(base, longs, (addr, pos) -> addr.setAtIndex(BB_LONG, pos, (long)pos));\n@@ -853,1 +841,1 @@\n-                (base) -> initBytes(base, doubles, (addr, pos) -> addr.setAtIndex(JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN), pos, (double)(long)pos));\n+                (base) -> initBytes(base, doubles, (addr, pos) -> addr.setAtIndex(BB_DOUBLE, pos, (double)(long)pos));\n@@ -858,1 +846,1 @@\n-                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> addr.getAtIndex(JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN), pos), CharBuffer::get);\n+                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> addr.getAtIndex(BB_CHAR, pos), CharBuffer::get);\n@@ -860,1 +848,1 @@\n-                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> addr.getAtIndex(JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN), pos), ShortBuffer::get);\n+                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> addr.getAtIndex(BB_SHORT, pos), ShortBuffer::get);\n@@ -862,1 +850,1 @@\n-                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> addr.getAtIndex(JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN), pos), IntBuffer::get);\n+                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> addr.getAtIndex(BB_INT, pos), IntBuffer::get);\n@@ -864,1 +852,1 @@\n-                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> addr.getAtIndex(JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN), pos), FloatBuffer::get);\n+                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> addr.getAtIndex(BB_FLOAT, pos), FloatBuffer::get);\n@@ -866,1 +854,1 @@\n-                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> addr.getAtIndex(JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN), pos), LongBuffer::get);\n+                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> addr.getAtIndex(BB_LONG, pos), LongBuffer::get);\n@@ -868,1 +856,1 @@\n-                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> addr.getAtIndex(JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN), pos), DoubleBuffer::get);\n+                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> addr.getAtIndex(BB_DOUBLE, pos), DoubleBuffer::get);\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":29,"deletions":41,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-                MemorySegment segment = MemorySegment.allocateNative(64, session);\n+                MemorySegment segment = MemorySegment.allocateNative(128, session);\n@@ -87,4 +87,4 @@\n-                segmentSetter.set(t, layout, 4, value);\n-                assertEquals(bufferGetter.get(buffer, 4), value);\n-                bufferSetter.set(buffer, 4, value);\n-                assertEquals(value, segmentGetter.get(t, layout, 4));\n+                segmentSetter.set(t, layout, 8, value);\n+                assertEquals(bufferGetter.get(buffer, 8), value);\n+                bufferSetter.set(buffer, 8, value);\n+                assertEquals(value, segmentGetter.get(t, layout, 8));\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -101,0 +101,8 @@\n+    \/\/ unaligned constants\n+    public final static ValueLayout.OfShort JAVA_SHORT_UNALIGNED = JAVA_SHORT.withBitAlignment(8);\n+    public final static ValueLayout.OfChar JAVA_CHAR_UNALIGNED = JAVA_CHAR.withBitAlignment(8);\n+    public final static ValueLayout.OfInt JAVA_INT_UNALIGNED = JAVA_INT.withBitAlignment(8);\n+    public final static ValueLayout.OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withBitAlignment(8);\n+    public final static ValueLayout.OfDouble JAVA_DOUBLE_UNALIGNED = JAVA_DOUBLE.withBitAlignment(8);\n+    public final static ValueLayout.OfAddress ADDRESS_UNALIGNED = ADDRESS.withBitAlignment(8);\n+\n@@ -126,1 +134,1 @@\n-                        s -> s.get(JAVA_CHAR, 8), (s, x) -> s.set(JAVA_CHAR, 8, x),\n+                        s -> s.get(JAVA_CHAR_UNALIGNED, 8), (s, x) -> s.set(JAVA_CHAR_UNALIGNED, 8, x),\n@@ -130,2 +138,2 @@\n-                        s -> s.get(JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n-                        (s, x) -> s.set(JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_CHAR_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_CHAR_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n@@ -135,2 +143,2 @@\n-                        s -> s.get(JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN), 8),\n-                        (s, x) -> s.set(JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_CHAR_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_CHAR_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n@@ -141,1 +149,1 @@\n-                        s -> s.get(JAVA_SHORT, 8), (s, x) -> s.set(JAVA_SHORT, 8, x),\n+                        s -> s.get(JAVA_SHORT_UNALIGNED, 8), (s, x) -> s.set(JAVA_SHORT_UNALIGNED, 8, x),\n@@ -145,2 +153,2 @@\n-                        s -> s.get(JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n-                        (s, x) -> s.set(JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_SHORT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_SHORT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n@@ -150,2 +158,2 @@\n-                        s -> s.get(JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN), 8),\n-                        (s, x) -> s.set(JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_SHORT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_SHORT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n@@ -156,1 +164,1 @@\n-                        s -> s.get(JAVA_INT, 8), (s, x) -> s.set(JAVA_INT, 8, x),\n+                        s -> s.get(JAVA_INT_UNALIGNED, 8), (s, x) -> s.set(JAVA_INT_UNALIGNED, 8, x),\n@@ -160,2 +168,2 @@\n-                        s -> s.get(JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n-                        (s, x) -> s.set(JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_INT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_INT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n@@ -165,2 +173,2 @@\n-                        s -> s.get(JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN), 8),\n-                        (s, x) -> s.set(JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_INT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_INT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n@@ -171,1 +179,1 @@\n-                        s -> s.get(JAVA_FLOAT, 8), (s, x) -> s.set(JAVA_FLOAT, 8, x),\n+                        s -> s.get(JAVA_FLOAT_UNALIGNED, 8), (s, x) -> s.set(JAVA_FLOAT_UNALIGNED, 8, x),\n@@ -175,2 +183,2 @@\n-                        s -> s.get(ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n-                        (s, x) -> s.set(ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_FLOAT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_FLOAT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n@@ -180,2 +188,2 @@\n-                        s -> s.get(ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN), 8),\n-                        (s, x) -> s.set(ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_FLOAT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_FLOAT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n@@ -186,1 +194,1 @@\n-                        s -> s.get(JAVA_DOUBLE, 8), (s, x) -> s.set(JAVA_DOUBLE, 8, x),\n+                        s -> s.get(JAVA_DOUBLE_UNALIGNED, 8), (s, x) -> s.set(JAVA_DOUBLE_UNALIGNED, 8, x),\n@@ -190,2 +198,2 @@\n-                        s -> s.get(ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n-                        (s, x) -> s.set(ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_DOUBLE_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_DOUBLE_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN), 8, x),\n@@ -195,2 +203,2 @@\n-                        s -> s.get(ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN), 8),\n-                        (s, x) -> s.set(ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n+                        s -> s.get(JAVA_DOUBLE_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8),\n+                        (s, x) -> s.set(JAVA_DOUBLE_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN), 8, x),\n@@ -200,1 +208,1 @@\n-                        s -> s.get(ADDRESS, 8), (s, x) -> s.set(ADDRESS, 8, x),\n+                        s -> s.get(ADDRESS_UNALIGNED, 8), (s, x) -> s.set(ADDRESS_UNALIGNED, 8, x),\n@@ -203,1 +211,1 @@\n-                            long addr = ValueLayout.ADDRESS.byteSize() == 8 ?\n+                            long addr = ADDRESS_UNALIGNED.byteSize() == 8 ?\n@@ -209,1 +217,1 @@\n-                            if (ValueLayout.ADDRESS.byteSize() == 8) {\n+                            if (ADDRESS_UNALIGNED.byteSize() == 8) {\n","filename":"test\/jdk\/java\/foreign\/TestMemoryDereference.java","additions":36,"deletions":28,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -102,6 +102,6 @@\n-        SHORT_LE(short.class, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN), i -> (short)i),\n-        CHAR_LE(char.class, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN), i -> (char)i),\n-        INT_LE(int.class, ValueLayout.JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN), i -> i),\n-        FLOAT_LE(float.class, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN), i -> (float)i),\n-        LONG_LE(long.class, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN), i -> (long)i),\n-        DOUBLE_LE(double.class, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN), i -> (double)i),\n+        SHORT_LE(short.class, ValueLayout.JAVA_SHORT.withBitAlignment(8).withOrder(ByteOrder.LITTLE_ENDIAN), i -> (short)i),\n+        CHAR_LE(char.class, ValueLayout.JAVA_CHAR.withBitAlignment(8).withOrder(ByteOrder.LITTLE_ENDIAN), i -> (char)i),\n+        INT_LE(int.class, ValueLayout.JAVA_INT.withBitAlignment(8).withOrder(ByteOrder.LITTLE_ENDIAN), i -> i),\n+        FLOAT_LE(float.class, ValueLayout.JAVA_FLOAT.withBitAlignment(8).withOrder(ByteOrder.LITTLE_ENDIAN), i -> (float)i),\n+        LONG_LE(long.class, ValueLayout.JAVA_LONG.withBitAlignment(8).withOrder(ByteOrder.LITTLE_ENDIAN), i -> (long)i),\n+        DOUBLE_LE(double.class, ValueLayout.JAVA_DOUBLE.withBitAlignment(8).withOrder(ByteOrder.LITTLE_ENDIAN), i -> (double)i),\n@@ -109,6 +109,6 @@\n-        SHORT_BE(short.class, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN), i -> (short)i),\n-        CHAR_BE(char.class, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN), i -> (char)i),\n-        INT_BE(int.class, ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN), i -> i),\n-        FLOAT_BE(float.class, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN), i -> (float)i),\n-        LONG_BE(long.class, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN), i -> (long)i),\n-        DOUBLE_BE(double.class, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN), i -> (double)i);\n+        SHORT_BE(short.class, ValueLayout.JAVA_SHORT.withBitAlignment(8).withOrder(ByteOrder.BIG_ENDIAN), i -> (short)i),\n+        CHAR_BE(char.class, ValueLayout.JAVA_CHAR.withBitAlignment(8).withOrder(ByteOrder.BIG_ENDIAN), i -> (char)i),\n+        INT_BE(int.class, ValueLayout.JAVA_INT.withBitAlignment(8).withOrder(ByteOrder.BIG_ENDIAN), i -> i),\n+        FLOAT_BE(float.class, ValueLayout.JAVA_FLOAT.withBitAlignment(8).withOrder(ByteOrder.BIG_ENDIAN), i -> (float)i),\n+        LONG_BE(long.class, ValueLayout.JAVA_LONG.withBitAlignment(8).withOrder(ByteOrder.BIG_ENDIAN), i -> (long)i),\n+        DOUBLE_BE(double.class, ValueLayout.JAVA_DOUBLE.withBitAlignment(8).withOrder(ByteOrder.BIG_ENDIAN), i -> (double)i);\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -75,1 +75,2 @@\n-        VarHandle vh = MethodHandles.memoryAccessVarHandle(ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN));\n+        VarHandle vh = MethodHandles.memoryAccessVarHandle(ValueLayout.JAVA_SHORT\n+                .withOrder(ByteOrder.LITTLE_ENDIAN).withBitAlignment(8));\n@@ -85,1 +86,2 @@\n-        VarHandle vh = MethodHandles.memoryAccessVarHandle(ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN));\n+        VarHandle vh = MethodHandles.memoryAccessVarHandle(ValueLayout.JAVA_SHORT\n+                .withOrder(ByteOrder.BIG_ENDIAN).withBitAlignment(8));\n","filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-            MemorySegment dest = MemorySegment.ofArray(new byte[(int)segment.byteSize()]);\n+            MemorySegment dest = MemorySegment.ofArray(new long[(int)segment.byteSize() \/ 8]);\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}