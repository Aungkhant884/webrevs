{"files":[{"patch":"@@ -171,1 +171,1 @@\n-  bool should_save_return_value = !_needs_return_buffer && _needs_transition;\n+  bool should_save_return_value = !_needs_return_buffer;\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  bool should_save_return_value = !_needs_return_buffer && _needs_transition;\n+  bool should_save_return_value = !_needs_return_buffer;\n","filename":"src\/hotspot\/cpu\/ppc\/downcallLinker_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  bool should_save_return_value = !_needs_return_buffer && _needs_transition;\n+  bool should_save_return_value = !_needs_return_buffer;\n","filename":"src\/hotspot\/cpu\/riscv\/downcallLinker_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-  bool should_save_return_value = !_needs_return_buffer && _needs_transition;\n+  bool should_save_return_value = !_needs_return_buffer;\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    private record SaveValuesCase(String nativeTarget, FunctionDescriptor nativeDesc, String threadLocalName, Consumer<Object> resultCheck) {}\n+    private record SaveValuesCase(String nativeTarget, FunctionDescriptor nativeDesc, boolean trivial, String threadLocalName, Consumer<Object> resultCheck) {}\n@@ -70,2 +70,6 @@\n-        Linker.Option stl = Linker.Option.captureCallState(testCase.threadLocalName());\n-        MethodHandle handle = downcallHandle(testCase.nativeTarget(), testCase.nativeDesc(), stl);\n+        List<Linker.Option> options = new ArrayList<>();\n+        options.add(Linker.Option.captureCallState(testCase.threadLocalName()));\n+        if (testCase.trivial()) {\n+            options.add(Linker.Option.isTrivial());\n+        }\n+        MethodHandle handle = downcallHandle(testCase.nativeTarget(), testCase.nativeDesc(), options.toArray(Linker.Option[]::new));\n@@ -104,0 +108,4 @@\n+    interface CaseAdder {\n+      void addCase(String nativeTarget, FunctionDescriptor nativeDesc, String threadLocalName, Consumer<Object> resultCheck);\n+    }\n+\n@@ -107,0 +115,4 @@\n+        CaseAdder adder = (nativeTarget, nativeDesc, threadLocalName, resultCheck) -> {\n+          cases.add(new SaveValuesCase(nativeTarget, nativeDesc, false, threadLocalName, resultCheck));\n+          cases.add(new SaveValuesCase(nativeTarget, nativeDesc, true, threadLocalName, resultCheck));\n+        };\n@@ -108,16 +120,16 @@\n-        cases.add(new SaveValuesCase(\"set_errno_V\", FunctionDescriptor.ofVoid(JAVA_INT), \"errno\", o -> {}));\n-        cases.add(new SaveValuesCase(\"set_errno_I\", FunctionDescriptor.of(JAVA_INT, JAVA_INT), \"errno\", o -> assertEquals((int) o, 42)));\n-        cases.add(new SaveValuesCase(\"set_errno_D\", FunctionDescriptor.of(JAVA_DOUBLE, JAVA_INT), \"errno\", o -> assertEquals((double) o, 42.0)));\n-\n-        cases.add(structCase(\"SL\",  Map.of(JAVA_LONG.withName(\"x\"), 42L)));\n-        cases.add(structCase(\"SLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n-                                           JAVA_LONG.withName(\"y\"), 42L)));\n-        cases.add(structCase(\"SLLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n-                                            JAVA_LONG.withName(\"y\"), 42L,\n-                                            JAVA_LONG.withName(\"z\"), 42L)));\n-        cases.add(structCase(\"SD\",  Map.of(JAVA_DOUBLE.withName(\"x\"), 42D)));\n-        cases.add(structCase(\"SDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n-                                           JAVA_DOUBLE.withName(\"y\"), 42D)));\n-        cases.add(structCase(\"SDDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n-                                            JAVA_DOUBLE.withName(\"y\"), 42D,\n-                                            JAVA_DOUBLE.withName(\"z\"), 42D)));\n+        adder.addCase(\"set_errno_V\", FunctionDescriptor.ofVoid(JAVA_INT), \"errno\", o -> {});\n+        adder.addCase(\"set_errno_I\", FunctionDescriptor.of(JAVA_INT, JAVA_INT), \"errno\", o -> assertEquals((int) o, 42));\n+        adder.addCase(\"set_errno_D\", FunctionDescriptor.of(JAVA_DOUBLE, JAVA_INT), \"errno\", o -> assertEquals((double) o, 42.0));\n+\n+        structCase(adder, \"SL\",  Map.of(JAVA_LONG.withName(\"x\"), 42L));\n+        structCase(adder, \"SLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                         JAVA_LONG.withName(\"y\"), 42L));\n+        structCase(adder, \"SLLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                         JAVA_LONG.withName(\"y\"), 42L,\n+                                         JAVA_LONG.withName(\"z\"), 42L));\n+        structCase(adder, \"SD\",  Map.of(JAVA_DOUBLE.withName(\"x\"), 42D));\n+        structCase(adder, \"SDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                         JAVA_DOUBLE.withName(\"y\"), 42D));\n+        structCase(adder, \"SDDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                         JAVA_DOUBLE.withName(\"y\"), 42D,\n+                                         JAVA_DOUBLE.withName(\"z\"), 42D));\n@@ -126,2 +138,2 @@\n-            cases.add(new SaveValuesCase(\"SetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"GetLastError\", o -> {}));\n-            cases.add(new SaveValuesCase(\"WSASetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"WSAGetLastError\", o -> {}));\n+            adder.addCase(\"SetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"GetLastError\", o -> {});\n+            adder.addCase(\"WSASetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"WSAGetLastError\", o -> {});\n@@ -133,1 +145,1 @@\n-    static SaveValuesCase structCase(String name, Map<MemoryLayout, Object> fields) {\n+    static void structCase(CaseAdder adder, String name, Map<MemoryLayout, Object> fields) {\n@@ -144,1 +156,1 @@\n-        return new SaveValuesCase(\"set_errno_\" + name, FunctionDescriptor.of(layout, JAVA_INT), \"errno\", check);\n+        adder.addCase(\"set_errno_\" + name, FunctionDescriptor.of(layout, JAVA_INT), \"errno\", check);\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"}]}