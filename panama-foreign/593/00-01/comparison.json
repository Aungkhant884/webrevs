{"files":[{"patch":"@@ -296,1 +296,1 @@\n-void MacroAssembler::safepoint_poll(Label& slow_path, bool at_return, bool acquire, bool in_nmethod, Register scratch) {\n+void MacroAssembler::safepoint_poll(Label& slow_path, bool at_return, bool acquire, bool in_nmethod, Register tmp) {\n@@ -298,2 +298,2 @@\n-    lea(scratch, Address(rthread, JavaThread::polling_word_offset()));\n-    ldar(scratch, scratch);\n+    lea(tmp, Address(rthread, JavaThread::polling_word_offset()));\n+    ldar(tmp, tmp);\n@@ -301,1 +301,1 @@\n-    ldr(scratch, Address(rthread, JavaThread::polling_word_offset()));\n+    ldr(tmp, Address(rthread, JavaThread::polling_word_offset()));\n@@ -306,1 +306,1 @@\n-    cmp(in_nmethod ? sp : rfp, rscratch1);\n+    cmp(in_nmethod ? sp : rfp, tmp);\n@@ -309,1 +309,1 @@\n-    tbnz(scratch, log2i_exact(SafepointMechanism::poll_bit()), slow_path);\n+    tbnz(tmp, log2i_exact(SafepointMechanism::poll_bit()), slow_path);\n@@ -313,1 +313,1 @@\n-void MacroAssembler::rt_call(address dest, Register scratch) {\n+void MacroAssembler::rt_call(address dest, Register tmp) {\n@@ -318,2 +318,2 @@\n-    lea(scratch, RuntimeAddress(dest));\n-    blr(scratch);\n+    lea(tmp, RuntimeAddress(dest));\n+    blr(tmp);\n@@ -5121,1 +5121,1 @@\n-void MacroAssembler::verify_sve_vector_length(Register scratch) {\n+void MacroAssembler::verify_sve_vector_length(Register tmp) {\n@@ -5125,3 +5125,3 @@\n-  movw(scratch, zr);\n-  sve_inc(scratch, B);\n-  subsw(zr, scratch, VM_Version::get_initial_sve_vector_length());\n+  movw(tmp, zr);\n+  sve_inc(tmp, B);\n+  subsw(zr, tmp, VM_Version::get_initial_sve_vector_length());\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-  void safepoint_poll(Label& slow_path, bool at_return, bool acquire, bool in_nmethod, Register scratch = rscratch1);\n-  void rt_call(address dest, Register scratch = rscratch1);\n+  void safepoint_poll(Label& slow_path, bool at_return, bool acquire, bool in_nmethod, Register tmp = rscratch1);\n+  void rt_call(address dest, Register tmp = rscratch1);\n@@ -967,1 +967,1 @@\n-  void verify_sve_vector_length(Register scratch = rscratch1);\n+  void verify_sve_vector_length(Register tmp = rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -221,4 +221,4 @@\n-  Register scratch1 = r9;\n-  Register scratch2 = r10;\n-  assert(!target_uses_register(scratch1->as_VMReg()), \"conflict\");\n-  assert(!target_uses_register(scratch2->as_VMReg()), \"conflict\");\n+  Register tmp1 = r9;\n+  Register tmp2 = r10;\n+  assert(!target_uses_register(tmp1->as_VMReg()), \"conflict\");\n+  assert(!target_uses_register(tmp2->as_VMReg()), \"conflict\");\n@@ -228,4 +228,4 @@\n-    rbp_off,\n-    rbp_off2,\n-    return_off,\n-    return_off2,\n+    rfp_off,\n+    rfp_off2,\n+    lr_off,\n+    lr_off2,\n@@ -238,1 +238,1 @@\n-  Register input_addr_reg = scratch1;\n+  Register input_addr_reg = tmp1;\n@@ -274,1 +274,1 @@\n-  __ set_last_Java_frame(sp, rfp, the_pc, scratch1);\n+  __ set_last_Java_frame(sp, rfp, the_pc, tmp1);\n@@ -279,3 +279,3 @@\n-  __ mov(scratch1, _thread_in_native);\n-  __ lea(scratch2, Address(rthread, JavaThread::thread_state_offset()));\n-  __ stlrw(scratch1, scratch2);\n+  __ mov(tmp1, _thread_in_native);\n+  __ lea(tmp2, Address(rthread, JavaThread::thread_state_offset()));\n+  __ stlrw(tmp1, tmp2);\n@@ -305,2 +305,2 @@\n-  __ mov(scratch1, _thread_in_native_trans);\n-  __ strw(scratch1, Address(rthread, JavaThread::thread_state_offset()));\n+  __ mov(tmp1, _thread_in_native_trans);\n+  __ strw(tmp1, Address(rthread, JavaThread::thread_state_offset()));\n@@ -312,1 +312,1 @@\n-  __ verify_sve_vector_length(scratch1);\n+  __ verify_sve_vector_length(tmp1);\n@@ -317,1 +317,1 @@\n-  __ safepoint_poll(L_safepoint_poll_slow_path, true \/* at_return *\/, true \/* acquire *\/, false \/* in_nmethod *\/, scratch1);\n+  __ safepoint_poll(L_safepoint_poll_slow_path, true \/* at_return *\/, true \/* acquire *\/, false \/* in_nmethod *\/, tmp1);\n@@ -319,2 +319,2 @@\n-  __ ldrw(scratch1, Address(rthread, JavaThread::suspend_flags_offset()));\n-  __ cbnzw(scratch1, L_safepoint_poll_slow_path);\n+  __ ldrw(tmp1, Address(rthread, JavaThread::suspend_flags_offset()));\n+  __ cbnzw(tmp1, L_safepoint_poll_slow_path);\n@@ -325,3 +325,3 @@\n-  __ mov(scratch1, _thread_in_Java);\n-  __ lea(scratch2, Address(rthread, JavaThread::thread_state_offset()));\n-  __ stlrw(scratch1, scratch2);\n+  __ mov(tmp1, _thread_in_Java);\n+  __ lea(tmp2, Address(rthread, JavaThread::thread_state_offset()));\n+  __ stlrw(tmp1, tmp2);\n@@ -332,2 +332,2 @@\n-  __ ldrb(scratch1, Address(rthread, JavaThread::stack_guard_state_offset()));\n-  __ cmpw(scratch1, StackOverflow::stack_guard_yellow_reserved_disabled);\n+  __ ldrb(tmp1, Address(rthread, JavaThread::stack_guard_state_offset()));\n+  __ cmpw(tmp1, StackOverflow::stack_guard_yellow_reserved_disabled);\n@@ -352,2 +352,2 @@\n-  __ lea(scratch1, RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans)));\n-  __ blr(scratch1);\n+  __ lea(tmp1, RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans)));\n+  __ blr(tmp1);\n@@ -367,1 +367,1 @@\n-  __ rt_call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages), scratch1);\n+  __ rt_call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages), tmp1);\n","filename":"src\/hotspot\/cpu\/aarch64\/universalNativeInvoker_aarch64.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"}]}