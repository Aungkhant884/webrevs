{"files":[{"patch":"@@ -104,1 +104,1 @@\n-VMReg vmstorage_to_vmreg(int type, int index) {\n+VMReg ForeignGlobals::vmstorage_to_vmreg(int type, int index) {\n@@ -113,1 +113,1 @@\n-int RegSpillFill::pd_reg_size(VMReg reg) const {\n+int RegSpiller::pd_reg_size(VMReg reg) {\n@@ -126,1 +126,1 @@\n-void RegSpillFill::pd_store_reg(MacroAssembler* masm, int offset, VMReg reg) const {\n+void RegSpiller::pd_store_reg(MacroAssembler* masm, int offset, VMReg reg) {\n@@ -141,1 +141,1 @@\n-void RegSpillFill::pd_load_reg(MacroAssembler* masm, int offset, VMReg reg) const {\n+void RegSpiller::pd_load_reg(MacroAssembler* masm, int offset, VMReg reg) {\n@@ -156,1 +156,1 @@\n-void ArgumentShuffle::pd_gen_shuffle(MacroAssembler* masm) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm) const {\n","filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-  RegSpillFill out_reg_spill(_output_registers.data(), _output_registers.length());\n+  RegSpiller out_reg_spiller(_output_registers);\n@@ -257,1 +257,1 @@\n-    + (out_reg_spill.spill_size_bytes() >> LogBytesPerInt)\n+    + (out_reg_spiller.spill_size_bytes() >> LogBytesPerInt)\n@@ -284,1 +284,1 @@\n-  arg_shuffle.gen_shuffle(_masm);\n+  arg_shuffle.generate(_masm);\n@@ -348,1 +348,1 @@\n-  out_reg_spill.gen_spill(_masm, spill_offset);\n+  out_reg_spiller.generate_spill(_masm, spill_offset);\n@@ -355,1 +355,1 @@\n-  out_reg_spill.gen_fill(_masm, spill_offset);\n+  out_reg_spiller.generate_fill(_masm, spill_offset);\n@@ -365,1 +365,1 @@\n-  out_reg_spill.gen_spill(_masm, spill_offset);\n+  out_reg_spiller.generate_spill(_masm, spill_offset);\n@@ -369,1 +369,1 @@\n-  out_reg_spill.gen_fill(_masm, spill_offset);\n+  out_reg_spiller.generate_fill(_masm, spill_offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/universalNativeInvoker_aarch64.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-VMReg vmstorage_to_vmreg(int type, int index) {\n+VMReg ForeignGlobals::vmstorage_to_vmreg(int type, int index) {\n","filename":"src\/hotspot\/cpu\/arm\/foreign_globals_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-VMReg vmstorage_to_vmreg(int type, int index) {\n+VMReg ForeignGlobals::vmstorage_to_vmreg(int type, int index) {\n","filename":"src\/hotspot\/cpu\/ppc\/foreign_globals_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-VMReg vmstorage_to_vmreg(int type, int index) {\n+VMReg ForeignGlobals::vmstorage_to_vmreg(int type, int index) {\n","filename":"src\/hotspot\/cpu\/s390\/foreign_globals_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-VMReg vmstorage_to_vmreg(int type, int index) {\n+VMReg ForeignGlobals::vmstorage_to_vmreg(int type, int index) {\n@@ -139,1 +139,1 @@\n-int RegSpillFill::pd_reg_size(VMReg reg) const {\n+int RegSpiller::pd_reg_size(VMReg reg) {\n@@ -148,1 +148,1 @@\n-void RegSpillFill::pd_store_reg(MacroAssembler* masm, int offset, VMReg reg) const {\n+void RegSpiller::pd_store_reg(MacroAssembler* masm, int offset, VMReg reg) {\n@@ -158,1 +158,1 @@\n-void RegSpillFill::pd_load_reg(MacroAssembler* masm, int offset, VMReg reg) const {\n+void RegSpiller::pd_load_reg(MacroAssembler* masm, int offset, VMReg reg) {\n@@ -168,1 +168,1 @@\n-void ArgumentShuffle::pd_gen_shuffle(MacroAssembler* masm) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm) const {\n","filename":"src\/hotspot\/cpu\/x86\/foreign_globals_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  RegSpillFill out_reg_spill(_output_registers.data(), _output_registers.length());\n+  RegSpiller out_reg_spiller(_output_registers);\n@@ -276,2 +276,2 @@\n-  allocated_frame_size = out_reg_spill.spill_size_bytes() > allocated_frame_size\n-    ? out_reg_spill.spill_size_bytes()\n+  allocated_frame_size = out_reg_spiller.spill_size_bytes() > allocated_frame_size\n+    ? out_reg_spiller.spill_size_bytes()\n@@ -308,1 +308,1 @@\n-  arg_shuffle.gen_shuffle(_masm);\n+  arg_shuffle.generate(_masm);\n@@ -370,1 +370,1 @@\n-  out_reg_spill.gen_spill(_masm, spill_rsp_offset);\n+  out_reg_spiller.generate_spill(_masm, spill_rsp_offset);\n@@ -380,1 +380,1 @@\n-  out_reg_spill.gen_fill(_masm, spill_rsp_offset);\n+  out_reg_spiller.generate_fill(_masm, spill_rsp_offset);\n@@ -391,1 +391,1 @@\n-  out_reg_spill.gen_spill(_masm, spill_rsp_offset);\n+  out_reg_spiller.generate_spill(_masm, spill_rsp_offset);\n@@ -400,1 +400,1 @@\n-  out_reg_spill.gen_fill(_masm, spill_rsp_offset);\n+  out_reg_spiller.generate_fill(_masm, spill_rsp_offset);\n","filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86_64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -337,2 +337,2 @@\n-  RegSpillFill arg_spill(call_regs._arg_regs, call_regs._args_length);\n-  RegSpillFill result_spill(call_regs._ret_regs, call_regs._rets_length);\n+  RegSpiller arg_spilller(call_regs._arg_regs, call_regs._args_length);\n+  RegSpiller result_spiller(call_regs._ret_regs, call_regs._rets_length);\n@@ -345,2 +345,2 @@\n-  int arg_save_area_offset   = res_save_area_offset   + result_spill.spill_size_bytes();\n-  int reg_save_area_offset   = arg_save_area_offset   + arg_spill.spill_size_bytes();\n+  int arg_save_area_offset   = res_save_area_offset   + result_spiller.spill_size_bytes();\n+  int reg_save_area_offset   = arg_save_area_offset   + arg_spilller.spill_size_bytes();\n@@ -392,1 +392,1 @@\n-  arg_spill.gen_spill(_masm, arg_save_area_offset);\n+  arg_spilller.generate_spill(_masm, arg_save_area_offset);\n@@ -406,2 +406,2 @@\n-  arg_spill.gen_fill(_masm, arg_save_area_offset);\n-  arg_shuffle.gen_shuffle(_masm);\n+  arg_spilller.generate_fill(_masm, arg_save_area_offset);\n+  arg_shuffle.generate(_masm);\n@@ -421,1 +421,1 @@\n-  result_spill.gen_spill(_masm, res_save_area_offset);\n+  result_spiller.generate_spill(_masm, res_save_area_offset);\n@@ -433,1 +433,1 @@\n-  result_spill.gen_fill(_masm, res_save_area_offset);\n+  result_spiller.generate_fill(_masm, res_save_area_offset);\n","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86_64.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-VMReg vmstorage_to_vmreg(int type, int index) {\n+VMReg ForeignGlobals::vmstorage_to_vmreg(int type, int index) {\n","filename":"src\/hotspot\/cpu\/zero\/foreign_globals_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-int RegSpillFill::compute_spill_area() {\n+int RegSpiller::compute_spill_area(const VMReg* regs, int num_regs) {\n@@ -136,2 +136,2 @@\n-  for (int i = 0; i < _num_regs; i++) {\n-    result_size += pd_reg_size(_regs[i]);\n+  for (int i = 0; i < num_regs; i++) {\n+    result_size += pd_reg_size(regs[i]);\n@@ -142,1 +142,1 @@\n-void RegSpillFill::gen(MacroAssembler* masm, int rsp_offset, bool spill) const {\n+void RegSpiller::generate(MacroAssembler* masm, int rsp_offset, bool spill) const {\n","filename":"src\/hotspot\/share\/prims\/foreign_globals.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -93,0 +93,2 @@\n+\n+  static VMReg vmstorage_to_vmreg(int type, int index);\n@@ -95,1 +97,1 @@\n-VMReg vmstorage_to_vmreg(int type, int index);\n+\n@@ -115,1 +117,1 @@\n-class RegSpillFill {\n+class RegSpiller {\n@@ -120,2 +122,5 @@\n-  RegSpillFill(const VMReg* regs, int num_regs) : _regs(regs), _num_regs(num_regs) {\n-    _spill_size_bytes = compute_spill_area();\n+  RegSpiller(const VMReg* regs, int num_regs) :\n+    _regs(regs), _num_regs(num_regs),\n+    _spill_size_bytes(compute_spill_area(regs, num_regs)) {\n+  }\n+  RegSpiller(const GrowableArray<VMReg>& regs) : RegSpiller(regs.data(), regs.length()) {\n@@ -125,2 +130,2 @@\n-  void gen_spill(MacroAssembler* masm, int rsp_offset) const { return gen(masm, rsp_offset, true); }\n-  void gen_fill(MacroAssembler* masm, int rsp_offset) const { return gen(masm, rsp_offset, false); }\n+  void generate_spill(MacroAssembler* masm, int rsp_offset) const { return generate(masm, rsp_offset, true); }\n+  void generate_fill(MacroAssembler* masm, int rsp_offset) const { return generate(masm, rsp_offset, false); }\n@@ -129,2 +134,2 @@\n-  int compute_spill_area();\n-  void gen(MacroAssembler* masm, int rsp_offset, bool is_spill) const;\n+  static int compute_spill_area(const VMReg* regs, int num_regs);\n+  void generate(MacroAssembler* masm, int rsp_offset, bool is_spill) const;\n@@ -132,3 +137,3 @@\n-  int pd_reg_size(VMReg reg) const;\n-  void pd_store_reg(MacroAssembler* masm, int offset, VMReg reg) const;\n-  void pd_load_reg(MacroAssembler* masm, int offset, VMReg reg) const;\n+  static int pd_reg_size(VMReg reg);\n+  static void pd_store_reg(MacroAssembler* masm, int offset, VMReg reg);\n+  static void pd_load_reg(MacroAssembler* masm, int offset, VMReg reg);\n@@ -155,2 +160,2 @@\n-  void gen_shuffle(MacroAssembler* masm) const {\n-    pd_gen_shuffle(masm);\n+  void generate(MacroAssembler* masm) const {\n+    pd_generate(masm);\n@@ -161,1 +166,1 @@\n-  void pd_gen_shuffle(MacroAssembler* masm) const;\n+  void pd_generate(MacroAssembler* masm) const;\n","filename":"src\/hotspot\/share\/prims\/foreign_globals.hpp","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  return vmstorage_to_vmreg(type, index)->value();\n+  return ForeignGlobals::vmstorage_to_vmreg(type, index)->value();\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}