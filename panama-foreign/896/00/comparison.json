{"files":[{"patch":"@@ -311,1 +311,1 @@\n-    void ensureNativeAccess(Class<?> owner, String methodName) {\n+    void ensureNativeAccess(Class<?> owner, String methodName, Class<?> currentClass) {\n@@ -322,1 +322,1 @@\n-                String mod = isNamed() ? \"module \" + getName() : \"the unnamed module\";\n+                String mod = isNamed() ? \"module \" + getName() : \"an unnamed module\";\n@@ -324,0 +324,2 @@\n+                String caller = currentClass != null ?\n+                        \" by \" + currentClass.getName() : \"\";\n@@ -326,3 +328,4 @@\n-                        WARNING: %s has been called by %s\n-                        WARNING: Use --enable-native-access=%s to avoid a warning for this module\n-                        %n\"\"\", cls, mtd, mod, modflag);\n+                        WARNING: %s has been called%s in %s\n+                        WARNING: Use --enable-native-access=%s to avoid a warning for callers in this module\n+                        WARNING: Restricted methods will be blocked in a future release unless native access is enabled\n+                        %n\"\"\", cls, mtd, caller, mod, modflag);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -309,3 +309,1 @@\n-         * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain\n-         * from depending on restricted methods, and use safe and supported functionalities,\n-         * where possible.\n+         * the JVM or, worse, silently result in memory corruption.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ModuleLayer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2457,2 +2457,2 @@\n-            public void ensureNativeAccess(Module m, Class<?> owner, String methodName) {\n-                m.ensureNativeAccess(owner, methodName);\n+            public void ensureNativeAccess(Module m, Class<?> owner, String methodName, Class<?> currentClass) {\n+                m.ensureNativeAccess(owner, methodName, currentClass);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,2 +103,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AddressLayout.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -525,2 +525,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n@@ -580,2 +579,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n@@ -617,2 +615,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -609,2 +609,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n@@ -642,2 +641,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n@@ -681,2 +679,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -216,2 +216,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n@@ -250,2 +249,1 @@\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n+     * the JVM or, worse, silently result in memory corruption.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-    void ensureNativeAccess(Module m, Class<?> owner, String methodName);\n+    void ensureNativeAccess(Module m, Class<?> owner, String methodName, Class<?> currentClass);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-        Holder.JLA.ensureNativeAccess(module, owner, methodName);\n+        Holder.JLA.ensureNativeAccess(module, owner, methodName, currentClass);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/Reflection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-        assertTrue(count(output1, \"WARNING\") == 3);  \/\/ 3 on first access, none on subsequent access\n+        assertTrue(count(output1, \"WARNING\") == 4);  \/\/ 4 on first access, none on subsequent access\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}