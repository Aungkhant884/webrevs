{"files":[{"patch":"@@ -748,1 +748,0 @@\n-    bool should_detach;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,20 @@\n+\/\/ When an upcall is invoked from a thread that is not attached to the VM, we need to attach it,\n+\/\/ and then to detach it at some point later. Detaching a thread as soon as the upcall completes\n+\/\/ is suboptimal, as the same thread could later upcall to Java again, at which point the VM would\n+\/\/ create multiple Java views of the same native thread. For this reason, we use thread local storage\n+\/\/ to keep track of the fact that we have attached a native thread to the VM. When the thread local\n+\/\/ storage is destroyed (which happens when the native threads is terminated), we check if the\n+\/\/ storage has an attached thread and, if so, we detach it from the VM.\n+struct UpcallContext {\n+  Thread* attachedThread;\n+\n+  ~UpcallContext() {\n+    if (attachedThread != NULL) {\n+      JavaVM_ *vm = (JavaVM *)(&main_vm);\n+      vm->functions->DetachCurrentThread(vm);\n+    }\n+  }\n+};\n+\n+thread_local UpcallContext threadContext;\n+\n@@ -54,1 +74,1 @@\n-Thread* ProgrammableUpcallHandler::maybe_attach_and_get_thread(bool* should_detach) {\n+Thread* ProgrammableUpcallHandler::maybe_attach_and_get_thread() {\n@@ -59,1 +79,1 @@\n-    jint result = vm->functions->AttachCurrentThread(vm, (void**) &p_env, nullptr);\n+    jint result = vm->functions->AttachCurrentThreadAsDaemon(vm, (void**) &p_env, nullptr);\n@@ -61,1 +81,0 @@\n-    *should_detach = true;\n@@ -63,0 +82,1 @@\n+    threadContext.attachedThread = thread;\n@@ -64,2 +84,0 @@\n-  } else {\n-    *should_detach = false;\n@@ -70,5 +88,0 @@\n-void ProgrammableUpcallHandler::detach_thread(Thread* thread) {\n-  JavaVM_ *vm = (JavaVM *)(&main_vm);\n-  vm->functions->DetachCurrentThread(vm);\n-}\n-\n@@ -77,1 +90,1 @@\n-  JavaThread* thread = JavaThread::cast(maybe_attach_and_get_thread(&context->should_detach));\n+  JavaThread* thread = JavaThread::cast(maybe_attach_and_get_thread());\n@@ -156,4 +169,0 @@\n-\n-  if (context->should_detach) {\n-    detach_thread(thread);\n-  }\n@@ -163,2 +172,1 @@\n-  bool should_detach = false;\n-  Thread* thread = maybe_attach_and_get_thread(&should_detach);\n+  Thread* thread = maybe_attach_and_get_thread();\n@@ -170,4 +178,0 @@\n-\n-  if (should_detach) {\n-    detach_thread(thread);\n-  }\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -51,2 +51,1 @@\n-  static Thread* maybe_attach_and_get_thread(bool* should_detach);\n-  static void detach_thread(Thread* thread);\n+  static Thread* maybe_attach_and_get_thread();\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}