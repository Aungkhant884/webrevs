{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.clang.TypeKind;\n@@ -73,4 +74,0 @@\n-        if (Utils.hasIncompleteArray(cursor)) {\n-            \/\/for now do this - incomplete arrays not supported well in clang\n-            return MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(cursor.type().size() * 8));\n-        }\n@@ -127,1 +124,4 @@\n-        return c.isBitField()? c.getBitFieldWidth() : c.type().size() * 8;\n+        if (c.type().kind() == TypeKind.IncompleteArray) {\n+            return 0;\n+        }\n+        return c.isBitField() ? c.getBitFieldWidth() : c.type().size() * 8;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/RecordLayoutComputer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.clang.TypeKind;\n@@ -72,0 +73,3 @@\n+        if (c.type().kind() == TypeKind.IncompleteArray) {\n+            return 0;\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnionLayoutComputer.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -204,20 +204,0 @@\n-    static Optional<Cursor> lastChild(Cursor c) {\n-        List<Cursor> children = flattenableChildren(c)\n-                .collect(Collectors.toList());\n-        return children.isEmpty() ? Optional.empty() : Optional.of(children.get(children.size() - 1));\n-    }\n-\n-    static boolean hasIncompleteArray(Cursor c) {\n-        switch (c.kind()) {\n-            case FieldDecl:\n-                return c.type().kind() == TypeKind.IncompleteArray;\n-            case UnionDecl:\n-                return flattenableChildren(c)\n-                        .anyMatch(Utils::hasIncompleteArray);\n-            case StructDecl:\n-                return lastChild(c).map(Utils::hasIncompleteArray).orElse(false);\n-            default:\n-                throw new IllegalStateException(\"Unhandled cursor kind: \" + c.kind());\n-        }\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/Utils.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library .. \/test\/lib\n+ * @modules jdk.incubator.jextract\n+ *\n+ * @run testng\/othervm -Dforeign.restricted=permit IncompleteArrayTest\n+ *\/\n+\n+import jdk.incubator.foreign.MemoryLayout;\n+import org.testng.annotations.Test;\n+\n+import static jdk.incubator.foreign.CSupport.C_INT;\n+import static jdk.incubator.foreign.CSupport.C_POINTER;\n+import static org.testng.Assert.*;\n+\n+import java.nio.file.Path;\n+\n+public class IncompleteArrayTest extends JextractToolRunner {\n+\n+    @Test\n+    public void testIncompleteArray() {\n+        Path output = getOutputFilePath(\"incompleteArray_out\");\n+        Path input = getInputFilePath(\"incompleteArray.h\");\n+        run(\n+            \"-t\", \"org.jextract\",\n+            \"-d\", output,\n+            \"--\",\n+            input).checkSuccess();\n+        try (Loader loader = classLoader(output)) {\n+            Class<?> cls = loader.loadClass(\"org.jextract.incompleteArray_h$Foo\");\n+            assertNotNull(cls);\n+\n+            MemoryLayout actualLayout = findLayout(cls);\n+            MemoryLayout expectedLayout = MemoryLayout.ofStruct(\n+                C_INT.withName(\"size\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(C_POINTER).withName(\"data\")\n+            ).withName(\"Foo\");\n+            assertEquals(actualLayout, expectedLayout);\n+        } finally {\n+            \/\/deleteDir(output);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jextract\/incompleteArray\/IncompleteArrayTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -25,5 +25,2 @@\n-    float x;\n-};\n-\n-struct Bar {\n-    int x;\n+    int size;\n+    void* data[]; \/\/ incomplete array\n","filename":"test\/jdk\/tools\/jextract\/incompleteArray\/incompleteArray.h","additions":2,"deletions":5,"binary":false,"changes":7,"previous_filename":"test\/jdk\/tools\/jextract\/test8252465\/test8252465.h","status":"copied"}]}