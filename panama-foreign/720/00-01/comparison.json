{"files":[{"patch":"@@ -685,1 +685,6 @@\n-                emitConst(0b1);\n+                \/\/ implement least significant byte non-zero test\n+                Label falseLabel = new Label();\n+                Label endLabel = new Label();\n+\n+                \/\/ select first byte\n+                emitConst(0xFF);\n@@ -687,0 +692,8 @@\n+\n+                \/\/ check non-zero\n+                mv.visitJumpInsn(IFEQ, falseLabel);\n+                emitConst(1);\n+                mv.visitJumpInsn(GOTO, endLabel);\n+                mv.visitLabel(falseLabel);\n+                emitConst(0);\n+                mv.visitLabel(endLabel);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -60,4 +60,4 @@\n-    private static final MethodHandle SAVE_BOOLEAN;\n-    private static final MethodHandle SAVE_BYTE;\n-    private static final MethodHandle SAVE_SHORT;\n-    private static final MethodHandle SAVE_CHAR;\n+    private static final MethodHandle SAVE_BOOLEAN_AS_INT;\n+    private static final MethodHandle SAVE_BYTE_AS_INT;\n+    private static final MethodHandle SAVE_SHORT_AS_INT;\n+    private static final MethodHandle SAVE_CHAR_AS_INT;\n@@ -77,0 +77,2 @@\n+    private static final MethodHandle SAVE_BOOLEAN;\n+\n@@ -82,4 +84,4 @@\n-            SAVE_BOOLEAN = lookup.findStatic(TestNormalize.class, \"saveBoolean\", MethodType.methodType(void.class, boolean.class, int[].class));\n-            SAVE_BYTE = lookup.findStatic(TestNormalize.class, \"saveByte\", MethodType.methodType(void.class, byte.class, int[].class));\n-            SAVE_SHORT = lookup.findStatic(TestNormalize.class, \"saveShort\", MethodType.methodType(void.class, short.class, int[].class));\n-            SAVE_CHAR = lookup.findStatic(TestNormalize.class, \"saveChar\", MethodType.methodType(void.class, char.class, int[].class));\n+            SAVE_BOOLEAN_AS_INT = lookup.findStatic(TestNormalize.class, \"saveBooleanAsInt\", MethodType.methodType(void.class, boolean.class, int[].class));\n+            SAVE_BYTE_AS_INT = lookup.findStatic(TestNormalize.class, \"saveByteAsInt\", MethodType.methodType(void.class, byte.class, int[].class));\n+            SAVE_SHORT_AS_INT = lookup.findStatic(TestNormalize.class, \"saveShortAsInt\", MethodType.methodType(void.class, short.class, int[].class));\n+            SAVE_CHAR_AS_INT = lookup.findStatic(TestNormalize.class, \"saveCharAsInt\", MethodType.methodType(void.class, char.class, int[].class));\n@@ -93,0 +95,2 @@\n+\n+            SAVE_BOOLEAN = lookup.findStatic(TestNormalize.class, \"saveBoolean\", MethodType.methodType(void.class, boolean.class, boolean[].class));\n@@ -134,1 +138,1 @@\n-    public static void saveBoolean(boolean b, int[] box) {\n+    public static void saveBooleanAsInt(boolean b, int[] box) {\n@@ -137,1 +141,1 @@\n-    public static void saveByte(byte b, int[] box) {\n+    public static void saveByteAsInt(byte b, int[] box) {\n@@ -140,1 +144,1 @@\n-    public static void saveShort(short s, int[] box) {\n+    public static void saveShortAsInt(short s, int[] box) {\n@@ -143,1 +147,1 @@\n-    public static void saveChar(char c, int[] box) {\n+    public static void saveCharAsInt(char c, int[] box) {\n@@ -167,4 +171,34 @@\n-            { JAVA_BOOLEAN, booleanToInt(true),     BOOLEAN_HOB_MASK, BOOLEAN_TO_INT, SAVE_BOOLEAN },\n-            { JAVA_BYTE,    byteToInt((byte) 42),   BYTE_HOB_MASK,    BYTE_TO_INT,    SAVE_BYTE    },\n-            { JAVA_SHORT,   shortToInt((short) 42), SHORT_HOB_MASK,   SHORT_TO_INT,   SAVE_SHORT   },\n-            { JAVA_CHAR,    charToInt('a'),         CHAR_HOB_MASK,    CHAR_TO_INT,    SAVE_CHAR    }\n+            { JAVA_BOOLEAN, booleanToInt(true),     BOOLEAN_HOB_MASK, BOOLEAN_TO_INT, SAVE_BOOLEAN_AS_INT },\n+            { JAVA_BYTE,    byteToInt((byte) 42),   BYTE_HOB_MASK,    BYTE_TO_INT,    SAVE_BYTE_AS_INT    },\n+            { JAVA_SHORT,   shortToInt((short) 42), SHORT_HOB_MASK,   SHORT_TO_INT,   SAVE_SHORT_AS_INT   },\n+            { JAVA_CHAR,    charToInt('a'),         CHAR_HOB_MASK,    CHAR_TO_INT,    SAVE_CHAR_AS_INT    }\n+        };\n+    }\n+\n+    \/\/ test which int values are considered true and false\n+    \/\/ we currently convert any int with a non-zero first byte to true, otherwise false.\n+    @Test(dataProvider = \"bools\")\n+    public void testBool(int testValue, boolean expected) throws Throwable {\n+        MemorySegment addr = findNativeOrThrow(\"test\");\n+        MethodHandle target = LINKER.downcallHandle(addr, FunctionDescriptor.of(JAVA_BOOLEAN, ADDRESS, JAVA_INT));\n+\n+        boolean[] box = new boolean[1];\n+        MethodHandle upcallTarget = MethodHandles.insertArguments(SAVE_BOOLEAN, 1, box);\n+\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment callback = LINKER.upcallStub(upcallTarget, FunctionDescriptor.ofVoid(JAVA_BOOLEAN), session);\n+            boolean result = (boolean) target.invokeExact(callback, testValue);\n+            assertEquals(box[0], expected);\n+            assertEquals(result, expected);\n+        }\n+    }\n+\n+    private static void saveBoolean(boolean b, boolean[] box) {\n+        box[0] = b;\n+    }\n+\n+    @DataProvider\n+    public static Object[][] bools() {\n+        return new Object[][]{\n+            { 0b01,          true  }, \/\/ zero least significant bit, but non-zero first byte\n+            { 0b1_0000_0000, false }  \/\/ zero first byte\n","filename":"test\/jdk\/java\/foreign\/normalize\/TestNormalize.java","additions":50,"deletions":16,"binary":false,"changes":66,"status":"modified"}]}