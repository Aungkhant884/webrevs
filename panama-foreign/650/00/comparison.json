{"files":[{"patch":"@@ -842,1 +842,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize <= 0}.\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n@@ -854,1 +854,1 @@\n-        if (bytesSize <= 0) {\n+        if (bytesSize < 0) {\n@@ -875,1 +875,0 @@\n-     * @throws IllegalArgumentException if the specified layout has illegal size or alignment constraint.\n@@ -900,1 +899,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize <= 0}.\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n@@ -920,1 +919,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize <= 0}, {@code alignmentBytes <= 0}, or if {@code alignmentBytes}\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes <= 0}, or if {@code alignmentBytes}\n@@ -927,1 +926,1 @@\n-        if (bytesSize <= 0) {\n+        if (bytesSize < 0) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -313,0 +313,1 @@\n+     * @throws IllegalArgumentException if {@code count < 0}.\n@@ -325,0 +326,1 @@\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}\n@@ -335,0 +337,2 @@\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes <= 0},\n+     * or if {@code alignmentBytes} is not a power of 2.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,0 +147,4 @@\n+        if (bytesAlignment <= 0 ||\n+                ((bytesAlignment & (bytesAlignment - 1)) != 0L)) {\n+            throw new IllegalArgumentException(\"Invalid alignment constraint : \" + bytesAlignment);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-        long alignedSize = alignmentBytes > MAX_MALLOC_ALIGN ?\n+        long alignedSize = Math.max(1L, alignmentBytes > MAX_MALLOC_ALIGN ?\n@@ -118,1 +118,1 @@\n-                bytesSize;\n+                bytesSize);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-            MemorySegment.ofAddress(segment.address(), 0, MemorySession.global());\n+            MemorySegment.ofAddress(segment.address(), -1, MemorySession.global());\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Xmx4G -XX:MaxDirectMemorySize=1M TestSegments\n+ * @run testng\/othervm -Xmx4G -XX:MaxDirectMemorySize=1M --enable-native-access=ALL-UNNAMED TestSegments\n@@ -31,0 +31,1 @@\n+import java.lang.foreign.MemoryLayout;\n@@ -55,0 +56,18 @@\n+    @Test\n+    public void testZeroLengthNativeSegment() {\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var segment = MemorySegment.allocateNative(0, session);\n+            assertEquals(segment.byteSize(), 0);\n+            MemoryLayout seq = MemoryLayout.sequenceLayout(0, JAVA_INT);\n+            segment = MemorySegment.allocateNative(seq, session);\n+            assertEquals(segment.byteSize(), 0);\n+            assertEquals(segment.address().toRawLongValue() % seq.byteAlignment(), 0);\n+            segment = MemorySegment.allocateNative(0, 4, session);\n+            assertEquals(segment.byteSize(), 0);\n+            assertEquals(segment.address().toRawLongValue() % 4, 0);\n+            segment = MemorySegment.ofAddress(segment.address(), 0, session);\n+            assertEquals(segment.byteSize(), 0);\n+            assertEquals(segment.address().toRawLongValue() % 4, 0);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}