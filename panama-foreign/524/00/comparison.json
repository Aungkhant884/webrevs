{"files":[{"patch":"@@ -384,1 +384,1 @@\n-        if (isSmall()) {\n+        if (isSmall() && offset < Integer.MAX_VALUE && length < Integer.MAX_VALUE) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.incubator.foreign.MemoryAccess;\n@@ -105,0 +106,7 @@\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testSmallSegment() {\n+        long offset = (long)Integer.MAX_VALUE + (long)Integer.MAX_VALUE + 2L + 6L; \/\/ overflows to 6 when casted to int\n+        MemorySegment memorySegment = MemorySegment.allocateNative(10, ResourceScope.newImplicitScope());\n+        MemoryAccess.getIntAtOffset(memorySegment, offset);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -100,5 +100,0 @@\n-    @TearDown\n-    public void tearDown() {\n-        segment.scope().close();\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}