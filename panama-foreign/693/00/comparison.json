{"files":[{"patch":"@@ -231,2 +231,8 @@\n-     * Creates a closeable confined memory session.\n-     * @return a new closeable confined memory session.\n+     * Creates a new closeable, thread-confined memory session.\n+     * <p>\n+     * The returned memory session is confined to the current thread.\n+     * <p>\n+     * The returned memory session <em>must<\/em> eventually be {@linkplain #close() closed}\n+     * to prevent memory leaks.\n+     *\n+     * @return a new closeable, thread-confined memory session\n@@ -239,3 +245,7 @@\n-     * Creates a closeable confined memory session, managed by the provided cleaner instance.\n-     * @param cleaner the cleaner to be associated with the returned memory session.\n-     * @return a new closeable confined memory session, managed by {@code cleaner}.\n+     * Creates a new closeable, thread-confined memory session, managed by\n+     * the provided {@code cleaner}.\n+     * <p>\n+     * The returned memory session is confined to the current thread.\n+     *\n+     * @param cleaner the cleaner to be associated with the returned memory session\n+     * @return a new closeable thread-confined memory session, managed by the provided {@code cleaner}\n@@ -249,2 +259,9 @@\n-     * Creates a closeable shared memory session.\n-     * @return a new closeable shared memory session.\n+     * Creates a new closeable memory session that can be shared across threads.\n+     * <p>\n+     * The returned memory session can be used by any thread. Users are responsible for\n+     * assuring thread-safety across threads that use objects associated with this memory session.\n+     * <p>\n+     * The returned memory session <em>must<\/em> eventually be {@linkplain #close() closed}\n+     * to prevent memory leaks.\n+     *\n+     * @return a new closeable memory session that can be shared across threads\n@@ -257,3 +274,9 @@\n-     * Creates a closeable shared memory session, managed by the provided cleaner instance.\n-     * @param cleaner the cleaner to be associated with the returned memory session.\n-     * @return a new closeable shared memory session, managed by {@code cleaner}.\n+     * Creates a new closeable memory session that can be shared across threads,\n+     * managed by the provided {@code cleaner}.\n+     * <p>\n+     * The returned memory session can be used by any thread. Users are responsible for\n+     * assuring thread-safety across threads that use objects associated with this memory session.\n+     *\n+     * @param cleaner the cleaner to be associated with the returned memory session\n+     * @return a new closeable memory session that can be shared across threads, managed\n+     * by the provided {@code cleaner}\n@@ -267,2 +290,4 @@\n-     * Creates a non-closeable shared memory session, managed by a private {@link Cleaner} instance.\n-     * Equivalent to (but likely more efficient than) the following code:\n+     * Creates a new non-closeable memory session that can be shared across threads,\n+     * manage by a private {@link Cleaner} instance.\n+     * <p>\n+     * This is equivalent to (but likely more efficient than) the following code:\n@@ -272,1 +297,3 @@\n-     * @return a non-closeable shared memory session, managed by a private {@link Cleaner} instance.\n+     *\n+     * @return a new closeable memory session that can be shared across threads, managed\n+     * by a private {@link Cleaner} instance\n@@ -280,1 +307,2 @@\n-     * @return the global memory session.\n+     *\n+     * @return the global memory session\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":42,"deletions":14,"binary":false,"changes":56,"status":"modified"}]}