{"files":[{"patch":"@@ -351,1 +351,1 @@\n- * into the size of the region of memory backing a pointer returned from a foreign function, also has no insight\n+ * into the size of the region of memory backing a pointer returned from a foreign function, it also has no insight\n@@ -376,1 +376,1 @@\n- * memory segment with same base address as the zero-length memory segment, but with the desired size,\n+ * memory segment with the same base address as the zero-length memory segment, but with the desired size,\n@@ -385,1 +385,1 @@\n- * In some cases, a client might additionally want to associate new temporal bounds to a zero-length memory segment.\n+ * In some cases, a client might additionally want to assign new temporal bounds to a zero-length memory segment.\n@@ -2218,2 +2218,1 @@\n-         * modelled by this scope.\n-         * and the provided scope are the same. In that case, it is always the case that\n+         * modelled by this scope. In that case, it is always the case that\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n- * can be used to create a fresh segment with same address and temporal bounds,\n+ * can be used to create a fresh segment with the same address and temporal bounds,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.*;\n@@ -91,1 +89,0 @@\n-            int numSymbols = WindowsFallbackSymbols.values().length;\n@@ -93,1 +90,1 @@\n-                    .reinterpret(ADDRESS.byteSize() * numSymbols);\n+                    .reinterpret(WindowsFallbackSymbols.LAYOUT.byteSize());\n@@ -209,0 +206,3 @@\n+\n+        static SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(\n+                values().length, ADDRESS);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -125,14 +125,0 @@\n-    @Test\n-    public void testUnboundedSlice() {\n-        try (Arena arena = Arena.ofConfined()) {\n-            MemorySegment segment = arena.allocate(MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT)); \/\/ size = 8\n-            MemorySegment slice = segment.asSlice(0, ValueLayout.JAVA_INT); \/\/ size = 4\n-            assertThrows(IndexOutOfBoundsException.class, () -> slice.getAtIndex(ValueLayout.JAVA_INT, 1));\n-            MemorySegment unbounded = slice.reinterpret(Long.MAX_VALUE, arena.scope(), null);\n-            assertEquals(unbounded.byteSize(), Long.MAX_VALUE);\n-            unbounded = unbounded.asSlice(0, MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT)); \/\/ size = 8\n-            assertEquals(unbounded.byteSize(), segment.byteSize());\n-            assertEquals(segment.getAtIndex(ValueLayout.JAVA_INT, 1), unbounded.getAtIndex(ValueLayout.JAVA_INT, 1));\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/TestSlices.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.lang.foreign.MemoryLayout;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/JavaLayouts.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}