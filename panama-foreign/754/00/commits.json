[{"commit":{"message":"Add Windows ARM64 ABI support to the Foreign Function & Memory API\n\nThere are 2 primary differences between the Windows ARM64 ABI and\nthe macOS\/Linux ARM64 ABI: variadic floating point arguments are passed\nin general purpose registers on Windows (instead of the vector registers).\nIn addition to this, up to 64 bytes of a struct being passed to a\nvariadic function can be placed in general purpose registers. This\nhappens regardless of the type of struct (HFA or other generic struct).\nThis means that a struct can be split across registers and the stack\nwhen invoking a variadic function.\n\nThis change introduces tests that compute the sum of the fields of\nstructs containing 1-4 ints, floats, and doubles to verify that each\nfield is correctly assigned a register or stack location when invoking\na variadic function (both when the struct can be passed entirely in\nregisters as well as when the struct spills onto the stack).\n\nFor details about the Foreign Function & Memory API, see JEP 434\ndefined at https:\/\/openjdk.org\/jeps\/434\n\nThe Windows ARM64 ABI conventions are documented at\nhttps:\/\/learn.microsoft.com\/en-us\/cpp\/build\/arm64-windows-abi-conventions"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/foreignGlobals_aarch64.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/LinkerOptions.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64CallArranger.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64CallArranger.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/windows\/WindowsAArch64CallArranger.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/windows\/WindowsAArch64Linker.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/windows\/WindowsAArch64VaList.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarArgs.java"},{"filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java"},{"filename":"test\/jdk\/java\/foreign\/libVarArgs.c"},{"filename":"test\/jdk\/java\/foreign\/shared.h"},{"filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java"}],"sha":"7139289aa27bdca923ee21aa008c7e06119315f7"}]