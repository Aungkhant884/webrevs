{"files":[{"patch":"@@ -70,0 +70,6 @@\n+\n+    @Override\n+    @ForceInline\n+    public void checkValidStateRaw() {\n+        \/\/ do nothing, avoid liveness check\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/GlobalSession.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-@Fork(value = 3, jvmArgsAppend = \"--enable-preview\")\n+@Fork(value = 3, jvmArgsAppend = {\"--enable-preview\", \"--enable-native-access=ALL-UNNAMED\"})\n@@ -60,1 +60,1 @@\n-    MemorySegment nativeSegment, nativeSharedSegment, heapSegmentBytes, heapSegmentFloats;\n+    MemorySegment nativeSegment, nativeSharedSegment, nativeGlobal, heapSegmentBytes, heapSegmentFloats;\n@@ -77,0 +77,1 @@\n+        nativeGlobal = nativeSegment.reinterpret(Arena.global(), null);\n@@ -87,0 +88,2 @@\n+                nativeGlobal.setAtIndex(JAVA_INT_UNALIGNED, i, i);\n+                nativeGlobal.setAtIndex(JAVA_FLOAT_UNALIGNED, i, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedSegments.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import sun.misc.Unsafe;\n+\n+import java.lang.foreign.MemorySegment;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+import static java.lang.foreign.ValueLayout.JAVA_INT_UNALIGNED;\n+import static org.openjdk.jmh.annotations.CompilerControl.Mode.*;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"--enable-preview\", \"--enable-native-access=ALL-UNNAMED\"})\n+public class MemorySegmentCopyALL {\n+\n+    static final Unsafe UNSAFE = Utils.unsafe;\n+\n+    static final int ELEM_SIZE = 10;\n+    static final int CARRIER_SIZE = (int)JAVA_INT.byteSize();\n+    static final int BYTE_SIZE = ELEM_SIZE * CARRIER_SIZE;\n+    static final MemorySegment ALL = MemorySegment.NULL.reinterpret(Long.MAX_VALUE);\n+    static final int UNSAFE_INT_OFFSET = UNSAFE.arrayBaseOffset(int[].class);\n+\n+    long unsafe_src;\n+    long unsafe_dst;\n+    int[] ints;\n+\n+    @Setup\n+    public void setup() {\n+        unsafe_src = UNSAFE.allocateMemory(BYTE_SIZE);\n+        unsafe_dst = UNSAFE.allocateMemory(BYTE_SIZE);\n+        ints = new int[ELEM_SIZE];\n+\n+        for (int i = 0; i < ints.length ; i++) {\n+            ints[i] = i;\n+            ALL.set(JAVA_INT, unsafe_src, i);\n+        }\n+    }\n+\n+    @TearDown\n+    public void TearDown() {\n+        UNSAFE.freeMemory(unsafe_src);\n+        UNSAFE.freeMemory(unsafe_dst);\n+    }\n+\n+    @Benchmark\n+    public void panama_array_to_ALL() {\n+        MemorySegment.copy(ints, 0, ALL, JAVA_INT_UNALIGNED, unsafe_dst, ELEM_SIZE);\n+    }\n+\n+    @Benchmark\n+    public void panama_ALL_to_array() {\n+        MemorySegment.copy(ALL, JAVA_INT_UNALIGNED, unsafe_src, ints, 0, ELEM_SIZE);\n+    }\n+\n+    @Benchmark\n+    public void panama_ALL_to_ALL() {\n+        MemorySegment.copy(ALL, JAVA_INT_UNALIGNED, unsafe_src, ALL, JAVA_INT_UNALIGNED, unsafe_dst, ELEM_SIZE);\n+    }\n+\n+    @Benchmark\n+    public void unsafe_array_to_addr() {\n+        UNSAFE.copyMemory(ints, UNSAFE_INT_OFFSET, null, unsafe_dst, BYTE_SIZE);\n+    }\n+\n+    @Benchmark\n+    public void unsafe_addr_to_array() {\n+        UNSAFE.copyMemory(null, unsafe_src, ints, UNSAFE_INT_OFFSET, BYTE_SIZE);\n+    }\n+\n+    @Benchmark\n+    public void unsafe_addr_to_addr() {\n+        UNSAFE.copyMemory(null, unsafe_src, null, unsafe_dst, BYTE_SIZE);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentCopyALL.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+\n+import sun.misc.Unsafe;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.foreign.ValueLayout.*;\n+import static org.openjdk.jmh.annotations.CompilerControl.Mode.*;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"--enable-preview\", \"--enable-native-access=ALL-UNNAMED\" })\n+public class MemorySegmentGet extends JavaLayouts {\n+\n+    static final Unsafe unsafe = Utils.unsafe;\n+    static final int ALLOC_SIZE = (int)JAVA_INT.byteSize();\n+    static final MemorySegment ALL = MemorySegment.NULL.reinterpret(Long.MAX_VALUE);\n+\n+    Arena arena;\n+    MemorySegment segment;\n+    long unsafe_addr;\n+    ByteBuffer byteBuffer;\n+\n+    @Setup\n+    public void setup() {\n+        unsafe_addr = unsafe.allocateMemory(ALLOC_SIZE);\n+        unsafe.putInt(unsafe_addr, 42);\n+        arena = Arena.ofConfined();\n+        segment = arena.allocate(ALLOC_SIZE, 1);\n+        segment.set(JAVA_INT, 0L, 42);\n+        byteBuffer = ByteBuffer.allocateDirect(ALLOC_SIZE).order(ByteOrder.nativeOrder());\n+        byteBuffer.putInt(0, 42);\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        arena.close();\n+        unsafe.invokeCleaner(byteBuffer);\n+        unsafe.freeMemory(unsafe_addr);\n+    }\n+\n+    @Benchmark\n+    public int unsafe() {\n+        return unsafe.getInt(unsafe_addr);\n+    }\n+\n+    @Benchmark\n+    public int segment_VH() {\n+        return (int) VH_INT.get(segment, 0L);\n+    }\n+\n+    @Benchmark\n+    public int segment_VH_unaligned() {\n+        return (int) VH_INT_UNALIGNED.get(segment, 0L);\n+    }\n+\n+    @Benchmark\n+    public int segment_get() {\n+        return segment.get(JAVA_INT, 0L);\n+    }\n+\n+    @Benchmark\n+    public int segment_get_unaligned() {\n+        return segment.get(JAVA_INT_UNALIGNED, 0L);\n+    }\n+\n+    @Benchmark\n+    public int segment_ALL() {\n+        return ALL.get(JAVA_INT, unsafe_addr);\n+    }\n+\n+    @Benchmark\n+    public int segment_ALL_unaligned() {\n+        return ALL.get(JAVA_INT_UNALIGNED, unsafe_addr);\n+    }\n+\n+    @Benchmark\n+    public int BB() {\n+        return byteBuffer.getInt(0);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentGet.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}