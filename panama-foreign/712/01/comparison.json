{"files":[{"patch":"@@ -1941,1 +1941,1 @@\n-        int dstWidth = (int)(baseAndScale >> 32);\n+        long dstWidth = (int)(baseAndScale >> 32); \/\/ Use long arithmetics below\n@@ -1993,1 +1993,1 @@\n-        int srcWidth = (int)(baseAndScale >> 32);\n+        long srcWidth = (int)(baseAndScale >> 32); \/\/ Use long arithmetics below\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @bug 8292851\n+ * @run testng\/othervm -Xmx4G TestLargeSegmentCopy\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+import static org.testng.Assert.*;\n+\n+public class TestLargeSegmentCopy {\n+\n+    @Test\n+    public void testLargeSegmentCopy() {\n+        \/\/ Make sure the byte size is bigger than Integer.MAX_VALUE\n+        final int longArrayLength = Integer.MAX_VALUE \/ Long.BYTES + 100;\n+        final long[] array = new long[longArrayLength];\n+\n+        try (var session = MemorySession.openConfined()) {\n+            var segment = session.allocate((long) longArrayLength * Long.BYTES, Long.SIZE);\n+            \/\/ Should not throw an exception or error\n+            MemorySegment.copy(segment, JAVA_LONG, 0, array, 0, longArrayLength);\n+            \/\/ Should not throw an exception or error\n+            MemorySegment.copy(array,0, segment, JAVA_LONG, 0, longArrayLength);\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/TestLargeSegmentCopy.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}