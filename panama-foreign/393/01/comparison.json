{"files":[{"patch":"@@ -6,1 +6,1 @@\n-error=author,committer,reviewers,merge,issues,executable,symlink,message,hg-tag,whitespace,problemlists\n+error=author,committer,reviewers,merge,executable,symlink,message,hg-tag,whitespace,problemlists\n@@ -20,1 +20,1 @@\n-message=Merge\n+message=Merge .*\n@@ -28,3 +28,0 @@\n-[checks \"issues\"]\n-pattern=^([124-8][0-9]{6}): (\\S.*)$\n-\n","filename":".jcheck\/conf","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import sun.misc.Unsafe;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.TimeUnit;\n+\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.sequenceElement;\n+import static jdk.incubator.foreign.MemoryLayouts.JAVA_DOUBLE;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class LoopOverNonConstantFP {\n+\n+    static final Unsafe unsafe = Utils.unsafe;\n+\n+    static final int ELEM_SIZE = 1_000_000;\n+    static final int CARRIER_SIZE = (int)JAVA_DOUBLE.byteSize();\n+    static final int ALLOC_SIZE = ELEM_SIZE * CARRIER_SIZE;\n+\n+    MemorySegment segmentIn, segmentOut;\n+    long unsafe_addrIn, unsafe_addrOut;\n+    ByteBuffer byteBufferIn, byteBufferOut;\n+\n+    @Setup\n+    public void setup() {\n+        unsafe_addrIn = unsafe.allocateMemory(ALLOC_SIZE);\n+        unsafe_addrOut = unsafe.allocateMemory(ALLOC_SIZE);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            unsafe.putDouble(unsafe_addrIn + (i * CARRIER_SIZE) , i);\n+        }\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            unsafe.putDouble(unsafe_addrOut + (i * CARRIER_SIZE) , i);\n+        }\n+        segmentIn = MemorySegment.allocateNative(ALLOC_SIZE);\n+        segmentOut = MemorySegment.allocateNative(ALLOC_SIZE);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            MemoryAccess.setDoubleAtIndex(segmentIn, i, i);\n+        }\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            MemoryAccess.setDoubleAtIndex(segmentOut, i, i);\n+        }\n+        byteBufferIn = ByteBuffer.allocateDirect(ALLOC_SIZE).order(ByteOrder.nativeOrder());\n+        byteBufferOut = ByteBuffer.allocateDirect(ALLOC_SIZE).order(ByteOrder.nativeOrder());\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            byteBufferIn.putDouble(i * CARRIER_SIZE , i);\n+        }\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            byteBufferOut.putDouble(i * CARRIER_SIZE , i);\n+        }\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        segmentIn.close();\n+        segmentOut.close();\n+        unsafe.invokeCleaner(byteBufferIn);\n+        unsafe.invokeCleaner(byteBufferOut);\n+        unsafe.freeMemory(unsafe_addrIn);\n+        unsafe.freeMemory(unsafe_addrOut);\n+    }\n+\n+    @Benchmark\n+    public void unsafe_loop() {\n+        for (int i = 0; i < ELEM_SIZE; i ++) {\n+            unsafe.putDouble(unsafe_addrOut + (i * CARRIER_SIZE),\n+                    unsafe.getDouble(unsafe_addrIn + (i * CARRIER_SIZE)) +\n+                    unsafe.getDouble(unsafe_addrOut + (i * CARRIER_SIZE)));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void segment_loop() {\n+        for (int i = 0; i < ELEM_SIZE; i ++) {\n+            MemoryAccess.setDoubleAtIndex(segmentOut, i,\n+                    MemoryAccess.getDoubleAtIndex(segmentIn, i) +\n+                    MemoryAccess.getDoubleAtIndex(segmentOut, i));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void BB_loop() {\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            byteBufferOut.putDouble(i * CARRIER_SIZE,\n+                    byteBufferIn.getDouble(i * CARRIER_SIZE) +\n+                    byteBufferOut.getDouble(i * CARRIER_SIZE));\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantFP.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}