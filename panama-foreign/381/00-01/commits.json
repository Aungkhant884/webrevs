[{"commit":{"message":"Fix buffer test"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"}],"sha":"134a3b996c02dbeab564c375b0d67889f1a0f0d2"},{"commit":{"message":"Merge branch 'foreign-memaccess' into openjdk-bot-63"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/oops\/method.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"ab8298c441550e049e29a0f449a62c7933880125"},{"commit":{"message":"8254343: Revisit API for supporting mapped memory segments\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegments.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"bb8c61d7c74d29070e7dbdb66be85bce64ba9f59"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"9f32656f2f16a8359c5304943ccc5d8d48be5e56"},{"commit":{"message":"8253937: Simplify support for shared memory segment\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"test\/jdk\/java\/foreign\/TestHandshake.java"}],"sha":"875417e679a555738bf375e82e3e0eda3632d3e9"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"}],"sha":"cc8271d67edf40dd65ba567faee67b1003393099"},{"commit":{"message":"Investigate ways to make handoff-like operation more explicit (foreign-memacess edition)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestCleaner.java"},{"filename":"test\/jdk\/java\/foreign\/TestHandshake.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantShared.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"b6d387e1715d891f845931f4c168a07a95c1144f"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"e0811b70a55c96c19d65ccd6dd78e8218d40bd5f"},{"commit":{"message":"8253472: Hotspot code should special case ScopedAccessError\n\nReviewed-by: eosterlund, jvernee, sundar"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"}],"sha":"27ae2787db8973cef03868f634c04c4295def26d"},{"commit":{"message":"8253355: Add some overloads to memory access API\n\nReviewed-by: sundar, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"}],"sha":"926437ca8ec50bcc0e182404276d9d31f23ddbb5"},{"commit":{"message":"Merge master"},"files":[{"filename":".jcheck\/conf"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"}],"sha":"881c569b3e01bd5d07095aaafd696e7cf5159c68"},{"commit":{"message":"8253306: jcheck should not be too picky about PR messages on panama-foreign\n\nReviewed-by: henryjen"},"files":[{"filename":".jcheck\/conf"}],"sha":"a32f96612adf2b616e6cc18f28d9181ffcb5684d"},{"commit":{"message":"8253305: The threshold for the shared segment handshake stackwalk is too low\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp"}],"sha":"4f044a0a0e3948c119e8cf996d7e4a85270de6d2"},{"commit":{"message":"8253287: jcheck merge check is too strict\n\nReviewed-by: jvernee"},"files":[{"filename":".jcheck\/conf"}],"sha":"64294f3000e961cf4820cbc1189269258d782290"},{"commit":{"message":"8253243: Investigate ways to make MemorySegment::ofNativeRestricted more composable\n\nReviewed-by: sundar, psandoz, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"},{"filename":"test\/jdk\/java\/foreign\/TestCleaner.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestNoForeignUnsafeOverride.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"f8f8eb1b458fe2009f45bd90b0b0a5565d78f426"},{"commit":{"message":"8253063: ScopedAccessError is sometimes thrown spuriously\n\nReviewed-by: eosterlund, psandoz"},"files":[{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp"},{"filename":"test\/jdk\/java\/foreign\/TestHandshake.java"}],"sha":"1cc7a78a8d402fb18cf817f7482ff1bcabb538be"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":".jcheck\/conf"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"}],"sha":"16f0b444414fb03e21bee0bf2fec1663f6f0cde6"},{"commit":{"message":"8253025: Add support for registering a segment with a Cleaner\n\nReviewed-by: jvernee, psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestCleaner.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"0b0c1fa83778e25689d46613e051d28181f70456"},{"commit":{"message":"8253055: ScopedAccessException should be an Error\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"}],"sha":"7d283dff055e2c2a417f1ff773d50f289ee0d3dd"},{"commit":{"message":"8252757: Add support for shared segments (followup)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"266fe530afb2e5123c54c64cdee8df917430665b"},{"commit":{"message":"8252757: Add support for shared segments\n\nReviewed-by: psandoz"},"files":[{"filename":"make\/modules\/java.base\/Gensrc.gmk"},{"filename":"make\/modules\/java.base\/gensrc\/GensrcScopedMemoryAccess.gmk"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/oops\/method.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp"},{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp"},{"filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/BufferMismatch.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/ByteBufferAs-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer-bin.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MemorySegmentProxy.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestHandshake.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantShared.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"04e65632ef411e501b6a71d69788de94440c3d4a"},{"commit":{"message":"8252866: MemoryAccess.setAddress should take Addressable, not MemoryAddress (follow up)\n\nReviewed-by: sundar"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java"}],"sha":"bb4f95ae43f10a1dc6db4886da647ae80ef21efb"},{"commit":{"message":"8252866: MemoryAccess.setAddress should take Addressable, not MemoryAddress\n\nReviewed-by: sundar"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayouts.java"}],"sha":"424c71b3d6f545a9245545cdd9fd50ce249a6e1e"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"}],"sha":"6b225df08363234735a9ba60a87658346fe2d039"},{"commit":{"message":"8252770: MemorySegment::allocateNative should honor direct memory limits\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestMismatch.java"}],"sha":"2c1e564d13f0e7e9fe6151d2bb395f3c205a5ca1"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"}],"sha":"39e27c7c621dcb0b7bda788891db9b3b4c15a044"},{"commit":{"message":"Unsafe ParallelSum test is broken\n\nReviewed-by: jvernee, sundar"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"81c746337e30129fa287bd0d12bee965a6a99094"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"8422fa32bb06431ac5ed43f75c45eb14998d7224"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"a3c7c9641b34085819add8b9d0ad44f62777e68e"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp"}],"sha":"b0687b52dfc466e1997e106f058bb0941c5d5f9c"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"fe4ffe233fdf0a5a1d6fae83e636eb8a8adc20a2"},{"commit":{"message":"8249879: Split MemorySegment and MemoryAddress (minor javadoc tweak)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"}],"sha":"bad4a83bdd233461e6af352a5f8bfd2a6430da36"},{"commit":{"message":"8249879: Split MemorySegment and MemoryAddress (test fix)\n\nReviewed-by: jvernee, sundar"},"files":[{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java"}],"sha":"825d8316712b57b62a9abed6af6c5f054d81e8d0"},{"commit":{"message":"8249879: Split MemorySegment and MemoryAddress\n\nReviewed-by: henryjen, psandoz, jvernee"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleBase.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MemorySegmentProxy.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayouts.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryHandleAsUnsigned.java"},{"filename":"test\/jdk\/java\/foreign\/TestMismatch.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestRebase.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSlices.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java"}],"sha":"21442f610000903d8f5df84afcfdf2941f1a281e"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"00986e8234468f7a7fa0ee250be7ac313fa3de7a"},{"commit":{"message":"8249790: Add Addressable abstraction (followup)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java"}],"sha":"5c034e625326de5c5e3b3446ab86c91b0cb423cd"},{"commit":{"message":"8249790: Add Addressable abstraction\n\nReviewed-by: sundar, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/Addressable.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayouts.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryHandleAsUnsigned.java"},{"filename":"test\/jdk\/java\/foreign\/TestMismatch.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestRebase.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSlices.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java"}],"sha":"98c88d06994357df06a5575030a80fbf2031d356"},{"commit":{"message":"8249753: Add restricted factory to access everything segment\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"}],"sha":"0c76b50188b42eca265e74f8eef3face5bd6cfff"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"}],"sha":"05f747037093fa3b2c8846d81e290a2f5bcdd21a"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"}],"sha":"9ab4d7b08e10af011f0ac65f36f769ae42dab24b"},{"commit":{"message":"8248487: Add static helpers to access segments (continued) - benchmark fix\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"}],"sha":"c45dc25e0a432033ba41bf279009318834241341"},{"commit":{"message":"8248487: Add static helpers to access segments (continued)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"}],"sha":"3a5eb82fcc53390f08aa4332d7d5835da7279107"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"f414a2366429589218f04f7d339cf9405faa822e"},{"commit":{"message":"8248487: Add static helpers to access segments\n\nReviewed-by: sundar, jvernee, chegar, henryjen"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"}],"sha":"56d796fc3edaad8de85b23cdeda3b29cfa97bdbe"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestMismatch.java"}],"sha":"778a3f049791950466bb4e1613f528719af660c3"},{"commit":{"message":"8248237: VarHandleByteArrayView nioAccess field should be static final\n\nReviewed-by: henryjen, mcimadamore"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"}],"sha":"73cff1a006833459b974947217027eeeb46b2f59"},{"commit":{"message":"8247924: Improve javadoc of Foreign Memory Access API (part three)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"}],"sha":"0c8f2c532422a5fb7e2f226c285b4d57557c488c"},{"commit":{"message":"8247924: Improve javadoc of Foreign Memory Access API (part two)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"}],"sha":"8ccc74d6e0455341d2acbdd1468d9a5ca31489bd"},{"commit":{"message":"8247924: Improve javadoc of Foreign Memory Access API (part one)\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"}],"sha":"432c19e9ff628b0264f1edb8061a673007e9991e"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/oops\/method.hpp"}],"sha":"615091bbda5b3729be58e9920d09a5e0c28a5587"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java"}],"sha":"7ba07588205c7322e857bd0088a2de64860790a3"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template"}],"sha":"83e007659bb35b187a1016d81785a89d9252435a"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestAdaptVarHandles.java"}],"sha":"445768b3904208a8196a2f68cf91d4932ab1b006"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"0215250226e7da9e59e1c990f4d5788b964c6b6b"},{"commit":{"message":"8246052: MemorySegment::mapFromPath should take an offset\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"}],"sha":"cb7f1e115b6b5b7868c6306a79941dce7f0b900f"},{"commit":{"message":"8246053: Add a mask for default access modesAdd a default access mode flag\n\nReviewed-by: sundar, chegar"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"}],"sha":"fee6f89ebaa2c8695e0c059f30e17ea710308af1"},{"commit":{"message":"8246052: MemorySegment::mapFromPath should take an offset\n\nReviewed-by: sundar, chegar"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"}],"sha":"648b843fe0a15ed4e143808696a6f76c08af3e7d"},{"commit":{"message":"8246040: java\/foreign\/TestAddressHandle fails on big endian platforms\n\nReviewed-by: sundar, jvernee, chegar"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java"}],"sha":"35352932211c0ef3965e38c9f430d5f7f21fb670"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestRebase.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java"}],"sha":"dedc7d8f35ce5b567d39aa76e25938bdbf2160db"},{"commit":{"message":"Add MemorySegment::mismatch\n\nReviewed-by: mcimadamore, psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestMismatch.java"}],"sha":"cd397502f19f72fa8a926f4508d3913c8ace9059"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"make\/modules\/java.base\/Gensrc.gmk"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"f024ca7de9d28bbaa27e57e8d4f547db5ea06002"},{"commit":{"message":"8245459: Add support for complex filter value var handle adaptation\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"}],"sha":"f72b57472a676191f0616473d4053a71052460c1"},{"commit":{"message":"Clarify exception behaviour for MemorySegment::toByteArray when the segment does not feature the READ access mode.\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"}],"sha":"0dc2fed332fdfdbecbd4008c650d2f0ba77e1e6a"},{"commit":{"message":"Add unsigned adapter handles\n\nReviewed-by: mcimadamore, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryHandleAsUnsigned.java"}],"sha":"3193db4c91d808ec9a00c13c074456678e65286d"},{"commit":{"message":"8245227: VarHandle adaptation fails when non-crackable direct method handles are used as adapters\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"}],"sha":"645021438aae3c7ae2ea21695445d574787ac0f4"},{"commit":{"message":"Add benchmark to measure performance of VH adapters\n\nReviewed-by: jvernee, psandoz"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestAdaptVarHandles.java"}],"sha":"e2d2dba6f2c7c5ad1247be3cffc098b830242919"},{"commit":{"message":"Move MemoryAddress::copy (more review feedback)\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"}],"sha":"0bc9c6bc13acc7c8044219b883bf1e9848a37776"},{"commit":{"message":"Move MemoryAddress::copy\n\nReviewed-by: chegar, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"3487383884a0c2af1fa58186e771b54598c92805"},{"commit":{"message":"Move \"owner\" field and thread-confinement checks to MemoryScope\n\nReviewed-by: mcimadamore"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"}],"sha":"928a8af198d93a262223532af5e344b14a7e6399"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"39ab61868cc2c968033d0b3d1c1755717b833f42"},{"commit":{"message":"Add MemorySegment::fill\n\nReviewed-by: jlaskey, jvernee, psandoz, mcimadamore"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"2349db7ad56d9cdcba34f7a7c9fc3e2286befa98"},{"commit":{"message":"Simplify MemoryScope implementation to use StampedLock\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"}],"sha":"667f7f0288bc79736c50cdfc2e10945168f1a124"},{"commit":{"message":"Add MemoryLayout::byteOffset\n\nReviewed-by: jvernee, mcimadamore"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"}],"sha":"1bd65632289146ec5c1d65c3884f938827f8fa88"},{"commit":{"message":"Alternative scalable MemoryScope (followup)\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"d3b7d9817a86cd2ee26973f9fe465a3b011bc31e"},{"commit":{"message":"Alternative scalable MemoryScope\n\nReviewed-by: mcimadamore, psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"}],"sha":"e1ae7db0e2117bca21a154981c125dabaceebe92"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"46b7d054ec1ff9cb59f50a2bd358a998ee1a398a"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"make\/modules\/java.base\/Gensrc.gmk"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"}],"sha":"4397c2d060856538f52cc8165dc94fd0cc9fa0fc"},{"commit":{"message":"8244128: Allocations larger than MAX_ALIGN can fail to be sliced to proper size.\n\nReviewed-by: mcimadamore"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"}],"sha":"98ad8aab9282ea6a1d7e8eb8c701028da888fe20"},{"commit":{"message":"8244127: \"memory stomping error\" when running java\/foreign\/TestNative.java on a debug build\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"}],"sha":"7fad4adf3317ee12b4d161f09edda95a2ae44cbe"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/oops\/method.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"}],"sha":"d9e1e9e582144160eecefd6ecd8bc186625db500"},{"commit":{"message":"JDK-8243073: Add support for serial confinement\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"7ac8a2a06f60d821dd843a105563d0c747bf82d4"},{"commit":{"message":"JDK-8243300: Move var handle combinators into foreign incubator module\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java"}],"sha":"10acfce6078fba74ed844a44d18a2c8dd3091acc"},{"commit":{"message":"Fix bad use of MemorySegment::spliterator in TestSharedAccess\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"1652f8fd7efa8534736dc050a1c830548c0811a9"},{"commit":{"message":"JDK-8243284: Remove Foreign class\n\nReviewed-by: sundar, jvernee, henryjen"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestNoForeignUnsafeOverride.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"38d3757d6d9e1f51614e6b5629d2506dcb27522e"},{"commit":{"message":"JDK-8243064: Add more support for mapped memory segments\n\nReviewed-by: psandoz, jvernee"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"ef155501fc7a9ae5d0e4bff13ae7a13d4f66ba7f"},{"commit":{"message":"JDK-8243089: Foreign address manipulation always fails with exception\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"}],"sha":"c1117a5565888495f4d590faf38af39f55b041de"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/ByteBufferAs-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"472d08419dcafbc8557f9476e1b7cade1f0d56f3"},{"commit":{"message":"Preserve memory scope for buffer segments\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"fbd3a83d063d3ddcf56b8a34a160ca9239a175b6"},{"commit":{"message":"Memory access implementation rewrite - post cleanup\n\nReviewed-by: jvernee, psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"38e1b13b34aa6aa9c9bf6b16f1c556277710ffea"},{"commit":{"message":"JDK-8242495: Restructure implementation of memory segments\n\nReviewed-by: psandoz, jvernee"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"b4e216fdd5242e1f4267e1431bb897544b82bc92"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"}],"sha":"f87c680b06f9ea1c2cb38350f9b588d538019b38"},{"commit":{"message":"Add JMH test for loop over sliced segment\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"}],"sha":"a808727189fa97227c937f70a026aad8db281806"},{"commit":{"message":"JDK-8242253: Clarify bulk of addresses backed by same storage\n\nCo-authored-by: Florian Weimer <fweimer@redhat.com>\nReviewed-by: mcimadamore"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"}],"sha":"9808959f1c6c8ce5ae81701e7c03fc03d7c54f6f"},{"commit":{"message":"Fix javadoc in jdk.incubator.foreign.Foreign\n\nReviewed-by: jvernee"},"files":[],"sha":"52c0c6eb7b9d88e94c4de06e31d8b13288d3257e"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"5c7a6d15a7be958e68fc9a176d38c2efe97d50cf"},{"commit":{"message":"JDK-8242051: Clarify difference between checked and unchecked addresses\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"fe152a6525a2e74d6433b855d89ed9aca454b9a0"},{"commit":{"message":"Backport Foreign methods from foreign-abi back to foreign-memaccess\n\nReviewed-by: henryjen"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"}],"sha":"6e6ec3963bc3e78667c288f57e3f04e57d9f6aa5"},{"commit":{"message":"JDK-8242048: Add API point to get raw long value out of a MemoryAddress\n\nReviewed-by: sundar, psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"}],"sha":"05098b042e1faedc36b74e91e90e29af21810860"},{"commit":{"message":"JDK-8242046: Add a predicate to determine if MemoryLayout is a padding layout\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayouts.java"}],"sha":"aa24d19ad0f52dc1675549f4aba666cf00f3fbf1"},{"commit":{"message":"JDK-8242011: Add support for memory address combinator\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleBase.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"f683a7fd69932b442c708027002b6e0d5c664f6a"},{"commit":{"message":"JDK-8241866:Add API to reshape sequence layouts\n\nReviewed-by: jvernee, psandoz"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"c21cd1d2f917796460dbc5192c8e53701ad61d44"},{"commit":{"message":"Backport misc changes from foreign-abi\n\nReviewed-by: mcimadamore, psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestRebase.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"b126f277ea8440dc9c5bf9e5826e5c9558491454"},{"commit":{"message":"JDK-8241849: Add unsafe way to create unconfined memory segment view\n\nReviewed-by: sundar"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"d34b4444ce5de3ec887a445c5287168947c1ea42"},{"commit":{"message":"JDK-8241772: MemorySegment should offer a spliterator\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSpliterator.java"},{"filename":"test\/jdk\/java\/util\/stream\/boottest\/TEST.properties"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java"},{"filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"86609afb1bc455fa4463dd63199fd7b3338ba1cd"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"e993b2081a83797ac70ec9caeb142742fafa456a"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"65f25d822a36c3417ad183c01c55eeeafe3e3ac0"},{"commit":{"message":"8241011: Internal access modes should be filtered\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"15eb92ada49ab637ec321ad6cbcae8e6024dbe02"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"af93b670639a5af68e2491260bde9b4dac70f703"},{"commit":{"message":"8240874: Add finer-grained access control for memory segments\n\nReviewed-by: psandoz, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"a539900498f3661decd0767fcf74a4d6d21c2766"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"5153187a61457e707d62daddcadd3f8b9771f88d"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"}],"sha":"771a3883a37bc10d865c6606462d39852fd80af4"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[],"sha":"8677a47fb1ed82fcbe8122998953b447224eb326"},{"commit":{"message":"8239079: Add a benchmark for concurrent use of memory access API\n\nReviewed-by: psandoz, jvernee"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java"}],"sha":"c8a1590e5c6e5a9cdfbd90d1406b5cfffb6ff615"},{"commit":{"message":"Automatic merge of master into foreign-memaccess"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"b9cf3d8bfe3c9e22ec65651728c1f86a1fdd1a12"},{"commit":{"message":"8238320: What is the alignment of padding layouts?\n\nReviewed-by: jvernee, psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"test\/jdk\/java\/foreign\/TestLayouts.java"}],"sha":"2a3457304ebd5b71f4ce95cc9db710af762ffba5"},{"commit":{"message":"Merge\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"},{"filename":"src\/hotspot\/share\/oops\/method.hpp"},{"filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestArrays.java"},{"filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java"}],"sha":"810ece6752c6911c88cdd515482c4179eeee74bb"},{"commit":{"message":"8238549: Add explicit cast to correct implementation type in VarHandle implementation methods\n\nReviewed-by: jvernee"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"}],"sha":"b5d94cd678386bcf69290068374f8c477c8d460e"},{"commit":{"message":"8238494: Odd behavior when using VarHandle::toMethodHandle on a memory access handle\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"}],"sha":"20caeb88c678368473431d4682497ddb64ca4c16"},{"commit":{"message":"Merge"},"files":[{"filename":".jcheck\/conf"}],"sha":"a6b640aa2b1994ee4d126f748873d16971cbae64"},{"commit":{"message":"8237349: Memory access var handles are never called with exact types\n\nReviewed-by: psandoz, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"}],"sha":"e66a2ad17c2ce0d15103f41111a911e97faa9ae6"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"7eee5ab59ee59780a56f20c92d2a35701f958828"},{"commit":{"message":"8238158: Remove spurious capturing lambda from AbstractLayout\n\nReviewed-by: sundar, jvernee"},"files":[],"sha":"605064ed7284ecb5d87ccbf32678a033ad9c96c6"},{"commit":{"message":"8237648: Add support for var handle adaptation\n\nReviewed-by: psandoz, jvernee, forax"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java"}],"sha":"a831f2adebf6b8c3d753b9e7dcc90f0633fc412c"},{"commit":{"message":"Manual merge with default"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"}],"sha":"27bf608754db623c8a09146c8a972ac668b78799"},{"commit":{"message":"Manual merge with default"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"4896a46ec01548c0baeddf6f6ebbae9edbd7ebec"},{"commit":{"message":"8237082: Workaround C2 limitations when working with long loops\n\nReviewed-by: psandoz, jvernee"},"files":[{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java"}],"sha":"553ce8e1a0edab07911b493e2ce881b81b520af9"},{"commit":{"message":"8219852: Create a set of standard benchmarks\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"}],"sha":"a1fe38acece3108601848214a98ac11db7b5d2ad"},{"commit":{"message":"8219852: Create a set of standard benchmarks\n\nReviewed-by: mcimadamore"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java"}],"sha":"68577ccb59a945b116ef0cb670d9981bec70535c"},{"commit":{"message":"Automatic merge with default"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"}],"sha":"29649c4f5a5450047800a2823bae684baeea01ed"},{"commit":{"message":"8235837: Memory access API refinements\n\nUpdated methd names:\nadd -> addOffset\nowner -> ownerThread\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"c35c8dd5bda13e667f9f982668cbfc0d5db274b4"},{"commit":{"message":"8235837: Memory access API refinements\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java"},{"filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"6aaa064c5bd698a1eba125c3348535ef41069440"},{"commit":{"message":"8236267: Cleanup support for layouts with undefined size\n\nReviewed-by: psandoz, jvernee"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayouts.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java"}],"sha":"674c1936f880a44e6947b5b3cd4018611c645e41"},{"commit":{"message":"Automatic merge with default"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp"}],"sha":"97b296ed40fa2e6867b738bd3c10331b182451d3"},{"commit":{"message":"8236452: Test for wrong first coordinate type\n\nReviewed-by: mcimadamore"},"files":[],"sha":"59b42d1ced219dc277c642df9cb86d662309ceeb"},{"commit":{"message":"8235836: Cleanup memory access API javadoc\n\nFixup bad search\/replace\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"}],"sha":"6d86752fa9afe22bb824e97883c5b6e56a4324eb"},{"commit":{"message":"Merge"},"files":[],"sha":"45eaccf5d374df1ed53fd01046a639d7f58b1676"},{"commit":{"message":"8235836: Cleanup memory access API javadoc\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java"}],"sha":"c0234dc69059a2ca10a75a3d75c956dc225a43de"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"ec504113eaeb27c32a1bbf596660bb98aca9e9b3"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"b33434d324eb9da03cffd04f2bbfe665c921f8b9"},{"commit":{"message":"8235259: Java layout constants should use native endianness\n\nReviewed-by: psandoz"},"files":[],"sha":"10b58ab9e624a68d80194b4a1d2b6df87aec8a04"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"793ce66438c310abb2a60e873797d538c8291566"},{"commit":{"message":"8234814: Eager layout size computation trips on unbound sequence layouts\n\nReviewed-by: jvernee"},"files":[],"sha":"0937eeb8182c032e63b5d31878611e43bde0c7af"},{"commit":{"message":"8234644: Misc cleanup of the memory access API implementation\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MemorySegmentProxy.java"}],"sha":"f8be71622232863fb64389032d57f401f5a245eb"},{"commit":{"message":"8234581: Cleanup use of exceptions in the memory access API\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"2595505f3fe5691c865d9cdec9f8ea9725c4a35f"},{"commit":{"message":"8234337: Misc foreign memory acess API cleanups\n\nJavaDoc tweaks\n\nReviewed-by: mcimadamore"},"files":[],"sha":"8bfb767068a52f4bb0c2e38b5bc5dea00f0d0802"},{"commit":{"message":"8234337: Misc foreign memory acess API cleanups\n\nquick followup - examples using MemoryHandles are out of sync\n"},"files":[],"sha":"1eb869a2cf784deffa3c61190d03d78f4eb84fe3"},{"commit":{"message":"8234337: Misc foreign memory acess API cleanups\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"},{"filename":"test\/jdk\/java\/foreign\/TestSlices.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"5f5ea90ad6845fc8e68c4a409e589d74e783138e"},{"commit":{"message":"8234073: Add support for deterministic shared segments\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"b0bcded1430e608bff3a01c78bfb24c5abc14adf"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"6406cc3213e9605aabe3adb20210f9df976e005f"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"09f874dc4b66992cfb28c4a90bcbe2b6dd5343ba"},{"commit":{"message":"8233698: GCC 4.8.5 build failure after JDK-8233530\n\nReviewed-by: stuefe, dholmes, kbarrett"},"files":[],"sha":"a57683f3e0224078d602e5787f6ec99aa5cc4bfb"},{"commit":{"message":"8233671: [TESTBUG] runtime\/cds\/appcds\/sharedStrings\/FlagCombo.java fails to compile without jfr\n\nReviewed-by: iklam"},"files":[],"sha":"9ca5e79bf28af331b3c172dbc4e3d42bcb5cb825"},{"commit":{"message":"8233658: Escape + in the expression describing Runtime.Version string\n\nReviewed-by: naoto"},"files":[],"sha":"68a7b58abba73491abe96143e6aea5dba06cbcdd"},{"commit":{"message":"8223940: Private key not supported by chosen signature algorithm\n\nReviewed-by: valeriep"},"files":[],"sha":"b7f557e5c7a934f5d962748e7162e131fcc336ad"},{"commit":{"message":"8231955: ARM32: Address displacement is 0 for volatile field access because of Unsafe field access\n\nReviewed-by: dlong"},"files":[],"sha":"7fbb1f5ae1c675920f67a3af7fc66b0c6cbaf976"},{"commit":{"message":"8233600: Cross-builds fails after JDK-8233285\n\nReviewed-by: shade, erikj"},"files":[],"sha":"708890f2ca411d0a20993dee7f42e1940bdb9f43"},{"commit":{"message":"8233695: AArch64 build failures after -Wno-extra removal\n\nReviewed-by: aph"},"files":[],"sha":"270c5ea37e3e381d61e93c97ae5a08a865301b93"},{"commit":{"message":"8233401: Shenandoah: Refactor\/cleanup Shenandoah load barrier code\n\nReviewed-by: aph, shade, rkennke"},"files":[],"sha":"476cfd1547570aa98fc452f0d5bc3c9216f6d53c"},{"commit":{"message":"8233375: JFR emergency dump does not recover thread state\n\nReviewed-by: dholmes, mgronlun"},"files":[],"sha":"b2e6cba0b40e1866fa10c37a95f53f2614773d3e"},{"commit":{"message":"8233659: [TESTBUG] runtime\/cds\/appcds\/CommandLineFlagCombo.java fails when jfr is disabled\n\nReviewed-by: iklam"},"files":[],"sha":"9c2bb3ccf31837f17e66864564f13083f4f4911a"},{"commit":{"message":"8233650: Javadoc for Math.floorMod(int, int) gives wrong example\n\nReviewed-by: bpb"},"files":[],"sha":"1c2b406ab5a77adfcc95a2c0217b3484db795626"},{"commit":{"message":"8233599: ARM32 Build failed due to 8232050 missing an include\n\nReviewed-by: dholmes"},"files":[],"sha":"8ca82e314797f6823474ac5c0dedd5b41297ace5"},{"commit":{"message":"8233622: (zipfs) open\/test\/jdk\/jdk\/nio\/zipfs\/CopyMoveTests.java has incorrect bug label\n\nReviewed-by: rriggs"},"files":[],"sha":"50a14e368771fb718e96dacade4b801f2bdceddf"},{"commit":{"message":"8233608: Minimal build broken after JDK-8233494\n\nReviewed-by: shade"},"files":[],"sha":"87e7ddc8d7c0c8dbfc3065b00a0aafab303f6a41"},{"commit":{"message":"8233590: Compiler thread creation fails with assert(_c2_count > 0 || _c1_count > 0) failed: No compilers?\n\nHandle the case with -XX:-TieredCompilation properly\n\nReviewed-by: shade, thartmann"},"files":[],"sha":"1c40d6fdfbccf4ab0111b0c8d21c490c0942b377"},{"commit":{"message":"8233496: AOT tests failures with 'java.lang.RuntimeException: Failed to find sun\/hotspot\/WhiteBox.class'\n\nReviewed-by: kvn, thartmann"},"files":[],"sha":"ddaa12237e9958ca26bb1e905aa22c5dce3120cd"},{"commit":{"message":"8232209: Update double-conversion license file to version 3.1.5\n\nReviewed-by: sundar"},"files":[],"sha":"50ef4854dc74f1cf43e96c4b70dc1ab404e5462b"},{"commit":{"message":"8233530: gcc 5.4 build warning -Wc++14-compat after JDK-8233359\n\nReviewed-by: dholmes, goetz"},"files":[],"sha":"1be39aa9c71398f784d411465904171c9df996fe"},{"commit":{"message":"8233081: C1: PatchingStub for field access copies too much\n\nReviewed-by: thartmann, dlong"},"files":[],"sha":"c15dfbfd6001240977ccc41722ec53dc32de66ac"},{"commit":{"message":"8232896: ZGC: Enable C2 clone intrinsic\n\nReviewed-by: pliden, kvn"},"files":[],"sha":"3ca7e3f6ff42c98b9ffa0fde429990d8acf95d15"},{"commit":{"message":"8232880: Update test documentation with additional settings for client UI tooltip tests\n\nReviewed-by: aivanov, serb, ihse"},"files":[],"sha":"55f7c48828d30d760dfd0baf4a0da9faf830a4a4"},{"commit":{"message":"8233574: Shenandoah: build is broken without jfr\n\nReviewed-by: rkennke, shade"},"files":[],"sha":"3762eb00f059700aa3090861638b7bfb84b3b7ad"},{"commit":{"message":"8233495: Some fieldDescriptor methods can pass existing constantPoolHandle\n\nReviewed-by: lfoltan, coleenp"},"files":[],"sha":"dd8e82f46ebd19b0ad005a9b76debd03ad8d2903"},{"commit":{"message":"8233494: Avoid calling MallocTracker::record_malloc and record_free when NMT is off\n\nReviewed-by: mdoerr, zgu"},"files":[],"sha":"af729c390c450414dc4b3daff7e46305be8ee959"},{"commit":{"message":"8233429: Minimal and zero VM build broken after JDK-8227003\n\nCo-authored-by: Igor Veresov <igor.veresov@oracle.com>\nReviewed-by: iveresov, shade, thartmann"},"files":[],"sha":"9f62f4586d0a9e60a19b66ef455158f5d6987012"},{"commit":{"message":"8233019: java.lang.Class.isPrimitive() (C1) returns wrong result if Klass* is aligned to 32bit\n\nReviewed-by: mdoerr, dlong, aph"},"files":[],"sha":"13cc1154f0ff3009b7ce16ec7a08b89a406da8d7"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"55c0ee5dcbe4022ff354ad01ddc3952e8e807df8"},{"commit":{"message":"8232273: Add support for shared memory segments\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java"}],"sha":"e1007374efe28b04d9a9b73e22e55f4b0e57a490"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"ca1d10dd7eeaa1f525480ffc0cb621b006a1df70"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"1d3e932ddaf0548d75497b1718c3086036bf1a7b"},{"commit":{"message":"Merge"},"files":[],"sha":"be6d55c178bfc81be9238853a089f0cae5151cbb"},{"commit":{"message":"8231402: layout API implementation is not constant enough\n\nReviewed-by: jvernee"},"files":[],"sha":"880c9c64eafdbb53b0b855fcc59e0219ff564525"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"4185a496ecd34884b9f6adab28d1c417d74fa06b"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"8aaa8a7d29b0d2146051438b7e1dee9780213e71"},{"commit":{"message":"8231162: JVMTI RawMonitorWait triggers assertion failure: Only JavaThreads can be interruptible\n\nReviewed-by: dcubed"},"files":[],"sha":"8a2c4975d5f5c1c009fc7bf4e7e9c431bbea1e91"},{"commit":{"message":"8066774: Rename the annotations arrays names in ClassFileParser\n\nReviewed-by: shade, coleenp, dholmes"},"files":[],"sha":"14cc870429bb74ea1e290e1ffd13c0a0db1996e4"},{"commit":{"message":"8186825: some memory leak issues in the transport_startTransport\n\nReviewed-by: sspitsyn, phh"},"files":[],"sha":"0edf6c13416f6ed755783356189233be88e7d060"},{"commit":{"message":"8231087: Shenandoah: Self-fixing load reference barriers for C1\/C2\n\nReviewed-by: shade"},"files":[],"sha":"9516e6d2fd8ebc3bb99b9c8ac2034f3cae2e5573"},{"commit":{"message":"8231086: Shenandoah: Stronger invariant for object-arraycopy\n\nReviewed-by: shade"},"files":[],"sha":"9510e7fe5d47e2c38c23204552f68fc53bdcad87"},{"commit":{"message":"8231085: C2\/GC: Better GC-interface for expanding clone\n\nReviewed-by: eosterlund"},"files":[],"sha":"5eb643144be5c423ef538361068e354707bbfa22"},{"commit":{"message":"Merge"},"files":[],"sha":"b9cd2cecaacab37d46ff346430dbe6be9a0aa358"},{"commit":{"message":"Added tag jdk-13-ga for changeset 9c250a7600e1"},"files":[],"sha":"dcd4014cd8a6f49a564cbb95387ad01a80a20bed"},{"commit":{"message":"8231145: [Graal] org.graalvm.compiler.debug.test.DebugContextTest fails because DebugContextTest.testLogging.input is not available\n\nReviewed-by: erikj, iveresov, ihse"},"files":[],"sha":"f482d3071c4b68e5e1c296deb58b646dfbd11638"},{"commit":{"message":"8231176: Test tools\/javac\/options\/BCPOrSystemNotSpecified.java broken on Windows\n\nTemporarily disabling BCPOrSystemNotSpecified.java test on Windows.\n\nReviewed-by: vromero"},"files":[],"sha":"a88d08457580eb113fbca0313917ecdca016c2b7"},{"commit":{"message":"8207266: ThreadMXBean::getThreadAllocatedBytes() can be quicker for self thread\n\nAdd com.sun.management.getCurrentThreadAllocatedBytes, implement getThreadAllocatedBytes(long) independent of getThreadAllocatedBytes(long[])\n\nReviewed-by: mchung, dholmes, sspitsyn"},"files":[],"sha":"aa318d070e53b85c46204bbb4e105a12aa047013"},{"commit":{"message":"8228460: bootstrap class path not set in conjunction with -source 11\n\nEnsuring implicit system module path is checked for the no-bootclasspath warning for -source >= 9.\n\nReviewed-by: vromero"},"files":[],"sha":"a51a8527e7b0c201563d6417e51a57c95b0859a6"},{"commit":{"message":"8228482: fix xlc16\/xlclang comparison of distinct pointer types and string literal conversion warnings\n\nReviewed-by: clanger, mdoerr"},"files":[],"sha":"b9e177677cf55822898ab141bea015c6fc60b54c"},{"commit":{"message":"8231027: Correct typos\n\nReviewed-by: lancea, dholmes, erikj"},"files":[],"sha":"f8a875bfce3b6fbb6ed685c4edc4b5e2aaba64e5"},{"commit":{"message":"8230424: Use platform independent code for Thread.interrupt support\n8231094: os::sleep in assert message should be changed to JavaThread::sleep\n\nReviewed-by: rehn, dcubed"},"files":[],"sha":"5bca86f9f46b65060b220e7e7a3322bf20f94c1d"},{"commit":{"message":"8231024: Improve the debug info when the output is truncated\n\nReviewed-by: iklam, dholmes"},"files":[],"sha":"f94f7f2212587a1888a1ae34bdfc00ba059e31c0"},{"commit":{"message":"8230870: (zipfs) Add a ZIP FS test that is similar to test\/jdk\/java\/util\/zip\/EntryCount64k.java\n\nReviewed-by: clanger, martin"},"files":[],"sha":"f21fb3e433b100cabfd263cb13523beffa123bee"},{"commit":{"message":"8231124: Missing closedir call with JDK-8223490\n\nReviewed-by: naoto"},"files":[],"sha":"b59950bc4958ee4cb860e971c818b6d22997363c"},{"commit":{"message":"8230350: Shenandoah: Assertion failed when GC is cancelled by a worker thread\n\nReviewed-by: rkennke"},"files":[],"sha":"f88c32f6f6a05daedf48e6ba44e4928a802ee9f4"},{"commit":{"message":"8230943: False deadlock detection with -XX:+CIPrintCompileQueue after JDK-8163511\n\nReviewed-by: dholmes, thartmann"},"files":[],"sha":"4fb41f2617215b1dffdd555eabe1456b3ea57441"},{"commit":{"message":"8223490: Optimize search algorithm for determining default time zone\n\nReviewed-by: naoto, rriggs"},"files":[],"sha":"788b2414c169e1c96ff91e5dcdbbc0d21b64dd73"},{"commit":{"message":"8231051: Remove check_obj_alignment() and replace with is_object_aligned()\n\nReviewed-by: tschatzl, shade"},"files":[],"sha":"89b0250e4a04c7cb947aea809c1dac19ee35f631"},{"commit":{"message":"8230841: Remove oopDesc::equals()\n\nReviewed-by: rkennke, tschatzl"},"files":[],"sha":"2d6874b861270ea67322d5976a30202bdb6adb1c"},{"commit":{"message":"8230808: Remove Access::equals()\n\nReviewed-by: tschatzl, shade"},"files":[],"sha":"cb50d3b4f3c3cb85a5312fdf20a3229b88302f53"},{"commit":{"message":"8230796: Remove BarrierSet::oop_equals_operator_allowed()\n\nReviewed-by: tschatzl, shade"},"files":[],"sha":"0848c76a66e00b3b60c706471386a796147df338"},{"commit":{"message":"8230900: missing ReleaseStringUTFChars in java.desktop native code\n\nReviewed-by: clanger, prr"},"files":[],"sha":"c6543f1a2a41fb33f51ec98df886193580777f1f"},{"commit":{"message":"8230901: missing ReleaseStringUTFChars in serviceability native code\n\nReviewed-by: stuefe, sspitsyn"},"files":[],"sha":"f808d8a0ce4dbb35e0babfe7eba5ae74d7845e80"},{"commit":{"message":"8230742: Make AggressiveUnboxing a diagnostic flag\n\nAggressiveUnboxing is enabled by default. It should therefore be a diagnostic flag.\n\nReviewed-by: roland, shade"},"files":[],"sha":"2df5ae8220cdfb44ac4c6770267b26ff5dd2c86d"},{"commit":{"message":"8230854: Cleanup SuppressWarnings in test lib and remove noisy traces in StreamPumper\n\nReviewed-by: stuefe, dholmes"},"files":[],"sha":"75e8b6ed4b767ad8e4ea5a313ddcceefed6513ae"},{"commit":{"message":"8230850: Test sun\/tools\/jcmd\/TestProcessHelper.java fails intermittently\n\nReviewed-by: stuefe, cjplummer, sgehwolf"},"files":[],"sha":"2f5ce4c6cd847586035f8e0bc99baccb01cd8c58"},{"commit":{"message":"8231033: Problemlist ReservedStackTest\n8231034: ProblemList failing ThreadMXBean tests\n\nReviewed-by: darcy"},"files":[],"sha":"c2cbaa69d504108558490cb037935a6e5f920cdc"},{"commit":{"message":"8230882: Use @index in javax.lang.model javadoc\n\nReviewed-by: jjg"},"files":[],"sha":"b6cc5abdf7f2782a91da747811e5e8125bee34b4"},{"commit":{"message":"8230910: libsspi_bridge does not build on Windows 32bit\n\nReviewed-by: alanb, weijun"},"files":[],"sha":"dcbc28790d1b68fa9921b618de622ca0d02962e2"},{"commit":{"message":"8216354: Syntax error in toolchain_windows.m4\n\nReviewed-by: erikj, dholmes, clanger"},"files":[],"sha":"db2c6cc90d939385e0e361bd198929dc42b893f0"},{"commit":{"message":"8225490: Miscellaneous changes imported from jsr166 CVS 2019-09\n\nReviewed-by: martin, alanb"},"files":[],"sha":"eb1eadb69fa0df2f7299425ff37a5fb6f718162d"},{"commit":{"message":"8145138: CyclicBarrier\/Basic.java failed with \"3 not equal to 4\"\n\nReviewed-by: martin, alanb"},"files":[],"sha":"9275097a0239ae73fc071e435d908b37b18eb1bd"},{"commit":{"message":"8221168: java\/util\/concurrent\/CountDownLatch\/Basic.java fails\n\nReviewed-by: martin, alanb"},"files":[],"sha":"064f69d6ab6e76ad5dff1fde285524ac10febc80"},{"commit":{"message":"8227235: rare failures in testForkHelpQuiesce tck tests\n\nReviewed-by: martin, alanb"},"files":[],"sha":"f634f777f6f83db4bf76d1a75f72fdcf3da6c720"},{"commit":{"message":"8229442: AQS and lock classes refresh\n\nReviewed-by: martin"},"files":[],"sha":"80fe274875a084794ccafcd00696586e384255b1"},{"commit":{"message":"8231025: Incorrect method tag offset for big endian platform\n\nReviewed-by: egahlin"},"files":[],"sha":"dbc8df3b97aae772399b3a8a2a8c3f306f65dd9e"},{"commit":{"message":"8225797: OldObjectSample event creates unexpected amount of checkpoint data\n\nReviewed-by: egahlin"},"files":[],"sha":"0f2eb3ad856b2674f1531eed2a0ebb5e5e162cf2"},{"commit":{"message":"8230085: (fs) FileStore::isReadOnly is always true on macOS Catalina\n\nReviewed-by: alanb"},"files":[],"sha":"c57ad7ffc016bb62ef13937d1568f44f0a189cd9"},{"commit":{"message":"8230938: Deprecate MonitorBound\n\nReviewed-by: dholmes"},"files":[],"sha":"c0e1f9ee6c529e287818171f5104704b26f2024b"},{"commit":{"message":"8230937: Update bugid in ProblemList for vmTestbase\/nsk\/jdb\/eval\/eval001\/eval001.java\n\nReviewed-by: dholmes, mchung"},"files":[],"sha":"5c3cc74c83ba94b6e48f58b1b58eeec21e8b7359"},{"commit":{"message":"8230881: serviceability\/sa\/TestJmapCore tests fail with java.lang.RuntimeException: Could not find dump file\n\nReviewed-by: dholmes, cjplummer"},"files":[],"sha":"9597fcd85feae4014c41979e44a26326698ad30d"},{"commit":{"message":"8151678: com\/sun\/jndi\/ldap\/LdapTimeoutTest.java failed due to timeout on DeadServerNoTimeoutTest is incorrect\n\nReviewed-by: dfuchs, martin, robm"},"files":[],"sha":"49a4d4b87ecf56d44b644df65f9a2a2c74f922f3"},{"commit":{"message":"8230878: ZGC: Use THREAD_LOCAL instead of __thread\n\nReviewed-by: kbarrett"},"files":[],"sha":"17abb078fc36a500174c6eb7ddddf5ef209283d2"},{"commit":{"message":"8230877: Rename THREAD_LOCAL_DECL to THREAD_LOCAL\n\nReviewed-by: kbarrett, dholmes"},"files":[],"sha":"f3d8d57cd39c4bd2b8a4972e885b5874800b047f"},{"commit":{"message":"8230846: ZGC: Make ZUtils::alloc_aligned() posix-specific\n\nReviewed-by: stefank"},"files":[],"sha":"39fd81e4a73b82341e52d2a3a6f6d29ea7480e11"},{"commit":{"message":"8230845: ZGC: Implement ZLock using os::PlatformMutex\n\nReviewed-by: stefank"},"files":[],"sha":"334c609caf84f23b5fbfb835abe07a8b93c30886"},{"commit":{"message":"8230829: Matcher matches a surrogate pair that crosses border of the region\n\nReviewed-by: naoto"},"files":[],"sha":"5e7e0e7bbe794e34bc628f921054d17813e0e2dd"},{"commit":{"message":"8186988: use log_warning() and log_error() instead of tty->print_cr for CDS warning and error messages\n\nReviewed-by: stuefe, iklam, dholmes"},"files":[],"sha":"e8ee2800f5bc66016bf73dc0d367c03522c4df14"},{"commit":{"message":"8230858: Replace wildcard address with loopback or local host in tests - part 23\n\nAdd new traces for better diagnosis, refrain binding to the wildcard address when possible.\n\nReviewed-by: chegar, xuelei"},"files":[],"sha":"e9eaba3d538fcd2d8b5642f227433d69faef2552"},{"commit":{"message":"8230470: Shenandoah doesn't need change from JDK-8212610 anymore\n\nReviewed-by: thartmann"},"files":[],"sha":"9b81fe37f2cad09a54e401f937c513f97659e012"},{"commit":{"message":"8230888: jfrVirtualMemory.cpp should include globals.hpp\n\nReviewed-by: dholmes, mgronlun"},"files":[],"sha":"88d59bc878f34634c315b7ae2d1b49fe0898d71d"},{"commit":{"message":"8220416: Comparison of klass pointers is not optimized any more\n\nEnables dead klass pointer optimization (since JDK-6964458) again.\n\nReviewed-by: roland, thartmann"},"files":[],"sha":"316985c85c9a2ba96016ceb7fab192ce0e8d5d6a"},{"commit":{"message":"8230762: Change MacroAssembler::debug32\/64 to use fatal instead of assert\n\nAlways call fatal from debug32\/64 to also crash in product build as a follow-up to JDK-8225653.\n\nReviewed-by: roland, thartmann"},"files":[],"sha":"9c145fa1cdaf13220e7416c66975c1f168f818d3"},{"commit":{"message":"8229701: aarch64: C2 OSR compilation fails with \"shouldn't process one node several times\" in final graph reshaping\n\nReviewed-by: thartmann, kvn"},"files":[],"sha":"ec5451c117ab7170afa23041b489ef16f952a908"},{"commit":{"message":"8230856: Java_java_net_NetworkInterface_getByName0 on unix misses ReleaseStringUTFChars in early return\n\nReviewed-by: dfuchs, stuefe, vtewari"},"files":[],"sha":"af94e6e681cc7f41c904dd21ae2909af73321189"},{"commit":{"message":"8230861: missing ReleaseStringUTFChars in Java_sun_security_pkcs11_wrapper_PKCS11_connect\n\nReviewed-by: alanb, stuefe"},"files":[],"sha":"2f496251acc8f11a152c96a8da4a6bb433bbf7bf"},{"commit":{"message":"8230586: Encapsulate fields in filemap.hpp\n\nReviewed-by: ccheung"},"files":[],"sha":"988ac4fec079583f5a987d82610e2e5fca470774"},{"commit":{"message":"8230423: Move os::sleep to JavaThread::sleep\n\nReviewed-by: rehn, dcubed"},"files":[],"sha":"99252bd9d6c3d6129c2ec3ce3a0e39c5e843e41f"},{"commit":{"message":"Added tag jdk-14+14 for changeset cddef3bde924"},"files":[],"sha":"091cf3608b3facf932ae53fa747370197e0f3c9a"},{"commit":{"message":"8230830: No required ResourceMark in src\/hotspot\/share\/prims\/jvmtiImpl.cpp:JvmtiSuspendControl::print()\n\nReviewed-by: dholmes, cjplummer, sspitsyn"},"files":[],"sha":"27cb3414969c315fba2fff2c35f227a6119add72"},{"commit":{"message":"8229378: jdwp library loader in linker_md.c quietly truncates on buffer overflow\n\nCheck buffer overflow when the jdwp agent full dll name is built\n\nReviewed-by: cjplummer, sspitsyn"},"files":[],"sha":"d57af047374f29e96ebe78de165a0dd8c6a41d03"},{"commit":{"message":"8230734: Remove default constructors from java.compiler\n\nReviewed-by: jjg"},"files":[],"sha":"a8ea6b279afda515ddca89fbe944cb6e772f1d80"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"26a6509d2454eeaf9d4f6eb1734f155d1140b676"},{"commit":{"message":"8230674: Heap dumps should exclude dormant CDS archived objects of unloaded classes\n\nReviewed-by: dholmes, jiangli"},"files":[],"sha":"e90970b67bb3cd1980ac873b0c9465e53f494e37"},{"commit":{"message":"8230342: LineNumberReader.getLineNumber() returns inconsistent results after EOF\n\nReviewed-by: rriggs, dfuchs"},"files":[],"sha":"4285853d91e2d49e817975524a80bf46aad9e466"},{"commit":{"message":"8192057: com\/sun\/jdi\/BadHandshakeTest.java fails with java.net.ConnectException\n\nReviewed-by: sspitsyn, rrich"},"files":[],"sha":"c920b4a5c0258dde6e4d4f25ce575138374e5e9d"},{"commit":{"message":"8229202: Docker reporting causes secondary crashes in error handling\n\nReviewed-by: coleenp, hseigel, mseledtsov"},"files":[],"sha":"591c4f80f1baa0bd1034243287567aaa589f8fb9"},{"commit":{"message":"8230136: DateTimeFormatterBuilder.FractionPrinterParser#parse fails to verify minWidth\n\nReviewed-by: joehw, scolebourne, rriggs"},"files":[],"sha":"ee9bd9bf041cc4d33d65280c1a83a12ed557741d"},{"commit":{"message":"8230398: Remove NULL checks before FREE_C_HEAP_ARRAY\n\nReviewed-by: dholmes, kbarrett, tschatzl"},"files":[],"sha":"4b6f9ed07f87325ac4dd4d43d672ca5d5ee277c6"},{"commit":{"message":"8227168: Cleanup usage of NEW_C_HEAP_ARRAY\n\nReviewed-by: coleenp, dholmes, kbarrett, tschatzl"},"files":[],"sha":"eafb888c18827ea8239528e029f2f0c15ef04547"},{"commit":{"message":"8230794: Improve assert to get more information about the JDK-8227695 failure\n\nReviewed-by: kbarrett, sjohanss"},"files":[],"sha":"a73f96ef609acb99a9507254361d67dc65fdb156"},{"commit":{"message":"8229960: Remove sun.nio.cs.map system property\n\nReviewed-by: alanb"},"files":[],"sha":"28b972e5ce652372fb2c2fef23d976148d4bcf51"},{"commit":{"message":"8230813: Add JDK-8010500 to compiler\/loopopts\/superword\/TestFuzzPreLoop.java bug list\n\nReviewed-by: zgu"},"files":[],"sha":"7c2fe7025bb7a0470ce106f54d5a015e12aa2776"},{"commit":{"message":"8229785: MethodType::fromMethodDescriptorString should require security permission if loader is null\n\nReviewed-by: vromero"},"files":[],"sha":"5d397eea9f6e389da6488bc3021657822d44f643"},{"commit":{"message":"8225761: Update --release 13 symbol information after JDK 13 GA\n\nReviewed-by: jlahoda"},"files":[],"sha":"5dc5bc881a9aaba2be05a86723bdc8304023f1ee"},{"commit":{"message":"8230781: Add JTREG_FAILURE_HANDLER_TIMEOUT to control timeout handler timeout\n\nReviewed-by: erikj"},"files":[],"sha":"fb70acd2ca6275b9a76f30d378c5e78b2de50197"},{"commit":{"message":"8230303: JDB hangs when running monitor command\n\nReviewed-by: sspitsyn"},"files":[],"sha":"9898fc138237a39432d647cb66b7ff3c4c83eeaa"},{"commit":{"message":"8230709: Array index out of bounds in ES6 mode\n\nReviewed-by: attila"},"files":[],"sha":"1a81892aa68b1e967e7906cc3dda6fd3a36e9dbe"},{"commit":{"message":"8230766: Changed message in IllegalMonitorStateException\n\nReviewed-by: attila, jlaskey"},"files":[],"sha":"c49ed302bbbcab63767f58aac12ce70cd63eb6b4"},{"commit":{"message":"8230566: ZGC: Don't substitute klass pointer during array clearing\n\nReviewed-by: stefank, eosterlund"},"files":[],"sha":"24ed3d4eefeea60ec2bec60d6e17911cc2cfd511"},{"commit":{"message":"8230769: BufImg_SetupICM add ReleasePrimitiveArrayCritical call in early return\n\nReviewed-by: prr, stuefe"},"files":[],"sha":"7ecde2ec48056051a15ca0db620fa1b7fce6de0f"},{"commit":{"message":"8230711: ConnectionGraph::unique_java_object(Node* N) return NULL if n is not in the CG\n\nReviewed-by: mdoerr"},"files":[],"sha":"36768f2a725f766b4779112859e432160bd4893b"},{"commit":{"message":"8230454: [Graal] Add \"com\/sun\/crypto\/provider\/KeyFactory\/TestProviderLeak.java\" to Graal problem list\n\nReviewed-by: dlong"},"files":[],"sha":"0a5346041963323c4f0dfcaaf0131cfc6aea28c6"},{"commit":{"message":"8225653: Provide more information when hitting SIGILL from HaltNode\n\nAdd information string for each HaltNode which is printed if hit at runtime.\n\nReviewed-by: vlivanov, thartmann"},"files":[],"sha":"2c3973af9ba453bc67c225760afc7162d9dae184"},{"commit":{"message":"8207800: always_do_update_barrier is unused\n\nReviewed-by: shade, tschatzl"},"files":[],"sha":"51b0eab33031edcf0286a72f760bb702a62a9caa"},{"commit":{"message":"8221361: Eliminate two-phase initialization for PtrQueueSet classes\n\nMove allocator and CBL monitor init to constructor.\n\nReviewed-by: tschatzl, shade"},"files":[],"sha":"8b67b75f5001bf43bf63484279633909e106ec40"},{"commit":{"message":"8230284: Accounting currency format support does not cope with explicit number system\n\nReviewed-by: rriggs"},"files":[],"sha":"ea0fbbca51318f5090daf4fd6217139c3e4ab4f8"},{"commit":{"message":"8230516: invalid html in jdwp-protocol.html\n\nReviewed-by: dtitov, sspitsyn"},"files":[],"sha":"6794a686819554742ec906bbbc749a9241f7e452"},{"commit":{"message":"8212117: Class.forName may return a reference to a loaded but not linked Class\n\nReviewed-by: dholmes, mchung"},"files":[],"sha":"a4613d4a8f3f177a55458556c5af7c682727eefc"},{"commit":{"message":"8230526: jdk.internal.net.http.PlainProxyConnection is never reused by HttpClient\n\nFixed the PlainProxyConnection lookup key.\n\nReviewed-by: chegar"},"files":[],"sha":"10e4fd4b95ebbf62d450d7a35ccf90dfe481ab71"},{"commit":{"message":"8230723: Remove default constructors from java.lang and java.io\n\nReviewed-by: bpb, rriggs"},"files":[],"sha":"10f1f10f2effff3ecd83138fb66f8028cc4c80ea"},{"commit":{"message":"8177389: Hyphen \"-\" should be removed in URL class documentation\n\nJavadoc of java.net.URL constructor updated to remove an unnecessary hyphen\n\nReviewed-by: dfuchs"},"files":[],"sha":"c84e19f3ca286386493915763bf4ad05370cb7b2"},{"commit":{"message":"8230132: java\/net\/NetworkInterface\/NetworkInterfaceRetrievalTests.java to skip Teredo Tunneling Pseudo-Interface\n\nThe test is updated to skip Teredo pseudo interfaces on windows.\n\nReviewed-by: michaelm, vtewari, aefimov"},"files":[],"sha":"1f87cb017ffb0a53c6a017b65b123ef568b8b2e7"},{"commit":{"message":"8230669: [s390] C1: assert(is_bound() || is_unused()) failed: Label was never bound to a location, but it was used as a jmp target\n\nReviewed-by: phh, xliu"},"files":[],"sha":"032819ee9d53b10a4118f845b2ce5bee7225634a"},{"commit":{"message":"8230708: Hotspot fails to build on linux-sparc with gcc-9\n\nReviewed-by: dholmes, phh"},"files":[],"sha":"5f29e88563de8fa38109489a11fb6a465f604d66"},{"commit":{"message":"8230564: Remove os_ext.hpp\n\nReviewed-by: coleenp, dholmes"},"files":[],"sha":"014535bd794c0fd0c3f28fd9c3c442cb21fca187"},{"commit":{"message":"8230563: Remove arguments_ext.cpp\n\nReviewed-by: dholmes, coleenp"},"files":[],"sha":"4db6ba164888511cc561556d9029d3ea0744a0d0"},{"commit":{"message":"8230562: Remove g1HeapSizingPolicy_ext.cpp\n\nReviewed-by: dholmes, sjohanss"},"files":[],"sha":"57514a065a8267d2654599b5e71e329654f47f53"},{"commit":{"message":"8230561: Remove logTag_ext.hpp\n\nReviewed-by: dholmes, coleenp"},"files":[],"sha":"539a59fa4f2cad924cab8cb3653dc97f5154dfee"},{"commit":{"message":"8224599: Remove globals_ext.hpp\n\nReviewed-by: coleenp, kvn, gziemski, ehelin"},"files":[],"sha":"7384f6cdcfbab70751c49672fb4bb6d6a671389e"},{"commit":{"message":"8228758: assert(_no_handle_mark_nesting == 0) failed: allocating handle inside NoHandleMark\n\nReviewed-by: coleenp, dcubed, dholmes"},"files":[],"sha":"ffa889731a54addfd38e4e166cde6ae34c28047d"},{"commit":{"message":"8230129: Add jtreg \"serviceability\/sa\/ClhsdbInspect.java\" to graal problem list\n\nReviewed-by: dlong, thartmann"},"files":[],"sha":"de87e8e86038021de1dc296fa8cf99c4c7d8692f"},{"commit":{"message":"8230422: Convert uninterruptible os::sleep calls to os::naked_short_sleep\n\nReviewed-by: kbarrett, dcubed, shade"},"files":[],"sha":"394d6ac55b1f59265c6522fee324f76517ed5a96"},{"commit":{"message":"8226953: AOT: assert(oopDesc::is_oop(obj)) failed: not an oop\n\nReviewed-by: dlong"},"files":[],"sha":"f9e0cdbed9b31594e9253b9886f77d32903edb0a"},{"commit":{"message":"8230730: UseCompressedOops test crash with assertion failure\n\nReviewed-by: stefank, eosterlund"},"files":[],"sha":"ecf83c94b8c7c5dcaa43dc960085887bee9e7d77"},{"commit":{"message":"8230662: Remove dead code from MethodTypeForm\n\nReviewed-by: vlivanov, mchung"},"files":[],"sha":"c788d9841cf7f3148ad181454662dc735762953f"},{"commit":{"message":"8230715: Baseline compare build on Windows fails intermittently in file type for jvm.pdb\n\nReviewed-by: mikael"},"files":[],"sha":"9c3ff105df8781b8f53e52ae0816fec15ef2654a"},{"commit":{"message":"8230680: latest Graal unittests depend on jdk.internal.module\n\nReviewed-by: iignatyev"},"files":[],"sha":"cc6d60db4fd756a441772f29652576df2ca142ab"},{"commit":{"message":"8230404: Refactor logged card refinement support in G1DirtyCardQueueSet\n\nSeparate concurrent refinement from STW refinement.\n\nReviewed-by: sjohanss, tschatzl"},"files":[],"sha":"40565a845c35e608f7273a1c6097e2a88ca30280"},{"commit":{"message":"8230666: Exclude serviceability\/sa\/TestInstanceKlassSize.java on linuxppc64 and linuxppc64le\n\nReviewed-by: dcubed"},"files":[],"sha":"c159a4e0f29f2f6c44667d21145378f199a85676"},{"commit":{"message":"8230694: http.keepAlive system property is inconsistently\/incorrectly documented\n\nTrivially fixed the net-properties.html file\n\nReviewed-by: alanb"},"files":[],"sha":"5399449a43a52829806046b9f6a6b05bc82342a1"},{"commit":{"message":"8230363: C2: Let ConnectionGraph::not_global_escape(Node* n) return false if n is not in the CG\n\nReviewed-by: thartmann, mdoerr"},"files":[],"sha":"d7ca08a5cc64c8d3941493d98423a49b5bc1b922"},{"commit":{"message":"8230671: x86_32 build failures after JDK-8229496\n\nReviewed-by: thartmann"},"files":[],"sha":"c417c473a419ad35ba359fe6b809e26631aab5fc"},{"commit":{"message":"8229831: Upgrade Character.isUnicodeIdentifierStart\/Part() methods to the latest standard\n\nReviewed-by: rriggs"},"files":[],"sha":"2aac0e925dfeff98da4ff0e2de5e939aefaa3bc6"},{"commit":{"message":"8187898: PrintStream should override FilterOutputStream#write(byte[]) with a method that has no throws clause\n\nReviewed-by: alanb, rriggs, lancea, darcy"},"files":[],"sha":"4d70cdac4f03723eee97f1157cb031a88d182eb1"},{"commit":{"message":"8230681: Add @since tag to java.io.Serial\n\nReviewed-by: lancea, bpb"},"files":[],"sha":"cebd13dbaab5bc44eb422aeec1a3a3e2822ea6b2"},{"commit":{"message":"8227563: jvmti\/scenarios\/contention\/TC05\/tc05t001 fails due to \"ERROR: tc05t001.cpp, 278: (waitedThreadCpuTime - waitThreadCpuTime) < (EXPECTED_ACCURACY * 1000000)\"\n\nReviewed-by: amenkov, cjplummer, sspitsyn"},"files":[],"sha":"8b42387ea6212027e7db25175feff078696a91ef"},{"commit":{"message":"8229280: Test failures on several linux hosts after JDK-8181493\n\nReviewed-by: alanb, clanger, dfuchs"},"files":[],"sha":"d2db14b83641a6b161db26d2f751b220fc3d271e"},{"commit":{"message":"8230632: [TESTBUG] appcds\/NonExistClasspath.java and ClassPathAttr.java failed when running in hotspot_appcds_dynamic test group\n\nExclude NonExistClasspath.java from the test group; increase timeout for ClassPathAttr.java.\n\nReviewed-by: dcubed, iklam"},"files":[],"sha":"a1002d68fcc126c71b6f11c0595a500b9e177785"},{"commit":{"message":"8228854: Default ErrorListener reports warnings and errors to the console\n\nReviewed-by: lancea"},"files":[],"sha":"77b3801f6c787cd7db563bcf39d7dfad224dfea9"},{"commit":{"message":"8230646: Epsilon does not extend TLABs to max size\n\nReviewed-by: tschatzl, zgu"},"files":[],"sha":"675eecaacf37b5b1f451b735b5e72941f6caf1f0"},{"commit":{"message":"8229496: SIGFPE (division by zero) in C2 OSR compiled method\n\nAdding a CastNode to keep the dependency between the div\/mod operation and the zero check.\n\nReviewed-by: roland, mdoerr"},"files":[],"sha":"a4b46ccc234dce3601afcab4dedf0579cfc4f4c7"},{"commit":{"message":"8177068: incomplete classpath causes NPE in Flow\n\nUndo completions that failed during speculative attribution, so that the appropriate CompletionFailures are thrown again and properly reported.\n\nReviewed-by: vromero"},"files":[],"sha":"2fa3eddd3c5dd0957f5e3e955460b5181994c8b4"},{"commit":{"message":"8230466: check malloc\/calloc results in jdk.hotspot.agent\n\nReviewed-by: cjplummer, ysuenaga, sspitsyn"},"files":[],"sha":"5c4be9cc8a24e0f1470230934a9824742ae50797"},{"commit":{"message":"8230642: 8224815 broke Shenandoah build\n\nReviewed-by: shade"},"files":[],"sha":"4b65e2b3db984ea266d6262efa15fc9c50d0ba1a"},{"commit":{"message":"8224815: Remove non-GC uses of CollectedHeap::is_in_reserved()\n\nReviewed-by: stefank, coleenp"},"files":[],"sha":"f869706f5f6c424f7c617a2eabfe30ff21a7ad1c"},{"commit":{"message":"8229189: Improve JFR leak profiler tracing to deal with discontiguous heaps\n\nReviewed-by: mgronlun, egahlin"},"files":[],"sha":"d19e6eae9e5735bd848f04eaa701ab730af3688d"},{"commit":{"message":"8228967: Trust\/Key store and SSL context utilities for tests\n\nReviewed-by: xuelei"},"files":[],"sha":"655cf14138d78931af7d9098e70efe8f872ebae9"},{"commit":{"message":"Added tag jdk-14+13 for changeset fbbe6672ae15"},"files":[],"sha":"cc268aa7a4c8703c30f4e5d8f3f6a62b777c8ac6"},{"commit":{"message":"8230626: Make UnknownFooException strings more informative\n\nReviewed-by: jjg, mr"},"files":[],"sha":"7004b3f3e76df3505a27c9bdfd10768d317925c1"},{"commit":{"message":"8230624: [TESTBUG] Problemlist JFR compiler\/TestCodeSweeper.java\n\nAdded the test to the problem list\n\nReviewed-by: egahlin"},"files":[],"sha":"39465f49eb4d3f955a75864ccb2d1ee6d0415b7d"},{"commit":{"message":"8230435: Replace wildcard address with loopback or local host in tests - part 22\n\nFixes tests to use the loopback address whenever possible. It also fixes some safe publishing issues, or add diagnostics in some of the tests.\n\nReviewed-by: michaelm"},"files":[],"sha":"f71db3074c44c554b600c506adaa5b145edf4420"},{"commit":{"message":"8171405: java\/net\/URLConnection\/ResendPostBody.java failed with \"Error while cleaning up threads after test\"\n\nTest cleaned up to improve safe termination\n\nReviewed-by: michaelm, vtewari, dfuchs"},"files":[],"sha":"7b49c40ee96cb5fc78071cd87c7c4edcd50417b3"},{"commit":{"message":"8230159: Add test to verify that com.sun.net.httpserver.BasicAuthenticator constructors throw expected exceptions\n\nNew BasicAuthenticatorExceptionCheck.java test added\n\nReviewed-by: chegar, dfuchs, vtewari"},"files":[],"sha":"662348c71061d71d3cbe47dbae3547fa4a78c7ee"},{"commit":{"message":"8229450: C2 compilation fails with assert(found_sfpt) failed\n\nReviewed-by: roland, thartmann"},"files":[],"sha":"0a92dc786d1e5f3162067154beec8f079437f4f7"},{"commit":{"message":"8230401: ClassLoaderData::_keep_alive is read with wrong type in c2i entry barrier\n\nReviewed-by: zgu, tschatzl, iklam"},"files":[],"sha":"ea436110f6cecf3a056a2020640db65a56c1db3e"},{"commit":{"message":"8230434: [C1, C2] Release barrier for volatile field stores in constructors implemented inconsistently\n\nReviewed-by: shade, lucy"},"files":[],"sha":"b0e727124f012af6da934ba65dfa6c8e083e78b1"},{"commit":{"message":"8209802: Garbage collectors should register JFR types themselves to avoid build errors\n\nReviewed-by: kbarrett, tschatzl"},"files":[],"sha":"f7d0ece0a177c143f08dbeee44cb823bcb3d3d0f"},{"commit":{"message":"8230431: Move G1 trace code from gcTrace* to G1 directory\n\nReviewed-by: kbarrett, lkorinth"},"files":[],"sha":"bb63558420bd31a6070ef133e5acb03003ece415"},{"commit":{"message":"8229182: runtime\/containers\/docker\/TestMemoryAwareness.java test fails on SLES12\n\nReviewed-by: clanger, mseledtsov"},"files":[],"sha":"a41b9a71acdf69b78104677a1ca899ff36293a60"},{"commit":{"message":"8230485: add handling of aix tar in configure\n\nReviewed-by: erikj"},"files":[],"sha":"7cb28198a17a2f957883908055acfe27258034d8"},{"commit":{"message":"8226221: Update PKCS11 tests to use NSS 3.46 libs\n\nReviewed-by: xuelei"},"files":[],"sha":"dfe4ba5045e351431778a431188d0912a5e305ab"},{"commit":{"message":"6313903: Thread.sleep(3) might wake up immediately on windows\n\nReviewed-by: rehn, dcubed, rriggs"},"files":[],"sha":"99c17fbf338acc43e692a49151d0f485de475356"},{"commit":{"message":"8227236: assert(singleton != __null && singleton != declared_interface) failed\n\nReviewed-by: dlong"},"files":[],"sha":"4dc79c2e054fe2edd7bf6441f0d4c87bb4e5c5e0"},{"commit":{"message":"8230483: Shenandoah: consistently disable concurrent roots for Traversal mode\n\nReviewed-by: shade"},"files":[],"sha":"fd89fedccf1b78d2af95e7d7118caf075e6bceec"},{"commit":{"message":"8223714: HTTPSetAuthenticatorTest could be made more resilient\n\nHTTPTestServer (in the test infrastructure) will no longer stop accepting requests if a previous request processing failed\n\nReviewed-by: dfuchs"},"files":[],"sha":"6b2e444aa1e9f6d2c6ade2aa1fb445805964ed85"},{"commit":{"message":"8230428: Cleanup dead CastIP node code in formssel.cpp\n\nRemoved dead code.\n\nReviewed-by: roland"},"files":[],"sha":"47e005582b493f17e9e18777c553e2bb4ad6e559"},{"commit":{"message":"Merge"},"files":[],"sha":"5ded63ef02370d700489ba17f494bc9a90a90374"},{"commit":{"message":"8227411: TestTimeMultiple.java failed \"assert(!lease()) failed: invariant\"\n\nReviewed-by: egahlin"},"files":[],"sha":"4e43486172dab9e1f69d12736c2d7cc662053d01"},{"commit":{"message":"8229437: assert(is_aligned(ref, HeapWordSize)) failed: invariant\n\nReviewed-by: egahlin"},"files":[],"sha":"8f9d63df41b8b806148984627208636a86d83543"},{"commit":{"message":"8229422: Taskqueue: Outdated selection of weak memory model platforms\n\nReviewed-by: tschatzl, dholmes, drwhite"},"files":[],"sha":"e77e5da78580751dc093306902165e0607296476"},{"commit":{"message":"8230425: Shenandoah forces +UseNUMAInterleaving even after explicitly disabled\n\nReviewed-by: rkennke"},"files":[],"sha":"c25e2fd8ec4dfee2d0d2ab354d198ec43d53ca6c"},{"commit":{"message":"8229235: com.sun.net.httpserver.HttpExchange should implement AutoCloseable\n\nReviewed-by: dfuchs, michaelm"},"files":[],"sha":"77adc77ce3da56ee27d73039e788910b1972e446"},{"commit":{"message":"8230238: Add another regression test for JDK-8134739\n\nReviewed-by: kvn"},"files":[],"sha":"5110530d5b3e2d45cad00c7bd4e90370cb5cf7e4"},{"commit":{"message":"8224214: [AIX] Remove support for legacy xlc compiler\n\nReviewed-by: erikj, kbarrett, mdoerr, dholmes"},"files":[],"sha":"b7821ad399f2e70f19eff7aca8bf8226fcc311be"},{"commit":{"message":"8230373: Use java.io.Serial in generated exception types\n\nReviewed-by: erikj, alanb"},"files":[],"sha":"2399a8d764e63145c27af17c3c3023ebdb939347"},{"commit":{"message":"8230372: Remove G1GCPhaseTimes::MergeLBProcessedBuffers\n\nRemoved no longer needed phase time.\n\nReviewed-by: sjohanss, tschatzl"},"files":[],"sha":"a72d25fcc7bb8a590f7596abac00c5190931cf54"},{"commit":{"message":"8227224: GenCollectedHeap: add subspace transitions for young gen for gc+heap=info log lines\n\nReviewed-by: kbarrett, tschatzl"},"files":[],"sha":"448e003050bca906983264f7530320fc8b1be56e"},{"commit":{"message":"8230337: Clarify intention of Elements.{getPackageOf, getModuleOf}\n\nReviewed-by: jjg"},"files":[],"sha":"f14e213524cf0acaeed70c17faaafe5ed2c544db"},{"commit":{"message":"8230327: Make G1DirtyCardQueueSet free-id init unconditional\n\nRemove conditional init and make the set an inline member.\n\nReviewed-by: sjohanss, lkorinth, tschatzl"},"files":[],"sha":"1668370dfe4e0c8d49de5668a71376b17eefe7bf"},{"commit":{"message":"8230390: Problemlist SA tests with AOT\n\nPutting tests on the problem list.\n\nReviewed-by: roland"},"files":[],"sha":"79c14f088c6620a0c2d1b25f73526b3531b11c27"},{"commit":{"message":"8193596: java\/net\/DatagramPacket\/ReuseBuf.java failed due to timeout\n\nThe test is changed to bind to InetAddress.getLocalHost() instead of binding to the wildcard.\n\nReviewed-by: alanb, dfuchs, msheppar"},"files":[],"sha":"aa5d8f64eea2ac86d8a0fb0fe495e92cba023478"},{"commit":{"message":"8230310: SocksSocketImpl should handle the IllegalArgumentException thrown by ProxySelector.select usage\n\nCatch the IAE thrown by ProxySelector.select and wrap it into a IOException\n\nReviewed-by: dfuchs"},"files":[],"sha":"6fa4babbb2082fcd269771a0926de421fc986f08"},{"commit":{"message":"8230105: -XDfind=diamond crashes\n\nAvoiding side-effects in Analyzer's speculative attribution.\n\nReviewed-by: mcimadamore, vromero"},"files":[],"sha":"1d71dd8604c9c08339992051ff94d0c86f749a64"},{"commit":{"message":"8230307: ZGC: Make zGlobals and zArguments OS agnostic\n\nReviewed-by: pliden, smonteith"},"files":[],"sha":"277ef756c4d2250047af05b3f13d8c86fe611ed4"},{"commit":{"message":"8230388: Problemlist additional compiler\/rtm tests\n\nPutting tests on the problem list.\n\nReviewed-by: roland"},"files":[],"sha":"05d4e7a26966453682f9c918b450004ee9ba6893"},{"commit":{"message":"8230004: jdk\/internal\/jimage\/JImageOpenTest.java runs no test\n\nReviewed-by: alanb"},"files":[],"sha":"647f487510e89a990dd521c8a867fe3163d276fa"},{"commit":{"message":"8230203: Replace markWord enums with typed constants\n\nReviewed-by: kbarrett, dholmes"},"files":[],"sha":"3149ed4993b2525803b7ace8b4dbdabf1208e5f1"},{"commit":{"message":"8230376: [TESTBUG] runtime\/StackTrace\/HiddenFrameTest.java fails with release VM\n\nReviewed-by: dholmes"},"files":[],"sha":"c7f0ae07cdd2862bc3ed9bfebde14edbdea428b4"},{"commit":{"message":"8229797: [JVMCI] Clean up no longer used JVMCI::dependencies_invalid value\n\nCo-authored-by: Xiaohong Gong <xiaohong.gong@arm.com>\nReviewed-by: dlong, coleenp"},"files":[],"sha":"6a48a4e5ed86d0f171a1d808293e26db729c5d2d"},{"commit":{"message":"8229997: Apply java.io.Serial annotations in java.base\n\nReviewed-by: alanb, rriggs"},"files":[],"sha":"9d764ee48ee7c2e7be7a25aee2ed7bed2fcd2000"},{"commit":{"message":"8230332: G1DirtyCardQueueSet _notify_when_complete is always true\n\nRemoved _notify_when_complete, assume true value where formerly used.\n\nReviewed-by: sjohanss, tschatzl"},"files":[],"sha":"6d064a747e3d35cc51d0b57800ea0544f0545ca3"},{"commit":{"message":"8228960: [TESTBUG] containers\/docker\/TestJcmdWithSideCar.java: jcmd reports main class as Unknown\n\nWaiting for child output to start main() before running jcmd\n\nReviewed-by: dholmes, bobv"},"files":[],"sha":"489f8027be30be42dcebdf6330ad73ed7f70a5e0"},{"commit":{"message":"8230109: G1DirtyCardQueueSet should use card counts rather than buffer counts\n\nConsistently use card counts\n\nReviewed-by: sjohanss, sangheki"},"files":[],"sha":"b6b6a37fe1b8768fefed222b3fa4de2f8a6aa8c1"},{"commit":{"message":"8230037: Confused MetaData dumped by PrintOptoAssembly\n\nReviewed-by: kvn, bsrbnd"},"files":[],"sha":"647e4d75571668c283906e2e3723073032273c78"},{"commit":{"message":"8229999: Apply java.io.Serial annotations to security types in java.base\n\nReviewed-by: rriggs, mullan"},"files":[],"sha":"6d4ef5aaf3a66eec5a54bda2371a9a34d332ba74"},{"commit":{"message":"8182119: jdk.hotspot.agent's META-INF\/services\/com.sun.jdi.connect.Connector no longer needed\n\nReviewed-by: sspitsyn, amenkov, alanb"},"files":[],"sha":"470d32df73af3723d499c7af9f95012af453d90e"},{"commit":{"message":"8229284: jdk\/internal\/platform\/cgroup\/TestCgroupMetrics.java fails for - memory:getMemoryUsage\n\nReviewed-by: mseledtsov, sgehwolf"},"files":[],"sha":"b6fac7fe07d24cc40060a2c7688a279178e750b4"},{"commit":{"message":"8229210: [TESTBUG] Move gc stress tests from JFR directory tree to gc\/stress\n\nMoved the tests\n\nReviewed-by: egahlin"},"files":[],"sha":"1bc974d8a70acae5ef5272155126c471d9e73c54"},{"commit":{"message":"8230338: Accurate error message about bad Unicode block name\n\nReviewed-by: rriggs"},"files":[],"sha":"d607548f20872d78bb9e22069cb7aa2c61ffdabb"},{"commit":{"message":"8230302: GenerateJLIClassesPlugin can generate invalid DirectMethodHandle methods\n\nReviewed-by: mchung"},"files":[],"sha":"b4c63048bb65f293b369887a35832f9984d50e95"},{"commit":{"message":"8216977: ShowHiddenFrames use in java_lang_StackTraceElement::fill_in appears broken\n\nReturn NULL source file and negative line number for hidden frames.\n\nReviewed-by: dholmes, hseigel"},"files":[],"sha":"e2287af876fe30ebcdb1de9d4e4da0784fbf20d6"},{"commit":{"message":"8230449: Simplify creation of handles for memory slices\n\nReviewed-by: jvernee"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSlices.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"117f1a46b5f92d8942ea34759ceb90b9d1d6bba5"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"80d6aeb773889970c8ef48d03bd48e44b81c30a6"},{"commit":{"message":"8229181: Add support for mapped memory segments"},"files":[],"sha":"f3699360b9c13a54d5cd42f6c472f7d1da4d2ab2"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"836600648a118701ea4409077d8aa2e6e25f02a0"},{"commit":{"message":"8228584: DefaultModules test fails with incubating modules"},"files":[],"sha":"191f4431c18c2989dd41bb173bea47549d684ae5"},{"commit":{"message":"8228487: Find a better name for MemoryLayout::ofValue"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"b79a01d5b7aafc060162643b2db10e06cf4c2d86"},{"commit":{"message":"8228444: Add common value layout constants\n8228447: Remove kinds from value layouts​"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"36378a4bc55e183dceac5dbe45f240657023adbd"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"68a1a01459891fcb56027677bcbe7a6cd8f0f2a8"},{"commit":{"message":"8227394: Add MemorySegment::asByteBuffer convenience method\n\nMove asByteBuffer method from MemoryAddress to MemorySegment\n\nReviewed-by: mcimadamore"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"}],"sha":"bebbfdbc78a33d232e8f3ad8ff6e27f41f2beeea"},{"commit":{"message":"8227548: AddressVarHandleGenerator produces unverifiable code\n\nReviewed-by: sundar"},"files":[],"sha":"506a9748b715d0a7beb80dd854ad091ebf4d7a1e"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"b8a20a964dd3716b378c1d10c85071e92cc6babb"},{"commit":{"message":"8227393: Add Constable support to the layout API"},"files":[],"sha":"5cb9ce7ec1c4080bd14d371453e4af956453612c"},{"commit":{"message":"8227424: C2 assertion failures with debug build\n\nReviewed-by: mcimadamore"},"files":[],"sha":"59dcdf5eae3ebf7c8cbab32e261cf26d177c80d7"},{"commit":{"message":"8227285: Fix memory access API naming issues"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"dba2d33aa9fa67a1b690b741d1d8bcedc83ca4c8"},{"commit":{"message":"8227278: Remove CompoundLayout"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"d4091db2ae524a951f7f584a2a84fb4608c9068d"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"3ab8d5ff0b137eda8781a3a35fd6fb0d71a779ee"},{"commit":{"message":"8227107: Add missing toString implementation to MemorySegmentImpl"},"files":[],"sha":"f073350e2ea43d576ba797f4056759015a0a6058"},{"commit":{"message":"8226949: Move memory access API to incubator module"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MemorySegmentProxy.java"},{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"c3097e08fdacea3d918a341347dcf6d942c1e056"},{"commit":{"message":"8226527: Add package-info javadoc\n\nJavadoc and API overhaul\n"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"},{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"b718454e960358a95bceaaa394d2776265325dbb"},{"commit":{"message":"8226421: Remove LayoutPath API\n\nWe settled for a less drastic option where LayoutPath is now 'confined'\nto operations on compound layouts (e.g. offset and dereferenceHandle).\n"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"}],"sha":"9ad0bd8eec2a89851a62da27d6fca1bf9d2399f6"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"d891382b2f282f9b424ef65b731e9af863eedd26"},{"commit":{"message":"8226526: Add extra static checks to MemoryAccessVarHandles"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"81ce3702af6abdc964330474ffbfe42da4efcf1f"},{"commit":{"message":"8226519: Add layout helper methods to obtain size and alignment in bytes"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"b688c8b606d1b619a51a85fbd9b5a12cf15997c4"},{"commit":{"message":"Automatic merge with default"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java"}],"sha":"105e5a707278e759eefdf23e6bcc00524d51f4ad"},{"commit":{"message":"8225720: Cleanup var handle address generation with byte carriers"},"files":[],"sha":"270f437fc76fdf1861872a7ea85ff058814fbe88"},{"commit":{"message":"8225172: Add way to create deref VarHandles without using the Layout API\n\nReviewed-by: mcimadamore"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java"}],"sha":"02b0d015a91044572a4390582e34d8084a9f380e"},{"commit":{"message":"8225515: Remove MemoryScope from public API"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"},{"filename":"test\/jdk\/java\/foreign\/TestSegments.java"}],"sha":"3d5328206929a92dfbcb0265ab1fc05201b0f5ae"},{"commit":{"message":"RFR 8224993: Add Unsafe support for MemoryAddress\n\nChanges to sun.misc.Unsafe were accidentally removed\n"},"files":[],"sha":"6e0d514fdb0f9b227567da90e8de8ed35b5d7ee7"},{"commit":{"message":"8224993: Add Unsafe support for MemoryAddress\n\n* Fix bad call from sun.misc.Unsafe to itself\n* remove redundant checks from MmeoryAddressImpl::copy\n"},"files":[],"sha":"a91748dbf659c3d82257440a1e9f777370a068b3"},{"commit":{"message":"8224993: 8224843: Refine ByteBuffer interop support​\n\nAdd combinatorial test for memory address bulk copy\n"},"files":[],"sha":"ca9fc9069c41e83f725b18efa50bd1c214194077"},{"commit":{"message":"8224993: Add Unsafe support for MemoryAddress"},"files":[{"filename":"test\/jdk\/java\/foreign\/TestNative.java"}],"sha":"0549ce3f79dc45cb40d2ff604335386d2e0525ea"},{"commit":{"message":"8224843: Refine ByteBuffer interop support"},"files":[],"sha":"c1a3475c9f2af8e014d738e8ea7d222de23b4aca"},{"commit":{"message":"8224614: Cleanup MemoryScope and its implementation"},"files":[],"sha":"33829766a45f9d90296b87559d08e7ee852a5fc5"},{"commit":{"message":"8224483: Split MemoryAddress into separate address\/region abstractions\n\nFix typo in MemoryAddress javadoc\n"},"files":[],"sha":"e52e5a9642a2c98ece79898ecea67ac92b4b99ba"},{"commit":{"message":"8224483: Split MemoryAddress into separate address\/region abstractions"},"files":[],"sha":"dba8ff11430c6bc22336c4ed448887429ce5f0f8"},{"commit":{"message":"8224134:Fix javadoc issues"},"files":[],"sha":"40dcde316108966ae0f11c58148d331d71dba975"},{"commit":{"message":"8224041: Name of layout classes should end with \"Layout\" suffix"},"files":[],"sha":"3e7dfd7c1d083e68068c670ac971bd9bd4bb3a57"},{"commit":{"message":"8224040: Misc improvements to layout API"},"files":[],"sha":"e181b45f6885e22efed0b5f7be2b1801a3b24a6e"},{"commit":{"message":"8224039: Remove unnecessary layout classes"},"files":[],"sha":"0d3188bd78cb65cb1bb2efadf290f2bfb6ea7d30"},{"commit":{"message":"8224037: Remove layout attributes"},"files":[],"sha":"5ba7580912821d6b62e8e4c266c3d9bb85e4e1d9"},{"commit":{"message":"8223978: Add alignment support to layouts"},"files":[],"sha":"9649f5d2bdc90440433de190ded0a6dbfc05f8e5"},{"commit":{"message":"8223786: Rename layout annotation to layout attribute"},"files":[],"sha":"f61cd5dc8ac7e8e5f2e18786d34db87ac8a53c6b"},{"commit":{"message":"8223778: Path lookup API refinements"},"files":[],"sha":"35d488c1b4164f8610b9d68bddf8e4b3887bc4b7"},{"commit":{"message":"8223768: Rethink relationship between Sequence vs. Group layouts\n\nSplit Group and Sequence; add Compound supertype.\n"},"files":[],"sha":"bebf58551b4bdec01a3327916aff15102470ab04"},{"commit":{"message":"8223712: Investigate more fluent LayoutPath API"},"files":[],"sha":"257c2fd7509d25bb37eb1a45fb847b710a3675e3"},{"commit":{"message":"8223629: Remove Descriptor and Function\n\nForgot to hg add\/remove files\n\nReviewed-by: sundar"},"files":[],"sha":"6e4a8475369e922b12800b17813265303449ddc8"},{"commit":{"message":"8223629: Remove Descriptor and Function\n\nReviewed-by: sundar"},"files":[],"sha":"f05c8a6ce5e49093a389f2e211ae6bf80ac450d6"},{"commit":{"message":"8223614: Flatten package hierarchy\n\nReviewed-by: sundar"},"files":[],"sha":"5d72a193f6ad8066ef65a35215d8b3f770018d62"},{"commit":{"message":"8222765: Implement foreign memory access through VarHandle​"},"files":[],"sha":"92db57cb24d147b343bd007838f4993a7f29c835"}]