{"files":[{"patch":"@@ -138,0 +138,1 @@\n+ *     <li>{@code wchar_t}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -497,1 +497,1 @@\n-    public static Map<String, MemoryLayout> canonicalLayouts(ValueLayout longLayout, ValueLayout sizetLayout) {\n+    public static Map<String, MemoryLayout> canonicalLayouts(ValueLayout longLayout, ValueLayout sizetLayout, ValueLayout wchartLayout) {\n@@ -510,0 +510,1 @@\n+                Map.entry(\"wchar_t\", wchartLayout),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_INT);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64Linker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_INT);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_INT, ValueLayout.JAVA_LONG);\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_INT, ValueLayout.JAVA_LONG, ValueLayout.JAVA_CHAR);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/windows\/WindowsAArch64Linker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,5 +62,1 @@\n-    static final ValueLayout SIZE_T = switch ((int) ADDRESS.byteSize()) {\n-            case 8 -> JAVA_LONG;\n-            case 4 -> JAVA_INT;\n-            default -> throw new IllegalStateException(\"Address size not supported: \" + ADDRESS.byteSize());\n-        };\n+    static final ValueLayout SIZE_T = layoutFor((int)ADDRESS.byteSize());\n@@ -148,12 +144,8 @@\n-    static ValueLayout layoutFor(MemorySegment ffiType) {\n-        if (ffiType.equals(LibFallback.sint8Type())) {\n-            return JAVA_BYTE;\n-        } else if (ffiType.equals(LibFallback.sint16Type())) {\n-            return JAVA_SHORT;\n-        } else if (ffiType.equals(LibFallback.sint32Type())) {\n-            return JAVA_INT;\n-        } else if (ffiType.equals(LibFallback.sint64Type())) {\n-            return JAVA_LONG;\n-        } else {\n-            throw new IllegalStateException(\"FFI type cannot be mapped to a canonical type\");\n-        }\n+    static ValueLayout layoutFor(int byteSize) {\n+        return switch (byteSize) {\n+            case 1 -> JAVA_BYTE;\n+            case 2 -> JAVA_SHORT;\n+            case 4 -> JAVA_INT;\n+            case 8 -> JAVA_LONG;\n+            default -> throw new IllegalStateException(\"Unsupported size: \" + byteSize);\n+        };\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FFIType.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -313,3 +313,10 @@\n-        CANONICAL_LAYOUTS.put(\"short\", FFIType.layoutFor(LibFallback.shortType()));\n-        CANONICAL_LAYOUTS.put(\"int\", FFIType.layoutFor(LibFallback.intType()));\n-        CANONICAL_LAYOUTS.put(\"long\", FFIType.layoutFor(LibFallback.longType()));\n+        CANONICAL_LAYOUTS.put(\"short\", FFIType.layoutFor(LibFallback.shortSize()));\n+        CANONICAL_LAYOUTS.put(\"int\", FFIType.layoutFor(LibFallback.intSize()));\n+        CANONICAL_LAYOUTS.put(\"long\", FFIType.layoutFor(LibFallback.longSize()));\n+        int wchar_size = LibFallback.wcharSize();\n+        if (wchar_size == 2) {\n+            \/\/ prefer JAVA_CHAR\n+            CANONICAL_LAYOUTS.put(\"wchar_t\", JAVA_CHAR);\n+        } else {\n+            CANONICAL_LAYOUTS.put(\"wchar_t\", FFIType.layoutFor(wchar_size));\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -63,3 +63,4 @@\n-    static MemorySegment shortType() { return NativeConstants.SHORT_TYPE; }\n-    static MemorySegment intType() { return NativeConstants.INT_TYPE; }\n-    static MemorySegment longType() { return NativeConstants.LONG_TYPE; }\n+    static int shortSize() { return NativeConstants.SIZEOF_SHORT; }\n+    static int intSize() { return NativeConstants.SIZEOF_INT; }\n+    static int longSize() {return NativeConstants.SIZEOF_LONG; }\n+    static int wcharSize() {return NativeConstants.SIZEOF_WCHAR; }\n@@ -224,3 +225,4 @@\n-    private static native long ffi_type_short();\n-    private static native long ffi_type_int();\n-    private static native long ffi_type_long();\n+    private static native int ffi_sizeof_short();\n+    private static native int ffi_sizeof_int();\n+    private static native int ffi_sizeof_long();\n+    private static native int ffi_sizeof_wchar();\n@@ -244,3 +246,4 @@\n-        static final MemorySegment SHORT_TYPE = MemorySegment.ofAddress(ffi_type_short());\n-        static final MemorySegment INT_TYPE = MemorySegment.ofAddress(ffi_type_int());\n-        static final MemorySegment LONG_TYPE = MemorySegment.ofAddress(ffi_type_long());\n+        static final int SIZEOF_SHORT = ffi_sizeof_short();\n+        static final int SIZEOF_INT = ffi_sizeof_int();\n+        static final int SIZEOF_LONG = ffi_sizeof_long();\n+        static final int SIZEOF_WCHAR = ffi_sizeof_wchar();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_INT);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/linux\/LinuxPPC64leLinker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_INT);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/LinuxRISCV64Linker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_INT);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_INT, ValueLayout.JAVA_LONG);\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_INT, ValueLayout.JAVA_LONG, ValueLayout.JAVA_CHAR);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <wchar.h>\n@@ -210,3 +211,3 @@\n-JNIEXPORT jlong JNICALL\n-Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1type_1short(JNIEnv* env, jclass cls) {\n-  return ptr_to_jlong(&ffi_type_sshort);\n+JNIEXPORT jint JNICALL\n+Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1sizeof_1short(JNIEnv* env, jclass cls) {\n+  return sizeof(short);\n@@ -215,3 +216,3 @@\n-JNIEXPORT jlong JNICALL\n-Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1type_1int(JNIEnv* env, jclass cls) {\n-  return ptr_to_jlong(&ffi_type_sint);\n+JNIEXPORT jint JNICALL\n+Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1sizeof_1int(JNIEnv* env, jclass cls) {\n+  return sizeof(int);\n@@ -220,3 +221,8 @@\n-JNIEXPORT jlong JNICALL\n-Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1type_1long(JNIEnv* env, jclass cls) {\n-  return ptr_to_jlong(&ffi_type_slong);\n+JNIEXPORT jint JNICALL\n+Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1sizeof_1long(JNIEnv* env, jclass cls) {\n+  return sizeof(long);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1sizeof_1wchar(JNIEnv* env, jclass cls) {\n+  return sizeof(wchar_t);\n","filename":"src\/java.base\/share\/native\/libfallbackLinker\/fallbackLinker.c","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -165,0 +165,1 @@\n+                { \"wchar_t\" },\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}