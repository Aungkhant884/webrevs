{"files":[{"patch":"@@ -61,1 +61,1 @@\n- * A linker provides a way to lookup up the <em>canonical layouts<\/em> associated with the data types used by the ABI.\n+ * A linker provides a way to look up the <em>canonical layouts<\/em> associated with the data types used by the ABI.\n@@ -65,1 +65,1 @@\n- * ABI type names to canonical layouts.\n+ * type names to canonical layouts.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.foreign.CABI;\n@@ -59,1 +58,0 @@\n-import java.util.Map;\n@@ -75,0 +73,1 @@\n+    private final Set<MemoryLayout> CANONICAL_LAYOUTS_CACHE = new HashSet<>(canonicalLayouts().values());\n@@ -140,5 +139,0 @@\n-    @Override\n-    public Map<String, MemoryLayout> canonicalLayouts() {\n-        return CANONICAL_LAYOUTS_MAP;\n-    }\n-\n@@ -220,1 +214,1 @@\n-    private static void checkGroupSize(GroupLayout gl, long maxUnpaddedOffset) {\n+    private void checkGroupSize(GroupLayout gl, long maxUnpaddedOffset) {\n@@ -230,1 +224,1 @@\n-    private static void checkMemberOffset(StructLayout parent, MemoryLayout memberLayout,\n+    private void checkMemberOffset(StructLayout parent, MemoryLayout memberLayout,\n@@ -239,1 +233,1 @@\n-    private static void checkSupported(ValueLayout valueLayout) {\n+    private void checkSupported(ValueLayout valueLayout) {\n@@ -244,1 +238,1 @@\n-        if (!CANONICAL_LAYOUTS.contains(valueLayout.withoutName())) {\n+        if (!CANONICAL_LAYOUTS_CACHE.contains(valueLayout.withoutName())) {\n@@ -249,1 +243,1 @@\n-    private static void checkHasNaturalAlignment(MemoryLayout layout) {\n+    private void checkHasNaturalAlignment(MemoryLayout layout) {\n@@ -280,30 +274,0 @@\n-\n-    private static final Map<String, MemoryLayout> CANONICAL_LAYOUTS_MAP = Map.ofEntries(\n-            \/\/ specified canonical layouts\n-            Map.entry(\"bool\", ValueLayout.JAVA_BOOLEAN),\n-            Map.entry(\"char\", ValueLayout.JAVA_BYTE),\n-            Map.entry(\"short\", ValueLayout.JAVA_SHORT),\n-            Map.entry(\"int\", ValueLayout.JAVA_INT),\n-            Map.entry(\"float\", ValueLayout.JAVA_FLOAT),\n-            Map.entry(\"long\", CABI.current() == CABI.WIN_64 ? ValueLayout.JAVA_INT : ValueLayout.JAVA_LONG),\n-            Map.entry(\"long long\", ValueLayout.JAVA_LONG),\n-            Map.entry(\"double\", ValueLayout.JAVA_DOUBLE),\n-            Map.entry(\"void*\", ValueLayout.ADDRESS),\n-            Map.entry(\"size_t\", ValueLayout.ADDRESS.byteSize() == Integer.BYTES ? ValueLayout.JAVA_INT : ValueLayout.JAVA_LONG),\n-            \/\/ unspecified size-dependent layouts\n-            Map.entry(\"int8_t\", ValueLayout.JAVA_BYTE),\n-            Map.entry(\"int16_t\", ValueLayout.JAVA_SHORT),\n-            Map.entry(\"int32_t\", ValueLayout.JAVA_INT),\n-            Map.entry(\"int64_t\", ValueLayout.JAVA_LONG),\n-            \/\/ unspecified JNI layouts\n-            Map.entry(\"jboolean\", ValueLayout.JAVA_BOOLEAN),\n-            Map.entry(\"jchar\", ValueLayout.JAVA_CHAR),\n-            Map.entry(\"jbyte\", ValueLayout.JAVA_BYTE),\n-            Map.entry(\"jshort\", ValueLayout.JAVA_SHORT),\n-            Map.entry(\"jint\", ValueLayout.JAVA_INT),\n-            Map.entry(\"jlong\", ValueLayout.JAVA_LONG),\n-            Map.entry(\"jfloat\", ValueLayout.JAVA_FLOAT),\n-            Map.entry(\"jdouble\", ValueLayout.JAVA_DOUBLE)\n-    );\n-\n-    private static final Set<MemoryLayout> CANONICAL_LAYOUTS = new HashSet<>(CANONICAL_LAYOUTS_MAP.values());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":6,"deletions":42,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -496,0 +496,30 @@\n+\n+    public static Map<String, MemoryLayout> canonicalLayouts(ValueLayout longLayout, ValueLayout sizetLayout) {\n+        return Map.ofEntries(\n+                \/\/ specified canonical layouts\n+                Map.entry(\"bool\", ValueLayout.JAVA_BOOLEAN),\n+                Map.entry(\"char\", ValueLayout.JAVA_BYTE),\n+                Map.entry(\"short\", ValueLayout.JAVA_SHORT),\n+                Map.entry(\"int\", ValueLayout.JAVA_INT),\n+                Map.entry(\"float\", ValueLayout.JAVA_FLOAT),\n+                Map.entry(\"long\", longLayout),\n+                Map.entry(\"long long\", ValueLayout.JAVA_LONG),\n+                Map.entry(\"double\", ValueLayout.JAVA_DOUBLE),\n+                Map.entry(\"void*\", ValueLayout.ADDRESS),\n+                Map.entry(\"size_t\", sizetLayout),\n+                \/\/ unspecified size-dependent layouts\n+                Map.entry(\"int8_t\", ValueLayout.JAVA_BYTE),\n+                Map.entry(\"int16_t\", ValueLayout.JAVA_SHORT),\n+                Map.entry(\"int32_t\", ValueLayout.JAVA_INT),\n+                Map.entry(\"int64_t\", ValueLayout.JAVA_LONG),\n+                \/\/ unspecified JNI layouts\n+                Map.entry(\"jboolean\", ValueLayout.JAVA_BOOLEAN),\n+                Map.entry(\"jchar\", ValueLayout.JAVA_CHAR),\n+                Map.entry(\"jbyte\", ValueLayout.JAVA_BYTE),\n+                Map.entry(\"jshort\", ValueLayout.JAVA_SHORT),\n+                Map.entry(\"jint\", ValueLayout.JAVA_INT),\n+                Map.entry(\"jlong\", ValueLayout.JAVA_LONG),\n+                Map.entry(\"jfloat\", ValueLayout.JAVA_FLOAT),\n+                Map.entry(\"jdouble\", ValueLayout.JAVA_DOUBLE)\n+        );\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -33,0 +34,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -36,0 +39,1 @@\n+import java.util.Map;\n@@ -43,0 +47,2 @@\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+\n@@ -69,0 +75,5 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64Linker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -33,0 +34,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -36,0 +39,1 @@\n+import java.util.Map;\n@@ -43,0 +47,2 @@\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+\n@@ -69,0 +75,5 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -34,0 +35,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -37,0 +40,1 @@\n+import java.util.Map;\n@@ -43,0 +47,2 @@\n+\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_INT, ValueLayout.JAVA_LONG);\n@@ -66,0 +72,5 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/windows\/WindowsAArch64Linker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n@@ -61,1 +62,1 @@\n-    private static final ValueLayout SIZE_T = switch ((int) ADDRESS.byteSize()) {\n+    static final ValueLayout SIZE_T = switch ((int) ADDRESS.byteSize()) {\n@@ -146,0 +147,14 @@\n+\n+    static ValueLayout layoutFor(MemorySegment ffiType) {\n+        if (ffiType.equals(LibFallback.sint8Type())) {\n+            return JAVA_BYTE;\n+        } else if (ffiType.equals(LibFallback.sint16Type())) {\n+            return JAVA_SHORT;\n+        } else if (ffiType.equals(LibFallback.sint32Type())) {\n+            return JAVA_INT;\n+        } else if (ffiType.equals(LibFallback.sint64Type())) {\n+            return JAVA_LONG;\n+        } else {\n+            throw new IllegalStateException(\"FFI type cannot be mapped to a canonical type\");\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FFIType.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import java.util.HashMap;\n@@ -49,0 +50,1 @@\n+import java.util.Map;\n@@ -52,0 +54,8 @@\n+import static java.lang.foreign.ValueLayout.JAVA_BOOLEAN;\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n+import static java.lang.foreign.ValueLayout.JAVA_CHAR;\n+import static java.lang.foreign.ValueLayout.JAVA_DOUBLE;\n+import static java.lang.foreign.ValueLayout.JAVA_FLOAT;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+import static java.lang.foreign.ValueLayout.JAVA_SHORT;\n@@ -286,0 +296,30 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n+\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = new HashMap<>();\n+\n+    static {\n+        CANONICAL_LAYOUTS.put(\"bool\", JAVA_BOOLEAN);\n+        CANONICAL_LAYOUTS.put(\"char\", JAVA_BYTE);\n+        CANONICAL_LAYOUTS.put(\"float\", JAVA_FLOAT);\n+        CANONICAL_LAYOUTS.put(\"double\", JAVA_DOUBLE);\n+        CANONICAL_LAYOUTS.put(\"long long\", JAVA_LONG);\n+        CANONICAL_LAYOUTS.put(\"void*\", ADDRESS);\n+        \/\/ platform-dependent sizes\n+        CANONICAL_LAYOUTS.put(\"size_t\", FFIType.SIZE_T);\n+        CANONICAL_LAYOUTS.put(\"short\", FFIType.layoutFor(LibFallback.shortType()));\n+        CANONICAL_LAYOUTS.put(\"int\", FFIType.layoutFor(LibFallback.intType()));\n+        CANONICAL_LAYOUTS.put(\"long\", FFIType.layoutFor(LibFallback.longType()));\n+        \/\/ JNI types\n+        CANONICAL_LAYOUTS.put(\"jboolean\", JAVA_BOOLEAN);\n+        CANONICAL_LAYOUTS.put(\"jchar\", JAVA_CHAR);\n+        CANONICAL_LAYOUTS.put(\"jbyte\", JAVA_BYTE);\n+        CANONICAL_LAYOUTS.put(\"jshort\", JAVA_SHORT);\n+        CANONICAL_LAYOUTS.put(\"jint\", JAVA_INT);\n+        CANONICAL_LAYOUTS.put(\"jlong\", JAVA_LONG);\n+        CANONICAL_LAYOUTS.put(\"jfloat\", JAVA_FLOAT);\n+        CANONICAL_LAYOUTS.put(\"jdouble\", JAVA_DOUBLE);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -62,0 +62,5 @@\n+    \/\/ platform-dependent types\n+    static MemorySegment shortType() { return NativeConstants.SHORT_TYPE; }\n+    static MemorySegment intType() { return NativeConstants.INT_TYPE; }\n+    static MemorySegment longType() { return NativeConstants.LONG_TYPE; }\n+\n@@ -219,0 +224,3 @@\n+    private static native long ffi_type_short();\n+    private static native long ffi_type_int();\n+    private static native long ffi_type_long();\n@@ -236,0 +244,4 @@\n+        static final MemorySegment SHORT_TYPE = MemorySegment.ofAddress(ffi_type_short());\n+        static final MemorySegment INT_TYPE = MemorySegment.ofAddress(ffi_type_int());\n+        static final MemorySegment LONG_TYPE = MemorySegment.ofAddress(ffi_type_long());\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -33,0 +34,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -36,0 +39,1 @@\n+import java.util.Map;\n@@ -39,0 +43,2 @@\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+\n@@ -65,0 +71,5 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/linux\/LinuxPPC64leLinker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -33,0 +34,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -36,0 +39,1 @@\n+import java.util.Map;\n@@ -39,0 +43,2 @@\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+\n@@ -65,0 +71,5 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/LinuxRISCV64Linker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -32,0 +33,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -35,0 +38,1 @@\n+import java.util.Map;\n@@ -41,0 +45,2 @@\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG);\n+\n@@ -67,0 +73,5 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -31,0 +32,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -34,0 +37,1 @@\n+import java.util.Map;\n@@ -40,0 +44,2 @@\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS = SharedUtils.canonicalLayouts(ValueLayout.JAVA_INT, ValueLayout.JAVA_LONG);\n+\n@@ -66,0 +72,5 @@\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -209,0 +209,15 @@\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1type_1short(JNIEnv* env, jclass cls) {\n+  return ptr_to_jlong(&ffi_type_sshort);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1type_1int(JNIEnv* env, jclass cls) {\n+  return ptr_to_jlong(&ffi_type_sint);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_foreign_abi_fallback_LibFallback_ffi_1type_1long(JNIEnv* env, jclass cls) {\n+  return ptr_to_jlong(&ffi_type_slong);\n+}\n","filename":"src\/java.base\/share\/native\/libfallbackLinker\/fallbackLinker.c","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires jdk.foreign.linker != \"UNSUPPORTED\"\n@@ -38,0 +37,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -46,0 +47,1 @@\n+import static org.testng.Assert.assertNotNull;\n@@ -48,0 +50,1 @@\n+import static org.testng.Assert.assertTrue;\n@@ -141,0 +144,22 @@\n+    @Test(dataProvider = \"canonicalTypeNames\")\n+    public void testCanonicalLayouts(String typeName) {\n+        MemoryLayout layout = LINKER.canonicalLayouts().get(typeName);\n+        assertNotNull(layout);\n+        assertTrue(layout instanceof ValueLayout);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] canonicalTypeNames() {\n+        return new Object[][]{\n+                { \"bool\" },\n+                { \"char\" },\n+                { \"short\" },\n+                { \"int\" },\n+                { \"long\" },\n+                { \"long long\" },\n+                { \"float\" },\n+                { \"double\" },\n+                { \"void*\" },\n+                { \"size_t\" },\n+        };\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"}]}