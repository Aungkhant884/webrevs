{"files":[{"patch":"@@ -600,1 +600,1 @@\n-     *     and pushes that onto the operand stack.\n+     * with the given size, and pushes that onto the operand stack\n@@ -626,1 +626,1 @@\n-     * Pops a 'long' from the operand stack, converts it to a 'MemoryAddress',\n+     * Pops a 'long' from the operand stack, converts it to a 'MemorySegment' (with given size),\n@@ -652,1 +652,1 @@\n-     *   Pops a MemoryAddress from the operand stack, and converts it to a MemorySegment\n+     *   Pops a 'long' from the operand stack, and converts it to a 'MemorySegment'\n@@ -656,2 +656,2 @@\n-        private static MemorySegment toSegment(MemorySegment operand, long size, Context context) {\n-            return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(operand.address(), size, context.session);\n+        private static MemorySegment toSegment(long operand, long size, Context context) {\n+            return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(operand, size, context.session);\n@@ -668,1 +668,1 @@\n-            SharedUtils.checkType(actualType, MemorySegment.class);\n+            SharedUtils.checkType(actualType, long.class);\n@@ -675,1 +675,1 @@\n-            MemorySegment operand = (MemorySegment) stack.pop();\n+            long operand = (long) stack.pop();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-        popType(MemorySegment.class);\n+        popType(long.class);\n@@ -580,1 +580,0 @@\n-        emitAddress();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -113,1 +113,0 @@\n-                        Binding.boxAddress(Long.MAX_VALUE),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -203,2 +203,1 @@\n-        NativeMemorySegmentImpl.makeNativeSegmentUnchecked(dest.address(), buffer.byteSize()).copyFrom(buffer);\n-        return dest;\n+        return dest.copyFrom(buffer);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -457,1 +457,0 @@\n-                            .boxAddress(Long.MAX_VALUE)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -277,1 +277,0 @@\n-                            .boxAddress(Long.MAX_VALUE)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.nio.ByteOrder;\n@@ -49,1 +48,1 @@\n-        ValueLayout newLayout = valueLayoutForCarrier(layout.carrier(), layout.order());\n+        ValueLayout newLayout = MemoryLayout.valueLayout(layout.carrier(), layout.order());\n@@ -81,4 +80,0 @@\n-\n-    static ValueLayout valueLayoutForCarrier(Class<?> carrier, ByteOrder order) {\n-        return MemoryLayout.valueLayout(carrier, order);\n-    }\n","filename":"test\/jdk\/java\/foreign\/TestLayoutEquality.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}