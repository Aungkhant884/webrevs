{"files":[{"patch":"@@ -195,1 +195,1 @@\n-     * the allocation operation, or {@link ToSegment} bindings, by providing the {@link MemorySession} that\n+     * the allocation operation, or {@link BoxAddress} bindings, by providing the {@link MemorySession} that\n@@ -284,1 +284,0 @@\n-        TO_SEGMENT,\n@@ -335,2 +334,2 @@\n-    static BoxAddress boxAddress(long size) {\n-        return new BoxAddress(size);\n+    static BoxAddress boxAddressRaw(long size) {\n+        return new BoxAddress(size, false);\n@@ -339,2 +338,2 @@\n-    static UnboxAddress unboxAddress() {\n-        return UnboxAddress.INSTANCE;\n+    static BoxAddress boxAddress(MemoryLayout layout) {\n+        return new BoxAddress(layout.byteSize(), true);\n@@ -343,2 +342,2 @@\n-    static ToSegment toSegment(MemoryLayout layout) {\n-        return new ToSegment(layout.byteSize());\n+    static BoxAddress boxAddress(long byteSize) {\n+        return new BoxAddress(byteSize, true);\n@@ -347,2 +346,2 @@\n-    static ToSegment toSegment(long byteSize) {\n-        return new ToSegment(byteSize);\n+    static UnboxAddress unboxAddress() {\n+        return UnboxAddress.INSTANCE;\n@@ -396,2 +395,2 @@\n-        public Binding.Builder boxAddress(long size) {\n-            bindings.add(Binding.boxAddress(size));\n+        public Binding.Builder boxAddressRaw(long size) {\n+            bindings.add(Binding.boxAddressRaw(size));\n@@ -401,2 +400,2 @@\n-        public Binding.Builder unboxAddress() {\n-            bindings.add(Binding.unboxAddress());\n+        public Binding.Builder boxAddress(MemoryLayout layout) {\n+            bindings.add(Binding.boxAddress(layout));\n@@ -406,2 +405,2 @@\n-        public Binding.Builder toSegment(MemoryLayout layout) {\n-            bindings.add(Binding.toSegment(layout));\n+        public Binding.Builder unboxAddress() {\n+            bindings.add(Binding.unboxAddress());\n@@ -626,2 +625,2 @@\n-     * Pops a 'long' from the operand stack, converts it to a 'MemorySegment' (with given size),\n-     *     and pushes that onto the operand stack.\n+     * Pops a 'long' from the operand stack, converts it to a 'MemorySegment', with the given size and memory session\n+     * (either the context session, or the global session), and pushes that onto the operand stack. \n@@ -629,1 +628,1 @@\n-    record BoxAddress(long size) implements Binding {\n+    record BoxAddress(long size, boolean needsSession) implements Binding {\n@@ -646,32 +645,3 @@\n-            stack.push(MemorySegment.ofAddress((long) stack.pop(), size));\n-        }\n-    }\n-\n-    \/**\n-     * TO_SEGMENT([size])\n-     *   Pops a 'long' from the operand stack, and converts it to a 'MemorySegment'\n-     *   with the given size, and pushes that onto the operand stack\n-     *\/\n-    record ToSegment(long size) implements Binding {\n-        private static MemorySegment toSegment(long operand, long size, Context context) {\n-            return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(operand, size, context.session);\n-        }\n-\n-        @Override\n-        public Tag tag() {\n-            return Tag.TO_SEGMENT;\n-        }\n-\n-        @Override\n-        public void verify(Deque<Class<?>> stack) {\n-            Class<?> actualType = stack.pop();\n-            SharedUtils.checkType(actualType, long.class);\n-            stack.push(MemorySegment.class);\n-        }\n-\n-        @Override\n-        public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n-                              BindingInterpreter.LoadFunc loadFunc, Context context) {\n-            long operand = (long) stack.pop();\n-            MemorySegment segment = toSegment(operand, size, context);\n-            stack.push(segment);\n+            MemorySession session = needsSession ?\n+                    context.session() : MemorySession.global();\n+            stack.push(NativeMemorySegmentImpl.makeNativeSegmentUnchecked((long) stack.pop(), size, session));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":21,"deletions":51,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -437,1 +437,4 @@\n-        return callingSequence.argumentBindings().anyMatch(Binding.ToSegment.class::isInstance);\n+        return callingSequence.argumentBindings()\n+                .filter(Binding.BoxAddress.class::isInstance)\n+                .map(Binding.BoxAddress.class::cast)\n+                .anyMatch(Binding.BoxAddress::needsSession);\n@@ -474,1 +477,0 @@\n-                case TO_SEGMENT -> emitToSegment((Binding.ToSegment) binding);\n@@ -576,11 +578,0 @@\n-    private void emitToSegment(Binding.ToSegment binding) {\n-        long size = binding.size();\n-        popType(long.class);\n-\n-        emitConst(size);\n-        emitLoadInternalSession();\n-        emitInvokeStatic(NativeMemorySegmentImpl.class, \"makeNativeSegmentUnchecked\", OF_LONG_UNCHECKED_DESC);\n-\n-        pushType(MemorySegment.class);\n-    }\n-\n@@ -594,1 +585,6 @@\n-        emitInvokeStatic(MemorySegment.class, \"ofAddress\", OF_LONG_DESC);\n+        if (needsSession()) {\n+            emitLoadInternalSession();\n+            emitInvokeStatic(NativeMemorySegmentImpl.class, \"makeNativeSegmentUnchecked\", OF_LONG_UNCHECKED_DESC);\n+        } else {\n+            emitInvokeStatic(NativeMemorySegmentImpl.class, \"makeNativeSegmentUnchecked\", OF_LONG_DESC);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-                        Binding.toSegment(returnBufferSize)));\n+                        Binding.boxAddress(returnBufferSize)));\n@@ -196,1 +196,0 @@\n-        \/\/TO_SEGMENT,\n@@ -224,1 +223,0 @@\n-        TO_SEGMENT,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -420,1 +420,1 @@\n-                .boxAddress(Long.MAX_VALUE)\n+                .boxAddressRaw(Long.MAX_VALUE)\n@@ -457,1 +457,1 @@\n-                            .toSegment(layout);\n+                            .boxAddress(layout);\n@@ -487,1 +487,1 @@\n-                            .boxAddress(Utils.pointeeSize(layout));\n+                            .boxAddressRaw(Utils.pointeeSize(layout));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-                            .boxAddress(Utils.pointeeSize(layout));\n+                            .boxAddressRaw(Utils.pointeeSize(layout));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-                            .toSegment(layout);\n+                            .boxAddress(layout);\n@@ -283,1 +283,1 @@\n-                            .boxAddress(Utils.pointeeSize(layout));\n+                            .boxAddressRaw(Utils.pointeeSize(layout));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}