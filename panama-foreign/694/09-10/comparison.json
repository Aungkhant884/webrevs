{"files":[{"patch":"@@ -55,1 +55,1 @@\n- *     <li>It can be {@linkplain MemorySegment#set(ValueLayout.OfAddress, long, Addressable) stored} inside another memory segment.<\/li>\n+ *     <li>It can be {@linkplain MemorySegment#set(ValueLayout.OfAddress, long, MemorySegment) stored} inside another memory segment.<\/li>\n@@ -57,1 +57,1 @@\n- *     {@link MemorySegment#ofAddress(MemoryAddress, long, MemorySession) resizing} the segment first).<\/li>\n+ *     {@link MemorySegment#ofAddress(long, long, MemorySession) resizing} the segment first).<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-     * Takes a MethodHandle that takes an input buffer as a first argument (a MemoryAddress), and returns nothing,\n+     * Takes a MethodHandle that takes an input buffer as a first argument (a MemorySegment), and returns nothing,\n@@ -164,1 +164,1 @@\n-            throw new IllegalArgumentException(\"MemoryAddress expected as third param: \" + handle.type());\n+            throw new IllegalArgumentException(\"MemorySegment expected as third param: \" + handle.type());\n@@ -169,5 +169,5 @@\n-        handle = collectArguments(ret, 1, handle); \/\/ (MemorySegment, Addressable, SegmentAllocator, MemoryAddress, ...) MemorySegment\n-        handle = mergeArguments(handle, 0, 3);  \/\/ (MemorySegment, Addressable, SegmentAllocator, ...) MemorySegment\n-        handle = collectArguments(handle, 0, insertArguments(MH_ALLOC_BUFFER, 1, cDesc.returnLayout().get())); \/\/ (SegmentAllocator, Addressable, SegmentAllocator, ...) MemoryAddress\n-        handle = mergeArguments(handle, 0, 2);  \/\/ (SegmentAllocator, Addressable, ...) MemoryAddress\n-        handle = swapArguments(handle, 0, 1); \/\/ (Addressable, SegmentAllocator, ...) MemoryAddress\n+        handle = collectArguments(ret, 1, handle); \/\/ (MemorySegment, MemorySegment, SegmentAllocator, MemorySegment, ...) MemorySegment\n+        handle = mergeArguments(handle, 0, 3);  \/\/ (MemorySegment, MemorySegment, SegmentAllocator, ...) MemorySegment\n+        handle = collectArguments(handle, 0, insertArguments(MH_ALLOC_BUFFER, 1, cDesc.returnLayout().get())); \/\/ (SegmentAllocator, MemorySegment, SegmentAllocator, ...) MemorySegment\n+        handle = mergeArguments(handle, 0, 2);  \/\/ (SegmentAllocator, MemorySegment, ...) MemorySegment\n+        handle = swapArguments(handle, 0, 1); \/\/ (MemorySegment, SegmentAllocator, ...) MemorySegment\n@@ -179,1 +179,1 @@\n-     * (a MemoryAddress), and upon invocation, copies the contents of the returned MemorySegment into the input buffer\n+     * (a MemorySegment), and upon invocation, copies the contents of the returned MemorySegment into the input buffer\n@@ -189,1 +189,1 @@\n-        target = collectArguments(MH_BUFFER_COPY, 1, target); \/\/ (MemoryAddress, ...) MemoryAddress\n+        target = collectArguments(MH_BUFFER_COPY, 1, target); \/\/ (MemorySegment, ...) MemorySegment\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}