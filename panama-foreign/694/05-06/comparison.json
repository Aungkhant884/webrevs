{"files":[{"patch":"@@ -375,0 +375,39 @@\n+    \/**\n+     * Returns a slice of this segment that is the overlap between this and\n+     * the provided segment.\n+     *\n+     * <p>Two segments {@code S1} and {@code S2} are said to overlap if it is possible to find\n+     * at least two slices {@code L1} (from {@code S1}) and {@code L2} (from {@code S2}) that are backed by the\n+     * same memory region. As such, it is not possible for a\n+     * {@linkplain #isNative() native} segment to overlap with a heap segment; in\n+     * this case, or when no overlap occurs, {@code null} is returned.\n+     *\n+     * @param other the segment to test for an overlap with this segment.\n+     * @return a slice of this segment (where overlapping occurs).\n+     *\/\n+    Optional<MemorySegment> asOverlappingSlice(MemorySegment other);\n+\n+    \/**\n+     * Returns the offset, in bytes, of the provided segment, relative to this\n+     * segment.\n+     *\n+     * <p>The offset is relative to the base address of this segment and can be\n+     * a negative or positive value. For instance, if both segments are native\n+     * segments, or heap segments backed by the same array, the resulting offset\n+     * can be computed as follows:\n+     *\n+     * {@snippet lang=java :\n+     * other.address() - segment.baseAddress()\n+     * }\n+     *\n+     * If the segments share the same address, {@code 0} is returned. If\n+     * {@code other} is a slice of this segment, the offset is always\n+     * {@code 0 <= x < this.byteSize()}.\n+     *\n+     * @param other the segment to retrieve an offset to.\n+     * @throws UnsupportedOperationException if the two segments cannot be compared, e.g. because they are of\n+     * a different kind, or because they are backed by different Java arrays.\n+     * @return the relative offset, in bytes, of the provided segment.\n+     *\/\n+    long segmentOffset(MemorySegment other);\n+\n@@ -870,4 +909,1 @@\n-        if (bytesSize < 0) {\n-            throw new IllegalArgumentException(\"Invalid size : \" + bytesSize);\n-        }\n-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize);\n+        return MemorySegment.ofAddress(address, bytesSize, MemorySession.global());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.reflect.Reflection;\n@@ -248,0 +249,2 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), VaList.class, \"ofAddress\");\n+        Objects.requireNonNull(session);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -214,0 +214,27 @@\n+    @Override\n+    public final Optional<MemorySegment> asOverlappingSlice(MemorySegment other) {\n+        AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl)Objects.requireNonNull(other);\n+        if (unsafeGetBase() == that.unsafeGetBase()) {  \/\/ both either native or heap\n+            final long thisStart = this.unsafeGetOffset();\n+            final long thatStart = that.unsafeGetOffset();\n+            final long thisEnd = thisStart + this.byteSize();\n+            final long thatEnd = thatStart + that.byteSize();\n+\n+            if (thisStart < thatEnd && thisEnd > thatStart) {  \/\/overlap occurs\n+                long offsetToThat = this.segmentOffset(that);\n+                long newOffset = offsetToThat >= 0 ? offsetToThat : 0;\n+                return Optional.of(asSlice(newOffset, Math.min(this.byteSize() - newOffset, that.byteSize() + offsetToThat)));\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public final long segmentOffset(MemorySegment other) {\n+        AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl) Objects.requireNonNull(other);\n+        if (unsafeGetBase() == that.unsafeGetBase()) {\n+            return that.unsafeGetOffset() - this.unsafeGetOffset();\n+        }\n+        throw new UnsupportedOperationException(\"Cannot compute offset from native to heap (or vice versa).\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * {@link HeapMemorySegmentImpl#base()} method so that it returns an array of the correct (sharp) type. Note that\n+ * {@link HeapMemorySegmentImpl#unsafeGetBase()} method so that it returns an array of the correct (sharp) type. Note that\n@@ -49,1 +49,1 @@\n- * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, int, MemorySession)}.\n+ * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, boolean, MemorySession)}.\n@@ -69,5 +69,0 @@\n-    @Override\n-    public long maxAlignMask() {\n-        return 0;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-            long offset = s2.segment.address() - s1.segment.address();\n+            long offset = s1.segment.segmentOffset(s2.segment);\n@@ -56,1 +56,7 @@\n-            assertNotEquals(s1.segment.array(), s2.segment.array(), \"segments should be of different kinds!\");\n+            try {\n+                long offset = s1.segment.segmentOffset(s2.segment);\n+                out.format(\"testOffset s1:%s, s2:%s, offset:%d\\n\", s1, s2, offset);\n+                fail(\"offset unexpectedly passed!\");\n+            } catch (UnsupportedOperationException ex) {\n+                assertTrue(ex.getMessage().contains(\"Cannot compute offset from native to heap (or vice versa).\"));\n+            }\n@@ -59,1 +65,1 @@\n-            long offset = s2.segment.address() - s1.segment.address();\n+            long offset = s1.segment.segmentOffset(s2.segment);\n","filename":"test\/jdk\/java\/foreign\/TestSegmentOffset.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ *  Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @run testng\/othervm TestSegmentOverlap\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+import static java.lang.System.out;\n+import static org.testng.Assert.*;\n+\n+public class TestSegmentOverlap {\n+\n+    static Path tempPath;\n+\n+    static {\n+        try {\n+            File file = File.createTempFile(\"buffer\", \"txt\");\n+            file.deleteOnExit();\n+            tempPath = file.toPath();\n+            Files.write(file.toPath(), new byte[16], StandardOpenOption.WRITE);\n+\n+        } catch (IOException ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+    @DataProvider(name = \"segmentFactories\")\n+    public Object[][] segmentFactories() {\n+        List<Supplier<MemorySegment>> l = List.of(\n+                () -> MemorySegment.allocateNative(16, MemorySession.openConfined()),\n+                () -> {\n+                    try (FileChannel fileChannel = FileChannel.open(tempPath, StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                        return fileChannel.map(FileChannel.MapMode.READ_WRITE, 0L, 16L, MemorySession.openConfined());\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                },\n+                () -> MemorySegment.ofArray(new byte[] { 0x00, 0x01, 0x02, 0x03 } ),\n+                () -> MemorySegment.ofArray(new char[] {'a', 'b', 'c', 'd' } ),\n+                () -> MemorySegment.ofArray(new double[] { 1d, 2d, 3d, 4d} ),\n+                () -> MemorySegment.ofArray(new float[] { 1.0f, 2.0f, 3.0f, 4.0f } ),\n+                () -> MemorySegment.ofArray(new int[] { 1, 2, 3, 4 }),\n+                () -> MemorySegment.ofArray(new long[] { 1L, 2L, 3L, 4L } ),\n+                () -> MemorySegment.ofArray(new short[] { 1, 2, 3, 4 } )\n+        );\n+        return l.stream().map(s -> new Object[] { s }).toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider=\"segmentFactories\")\n+    public void testBasic(Supplier<MemorySegment> segmentSupplier) {\n+        var s1 = segmentSupplier.get();\n+        var s2 = segmentSupplier.get();\n+        var sOther = s1.isNative() ? OtherSegmentFactory.HEAP.factory.get()\n+                : OtherSegmentFactory.NATIVE.factory.get();\n+        out.format(\"testBasic s1:%s, s2:%s, sOther:%s\\n\", s1, s2, sOther);\n+        assertTrue(s1.asOverlappingSlice(s2).isEmpty());\n+        assertTrue(s2.asOverlappingSlice(s1).isEmpty());\n+        assertTrue(s1.asOverlappingSlice(sOther).isEmpty());\n+    }\n+\n+    @Test(dataProvider=\"segmentFactories\")\n+    public void testIdentical(Supplier<MemorySegment> segmentSupplier) {\n+        var s1 = segmentSupplier.get();\n+        var s2 = s1.asReadOnly();\n+        out.format(\"testIdentical s1:%s, s2:%s\\n\", s1, s2);\n+        assertEquals(s1.asOverlappingSlice(s2).get().byteSize(), s1.byteSize());\n+        assertEquals(s1.asOverlappingSlice(s2).get().session(), s1.session());\n+\n+        assertEquals(s2.asOverlappingSlice(s1).get().byteSize(), s2.byteSize());\n+        assertEquals(s2.asOverlappingSlice(s1).get().session(), s2.session());\n+\n+        if (s1.isNative()) {\n+            assertEquals(s1.asOverlappingSlice(s2).get().address(), s1.address());\n+            assertEquals(s2.asOverlappingSlice(s1).get().address(), s2.address());\n+        }\n+    }\n+\n+    @Test(dataProvider=\"segmentFactories\")\n+    public void testSlices(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment s1 = segmentSupplier.get();\n+        MemorySegment s2 = segmentSupplier.get();\n+        for (int offset = 0 ; offset < 4 ; offset++) {\n+            MemorySegment slice = s1.asSlice(offset);\n+            out.format(\"testSlices s1:%s, s2:%s, slice:%s, offset:%d\\n\", s1, s2, slice, offset);\n+            assertEquals(s1.asOverlappingSlice(slice).get().byteSize(), s1.byteSize() - offset);\n+            assertEquals(s1.asOverlappingSlice(slice).get().session(), s1.session());\n+\n+            assertEquals(slice.asOverlappingSlice(s1).get().byteSize(), slice.byteSize());\n+            assertEquals(slice.asOverlappingSlice(s1).get().session(), slice.session());\n+\n+            if (s1.isNative()) {\n+                assertEquals(s1.asOverlappingSlice(slice).get().address(), s1.address() + offset);\n+                assertEquals(slice.asOverlappingSlice(s1).get().address(), slice.address());\n+            }\n+            assertTrue(s2.asOverlappingSlice(slice).isEmpty());\n+        }\n+    }\n+\n+    enum OtherSegmentFactory {\n+        NATIVE(() -> MemorySegment.allocateNative(16, MemorySession.openConfined())),\n+        HEAP(() -> MemorySegment.ofArray(new byte[]{16}));\n+\n+        final Supplier<MemorySegment> factory;\n+\n+        OtherSegmentFactory(Supplier<MemorySegment> segmentFactory) {\n+            this.factory = segmentFactory;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestSegmentOverlap.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}