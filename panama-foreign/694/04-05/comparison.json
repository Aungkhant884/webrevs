{"files":[{"patch":"@@ -58,1 +58,1 @@\n-                    MethodType.methodType(Object.class, Object[].class, AtomicReference.class, int.class));\n+                    MethodType.methodType(Object.class, Object[].class, AtomicReference.class, int.class, List.class));\n@@ -107,1 +107,6 @@\n-        MethodHandle mh = insertArguments(PASS_AND_SAVE, 1, box, prefix.size());\n+        List<MemoryLayout> layouts = new ArrayList<>();\n+        layouts.addAll(prefix);\n+        for (int i = 0 ; i < params.size() ; i++) {\n+            layouts.add(params.get(i).layout(fields));\n+        }\n+        MethodHandle mh = insertArguments(PASS_AND_SAVE, 1, box, prefix.size(), layouts);\n@@ -146,1 +151,1 @@\n-    static Object passAndSave(Object[] o, AtomicReference<Object[]> ref, int retArg) {\n+    static Object passAndSave(Object[] o, AtomicReference<Object[]> ref, int retArg, List<MemoryLayout> layouts) {\n@@ -148,2 +153,1 @@\n-            if (o[i] instanceof MemorySegment &&\n-                    !((MemorySegment) o[i]).session().equals(MemorySession.global())) {\n+            if (layouts.get(i) instanceof GroupLayout) {\n","filename":"test\/jdk\/java\/foreign\/TestUpcallBase.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                    MethodType.methodType(void.class, Object[].class, AtomicReference.class));\n+                    MethodType.methodType(void.class, Object[].class, AtomicReference.class, List.class));\n@@ -85,1 +85,1 @@\n-    static void passAndSave(Object[] o, AtomicReference<Object[]> ref) {\n+    static void passAndSave(Object[] o, AtomicReference<Object[]> ref, List<MemoryLayout> layouts) {\n@@ -87,2 +87,1 @@\n-            if (o[i] instanceof MemorySegment &&\n-                    !((MemorySegment)o[i]).session().equals(MemorySession.global())) {\n+            if (layouts.get(i) instanceof GroupLayout) {\n@@ -102,1 +101,1 @@\n-        MethodHandle target = MethodHandles.insertArguments(MH_passAndSave, 1, capturedArgs)\n+        MethodHandle target = MethodHandles.insertArguments(MH_passAndSave, 1, capturedArgs, upcallDescriptor.argumentLayouts())\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-        return linkInternal(symbol, fd);\n+        return MethodHandles.filterArguments(linkInternal(symbol, fd), fd.argumentLayouts().size() - 1, VALIST_TO_ADDRESS);\n@@ -160,2 +160,1 @@\n-                = MethodHandleProxies.asInterfaceInstance(BiFunction.class,\n-                MethodHandles.filterArguments(MH_sumInts, 1, VALIST_TO_ADDRESS));\n+                = MethodHandleProxies.asInterfaceInstance(BiFunction.class, MH_sumInts);\n@@ -189,2 +188,1 @@\n-                = MethodHandleProxies.asInterfaceInstance(BiFunction.class,\n-                MethodHandles.filterArguments(MH_sumDoubles, 1, VALIST_TO_ADDRESS));\n+                = MethodHandleProxies.asInterfaceInstance(BiFunction.class, MH_sumDoubles);\n@@ -220,2 +218,1 @@\n-        Function<VaList, Integer> getIntNative = MethodHandleProxies.asInterfaceInstance(Function.class,\n-                MethodHandles.filterArguments(MH_getInt, 0, VALIST_TO_ADDRESS));\n+        Function<VaList, Integer> getIntNative = MethodHandleProxies.asInterfaceInstance(Function.class, MH_getInt);\n@@ -263,2 +260,1 @@\n-                MethodHandleProxies.asInterfaceInstance(Function.class,\n-                        MethodHandles.filterArguments(MH_sumStruct, 0, VALIST_TO_ADDRESS));\n+                MethodHandleProxies.asInterfaceInstance(Function.class, MH_sumStruct);\n@@ -317,2 +313,1 @@\n-                MethodHandleProxies.asInterfaceInstance(Function.class,\n-                        MethodHandles.filterArguments(MH_sumBigStruct, 0, VALIST_TO_ADDRESS));\n+                MethodHandleProxies.asInterfaceInstance(Function.class, MH_sumBigStruct);\n@@ -371,2 +366,1 @@\n-                MethodHandleProxies.asInterfaceInstance(Function.class,\n-                        MethodHandles.filterArguments(MH_sumFloatStruct, 0, VALIST_TO_ADDRESS));\n+                MethodHandleProxies.asInterfaceInstance(Function.class, MH_sumFloatStruct);\n@@ -431,2 +425,1 @@\n-                MethodHandleProxies.asInterfaceInstance(Function.class,\n-                        MethodHandles.filterArguments(MH_sumHugeStruct, 0, VALIST_TO_ADDRESS));\n+                MethodHandleProxies.asInterfaceInstance(Function.class, MH_sumHugeStruct);\n@@ -498,1 +491,1 @@\n-                MH_sumStack.invokeExact(longSum, doubleSum, list.segment());\n+                MH_sumStack.invokeExact(longSum, doubleSum, list);\n@@ -571,2 +564,1 @@\n-                = MethodHandleProxies.asInterfaceInstance(BiFunction.class,\n-                MethodHandles.filterArguments(MH_sumInts, 1, VALIST_TO_ADDRESS));\n+                = MethodHandleProxies.asInterfaceInstance(BiFunction.class, MH_sumInts);\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"}]}