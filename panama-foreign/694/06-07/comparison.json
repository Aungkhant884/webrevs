{"files":[{"patch":"@@ -47,0 +47,1 @@\n+import java.lang.foreign.MemoryLayout;\n@@ -248,6 +249,2 @@\n-        return popType(expected, ASSERT_EQUALS);\n-    }\n-\n-    private Class<?> popType(Class<?> expected, BiPredicate<Class<?>, Class<?>> typePredicate) {\n-        Class<?> found;\n-        if (!typePredicate.test(expected, found = typeStack.pop())) {\n+        Class<?> found = typeStack.pop();\n+        if (!expected.equals(found)) {\n@@ -261,3 +258,0 @@\n-    private static final BiPredicate<Class<?>, Class<?>> ASSERT_EQUALS = Class::equals;\n-    private static final BiPredicate<Class<?>, Class<?>> ASSERT_ASSIGNABLE = Class::isAssignableFrom;\n-\n@@ -288,1 +282,1 @@\n-                if (shouldAcquire(callerMethodType.parameterType(i))) {\n+                if (shouldAcquire(i)) {\n@@ -446,3 +440,14 @@\n-    private static boolean shouldAcquire(Class<?> type) {\n-        \/\/ by this time, the only MemorySegment left are those for by-ref args\n-        return type == MemorySegment.class;\n+    private boolean shouldAcquire(int paramIndex) {\n+        if (!callingSequence.forDowncall() || \/\/ we only acquire in downcalls\n+                paramIndex == 0) { \/\/ the first parameter in a downcall is SegmentAllocator\n+            return false;\n+        }\n+\n+        \/\/ if call needs return buffer, the descriptor has an extra leading layout\n+        int offset = callingSequence.needsReturnBuffer() ? 0 : 1;\n+        MemoryLayout paramLayout =  callingSequence.functionDesc()\n+                                              .argumentLayouts()\n+                                              .get(paramIndex - offset);\n+\n+        \/\/ is this an address layout?\n+        return paramLayout instanceof ValueLayout.OfAddress;\n@@ -484,1 +489,1 @@\n-        if (shouldAcquire(highLevelType)) {\n+        if (shouldAcquire(paramIndex)) {\n@@ -679,1 +684,1 @@\n-        popType(MemorySegment.class, ASSERT_EQUALS);\n+        popType(MemorySegment.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"}]}