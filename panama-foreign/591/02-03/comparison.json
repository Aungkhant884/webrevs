{"files":[{"patch":"@@ -151,1 +151,1 @@\n-    segment = MemorySegment.allocateNative(8);\n+    segment = MemorySegment.allocateNative(8, scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n- * a resource scope that cannot be closed, either explicitly or implicitly. As a results, the global scope will never\n+ * a resource scope that cannot be closed, either explicitly or implicitly. As a result, the global scope will never\n@@ -204,1 +204,1 @@\n-     * Create a new confined scope.\n+     * Creates a new confined scope.\n@@ -212,1 +212,1 @@\n-     * Create a new confined scope, managed by the provided cleaner instance.\n+     * Creates a new confined scope, managed by the provided cleaner instance.\n@@ -222,1 +222,1 @@\n-     * Create a new shared scope.\n+     * Creates a new shared scope.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-     * @throws IllegalArgumentException if {@code blockSize <= 0}, if {@code arenaSize <= 0} or if {@code arenaSize < blockSize}.\n+     * @throws IllegalArgumentException if {@code arenaSize <= 0}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-         var cString = MemorySegment.allocateNative(5 + 1);\n+         var cString = MemorySegment.allocateNative(5 + 1, scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}