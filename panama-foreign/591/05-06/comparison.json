{"files":[{"patch":"@@ -73,1 +73,1 @@\n- * <h2>Global scope<\/h2>\n+ * <h2><a id = \"global-scope\">Global scope<\/a><\/h2>\n@@ -240,1 +240,1 @@\n-     * Returns a shared scope, managed by a private {@link Cleaner} instance. Equivalent to (but likely more efficient than)\n+     * Creates a new shared scope, managed by a private {@link Cleaner} instance. Equivalent to (but likely more efficient than)\n@@ -252,2 +252,2 @@\n-     * Returns a shared scope which is assumed to be always alive.\n-     * @return the global scope.\n+     * Returns the <a href=\"ResourceScope.html#global-scope\"><em>global scope<\/em><\/a>.\n+     * @return the <a href=\"ResourceScope.html#global-scope\"><em>global scope<\/em><\/a>.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -389,0 +389,4 @@\n+     * An allocator associated with a <em>shared<\/em> resource scope is thread-safe and allocation requests may be\n+     * performed concurrently; conversely, if the arena allocator is associated with a <em>confined<\/em> resource scope,\n+     * allocation requests can only occur from the thread owning the allocator's resource scope.\n+     * <p>\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,3 +132,3 @@\n-     * with the same scope as this variable argument list. Copying is useful to traverse the variable argument list elements,\n-     * starting from the current position, without affecting the state of the original variable argument list,\n-     * essentially allowing the elements to be traversed multiple times.\n+     * with the same scope as this variable argument list. using the segment provided allocator. Copying is useful to\n+     * traverse the variable argument list elements, starting from the current position, without affecting the state\n+     * of the original variable argument list, essentially allowing the elements to be traversed multiple times.\n@@ -191,2 +191,2 @@\n-     * @throws IllegalStateException if {@code scope} has been already closed, or if access occurs from a thread other\n-     * than the thread owning {@code scope}.\n+     * @throws IllegalStateException if the scope associated with {@code allocator} has been already closed,\n+     * or if access occurs from a thread other than the thread owning that scope.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/VaList.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}