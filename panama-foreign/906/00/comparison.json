{"files":[{"patch":"@@ -32,1 +32,1 @@\n-class SoftReferenceCache<K, V> {\n+final class SoftReferenceCache<K, V> {\n@@ -44,4 +44,1 @@\n-        public Node() {\n-        }\n-\n-        public V get(K key, Function<K, V> valueFactory) {\n+        V get(K key, Function<K, V> valueFactory) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SoftReferenceCache.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-    private static WindowsAArch64Linker instance;\n@@ -53,2 +52,2 @@\n-        if (instance == null) {\n-            instance = new WindowsAArch64Linker();\n+        class Holder {\n+            private static final WindowsAArch64Linker INSTANCE =  new WindowsAArch64Linker();\n@@ -56,1 +55,1 @@\n-        return instance;\n+        return Holder.INSTANCE;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/windows\/WindowsAArch64Linker.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -60,1 +60,4 @@\n-class FFIType {\n+final class FFIType {\n+\n+    private FFIType() {}\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FFIType.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,3 +55,3 @@\n-        switch (cls) {\n-            case StorageType.INTEGER: return INTEGER_REG_SIZE;\n-            case StorageType.FLOAT: return FLOAT_REG_SIZE;\n+        return switch (cls) {\n+            case StorageType.INTEGER -> INTEGER_REG_SIZE;\n+            case StorageType.FLOAT   -> FLOAT_REG_SIZE;\n@@ -59,3 +59,2 @@\n-        }\n-\n-        throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+            default -> throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+        };\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/PPC64Architecture.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -55,5 +55,3 @@\n-        switch (cls) {\n-            case StorageType.INTEGER:\n-                return INTEGER_REG_SIZE;\n-            case StorageType.FLOAT:\n-                return FLOAT_REG_SIZE;\n+        return switch (cls) {\n+            case StorageType.INTEGER -> INTEGER_REG_SIZE;\n+            case StorageType.FLOAT   -> FLOAT_REG_SIZE;\n@@ -61,3 +59,2 @@\n-        }\n-\n-        throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+            default -> throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+        };\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/s390\/S390Architecture.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-public sealed abstract class AbstractGroupLayout<L extends AbstractGroupLayout<L> & MemoryLayout>\n+abstract sealed class AbstractGroupLayout<L extends AbstractGroupLayout<L> & MemoryLayout>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    abstract sealed static class AbstractValueLayout<V extends AbstractValueLayout<V> & ValueLayout> extends AbstractLayout<V> {\n+    abstract static sealed class AbstractValueLayout<V extends AbstractValueLayout<V> & ValueLayout> extends AbstractLayout<V> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}