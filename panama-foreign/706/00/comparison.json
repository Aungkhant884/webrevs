{"files":[{"patch":"@@ -36,2 +36,2 @@\n-    private final long size;\n-    final long alignment;\n+    private final long bitSize;\n+    final long bitAlignment;\n@@ -40,1 +40,1 @@\n-    long cachedSize;\n+    long byteSize;\n@@ -42,3 +42,3 @@\n-    AbstractLayout(long size, long alignment, Optional<String> name) {\n-        this.size = size;\n-        this.alignment = alignment;\n+    AbstractLayout(long bitSize, long bitAlignment, Optional<String> name) {\n+        this.bitSize = bitSize;\n+        this.bitAlignment = bitAlignment;\n@@ -51,1 +51,1 @@\n-        return dup(alignment, Optional.of(name));\n+        return dup(bitAlignment, Optional.of(name));\n@@ -59,1 +59,1 @@\n-    abstract AbstractLayout dup(long alignment, Optional<String> name);\n+    abstract AbstractLayout dup(long bitAlignment, Optional<String> name);\n@@ -62,3 +62,3 @@\n-    public AbstractLayout withBitAlignment(long alignmentBits) {\n-        checkAlignment(alignmentBits);\n-        return dup(alignmentBits, name);\n+    public AbstractLayout withBitAlignment(long bitAlignment) {\n+        checkAlignment(bitAlignment);\n+        return dup(bitAlignment, name);\n@@ -86,1 +86,1 @@\n-        return alignment;\n+        return bitAlignment;\n@@ -92,2 +92,2 @@\n-        if (cachedSize == 0) {\n-            cachedSize = Utils.bitsToBytesOrThrow(bitSize(),\n+        if (byteSize == 0) {\n+            byteSize = Utils.bitsToBytesOrThrow(bitSize(),\n@@ -96,1 +96,1 @@\n-        return cachedSize;\n+        return byteSize;\n@@ -101,1 +101,1 @@\n-        return size;\n+        return bitSize;\n@@ -109,1 +109,1 @@\n-            s = alignment + \"%\" + s;\n+            s = bitAlignment + \"%\" + s;\n@@ -115,1 +115,1 @@\n-        return size == alignment;\n+        return bitSize == bitAlignment;\n@@ -131,1 +131,1 @@\n-        return Objects.hash(name, size, alignment);\n+        return Objects.hash(name, bitSize, bitAlignment);\n@@ -159,2 +159,2 @@\n-                size == otherLayout.size &&\n-                alignment == otherLayout.alignment;\n+                bitSize == otherLayout.bitSize &&\n+                bitAlignment == otherLayout.bitAlignment;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AbstractLayout.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -92,2 +92,2 @@\n-    GroupLayout(Kind kind, List<MemoryLayout> elements, long alignment, Optional<String> name) {\n-        super(kind.sizeof(elements), alignment, name);\n+    GroupLayout(Kind kind, List<MemoryLayout> elements, long bitAlignment, Optional<String> name) {\n+        super(kind.sizeof(elements), bitAlignment, name);\n@@ -160,2 +160,2 @@\n-    GroupLayout dup(long alignment, Optional<String> name) {\n-        return new GroupLayout(kind, elements, alignment, name);\n+    GroupLayout dup(long bitAlignment, Optional<String> name) {\n+        return new GroupLayout(kind, elements, bitAlignment, name);\n@@ -166,1 +166,1 @@\n-        return alignment == kind.alignof(elements);\n+        return bitAlignment == kind.alignof(elements);\n@@ -184,2 +184,2 @@\n-    public GroupLayout withBitAlignment(long alignmentBits) {\n-        return (GroupLayout)super.withBitAlignment(alignmentBits);\n+    public GroupLayout withBitAlignment(long bitAlignment) {\n+        return (GroupLayout)super.withBitAlignment(bitAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-    PaddingLayout(long size) {\n-        this(size, 1, Optional.empty());\n+    PaddingLayout(long bitSize) {\n+        this(bitSize, 1, Optional.empty());\n@@ -44,2 +44,2 @@\n-    PaddingLayout(long size, long alignment, Optional<String> name) {\n-        super(size, alignment, name);\n+    PaddingLayout(long bitSize, long bitAlignment, Optional<String> name) {\n+        super(bitSize, bitAlignment, name);\n@@ -73,2 +73,2 @@\n-    PaddingLayout dup(long alignment, Optional<String> name) {\n-        return new PaddingLayout(bitSize(), alignment, name);\n+    PaddingLayout dup(long bitAlignment, Optional<String> name) {\n+        return new PaddingLayout(bitSize(), bitAlignment, name);\n@@ -97,2 +97,2 @@\n-    public PaddingLayout withBitAlignment(long alignmentBits) {\n-        return (PaddingLayout)super.withBitAlignment(alignmentBits);\n+    public PaddingLayout withBitAlignment(long bitAlignment) {\n+        return (PaddingLayout)super.withBitAlignment(bitAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/PaddingLayout.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-    SequenceLayout(long elemCount, MemoryLayout elementLayout, long alignment, Optional<String> name) {\n-        super(Math.multiplyExact(elemCount, elementLayout.bitSize()), alignment, name);\n+    SequenceLayout(long elemCount, MemoryLayout elementLayout, long bitAlignment, Optional<String> name) {\n+        super(Math.multiplyExact(elemCount, elementLayout.bitSize()), bitAlignment, name);\n@@ -96,1 +96,1 @@\n-        return new SequenceLayout(elementCount, elementLayout, alignment, name());\n+        return new SequenceLayout(elementCount, elementLayout, bitAlignment, name());\n@@ -225,2 +225,2 @@\n-    SequenceLayout dup(long alignment, Optional<String> name) {\n-        return new SequenceLayout(elementCount(), elementLayout, alignment, name);\n+    SequenceLayout dup(long bitAlignment, Optional<String> name) {\n+        return new SequenceLayout(elementCount(), elementLayout, bitAlignment, name);\n@@ -231,1 +231,1 @@\n-        return alignment == elementLayout.bitAlignment();\n+        return bitAlignment == elementLayout.bitAlignment();\n@@ -249,2 +249,2 @@\n-    public SequenceLayout withBitAlignment(long alignmentBits) {\n-        return (SequenceLayout)super.withBitAlignment(alignmentBits);\n+    public SequenceLayout withBitAlignment(long bitAlignment) {\n+        return (SequenceLayout)super.withBitAlignment(bitAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-    ValueLayout(Class<?> carrier, ByteOrder order, long size) {\n-        this(carrier, order, size, size, Optional.empty());\n+    ValueLayout(Class<?> carrier, ByteOrder order, long bitSize) {\n+        this(carrier, order, bitSize, bitSize, Optional.empty());\n@@ -73,2 +73,2 @@\n-    ValueLayout(Class<?> carrier, ByteOrder order, long size, long alignment, Optional<String> name) {\n-        super(size, alignment, name);\n+    ValueLayout(Class<?> carrier, ByteOrder order, long bitSize, long bitAlignment, Optional<String> name) {\n+        super(bitSize, bitAlignment, name);\n@@ -77,1 +77,1 @@\n-        checkCarrierSize(carrier, size);\n+        checkCarrierSize(carrier, bitSize);\n@@ -95,1 +95,1 @@\n-        return new ValueLayout(carrier, Objects.requireNonNull(order), bitSize(), alignment, name());\n+        return new ValueLayout(carrier, Objects.requireNonNull(order), bitSize(), bitAlignment, name());\n@@ -214,2 +214,2 @@\n-    ValueLayout dup(long alignment, Optional<String> name) {\n-        return new ValueLayout(carrier, order, bitSize(), alignment, name());\n+    ValueLayout dup(long bitAlignment, Optional<String> name) {\n+        return new ValueLayout(carrier, order, bitSize(), bitAlignment, name());\n@@ -233,2 +233,2 @@\n-    public ValueLayout withBitAlignment(long alignmentBits) {\n-        return (ValueLayout)super.withBitAlignment(alignmentBits);\n+    public ValueLayout withBitAlignment(long bitAlignment) {\n+        return (ValueLayout)super.withBitAlignment(bitAlignment);\n@@ -287,2 +287,2 @@\n-        OfBoolean(ByteOrder order, long alignment, Optional<String> name) {\n-            super(boolean.class, order, 8, alignment, name);\n+        OfBoolean(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(boolean.class, order, 8, bitAlignment, name);\n@@ -292,2 +292,2 @@\n-        OfBoolean dup(long alignment, Optional<String> name) {\n-            return new OfBoolean(order(), alignment, name);\n+        OfBoolean dup(long bitAlignment, Optional<String> name) {\n+            return new OfBoolean(order(), bitAlignment, name);\n@@ -302,2 +302,2 @@\n-        public OfBoolean withBitAlignment(long alignmentBits) {\n-            return (OfBoolean)super.withBitAlignment(alignmentBits);\n+        public OfBoolean withBitAlignment(long bitAlignment) {\n+            return (OfBoolean)super.withBitAlignment(bitAlignment);\n@@ -309,1 +309,1 @@\n-            return new OfBoolean(order, alignment, name());\n+            return new OfBoolean(order, bitAlignment, name());\n@@ -324,2 +324,2 @@\n-        OfByte(ByteOrder order, long alignment, Optional<String> name) {\n-            super(byte.class, order, 8, alignment, name);\n+        OfByte(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(byte.class, order, 8, bitAlignment, name);\n@@ -329,2 +329,2 @@\n-        OfByte dup(long alignment, Optional<String> name) {\n-            return new OfByte(order(), alignment, name);\n+        OfByte dup(long bitAlignment, Optional<String> name) {\n+            return new OfByte(order(), bitAlignment, name);\n@@ -339,2 +339,2 @@\n-        public OfByte withBitAlignment(long alignmentBits) {\n-            return (OfByte)super.withBitAlignment(alignmentBits);\n+        public OfByte withBitAlignment(long bitAlignment) {\n+            return (OfByte)super.withBitAlignment(bitAlignment);\n@@ -346,1 +346,1 @@\n-            return new OfByte(order, alignment, name());\n+            return new OfByte(order, bitAlignment, name());\n@@ -361,2 +361,2 @@\n-        OfChar(ByteOrder order, long alignment, Optional<String> name) {\n-            super(char.class, order, 16, alignment, name);\n+        OfChar(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(char.class, order, 16, bitAlignment, name);\n@@ -366,2 +366,2 @@\n-        OfChar dup(long alignment, Optional<String> name) {\n-            return new OfChar(order(), alignment, name);\n+        OfChar dup(long bitAlignment, Optional<String> name) {\n+            return new OfChar(order(), bitAlignment, name);\n@@ -376,2 +376,2 @@\n-        public OfChar withBitAlignment(long alignmentBits) {\n-            return (OfChar)super.withBitAlignment(alignmentBits);\n+        public OfChar withBitAlignment(long bitAlignment) {\n+            return (OfChar)super.withBitAlignment(bitAlignment);\n@@ -383,1 +383,1 @@\n-            return new OfChar(order, alignment, name());\n+            return new OfChar(order, bitAlignment, name());\n@@ -398,2 +398,2 @@\n-        OfShort(ByteOrder order, long alignment, Optional<String> name) {\n-            super(short.class, order, 16, alignment, name);\n+        OfShort(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(short.class, order, 16, bitAlignment, name);\n@@ -403,2 +403,2 @@\n-        OfShort dup(long alignment, Optional<String> name) {\n-            return new OfShort(order(), alignment, name);\n+        OfShort dup(long bitAlignment, Optional<String> name) {\n+            return new OfShort(order(), bitAlignment, name);\n@@ -413,2 +413,2 @@\n-        public OfShort withBitAlignment(long alignmentBits) {\n-            return (OfShort)super.withBitAlignment(alignmentBits);\n+        public OfShort withBitAlignment(long bitAlignment) {\n+            return (OfShort)super.withBitAlignment(bitAlignment);\n@@ -420,1 +420,1 @@\n-            return new OfShort(order, alignment, name());\n+            return new OfShort(order, bitAlignment, name());\n@@ -435,2 +435,2 @@\n-        OfInt(ByteOrder order, long alignment, Optional<String> name) {\n-            super(int.class, order, 32, alignment, name);\n+        OfInt(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(int.class, order, 32, bitAlignment, name);\n@@ -440,2 +440,2 @@\n-        OfInt dup(long alignment, Optional<String> name) {\n-            return new OfInt(order(), alignment, name);\n+        OfInt dup(long bitAlignment, Optional<String> name) {\n+            return new OfInt(order(), bitAlignment, name);\n@@ -450,2 +450,2 @@\n-        public OfInt withBitAlignment(long alignmentBits) {\n-            return (OfInt)super.withBitAlignment(alignmentBits);\n+        public OfInt withBitAlignment(long bitAlignment) {\n+            return (OfInt)super.withBitAlignment(bitAlignment);\n@@ -457,1 +457,1 @@\n-            return new OfInt(order, alignment, name());\n+            return new OfInt(order, bitAlignment, name());\n@@ -472,2 +472,2 @@\n-        OfFloat(ByteOrder order, long alignment, Optional<String> name) {\n-            super(float.class, order, 32, alignment, name);\n+        OfFloat(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(float.class, order, 32, bitAlignment, name);\n@@ -477,2 +477,2 @@\n-        OfFloat dup(long alignment, Optional<String> name) {\n-            return new OfFloat(order(), alignment, name);\n+        OfFloat dup(long bitAlignment, Optional<String> name) {\n+            return new OfFloat(order(), bitAlignment, name);\n@@ -487,2 +487,2 @@\n-        public OfFloat withBitAlignment(long alignmentBits) {\n-            return (OfFloat)super.withBitAlignment(alignmentBits);\n+        public OfFloat withBitAlignment(long bitAlignment) {\n+            return (OfFloat)super.withBitAlignment(bitAlignment);\n@@ -494,1 +494,1 @@\n-            return new OfFloat(order, alignment, name());\n+            return new OfFloat(order, bitAlignment, name());\n@@ -509,2 +509,2 @@\n-        OfLong(ByteOrder order, long alignment, Optional<String> name) {\n-            super(long.class, order, 64, alignment, name);\n+        OfLong(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(long.class, order, 64, bitAlignment, name);\n@@ -514,2 +514,2 @@\n-        OfLong dup(long alignment, Optional<String> name) {\n-            return new OfLong(order(), alignment, name);\n+        OfLong dup(long bitAlignment, Optional<String> name) {\n+            return new OfLong(order(), bitAlignment, name);\n@@ -524,2 +524,2 @@\n-        public OfLong withBitAlignment(long alignmentBits) {\n-            return (OfLong)super.withBitAlignment(alignmentBits);\n+        public OfLong withBitAlignment(long bitAlignment) {\n+            return (OfLong)super.withBitAlignment(bitAlignment);\n@@ -531,1 +531,1 @@\n-            return new OfLong(order, alignment, name());\n+            return new OfLong(order, bitAlignment, name());\n@@ -546,2 +546,2 @@\n-        OfDouble(ByteOrder order, long alignment, Optional<String> name) {\n-            super(double.class, order, 64, alignment, name);\n+        OfDouble(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            super(double.class, order, 64, bitAlignment, name);\n@@ -551,2 +551,2 @@\n-        OfDouble dup(long alignment, Optional<String> name) {\n-            return new OfDouble(order(), alignment, name);\n+        OfDouble dup(long bitAlignment, Optional<String> name) {\n+            return new OfDouble(order(), bitAlignment, name);\n@@ -561,2 +561,2 @@\n-        public OfDouble withBitAlignment(long alignmentBits) {\n-            return (OfDouble)super.withBitAlignment(alignmentBits);\n+        public OfDouble withBitAlignment(long bitAlignment) {\n+            return (OfDouble)super.withBitAlignment(bitAlignment);\n@@ -568,1 +568,1 @@\n-            return new OfDouble(order, alignment, name());\n+            return new OfDouble(order, bitAlignment, name());\n@@ -587,2 +587,2 @@\n-        OfAddress(ByteOrder order, long size, long alignment, boolean isUnbounded, Optional<String> name) {\n-            super(MemorySegment.class, order, size, alignment, name);\n+        OfAddress(ByteOrder order, long bitSize, long bitAlignment, boolean isUnbounded, Optional<String> name) {\n+            super(MemorySegment.class, order, bitSize, bitAlignment, name);\n@@ -593,2 +593,2 @@\n-        OfAddress dup(long alignment, Optional<String> name) {\n-            return new OfAddress(order(), bitSize(), alignment, isUnbounded, name);\n+        OfAddress dup(long bitAlignment, Optional<String> name) {\n+            return new OfAddress(order(), bitSize(), bitAlignment, isUnbounded, name);\n@@ -603,2 +603,2 @@\n-        public OfAddress withBitAlignment(long alignmentBits) {\n-            return (OfAddress)super.withBitAlignment(alignmentBits);\n+        public OfAddress withBitAlignment(long bitAlignment) {\n+            return (OfAddress)super.withBitAlignment(bitAlignment);\n@@ -610,1 +610,1 @@\n-            return new OfAddress(order, bitSize(), alignment, isUnbounded, name());\n+            return new OfAddress(order, bitSize(), bitAlignment, isUnbounded, name());\n@@ -641,1 +641,1 @@\n-            return new OfAddress(order(), bitSize(), alignment, true, name());\n+            return new OfAddress(order(), bitSize(), bitAlignment, true, name());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":74,"deletions":74,"binary":false,"changes":148,"status":"modified"}]}