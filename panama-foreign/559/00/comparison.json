{"files":[{"patch":"@@ -377,1 +377,2 @@\n-     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n+     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform,\n+     * or if {@code addr == MemoryAddress.NULL}.\n@@ -385,1 +386,1 @@\n-        Objects.requireNonNull(addr);\n+        SharedUtils.checkAddress(addr);\n@@ -405,1 +406,2 @@\n-     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n+     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform,\n+     * or if {@code addr == MemoryAddress.NULL}.\n@@ -413,1 +415,1 @@\n-        Objects.requireNonNull(addr);\n+        SharedUtils.checkAddress(addr);\n@@ -504,0 +506,1 @@\n+     * @throws IllegalArgumentException if {@code addr == MemoryAddress.NULL}.\n@@ -510,1 +513,1 @@\n-        Objects.requireNonNull(addr);\n+        SharedUtils.checkAddress(addr);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -458,0 +458,8 @@\n+        return checkAddressable(symbol, \"Symbol is NULL\");\n+    }\n+\n+    public static MemoryAddress checkAddress(MemoryAddress address) {\n+        return checkAddressable(address, \"Address is NULL\");\n+    }\n+\n+    private static MemoryAddress checkAddressable(Addressable symbol, String msg) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @modules jdk.incubator.foreign\n+ * @run testng\/othervm\n+ *     --enable-native-access=ALL-UNNAMED\n+ *     TestNULLAddress\n+ *\/\n+\n+import jdk.incubator.foreign.Addressable;\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.FunctionDescriptor;\n+import jdk.incubator.foreign.MemoryAddress;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+import java.nio.charset.Charset;\n+\n+public class TestNULLAddress {\n+\n+    static final CLinker LINKER = CLinker.getInstance();\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNULLLinking() {\n+        LINKER.downcallHandle(\n+                MemoryAddress.NULL,\n+                MethodType.methodType(void.class),\n+                FunctionDescriptor.ofVoid());\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNULLVirtual() throws Throwable {\n+        MethodHandle mh = LINKER.downcallHandle(\n+                MethodType.methodType(void.class),\n+                FunctionDescriptor.ofVoid());\n+        mh.invokeExact((Addressable) MemoryAddress.NULL);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNULLtoJavaString() {\n+        CLinker.toJavaString(MemoryAddress.NULL);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNULLtoJavaStringCharset() {\n+        CLinker.toJavaString(MemoryAddress.NULL, Charset.defaultCharset());\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNULLfreeMemory() {\n+        CLinker.freeMemory(MemoryAddress.NULL);\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestNULLAddress.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\/\n-\n-\/*\n- * @test\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\n- * @run testng\/othervm\n- *     --enable-native-access=ALL-UNNAMED\n- *     TestNULLTarget\n- *\/\n-\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.MemoryAddress;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodType;\n-\n-public class TestNULLTarget {\n-\n-    static final CLinker LINKER = CLinker.getInstance();\n-\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testNULLLinking() {\n-        LINKER.downcallHandle(\n-                MemoryAddress.NULL,\n-                MethodType.methodType(void.class),\n-                FunctionDescriptor.ofVoid());\n-    }\n-\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testNULLVirtual() throws Throwable {\n-        MethodHandle mh = LINKER.downcallHandle(\n-                MethodType.methodType(void.class),\n-                FunctionDescriptor.ofVoid());\n-        mh.invokeExact((Addressable) MemoryAddress.NULL);\n-    }\n-}\n","filename":"test\/jdk\/java\/foreign\/TestNULLTarget.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"}]}