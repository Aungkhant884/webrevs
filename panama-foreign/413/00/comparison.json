{"files":[{"patch":"@@ -356,0 +356,1 @@\n+  template(jdk_incubator_foreign_MemoryAccess,       \"jdk\/incubator\/foreign\/MemoryAccess\")        \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1602,0 +1602,12 @@\n+bool MethodData::profile_memory_access(const methodHandle& m, int bci) {\n+  Bytecode_invoke inv(m , bci);\n+  if (inv.is_invokestatic()) {\n+    if (inv.klass() == vmSymbols::jdk_incubator_foreign_MemoryAccess()) {\n+      if (inv.name()->starts_with(\"get\") || inv.name()->starts_with(\"set\")) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -1631,0 +1643,4 @@\n+  if (profile_memory_access(m, bci)) {\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2154,0 +2154,1 @@\n+  static bool profile_memory_access(const methodHandle& m, int bci);\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-public interface MemorySegmentProxy {\n+public abstract class MemorySegmentProxy {\n@@ -42,5 +42,5 @@\n-    void checkAccess(long offset, long length, boolean readOnly);\n-    long unsafeGetOffset();\n-    Object unsafeGetBase();\n-    boolean isSmall();\n-    ScopedMemoryAccess.Scope scope();\n+    public abstract void checkAccess(long offset, long length, boolean readOnly);\n+    public abstract long unsafeGetOffset();\n+    public abstract Object unsafeGetBase();\n+    public abstract boolean isSmall();\n+    public abstract ScopedMemoryAccess.Scope scope();\n@@ -54,1 +54,1 @@\n-    static long addOffsets(long op1, long op2, MemorySegmentProxy segmentProxy) {\n+    public static long addOffsets(long op1, long op2, MemorySegmentProxy segmentProxy) {\n@@ -77,1 +77,1 @@\n-    static long multiplyOffsets(long op1, long op2, MemorySegmentProxy segmentProxy) {\n+    public static long multiplyOffsets(long op1, long op2, MemorySegmentProxy segmentProxy) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MemorySegmentProxy.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-public abstract class AbstractMemorySegmentImpl implements MemorySegment, MemorySegmentProxy {\n+public abstract class AbstractMemorySegmentImpl extends MemorySegmentProxy implements MemorySegment {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private static final MethodHandle SEGMENT_FILTER;\n+    public static final MethodHandle SEGMENT_FILTER;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import sun.misc.Unsafe;\n+\n+import java.lang.invoke.VarHandle;\n+import java.util.concurrent.TimeUnit;\n+\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.sequenceElement;\n+import static jdk.incubator.foreign.MemoryLayouts.JAVA_INT;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\" })\n+public class LoopOverPollutedSegments {\n+\n+    static final int ELEM_SIZE = 1_000_000;\n+    static final int CARRIER_SIZE = (int) JAVA_INT.byteSize();\n+    static final int ALLOC_SIZE = ELEM_SIZE * CARRIER_SIZE;\n+\n+    static final Unsafe unsafe = Utils.unsafe;\n+\n+    MemorySegment nativeSegment, heapSegmentBytes, heapSegmentFloats;\n+    byte[] arr;\n+    long addr;\n+\n+    static final VarHandle intHandle = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, MemoryLayout.PathElement.sequenceElement());\n+\n+\n+    @Setup\n+    public void setup() {\n+        addr = unsafe.allocateMemory(ALLOC_SIZE);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            unsafe.putInt(addr + (i * 4), i);\n+        }\n+        arr = new byte[ALLOC_SIZE];\n+        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, 4);\n+        heapSegmentBytes = MemorySegment.ofArray(new byte[ALLOC_SIZE]);\n+        heapSegmentFloats = MemorySegment.ofArray(new float[ELEM_SIZE]);\n+\n+        for (int rep = 0 ; rep < 5 ; rep++) {\n+            for (int i = 0; i < ELEM_SIZE; i++) {\n+                unsafe.putInt(arr, Unsafe.ARRAY_BYTE_BASE_OFFSET + (i * 4), i);\n+                MemoryAccess.setIntAtIndex(nativeSegment, i, i);\n+                MemoryAccess.setFloatAtIndex(nativeSegment, i, i);\n+                intHandle.set(nativeSegment, (long)i, i);\n+                MemoryAccess.setIntAtIndex(heapSegmentBytes, i, i);\n+                MemoryAccess.setFloatAtIndex(heapSegmentBytes, i, i);\n+                intHandle.set(heapSegmentBytes, (long)i, i);\n+                MemoryAccess.setIntAtIndex(heapSegmentFloats, i, i);\n+                MemoryAccess.setFloatAtIndex(heapSegmentFloats, i, i);\n+                intHandle.set(heapSegmentFloats, (long)i, i);\n+            }\n+        }\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        nativeSegment.close();\n+        heapSegmentBytes = null;\n+        heapSegmentFloats = null;\n+        arr = null;\n+        unsafe.freeMemory(addr);\n+    }\n+\n+    @Benchmark\n+    public int native_segment_VH() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            intHandle.set(nativeSegment, (long)k, k + 1);\n+            int v = (int) intHandle.get(nativeSegment, (long)k);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int native_segment_static() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            MemoryAccess.setIntAtOffset(nativeSegment, k, k + 1);\n+            int v = MemoryAccess.getIntAtOffset(nativeSegment, k);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int heap_segment_ints_VH() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            intHandle.set(heapSegmentBytes, (long)k, k + 1);\n+            int v = (int) intHandle.get(heapSegmentBytes, (long)k);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int heap_segment_ints_static() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            MemoryAccess.setIntAtOffset(heapSegmentBytes, k, k + 1);\n+            int v = MemoryAccess.getIntAtOffset(heapSegmentBytes, k);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int heap_segment_floats_VH() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            intHandle.set(heapSegmentFloats, (long)k, k + 1);\n+            int v = (int)intHandle.get(heapSegmentFloats, (long)k);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int heap_segment_floats_static() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            MemoryAccess.setIntAtOffset(heapSegmentFloats, k, k + 1);\n+            int v = MemoryAccess.getIntAtOffset(heapSegmentFloats, k);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int heap_unsafe() {\n+        int sum = 0;\n+        for (int k = 0; k < ALLOC_SIZE; k += 4) {\n+            unsafe.putInt(arr, k + Unsafe.ARRAY_BYTE_BASE_OFFSET, k + 1);\n+            int v = unsafe.getInt(arr, k + Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int native_unsafe() {\n+        int sum = 0;\n+        for (int k = 0; k < ALLOC_SIZE; k += 4) {\n+            unsafe.putInt(addr + k, k + 1);\n+            int v = unsafe.getInt(addr + k);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverPollutedSegments.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"}]}