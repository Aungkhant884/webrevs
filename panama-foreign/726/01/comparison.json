{"files":[{"patch":"@@ -626,2 +626,1 @@\n-     * @param elementLayout the source element layout. If the byte order associated with the layout is\n-     * different from the {@linkplain ByteOrder#nativeOrder native order}, a byte swap operation will be performed on each array element.\n+     * @param elementLayout the source element elementLayout.\n@@ -640,1 +639,1 @@\n-     * @param elementLayout the source element layout. If the byte order associated with the layout is\n+     * @param elementLayout the source element elementLayout. If the byte order associated with the elementLayout is\n@@ -654,1 +653,1 @@\n-     * @param elementLayout the source element layout. If the byte order associated with the layout is\n+     * @param elementLayout the source element elementLayout. If the byte order associated with the elementLayout is\n@@ -668,1 +667,1 @@\n-     * @param elementLayout the source element layout. If the byte order associated with the layout is\n+     * @param elementLayout the source element elementLayout. If the byte order associated with the elementLayout is\n@@ -682,1 +681,1 @@\n-     * @param elementLayout the source element layout. If the byte order associated with the layout is\n+     * @param elementLayout the source element elementLayout. If the byte order associated with the elementLayout is\n@@ -696,1 +695,1 @@\n-     * @param elementLayout the source element layout. If the byte order associated with the layout is\n+     * @param elementLayout the source element elementLayout. If the byte order associated with the elementLayout is\n@@ -710,1 +709,1 @@\n-     * @param elementLayout the source element layout. If the byte order associated with the layout is\n+     * @param elementLayout the source element elementLayout. If the byte order associated with the elementLayout is\n@@ -794,1 +793,1 @@\n-     * @param arr the primitive array backing the array memory segment.\n+     * @param byteArray the primitive array backing the array memory segment.\n@@ -797,2 +796,2 @@\n-    static MemorySegment ofArray(byte[] arr) {\n-        return HeapMemorySegmentImpl.OfByte.fromArray(arr);\n+    static MemorySegment ofArray(byte[] byteArray) {\n+        return HeapMemorySegmentImpl.OfByte.fromArray(byteArray);\n@@ -805,1 +804,1 @@\n-     * @param arr the primitive array backing the array memory segment.\n+     * @param charArray the primitive array backing the array memory segment.\n@@ -808,2 +807,2 @@\n-    static MemorySegment ofArray(char[] arr) {\n-        return HeapMemorySegmentImpl.OfChar.fromArray(arr);\n+    static MemorySegment ofArray(char[] charArray) {\n+        return HeapMemorySegmentImpl.OfChar.fromArray(charArray);\n@@ -816,1 +815,1 @@\n-     * @param arr the primitive array backing the array memory segment.\n+     * @param shortArray the primitive array backing the array memory segment.\n@@ -819,2 +818,2 @@\n-    static MemorySegment ofArray(short[] arr) {\n-        return HeapMemorySegmentImpl.OfShort.fromArray(arr);\n+    static MemorySegment ofArray(short[] shortArray) {\n+        return HeapMemorySegmentImpl.OfShort.fromArray(shortArray);\n@@ -827,1 +826,1 @@\n-     * @param arr the primitive array backing the array memory segment.\n+     * @param intArray the primitive array backing the array memory segment.\n@@ -830,2 +829,2 @@\n-    static MemorySegment ofArray(int[] arr) {\n-        return HeapMemorySegmentImpl.OfInt.fromArray(arr);\n+    static MemorySegment ofArray(int[] intArray) {\n+        return HeapMemorySegmentImpl.OfInt.fromArray(intArray);\n@@ -838,1 +837,1 @@\n-     * @param arr the primitive array backing the array memory segment.\n+     * @param floatArray the primitive array backing the array memory segment.\n@@ -841,2 +840,2 @@\n-    static MemorySegment ofArray(float[] arr) {\n-        return HeapMemorySegmentImpl.OfFloat.fromArray(arr);\n+    static MemorySegment ofArray(float[] floatArray) {\n+        return HeapMemorySegmentImpl.OfFloat.fromArray(floatArray);\n@@ -849,1 +848,1 @@\n-     * @param arr the primitive array backing the array memory segment.\n+     * @param longArray the primitive array backing the array memory segment.\n@@ -852,2 +851,2 @@\n-    static MemorySegment ofArray(long[] arr) {\n-        return HeapMemorySegmentImpl.OfLong.fromArray(arr);\n+    static MemorySegment ofArray(long[] longArray) {\n+        return HeapMemorySegmentImpl.OfLong.fromArray(longArray);\n@@ -860,1 +859,1 @@\n-     * @param arr the primitive array backing the array memory segment.\n+     * @param doubleArray the primitive array backing the array memory segment.\n@@ -863,2 +862,2 @@\n-    static MemorySegment ofArray(double[] arr) {\n-        return HeapMemorySegmentImpl.OfDouble.fromArray(arr);\n+    static MemorySegment ofArray(double[] doubleArray) {\n+        return HeapMemorySegmentImpl.OfDouble.fromArray(doubleArray);\n@@ -893,1 +892,1 @@\n-     * ofAddress(address, bytesSize, MemorySession.global());\n+     * ofAddress(address, byteSize, MemorySession.global());\n@@ -900,1 +899,1 @@\n-     * @param bytesSize the size (in bytes) of the returned native segment.\n+     * @param byteSize the size (in bytes) of the returned native segment.\n@@ -902,1 +901,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n+     * @throws IllegalArgumentException if {@code byteSize < 0}.\n@@ -908,1 +907,1 @@\n-    static MemorySegment ofAddress(long address, long bytesSize) {\n+    static MemorySegment ofAddress(long address, long byteSize) {\n@@ -910,1 +909,1 @@\n-        return MemorySegment.ofAddress(address, bytesSize, MemorySession.global());\n+        return MemorySegment.ofAddress(address, byteSize, MemorySession.global());\n@@ -932,1 +931,1 @@\n-     * @param bytesSize the desired size.\n+     * @param byteSize the desired size.\n@@ -935,1 +934,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n+     * @throws IllegalArgumentException if {@code byteSize < 0}.\n@@ -944,1 +943,1 @@\n-    static MemorySegment ofAddress(long address, long bytesSize, MemorySession session) {\n+    static MemorySegment ofAddress(long address, long byteSize, MemorySession session) {\n@@ -947,2 +946,2 @@\n-        Utils.checkAllocationSizeAndAlign(bytesSize, 1);\n-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize, session);\n+        Utils.checkAllocationSizeAndAlign(byteSize, 1);\n+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, byteSize, session);\n@@ -991,1 +990,1 @@\n-     *     .allocate(bytesSize, 1)\n+     *     .allocate(byteSize, 1)\n@@ -998,1 +997,1 @@\n-     * @param bytesSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n+     * @param byteSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n@@ -1000,1 +999,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n+     * @throws IllegalArgumentException if {@code byteSize < 0}.\n@@ -1004,2 +1003,2 @@\n-    static MemorySegment allocateNative(long bytesSize) {\n-        return allocateNative(bytesSize, 1L);\n+    static MemorySegment allocateNative(long byteSize) {\n+        return allocateNative(byteSize, 1L);\n@@ -1021,1 +1020,1 @@\n-     *     .allocate(bytesSize, byteAlignment)\n+     *     .allocate(byteSize, byteAlignment)\n@@ -1026,1 +1025,1 @@\n-     * @param bytesSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n+     * @param byteSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n@@ -1029,1 +1028,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes <= 0}, or if {@code alignmentBytes}\n+     * @throws IllegalArgumentException if {@code byteSize < 0}, {@code byteAlignment <= 0}, or if {@code byteAlignment}\n@@ -1033,2 +1032,2 @@\n-    static MemorySegment allocateNative(long bytesSize, long byteAlignment) {\n-        Utils.checkAllocationSizeAndAlign(bytesSize, byteAlignment);\n+    static MemorySegment allocateNative(long byteSize, long byteAlignment) {\n+        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n@@ -1036,1 +1035,1 @@\n-                .allocate(bytesSize, byteAlignment);\n+                .allocate(byteSize, byteAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":49,"deletions":50,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -224,2 +224,2 @@\n-     * @param bytesSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n-     * @param bytesAlignment the alignment constraint (in bytes) of the off-heap memory block backing the native memory segment.\n+     * @param byteSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n+     * @param byteAlignment the alignment constraint (in bytes) of the off-heap memory block backing the native memory segment.\n@@ -235,3 +235,3 @@\n-    default MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n-        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, bytesAlignment, this);\n+    default MemorySegment allocate(long byteSize, long byteAlignment) {\n+        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n+        return NativeMemorySegmentImpl.makeNativeSegment(byteSize, byteAlignment, this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -328,2 +328,2 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(bytesSize, 1)}.\n-     * @param bytesSize the size (in bytes) of the block of memory to be allocated.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(byteSize, 1)}.\n+     * @param byteSize the size (in bytes) of the block of memory to be allocated.\n@@ -331,1 +331,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}\n+     * @throws IllegalArgumentException if {@code byteSize < 0}\n@@ -333,2 +333,2 @@\n-    default MemorySegment allocate(long bytesSize) {\n-        return allocate(bytesSize, 1);\n+    default MemorySegment allocate(long byteSize) {\n+        return allocate(byteSize, 1);\n@@ -339,2 +339,2 @@\n-     * @param bytesSize the size (in bytes) of the block of memory to be allocated.\n-     * @param bytesAlignment the alignment (in bytes) of the block of memory to be allocated.\n+     * @param byteSize the size (in bytes) of the block of memory to be allocated.\n+     * @param byteAlignment the alignment (in bytes) of the block of memory to be allocated.\n@@ -342,1 +342,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes <= 0},\n+     * @throws IllegalArgumentException if {@code byteSize < 0}, {@code byteAlignment <= 0},\n@@ -345,1 +345,1 @@\n-    MemorySegment allocate(long bytesSize, long bytesAlignment);\n+    MemorySegment allocate(long byteSize, long byteAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    StructLayout withBitAlignment(long alignmentBits);\n+    StructLayout withBitAlignment(long bitAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/StructLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    UnionLayout withBitAlignment(long alignmentBits);\n+    UnionLayout withBitAlignment(long bitAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/UnionLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-        OfBoolean withBitAlignment(long alignmentBits);\n+        OfBoolean withBitAlignment(long bitAlignment);\n@@ -175,1 +175,1 @@\n-        OfByte withBitAlignment(long alignmentBits);\n+        OfByte withBitAlignment(long bitAlignment);\n@@ -196,1 +196,1 @@\n-        OfChar withBitAlignment(long alignmentBits);\n+        OfChar withBitAlignment(long bitAlignment);\n@@ -217,1 +217,1 @@\n-        OfShort withBitAlignment(long alignmentBits);\n+        OfShort withBitAlignment(long bitAlignment);\n@@ -238,1 +238,1 @@\n-        OfInt withBitAlignment(long alignmentBits);\n+        OfInt withBitAlignment(long bitAlignment);\n@@ -259,1 +259,1 @@\n-        OfFloat withBitAlignment(long alignmentBits);\n+        OfFloat withBitAlignment(long bitAlignment);\n@@ -280,1 +280,1 @@\n-        OfLong withBitAlignment(long alignmentBits);\n+        OfLong withBitAlignment(long bitAlignment);\n@@ -301,1 +301,1 @@\n-        OfDouble withBitAlignment(long alignmentBits);\n+        OfDouble withBitAlignment(long bitAlignment);\n@@ -322,1 +322,1 @@\n-        OfAddress withBitAlignment(long alignmentBits);\n+        OfAddress withBitAlignment(long bitAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -145,3 +145,3 @@\n-    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n-        return asSlice(0, bytesSize);\n+    public MemorySegment allocate(long byteSize, long byteAlignment) {\n+        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n+        return asSlice(0, byteSize);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    MemorySegment trySlice(long bytesSize, long bytesAlignment) {\n+    MemorySegment trySlice(long byteSize, long byteAlignment) {\n@@ -53,2 +53,2 @@\n-        long start = Utils.alignUp(min + sp, bytesAlignment) - min;\n-        if (segment.byteSize() - start < bytesSize) {\n+        long start = Utils.alignUp(min + sp, byteAlignment) - min;\n+        if (segment.byteSize() - start < byteSize) {\n@@ -57,2 +57,2 @@\n-            MemorySegment slice = segment.asSlice(start, bytesSize);\n-            sp = start + bytesSize;\n+            MemorySegment slice = segment.asSlice(start, byteSize);\n+            sp = start + byteSize;\n@@ -63,2 +63,2 @@\n-    private MemorySegment newSegment(long bytesSize, long bytesAlignment) {\n-        long allocatedSize = Utils.alignUp(bytesSize, bytesAlignment);\n+    private MemorySegment newSegment(long byteSize, long byteAlignment) {\n+        long allocatedSize = Utils.alignUp(byteSize, byteAlignment);\n@@ -69,1 +69,1 @@\n-        return session.allocate(bytesSize, bytesAlignment);\n+        return session.allocate(byteSize, byteAlignment);\n@@ -73,2 +73,2 @@\n-    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n+    public MemorySegment allocate(long byteSize, long byteAlignment) {\n+        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n@@ -77,1 +77,1 @@\n-        MemorySegment slice = trySlice(bytesSize, bytesAlignment);\n+        MemorySegment slice = trySlice(byteSize, byteAlignment);\n@@ -81,1 +81,1 @@\n-            long maxPossibleAllocationSize = bytesSize + bytesAlignment - 1;\n+            long maxPossibleAllocationSize = byteSize + byteAlignment - 1;\n@@ -86,1 +86,1 @@\n-                return newSegment(bytesSize, bytesAlignment);\n+                return newSegment(byteSize, byteAlignment);\n@@ -91,1 +91,1 @@\n-                slice = trySlice(bytesSize, bytesAlignment);\n+                slice = trySlice(byteSize, byteAlignment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -136,3 +136,3 @@\n-    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n-        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, bytesAlignment, this);\n+    public MemorySegment allocate(long byteSize, long byteAlignment) {\n+        Utils.checkAllocationSizeAndAlign(byteSize, byteAlignment);\n+        return NativeMemorySegmentImpl.makeNativeSegment(byteSize, byteAlignment, this);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-    public static MemorySegment makeNativeSegment(long bytesSize, long alignmentBytes, MemorySession session) {\n+    public static MemorySegment makeNativeSegment(long byteSize, long byteAlignment, MemorySession session) {\n@@ -109,1 +109,1 @@\n-            alignmentBytes = Math.max(alignmentBytes, nioAccess.pageSize());\n+            byteAlignment = Math.max(byteAlignment, nioAccess.pageSize());\n@@ -111,5 +111,3 @@\n-        long alignedSize = Math.max(1L, alignmentBytes > MAX_MALLOC_ALIGN ?\n-                bytesSize + (alignmentBytes - 1) :\n-                bytesSize);\n-\n-        nioAccess.reserveMemory(alignedSize, bytesSize);\n+        long alignedSize = Math.max(1L, byteAlignment > MAX_MALLOC_ALIGN ?\n+                byteSize + (byteAlignment - 1) :\n+                byteSize);\n@@ -117,0 +115,1 @@\n+        nioAccess.reserveMemory(alignedSize, byteSize);\n@@ -121,1 +120,1 @@\n-        long alignedBuf = Utils.alignUp(buf, alignmentBytes);\n+        long alignedBuf = Utils.alignUp(buf, byteAlignment);\n@@ -128,1 +127,1 @@\n-                nioAccess.unreserveMemory(alignedSize, bytesSize);\n+                nioAccess.unreserveMemory(alignedSize, byteSize);\n@@ -131,1 +130,1 @@\n-        if (alignedSize != bytesSize) {\n+        if (alignedSize != byteSize) {\n@@ -133,1 +132,1 @@\n-            segment = segment.asSlice(delta, bytesSize);\n+            segment = segment.asSlice(delta, byteSize);\n@@ -142,1 +141,1 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long bytesSize, MemorySession session) {\n+    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, MemorySession session) {\n@@ -145,1 +144,1 @@\n-        return new NativeMemorySegmentImpl(min, bytesSize, false, session);\n+        return new NativeMemorySegmentImpl(min, byteSize, false, session);\n@@ -149,2 +148,2 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long bytesSize) {\n-        return new NativeMemorySegmentImpl(min, bytesSize, false, MemorySession.global());\n+    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize) {\n+        return new NativeMemorySegmentImpl(min, byteSize, false, MemorySession.global());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-    public static void checkAllocationSizeAndAlign(long bytesSize, long alignmentBytes) {\n+    public static void checkAllocationSizeAndAlign(long byteSize, long byteAlignment) {\n@@ -183,2 +183,2 @@\n-        if (bytesSize < 0) {\n-            throw new IllegalArgumentException(\"Invalid allocation size : \" + bytesSize);\n+        if (byteSize < 0) {\n+            throw new IllegalArgumentException(\"Invalid allocation size : \" + byteSize);\n@@ -188,3 +188,3 @@\n-        if (alignmentBytes <= 0 ||\n-                ((alignmentBytes & (alignmentBytes - 1)) != 0L)) {\n-            throw new IllegalArgumentException(\"Invalid alignment constraint : \" + alignmentBytes);\n+        if (byteAlignment <= 0 ||\n+                ((byteAlignment & (byteAlignment - 1)) != 0L)) {\n+            throw new IllegalArgumentException(\"Invalid alignment constraint : \" + byteAlignment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -60,3 +60,3 @@\n-    public final L withBitAlignment(long alignmentBits) {\n-        checkAlignment(alignmentBits);\n-        return dup(alignmentBits, name);\n+    public final L withBitAlignment(long bitAlignment) {\n+        checkAlignment(bitAlignment);\n+        return dup(bitAlignment, name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-            public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n+            public MemorySegment allocate(long bytesSize, long byteAlignment) {\n@@ -204,2 +204,3 @@\n-            public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-                return MemorySegment.allocateNative(bytesSize, bytesAlignment);\n+\n+            public MemorySegment allocate(long byteSize, long byteAlignment) {\n+                return MemorySegment.allocateNative(byteSize, byteAlignment);\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}