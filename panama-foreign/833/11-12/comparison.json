{"files":[{"patch":"@@ -144,1 +144,1 @@\n-        assertTypesMatch(component, null, vl);\n+        assertTypesMatch(component, component.getType(), vl);\n@@ -178,1 +178,1 @@\n-        MultidimensionalSequenceLayoutInfo info = MultidimensionalSequenceLayoutInfo.of(sl);\n+        MultidimensionalSequenceLayoutInfo info = MultidimensionalSequenceLayoutInfo.of(sl, componentType);\n@@ -228,1 +228,1 @@\n-                    var arrayComponentType = deepArrayComponentType(component.getType()).asSubclass(Record.class);\n+                    var arrayComponentType = info.type().asSubclass(Record.class);\n@@ -259,1 +259,1 @@\n-                assertTypesMatch(component, sl, vl);\n+                assertTypesMatch(component, info.type(), vl);\n@@ -271,1 +271,1 @@\n-                var arrayComponentType = deepArrayComponentType(component.getType()).asSubclass(Record.class);\n+                var arrayComponentType = info.type().asSubclass(Record.class);\n@@ -342,1 +342,1 @@\n-                          MemoryLayout sequenceLayout,\n+                          Class<?> recordComponentType,\n@@ -345,5 +345,0 @@\n-        Class<?> recordComponentType = component.getType();\n-        if (recordComponentType.isArray() && sequenceLayout instanceof SequenceLayout) {\n-            recordComponentType = deepArrayComponentType(recordComponentType);\n-        }\n-\n@@ -357,8 +352,0 @@\n-    static Class<?> deepArrayComponentType(Class<?> arrayType) {\n-        Class<?> recordComponentType = arrayType;\n-        while (recordComponentType.isArray()) {\n-            recordComponentType = Objects.requireNonNull(recordComponentType.componentType());\n-        }\n-        return recordComponentType;\n-    }\n-\n@@ -397,1 +384,2 @@\n-                                              MemoryLayout elementLayout){\n+                                              MemoryLayout elementLayout,\n+                                              Class<?> type){\n@@ -423,1 +411,1 @@\n-            return new MultidimensionalSequenceLayoutInfo(removed, elementLayout);\n+            return new MultidimensionalSequenceLayoutInfo(removed, elementLayout, type);\n@@ -426,1 +414,2 @@\n-        static MultidimensionalSequenceLayoutInfo of(SequenceLayout sequenceLayout) {\n+        static MultidimensionalSequenceLayoutInfo of(SequenceLayout sequenceLayout,\n+                                                     Class<?> arrayComponent) {\n@@ -438,1 +427,2 @@\n-                    return new MultidimensionalSequenceLayoutInfo(List.copyOf(sequences), current);\n+                    return new MultidimensionalSequenceLayoutInfo(\n+                            List.copyOf(sequences), current, deepArrayComponentType(arrayComponent));\n@@ -443,0 +433,8 @@\n+        private static Class<?> deepArrayComponentType(Class<?> arrayType) {\n+            Class<?> recordComponentType = arrayType;\n+            while (recordComponentType.isArray()) {\n+                recordComponentType = Objects.requireNonNull(recordComponentType.componentType());\n+            }\n+            return recordComponentType;\n+        }\n+\n@@ -454,5 +452,2 @@\n-        if (!to.isPrimitive() && !isWrapperClass(to) && !to.isArray()) {\n-            throw new IllegalArgumentException(\"Cannot convert '\" + from + \"' to '\" + to.getName() +\n-                    \"' because '\" + to.getName() + \"' is not a wrapper class: [\" + WRAPPER_CLASSES.stream()\n-                    .map(Class::getSimpleName)\n-                    .collect(Collectors.joining(\", \"))+\"]\");\n+        if (!to.isPrimitive() && !to.isArray()) {\n+            throw new IllegalArgumentException(\"Cannot convert '\" + from + \"' to '\" + to.getName());\n@@ -464,11 +459,0 @@\n-    private static final Set<Class<?>> WRAPPER_CLASSES = Stream.of(\n-            Byte.class, Boolean.class, Short.class, Character.class,\n-            Integer.class, Long.class, Float.class, Double.class\n-    ).collect(Collectors.collectingAndThen(\n-            Collectors.toCollection(LinkedHashSet::new),\n-            Collections::unmodifiableSet));\n-\n-    static boolean isWrapperClass(Class<?> type) {\n-        return WRAPPER_CLASSES.contains(type);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutRecordMapper.java","additions":23,"deletions":39,"binary":false,"changes":62,"status":"modified"}]}