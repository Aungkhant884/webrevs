{"files":[{"patch":"@@ -85,1 +85,2 @@\n-     * The mapping between the record type and this memory layout is defined as follows;\n+     * A mapper {@code M} between a record type {@code R}, a memory layout {@code L} and an {@code offset}\n+     * (which is zero for the initial invocation of this method) is defined as follows {@code M(type, layout, offset)};\n@@ -87,2 +88,2 @@\n-     * Let {@code R} be the provided record {@code type} with the constituent components\n-     * {@code c_1}, {@code c_2}, ..., {@code c_N}, where <em>N<\/em> is the (non-negative) number of components.\n+     * Let {@code R} comprise its the constituent components\n+     * {@code c_1, c_2}, ..., c_N}, where {@code N} is the (non-negative) number of components of {@code R}.\n@@ -93,2 +94,1 @@\n-     * Let {@code L} be this group layout with the elements {@code e_1}, {@code e_2}, ..., {@code e_M}\n-     * , where {@code M >= N}.\n+     * Let {@code L} be a group layout with the elements {@code e_1, e_2, ..., e_M}, where {@code M >= N}.\n@@ -96,3 +96,3 @@\n-     * Let {@code offsetBetween(GroupLayout rootLayout, MemoryLayout target)} be a pseudo function that, via\n-     * the method {@link MemoryLayout#byteOffset(PathElement...)}, can compute the offset from the initial root\n-     * layout (from which this method was first invoked) to a sub-layout of the root layout.\n+     * Let {@code offsetBetween(GroupLayout layout, MemoryLayout target)} be a function that, via\n+     * the method {@link MemoryLayout#byteOffset(PathElement...)}, can compute the offset from the\n+     * {@code layout L} to a sub-layout of {@code L}.\n@@ -100,1 +100,1 @@\n-     * Then, for each {@code c_a} ({@code a <= N}, there must be a corresponding distinct\n+     * Then, for each {@code c_a, a <= N}, there must be a corresponding distinct\n@@ -107,1 +107,1 @@\n-     *        whereby {@code c_a} = {@code f_a(MemorySegment ms) = ms.get({@code e_b}, offsetBetween(root, e_b))}.<br>\n+     *        whereby {@code c_a = f_a(MemorySegment ms) = ms.get(e_b, offset + offsetBetween(layout, e_b))}.<br>\n@@ -113,3 +113,2 @@\n-     *        a resulting mapper {@code M2} = {@link #recordMapper(Class) e_b.recordMapper(c_a.type())}<br>\n-     *        whereby {@code c_a} = {@code f_a(MemorySegment ms) =\n-     *        M2.apply(ms.asSlice(offsetBetween(root, e_b)))} recursively.<br>\n+     *        another resulting mapper {@code M2 = M(R2, e_b, offset + offsetBetween(layout, e_b))} recursively\n+     *        whereby {@code c_a} = {@code f_a(MemorySegment ms) = M2.apply(ms)}<br>\n@@ -124,1 +123,1 @@\n-     *        and subsequently obtaining a leaf record mapper:\n+     *        and subsequently obtaining a leaf mapper {@code (MemorySegment ms, long componentOffset)}:\n@@ -128,1 +127,1 @@\n-     *            {@code LM} = {@link MemorySegment#get(ValueLayout.OfInt, long) ms -> ms.get(LL, offset)}\n+     *            {@code LM} = {@link MemorySegment#get(ValueLayout.OfInt, long) ms -> ms.get(LL, offset + offsetBetween(layout, e_b))}\n@@ -133,1 +132,1 @@\n-     *            {@code LM} = {@link #recordMapper(Class) LL.recordMapper(C.type())}\n+     *            {@code LM} = recursively M(C.type, LL, offset + offsetBetween(layout, e_b)}\n@@ -137,2 +136,2 @@\n-     *        applying {@code A2} which, in turn, will apply {@code LM} recursively at base offset\n-     *        offsetBetween(root, e_b) plus applicable multidimensional array offsets.<br>\n+     *        applying {@code A2} which, in turn, will apply {@code LM} recursively at\n+     *        a memory segment slice at the applicable multidimensional array offsets.<br>\n@@ -155,2 +154,3 @@\n-     * If the above is true, the returned mapper will, when invoked, subsequently invoke the record type's\n-     * canonical constructor {@code R::new} using a composition of the above mapping functions:\n+     * If the above is true, the returned mapper {@code M(type, this, 0L)} will, when invoked,\n+     * subsequently invoke the record type's canonical constructor {@code R::new} using a composition\n+     * of the above mapping functions:\n@@ -158,1 +158,1 @@\n-     * <em>ms -> new R(f_1(ms), f_2(ms), ..., f_N(ms))<\/em>\n+     * {@code ms -> new R(f_1(ms), f_2(ms), ..., f_N(ms))}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"}]}