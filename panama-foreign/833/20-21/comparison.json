{"files":[{"patch":"@@ -80,0 +80,35 @@\n+    \/**\n+     * A mapper that can produce instances of type {@code T} given\n+     * a MemorySegment and an offset in the segment.\n+     *\n+     * @param <T> the type of instances produced\n+     * @since 22\n+     *\/\n+    @FunctionalInterface\n+    interface TypeMapper<T> extends Function<MemorySegment, T> {\n+\n+        \/**\n+         * {@return an instance of type {@code T} that takes its state from the\n+         * provided {@code segment} at the provided {@code offset}}\n+         *\n+         * @param segment from which the state shall be retrieved\n+         * @param offset  in the segment (non-negative)\n+         * @throws IllegalArgumentException if the provided offset is negative or if an instance\n+         *                                  cannot be produced, for example, if the provided segment\n+         *                                  is too small or the provided offset is too large.\n+         *\/\n+        T apply(MemorySegment segment, long offset);\n+\n+        \/**\n+         * {@return an instance of type T that takes its state from the\n+         * provided {@code segment} at the offset zero}\n+         *\n+         * @param segment from which the state shall be retrieved\n+         * @throws IllegalArgumentException if an instance cannot be produced, for\n+         *                                  example, if the provided segment is too small.\n+         *\/\n+        default T apply(MemorySegment segment) {\n+            return apply(segment, 0L);\n+        }\n+    }\n+\n@@ -223,1 +258,1 @@\n-     * @since 21\n+     * @since 22\n@@ -225,1 +260,1 @@\n-    <R extends Record> Function<MemorySegment, R> recordMapper(Class<R> type);\n+    <R extends Record> TypeMapper<R> recordMapper(Class<R> type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.ValueBased;\n@@ -48,1 +49,0 @@\n-import java.util.Spliterator;\n@@ -58,0 +58,1 @@\n+@ValueBased\n@@ -59,1 +60,1 @@\n-        implements Function<MemorySegment, T> {\n+        implements GroupLayout.TypeMapper<T> {\n@@ -71,1 +72,6 @@\n-    public LayoutRecordMapper(Class<T> type,\n+    public static <T> LayoutRecordMapper<T> create(Class<T> type,\n+                                                   GroupLayout layout) {\n+        return new LayoutRecordMapper<>(type, layout);\n+    }\n+\n+    private LayoutRecordMapper(Class<T> type,\n@@ -76,5 +82,5 @@\n-    public LayoutRecordMapper(Class<T> type,\n-                              GroupLayout layout,\n-                              long offset,\n-                              int depth,\n-                              MethodHandles.Lookup lookup) {\n+    private LayoutRecordMapper(Class<T> type,\n+                               GroupLayout layout,\n+                               long offset,\n+                               int depth,\n+                               MethodHandles.Lookup lookup) {\n@@ -319,0 +325,7 @@\n+    @Override\n+    public T apply(MemorySegment segment, long offset) {\n+        return offset == 0\n+                ? apply(segment)\n+                : apply(segment.asSlice(offset));\n+    }\n+\n@@ -327,0 +340,14 @@\n+    @Override\n+    public boolean equals(Object o) {\n+        return o instanceof LayoutRecordMapper<?> that &&\n+                offset == that.offset &&\n+                depth == that.depth &&\n+                Objects.equals(type, that.type) &&\n+                Objects.equals(layout, that.layout);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(type, layout, offset, depth);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutRecordMapper.java","additions":35,"deletions":8,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-    public final <R extends Record> Function<MemorySegment, R> recordMapper(Class<R> recordType) {\n+    public final <R extends Record> GroupLayout.TypeMapper<R> recordMapper(Class<R> recordType) {\n@@ -123,1 +123,1 @@\n-        return new LayoutRecordMapper<>(recordType, (GroupLayout) this);\n+        return LayoutRecordMapper.create(recordType, (GroupLayout) this);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    static class PointMapper implements Function<MemorySegment, Point> {\n+    static class PointMapper implements GroupLayout.TypeMapper<Point> {\n@@ -103,2 +103,2 @@\n-        public Point apply(MemorySegment segment) {\n-            return new Point(segment.get(JAVA_INT, 0), segment.get(JAVA_INT, 4));\n+        public Point apply(MemorySegment segment, long offset) {\n+            return new Point(segment.get(JAVA_INT, offset), segment.get(JAVA_INT, offset + 4L));\n@@ -985,4 +985,4 @@\n-    static public <R extends Record> void testType(R expected,\n-                                            Object array,\n-                                            ValueLayout valueLayout,\n-                                            String... names) {\n+        static public <R extends Record> void testType(R expected,\n+                                                       Object array,\n+                                                       ValueLayout valueLayout,\n+                                                       String... names) {\n@@ -1006,1 +1006,1 @@\n-        Function<MemorySegment, R> mapper = layout.recordMapper(type);\n+        GroupLayout.TypeMapper<R> mapper = layout.recordMapper(type);\n@@ -1013,1 +1013,1 @@\n-                         Function<MemorySegment, T> mapper,\n+                         GroupLayout.TypeMapper<T> mapper,\n","filename":"test\/jdk\/java\/foreign\/TestRecordMapper.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}