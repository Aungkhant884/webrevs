{"files":[{"patch":"@@ -54,1 +54,1 @@\n- * A record mapper that is matching a GroupLayout to match the components of a record.\n+ * A record mapper that is matching components of a record with elements in a GroupLayout.\n@@ -160,0 +160,4 @@\n+        if (type.equals(component.getType())) {\n+            throw new IllegalArgumentException(\n+                    \"A type may not use a component of the same type: \" + type + \" in \" + gl);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutRecordMapper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -959,0 +959,19 @@\n+    public record Recurse(Recurse recurse){}\n+    @Test\n+    public void recursiveDefinition() {\n+        var layout = MemoryLayout.structLayout(\n+                MemoryLayout.structLayout(\n+                        MemoryLayout.structLayout(\n+                                MemoryLayout.structLayout(JAVA_INT)\n+                        ).withName(\"recurse\")\n+                ).withName(\"recurse\")\n+        );\n+\n+        try {\n+            layout.recordMapper(Recurse.class);\n+            fail(\"No IllegalArgumentException detected\");\n+        } catch (IllegalArgumentException e) {\n+            assertTrue(e.getMessage().contains(\"same type\"));\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestRecordMapper.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}