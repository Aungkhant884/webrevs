{"files":[{"patch":"@@ -44,1 +44,0 @@\n-    value_ptr++;\n@@ -46,0 +45,1 @@\n+  value_ptr++;\n@@ -48,1 +48,0 @@\n-    value_ptr++;\n@@ -50,0 +49,1 @@\n+  value_ptr++;\n","filename":"src\/hotspot\/share\/prims\/downcallLinker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Arrays;\n@@ -289,2 +288,1 @@\n-            permits LinkerOptions.LinkerOptionImpl,\n-                    Option.CaptureCallState {\n+            permits LinkerOptions.LinkerOptionImpl {\n@@ -306,3 +304,29 @@\n-         * A downcall method handle linked with this option will feature an additional {@link MemorySegment}\n-         * parameter directly following the target address, and optional {@link SegmentAllocator} parameters.\n-         * This memory segment must be a native segment into which the captured state is written.\n+         * Execution state is captured by a downcall method handle on invocation, by writing it\n+         * to a native segment provided by the user to the downcall method handle.\n+         * For this purpose, a downcall method handle linked with the this\n+         * option will feature an additional {@link MemorySegment} parameter directly\n+         * following the target address, and optional {@link SegmentAllocator} parameters.\n+         * This parameter, called the 'capture state segment', represents the native segment into which\n+         * the captured state is written.\n+         * <p>\n+         * The capture state segment should have the layout returned by {@linkplain #captureStateLayout}.\n+         * This layout is a struct layout which has a named field for each captured value.\n+         * <p>\n+         * Captured state can be retrieved from the capture state segment by constructing var handles\n+         * from the {@linkplain #captureStateLayout capture state layout}.\n+         * <p>\n+         * The following example demonstrates the use of this linker option:\n+         * {@snippet lang = \"java\":\n+         * MemorySegment targetAddress = ...\n+         * Linker.Option ccs = Linker.Option.captureCallState(\"errno\");\n+         * MethodHandle handle = Linker.nativeLinker().downcallHandle(targetAddress, FunctionDescriptor.ofVoid(), ccs);\n+         *\n+         * StructLayout capturedStateLayout = Linker.Option.capturedStateLayout();\n+         * VarHandle errnoHandle = capturedStateLayout.varHandle(PathElement.groupElement(\"errno\"));\n+         * try (Arena arena = Arena.openConfined()) {\n+         *     MemorySegment capturedState = arena.allocate(capturedStateLayout);\n+         *     handle.invoke(capturedState);\n+         *     int errno = errnoHandle.get(capturedState);\n+         *     \/\/ use errno\n+         * }\n+         * }\n@@ -311,1 +335,1 @@\n-         * @see CaptureCallState#supported()\n+         * @see #captureStateLayout()\n@@ -313,1 +337,1 @@\n-        static CaptureCallState captureCallState(String... capturedState) {\n+        static Option captureCallState(String... capturedState) {\n@@ -317,1 +341,11 @@\n-            return new LinkerOptions.CaptureCallStateImpl(set);\n+            return new LinkerOptions.CaptureCallState(set);\n+        }\n+\n+         \/**\n+         * {@return A struct layout that represents the layout of the capture state segment that is passed\n+         *          to a downcall handle linked with {@link #captureCallState(String...)}}\n+         *\n+         * @see #captureCallState(String...)\n+         *\/\n+        static StructLayout captureStateLayout() {\n+            return CapturableState.LAYOUT;\n@@ -348,52 +382,0 @@\n-\n-        \/**\n-         * A linker option for saving portions of the execution state immediately\n-         * after calling a foreign function associated with a downcall method handle,\n-         * before it can be overwritten by the runtime, or read through conventional means.\n-         * <p>\n-         * Execution state is captured by a downcall method handle on invocation, by writing it\n-         * to a native segment provided by the user to the downcall method handle.\n-         * For this purpose, a downcall method handle linked with the {@link #captureCallState(String[])}\n-         * option will feature an additional {@link MemorySegment} parameter directly\n-         * following the target address, and optional {@link SegmentAllocator} parameters.\n-         * This parameter represents the native segment into which the captured state is written.\n-         * <p>\n-         * The native segment should have the layout {@linkplain CaptureCallState#layout associated}\n-         * with the particular {@code CaptureCallState} instance used to link the downcall handle.\n-         * <p>\n-         * Captured state can be retrieved from this native segment by constructing var handles\n-         * from the {@linkplain #layout layout} associated with the {@code CaptureCallState} instance.\n-         * <p>\n-         * The following example demonstrates the use of this linker option:\n-         * {@snippet lang = \"java\":\n-         * MemorySegment targetAddress = ...\n-         * CaptureCallState ccs = Linker.Option.captureCallState(\"errno\");\n-         * MethodHandle handle = Linker.nativeLinker().downcallHandle(targetAddress, FunctionDescriptor.ofVoid(), ccs);\n-         *\n-         * VarHandle errnoHandle = ccs.layout().varHandle(PathElement.groupElement(\"errno\"));\n-         * try (Arena arena = Arena.openConfined()) {\n-         *     MemorySegment capturedState = arena.allocate(ccs.layout());\n-         *     handle.invoke(capturedState);\n-         *     int errno = errnoHandle.get(capturedState);\n-         *     \/\/ use errno\n-         * }\n-         * }\n-         *\/\n-        @PreviewFeature(feature=PreviewFeature.Feature.FOREIGN)\n-        sealed interface CaptureCallState extends Option\n-                                          permits LinkerOptions.CaptureCallStateImpl {\n-            \/**\n-             * {@return A struct layout that represents the layout of the native segment passed\n-             *          to a downcall handle linked with this {@code CapturedCallState} instance}\n-             *\/\n-            StructLayout layout();\n-\n-            \/**\n-             * {@return the names of the state that can be capture by this implementation}\n-             *\/\n-            static Set<String> supported() {\n-                return Arrays.stream(CapturableState.values())\n-                             .map(CapturableState::stateName)\n-                             .collect(Collectors.toSet());\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":43,"deletions":61,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-    private static final boolean IS_WINDOWS = privilegedGetProperty(\"os.name\").startsWith(\"Windows\");\n-\n@@ -63,1 +61,1 @@\n-            if (IS_WINDOWS) {\n+            if (Utils.IS_WINDOWS) {\n@@ -125,1 +123,1 @@\n-        String lib = IS_WINDOWS ? \"bin\" : \"lib\";\n+        String lib = Utils.IS_WINDOWS ? \"bin\" : \"lib\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import static sun.security.action.GetPropertyAction.privilegedGetProperty;\n@@ -54,0 +55,2 @@\n+    public static final boolean IS_WINDOWS = privilegedGetProperty(\"os.name\").startsWith(\"Windows\");\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import jdk.internal.foreign.Utils;\n+\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.StructLayout;\n@@ -32,0 +36,1 @@\n+import static sun.security.action.GetPropertyAction.privilegedGetProperty;\n@@ -34,3 +39,6 @@\n-    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0),\n-    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1),\n-    ERRNO             (\"errno\",           JAVA_INT, 1 << 2);\n+    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0, Utils.IS_WINDOWS),\n+    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1, Utils.IS_WINDOWS),\n+    ERRNO             (\"errno\",           JAVA_INT, 1 << 2, true);\n+\n+    public static final StructLayout LAYOUT = MemoryLayout.structLayout(\n+        supportedStates().map(CapturableState::layout).toArray(MemoryLayout[]::new));\n@@ -41,0 +49,1 @@\n+    private final boolean isSupported;\n@@ -42,1 +51,1 @@\n-    CapturableState(String stateName, ValueLayout layout, int mask) {\n+    CapturableState(String stateName, ValueLayout layout, int mask, boolean isSupported) {\n@@ -46,0 +55,5 @@\n+        this.isSupported = isSupported;\n+    }\n+\n+    private static Stream<CapturableState> supportedStates() {\n+        return Stream.of(values()).filter(CapturableState::isSupported);\n@@ -51,0 +65,1 @@\n+                .filter(CapturableState::isSupported)\n@@ -54,1 +69,1 @@\n-                            + Stream.of(CapturableState.values())\n+                            + supportedStates()\n@@ -70,0 +85,4 @@\n+\n+    public boolean isSupported() {\n+        return isSupported;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CapturableState.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.StructLayout;\n-import java.util.Comparator;\n@@ -86,1 +83,1 @@\n-        return getOption(CaptureCallStateImpl.class) != null;\n+        return getOption(CaptureCallState.class) != null;\n@@ -90,1 +87,1 @@\n-        CaptureCallStateImpl stl = getOption(CaptureCallStateImpl.class);\n+        CaptureCallState stl = getOption(CaptureCallState.class);\n@@ -122,1 +119,1 @@\n-            permits CaptureCallStateImpl, FirstVariadicArg, IsTrivial, UncaughtExceptionHandler {\n+            permits CaptureCallState, FirstVariadicArg, IsTrivial, UncaughtExceptionHandler {\n@@ -141,2 +138,1 @@\n-    public record CaptureCallStateImpl(Set<CapturableState> saved) implements LinkerOptionImpl, Linker.Option.CaptureCallState {\n-\n+    public record CaptureCallState(Set<CapturableState> saved) implements LinkerOptionImpl {\n@@ -147,10 +143,0 @@\n-\n-        @Override\n-        public StructLayout layout() {\n-            return MemoryLayout.structLayout(\n-                saved.stream()\n-                      .sorted(Comparator.comparingInt(CapturableState::ordinal))\n-                      .map(CapturableState::layout)\n-                      .toArray(MemoryLayout[]::new)\n-            );\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/LinkerOptions.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -79,0 +79,7 @@\n+    @Test(dataProvider = \"illegalCaptureState\",\n+          expectedExceptions = IllegalArgumentException.class,\n+          expectedExceptionsMessageRegExp = \".*Unknown name.*\")\n+    public void testIllegalCaptureState(String name) {\n+        Linker.Option.captureCallState(name);\n+    }\n+\n@@ -81,0 +88,11 @@\n+    @DataProvider\n+    public static Object[][] illegalCaptureState() {\n+        if (!IS_WINDOWS) {\n+            return new Object[][]{\n+                { \"GetLastError\" },\n+                { \"WSAGetLastError\" },\n+            };\n+        }\n+        return new Object[][]{};\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        Linker.Option.CaptureCallState stl = Linker.Option.captureCallState(testCase.threadLocalName());\n+        Linker.Option stl = Linker.Option.captureCallState(testCase.threadLocalName());\n@@ -72,1 +72,2 @@\n-        VarHandle errnoHandle = stl.layout().varHandle(groupElement(testCase.threadLocalName()));\n+        StructLayout capturedStateLayout = Linker.Option.captureStateLayout();\n+        VarHandle errnoHandle = capturedStateLayout.varHandle(groupElement(testCase.threadLocalName()));\n@@ -75,1 +76,1 @@\n-            MemorySegment saveSeg = arena.allocate(stl.layout());\n+            MemorySegment saveSeg = arena.allocate(capturedStateLayout);\n@@ -131,1 +132,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        Linker.Option.CaptureCallState ccs = Linker.Option.captureCallState(\"errno\");\n+        Linker.Option ccs = Linker.Option.captureCallState(\"errno\");\n@@ -87,1 +87,2 @@\n-        VarHandle errnoHandle = ccs.layout().varHandle(MemoryLayout.PathElement.groupElement(\"errno\"));\n+        StructLayout capturedStateLayout = Linker.Option.captureStateLayout();\n+        VarHandle errnoHandle = capturedStateLayout.varHandle(MemoryLayout.PathElement.groupElement(\"errno\"));\n@@ -89,1 +90,1 @@\n-            MemorySegment captureSeg = arena.allocate(ccs.layout());\n+            MemorySegment captureSeg = arena.allocate(capturedStateLayout);\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestTrivial.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}