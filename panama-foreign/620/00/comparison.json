{"files":[{"patch":"@@ -110,1 +110,1 @@\n-            Short(\"short\", ValueLayout.JAVA_SHORT),\n+            Short(\"short\", ValueLayout.JAVA_SHORT.withBitAlignment(16)),\n@@ -114,1 +114,1 @@\n-            Int(\"int\", ValueLayout.JAVA_INT),\n+            Int(\"int\", ValueLayout.JAVA_INT.withBitAlignment(32)),\n@@ -118,1 +118,3 @@\n-            Long(\"long\", TypeImpl.IS_WINDOWS ? ValueLayout.JAVA_INT : ValueLayout.JAVA_LONG),\n+            Long(\"long\", TypeImpl.IS_WINDOWS ?\n+                    ValueLayout.JAVA_INT.withBitAlignment(32) :\n+                    ValueLayout.JAVA_LONG.withBitAlignment(64)),\n@@ -122,1 +124,1 @@\n-            LongLong(\"long long\", ValueLayout.JAVA_LONG),\n+            LongLong(\"long long\", ValueLayout.JAVA_LONG.withBitAlignment(64)),\n@@ -130,1 +132,1 @@\n-            Float(\"float\", ValueLayout.JAVA_FLOAT),\n+            Float(\"float\", ValueLayout.JAVA_FLOAT.withBitAlignment(32)),\n@@ -134,1 +136,1 @@\n-            Double(\"double\", ValueLayout.JAVA_DOUBLE),\n+            Double(\"double\", ValueLayout.JAVA_DOUBLE.withBitAlignment(64)),\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/incubator\/jextract\/Type.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.incubator.foreign.CLinker;\n@@ -244,1 +243,2 @@\n-        append(memberMods() + \"MemoryLayout \" + fieldName + \" = \");\n+        String layoutClassName = layout.getClass().getSimpleName();\n+        append(memberMods() + \" \" + layoutClassName + \" \" + fieldName + \" = \");\n@@ -251,0 +251,4 @@\n+    protected String primitiveLayoutString(ValueLayout layout) {\n+        return toplevel().rootConstants().resolvePrimitiveLayout(layout).accessExpression();\n+    }\n+\n@@ -253,1 +257,1 @@\n-            append(typeToLayoutName(val));\n+            append(primitiveLayoutString(val));\n@@ -353,4 +357,0 @@\n-    private static String typeToLayoutName(ValueLayout vl) {\n-        return Utils.layoutToConstant(vl);\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ConstantBuilder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.incubator.foreign.Addressable;\n@@ -40,1 +39,0 @@\n-import java.util.Optional;\n@@ -227,2 +225,1 @@\n-            append(\" ValueLayout.\");\n-            append(primType.kind().layout().orElseThrow().getClass().getSimpleName());\n+            append(\" \" + primType.kind().layout().orElseThrow().getClass().getSimpleName());\n@@ -231,1 +228,1 @@\n-            append(TypeTranslator.typeToLayoutName(kind));\n+            append(toplevel().rootConstants().resolvePrimitiveLayout((ValueLayout)kind.layout().get()).accessExpression());\n@@ -241,1 +238,1 @@\n-        append(\" ValueLayout.OfAddress \");\n+        append(\" OfAddress \");\n@@ -243,1 +240,3 @@\n-        append(\" = ValueLayout.ADDRESS;\\n\");\n+        append(\" = \");\n+        append(toplevel().rootConstants().resolvePrimitiveLayout(TypeImpl.PointerImpl.POINTER_LAYOUT).accessExpression());\n+        append(\";\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.ValueLayout;\n@@ -32,1 +35,0 @@\n-import java.io.File;\n@@ -48,0 +50,1 @@\n+    private RootConstants rootConstants;\n@@ -56,0 +59,1 @@\n+        rootConstants = new RootConstants();\n@@ -60,0 +64,4 @@\n+    public RootConstants rootConstants() {\n+        return rootConstants;\n+    }\n+\n@@ -66,0 +74,1 @@\n+        builders.add(rootConstants);\n@@ -210,0 +219,68 @@\n+    class RootConstants extends ConstantBuilder {\n+\n+        private final Map<ValueLayout, Constant> primitiveLayouts = new HashMap<>();\n+\n+        public RootConstants() {\n+            super(ToplevelBuilder.this, \"Constants$root\");\n+            classBegin();\n+            addPrimitiveLayout(\"C_BOOL\", Type.Primitive.Kind.Bool);\n+            addPrimitiveLayout(\"C_CHAR\", Type.Primitive.Kind.Char);\n+            addPrimitiveLayout(\"C_SHORT\", Type.Primitive.Kind.Short);\n+            addPrimitiveLayout(\"C_INT\", Type.Primitive.Kind.Int);\n+            addPrimitiveLayout(\"C_LONG\", Type.Primitive.Kind.Long);\n+            addPrimitiveLayout(\"C_LONG_LONG\", Type.Primitive.Kind.LongLong);\n+            addPrimitiveLayout(\"C_FLOAT\", Type.Primitive.Kind.Float);\n+            addPrimitiveLayout(\"C_DOUBLE\", Type.Primitive.Kind.Double);\n+            addPrimitiveLayout(\"C_POINTER\", TypeImpl.PointerImpl.POINTER_LAYOUT);\n+            classEnd();\n+        }\n+\n+        @Override\n+        protected String primitiveLayoutString(ValueLayout vl) {\n+            if (vl.carrier() == boolean.class) {\n+                return \"JAVA_BOOLEAN\";\n+            } else if (vl.carrier() == char.class) {\n+                return \"JAVA_CHAR.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+            } else if (vl.carrier() == byte.class) {\n+                return \"JAVA_BYTE\";\n+            } else if (vl.carrier() == short.class) {\n+                return \"JAVA_SHORT.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+            } else if (vl.carrier() == int.class) {\n+                return \"JAVA_INT.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+            } else if (vl.carrier() == float.class) {\n+                return \"JAVA_FLOAT.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+            } else if (vl.carrier() == long.class) {\n+                return \"JAVA_LONG.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+            } else if (vl.carrier() == double.class) {\n+                return \"JAVA_DOUBLE.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+            } else if (vl.carrier() == MemoryAddress.class) {\n+                return \"ADDRESS.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+            } else {\n+                return \"MemoryLayout.paddingLayout(\" + vl.bitSize() +  \")\";\n+            }\n+        }\n+\n+        private Constant addPrimitiveLayout(String javaName, ValueLayout layout) {\n+            ValueLayout layoutNoName = layoutNoName(layout);\n+            Constant layoutConstant = super.addLayout(javaName, layoutNoName);\n+            primitiveLayouts.put(layoutNoName, layoutConstant);\n+            return layoutConstant;\n+        }\n+\n+        private Constant addPrimitiveLayout(String javaName, Type.Primitive.Kind kind) {\n+            return addPrimitiveLayout(javaName, (ValueLayout)kind.layout().get());\n+        }\n+\n+        private ValueLayout layoutNoName(ValueLayout layout) {\n+            \/\/ drop name if present\n+            return MemoryLayout.valueLayout(layout.carrier(), layout.order())\n+                    .withBitAlignment(layout.bitAlignment());\n+        }\n+\n+        public Constant resolvePrimitiveLayout(ValueLayout layout) {\n+            return primitiveLayouts.get(layoutNoName(layout));\n+        }\n+    }\n+\n+    \/\/ other constants\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ToplevelBuilder.java","additions":78,"deletions":1,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.incubator.foreign.ValueLayout;\n@@ -184,0 +185,2 @@\n+        public static final ValueLayout.OfAddress POINTER_LAYOUT = ADDRESS.withBitAlignment(64);\n+\n@@ -405,1 +408,1 @@\n-                return ADDRESS;\n+                return PointerImpl.POINTER_LAYOUT;\n@@ -419,1 +422,1 @@\n-            return ADDRESS;\n+            return PointerImpl.POINTER_LAYOUT;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeImpl.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,4 +61,0 @@\n-    static String typeToLayoutName(Primitive.Kind type) {\n-        return Utils.layoutToConstant((ValueLayout)type.layout().orElseThrow());\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeTranslator.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -331,24 +331,0 @@\n-\n-    public static String layoutToConstant(ValueLayout vl) {\n-        if (vl.carrier() == boolean.class) {\n-            return \"JAVA_BOOLEAN\";\n-        } else if (vl.carrier() == char.class) {\n-            return \"JAVA_CHAR\";\n-        } else if (vl.carrier() == byte.class) {\n-            return \"JAVA_BYTE\";\n-        } else if (vl.carrier() == short.class) {\n-            return \"JAVA_SHORT\";\n-        } else if (vl.carrier() == int.class) {\n-            return \"JAVA_INT\";\n-        } else if (vl.carrier() == float.class) {\n-            return \"JAVA_FLOAT\";\n-        } else if (vl.carrier() == long.class) {\n-            return \"JAVA_LONG\";\n-        } else if (vl.carrier() == double.class) {\n-            return \"JAVA_DOUBLE\";\n-        } else if (vl.carrier() == MemoryAddress.class) {\n-            return \"ADDRESS\";\n-        } else {\n-            return \"MemoryLayout.paddingLayout(\" + vl.bitSize() +  \")\";\n-        }\n-    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/Utils.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -61,7 +61,7 @@\n-    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n-    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n-    public static final ValueLayout C_LONG = IS_WINDOWS ? ValueLayout.JAVA_INT : ValueLayout.JAVA_LONG;\n-    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n-    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n-    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n-    public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS;\n+    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n+    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT.withBitAlignment(32);\n+    public static final ValueLayout C_LONG = IS_WINDOWS ? ValueLayout.JAVA_INT.withBitAlignment(32) : ValueLayout.JAVA_LONG.withBitAlignment(64);\n+    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n+    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n+    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n+    public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(ValueLayout.ADDRESS.bitSize());\n","filename":"test\/jdk\/tools\/jextract\/JextractToolRunner.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}