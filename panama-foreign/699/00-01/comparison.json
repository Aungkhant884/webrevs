{"files":[{"patch":"@@ -113,1 +113,1 @@\n-          masm->str(from_reg, Address(sp, to_reg.index() + out_stk_bias));\n+          masm->str(from_reg, Address(sp, to_reg.offset() + out_stk_bias));\n@@ -130,1 +130,1 @@\n-          masm->ldr(as_Register(to_reg), Address(rfp, RFP_BIAS + from_reg.index() + in_stk_bias));\n+          masm->ldr(as_Register(to_reg), Address(rfp, RFP_BIAS + from_reg.offset() + in_stk_bias));\n@@ -139,1 +139,1 @@\n-          masm->ldrd(as_FloatRegister(to_reg), Address(rfp, RFP_BIAS + from_reg.index() + in_stk_bias));\n+          masm->ldrd(as_FloatRegister(to_reg), Address(rfp, RFP_BIAS + from_reg.offset() + in_stk_bias));\n@@ -142,1 +142,1 @@\n-          masm->ldrs(as_FloatRegister(to_reg), Address(rfp, RFP_BIAS + from_reg.index() + in_stk_bias));\n+          masm->ldrs(as_FloatRegister(to_reg), Address(rfp, RFP_BIAS + from_reg.offset() + in_stk_bias));\n@@ -153,2 +153,2 @@\n-          masm->ldr(tmp_reg, Address(rfp, RFP_BIAS + from_reg.index() + in_stk_bias));\n-          masm->str(tmp_reg, Address(sp, to_reg.index() + out_stk_bias));\n+          masm->ldr(tmp_reg, Address(rfp, RFP_BIAS + from_reg.offset() + in_stk_bias));\n+          masm->str(tmp_reg, Address(sp, to_reg.offset() + out_stk_bias));\n@@ -173,1 +173,1 @@\n-          masm->strd(from_reg, Address(sp, to_reg.index() + out_stk_bias));\n+          masm->strd(from_reg, Address(sp, to_reg.offset() + out_stk_bias));\n@@ -176,1 +176,1 @@\n-          masm->strs(from_reg, Address(sp, to_reg.index() + out_stk_bias));\n+          masm->strs(from_reg, Address(sp, to_reg.offset() + out_stk_bias));\n","filename":"src\/hotspot\/cpu\/aarch64\/foreignGlobals_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-      masm->movq(Address(rsp, to_reg.index() + out_stk_bias), from_reg);\n+      masm->movq(Address(rsp, to_reg.offset() + out_stk_bias), from_reg);\n@@ -130,1 +130,1 @@\n-      masm->movq(Address(rsp, to_reg.index() + out_stk_bias), tmp_reg);\n+      masm->movq(Address(rsp, to_reg.offset() + out_stk_bias), tmp_reg);\n@@ -149,1 +149,1 @@\n-      masm->movq(Address(rsp, to_reg.index() + out_stk_bias), from_reg);\n+      masm->movq(Address(rsp, to_reg.offset() + out_stk_bias), from_reg);\n@@ -173,1 +173,1 @@\n-        move_stack64(masm, tmp_reg, in_stk_bias, out_stk_bias, from_reg.index(), to_reg);\n+        move_stack64(masm, tmp_reg, in_stk_bias, out_stk_bias, from_reg.offset(), to_reg);\n","filename":"src\/hotspot\/cpu\/x86\/foreignGlobals_x86_64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4292,1 +4292,1 @@\n-int jdk_internal_foreign_abi_VMStorage::_index_offset;\n+int jdk_internal_foreign_abi_VMStorage::_indexOrOffset_offset;\n@@ -4298,1 +4298,1 @@\n-  macro(_index_offset,             k, \"index\",             int_signature, false); \\\n+  macro(_indexOrOffset_offset,     k, \"indexOrOffset\",     int_signature, false); \\\n@@ -4321,2 +4321,2 @@\n-jint jdk_internal_foreign_abi_VMStorage::index(oop entry) {\n-  return entry->int_field(_index_offset);\n+jint jdk_internal_foreign_abi_VMStorage::index_or_offset(oop entry) {\n+  return entry->int_field(_indexOrOffset_offset);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1176,1 +1176,1 @@\n-  static int _index_offset;\n+  static int _indexOrOffset_offset;\n@@ -1186,4 +1186,4 @@\n-  static jbyte       type(oop entry);\n-  static jint        index(oop entry);\n-  static jshort      segment_mask_or_size(oop entry);\n-  static oop         debugName(oop entry);\n+  static jbyte  type(oop entry);\n+  static jint   index_or_offset(oop entry);\n+  static jshort segment_mask_or_size(oop entry);\n+  static oop    debugName(oop entry);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  jint index = jdk_internal_foreign_abi_VMStorage::index(storage);\n+  jint index_or_offset = jdk_internal_foreign_abi_VMStorage::index_or_offset(storage);\n@@ -60,1 +60,1 @@\n-    return VMStorage::stack_storage(segment_mask_or_size, index);\n+    return VMStorage::stack_storage(segment_mask_or_size, index_or_offset);\n@@ -62,1 +62,1 @@\n-    return VMStorage::reg_storage(rType, segment_mask_or_size, index);\n+    return VMStorage::reg_storage(rType, segment_mask_or_size, index_or_offset);\n@@ -120,1 +120,1 @@\n-          max_stack_offset = MAX2(max_stack_offset, reg.index() + reg.stack_size());\n+          max_stack_offset = MAX2(max_stack_offset, reg.offset() + reg.stack_size());\n@@ -129,1 +129,1 @@\n-          max_stack_offset = MAX2(max_stack_offset, reg.index() + reg.stack_size());\n+          max_stack_offset = MAX2(max_stack_offset, reg.offset() + reg.stack_size());\n@@ -169,1 +169,1 @@\n-      assert((r.index() & 0xFF000000) == 0, \"index too large\");\n+      assert((r.index_or_offset() & 0xFF000000) == 0, \"index or offset too large\");\n@@ -171,1 +171,1 @@\n-      return ((int) r.type()) | (r.index() << 8);\n+      return ((int) r.type()) | (r.index_or_offset() << 8);\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    jint index = jdk_internal_foreign_abi_VMStorage::index(storage);\n+    jint index = jdk_internal_foreign_abi_VMStorage::index_or_offset(storage);\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-  os->print(\"{type=%d, index=%d, %s=%d}\", static_cast<int8_t>(_type), _index,\n-    is_stack() ? \"size\" : \"segment_mask\", is_stack() ? _size : _segment_mask);\n+  os->print(\"{type=%d, index=%d, %s=%d}\", static_cast<int8_t>(_type), _index_or_offset,\n+    is_stack() ? \"size\" : \"segment_mask\", _segment_mask_or_size);\n","filename":"src\/hotspot\/share\/prims\/vmstorage.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,6 +42,3 @@\n-  uint8_t _reserved;\n-  union {\n-    uint16_t _segment_mask;\n-    uint16_t _size;\n-  };\n-  uint32_t _index; \/\/ stack offset in bytes for stack storage\n+  \/\/ 1 byte of padding\n+  uint16_t _segment_mask_or_size;\n+  uint32_t _index_or_offset; \/\/ stack offset in bytes for stack storage\n@@ -50,0 +47,2 @@\n+  constexpr VMStorage(RegType type, uint16_t segment_mask_or_size, uint32_t index_or_offset)\n+    : _type(type), _segment_mask_or_size(segment_mask_or_size), _index_or_offset(index_or_offset) {};\n@@ -51,1 +50,1 @@\n-  constexpr VMStorage() : _type(INVALID_TYPE), _reserved(0), _segment_mask(0), _index(0) {};\n+  constexpr VMStorage() : _type(INVALID_TYPE), _segment_mask_or_size(0), _index_or_offset(0) {};\n@@ -56,4 +55,1 @@\n-    VMStorage result;\n-    result._type = type;\n-    result._segment_mask = segment_mask;\n-    result._index = index;\n+    VMStorage result(type, segment_mask, index);\n@@ -63,5 +59,2 @@\n-  constexpr static VMStorage stack_storage(uint16_t size, uint32_t index) {\n-    VMStorage result;\n-    result._type = stack_type();\n-    result._size = size;\n-    result._index = index;\n+  constexpr static VMStorage stack_storage(uint16_t size, uint32_t offset) {\n+    VMStorage result(stack_type(), size, offset);\n@@ -83,4 +76,7 @@\n-  RegType type() const { return _type; }\n-  uint16_t segment_mask() const { assert(is_reg(), \"must be reg\"); return _segment_mask; }\n-  uint16_t stack_size() const { assert(is_stack(), \"must be stack\"); return _size; }\n-  uint32_t index() const { assert(is_valid(), \"no index\"); return _index; }\n+  RegType type()              const { return _type; }\n+  \/\/ type specific accessors to make calling code more readable\n+  uint16_t segment_mask()     const { assert(is_reg(), \"must be reg\");     return _segment_mask_or_size; }\n+  uint16_t stack_size()       const { assert(is_stack(), \"must be stack\"); return _segment_mask_or_size; }\n+  uint32_t index()            const { assert(is_reg(), \"must be reg\");     return _index_or_offset; }\n+  uint32_t offset()           const { assert(is_stack(), \"must be stack\"); return _index_or_offset; }\n+  uint32_t index_or_offset()  const { assert(is_valid(), \"must be valid\"); return _index_or_offset; }\n@@ -97,4 +93,2 @@\n-    && a._index == b._index\n-    && (a.is_stack()\n-      ? a._size == b._size\n-      : a._segment_mask == b._segment_mask);\n+    && a._index_or_offset == b._index_or_offset\n+    && a._segment_mask_or_size == b._segment_mask_or_size;\n","filename":"src\/hotspot\/share\/prims\/vmstorageBase.inline.hpp","additions":18,"deletions":24,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+    \/**\n+     * Type of storage. e.g. stack, or which register type (GP, FP, vector)\n+     *\/\n@@ -31,0 +34,5 @@\n+\n+    \/**\n+     * The (on stack) size in bytes when type = stack, a register mask otherwise.\n+     * The register mask indicates which segments of a register are used.\n+     *\/\n@@ -32,1 +40,7 @@\n-    private final int index;\n+\n+    \/**\n+     * The index is either a register number within a type, or\n+     * a stack offset in bytes if type = stack.\n+     * (a particular platform might add a bias to this in generate code)\n+     *\/\n+    private final int indexOrOffset;\n@@ -36,1 +50,1 @@\n-    private VMStorage(byte type, short segmentMaskOrSize, int index, String debugName) {\n+    private VMStorage(byte type, short segmentMaskOrSize, int indexOrOffset, String debugName) {\n@@ -39,1 +53,1 @@\n-        this.index = index;\n+        this.indexOrOffset = indexOrOffset;\n@@ -59,2 +73,2 @@\n-    public int index() {\n-        return index;\n+    public int indexOrOffset() {\n+        return indexOrOffset;\n@@ -73,1 +87,1 @@\n-            && index == vmStorage.index\n+            && indexOrOffset == vmStorage.indexOrOffset\n@@ -79,1 +93,1 @@\n-        return Objects.hash(type, segmentMaskOrSize, index, debugName);\n+        return Objects.hash(type, segmentMaskOrSize, indexOrOffset, debugName);\n@@ -87,1 +101,1 @@\n-                \", index=\" + index +\n+                \", indexOrOffset=\" + indexOrOffset +\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/VMStorage.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"}]}