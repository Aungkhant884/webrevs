{"files":[{"patch":"@@ -90,1 +90,1 @@\n-                MemoryAccess.setAddressAtIndex(cargs, i, CSupport.toCString(args[i], scope).address());\n+                MemoryAccess.setAddressAtIndex(cargs, i, CSupport.toCString(args[i], scope));\n@@ -95,2 +95,2 @@\n-                    src.address(),\n-                    cargs == null ? MemoryAddress.NULL : cargs.address(),\n+                    src,\n+                    cargs == null ? MemoryAddress.NULL : cargs,\n@@ -100,1 +100,1 @@\n-                    outAddress.address()));\n+                    outAddress));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Index.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.foreign.Addressable;\n@@ -48,2 +49,2 @@\n-        void get(MemorySegment loc, MemoryAddress file,\n-                 MemoryAddress line, MemoryAddress column, MemoryAddress offset);\n+        void get(MemorySegment loc, Addressable file,\n+                 Addressable line, Addressable column, Addressable offset);\n@@ -59,1 +60,1 @@\n-            fn.get(loc, file.address(), line.address(), col.address(), offset.address());\n+            fn.get(loc, file, line, col, offset);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceLocation.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-            SaveError res = SaveError.valueOf(Index_h.clang_saveTranslationUnit(tu, pathStr.address(), 0));\n+            SaveError res = SaveError.valueOf(Index_h.clang_saveTranslationUnit(tu, pathStr, 0));\n@@ -92,2 +92,2 @@\n-                MemoryAccess.setAddress(start.asSlice(FILENAME_OFFSET), CSupport.toCString(inMemoryFiles[i].file, scope).address());\n-                MemoryAccess.setAddress(start.asSlice(CONTENTS_OFFSET), CSupport.toCString(inMemoryFiles[i].contents, scope).address());\n+                MemoryAccess.setAddress(start.asSlice(FILENAME_OFFSET), CSupport.toCString(inMemoryFiles[i].file, scope));\n+                MemoryAccess.setAddress(start.asSlice(CONTENTS_OFFSET), CSupport.toCString(inMemoryFiles[i].contents, scope));\n@@ -99,1 +99,1 @@\n-                        files == null ? MemoryAddress.NULL : files.address(),\n+                        files == null ? MemoryAddress.NULL : files,\n@@ -125,1 +125,1 @@\n-        Index_h.clang_tokenize(tu, range.range, p.address(), pCnt.address());\n+        Index_h.clang_tokenize(tu, range.range, p, pCnt);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-            return Index_h.clang_Type_getOffsetOf(type, cfname.address());\n+            return Index_h.clang_Type_getOffsetOf(type, cfname);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}