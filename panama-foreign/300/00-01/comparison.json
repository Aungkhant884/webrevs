{"files":[{"patch":"@@ -28,25 +28,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n@@ -72,0 +47,1 @@\n+            \/\/ FIXME Revisit this logic for pointer to function types\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/AnnotationWriter.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-    private final String anno;\n-    private final String arrayAnno;\n+    private final String structAnno;\n+    private final String structArrayAnno;\n@@ -42,1 +42,1 @@\n-            ConstantHelper constantHelper, String anno, String arrayAnno) {\n+            ConstantHelper constantHelper, String structAnno, String structArrayAnno) {\n@@ -47,2 +47,2 @@\n-        this.anno = anno;\n-        this.arrayAnno = arrayAnno;\n+        this.structAnno = structAnno;\n+        this.structArrayAnno = structArrayAnno;\n@@ -148,1 +148,1 @@\n-        append(PUB_MODS + \" \" + anno + \" \" + type.getSimpleName() + \" \" + javaName + \"$get(\" + this.anno + \" MemorySegment seg) {\\n\");\n+        append(PUB_MODS + \" \" + anno + \" \" + type.getSimpleName() + \" \" + javaName + \"$get(\" + this.structAnno + \" MemorySegment seg) {\\n\");\n@@ -166,1 +166,1 @@\n-        append(PUB_MODS + \"void \" + javaName + \"$set(\" + this.anno + \" \" + param + \", \" + anno + \" \" + type.getSimpleName() + \" x) {\\n\");\n+        append(PUB_MODS + \"void \" + javaName + \"$set(\" + this.structAnno + \" \" + param + \", \" + anno + \" \" + type.getSimpleName() + \" x) {\\n\");\n@@ -208,1 +208,1 @@\n-        append(anno + \" MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\\n\");\n+        append(structAnno + \" MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\\n\");\n@@ -216,1 +216,1 @@\n-        append(anno + \" MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\\n\");\n+        append(structAnno + \" MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\\n\");\n@@ -224,1 +224,1 @@\n-        append(arrayAnno + \" MemorySegment allocateArray(int len) {\\n\");\n+        append(structArrayAnno + \" MemorySegment allocateArray(int len) {\\n\");\n@@ -237,1 +237,1 @@\n-        append(arrayAnno + \" MemorySegment allocateArray(int len, NativeScope scope) {\\n\");\n+        append(structArrayAnno + \" MemorySegment allocateArray(int len, NativeScope scope) {\\n\");\n@@ -249,1 +249,1 @@\n-        String params = this.anno + \" \" + MemorySegment.class.getSimpleName() + \" seg, long index\";\n+        String params = this.structAnno + \" \" + MemorySegment.class.getSimpleName() + \" seg, long index\";\n@@ -265,1 +265,1 @@\n-        String params = this.anno + \" \" + MemorySegment.class.getSimpleName() + \" seg, long index, \" + anno + \" \" + type.getSimpleName() + \" x\";\n+        String params = this.structAnno + \" \" + MemorySegment.class.getSimpleName() + \" seg, long index, \" + anno + \" \" + type.getSimpleName() + \" x\";\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.foreign.MemoryAddress;\n@@ -52,1 +53,0 @@\n-            Class<?> headerClass = loader.loadClass(\"test8252634_h\");\n@@ -55,8 +55,4 @@\n-            Method make = findMethod(headerClass, \"make\", int.class, int.class);\n-            Parameter[] params = make.getParameters();\n-            checkAnnotation(params[0].getAnnotatedType(), \"int\");\n-            checkAnnotation(params[1].getAnnotatedType(), \"int\");\n-            checkAnnotation(make.getAnnotatedReturnType(), \"struct Point*\");\n-            Method func = findFirstMethod(headerClass, \"func\");\n-            params = func.getParameters();\n-            checkAnnotation(params[0].getAnnotatedType(), \"int(*)(int)\");\n+\n+            Class<?> headerClass = loader.loadClass(\"test8252634_h\");\n+            checkGlobalFunctions(headerClass);\n+            checkGlobalVariables(headerClass);\n@@ -65,14 +61,3 @@\n-            Method xGetter = findMethod(pointClass, \"x$get\", MemorySegment.class);\n-            checkAnnotation(xGetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n-            checkAnnotation(xGetter.getAnnotatedReturnType(), \"int\");\n-            Method yGetter = findMethod(pointClass, \"y$get\", MemorySegment.class);\n-            checkAnnotation(yGetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n-            checkAnnotation(yGetter.getAnnotatedReturnType(), \"int\");\n-            Method xSetter = findMethod(pointClass, \"x$set\", MemorySegment.class, int.class);\n-            checkAnnotation(xSetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n-            checkAnnotation(xSetter.getParameters()[1].getAnnotatedType(), \"int\");\n-            Method ySetter = findMethod(pointClass, \"y$set\", MemorySegment.class, int.class);\n-            checkAnnotation(ySetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n-            checkAnnotation(ySetter.getParameters()[1].getAnnotatedType(), \"int\");\n-            Method allocate = findMethod(pointClass, \"allocate\");\n-            checkAnnotation(allocate.getAnnotatedReturnType(), \"struct Point\");\n+            checkPointGetters(pointClass);\n+            checkPointSetters(pointClass);\n+            checkPointAllocate(pointClass);\n@@ -84,0 +69,55 @@\n+    private void checkGlobalFunctions(Class<?> headerClass) throws Throwable {\n+        Method make = findMethod(headerClass, \"make\", int.class, int.class);\n+        Parameter[] params = make.getParameters();\n+        checkAnnotation(params[0].getAnnotatedType(), \"int\");\n+        checkAnnotation(params[1].getAnnotatedType(), \"int\");\n+        checkAnnotation(make.getAnnotatedReturnType(), \"struct Point*\");\n+        Method func = findFirstMethod(headerClass, \"func\");\n+        params = func.getParameters();\n+        checkAnnotation(params[0].getAnnotatedType(), \"int(*)(int)\");\n+    }\n+\n+    private void checkGlobalVariables(Class<?> headerClass) throws Throwable {\n+        Method pGetter = findMethod(headerClass, \"p$get\");\n+        checkAnnotation(pGetter.getAnnotatedReturnType(), \"int_ptr\");\n+        Method pSetter = findMethod(headerClass, \"p$set\", MemoryAddress.class);\n+        checkAnnotation(pSetter.getParameters()[0].getAnnotatedType(), \"int_ptr\");\n+    }\n+\n+    private void checkPointGetters(Class<?> pointClass) throws Throwable {\n+        Method xGetter = findMethod(pointClass, \"x$get\", MemorySegment.class);\n+        checkAnnotation(xGetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(xGetter.getAnnotatedReturnType(), \"int\");\n+        Method yGetter = findMethod(pointClass, \"y$get\", MemorySegment.class);\n+        checkAnnotation(yGetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(yGetter.getAnnotatedReturnType(), \"int\");\n+        Method xIndexedGetter = findMethod(pointClass, \"x$get\", MemorySegment.class, long.class);\n+        checkAnnotation(xIndexedGetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(xIndexedGetter.getAnnotatedReturnType(), \"int\");\n+        Method yIndexedGetter = findMethod(pointClass, \"y$get\", MemorySegment.class, long.class);\n+        checkAnnotation(yIndexedGetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(yIndexedGetter.getAnnotatedReturnType(), \"int\");\n+    }\n+\n+    private void checkPointSetters(Class<?> pointClass) throws Throwable {\n+        Method xSetter = findMethod(pointClass, \"x$set\", MemorySegment.class, int.class);\n+        checkAnnotation(xSetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(xSetter.getParameters()[1].getAnnotatedType(), \"int\");\n+        Method ySetter = findMethod(pointClass, \"y$set\", MemorySegment.class, int.class);\n+        checkAnnotation(ySetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(ySetter.getParameters()[1].getAnnotatedType(), \"int\");\n+        Method xIndexedSetter = findMethod(pointClass, \"x$set\", MemorySegment.class, long.class, int.class);\n+        checkAnnotation(xIndexedSetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(xIndexedSetter.getParameters()[2].getAnnotatedType(), \"int\");\n+        Method yIndexedSetter = findMethod(pointClass, \"y$set\", MemorySegment.class, long.class, int.class);\n+        checkAnnotation(yIndexedSetter.getParameters()[0].getAnnotatedType(), \"struct Point\");\n+        checkAnnotation(yIndexedSetter.getParameters()[2].getAnnotatedType(), \"int\");\n+    }\n+\n+    private void checkPointAllocate(Class<?> pointClass) throws Throwable {\n+        Method allocate = findMethod(pointClass, \"allocate\");\n+        checkAnnotation(allocate.getAnnotatedReturnType(), \"struct Point\");\n+        Method allocateArray = findMethod(pointClass, \"allocateArray\", int.class);\n+        checkAnnotation(allocateArray.getAnnotatedReturnType(), \"struct Point[]\");\n+    }\n+\n","filename":"test\/jdk\/tools\/jextract\/Test8252634.java","additions":63,"deletions":23,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+typedef int* int_ptr;\n+int_ptr p;\n+\n","filename":"test\/jdk\/tools\/jextract\/test8252634.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}