{"files":[{"patch":"@@ -171,1 +171,2 @@\n-     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch.\n+     * @throws IllegalArgumentException in the case of a method type and function descriptor mismatch, or if the symbol\n+     *                                  is {@link MemoryAddress#NULL}\n@@ -185,0 +186,3 @@\n+     * The returned method handle will throw an {@link IllegalArgumentException} if the target address passed to it is\n+     * {@link MemoryAddress#NULL}, or a {@link NullPointerException} if the target address is {@code null}.\n+     * <p>\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -34,0 +33,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -44,6 +44,0 @@\n-    private static void checkSymbol(Addressable symbol) {\n-        MemoryAddress symbolAddr = symbol.address();\n-        if (symbolAddr.equals(MemoryAddress.NULL))\n-            throw new IllegalArgumentException(\"Symbol is NULL: \" + symbolAddr);\n-    }\n-\n@@ -53,2 +47,1 @@\n-        Objects.requireNonNull(symbol);\n-        checkSymbol(symbol);\n+        SharedUtils.checkSymbol(symbol);\n@@ -61,2 +54,1 @@\n-        Objects.requireNonNull(symbol);\n-        checkSymbol(symbol);\n+        SharedUtils.checkSymbol(symbol);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractCLinker.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -176,4 +176,1 @@\n-        MemoryAddress ma = addr.address();\n-        if (ma.equals(MemoryAddress.NULL)) {\n-            throw new IllegalArgumentException(\"Target address is NULL: \" + ma);\n-        }\n+        MemoryAddress ma = SharedUtils.checkSymbol(addr);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import java.util.Objects;\n@@ -415,0 +416,8 @@\n+    public static MemoryAddress checkSymbol(Addressable symbol) {\n+        Objects.requireNonNull(symbol);\n+        MemoryAddress symbolAddr = symbol.address();\n+        if (symbolAddr.equals(MemoryAddress.NULL))\n+            throw new IllegalArgumentException(\"Symbol is NULL: \" + symbolAddr);\n+        return symbolAddr;\n+    }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    private static final MemoryAddress dummyTarget = MemoryAddress.NULL;\n+    private static final MemoryAddress dummyTarget = MemoryAddress.ofLong(1);\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,5 @@\n+    @Test(expectedExceptions = NullPointerException.class)\n+    public void testNullTarget() throws Throwable {\n+        int x = (int) func.invokeExact((Addressable) null);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/virtual\/TestVirtualCalls.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}