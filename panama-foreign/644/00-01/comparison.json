{"files":[{"patch":"@@ -1452,1 +1452,2 @@\n-        return (char)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        return (char)layout.accessHandle().get(this, index * layout.byteSize());\n@@ -1474,1 +1475,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        layout.accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1495,1 +1497,2 @@\n-        return (short)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        return (short)layout.accessHandle().get(this, index * layout.byteSize());\n@@ -1517,1 +1520,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        layout.accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1538,1 +1542,2 @@\n-        return (int)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        return (int)layout.accessHandle().get(this, index * layout.byteSize());\n@@ -1560,1 +1565,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        layout.accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1581,1 +1587,2 @@\n-        return (float)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        return (float)layout.accessHandle().get(this, index * layout.byteSize());\n@@ -1603,1 +1610,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        layout.accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1624,1 +1632,2 @@\n-        return (long)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        return (long)layout.accessHandle().get(this, index * layout.byteSize());\n@@ -1646,1 +1655,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        layout.accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1667,1 +1677,2 @@\n-        return (double)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        return (double)layout.accessHandle().get(this, index * layout.byteSize());\n@@ -1689,1 +1700,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        layout.accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1710,1 +1722,2 @@\n-        return (MemoryAddress)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        return (MemoryAddress)layout.accessHandle().get(this, index * layout.byteSize());\n@@ -1732,1 +1745,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value.address());\n+        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n+        layout.accessHandle().set(this, index * layout.byteSize(), value.address());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -393,2 +393,1 @@\n-            long checkedOffset = Objects.checkIndex(offset, this.length);\n-            Objects.checkIndex(checkedOffset, this.length - length + 1);\n+            Objects.checkIndex(offset, this.length - length + 1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -154,6 +154,0 @@\n-    @ForceInline\n-    public static long scaleOffset(MemorySegment segment, long index, long size) {\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return index * size;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}