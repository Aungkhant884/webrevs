{"files":[{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.invoke;\n+\n+\/**\n+ * Base class for memory segment var handle view implementations.\n+ *\/\n+<<<<<<< HEAD:src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleBase.java\n+abstract sealed class MemoryAccessVarHandleBase extends VarHandle permits\n+        MemoryAccessVarHandleByteHelper,\n+        MemoryAccessVarHandleCharHelper,\n+        MemoryAccessVarHandleDoubleHelper,\n+        MemoryAccessVarHandleFloatHelper,\n+        MemoryAccessVarHandleIntHelper,\n+        MemoryAccessVarHandleLongHelper,\n+        MemoryAccessVarHandleShortHelper\n+{\n+=======\n+abstract class VarHandleSegmentViewBase extends VarHandle {\n+>>>>>>> 52ccacbb546c3e829f84074beb71140c82a03e4a:src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleSegmentViewBase.java\n+\n+    \/** endianness **\/\n+    final boolean be;\n+\n+    \/** access size (in bytes, computed from var handle carrier type) **\/\n+    final long length;\n+\n+    \/** alignment constraint (in bytes, expressed as a bit mask) **\/\n+    final long alignmentMask;\n+\n+    VarHandleSegmentViewBase(VarForm form, boolean be, long length, long alignmentMask, boolean exact) {\n+        super(form, exact);\n+        this.be = be;\n+        this.length = length;\n+        this.alignmentMask = alignmentMask;\n+    }\n+\n+    static IllegalArgumentException newIllegalArgumentExceptionForMisalignedAccess(long address) {\n+        return new IllegalArgumentException(\"Misaligned access at address: \" + address);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleSegmentViewBase.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}