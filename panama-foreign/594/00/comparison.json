{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import jdk.incubator.foreign.Addressable;\n@@ -32,0 +31,1 @@\n+import jdk.incubator.foreign.NativeSymbol;\n@@ -33,0 +33,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -39,0 +40,2 @@\n+import static jdk.internal.clang.LibClang.IMPLICIT_ALLOCATOR;\n+\n@@ -76,4 +79,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(\n-                Index_h.clang_getCursorSpelling(scope, cursor));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+            Index_h.clang_getCursorSpelling(allocator, cursor));\n@@ -83,4 +84,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(\n-                Index_h.clang_getCursorUSR(scope, cursor));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+                Index_h.clang_getCursorUSR(allocator, cursor));\n@@ -90,4 +89,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(\n-                Index_h.clang_getCursorPrettyPrinted(scope, cursor, policy.ptr()));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+            Index_h.clang_getCursorPrettyPrinted(allocator, cursor, policy.ptr()));\n@@ -103,4 +100,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(\n-                Index_h.clang_getCursorDisplayName(scope, cursor));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+                Index_h.clang_getCursorDisplayName(allocator, cursor));\n@@ -114,1 +109,1 @@\n-        return new Type(Index_h.clang_getCursorType(ResourceScope.newConfinedScope(), cursor));\n+        return new Type(Index_h.clang_getCursorType(IMPLICIT_ALLOCATOR, cursor));\n@@ -118,1 +113,1 @@\n-        return new Type(Index_h.clang_getEnumDeclIntegerType(ResourceScope.newConfinedScope(), cursor));\n+        return new Type(Index_h.clang_getEnumDeclIntegerType(IMPLICIT_ALLOCATOR, cursor));\n@@ -122,1 +117,1 @@\n-        return new Cursor(Index_h.clang_getCursorDefinition(ResourceScope.newConfinedScope(), cursor));\n+        return new Cursor(Index_h.clang_getCursorDefinition(IMPLICIT_ALLOCATOR, cursor));\n@@ -126,1 +121,1 @@\n-        MemorySegment loc = Index_h.clang_getCursorLocation(ResourceScope.newConfinedScope(), cursor);\n+        MemorySegment loc = Index_h.clang_getCursorLocation(IMPLICIT_ALLOCATOR, cursor);\n@@ -128,1 +123,2 @@\n-            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(scope)) != 0) {\n+            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(\n+                    SegmentAllocator.nativeAllocator(scope))) != 0) {\n@@ -136,1 +132,1 @@\n-        MemorySegment range = Index_h.clang_getCursorExtent(ResourceScope.newConfinedScope(), cursor);\n+        MemorySegment range = Index_h.clang_getCursorExtent(IMPLICIT_ALLOCATOR, cursor);\n@@ -148,1 +144,1 @@\n-        return new Cursor(Index_h.clang_Cursor_getArgument(ResourceScope.newConfinedScope(), cursor, idx));\n+        return new Cursor(Index_h.clang_Cursor_getArgument(IMPLICIT_ALLOCATOR, cursor, idx));\n@@ -185,1 +181,2 @@\n-        return new Cursor(Index_h.clang_getCursorReferenced(ResourceScope.newConfinedScope(), cursor));\n+        return new Cursor(Index_h.clang_getCursorReferenced(\n+                IMPLICIT_ALLOCATOR, cursor));\n@@ -190,2 +187,2 @@\n-        private static final Addressable callback = CXCursorVisitor.allocate((c, p, d) -> {\n-            MemorySegment copy = MemorySegment.allocateNative(c.byteSize(), ResourceScope.newConfinedScope());\n+        private static final NativeSymbol callback = CXCursorVisitor.allocate((c, p, d) -> {\n+            MemorySegment copy = MemorySegment.allocateNative(c.byteSize(), ResourceScope.newImplicitScope());\n@@ -217,4 +214,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(\n-                Index_h.clang_Cursor_getMangling(scope, cursor));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+                Index_h.clang_Cursor_getMangling(allocator, cursor));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Cursor.java","additions":26,"deletions":31,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -32,0 +33,2 @@\n+import static jdk.internal.clang.LibClang.IMPLICIT_ALLOCATOR;\n+\n@@ -76,1 +79,1 @@\n-        return new SourceLocation(Index_h.clang_getDiagnosticLocation(ResourceScope.newConfinedScope(), ptr));\n+        return new SourceLocation(Index_h.clang_getDiagnosticLocation(IMPLICIT_ALLOCATOR, ptr));\n@@ -80,4 +83,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-           return LibClang.CXStrToString(\n-                Index_h.clang_getDiagnosticSpelling(scope, ptr));\n-        }\n+       return LibClang.CXStrToString(allocator -> Index_h.clang_getDiagnosticSpelling(allocator, ptr));\n@@ -92,5 +92,3 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(\n-                Index_h.clang_formatDiagnostic(scope, ptr,\n-                    Index_h.clang_defaultDiagnosticDisplayOptions()));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+            Index_h.clang_formatDiagnostic(allocator, ptr,\n+                Index_h.clang_defaultDiagnosticDisplayOptions()));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Diagnostic.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -86,2 +86,3 @@\n-            MemorySegment src = scope.allocateUtf8String(file);\n-            MemorySegment cargs = args.length == 0 ? null : scope.allocateArray(C_POINTER, args.length);\n+            SegmentAllocator allocator = SegmentAllocator.newNativeArena(scope);\n+            MemorySegment src = allocator.allocateUtf8String(file);\n+            MemorySegment cargs = args.length == 0 ? null : allocator.allocateArray(C_POINTER, args.length);\n@@ -89,1 +90,1 @@\n-                cargs.set(C_POINTER, i * C_POINTER.byteSize(), scope.allocateUtf8String(args[i]));\n+                cargs.set(C_POINTER, i * C_POINTER.byteSize(), allocator.allocateUtf8String(args[i]));\n@@ -91,1 +92,1 @@\n-            MemorySegment outAddress = scope.allocate(C_POINTER);\n+            MemorySegment outAddress = allocator.allocate(C_POINTER);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Index.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -38,0 +39,2 @@\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n@@ -47,0 +50,3 @@\n+    final static SegmentAllocator IMPLICIT_ALLOCATOR =\n+            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+\n@@ -48,1 +54,1 @@\n-            ResourceScope.newConfinedScope().allocateUtf8String(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY);\n+            IMPLICIT_ALLOCATOR.allocateUtf8String(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY);\n@@ -74,1 +80,2 @@\n-    public static String CXStrToString(MemorySegment cxstr) {\n+    public static String CXStrToString(Function<SegmentAllocator, MemorySegment> segmentSupplier) {\n+        MemorySegment cxstr = segmentSupplier.apply(stringAllocator);\n@@ -81,0 +88,9 @@\n+    \/**\n+     * This is an allocator for temporary CXString structs. CXStrToString needs to save the CXString somewhere,\n+     * so that we can extract a Java string out of it. Once that's done, we can dispose the CXString, and the\n+     * associated segment. Since jextract is single-threaded, we can use a prefix allocator, to speed up string\n+     * conversion. The size of the prefix segment is set to 256, which should be enough to hold a CXString.\n+     *\/\n+    private final static SegmentAllocator stringAllocator = SegmentAllocator.prefixAllocator(\n+            MemorySegment.allocateNative(256, 8, ResourceScope.newImplicitScope()));\n+\n@@ -82,3 +98,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return CXStrToString(Index_h.clang_getClangVersion(scope));\n-        }\n+        return CXStrToString(Index_h::clang_getClangVersion);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/LibClang.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -73,3 +74,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(Index_h.clang_getFileName(scope, fname));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+                Index_h.clang_getFileName(allocator, fname));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceLocation.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import static jdk.internal.clang.LibClang.IMPLICIT_ALLOCATOR;\n+\n@@ -40,1 +42,1 @@\n-        MemorySegment loc = Index_h.clang_getRangeStart(ResourceScope.newConfinedScope(), range);\n+        MemorySegment loc = Index_h.clang_getRangeStart(IMPLICIT_ALLOCATOR, range);\n@@ -45,1 +47,1 @@\n-        MemorySegment loc = Index_h.clang_getRangeEnd(ResourceScope.newConfinedScope(), range);\n+        MemorySegment loc = Index_h.clang_getRangeEnd(IMPLICIT_ALLOCATOR, range);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceRange.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.incubator.foreign.CLinker;\n@@ -47,0 +46,2 @@\n+import static jdk.internal.clang.LibClang.IMPLICIT_ALLOCATOR;\n+\n@@ -56,1 +57,1 @@\n-        return new Cursor(Index_h.clang_getTranslationUnitCursor(ResourceScope.newConfinedScope(), tu));\n+        return new Cursor(Index_h.clang_getTranslationUnitCursor(IMPLICIT_ALLOCATOR, tu));\n@@ -72,1 +73,2 @@\n-            MemorySegment pathStr = scope.allocateUtf8String(path.toAbsolutePath().toString());\n+            var allocator = SegmentAllocator.nativeAllocator(scope);\n+            MemorySegment pathStr = allocator.allocateUtf8String(path.toAbsolutePath().toString());\n@@ -93,0 +95,1 @@\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -95,1 +98,1 @@\n-                    scope.allocateArray(CXUnsavedFile.$LAYOUT(), inMemoryFiles.length);\n+                    allocator.allocateArray(CXUnsavedFile.$LAYOUT(), inMemoryFiles.length);\n@@ -98,2 +101,2 @@\n-                start.set(C_POINTER, FILENAME_OFFSET, scope.allocateUtf8String(inMemoryFiles[i].file));\n-                start.set(C_POINTER, CONTENTS_OFFSET, scope.allocateUtf8String(inMemoryFiles[i].contents));\n+                start.set(C_POINTER, FILENAME_OFFSET, allocator.allocateUtf8String(inMemoryFiles[i].file));\n+                start.set(C_POINTER, CONTENTS_OFFSET, allocator.allocateUtf8String(inMemoryFiles[i].contents));\n@@ -180,8 +183,7 @@\n-                try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-                    MemorySegment s = Index_h.clang_getTokenSpelling(scope, tu, getTokenSegment(i));\n-                    sb.append(\"Token[\");\n-                    sb.append(i);\n-                    sb.append(\"]=\");\n-                    sb.append(LibClang.CXStrToString(s));\n-                    sb.append(\"\\n\");\n-                }\n+                sb.append(\"Token[\");\n+                sb.append(i);\n+                sb.append(\"]=\");\n+                int pos = i;\n+                sb.append(LibClang.CXStrToString(allocator ->\n+                        Index_h.clang_getTokenSpelling(allocator, tu, getTokenSegment(pos))));\n+                sb.append(\"\\n\");\n@@ -205,5 +207,2 @@\n-            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-                MemorySegment s = Index_h.clang_getTokenSpelling(\n-                    scope, tu, token);\n-                return LibClang.CXStrToString(s);\n-            }\n+            return LibClang.CXStrToString(allocator ->\n+                    Index_h.clang_getTokenSpelling(allocator, tu, token));\n@@ -214,1 +213,1 @@\n-                ResourceScope.newConfinedScope(), tu, token));\n+                IMPLICIT_ALLOCATOR, tu, token));\n@@ -218,1 +217,1 @@\n-            return new SourceRange(Index_h.clang_getTokenExtent(ResourceScope.newConfinedScope(),\n+            return new SourceRange(Index_h.clang_getTokenExtent(IMPLICIT_ALLOCATOR,\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.incubator.foreign.CLinker;\n@@ -36,0 +35,2 @@\n+import static jdk.internal.clang.LibClang.IMPLICIT_ALLOCATOR;\n+\n@@ -51,1 +52,1 @@\n-        return new Type(Index_h.clang_getResultType(ResourceScope.newConfinedScope(), type));\n+        return new Type(Index_h.clang_getResultType(IMPLICIT_ALLOCATOR, type));\n@@ -57,1 +58,1 @@\n-        return new Type(Index_h.clang_getArgType(ResourceScope.newConfinedScope(), type, idx));\n+        return new Type(Index_h.clang_getArgType(IMPLICIT_ALLOCATOR, type, idx));\n@@ -89,1 +90,1 @@\n-        return new Type(Index_h.clang_getPointeeType(ResourceScope.newConfinedScope(), type));\n+        return new Type(Index_h.clang_getPointeeType(IMPLICIT_ALLOCATOR, type));\n@@ -94,1 +95,1 @@\n-        return new Type(Index_h.clang_getElementType(ResourceScope.newConfinedScope(), type));\n+        return new Type(Index_h.clang_getElementType(IMPLICIT_ALLOCATOR, type));\n@@ -104,1 +105,2 @@\n-            MemorySegment cfname = scope.allocateUtf8String(fieldName);\n+            var allocator = SegmentAllocator.nativeAllocator(scope);\n+            MemorySegment cfname = allocator.allocateUtf8String(fieldName);\n@@ -127,1 +129,1 @@\n-        return new Type(Index_h.clang_getCanonicalType(ResourceScope.newConfinedScope(), type));\n+        return new Type(Index_h.clang_getCanonicalType(IMPLICIT_ALLOCATOR, type));\n@@ -149,3 +151,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            return LibClang.CXStrToString(Index_h.clang_getTypeSpelling(scope, type));\n-        }\n+        return LibClang.CXStrToString(allocator ->\n+                Index_h.clang_getTypeSpelling(allocator, type));\n@@ -178,1 +179,1 @@\n-        return new Cursor(Index_h.clang_getTypeDeclaration(ResourceScope.newConfinedScope(), type));\n+        return new Cursor(Index_h.clang_getTypeDeclaration(IMPLICIT_ALLOCATOR, type));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Type.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-        append(\" = ResourceScope.globalScope().allocateUtf8String(\\\"\");\n+        append(\" = RuntimeHelper.CONSTANT_ALLOCATOR.allocateUtf8String(\\\"\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ConstantBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,4 @@\n+            if (functionInfo.methodType().returnType().equals(MemorySegment.class)) {\n+                \/\/ emit scoped overload\n+                emitFunctionWrapperScopedOverload(javaName, functionInfo);\n+            }\n@@ -154,0 +158,25 @@\n+    private void emitFunctionWrapperScopedOverload(String javaName, FunctionInfo functionInfo) {\n+        incrAlign();\n+        indent();\n+        append(MEMBER_MODS + \" \");\n+        List<String> paramNames = new ArrayList<>(functionInfo.parameterNames().get());\n+        paramNames.add(0, \"scope\");\n+        List<String> pExprs = emitFunctionWrapperDecl(javaName,\n+        functionInfo.methodType().insertParameterTypes(0, ResourceScope.class),\n+        functionInfo.isVarargs(),\n+        paramNames);\n+        String param = pExprs.remove(0);\n+        pExprs.add(0, \"SegmentAllocator.nativeAllocator(\" + param + \")\");\n+        append(\" {\\n\");\n+        incrAlign();\n+        indent();\n+        if (!functionInfo.methodType().returnType().equals(void.class)) {\n+            append(\"return \");\n+        }\n+        append(javaName + \"(\" + String.join(\", \", pExprs) + \");\\n\");\n+        decrAlign();\n+        indent();\n+        append(\"}\\n\");\n+        decrAlign();\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -90,0 +90,2 @@\n+            emitScopeAllocate();\n+            emitScopeAllocateArray();\n@@ -251,0 +253,22 @@\n+    private void emitScopeAllocate() {\n+        incrAlign();\n+        indent();\n+        append(MEMBER_MODS);\n+        append(\" MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\\n\");\n+        decrAlign();\n+    }\n+\n+    private void emitScopeAllocateArray() {\n+        incrAlign();\n+        indent();\n+        append(MEMBER_MODS);\n+        append(\" MemorySegment allocateArray(int len, ResourceScope scope) {\\n\");\n+        incrAlign();\n+        indent();\n+        append(\"return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\\n\");\n+        decrAlign();\n+        indent();\n+        append(\"}\\n\");\n+        decrAlign();\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+    final static SegmentAllocator CONSTANT_ALLOCATOR =\n+            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-            var addr = scope.allocate(C_INT, 12);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n+            var addr = allocator.allocate(C_INT, 12);\n@@ -53,1 +54,1 @@\n-            addr = scope.allocate(C_DOUBLE, 12.0);\n+            addr = allocator.allocate(C_DOUBLE, 12.0);\n@@ -59,1 +60,1 @@\n-            addr = scope.allocateArray(C_INT, intArray);\n+            addr = allocator.allocateArray(C_INT, intArray);\n@@ -66,1 +67,1 @@\n-            addr = scope.allocateArray(C_DOUBLE, dblArray);\n+            addr = allocator.allocateArray(C_DOUBLE, dblArray);\n@@ -76,3 +77,3 @@\n-            var dest = scope.allocateArray(C_CHAR, 12);\n-            dest.copyFrom(scope.allocateUtf8String(\"hello \"));\n-            var src = scope.allocateUtf8String(\"world\");\n+            var dest = allocator.allocateArray(C_CHAR, 12);\n+            dest.copyFrom(allocator.allocateUtf8String(\"hello \"));\n+            var src = allocator.allocateUtf8String(\"world\");\n","filename":"test\/jdk\/tools\/jextract\/test8241925\/LibTest8241925Test.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n-            var addr = scope.allocate(mysize_t, 0L);\n+            var allocator = SegmentAllocator.nativeAllocator(scope);\n+            var addr = allocator.allocate(mysize_t, 0L);\n","filename":"test\/jdk\/tools\/jextract\/test8244412\/LibTest8244412Test.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -55,1 +56,2 @@\n-            MemorySegment s = MemorySegment.allocateNative(1024, scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n+            MemorySegment s = allocator.allocate(1024);\n@@ -57,1 +59,1 @@\n-                    scope.allocateUtf8String(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n+                    allocator.allocateUtf8String(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n","filename":"test\/jdk\/tools\/jextract\/test8244959\/Test8244959.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-            var allocator = SegmentAllocator.arenaBounded(C_POINTER.byteSize(), scope);\n+            var allocator = SegmentAllocator.newNativeArena(C_POINTER.byteSize(), scope);\n","filename":"test\/jdk\/tools\/jextract\/test8246341\/LibTest8246341Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -56,1 +57,2 @@\n-            MemorySegment s = MemorySegment.allocateNative(1024, scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n+            MemorySegment s = allocator.allocate(1024);\n@@ -63,1 +65,1 @@\n-            my_vsprintf(s, scope.allocateUtf8String(\"%hhd %.2f %lld %lld\"), vaList);\n+            my_vsprintf(s, allocator.allocateUtf8String(\"%hhd %.2f %lld %lld\"), vaList);\n","filename":"test\/jdk\/tools\/jextract\/test8252016\/Test8252016.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+            var allocator = SegmentAllocator.nativeAllocator(scope);\n@@ -58,1 +59,1 @@\n-            MemorySegment seg = scope.allocateArray(C_INT, array);\n+            MemorySegment seg = allocator.allocateArray(C_INT, array);\n","filename":"test\/jdk\/tools\/jextract\/test8252121\/Test8252121.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}