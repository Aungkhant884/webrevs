{"files":[{"patch":"@@ -34,2 +34,2 @@\n- * The {@link Addressable} type is used by the {@link CLinker C linker} to model the types of\n- * {@link CLinker#downcallHandle(FunctionDescriptor) downcall handle} parameters that must be passed <em>by reference<\/em>\n+ * The {@link Addressable} type is used by the {@linkplain CLinker C linker} to model the types of\n+ * {@linkplain CLinker#downcallHandle(FunctionDescriptor) downcall handle} parameters that must be passed <em>by reference<\/em>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Addressable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown.<\/p>\n+ * elements to a method in this class causes a {@link NullPointerException} to be thrown.<\/p>\n@@ -106,1 +106,1 @@\n- * when no longer required, they can be {@link MemorySession#close() released}, via their associated {@linkplain MemorySession session}.\n+ * when no longer required, they can be {@linkplain MemorySession#close() released}, via their associated {@linkplain MemorySession session}.\n@@ -120,1 +120,1 @@\n- *     <li>The invocation occurs in same thread as the one {@link MemorySession#ownerThread() owning} the memory session of {@code R},\n+ *     <li>The invocation occurs in same thread as the one {@linkplain MemorySession#ownerThread() owning} the memory session of {@code R},\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/CLinker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * For instance, to read an int from a segment, using {@link ByteOrder#nativeOrder() default endianness}, the following code can be used:\n+ * For instance, to read an int from a segment, using {@linkplain ByteOrder#nativeOrder() default endianness}, the following code can be used:\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryAddress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-     * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown.<\/p>\n+     * elements to a method in this class causes a {@link NullPointerException} to be thrown.<\/p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n- * Memory segments are associated with a {@link MemorySegment#session() memory session}. As for all resources associated\n+ * Memory segments are associated with a {@linkplain MemorySegment#session() memory session}. As for all resources associated\n@@ -94,1 +94,1 @@\n- * For instance, to read an int from a segment, using {@link ByteOrder#nativeOrder() default endianness}, the following code can be used:\n+ * For instance, to read an int from a segment, using {@linkplain ByteOrder#nativeOrder() default endianness}, the following code can be used:\n@@ -100,1 +100,1 @@\n- * If the value to be read is stored in memory using {@link ByteOrder#BIG_ENDIAN big-endian} encoding, the dereference operation\n+ * If the value to be read is stored in memory using {@linkplain ByteOrder#BIG_ENDIAN big-endian} encoding, the dereference operation\n@@ -136,1 +136,1 @@\n- * Memory segments support <em>slicing<\/em>. A memory segment can be used to {@link MemorySegment#asSlice(long, long) obtain}\n+ * Memory segments support <em>slicing<\/em>. A memory segment can be used to {@linkplain MemorySegment#asSlice(long, long) obtain}\n@@ -220,1 +220,1 @@\n- * full spatial, temporal and confinement bounds. To do this, clients can {@link #ofAddress(MemoryAddress, long, MemorySession) obtain}\n+ * full spatial, temporal and confinement bounds. To do this, clients can {@linkplain #ofAddress(MemoryAddress, long, MemorySession) obtain}\n@@ -346,1 +346,1 @@\n-     * derived from a direct {@link java.nio.ByteBuffer} using the {@link #ofByteBuffer(ByteBuffer)} factory,\n+     * derived from a {@linkplain ByteBuffer#allocateDirect(int) direct byte buffer} using the {@link #ofByteBuffer(ByteBuffer)} factory,\n@@ -367,1 +367,1 @@\n-     * {@link #isNative() native} segment to overlap with a heap segment; in\n+     * {@linkplain #isNative() native} segment to overlap with a heap segment; in\n@@ -713,2 +713,2 @@\n-     * If the buffer is {@link ByteBuffer#isReadOnly() read-only}, the resulting segment will also be\n-     * {@link ByteBuffer#isReadOnly() read-only}. The memory session associated with this segment can either be the\n+     * If the buffer is {@linkplain ByteBuffer#isReadOnly() read-only}, the resulting segment will also be\n+     * {@linkplain ByteBuffer#isReadOnly() read-only}. The memory session associated with this segment can either be the\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * When a memory session is closed, it is no longer {@link #isAlive() alive}, and subsequent operations on resources\n+ * When a memory session is closed, it is no longer {@linkplain #isAlive() alive}, and subsequent operations on resources\n@@ -78,1 +78,1 @@\n- * Closeable memory sessions are memory sessions that can be {@link MemorySession#close() closed} explicitly, as demonstrated\n+ * Closeable memory sessions are memory sessions that can be {@linkplain MemorySession#close() closed} explicitly, as demonstrated\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}