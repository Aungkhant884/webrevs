{"files":[{"patch":"@@ -94,1 +94,1 @@\n-     * {@return the element count of this sequence layout (if any)}\n+     * {@return the element count of this sequence layout}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,3 @@\n+    \/* A fallback lookup, used when creation of system lookup fails. *\/\n+    private static final Function<String, Optional<NativeSymbol>> fallbackLookup = name -> Optional.empty();\n+\n@@ -55,4 +58,15 @@\n-    private static final Function<String, Optional<NativeSymbol>> syslookup = switch (CABI.current()) {\n-        case SysV, LinuxAArch64, MacOsAArch64 -> libLookup(libs -> libs.load(jdkLibraryPath(\"syslookup\")));\n-        case Win64 -> makeWindowsLookup(); \/\/ out of line to workaround javac crash\n-    };\n+    private static final Function<String, Optional<NativeSymbol>> syslookup = makeSystemLookup();\n+\n+    private static final Function<String, Optional<NativeSymbol>> makeSystemLookup() {\n+        try {\n+            return switch (CABI.current()) {\n+                case SysV, LinuxAArch64, MacOsAArch64 -> libLookup(libs -> libs.load(jdkLibraryPath(\"syslookup\")));\n+                case Win64 -> makeWindowsLookup(); \/\/ out of line to workaround javac crash\n+            };\n+        } catch (Throwable ex) {\n+            \/\/ This can happen in the event of a library loading failure - e.g. if one of the libraries the\n+            \/\/ system lookup depends on cannot be loaded for some reason. In such extreme cases, rather than\n+            \/\/ fail, return a dummy lookup.\n+            return fallbackLookup;\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\")\n+ * @run testng\/othervm -Dos.name=Windows --enable-native-access=ALL-UNNAMED TestFallbackLookup\n+ *\/\n+\n+import org.testng.annotations.*;\n+import static org.testng.Assert.*;\n+\n+import java.lang.foreign.CLinker;\n+\n+public class TestFallbackLookup {\n+    @Test\n+    void testBadSystemLookupRequest() {\n+        \/\/ we request a CLinker, forcing OS name to be \"Windows\". This should trigger an exception when\n+        \/\/ attempting to load a non-existent ucrtbase.dll. Make sure that no error is generated at this stage.\n+        CLinker linker = CLinker.systemCLinker();\n+        assertTrue(linker.lookup(\"nonExistentSymbol\").isEmpty());\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestFallbackLookup.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}