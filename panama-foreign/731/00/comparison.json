{"files":[{"patch":"@@ -27,63 +27,14 @@\n-import java.util.Objects;\n-\n-public class VMStorage {\n-    \/**\n-     * Type of storage. e.g. stack, or which register type (GP, FP, vector)\n-     *\/\n-    private final byte type;\n-\n-    \/**\n-     * The (on stack) size in bytes when type = stack, a register mask otherwise.\n-     * The register mask indicates which segments of a register are used.\n-     *\/\n-    private final short segmentMaskOrSize;\n-\n-    \/**\n-     * The index is either a register number within a type, or\n-     * a stack offset in bytes if type = stack.\n-     * (a particular platform might add a bias to this in generate code)\n-     *\/\n-    private final int indexOrOffset;\n-\n-    private final String debugName;\n-\n-    private VMStorage(byte type, short segmentMaskOrSize, int indexOrOffset, String debugName) {\n-        this.type = type;\n-        this.segmentMaskOrSize = segmentMaskOrSize;\n-        this.indexOrOffset = indexOrOffset;\n-        this.debugName = debugName;\n-    }\n-\n-    public static VMStorage stackStorage(byte type, short size, int byteOffset) {\n-        return new VMStorage(type, size, byteOffset, \"Stack@\" + byteOffset);\n-    }\n-\n-    public static VMStorage regStorage(byte type, short segmentMask, int index, String debugName) {\n-        return new VMStorage(type, segmentMask, index, debugName);\n-    }\n-\n-    public byte type() {\n-        return type;\n-    }\n-\n-    public short segmentMaskOrSize() {\n-        return segmentMaskOrSize;\n-    }\n-\n-    public int indexOrOffset() {\n-        return indexOrOffset;\n-    }\n-\n-    public String name() {\n-        return debugName;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        return (o instanceof VMStorage vmStorage)\n-            && type == vmStorage.type\n-            && segmentMaskOrSize == vmStorage.segmentMaskOrSize\n-            && indexOrOffset == vmStorage.indexOrOffset\n-            && Objects.equals(debugName, vmStorage.debugName);\n-    }\n+\/**\n+ *\n+ * @param type              the type of storage. e.g. stack, or which register type (GP, FP, vector)\n+ * @param segmentMaskOrSize the (on stack) size in bytes when type = stack, a register mask otherwise,\n+ *                          the register mask indicates which segments of a register are used.\n+ * @param indexOrOffset     the index is either a register number within a type, or\n+ *                          a stack offset in bytes if type = stack.\n+ *                          (a particular platform might add a bias to this in generate code)\n+ * @param debugName         the debug name\n+ *\/\n+public record VMStorage(byte type,\n+                        short segmentMaskOrSize,\n+                        int indexOrOffset,\n+                        String debugName) {\n@@ -91,3 +42,2 @@\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(type, segmentMaskOrSize, indexOrOffset, debugName);\n+    public VMStorage(byte type, short segmentMaskOrSize, int indexOrOffset) {\n+        this(type, segmentMaskOrSize, indexOrOffset, \"Stack@\" + indexOrOffset);\n@@ -96,9 +46,0 @@\n-    @Override\n-    public String toString() {\n-        return \"VMStorage{\" +\n-                \"type=\" + type +\n-                \", segmentMaskOrSize=\" + segmentMaskOrSize +\n-                \", indexOrOffset=\" + indexOrOffset +\n-                \", debugName='\" + debugName + '\\'' +\n-                '}';\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/VMStorage.java","additions":16,"deletions":75,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        return VMStorage.regStorage(StorageClasses.INTEGER, REG64_MASK, index, \"r\" + index);\n+        return new VMStorage(StorageClasses.INTEGER, REG64_MASK, index, \"r\" + index);\n@@ -136,1 +136,1 @@\n-        return VMStorage.regStorage(StorageClasses.VECTOR, V128_MASK, index, \"v\" + index);\n+        return new VMStorage(StorageClasses.VECTOR, V128_MASK, index, \"v\" + index);\n@@ -140,1 +140,1 @@\n-        return VMStorage.stackStorage(StorageClasses.STACK, size, byteOffset);\n+        return new VMStorage(StorageClasses.STACK, size, byteOffset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Architecture.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,9 +95,2 @@\n-    \/\/ record\n-    public static class Bindings {\n-        public final CallingSequence callingSequence;\n-        public final boolean isInMemoryReturn;\n-\n-        Bindings(CallingSequence callingSequence, boolean isInMemoryReturn) {\n-            this.callingSequence = callingSequence;\n-            this.isInMemoryReturn = isInMemoryReturn;\n-        }\n+    public record Bindings(CallingSequence callingSequence,\n+                           boolean isInMemoryReturn) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-        return VMStorage.regStorage(StorageClasses.INTEGER, REG64_MASK, index, debugName);\n+        return new VMStorage(StorageClasses.INTEGER, REG64_MASK, index, debugName);\n@@ -131,1 +131,1 @@\n-        return VMStorage.regStorage(StorageClasses.VECTOR, XMM_MASK, index, debugName);\n+        return new VMStorage(StorageClasses.VECTOR, XMM_MASK, index, debugName);\n@@ -135,1 +135,1 @@\n-        return VMStorage.stackStorage(StorageClasses.STACK, size, byteOffset);\n+        return new VMStorage(StorageClasses.STACK, size, byteOffset);\n@@ -139,1 +139,1 @@\n-        return VMStorage.regStorage(StorageClasses.X87, STP_MASK, index, \"X87(\" + index + \")\");\n+        return new VMStorage(StorageClasses.X87, STP_MASK, index, \"X87(\" + index + \")\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,11 +80,4 @@\n-    \/\/ record\n-    public static class Bindings {\n-        public final CallingSequence callingSequence;\n-        public final boolean isInMemoryReturn;\n-        public final int nVectorArgs;\n-\n-        Bindings(CallingSequence callingSequence, boolean isInMemoryReturn, int nVectorArgs) {\n-            this.callingSequence = callingSequence;\n-            this.isInMemoryReturn = isInMemoryReturn;\n-            this.nVectorArgs = nVectorArgs;\n-        }\n+    public record Bindings(\n+            CallingSequence callingSequence,\n+            boolean isInMemoryReturn,\n+            int nVectorArgs) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -76,9 +76,3 @@\n-    \/\/ record\n-    public static class Bindings {\n-        public final CallingSequence callingSequence;\n-        public final boolean isInMemoryReturn;\n-\n-        Bindings(CallingSequence callingSequence, boolean isInMemoryReturn) {\n-            this.callingSequence = callingSequence;\n-            this.isInMemoryReturn = isInMemoryReturn;\n-        }\n+    public record Bindings(\n+            CallingSequence callingSequence,\n+            boolean isInMemoryReturn) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        \/\/ No 128 bit integers in the Windows C ABI. There are __m128(i|d) intrinsic types but they act just\n+        \/\/ No 128-bit integers in the Windows C ABI. There are __m128(i|d) intrinsic types but they act just\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -89,2 +89,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -119,2 +119,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -141,2 +141,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -201,2 +201,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -232,2 +232,2 @@\n-        assertTrue(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertTrue(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -256,2 +256,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -285,2 +285,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -323,2 +323,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -377,2 +377,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -406,2 +406,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -429,2 +429,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -66,2 +66,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -78,1 +78,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -94,2 +94,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -108,1 +108,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -125,2 +125,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -139,1 +139,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -155,2 +155,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -169,1 +169,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -185,2 +185,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -199,1 +199,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -210,2 +210,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -228,1 +228,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -241,2 +241,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -261,1 +261,1 @@\n-        assertEquals(bindings.nVectorArgs, 8);\n+        assertEquals(bindings.nVectorArgs(), 8);\n@@ -276,2 +276,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -306,1 +306,1 @@\n-        assertEquals(bindings.nVectorArgs, 8);\n+        assertEquals(bindings.nVectorArgs(), 8);\n@@ -333,2 +333,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -359,1 +359,1 @@\n-        assertEquals(bindings.nVectorArgs, 3);\n+        assertEquals(bindings.nVectorArgs(), 3);\n@@ -376,2 +376,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -389,1 +389,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -398,2 +398,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -411,1 +411,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -457,2 +457,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -478,1 +478,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -489,2 +489,2 @@\n-        assertTrue(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertTrue(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -502,1 +502,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -513,2 +513,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -526,1 +526,1 @@\n-        assertEquals(bindings.nVectorArgs, 1);\n+        assertEquals(bindings.nVectorArgs(), 1);\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":42,"deletions":42,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -81,2 +81,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -103,2 +103,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -127,2 +127,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -158,2 +158,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -195,2 +195,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -229,2 +229,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -259,2 +259,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -290,2 +290,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -311,2 +311,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -335,2 +335,2 @@\n-        assertTrue(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertTrue(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -364,2 +364,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}