{"files":[{"patch":"@@ -456,0 +456,18 @@\n+\n+    \/**\n+     * Returns a native allocator which allocates segments in independent {@linkplain ResourceScope#newImplicitScope() implicit scopes}.\n+     * Equivalent to (but likely more efficient than) the following code:\n+     * <blockquote><pre>{@code\n+    ResourceScope scope = ...\n+    SegmentAllocator implicitAllocator = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+     * }<\/pre><\/blockquote>\n+     *\n+     * @return a native allocator which allocates segments in independent {@linkplain ResourceScope#newImplicitScope() implicit scopes}.\n+     *\/\n+    static SegmentAllocator implicitAllocator() {\n+        class Holder {\n+            static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) ->\n+                    MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+        }\n+        return Holder.IMPLICIT_ALLOCATOR;\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -93,3 +93,5 @@\n-                \/\/ addresses should be invalid now\n-                for (MemorySegment address : addressList) {\n-                    assertFalse(address.scope().isAlive());\n+                if (allocationFactory != AllocationFactory.IMPLICIT_ALLOCATOR) {\n+                    \/\/ addresses should be invalid now\n+                    for (MemorySegment address : addressList) {\n+                        assertFalse(address.scope().isAlive());\n+                    }\n@@ -157,99 +159,52 @@\n-        return new Object[][] {\n-                { (byte)42, AllocationFactory.BOUNDED, ValueLayout.JAVA_BYTE,\n-                        (AllocationFunction.OfByte) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { (short)42, AllocationFactory.BOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfShort) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { (char)42, AllocationFactory.BOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfChar) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42, AllocationFactory.BOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfInt) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42f, AllocationFactory.BOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42L, AllocationFactory.BOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfLong) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42d, AllocationFactory.BOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { MemoryAddress.ofLong(42), AllocationFactory.BOUNDED, ValueLayout.ADDRESS.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-\n-                { (short)42, AllocationFactory.BOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfShort) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { (char)42, AllocationFactory.BOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfChar) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42, AllocationFactory.BOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfInt) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42f, AllocationFactory.BOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42L, AllocationFactory.BOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfLong) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42d, AllocationFactory.BOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { MemoryAddress.ofLong(42), AllocationFactory.BOUNDED, ValueLayout.ADDRESS.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-\n-                { (byte)42, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_BYTE,\n-                        (AllocationFunction.OfByte) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { (short)42, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfShort) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { (char)42, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfChar) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42, AllocationFactory.UNBOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfInt) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42f, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42L, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfLong) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42d, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { MemoryAddress.ofLong(42), AllocationFactory.UNBOUNDED, ValueLayout.ADDRESS.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-\n-                { (short)42, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfShort) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { (char)42, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfChar) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42, AllocationFactory.UNBOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfInt) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42f, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42L, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfLong) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { 42d, AllocationFactory.UNBOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-                { MemoryAddress.ofLong(42), AllocationFactory.UNBOUNDED, ValueLayout.ADDRESS.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n-                        (Function<MemoryLayout, VarHandle>)l -> l.varHandle() },\n-        };\n+        List<Object[]> nativeScopes = new ArrayList<>();\n+        for (AllocationFactory factory : AllocationFactory.values()) {\n+            nativeScopes.add(new Object[] { (byte)42, factory, ValueLayout.JAVA_BYTE,\n+                    (AllocationFunction.OfByte) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { (short)42, factory, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfShort) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { (char)42, factory, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfChar) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42, factory,\n+                    ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfInt) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42f, factory, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42L, factory, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfLong) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42d, factory, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { MemoryAddress.ofLong(42), factory, ValueLayout.ADDRESS.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+\n+            nativeScopes.add(new Object[] { (short)42, factory, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfShort) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { (char)42, factory, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfChar) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42, factory,\n+                    ValueLayout.JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfInt) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42f, factory, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42L, factory, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfLong) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { 42d, factory, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+            nativeScopes.add(new Object[] { MemoryAddress.ofLong(42), factory, ValueLayout.ADDRESS.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n+                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+        }\n+        return nativeScopes.toArray(Object[][]::new);\n@@ -260,86 +215,44 @@\n-        return new Object[][] {\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_BYTE,\n-                        (AllocationFunction.OfByteArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toByteArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toCharArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toShortArray },\n-                { AllocationFactory.BOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toIntArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toFloatArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toLongArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toDoubleArray },\n-\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toCharArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toShortArray },\n-                { AllocationFactory.BOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toIntArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toFloatArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toLongArray },\n-                { AllocationFactory.BOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toDoubleArray },\n-\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_BYTE,\n-                        (AllocationFunction.OfByteArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toByteArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toCharArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toShortArray },\n-                { AllocationFactory.UNBOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toIntArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toFloatArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toLongArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                        (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toDoubleArray },\n-\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toCharArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toShortArray },\n-                { AllocationFactory.UNBOUNDED,\n-                        ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toIntArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toFloatArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toLongArray },\n-                { AllocationFactory.UNBOUNDED, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n-                        (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n-                        ToArrayHelper.toDoubleArray },\n+        List<Object[]> arrayScopes = new ArrayList<>();\n+        for (AllocationFactory factory : AllocationFactory.values()) {\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_BYTE,\n+                    (AllocationFunction.OfByteArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toByteArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toCharArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toShortArray });\n+            arrayScopes.add(new Object[] { factory,\n+                    ValueLayout.JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toIntArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toFloatArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toLongArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toDoubleArray });\n+\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toCharArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toShortArray });\n+            arrayScopes.add(new Object[] { factory,\n+                    ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toIntArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toFloatArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toLongArray });\n+            arrayScopes.add(new Object[] { factory, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n+                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n+                    ToArrayHelper.toDoubleArray });\n@@ -347,0 +260,1 @@\n+        return arrayScopes.toArray(Object[][]::new);\n@@ -371,1 +285,6 @@\n-    static class AllocationFactory {\n+    enum AllocationFactory {\n+        ARENA_BOUNDED(true, SegmentAllocator::newNativeArena),\n+        ARENA_UNBOUNDED(false, (size, scope) -> SegmentAllocator.newNativeArena(scope)),\n+        NATIVE_ALLOCATOR(false, (size, scope) -> SegmentAllocator.nativeAllocator(scope)),\n+        IMPLICIT_ALLOCATOR(false, (size, scope) -> SegmentAllocator.implicitAllocator());\n+\n@@ -375,1 +294,1 @@\n-        private AllocationFactory(boolean isBound, BiFunction<Long, ResourceScope, SegmentAllocator> factory) {\n+        AllocationFactory(boolean isBound, BiFunction<Long, ResourceScope, SegmentAllocator> factory) {\n@@ -387,3 +306,0 @@\n-\n-        static AllocationFactory BOUNDED = new AllocationFactory(true, SegmentAllocator::newNativeArena);\n-        static AllocationFactory UNBOUNDED = new AllocationFactory(false, (size, scope) -> SegmentAllocator.newNativeArena(scope));\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":109,"deletions":193,"binary":false,"changes":302,"status":"modified"}]}