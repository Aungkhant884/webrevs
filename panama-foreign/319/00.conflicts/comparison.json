{"files":[{"patch":"@@ -145,0 +145,10 @@\n+    public void copyFromSwap(MemorySegment src, long elemSize) {\n+        AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl)src;\n+        long size = that.byteSize();\n+        checkAccess(0, size, true);\n+        that.checkAccess(0, size, false);\n+        UNSAFE.copySwapMemory(\n+                that.base(), that.min(),\n+                base(), min(), size, elemSize);\n+    }\n+\n@@ -286,0 +296,1 @@\n+<<<<<<< HEAD\n@@ -291,0 +302,12 @@\n+=======\n+        if (scope.ownerThread() == newOwner) {\n+            throw new IllegalArgumentException(\"Segment already owned by thread: \" + newOwner);\n+        } else {\n+            return dupAndClose(newOwner);\n+        }\n+    }\n+\n+    public MemorySegment dupAndClose(Thread newOwner) {\n+        try {\n+            return dup(0L, length, mask, scope.dup(newOwner));\n+>>>>>>> 9e7430ff8de95127f1a89e6d0f0f2875993d8c44\n@@ -608,0 +631,1 @@\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}