{"files":[{"patch":"@@ -381,1 +381,1 @@\n-            \/\/ null is passed as destination ResourceScope to avoid checking session() twice\n+            \/\/ null is passed as destination MemorySession to avoid checking session() twice\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, int, ResourceScopeImpl)}.\n+ * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, int, MemorySessionImpl)}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-        }), \"ResourceScope::addOnClose\");\n+        }), \"MemorySession::addCloseAction\");\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-import java.lang.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -173,2 +173,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            MemorySegment seg = MemorySegment.allocateNative(8, scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment seg = MemorySegment.allocateNative(8, session);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import java.lang.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -68,2 +68,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            MemorySegment segment = MemorySegment.allocateNative(layout, scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment segment = MemorySegment.allocateNative(layout, session);\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import java.lang.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -48,1 +48,1 @@\n-                return MemorySegment.allocateNative(s, ResourceScope.newImplicitScope())\n+                return MemorySegment.allocateNative(s, MemorySession.openImplicit())\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorLoadStoreTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}