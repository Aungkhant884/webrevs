{"files":[{"patch":"@@ -143,0 +143,2 @@\n+     * @apiNote The provided action should not keep a strong reference to this memory session, so that implicitly\n+     * closed sessions can be handled correctly by a {@link Cleaner} instance.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-import java.util.ArrayList;\n@@ -60,1 +59,0 @@\n-import java.util.List;\n@@ -64,1 +62,0 @@\n-import java.util.function.UnaryOperator;\n@@ -499,1 +496,1 @@\n-            return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+            return MemorySessionImpl.GLOBAL;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-            ((MemorySession)session).close();\n+            session.close();\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        var seg = (MemorySegment)mh.invoke(MemoryAddress.NULL, 4000L, MemorySession.global());\n+        var seg = (MemorySegment)mh.invokeExact(MemoryAddress.NULL, 4000L, MemorySession.global());\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-            = actions -> Windowsx64Linker.newVaList(actions, MemorySession.openConfined());\n+            = actions -> Windowsx64Linker.newVaList(actions, MemorySession.openImplicit());\n@@ -126,1 +126,1 @@\n-            = actions -> SysVx64Linker.newVaList(actions, MemorySession.openConfined());\n+            = actions -> SysVx64Linker.newVaList(actions, MemorySession.openImplicit());\n@@ -128,1 +128,1 @@\n-            = actions -> LinuxAArch64Linker.newVaList(actions, MemorySession.openConfined());\n+            = actions -> LinuxAArch64Linker.newVaList(actions, MemorySession.openImplicit());\n@@ -130,1 +130,1 @@\n-            = actions -> MacOsAArch64Linker.newVaList(actions, MemorySession.openConfined());\n+            = actions -> MacOsAArch64Linker.newVaList(actions, MemorySession.openImplicit());\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -120,2 +120,2 @@\n-        if (session instanceof MemorySession) {\n-            ((MemorySession) session).close();\n+        if (session.isCloseable()) {\n+            session.close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkMismatchAcquire.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}