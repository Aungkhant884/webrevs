{"files":[{"patch":"@@ -192,3 +192,1 @@\n-            append(\"import static \");\n-            append(OutputFactory.C_LANG_CONSTANTS_HOLDER);\n-            append(\".*;\\n\");\n+            append(\"import static jdk.incubator.foreign.CLinker.*;\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ClassSourceBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,9 +111,0 @@\n-    void emitStaticInitializer() {\n-        incrAlign();\n-        indent();\n-        append(\"static { \");\n-        append(toplevel().headerClassName());\n-        append(\".init(); }\\n\");\n-        decrAlign();\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ConstantBuilder.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+    private final String[] libraryNames;\n@@ -114,2 +115,2 @@\n-        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName, libraryNames.toArray(new String[0]));\n-        return new OutputFactory(pkgName, toplevelBuilder, includeHelper).generate(decl);\n+        ToplevelBuilder toplevelBuilder = new ToplevelBuilder(pkgName, clsName);\n+        return new OutputFactory(pkgName, toplevelBuilder, includeHelper, libraryNames.toArray(new String[0])).generate(decl);\n@@ -118,1 +119,2 @@\n-    private OutputFactory(String pkgName, ToplevelBuilder toplevelBuilder, IncludeHelper includeHelper) {\n+    private OutputFactory(String pkgName, ToplevelBuilder toplevelBuilder, IncludeHelper includeHelper,\n+            String[] libraryNames) {\n@@ -123,0 +125,1 @@\n+        this.libraryNames = libraryNames;\n@@ -125,2 +128,0 @@\n-    static final String C_LANG_CONSTANTS_HOLDER = \"jdk.incubator.foreign.CLinker\";\n-\n@@ -151,1 +152,17 @@\n-                                .replace(\"${C_LANG}\", C_LANG_CONSTANTS_HOLDER);\n+                                .replace(\"${LOADLIBRARIES}\", generateLoadLibraries());\n+    }\n+\n+    private String generateLoadLibraries() {\n+        StringBuilder buf = new StringBuilder();\n+        buf.append(\"RuntimeHelper.loadLibraries(new String[] {\");\n+        for (String lib : libraryNames) {\n+            buf.append('\\\"');\n+            buf.append(quoteLibraryName(lib));\n+            buf.append(\"\\\",\");\n+        }\n+        buf.append(\"});\");\n+        return buf.toString();\n+    }\n+\n+    private String quoteLibraryName(String lib) {\n+        return lib.replace(\"\\\\\", \"\\\\\\\\\"); \/\/ double up slashes\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-    private final String[] libraryNames;\n@@ -53,2 +52,1 @@\n-    ToplevelBuilder(String packageName, String headerClassName, String[] libraryNames) {\n-        this.libraryNames = libraryNames;\n+    ToplevelBuilder(String packageName, String headerClassName) {\n@@ -176,4 +174,0 @@\n-            if (libraryNames.length != 0) {\n-                emitStaticInitializer(libraryNames);\n-            }\n-            emitInit();\n@@ -199,34 +193,0 @@\n-\n-        private void emitStaticInitializer(String[] libraryNames) {\n-            incrAlign();\n-            indent();\n-            append(\"static {\\n\");\n-            incrAlign();\n-            indent();\n-            append(\"RuntimeHelper.loadLibraries(new String[] {\\n\");\n-            incrAlign();\n-            for (String lib : libraryNames) {\n-                indent();\n-                append('\\\"');\n-                append(quoteLibraryName(lib));\n-                append(\"\\\",\\n\");\n-            }\n-            decrAlign();\n-            indent();\n-            append(\"});\\n\");\n-            decrAlign();\n-            indent();\n-            append(\"}\\n\\n\");\n-            decrAlign();\n-        }\n-\n-        private void emitInit() {\n-            incrAlign();\n-            indent();\n-            append(\"public static void init() {}\\n\\n\");\n-            decrAlign();\n-        }\n-\n-        private String quoteLibraryName(String lib) {\n-            return lib.replace(\"\\\\\", \"\\\\\\\\\"); \/\/ double up slashes\n-        }\n@@ -258,3 +218,0 @@\n-            if (constant_class_index == 1) {\n-                constantBuilder.emitStaticInitializer();\n-            }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ToplevelBuilder.java","additions":1,"deletions":44,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+    static {\n+        ${LOADLIBRARIES}\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}