{"files":[{"patch":"@@ -41,1 +41,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -44,1 +43,4 @@\n-import java.nio.ByteOrder;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteBuffer;\n+import java.nio.LongBuffer;\n@@ -50,1 +52,0 @@\n-import static java.nio.ByteOrder.LITTLE_ENDIAN;\n@@ -54,1 +55,1 @@\n- * is then copied into a byte array (using little endian) using different\n+ * is then copied into a byte array (using big endian) using different\n@@ -65,0 +66,2 @@\n+    public static final VarHandle LONG_ARRAY_VH = MethodHandles.byteArrayViewVarHandle(long[].class, BIG_ENDIAN);\n+\n@@ -71,0 +74,3 @@\n+\n+    private ByteBuffer byteBuffer;\n+    private LongBuffer longBuffer;\n@@ -74,2 +80,2 @@\n-    private static final ValueLayout.OfLong OF_LONG = (JAVA_LONG.order() == BIG_ENDIAN)\n-            ? JAVA_LONG.withOrder(LITTLE_ENDIAN)\n+    private static final ValueLayout.OfLong OF_LONG = (JAVA_LONG.order() != BIG_ENDIAN)\n+            ? JAVA_LONG.withOrder(BIG_ENDIAN)\n@@ -82,0 +88,2 @@\n+        byteBuffer = ByteBuffer.wrap(bytes);\n+        longBuffer = byteBuffer.asLongBuffer();\n@@ -97,0 +105,19 @@\n+    @Benchmark\n+    public void byteVarHandle() {\n+        for (int i = 0; i < size; i++) {\n+            LONG_ARRAY_VH.set(bytes, i * Long.BYTES, longs[i]);\n+        }\n+    }\n+    @Benchmark\n+    public void byteBuffer() {\n+        for (int i = 0; i < size; i++) {\n+            byteBuffer.putLong(i * Long.BYTES, longs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longBuffer() {\n+        for (int i = 0; i < size; i++) {\n+            longBuffer.put(i, longs[i]);\n+        }\n+    }\n@@ -119,1 +146,1 @@\n-    \/\/ java.nio.Bits is package private\n+    \/\/ java.io.Bits is package private\n@@ -131,11 +158,0 @@\n-    static long getLong(byte[] b, int off) {\n-        return ((b[off + 7] & 0xFFL)) +\n-                ((b[off + 6] & 0xFFL) << 8) +\n-                ((b[off + 5] & 0xFFL) << 16) +\n-                ((b[off + 4] & 0xFFL) << 24) +\n-                ((b[off + 3] & 0xFFL) << 32) +\n-                ((b[off + 2] & 0xFFL) << 40) +\n-                ((b[off + 1] & 0xFFL) << 48) +\n-                (((long) b[off]) << 56);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentVsBits.java","additions":34,"deletions":18,"binary":false,"changes":52,"status":"modified"}]}