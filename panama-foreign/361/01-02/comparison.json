{"files":[{"patch":"@@ -155,1 +155,1 @@\n- * For instance, if client wants to transfer ownership of a segment to another (known) thread, it can do so as follows:\n+ * For instance, if a client wants to transfer ownership of a segment to another (known) thread, it can do so as follows:\n@@ -177,1 +177,1 @@\n- * thread to work in parallel on disjoint segment slices. The following code can be used to sum all int values in a memory segment in parallel:\n+ * threads to work in parallel on disjoint segment slices. The following code can be used to sum all int values in a memory segment in parallel:\n@@ -427,1 +427,1 @@\n-     * using {@link MemorySegment#close()} - but it will be closed indirectly when this native scope is closed. The\n+     * using {@link MemorySegment#close()} - but it will be closed indirectly when the native scope is closed. The\n@@ -430,1 +430,1 @@\n-     * In case where the owner thread of the returned segment differs from that of this segment, write accesses to this\n+     * In cases where the owner thread of the returned segment differs from that of this segment, write accesses to this\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * To allow for more usability, it is possible for a native scope to reclaim ownership of an existing memory segments\n+ * To allow for more usability, it is possible for a native scope to reclaim ownership of an existing memory segment\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/NativeScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}