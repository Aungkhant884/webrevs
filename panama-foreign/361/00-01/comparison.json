{"files":[{"patch":"@@ -62,38 +62,38 @@\n-\/\/    @Test(dataProvider = \"stringPairs\")\n-\/\/    void test_strcat(String s1, String s2) throws Throwable {\n-\/\/        assertEquals(stdLibHelper.strcat(s1, s2), s1 + s2);\n-\/\/    }\n-\/\/\n-\/\/    @Test(dataProvider = \"stringPairs\")\n-\/\/    void test_strcmp(String s1, String s2) throws Throwable {\n-\/\/        assertEquals(Math.signum(stdLibHelper.strcmp(s1, s2)), Math.signum(s1.compareTo(s2)));\n-\/\/    }\n-\/\/\n-\/\/    @Test(dataProvider = \"strings\")\n-\/\/    void test_puts(String s) throws Throwable {\n-\/\/        assertTrue(stdLibHelper.puts(s) >= 0);\n-\/\/    }\n-\/\/\n-\/\/    @Test(dataProvider = \"strings\")\n-\/\/    void test_strlen(String s) throws Throwable {\n-\/\/        assertEquals(stdLibHelper.strlen(s), s.length());\n-\/\/    }\n-\/\/\n-\/\/    @Test(dataProvider = \"instants\")\n-\/\/    void test_time(Instant instant) throws Throwable {\n-\/\/        StdLibHelper.Tm tm = stdLibHelper.gmtime(instant.getEpochSecond());\n-\/\/        LocalDateTime localTime = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n-\/\/        assertEquals(tm.sec(), localTime.getSecond());\n-\/\/        assertEquals(tm.min(), localTime.getMinute());\n-\/\/        assertEquals(tm.hour(), localTime.getHour());\n-\/\/        \/\/day pf year in Java has 1-offset\n-\/\/        assertEquals(tm.yday(), localTime.getDayOfYear() - 1);\n-\/\/        assertEquals(tm.mday(), localTime.getDayOfMonth());\n-\/\/        \/\/days of week starts from Sunday in C, but on Monday in Java, also account for 1-offset\n-\/\/        assertEquals((tm.wday() + 6) % 7, localTime.getDayOfWeek().getValue() - 1);\n-\/\/        \/\/month in Java has 1-offset\n-\/\/        assertEquals(tm.mon(), localTime.getMonth().getValue() - 1);\n-\/\/        assertEquals(tm.isdst(), ZoneOffset.UTC.getRules()\n-\/\/                .isDaylightSavings(Instant.ofEpochMilli(instant.getEpochSecond() * 1000)));\n-\/\/    }\n-\/\/\n+    @Test(dataProvider = \"stringPairs\")\n+    void test_strcat(String s1, String s2) throws Throwable {\n+        assertEquals(stdLibHelper.strcat(s1, s2), s1 + s2);\n+    }\n+\n+    @Test(dataProvider = \"stringPairs\")\n+    void test_strcmp(String s1, String s2) throws Throwable {\n+        assertEquals(Math.signum(stdLibHelper.strcmp(s1, s2)), Math.signum(s1.compareTo(s2)));\n+    }\n+\n+    @Test(dataProvider = \"strings\")\n+    void test_puts(String s) throws Throwable {\n+        assertTrue(stdLibHelper.puts(s) >= 0);\n+    }\n+\n+    @Test(dataProvider = \"strings\")\n+    void test_strlen(String s) throws Throwable {\n+        assertEquals(stdLibHelper.strlen(s), s.length());\n+    }\n+\n+    @Test(dataProvider = \"instants\")\n+    void test_time(Instant instant) throws Throwable {\n+        StdLibHelper.Tm tm = stdLibHelper.gmtime(instant.getEpochSecond());\n+        LocalDateTime localTime = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n+        assertEquals(tm.sec(), localTime.getSecond());\n+        assertEquals(tm.min(), localTime.getMinute());\n+        assertEquals(tm.hour(), localTime.getHour());\n+        \/\/day pf year in Java has 1-offset\n+        assertEquals(tm.yday(), localTime.getDayOfYear() - 1);\n+        assertEquals(tm.mday(), localTime.getDayOfMonth());\n+        \/\/days of week starts from Sunday in C, but on Monday in Java, also account for 1-offset\n+        assertEquals((tm.wday() + 6) % 7, localTime.getDayOfWeek().getValue() - 1);\n+        \/\/month in Java has 1-offset\n+        assertEquals(tm.mon(), localTime.getMonth().getValue() - 1);\n+        assertEquals(tm.isdst(), ZoneOffset.UTC.getRules()\n+                .isDaylightSavings(Instant.ofEpochMilli(instant.getEpochSecond() * 1000)));\n+    }\n+\n@@ -110,42 +110,42 @@\n-\/\/    @Test\n-\/\/    void test_rand() throws Throwable {\n-\/\/        int val = stdLibHelper.rand();\n-\/\/        for (int i = 0 ; i < 100 ; i++) {\n-\/\/            int newVal = stdLibHelper.rand();\n-\/\/            if (newVal != val) {\n-\/\/                return; \/\/ok\n-\/\/            }\n-\/\/            val = newVal;\n-\/\/        }\n-\/\/        fail(\"All values are the same! \" + val);\n-\/\/    }\n-\/\/\n-\/\/    @Test(dataProvider = \"printfArgs\")\n-\/\/    void test_printf(List<PrintfArg> args) throws Throwable {\n-\/\/        String formatArgs = args.stream()\n-\/\/                .map(a -> a.format)\n-\/\/                .collect(Collectors.joining(\",\"));\n-\/\/\n-\/\/        String formatString = \"hello(\" + formatArgs + \")\\n\";\n-\/\/\n-\/\/        String expected = String.format(formatString, args.stream()\n-\/\/                .map(a -> a.javaValue).toArray());\n-\/\/\n-\/\/        int found = stdLibHelper.printf(formatString, args);\n-\/\/        assertEquals(found, expected.length());\n-\/\/    }\n-\/\/\n-\/\/    @Test(dataProvider = \"printfArgs\")\n-\/\/    void test_vprintf(List<PrintfArg> args) throws Throwable {\n-\/\/        String formatArgs = args.stream()\n-\/\/                .map(a -> a.format)\n-\/\/                .collect(Collectors.joining(\",\"));\n-\/\/\n-\/\/        String formatString = \"hello(\" + formatArgs + \")\\n\";\n-\/\/\n-\/\/        String expected = String.format(formatString, args.stream()\n-\/\/                .map(a -> a.javaValue).toArray());\n-\/\/\n-\/\/        int found = stdLibHelper.vprintf(formatString, args);\n-\/\/        assertEquals(found, expected.length());\n-\/\/    }\n+    @Test\n+    void test_rand() throws Throwable {\n+        int val = stdLibHelper.rand();\n+        for (int i = 0 ; i < 100 ; i++) {\n+            int newVal = stdLibHelper.rand();\n+            if (newVal != val) {\n+                return; \/\/ok\n+            }\n+            val = newVal;\n+        }\n+        fail(\"All values are the same! \" + val);\n+    }\n+\n+    @Test(dataProvider = \"printfArgs\")\n+    void test_printf(List<PrintfArg> args) throws Throwable {\n+        String formatArgs = args.stream()\n+                .map(a -> a.format)\n+                .collect(Collectors.joining(\",\"));\n+\n+        String formatString = \"hello(\" + formatArgs + \")\\n\";\n+\n+        String expected = String.format(formatString, args.stream()\n+                .map(a -> a.javaValue).toArray());\n+\n+        int found = stdLibHelper.printf(formatString, args);\n+        assertEquals(found, expected.length());\n+    }\n+\n+    @Test(dataProvider = \"printfArgs\")\n+    void test_vprintf(List<PrintfArg> args) throws Throwable {\n+        String formatArgs = args.stream()\n+                .map(a -> a.format)\n+                .collect(Collectors.joining(\",\"));\n+\n+        String formatString = \"hello(\" + formatArgs + \")\\n\";\n+\n+        String expected = String.format(formatString, args.stream()\n+                .map(a -> a.javaValue).toArray());\n+\n+        int found = stdLibHelper.vprintf(formatString, args);\n+        assertEquals(found, expected.length());\n+    }\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":80,"deletions":80,"binary":false,"changes":160,"status":"modified"}]}