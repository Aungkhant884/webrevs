{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.foreign.MemoryScope.SharedScope;\n@@ -44,3 +45,1 @@\n-    public static final MemorySegment EVERYTHING = makeNativeSegmentUnchecked(MemoryAddress.NULL, Long.MAX_VALUE, MemoryScope.DUMMY_CLEANUP_ACTION, null)\n-            .share()\n-            .withAccessModes(READ | WRITE);\n+    public static final MemorySegment EVERYTHING = new GlobalMemorySegment();\n@@ -118,0 +117,48 @@\n+\n+    \/**\n+     * Segment representing whole native memory.\n+     * It doesn't perform range checks, and attached scope doesn't do temporal checks,\n+     * as the consequence it can be faster than ordinal memory segment.\n+     *\/\n+    private static final class GlobalMemorySegment extends NativeMemorySegmentImpl {\n+        private static final Scope SCOPE = new Scope();\n+\n+        GlobalMemorySegment() {\n+            super(0, Long.MAX_VALUE, READ | WRITE, SCOPE);\n+        }\n+\n+        @Override\n+        public void checkAccess(long offset, long length, boolean readOnly) {\n+            \/\/ No need to check access, as everything is always RW and allows access to whole world\n+        }\n+\n+        @Override\n+        NativeMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope) {\n+            return new NativeMemorySegmentImpl(min + offset, size, mask, scope);\n+        }\n+\n+        \/**\n+         * Special scope - can't be closed & it's always ALIVE\n+         *\/\n+        private static final class Scope extends SharedScope {\n+            Scope() {\n+                super(null, MemoryScope.DUMMY_CLEANUP_ACTION, null);\n+            }\n+\n+            @Override\n+            void justClose() {\n+                \/\/ In normal circumstances this method should not be called, as segment\n+                \/\/ should prevent it.\n+                throw new IllegalStateException(\"Should never be called\");\n+            }\n+\n+            @Override\n+            public boolean isAlive() {\n+                return true;\n+            }\n+\n+            @Override\n+            public void checkValidState() {\n+            }\n+        }\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":50,"deletions":3,"binary":false,"changes":53,"status":"modified"}]}