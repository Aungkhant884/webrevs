{"files":[{"patch":"@@ -58,1 +58,1 @@\n-    static final MethodHandle F_LONG, F_PTR;\n+    static final MethodHandle F_LONG_LONG, F_PTR_LONG, F_LONG_PTR, F_PTR_PTR;\n@@ -63,4 +63,8 @@\n-        F_LONG = abi.downcallHandle(loaderLibs.find(\"func_as_long\").get(),\n-                FunctionDescriptor.of(C_INT, C_LONG_LONG));\n-        F_PTR = abi.downcallHandle(loaderLibs.find(\"func_as_ptr\").get(),\n-                FunctionDescriptor.of(C_INT, C_POINTER));\n+        F_LONG_LONG = abi.downcallHandle(loaderLibs.find(\"id_long_long\").get(),\n+                FunctionDescriptor.of(C_LONG_LONG, C_LONG_LONG));\n+        F_PTR_LONG = abi.downcallHandle(loaderLibs.find(\"id_ptr_long\").get(),\n+                FunctionDescriptor.of(C_LONG_LONG, C_POINTER));\n+        F_LONG_PTR = abi.downcallHandle(loaderLibs.find(\"id_long_ptr\").get(),\n+                FunctionDescriptor.of(C_POINTER, C_LONG_LONG));\n+        F_PTR_PTR = abi.downcallHandle(loaderLibs.find(\"id_ptr_ptr\").get(),\n+                FunctionDescriptor.of(C_POINTER, C_POINTER));\n@@ -75,2 +79,2 @@\n-    public int panama_call_as_long() throws Throwable {\n-        return (int)F_LONG.invokeExact(segment.address());\n+    public long long_to_long() throws Throwable {\n+        return (long)F_LONG_LONG.invokeExact(segment.address());\n@@ -80,2 +84,2 @@\n-    public int panama_call_as_address() throws Throwable {\n-        return (int)F_PTR.invokeExact(segment);\n+    public long ptr_to_long() throws Throwable {\n+        return (long)F_PTR_LONG.invokeExact(segment);\n@@ -85,1 +89,1 @@\n-    public int panama_call_as_new_segment() throws Throwable {\n+    public long ptr_to_long_new_segment() throws Throwable {\n@@ -87,1 +91,17 @@\n-        return (int)F_PTR.invokeExact(newSegment);\n+        return (long)F_PTR_LONG.invokeExact(newSegment);\n+    }\n+\n+    @Benchmark\n+    public long long_to_ptr() throws Throwable {\n+        return ((MemorySegment)F_LONG_PTR.invokeExact(segment.address())).address();\n+    }\n+\n+    @Benchmark\n+    public long ptr_to_ptr() throws Throwable {\n+        return ((MemorySegment)F_PTR_PTR.invokeExact(segment)).address();\n+    }\n+\n+    @Benchmark\n+    public long ptr_to_ptr_new_segment() throws Throwable {\n+        MemorySegment newSegment = MemorySegment.ofAddress(segment.address(), 100, arena);\n+        return ((MemorySegment)F_PTR_PTR.invokeExact(newSegment)).address();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":31,"deletions":11,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-EXPORT int func_as_long(long long value) {\n-  return 0;\n+EXPORT long long id_long_long(long long value) {\n+  return value;\n@@ -36,2 +36,10 @@\n-EXPORT int func_as_ptr(void* ptr) {\n-  return 0;\n+EXPORT long long id_ptr_long(void* ptr) {\n+  return (long long)ptr;\n+}\n+\n+EXPORT void* id_long_ptr(long long value) {\n+  return (void*)value;\n+}\n+\n+EXPORT void* id_ptr_ptr(void* ptr) {\n+  return ptr;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/libPtr.c","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}