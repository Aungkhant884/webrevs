{"files":[{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CLayouts.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.incubator.foreign.CLinker.UpcallStub;\n@@ -44,6 +45,0 @@\n-import java.io.File;\n-import java.nio.file.Path;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-import java.util.Optional;\n-import java.util.stream.Stream;\n@@ -51,1 +46,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-        append(\" = ResourceScope.newSharedScope().allocateUtf8String(\\\"\");\n+        append(\" = ResourceScope.globalScope().allocateUtf8String(\\\"\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ConstantBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,2 +199,2 @@\n-        if (d.layout().isEmpty()) {\n-            \/\/skip decl-only\n+        if (d.layout().isEmpty() || structDefinitionSeen(d)) {\n+            \/\/skip decl\n@@ -371,1 +371,1 @@\n-            \/\/ anon type - let's generate something\n+            \/\/ declared type - visit declaration recursively\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,8 +184,0 @@\n-\n-\/\/    public static String getName(Type type) {\n-\/\/        Cursor c = type.getDeclarationCursor();\n-\/\/        if (c.isInvalid()) {\n-\/\/            return type.spelling();\n-\/\/        }\n-\/\/        return c.spelling();\n-\/\/    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/RecordLayoutComputer.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}