{"files":[{"patch":"@@ -162,0 +162,12 @@\n+void RuntimeBlob::free(RuntimeBlob* blob) {\n+  assert(blob != NULL, \"caller must check for NULL\");\n+  ThreadInVMfromUnknown __tiv;  \/\/ get to VM state in case we block on CodeCache_lock\n+  blob->flush();\n+  {\n+    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+    CodeCache::free(blob);\n+  }\n+  \/\/ Track memory usage statistic after releasing CodeCache_lock\n+  MemoryService::track_code_cache_memory_usage();\n+}\n+\n@@ -228,2 +240,2 @@\n-BufferBlob::BufferBlob(const char* name, int header_size, int size)\n-: RuntimeBlob(name, header_size, size, CodeOffsets::frame_never_safe, \/*locs_size:*\/ 0)\n+BufferBlob::BufferBlob(const char* name, int size)\n+: RuntimeBlob(name, sizeof(BufferBlob), size, CodeOffsets::frame_never_safe, \/*locs_size:*\/ 0)\n@@ -243,1 +255,1 @@\n-    blob = new (size) BufferBlob(name, sizeof(BufferBlob), size);\n+    blob = new (size) BufferBlob(name, size);\n@@ -252,2 +264,2 @@\n-BufferBlob::BufferBlob(const char* name, int header_size, int size, CodeBuffer* cb)\n-  : RuntimeBlob(name, cb, header_size, size, CodeOffsets::frame_never_safe, 0, NULL)\n+BufferBlob::BufferBlob(const char* name, int size, CodeBuffer* cb)\n+  : RuntimeBlob(name, cb, sizeof(BufferBlob), size, CodeOffsets::frame_never_safe, 0, NULL)\n@@ -264,1 +276,1 @@\n-    blob = new (size) BufferBlob(name, sizeof(BufferBlob), size, cb);\n+    blob = new (size) BufferBlob(name, size, cb);\n@@ -277,9 +289,1 @@\n-  assert(blob != NULL, \"caller must check for NULL\");\n-  ThreadInVMfromUnknown __tiv;  \/\/ get to VM state in case we block on CodeCache_lock\n-  blob->flush();\n-  {\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-    CodeCache::free((RuntimeBlob*)blob);\n-  }\n-  \/\/ Track memory usage statistic after releasing CodeCache_lock\n-  MemoryService::track_code_cache_memory_usage();\n+  RuntimeBlob::free(blob);\n@@ -293,1 +297,1 @@\n-  BufferBlob(\"I2C\/C2I adapters\", sizeof(AdapterBlob), size, cb) {\n+  BufferBlob(\"I2C\/C2I adapters\", size, cb) {\n@@ -323,1 +327,1 @@\n-  BufferBlob(name, sizeof(VtableBlob), size) {\n+  BufferBlob(name, size) {\n@@ -722,1 +726,2 @@\n-OptimizedEntryBlob::OptimizedEntryBlob(const char* name, int size, CodeBuffer* cb, intptr_t exception_handler_offset,\n+OptimizedEntryBlob::OptimizedEntryBlob(const char* name, CodeBuffer* cb, int size,\n+                                       intptr_t exception_handler_offset,\n@@ -724,1 +729,2 @@\n-  BufferBlob(name, sizeof(OptimizedEntryBlob), size, cb),\n+  RuntimeBlob(name, cb, sizeof(OptimizedEntryBlob), size, CodeOffsets::frame_never_safe, 0 \/* no frame size *\/,\n+              \/* oop maps = *\/ nullptr, \/* caller must gc arguments = *\/ false),\n@@ -731,1 +737,6 @@\n-OptimizedEntryBlob* OptimizedEntryBlob::create(const char* name, CodeBuffer* cb, intptr_t exception_handler_offset,\n+void* OptimizedEntryBlob::operator new(size_t s, unsigned size) throw() {\n+  return CodeCache::allocate(size, CodeBlobType::NonNMethod);\n+}\n+\n+OptimizedEntryBlob* OptimizedEntryBlob::create(const char* name, CodeBuffer* cb,\n+                                               intptr_t exception_handler_offset,\n@@ -739,1 +750,2 @@\n-    blob = new (size) OptimizedEntryBlob(name, size, cb, exception_handler_offset, receiver, frame_data_offset);\n+    blob = new (size) OptimizedEntryBlob(name, cb, size,\n+                                         exception_handler_offset, receiver, frame_data_offset);\n@@ -760,1 +772,19 @@\n-  BufferBlob::free(blob);\n+  RuntimeBlob::free(blob);\n+}\n+\n+void OptimizedEntryBlob::preserve_callee_argument_oops(frame fr, const RegisterMap* reg_map, OopClosure* f) {\n+  \/\/ do nothing for now\n+}\n+\n+\/\/ Misc.\n+void OptimizedEntryBlob::verify() {\n+  \/\/ unimplemented\n+}\n+\n+void OptimizedEntryBlob::print_on(outputStream* st) const {\n+  RuntimeBlob::print_on(st);\n+  print_value_on(st);\n+}\n+\n+void OptimizedEntryBlob::print_value_on(outputStream* st) const {\n+  st->print_cr(\"OptimizedEntryBlob (\" INTPTR_FORMAT  \") used for %s\", p2i(this), name());\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":52,"deletions":22,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-\/\/    OptimizedEntryBlob : Used for upcalls from native code\n@@ -70,0 +69,1 @@\n+\/\/   OptimizedEntryBlob  : Used for upcalls from native code\n@@ -374,0 +374,2 @@\n+  static void free(RuntimeBlob* blob);\n+\n@@ -404,2 +406,2 @@\n-  BufferBlob(const char* name, int header_size, int size);\n-  BufferBlob(const char* name, int header_size, int size, CodeBuffer* cb);\n+  BufferBlob(const char* name, int size);\n+  BufferBlob(const char* name, int size, CodeBuffer* cb);\n@@ -468,1 +470,1 @@\n-  MethodHandlesAdapterBlob(int size): BufferBlob(\"MethodHandles adapters\", sizeof(MethodHandlesAdapterBlob), size) {}\n+  MethodHandlesAdapterBlob(int size): BufferBlob(\"MethodHandles adapters\", size) {}\n@@ -743,1 +745,1 @@\n-class OptimizedEntryBlob: public BufferBlob {\n+class OptimizedEntryBlob: public RuntimeBlob {\n@@ -750,1 +752,2 @@\n-  OptimizedEntryBlob(const char* name, int size, CodeBuffer* cb, intptr_t exception_handler_offset,\n+  OptimizedEntryBlob(const char* name, CodeBuffer* cb, int size,\n+                     intptr_t exception_handler_offset,\n@@ -753,0 +756,2 @@\n+  void* operator new(size_t s, unsigned size) throw();\n+\n@@ -766,2 +771,2 @@\n-                                    intptr_t exception_handler_offset, jobject receiver,\n-                                    ByteSize frame_data_offset);\n+                                    intptr_t exception_handler_offset,\n+                                    jobject receiver, ByteSize frame_data_offset);\n@@ -776,2 +781,0 @@\n-  void oops_do(OopClosure* f, const frame& frame);\n-\n@@ -780,0 +783,10 @@\n+\n+  \/\/ GC\/Verification support\n+  void oops_do(OopClosure* f, const frame& frame);\n+  virtual void preserve_callee_argument_oops(frame fr, const RegisterMap* reg_map, OopClosure* f) override;\n+  virtual bool is_alive() const override { return true; }\n+  virtual void verify() override;\n+\n+  \/\/ Misc.\n+  virtual void print_on(outputStream* st) const override;\n+  virtual void print_value_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1548,1 +1548,1 @@\n-      ::new (blob) BufferBlob(\"WB::DummyBlob\", sizeof(BufferBlob), full_size);\n+      ::new (blob) BufferBlob(\"WB::DummyBlob\", full_size);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}