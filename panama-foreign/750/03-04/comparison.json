{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.foreign.ArenaImpl;\n@@ -59,1 +58,1 @@\n-public sealed interface Arena extends SegmentAllocator, AutoCloseable permits ArenaImpl { \/\/@@@: This can also be non-sealed!\n+public interface Arena extends SegmentAllocator, AutoCloseable {\n@@ -62,10 +61,8 @@\n-     * Creates a native memory segment with the given size (in bytes), alignment constraint (in bytes) associated with\n-     * the memory session associated with this arena. The {@link MemorySegment#address()} of the returned memory segment\n-     * is the starting address of the newly allocated off-heap memory region backing the segment.\n-     * Moreover, the {@linkplain MemorySegment#address() address} of the returned segment will be aligned according\n-     * the provided alignment constraint.\n-     * <p>\n-     * Clients are responsible for ensuring that this arena is closed when the segments returned by this method are no\n-     * longer in use. Failure to do so will result in off-heap memory leaks.\n-     * <p>\n-     * This is equivalent to the following code:\n+     * Creates a native memory segment with the given size (in bytes), alignment constraint (in bytes).\n+     * The returned segment is associated with the same memory session associated with this arena.\n+     * The {@link MemorySegment#address()} of the returned memory segment is the starting address of the\n+     * allocated off-heap memory region backing the segment. Moreover, the {@linkplain MemorySegment#address() address}\n+     * of the returned segment is aligned according the provided alignment constraint.\n+     *\n+     * @implSpec\n+     * The default implementation of this method is equivalent to the following code:\n@@ -75,2 +72,0 @@\n-     * <p>\n-     * The region of off-heap memory backing the returned native memory segment is initialized to zero.\n@@ -89,1 +84,3 @@\n-    MemorySegment allocate(long byteSize, long byteAlignment);\n+    default MemorySegment allocate(long byteSize, long byteAlignment) {\n+        return MemorySegment.allocateNative(byteSize, byteAlignment, session());\n+    }\n@@ -112,1 +109,1 @@\n-        return new ArenaImpl(MemorySessionImpl.createConfined(Thread.currentThread()));\n+        return makeArena(MemorySessionImpl.createConfined(Thread.currentThread()));\n@@ -120,1 +117,15 @@\n-        return new ArenaImpl(MemorySessionImpl.createShared());\n+        return makeArena(MemorySessionImpl.createShared());\n+    }\n+\n+    private static Arena makeArena(MemorySessionImpl sessionImpl) {\n+        return new Arena() {\n+            @Override\n+            public MemorySession session() {\n+                return sessionImpl;\n+            }\n+\n+            @Override\n+            public void close() {\n+                sessionImpl.close();\n+            }\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":28,"deletions":17,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.foreign;\n-\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.MemorySession;\n-\n-public final class ArenaImpl implements Arena {\n-\n-    final MemorySessionImpl sessionImpl;\n-\n-    public ArenaImpl(MemorySessionImpl sessionImpl) {\n-        this.sessionImpl = sessionImpl;\n-    }\n-\n-    @Override\n-    public MemorySegment allocate(long byteSize, long byteAlignment) {\n-        return MemorySegment.allocateNative(byteSize, byteAlignment, session());\n-    }\n-\n-    @Override\n-    public MemorySession session() {\n-        return sessionImpl;\n-    }\n-\n-    @Override\n-    public void close() {\n-        sessionImpl.close();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaImpl.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"}]}