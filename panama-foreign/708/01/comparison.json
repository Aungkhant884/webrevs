{"files":[{"patch":"@@ -28,6 +28,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n+import java.util.*;\n@@ -84,2 +79,1 @@\n-        Objects.requireNonNull(argLayouts);\n-        Arrays.stream(argLayouts).forEach(Objects::requireNonNull);\n+        \/\/ Null checks are implicit in List.of(argLayouts)\n@@ -95,2 +89,1 @@\n-        Objects.requireNonNull(argLayouts);\n-        Arrays.stream(argLayouts).forEach(Objects::requireNonNull);\n+        \/\/ Null checks are implicit in List.of(argLayouts)\n@@ -110,2 +103,1 @@\n-        Objects.requireNonNull(variadicLayouts);\n-        Arrays.stream(variadicLayouts).forEach(Objects::requireNonNull);\n+        \/\/ Null checks are implicit in the constructor of VariadicFunction\n@@ -217,0 +209,7 @@\n+        \/**\n+         * Constructor.\n+         *\n+         * @param descriptor the original functional descriptor\n+         * @param argLayouts the memory layouts to apply\n+         * @throws NullPointerException if any of the provided parameters or array elements are {@code null}\n+         *\/\n@@ -219,1 +218,1 @@\n-                    Stream.concat(descriptor.argumentLayouts().stream(), Stream.of(argLayouts)).toList());\n+                    Stream.concat(descriptor.argumentLayouts().stream(), Arrays.stream(argLayouts).map(Objects::requireNonNull)).toList());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.stream.Collectors;\n@@ -713,1 +712,1 @@\n-                                .collect(Collectors.toList())));\n+                                .toList()));\n@@ -727,1 +726,1 @@\n-                        .collect(Collectors.toList()));\n+                        .toList());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -290,4 +290,2 @@\n-        Objects.requireNonNull(array);\n-        Objects.requireNonNull(elementLayout);\n-        int size = Array.getLength(array);\n-        MemorySegment addr = allocateArray(elementLayout, size);\n+        int size = Array.getLength(Objects.requireNonNull(array));\n+        MemorySegment addr = allocateArray(Objects.requireNonNull(elementLayout), size);\n@@ -452,2 +450,1 @@\n-        Objects.requireNonNull(segment);\n-        return (AbstractMemorySegmentImpl)segment;\n+        return (AbstractMemorySegmentImpl)Objects.requireNonNull(segment);\n@@ -466,1 +463,1 @@\n-        class Holder {\n+        final class Holder {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -253,8 +253,1 @@\n-        return carrier == boolean.class\n-                || carrier == byte.class\n-                || carrier == short.class\n-                || carrier == char.class\n-                || carrier == int.class\n-                || carrier == long.class\n-                || carrier == float.class\n-                || carrier == double.class\n+        return (carrier.isPrimitive() && carrier != void.class)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}