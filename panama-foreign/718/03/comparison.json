{"files":[{"patch":"@@ -65,1 +65,1 @@\n- *     <li>{@linkplain MemorySegment#allocateNative(long, long, MemorySession) native memory segments}, backed by off-heap memory;<\/li>\n+ *     <li>{@linkplain MemorySegment#allocateNative(long, long) native memory segments}, backed by off-heap memory;<\/li>\n@@ -361,1 +361,1 @@\n-     * created using the {@link #allocateNative(long, MemorySession)} (and related) factory, or a buffer segment\n+     * created using the {@link #allocateNative(long)} (and related) factory, or a buffer segment\n@@ -931,1 +931,0 @@\n-     *\n@@ -953,3 +952,8 @@\n-     * Creates a native memory segment with the given layout and memory session.\n-     * A client is responsible for ensuring that the memory session associated with the returned segment is closed\n-     * when the segment is no longer in use. Failure to do so will result in off-heap memory leaks.\n+     * Creates a native memory segment with the given layout.\n+     * <p>\n+     * The returned memory segment is associated with a new {@linkplain MemorySession#openImplicit implicit}\n+     * memory session. As such, the native memory region associated with the returned segment is\n+     * freed <em>automatically<\/em>, some unspecified time after it is no longer referenced.\n+     * <p>\n+     * Native segments featuring deterministic deallocation can be obtained using the\n+     * {@link MemorySession#allocate(MemoryLayout)} method.\n@@ -959,1 +963,2 @@\n-     * allocateNative(layout.bytesSize(), layout.bytesAlignment(), session);\n+     * MemorySession.openImplicit()\n+     *         .allocate(layout.bytesSize(), layout.bytesAlignment());\n@@ -965,1 +970,0 @@\n-     * @param session the segment memory session.\n@@ -967,3 +971,1 @@\n-     * @throws IllegalStateException if {@code session} is not {@linkplain MemorySession#isAlive() alive}.\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#ownerThread() owning} {@code session}.\n+     * @see MemorySession#allocate(MemoryLayout)\n@@ -971,2 +973,1 @@\n-    static MemorySegment allocateNative(MemoryLayout layout, MemorySession session) {\n-        Objects.requireNonNull(session);\n+    static MemorySegment allocateNative(MemoryLayout layout) {\n@@ -974,1 +975,1 @@\n-        return allocateNative(layout.byteSize(), layout.byteAlignment(), session);\n+        return allocateNative(layout.byteSize(), layout.byteAlignment());\n@@ -978,3 +979,8 @@\n-     * Creates a native memory segment with the given size (in bytes) and memory session.\n-     * A client is responsible for ensuring that the memory session associated with the returned segment is closed\n-     * when the segment is no longer in use. Failure to do so will result in off-heap memory leaks.\n+     * Creates a native memory segment with the given size (in bytes).\n+     * <p>\n+     * The returned memory segment is associated with a new {@linkplain MemorySession#openImplicit implicit}\n+     * memory session. As such, the native memory region associated with the returned segment is\n+     * freed <em>automatically<\/em>, some unspecified time after it is no longer referenced.\n+     * <p>\n+     * Native segments featuring deterministic deallocation can be obtained using the\n+     * {@link MemorySession#allocate(long)}} method.\n@@ -984,1 +990,2 @@\n-     * allocateNative(bytesSize, 1, session);\n+     * MemorySession.openImplicit()\n+     *     .allocate(bytesSize, 1)\n@@ -988,0 +995,2 @@\n+     * <p>\n+     * This method corresponds to the {@link ByteBuffer#allocateDirect(int)} method and has similar behavior.\n@@ -990,1 +999,0 @@\n-     * @param session the segment temporal bounds.\n@@ -993,3 +1001,2 @@\n-     * @throws IllegalStateException if {@code session} is not {@linkplain MemorySession#isAlive() alive}.\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#ownerThread() owning} {@code session}.\n+     * @see ByteBuffer#allocateDirect(int)\n+     * @see MemorySession#allocate(long)\n@@ -997,2 +1004,2 @@\n-    static MemorySegment allocateNative(long bytesSize, MemorySession session) {\n-        return allocateNative(bytesSize, 1, session);\n+    static MemorySegment allocateNative(long bytesSize) {\n+        return allocateNative(bytesSize, 1L);\n@@ -1002,3 +1009,14 @@\n-     * Creates a native memory segment with the given size (in bytes), alignment constraint (in bytes) and memory session.\n-     * A client is responsible for ensuring that the memory session associated with the returned segment is closed when the\n-     * segment is no longer in use. Failure to do so will result in off-heap memory leaks.\n+     * Creates a native memory segment with the given size (in bytes) and alignment (in bytes).\n+     * <p>\n+     * The returned memory segment is associated with a new {@linkplain MemorySession#openImplicit implicit}\n+     * memory session. As such, the native memory region associated with the returned segment is\n+     * freed <em>automatically<\/em>, some unspecified time after it is no longer referenced.\n+     * <p>\n+     * Native segments featuring deterministic deallocation can be obtained using the\n+     * {@link MemorySession#allocate(long, long)} method.\n+     * <p>\n+     * This is equivalent to the following code:\n+     * {@snippet lang=java :\n+     * MemorySession.openImplicit()\n+     *     .allocate(bytesSize, byteAlignment)\n+     * }\n@@ -1009,2 +1027,1 @@\n-     * @param alignmentBytes the alignment constraint (in bytes) of the off-heap memory block backing the native memory segment.\n-     * @param session the segment memory session.\n+     * @param byteAlignment the alignment constraint (in bytes) of the off-heap memory block backing the native memory segment.\n@@ -1014,3 +1031,1 @@\n-     * @throws IllegalStateException if {@code session} is not {@linkplain MemorySession#isAlive() alive}.\n-     * @throws WrongThreadException if this method is called from a thread other than the thread\n-     * {@linkplain MemorySession#ownerThread() owning} {@code session}.\n+     * @see MemorySession#allocate(long, long)\n@@ -1018,4 +1033,4 @@\n-    static MemorySegment allocateNative(long bytesSize, long alignmentBytes, MemorySession session) {\n-        Objects.requireNonNull(session);\n-        Utils.checkAllocationSizeAndAlign(bytesSize, alignmentBytes);\n-        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, session);\n+    static MemorySegment allocateNative(long bytesSize, long byteAlignment) {\n+        Utils.checkAllocationSizeAndAlign(bytesSize, byteAlignment);\n+        return MemorySession.openImplicit()\n+                .allocate(bytesSize, byteAlignment);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":51,"deletions":36,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import jdk.internal.foreign.NativeMemorySegmentImpl;\n+import jdk.internal.foreign.Utils;\n@@ -47,1 +49,1 @@\n- * one or more {@linkplain MemorySegment#allocateNative(long, long, MemorySession) native memory segments} results in releasing\n+ * one or more {@linkplain MemorySession#allocate(long, long) native memory segments} results in releasing\n@@ -79,2 +81,2 @@\n- *    MemorySegment segment1 = MemorySegment.allocateNative(100);\n- *    MemorySegment segment1 = MemorySegment.allocateNative(200);\n+ *    MemorySegment segment1 = session.allocate(100);\n+ *    MemorySegment segment1 = session.allocate(200);\n@@ -214,5 +216,7 @@\n-    \/**\n-     * Allocates a native segment, using this session. Equivalent to the following code:\n-     * {@snippet lang=java :\n-     * MemorySegment.allocateNative(size, align, this);\n-     * }\n+     \/**\n+     * Creates a native memory segment with the given size (in bytes), alignment constraint (in bytes) associated with\n+      * this memory session.\n+     * A client is responsible for ensuring that this memory session is closed when the\n+     * segment is no longer in use. Failure to do so will result in off-heap memory leaks.\n+     * <p>\n+     * The off-heap memory associated with the returned native memory segment is initialized to zero.\n@@ -220,1 +224,6 @@\n-     * @throws IllegalStateException if this memory session is not {@linkplain #isAlive() alive}.\n+     * @param bytesSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n+     * @param bytesAlignment the alignment constraint (in bytes) of the off-heap memory block backing the native memory segment.\n+     * @return a new native memory segment.\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes <= 0}, or if {@code alignmentBytes}\n+     * is not a power of 2.\n+     * @throws IllegalStateException if this session is not {@linkplain MemorySession#isAlive() alive}.\n@@ -222,2 +231,2 @@\n-     * {@linkplain #ownerThread() owning} this memory session.\n-     * @return a new native segment, associated with this session.\n+     * {@linkplain MemorySession#ownerThread() owning} this session.\n+     * @see MemorySegment#allocateNative(long, long)\n@@ -227,1 +236,2 @@\n-        return MemorySegment.allocateNative(bytesSize, bytesAlignment, this);\n+        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n+        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, bytesAlignment, this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -390,1 +390,1 @@\n-     * The allocator arena is first initialized by {@linkplain MemorySegment#allocateNative(long, MemorySession) allocating} a\n+     * The allocator arena is first initialized by {@linkplain MemorySession#allocate(long) allocating} a\n@@ -457,1 +457,2 @@\n-     * SegmentAllocator implicitAllocator = (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n+     * SegmentAllocator implicitAllocator = (size, align) ->\n+     *     MemorySession.openImplicit().allocate(size, align);\n@@ -464,2 +465,1 @@\n-            static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) ->\n-                    MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n+            static final SegmentAllocator IMPLICIT_ALLOCATOR = MemorySegment::allocateNative;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * MemorySegment segment = MemorySegment.allocateNative(10 * 4, MemorySession.openImplicit());\n+ * MemorySegment segment = MemorySegment.allocateNative(10 * 4);\n@@ -77,1 +77,1 @@\n- *     MemorySegment segment = MemorySegment.allocateNative(10 * 4, session);\n+ *     MemorySegment segment = session.allocate(10 * 4);\n@@ -122,1 +122,1 @@\n- *     MemorySegment cString = MemorySegment.allocateNative(5 + 1, session);\n+ *     MemorySegment cString = session.allocate(5 + 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        return MemorySegment.allocateNative(bytesSize, bytesAlignment, session);\n+        return session.allocate(bytesSize, bytesAlignment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,2 @@\n-        return MemorySegment.allocateNative(bytesSize, bytesAlignment, this);\n+        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n+        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, bytesAlignment, this);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+            MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -385,1 +385,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(1, MemorySession.openImplicit());\n+            MemorySegment segment = MemorySegment.allocateNative(1L);\n","filename":"test\/jdk\/java\/foreign\/CallGeneratorHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-            segment = MemorySegment.allocateNative(POINT, session);\n+            segment = session.allocate(POINT);\n@@ -76,6 +76,6 @@\n-                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n-                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n-                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n-                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n-                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n-                    MemorySegment.allocateNative(POINT, MemorySession.openShared())\n+                    MemorySession.openShared().allocate(POINT),\n+                    MemorySession.openShared().allocate(POINT),\n+                    MemorySession.openShared().allocate(POINT),\n+                    MemorySession.openShared().allocate(POINT),\n+                    MemorySession.openShared().allocate(POINT),\n+                    MemorySession.openShared().allocate(POINT)\n@@ -156,1 +156,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(POINT, session);\n+            MemorySegment segment = session.allocate(POINT);\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -115,1 +115,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -136,1 +136,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -194,1 +194,1 @@\n-            MemorySegment seg = MemorySegment.allocateNative(ValueLayout.JAVA_INT, session);\n+            MemorySegment seg = session.allocate(ValueLayout.JAVA_INT);\n@@ -205,1 +205,1 @@\n-            MemorySegment seg = MemorySegment.allocateNative(ValueLayout.JAVA_INT, session);\n+            MemorySegment seg = session.allocate(ValueLayout.JAVA_INT);\n@@ -213,1 +213,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -256,1 +256,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -294,1 +294,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -333,1 +333,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -376,1 +376,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n","filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n@@ -130,1 +130,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(layout.byteSize() + 1, layout.byteSize(), session);\n+            MemorySegment segment = session.allocate(layout.byteSize() + 1, layout.byteSize());\n@@ -138,1 +138,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openConfined());\n+        MemorySegment segment = MemorySession.openConfined().allocate(layout);\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(tuples, session);\n+            MemorySegment segment = session.allocate(tuples);\n@@ -364,1 +364,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(bytes, session);\n+            MemorySegment segment = session.allocate(bytes);\n@@ -390,1 +390,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(bytes, session);\n+            MemorySegment segment = session.allocate(bytes);\n@@ -424,1 +424,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(bytes, session);\n+            MemorySegment segment = session.allocate(bytes);\n@@ -437,1 +437,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(seq, session);\n+            MemorySegment segment = session.allocate(seq);\n@@ -475,1 +475,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(seq, session);\n+            MemorySegment segment = session.allocate(seq);\n@@ -486,1 +486,1 @@\n-            leaked = MemorySegment.allocateNative(bytes, session);\n+            leaked = session.allocate(bytes);\n@@ -588,1 +588,1 @@\n-            MemorySegment nativeArray = MemorySegment.allocateNative(bytes, 1, session);\n+            MemorySegment nativeArray = session.allocate(bytes, 1);\n@@ -601,1 +601,1 @@\n-            MemorySegment nativeArray = MemorySegment.allocateNative(seq, session);\n+            MemorySegment nativeArray = session.allocate(seq);\n@@ -673,1 +673,1 @@\n-            MemorySegment ms = MemorySegment.allocateNative(4, 1, session);\n+            MemorySegment ms = session.allocate(4, 1);\n@@ -682,1 +682,1 @@\n-        MemorySegment s1 = MemorySegment.allocateNative(JAVA_INT, MemorySession.openConfined());\n+        MemorySegment s1 = MemorySession.openConfined().allocate(JAVA_INT);\n@@ -698,1 +698,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(10, 1, session);\n+            MemorySegment segment = session.allocate(10, 1);\n@@ -718,1 +718,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(10, sessionSupplier.get());\n+            MemorySegment segment = sessionSupplier.get().allocate(10);\n@@ -736,1 +736,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(16, session);\n+            MemorySegment segment = session.allocate(16);\n@@ -754,1 +754,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(16, session);\n+            MemorySegment segment = session.allocate(16);\n@@ -764,2 +764,2 @@\n-                { (Supplier<MemorySegment>) () -> MemorySegment.allocateNative(16, MemorySession.openImplicit()) },\n-                { (Supplier<MemorySegment>) () -> MemorySegment.allocateNative(16, MemorySession.openConfined()) },\n+                { (Supplier<MemorySegment>) () -> MemorySession.openImplicit().allocate(16) },\n+                { (Supplier<MemorySegment>) () -> MemorySession.openConfined().allocate(16) },\n@@ -773,2 +773,2 @@\n-                { (Supplier<MemorySession>) () -> MemorySession.openShared()   },\n-                { (Supplier<MemorySession>) () -> MemorySession.openConfined() },\n+                { (Supplier<MemorySession>) MemorySession::openShared},\n+                { (Supplier<MemorySession>) MemorySession::openConfined},\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(SEGMENT_SIZE, 1, session);\n+            MemorySegment segment = session.allocate(SEGMENT_SIZE, 1);\n@@ -196,1 +196,1 @@\n-            this.copy = MemorySegment.allocateNative(SEGMENT_SIZE, 1, segment.session());\n+            this.copy = segment.session().allocate(SEGMENT_SIZE, 1);\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        NATIVE(MemorySegment.allocateNative(8, MemorySession.openImplicit()), -1);\n+        NATIVE(MemorySegment.allocateNative(8), -1);\n","filename":"test\/jdk\/java\/foreign\/TestHeapAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(layout, session);\n+            MemorySegment segment = session.allocate(layout);\n@@ -472,1 +472,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(layout, session);\n+            MemorySegment segment = session.allocate(layout);\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(seq, session);\n+            MemorySegment segment = session.allocate(seq);\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(layout, session));\n+            MemorySegment segment = viewFactory.apply(session.allocate(layout));\n@@ -127,1 +127,1 @@\n-            MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq, session));\n+            MemorySegment segment = viewFactory.apply(session.allocate(seq));\n@@ -196,1 +196,1 @@\n-            MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq, session));\n+            MemorySegment segment = viewFactory.apply(session.allocate(seq));\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                MemorySegment segment = MemorySegment.allocateNative(128, session);\n+                MemorySegment segment = session.allocate(128);\n@@ -96,1 +96,1 @@\n-                MemorySegment segment = MemorySegment.allocateNative(64, session);\n+                MemorySegment segment = session.allocate(64);\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(aligned, session);\n+            MemorySegment segment = session.allocate(aligned);\n@@ -74,1 +74,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(alignedGroup, session);\n+            MemorySegment segment = session.allocate(alignedGroup);\n@@ -101,1 +101,1 @@\n-                MemorySegment segment = MemorySegment.allocateNative(layout, session);\n+                MemorySegment segment = session.allocate(layout);\n@@ -125,1 +125,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(g, session);\n+            MemorySegment segment = session.allocate(g);\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-            var nativeSegment = MemorySegment.allocateNative(4, 4, session);\n+            var nativeSegment = session.allocate(4, 4);\n@@ -187,2 +187,2 @@\n-                var s1 = MemorySegment.allocateNative((long) Integer.MAX_VALUE + 10L, 8, session);\n-                var s2 = MemorySegment.allocateNative((long) Integer.MAX_VALUE + 10L, 8, session);\n+                var s1 = session.allocate((long) Integer.MAX_VALUE + 10L, 8);\n+                var s2 = session.allocate((long) Integer.MAX_VALUE + 10L, 8);\n@@ -231,2 +231,2 @@\n-            s1 = MemorySegment.allocateNative(4, 1, session);\n-            s2 = MemorySegment.allocateNative(4, 1, session);\n+            s1 = session.allocate(4, 1);\n+            s2 = session.allocate(4, 1);\n@@ -242,1 +242,1 @@\n-            var segment = MemorySegment.allocateNative(4, 1, session);\n+            var segment = session.allocate(4, 1);\n@@ -283,1 +283,1 @@\n-        NATIVE(i -> MemorySegment.allocateNative(i, MemorySession.openImplicit())),\n+        NATIVE(i -> MemorySegment.allocateNative(i)),\n","filename":"test\/jdk\/java\/foreign\/TestMismatch.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(seq, session);\n+            MemorySegment segment = session.allocate(seq);\n@@ -158,1 +158,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(doubles, session);\n+            MemorySegment segment = session.allocate(doubles);\n@@ -201,1 +201,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(4, 1, session);\n+            MemorySegment segment = session.allocate(4, 1);\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-        ScopedOperation.ofScope(session -> MemorySegment.allocateNative(100, session), \"MemorySegment::allocateNative\");\n+        ScopedOperation.ofScope(session -> session.allocate(100), \"MemorySession::allocate\");\n@@ -220,1 +220,1 @@\n-            NATIVE(session -> MemorySegment.allocateNative(10, session)),\n+            NATIVE(session -> session.allocate(10)),\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-                return MemorySegment.allocateNative(bytesSize, bytesAlignment, MemorySession.openImplicit());\n+                return MemorySegment.allocateNative(bytesSize, bytesAlignment);\n@@ -502,1 +502,1 @@\n-                { SegmentAllocator.prefixAllocator(MemorySegment.allocateNative(10, MemorySession.global())) },\n+                { SegmentAllocator.prefixAllocator(MemorySession.global().allocate(10)) },\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-            NATIVE(i -> MemorySegment.allocateNative(i, MemorySession.openImplicit())),\n+            NATIVE(i -> MemorySegment.allocateNative(i)),\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-            NATIVE(i -> MemorySegment.allocateNative(i, MemorySession.openConfined())),\n+            NATIVE(i -> MemorySession.openConfined().allocate(i)),\n","filename":"test\/jdk\/java\/foreign\/TestSegmentOffset.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                () -> MemorySegment.allocateNative(16, MemorySession.openConfined()),\n+                () -> MemorySession.openConfined().allocate(16),\n@@ -134,1 +134,1 @@\n-        NATIVE(() -> MemorySegment.allocateNative(16, MemorySession.openConfined())),\n+        NATIVE(() -> MemorySession.openConfined().allocate(16)),\n","filename":"test\/jdk\/java\/foreign\/TestSegmentOverlap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n+        MemorySegment.allocateNative(size, align);\n@@ -59,1 +59,1 @@\n-            var segment = MemorySegment.allocateNative(0, session);\n+            var segment = session.allocate(0);\n@@ -62,1 +62,1 @@\n-            segment = MemorySegment.allocateNative(seq, session);\n+            segment = session.allocate(seq);\n@@ -65,1 +65,1 @@\n-            segment = MemorySegment.allocateNative(0, 4, session);\n+            segment = session.allocate(0, 4);\n@@ -77,1 +77,1 @@\n-        MemorySegment.allocateNative(Long.MAX_VALUE, MemorySession.openImplicit());\n+        MemorySegment.allocateNative(Long.MAX_VALUE);\n@@ -82,1 +82,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(1024 * 1024 * 8 * 2, MemorySession.openImplicit()); \/\/ 2M\n+        MemorySegment segment = MemorySegment.allocateNative(1024L * 1024 * 8 * 2); \/\/ 2M\n@@ -89,1 +89,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(1000, 1, session);\n+            MemorySegment segment = session.allocate(1000, 1);\n@@ -100,1 +100,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(10, 1, session);\n+            MemorySegment segment = session.allocate(10, 1);\n@@ -120,1 +120,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(100, session);\n+            MemorySegment segment = session.allocate(100);\n@@ -126,1 +126,1 @@\n-            MemorySegment segment2 = MemorySegment.allocateNative(100, session);\n+            MemorySegment segment2 = session.allocate(100);\n@@ -145,1 +145,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(100, session);\n+            MemorySegment segment = session.allocate(100);\n@@ -163,2 +163,2 @@\n-        long offset = (long)Integer.MAX_VALUE + (long)Integer.MAX_VALUE + 2L + 6L; \/\/ overflows to 6 when casted to int\n-        MemorySegment memorySegment = MemorySegment.allocateNative(10, MemorySession.openImplicit());\n+        long offset = (long)Integer.MAX_VALUE + (long)Integer.MAX_VALUE + 2L + 6L; \/\/ overflows to 6 when cast to int\n+        MemorySegment memorySegment = MemorySegment.allocateNative(10);\n@@ -170,2 +170,2 @@\n-        long offset = ((long)Integer.MIN_VALUE * 2L) + 6L; \/\/ underflows to 6 when casted to int\n-        MemorySegment memorySegment = MemorySegment.allocateNative(10, MemorySession.openImplicit());\n+        long offset = ((long)Integer.MIN_VALUE * 2L) + 6L; \/\/ underflows to 6 when cast to int\n+        MemorySegment memorySegment = MemorySegment.allocateNative(10L);\n@@ -178,1 +178,1 @@\n-            var segment = MemorySegment.allocateNative(10, MemorySession.global());\n+            var segment = MemorySession.global().allocate(10);\n@@ -210,6 +210,6 @@\n-                () -> MemorySegment.allocateNative(4, MemorySession.openImplicit()),\n-                () -> MemorySegment.allocateNative(4, 8, MemorySession.openImplicit()),\n-                () -> MemorySegment.allocateNative(JAVA_INT, MemorySession.openImplicit()),\n-                () -> MemorySegment.allocateNative(4, MemorySession.openImplicit()),\n-                () -> MemorySegment.allocateNative(4, 8, MemorySession.openImplicit()),\n-                () -> MemorySegment.allocateNative(JAVA_INT, MemorySession.openImplicit())\n+                () -> MemorySegment.allocateNative(4L),\n+                () -> MemorySegment.allocateNative(4L, 8),\n+                () -> MemorySegment.allocateNative(JAVA_INT),\n+                () -> MemorySegment.allocateNative(4L),\n+                () -> MemorySegment.allocateNative(4L, 8),\n+                () -> MemorySegment.allocateNative(JAVA_INT)\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(layout, session);\n+            MemorySegment s = session.allocate(layout);\n@@ -97,1 +97,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(4, 1, session);\n+            MemorySegment s = session.allocate(4, 1);\n@@ -124,1 +124,1 @@\n-            MemorySegment s1 = MemorySegment.allocateNative(MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT), session);\n+            MemorySegment s1 = session.allocate(MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT));\n","filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(LAYOUT, session);\n+            MemorySegment segment = session.allocate(LAYOUT);\n@@ -65,1 +65,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(LAYOUT, session);\n+            MemorySegment segment = session.allocate(LAYOUT);\n","filename":"test\/jdk\/java\/foreign\/TestSlices.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(layout, session);\n+            MemorySegment segment = session.allocate(layout);\n@@ -87,1 +87,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout);\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(8, 8, session);\n+            MemorySegment s = session.allocate(8, 8);\n@@ -65,1 +65,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(8, 8, session);\n+            MemorySegment s = session.allocate(8, 8);\n@@ -73,1 +73,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(8, 8, session);\n+            MemorySegment s = session.allocate(8, 8);\n@@ -81,1 +81,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(8, 8, session);\n+            MemorySegment s = session.allocate(8, 8);\n","filename":"test\/jdk\/java\/foreign\/TestTypeAccess.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize(), MemorySession.openImplicit());\n+                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize());\n","filename":"test\/jdk\/java\/foreign\/TestUpcallBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize(), MemorySession.openImplicit());\n+                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize());\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-            MemorySegment argSegment = MemorySegment.allocateNative(S_PDI_LAYOUT, session);\n+            MemorySegment argSegment = session.allocate(S_PDI_LAYOUT);\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStructScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-            MemorySegment callInfo = MemorySegment.allocateNative(CallInfo.LAYOUT, session);\n-            MemorySegment argIDs = MemorySegment.allocateNative(MemoryLayout.sequenceLayout(args.size(), C_INT), session);\n+            MemorySegment callInfo = session.allocate(CallInfo.LAYOUT);\n+            MemorySegment argIDs = session.allocate(MemoryLayout.sequenceLayout(args.size(), C_INT));\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(1, 2, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(1L, 2);\n@@ -105,1 +105,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(inner_size * outer_size * 8, 4, session);\n+            MemorySegment segment = session.allocate(inner_size * outer_size * 8, 4);\n","filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        var segment = MemorySegment.allocateNative(size, 1, session);\n+        var segment = session.allocate(size, 1);\n","filename":"test\/jdk\/java\/foreign\/channels\/AbstractChannelsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            var segment = MemorySegment.allocateNative(10, 1, session);\n+            var segment = session.allocate(10, 1);\n@@ -163,2 +163,2 @@\n-            MemorySegment segment1 = MemorySegment.allocateNative(10, 1, session);\n-            MemorySegment segment2 = MemorySegment.allocateNative(10, 1, session);\n+            MemorySegment segment1 = session.allocate(10, 1);\n+            MemorySegment segment2 = session.allocate(10, 1);\n@@ -210,1 +210,1 @@\n-            var segment = MemorySegment.allocateNative(10, 1, session);\n+            var segment = session.allocate(10, 1);\n","filename":"test\/jdk\/java\/foreign\/channels\/TestAsyncSocketChannels.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -104,2 +104,2 @@\n-            MemorySegment segment1 = MemorySegment.allocateNative(10, 1, session);\n-            MemorySegment segment2 = MemorySegment.allocateNative(10, 1, session);\n+            MemorySegment segment1 = session.allocate(10, 1);\n+            MemorySegment segment2 = session.allocate(10, 1);\n@@ -143,1 +143,1 @@\n-            var segment = MemorySegment.allocateNative(10, 1, session);\n+            var segment = session.allocate(10, 1);\n","filename":"test\/jdk\/java\/foreign\/channels\/TestSocketChannels.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-                    MemorySegment struct = MemorySession.openImplicit().allocate(pointLayout);\n+                    MemorySegment struct = MemorySegment.allocateNative(pointLayout);\n@@ -304,1 +304,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT);\n@@ -341,1 +341,1 @@\n-            MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT, session);\n+            MemorySegment struct = session.allocate(BigPoint_LAYOUT);\n@@ -357,1 +357,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(FloatPoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(FloatPoint_LAYOUT);\n@@ -395,1 +395,1 @@\n-            MemorySegment struct = MemorySegment.allocateNative(FloatPoint_LAYOUT, session);\n+            MemorySegment struct = session.allocate(FloatPoint_LAYOUT);\n@@ -415,1 +415,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(HugePoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(HugePoint_LAYOUT);\n@@ -459,1 +459,1 @@\n-            MemorySegment struct = MemorySegment.allocateNative(HugePoint_LAYOUT, session);\n+            MemorySegment struct = session.allocate(HugePoint_LAYOUT);\n@@ -511,2 +511,2 @@\n-            MemorySegment longSum = MemorySegment.allocateNative(longLayout, session);\n-            MemorySegment doubleSum = MemorySegment.allocateNative(doubleLayout, session);\n+            MemorySegment longSum = session.allocate(longLayout);\n+            MemorySegment doubleSum = session.allocate(doubleLayout);\n@@ -596,1 +596,1 @@\n-                MemorySegment pointIn = MemorySegment.allocateNative(Point_LAYOUT, innerSession);\n+                MemorySegment pointIn = innerSession.allocate(Point_LAYOUT);\n@@ -600,1 +600,1 @@\n-                pointOut = MemorySegment.allocateNative(Point_LAYOUT, session);\n+                pointOut = session.allocate(Point_LAYOUT);\n@@ -687,1 +687,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT);\n@@ -694,1 +694,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct =  MemorySegment.allocateNative(BigPoint_LAYOUT);\n@@ -708,1 +708,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT);\n@@ -720,1 +720,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(Point_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(Point_LAYOUT);\n@@ -726,1 +726,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(HugePoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(HugePoint_LAYOUT);\n@@ -733,1 +733,1 @@\n-                    MemorySegment struct = MemorySegment.allocateNative(FloatPoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment struct = MemorySegment.allocateNative(FloatPoint_LAYOUT);\n@@ -778,1 +778,1 @@\n-                    MemorySegment buffer = MemorySegment.allocateNative(BigPoint_LAYOUT, MemorySession.openImplicit());\n+                    MemorySegment buffer = MemorySegment.allocateNative(BigPoint_LAYOUT);\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-            MemorySegment seg = MemorySegment.allocateNative(8, session);\n+            MemorySegment seg = session.allocate(8);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(layout, session);\n+            MemorySegment segment = session.allocate(layout);\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,10 +39,8 @@\n-            withToString(\"HB:RW:NE\", (int s) -> {\n-                return ByteBuffer.allocate(s)\n-                        .order(ByteOrder.nativeOrder());\n-            }),\n-            withToString(\"DB:RW:NE\", (int s) -> {\n-                return ByteBuffer.allocateDirect(s)\n-                        .order(ByteOrder.nativeOrder());\n-            }),\n-            withToString(\"MS:RW:NE\", (int s) -> {\n-                return MemorySegment.allocateNative(s, MemorySession.openImplicit())\n+            withToString(\"HB:RW:NE\", (int s) ->\n+                    ByteBuffer.allocate(s)\n+                        .order(ByteOrder.nativeOrder())),\n+            withToString(\"DB:RW:NE\", (int s) ->\n+                    ByteBuffer.allocateDirect(s)\n+                        .order(ByteOrder.nativeOrder())),\n+            withToString(\"MS:RW:NE\", (int s) ->\n+                    MemorySegment.allocateNative(s)\n@@ -50,2 +48,2 @@\n-                        .order(ByteOrder.nativeOrder());\n-            })\n+                        .order(ByteOrder.nativeOrder())\n+            )\n@@ -55,3 +53,3 @@\n-            withToString(\"HMS\", (int s) -> {\n-                return MemorySegment.allocateNative(s, MemorySession.openImplicit());\n-            }),\n+            withToString(\"HMS\", (int s) ->\n+                    MemorySegment.allocateNative(s)\n+            ),\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorLoadStoreTest.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -226,0 +226,1 @@\n+  gen_perf_tests=true\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -502,2 +502,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE);\n@@ -531,2 +531,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE);\n@@ -595,2 +595,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE);\n@@ -626,2 +626,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, MemorySession.openImplicit()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, MemorySession.openImplicit());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE));\n+        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -89,2 +89,2 @@\n-        mismatchSegmentLarge1 = MemorySegment.allocateNative(SIZE_WITH_TAIL, session);\n-        mismatchSegmentLarge2 = MemorySegment.allocateNative(SIZE_WITH_TAIL, session);\n+        mismatchSegmentLarge1 = session.allocate(SIZE_WITH_TAIL);\n+        mismatchSegmentLarge2 = session.allocate(SIZE_WITH_TAIL);\n@@ -95,2 +95,2 @@\n-        mismatchSegmentSmall1 = MemorySegment.allocateNative(7, session);\n-        mismatchSegmentSmall2 = MemorySegment.allocateNative(7, session);\n+        mismatchSegmentSmall1 = session.allocate(7);\n+        mismatchSegmentSmall2 = session.allocate(7);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkMismatchAcquire.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openConfined());\n+    final MemorySegment segment = MemorySession.openConfined().allocate(ALLOC_SIZE);\n@@ -75,2 +75,2 @@\n-    final MemorySegment mismatchSegmentLarge1 = MemorySegment.allocateNative(SIZE_WITH_TAIL, session);\n-    final MemorySegment mismatchSegmentLarge2 = MemorySegment.allocateNative(SIZE_WITH_TAIL, session);\n+    final MemorySegment mismatchSegmentLarge1 = session.allocate(SIZE_WITH_TAIL);\n+    final MemorySegment mismatchSegmentLarge2 = session.allocate(SIZE_WITH_TAIL);\n@@ -81,2 +81,2 @@\n-    final MemorySegment mismatchSegmentSmall1 = MemorySegment.allocateNative(7, session);\n-    final MemorySegment mismatchSegmentSmall2 = MemorySegment.allocateNative(7, session);\n+    final MemorySegment mismatchSegmentSmall1 = session.allocate(7);\n+    final MemorySegment mismatchSegmentSmall2 = session.allocate(7);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -83,2 +83,2 @@\n-    static final MemorySegment sharedPoint = MemorySegment.allocateNative(POINT_LAYOUT, MemorySession.openShared());\n-    static final MemorySegment confinedPoint = MemorySegment.allocateNative(POINT_LAYOUT, MemorySession.openConfined());\n+    static final MemorySegment sharedPoint = MemorySession.openShared().allocate(POINT_LAYOUT);\n+    static final MemorySegment confinedPoint = MemorySession.openConfined().allocate(POINT_LAYOUT);\n@@ -86,1 +86,1 @@\n-    static final MemorySegment point = MemorySegment.allocateNative(POINT_LAYOUT, MemorySession.openImplicit());\n+    static final MemorySegment point = MemorySegment.allocateNative(POINT_LAYOUT);\n@@ -88,1 +88,1 @@\n-    static final SegmentAllocator recycling_allocator = SegmentAllocator.prefixAllocator(MemorySegment.allocateNative(POINT_LAYOUT, MemorySession.openImplicit()));\n+    static final SegmentAllocator recycling_allocator = SegmentAllocator.prefixAllocator(MemorySegment.allocateNative(POINT_LAYOUT));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openImplicit());\n+    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    final SegmentAllocator recyclingAlloc = SegmentAllocator.prefixAllocator(MemorySegment.allocateNative(ALLOC_LAYOUT, session));\n+    final SegmentAllocator recyclingAlloc = SegmentAllocator.prefixAllocator(session.allocate(ALLOC_LAYOUT));\n@@ -81,1 +81,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, 4, session);\n+            MemorySegment segment = session.allocate(ALLOC_SIZE, 4);\n@@ -91,1 +91,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, 4, session);\n+            MemorySegment segment = session.allocate(ALLOC_SIZE, 4);\n@@ -136,1 +136,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, 4, MemorySession.openImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, 4);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNew.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openConfined());\n+        segment = MemorySession.openConfined().allocate(ALLOC_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-        segmentIn = MemorySegment.allocateNative(ALLOC_SIZE, session);\n-        segmentOut = MemorySegment.allocateNative(ALLOC_SIZE, session);\n+        segmentIn = session.allocate(ALLOC_SIZE);\n+        segmentOut = session.allocate(ALLOC_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantFP.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(ALLOC_SIZE, 1, MemorySession.openConfined());\n+            MemorySegment s = MemorySession.openConfined().allocate(ALLOC_SIZE, 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, MemorySession.openConfined());\n+        segment = MemorySession.openConfined().allocate(ALLOC_SIZE, CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantShared.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,2 +70,3 @@\n-        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, 4, session = MemorySession.openConfined());\n-        nativeSharedSegment = MemorySegment.allocateNative(ALLOC_SIZE, 4, session);\n+        session = MemorySession.openConfined();\n+        nativeSegment = session.allocate(ALLOC_SIZE, 4);\n+        nativeSharedSegment = session.allocate(ALLOC_SIZE, 4); \/\/ <- This segment is not shared!\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedSegments.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openConfined());\n+        nativeSegment = MemorySession.openConfined().allocate(ALLOC_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverSlice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-            return MemorySegment.allocateNative(ALLOC_SIZE, 4, session);\n+            return session.allocate(ALLOC_SIZE, 4);\n@@ -115,1 +115,1 @@\n-            return MemorySegment.allocateNative(ALLOC_SIZE, 4, session);\n+            return session.allocate(ALLOC_SIZE, 4);\n@@ -121,1 +121,1 @@\n-        return MemorySegment.allocateNative(ALLOC_SIZE, 4, MemorySession.openImplicit());\n+        return MemorySegment.allocateNative(ALLOC_SIZE, 4);\n@@ -127,1 +127,1 @@\n-        return MemorySegment.allocateNative(ALLOC_SIZE, 4, MemorySession.openImplicit());\n+        return MemorySegment.allocateNative(ALLOC_SIZE, 4);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySessionClose.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, MemorySession.openShared());\n+        segment = MemorySession.openShared().allocate(ALLOC_SIZE, CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ParallelSum.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    MemorySegment segment = MemorySegment.allocateNative(100, session);\n+    MemorySegment segment = session.allocate(100);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        INPUT_SEGMENT = MemorySegment.allocateNative(MemoryLayout.sequenceLayout(INPUT.length, JAVA_INT), MemorySession.global());\n+        INPUT_SEGMENT = MemorySession.global().allocate(MemoryLayout.sequenceLayout(INPUT.length, JAVA_INT));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/QSort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        segmentAllocator = SegmentAllocator.prefixAllocator(MemorySegment.allocateNative(size + 1, MemorySession.openConfined()));\n+        segmentAllocator = SegmentAllocator.prefixAllocator(MemorySession.openConfined().allocate(size + 1));\n@@ -99,1 +99,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(str.length() + 1, session);\n+            MemorySegment segment = session.allocate(str.length() + 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        srcSegmentImplicit = MemorySegment.allocateNative(size, MemorySession.openImplicit());\n+        srcSegmentImplicit = MemorySegment.allocateNative(size);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/TestLoadBytes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        data = MemorySegment.allocateNative(JAVA_INT, MemorySession.openConfined());\n+        data = MemorySession.openConfined().allocate(JAVA_INT);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/VarHandleExact.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        this.segment = MemorySegment.allocateNative(LAYOUT, MemorySession.openConfined());\n+        this.segment = MemorySession.openConfined().allocate(LAYOUT);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-    nativeIn = MemorySegment.allocateNative(size, MemorySession.openImplicit());\n-    nativeOut = MemorySegment.allocateNative(size, MemorySession.openImplicit());\n+    nativeIn = MemorySegment.allocateNative(size);\n+    nativeOut = MemorySegment.allocateNative(size);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MemorySegmentVectorAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,2 +87,2 @@\n-    srcSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize(), MemorySession.openImplicit());\n-    dstSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize(), MemorySession.openImplicit());\n+    srcSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize());\n+    dstSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,2 +92,2 @@\n-    srcSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize(), MemorySession.openImplicit());\n-    dstSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize(), MemorySession.openImplicit());\n+    srcSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize());\n+    dstSegment = MemorySegment.allocateNative(size, SPECIES.vectorByteSize());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreShorts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}