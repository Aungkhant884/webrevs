{"files":[{"patch":"@@ -96,0 +96,6 @@\n+    @Override\n+    @NativeAccess\n+    public MemorySegment asSegmentRestricted(long bytesSize) {\n+        return MemoryAddress.super.asSegmentRestricted(bytesSize);\n+    }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.foreign.MemoryAddress;\n@@ -36,1 +37,0 @@\n-\n@@ -52,0 +52,17 @@\n+\n+    @Test(expectedExceptions = IllegalAccessException.class)\n+    public void testReflection2() throws Throwable {\n+        Method method = MemoryAddress.class.getDeclaredMethod(\"asSegmentRestricted\", long.class);\n+        method.invoke(MemoryAddress.NULL, 4000L);\n+    }\n+\n+    @Test(expectedExceptions = IllegalAccessException.class)\n+    public void testLookup2() throws Throwable {\n+        MethodHandles.lookup().findVirtual(MemoryAddress.class, \"asSegmentRestricted\",\n+            MethodType.methodType(MemorySegment.class, long.class));\n+    }\n+\n+    @Test(expectedExceptions = IllegalAccessException.class)\n+    public void testDirectAccess2() throws Throwable {\n+        MemoryAddress.NULL.asSegmentRestricted(4000L);\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}