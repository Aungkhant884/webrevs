{"files":[{"patch":"@@ -502,1 +502,5 @@\n-    private final void checkRestrictedNative(Executable e, Class<?> caller) throws IllegalAccessException {\n+    private boolean isRestrictedNative() {\n+        return (flags & RESTRICTED_NATIVE) != 0;\n+    }\n+\n+    private final void checkRestrictedNative(Class<?> caller) throws IllegalAccessException {\n@@ -504,1 +508,1 @@\n-        if (VM.isBooted() && ((flags & RESTRICTED_NATIVE) != 0)) {\n+        if (VM.isBooted()) {\n@@ -586,1 +590,4 @@\n-            checkRestrictedNative(this, caller);\n+        }\n+        if (isRestrictedNative()) {\n+            Class<?> caller = Reflection.getCallerClass();\n+            checkRestrictedNative(caller);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -39,0 +39,7 @@\n+   @Test\n+   public void testSetAccessible() throws Throwable {\n+       Method method = CLinker.class.getDeclaredMethod(\"getInstance\");\n+       method.setAccessible(true);\n+       method.invoke(null);\n+   }\n+\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}