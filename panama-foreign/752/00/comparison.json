{"files":[{"patch":"@@ -34,4 +34,2 @@\n- * An arena is a {@linkplain AutoCloseable closeable} segment allocator that is associated with a {@link #session() memory session}.\n- * This session is created with the arena, and is closed when the arena is {@linkplain #close() closed}.\n- * Furthermore, all the native segments {@linkplain #allocate(long, long) allocated} by the arena are associated\n- * with that session.\n+ * An arena is a {@linkplain AutoCloseable closeable} {@linkplain SegmentAllocator segment allocator} that\n+ * is associated with a {@link #session() memory session}.\n@@ -39,4 +37,14 @@\n- * The <a href=\"MemorySession.html#thread-confinement\">confinement properties<\/a> of the session associated with an\n- * arena are determined by the factory used to create the arena. For instance, an arena created with {@link #openConfined()}\n- * is associated with a <em>confined<\/em> memory session. Conversely, an arena created with {@link #openShared()} is\n- * associated with a <em>shared<\/em> memory session.\n+ * The following holds for arenas produced by either of the standard factories {@linkplain #openConfined()} or {@linkplain #openShared()}\n+ * <ul>\n+ *     <li>\n+ *         An associated session is created together with the arena, and is closed when the arena is\n+ *         {@linkplain #close() closed} implying all native segments {@linkplain #allocate(long, long) allocated}\n+ *         by the arena are released.\n+ *     <\/li>\n+ *     <li>\n+ *         The <a href=\"MemorySession.html#thread-confinement\">confinement properties<\/a> of the session associated\n+ *         with an arena are determined by the factory used to create the arena. For instance, an arena created with\n+ *         {@link #openConfined()} is associated with a <em>confined<\/em> memory session.\n+ *         Conversely, an arena created with {@link #openShared()} is associated with a <em>shared<\/em> memory session.\n+ *     <\/li>\n+ * <\/ul>\n@@ -44,1 +52,1 @@\n- * An arena is extremely useful when interacting with foreign code, as shown below:\n+ * Arenas are very useful when interacting with foreign code, as shown below:\n@@ -54,0 +62,3 @@\n+ *<p>\n+ * An arena should be closed when no longer in use, by calling the {@link Arena#close} method. Failure to do so\n+ * might otherwise result in memory leaks.\n@@ -61,3 +72,4 @@\n-     * Creates a native memory segment with the given size (in bytes), alignment constraint (in bytes).\n-     * The returned segment is associated with the same memory session associated with this arena.\n-     * The {@link MemorySegment#address()} of the returned memory segment is the starting address of the\n+     * {@return a new native memory segment with the given size (in bytes) and alignment constraint (in bytes)}.\n+     * <p>\n+     * The returned segment is associated with the {@linkplain #session() same memory session} associated with this arena.\n+     * The {@linkplain MemorySegment#address() address} of the returned memory segment is the starting address of the\n@@ -72,0 +84,2 @@\n+     * @implSpec\n+     * The method shall return a {@linkplain MemorySegment#isNative() native} memory segment.\n@@ -75,1 +89,0 @@\n-     * @return a new native memory segment.\n@@ -89,1 +102,1 @@\n-     * {@return the session associated with this arena}\n+     * {@return the non-null session associated with this arena}.\n@@ -97,0 +110,5 @@\n+     *\n+     * @implSpec\n+     * If this method completes normally, the associated {@linkplain #session() session} must no longer be\n+     * {@linkplain MemorySession#isAlive() alive}.\n+     *\n@@ -105,2 +123,1 @@\n-     * Creates a new arena, associated with a new confined session.\n-     * @return a new arena, associated with a new confined session.\n+     * {@return a new arena, associated with a new confined session}.\n@@ -109,1 +126,1 @@\n-        return makeArena(MemorySessionImpl.createConfined(Thread.currentThread()));\n+        return MemorySessionImpl.createConfined(Thread.currentThread()).asArena();\n@@ -113,2 +130,1 @@\n-     * Creates a new arena, associated with a new shared session.\n-     * @return a new arena, associated with a new shared session.\n+     * {@return a new arena, associated with a new shared session}.\n@@ -117,1 +133,1 @@\n-        return makeArena(MemorySessionImpl.createShared());\n+        return MemorySessionImpl.createShared().asArena();\n@@ -120,13 +136,0 @@\n-    private static Arena makeArena(MemorySessionImpl sessionImpl) {\n-        return new Arena() {\n-            @Override\n-            public MemorySession session() {\n-                return sessionImpl;\n-            }\n-\n-            @Override\n-            public void close() {\n-                sessionImpl.close();\n-            }\n-        };\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":36,"deletions":33,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -234,0 +235,17 @@\n+    public Arena asArena() {\n+        return new ArenaImpl();\n+    }\n+\n+    private final class ArenaImpl implements Arena {\n+        @Override\n+        public MemorySession session() {\n+            return MemorySessionImpl.this;\n+        }\n+\n+        @Override\n+        public void close() {\n+            MemorySessionImpl.this.close();\n+        }\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}