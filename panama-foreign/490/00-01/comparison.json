{"files":[{"patch":"@@ -97,1 +97,0 @@\n-                \/\/ emitFunctionWrapperNoAllocatorOverload(javaName, functionInfo);\n@@ -204,19 +203,0 @@\n-    private void emitFunctionWrapperNoAllocatorOverload(String javaName, FunctionInfo functionInfo) {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS + \" \");\n-        List<String> pExprs = emitFunctionWrapperDecl(javaName, functionInfo.methodType(), functionInfo.isVarargs(), functionInfo.parameterNames().get());\n-        pExprs.add(0, \"RuntimeHelper.DEFAULT_ALLOCATOR\");\n-        append(\" {\\n\");\n-        incrAlign();\n-        indent();\n-        if (!functionInfo.methodType().returnType().equals(void.class)) {\n-            append(\"return (\" + functionInfo.methodType().returnType().getName() + \")\");\n-        }\n-        append(javaName + \"(\" + String.join(\", \", pExprs) + \");\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-            emitOfAddress();\n@@ -286,8 +285,0 @@\n-    private void emitOfAddress() {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment ofAddress(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\\n\");\n-        decrAlign();\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    private final static SegmentAllocator DEFAULT_ALLOCATOR = (x, y) -> MemorySegment.allocateNative(x, y, ResourceScope.newImplicitScope());\n+    private final static SegmentAllocator THROWING_ALLOCATOR = (x, y) -> { throw new AssertionError(\"should not reach here\"); };\n@@ -96,4 +96,0 @@\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements) {\n-        return addr.asSegment(numElements * layout.byteSize(), ResourceScope.newImplicitScope());\n-    }\n-\n@@ -137,1 +133,1 @@\n-                handle = MethodHandles.insertArguments(handle, 0, DEFAULT_ALLOCATOR);\n+                handle = MethodHandles.insertArguments(handle, 0, THROWING_ALLOCATOR);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -53,11 +54,6 @@\n-        MemoryAddress addr = make(14, 99);\n-        MemorySegment seg = Point.ofAddress(addr);\n-        assertEquals(Point.x$get(seg), 14);\n-        assertEquals(Point.y$get(seg), 99);\n-        CLinker.freeMemory(addr);\n-        boolean caughtException = false;\n-        try {\n-            seg.scope().close();\n-        } catch (UnsupportedOperationException uoe) {\n-            System.err.println(uoe);\n-            caughtException = true;\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            MemoryAddress addr = make(14, 99);\n+            MemorySegment seg = Point.ofAddress(addr, scope);\n+            assertEquals(Point.x$get(seg), 14);\n+            assertEquals(Point.y$get(seg), 99);\n+            CLinker.freeMemory(addr);\n@@ -65,1 +61,0 @@\n-        assertTrue(caughtException);\n","filename":"test\/jdk\/tools\/jextract\/test8253102\/LibTest8253102Test.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"}]}