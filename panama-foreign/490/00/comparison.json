{"files":[{"patch":"@@ -30,1 +30,1 @@\n-    JAVA_ARGS := -Dforeign.restricted=permit, \\\n+    JAVA_ARGS := --enable-native-access=jdk.incubator.jextract, \\\n","filename":"make\/modules\/jdk.incubator.jextract\/Launcher.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -341,1 +342,1 @@\n-            MemorySegment copy = MemorySegment.allocateNative(c.byteSize());\n+            MemorySegment copy = MemorySegment.allocateNative(c.byteSize(), ResourceScope.newImplicitScope());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Cursor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        return CLinker.toJavaStringRestricted(value);\n+        return CLinker.toJavaString(value);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/EvalResult.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -44,1 +45,1 @@\n-            CLinker.toCString(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY);\n+            CLinker.toCString(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY, ResourceScope.newImplicitScope());\n@@ -73,1 +74,1 @@\n-        String str = CLinker.toJavaStringRestricted(buf);\n+        String str = CLinker.toJavaString(buf);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/LibClang.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        try (var scope = ResourceScope.ofConfined()) {\n+        try (var scope = ResourceScope.newConfinedScope()) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceLocation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -126,5 +126,7 @@\n-        MemorySegment p = MemorySegment.allocateNative(CLinker.C_POINTER);\n-        MemorySegment pCnt = MemorySegment.allocateNative(CLinker.C_INT);\n-        Index_h.clang_tokenize(tu, range.range, p, pCnt);\n-        Tokens rv = new Tokens(MemoryAccess.getAddress(p), MemoryAccess.getInt(pCnt));\n-        return rv;\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            MemorySegment p = MemorySegment.allocateNative(CLinker.C_POINTER, scope);\n+            MemorySegment pCnt = MemorySegment.allocateNative(CLinker.C_INT, scope);\n+            Index_h.clang_tokenize(tu, range.range, p, pCnt);\n+            Tokens rv = new Tokens(MemoryAccess.getAddress(p), MemoryAccess.getInt(pCnt));\n+            return rv;\n+        }\n@@ -164,1 +166,1 @@\n-            return p.asSegmentRestricted(Index_h.CXToken.$LAYOUT().byteSize());\n+            return p.asSegment(Index_h.CXToken.$LAYOUT().byteSize(), ResourceScope.newImplicitScope());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        static final MemoryLayout CXString$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXString$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -65,1 +65,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -103,1 +103,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -105,7 +104,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -116,1 +110,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -121,1 +115,1 @@\n-        static final MemoryLayout CXStringSet$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXStringSet$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -124,1 +118,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -162,1 +156,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -164,7 +157,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -175,1 +163,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -213,1 +201,1 @@\n-        static final MemoryLayout CXUnsavedFile$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXUnsavedFile$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -270,1 +258,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -272,7 +259,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -283,1 +265,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -300,1 +282,1 @@\n-        static final MemoryLayout CXVersion$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXVersion$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -357,1 +339,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -359,7 +340,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -370,1 +346,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -451,1 +427,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -454,1 +430,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -463,1 +439,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -466,1 +442,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -556,2 +532,2 @@\n-        static final MemoryLayout CXFileUniqueID$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(3, C_LONG_LONG).withName(\"data\")\n+        static final MemoryLayout CXFileUniqueID$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(3, C_LONG_LONG).withName(\"data\")\n@@ -566,1 +542,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -568,7 +543,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -579,1 +549,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -623,1 +593,1 @@\n-        static final FunctionDescriptor clang_getFileName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getFileName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -626,1 +596,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -709,2 +679,2 @@\n-        static final MemoryLayout CXSourceLocation$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final MemoryLayout CXSourceLocation$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -712,1 +682,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -737,1 +707,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -739,7 +708,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -750,1 +714,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -755,2 +719,2 @@\n-        static final MemoryLayout CXSourceRange$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final MemoryLayout CXSourceRange$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -799,1 +763,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -801,7 +764,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -812,1 +770,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -867,1 +825,1 @@\n-        static final FunctionDescriptor clang_File_tryGetRealPathName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_File_tryGetRealPathName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -870,1 +828,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -879,2 +837,2 @@\n-        static final FunctionDescriptor clang_getNullLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getNullLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -882,1 +840,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -890,2 +848,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -893,1 +851,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -895,2 +853,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -898,1 +856,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -976,2 +934,2 @@\n-        static final FunctionDescriptor clang_getLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -979,1 +937,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -991,2 +949,2 @@\n-        static final FunctionDescriptor clang_getLocationForOffset$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getLocationForOffset$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -994,1 +952,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1006,2 +964,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1009,1 +967,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1018,2 +976,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1021,1 +979,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1029,2 +987,2 @@\n-        static final FunctionDescriptor clang_getNullRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getNullRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1039,2 +997,2 @@\n-        static final FunctionDescriptor clang_getRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1044,2 +1002,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1047,1 +1005,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1049,2 +1007,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1052,1 +1010,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1131,2 +1089,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1136,2 +1094,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1148,2 +1106,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1160,2 +1118,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1163,1 +1121,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1176,2 +1134,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1179,1 +1137,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1191,2 +1149,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1194,1 +1152,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1207,2 +1165,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1210,1 +1168,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1259,1 +1217,1 @@\n-        static final MemoryLayout CXSourceRangeList$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXSourceRangeList$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -1261,1 +1219,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -1300,1 +1258,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -1302,7 +1259,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -1313,1 +1265,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -1367,2 +1319,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1370,1 +1322,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -1382,2 +1334,2 @@\n-        static final FunctionDescriptor clang_getRangeStart$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getRangeStart$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1385,1 +1337,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1387,2 +1339,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1398,2 +1350,2 @@\n-        static final FunctionDescriptor clang_getRangeEnd$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getRangeEnd$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1401,1 +1353,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1403,2 +1355,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1685,1 +1637,1 @@\n-        static final FunctionDescriptor clang_formatDiagnostic$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_formatDiagnostic$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -1688,1 +1640,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1782,2 +1734,2 @@\n-        static final FunctionDescriptor clang_getDiagnosticLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getDiagnosticLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1785,1 +1737,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1794,1 +1746,1 @@\n-        static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -1797,1 +1749,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1806,1 +1758,1 @@\n-        static final FunctionDescriptor clang_getDiagnosticOption$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getDiagnosticOption$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -1809,1 +1761,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1827,1 +1779,1 @@\n-        static final FunctionDescriptor clang_getDiagnosticCategoryName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getDiagnosticCategoryName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -1830,1 +1782,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1839,1 +1791,1 @@\n-        static final FunctionDescriptor clang_getDiagnosticCategoryText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getDiagnosticCategoryText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -1842,1 +1794,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1929,2 +1881,2 @@\n-        static final FunctionDescriptor clang_getDiagnosticRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getDiagnosticRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -1950,1 +1902,1 @@\n-        static final FunctionDescriptor clang_getDiagnosticFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getDiagnosticFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -1953,1 +1905,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -1964,1 +1916,1 @@\n-        static final FunctionDescriptor clang_getTranslationUnitSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTranslationUnitSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -1967,1 +1919,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -2389,1 +2341,1 @@\n-        static final MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -2391,1 +2343,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -2430,1 +2382,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -2432,7 +2383,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -2443,1 +2389,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -2448,1 +2394,1 @@\n-        static final MemoryLayout CXTUResourceUsage$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXTUResourceUsage$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -2451,1 +2397,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -2506,1 +2452,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -2508,7 +2453,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -2519,1 +2459,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -2587,1 +2527,1 @@\n-        static final FunctionDescriptor clang_getCXTUResourceUsage$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCXTUResourceUsage$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -2590,1 +2530,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -2601,1 +2541,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -2604,1 +2544,1 @@\n-                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.paddingLayout(32),\n@@ -2629,1 +2569,1 @@\n-        static final FunctionDescriptor clang_TargetInfo_getTriple$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_TargetInfo_getTriple$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -2632,1 +2572,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -3448,1 +3388,1 @@\n-        static final MemoryLayout CXCursor$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXCursor$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -3451,1 +3391,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3492,1 +3432,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -3494,7 +3433,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -3505,1 +3439,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -3573,1 +3507,1 @@\n-        static final FunctionDescriptor clang_getNullCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getNullCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -3576,1 +3510,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3583,1 +3517,1 @@\n-        static final FunctionDescriptor clang_getTranslationUnitCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTranslationUnitCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -3586,1 +3520,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3596,1 +3530,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3599,1 +3533,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3601,1 +3535,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3604,1 +3538,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3613,1 +3547,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3616,1 +3550,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3625,1 +3559,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3628,1 +3562,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3707,1 +3641,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3710,1 +3644,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3727,1 +3661,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3730,1 +3664,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3856,1 +3790,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3859,1 +3793,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -3948,2 +3882,2 @@\n-        static final MemoryLayout CXPlatformAvailability$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofStruct(\n+        static final MemoryLayout CXPlatformAvailability$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.structLayout(\n@@ -3952,1 +3886,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -3954,1 +3888,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3959,1 +3893,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3964,1 +3898,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3970,1 +3904,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -3973,1 +3907,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -4011,1 +3945,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -4013,7 +3946,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -4024,1 +3952,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -4084,1 +4012,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4087,1 +4015,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4096,1 +4024,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4099,1 +4027,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4108,1 +4036,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4111,1 +4039,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4120,1 +4048,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4123,1 +4051,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4146,1 +4074,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4149,1 +4077,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4228,1 +4156,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4231,1 +4159,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4240,1 +4168,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4243,1 +4171,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4267,1 +4195,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4270,1 +4198,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4280,1 +4208,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4283,1 +4211,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4361,1 +4289,1 @@\n-        static final FunctionDescriptor clang_getCursorSemanticParent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorSemanticParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -4364,1 +4292,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4366,1 +4294,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4369,1 +4297,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4377,1 +4305,1 @@\n-        static final FunctionDescriptor clang_getCursorLexicalParent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorLexicalParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -4380,1 +4308,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4382,1 +4310,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4385,1 +4313,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4394,1 +4322,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4397,1 +4325,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4416,1 +4344,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4419,1 +4347,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4427,1 +4355,1 @@\n-        static final FunctionDescriptor clang_getCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -4430,1 +4358,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4433,2 +4361,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -4436,1 +4364,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -4884,1 +4812,1 @@\n-        static final MemoryLayout CXType$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXType$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -4886,2 +4814,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -4912,1 +4840,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -4914,7 +4841,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -4925,1 +4847,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -4974,2 +4896,2 @@\n-        static final FunctionDescriptor clang_getCursorLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getCursorLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -4977,1 +4899,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -4979,1 +4901,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4982,1 +4904,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -4990,2 +4912,2 @@\n-        static final FunctionDescriptor clang_getCursorExtent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getCursorExtent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -4995,1 +4917,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -4998,1 +4920,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5006,1 +4928,1 @@\n-        static final FunctionDescriptor clang_getCursorType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5008,2 +4930,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5011,1 +4933,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5014,1 +4936,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5022,1 +4944,1 @@\n-        static final FunctionDescriptor clang_getTypeSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTypeSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5025,1 +4947,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -5027,1 +4949,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5029,2 +4951,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5038,1 +4960,1 @@\n-        static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5040,2 +4962,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5043,1 +4965,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5046,1 +4968,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5054,1 +4976,1 @@\n-        static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5056,2 +4978,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5059,1 +4981,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5062,1 +4984,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5171,1 +5093,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5174,1 +5096,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5183,1 +5105,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5186,1 +5108,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5195,1 +5117,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5198,1 +5120,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5207,1 +5129,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5210,1 +5132,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5218,1 +5140,1 @@\n-        static final FunctionDescriptor clang_Cursor_getArgument$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getArgument$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5221,1 +5143,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5223,1 +5145,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5226,1 +5148,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5236,1 +5158,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5239,1 +5161,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5318,1 +5240,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5321,1 +5243,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5330,1 +5252,1 @@\n-        static final FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5332,2 +5254,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5335,1 +5257,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5338,1 +5260,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5348,1 +5270,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5351,1 +5273,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5361,1 +5283,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5364,1 +5286,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5374,1 +5296,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5376,2 +5298,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5379,1 +5301,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5381,2 +5303,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5390,1 +5312,1 @@\n-        static final FunctionDescriptor clang_getCanonicalType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCanonicalType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5392,2 +5314,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5395,1 +5317,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5397,2 +5319,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5476,1 +5398,1 @@\n-        static final FunctionDescriptor clang_getLocalUnqualifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getLocalUnqualifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5478,2 +5400,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5481,1 +5403,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5483,2 +5405,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5493,1 +5415,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5495,2 +5417,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5505,1 +5427,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5508,1 +5430,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5517,1 +5439,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5520,1 +5442,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5529,1 +5451,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5532,1 +5454,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5541,1 +5463,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5543,2 +5465,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5623,1 +5545,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5625,2 +5547,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5635,1 +5557,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5637,2 +5559,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5646,1 +5568,1 @@\n-        static final FunctionDescriptor clang_getTypedefName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTypedefName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5649,1 +5571,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -5651,1 +5573,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5653,2 +5575,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5662,1 +5584,1 @@\n-        static final FunctionDescriptor clang_getPointeeType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getPointeeType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5664,2 +5586,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5667,1 +5589,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5669,2 +5591,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5678,1 +5600,1 @@\n-        static final FunctionDescriptor clang_getTypeDeclaration$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTypeDeclaration$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5681,1 +5603,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5683,1 +5605,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5685,2 +5607,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5694,1 +5616,1 @@\n-        static final FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5697,1 +5619,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -5699,1 +5621,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5702,1 +5624,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5780,1 +5702,1 @@\n-        static final FunctionDescriptor clang_Type_getObjCEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getObjCEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5783,1 +5705,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -5785,1 +5707,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5787,2 +5709,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5796,1 +5718,1 @@\n-        static final FunctionDescriptor clang_getTypeKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTypeKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5799,1 +5721,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -5809,1 +5731,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5811,2 +5733,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5820,1 +5742,1 @@\n-        static final FunctionDescriptor clang_getResultType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5822,2 +5744,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5825,1 +5747,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5827,2 +5749,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5837,1 +5759,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5839,2 +5761,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5849,1 +5771,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5851,2 +5773,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5930,1 +5852,1 @@\n-        static final FunctionDescriptor clang_getArgType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getArgType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5932,2 +5854,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5935,1 +5857,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5937,2 +5859,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5947,1 +5869,1 @@\n-        static final FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5949,2 +5871,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5952,1 +5874,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5954,2 +5876,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5964,1 +5886,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5966,2 +5888,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5975,1 +5897,1 @@\n-        static final FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -5978,1 +5900,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -5980,1 +5902,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5982,2 +5904,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -5993,1 +5915,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -5995,2 +5917,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6004,1 +5926,1 @@\n-        static final FunctionDescriptor clang_Type_getObjCTypeArg$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getObjCTypeArg$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6006,2 +5928,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6009,1 +5931,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6011,2 +5933,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6092,1 +6014,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6094,2 +6016,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6103,1 +6025,1 @@\n-        static final FunctionDescriptor clang_getCursorResultType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6105,2 +6027,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6108,1 +6030,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6111,1 +6033,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6120,1 +6042,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6123,1 +6045,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6132,1 +6054,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6134,2 +6056,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6143,1 +6065,1 @@\n-        static final FunctionDescriptor clang_getElementType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6145,2 +6067,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6148,1 +6070,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6150,2 +6072,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6160,1 +6082,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6162,2 +6084,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6271,1 +6193,1 @@\n-        static final FunctionDescriptor clang_getArrayElementType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getArrayElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6273,2 +6195,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6276,1 +6198,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6278,2 +6200,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6288,1 +6210,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6290,2 +6212,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6299,1 +6221,1 @@\n-        static final FunctionDescriptor clang_Type_getNamedType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getNamedType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6301,2 +6223,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6304,1 +6226,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6306,2 +6228,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6316,1 +6238,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6318,2 +6240,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6328,1 +6250,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6330,2 +6252,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6340,1 +6262,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6342,2 +6264,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6421,1 +6343,1 @@\n-        static final FunctionDescriptor clang_Type_getClassType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getClassType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6423,2 +6345,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6426,1 +6348,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6428,2 +6350,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6438,1 +6360,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6440,2 +6362,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6450,1 +6372,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6452,2 +6374,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6462,1 +6384,1 @@\n-        static final FunctionDescriptor clang_Type_getModifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getModifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6464,2 +6386,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6467,1 +6389,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6469,2 +6391,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6479,1 +6401,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6482,1 +6404,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6491,1 +6413,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6494,1 +6416,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6582,1 +6504,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6585,1 +6507,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6594,1 +6516,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6597,1 +6519,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6606,1 +6528,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6608,2 +6530,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6617,1 +6539,1 @@\n-        static final FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6619,2 +6541,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6622,1 +6544,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6624,2 +6546,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6635,1 +6557,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6637,2 +6559,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6647,1 +6569,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6650,1 +6572,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6774,1 +6696,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6777,1 +6699,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6786,1 +6708,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6789,1 +6711,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6798,1 +6720,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6801,1 +6723,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6810,1 +6732,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6813,1 +6735,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6821,1 +6743,1 @@\n-        static final FunctionDescriptor clang_getOverloadedDecl$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getOverloadedDecl$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6824,1 +6746,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6826,1 +6748,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6829,1 +6751,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6838,1 +6760,1 @@\n-        static final FunctionDescriptor clang_getIBOutletCollectionType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getIBOutletCollectionType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -6840,2 +6762,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -6843,1 +6765,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6846,1 +6768,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6925,1 +6847,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6928,1 +6850,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6930,1 +6852,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6933,1 +6855,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6938,1 +6860,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6941,1 +6863,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6952,1 +6874,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6955,1 +6877,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6966,1 +6888,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6969,1 +6891,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6980,1 +6902,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6983,1 +6905,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6985,1 +6907,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6988,1 +6910,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -6992,1 +6914,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -6995,1 +6917,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7074,1 +6996,1 @@\n-        static final FunctionDescriptor clang_getCursorUSR$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorUSR$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7077,1 +6999,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7079,1 +7001,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7082,1 +7004,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7090,1 +7012,1 @@\n-        static final FunctionDescriptor clang_constructUSR_ObjCClass$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_constructUSR_ObjCClass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7093,1 +7015,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7102,1 +7024,1 @@\n-        static final FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7105,1 +7027,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7115,1 +7037,1 @@\n-        static final FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7118,1 +7040,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7127,1 +7049,1 @@\n-        static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7130,1 +7052,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7133,1 +7055,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7136,1 +7058,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -7144,1 +7066,1 @@\n-        static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7147,1 +7069,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7151,1 +7073,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7154,1 +7076,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -7313,1 +7235,1 @@\n-        static final FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7316,1 +7238,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7319,1 +7241,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7322,1 +7244,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -7330,1 +7252,1 @@\n-        static final FunctionDescriptor clang_getCursorSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7333,1 +7255,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7335,1 +7257,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7338,1 +7260,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7346,2 +7268,2 @@\n-        static final FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -7351,1 +7273,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7354,1 +7276,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7384,1 +7306,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7387,1 +7309,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7473,1 +7395,1 @@\n-        static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7476,1 +7398,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7478,1 +7400,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7481,1 +7403,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7491,1 +7413,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7493,2 +7415,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -7502,1 +7424,1 @@\n-        static final FunctionDescriptor clang_getTypePrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTypePrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7505,1 +7427,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7507,1 +7429,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7509,2 +7431,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -7519,1 +7441,1 @@\n-        static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7522,1 +7444,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7524,1 +7446,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7527,1 +7449,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7535,1 +7457,1 @@\n-        static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7538,1 +7460,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7540,1 +7462,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7543,1 +7465,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7663,1 +7585,1 @@\n-        static final FunctionDescriptor clang_getCursorDefinition$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorDefinition$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7666,1 +7588,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7668,1 +7590,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7671,1 +7593,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7680,1 +7602,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7683,1 +7605,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7691,1 +7613,1 @@\n-        static final FunctionDescriptor clang_getCanonicalCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCanonicalCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7694,1 +7616,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7696,1 +7618,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7699,1 +7621,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7708,1 +7630,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7711,1 +7633,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7720,1 +7642,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7723,1 +7645,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7731,1 +7653,1 @@\n-        static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7733,2 +7655,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -7736,1 +7658,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7739,1 +7661,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7839,1 +7761,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7842,1 +7764,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7851,1 +7773,1 @@\n-        static final FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7854,1 +7776,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7856,1 +7778,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7859,1 +7781,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7867,1 +7789,1 @@\n-        static final FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -7870,1 +7792,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -7872,1 +7794,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7875,1 +7797,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7884,1 +7806,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7887,1 +7809,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7896,1 +7818,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7899,1 +7821,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7908,1 +7830,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7911,1 +7833,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -7990,1 +7912,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -7993,1 +7915,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8004,2 +7926,2 @@\n-        static final FunctionDescriptor clang_Cursor_getCommentRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_Cursor_getCommentRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -8009,1 +7931,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8012,1 +7934,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8020,1 +7942,1 @@\n-        static final FunctionDescriptor clang_Cursor_getRawCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getRawCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8023,1 +7945,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8025,1 +7947,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8028,1 +7950,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8036,1 +7958,1 @@\n-        static final FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8039,1 +7961,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8041,1 +7963,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8044,1 +7966,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8052,1 +7974,1 @@\n-        static final FunctionDescriptor clang_Cursor_getMangling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Cursor_getMangling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8055,1 +7977,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8057,1 +7979,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8060,1 +7982,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8069,1 +7991,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8072,1 +7994,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8151,1 +8073,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8154,1 +8076,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8163,1 +8085,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8166,1 +8088,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8199,1 +8121,1 @@\n-        static final FunctionDescriptor clang_Module_getName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Module_getName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8202,1 +8124,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8281,1 +8203,1 @@\n-        static final FunctionDescriptor clang_Module_getFullName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_Module_getFullName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8284,1 +8206,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8321,1 +8243,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8324,1 +8246,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8333,1 +8255,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8336,1 +8258,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8415,1 +8337,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8418,1 +8340,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8427,1 +8349,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8430,1 +8352,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8439,1 +8361,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8442,1 +8364,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8451,1 +8373,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8454,1 +8376,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8463,1 +8385,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8466,1 +8388,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8475,1 +8397,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8478,1 +8400,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8557,1 +8479,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8560,1 +8482,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8569,1 +8491,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8572,1 +8494,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8581,1 +8503,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8584,1 +8506,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8593,1 +8515,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8596,1 +8518,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8605,1 +8527,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8608,1 +8530,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8617,1 +8539,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8620,1 +8542,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8678,2 +8600,2 @@\n-        static final MemoryLayout CXToken$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+        static final MemoryLayout CXToken$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n@@ -8705,1 +8627,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -8707,7 +8628,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -8718,1 +8634,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -8767,1 +8683,1 @@\n-        static final FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8770,1 +8686,1 @@\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8772,1 +8688,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8775,1 +8691,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8783,2 +8699,2 @@\n-        static final FunctionDescriptor clang_getCursorReferenceNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getCursorReferenceNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -8788,1 +8704,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8791,1 +8707,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -8803,2 +8719,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -8806,1 +8722,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -8815,2 +8731,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n@@ -8825,1 +8741,1 @@\n-        static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8828,1 +8744,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8831,2 +8747,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n@@ -8841,2 +8757,2 @@\n-        static final FunctionDescriptor clang_getTokenLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getTokenLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -8844,1 +8760,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8847,2 +8763,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n@@ -8927,2 +8843,2 @@\n-        static final FunctionDescriptor clang_getTokenExtent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_getTokenExtent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -8933,2 +8849,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n@@ -8945,2 +8861,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -8979,1 +8895,1 @@\n-        static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -8982,1 +8898,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -8992,1 +8908,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -8995,1 +8911,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -9046,1 +8962,1 @@\n-        static final MemoryLayout CXCompletionResult$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXCompletionResult$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -9048,1 +8964,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -9087,1 +9003,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -9089,7 +9004,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -9100,1 +9010,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -9229,1 +9139,1 @@\n-        static final FunctionDescriptor clang_getCompletionChunkText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCompletionChunkText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9232,1 +9142,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9353,1 +9263,1 @@\n-        static final FunctionDescriptor clang_getCompletionAnnotation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCompletionAnnotation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9356,1 +9266,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9366,1 +9276,1 @@\n-        static final FunctionDescriptor clang_getCompletionParent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCompletionParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9369,1 +9279,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9405,1 +9315,1 @@\n-        static final MemoryLayout CXCodeCompleteResults$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXCodeCompleteResults$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -9408,1 +9318,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9446,1 +9356,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -9448,7 +9357,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -9459,1 +9363,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -9598,1 +9502,1 @@\n-        static final FunctionDescriptor clang_getCompletionBriefComment$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCompletionBriefComment$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9601,1 +9505,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9611,1 +9515,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -9614,1 +9518,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -9631,1 +9535,1 @@\n-        static final FunctionDescriptor clang_getCompletionFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getCompletionFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9634,1 +9538,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9878,1 +9782,1 @@\n-        static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9881,1 +9785,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9890,1 +9794,1 @@\n-        static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9893,1 +9797,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -9902,1 +9806,1 @@\n-        static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+        static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n@@ -9905,1 +9809,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -10007,1 +9911,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -10010,1 +9914,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -10209,1 +10113,1 @@\n-        static final MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -10260,1 +10164,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -10262,7 +10165,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10273,1 +10171,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -10341,1 +10239,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -10344,1 +10242,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -10346,2 +10244,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -10353,1 +10251,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -10356,1 +10254,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -10359,1 +10257,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -10372,1 +10270,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -10383,1 +10281,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -10386,1 +10284,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -10388,2 +10286,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -10420,2 +10318,2 @@\n-        static final MemoryLayout CXIdxLoc$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final MemoryLayout CXIdxLoc$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -10423,1 +10321,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -10448,1 +10346,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -10450,7 +10347,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10461,1 +10353,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -10466,3 +10358,3 @@\n-        static final MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -10470,1 +10362,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -10477,1 +10369,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -10566,1 +10458,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -10568,7 +10459,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10579,1 +10465,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -10584,1 +10470,1 @@\n-        static final MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -10587,2 +10473,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -10590,1 +10476,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -10593,1 +10479,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -10650,1 +10536,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -10652,7 +10537,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10663,1 +10543,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -10773,1 +10653,1 @@\n-        static final MemoryLayout CXIdxAttrInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxAttrInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -10775,2 +10655,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.structLayout(\n@@ -10779,1 +10659,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -10781,2 +10661,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -10784,1 +10664,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -10813,1 +10693,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -10815,7 +10694,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10826,1 +10700,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -10831,1 +10705,1 @@\n-        static final MemoryLayout CXIdxEntityInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxEntityInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -10835,1 +10709,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -10838,1 +10712,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -10841,1 +10715,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -10845,1 +10719,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -10966,1 +10840,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -10968,7 +10841,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10979,1 +10847,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -10984,2 +10852,2 @@\n-        static final MemoryLayout CXIdxContainerInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n-            MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxContainerInfo$struct$LAYOUT = MemoryLayout.structLayout(\n+            MemoryLayout.structLayout(\n@@ -10988,1 +10856,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -10998,1 +10866,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11000,7 +10867,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11011,1 +10873,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11016,1 +10878,1 @@\n-        static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11019,1 +10881,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -11022,1 +10884,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -11024,2 +10886,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -11027,1 +10889,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -11072,1 +10934,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11074,7 +10935,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11085,1 +10941,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11090,1 +10946,1 @@\n-        static final MemoryLayout CXIdxDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11092,1 +10948,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -11095,1 +10951,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -11097,2 +10953,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -11100,1 +10956,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -11107,1 +10963,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -11110,1 +10966,1 @@\n-            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.paddingLayout(32),\n@@ -11301,1 +11157,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11303,7 +11158,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11314,1 +11164,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11319,1 +11169,1 @@\n-        static final MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11322,1 +11172,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -11360,1 +11210,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11362,7 +11211,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11373,1 +11217,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11378,1 +11222,1 @@\n-        static final MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11380,1 +11224,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -11383,1 +11227,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -11385,2 +11229,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -11388,1 +11232,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -11417,1 +11261,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11419,7 +11262,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11430,1 +11268,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11435,1 +11273,1 @@\n-        static final MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11437,1 +11275,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -11440,1 +11278,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -11442,2 +11280,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -11445,1 +11283,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -11474,1 +11312,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11476,7 +11313,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11487,1 +11319,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11492,1 +11324,1 @@\n-        static final MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11495,1 +11327,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -11533,1 +11365,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11535,7 +11366,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11546,1 +11372,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11551,1 +11377,1 @@\n-        static final MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11608,1 +11434,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11610,7 +11435,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11621,1 +11441,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11626,1 +11446,1 @@\n-        static final MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11629,1 +11449,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -11632,1 +11452,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -11634,2 +11454,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -11637,1 +11457,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -11699,1 +11519,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11701,7 +11520,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11712,1 +11526,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11717,1 +11531,1 @@\n-        static final MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11774,1 +11588,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11776,7 +11589,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11787,1 +11595,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11792,1 +11600,1 @@\n-        static final MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11796,1 +11604,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -11850,1 +11658,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11852,7 +11659,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11863,1 +11665,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11868,1 +11670,1 @@\n-        static final MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -11870,2 +11672,2 @@\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.structLayout(\n@@ -11874,1 +11676,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -11876,2 +11678,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -11879,1 +11681,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -11885,1 +11687,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -11977,1 +11779,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -11979,7 +11780,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11990,1 +11786,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -11996,1 +11792,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -11999,1 +11795,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n@@ -12041,1 +11837,1 @@\n-        static final MemoryLayout IndexerCallbacks$struct$LAYOUT = MemoryLayout.ofStruct(\n+        static final MemoryLayout IndexerCallbacks$struct$LAYOUT = MemoryLayout.structLayout(\n@@ -12271,1 +12067,0 @@\n-        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n@@ -12273,7 +12068,2 @@\n-        public static MemorySegment allocateArray(int len) {\n-            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer() {\n-            return MemorySegment.allocateNative(C_POINTER);\n+        public static MemorySegment allocateArray(int len, NativeScope scope) {\n+            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -12284,1 +12074,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n@@ -12317,1 +12107,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -12320,1 +12110,1 @@\n-                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":860,"deletions":1070,"binary":false,"changes":1930,"status":"modified"},{"patch":"@@ -493,2 +493,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -496,1 +496,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -554,2 +554,2 @@\n-        static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+        static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -557,1 +557,1 @@\n-            MemoryLayout.ofPaddingBits(32)\n+            MemoryLayout.paddingLayout(32)\n@@ -559,2 +559,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n@@ -562,1 +562,1 @@\n-                MemoryLayout.ofPaddingBits(32)\n+                MemoryLayout.paddingLayout(32)\n@@ -571,1 +571,1 @@\n-            MemoryLayout.ofStruct(\n+            MemoryLayout.structLayout(\n@@ -573,2 +573,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n@@ -584,1 +584,1 @@\n-        static final MemorySegment CINDEX_VERSION_STRING$SEGMENT = CLinker.toCString(\"0.59\");\n+        static final MemorySegment CINDEX_VERSION_STRING$SEGMENT = CLinker.toCString(\"0.59\", ResourceScope.newImplicitScope());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h_1.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        this.resourceScope = ResourceScope.ofConfined();\n+        this.resourceScope = ResourceScope.newConfinedScope();\n@@ -42,1 +42,1 @@\n-        this.allocator = SegmentAllocator.arenaUnbounded(resourceScope);\n+        this.allocator = SegmentAllocator.arenaAllocator(resourceScope);\n@@ -46,1 +46,1 @@\n-        this.resourceScope = ResourceScope.ofConfined();\n+        this.resourceScope = ResourceScope.newConfinedScope();\n@@ -48,1 +48,1 @@\n-        this.allocator = SegmentAllocator.arenaBounded(size, resourceScope);\n+        this.allocator = SegmentAllocator.arenaAllocator(size, resourceScope);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/NativeScope.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -82,1 +83,1 @@\n-            nonCloseableNonTransferableSegment(s.address().asSegmentRestricted(layout.byteSize()))).orElse(null);\n+            s.address().asSegment(layout.byteSize(), ResourceScope.newImplicitScope())).orElse(null);\n@@ -85,1 +86,1 @@\n-    final static SegmentAllocator DEFAULT_ALLOCATOR = MemorySegment::allocateNative;\n+    final static SegmentAllocator DEFAULT_ALLOCATOR = (x, y) -> MemorySegment.allocateNative(x, y, ResourceScope.newImplicitScope());\n@@ -98,1 +99,1 @@\n-            return SegmentAllocator.ofDefault().allocate(bytesSize, bytesAlignment);\n+            return DEFAULT_ALLOCATOR.allocate(bytesSize, bytesAlignment);\n@@ -128,8 +129,1 @@\n-        try {\n-            MethodHandle handle = MH_LOOKUP.findVirtual(fi, \"apply\",\n-                    MethodType.fromMethodDescriptorString(mtypeDesc, LOADER));\n-            handle = handle.bindTo(z);\n-            return LINKER.upcallStub(handle, fdesc);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n+        return upcallStub(fi, z, fdesc, mtypeDesc, ResourceScope.newImplicitScope());\n@@ -139,0 +133,4 @@\n+        return upcallStub(fi, z, fdesc, mtypeDesc, scope.scope());\n+    }\n+\n+    private static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n@@ -143,1 +141,1 @@\n-            return LINKER.upcallStub(handle, fdesc, scope.scope());\n+            return LINKER.upcallStub(handle, fdesc, scope);\n@@ -153,2 +151,2 @@\n-    static MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {\n-        return nonCloseableSegment(addr.asSegmentRestricted(numElements * layout.byteSize()));\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements) {\n+        return addr.asSegment(numElements * layout.byteSize(), ResourceScope.newImplicitScope());\n@@ -158,5 +156,1 @@\n-    private static final MemorySegment nonCloseableSegment(MemorySegment seg) {\n-        return seg;\n-    }\n-\n-    private static final Optional<LibraryLookup.Symbol> lookup(LibraryLookup[] LIBRARIES, String sym) {\n+    private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-            append(\"MemoryLayout.ofSequence(\");\n+            append(\"MemoryLayout.sequenceLayout(\");\n@@ -273,1 +273,1 @@\n-                append(\"MemoryLayout.ofStruct(\\n\");\n+                append(\"MemoryLayout.structLayout(\\n\");\n@@ -275,1 +275,1 @@\n-                append(\"MemoryLayout.ofUnion(\\n\");\n+                append(\"MemoryLayout.unionLayout(\\n\");\n@@ -292,1 +292,1 @@\n-            append(\"MemoryLayout.ofPaddingBits(\" + l.bitSize() + \")\");\n+            append(\"MemoryLayout.paddingLayout(\" + l.bitSize() + \")\");\n@@ -345,1 +345,1 @@\n-        append(\"\\\");\\n\");\n+        append(\"\\\", ResourceScope.newImplicitScope());\\n\");\n@@ -366,1 +366,1 @@\n-            return \"MemoryLayout.ofPaddingBits(\" + vl.bitSize() + \")\";\n+            return \"MemoryLayout.paddingLayout(\" + vl.bitSize() + \")\";\n@@ -368,1 +368,1 @@\n-            return \"MemoryLayout.ofValueBits(\" + vl.bitSize() + \", ByteOrder.nativeOrder())\";\n+            return \"MemoryLayout.valueLayout(\" + vl.bitSize() + \", ByteOrder.nativeOrder())\";\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ConstantBuilder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        emitFunctionalRestrictedFactory();\n+        emitFunctionalFactoryForPointer();\n@@ -99,1 +99,1 @@\n-    private void emitFunctionalRestrictedFactory() {\n+    private void emitFunctionalFactoryForPointer() {\n@@ -104,1 +104,1 @@\n-            append(MEMBER_MODS + \" \" + className() + \" ofAddressRestricted(MemoryAddress addr) {\\n\");\n+            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemoryAddress addr) {\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-                emitFunctionWrapperNoAllocatorOverload(javaName, functionInfo);\n+                \/\/ emitFunctionWrapperNoAllocatorOverload(javaName, functionInfo);\n@@ -234,1 +234,1 @@\n-        pExprs.add(0, \"SegmentAllocator.scoped(\" + param + \")\");\n+        pExprs.add(0, \"SegmentAllocator.ofScope(\" + param + \")\");\n@@ -255,1 +255,1 @@\n-        append(\"return \" + fiName + \".ofAddressRestricted(\" + javaName + \"$get());\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get());\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                return MemoryLayout.ofSequence(t.getNumberOfElements(), getLayout(t.getElementType()));\n+                return MemoryLayout.sequenceLayout(t.getNumberOfElements(), getLayout(t.getElementType()));\n@@ -102,1 +102,1 @@\n-                return MemoryLayout.ofSequence(t.getNumberOfElements(), getLayout(t.getElementType()));\n+                return MemoryLayout.sequenceLayout(t.getNumberOfElements(), getLayout(t.getElementType()));\n@@ -104,1 +104,1 @@\n-                return MemoryLayout.ofSequence(getLayout(t.getElementType()));\n+                return MemoryLayout.sequenceLayout(getLayout(t.getElementType()));\n@@ -169,1 +169,1 @@\n-                return MemoryLayout.ofSequence(t.elementCount().getAsLong(), elem);\n+                return MemoryLayout.sequenceLayout(t.elementCount().getAsLong(), elem);\n@@ -171,1 +171,1 @@\n-                return MemoryLayout.ofSequence(elem);\n+                return MemoryLayout.sequenceLayout(elem);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/LayoutUtils.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-            return MemoryLayout.ofPaddingBits(64);\n+            return MemoryLayout.paddingLayout(64);\n@@ -124,1 +124,1 @@\n-            MemoryLayout sublayout = MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder());\n+            MemoryLayout sublayout = MemoryLayout.valueLayout(c.getBitFieldWidth(), ByteOrder.nativeOrder());\n@@ -139,1 +139,1 @@\n-        return LayoutUtils.setBitfields(MemoryLayout.ofStruct(sublayouts.toArray(new MemoryLayout[0])));\n+        return LayoutUtils.setBitfields(MemoryLayout.structLayout(sublayouts.toArray(new MemoryLayout[0])));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/RecordLayoutComputer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-            emitAllocate();\n@@ -94,1 +93,0 @@\n-            emitAllocateArray();\n@@ -96,2 +94,2 @@\n-            emitAsRestricted();\n-            emitAsRestrictedScoped();\n+            emitOfAddress();\n+            emitOfAddressScoped();\n@@ -169,1 +167,1 @@\n-        append(\"return \" + fiName + \".ofAddressRestricted(\" + javaName + \"$get(segment));\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(segment));\\n\");\n@@ -244,8 +242,0 @@\n-    private void emitAllocate() {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment allocate() { return allocate(RuntimeHelper.DEFAULT_ALLOCATOR); }\\n\");\n-        decrAlign();\n-    }\n-\n@@ -256,1 +246,1 @@\n-        append(\" MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.scoped(scope)); }\\n\");\n+        append(\" MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\\n\");\n@@ -268,14 +258,0 @@\n-    private void emitAllocateArray() {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment allocateArray(int len) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return allocateArray(len, RuntimeHelper.DEFAULT_ALLOCATOR);\\n\");\n-        decrAlign();\n-        indent();\n-        append('}');\n-        decrAlign();\n-    }\n-\n@@ -289,1 +265,1 @@\n-        append(\"return allocateArray(len, SegmentAllocator.scoped(scope));\\n\");\n+        append(\"return allocateArray(len, SegmentAllocator.ofScope(scope));\\n\");\n@@ -303,1 +279,1 @@\n-        append(\"return allocator.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));\\n\");\n+        append(\"return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\\n\");\n@@ -310,1 +286,1 @@\n-    private void emitAsRestricted() {\n+    private void emitOfAddress() {\n@@ -314,1 +290,1 @@\n-        append(\" MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\\n\");\n+        append(\" MemorySegment ofAddress(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\\n\");\n@@ -318,1 +294,1 @@\n-    private void emitAsRestrictedScoped() {\n+    private void emitOfAddressScoped() {\n@@ -322,1 +298,1 @@\n-        append(\" MemorySegment ofAddressRestricted(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1, scope); }\\n\");\n+        append(\" MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":10,"deletions":34,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            addFieldLayout(MemoryLayout.ofPaddingBits(expectedOffset - offset));\n+            addFieldLayout(MemoryLayout.paddingLayout(expectedOffset - offset));\n@@ -110,1 +110,1 @@\n-            addFieldLayout(MemoryLayout.ofPaddingBits(expectedSize - actualSize));\n+            addFieldLayout(MemoryLayout.paddingLayout(expectedSize - actualSize));\n@@ -125,1 +125,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(fields);\n+        GroupLayout g = MemoryLayout.structLayout(fields);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructLayoutComputer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n-                    MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder()));\n+                    MemoryLayout.valueLayout(c.getBitFieldWidth(), ByteOrder.nativeOrder()));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TreeMaker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-            addFieldLayout(MemoryLayout.ofPaddingBits(expectedSize));\n+            addFieldLayout(MemoryLayout.paddingLayout(expectedSize));\n@@ -99,1 +99,1 @@\n-        GroupLayout g = MemoryLayout.ofUnion(fields);\n+        GroupLayout g = MemoryLayout.unionLayout(fields);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnionLayoutComputer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    public static final ValueLayout __INT128 = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+    public static final ValueLayout __INT128 = MemoryLayout.valueLayout(128, ByteOrder.nativeOrder()).\n@@ -42,1 +42,1 @@\n-    public static final ValueLayout LONG_DOUBLE = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+    public static final ValueLayout LONG_DOUBLE = MemoryLayout.valueLayout(128, ByteOrder.nativeOrder()).\n@@ -45,1 +45,1 @@\n-    public static final ValueLayout _FLOAT128 = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder()).\n+    public static final ValueLayout _FLOAT128 = MemoryLayout.valueLayout(128, ByteOrder.nativeOrder()).\n@@ -48,1 +48,1 @@\n-    public static final ValueLayout __FP16 = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+    public static final ValueLayout __FP16 = MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).\n@@ -51,1 +51,1 @@\n-    public static final ValueLayout CHAR16 = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+    public static final ValueLayout CHAR16 = MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).\n@@ -54,1 +54,1 @@\n-    public static final ValueLayout WCHAR_T = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder()).\n+    public static final ValueLayout WCHAR_T = MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnsupportedLayouts.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-        this.resourceScope = ResourceScope.ofConfined();\n+        this.resourceScope = ResourceScope.newConfinedScope();\n@@ -17,1 +17,1 @@\n-        this.allocator = SegmentAllocator.arenaUnbounded(resourceScope);\n+        this.allocator = SegmentAllocator.arenaAllocator(resourceScope);\n@@ -21,1 +21,1 @@\n-        this.resourceScope = ResourceScope.ofConfined();\n+        this.resourceScope = ResourceScope.newConfinedScope();\n@@ -23,1 +23,1 @@\n-        this.allocator = SegmentAllocator.arenaBounded(size, resourceScope);\n+        this.allocator = SegmentAllocator.arenaAllocator(size, resourceScope);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/NativeScope.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static SegmentAllocator DEFAULT_ALLOCATOR = MemorySegment::allocateNative;\n+    private final static SegmentAllocator DEFAULT_ALLOCATOR = (x, y) -> MemorySegment.allocateNative(x, y, ResourceScope.newImplicitScope());\n@@ -56,1 +56,1 @@\n-        return lookup(LIBRARIES, name).map(s -> s.address().asSegmentRestricted(layout.byteSize())).orElse(null);\n+        return lookup(LIBRARIES, name).map(s -> s.address().asSegment(layout.byteSize(), ResourceScope.newImplicitScope())).orElse(null);\n@@ -78,0 +78,8 @@\n+        return upcallStub(fi, z, fdesc, mtypeDesc, ResourceScope.newImplicitScope());\n+    }\n+\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, NativeScope scope) {\n+        return upcallStub(fi, z, fdesc, mtypeDesc, scope.scope());\n+    }\n+\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n@@ -82,1 +90,1 @@\n-            return LINKER.upcallStub(handle, fdesc);\n+            return LINKER.upcallStub(handle, fdesc, scope);\n@@ -88,13 +96,2 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n-            try {\n-                MethodHandle handle = MH_LOOKUP.findVirtual(fi, \"apply\",\n-                        MethodType.fromMethodDescriptorString(mtypeDesc, LOADER));\n-                handle = handle.bindTo(z);\n-                return LINKER.upcallStub(handle, fdesc, scope);\n-            } catch (Throwable ex) {\n-                throw new AssertionError(ex);\n-            }\n-        }\n-\n-    static MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {\n-        return addr.asSegmentRestricted(numElements * layout.byteSize());\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements) {\n+        return addr.asSegment(numElements * layout.byteSize(), ResourceScope.newImplicitScope());\n@@ -103,2 +100,2 @@\n-    static MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements, ResourceScope scope) {\n-         return addr.asSegmentRestricted(numElements * layout.byteSize(), scope);\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, ResourceScope scope) {\n+         return addr.asSegment(numElements * layout.byteSize(), scope);\n@@ -108,1 +105,1 @@\n-    private static final Optional<LibraryLookup.Symbol> lookup(LibraryLookup[] LIBRARIES, String sym) {\n+    private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":16,"deletions":19,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit SmokeTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract SmokeTest\n","filename":"test\/jdk\/java\/jextract\/SmokeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8238712\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8238712\n","filename":"test\/jdk\/java\/jextract\/Test8238712.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8239490\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8239490\n","filename":"test\/jdk\/java\/jextract\/Test8239490.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8240372\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8240372\n","filename":"test\/jdk\/java\/jextract\/Test8240372.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8240853\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8240853\n","filename":"test\/jdk\/java\/jextract\/Test8240853.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestAttributes\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract TestAttributes\n","filename":"test\/jdk\/java\/jextract\/TestAttributes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestMacros\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract TestMacros\n","filename":"test\/jdk\/java\/jextract\/TestMacros.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -ea -Dforeign.restricted=permit TestTypedef\n+ * @run testng\/othervm -ea --enable-native-access=jdk.incubator.jextract TestTypedef\n","filename":"test\/jdk\/java\/jextract\/TestTypedef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestNestedBitfields\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract TestNestedBitfields\n","filename":"test\/jdk\/java\/jextract\/nestedBitfields\/TestNestedBitfields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit BadBitfieldTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract BadBitfieldTest\n","filename":"test\/jdk\/tools\/jextract\/BadBitfieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit ConstantsTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED ConstantsTest\n","filename":"test\/jdk\/tools\/jextract\/ConstantsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract JextractToolProviderTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract -Duser.language=en --add-modules jdk.incubator.jextract JextractToolProviderTest\n","filename":"test\/jdk\/tools\/jextract\/JextractToolProviderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit RepeatedDeclsTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED RepeatedDeclsTest\n","filename":"test\/jdk\/tools\/jextract\/RepeatedDeclsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8240181\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED -Duser.language=en --add-modules jdk.incubator.jextract Test8240181\n","filename":"test\/jdk\/tools\/jextract\/Test8240181.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8240657\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8240657\n","filename":"test\/jdk\/tools\/jextract\/Test8240657.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8240752\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8240752\n","filename":"test\/jdk\/tools\/jextract\/Test8240752.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8240811\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8240811\n","filename":"test\/jdk\/tools\/jextract\/Test8240811.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8244412\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8244412\n","filename":"test\/jdk\/tools\/jextract\/Test8244412.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8245767\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8245767\n","filename":"test\/jdk\/tools\/jextract\/Test8245767.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8248415\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8248415\n","filename":"test\/jdk\/tools\/jextract\/Test8248415.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8248474\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8248474\n","filename":"test\/jdk\/tools\/jextract\/Test8248474.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8249290\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8249290\n","filename":"test\/jdk\/tools\/jextract\/Test8249290.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8249300\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8249300\n","filename":"test\/jdk\/tools\/jextract\/Test8249300.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8251943\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8251943\n","filename":"test\/jdk\/tools\/jextract\/Test8251943.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8258223\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8258223\n","filename":"test\/jdk\/tools\/jextract\/Test8258223.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8258405\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8258405\n","filename":"test\/jdk\/tools\/jextract\/Test8258405.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8260344\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract -Duser.language=en --add-modules jdk.incubator.jextract Test8260344\n","filename":"test\/jdk\/tools\/jextract\/Test8260344.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8260705\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8260705\n","filename":"test\/jdk\/tools\/jextract\/Test8260705.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8260717\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8260717\n","filename":"test\/jdk\/tools\/jextract\/Test8260717.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8260929\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8260929\n","filename":"test\/jdk\/tools\/jextract\/Test8260929.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8261893\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract -Duser.language=en --add-modules jdk.incubator.jextract Test8261893\n","filename":"test\/jdk\/tools\/jextract\/Test8261893.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8262117\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8262117\n","filename":"test\/jdk\/tools\/jextract\/Test8262117.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8262733\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8262733\n","filename":"test\/jdk\/tools\/jextract\/Test8262733.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n- * @summary jextract crashes when Java type names like String are used as identifiers in C heade\n- * @run testng\/othervm -Dforeign.restricted=permit Test8262825\n+ * @summary jextract crashes when Java type names like String are used as identifiers in C header\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8262825\n","filename":"test\/jdk\/tools\/jextract\/Test8262825.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8262851\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8262851\n","filename":"test\/jdk\/tools\/jextract\/Test8262851.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -45,1 +46,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestNested\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract TestNested\n@@ -162,3 +163,5 @@\n-                MemorySegment struct = MemorySegment.allocateNative(layout);\n-                MemorySegment slice = (MemorySegment) slicer.invoke(null, struct);\n-                assertEquals(slice.byteSize(), fieldLayout.byteSize());\n+                try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                    MemorySegment struct = MemorySegment.allocateNative(layout, scope);\n+                    MemorySegment slice = (MemorySegment) slicer.invoke(null, struct);\n+                    assertEquals(slice.byteSize(), fieldLayout.byteSize());\n+                }\n@@ -172,4 +175,6 @@\n-                MemorySegment struct = MemorySegment.allocateNative(layout);\n-                setter.invoke(null, struct, zero);\n-                Object actual = getter.invoke(null, struct);\n-                assertEquals(actual, zero);\n+                try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                    MemorySegment struct = MemorySegment.allocateNative(layout, scope);\n+                    setter.invoke(null, struct, zero);\n+                    Object actual = getter.invoke(null, struct);\n+                    assertEquals(actual, zero);\n+                }\n","filename":"test\/jdk\/tools\/jextract\/TestNested.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Djextract.decls.per.header=1 -Dforeign.restricted=permit TestSplit\n+ * @run testng\/othervm -Djextract.decls.per.header=1 --enable-native-access=jdk.incubator.jextract TestSplit\n","filename":"test\/jdk\/tools\/jextract\/TestSplit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit UniondeclTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract UniondeclTest\n","filename":"test\/jdk\/tools\/jextract\/UniondeclTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestFuncPointerInvokers\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED TestFuncPointerInvokers\n@@ -47,1 +47,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestFuncPointerInvokers\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED TestFuncPointerInvokers\n@@ -52,1 +52,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -63,1 +63,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -67,1 +67,1 @@\n-            Foo.ofAddressRestricted(Bar.foo$get(bar)).apply(42);\n+            Foo.ofAddress(Bar.foo$get(bar)).apply(42);\n@@ -74,1 +74,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -84,1 +84,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -87,1 +87,1 @@\n-            Foo.ofAddressRestricted(f$get()).apply(42);\n+            Foo.ofAddress(f$get()).apply(42);\n@@ -94,1 +94,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -105,1 +105,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -109,1 +109,1 @@\n-            Baz.fp.ofAddressRestricted(Baz.fp$get(baz)).apply(42);\n+            Baz.fp.ofAddress(Baz.fp$get(baz)).apply(42);\n@@ -116,1 +116,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -126,1 +126,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -129,1 +129,1 @@\n-            fp.ofAddressRestricted(fp$get()).apply(42);\n+            fp.ofAddress(fp$get()).apply(42);\n","filename":"test\/jdk\/tools\/jextract\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit IncompleteArrayTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED IncompleteArrayTest\n@@ -57,1 +57,1 @@\n-            MemoryLayout expectedLayout = MemoryLayout.ofStruct(\n+            MemoryLayout expectedLayout = MemoryLayout.structLayout(\n@@ -59,2 +59,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(C_POINTER).withName(\"data\")\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(C_POINTER).withName(\"data\")\n","filename":"test\/jdk\/tools\/jextract\/incompleteArray\/IncompleteArrayTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8239918Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8239918Test\n@@ -44,1 +44,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8239918Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8239918Test\n","filename":"test\/jdk\/tools\/jextract\/test8239918\/LibTest8239918Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Lib8240373Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Lib8240373Test\n@@ -46,1 +46,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Lib8240373Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Lib8240373Test\n","filename":"test\/jdk\/tools\/jextract\/test8240373\/Lib8240373Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8241925Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8241925Test\n@@ -72,1 +72,1 @@\n-            assertEquals(toJavaStringRestricted(name()), \"java\");\n+            assertEquals(toJavaString(name()), \"java\");\n@@ -75,1 +75,1 @@\n-            dest.copyFrom(toCString(\"hello \"));\n+            dest.copyFrom(toCString(\"hello \", scope));\n@@ -77,1 +77,1 @@\n-            assertEquals(toJavaStringRestricted(concatenate(dest, src)), \"hello world\");\n+            assertEquals(toJavaString(concatenate(dest, src)), \"hello world\");\n","filename":"test\/jdk\/tools\/jextract\/test8241925\/LibTest8241925Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8244412Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8244412Test\n@@ -51,1 +51,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8244412Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8244412Test\n","filename":"test\/jdk\/tools\/jextract\/test8244412\/LibTest8244412Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -35,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8244938\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8244938\n@@ -45,1 +46,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8244938\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8244938\n@@ -50,6 +51,8 @@\n-         var seg = func();\n-         assertEquals(seg.byteSize(), Point.sizeof());\n-         assertEquals(Point.k$get(seg), 44);\n-         var point2dSeg = Point.point2d$slice(seg);\n-         assertEquals(Point2D.i$get(point2dSeg), 567);\n-         assertEquals(Point2D.j$get(point2dSeg), 33);\n+         try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+             var seg = func(scope);\n+             assertEquals(seg.byteSize(), Point.sizeof());\n+             assertEquals(Point.k$get(seg), 44);\n+             var point2dSeg = Point.point2d$slice(seg);\n+             assertEquals(Point2D.i$get(point2dSeg), 567);\n+             assertEquals(Point2D.j$get(point2dSeg), 33);\n+         }\n","filename":"test\/jdk\/tools\/jextract\/test8244938\/Test8244938.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8244959\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8244959\n@@ -49,1 +49,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8244959\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8244959\n@@ -54,1 +54,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/tools\/jextract\/test8244959\/Test8244959.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8245003\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8245003\n@@ -48,1 +48,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8245003\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8245003\n","filename":"test\/jdk\/tools\/jextract\/test8245003\/Test8245003.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8246341Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8246341Test\n@@ -50,1 +50,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8246341Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8246341Test\n@@ -56,1 +56,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -59,1 +59,1 @@\n-                var addr = argv.asSegmentRestricted(C_POINTER.byteSize() * argc, scope);\n+                var addr = argv.asSegment(C_POINTER.byteSize() * argc, scope);\n@@ -61,4 +61,4 @@\n-                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 0)), \"java\");\n-                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 1)), \"python\");\n-                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 2)), \"javascript\");\n-                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 3)), \"c++\");\n+                assertEquals(toJavaString(MemoryAccess.getAddressAtIndex(addr, 0)), \"java\");\n+                assertEquals(toJavaString(MemoryAccess.getAddressAtIndex(addr, 1)), \"python\");\n+                assertEquals(toJavaString(MemoryAccess.getAddressAtIndex(addr, 2)), \"javascript\");\n+                assertEquals(toJavaString(MemoryAccess.getAddressAtIndex(addr, 3)), \"c++\");\n@@ -77,1 +77,1 @@\n-            assertEquals(toJavaStringRestricted(MemoryAccess.getAddress(addr)), \"hello world\");\n+            assertEquals(toJavaString(MemoryAccess.getAddress(addr)), \"hello world\");\n","filename":"test\/jdk\/tools\/jextract\/test8246341\/LibTest8246341Test.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8246400Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED  LibTest8246400Test\n@@ -49,1 +49,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8246400Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8246400Test\n@@ -56,1 +56,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/tools\/jextract\/test8246400\/LibTest8246400Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8249757Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8249757Test\n@@ -44,1 +44,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8249757Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8249757Test\n","filename":"test\/jdk\/tools\/jextract\/test8249757\/LibTest8249757Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8252016\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8252016\n@@ -49,1 +49,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8252016\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8252016\n@@ -54,1 +54,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -62,1 +62,1 @@\n-            my_vsprintf(s, toCString(\"%hhd %.2f %lld %lld\"), vaList);\n+            my_vsprintf(s, toCString(\"%hhd %.2f %lld %lld\", scope), vaList);\n","filename":"test\/jdk\/tools\/jextract\/test8252016\/Test8252016.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8252121\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8252121\n@@ -50,1 +50,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8252121\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8252121\n","filename":"test\/jdk\/tools\/jextract\/test8252121\/Test8252121.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8253102Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8253102Test\n@@ -48,1 +48,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8253102Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8253102Test\n@@ -54,1 +54,1 @@\n-        MemorySegment seg = Point.ofAddressRestricted(addr);\n+        MemorySegment seg = Point.ofAddress(addr);\n@@ -57,1 +57,1 @@\n-        CLinker.freeMemoryRestricted(addr);\n+        CLinker.freeMemory(addr);\n","filename":"test\/jdk\/tools\/jextract\/test8253102\/LibTest8253102Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8253390Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8253390Test\n@@ -45,1 +45,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8253390Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8253390Test\n","filename":"test\/jdk\/tools\/jextract\/test8253390\/LibTest8253390Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -51,4 +52,6 @@\n-        assertEquals(((GroupLayout)Foo._struct.$LAYOUT()).memberLayouts().size(), 1);\n-        MemorySegment str = Foo._struct.allocate();\n-        Foo._struct.x$set(str, 42);\n-        assertEquals(Foo._struct.x$get(str), 42);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            assertEquals(((GroupLayout)Foo._struct.$LAYOUT()).memberLayouts().size(), 1);\n+            MemorySegment str = Foo._struct.allocate(scope);\n+            Foo._struct.x$set(str, 42);\n+            assertEquals(Foo._struct.x$get(str), 42);\n+        }\n@@ -60,3 +63,5 @@\n-        MemorySegment str = Foo._union._struct.allocate();\n-        Foo._union._struct.x$set(str, 42);\n-        assertEquals(Foo._union._struct.x$get(str), 42);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            MemorySegment str = Foo._union._struct.allocate(scope);\n+            Foo._union._struct.x$set(str, 42);\n+            assertEquals(Foo._union._struct.x$get(str), 42);\n+        }\n","filename":"test\/jdk\/tools\/jextract\/test8254983\/LibTest8254983Test.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -41,1 +42,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibUnsupportedTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibUnsupportedTest\n@@ -50,1 +51,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibUnsupportedTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibUnsupportedTest\n@@ -56,5 +57,7 @@\n-        var seg = Foo.allocate();\n-        Foo.i$set(seg, 32);\n-        Foo.c$set(seg, (byte)'z');\n-        assertEquals(Foo.i$get(seg), 32);\n-        assertEquals(Foo.c$get(seg), (byte)'z');\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            var seg = Foo.allocate(scope);\n+            Foo.i$set(seg, 32);\n+            Foo.c$set(seg, (byte)'z');\n+            assertEquals(Foo.i$get(seg), 32);\n+            assertEquals(Foo.c$get(seg), (byte)'z');\n+        }\n@@ -65,5 +68,7 @@\n-        var seg = getFoo().asSegmentRestricted(Foo.sizeof());\n-        Foo.i$set(seg, 42);\n-        Foo.c$set(seg, (byte)'j');\n-        assertEquals(Foo.i$get(seg), 42);\n-        assertEquals(Foo.c$get(seg), (byte)'j');\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            var seg = getFoo().asSegment(Foo.sizeof(), scope);\n+            Foo.i$set(seg, 42);\n+            Foo.c$set(seg, (byte)'j');\n+            assertEquals(Foo.i$get(seg), 42);\n+            assertEquals(Foo.c$get(seg), (byte)'j');\n+        }\n","filename":"test\/jdk\/tools\/jextract\/test8257892\/LibUnsupportedTest.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8258605Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8258605Test\n@@ -48,1 +48,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8258605Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8258605Test\n@@ -53,1 +53,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -65,1 +65,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -69,1 +69,1 @@\n-             var foo = getFoo();\n+             var foo = getFoo(scope);\n","filename":"test\/jdk\/tools\/jextract\/test8258605\/LibTest8258605Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8259473Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8259473Test\n@@ -48,1 +48,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibTest8259473Test\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibTest8259473Test\n","filename":"test\/jdk\/tools\/jextract\/test8259473\/LibTest8259473Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -36,1 +37,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8261511\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8261511\n@@ -45,1 +46,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8261511\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8261511\n@@ -50,4 +51,6 @@\n-        var funcPtr = Foo.sum$get(get_foo());\n-        var sumIface = Foo.sum.ofAddressRestricted(funcPtr);\n-        assertEquals(sumIface.apply(15,20), 35);\n-        assertEquals(sum(1.2, 4.5), 5.7, 0.001);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            var funcPtr = Foo.sum$get(get_foo(scope));\n+            var sumIface = Foo.sum.ofAddress(funcPtr);\n+            assertEquals(sumIface.apply(15,20), 35);\n+            assertEquals(sum(1.2, 4.5), 5.7, 0.001);\n+        }\n","filename":"test\/jdk\/tools\/jextract\/test8261511\/Test8261511.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit Test8261578\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8261578\n","filename":"test\/jdk\/tools\/jextract\/test8261578\/Test8261578.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit -Duser.language=en TestClassGeneration\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED -Duser.language=en TestClassGeneration\n@@ -65,1 +65,1 @@\n-    private static final VarHandle VH_bytes = MemoryLayout.ofSequence(C_CHAR).varHandle(byte.class, sequenceElement());\n+    private static final VarHandle VH_bytes = MemoryLayout.sequenceLayout(C_CHAR).varHandle(byte.class, sequenceElement());\n@@ -201,1 +201,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/tools\/jextract\/testClassGen\/TestClassGeneration.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibFuncPtrTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibFuncPtrTest\n@@ -42,1 +42,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibFuncPtrTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibFuncPtrTest\n@@ -47,1 +47,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/tools\/jextract\/testFunctionPointer\/LibFuncPtrTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -38,1 +39,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibStructTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibStructTest\n@@ -47,1 +48,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit LibStructTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED LibStructTest\n@@ -53,3 +54,5 @@\n-        var seg = makePoint(42, -39);\n-        assertEquals(Point.x$get(seg), 42);\n-        assertEquals(Point.y$get(seg), -39);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            var seg = makePoint(scope, 42, -39);\n+            assertEquals(Point.x$get(seg), 42);\n+            assertEquals(Point.y$get(seg), -39);\n+        }\n@@ -60,5 +63,7 @@\n-        var seg = Point.allocate();\n-        Point.x$set(seg, 56);\n-        Point.y$set(seg, 65);\n-        assertEquals(Point.x$get(seg), 56);\n-        assertEquals(Point.y$get(seg), 65);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            var seg = Point.allocate(scope);\n+            Point.x$set(seg, 56);\n+            Point.y$set(seg, 65);\n+            assertEquals(Point.x$get(seg), 56);\n+            assertEquals(Point.y$get(seg), 65);\n+        }\n@@ -69,8 +74,10 @@\n-        var seg = Point.allocateArray(3);\n-        for (int i = 0; i < 3; i++) {\n-            Point.x$set(seg, i, 56 + i);\n-            Point.y$set(seg, i, 65 + i);\n-        }\n-        for (int i = 0; i < 3; i++) {\n-            assertEquals(Point.x$get(seg, i), 56 + i);\n-            assertEquals(Point.y$get(seg, i), 65 + i);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            var seg = Point.allocateArray(3, scope);\n+            for (int i = 0; i < 3; i++) {\n+                Point.x$set(seg, i, 56 + i);\n+                Point.y$set(seg, i, 65 + i);\n+            }\n+            for (int i = 0; i < 3; i++) {\n+                assertEquals(Point.x$get(seg, i), 56 + i);\n+                assertEquals(Point.y$get(seg, i), 65 + i);\n+            }\n","filename":"test\/jdk\/tools\/jextract\/testStruct\/LibStructTest.java","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestTypedefIsFunctionProto\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract TestTypedefIsFunctionProto\n","filename":"test\/jdk\/tools\/jextract\/testTypedefIsFunctionProto\/TestTypedefIsFunctionProto.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}