{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -284,1 +285,1 @@\n-     * Converts a Java string into a null-terminated C string, using the platform's default charset,\n+     * Converts a Java string into a UTF-8 encoded, null-terminated C string,\n@@ -299,1 +300,1 @@\n-        return toCString(str.getBytes(), allocator);\n+        return toCString(str.getBytes(StandardCharsets.UTF_8), allocator);\n@@ -303,1 +304,1 @@\n-     * Converts a Java string into a null-terminated C string, using the platform's default charset,\n+     * Converts a Java string into a UTF-8 encoded, null-terminated C string,\n@@ -322,42 +323,1 @@\n-     * Converts a Java string into a null-terminated C string, using the given {@linkplain java.nio.charset.Charset charset},\n-     * storing the result into a new native memory segment native memory segment allocated using the provided allocator.\n-     * <p>\n-     * This method always replaces malformed-input and unmappable-character\n-     * sequences with this charset's default replacement byte array.  The\n-     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n-     * control over the encoding process is required.\n-     *\n-     * @param str the Java string to be converted into a C string.\n-     * @param charset The {@link java.nio.charset.Charset} to be used to compute the contents of the C string.\n-     * @param allocator the allocator to be used for the native segment allocation.\n-     * @return a new native memory segment containing the converted C string.\n-     *\/\n-    static MemorySegment toCString(String str, Charset charset, SegmentAllocator allocator) {\n-        Objects.requireNonNull(str);\n-        Objects.requireNonNull(charset);\n-        Objects.requireNonNull(allocator);\n-        return toCString(str.getBytes(charset), allocator);\n-    }\n-\n-    \/**\n-     * Converts a Java string into a null-terminated C string, using the given {@linkplain java.nio.charset.Charset charset},\n-     * storing the result into a native memory segment associated with the provided resource scope.\n-     * <p>\n-     * This method always replaces malformed-input and unmappable-character\n-     * sequences with this charset's default replacement byte array.  The\n-     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n-     * control over the encoding process is required.\n-     *\n-     * @param str the Java string to be converted into a C string.\n-     * @param charset The {@link java.nio.charset.Charset} to be used to compute the contents of the C string.\n-     * @param scope the resource scope to be associated with the returned segment.\n-     * @return a new native memory segment containing the converted C string.\n-     * @throws IllegalStateException if {@code scope} has been already closed, or if access occurs from a thread other\n-     * than the thread owning {@code scope}.\n-     *\/\n-    static MemorySegment toCString(String str, Charset charset, ResourceScope scope) {\n-        return toCString(str, charset, SegmentAllocator.ofScope(scope));\n-    }\n-\n-    \/**\n-     * Converts a null-terminated C string stored at given address into a Java string, using the platform's default charset.\n+     * Converts a UTF-8 encoded, null-terminated C string stored at given address into a Java string.\n@@ -387,1 +347,1 @@\n-        return SharedUtils.toJavaStringInternal(NativeMemorySegmentImpl.EVERYTHING, addr.toRawLongValue(), Charset.defaultCharset());\n+        return SharedUtils.toJavaStringInternal(NativeMemorySegmentImpl.EVERYTHING, addr.toRawLongValue());\n@@ -391,31 +351,1 @@\n-     * Converts a null-terminated C string stored at given address into a Java string, using the given {@linkplain java.nio.charset.Charset charset}.\n-     * <p>\n-     * This method always replaces malformed-input and unmappable-character\n-     * sequences with this charset's default replacement string.  The {@link\n-     * java.nio.charset.CharsetDecoder} class should be used when more control\n-     * over the decoding process is required.\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n-     *\n-     * @param addr the address at which the string is stored.\n-     * @param charset The {@link java.nio.charset.Charset} to be used to compute the contents of the Java string.\n-     * @return a Java string with the contents of the null-terminated C string at given address.\n-     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform,\n-     * or if {@code addr == MemoryAddress.NULL}.\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n-     *\/\n-    @CallerSensitive\n-    static String toJavaString(MemoryAddress addr, Charset charset) {\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n-        SharedUtils.checkAddress(addr);\n-        Objects.requireNonNull(charset);\n-        return SharedUtils.toJavaStringInternal(NativeMemorySegmentImpl.EVERYTHING, addr.toRawLongValue(), charset);\n-    }\n-\n-    \/**\n-     * Converts a null-terminated C string stored at given address into a Java string, using the platform's default charset.\n+     * Converts a UTF-8 encoded, null-terminated C string stored at given address into a Java string.\n@@ -435,21 +365,1 @@\n-        return SharedUtils.toJavaStringInternal(addr, 0L, Charset.defaultCharset());\n-    }\n-\n-    \/**\n-     * Converts a null-terminated C string stored at given address into a Java string, using the given {@linkplain java.nio.charset.Charset charset}.\n-     * <p>\n-     * This method always replaces malformed-input and unmappable-character\n-     * sequences with this charset's default replacement string.  The {@link\n-     * java.nio.charset.CharsetDecoder} class should be used when more control\n-     * over the decoding process is required.\n-     * @param addr the address at which the string is stored.\n-     * @param charset The {@link java.nio.charset.Charset} to be used to compute the contents of the Java string.\n-     * @return a Java string with the contents of the null-terminated C string at given address.\n-     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n-     * @throws IllegalStateException if the size of the native string is greater than the size of the segment\n-     * associated with {@code addr}, or if {@code addr} is associated with a segment that is <em>not alive<\/em>.\n-     *\/\n-    static String toJavaString(MemorySegment addr, Charset charset) {\n-        Objects.requireNonNull(addr);\n-        Objects.requireNonNull(charset);\n-        return SharedUtils.toJavaStringInternal(addr, 0L, charset);\n+        return SharedUtils.toJavaStringInternal(addr, 0L);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":8,"deletions":98,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -286,1 +287,1 @@\n-    public static String toJavaStringInternal(MemorySegment segment, long start, Charset charset) {\n+    public static String toJavaStringInternal(MemorySegment segment, long start) {\n@@ -291,1 +292,1 @@\n-        return new String(bytes, charset);\n+        return new String(bytes, StandardCharsets.UTF_8);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.MemorySegment;\n+\n+import jdk.incubator.foreign.ResourceScope;\n+import org.testng.annotations.*;\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @run testng TestStringEncoding\n+ *\/\n+\n+public class TestStringEncoding {\n+\n+    @Test(dataProvider = \"strings\")\n+    public void testStrings(String testString, int expectedByteLength) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            MemorySegment text = CLinker.toCString(testString, scope);\n+\n+            assertEquals(text.byteSize(), expectedByteLength);\n+\n+            String roundTrip = CLinker.toJavaString(text);\n+            assertEquals(roundTrip, testString);\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] strings() {\n+        return new Object[][] {\n+            { \"testing\",               8 },\n+            { \"\",                      1 },\n+            { \"X\",                     2 },\n+            { \"12345\",                 6 },\n+            { \"yen \\u00A5\",            7 }, \/\/ in UTF-8 2 bytes: 0xC2 0xA5\n+            { \"snowman \\u26C4\",       12 }, \/\/ in UTF-8 three bytes: 0xE2 0x9B 0x84\n+            { \"rainbow \\uD83C\\uDF08\", 13 }  \/\/ int UTF-8 four bytes: 0xF0 0x9F 0x8C 0x88\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -61,4 +61,1 @@\n-                            \"CLinker::toJavaString\/1\" },\n-                    { MethodHandles.lookup().findStatic(CLinker.class, \"toJavaString\",\n-                            MethodType.methodType(String.class, MemoryAddress.class, Charset.class)),\n-                            \"CLinker::toJavaString\/2\" },\n+                            \"CLinker::toJavaString\" },\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}