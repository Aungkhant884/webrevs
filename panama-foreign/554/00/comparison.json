{"files":[{"patch":"@@ -299,1 +299,8 @@\n-        return toCString(str.getBytes(), allocator);\n+        return toCString(addNullTerminator(str).getBytes(), allocator);\n+    }\n+\n+    private static String addNullTerminator(String str) {\n+        \/\/ Note that we do this before encoding the string as a byte[]\n+        \/\/ so that the terminator will be an appropriate number of bytes\n+        \/\/ for the used character encoding.\n+        return str + '\\0';\n@@ -339,1 +346,1 @@\n-        return toCString(str.getBytes(charset), allocator);\n+        return toCString(addNullTerminator(str).getBytes(charset), allocator);\n@@ -456,6 +463,0 @@\n-    private static void copy(MemorySegment addr, byte[] bytes) {\n-        var heapSegment = MemorySegment.ofArray(bytes);\n-        addr.copyFrom(heapSegment);\n-        MemoryAccess.setByteAtOffset(addr, bytes.length, (byte)0);\n-    }\n-\n@@ -463,2 +464,2 @@\n-        MemorySegment addr = allocator.allocate(bytes.length + 1, 1L);\n-        copy(addr, bytes);\n+        MemorySegment addr = allocator.allocate(bytes.length, 1L);\n+        addr.copyFrom(MemorySegment.ofArray(bytes));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemorySegment;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import jdk.incubator.foreign.ResourceScope;\n+import org.testng.annotations.*;\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @run testng TestToCStringWide\n+ *\/\n+\n+public class TestToCStringWide {\n+\n+    @Test(dataProvider = \"strings\")\n+    public void testStrings(Charset charset, int bytesPerChar) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            String testString = \"testing\";\n+            MemorySegment text = CLinker.toCString(testString, charset, scope);\n+\n+            \/\/ Only if we have no surrogate pairs:\n+            int expectedByteLength = (testString.length() + 1) * bytesPerChar;\n+            assertEquals(text.byteSize(), expectedByteLength);\n+\n+            for (long i = text.byteSize() - bytesPerChar; i < text.byteSize(); i++) {\n+                assertEquals(MemoryAccess.getByteAtOffset(text, i), 0);\n+            }\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] strings() {\n+        return new Object[][]{\n+            { StandardCharsets.US_ASCII,   1 },\n+            { StandardCharsets.UTF_8,      1 },\n+            { StandardCharsets.UTF_16LE,   2 },\n+            { Charset.forName(\"UTF_32LE\"), 4 },\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestToCStringWide.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}