{"files":[{"patch":"@@ -212,1 +212,1 @@\n-    MemoryAddress NULL = new MemoryAddressImpl.UncheckedAddress(0L);\n+    MemoryAddress NULL = new MemoryAddressImpl(null, 0L);\n@@ -222,1 +222,1 @@\n-                new MemoryAddressImpl.UncheckedAddress(value);\n+                new MemoryAddressImpl(null, value);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-     * Create a new <em>default scope<\/em>, a shared, non-closeable scope which only features\n+     * Create a new <em>default scope<\/em>. The default scope is a shared and non-closeable scope which only features\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-        return new MemoryAddressImpl.SegmentAddress(this, 0L);\n+        return new MemoryAddressImpl(this, 0L);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-public abstract class MemoryAddressImpl implements MemoryAddress {\n+public final class MemoryAddressImpl implements MemoryAddress {\n@@ -40,2 +40,16 @@\n-    abstract Object base();\n-    abstract long offset();\n+    private final AbstractMemorySegmentImpl segment;\n+    private final long offset;\n+\n+    public MemoryAddressImpl(AbstractMemorySegmentImpl segment, long offset) {\n+        this.segment = segment;\n+        this.offset = offset;\n+    }\n+\n+    Object base() {\n+        return segment != null ? segment.base() : null;\n+    }\n+\n+    long offset() {\n+        return segment != null ?\n+                segment.min() + offset : offset;\n+    }\n@@ -45,0 +59,6 @@\n+\n+    @Override\n+    public MemoryAddress addOffset(long offset) {\n+        return new MemoryAddressImpl(segment, this.offset + offset);\n+    }\n+\n@@ -109,55 +129,0 @@\n-\n-    \/**\n-     * A memory address that wraps a raw address.\n-     *\/\n-    public static final class UncheckedAddress extends MemoryAddressImpl {\n-        final long addr;\n-\n-        public UncheckedAddress(long addr) {\n-            this.addr = addr;\n-        }\n-\n-        @Override\n-        public MemoryAddress addOffset(long offset) {\n-            return new UncheckedAddress(addr + offset);\n-        }\n-\n-        @Override\n-        Object base() {\n-            return null;\n-        }\n-\n-        @Override\n-        long offset() {\n-            return addr;\n-        }\n-    }\n-\n-    \/**\n-     * A memory address expressed as an offset into a segment. Crucially, this keeps the segment reachable,\n-     * which is useful when segments are passed to native functions \"by reference\".\n-     *\/\n-    public static final class SegmentAddress extends MemoryAddressImpl {\n-        final AbstractMemorySegmentImpl segment;\n-        final long offset;\n-\n-        public SegmentAddress(AbstractMemorySegmentImpl segment, long offset) {\n-            this.segment = segment;\n-            this.offset = offset;\n-        }\n-\n-        @Override\n-        public MemoryAddress addOffset(long offset) {\n-            return new SegmentAddress(segment, this.offset + offset);\n-        }\n-\n-        @Override\n-        Object base() {\n-            return segment.base();\n-        }\n-\n-        @Override\n-        long offset() {\n-            return segment.min() + offset;\n-        }\n-    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":23,"deletions":58,"binary":false,"changes":81,"status":"modified"}]}