{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.nio.file.Files;\n@@ -49,2 +50,10 @@\n-        case Win64 -> NativeLibraries.rawNativeLibraries(SystemLookup.class, false)\n-                .loadLibrary(null, Path.of(System.getenv(\"SystemRoot\"), \"System32\", \"msvcrt.dll\").toFile());\n+        case Win64 -> {\n+            Path system32 = Path.of(System.getenv(\"SystemRoot\"), \"System32\");\n+            Path ucrtbase = system32.resolve(\"ucrtbase.dll\");\n+            Path msvcrt = system32.resolve(\"msvcrt.dll\");\n+\n+            Path stdLib = Files.exists(ucrtbase) ? ucrtbase : msvcrt;\n+\n+            yield NativeLibraries.rawNativeLibraries(SystemLookup.class, false)\n+                    .loadLibrary(null, stdLib.toFile());\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestMixedMallocFree\n+ *\/\n+\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.FunctionDescriptor;\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.foreign.SymbolLookup;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+\n+import static jdk.incubator.foreign.CLinker.*;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestMixedMallocFree {\n+\n+    static final MethodHandle MH_my_malloc;\n+\n+    static {\n+        System.loadLibrary(\"Malloc\");\n+        SymbolLookup MALLOC = SymbolLookup.loaderLookup();\n+\n+        MH_my_malloc = CLinker.getInstance().downcallHandle(\n+            MALLOC.lookup(\"my_malloc\").orElseThrow(),\n+            MethodType.methodType(MemoryAddress.class, long.class),\n+            FunctionDescriptor.of(C_POINTER, C_LONG_LONG));\n+    }\n+\n+    @Test\n+    public void testMalloc() throws Throwable {\n+        MemoryAddress ma = (MemoryAddress) MH_my_malloc.invokeExact(4L);\n+        MemorySegment seg = ma.asSegment(4L, ResourceScope.newImplicitScope());\n+        MemoryAccess.setInt(seg, 42);\n+        assertEquals(MemoryAccess.getInt(seg), 42);\n+        \/\/ Test if this free crashes the VM, which might be the case if we load the wrong default library\n+        \/\/ and end up mixing two allocators together.\n+        CLinker.freeMemory(ma);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/malloc\/TestMixedMallocFree.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#include <stdlib.h>\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+EXPORT void* my_malloc(size_t size) {\n+    return malloc(size);\n+}\n","filename":"test\/jdk\/java\/foreign\/malloc\/libMalloc.c","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}