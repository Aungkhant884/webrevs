{"files":[{"patch":"@@ -732,0 +732,2 @@\n+         * @apiNote This linker option can not be combined with {@link #isTrivial}.\n+         *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,5 @@\n-        return new LinkerOptions(optionMap);\n+        LinkerOptions linkerOptions = new LinkerOptions(optionMap);\n+        if (linkerOptions.hasCapturedCallState() && linkerOptions.isTrivial()) {\n+            throw new IllegalArgumentException(\"Incompatible linker options: captureCallState, isTrivial\");\n+        }\n+        return linkerOptions;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/LinkerOptions.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -195,0 +195,5 @@\n+            {\n+                    FunctionDescriptor.ofVoid(),\n+                    new Linker.Option[]{Linker.Option.isTrivial(), Linker.Option.captureCallState(\"errno\")},\n+                    \"Incompatible linker options: captureCallState, isTrivial\"\n+            },\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    private record SaveValuesCase(String nativeTarget, FunctionDescriptor nativeDesc, boolean trivial, String threadLocalName, Consumer<Object> resultCheck) {}\n+    private record SaveValuesCase(String nativeTarget, FunctionDescriptor nativeDesc, String threadLocalName, Consumer<Object> resultCheck) {}\n@@ -68,6 +68,2 @@\n-        List<Linker.Option> options = new ArrayList<>();\n-        options.add(Linker.Option.captureCallState(testCase.threadLocalName()));\n-        if (testCase.trivial()) {\n-            options.add(Linker.Option.isTrivial());\n-        }\n-        MethodHandle handle = downcallHandle(testCase.nativeTarget(), testCase.nativeDesc(), options.toArray(Linker.Option[]::new));\n+        Linker.Option stl = Linker.Option.captureCallState(testCase.threadLocalName());\n+        MethodHandle handle = downcallHandle(testCase.nativeTarget(), testCase.nativeDesc(), stl);\n@@ -106,4 +102,0 @@\n-    interface CaseAdder {\n-      void addCase(String nativeTarget, FunctionDescriptor nativeDesc, String threadLocalName, Consumer<Object> resultCheck);\n-    }\n-\n@@ -113,4 +105,0 @@\n-        CaseAdder adder = (nativeTarget, nativeDesc, threadLocalName, resultCheck) -> {\n-          cases.add(new SaveValuesCase(nativeTarget, nativeDesc, false, threadLocalName, resultCheck));\n-          cases.add(new SaveValuesCase(nativeTarget, nativeDesc, true, threadLocalName, resultCheck));\n-        };\n@@ -118,16 +106,16 @@\n-        adder.addCase(\"set_errno_V\", FunctionDescriptor.ofVoid(JAVA_INT), \"errno\", o -> {});\n-        adder.addCase(\"set_errno_I\", FunctionDescriptor.of(JAVA_INT, JAVA_INT), \"errno\", o -> assertEquals((int) o, 42));\n-        adder.addCase(\"set_errno_D\", FunctionDescriptor.of(JAVA_DOUBLE, JAVA_INT), \"errno\", o -> assertEquals((double) o, 42.0));\n-\n-        structCase(adder, \"SL\",  Map.of(JAVA_LONG.withName(\"x\"), 42L));\n-        structCase(adder, \"SLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n-                                         JAVA_LONG.withName(\"y\"), 42L));\n-        structCase(adder, \"SLLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n-                                         JAVA_LONG.withName(\"y\"), 42L,\n-                                         JAVA_LONG.withName(\"z\"), 42L));\n-        structCase(adder, \"SD\",  Map.of(JAVA_DOUBLE.withName(\"x\"), 42D));\n-        structCase(adder, \"SDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n-                                         JAVA_DOUBLE.withName(\"y\"), 42D));\n-        structCase(adder, \"SDDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n-                                         JAVA_DOUBLE.withName(\"y\"), 42D,\n-                                         JAVA_DOUBLE.withName(\"z\"), 42D));\n+        cases.add(new SaveValuesCase(\"set_errno_V\", FunctionDescriptor.ofVoid(JAVA_INT), \"errno\", o -> {}));\n+        cases.add(new SaveValuesCase(\"set_errno_I\", FunctionDescriptor.of(JAVA_INT, JAVA_INT), \"errno\", o -> assertEquals((int) o, 42)));\n+        cases.add(new SaveValuesCase(\"set_errno_D\", FunctionDescriptor.of(JAVA_DOUBLE, JAVA_INT), \"errno\", o -> assertEquals((double) o, 42.0)));\n+\n+        cases.add(structCase(\"SL\",  Map.of(JAVA_LONG.withName(\"x\"), 42L)));\n+        cases.add(structCase(\"SLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                           JAVA_LONG.withName(\"y\"), 42L)));\n+        cases.add(structCase(\"SLLL\", Map.of(JAVA_LONG.withName(\"x\"), 42L,\n+                                            JAVA_LONG.withName(\"y\"), 42L,\n+                                            JAVA_LONG.withName(\"z\"), 42L)));\n+        cases.add(structCase(\"SD\",  Map.of(JAVA_DOUBLE.withName(\"x\"), 42D)));\n+        cases.add(structCase(\"SDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                           JAVA_DOUBLE.withName(\"y\"), 42D)));\n+        cases.add(structCase(\"SDDD\", Map.of(JAVA_DOUBLE.withName(\"x\"), 42D,\n+                                            JAVA_DOUBLE.withName(\"y\"), 42D,\n+                                            JAVA_DOUBLE.withName(\"z\"), 42D)));\n@@ -136,2 +124,2 @@\n-            adder.addCase(\"SetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"GetLastError\", o -> {});\n-            adder.addCase(\"WSASetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"WSAGetLastError\", o -> {});\n+            cases.add(new SaveValuesCase(\"SetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"GetLastError\", o -> {}));\n+            cases.add(new SaveValuesCase(\"WSASetLastError\", FunctionDescriptor.ofVoid(JAVA_INT), \"WSAGetLastError\", o -> {}));\n@@ -143,1 +131,1 @@\n-    static void structCase(CaseAdder adder, String name, Map<MemoryLayout, Object> fields) {\n+    static SaveValuesCase structCase(String name, Map<MemoryLayout, Object> fields) {\n@@ -154,1 +142,1 @@\n-        adder.addCase(\"set_errno_\" + name, FunctionDescriptor.of(layout, JAVA_INT), \"errno\", check);\n+        return new SaveValuesCase(\"set_errno_\" + name, FunctionDescriptor.of(layout, JAVA_INT), \"errno\", check);\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":23,"deletions":35,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -81,15 +81,0 @@\n-    @Test\n-    public void testCaptureErrno() throws Throwable {\n-        Linker.Option ccs = Linker.Option.captureCallState(\"errno\");\n-        MethodHandle handle = downcallHandle(\"capture_errno\", FunctionDescriptor.ofVoid(C_INT), Linker.Option.isTrivial(), ccs);\n-        StructLayout capturedStateLayout = Linker.Option.captureStateLayout();\n-        VarHandle errnoHandle = capturedStateLayout.varHandle(MemoryLayout.PathElement.groupElement(\"errno\"));\n-        try (Arena arena = Arena.ofConfined()) {\n-            MemorySegment captureSeg = arena.allocate(capturedStateLayout);\n-            handle.invokeExact(captureSeg, 42);\n-            int capturedErrno = (int) errnoHandle.get(captureSeg, 0L);\n-            assertEquals(capturedErrno, 42);\n-        }\n-    }\n-\n-\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestTrivial.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -51,4 +51,0 @@\n-EXPORT void capture_errno(int value) {\n-    errno = value;\n-}\n-\n","filename":"test\/jdk\/java\/foreign\/trivial\/libTrivial.c","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}