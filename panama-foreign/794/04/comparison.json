{"files":[{"patch":"@@ -1,274 +0,0 @@\n-\/*\n- *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-package jdk.internal.foreign;\n-\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.ValueLayout;\n-\n-public final class PlatformLayouts {\n-\n-    private PlatformLayouts() {\n-        \/\/just the one\n-    }\n-\n-    \/**\n-     * This class defines layout constants modelling standard primitive types supported by the x64 SystemV ABI.\n-     *\/\n-    public static final class SysV {\n-        private SysV() {\n-            \/\/just the one\n-        }\n-\n-        \/**\n-         * The {@code bool} native type.\n-         *\/\n-        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n-\n-        \/**\n-         * The {@code char} native type.\n-         *\/\n-        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n-\n-        \/**\n-         * The {@code short} native type.\n-         *\/\n-        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n-\n-        \/**\n-         * The {@code int} native type.\n-         *\/\n-        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code long} native type.\n-         *\/\n-        public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code long long} native type.\n-         *\/\n-        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code float} native type.\n-         *\/\n-        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code double} native type.\n-         *\/\n-        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code T*} native type.\n-         *\/\n-        public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(64)\n-                .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n-\n-        \/**\n-         * The {@code va_list} native type, as it is passed to a function.\n-         *\/\n-        public static final ValueLayout.OfAddress C_VA_LIST = SysV.C_POINTER;\n-    }\n-\n-    \/**\n-     * This class defines layout constants modelling standard primitive types supported by the x64 Windows ABI.\n-     *\/\n-    public static final class Win64 {\n-\n-        private Win64() {\n-            \/\/just the one\n-        }\n-\n-        \/**\n-         * The {@code bool} native type.\n-         *\/\n-        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n-\n-        \/**\n-         * The {@code char} native type.\n-         *\/\n-        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n-\n-        \/**\n-         * The {@code short} native type.\n-         *\/\n-        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n-\n-        \/**\n-         * The {@code int} native type.\n-         *\/\n-        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT.withBitAlignment(32);\n-        \/**\n-         * The {@code long} native type.\n-         *\/\n-        public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code long long} native type.\n-         *\/\n-        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code float} native type.\n-         *\/\n-        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code double} native type.\n-         *\/\n-        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code T*} native type.\n-         *\/\n-        public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(64)\n-                .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n-\n-        \/**\n-         * The {@code va_list} native type, as it is passed to a function.\n-         *\/\n-        public static final ValueLayout.OfAddress C_VA_LIST = Win64.C_POINTER;\n-    }\n-\n-    \/**\n-     * This class defines layout constants modelling standard primitive types supported by the AArch64 ABI.\n-     *\/\n-    public static final class AArch64 {\n-\n-        private AArch64() {\n-            \/\/just the one\n-        }\n-\n-        \/**\n-         * The {@code bool} native type.\n-         *\/\n-        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n-\n-        \/**\n-         * The {@code char} native type.\n-         *\/\n-        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n-\n-        \/**\n-         * The {@code short} native type.\n-         *\/\n-        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n-\n-        \/**\n-         * The {@code int} native type.\n-         *\/\n-        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code long} native type.\n-         *\/\n-        public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code long long} native type.\n-         *\/\n-        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code float} native type.\n-         *\/\n-        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code double} native type.\n-         *\/\n-        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code T*} native type.\n-         *\/\n-        public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(64)\n-                .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n-\n-        \/**\n-         * The {@code va_list} native type, as it is passed to a function.\n-         *\/\n-        public static final ValueLayout.OfAddress C_VA_LIST = AArch64.C_POINTER;\n-    }\n-\n-    public static final class RISCV64 {\n-        private RISCV64() {\n-            \/\/just the one\n-        }\n-\n-        \/**\n-         * The {@code bool} native type.\n-         *\/\n-        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n-\n-        \/**\n-         * The {@code char} native type.\n-         *\/\n-        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n-\n-        \/**\n-         * The {@code short} native type.\n-         *\/\n-        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n-\n-        \/**\n-         * The {@code int} native type.\n-         *\/\n-        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code long} native type.\n-         *\/\n-        public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code long long} native type.\n-         *\/\n-        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code float} native type.\n-         *\/\n-        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n-\n-        \/**\n-         * The {@code double} native type.\n-         *\/\n-        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n-\n-        \/**\n-         * The {@code T*} native type.\n-         *\/\n-        public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(64)\n-                .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n-\n-        \/**\n-         * The {@code va_list} native type, as it is passed to a function.\n-         *\/\n-        public static final ValueLayout.OfAddress C_VA_LIST = RISCV64.C_POINTER;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","additions":0,"deletions":274,"binary":false,"changes":274,"status":"deleted"},{"patch":"@@ -76,0 +76,4 @@\n+    public static final ValueLayout.OfAddress C_POINTER = ADDRESS\n+            .withBitAlignment(64)\n+            .withTargetLayout(MemoryLayout.sequenceLayout(JAVA_BYTE));\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.foreign.Linker;\n@@ -54,1 +53,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.*;\n@@ -85,1 +83,1 @@\n-    \/\/ r2-7 and v4-7 so they are omitted here.\n+    \/\/ r2-7 and v4-7 so, they are omitted here.\n@@ -161,1 +159,1 @@\n-            csb.addArgumentBindings(MemorySegment.class, AArch64.C_POINTER,\n+            csb.addArgumentBindings(MemorySegment.class, SharedUtils.C_POINTER,\n@@ -433,1 +431,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, AArch64.C_POINTER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, SharedUtils.C_POINTER);\n@@ -492,1 +490,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, AArch64.C_POINTER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, SharedUtils.C_POINTER);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.*;\n@@ -93,1 +92,1 @@\n-            MemoryLayout layout = RISCV64.C_POINTER;\n+            MemoryLayout layout = SharedUtils.C_POINTER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/LinuxRISCV64CallArranger.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -51,1 +52,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.SysV;\n@@ -67,0 +67,5 @@\n+    \/**\n+     * The {@code long} native type.\n+     *\/\n+    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+\n@@ -99,1 +104,1 @@\n-            MemoryLayout layout = SysV.C_POINTER;\n+            MemoryLayout layout = SharedUtils.C_POINTER;\n@@ -115,1 +120,1 @@\n-            csb.addArgumentBindings(long.class, SysV.C_LONG,\n+            csb.addArgumentBindings(long.class, C_LONG,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.Win64;\n@@ -106,1 +105,1 @@\n-            MemoryLayout layout = Win64.C_POINTER;\n+            MemoryLayout layout = SharedUtils.C_POINTER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -34,1 +35,1 @@\n-import jdk.internal.foreign.PlatformLayouts;\n+import platform.PlatformLayouts;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestLayoutEquality.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/jdk\/java\/foreign\/TestLayoutEquality.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -53,1 +54,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.AArch64.*;\n@@ -57,0 +57,1 @@\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestLinuxAArch64CallArranger.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -53,1 +54,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.AArch64.*;\n@@ -57,0 +57,1 @@\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestMacOsAArch64CallArranger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -42,1 +43,0 @@\n-import java.lang.foreign.StructLayout;\n@@ -52,0 +52,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -56,1 +57,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.RISCV64.*;\n@@ -60,0 +60,1 @@\n+import static platform.PlatformLayouts.RISCV64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestRISCV64CallArranger.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -50,1 +51,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.SysV.*;\n@@ -54,0 +54,1 @@\n+import static platform.PlatformLayouts.SysV.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -37,1 +38,0 @@\n-import java.lang.foreign.StructLayout;\n@@ -52,1 +52,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.AArch64.*;\n@@ -56,0 +55,1 @@\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsAArch64CallArranger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -51,1 +52,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.Win64.*;\n@@ -56,0 +56,1 @@\n+import static platform.PlatformLayouts.Win64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,254 @@\n+\/*\n+ *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+package platform;\n+\n+import jdk.internal.foreign.abi.SharedUtils;\n+\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n+\n+public final class PlatformLayouts {\n+\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private PlatformLayouts() {}\n+\n+    \/**\n+     * This class defines layout constants modelling standard primitive types supported by the x64 SystemV ABI.\n+     *\/\n+    public static final class SysV {\n+\n+        \/\/ Suppresses default constructor, ensuring non-instantiability.\n+        private SysV() {}\n+\n+        \/**\n+         * The {@code bool} native type.\n+         *\/\n+        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+\n+        \/**\n+         * The {@code char} native type.\n+         *\/\n+        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+\n+        \/**\n+         * The {@code short} native type.\n+         *\/\n+        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+\n+        \/**\n+         * The {@code int} native type.\n+         *\/\n+        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n+\n+        \/**\n+         * The {@code long} native type.\n+         *\/\n+        public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+\n+        \/**\n+         * The {@code long long} native type.\n+         *\/\n+        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+\n+        \/**\n+         * The {@code float} native type.\n+         *\/\n+        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+\n+        \/**\n+         * The {@code double} native type.\n+         *\/\n+        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+\n+        \/**\n+         * The {@code T*} native type.\n+         *\/\n+        public static final ValueLayout.OfAddress C_POINTER = SharedUtils.C_POINTER;;\n+\n+    }\n+\n+    \/**\n+     * This class defines layout constants modelling standard primitive types supported by the x64 Windows ABI.\n+     *\/\n+    public static final class Win64 {\n+\n+        \/\/ Suppresses default constructor, ensuring non-instantiability.\n+        private Win64() {}\n+\n+        \/**\n+         * The {@code bool} native type.\n+         *\/\n+        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+\n+        \/**\n+         * The {@code char} native type.\n+         *\/\n+        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+\n+        \/**\n+         * The {@code short} native type.\n+         *\/\n+        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+\n+        \/**\n+         * The {@code int} native type.\n+         *\/\n+        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n+        \/**\n+         * The {@code long} native type.\n+         *\/\n+        public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;\n+\n+        \/**\n+         * The {@code long long} native type.\n+         *\/\n+        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+\n+        \/**\n+         * The {@code float} native type.\n+         *\/\n+        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+\n+        \/**\n+         * The {@code double} native type.\n+         *\/\n+        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+\n+        \/**\n+         * The {@code T*} native type.\n+         *\/\n+        public static final ValueLayout.OfAddress C_POINTER = SharedUtils.C_POINTER;\n+\n+    }\n+\n+    \/**\n+     * This class defines layout constants modelling standard primitive types supported by the AArch64 ABI.\n+     *\/\n+    public static final class AArch64 {\n+\n+        \/\/ Suppresses default constructor, ensuring non-instantiability.\n+        private AArch64() {}\n+\n+        \/**\n+         * The {@code bool} native type.\n+         *\/\n+        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+\n+        \/**\n+         * The {@code char} native type.\n+         *\/\n+        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+\n+        \/**\n+         * The {@code short} native type.\n+         *\/\n+        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+\n+        \/**\n+         * The {@code int} native type.\n+         *\/\n+        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n+\n+        \/**\n+         * The {@code long} native type.\n+         *\/\n+        public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+\n+        \/**\n+         * The {@code long long} native type.\n+         *\/\n+        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+\n+        \/**\n+         * The {@code float} native type.\n+         *\/\n+        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+\n+        \/**\n+         * The {@code double} native type.\n+         *\/\n+        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+\n+        \/**\n+         * The {@code T*} native type.\n+         *\/\n+        public static final ValueLayout.OfAddress C_POINTER = SharedUtils.C_POINTER;\n+\n+    }\n+\n+    public static final class RISCV64 {\n+\n+        \/\/ Suppresses default constructor, ensuring non-instantiability.\n+        private RISCV64() {}\n+\n+        \/**\n+         * The {@code bool} native type.\n+         *\/\n+        public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+\n+        \/**\n+         * The {@code char} native type.\n+         *\/\n+        public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+\n+        \/**\n+         * The {@code short} native type.\n+         *\/\n+        public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+\n+        \/**\n+         * The {@code int} native type.\n+         *\/\n+        public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n+\n+        \/**\n+         * The {@code long} native type.\n+         *\/\n+        public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+\n+        \/**\n+         * The {@code long long} native type.\n+         *\/\n+        public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+\n+        \/**\n+         * The {@code float} native type.\n+         *\/\n+        public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+\n+        \/**\n+         * The {@code double} native type.\n+         *\/\n+        public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+\n+        \/**\n+         * The {@code T*} native type.\n+         *\/\n+        public static final ValueLayout.OfAddress C_POINTER = SharedUtils.C_POINTER;\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/callarranger\/platform\/PlatformLayouts.java","additions":254,"deletions":0,"binary":false,"changes":254,"status":"added"}]}