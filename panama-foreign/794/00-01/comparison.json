{"files":[{"patch":"@@ -76,0 +76,4 @@\n+    public static final ValueLayout.OfAddress C_POINTER = ADDRESS\n+            .withBitAlignment(64)\n+            .withTargetLayout(MemoryLayout.sequenceLayout(JAVA_BYTE));\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.foreign.Linker;\n@@ -54,1 +53,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.*;\n@@ -85,1 +83,1 @@\n-    \/\/ r2-7 and v4-7 so they are omitted here.\n+    \/\/ r2-7 and v4-7 so, they are omitted here.\n@@ -161,1 +159,1 @@\n-            csb.addArgumentBindings(MemorySegment.class, AArch64.C_POINTER,\n+            csb.addArgumentBindings(MemorySegment.class, SharedUtils.C_POINTER,\n@@ -433,1 +431,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, AArch64.C_POINTER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, SharedUtils.C_POINTER);\n@@ -492,1 +490,1 @@\n-                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, AArch64.C_POINTER);\n+                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, SharedUtils.C_POINTER);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.*;\n@@ -93,1 +92,1 @@\n-            MemoryLayout layout = RISCV64.C_POINTER;\n+            MemoryLayout layout = SharedUtils.C_POINTER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/LinuxRISCV64CallArranger.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -51,1 +52,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.SysV;\n@@ -67,0 +67,5 @@\n+    \/**\n+     * The {@code long} native type.\n+     *\/\n+    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+\n@@ -99,1 +104,1 @@\n-            MemoryLayout layout = SysV.C_POINTER;\n+            MemoryLayout layout = SharedUtils.C_POINTER;\n@@ -115,1 +120,1 @@\n-            csb.addArgumentBindings(long.class, SysV.C_LONG,\n+            csb.addArgumentBindings(long.class, C_LONG,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.Win64;\n@@ -106,1 +105,1 @@\n-            MemoryLayout layout = Win64.C_POINTER;\n+            MemoryLayout layout = SharedUtils.C_POINTER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/*\n+package foreign.callarranger;\/*\n@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -29,1 +30,1 @@\n- * @run testng TestLayoutEquality\n+ * @run testng foreign.callarranger.TestLayoutEquality\n@@ -34,1 +35,1 @@\n-import jdk.internal.foreign.PlatformLayouts;\n+import platform.PlatformLayouts;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestLayoutEquality.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/foreign\/TestLayoutEquality.java","status":"renamed"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -53,1 +54,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.AArch64.*;\n@@ -57,0 +57,1 @@\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestLinuxAArch64CallArranger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -53,1 +54,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.AArch64.*;\n@@ -57,0 +57,1 @@\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestMacOsAArch64CallArranger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -42,1 +43,0 @@\n-import java.lang.foreign.StructLayout;\n@@ -52,0 +52,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -56,1 +57,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.RISCV64.*;\n@@ -60,0 +60,1 @@\n+import static platform.PlatformLayouts.RISCV64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestRISCV64CallArranger.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -50,1 +51,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.SysV.*;\n@@ -54,0 +54,1 @@\n+import static platform.PlatformLayouts.SysV.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -37,1 +38,0 @@\n-import java.lang.foreign.StructLayout;\n@@ -52,1 +52,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.AArch64.*;\n@@ -56,0 +55,1 @@\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsAArch64CallArranger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile platform\/PlatformLayouts.java\n@@ -51,1 +52,0 @@\n-import static jdk.internal.foreign.PlatformLayouts.Win64.*;\n@@ -56,0 +56,1 @@\n+import static platform.PlatformLayouts.Win64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-package jdk.internal.foreign;\n+package platform;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/platform\/PlatformLayouts.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","status":"renamed"}]}