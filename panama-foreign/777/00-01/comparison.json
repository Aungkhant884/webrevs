{"files":[{"patch":"@@ -339,2 +339,2 @@\n-         * <p>\n-         * Note that using a custom exception handler will not prevent the VM from exiting in the case of an uncaught\n+         *\n+         * @apiNote using a custom exception handler will not prevent the VM from exiting in the case of an uncaught\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-\n@@ -78,5 +77,0 @@\n-            MethodHandle handle = MethodHandles.identity(int.class);\n-            handle = MethodHandles.collectArguments(handle, 0, MH_throwException);\n-            MethodHandle invoker = MethodHandles.exactInvoker(MethodType.methodType(int.class, int.class));\n-            handle = MethodHandles.insertArguments(invoker, 0, handle);\n-\n@@ -84,2 +78,1 @@\n-                MemorySegment stub = Linker.nativeLinker().upcallStub(handle, FunctionDescriptor.of(C_INT, C_INT), arena.scope());\n-\n+                MemorySegment stub = Linker.nativeLinker().upcallStub(INT_TARGET, FunctionDescriptor.of(C_INT, C_INT), arena.scope());\n@@ -132,1 +125,0 @@\n-        static final MethodHandle MH_throwException;\n@@ -134,0 +126,1 @@\n+        static final MethodHandle INT_TARGET;\n@@ -149,1 +142,2 @@\n-                MH_throwException = MethodHandles.lookup().findStatic(ExceptionRunnerBase.class, \"throwException\",\n+                MethodHandles.Lookup lookup = MethodHandles.lookup();\n+                VOID_TARGET = lookup.findStatic(ExceptionRunnerBase.class, \"throwException\",\n@@ -151,0 +145,2 @@\n+                INT_TARGET = lookup.findStatic(ExceptionRunnerBase.class, \"throwException\",\n+                        MethodType.methodType(int.class, int.class));\n@@ -154,2 +150,0 @@\n-            MethodHandle invoker = MethodHandles.exactInvoker(MethodType.methodType(void.class));\n-            VOID_TARGET = MethodHandles.insertArguments(invoker, 0, MH_throwException);\n@@ -158,2 +152,6 @@\n-        public static void throwException() throws Throwable {\n-            throw new Throwable(\"Testing upcall exceptions\");\n+        public static void throwException() {\n+            throw new RuntimeException(\"Testing upcall exceptions\");\n+        }\n+\n+        public static int throwException(int x) {\n+            throw new RuntimeException(\"Testing upcall exceptions\");\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}