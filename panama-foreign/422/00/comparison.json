{"files":[{"patch":"@@ -269,0 +269,19 @@\n+    private boolean generateFunctionalInterface(Type.Function func, Type type, String name) {\n+        name = Utils.javaSafeIdentifier(name);\n+        \/\/generate functional interface\n+        if (func.varargs()) {\n+            warn(\"varargs in callbacks is not supported: \" + name);\n+        }\n+        MethodType fitype = typeTranslator.getMethodType(func, false);\n+        FunctionDescriptor fpDesc = Type.descriptorFor(func).orElseThrow();\n+        MemoryLayout unsupportedLayout = isUnsupported(fpDesc);\n+        if (unsupportedLayout != null) {\n+            warn(\"skipping \" + name + \" because of unsupported type usage: \" +\n+                    UnsupportedLayouts.getUnsupportedTypeName(unsupportedLayout));\n+            return false;\n+        }\n+\n+        toplevelBuilder.addFunctionalInterface(name, fitype, fpDesc, type);\n+        return true;\n+    }\n+\n@@ -321,11 +340,1 @@\n-                name = Utils.javaSafeIdentifier(name);\n-                \/\/generate functional interface\n-                if (f.varargs()) {\n-                    warn(\"varargs in callbacks is not supported\");\n-                }\n-                MethodType fitype = typeTranslator.getMethodType(f, false);\n-                FunctionDescriptor fpDesc = Type.descriptorFor(f).orElseThrow();\n-                unsupportedLayout = isUnsupported(fpDesc);\n-                if (unsupportedLayout != null) {\n-                    warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage: \" +\n-                            UnsupportedLayouts.getUnsupportedTypeName(unsupportedLayout) + \" in \" + param.name());\n+                if (! generateFunctionalInterface(f, param.type(), name)) {\n@@ -334,2 +343,0 @@\n-\n-                toplevelBuilder.addFunctionalInterface(name, fitype, fpDesc, param.type());\n@@ -421,0 +428,1 @@\n+\n@@ -437,0 +445,6 @@\n+            return null;\n+        }\n+\n+        Type.Function func = getAsFunctionPointer(type);\n+        if (func != null) {\n+            generateFunctionalInterface(func, type, fieldName);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertNotNull;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 8258405\n+ * @summary functional interfaces are not generated for struct fields\/global variables with function pointers\n+ * @run testng\/othervm -Dforeign.restricted=permit Test8258405\n+ *\/\n+public class Test8258405 extends JextractToolRunner {\n+    @Test\n+    public void test() {\n+        Path test8258405Output = getOutputFilePath(\"test8258405_gen\");\n+        Path test8258405H = getInputFilePath(\"test8258405.h\");\n+        run(\"-d\", test8258405Output.toString(), test8258405H.toString()).checkSuccess();\n+        try(Loader loader = classLoader(test8258405Output)) {\n+            Class<?> cls = loader.loadClass(\"test8258405_h\");\n+            assertNotNull(cls);\n+            \/\/ check global function pointer variable 'func'\n+            cls = loader.loadClass(\"test8258405_h$func\");\n+            assertNotNull(cls);\n+            assertNotNull(findMethod(cls, \"apply\", int.class));\n+            \/\/ check function pointer member 'bar' of struct 'Foo'\n+            cls = loader.loadClass(\"test8258405_h$Foo$bar\");\n+            assertNotNull(cls);\n+            assertNotNull(findMethod(cls, \"apply\", float.class, double.class));\n+        } finally {\n+            deleteDir(test8258405Output);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/Test8258405.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -34,2 +34,5 @@\n-typedef void MyVoid;\n-EXPORT void func(MyVoid (*f)());\n+struct Foo {\n+  int (*bar)(float, double);\n+};\n+\n+void (*func)(int);\n","filename":"test\/jdk\/tools\/jextract\/test8258405.h","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"test\/jdk\/tools\/jextract\/test8249300.h","status":"copied"}]}