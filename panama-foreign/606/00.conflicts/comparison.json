{"files":[{"patch":"@@ -1583,5 +1583,0 @@\n-            @Override\n-            public void ensureCustomized(MethodHandle mh) {\n-                mh.customize();\n-            }\n-\n@@ -1595,2 +1590,2 @@\n-            public MethodHandle nativeMethodHandle(NativeEntryPoint nep, MethodHandle fallback) {\n-                return NativeMethodHandle.make(nep, fallback);\n+            public MethodHandle nativeMethodHandle(NativeEntryPoint nep) {\n+                return NativeMethodHandle.make(nep);\n@@ -1629,0 +1624,1 @@\n+<<<<<<< HEAD\n@@ -1670,0 +1666,6 @@\n+=======\n+            @Override\n+            public Class<?>[] exceptionTypes(MethodHandle handle) {\n+                return VarHandles.exceptionTypes(handle);\n+            }\n+>>>>>>> 0d35f42d99656b17f901041ef5f72565789beda7\n@@ -2276,9 +2278,10 @@\n-            MH_cast                  = 0,\n-            MH_selectAlternative     = 1,\n-            MH_countedLoopPred       = 2,\n-            MH_countedLoopStep       = 3,\n-            MH_initIterator          = 4,\n-            MH_iteratePred           = 5,\n-            MH_iterateNext           = 6,\n-            MH_Array_newInstance     = 7,\n-            MH_LIMIT                 = 8;\n+            MH_cast                               = 0,\n+            MH_selectAlternative                  = 1,\n+            MH_countedLoopPred                    = 2,\n+            MH_countedLoopStep                    = 3,\n+            MH_initIterator                       = 4,\n+            MH_iteratePred                        = 5,\n+            MH_iterateNext                        = 6,\n+            MH_Array_newInstance                  = 7,\n+            MH_VarHandles_handleCheckedExceptions = 8,\n+            MH_LIMIT                              = 9;\n@@ -2334,0 +2337,3 @@\n+                case MH_VarHandles_handleCheckedExceptions:\n+                    return IMPL_LOOKUP.findStatic(VarHandles.class, \"handleCheckedExceptions\",\n+                            MethodType.methodType(void.class, Throwable.class));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -134,1 +134,0 @@\n-     * @param fallback the fallback handle\n@@ -137,1 +136,1 @@\n-    MethodHandle nativeMethodHandle(NativeEntryPoint nep, MethodHandle fallback);\n+    MethodHandle nativeMethodHandle(NativeEntryPoint nep);\n@@ -140,3 +139,3 @@\n-     * Ensure given method handle is customized\n-     *\n-     * @param mh the method handle\n+     * A best-effort method that tries to find any exceptions thrown by the given method handle.\n+     * @param handle the handle to check\n+     * @return an array of exceptions, or {@code null}.\n@@ -144,0 +143,1 @@\n+<<<<<<< HEAD\n@@ -184,0 +184,3 @@\n+=======\n+    Class<?>[] exceptionTypes(MethodHandle handle);\n+>>>>>>> 0d35f42d99656b17f901041ef5f72565789beda7\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}