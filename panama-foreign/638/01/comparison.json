{"files":[{"patch":"@@ -202,0 +202,22 @@\n+    \/\/ binding operand stack manipulation\n+\n+    private void pushType(Class<?> type) {\n+        typeStack.push(type);\n+    }\n+\n+    private Class<?> popType() {\n+        return typeStack.pop();\n+    }\n+\n+    private Class<?> popType(Class<?> expected) {\n+        Class<?> found;\n+        if ((found = popType()) != expected) {\n+            throw new IllegalStateException(\n+                    String.format(\"Invalid type on binding operand stack; found %s - expected %s\",\n+                            found.descriptorString(), expected.descriptorString()));\n+        }\n+        return found;\n+    }\n+\n+    \/\/ specialization\n+\n@@ -262,1 +284,1 @@\n-                    typeStack.push(MemorySegment.class);\n+                    pushType(MemorySegment.class);\n@@ -275,1 +297,1 @@\n-                    assert typeStack.pop() == MemorySegment.class;\n+                    popType(MemorySegment.class);\n@@ -309,1 +331,1 @@\n-                typeStack.push(leafType.returnType());\n+                pushType(leafType.returnType());\n@@ -328,1 +350,1 @@\n-                assert typeStack.pop() == callerMethodType.returnType();\n+                popType(callerMethodType.returnType());\n@@ -384,1 +406,1 @@\n-        typeStack.push(highLevelType);\n+        pushType(highLevelType);\n@@ -396,1 +418,1 @@\n-        typeStack.push(loadType);\n+        pushType(loadType);\n@@ -429,1 +451,1 @@\n-        assert typeStack.pop() == MemoryAddress.class;\n+        popType(MemoryAddress.class);\n@@ -437,1 +459,1 @@\n-        typeStack.push(MemorySegment.class);\n+        pushType(MemorySegment.class);\n@@ -445,1 +467,1 @@\n-        assert typeStack.pop() == long.class;\n+        popType(long.class);\n@@ -447,1 +469,1 @@\n-        typeStack.push(MemoryAddress.class);\n+        pushType(MemoryAddress.class);\n@@ -458,1 +480,1 @@\n-        typeStack.push(MemorySegment.class);\n+        pushType(MemorySegment.class);\n@@ -465,2 +487,2 @@\n-        assert typeStack.pop() == storeType;\n-        assert typeStack.pop() == MemorySegment.class;\n+        popType(storeType);\n+        popType(MemorySegment.class);\n@@ -482,1 +504,1 @@\n-        assert typeStack.pop() == storeType;\n+        popType(storeType);\n@@ -523,1 +545,1 @@\n-                typeStack.push(loadType);\n+                pushType(loadType);\n@@ -533,1 +555,1 @@\n-        typeStack.push(dupType);\n+        pushType(dupType);\n@@ -537,1 +559,2 @@\n-        assert Addressable.class.isAssignableFrom(typeStack.pop());\n+        Class<?> stackType = popType();\n+        assert Addressable.class.isAssignableFrom(stackType);\n@@ -540,1 +563,1 @@\n-        typeStack.push(long.class);\n+        pushType(long.class);\n@@ -547,1 +570,1 @@\n-        assert typeStack.pop() == MemorySegment.class;\n+        popType(MemorySegment.class);\n@@ -553,1 +576,1 @@\n-        typeStack.push(loadType);\n+        pushType(loadType);\n@@ -560,1 +583,1 @@\n-        assert typeStack.pop() == MemorySegment.class;\n+        popType(MemorySegment.class);\n@@ -578,1 +601,1 @@\n-        typeStack.push(MemorySegment.class);\n+        pushType(MemorySegment.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":45,"deletions":22,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-                interpType.dropParameterTypes(0, 1);\n+                interpType = interpType.dropParameterTypes(0, 1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n- * @run testng\/othervm\/native\/manual\/timeout=960\n+ * @run testng\/othervm\/native\/manual\n@@ -169,1 +169,1 @@\n- * @run testng\/othervm\/native\/manual\/timeout=960\n+ * @run testng\/othervm\/native\/manual\n@@ -181,1 +181,1 @@\n- * @run testng\/othervm\/native\/manual\/timeout=960\n+ * @run testng\/othervm\/native\/manual\n@@ -193,1 +193,1 @@\n- * @run testng\/othervm\/native\/manual\/timeout=960\n+ * @run testng\/othervm\/native\/manual\n","filename":"test\/jdk\/java\/foreign\/TestMatrix.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}