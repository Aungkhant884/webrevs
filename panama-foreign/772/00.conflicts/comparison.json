{"files":[{"patch":"@@ -36,0 +36,1 @@\n+<<<<<<< HEAD\n@@ -37,0 +38,3 @@\n+=======\n+    WIN_AARCH_64;\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n@@ -58,0 +62,2 @@\n+            } else if (OS.startsWith(\"Windows\")) {\n+                ABI = WIN_AARCH_64;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+<<<<<<< HEAD\n@@ -63,0 +64,4 @@\n+=======\n+                case SYS_V, LINUX_AARCH_64, MAC_OS_AARCH_64 -> libLookup(libs -> libs.load(jdkLibraryPath(\"syslookup\")));\n+                case WIN_64, WIN_AARCH_64 -> makeWindowsLookup(); \/\/ out of line to workaround javac crash\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n@@ -122,0 +127,1 @@\n+<<<<<<< HEAD\n@@ -124,0 +130,4 @@\n+=======\n+            case SYS_V, LINUX_AARCH_64, MAC_OS_AARCH_64 -> \"lib\";\n+            case WIN_64, WIN_AARCH_64 -> \"bin\";\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+<<<<<<< HEAD\n@@ -31,0 +32,3 @@\n+=======\n+import jdk.internal.foreign.abi.aarch64.windows.WindowsAArch64Linker;\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n@@ -47,0 +51,1 @@\n+<<<<<<< HEAD\n@@ -48,0 +53,3 @@\n+=======\n+                                                                      SysVx64Linker, WindowsAArch64Linker, Windowsx64Linker {\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+<<<<<<< HEAD\n@@ -34,0 +35,3 @@\n+=======\n+import jdk.internal.foreign.abi.aarch64.windows.WindowsAArch64Linker;\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n@@ -45,1 +49,0 @@\n-import java.lang.foreign.VaList;\n@@ -160,0 +163,4 @@\n+        return primitiveLayoutForSize(size, useFloat).carrier();\n+    }\n+\n+    public static ValueLayout primitiveLayoutForSize(long size, boolean useFloat) {\n@@ -162,1 +169,1 @@\n-                return float.class;\n+                return JAVA_FLOAT;\n@@ -164,1 +171,1 @@\n-                return double.class;\n+                return JAVA_DOUBLE;\n@@ -168,1 +175,1 @@\n-                return byte.class;\n+                return JAVA_BYTE;\n@@ -170,1 +177,1 @@\n-                return short.class;\n+                return JAVA_SHORT;\n@@ -172,1 +179,1 @@\n-                return int.class;\n+                return JAVA_INT;\n@@ -174,1 +181,1 @@\n-                return long.class;\n+                return JAVA_LONG;\n@@ -178,1 +185,1 @@\n-        throw new IllegalArgumentException(\"No type for size: \" + size + \" isFloat=\" + useFloat);\n+        throw new IllegalArgumentException(\"No layout for size: \" + size + \" isFloat=\" + useFloat);\n@@ -187,0 +194,1 @@\n+<<<<<<< HEAD\n@@ -188,0 +196,3 @@\n+=======\n+            case WIN_AARCH_64 -> WindowsAArch64Linker.getInstance();\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n@@ -293,0 +304,1 @@\n+<<<<<<< HEAD\n@@ -323,0 +335,2 @@\n+=======\n+>>>>>>> 477cc26fe153b406c5b7477dec08a6ecb3d93a0f\n@@ -330,4 +344,0 @@\n-    public static NoSuchElementException newVaListNSEE(MemoryLayout layout) {\n-        return new NoSuchElementException(\"No such element: \" + layout);\n-    }\n-\n@@ -348,53 +358,0 @@\n-    public static final class EmptyVaList implements VaList {\n-\n-        private final MemorySegment address;\n-\n-        public EmptyVaList(MemorySegment address) {\n-            this.address = address;\n-        }\n-\n-        private static UnsupportedOperationException uoe() {\n-            return new UnsupportedOperationException(\"Empty VaList\");\n-        }\n-\n-        @Override\n-        public int nextVarg(ValueLayout.OfInt layout) {\n-            throw uoe();\n-        }\n-\n-        @Override\n-        public long nextVarg(ValueLayout.OfLong layout) {\n-            throw uoe();\n-        }\n-\n-        @Override\n-        public double nextVarg(ValueLayout.OfDouble layout) {\n-            throw uoe();\n-        }\n-\n-        @Override\n-        public MemorySegment nextVarg(ValueLayout.OfAddress layout) {\n-            throw uoe();\n-        }\n-\n-        @Override\n-        public MemorySegment nextVarg(GroupLayout layout, SegmentAllocator allocator) {\n-            throw uoe();\n-        }\n-\n-        @Override\n-        public void skip(MemoryLayout... layouts) {\n-            throw uoe();\n-        }\n-\n-        @Override\n-        public VaList copy() {\n-            return this;\n-        }\n-\n-        @Override\n-        public MemorySegment segment() {\n-            return address;\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":23,"deletions":66,"binary":false,"changes":89,"status":"modified"}]}