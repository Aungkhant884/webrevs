{"files":[{"patch":"@@ -776,0 +776,1 @@\n+    \/\/ This flag is lazily initialized in LauncherHelper after this class is initialized (hence mutable)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -601,8 +601,3 @@\n-            if (\"true\".equalsIgnoreCase(enableNativeAccess) || \"false\".equalsIgnoreCase(enableNativeAccess)) {\n-                \/\/ values besides true\/false are ignored\n-                \/\/ if the value is false, we emit an error when any code tries to access a restricted method,\n-                \/\/ whereas with the flag not set we just emit a warning.\n-                boolean value = Boolean.parseBoolean(enableNativeAccess);\n-                ModuleBootstrap.setEnableNativeAccessSetInManifest();\n-                if (value) {\n-                   Modules.addEnableNativeAccessToAllUnnamed();\n+            if (enableNativeAccess != null) {\n+                if (!enableNativeAccess.equals(\"ALL-UNNAMED\")) {\n+                    throw new IllegalArgumentException(\"Only ALL-UNNAMED allowed as value for \" + ENABLE_NATIVE_ACCESS);\n@@ -610,0 +605,2 @@\n+                ModuleBootstrap.setEnableNativeAccessSetInManifest();\n+                Modules.addEnableNativeAccessToAllUnnamed();\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import java.util.stream.Collectors;\n@@ -98,6 +97,2 @@\n-            { \"panama_unnamed_module_native_access_asdf\", UNNAMED, successWithWarning(\"ALL-UNNAMED\"),\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"asdf\")), List.of() },\n-            { \"panama_unnamed_module_native_access_true\", UNNAMED, successNoWarning(),\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"true\")), List.of() },\n-            { \"panama_unnamed_module_native_access_True\", UNNAMED, successNoWarning(),\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"True\")), List.of() },\n+            { \"panama_unnamed_module_native_access\", UNNAMED, successNoWarning(),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")), List.of() },\n@@ -105,2 +100,2 @@\n-            { \"panama_no_unnamed_module_native_access_false\", UNNAMED, failWithError(\"Illegal native access from: unnamed module\"),\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of() },\n+            { \"panama_unnamed_module_native_access_invalid\", UNNAMED, failWithError(\"Only ALL-UNNAMED allowed as value for Enable-Native-Access\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"asdf\")), List.of() },\n@@ -108,1 +103,1 @@\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_MAIN_CLS) },\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")), List.of(PANAMA_MAIN_CLS) },\n@@ -110,1 +105,1 @@\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_REFLECTION_CLS) },\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")), List.of(PANAMA_REFLECTION_CLS) },\n@@ -112,3 +107,1 @@\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_INVOKE_CLS) },\n-            { \"panama_enable_native_access_jni_false\", REINVOKER, failWithError(\"Illegal native access from: unnamed module\"),\n-                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_JNI_CLS) },\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")), List.of(PANAMA_INVOKE_CLS) }\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessJarManifest.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"}]}