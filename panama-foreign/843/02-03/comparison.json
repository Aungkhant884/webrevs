{"files":[{"patch":"@@ -776,0 +776,5 @@\n+    private static boolean ENABLE_NATIVE_ACCESS_SET_IN_MANIFEST = false;\n+\n+    public static void setEnableNativeAccessSetInManifest() {\n+        ENABLE_NATIVE_ACCESS_SET_IN_MANIFEST = true;\n+    }\n@@ -778,1 +783,1 @@\n-        return HAS_ENABLE_NATIVE_ACCESS_FLAG;\n+        return HAS_ENABLE_NATIVE_ACCESS_FLAG || ENABLE_NATIVE_ACCESS_SET_IN_MANIFEST;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -600,2 +600,10 @@\n-            if (Boolean.parseBoolean(mainAttrs.getValue(ENABLE_NATIVE_ACCESS))) {\n-                Modules.addEnableNativeAccessToAllUnnamed();\n+            String enableNativeAccess = mainAttrs.getValue(ENABLE_NATIVE_ACCESS);\n+            if (\"true\".equalsIgnoreCase(enableNativeAccess) || \"false\".equalsIgnoreCase(enableNativeAccess)) {\n+                \/\/ values besides true\/false are ignored\n+                \/\/ if the value is false, we emit an error when any code tries to access a restricted method,\n+                \/\/ whereas with the flag not set we just emit a warning.\n+                boolean value = Boolean.parseBoolean(enableNativeAccess);\n+                ModuleBootstrap.setEnableNativeAccessSetInManifest();\n+                if (value) {\n+                   Modules.addEnableNativeAccessToAllUnnamed();\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *        org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ *        org.openjdk.foreigntest.unnamed.PanamaMainUnnamedModule\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,5 +35,10 @@\n-    static final String PANAMA_MAIN = \"panama_module\/org.openjdk.foreigntest.PanamaMainDirect\";\n-    static final String PANAMA_REFLECTION = \"panama_module\/org.openjdk.foreigntest.PanamaMainReflection\";\n-    static final String PANAMA_INVOKE = \"panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\";\n-    static final String PANAMA_JNI = \"panama_module\/org.openjdk.foreigntest.PanamaMainJNI\";\n-    static final String UNNAMED = \"org.openjdk.foreigntest.PanamaMainUnnamedModule\";\n+    static final String PANAMA_MAIN_CLS = \"org.openjdk.foreigntest.PanamaMainDirect\";\n+    static final String PANAMA_MAIN = \"panama_module\/\" + PANAMA_MAIN_CLS;\n+    static final String PANAMA_REFLECTION_CLS = \"org.openjdk.foreigntest.PanamaMainReflection\";\n+    static final String PANAMA_REFLECTION = \"panama_module\/\" + PANAMA_REFLECTION_CLS;\n+    static final String PANAMA_INVOKE_CLS = \"org.openjdk.foreigntest.PanamaMainInvoke\";\n+    static final String PANAMA_INVOKE = \"panama_module\/\" + PANAMA_INVOKE_CLS;\n+    static final String PANAMA_JNI_CLS = \"org.openjdk.foreigntest.PanamaMainJNI\";\n+    static final String PANAMA_JNI = \"panama_module\/\" + PANAMA_JNI_CLS;\n+    static final String UNNAMED = \"org.openjdk.foreigntest.unnamed.PanamaMainUnnamedModule\";\n+    static final String REINVOKER = \"TestEnableNativeAccessJarManifest$Reinvoker\";\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessBase.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,2 +33,3 @@\n- * @build TestEnableNativeAccess\n- *        org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ * @build TestEnableNativeAccessJarManifest\n+ *        panama_module\/*\n+ *        org.openjdk.foreigntest.unnamed.PanamaMainUnnamedModule\n@@ -42,0 +43,2 @@\n+import java.util.ArrayList;\n+import java.util.stream.Collectors;\n@@ -56,2 +59,3 @@\n-    @Test(dataProvider = \"succeedCases\")\n-    public void testSucceed(String action, Result expectedResult, List<Attribute> attributes) throws Exception {\n+    @Test(dataProvider = \"cases\")\n+    public void testEnableNativeAccessInJarManifest(String action, String cls, Result expectedResult,\n+                                                    List<Attribute> attributes, List<String> programArgs) throws Exception {\n@@ -61,1 +65,1 @@\n-        attrs.put(Attributes.Name.MAIN_CLASS, UNNAMED);\n+        attrs.put(Attributes.Name.MAIN_CLASS, cls);\n@@ -72,1 +76,1 @@\n-        JarUtils.createJarFile(jarfile, man, classes, Paths.get(UNNAMED.replace('.', '\/') + \".class\"));\n+        JarUtils.createJarFile(jarfile, man, classes, Paths.get(cls.replace('.', '\/') + \".class\"));\n@@ -75,4 +79,9 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n-                    \"--enable-preview\",\n-                    \"-Djava.library.path=\" + System.getProperty(\"java.library.path\"),\n-                    \"-jar\", jarfile.toString())\n+        List<String> command = new ArrayList<>(List.of(\n+            \"--enable-preview\",\n+            \"-Djava.library.path=\" + System.getProperty(\"java.library.path\"),\n+            \"-p\", MODULE_PATH,\n+            \"--add-modules\", \"panama_module\",\n+            \"-jar\", jarfile.toString()\n+        ));\n+        command.addAll(programArgs);\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(command.toArray(String[]::new))\n@@ -85,1 +94,1 @@\n-    public Object[][] succeedCases() {\n+    public Object[][] cases() {\n@@ -87,5 +96,19 @@\n-            { \"panama_no_unnamed_module_native_access\", successWithWarning(\"ALL-UNNAMED\"), List.of() },\n-            { \"panama_unnamed_module_native_access_false\", successWithWarning(\"ALL-UNNAMED\"), List.of(new Attribute(\"Enable-Native-Access\", \"false\")) },\n-            { \"panama_unnamed_module_native_access_asdf\", successWithWarning(\"ALL-UNNAMED\"), List.of(new Attribute(\"Enable-Native-Access\", \"asdf\")) },\n-            { \"panama_unnamed_module_native_access_true\", successNoWarning(), List.of(new Attribute(\"Enable-Native-Access\", \"true\")) },\n-            { \"panama_unnamed_module_native_access_True\", successNoWarning(), List.of(new Attribute(\"Enable-Native-Access\", \"True\")) },\n+            { \"panama_no_unnamed_module_native_access\", UNNAMED, successWithWarning(\"ALL-UNNAMED\"),\n+                    List.of(), List.of() },\n+            { \"panama_unnamed_module_native_access_asdf\", UNNAMED, successWithWarning(\"ALL-UNNAMED\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"asdf\")), List.of() },\n+            { \"panama_unnamed_module_native_access_true\", UNNAMED, successNoWarning(),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"true\")), List.of() },\n+            { \"panama_unnamed_module_native_access_True\", UNNAMED, successNoWarning(),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"True\")), List.of() },\n+\n+            { \"panama_no_unnamed_module_native_access_false\", UNNAMED, failWithError(\"Illegal native access from: unnamed module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of() },\n+            { \"panama_enable_native_access_false\", REINVOKER, failWithError(\"Illegal native access from: module panama_module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_MAIN_CLS) },\n+            { \"panama_enable_native_access_reflection_false\", REINVOKER, failWithError(\"Illegal native access from: module panama_module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_REFLECTION_CLS) },\n+            { \"panama_enable_native_access_invoke_false\", REINVOKER, failWithError(\"Illegal native access from: module panama_module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_INVOKE_CLS) },\n+            { \"panama_enable_native_access_jni_false\", REINVOKER, failWithError(\"Illegal native access from: unnamed module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"false\")), List.of(PANAMA_JNI_CLS) },\n@@ -94,0 +117,8 @@\n+\n+    public class Reinvoker {\n+\n+        public static void main(String[] args) throws Throwable {\n+            Class<?> realMainClass = Class.forName(args[0]);\n+            realMainClass.getMethod(\"main\", String[].class).invoke(null, (Object) new String[0]);\n+        }\n+    }\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessJarManifest.java","additions":47,"deletions":16,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-package org.openjdk.foreigntest;\n+package org.openjdk.foreigntest.unnamed;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/unnamed\/PanamaMainUnnamedModule.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-    Java_org_openjdk_foreigntest_PanamaMainUnnamedModule_nativeLinker0(JNIEnv *env, jclass cls) {\n+    Java_org_openjdk_foreigntest_unnamed_PanamaMainUnnamedModule_nativeLinker0(JNIEnv *env, jclass cls) {\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/unnamed\/libLinkerInvokerUnnamed.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/libLinkerInvokerUnnamed.cpp","status":"renamed"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.foreigntest;\n-\n-import java.lang.foreign.*;\n-\n-public class PanamaMain {\n-   public static void main(String[] args) {\n-       System.out.println(\"Trying to obtain a downcall handle\");\n-       Linker.nativeLinker().downcallHandle(FunctionDescriptor.ofVoid());\n-       System.out.println(\"Got downcall handle\");\n-   }\n-}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMain.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -33,0 +33,1 @@\n+   jthrowable exception;\n@@ -43,0 +44,2 @@\n+    context->exception = (jthrowable) env->NewGlobalRef(env->ExceptionOccurred());\n+    env->ExceptionClear();\n@@ -55,0 +58,3 @@\n+        if (context.exception != nullptr) {\n+            env->Throw(context.exception); \/\/ transfer exception to this thread\n+        }\n@@ -58,0 +64,1 @@\n+        env->DeleteGlobalRef(context.exception);\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/libLinkerInvokerModule.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}