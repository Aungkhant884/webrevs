{"files":[{"patch":"@@ -600,2 +600,1 @@\n-            String enablesNativeAccess = mainAttrs.getValue(ENABLE_NATIVE_ACCESS);\n-            if (\"true\".equals(enablesNativeAccess)) {\n+            if (Boolean.parseBoolean(mainAttrs.getValue(ENABLE_NATIVE_ACCESS))) {\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n- * @enablePreview\n+ * @summary Basic test for Enable-Native-Access attribute in the\n+ *          manifest of a main application JAR\n+ * @library \/test\/lib\n@@ -30,1 +32,1 @@\n- * @library \/test\/lib\n+ * @enablePreview\n@@ -34,2 +36,0 @@\n- * @summary Basic test for Enable-Native-Access attribute in the\n- *          manifest of a main application JAR\n@@ -49,0 +49,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -52,0 +53,2 @@\n+    static record Attribute(String name, String value) {}\n+\n@@ -57,1 +60,1 @@\n-    OutputAnalyzer run(String action, String cls, Result expectedResult, String... attributes) throws Exception {\n+    OutputAnalyzer run(String action, Result expectedResult, Attribute... attributes) throws Exception {\n@@ -61,1 +64,1 @@\n-        attrs.put(Attributes.Name.MAIN_CLASS, cls);\n+        attrs.put(Attributes.Name.MAIN_CLASS, UNNAMED);\n@@ -63,7 +66,2 @@\n-        for (String nameAndValue : attributes) {\n-            String[] s = nameAndValue.split(\"=\");\n-            if (s.length != 2)\n-                throw new RuntimeException(\"Malformed: \" + nameAndValue);\n-            String name = s[0];\n-            String value = s[1];\n-            attrs.put(new Attributes.Name(name), value);\n+        for (Attribute attrib : attributes) {\n+            attrs.put(new Attributes.Name(attrib.name()), attrib.value());\n@@ -77,1 +75,1 @@\n-        JarUtils.createJarFile(jarfile, man, classes, Paths.get(cls.replace('.', '\/') + \".class\"));\n+        JarUtils.createJarFile(jarfile, man, classes, Paths.get(UNNAMED.replace('.', '\/') + \".class\"));\n@@ -92,4 +90,12 @@\n-        run(\"panama_no_unnamed_module_native_access\", UNNAMED, successWithWarning(\"ALL-UNNAMED\"), new String[]{});\n-        run(\"panama_unnamed_module_native_access_false\", UNNAMED, successWithWarning(\"ALL-UNNAMED\"), new String[]{\"Enable-Native-Access=false\"});\n-        run(\"panama_unnamed_module_native_access_asdf\", UNNAMED, successWithWarning(\"ALL-UNNAMED\"), new String[]{\"Enable-Native-Access=asdf\"});\n-        run(\"panama_unnamed_module_native_access_true\", UNNAMED, successNoWarning(), new String[]{\"Enable-Native-Access=true\"});\n+\n+    }\n+\n+    @DataProvider\n+    public Object[][] succeedCases() {\n+        return new Object[][] {\n+            { \"panama_no_unnamed_module_native_access\", successWithWarning(\"ALL-UNNAMED\") },\n+            { \"panama_unnamed_module_native_access_false\", successWithWarning(\"ALL-UNNAMED\"), new Attribute[] {new Attribute(\"Enable-Native-Access\", \"false\")} },\n+            { \"panama_unnamed_module_native_access_asdf\", successWithWarning(\"ALL-UNNAMED\"), new Attribute[] {new Attribute(\"Enable-Native-Access\", \"asdf\")} },\n+            { \"panama_unnamed_module_native_access_true\", successNoWarning(), new Attribute[] {new Attribute(\"Enable-Native-Access\", \"true\")} },\n+            { \"panama_unnamed_module_native_access_True\", successNoWarning(), new Attribute[] {new Attribute(\"Enable-Native-Access\", \"True\")} },\n+        };\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessJarManifest.java","additions":24,"deletions":18,"binary":false,"changes":42,"status":"modified"}]}