{"files":[{"patch":"@@ -718,1 +718,1 @@\n-                \/\/ JDK internal attributes\n+                \/\/ JDK specific attributes\n@@ -721,0 +721,1 @@\n+                addName(names, new Name(\"Enable-Native-Access\"));\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/Attributes.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -137,0 +137,7 @@\n+    \/**\n+     * Adds native access to all unnamed modules.\n+     *\/\n+    public static void addEnableNativeAccessToAllUnnamed() {\n+        JLA.addEnableNativeAccessToAllUnnamed();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/Modules.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -112,0 +112,1 @@\n+    private static final String ENABLE_NATIVE_ACCESS = \"Enable-Native-Access\";\n@@ -599,0 +600,7 @@\n+            String enableNativeAccess = mainAttrs.getValue(ENABLE_NATIVE_ACCESS);\n+            if (enableNativeAccess != null) {\n+                if (!enableNativeAccess.equals(\"ALL-UNNAMED\")) {\n+                    throw new IllegalArgumentException(\"Only ALL-UNNAMED allowed as value for \" + ENABLE_NATIVE_ACCESS);\n+                }\n+                Modules.addEnableNativeAccessToAllUnnamed();\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *        org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ *        org.openjdk.foreigntest.unnamed.PanamaMainUnnamedModule\n@@ -38,1 +38,0 @@\n-import java.util.ArrayList;\n@@ -60,69 +59,1 @@\n-public class TestEnableNativeAccess {\n-\n-    static final String MODULE_PATH = System.getProperty(\"jdk.module.path\");\n-\n-    static final String PANAMA_MAIN = \"panama_module\/org.openjdk.foreigntest.PanamaMainDirect\";\n-    static final String PANAMA_REFLECTION = \"panama_module\/org.openjdk.foreigntest.PanamaMainReflection\";\n-    static final String PANAMA_INVOKE = \"panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\";\n-    static final String PANAMA_JNI = \"panama_module\/org.openjdk.foreigntest.PanamaMainJNI\";\n-    static final String UNNAMED = \"org.openjdk.foreigntest.PanamaMainUnnamedModule\";\n-\n-    \/**\n-     * Represents the expected result of a test.\n-     *\/\n-    static final class Result {\n-        private final boolean success;\n-        private final List<String> expectedOutput = new ArrayList<>();\n-        private final List<String> notExpectedOutput = new ArrayList<>();\n-\n-        Result(boolean success) {\n-            this.success = success;\n-        }\n-\n-        Result expect(String msg) {\n-            expectedOutput.add(msg);\n-            return this;\n-        }\n-\n-        Result doNotExpect(String msg) {\n-            notExpectedOutput.add(msg);\n-            return this;\n-        }\n-\n-        boolean shouldSucceed() {\n-            return success;\n-        }\n-\n-        Stream<String> expectedOutput() {\n-            return expectedOutput.stream();\n-        }\n-\n-        Stream<String> notExpectedOutput() {\n-            return notExpectedOutput.stream();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            String s = (success) ? \"success\" : \"failure\";\n-            for (String msg : expectedOutput) {\n-                s += \"\/\" + msg;\n-            }\n-            return s;\n-        }\n-    }\n-\n-    static Result success() {\n-        return new Result(true);\n-    }\n-\n-    static Result successNoWarning() {\n-        return success().doNotExpect(\"WARNING\");\n-    }\n-\n-    static Result successWithWarning(String moduleName) {\n-        return success().expect(\"WARNING\").expect(\"--enable-native-access=\" + moduleName);\n-    }\n-\n-    static Result failWithWarning(String expectedOutput) {\n-        return new Result(false).expect(expectedOutput).expect(\"WARNING\");\n-    }\n+public class TestEnableNativeAccess extends TestEnableNativeAccessBase {\n@@ -153,15 +84,0 @@\n-    \/**\n-     * Checks an expected result with the output captured by the given\n-     * OutputAnalyzer.\n-     *\/\n-    void checkResult(Result expectedResult, OutputAnalyzer outputAnalyzer) {\n-        expectedResult.expectedOutput().forEach(outputAnalyzer::shouldContain);\n-        expectedResult.notExpectedOutput().forEach(outputAnalyzer::shouldNotContain);\n-        int exitValue = outputAnalyzer.getExitValue();\n-        if (expectedResult.shouldSucceed()) {\n-            assertTrue(exitValue == 0);\n-        } else {\n-            assertTrue(exitValue != 0);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccess.java","additions":2,"deletions":86,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import static org.testng.Assert.*;\n+\n+public class TestEnableNativeAccessBase {\n+    static final String MODULE_PATH = System.getProperty(\"jdk.module.path\");\n+\n+    static final String PANAMA_MAIN_CLS = \"org.openjdk.foreigntest.PanamaMainDirect\";\n+    static final String PANAMA_MAIN = \"panama_module\/\" + PANAMA_MAIN_CLS;\n+    static final String PANAMA_REFLECTION_CLS = \"org.openjdk.foreigntest.PanamaMainReflection\";\n+    static final String PANAMA_REFLECTION = \"panama_module\/\" + PANAMA_REFLECTION_CLS;\n+    static final String PANAMA_INVOKE_CLS = \"org.openjdk.foreigntest.PanamaMainInvoke\";\n+    static final String PANAMA_INVOKE = \"panama_module\/\" + PANAMA_INVOKE_CLS;\n+    static final String PANAMA_JNI_CLS = \"org.openjdk.foreigntest.PanamaMainJNI\";\n+    static final String PANAMA_JNI = \"panama_module\/\" + PANAMA_JNI_CLS;\n+    static final String UNNAMED = \"org.openjdk.foreigntest.unnamed.PanamaMainUnnamedModule\";\n+    static final String REINVOKER = \"TestEnableNativeAccessJarManifest$Reinvoker\";\n+\n+    \/**\n+     * Represents the expected result of a test.\n+     *\/\n+    static final class Result {\n+        private final boolean success;\n+        private final List<String> expectedOutput = new ArrayList<>();\n+        private final List<String> notExpectedOutput = new ArrayList<>();\n+\n+        Result(boolean success) {\n+            this.success = success;\n+        }\n+\n+        Result expect(String msg) {\n+            expectedOutput.add(msg);\n+            return this;\n+        }\n+\n+        Result doNotExpect(String msg) {\n+            notExpectedOutput.add(msg);\n+            return this;\n+        }\n+\n+        boolean shouldSucceed() {\n+            return success;\n+        }\n+\n+        Stream<String> expectedOutput() {\n+            return expectedOutput.stream();\n+        }\n+\n+        Stream<String> notExpectedOutput() {\n+            return notExpectedOutput.stream();\n+        }\n+\n+        @Override\n+        public String toString() {\n+            String s = (success) ? \"success\" : \"failure\";\n+            for (String msg : expectedOutput) {\n+                s += \"\/\" + msg;\n+            }\n+            return s;\n+        }\n+\n+    }\n+\n+    static Result success() {\n+        return new Result(true);\n+    }\n+\n+    static Result successNoWarning() {\n+        return success().doNotExpect(\"WARNING\");\n+    }\n+\n+    static Result successWithWarning(String moduleName) {\n+        return success().expect(\"WARNING\").expect(\"--enable-native-access=\" + moduleName);\n+    }\n+\n+    static Result failWithWarning(String expectedOutput) {\n+        return new Result(false).expect(expectedOutput).expect(\"WARNING\");\n+    }\n+\n+    static Result failWithError(String expectedOutput) {\n+        return new Result(false).expect(expectedOutput);\n+    }\n+\n+    \/**\n+     * Checks an expected result with the output captured by the given\n+     * OutputAnalyzer.\n+     *\/\n+    void checkResult(Result expectedResult, OutputAnalyzer outputAnalyzer) {\n+        expectedResult.expectedOutput().forEach(outputAnalyzer::shouldContain);\n+        expectedResult.notExpectedOutput().forEach(outputAnalyzer::shouldNotContain);\n+        int exitValue = outputAnalyzer.getExitValue();\n+        if (expectedResult.shouldSucceed()) {\n+            assertTrue(exitValue == 0);\n+        } else {\n+            assertTrue(exitValue != 0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessBase.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -40,1 +40,0 @@\n-import java.util.stream.Stream;\n@@ -47,1 +46,0 @@\n-import static org.testng.Assert.*;\n@@ -50,64 +48,1 @@\n-public class TestEnableNativeAccessDynamic {\n-\n-    static final String MODULE_PATH = System.getProperty(\"jdk.module.path\");\n-\n-    static final String PANAMA_MAIN = \"panama_module\/org.openjdk.foreigntest.PanamaMainDirect\";\n-    static final String PANAMA_REFLECTION = \"panama_module\/org.openjdk.foreigntest.PanamaMainReflection\";\n-    static final String PANAMA_INVOKE = \"panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\";\n-    static final String PANAMA_JNI = \"panama_module\/org.openjdk.foreigntest.PanamaMainJNI\";\n-\n-    \/**\n-     * Represents the expected result of a test.\n-     *\/\n-    static final class Result {\n-        private final boolean success;\n-        private final List<String> expectedOutput = new ArrayList<>();\n-        private final List<String> notExpectedOutput = new ArrayList<>();\n-\n-        Result(boolean success) {\n-            this.success = success;\n-        }\n-\n-        Result expect(String msg) {\n-            expectedOutput.add(msg);\n-            return this;\n-        }\n-\n-        Result doNotExpect(String msg) {\n-            notExpectedOutput.add(msg);\n-            return this;\n-        }\n-\n-        boolean shouldSucceed() {\n-            return success;\n-        }\n-\n-        Stream<String> expectedOutput() {\n-            return expectedOutput.stream();\n-        }\n-\n-        Stream<String> notExpectedOutput() {\n-            return notExpectedOutput.stream();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            String s = (success) ? \"success\" : \"failure\";\n-            for (String msg : expectedOutput) {\n-                s += \"\/\" + msg;\n-            }\n-            return s;\n-        }\n-    }\n-\n-    static Result success() {\n-        return new Result(true);\n-    }\n-\n-    static Result successNoWarning() {\n-        return success().doNotExpect(\"WARNING\");\n-    }\n-\n-    static Result failWithError(String expectedOutput) {\n-        return new Result(false).expect(expectedOutput);\n-    }\n+public class TestEnableNativeAccessDynamic extends TestEnableNativeAccessBase {\n@@ -134,15 +69,0 @@\n-    \/**\n-     * Checks an expected result with the output captured by the given\n-     * OutputAnalyzer.\n-     *\/\n-    void checkResult(Result expectedResult, OutputAnalyzer outputAnalyzer) {\n-        expectedResult.expectedOutput().forEach(outputAnalyzer::shouldContain);\n-        expectedResult.notExpectedOutput().forEach(outputAnalyzer::shouldNotContain);\n-        int exitValue = outputAnalyzer.getExitValue();\n-        if (expectedResult.shouldSucceed()) {\n-            assertTrue(exitValue == 0);\n-        } else {\n-            assertTrue(exitValue != 0);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessDynamic.java","additions":1,"deletions":81,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Basic test for Enable-Native-Access attribute in the\n+ *          manifest of a main application JAR\n+ * @library \/test\/lib\n+ * @requires jdk.foreign.linker != \"UNSUPPORTED\"\n+ * @requires !vm.musl\n+ *\n+ * @enablePreview\n+ * @build TestEnableNativeAccessJarManifest\n+ *        panama_module\/*\n+ *        org.openjdk.foreigntest.unnamed.PanamaMainUnnamedModule\n+ * @run testng TestEnableNativeAccessJarManifest\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.jar.Attributes;\n+import java.util.jar.Manifest;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarUtils;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+public class TestEnableNativeAccessJarManifest extends TestEnableNativeAccessBase {\n+\n+    static record Attribute(String name, String value) {}\n+\n+    @Test(dataProvider = \"cases\")\n+    public void testEnableNativeAccessInJarManifest(String action, String cls, Result expectedResult,\n+                                                    List<Attribute> attributes, List<String> vmArgs, List<String> programArgs) throws Exception {\n+        Manifest man = new Manifest();\n+        Attributes attrs = man.getMainAttributes();\n+        attrs.put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n+        attrs.put(Attributes.Name.MAIN_CLASS, cls);\n+\n+        for (Attribute attrib : attributes) {\n+            attrs.put(new Attributes.Name(attrib.name()), attrib.value());\n+        }\n+\n+        \/\/ create the JAR file with Test1 and Test2\n+        Path jarfile = Paths.get(action + \".jar\");\n+        Files.deleteIfExists(jarfile);\n+\n+        Path classes = Paths.get(System.getProperty(\"test.classes\", \"\"));\n+        JarUtils.createJarFile(jarfile, man, classes, Paths.get(cls.replace('.', '\/') + \".class\"));\n+\n+        \/\/ java -jar test.jar\n+        List<String> command = new ArrayList<>(List.of(\n+            \"--enable-preview\",\n+            \"-Djava.library.path=\" + System.getProperty(\"java.library.path\")\n+        ));\n+        command.addAll(vmArgs);\n+        command.add(\"-jar\");\n+        command.add(jarfile.toString());\n+        command.addAll(programArgs);\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(command.toArray(String[]::new))\n+                .outputTo(System.out)\n+                .errorTo(System.out);\n+        checkResult(expectedResult, outputAnalyzer);\n+    }\n+\n+    @DataProvider\n+    public Object[][] cases() {\n+        return new Object[][] {\n+            \/\/ simple cases where a jar contains a single main class with no dependencies\n+            { \"panama_no_unnamed_module_native_access\", UNNAMED, successWithWarning(\"ALL-UNNAMED\"),\n+                    List.of(), List.of(), List.of() },\n+            { \"panama_unnamed_module_native_access\", UNNAMED, successNoWarning(),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")), List.of(), List.of() },\n+            { \"panama_unnamed_module_native_access_invalid\", UNNAMED, failWithError(\"Only ALL-UNNAMED allowed as value for Enable-Native-Access\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"asdf\")), List.of(), List.of() },\n+\n+            \/\/ more complex cases where a jar invokes a module on the module path that does native access\n+            { \"panama_enable_native_access_false\", REINVOKER, successWithWarning(\"panama_module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")),\n+                    List.of(\"-p\", MODULE_PATH, \"--add-modules=panama_module\"),\n+                    List.of(PANAMA_MAIN_CLS) },\n+            { \"panama_enable_native_access_reflection_false\", REINVOKER, successWithWarning(\"panama_module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")),\n+                    List.of(\"-p\", MODULE_PATH, \"--add-modules=panama_module\"),\n+                    List.of(PANAMA_REFLECTION_CLS) },\n+            { \"panama_enable_native_access_invoke_false\", REINVOKER, successWithWarning(\"panama_module\"),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")),\n+                    List.of(\"-p\", MODULE_PATH, \"--add-modules=panama_module\"),\n+                    List.of(PANAMA_INVOKE_CLS) },\n+\n+            { \"panama_enable_native_access_true\", REINVOKER, successNoWarning(),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")),\n+                    List.of(\"-p\", MODULE_PATH, \"--add-modules=panama_module\", \"--enable-native-access=panama_module\"),\n+                    List.of(PANAMA_MAIN_CLS) },\n+            { \"panama_enable_native_access_reflection_true\", REINVOKER, successNoWarning(),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")),\n+                    List.of(\"-p\", MODULE_PATH, \"--add-modules=panama_module\", \"--enable-native-access=panama_module\"),\n+                    List.of(PANAMA_REFLECTION_CLS) },\n+            { \"panama_enable_native_access_invoke_true\", REINVOKER, successNoWarning(),\n+                    List.of(new Attribute(\"Enable-Native-Access\", \"ALL-UNNAMED\")),\n+                    List.of(\"-p\", MODULE_PATH, \"--add-modules=panama_module\", \"--enable-native-access=panama_module\"),\n+                    List.of(PANAMA_INVOKE_CLS) }\n+        };\n+    }\n+\n+    public class Reinvoker {\n+        public static void main(String[] args) throws Throwable {\n+            Class<?> realMainClass = Class.forName(args[0]);\n+            realMainClass.getMethod(\"main\", String[].class).invoke(null, (Object) new String[0]);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessJarManifest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package org.openjdk.foreigntest;\n+package org.openjdk.foreigntest.unnamed;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/unnamed\/PanamaMainUnnamedModule.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-    Java_org_openjdk_foreigntest_PanamaMainUnnamedModule_nativeLinker0(JNIEnv *env, jclass cls) {\n+    Java_org_openjdk_foreigntest_unnamed_PanamaMainUnnamedModule_nativeLinker0(JNIEnv *env, jclass cls) {\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/unnamed\/libLinkerInvokerUnnamed.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/libLinkerInvokerUnnamed.cpp","status":"renamed"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.foreigntest;\n-\n-import java.lang.foreign.*;\n-\n-public class PanamaMain {\n-   public static void main(String[] args) {\n-       System.out.println(\"Trying to obtain a downcall handle\");\n-       Linker.nativeLinker().downcallHandle(FunctionDescriptor.ofVoid());\n-       System.out.println(\"Got downcall handle\");\n-   }\n-}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMain.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -33,0 +33,1 @@\n+   jthrowable exception;\n@@ -43,0 +44,2 @@\n+    context->exception = (jthrowable) env->NewGlobalRef(env->ExceptionOccurred());\n+    env->ExceptionClear();\n@@ -55,0 +58,3 @@\n+        if (context.exception != nullptr) {\n+            env->Throw(context.exception); \/\/ transfer exception to this thread\n+        }\n@@ -58,0 +64,1 @@\n+        env->DeleteGlobalRef(context.exception);\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/libLinkerInvokerModule.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}