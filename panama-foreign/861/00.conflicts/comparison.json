{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -31,0 +30,1 @@\n+import java.nio.charset.Charset;\n@@ -36,2 +36,2 @@\n-import jdk.internal.foreign.Utils;\n-import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.foreign.StringSupport;\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -73,1 +73,1 @@\n- * @since 19\n+ * @since 22\n@@ -76,1 +76,0 @@\n-@PreviewFeature(feature=PreviewFeature.Feature.FOREIGN)\n@@ -80,0 +79,1 @@\n+<<<<<<< HEAD\n@@ -81,0 +81,22 @@\n+=======\n+     * Converts a Java string into a null-terminated C string using the {@linkplain StandardCharsets#UTF_8 UTF-8} charset,\n+     * storing the result into a memory segment.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n+     * <p>\n+     * Calling this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * allocateFrom(str, StandardCharsets.UTF_8);\n+     *}\n+     *\n+     * @param str the Java string to be converted into a C string.\n+     * @return a new native segment containing the converted C string.\n+     *\/\n+    @ForceInline\n+    default MemorySegment allocateFrom(String str) {\n+        Objects.requireNonNull(str);\n+        return allocateFrom(str, StandardCharsets.UTF_8);\n+    }\n+\n+    \/**\n+     * Converts a Java string into a null-terminated C string using the provided charset,\n+     * and storing the result into a memory segment.\n@@ -89,1 +111,1 @@\n-     * the string, such as {@link MemorySegment#getUtf8String(long)}, the string\n+     * the string, such as {@link MemorySegment#getString(long)}, the string\n@@ -92,0 +114,1 @@\n+<<<<<<< HEAD\n@@ -95,0 +118,14 @@\n+=======\n+     * @param str     the Java string to be converted into a C string.\n+     * @param charset the charset used to {@linkplain Charset#newEncoder() encode} the string bytes.\n+     * @return a new native segment containing the converted C string.\n+     * @throws UnsupportedOperationException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n+     * @implSpec the default implementation for this method copies the contents of the provided Java string\n+     * into a new memory segment obtained by calling {@code this.allocate(B + N)}, where:\n+     * <ul>\n+     *     <li>{@code B} is the size, in bytes, of the string encoded using the provided charset\n+     *     (e.g. {@code str.getBytes(charset).length});<\/li>\n+     *     <li>{@code N} is the size (in bytes) of the terminator char according to the provided charset. For instance,\n+     *     this is 1 for {@link StandardCharsets#US_ASCII} and 2 for {@link StandardCharsets#UTF_16}.<\/li>\n+     * <\/ul>\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -96,1 +133,3 @@\n-    default MemorySegment allocateUtf8String(String str) {\n+    @ForceInline\n+    default MemorySegment allocateFrom(String str, Charset charset) {\n+        Objects.requireNonNull(charset);\n@@ -98,1 +137,5 @@\n-        return Utils.toCString(str.getBytes(StandardCharsets.UTF_8), this);\n+        int termCharSize = StringSupport.CharsetKind.of(charset).terminatorCharSize();\n+        byte[] bytes = str.getBytes(charset);\n+        MemorySegment segment = allocate(bytes.length + termCharSize);\n+        MemorySegment.copy(bytes, 0, segment, ValueLayout.JAVA_BYTE, 0, bytes.length);\n+        return segment;\n@@ -115,1 +158,1 @@\n-    default MemorySegment allocate(ValueLayout.OfByte layout, byte value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfByte layout, byte value) {\n@@ -117,0 +160,1 @@\n+<<<<<<< HEAD\n@@ -121,0 +165,5 @@\n+=======\n+        MemorySegment addr = allocate(layout);\n+        addr.set(layout, 0, value);\n+        return addr;\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -137,1 +186,1 @@\n-    default MemorySegment allocate(ValueLayout.OfChar layout, char value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfChar layout, char value) {\n@@ -139,0 +188,1 @@\n+<<<<<<< HEAD\n@@ -143,0 +193,5 @@\n+=======\n+        MemorySegment addr = allocate(layout);\n+        addr.set(layout, 0, value);\n+        return addr;\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -159,1 +214,1 @@\n-    default MemorySegment allocate(ValueLayout.OfShort layout, short value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfShort layout, short value) {\n@@ -161,0 +216,1 @@\n+<<<<<<< HEAD\n@@ -165,0 +221,5 @@\n+=======\n+        MemorySegment addr = allocate(layout);\n+        addr.set(layout, 0, value);\n+        return addr;\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -181,1 +242,1 @@\n-    default MemorySegment allocate(ValueLayout.OfInt layout, int value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfInt layout, int value) {\n@@ -183,0 +244,1 @@\n+<<<<<<< HEAD\n@@ -187,0 +249,5 @@\n+=======\n+        MemorySegment addr = allocate(layout);\n+        addr.set(layout, 0, value);\n+        return addr;\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -203,1 +270,1 @@\n-    default MemorySegment allocate(ValueLayout.OfFloat layout, float value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfFloat layout, float value) {\n@@ -205,0 +272,1 @@\n+<<<<<<< HEAD\n@@ -209,0 +277,5 @@\n+=======\n+        MemorySegment addr = allocate(layout);\n+        addr.set(layout, 0, value);\n+        return addr;\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -225,1 +298,1 @@\n-    default MemorySegment allocate(ValueLayout.OfLong layout, long value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfLong layout, long value) {\n@@ -227,0 +300,1 @@\n+<<<<<<< HEAD\n@@ -231,0 +305,5 @@\n+=======\n+        MemorySegment addr = allocate(layout);\n+        addr.set(layout, 0, value);\n+        return addr;\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -247,1 +326,1 @@\n-    default MemorySegment allocate(ValueLayout.OfDouble layout, double value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfDouble layout, double value) {\n@@ -249,0 +328,1 @@\n+<<<<<<< HEAD\n@@ -253,0 +333,5 @@\n+=======\n+        MemorySegment addr = allocate(layout);\n+        addr.set(layout, 0, value);\n+        return addr;\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -272,1 +357,1 @@\n-    default MemorySegment allocate(AddressLayout layout, MemorySegment value) {\n+    default MemorySegment allocateFrom(AddressLayout layout, MemorySegment value) {\n@@ -275,0 +360,1 @@\n+<<<<<<< HEAD\n@@ -293,0 +379,10 @@\n+=======\n+        MemorySegment segment = allocate(layout);\n+        segment.set(layout, 0, value);\n+        return segment;\n+    }\n+\n+    \/**\n+     * Allocates a memory segment with the given layout and initializes it with the given byte elements.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -296,1 +392,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfByte elementLayout, byte... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfByte elementLayout, byte... elements) {\n@@ -301,0 +397,1 @@\n+<<<<<<< HEAD\n@@ -313,0 +410,4 @@\n+=======\n+     * Allocates a memory segment with the given layout and initializes it with the given short elements.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -316,1 +417,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfShort elementLayout, short... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfShort elementLayout, short... elements) {\n@@ -321,0 +422,1 @@\n+<<<<<<< HEAD\n@@ -333,0 +435,4 @@\n+=======\n+     * Allocates a memory segment with the given layout and initializes it with the given char elements.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -336,1 +442,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfChar elementLayout, char... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfChar elementLayout, char... elements) {\n@@ -341,0 +447,1 @@\n+<<<<<<< HEAD\n@@ -353,0 +460,4 @@\n+=======\n+     * Allocates a memory segment with the given layout and initializes it with the given int elements.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -356,1 +467,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfInt elementLayout, int... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfInt elementLayout, int... elements) {\n@@ -361,0 +472,1 @@\n+<<<<<<< HEAD\n@@ -373,0 +485,4 @@\n+=======\n+     * Allocates a memory segment with the given layout and initializes it with the given float elements.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -376,1 +492,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfFloat elementLayout, float... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfFloat elementLayout, float... elements) {\n@@ -381,0 +497,1 @@\n+<<<<<<< HEAD\n@@ -393,0 +510,4 @@\n+=======\n+     * Allocates a memory segment with the given layout and initializes it with the given long elements.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -396,1 +517,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfLong elementLayout, long... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfLong elementLayout, long... elements) {\n@@ -401,0 +522,1 @@\n+<<<<<<< HEAD\n@@ -413,0 +535,4 @@\n+=======\n+     * Allocates a memory segment with the given layout and initializes it with the given double elements.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -416,1 +542,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfDouble elementLayout, double... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfDouble elementLayout, double... elements) {\n@@ -423,0 +549,1 @@\n+<<<<<<< HEAD\n@@ -424,0 +551,3 @@\n+=======\n+        MemorySegment addr = allocate(Objects.requireNonNull(elementLayout), size);\n+>>>>>>> ea82d4101e7ed33fe99d9faa0be59fd88a8acffd\n@@ -455,1 +585,1 @@\n-    default MemorySegment allocateArray(MemoryLayout elementLayout, long count) {\n+    default MemorySegment allocate(MemoryLayout elementLayout, long count) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":154,"deletions":24,"binary":false,"changes":178,"status":"modified"}]}