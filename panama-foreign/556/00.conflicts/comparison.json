{"files":[{"patch":"@@ -222,0 +222,1 @@\n+<<<<<<< HEAD\n@@ -226,0 +227,3 @@\n+=======\n+     * the VM will exit with a non-zero exit code.\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n@@ -231,1 +235,2 @@\n-     * @throws IllegalArgumentException if the target's method type and the function descriptor mismatch.\n+     * @throws IllegalArgumentException if the target's method type and the function descriptor mismatch, or\n+     *         if it is determined that the target method handle can throw an exception.\n@@ -654,2 +659,1 @@\n-         * Constructs a new {@code VaList} instance out of a memory address pointing to an existing C {@code va_list},\n-         * backed by the {@linkplain ResourceScope#globalScope() global} resource scope.\n+         * Constructs a new {@code VaList} instance out of a memory address pointing to an existing C {@code va_list}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+<<<<<<< HEAD\n@@ -56,0 +57,3 @@\n+=======\n+        case SysV, AArch64 -> libLookup(libs -> libs.loadLibrary(\"syslookup\"));\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,4 @@\n+<<<<<<< HEAD\n+=======\n+import jdk.internal.access.JavaLangInvokeAccess;\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n@@ -56,0 +60,1 @@\n+import java.util.Arrays;\n@@ -79,0 +84,4 @@\n+<<<<<<< HEAD\n+=======\n+    private static final JavaLangInvokeAccess JLIA = SharedSecrets.getJavaLangInvokeAccess();\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n@@ -435,0 +444,7 @@\n+    public static void checkExceptions(MethodHandle target) {\n+        Class<?>[] exceptions = JLIA.exceptionTypes(target);\n+        if (exceptions != null && exceptions.length != 0) {\n+            throw new IllegalArgumentException(\"Target handle may throw exceptions: \" + Arrays.toString(exceptions));\n+        }\n+    }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -67,0 +67,11 @@\n+<<<<<<< HEAD\n+=======\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+          expectedExceptionsMessageRegExp = \".*Target handle may throw exceptions.*\")\n+    public void testEagerExceptionBlocked() {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            CLinker.getInstance().upcallStub(ThrowingUpcall.MH_throwException, FunctionDescriptor.ofVoid(), scope);\n+        }\n+    }\n+\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n@@ -80,0 +91,5 @@\n+<<<<<<< HEAD\n+=======\n+                \/\/ security manager to block normal System.exit\n+                \"-Djava.security.manager=allow\",\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n@@ -94,0 +110,9 @@\n+<<<<<<< HEAD\n+=======\n+\n+        \/\/ If the VM crashes with an uncaught IllegalStateException from the security manager\n+        \/\/ the crash log should include the exception message.\n+        \/\/ Make sure that is _not_ the case.\n+        String shouldNotInclude = \"Can not use exitVM\";\n+        assertFalse(linesContain(outLines, shouldNotInclude), \"Found '\" + shouldNotInclude + \"' in stdout\");\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -43,0 +43,15 @@\n+<<<<<<< HEAD\n+=======\n+        System.setSecurityManager(new SecurityManager() {\n+            @Override\n+            public void checkExit(int status) {\n+                throw new IllegalStateException(\"Can not use exitVM\");\n+            }\n+\n+            @Override\n+            public void checkPermission(Permission perm) {\n+                \/\/ do nothing\n+            }\n+        });\n+\n+>>>>>>> fc80193ffc6c6dbeab8ef7e98da19e47b4616af8\n","filename":"test\/jdk\/java\/foreign\/ThrowingUpcall.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}