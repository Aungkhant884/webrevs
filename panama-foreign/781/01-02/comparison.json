{"files":[{"patch":"@@ -2,2 +2,2 @@\n- *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n@@ -5,5 +5,5 @@\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n@@ -11,5 +11,5 @@\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n@@ -17,7 +17,3 @@\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n@@ -25,0 +21,3 @@\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n@@ -26,0 +25,1 @@\n+\n@@ -156,1 +156,1 @@\n-@PreviewFeature(feature =PreviewFeature.Feature.FOREIGN)\n+@PreviewFeature(feature=PreviewFeature.Feature.FOREIGN)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Arrays;\n@@ -132,1 +131,1 @@\n- * is a native segment associated with a scope that is alive for the entire duration of the upcall.\n+ * is a native segment associated with a scope that is always alive.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1172,8 +1172,2 @@\n-     * Creates a native segment with the given size, address, and arena.\n-     * This method can be useful when interacting with custom memory sources (e.g. custom allocators),\n-     * where an address to some underlying region of memory is typically obtained from foreign code\n-     * (often as a plain {@code long} value).\n-     * <p>\n-     * The returned segment is not read-only (see {@link MemorySegment#isReadOnly()}), and its lifetime is controlled\n-     * by the provided arena. For instance, if the provided arena is a confined arena, the returned\n-     * native segment will be invalidated when the provided confined arena is {@linkplain Arena#close() closed}.\n+     * Creates a native segment with the given size, {@linkplain #address() address value} and arena.\n+     * The returned segment is always accessible, from any thread.\n@@ -1215,1 +1209,1 @@\n-     * Creates a native segment with the given size, address, and arena.\n+     * Creates a native segment with the given size, {@linkplain #address() address value}, and arena.\n@@ -1220,1 +1214,1 @@\n-     * The returned segment is not read-only (see {@link MemorySegment#isReadOnly()}), and its lifetime is controlled\n+     * The returned segment is not {@linkplain MemorySegment#isReadOnly()} read-only), and its lifetime is controlled\n@@ -1718,0 +1712,3 @@\n+     * @throws IllegalArgumentException if provided address layout has a {@linkplain OfAddress#targetLayout() target layout}\n+     * {@code T}, and the address of the returned segment\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in {@code T}.\n@@ -2043,1 +2040,0 @@\n-     \/**\n@@ -2256,1 +2252,2 @@\n-         * {@return {@code true}, if the segments associated with this scope can be accessed}.\n+         * {@return {@code true}, if the regions of memory backing the memory segments associated with this scope are\n+         * still valid}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-     * @param arena the arema associated with symbols obtained from the returned lookup.\n+     * @param arena the arena associated with symbols obtained from the returned lookup.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n- * A confined arena can be {@linkplain java.lang.foreign.Arena#close()}. When a confined\n+ * A confined arena can be {@linkplain java.lang.foreign.Arena#close() closed}. When a confined\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,4 +87,0 @@\n-    public static Arena arena(MemorySegment segment) {\n-        return ((AbstractMemorySegmentImpl)segment).scope.asArena();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-    final boolean internal;\n@@ -40,1 +39,1 @@\n-    public GlobalSession(Object ref, boolean internal) {\n+    public GlobalSession(Object ref) {\n@@ -43,5 +42,0 @@\n-        this.internal = internal;\n-    }\n-\n-    boolean isInternal() {\n-        return internal;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/GlobalSession.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-    public static final MemorySessionImpl GLOBAL = new GlobalSession(null, false);\n-    public static final MemorySessionImpl NATIVE = new GlobalSession(null, true);\n+    public static final MemorySessionImpl GLOBAL = new GlobalSession(null);\n+    public static final MemorySessionImpl NATIVE = new GlobalSession(null);\n@@ -99,1 +99,11 @@\n-        return new SessionArena(this);\n+        return new Arena() {\n+            @Override\n+            public Scope scope() {\n+                return MemorySessionImpl.this;\n+            }\n+\n+            @Override\n+            public void close() {\n+                MemorySessionImpl.this.close();\n+            }\n+        };\n@@ -104,5 +114,1 @@\n-        if (arena instanceof SessionArena arenaImpl) {\n-            return arenaImpl.sessionImpl;\n-        } else {\n-            return (MemorySessionImpl) arena.scope();\n-        }\n+        return (MemorySessionImpl) arena.scope();\n@@ -262,1 +268,1 @@\n-        return new GlobalSession(ref, true);\n+        return new GlobalSession(ref);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        return dest.asUnbounded().copyFrom(buffer);\n+        return dest.copyFrom(buffer);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,3 +73,1 @@\n-        if (session instanceof Arena arena) {\n-            assertEquals(addr.scope(), arena.scope());\n-        }\n+        assertEquals(addr.scope(), session.scope());\n","filename":"test\/jdk\/java\/foreign\/LibraryLookupTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-                return ((MemorySegment)strcat.invokeExact(buf, other)).asUnbounded().getUtf8String(0);\n+                return ((MemorySegment)strcat.invokeExact(buf, other)).getUtf8String(0);\n@@ -288,2 +288,2 @@\n-            return addr1.asUnbounded().get(C_INT, 0) -\n-                   addr2.asUnbounded().get(C_INT, 0);\n+            return addr1.get(C_INT, 0) -\n+                   addr2.get(C_INT, 0);\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -196,2 +196,1 @@\n-            Arena scope = arena;\n-            MemorySegment seg = scope.allocate(ValueLayout.JAVA_INT);\n+            MemorySegment seg = arena.allocate(ValueLayout.JAVA_INT);\n@@ -208,2 +207,1 @@\n-            Arena scope = arena;\n-            MemorySegment seg = scope.allocate(ValueLayout.JAVA_INT);\n+            MemorySegment seg = arena.allocate(ValueLayout.JAVA_INT);\n","filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -130,2 +130,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(byteSize, byteAlignment);\n+            MemorySegment segment = arena.allocate(byteSize, byteAlignment);\n@@ -140,2 +139,1 @@\n-        Arena scope = arena;\n-        MemorySegment segment = scope.allocate(layout);\n+        MemorySegment segment = arena.allocate(layout);\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,2 +184,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(tuples);;\n+            MemorySegment segment = arena.allocate(tuples);;\n@@ -360,2 +359,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(bytes);;\n+            MemorySegment segment = arena.allocate(bytes);;\n@@ -387,2 +385,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(bytes);;\n+            MemorySegment segment = arena.allocate(bytes);;\n@@ -422,2 +419,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(bytes);;\n+            MemorySegment segment = arena.allocate(bytes);;\n@@ -436,2 +432,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(seq);;\n+            MemorySegment segment = arena.allocate(seq);;\n@@ -475,2 +470,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(seq);;\n+            MemorySegment segment = arena.allocate(seq);;\n@@ -487,2 +481,1 @@\n-            Arena scope = arena;\n-            leaked = scope.allocate(bytes);;\n+            leaked = arena.allocate(bytes);;\n@@ -590,2 +583,1 @@\n-            Arena scope = arena;\n-            MemorySegment nativeArray = scope.allocate(bytes, 1);;\n+            MemorySegment nativeArray = arena.allocate(bytes, 1);;\n@@ -604,2 +596,1 @@\n-            Arena scope = arena;\n-            MemorySegment nativeArray = scope.allocate(seq);;\n+            MemorySegment nativeArray = arena.allocate(seq);;\n@@ -677,2 +668,1 @@\n-            Arena scope = arena;\n-            MemorySegment ms = scope.allocate(4, 1);;\n+            MemorySegment ms = arena.allocate(4, 1);;\n@@ -688,2 +678,1 @@\n-        Arena scope = arena;\n-        MemorySegment s1 = scope.allocate(JAVA_INT);\n+        MemorySegment s1 = arena.allocate(JAVA_INT);\n@@ -704,2 +693,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(10, 1);;\n+            MemorySegment segment = arena.allocate(10, 1);;\n@@ -726,2 +714,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(10, 1);\n+            MemorySegment segment = arena.allocate(10, 1);\n@@ -745,2 +732,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(16, 1);;\n+            MemorySegment segment = arena.allocate(16, 1);;\n@@ -764,2 +750,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(16, 1);;\n+            MemorySegment segment = arena.allocate(16, 1);;\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":15,"deletions":30,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -71,2 +71,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(SEGMENT_SIZE, 1);\n+            MemorySegment segment = arena.allocate(SEGMENT_SIZE, 1);\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-            Arena scope = arena;\n-            var segment = scope.allocate((long) longArrayLength * Long.BYTES, Long.SIZE);\n+            var segment = arena.allocate((long) longArrayLength * Long.BYTES, Long.SIZE);\n","filename":"test\/jdk\/java\/foreign\/TestLargeSegmentCopy.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -434,2 +434,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(layout);\n+            MemorySegment segment = arena.allocate(layout);\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(seq);;\n+            MemorySegment segment = arena.allocate(seq);;\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = viewFactory.apply(scope.allocate(layout));\n+            MemorySegment segment = viewFactory.apply(arena.allocate(layout));\n@@ -123,2 +122,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = viewFactory.apply(scope.allocate(seq));\n+            MemorySegment segment = viewFactory.apply(arena.allocate(seq));\n@@ -193,2 +191,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = viewFactory.apply(scope.allocate(seq));\n+            MemorySegment segment = viewFactory.apply(arena.allocate(seq));\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -83,2 +83,1 @@\n-                Arena scope = arena;\n-                MemorySegment segment = scope.allocate(128, 1);;\n+                MemorySegment segment = arena.allocate(128, 1);\n@@ -97,2 +96,1 @@\n-                Arena scope = arena;\n-                MemorySegment segment = scope.allocate(64, 1);;\n+                MemorySegment segment = arena.allocate(64, 1);\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,2 +51,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(aligned);;\n+            MemorySegment segment = arena.allocate(aligned);;\n@@ -70,2 +69,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(alignedGroup);;\n+            MemorySegment segment = arena.allocate(alignedGroup);;\n@@ -98,2 +96,1 @@\n-                Arena scope = arena;\n-                MemorySegment segment = scope.allocate(layout);;\n+                MemorySegment segment = arena.allocate(layout);;\n@@ -123,2 +120,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(g);;\n+            MemorySegment segment = arena.allocate(g);;\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -175,2 +175,1 @@\n-            Arena scope = arena;\n-            var nativeSegment = scope.allocate(4, 4);;\n+            var nativeSegment = arena.allocate(4, 4);;\n@@ -188,4 +187,2 @@\n-                Arena scope1 = arena;\n-                var s1 = scope1.allocate((long) Integer.MAX_VALUE + 10L, 8);;\n-                Arena scope = arena;\n-                var s2 = scope.allocate((long) Integer.MAX_VALUE + 10L, 8);;\n+                var s1 = arena.allocate((long) Integer.MAX_VALUE + 10L, 8);;\n+                var s2 = arena.allocate((long) Integer.MAX_VALUE + 10L, 8);;\n@@ -234,11 +231,2 @@\n-            Arena scope1 = arena;\n-            try {\n-                s1 = scope1.allocate(4, 1);\n-            } catch (ExceptionInInitializerError ex) {\n-                Throwable t = ex;\n-                t.getCause().printStackTrace();\n-                throw new AssertionError(t);\n-            }\n-\n-            Arena scope = arena;\n-            s2 = scope.allocate(4, 1);;\n+            s1 = arena.allocate(4, 1);\n+            s2 = arena.allocate(4, 1);;\n@@ -254,2 +242,1 @@\n-            Arena scope = arena;\n-            var segment = scope.allocate(4, 1);;\n+            var segment = arena.allocate(4, 1);;\n@@ -296,3 +283,1 @@\n-        NATIVE(i -> {\n-            return Arena.ofAuto().allocate(i, 1);\n-        }),\n+        NATIVE(i -> Arena.ofAuto().allocate(i, 1)),\n","filename":"test\/jdk\/java\/foreign\/TestMismatch.java","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -145,2 +145,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(seq);;\n+            MemorySegment segment = arena.allocate(seq);;\n@@ -156,2 +155,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(doubles);;\n+            MemorySegment segment = arena.allocate(doubles);;\n@@ -200,2 +198,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(4, 1);;\n+            MemorySegment segment = arena.allocate(4, 1);;\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        ScopedOperation.ofScope(session -> session.allocate(100, 1), \"MemorySession::allocate\");;\n+        ScopedOperation.ofScope(session -> session.allocate(100, 1), \"MemorySession::allocate\");\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -351,3 +351,2 @@\n-        SLICING(true, (size, drop) -> {\n-            Arena scope = drop;\n-            return SegmentAllocator.slicingAllocator(scope.allocate(size, 1));\n+        SLICING(true, (size, arena) -> {\n+            return SegmentAllocator.slicingAllocator(arena.allocate(size, 1));\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -88,2 +88,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(1000, 1);\n+            MemorySegment segment = arena.allocate(1000, 1);\n@@ -100,2 +99,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(10, 1);\n+            MemorySegment segment = arena.allocate(10, 1);\n@@ -128,2 +126,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment2 = scope.allocate(100, 1);\n+            MemorySegment segment2 = arena.allocate(100, 1);\n@@ -148,2 +145,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(100, 1);\n+            MemorySegment segment = arena.allocate(100, 1);\n@@ -227,3 +223,1 @@\n-                () -> {\n-                    return Arena.ofAuto().allocate(4L, 8);\n-                },\n+                () -> Arena.ofAuto().allocate(4L, 8),\n@@ -232,3 +226,1 @@\n-                () -> {\n-                    return Arena.ofAuto().allocate(4L, 8);\n-                },\n+                () -> Arena.ofAuto().allocate(4L, 8),\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -53,2 +53,1 @@\n-            Arena scope = arena;\n-            MemorySegment s = scope.allocate(layout);;\n+            MemorySegment s = arena.allocate(layout);;\n@@ -99,2 +98,1 @@\n-            Arena scope = arena;\n-            MemorySegment s = scope.allocate(4, 1);;\n+            MemorySegment s = arena.allocate(4, 1);;\n@@ -128,2 +126,1 @@\n-            Arena scope = arena;\n-            MemorySegment s1 = scope.allocate(layout);;\n+            MemorySegment s1 = arena.allocate(layout);;\n","filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,2 +52,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(LAYOUT);;\n+            MemorySegment segment = arena.allocate(LAYOUT);;\n@@ -68,2 +67,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(LAYOUT);;\n+            MemorySegment segment = arena.allocate(LAYOUT);;\n","filename":"test\/jdk\/java\/foreign\/TestSlices.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(layout);;\n+            MemorySegment segment = arena.allocate(layout);;\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-            Arena scope = arena;\n-            MemorySegment s = scope.allocate(8, 8);;\n+            MemorySegment s = arena.allocate(8, 8);;\n@@ -66,2 +65,1 @@\n-            Arena scope = arena;\n-            MemorySegment s = scope.allocate(8, 8);;\n+            MemorySegment s = arena.allocate(8, 8);;\n@@ -75,2 +73,1 @@\n-            Arena scope = arena;\n-            MemorySegment s = scope.allocate(8, 8);;\n+            MemorySegment s = arena.allocate(8, 8);;\n@@ -84,2 +81,1 @@\n-            Arena scope = arena;\n-            MemorySegment s = scope.allocate(8, 8);;\n+            MemorySegment s = arena.allocate(8, 8);;\n","filename":"test\/jdk\/java\/foreign\/TestTypeAccess.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-            Arena scope = arena;\n-            MemorySegment argSegment = scope.allocate(S_PDI_LAYOUT);;\n+            MemorySegment argSegment = arena.allocate(S_PDI_LAYOUT);\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStructScope.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -84,2 +84,1 @@\n-            Arena scope = arena;\n-            MemorySegment argIDs = scope.allocate(layout);;\n+            MemorySegment argIDs = arena.allocate(layout);;\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -106,2 +106,1 @@\n-            Arena scope = arena;\n-            MemorySegment segment = scope.allocate(inner_size * outer_size * 8, 4);;\n+            MemorySegment segment = arena.allocate(inner_size * outer_size * 8, 4);\n","filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,6 +66,1 @@\n-    final MemorySegment segment;\n-\n-    {\n-        Arena scope = arena;\n-        segment = scope.allocate(ALLOC_SIZE, 1);\n-    }\n+    final MemorySegment segment = arena.allocate(ALLOC_SIZE, 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -60,6 +60,1 @@\n-    final SegmentAllocator recyclingAlloc;\n-\n-    {\n-        Arena scope = arena;\n-        recyclingAlloc = SegmentAllocator.prefixAllocator(scope.allocate(ALLOC_LAYOUT));\n-    }\n+    final SegmentAllocator recyclingAlloc = SegmentAllocator.prefixAllocator(arena.allocate(ALLOC_LAYOUT));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNew.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -73,2 +73,1 @@\n-        Arena scope = arena;\n-        segment = scope.allocate(ALLOC_SIZE, 1);\n+        segment = arena.allocate(ALLOC_SIZE, 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstant.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,4 +76,2 @@\n-        Arena scope1 = arena;\n-        segmentIn = scope1.allocate(ALLOC_SIZE, 1);\n-        Arena scope = arena;\n-        segmentOut = scope.allocate(ALLOC_SIZE, 1);\n+        segmentIn = arena.allocate(ALLOC_SIZE, 1);\n+        segmentOut = arena.allocate(ALLOC_SIZE, 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantFP.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,2 +72,1 @@\n-        Arena scope = arena;\n-        segment = scope.allocate(ALLOC_SIZE, CARRIER_SIZE);\n+        segment = arena.allocate(ALLOC_SIZE, CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantShared.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,2 +67,1 @@\n-        Arena scope = arena;\n-        nativeSegment = scope.allocate(ALLOC_SIZE, 1);\n+        nativeSegment = arena.allocate(ALLOC_SIZE, 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverSlice.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -79,2 +79,1 @@\n-        Arena scope = arena;\n-        segment = scope.allocate(ALLOC_SIZE, CARRIER_SIZE);\n+        segment = arena.allocate(ALLOC_SIZE, CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ParallelSum.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,6 +52,1 @@\n-    MemorySegment segment;\n-\n-    {\n-        Arena scope = arena;\n-        segment = scope.allocate(100, 1);\n-    }\n+    MemorySegment segment = arena.allocate(100, 1);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -81,2 +81,1 @@\n-        Arena scope = arena;\n-        segmentAllocator = SegmentAllocator.prefixAllocator(scope.allocate(size + 1, 1));\n+        segmentAllocator = SegmentAllocator.prefixAllocator(arena.allocate(size + 1, 1));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,2 +67,1 @@\n-        Arena scope = arena;\n-        data = scope.allocate(JAVA_INT);\n+        data = arena.allocate(JAVA_INT);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/VarHandleExact.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        return (X)new Pointer<>(address.asUnbounded());\n+        return (X)new Pointer<>(address);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/pointers\/Pointer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,2 +65,1 @@\n-        Arena scope = arena;\n-        this.segment = scope.allocate(LAYOUT);\n+        this.segment = arena.allocate(LAYOUT);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}