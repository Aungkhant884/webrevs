{"files":[{"patch":"@@ -329,1 +329,1 @@\n-         * try (Arena arena = Arena.openConfined()) {\n+         * try (Arena arena = Arena.ofConfined()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                SegmentScope.global());\n+                Arena.global());\n","filename":"test\/jdk\/java\/lang\/Thread\/jni\/AttachCurrentThread\/ImplicitAttach.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.lang.foreign.Arena;\n@@ -27,1 +28,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -81,1 +81,1 @@\n-                       SegmentScope.auto());\n+                       Arena.ofAuto());\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/LargeMapTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -65,1 +64,1 @@\n-        var arena = Arena.openConfined();\n+        var arena = Arena.ofConfined();\n@@ -69,1 +68,1 @@\n-            fileChannel.map(FileChannel.MapMode.READ_WRITE, 1L, 10L, arena.scope());\n+            fileChannel.map(FileChannel.MapMode.READ_WRITE, 1L, 10L, arena);\n@@ -75,1 +74,1 @@\n-        var arena = Arena.openConfined();\n+        var arena = Arena.ofConfined();\n@@ -79,1 +78,1 @@\n-            fileChannel.map(FileChannel.MapMode.READ_WRITE, 1L, 10L, arena.scope());\n+            fileChannel.map(FileChannel.MapMode.READ_WRITE, 1L, 10L, arena);\n@@ -164,1 +163,1 @@\n-        public MemorySegment map(MapMode mode, long offset, long size, SegmentScope scope)\n+        public MemorySegment map(MapMode mode, long offset, long size, Arena arena)\n@@ -167,1 +166,1 @@\n-            return fc.map(mode, offset, size, scope);\n+            return fc.map(mode, offset, size, arena);\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/MapToMemorySegmentTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SpliteratorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -25,1 +26,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -46,1 +46,1 @@\n-                    MemorySegment.allocateNative(s, SegmentScope.auto())\n+                    Arena.ofAuto().allocate(s)\n@@ -54,1 +54,1 @@\n-                    MemorySegment.allocateNative(s, SegmentScope.auto())\n+                    Arena.ofAuto().allocate(s)\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorLoadStoreTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Byte.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Byte.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Byte.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Byte.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Double.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Double.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Double.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Double.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Float.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Float.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Float.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Float.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Integer.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Integer.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Integer.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Integer.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Long.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Long.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Long.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Long.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -482,2 +482,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -511,2 +511,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -575,2 +575,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -606,2 +606,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -489,2 +489,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -518,2 +518,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -582,2 +582,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n@@ -613,2 +613,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, Short.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), Short.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, Short.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), Short.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -502,2 +502,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, $Boxtype$.SIZE));\n+        MemorySegment r = , Arena.ofAuto().allocate(a.byteSize(), $Boxtype$.SIZE);\n@@ -531,2 +531,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, $Boxtype$.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), $Boxtype$.SIZE);\n@@ -595,2 +595,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, $Boxtype$.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), $Boxtype$.SIZE);\n@@ -626,2 +626,2 @@\n-        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> MemorySegment.allocateNative(i, $Boxtype$.SIZE, SegmentScope.auto()));\n-        MemorySegment r = MemorySegment.allocateNative(a.byteSize(), $Boxtype$.SIZE, SegmentScope.auto());\n+        MemorySegment a = toSegment(fa.apply(SPECIES.length()), i -> Arena.ofAuto().allocate(i, $Boxtype$.SIZE));\n+        MemorySegment r = Arena.ofAuto().allocate(a.byteSize(), $Boxtype$.SIZE);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}