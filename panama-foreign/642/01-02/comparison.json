{"files":[{"patch":"@@ -488,25 +488,0 @@\n-    \/**\n-     * Creates a <em>strided<\/em> method handle which, given a memory segment, returns a {@linkplain MemorySegment#asSlice(long,long) slice}\n-     * corresponding to the layout selected by a given layout path, where the path is considered rooted in this layout.\n-     * The returned method handle can effectively slice a given memory segment at multiple starting offsets, using a <em>dynamic<\/em> index\n-     * (of type {@code long}), which is multiplied by this layout size and then added to the offset of the selected layout.\n-     * Equivalent to the following code:\n-     * {@snippet lang=java :\n-     * MemoryLayout.sequenceLayout(Long.MAX_VALUE, this)\n-     *             .sliceHandle(PathElement.sequenceElement());\n-     * }\n-     *\n-     * @param elements the layout path elements.\n-     * @return a method handle which can be used to create a slice of the selected layout element, given a segment.\n-     * @throws UnsupportedOperationException if the size of the selected layout in bits is not a multiple of 8.\n-     *\/\n-    default MethodHandle arrayElementSliceHandle(PathElement... elements) {\n-        Objects.requireNonNull(elements);\n-        PathElement[] newElements = new PathElement[elements.length + 1];\n-        newElements[0] = PathElement.sequenceElement();\n-        System.arraycopy(elements, 0, newElements, 1, elements.length);\n-        return computePathOp(LayoutPath.rootPath(MemoryLayout.sequenceLayout(Long.MAX_VALUE, this), MemoryLayout::bitSize),\n-                LayoutPath::sliceHandle, Set.of(), newElements);\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -490,22 +490,0 @@\n-    @Test(dataProvider = \"testLayouts\")\n-    public void testArrayElementSliceHandle(MemoryLayout layout, PathElement[] pathElements, long[] indexes,\n-                                long expectedBitOffset) throws Throwable {\n-        if (expectedBitOffset % 8 != 0)\n-            throw new SkipException(\"Offset not a multiple of 8\");\n-\n-        MemoryLayout selected = layout.select(pathElements);\n-        MethodHandle sliceHandle = layout.arrayElementSliceHandle(pathElements);\n-        sliceHandle = sliceHandle.asSpreader(long[].class, indexes.length);\n-\n-        long stride = layout.byteSize();\n-\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            MemorySegment segment = MemorySegment.allocateNative(MemoryLayout.sequenceLayout(5, layout), scope);\n-            for (long i = 0 ; i < 5 ; i++) {\n-                MemorySegment slice = (MemorySegment) sliceHandle.invokeExact(segment, i, indexes);\n-                assertEquals(slice.address().toRawLongValue() - segment.address().toRawLongValue(), (expectedBitOffset \/ 8) + (stride * i));\n-                assertEquals(slice.byteSize(), selected.byteSize());\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"}]}