{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.util.OptionalLong;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AbstractLayout.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.OptionalLong;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-     *             .varHandle(PathElement.sequenceElement());\n+     *             .sliceHandle(PathElement.sequenceElement());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.OptionalLong;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/PaddingLayout.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.util.OptionalLong;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.OptionalLong;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -490,0 +490,22 @@\n+    @Test(dataProvider = \"testLayouts\")\n+    public void testArrayElementSliceHandle(MemoryLayout layout, PathElement[] pathElements, long[] indexes,\n+                                long expectedBitOffset) throws Throwable {\n+        if (expectedBitOffset % 8 != 0)\n+            throw new SkipException(\"Offset not a multiple of 8\");\n+\n+        MemoryLayout selected = layout.select(pathElements);\n+        MethodHandle sliceHandle = layout.arrayElementSliceHandle(pathElements);\n+        sliceHandle = sliceHandle.asSpreader(long[].class, indexes.length);\n+\n+        long stride = layout.byteSize();\n+\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            MemorySegment segment = MemorySegment.allocateNative(MemoryLayout.sequenceLayout(5, layout), scope);\n+            for (long i = 0 ; i < 5 ; i++) {\n+                MemorySegment slice = (MemorySegment) sliceHandle.invokeExact(segment, i, indexes);\n+                assertEquals(slice.address().toRawLongValue() - segment.address().toRawLongValue(), (expectedBitOffset \/ 8) + (stride * i));\n+                assertEquals(slice.byteSize(), selected.byteSize());\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}