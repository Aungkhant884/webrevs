{"files":[{"patch":"@@ -204,1 +204,1 @@\n-#define PKG_FOREIGN \"Ljava\/lang\/foreign\/\"\n+#define PKG_FOREIGN \"Ljdk\/internal\/foreign\/\"\n@@ -207,1 +207,1 @@\n-#define SCOPE PKG_FOREIGN \"MemorySession;\"\n+#define SCOPE PKG_FOREIGN \"MemorySessionImpl;\"\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import jdk.internal.foreign.Scoped;\n@@ -303,1 +302,1 @@\n-     * {@return a non-closeable view of the memory session associated with this memory segment}\n+     * {@return the memory session associated with this memory segment}\n@@ -857,1 +856,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize, Scoped.toSessionImpl(session));\n+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize, session);\n@@ -881,1 +880,1 @@\n-        return allocateNative(layout.byteSize(), layout.byteAlignment(), Scoped.toSessionImpl(session));\n+        return allocateNative(layout.byteSize(), layout.byteAlignment(), session);\n@@ -935,1 +934,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, Scoped.toSessionImpl(session));\n+        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, session);\n@@ -982,1 +981,1 @@\n-        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, Scoped.toSessionImpl(session));\n+        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, session);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.ref.CleanerFactory;\n@@ -104,1 +105,1 @@\n- * <h2><a id = \"global-session\">Global session<\/a><\/h2>\n+ * <h2>Global session<\/h2>\n@@ -111,0 +112,20 @@\n+ * <h2>Restricting access to memory sessions<\/h2>\n+ *\n+ * There are situations in which it might not be desirable for a memory session to be reachable from one or\n+ * more resources associated with it. For instance, an API might create a private memory session, and allocate\n+ * a memory segment, and then expose one or more slices of this segment to its clients. Since the API's memory session\n+ * would be reachable from the slices (using the {@link MemorySegment#session()} accessor), it might be possible for\n+ * clients to compromise the API (e.g. by closing the session prematurely). To avoid leaking private memory sessions\n+ * to untrusted clients, an API can instead return segments based on a non-closeable view of the session it created, as follows:\n+ *\n+ * {@snippet lang=java :\n+ * MemorySession session = MemorySession.openConfined();\n+ * MemoryLifetime nonCloseableSession = session.asNonCloseable();\n+ * MemorySegment segment = MemorySegment.allocateNative(100, nonCloseableSession);\n+ * segment.session().close(); \/\/ throws\n+ * session.close(); \/\/ok\n+ * }\n+ *\n+ * In other words, only the owner of the original {@code session} object can close the session. External clients can only\n+ * access the non-closeable session, and have no access to the underlying API session.\n+ *\n@@ -170,0 +191,11 @@\n+    \/**\n+     * Returns a non-closeable view of this memory session. The returned session is the same session as this\n+     * session, if this session is {@linkplain #isCloseable() non-closeable}, or a new non-closeable view of\n+     * this memory session.\n+     * @apiNote a non-closeable view of a memory session {@code S} keeps {@code S} reachable. As such, {@code S}\n+     * cannot be closed implicitly (e.g. by a {@link Cleaner}) as long as one or more non-closeable views of {@code S}\n+     * are reachable.\n+     * @return a non-closeable view of this memory session.\n+     *\/\n+    MemorySession asNonCloseable();\n+\n@@ -173,2 +205,1 @@\n-     * is especially useful when operating on non-closeable views of memory sessions, such as the ones returned\n-     * by {@link MemorySegment#session()}.\n+     * is especially useful when operating on {@linkplain #asNonCloseable() non-closeable} session views.\n@@ -243,1 +274,1 @@\n-     * openShared(Cleaner.create());\n+     * openShared(Cleaner.create()).asNonCloseable();\n@@ -252,2 +283,2 @@\n-     * Returns the <a href=\"MemorySession.html#global-session\"><em>global memory session<\/em><\/a>.\n-     * @return the <a href=\"MemorySession.html#global-session\"><em>global memory session<\/em><\/a>.\n+     * Returns the <em>global memory session<\/em>.\n+     * @return the <em>global memory session<\/em>.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.internal.foreign.Scoped;\n@@ -415,1 +414,1 @@\n-        return new ArenaAllocator(blockSize, arenaSize, Scoped.toSessionImpl(session));\n+        return new ArenaAllocator(blockSize, arenaSize, session);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.foreign.Scoped;\n@@ -67,1 +66,1 @@\n-     * {@return a non-closeable view of the memory session associated with this variable argument list}\n+     * {@return the memory session associated with this variable argument list}\n@@ -190,1 +189,1 @@\n-        return SharedUtils.newVaListOfAddress(address, Scoped.toSessionImpl(session));\n+        return SharedUtils.newVaListOfAddress(address, session);\n@@ -213,1 +212,1 @@\n-        return SharedUtils.newVaList(actions, Scoped.toSessionImpl(session));\n+        return SharedUtils.newVaList(actions, session);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -616,1 +617,1 @@\n-        static MemorySession session(ByteBuffer bb) {\n+        static MemorySessionImpl session(ByteBuffer bb) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-    final MemorySession session() {\n+    final MemorySessionImpl session() {\n@@ -770,1 +770,1 @@\n-        MemorySession session = session();\n+        MemorySessionImpl session = session();\n@@ -773,1 +773,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -837,2 +837,2 @@\n-                    ((MemorySessionImpl)session).acquire0();\n-                    return ((MemorySessionImpl) session)::release0;\n+                    session.acquire0();\n+                    return session::release0;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-        MemorySession session = session();\n+        MemorySessionImpl session = session();\n@@ -306,1 +306,1 @@\n-                throw new UnsupportedOperationException(\"ByteBuffer derived from closeable shared segments not supported\");\n+                throw new UnsupportedOperationException(\"ByteBuffer derived from closeable shared sessions not supported\");\n@@ -309,1 +309,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-import sun.security.action.GetPropertyAction;\n+\n@@ -73,1 +73,1 @@\n-    final MemorySessionImpl session;\n+    final MemorySession session;\n@@ -76,1 +76,1 @@\n-    AbstractMemorySegmentImpl(long length, int mask, MemorySessionImpl session) {\n+    AbstractMemorySegmentImpl(long length, int mask, MemorySession session) {\n@@ -86,1 +86,1 @@\n-    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session);\n+    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session);\n@@ -141,1 +141,1 @@\n-        SCOPED_MEMORY_ACCESS.setMemory(session, base(), min(), length, value);\n+        SCOPED_MEMORY_ACCESS.setMemory(sessionImpl(), base(), min(), length, value);\n@@ -172,1 +172,1 @@\n-            i = vectorizedMismatchLargeForBytes(session, that.session,\n+            i = vectorizedMismatchLargeForBytes(sessionImpl(), that.sessionImpl(),\n@@ -352,1 +352,1 @@\n-        session.checkValidStateSlow();\n+        sessionImpl().checkValidStateSlow();\n@@ -399,1 +399,1 @@\n-        return session;\n+        return MemorySessionImpl.toSessionImpl(session);\n@@ -404,1 +404,1 @@\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+        return session;\n@@ -512,1 +512,1 @@\n-            bufferSession = bufferSegment.session;\n+            bufferSession = bufferSegment.sessionImpl();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -46,1 +47,1 @@\n- * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, int, MemorySessionImpl)}.\n+ * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, int, MemorySession)}.\n@@ -77,1 +78,1 @@\n-    abstract HeapMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session);\n+    abstract HeapMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session);\n@@ -97,1 +98,1 @@\n-        OfByte dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfByte dup(long offset, long size, int mask, MemorySession session) {\n@@ -125,1 +126,1 @@\n-        OfChar dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfChar dup(long offset, long size, int mask, MemorySession session) {\n@@ -153,1 +154,1 @@\n-        OfShort dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfShort dup(long offset, long size, int mask, MemorySession session) {\n@@ -181,1 +182,1 @@\n-        OfInt dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfInt dup(long offset, long size, int mask, MemorySession session) {\n@@ -209,1 +210,1 @@\n-        OfLong dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfLong dup(long offset, long size, int mask, MemorySession session) {\n@@ -237,1 +238,1 @@\n-        OfFloat dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfFloat dup(long offset, long size, int mask, MemorySession session) {\n@@ -265,1 +266,1 @@\n-        OfDouble dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfDouble dup(long offset, long size, int mask, MemorySession session) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -55,1 +56,1 @@\n-    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, MemorySessionImpl session) {\n+    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, MemorySession session) {\n@@ -67,1 +68,1 @@\n-    MappedMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session) {\n+    MappedMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session) {\n@@ -91,1 +92,1 @@\n-        SCOPED_MEMORY_ACCESS.load(session, min, unmapper.isSync(), length);\n+        SCOPED_MEMORY_ACCESS.load(sessionImpl(), min, unmapper.isSync(), length);\n@@ -95,1 +96,1 @@\n-        SCOPED_MEMORY_ACCESS.unload(session, min, unmapper.isSync(), length);\n+        SCOPED_MEMORY_ACCESS.unload(sessionImpl(), min, unmapper.isSync(), length);\n@@ -99,1 +100,1 @@\n-        return SCOPED_MEMORY_ACCESS.isLoaded(session, min, unmapper.isSync(), length);\n+        return SCOPED_MEMORY_ACCESS.isLoaded(sessionImpl(), min, unmapper.isSync(), length);\n@@ -103,1 +104,1 @@\n-        SCOPED_MEMORY_ACCESS.force(session, unmapper.fileDescriptor(), min, unmapper.isSync(), 0, length);\n+        SCOPED_MEMORY_ACCESS.force(sessionImpl(), unmapper.fileDescriptor(), min, unmapper.isSync(), 0, length);\n@@ -108,1 +109,1 @@\n-    public static MemorySegment makeMappedSegment(Path path, long bytesOffset, long bytesSize, FileChannel.MapMode mapMode, MemorySessionImpl session) throws IOException {\n+    public static MemorySegment makeMappedSegment(Path path, long bytesOffset, long bytesSize, FileChannel.MapMode mapMode, MemorySession session) throws IOException {\n@@ -111,1 +112,2 @@\n-        session.checkValidStateSlow();\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.checkValidStateSlow();\n@@ -128,1 +130,1 @@\n-                session.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+                sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n@@ -156,1 +158,1 @@\n-        public EmptyMappedMemorySegmentImpl(int modes, MemorySessionImpl session) {\n+        public EmptyMappedMemorySegmentImpl(int modes, MemorySession session) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -88,1 +89,1 @@\n-    public static MemorySegment ofLongUnchecked(long value, long byteSize, MemorySessionImpl session) {\n+    public static MemorySegment ofLongUnchecked(long value, long byteSize, MemorySession session) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import sun.nio.ch.DirectBuffer;\n@@ -54,1 +55,1 @@\n-public abstract non-sealed class MemorySessionImpl implements MemorySession, Scoped, SegmentAllocator {\n+public abstract non-sealed class MemorySessionImpl implements Scoped, MemorySession, SegmentAllocator {\n@@ -79,5 +80,2 @@\n-        addInternal(ResourceList.ResourceCleanup.ofRunnable(runnable));\n-    }\n-\n-    public MemorySessionImpl sessionImpl() {\n-        return this;\n+        addInternal(runnable instanceof ResourceList.ResourceCleanup cleanup ?\n+                cleanup : ResourceList.ResourceCleanup.ofRunnable(runnable));\n@@ -144,1 +142,1 @@\n-            ((Scoped)other).sessionImpl() == this;\n+            toSessionImpl(other) == this;\n@@ -177,0 +175,15 @@\n+    @Override\n+    public MemorySession asNonCloseable() {\n+        return isCloseable() ?\n+                new NonCloseableView(this) : this;\n+    }\n+\n+    public static MemorySessionImpl toSessionImpl(MemorySession session) {\n+        return ((Scoped)session).sessionImpl();\n+    }\n+\n+    @Override\n+    public MemorySessionImpl sessionImpl() {\n+        return this;\n+    }\n+\n@@ -292,0 +305,8 @@\n+    \/**\n+     * This is an implicit, GC-backed memory session. Implicit sessions cannot be closed explicitly.\n+     * While it would be possible to model an implicit session as a non-closeable view of a shared\n+     * session, it is better to capture the fact that an implicit session is not just a non-closeable\n+     * view of some session which might be closeable. This is useful e.g. in the implementations of\n+     * {@link DirectBuffer#address()}, where obtaining an address of a buffer instance associated\n+     * with a potentially closeable session is forbidden.\n+     *\/\n@@ -318,0 +339,5 @@\n+        @Override\n+        public MemorySession asNonCloseable() {\n+            return this;\n+        }\n+\n@@ -327,1 +353,3 @@\n-     * \"root\" session implementation, and throws {@link UnsupportedOperationException} on close.\n+     * \"root\" session implementation, and throws {@link UnsupportedOperationException} on close. This class contains\n+     * a strong reference to the original session, so even if the original session is dropped by the client\n+     * it would still be reachable by the GC, which is important if the session is implicitly closed.\n@@ -370,0 +398,5 @@\n+        @Override\n+        public MemorySession asNonCloseable() {\n+            return this;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":41,"deletions":8,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -50,1 +51,1 @@\n-        NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl scope) {\n+        NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySession scope) {\n@@ -66,1 +67,1 @@\n-    NativeMemorySegmentImpl(long min, long length, int mask, MemorySessionImpl session) {\n+    NativeMemorySegmentImpl(long min, long length, int mask, MemorySession session) {\n@@ -79,1 +80,1 @@\n-    NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session) {\n+    NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session) {\n@@ -111,2 +112,3 @@\n-    public static MemorySegment makeNativeSegment(long bytesSize, long alignmentBytes, MemorySessionImpl session) {\n-        session.checkValidStateSlow();\n+    public static MemorySegment makeNativeSegment(long bytesSize, long alignmentBytes, MemorySession session) {\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.checkValidStateSlow();\n@@ -129,1 +131,1 @@\n-        session.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+        sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n@@ -143,2 +145,3 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, MemorySessionImpl session) {\n-        session.checkValidStateSlow();\n+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, MemorySession session) {\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.checkValidStateSlow();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.lang.foreign.MemorySession;\n-\n@@ -32,4 +30,0 @@\n-\n-    static MemorySessionImpl toSessionImpl(MemorySession session) {\n-        return ((Scoped)session).sessionImpl();\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Scoped.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.foreign.Scoped;\n@@ -70,1 +69,1 @@\n-        MemorySegment symb =  arrangeUpcall(target, target.type(), function, Scoped.toSessionImpl(session));\n+        MemorySegment symb =  arrangeUpcall(target, target.type(), function, session);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -901,1 +901,1 @@\n-            return MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size, (MemorySessionImpl) context.session);\n+            return MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size, context.session);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-    private static final String OF_LONG_UNCHECKED_DESC = methodType(MemorySegment.class, long.class, long.class, MemorySessionImpl.class).descriptorString();\n+    private static final String OF_LONG_UNCHECKED_DESC = methodType(MemorySegment.class, long.class, long.class, MemorySession.class).descriptorString();\n@@ -553,1 +553,0 @@\n-        emitCheckCast(MemorySessionImpl.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-            return (MemorySessionImpl)MemorySession.global();\n+            return MemorySessionImpl.GLOBAL;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        \/\/ The cast below should always pass, as we should have a real session by now (see AbstractLinker::upcallStub)\n-        ((MemorySessionImpl)session).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-        return Scoped.toSessionImpl(segment.session());\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n@@ -363,1 +363,1 @@\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+        return segment.session();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-        return Scoped.toSessionImpl(segment.session());\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n@@ -164,1 +164,1 @@\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+        return segment.session();\n@@ -184,1 +184,1 @@\n-            ((MemorySessionImpl)session).checkValidStateSlow();\n+            MemorySessionImpl.toSessionImpl(session).checkValidStateSlow();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-        return Scoped.toSessionImpl(segment.session());\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n@@ -315,1 +315,1 @@\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+        return segment.session();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        return Scoped.toSessionImpl(segment.session());\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n@@ -162,1 +162,1 @@\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+        return segment.session();\n@@ -182,1 +182,1 @@\n-            ((MemorySessionImpl)session).checkValidStateSlow();\n+            MemorySessionImpl.toSessionImpl(session).checkValidStateSlow();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    public $type$ get$Type$(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$(MemorySessionImpl session, Object base, long offset) {\n@@ -11,1 +11,1 @@\n-    private $type$ get$Type$Internal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$Internal(MemorySessionImpl session, Object base, long offset) {\n@@ -14,1 +14,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -23,1 +23,1 @@\n-    public void put$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -32,1 +32,1 @@\n-    private void put$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -35,1 +35,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -45,1 +45,1 @@\n-    public $type$ get$Type$Unaligned(MemorySession session, Object base, long offset, boolean be) {\n+    public $type$ get$Type$Unaligned(MemorySessionImpl session, Object base, long offset, boolean be) {\n@@ -54,1 +54,1 @@\n-    private $type$ get$Type$UnalignedInternal(MemorySession session, Object base, long offset, boolean be) {\n+    private $type$ get$Type$UnalignedInternal(MemorySessionImpl session, Object base, long offset, boolean be) {\n@@ -57,1 +57,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -66,1 +66,1 @@\n-    public void put$Type$Unaligned(MemorySession session, Object base, long offset, $type$ value, boolean be) {\n+    public void put$Type$Unaligned(MemorySessionImpl session, Object base, long offset, $type$ value, boolean be) {\n@@ -75,1 +75,1 @@\n-    private void put$Type$UnalignedInternal(MemorySession session, Object base, long offset, $type$ value, boolean be) {\n+    private void put$Type$UnalignedInternal(MemorySessionImpl session, Object base, long offset, $type$ value, boolean be) {\n@@ -78,1 +78,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -88,1 +88,1 @@\n-    public $type$ get$Type$Volatile(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$Volatile(MemorySessionImpl session, Object base, long offset) {\n@@ -97,1 +97,1 @@\n-    private $type$ get$Type$VolatileInternal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$VolatileInternal(MemorySessionImpl session, Object base, long offset) {\n@@ -100,1 +100,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -109,1 +109,1 @@\n-    public void put$Type$Volatile(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$Volatile(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -118,1 +118,1 @@\n-    private void put$Type$VolatileInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$VolatileInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -121,1 +121,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -130,1 +130,1 @@\n-    public $type$ get$Type$Acquire(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$Acquire(MemorySessionImpl session, Object base, long offset) {\n@@ -139,1 +139,1 @@\n-    private $type$ get$Type$AcquireInternal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset) {\n@@ -142,1 +142,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -151,1 +151,1 @@\n-    public void put$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -160,1 +160,1 @@\n-    private void put$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -163,1 +163,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -172,1 +172,1 @@\n-    public $type$ get$Type$Opaque(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$Opaque(MemorySessionImpl session, Object base, long offset) {\n@@ -181,1 +181,1 @@\n-    private $type$ get$Type$OpaqueInternal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$OpaqueInternal(MemorySessionImpl session, Object base, long offset) {\n@@ -184,1 +184,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -192,1 +192,1 @@\n-    public void put$Type$Opaque(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$Opaque(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -201,1 +201,1 @@\n-    private void put$Type$OpaqueInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$OpaqueInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -204,1 +204,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -213,1 +213,1 @@\n-    public boolean compareAndSet$Type$(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean compareAndSet$Type$(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -222,1 +222,1 @@\n-    private boolean compareAndSet$Type$Internal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean compareAndSet$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -225,1 +225,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -234,1 +234,1 @@\n-    public $type$ compareAndExchange$Type$(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -243,1 +243,1 @@\n-    private $type$ compareAndExchange$Type$Internal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -246,1 +246,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -255,1 +255,1 @@\n-    public $type$ compareAndExchange$Type$Acquire(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -264,1 +264,1 @@\n-    private $type$ compareAndExchange$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -267,1 +267,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -276,1 +276,1 @@\n-    public $type$ compareAndExchange$Type$Release(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -285,1 +285,1 @@\n-    private $type$ compareAndExchange$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -288,1 +288,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -297,1 +297,1 @@\n-    public boolean weakCompareAndSet$Type$Plain(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Plain(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -306,1 +306,1 @@\n-    private boolean weakCompareAndSet$Type$PlainInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$PlainInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -309,1 +309,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -318,1 +318,1 @@\n-    public boolean weakCompareAndSet$Type$(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -327,1 +327,1 @@\n-    private boolean weakCompareAndSet$Type$Internal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -330,1 +330,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -339,1 +339,1 @@\n-    public boolean weakCompareAndSet$Type$Acquire(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -348,1 +348,1 @@\n-    private boolean weakCompareAndSet$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -351,1 +351,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -360,1 +360,1 @@\n-    public boolean weakCompareAndSet$Type$Release(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -369,1 +369,1 @@\n-    private boolean weakCompareAndSet$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -372,1 +372,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -381,1 +381,1 @@\n-    public $type$ getAndSet$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -390,1 +390,1 @@\n-    private $type$ getAndSet$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -393,1 +393,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -402,1 +402,1 @@\n-    public $type$ getAndSet$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -411,1 +411,1 @@\n-    private $type$ getAndSet$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -414,1 +414,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -423,1 +423,1 @@\n-    public $type$ getAndSet$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -432,1 +432,1 @@\n-    private $type$ getAndSet$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -435,1 +435,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -446,1 +446,1 @@\n-    public $type$ getAndAdd$Type$(MemorySession session, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -455,1 +455,1 @@\n-    private $type$ getAndAdd$Type$Internal(MemorySession session, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -458,1 +458,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -467,1 +467,1 @@\n-    public $type$ getAndAdd$Type$Acquire(MemorySession session, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -476,1 +476,1 @@\n-    private $type$ getAndAdd$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -479,1 +479,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -488,1 +488,1 @@\n-    public $type$ getAndAdd$Type$Release(MemorySession session, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -497,1 +497,1 @@\n-    private $type$ getAndAdd$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -500,1 +500,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -511,1 +511,1 @@\n-    public $type$ getAndBitwiseOr$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -520,1 +520,1 @@\n-    private $type$ getAndBitwiseOr$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -523,1 +523,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -532,1 +532,1 @@\n-    public $type$ getAndBitwiseOr$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -541,1 +541,1 @@\n-    private $type$ getAndBitwiseOr$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -544,1 +544,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -553,1 +553,1 @@\n-    public $type$ getAndBitwiseOr$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -562,1 +562,1 @@\n-    private $type$ getAndBitwiseOr$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -565,1 +565,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -574,1 +574,1 @@\n-    public $type$ getAndBitwiseAnd$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -583,1 +583,1 @@\n-    private $type$ getAndBitwiseAnd$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -586,1 +586,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -595,1 +595,1 @@\n-    public $type$ getAndBitwiseAnd$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -604,1 +604,1 @@\n-    private $type$ getAndBitwiseAnd$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -607,1 +607,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -616,1 +616,1 @@\n-    public $type$ getAndBitwiseAnd$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -625,1 +625,1 @@\n-    private $type$ getAndBitwiseAnd$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -628,1 +628,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -637,1 +637,1 @@\n-    public $type$ getAndBitwiseXor$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -646,1 +646,1 @@\n-    private $type$ getAndBitwiseXor$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -649,1 +649,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -658,1 +658,1 @@\n-    public $type$ getAndBitwiseXor$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -667,1 +667,1 @@\n-    private $type$ getAndBitwiseXor$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -670,1 +670,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -679,1 +679,1 @@\n-    public $type$ getAndBitwiseXor$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -688,1 +688,1 @@\n-    private $type$ getAndBitwiseXor$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -691,1 +691,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template","additions":99,"deletions":99,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.foreign.MemorySession;\n@@ -51,1 +50,1 @@\n- * class accept one or more {@link MemorySession} parameter, which is used to validate as to whether access to memory\n+ * class accept one or more {@link MemorySessionImpl} parameter, which is used to validate as to whether access to memory\n@@ -62,1 +61,1 @@\n- * {@link MemorySession#close()} method. This method initiates thread-local handshakes with all the other VM threads,\n+ * {@link MemorySessionImpl#close()} method. This method initiates thread-local handshakes with all the other VM threads,\n@@ -88,1 +87,1 @@\n-    public void closeScope(MemorySession session) {\n+    public void closeScope(MemorySessionImpl session) {\n@@ -92,1 +91,1 @@\n-    native void closeScope0(MemorySession session);\n+    native void closeScope0(MemorySessionImpl session);\n@@ -118,1 +117,1 @@\n-    public void copyMemory(MemorySession srcScope, MemorySession dstScope,\n+    public void copyMemory(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -130,1 +129,1 @@\n-    private void copyMemoryInternal(MemorySession srcScope, MemorySession dstScope,\n+    private void copyMemoryInternal(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -136,1 +135,1 @@\n-                ((MemorySessionImpl)srcScope).checkValidState();\n+                srcScope.checkValidState();\n@@ -139,1 +138,1 @@\n-                ((MemorySessionImpl)dstScope).checkValidState();\n+                dstScope.checkValidState();\n@@ -149,1 +148,1 @@\n-    public void copySwapMemory(MemorySession srcScope, MemorySession dstScope,\n+    public void copySwapMemory(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -161,1 +160,1 @@\n-    private void copySwapMemoryInternal(MemorySession srcScope, MemorySession dstScope,\n+    private void copySwapMemoryInternal(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -167,1 +166,1 @@\n-                ((MemorySessionImpl)srcScope).checkValidState();\n+                srcScope.checkValidState();\n@@ -170,1 +169,1 @@\n-                ((MemorySessionImpl)dstScope).checkValidState();\n+                dstScope.checkValidState();\n@@ -180,1 +179,1 @@\n-    public void setMemory(MemorySession session, Object o, long offset, long bytes, byte value) {\n+    public void setMemory(MemorySessionImpl session, Object o, long offset, long bytes, byte value) {\n@@ -189,1 +188,1 @@\n-    private void setMemoryInternal(MemorySession session, Object o, long offset, long bytes, byte value) {\n+    private void setMemoryInternal(MemorySessionImpl session, Object o, long offset, long bytes, byte value) {\n@@ -192,1 +191,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -201,1 +200,1 @@\n-    public int vectorizedMismatch(MemorySession aScope, MemorySession bScope,\n+    public int vectorizedMismatch(MemorySessionImpl aScope, MemorySessionImpl bScope,\n@@ -214,1 +213,1 @@\n-    private int vectorizedMismatchInternal(MemorySession aScope, MemorySession bScope,\n+    private int vectorizedMismatchInternal(MemorySessionImpl aScope, MemorySessionImpl bScope,\n@@ -221,1 +220,1 @@\n-                ((MemorySessionImpl)aScope).checkValidState();\n+                aScope.checkValidState();\n@@ -224,1 +223,1 @@\n-                ((MemorySessionImpl)bScope).checkValidState();\n+                bScope.checkValidState();\n@@ -234,1 +233,1 @@\n-    public boolean isLoaded(MemorySession session, long address, boolean isSync, long size) {\n+    public boolean isLoaded(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -243,1 +242,1 @@\n-    public boolean isLoadedInternal(MemorySession session, long address, boolean isSync, long size) {\n+    public boolean isLoadedInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -246,1 +245,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -255,1 +254,1 @@\n-    public void load(MemorySession session, long address, boolean isSync, long size) {\n+    public void load(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -264,1 +263,1 @@\n-    public void loadInternal(MemorySession session, long address, boolean isSync, long size) {\n+    public void loadInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -267,1 +266,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -276,1 +275,1 @@\n-    public void unload(MemorySession session, long address, boolean isSync, long size) {\n+    public void unload(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -285,1 +284,1 @@\n-    public void unloadInternal(MemorySession session, long address, boolean isSync, long size) {\n+    public void unloadInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -288,1 +287,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -297,1 +296,1 @@\n-    public void force(MemorySession session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void force(MemorySessionImpl session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -306,1 +305,1 @@\n-    public void forceInternal(MemorySession session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void forceInternal(MemorySessionImpl session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -309,1 +308,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -346,1 +345,1 @@\n-        static MemorySession session(ByteBuffer bb) {\n+        static MemorySessionImpl session(ByteBuffer bb) {\n@@ -381,1 +380,1 @@\n-    V loadFromByteBufferScoped(MemorySession session,\n+    V loadFromByteBufferScoped(MemorySessionImpl session,\n@@ -388,1 +387,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -426,1 +425,1 @@\n-    V loadFromByteBufferMaskedScoped(MemorySession session, Class<? extends V> vmClass,\n+    V loadFromByteBufferMaskedScoped(MemorySessionImpl session, Class<? extends V> vmClass,\n@@ -433,1 +432,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -468,1 +467,1 @@\n-    void storeIntoByteBufferScoped(MemorySession session,\n+    void storeIntoByteBufferScoped(MemorySessionImpl session,\n@@ -475,1 +474,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -513,1 +512,1 @@\n-    void storeIntoByteBufferMaskedScoped(MemorySession session,\n+    void storeIntoByteBufferMaskedScoped(MemorySessionImpl session,\n@@ -520,1 +519,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":40,"deletions":41,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -77,7 +77,7 @@\n-            MemorySession[] sessions = new MemorySession[] {\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared()\n+            MemorySegment[] segments = new MemorySegment[]{\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared())\n@@ -86,1 +86,1 @@\n-            sessions[i].close();\n+            segments[i].session().close();\n@@ -89,1 +89,1 @@\n-                    assertFalse(sessions[j].isAlive());\n+                    assertFalse(segments[j].session().isAlive());\n@@ -91,1 +91,1 @@\n-                    assertTrue(sessions[j].isAlive());\n+                    assertTrue(segments[j].session().isAlive());\n@@ -95,2 +95,0 @@\n-                MemorySegment[] segments = Arrays.stream(sessions).map(session -> MemorySegment.allocateNative(POINT, session))\n-                        .toArray(MemorySegment[]::new);\n@@ -104,1 +102,1 @@\n-                    sessions[j].close(); \/\/ should succeed!\n+                    segments[j].session().close(); \/\/ should succeed!\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -139,3 +139,2 @@\n-        var session = MemorySession.openConfined();\n-        MemorySegment segment = MemorySegment.allocateNative(layout, session);\n-        session.close();\n+        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openConfined());\n+        segment.session().close();\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -267,2 +267,1 @@\n-        var session = MemorySession.openConfined();\n-        MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0L, 8, FileChannel.MapMode.READ_WRITE, session);\n+        MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0L, 8, FileChannel.MapMode.READ_WRITE, MemorySession.openConfined());\n@@ -270,1 +269,1 @@\n-        session.close();\n+        segment.session().close();\n@@ -660,2 +659,1 @@\n-        var session = MemorySession.openConfined();\n-        MemorySegment s1 = MemorySegment.allocateNative(JAVA_INT, session);\n+        MemorySegment s1 = MemorySegment.allocateNative(JAVA_INT, MemorySession.openConfined());\n@@ -665,1 +663,1 @@\n-        session.close();\n+        s1.session().close();\n@@ -697,2 +695,1 @@\n-            var session = sessionSupplier.get();\n-            MemorySegment segment = MemorySegment.allocateNative(10, session);\n+            MemorySegment segment = MemorySegment.allocateNative(10, sessionSupplier.get());\n@@ -703,1 +700,1 @@\n-            session.close();\n+            segment.session().close();\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.function.Function;\n@@ -47,0 +48,1 @@\n+import java.util.function.UnaryOperator;\n@@ -54,1 +56,1 @@\n-    public void testConfined(Supplier<Cleaner> cleanerSupplier) {\n+    public void testConfined(Supplier<Cleaner> cleanerSupplier, UnaryOperator<MemorySession> sessionFunc) {\n@@ -60,0 +62,1 @@\n+        session = sessionFunc.apply(session);\n@@ -79,1 +82,1 @@\n-    public void testSharedSingleThread(Supplier<Cleaner> cleanerSupplier) {\n+    public void testSharedSingleThread(Supplier<Cleaner> cleanerSupplier, UnaryOperator<MemorySession> sessionFunc) {\n@@ -85,0 +88,1 @@\n+        session = sessionFunc.apply(session);\n@@ -104,1 +108,1 @@\n-    public void testSharedMultiThread(Supplier<Cleaner> cleanerSupplier) {\n+    public void testSharedMultiThread(Supplier<Cleaner> cleanerSupplier, UnaryOperator<MemorySession> sessionFunc) {\n@@ -111,0 +115,1 @@\n+        session = sessionFunc.apply(session);\n@@ -345,3 +350,5 @@\n-                { (Supplier<Cleaner>)() -> null },\n-                { (Supplier<Cleaner>)Cleaner::create },\n-                { (Supplier<Cleaner>)CleanerFactory::cleaner }\n+                { (Supplier<Cleaner>)() -> null, UnaryOperator.identity() },\n+                { (Supplier<Cleaner>)Cleaner::create, UnaryOperator.identity() },\n+                { (Supplier<Cleaner>)CleanerFactory::cleaner, UnaryOperator.identity() },\n+                { (Supplier<Cleaner>)Cleaner::create, (UnaryOperator<MemorySession>)MemorySession::asNonCloseable },\n+                { (Supplier<Cleaner>)CleanerFactory::cleaner, (UnaryOperator<MemorySession>)MemorySession::asNonCloseable }\n@@ -357,1 +364,5 @@\n-                { (Supplier<MemorySession>) MemorySession::global}\n+                { (Supplier<MemorySession>) MemorySession::global},\n+                { (Supplier<MemorySession>) () -> MemorySession.openConfined().asNonCloseable() },\n+                { (Supplier<MemorySession>) () -> MemorySession.openShared().asNonCloseable() },\n+                { (Supplier<MemorySession>) () -> MemorySession.openImplicit().asNonCloseable() },\n+                { (Supplier<MemorySession>) () -> MemorySession.global().asNonCloseable()},\n@@ -362,2 +373,3 @@\n-        ((MemorySessionImpl)parent).acquire0();\n-        child.addCloseAction(() -> ((MemorySessionImpl)parent).release0());\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(parent);\n+        sessionImpl.acquire0();\n+        child.addCloseAction(sessionImpl::release0);\n","filename":"test\/jdk\/java\/foreign\/TestMemorySession.java","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -132,3 +132,2 @@\n-    public void testAccessModesOfFactories(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testAccessModesOfFactories(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -136,1 +135,7 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n+    }\n+\n+    static void tryClose(MemorySegment segment) {\n+        if (segment.session().isCloseable()) {\n+            segment.session().close();\n+        }\n@@ -141,11 +146,15 @@\n-        List<Supplier<SegmentFactory>> l = List.of(\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new byte[] { 0x00, 0x01, 0x02, 0x03 })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new char[] {'a', 'b', 'c', 'd' })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new double[] { 1d, 2d, 3d, 4d} )),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new float[] { 1.0f, 2.0f, 3.0f, 4.0f })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new int[] { 1, 2, 3, 4 })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new long[] { 1l, 2l, 3l, 4l } )),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new short[] { 1, 2, 3, 4 } )),\n-                () -> SegmentFactory.ofImplicitSession(session -> MemorySegment.allocateNative(4, 8, session)),\n-                () -> SegmentFactory.ofImplicitSession(session -> MemorySegment.allocateNative(JAVA_INT, session)),\n-                () -> SegmentFactory.ofImplicitSession(session -> MemorySegment.allocateNative(4, session))\n+        List<Supplier<MemorySegment>> l = List.of(\n+                () -> MemorySegment.ofArray(new byte[] { 0x00, 0x01, 0x02, 0x03 }),\n+                () -> MemorySegment.ofArray(new char[] {'a', 'b', 'c', 'd' }),\n+                () -> MemorySegment.ofArray(new double[] { 1d, 2d, 3d, 4d} ),\n+                () -> MemorySegment.ofArray(new float[] { 1.0f, 2.0f, 3.0f, 4.0f }),\n+                () -> MemorySegment.ofArray(new int[] { 1, 2, 3, 4 }),\n+                () -> MemorySegment.ofArray(new long[] { 1l, 2l, 3l, 4l } ),\n+                () -> MemorySegment.ofArray(new short[] { 1, 2, 3, 4 } ),\n+                () -> MemorySegment.allocateNative(4, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(4, 8, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(JAVA_INT, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(4, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(4, 8, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(JAVA_INT, MemorySession.openImplicit())\n+\n@@ -185,1 +194,1 @@\n-    public void testFill(Supplier<SegmentFactory> segmentFactorySupplier) {\n+    public void testFill(Supplier<MemorySegment> segmentSupplier) {\n@@ -189,2 +198,1 @@\n-            SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-            MemorySegment segment = segmentFactory.segment();\n+            MemorySegment segment = segmentSupplier.get();\n@@ -207,1 +215,1 @@\n-            segmentFactory.tryClose();\n+            tryClose(segment);\n@@ -212,4 +220,3 @@\n-    public void testFillClosed(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n-        segmentFactory.tryClose();\n+    public void testFillClosed(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n+        tryClose(segment);\n@@ -227,3 +234,2 @@\n-    public void testNativeSegments(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testNativeSegments(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -236,1 +242,1 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n@@ -240,3 +246,2 @@\n-    public void testFillIllegalAccessMode(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testFillIllegalAccessMode(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -244,1 +249,1 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n@@ -248,3 +253,2 @@\n-    public void testFillThread(Supplier<SegmentFactory> segmentFactorySupplier) throws Exception {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testFillThread(Supplier<MemorySegment> segmentSupplier) throws Exception {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -271,1 +275,1 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n@@ -288,0 +292,12 @@\n+    @Test\n+    public void testSegmentAccessorWithWrappedLifetime() {\n+        MemorySession session = MemorySession.openConfined();\n+        MemorySession publicSession = session.asNonCloseable();\n+        assertEquals(session, publicSession);\n+        MemorySegment segment = publicSession.allocate(100);\n+        assertThrows(UnsupportedOperationException.class, publicSession::close);\n+        assertThrows(UnsupportedOperationException.class, segment.session()::close);\n+        session.close();\n+        assertFalse(publicSession.isAlive());\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":51,"deletions":35,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-    MemorySession session;\n@@ -81,2 +80,1 @@\n-        session = MemorySession.openConfined();\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, session);\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openConfined());\n@@ -94,1 +92,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstant.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,0 @@\n-    MemorySession session;\n@@ -99,1 +98,1 @@\n-        segment = MemorySegment.mapFile(tempPath, 0L, ALLOC_SIZE, FileChannel.MapMode.READ_WRITE, session = MemorySession.openConfined());\n+        segment = MemorySegment.mapFile(tempPath, 0L, ALLOC_SIZE, FileChannel.MapMode.READ_WRITE, MemorySession.openConfined());\n@@ -105,1 +104,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantMapped.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-    MemorySession session;\n@@ -75,1 +74,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, session = MemorySession.openConfined());\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, MemorySession.openConfined());\n@@ -87,1 +86,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantShared.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-    MemorySession session;\n@@ -65,2 +64,1 @@\n-        session = MemorySession.openConfined();\n-        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, session);\n+        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openConfined());\n@@ -73,2 +71,1 @@\n-    public void tearDown() {\n-        session.close();\n+    public void tearDown() { nativeSegment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverSlice.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-    MemorySession session;\n@@ -86,1 +85,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, session = MemorySession.openShared());\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, MemorySession.openShared());\n@@ -95,1 +94,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ParallelSum.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-    MemorySession session;\n@@ -66,1 +65,1 @@\n-        data = MemorySegment.allocateNative(JAVA_INT, session = MemorySession.openConfined());\n+        data = MemorySegment.allocateNative(JAVA_INT, MemorySession.openConfined());\n@@ -71,1 +70,1 @@\n-        session.close();\n+        data.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/VarHandleExact.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-    private final MemorySession session;\n@@ -67,2 +66,1 @@\n-        this.session = MemorySession.openConfined();\n-        this.segment = MemorySegment.allocateNative(LAYOUT, session);\n+        this.segment = MemorySegment.allocateNative(LAYOUT, MemorySession.openConfined());\n@@ -107,1 +105,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}