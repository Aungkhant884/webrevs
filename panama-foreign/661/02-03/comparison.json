{"files":[{"patch":"@@ -279,1 +279,1 @@\n-        return MemorySessionImpl.createShared(CleanerFactory.cleaner()).asNonCloseable();\n+        return MemorySessionImpl.createImplicit();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-                throw new UnsupportedOperationException(\"ByteBuffer derived from closeable shared segments not supported\");\n+                throw new UnsupportedOperationException(\"ByteBuffer derived from closeable shared sessions not supported\");\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import sun.nio.ch.DirectBuffer;\n@@ -125,0 +126,4 @@\n+    public static MemorySessionImpl createImplicit() {\n+        return new ImplicitSession();\n+    }\n+\n@@ -300,0 +305,45 @@\n+    \/**\n+     * This is an implicit, GC-backed memory session. Implicit sessions cannot be closed explicitly.\n+     * While it would be possible to model an implicit session as a non-closeable view of a shared\n+     * session, it is better to capture the fact that an implicit session is not just a non-closeable\n+     * view of some session which might be closeable. This is useful e.g. in the implementations of\n+     * {@link DirectBuffer#address()}, where obtaining an address of a buffer instance associated\n+     * with a potentially closeable session is forbidden.\n+     *\/\n+    static class ImplicitSession extends SharedSession {\n+\n+        public ImplicitSession() {\n+            super(CleanerFactory.cleaner());\n+        }\n+\n+        @Override\n+        public void release0() {\n+            Reference.reachabilityFence(this);\n+        }\n+\n+        @Override\n+        public void acquire0() {\n+            \/\/ do nothing\n+        }\n+\n+        @Override\n+        public boolean isCloseable() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean isAlive() {\n+            return true;\n+        }\n+\n+        @Override\n+        public MemorySession asNonCloseable() {\n+            return this;\n+        }\n+\n+        @Override\n+        public void justClose() {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}