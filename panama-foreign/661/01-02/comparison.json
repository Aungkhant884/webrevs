{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.ref.CleanerFactory;\n@@ -104,1 +105,1 @@\n- * <h2><a id = \"global-session\">Global session<\/a><\/h2>\n+ * <h2>Global session<\/h2>\n@@ -194,0 +195,3 @@\n+     * @apiNote a non-closeable view of a memory session {@code S} keeps {@code S} reachable. As such, {@code S}\n+     * cannot be closed implicitly (e.g. by a {@link Cleaner}) as long as one or more non-closeable views of {@code S}\n+     * are reachable.\n@@ -270,1 +274,1 @@\n-     * openShared(Cleaner.create());\n+     * openShared(Cleaner.create()).asNonCloseable();\n@@ -275,1 +279,1 @@\n-        return MemorySessionImpl.createImplicit();\n+        return MemorySessionImpl.createShared(CleanerFactory.cleaner()).asNonCloseable();\n@@ -279,2 +283,2 @@\n-     * Returns the <a href=\"MemorySession.html#global-session\"><em>global memory session<\/em><\/a>.\n-     * @return the <a href=\"MemorySession.html#global-session\"><em>global memory session<\/em><\/a>.\n+     * Returns the <em>global memory session<\/em>.\n+     * @return the <em>global memory session<\/em>.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -125,4 +125,0 @@\n-    public static MemorySessionImpl createImplicit() {\n-        return new ImplicitSession();\n-    }\n-\n@@ -304,32 +300,0 @@\n-    static class ImplicitSession extends SharedSession {\n-\n-        public ImplicitSession() {\n-            super(CleanerFactory.cleaner());\n-        }\n-\n-        @Override\n-        public void release0() {\n-            Reference.reachabilityFence(this);\n-        }\n-\n-        @Override\n-        public void acquire0() {\n-            \/\/ do nothing\n-        }\n-\n-        @Override\n-        public boolean isCloseable() {\n-            return false;\n-        }\n-\n-        @Override\n-        public boolean isAlive() {\n-            return true;\n-        }\n-\n-        @Override\n-        public void justClose() {\n-            throw new UnsupportedOperationException();\n-        }\n-    }\n-\n@@ -339,1 +303,3 @@\n-     * \"root\" session implementation, and throws {@link UnsupportedOperationException} on close.\n+     * \"root\" session implementation, and throws {@link UnsupportedOperationException} on close. This class contains\n+     * a strong reference to the original session, so even if the original session is dropped by the client\n+     * it would still be reachable by the GC, which is important if the session is implicitly closed.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":3,"deletions":37,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.function.Function;\n@@ -47,0 +48,1 @@\n+import java.util.function.UnaryOperator;\n@@ -54,1 +56,1 @@\n-    public void testConfined(Supplier<Cleaner> cleanerSupplier) {\n+    public void testConfined(Supplier<Cleaner> cleanerSupplier, UnaryOperator<MemorySession> sessionFunc) {\n@@ -60,0 +62,1 @@\n+        session = sessionFunc.apply(session);\n@@ -79,1 +82,1 @@\n-    public void testSharedSingleThread(Supplier<Cleaner> cleanerSupplier) {\n+    public void testSharedSingleThread(Supplier<Cleaner> cleanerSupplier, UnaryOperator<MemorySession> sessionFunc) {\n@@ -85,0 +88,1 @@\n+        session = sessionFunc.apply(session);\n@@ -104,1 +108,1 @@\n-    public void testSharedMultiThread(Supplier<Cleaner> cleanerSupplier) {\n+    public void testSharedMultiThread(Supplier<Cleaner> cleanerSupplier, UnaryOperator<MemorySession> sessionFunc) {\n@@ -111,0 +115,1 @@\n+        session = sessionFunc.apply(session);\n@@ -345,3 +350,5 @@\n-                { (Supplier<Cleaner>)() -> null },\n-                { (Supplier<Cleaner>)Cleaner::create },\n-                { (Supplier<Cleaner>)CleanerFactory::cleaner }\n+                { (Supplier<Cleaner>)() -> null, UnaryOperator.identity() },\n+                { (Supplier<Cleaner>)Cleaner::create, UnaryOperator.identity() },\n+                { (Supplier<Cleaner>)CleanerFactory::cleaner, UnaryOperator.identity() },\n+                { (Supplier<Cleaner>)Cleaner::create, (UnaryOperator<MemorySession>)MemorySession::asNonCloseable },\n+                { (Supplier<Cleaner>)CleanerFactory::cleaner, (UnaryOperator<MemorySession>)MemorySession::asNonCloseable }\n@@ -358,0 +365,4 @@\n+                { (Supplier<MemorySession>) () -> MemorySession.openConfined().asNonCloseable() },\n+                { (Supplier<MemorySession>) () -> MemorySession.openShared().asNonCloseable() },\n+                { (Supplier<MemorySession>) () -> MemorySession.openImplicit().asNonCloseable() },\n+                { (Supplier<MemorySession>) () -> MemorySession.global().asNonCloseable()},\n@@ -362,1 +373,1 @@\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl)parent;\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(parent);\n","filename":"test\/jdk\/java\/foreign\/TestMemorySession.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"}]}