{"files":[{"patch":"@@ -204,1 +204,1 @@\n-#define PKG_FOREIGN \"Ljava\/lang\/foreign\/\"\n+#define PKG_FOREIGN \"Ljdk\/internal\/foreign\/\"\n@@ -207,1 +207,1 @@\n-#define SCOPE PKG_FOREIGN \"MemorySession;\"\n+#define SCOPE PKG_FOREIGN \"MemorySessionImpl;\"\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-import jdk.internal.foreign.MemorySessionImpl;\n-import jdk.internal.foreign.Scoped;\n@@ -858,1 +856,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize, (MemorySessionImpl)session);\n+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize, session);\n@@ -882,1 +880,1 @@\n-        return allocateNative(layout.byteSize(), layout.byteAlignment(), (MemorySessionImpl)session);\n+        return allocateNative(layout.byteSize(), layout.byteAlignment(), session);\n@@ -936,1 +934,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, (MemorySessionImpl)session);\n+        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, session);\n@@ -983,1 +981,1 @@\n-        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, (MemorySessionImpl)session);\n+        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, session);\n@@ -1085,1 +1083,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.session(), dstImpl.session(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.sessionImpl(), dstImpl.sessionImpl(),\n@@ -1089,1 +1087,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.session(), dstImpl.session(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.sessionImpl(), dstImpl.sessionImpl(),\n@@ -1801,1 +1799,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.session(), null,\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.sessionImpl(), null,\n@@ -1805,1 +1803,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.session(), null,\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.sessionImpl(), null,\n@@ -1850,1 +1848,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(null, destImpl.session(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(null, destImpl.sessionImpl(),\n@@ -1854,1 +1852,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(null, destImpl.session(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(null, destImpl.sessionImpl(),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -111,0 +111,20 @@\n+ * <h2>Restricting access to memory sessions<\/h2>\n+ *\n+ * There are situations in which it might not be desirable for a memory session to be reachable from one or\n+ * more resources associated with it. For instance, an API might create a private memory session, and allocate\n+ * a memory segment, and then expose one or more slices of this segment to its clients. Since the API's memory session\n+ * would be reachable from the slices (using the {@link MemorySegment#session()} accessor), it might be possible for\n+ * clients to compromise the API (e.g. by closing the session prematurely). To avoid leaking private memory sessions\n+ * to untrusted clients, an API can instead return segments based on a non-closeable view of the session it created, as follows:\n+ *\n+ * {@snippet lang=java :\n+ * MemorySession session = MemorySession.openConfined();\n+ * MemoryLifetime nonCloseableSession = session.asNonCloseable();\n+ * MemorySegment segment = MemorySegment.allocateNative(100, nonCloseableSession);\n+ * segment.session().close(); \/\/ throws\n+ * session.close(); \/\/ok\n+ * }\n+ *\n+ * In other words, only the owner of the original {@code session} object can close the session. External clients can only\n+ * access the non-closeable session, and have no access to the underlying API session.\n+ *\n@@ -117,1 +137,1 @@\n-public sealed interface MemorySession extends AutoCloseable, SegmentAllocator permits MemorySessionImpl {\n+public sealed interface MemorySession extends AutoCloseable, SegmentAllocator permits MemorySessionImpl, MemorySessionImpl.NonCloseableView {\n@@ -170,0 +190,8 @@\n+    \/**\n+     * Returns a non-closeable view of this memory session. The returned session is the same session as this\n+     * session, if this session is {@linkplain #isCloseable() non-closeable}, or a new non-closeable view of\n+     * this memory session.\n+     * @return a non-closeable view of this memory session.\n+     *\/\n+    MemorySession asNonCloseable();\n+\n@@ -172,1 +200,2 @@\n-     * object is also a memory session, and it refers to the same memory session as this memory session.\n+     * object is also a memory session, and it refers to the same memory session as this memory session. This method\n+     * is especially useful when operating on {@linkplain #asNonCloseable() non-closeable} session views.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.internal.foreign.Scoped;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-     * {@return a the memory session associated with this variable argument list}\n+     * {@return the memory session associated with this variable argument list}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -616,1 +617,1 @@\n-        static MemorySession session(ByteBuffer bb) {\n+        static MemorySessionImpl session(ByteBuffer bb) {\n@@ -619,1 +620,1 @@\n-                    ((AbstractMemorySegmentImpl)segment).session() : null;\n+                    ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.session(),\n+        $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.sessionImpl(),\n@@ -138,1 +138,1 @@\n-        return SCOPED_MEMORY_ACCESS.get$Type$(bb.session(),\n+        return SCOPED_MEMORY_ACCESS.get$Type$(bb.sessionImpl(),\n@@ -142,1 +142,1 @@\n-        return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.session(),\n+        return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.sessionImpl(),\n@@ -155,1 +155,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.session(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.sessionImpl(),\n@@ -162,1 +162,1 @@\n-        SCOPED_MEMORY_ACCESS.put$Type$(bb.session(),\n+        SCOPED_MEMORY_ACCESS.put$Type$(bb.sessionImpl(),\n@@ -167,1 +167,1 @@\n-        SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.session(),\n+        SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.sessionImpl(),\n@@ -181,1 +181,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),\n@@ -190,1 +190,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.session(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.sessionImpl(),\n@@ -201,1 +201,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.sessionImpl(),\n@@ -210,1 +210,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.session(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.sessionImpl(),\n@@ -221,1 +221,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.sessionImpl(),\n@@ -230,1 +230,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.session(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.sessionImpl(),\n@@ -241,1 +241,1 @@\n-        return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.session(),\n+        return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.sessionImpl(),\n@@ -252,1 +252,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.sessionImpl(),\n@@ -263,1 +263,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.sessionImpl(),\n@@ -274,1 +274,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.sessionImpl(),\n@@ -284,1 +284,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.session(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.sessionImpl(),\n@@ -294,1 +294,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),\n@@ -304,1 +304,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.session(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.sessionImpl(),\n@@ -314,1 +314,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.session(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.sessionImpl(),\n@@ -325,1 +325,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.sessionImpl(),\n@@ -336,1 +336,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.sessionImpl(),\n@@ -347,1 +347,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.session(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.sessionImpl(),\n@@ -360,1 +360,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.sessionImpl(),\n@@ -374,1 +374,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.sessionImpl(),\n@@ -388,1 +388,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.sessionImpl(),\n@@ -402,1 +402,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n@@ -404,1 +404,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n@@ -416,1 +416,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.sessionImpl(),\n@@ -430,1 +430,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.sessionImpl(),\n@@ -444,1 +444,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.sessionImpl(),\n@@ -458,1 +458,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n@@ -460,1 +460,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n@@ -470,1 +470,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.sessionImpl(),\n@@ -484,1 +484,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.sessionImpl(),\n@@ -498,1 +498,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.sessionImpl(),\n@@ -512,1 +512,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n@@ -514,1 +514,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n@@ -525,1 +525,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.sessionImpl(),\n@@ -539,1 +539,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.sessionImpl(),\n@@ -553,1 +553,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.session(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.sessionImpl(),\n@@ -567,1 +567,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n@@ -569,1 +569,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-    final MemorySession session() {\n+    final MemorySessionImpl session() {\n@@ -763,1 +763,1 @@\n-            return ((AbstractMemorySegmentImpl)segment).session();\n+            return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n@@ -770,1 +770,1 @@\n-        MemorySession session = session();\n+        MemorySessionImpl session = session();\n@@ -773,1 +773,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -837,2 +837,2 @@\n-                    ((MemorySessionImpl)session).acquire0();\n-                    return ((MemorySessionImpl) session)::release0;\n+                    session.acquire0();\n+                    return session::release0;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-        MemorySession session = session();\n+        MemorySessionImpl session = session();\n@@ -309,1 +309,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-import sun.security.action.GetPropertyAction;\n+\n@@ -73,1 +73,1 @@\n-    final MemorySessionImpl session;\n+    final MemorySession session;\n@@ -76,1 +76,1 @@\n-    AbstractMemorySegmentImpl(long length, int mask, MemorySessionImpl session) {\n+    AbstractMemorySegmentImpl(long length, int mask, MemorySession session) {\n@@ -86,1 +86,1 @@\n-    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session);\n+    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session);\n@@ -141,1 +141,1 @@\n-        SCOPED_MEMORY_ACCESS.setMemory(session, base(), min(), length, value);\n+        SCOPED_MEMORY_ACCESS.setMemory(sessionImpl(), base(), min(), length, value);\n@@ -172,1 +172,1 @@\n-            i = vectorizedMismatchLargeForBytes(session, that.session,\n+            i = vectorizedMismatchLargeForBytes(sessionImpl(), that.sessionImpl(),\n@@ -352,1 +352,1 @@\n-        session.checkValidStateSlow();\n+        sessionImpl().checkValidStateSlow();\n@@ -398,1 +398,6 @@\n-    public MemorySessionImpl session() {\n+    public MemorySessionImpl sessionImpl() {\n+        return MemorySessionImpl.toSessionImpl(session);\n+    }\n+\n+    @Override\n+    public MemorySession session() {\n@@ -507,1 +512,1 @@\n-            bufferSession = bufferSegment.session;\n+            bufferSession = bufferSegment.sessionImpl();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -46,1 +47,1 @@\n- * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, int, MemorySessionImpl)}.\n+ * such as the elimination of store barriers in methods like {@link HeapMemorySegmentImpl#dup(long, long, int, MemorySession)}.\n@@ -77,1 +78,1 @@\n-    abstract HeapMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session);\n+    abstract HeapMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session);\n@@ -97,1 +98,1 @@\n-        OfByte dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfByte dup(long offset, long size, int mask, MemorySession session) {\n@@ -125,1 +126,1 @@\n-        OfChar dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfChar dup(long offset, long size, int mask, MemorySession session) {\n@@ -153,1 +154,1 @@\n-        OfShort dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfShort dup(long offset, long size, int mask, MemorySession session) {\n@@ -181,1 +182,1 @@\n-        OfInt dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfInt dup(long offset, long size, int mask, MemorySession session) {\n@@ -209,1 +210,1 @@\n-        OfLong dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfLong dup(long offset, long size, int mask, MemorySession session) {\n@@ -237,1 +238,1 @@\n-        OfFloat dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfFloat dup(long offset, long size, int mask, MemorySession session) {\n@@ -265,1 +266,1 @@\n-        OfDouble dup(long offset, long size, int mask, MemorySessionImpl session) {\n+        OfDouble dup(long offset, long size, int mask, MemorySession session) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -55,1 +56,1 @@\n-    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, MemorySessionImpl session) {\n+    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, MemorySession session) {\n@@ -67,1 +68,1 @@\n-    MappedMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session) {\n+    MappedMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session) {\n@@ -91,1 +92,1 @@\n-        SCOPED_MEMORY_ACCESS.load(session, min, unmapper.isSync(), length);\n+        SCOPED_MEMORY_ACCESS.load(sessionImpl(), min, unmapper.isSync(), length);\n@@ -95,1 +96,1 @@\n-        SCOPED_MEMORY_ACCESS.unload(session, min, unmapper.isSync(), length);\n+        SCOPED_MEMORY_ACCESS.unload(sessionImpl(), min, unmapper.isSync(), length);\n@@ -99,1 +100,1 @@\n-        return SCOPED_MEMORY_ACCESS.isLoaded(session, min, unmapper.isSync(), length);\n+        return SCOPED_MEMORY_ACCESS.isLoaded(sessionImpl(), min, unmapper.isSync(), length);\n@@ -103,1 +104,1 @@\n-        SCOPED_MEMORY_ACCESS.force(session, unmapper.fileDescriptor(), min, unmapper.isSync(), 0, length);\n+        SCOPED_MEMORY_ACCESS.force(sessionImpl(), unmapper.fileDescriptor(), min, unmapper.isSync(), 0, length);\n@@ -108,1 +109,1 @@\n-    public static MemorySegment makeMappedSegment(Path path, long bytesOffset, long bytesSize, FileChannel.MapMode mapMode, MemorySessionImpl session) throws IOException {\n+    public static MemorySegment makeMappedSegment(Path path, long bytesOffset, long bytesSize, FileChannel.MapMode mapMode, MemorySession session) throws IOException {\n@@ -111,1 +112,2 @@\n-        session.checkValidStateSlow();\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.checkValidStateSlow();\n@@ -128,1 +130,1 @@\n-                session.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+                sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n@@ -156,1 +158,1 @@\n-        public EmptyMappedMemorySegmentImpl(int modes, MemorySessionImpl session) {\n+        public EmptyMappedMemorySegmentImpl(int modes, MemorySession session) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -88,1 +89,1 @@\n-    public static MemorySegment ofLongUnchecked(long value, long byteSize, MemorySessionImpl session) {\n+    public static MemorySegment ofLongUnchecked(long value, long byteSize, MemorySession session) {\n@@ -97,1 +98,1 @@\n-    public MemorySessionImpl session() {\n+    public MemorySessionImpl sessionImpl() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-public abstract non-sealed class MemorySessionImpl implements MemorySession, SegmentAllocator {\n+public abstract non-sealed class MemorySessionImpl implements Scoped, MemorySession, SegmentAllocator {\n@@ -79,1 +79,2 @@\n-        addInternal(ResourceList.ResourceCleanup.ofRunnable(runnable));\n+        addInternal(runnable instanceof ResourceList.ResourceCleanup cleanup ?\n+                cleanup : ResourceList.ResourceCleanup.ofRunnable(runnable));\n@@ -139,1 +140,2 @@\n-        return o == this;\n+        return (o instanceof MemorySession other) &&\n+            toSessionImpl(other) == this;\n@@ -172,0 +174,15 @@\n+    @Override\n+    public MemorySession asNonCloseable() {\n+        return isCloseable() ?\n+                new NonCloseableView(this) : this;\n+    }\n+\n+    public static MemorySessionImpl toSessionImpl(MemorySession session) {\n+        return ((Scoped)session).sessionImpl();\n+    }\n+\n+    @Override\n+    public MemorySessionImpl sessionImpl() {\n+        return this;\n+    }\n+\n@@ -319,0 +336,62 @@\n+    \/**\n+     * This is a non-closeable view of another memory session. Instances of this class are used in resource session\n+     * accessors (see {@link MemorySegment#session()}). This class forwards all session methods to the underlying\n+     * \"root\" session implementation, and throws {@link UnsupportedOperationException} on close.\n+     *\/\n+    public final static class NonCloseableView implements MemorySession, Scoped {\n+        final MemorySessionImpl session;\n+\n+        public NonCloseableView(MemorySessionImpl session) {\n+            this.session = session;\n+        }\n+\n+        public MemorySessionImpl sessionImpl() {\n+            return session;\n+        }\n+\n+        @Override\n+        public boolean isAlive() {\n+            return session.isAlive();\n+        }\n+\n+        @Override\n+        public boolean isCloseable() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Thread ownerThread() {\n+            return session.ownerThread();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            return session.equals(o);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return session.hashCode();\n+        }\n+\n+        @Override\n+        public void whileAlive(Runnable action) {\n+            session.whileAlive(action);\n+        }\n+\n+        @Override\n+        public MemorySession asNonCloseable() {\n+            return this;\n+        }\n+\n+        @Override\n+        public void addCloseAction(Runnable runnable) {\n+            session.addCloseAction(runnable);\n+        }\n+\n+        @Override\n+        public void close() {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":82,"deletions":3,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.MemorySession;\n@@ -50,1 +51,1 @@\n-        NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl scope) {\n+        NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySession scope) {\n@@ -66,1 +67,1 @@\n-    NativeMemorySegmentImpl(long min, long length, int mask, MemorySessionImpl session) {\n+    NativeMemorySegmentImpl(long min, long length, int mask, MemorySession session) {\n@@ -79,1 +80,1 @@\n-    NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySessionImpl session) {\n+    NativeMemorySegmentImpl dup(long offset, long size, int mask, MemorySession session) {\n@@ -111,2 +112,3 @@\n-    public static MemorySegment makeNativeSegment(long bytesSize, long alignmentBytes, MemorySessionImpl session) {\n-        session.checkValidStateSlow();\n+    public static MemorySegment makeNativeSegment(long bytesSize, long alignmentBytes, MemorySession session) {\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.checkValidStateSlow();\n@@ -129,1 +131,1 @@\n-        session.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+        sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n@@ -143,2 +145,3 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, MemorySessionImpl session) {\n-        session.checkValidStateSlow();\n+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, MemorySession session) {\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.checkValidStateSlow();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    MemorySessionImpl session();\n+    MemorySessionImpl sessionImpl();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Scoped.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.foreign.Scoped;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -901,1 +901,1 @@\n-            return MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size, (MemorySessionImpl) context.session);\n+            return MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size, context.session);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-    private static final String OF_LONG_UNCHECKED_DESC = methodType(MemorySegment.class, long.class, long.class, MemorySessionImpl.class).descriptorString();\n+    private static final String OF_LONG_UNCHECKED_DESC = methodType(MemorySegment.class, long.class, long.class, MemorySession.class).descriptorString();\n@@ -464,1 +464,1 @@\n-        emitInvokeInterface(Scoped.class, \"session\", SESSION_IMPL_DESC);\n+        emitInvokeInterface(Scoped.class, \"sessionImpl\", SESSION_IMPL_DESC);\n@@ -553,1 +553,0 @@\n-        emitCheckCast(MemorySessionImpl.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -479,1 +479,1 @@\n-        public MemorySessionImpl session() {\n+        public MemorySessionImpl sessionImpl() {\n@@ -492,0 +492,5 @@\n+\n+        @Override\n+        public MemorySession session() {\n+            return MemorySessionImpl.GLOBAL;\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        \/\/ The cast below should always pass, as we should have a real session by now (see AbstractLinker::upcallStub)\n-        ((MemorySessionImpl)session).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n+        sessionImpl.addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), session());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), sessionImpl());\n@@ -265,1 +265,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), session());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), sessionImpl());\n@@ -307,1 +307,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(ptr, layout.byteSize(), session());\n+                    MemorySegment slice = MemorySegment.ofAddress(ptr, layout.byteSize(), sessionImpl());\n@@ -357,2 +357,7 @@\n-    public MemorySessionImpl session() {\n-        return (MemorySessionImpl)segment.session();\n+    public MemorySessionImpl sessionImpl() {\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n+    }\n+\n+    @Override\n+    public MemorySession session() {\n+        return segment.session();\n@@ -363,1 +368,1 @@\n-        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, session());\n+        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, sessionImpl());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-                    MemorySegment struct = MemorySegment.ofAddress(structAddr, layout.byteSize(), session());\n+                    MemorySegment struct = MemorySegment.ofAddress(structAddr, layout.byteSize(), sessionImpl());\n@@ -158,2 +158,7 @@\n-    public MemorySessionImpl session() {\n-        return (MemorySessionImpl)segment.session();\n+    public MemorySessionImpl sessionImpl() {\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n+    }\n+\n+    @Override\n+    public MemorySession session() {\n+        return segment.session();\n@@ -179,1 +184,1 @@\n-            ((MemorySessionImpl)session).checkValidStateSlow();\n+            MemorySessionImpl.toSessionImpl(session).checkValidStateSlow();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), session());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), sessionImpl());\n@@ -309,2 +309,7 @@\n-    public MemorySessionImpl session() {\n-        return (MemorySessionImpl)segment.session();\n+    public MemorySessionImpl sessionImpl() {\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n+    }\n+\n+    @Override\n+    public MemorySession session() {\n+        return segment.session();\n@@ -315,1 +320,1 @@\n-        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, session());\n+        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, sessionImpl());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -156,2 +156,7 @@\n-    public MemorySessionImpl session() {\n-        return (MemorySessionImpl)segment.session();\n+    public MemorySessionImpl sessionImpl() {\n+        return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n+    }\n+\n+    @Override\n+    public MemorySession session() {\n+        return segment.session();\n@@ -177,1 +182,1 @@\n-            ((MemorySessionImpl)session).checkValidStateSlow();\n+            MemorySessionImpl.toSessionImpl(session).checkValidStateSlow();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    public $type$ get$Type$(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$(MemorySessionImpl session, Object base, long offset) {\n@@ -11,1 +11,1 @@\n-    private $type$ get$Type$Internal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$Internal(MemorySessionImpl session, Object base, long offset) {\n@@ -14,1 +14,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -23,1 +23,1 @@\n-    public void put$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -32,1 +32,1 @@\n-    private void put$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -35,1 +35,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -45,1 +45,1 @@\n-    public $type$ get$Type$Unaligned(MemorySession session, Object base, long offset, boolean be) {\n+    public $type$ get$Type$Unaligned(MemorySessionImpl session, Object base, long offset, boolean be) {\n@@ -54,1 +54,1 @@\n-    private $type$ get$Type$UnalignedInternal(MemorySession session, Object base, long offset, boolean be) {\n+    private $type$ get$Type$UnalignedInternal(MemorySessionImpl session, Object base, long offset, boolean be) {\n@@ -57,1 +57,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -66,1 +66,1 @@\n-    public void put$Type$Unaligned(MemorySession session, Object base, long offset, $type$ value, boolean be) {\n+    public void put$Type$Unaligned(MemorySessionImpl session, Object base, long offset, $type$ value, boolean be) {\n@@ -75,1 +75,1 @@\n-    private void put$Type$UnalignedInternal(MemorySession session, Object base, long offset, $type$ value, boolean be) {\n+    private void put$Type$UnalignedInternal(MemorySessionImpl session, Object base, long offset, $type$ value, boolean be) {\n@@ -78,1 +78,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -88,1 +88,1 @@\n-    public $type$ get$Type$Volatile(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$Volatile(MemorySessionImpl session, Object base, long offset) {\n@@ -97,1 +97,1 @@\n-    private $type$ get$Type$VolatileInternal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$VolatileInternal(MemorySessionImpl session, Object base, long offset) {\n@@ -100,1 +100,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -109,1 +109,1 @@\n-    public void put$Type$Volatile(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$Volatile(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -118,1 +118,1 @@\n-    private void put$Type$VolatileInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$VolatileInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -121,1 +121,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -130,1 +130,1 @@\n-    public $type$ get$Type$Acquire(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$Acquire(MemorySessionImpl session, Object base, long offset) {\n@@ -139,1 +139,1 @@\n-    private $type$ get$Type$AcquireInternal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset) {\n@@ -142,1 +142,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -151,1 +151,1 @@\n-    public void put$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -160,1 +160,1 @@\n-    private void put$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -163,1 +163,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -172,1 +172,1 @@\n-    public $type$ get$Type$Opaque(MemorySession session, Object base, long offset) {\n+    public $type$ get$Type$Opaque(MemorySessionImpl session, Object base, long offset) {\n@@ -181,1 +181,1 @@\n-    private $type$ get$Type$OpaqueInternal(MemorySession session, Object base, long offset) {\n+    private $type$ get$Type$OpaqueInternal(MemorySessionImpl session, Object base, long offset) {\n@@ -184,1 +184,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -192,1 +192,1 @@\n-    public void put$Type$Opaque(MemorySession session, Object base, long offset, $type$ value) {\n+    public void put$Type$Opaque(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -201,1 +201,1 @@\n-    private void put$Type$OpaqueInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private void put$Type$OpaqueInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -204,1 +204,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -213,1 +213,1 @@\n-    public boolean compareAndSet$Type$(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean compareAndSet$Type$(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -222,1 +222,1 @@\n-    private boolean compareAndSet$Type$Internal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean compareAndSet$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -225,1 +225,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -234,1 +234,1 @@\n-    public $type$ compareAndExchange$Type$(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -243,1 +243,1 @@\n-    private $type$ compareAndExchange$Type$Internal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -246,1 +246,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -255,1 +255,1 @@\n-    public $type$ compareAndExchange$Type$Acquire(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -264,1 +264,1 @@\n-    private $type$ compareAndExchange$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -267,1 +267,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -276,1 +276,1 @@\n-    public $type$ compareAndExchange$Type$Release(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public $type$ compareAndExchange$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -285,1 +285,1 @@\n-    private $type$ compareAndExchange$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private $type$ compareAndExchange$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -288,1 +288,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -297,1 +297,1 @@\n-    public boolean weakCompareAndSet$Type$Plain(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Plain(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -306,1 +306,1 @@\n-    private boolean weakCompareAndSet$Type$PlainInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$PlainInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -309,1 +309,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -318,1 +318,1 @@\n-    public boolean weakCompareAndSet$Type$(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -327,1 +327,1 @@\n-    private boolean weakCompareAndSet$Type$Internal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -330,1 +330,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -339,1 +339,1 @@\n-    public boolean weakCompareAndSet$Type$Acquire(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -348,1 +348,1 @@\n-    private boolean weakCompareAndSet$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -351,1 +351,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -360,1 +360,1 @@\n-    public boolean weakCompareAndSet$Type$Release(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    public boolean weakCompareAndSet$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -369,1 +369,1 @@\n-    private boolean weakCompareAndSet$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ expected, $type$ value) {\n+    private boolean weakCompareAndSet$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ expected, $type$ value) {\n@@ -372,1 +372,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -381,1 +381,1 @@\n-    public $type$ getAndSet$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -390,1 +390,1 @@\n-    private $type$ getAndSet$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -393,1 +393,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -402,1 +402,1 @@\n-    public $type$ getAndSet$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -411,1 +411,1 @@\n-    private $type$ getAndSet$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -414,1 +414,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -423,1 +423,1 @@\n-    public $type$ getAndSet$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndSet$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -432,1 +432,1 @@\n-    private $type$ getAndSet$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndSet$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -435,1 +435,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -446,1 +446,1 @@\n-    public $type$ getAndAdd$Type$(MemorySession session, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -455,1 +455,1 @@\n-    private $type$ getAndAdd$Type$Internal(MemorySession session, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -458,1 +458,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -467,1 +467,1 @@\n-    public $type$ getAndAdd$Type$Acquire(MemorySession session, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -476,1 +476,1 @@\n-    private $type$ getAndAdd$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -479,1 +479,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -488,1 +488,1 @@\n-    public $type$ getAndAdd$Type$Release(MemorySession session, Object base, long offset, $type$ delta) {\n+    public $type$ getAndAdd$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -497,1 +497,1 @@\n-    private $type$ getAndAdd$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ delta) {\n+    private $type$ getAndAdd$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ delta) {\n@@ -500,1 +500,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -511,1 +511,1 @@\n-    public $type$ getAndBitwiseOr$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -520,1 +520,1 @@\n-    private $type$ getAndBitwiseOr$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -523,1 +523,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -532,1 +532,1 @@\n-    public $type$ getAndBitwiseOr$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -541,1 +541,1 @@\n-    private $type$ getAndBitwiseOr$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -544,1 +544,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -553,1 +553,1 @@\n-    public $type$ getAndBitwiseOr$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseOr$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -562,1 +562,1 @@\n-    private $type$ getAndBitwiseOr$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseOr$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -565,1 +565,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -574,1 +574,1 @@\n-    public $type$ getAndBitwiseAnd$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -583,1 +583,1 @@\n-    private $type$ getAndBitwiseAnd$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -586,1 +586,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -595,1 +595,1 @@\n-    public $type$ getAndBitwiseAnd$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -604,1 +604,1 @@\n-    private $type$ getAndBitwiseAnd$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -607,1 +607,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -616,1 +616,1 @@\n-    public $type$ getAndBitwiseAnd$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseAnd$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -625,1 +625,1 @@\n-    private $type$ getAndBitwiseAnd$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseAnd$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -628,1 +628,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -637,1 +637,1 @@\n-    public $type$ getAndBitwiseXor$Type$(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -646,1 +646,1 @@\n-    private $type$ getAndBitwiseXor$Type$Internal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$Internal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -649,1 +649,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -658,1 +658,1 @@\n-    public $type$ getAndBitwiseXor$Type$Acquire(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$Acquire(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -667,1 +667,1 @@\n-    private $type$ getAndBitwiseXor$Type$AcquireInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$AcquireInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -670,1 +670,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -679,1 +679,1 @@\n-    public $type$ getAndBitwiseXor$Type$Release(MemorySession session, Object base, long offset, $type$ value) {\n+    public $type$ getAndBitwiseXor$Type$Release(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -688,1 +688,1 @@\n-    private $type$ getAndBitwiseXor$Type$ReleaseInternal(MemorySession session, Object base, long offset, $type$ value) {\n+    private $type$ getAndBitwiseXor$Type$ReleaseInternal(MemorySessionImpl session, Object base, long offset, $type$ value) {\n@@ -691,1 +691,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess-bin.java.template","additions":99,"deletions":99,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.foreign.MemorySession;\n@@ -51,1 +50,1 @@\n- * class accept one or more {@link MemorySession} parameter, which is used to validate as to whether access to memory\n+ * class accept one or more {@link MemorySessionImpl} parameter, which is used to validate as to whether access to memory\n@@ -62,1 +61,1 @@\n- * {@link MemorySession#close()} method. This method initiates thread-local handshakes with all the other VM threads,\n+ * {@link MemorySessionImpl#close()} method. This method initiates thread-local handshakes with all the other VM threads,\n@@ -88,1 +87,1 @@\n-    public void closeScope(MemorySession session) {\n+    public void closeScope(MemorySessionImpl session) {\n@@ -92,1 +91,1 @@\n-    native void closeScope0(MemorySession session);\n+    native void closeScope0(MemorySessionImpl session);\n@@ -118,1 +117,1 @@\n-    public void copyMemory(MemorySession srcScope, MemorySession dstScope,\n+    public void copyMemory(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -130,1 +129,1 @@\n-    private void copyMemoryInternal(MemorySession srcScope, MemorySession dstScope,\n+    private void copyMemoryInternal(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -136,1 +135,1 @@\n-                ((MemorySessionImpl)srcScope).checkValidState();\n+                srcScope.checkValidState();\n@@ -139,1 +138,1 @@\n-                ((MemorySessionImpl)dstScope).checkValidState();\n+                dstScope.checkValidState();\n@@ -149,1 +148,1 @@\n-    public void copySwapMemory(MemorySession srcScope, MemorySession dstScope,\n+    public void copySwapMemory(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -161,1 +160,1 @@\n-    private void copySwapMemoryInternal(MemorySession srcScope, MemorySession dstScope,\n+    private void copySwapMemoryInternal(MemorySessionImpl srcScope, MemorySessionImpl dstScope,\n@@ -167,1 +166,1 @@\n-                ((MemorySessionImpl)srcScope).checkValidState();\n+                srcScope.checkValidState();\n@@ -170,1 +169,1 @@\n-                ((MemorySessionImpl)dstScope).checkValidState();\n+                dstScope.checkValidState();\n@@ -180,1 +179,1 @@\n-    public void setMemory(MemorySession session, Object o, long offset, long bytes, byte value) {\n+    public void setMemory(MemorySessionImpl session, Object o, long offset, long bytes, byte value) {\n@@ -189,1 +188,1 @@\n-    private void setMemoryInternal(MemorySession session, Object o, long offset, long bytes, byte value) {\n+    private void setMemoryInternal(MemorySessionImpl session, Object o, long offset, long bytes, byte value) {\n@@ -192,1 +191,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -201,1 +200,1 @@\n-    public int vectorizedMismatch(MemorySession aScope, MemorySession bScope,\n+    public int vectorizedMismatch(MemorySessionImpl aScope, MemorySessionImpl bScope,\n@@ -214,1 +213,1 @@\n-    private int vectorizedMismatchInternal(MemorySession aScope, MemorySession bScope,\n+    private int vectorizedMismatchInternal(MemorySessionImpl aScope, MemorySessionImpl bScope,\n@@ -221,1 +220,1 @@\n-                ((MemorySessionImpl)aScope).checkValidState();\n+                aScope.checkValidState();\n@@ -224,1 +223,1 @@\n-                ((MemorySessionImpl)bScope).checkValidState();\n+                bScope.checkValidState();\n@@ -234,1 +233,1 @@\n-    public boolean isLoaded(MemorySession session, long address, boolean isSync, long size) {\n+    public boolean isLoaded(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -243,1 +242,1 @@\n-    public boolean isLoadedInternal(MemorySession session, long address, boolean isSync, long size) {\n+    public boolean isLoadedInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -246,1 +245,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -255,1 +254,1 @@\n-    public void load(MemorySession session, long address, boolean isSync, long size) {\n+    public void load(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -264,1 +263,1 @@\n-    public void loadInternal(MemorySession session, long address, boolean isSync, long size) {\n+    public void loadInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -267,1 +266,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -276,1 +275,1 @@\n-    public void unload(MemorySession session, long address, boolean isSync, long size) {\n+    public void unload(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -285,1 +284,1 @@\n-    public void unloadInternal(MemorySession session, long address, boolean isSync, long size) {\n+    public void unloadInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n@@ -288,1 +287,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -297,1 +296,1 @@\n-    public void force(MemorySession session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void force(MemorySessionImpl session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -306,1 +305,1 @@\n-    public void forceInternal(MemorySession session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void forceInternal(MemorySessionImpl session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -309,1 +308,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -346,1 +345,1 @@\n-        static MemorySession session(ByteBuffer bb) {\n+        static MemorySessionImpl session(ByteBuffer bb) {\n@@ -349,1 +348,1 @@\n-                    ((AbstractMemorySegmentImpl)segment).session() : null;\n+                    ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n@@ -381,1 +380,1 @@\n-    V loadFromByteBufferScoped(MemorySession session,\n+    V loadFromByteBufferScoped(MemorySessionImpl session,\n@@ -388,1 +387,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -426,1 +425,1 @@\n-    V loadFromByteBufferMaskedScoped(MemorySession session, Class<? extends V> vmClass,\n+    V loadFromByteBufferMaskedScoped(MemorySessionImpl session, Class<? extends V> vmClass,\n@@ -433,1 +432,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -468,1 +467,1 @@\n-    void storeIntoByteBufferScoped(MemorySession session,\n+    void storeIntoByteBufferScoped(MemorySessionImpl session,\n@@ -475,1 +474,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n@@ -513,1 +512,1 @@\n-    void storeIntoByteBufferMaskedScoped(MemorySession session,\n+    void storeIntoByteBufferMaskedScoped(MemorySessionImpl session,\n@@ -520,1 +519,1 @@\n-                ((MemorySessionImpl)session).checkValidState();\n+                session.checkValidState();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":41,"deletions":42,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-                { (Supplier<MemorySession>) MemorySession::global}\n+                { (Supplier<MemorySession>) MemorySession::global},\n@@ -362,2 +362,3 @@\n-        ((MemorySessionImpl)parent).acquire0();\n-        child.addCloseAction(() -> ((MemorySessionImpl)parent).release0());\n+        MemorySessionImpl sessionImpl = (MemorySessionImpl)parent;\n+        sessionImpl.acquire0();\n+        child.addCloseAction(sessionImpl::release0);\n","filename":"test\/jdk\/java\/foreign\/TestMemorySession.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -292,0 +292,12 @@\n+    @Test\n+    public void testSegmentAccessorWithWrappedLifetime() {\n+        MemorySession session = MemorySession.openConfined();\n+        MemorySession publicSession = session.asNonCloseable();\n+        assertEquals(session, publicSession);\n+        MemorySegment segment = publicSession.allocate(100);\n+        assertThrows(UnsupportedOperationException.class, publicSession::close);\n+        assertThrows(UnsupportedOperationException.class, segment.session()::close);\n+        session.close();\n+        assertFalse(publicSession.isAlive());\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}