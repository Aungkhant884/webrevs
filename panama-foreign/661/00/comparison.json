{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -303,1 +304,1 @@\n-     * {@return a non-closeable view of the memory session associated with this memory segment}\n+     * {@return the memory session associated with this memory segment}\n@@ -857,1 +858,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize, Scoped.toSessionImpl(session));\n+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(address, bytesSize, (MemorySessionImpl)session);\n@@ -881,1 +882,1 @@\n-        return allocateNative(layout.byteSize(), layout.byteAlignment(), Scoped.toSessionImpl(session));\n+        return allocateNative(layout.byteSize(), layout.byteAlignment(), (MemorySessionImpl)session);\n@@ -935,1 +936,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, Scoped.toSessionImpl(session));\n+        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, (MemorySessionImpl)session);\n@@ -982,1 +983,1 @@\n-        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, Scoped.toSessionImpl(session));\n+        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, (MemorySessionImpl)session);\n@@ -1084,1 +1085,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.sessionImpl(), dstImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.session(), dstImpl.session(),\n@@ -1088,1 +1089,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.sessionImpl(), dstImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.session(), dstImpl.session(),\n@@ -1800,1 +1801,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.sessionImpl(), null,\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.session(), null,\n@@ -1804,1 +1805,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.sessionImpl(), null,\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.session(), null,\n@@ -1849,1 +1850,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(null, destImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(null, destImpl.session(),\n@@ -1853,1 +1854,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(null, destImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(null, destImpl.session(),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-public sealed interface MemorySession extends AutoCloseable, SegmentAllocator permits MemorySessionImpl, MemorySessionImpl.NonCloseableView {\n+public sealed interface MemorySession extends AutoCloseable, SegmentAllocator permits MemorySessionImpl {\n@@ -172,3 +172,1 @@\n-     * object is also a memory session, and it refers to the same memory session as this memory session. This method\n-     * is especially useful when operating on non-closeable views of memory sessions, such as the ones returned\n-     * by {@link MemorySegment#session()}.\n+     * object is also a memory session, and it refers to the same memory session as this memory session.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n-        return new ArenaAllocator(blockSize, arenaSize, Scoped.toSessionImpl(session));\n+        return new ArenaAllocator(blockSize, arenaSize, session);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.foreign.Scoped;\n@@ -67,1 +66,1 @@\n-     * {@return a non-closeable view of the memory session associated with this variable argument list}\n+     * {@return a the memory session associated with this variable argument list}\n@@ -190,1 +189,1 @@\n-        return SharedUtils.newVaListOfAddress(address, Scoped.toSessionImpl(session));\n+        return SharedUtils.newVaListOfAddress(address, session);\n@@ -213,1 +212,1 @@\n-        return SharedUtils.newVaList(actions, Scoped.toSessionImpl(session));\n+        return SharedUtils.newVaList(actions, session);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -619,1 +619,1 @@\n-                    ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n+                    ((AbstractMemorySegmentImpl)segment).session() : null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.sessionImpl(),\n+        $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.session(),\n@@ -138,1 +138,1 @@\n-        return SCOPED_MEMORY_ACCESS.get$Type$(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.get$Type$(bb.session(),\n@@ -142,1 +142,1 @@\n-        return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.session(),\n@@ -155,1 +155,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.session(),\n@@ -162,1 +162,1 @@\n-        SCOPED_MEMORY_ACCESS.put$Type$(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$Type$(bb.session(),\n@@ -167,1 +167,1 @@\n-        SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.session(),\n@@ -181,1 +181,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),\n@@ -190,1 +190,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.session(),\n@@ -201,1 +201,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.session(),\n@@ -210,1 +210,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.session(),\n@@ -221,1 +221,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.session(),\n@@ -230,1 +230,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.session(),\n@@ -241,1 +241,1 @@\n-        return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.session(),\n@@ -252,1 +252,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.session(),\n@@ -263,1 +263,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.session(),\n@@ -274,1 +274,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.session(),\n@@ -284,1 +284,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.session(),\n@@ -294,1 +294,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),\n@@ -304,1 +304,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.session(),\n@@ -314,1 +314,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.session(),\n@@ -325,1 +325,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.session(),\n@@ -336,1 +336,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.session(),\n@@ -347,1 +347,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.session(),\n@@ -360,1 +360,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.session(),\n@@ -374,1 +374,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.session(),\n@@ -388,1 +388,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.session(),\n@@ -402,1 +402,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n@@ -404,1 +404,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n@@ -416,1 +416,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.session(),\n@@ -430,1 +430,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.session(),\n@@ -444,1 +444,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.session(),\n@@ -458,1 +458,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n@@ -460,1 +460,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n@@ -470,1 +470,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.session(),\n@@ -484,1 +484,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.session(),\n@@ -498,1 +498,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.session(),\n@@ -512,1 +512,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n@@ -514,1 +514,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n@@ -525,1 +525,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.session(),\n@@ -539,1 +539,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.session(),\n@@ -553,1 +553,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.session(),\n@@ -567,1 +567,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.session(),base, offset);\n@@ -569,1 +569,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.session(),base, offset,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -763,1 +763,1 @@\n-            return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n+            return ((AbstractMemorySegmentImpl)segment).session();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-    public MemorySessionImpl sessionImpl() {\n+    public MemorySessionImpl session() {\n@@ -402,5 +402,0 @@\n-    @Override\n-    public MemorySession session() {\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    public MemorySessionImpl sessionImpl() {\n+    public MemorySessionImpl session() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-public abstract non-sealed class MemorySessionImpl implements MemorySession, Scoped, SegmentAllocator {\n+public abstract non-sealed class MemorySessionImpl implements MemorySession, SegmentAllocator {\n@@ -82,4 +82,0 @@\n-    public MemorySessionImpl sessionImpl() {\n-        return this;\n-    }\n-\n@@ -143,2 +139,1 @@\n-        return (o instanceof MemorySession other) &&\n-            ((Scoped)other).sessionImpl() == this;\n+        return o == this;\n@@ -324,57 +319,0 @@\n-    \/**\n-     * This is a non-closeable view of another memory session. Instances of this class are used in resource session\n-     * accessors (see {@link MemorySegment#session()}). This class forwards all session methods to the underlying\n-     * \"root\" session implementation, and throws {@link UnsupportedOperationException} on close.\n-     *\/\n-    public final static class NonCloseableView implements MemorySession, Scoped {\n-        final MemorySessionImpl session;\n-\n-        public NonCloseableView(MemorySessionImpl session) {\n-            this.session = session;\n-        }\n-\n-        public MemorySessionImpl sessionImpl() {\n-            return session;\n-        }\n-\n-        @Override\n-        public boolean isAlive() {\n-            return session.isAlive();\n-        }\n-\n-        @Override\n-        public boolean isCloseable() {\n-            return false;\n-        }\n-\n-        @Override\n-        public Thread ownerThread() {\n-            return session.ownerThread();\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            return session.equals(o);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return session.hashCode();\n-        }\n-\n-        @Override\n-        public void whileAlive(Runnable action) {\n-            session.whileAlive(action);\n-        }\n-\n-        @Override\n-        public void addCloseAction(Runnable runnable) {\n-            session.addCloseAction(runnable);\n-        }\n-\n-        @Override\n-        public void close() {\n-            throw new UnsupportedOperationException();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":2,"deletions":64,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.lang.foreign.MemorySession;\n-\n@@ -31,5 +29,1 @@\n-    MemorySessionImpl sessionImpl();\n-\n-    static MemorySessionImpl toSessionImpl(MemorySession session) {\n-        return ((Scoped)session).sessionImpl();\n-    }\n+    MemorySessionImpl session();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Scoped.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        MemorySegment symb =  arrangeUpcall(target, target.type(), function, Scoped.toSessionImpl(session));\n+        MemorySegment symb =  arrangeUpcall(target, target.type(), function, session);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-        emitInvokeInterface(Scoped.class, \"sessionImpl\", SESSION_IMPL_DESC);\n+        emitInvokeInterface(Scoped.class, \"session\", SESSION_IMPL_DESC);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -479,2 +479,2 @@\n-        public MemorySessionImpl sessionImpl() {\n-            return (MemorySessionImpl)MemorySession.global();\n+        public MemorySessionImpl session() {\n+            return MemorySessionImpl.GLOBAL;\n@@ -492,5 +492,0 @@\n-\n-        @Override\n-        public MemorySession session() {\n-            return MemorySessionImpl.GLOBAL;\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), sessionImpl());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), session());\n@@ -265,1 +265,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), sessionImpl());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), session());\n@@ -307,1 +307,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(ptr, layout.byteSize(), sessionImpl());\n+                    MemorySegment slice = MemorySegment.ofAddress(ptr, layout.byteSize(), session());\n@@ -357,7 +357,2 @@\n-    public MemorySessionImpl sessionImpl() {\n-        return Scoped.toSessionImpl(segment.session());\n-    }\n-\n-    @Override\n-    public MemorySession session() {\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+    public MemorySessionImpl session() {\n+        return (MemorySessionImpl)segment.session();\n@@ -368,1 +363,1 @@\n-        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, sessionImpl());\n+        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, session());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-                    MemorySegment struct = MemorySegment.ofAddress(structAddr, layout.byteSize(), sessionImpl());\n+                    MemorySegment struct = MemorySegment.ofAddress(structAddr, layout.byteSize(), session());\n@@ -158,7 +158,2 @@\n-    public MemorySessionImpl sessionImpl() {\n-        return Scoped.toSessionImpl(segment.session());\n-    }\n-\n-    @Override\n-    public MemorySession session() {\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+    public MemorySessionImpl session() {\n+        return (MemorySessionImpl)segment.session();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), sessionImpl());\n+                    MemorySegment slice = MemorySegment.ofAddress(stackPtr(), layout.byteSize(), session());\n@@ -309,7 +309,2 @@\n-    public MemorySessionImpl sessionImpl() {\n-        return Scoped.toSessionImpl(segment.session());\n-    }\n-\n-    @Override\n-    public MemorySession session() {\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+    public MemorySessionImpl session() {\n+        return (MemorySessionImpl)segment.session();\n@@ -320,1 +315,1 @@\n-        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, sessionImpl());\n+        MemorySegment copy = MemorySegment.allocateNative(LAYOUT, session());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -156,7 +156,2 @@\n-    public MemorySessionImpl sessionImpl() {\n-        return Scoped.toSessionImpl(segment.session());\n-    }\n-\n-    @Override\n-    public MemorySession session() {\n-        return new MemorySessionImpl.NonCloseableView(sessionImpl());\n+    public MemorySessionImpl session() {\n+        return (MemorySessionImpl)segment.session();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -349,1 +349,1 @@\n-                    ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n+                    ((AbstractMemorySegmentImpl)segment).session() : null;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,7 +77,7 @@\n-            MemorySession[] sessions = new MemorySession[] {\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared(),\n-                    MemorySession.openShared()\n+            MemorySegment[] segments = new MemorySegment[]{\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared()),\n+                    MemorySegment.allocateNative(POINT, MemorySession.openShared())\n@@ -86,1 +86,1 @@\n-            sessions[i].close();\n+            segments[i].session().close();\n@@ -89,1 +89,1 @@\n-                    assertFalse(sessions[j].isAlive());\n+                    assertFalse(segments[j].session().isAlive());\n@@ -91,1 +91,1 @@\n-                    assertTrue(sessions[j].isAlive());\n+                    assertTrue(segments[j].session().isAlive());\n@@ -95,2 +95,0 @@\n-                MemorySegment[] segments = Arrays.stream(sessions).map(session -> MemorySegment.allocateNative(POINT, session))\n-                        .toArray(MemorySegment[]::new);\n@@ -104,1 +102,1 @@\n-                    sessions[j].close(); \/\/ should succeed!\n+                    segments[j].session().close(); \/\/ should succeed!\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -139,3 +139,2 @@\n-        var session = MemorySession.openConfined();\n-        MemorySegment segment = MemorySegment.allocateNative(layout, session);\n-        session.close();\n+        MemorySegment segment = MemorySegment.allocateNative(layout, MemorySession.openConfined());\n+        segment.session().close();\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -267,2 +267,1 @@\n-        var session = MemorySession.openConfined();\n-        MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0L, 8, FileChannel.MapMode.READ_WRITE, session);\n+        MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0L, 8, FileChannel.MapMode.READ_WRITE, MemorySession.openConfined());\n@@ -270,1 +269,1 @@\n-        session.close();\n+        segment.session().close();\n@@ -660,2 +659,1 @@\n-        var session = MemorySession.openConfined();\n-        MemorySegment s1 = MemorySegment.allocateNative(JAVA_INT, session);\n+        MemorySegment s1 = MemorySegment.allocateNative(JAVA_INT, MemorySession.openConfined());\n@@ -665,1 +663,1 @@\n-        session.close();\n+        s1.session().close();\n@@ -697,2 +695,1 @@\n-            var session = sessionSupplier.get();\n-            MemorySegment segment = MemorySegment.allocateNative(10, session);\n+            MemorySegment segment = MemorySegment.allocateNative(10, sessionSupplier.get());\n@@ -703,1 +700,1 @@\n-            session.close();\n+            segment.session().close();\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -132,3 +132,2 @@\n-    public void testAccessModesOfFactories(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testAccessModesOfFactories(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -136,1 +135,7 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n+    }\n+\n+    static void tryClose(MemorySegment segment) {\n+        if (segment.session().isCloseable()) {\n+            segment.session().close();\n+        }\n@@ -141,11 +146,15 @@\n-        List<Supplier<SegmentFactory>> l = List.of(\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new byte[] { 0x00, 0x01, 0x02, 0x03 })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new char[] {'a', 'b', 'c', 'd' })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new double[] { 1d, 2d, 3d, 4d} )),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new float[] { 1.0f, 2.0f, 3.0f, 4.0f })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new int[] { 1, 2, 3, 4 })),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new long[] { 1l, 2l, 3l, 4l } )),\n-                () -> SegmentFactory.ofArray(() -> MemorySegment.ofArray(new short[] { 1, 2, 3, 4 } )),\n-                () -> SegmentFactory.ofImplicitSession(session -> MemorySegment.allocateNative(4, 8, session)),\n-                () -> SegmentFactory.ofImplicitSession(session -> MemorySegment.allocateNative(JAVA_INT, session)),\n-                () -> SegmentFactory.ofImplicitSession(session -> MemorySegment.allocateNative(4, session))\n+        List<Supplier<MemorySegment>> l = List.of(\n+                () -> MemorySegment.ofArray(new byte[] { 0x00, 0x01, 0x02, 0x03 }),\n+                () -> MemorySegment.ofArray(new char[] {'a', 'b', 'c', 'd' }),\n+                () -> MemorySegment.ofArray(new double[] { 1d, 2d, 3d, 4d} ),\n+                () -> MemorySegment.ofArray(new float[] { 1.0f, 2.0f, 3.0f, 4.0f }),\n+                () -> MemorySegment.ofArray(new int[] { 1, 2, 3, 4 }),\n+                () -> MemorySegment.ofArray(new long[] { 1l, 2l, 3l, 4l } ),\n+                () -> MemorySegment.ofArray(new short[] { 1, 2, 3, 4 } ),\n+                () -> MemorySegment.allocateNative(4, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(4, 8, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(JAVA_INT, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(4, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(4, 8, MemorySession.openImplicit()),\n+                () -> MemorySegment.allocateNative(JAVA_INT, MemorySession.openImplicit())\n+\n@@ -185,1 +194,1 @@\n-    public void testFill(Supplier<SegmentFactory> segmentFactorySupplier) {\n+    public void testFill(Supplier<MemorySegment> segmentSupplier) {\n@@ -189,2 +198,1 @@\n-            SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-            MemorySegment segment = segmentFactory.segment();\n+            MemorySegment segment = segmentSupplier.get();\n@@ -207,1 +215,1 @@\n-            segmentFactory.tryClose();\n+            tryClose(segment);\n@@ -212,4 +220,3 @@\n-    public void testFillClosed(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n-        segmentFactory.tryClose();\n+    public void testFillClosed(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n+        tryClose(segment);\n@@ -227,3 +234,2 @@\n-    public void testNativeSegments(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testNativeSegments(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -236,1 +242,1 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n@@ -240,3 +246,2 @@\n-    public void testFillIllegalAccessMode(Supplier<SegmentFactory> segmentFactorySupplier) {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testFillIllegalAccessMode(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -244,1 +249,1 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n@@ -248,3 +253,2 @@\n-    public void testFillThread(Supplier<SegmentFactory> segmentFactorySupplier) throws Exception {\n-        SegmentFactory segmentFactory = segmentFactorySupplier.get();\n-        MemorySegment segment = segmentFactory.segment();\n+    public void testFillThread(Supplier<MemorySegment> segmentSupplier) throws Exception {\n+        MemorySegment segment = segmentSupplier.get();\n@@ -271,1 +275,1 @@\n-        segmentFactory.tryClose();\n+        tryClose(segment);\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":39,"deletions":35,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-    MemorySession session;\n@@ -81,2 +80,1 @@\n-        session = MemorySession.openConfined();\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, session);\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openConfined());\n@@ -94,1 +92,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstant.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,0 @@\n-    MemorySession session;\n@@ -99,1 +98,1 @@\n-        segment = MemorySegment.mapFile(tempPath, 0L, ALLOC_SIZE, FileChannel.MapMode.READ_WRITE, session = MemorySession.openConfined());\n+        segment = MemorySegment.mapFile(tempPath, 0L, ALLOC_SIZE, FileChannel.MapMode.READ_WRITE, MemorySession.openConfined());\n@@ -105,1 +104,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantMapped.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-    MemorySession session;\n@@ -75,1 +74,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, session = MemorySession.openConfined());\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, MemorySession.openConfined());\n@@ -87,1 +86,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantShared.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-    MemorySession session;\n@@ -65,2 +64,1 @@\n-        session = MemorySession.openConfined();\n-        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, session);\n+        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, MemorySession.openConfined());\n@@ -73,2 +71,1 @@\n-    public void tearDown() {\n-        session.close();\n+    public void tearDown() { nativeSegment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverSlice.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-    MemorySession session;\n@@ -86,1 +85,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, session = MemorySession.openShared());\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, MemorySession.openShared());\n@@ -95,1 +94,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ParallelSum.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-    MemorySession session;\n@@ -66,1 +65,1 @@\n-        data = MemorySegment.allocateNative(JAVA_INT, session = MemorySession.openConfined());\n+        data = MemorySegment.allocateNative(JAVA_INT, MemorySession.openConfined());\n@@ -71,1 +70,1 @@\n-        session.close();\n+        data.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/VarHandleExact.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-    private final MemorySession session;\n@@ -67,2 +66,1 @@\n-        this.session = MemorySession.openConfined();\n-        this.segment = MemorySegment.allocateNative(LAYOUT, session);\n+        this.segment = MemorySegment.allocateNative(LAYOUT, MemorySession.openConfined());\n@@ -107,1 +105,1 @@\n-        session.close();\n+        segment.session().close();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}