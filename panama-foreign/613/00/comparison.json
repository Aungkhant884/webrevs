{"files":[{"patch":"@@ -94,1 +94,1 @@\n-                    Optional<Declaration.Constant> constant = macroParser.parseConstant(treeMaker.toPos(c), c.spelling(), tokens);\n+                    Optional<Declaration.Constant> constant = macroParser.parseConstant(TreeMaker.CursorPosition.of(c), c.spelling(), tokens);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/Parser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.jextract.Position;\n@@ -37,1 +36,0 @@\n-import java.nio.ByteOrder;\n@@ -154,1 +152,1 @@\n-            return Declaration.bitfield(new TreeMaker.CursorPosition(c), name, type, sublayout.withName(name));\n+            return Declaration.bitfield(TreeMaker.CursorPosition.of(c), name, type, sublayout.withName(name));\n@@ -158,1 +156,1 @@\n-            return Declaration.field(new TreeMaker.CursorPosition(c), name, type);\n+            return Declaration.field(TreeMaker.CursorPosition.of(c), name, type);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/RecordLayoutComputer.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        return jdk.incubator.jextract.Type.declared(Declaration.struct(new TreeMaker.CursorPosition(cursor), cursor.spelling(), g, fieldDecls.stream().toArray(Declaration[]::new)));\n+        return jdk.incubator.jextract.Type.declared(Declaration.struct(TreeMaker.CursorPosition.of(cursor), cursor.spelling(), g, fieldDecls.stream().toArray(Declaration[]::new)));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructLayoutComputer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.ByteOrder;\n@@ -112,12 +111,0 @@\n-    Position toPos(Cursor cursor) {\n-        SourceLocation loc = cursor.getSourceLocation();\n-        if (loc == null) {\n-            return Position.NO_POSITION;\n-        }\n-        SourceLocation.Location sloc = loc.getFileLocation();\n-        if (sloc == null) {\n-            return Position.NO_POSITION;\n-        }\n-        return new CursorPosition(cursor);\n-    }\n-\n@@ -130,1 +117,1 @@\n-        CursorPosition(Cursor cursor) {\n+        private CursorPosition(Cursor cursor) {\n@@ -138,0 +125,12 @@\n+        static Position of(Cursor cursor) {\n+            SourceLocation loc = cursor.getSourceLocation();\n+            if (loc == null) {\n+                return NO_POSITION;\n+            }\n+            SourceLocation.Location sloc = loc.getFileLocation();\n+            if (sloc == null) {\n+                return NO_POSITION;\n+            }\n+            return new CursorPosition(cursor);\n+        }\n+\n@@ -171,1 +170,1 @@\n-        return Declaration.function(toPos(c), c.spelling(), (Type.Function)funcType,\n+        return Declaration.function(CursorPosition.of(c), c.spelling(), (Type.Function)funcType,\n@@ -177,1 +176,1 @@\n-        return Declaration.constant(toPos(c), name, value, type);\n+        return Declaration.constant(CursorPosition.of(c), name, value, type);\n@@ -181,1 +180,1 @@\n-        return Declaration.constant(toPos(c), c.spelling(), c.getEnumConstantValue(), typeMaker.makeType(c.type()));\n+        return Declaration.constant(CursorPosition.of(c), c.spelling(), c.getEnumConstantValue(), typeMaker.makeType(c.type()));\n@@ -185,1 +184,1 @@\n-        return Declaration.toplevel(toPos(c), filterNestedDeclarations(decls).toArray(new Declaration[0]));\n+        return Declaration.toplevel(CursorPosition.of(c), filterNestedDeclarations(decls).toArray(new Declaration[0]));\n@@ -193,1 +192,1 @@\n-            return factoryLayout.make(toPos(c), c.spelling(), t.tree().layout().get(), decls.toArray(new Declaration[0]));\n+            return factoryLayout.make(CursorPosition.of(c), c.spelling(), t.tree().layout().get(), decls.toArray(new Declaration[0]));\n@@ -204,1 +203,1 @@\n-            return factoryNoLayout.make(toPos(c), c.spelling(), decls.toArray(new Declaration[0]));\n+            return factoryNoLayout.make(CursorPosition.of(c), c.spelling(), decls.toArray(new Declaration[0]));\n@@ -221,1 +220,1 @@\n-            return factoryLayout.make(toPos(c), c.spelling(), layout, decls.toArray(new Declaration[0]));\n+            return factoryLayout.make(CursorPosition.of(c), c.spelling(), layout, decls.toArray(new Declaration[0]));\n@@ -228,1 +227,1 @@\n-            return factoryNoLayout.make(toPos(c), c.spelling(), decls.toArray(new Declaration[0]));\n+            return factoryNoLayout.make(CursorPosition.of(c), c.spelling(), decls.toArray(new Declaration[0]));\n@@ -263,1 +262,1 @@\n-        return Declaration.typedef(toPos(c), c.spelling(), canonicalType);\n+        return Declaration.typedef(CursorPosition.of(c), c.spelling(), canonicalType);\n@@ -269,1 +268,1 @@\n-            return Declaration.bitfield(toPos(c), c.spelling(), toType(c),\n+            return Declaration.bitfield(CursorPosition.of(c), c.spelling(), toType(c),\n@@ -280,1 +279,1 @@\n-            return varFactory.make(toPos(c), c.spelling(), type);\n+            return varFactory.make(CursorPosition.of(c), c.spelling(), type);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TreeMaker.java","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        return jdk.incubator.jextract.Type.declared(Declaration.union(new TreeMaker.CursorPosition(cursor), cursor.spelling(), g, fieldDecls.stream().toArray(Declaration[]::new)));\n+        return jdk.incubator.jextract.Type.declared(Declaration.union(TreeMaker.CursorPosition.of(cursor), cursor.spelling(), g, fieldDecls.stream().toArray(Declaration[]::new)));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnionLayoutComputer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}