{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.ResourceScopeImpl;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -325,0 +326,1 @@\n+        ((ResourceScopeImpl)segment.scope()).checkValidStateSlow();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+        ((ResourceScopeImpl)scope).checkValidStateSlow();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -281,0 +282,1 @@\n+        ((ResourceScopeImpl)segment.scope()).checkValidStateSlow();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,0 +135,1 @@\n+        ((ResourceScopeImpl)scope).checkValidStateSlow();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.util.function.BiConsumer;\n@@ -49,0 +50,1 @@\n+import java.util.function.Supplier;\n@@ -51,0 +53,2 @@\n+import static jdk.incubator.foreign.ValueLayout.JAVA_INT;\n+import static jdk.incubator.foreign.ValueLayout.JAVA_LONG;\n@@ -71,1 +75,1 @@\n-    public void testOpAfterClose(String name, ScopedOperation scopedOperation) {\n+    public <Z> void testOpAfterClose(String name, ScopedOperation<Z> scopedOperation) {\n@@ -73,0 +77,1 @@\n+        Z obj = scopedOperation.apply(scope);\n@@ -75,1 +80,1 @@\n-            scopedOperation.accept(scope);\n+            scopedOperation.accept(obj);\n@@ -83,1 +88,1 @@\n-    public void testOpOutsideConfinement(String name, ScopedOperation scopedOperation) {\n+    public <Z> void testOpOutsideConfinement(String name, ScopedOperation<Z> scopedOperation) {\n@@ -85,0 +90,1 @@\n+            Z obj = scopedOperation.apply(scope);\n@@ -88,1 +94,1 @@\n-                    scopedOperation.accept(scope);\n+                    scopedOperation.accept(obj);\n@@ -122,1 +128,1 @@\n-        ScopedOperation.ofScope(scope -> VaList.make(b -> {}, scope), \"VaList::make\");\n+        ScopedOperation.ofScope(scope -> VaList.make(b -> b.addVarg(JAVA_INT, 42), scope), \"VaList::make\");\n@@ -128,1 +134,0 @@\n-        ScopedOperation.ofSegment(s -> MemoryLayout.sequenceLayout(s.byteSize(), JAVA_BYTE), \"MemorySegment::spliterator\");\n@@ -167,1 +172,1 @@\n-    static class ScopedOperation implements Consumer<ResourceScope> {\n+    static class ScopedOperation<X> implements Consumer<X>, Function<ResourceScope, X> {\n@@ -169,1 +174,2 @@\n-        final Consumer<ResourceScope> scopeConsumer;\n+        final Function<ResourceScope, X> factory;\n+        final Consumer<X> operation;\n@@ -172,2 +178,3 @@\n-        private ScopedOperation(Consumer<ResourceScope> scopeConsumer, String name) {\n-            this.scopeConsumer = scopeConsumer;\n+        private ScopedOperation(Function<ResourceScope, X> factory, Consumer<X> operation, String name) {\n+            this.factory = factory;\n+            this.operation = operation;\n@@ -178,2 +185,7 @@\n-        public void accept(ResourceScope scope) {\n-            scopeConsumer.accept(scope);\n+        public void accept(X obj) {\n+            operation.accept(obj);\n+        }\n+\n+        @Override\n+        public X apply(ResourceScope scope) {\n+            return factory.apply(scope);\n@@ -183,1 +195,1 @@\n-            scopedOperations.add(new ScopedOperation(scopeConsumer::accept, name));\n+            scopedOperations.add(new ScopedOperation<>(Function.identity(), scopeConsumer, name));\n@@ -187,4 +199,2 @@\n-            scopedOperations.add(new ScopedOperation(scope -> {\n-                VaList vaList = VaList.make((builder) -> {}, scope);\n-                vaListConsumer.accept(vaList);\n-            }, name));\n+            scopedOperations.add(new ScopedOperation<>(scope -> VaList.make(builder -> builder.addVarg(JAVA_LONG, 42), scope),\n+                    vaListConsumer, name));\n@@ -195,4 +205,4 @@\n-                scopedOperations.add(new ScopedOperation(scope -> {\n-                    MemorySegment segment = segmentFactory.segmentFactory.apply(scope);\n-                    segmentConsumer.accept(segment);\n-                }, segmentFactory.name() + \"\/\" + name));\n+                scopedOperations.add(new ScopedOperation<>(\n+                        segmentFactory.segmentFactory,\n+                        segmentConsumer,\n+                        segmentFactory.name() + \"\/\" + name));\n@@ -204,4 +214,4 @@\n-                scopedOperations.add(new ScopedOperation(scope -> {\n-                    SegmentAllocator allocator = allocatorFactory.allocatorFactory.apply(scope);\n-                    allocatorConsumer.accept(allocator);\n-                }, allocatorFactory.name() + \"\/\" + name));\n+                scopedOperations.add(new ScopedOperation<>(\n+                        allocatorFactory.allocatorFactory,\n+                        allocatorConsumer,\n+                        allocatorFactory.name() + \"\/\" + name));\n@@ -242,5 +252,1 @@\n-            ARENA_UNBOUNDED(SegmentAllocator::arenaUnbounded),\n-            FROM_SEGMENT(scope -> {\n-                MemorySegment segment = MemorySegment.allocateNative(10, scope);\n-                return SegmentAllocator.prefixAllocator(segment);\n-            });\n+            ARENA_UNBOUNDED(SegmentAllocator::arenaUnbounded);\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":36,"deletions":30,"binary":false,"changes":66,"status":"modified"}]}