{"files":[{"patch":"@@ -255,1 +255,3 @@\n-        if (type == float.class) {\n+        if (type == boolean.class) {\n+            buf.append(value);\n+        } else if (type == float.class) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.internal.clang.TypeKind;\n@@ -325,1 +326,6 @@\n-                        yield entry.success(typeMaker.makeType(decl.type()), value);\n+                        if (decl.type().spelling().equals(\"_Bool\")) {\n+                            \/\/ special case boolean constants\n+                            yield entry.success(typeMaker.makeType(decl.type()), value == 0L);\n+                        } else {\n+                            yield entry.success(typeMaker.makeType(decl.type()), value);\n+                        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/MacroParserImpl.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.jextract.Type.Primitive;\n@@ -44,1 +43,1 @@\n-            return layoutToClass(isFloatingPoint(t), t.kind().layout().orElseThrow(UnsupportedOperationException::new));\n+            return layoutToClass(t.kind().layout().orElseThrow(UnsupportedOperationException::new));\n@@ -48,22 +47,5 @@\n-    private boolean isFloatingPoint(Type.Primitive t) {\n-        switch (t.kind()) {\n-            case Float:\n-            case Float128:\n-            case HalfFloat:\n-            case Double:\n-            case LongDouble:\n-                return true;\n-            default:\n-                return false;\n-        }\n-    }\n-\n-    static Class<?> layoutToClass(boolean fp, MemoryLayout layout) {\n-        switch ((int)layout.bitSize()) {\n-            case 8: return byte.class;\n-            case 16: return short.class;\n-            case 32: return !fp ? int.class : float.class;\n-            case 64:\n-            case 128: return !fp ? long.class : double.class;\n-            default:\n-                throw new UnsupportedOperationException(\"size: \" + (int)layout.bitSize());\n+    static Class<?> layoutToClass(MemoryLayout layout) {\n+        if (layout instanceof ValueLayout valueLayout) {\n+            return valueLayout.carrier();\n+        } else {\n+            throw new UnsupportedOperationException(\"size: \" + (int)layout.bitSize());\n@@ -89,1 +71,1 @@\n-            case ENUM -> layoutToClass(false, t.tree().layout().orElseThrow(UnsupportedOperationException::new));\n+            case ENUM -> layoutToClass(t.tree().layout().orElseThrow(UnsupportedOperationException::new));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeTranslator.java","additions":7,"deletions":25,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                { \"BOOL_VALUE\", byte.class, equalsTo((byte)1) },\n+                { \"BOOL_VALUE\", boolean.class, equalsTo(false) },\n","filename":"test\/jdk\/tools\/jextract\/ConstantsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}