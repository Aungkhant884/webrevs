{"files":[{"patch":"@@ -77,1 +77,0 @@\n-    private static final String BINDING_CONTEXT_INTRN = Type.getInternalName(Binding.Context.class);\n@@ -83,2 +82,0 @@\n-\n-    private static final String ADDRESSABLE_INTRN = Type.getInternalName(Addressable.class);\n@@ -86,2 +83,0 @@\n-\n-    private static final String MEMORY_SEGMENT_INTRN = Type.getInternalName(MemorySegment.class);\n@@ -89,2 +84,0 @@\n-\n-    private static final String MEMORY_ADDRESS_INTRN = Type.getInternalName(MemoryAddress.class);\n@@ -93,2 +86,0 @@\n-\n-    private static final String MEMORY_ADDRESS_IMPL_INTRN = Type.getInternalName(MemoryAddressImpl.class);\n@@ -96,4 +87,0 @@\n-\n-    private static final String VALUE_LAYOUT_INTRN = Type.getInternalName(ValueLayout.class);\n-\n-    private static final String SEGMENT_ALLOCATOR_INTRN = Type.getInternalName(SegmentAllocator.class);\n@@ -101,4 +88,0 @@\n-\n-    private static final String RESOURCE_SCOPE_IMPL_INTRN = Type.getInternalName(ResourceScopeImpl.class);\n-\n-    private static final String SHARED_UTILS_INTRN = Type.getInternalName(SharedUtils.class);\n@@ -106,1 +89,0 @@\n-\n@@ -110,2 +92,0 @@\n-    private static final String METHOD_HANDLE_INTRN = Type.getInternalName(MethodHandle.class);\n-\n@@ -243,1 +223,1 @@\n-            emitInvokeStatic(BINDING_CONTEXT_INTRN, \"ofBoundedAllocator\", OF_BOUNDED_ALLOCATOR_DESC);\n+            emitInvokeStatic(Binding.Context.class, \"ofBoundedAllocator\", OF_BOUNDED_ALLOCATOR_DESC);\n@@ -245,1 +225,1 @@\n-            emitGetStatic(BINDING_CONTEXT_INTRN, \"DUMMY\", BINDING_CONTEXT_DESC);\n+            emitGetStatic(Binding.Context.class, \"DUMMY\", BINDING_CONTEXT_DESC);\n@@ -247,1 +227,1 @@\n-            emitInvokeStatic(BINDING_CONTEXT_INTRN, \"ofScope\", OF_SCOPE_DESC);\n+            emitInvokeStatic(Binding.Context.class, \"ofScope\", OF_SCOPE_DESC);\n@@ -310,1 +290,1 @@\n-        mv.visitTypeInsn(CHECKCAST, METHOD_HANDLE_INTRN);\n+        emitCheckCast(MethodHandle.class);\n@@ -316,1 +296,1 @@\n-        emitInvokeVirtual(METHOD_HANDLE_INTRN, \"invokeExact\", leafType.descriptorString());\n+        emitInvokeVirtual(MethodHandle.class, \"invokeExact\", leafType.descriptorString());\n@@ -367,1 +347,1 @@\n-           emitInvokeStatic(SHARED_UTILS_INTRN, \"handleUncaughtException\", HANDLE_UNCAUGHT_EXCEPTION_DESC);\n+           emitInvokeStatic(SharedUtils.class, \"handleUncaughtException\", HANDLE_UNCAUGHT_EXCEPTION_DESC);\n@@ -432,1 +412,1 @@\n-        emitInvokeVirtual(BINDING_CONTEXT_INTRN, \"scope\", SCOPE_DESC);\n+        emitInvokeVirtual(Binding.Context.class, \"scope\", SCOPE_DESC);\n@@ -438,1 +418,1 @@\n-        emitInvokeVirtual(BINDING_CONTEXT_INTRN, \"allocator\", ALLOCATOR_DESC);\n+        emitInvokeVirtual(Binding.Context.class, \"allocator\", ALLOCATOR_DESC);\n@@ -444,1 +424,1 @@\n-        emitInvokeVirtual(BINDING_CONTEXT_INTRN, \"close\", CLOSE_DESC);\n+        emitInvokeVirtual(Binding.Context.class, \"close\", CLOSE_DESC);\n@@ -454,2 +434,2 @@\n-        mv.visitTypeInsn(CHECKCAST, RESOURCE_SCOPE_IMPL_INTRN);\n-        emitInvokeStatic(MEMORY_ADDRESS_IMPL_INTRN, \"ofLongUnchecked\", OF_LONG_UNCHECKED_DESC);\n+        emitCheckCast(ResourceScopeImpl.class);\n+        emitInvokeStatic(MemoryAddressImpl.class, \"ofLongUnchecked\", OF_LONG_UNCHECKED_DESC);\n@@ -461,1 +441,1 @@\n-        emitInvokeInterface(MEMORY_ADDRESS_INTRN, \"toRawLongValue\", TO_RAW_LONG_VALUE_DESC);\n+        emitInvokeInterface(MemoryAddress.class, \"toRawLongValue\", TO_RAW_LONG_VALUE_DESC);\n@@ -466,1 +446,1 @@\n-        emitInvokeInterfaceStatic(MEMORY_ADDRESS_INTRN, \"ofLong\", OF_LONG_DESC);\n+        emitInvokeStatic(MemoryAddress.class, \"ofLong\", OF_LONG_DESC);\n@@ -495,1 +475,1 @@\n-        emitInvokeInterface(MEMORY_SEGMENT_INTRN, \"set\", descriptor);\n+        emitInvokeInterface(MemorySegment.class, \"set\", descriptor);\n@@ -498,1 +478,0 @@\n-    \/\/ VM_STORE and VM_LOAD are emulated, which is different for down\/upcalls\n@@ -500,0 +479,1 @@\n+    \/\/ VM_STORE and VM_LOAD are emulated, which is different for down\/upcalls\n@@ -522,1 +502,1 @@\n-                emitInvokeInterface(MEMORY_SEGMENT_INTRN, \"set\", descriptor);\n+                emitInvokeInterface(MemorySegment.class, \"set\", descriptor);\n@@ -527,0 +507,1 @@\n+\n@@ -540,1 +521,1 @@\n-                emitInvokeInterface(MEMORY_SEGMENT_INTRN, \"get\", descriptor);\n+                emitInvokeInterface(MemorySegment.class, \"get\", descriptor);\n@@ -549,1 +530,0 @@\n-\n@@ -558,1 +538,1 @@\n-        emitInvokeInterface(ADDRESSABLE_INTRN, \"address\", ADDRESS_DESC);\n+        emitInvokeInterface(Addressable.class, \"address\", ADDRESS_DESC);\n@@ -572,1 +552,1 @@\n-        emitInvokeInterface(MEMORY_SEGMENT_INTRN, \"get\", descriptor);\n+        emitInvokeInterface(MemorySegment.class, \"get\", descriptor);\n@@ -595,1 +575,1 @@\n-        emitInvokeInterfaceStatic(MEMORY_SEGMENT_INTRN, \"copy\", COPY_DESC);\n+        emitInvokeStatic(MemorySegment.class, \"copy\", COPY_DESC);\n@@ -604,1 +584,1 @@\n-        emitInvokeInterface(SEGMENT_ALLOCATOR_INTRN, \"allocate\", ALLOCATE_DESC);\n+        emitInvokeInterface(SegmentAllocator.class, \"allocate\", ALLOCATE_DESC);\n@@ -610,1 +590,1 @@\n-        emitGetStatic(VALUE_LAYOUT_INTRN, valueLayoutConstantName, valueLayoutType.descriptorString());\n+        emitGetStatic(ValueLayout.class, valueLayoutConstantName, valueLayoutType.descriptorString());\n@@ -662,2 +642,2 @@\n-    private void emitInvokeStatic(String ownerInternalName, String methodName, String descriptor) {\n-        mv.visitMethodInsn(INVOKESTATIC, ownerInternalName, methodName, descriptor, false);\n+    private void emitInvokeStatic(Class<?> owner, String methodName, String descriptor) {\n+        mv.visitMethodInsn(INVOKESTATIC, Type.getInternalName(owner), methodName, descriptor, owner.isInterface());\n@@ -666,2 +646,2 @@\n-    private void emitInvokeInterfaceStatic(String ownerInternalName, String methodName, String descriptor) {\n-        mv.visitMethodInsn(INVOKESTATIC, ownerInternalName, methodName, descriptor, true);\n+    private void emitInvokeInterface(Class<?> owner, String methodName, String descriptor) {\n+        mv.visitMethodInsn(INVOKEINTERFACE, Type.getInternalName(owner), methodName, descriptor, true);\n@@ -670,2 +650,2 @@\n-    private void emitInvokeInterface(String ownerInternalName, String methodName, String descriptor) {\n-        mv.visitMethodInsn(INVOKEINTERFACE, ownerInternalName, methodName, descriptor, true);\n+    private void emitInvokeVirtual(Class<?> owner, String methodName, String descriptor) {\n+        mv.visitMethodInsn(INVOKEVIRTUAL, Type.getInternalName(owner), methodName, descriptor, false);\n@@ -674,2 +654,2 @@\n-    private void emitInvokeVirtual(String ownerInternalName, String methodName, String descriptor) {\n-        mv.visitMethodInsn(INVOKEVIRTUAL, ownerInternalName, methodName, descriptor, false);\n+    private void emitGetStatic(Class<?> owner, String fieldName, String descriptor) {\n+        mv.visitFieldInsn(GETSTATIC, Type.getInternalName(owner), fieldName, descriptor);\n@@ -678,2 +658,2 @@\n-    private void emitGetStatic(String ownerInternalName, String fieldName, String descriptor) {\n-        mv.visitFieldInsn(GETSTATIC, ownerInternalName, fieldName, descriptor);\n+    private void emitCheckCast(Class<?> cls) {\n+        mv.visitTypeInsn(CHECKCAST, Type.getInternalName(cls));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":33,"deletions":53,"binary":false,"changes":86,"status":"modified"}]}