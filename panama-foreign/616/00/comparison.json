{"files":[{"patch":"@@ -169,1 +169,1 @@\n-        Type funcType = type instanceof Type.Delegated? ((Type.Delegated)type).type() : type;\n+        Type funcType = canonicalType(type);\n@@ -252,3 +252,1 @@\n-        Type canonicalType = cursorType instanceof Type.Function\n-            ? cursorType\n-            : ((Type.Delegated) cursorType).type(); \/\/ normal typedef\n+        Type canonicalType = canonicalType(cursorType);\n@@ -265,0 +263,9 @@\n+    private Type canonicalType(Type t) {\n+        if (t instanceof Type.Delegated delegated &&\n+           delegated.kind() == Type.Delegated.Kind.TYPEDEF) {\n+            return delegated.type();\n+        } else {\n+            return t;\n+        }\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TreeMaker.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library \/test\/lib\n+ * @build BadBitfieldTest\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract BadBitfieldTest\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+public class TestAttributedPointerTypedef extends JextractToolRunner {\n+    @Test\n+    public void testBadBitfield() {\n+        run(\"-C-fms-extensions\", \"-d\", getOutputFilePath(\"attributedPointerTypedef\").toString(),\n+                getInputFilePath(\"attributedPointerTypedef.h\").toString()).checkSuccess();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/TestAttributedPointerTypedef.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -24,1 +24,2 @@\n-typedef int* int_ptr_t;\n+#define POINTER_64 __ptr64\n+typedef void * POINTER_64 PVOID_64;\n@@ -26,5 +27,2 @@\n-struct Point {\n-    int x, y;\n-};\n-\n-typedef struct Point* point_ptr_t;\n+#define CONST const\n+typedef void * CONST PVOID_CONST;\n","filename":"test\/jdk\/tools\/jextract\/attributedPointerTypedef.h","additions":4,"deletions":6,"binary":false,"changes":10,"previous_filename":"test\/jdk\/tools\/jextract\/test8273382.h","status":"copied"}]}