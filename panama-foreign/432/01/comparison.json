{"files":[{"patch":"@@ -102,0 +102,6 @@\n+        builder.append(\"var mh$ = RuntimeHelper.requireNonNull(\");\n+        builder.append(methodHandleGetCallString(javaName, nativeName, mtype, desc, varargs));\n+        builder.append(\", \\\"unresolved symbol: \");\n+        builder.append(nativeName);\n+        builder.append(\"\\\");\\n\");\n+        builder.indent();\n@@ -108,1 +114,1 @@\n-        builder.append(methodHandleGetCallString(javaName, nativeName, mtype, desc, varargs) + \".invokeExact(\" + String.join(\", \", pExprs) + \");\\n\");\n+        builder.append(\"mh$.invokeExact(\" + String.join(\", \", pExprs) + \");\\n\");\n@@ -111,1 +117,1 @@\n-        builder.append(\"} catch (Throwable ex) {\\n\");\n+        builder.append(\"} catch (Throwable ex$) {\\n\");\n@@ -114,1 +120,1 @@\n-        builder.append(\"throw new AssertionError(ex);\\n\");\n+        builder.append(\"throw new AssertionError(\\\"should not reach here\\\", ex$);\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -132,1 +132,2 @@\n-        emitForwardGetter(constantHelper.addMethodHandle(javaName, nativeName, mtype, desc, varargs), \"\");\n+        emitForwardGetter(constantHelper.addMethodHandle(javaName, nativeName, mtype, desc, varargs), \"\",\n+            true, \"unresolved symbol: \" + nativeName);\n@@ -136,1 +137,2 @@\n-        emitForwardGetter(constantHelper.addSegment(javaName, nativeName, layout), \"\");\n+        emitForwardGetter(constantHelper.addSegment(javaName, nativeName, layout), \"\",\n+            true, \"unresolved symbol: \" + nativeName);\n@@ -150,2 +152,7 @@\n-        builder.append(\"return (\" + type.getName() + \")\"\n-                + globalVarHandleGetCallString(javaName, nativeName, layout, type) + \".get(\" + vhParam + \");\\n\");\n+        builder.append(\"return (\" + type.getName() + \") \");\n+        builder.append(globalVarHandleGetCallString(javaName, nativeName, layout, type));\n+        builder.append(\".get(RuntimeHelper.requireNonNull(\");\n+        builder.append(vhParam);\n+        builder.append(\", \\\"unresolved symbol: \");\n+        builder.append(nativeName);\n+        builder.append(\"\\\"));\\n\");\n@@ -165,1 +172,6 @@\n-        builder.append(globalVarHandleGetCallString(javaName, nativeName, layout, type) + \".set(\" + vhParam + \", x);\\n\");\n+        builder.append(globalVarHandleGetCallString(javaName, nativeName, layout, type));\n+        builder.append(\".set(RuntimeHelper.requireNonNull(\");\n+        builder.append(vhParam);\n+        builder.append(\", \\\"unresolved symbol: \");\n+        builder.append(nativeName);\n+        builder.append(\"\\\"), x);\\n\");\n@@ -187,0 +199,1 @@\n+        builder.append(\"import java.util.Objects;\\n\");\n@@ -195,0 +208,4 @@\n+        emitForwardGetter(desc, anno, false, \"\");\n+    }\n+\n+    protected void emitForwardGetter(DirectMethodHandleDesc desc, String anno, boolean nullCheck, String errMsg) {\n@@ -200,1 +217,11 @@\n-        builder.append(\"return \" + getCallString(desc) + \";\\n\");\n+        builder.append(\"return \");\n+        if (nullCheck) {\n+            builder.append(\"RuntimeHelper.requireNonNull(\");\n+        }\n+        builder.append(getCallString(desc));\n+        if (nullCheck) {\n+            builder.append(\",\\\"\");\n+            builder.append(errMsg);\n+            builder.append(\"\\\")\");\n+        }\n+        builder.append(\";\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/JavaSourceBuilder.java","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,0 +29,7 @@\n+    static <T> T requireNonNull(T obj, String msg) {\n+        if (obj == null) {\n+            throw new UnsatisfiedLinkError(msg);\n+        }\n+        return obj;\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.NativeScope;\n+import org.testng.annotations.Test;\n+import test.jextract.test8259473.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+import static test.jextract.test8259473.test8259473_h.*;\n+\n+\/*\n+ * @test id=classes\n+ * @bug 8259473\n+ * @summary jextract generated code should throw exception for unfound native symbols from calls, variable access, set immediately\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run driver JtregJextract -t test.jextract.test8259473 -- test8259473.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibTest8259473Test\n+ *\/\n+\/*\n+ * @test id=sources\n+ * @bug 8259473\n+ * @summary jextract generated code should throw exception for unfound native symbols from calls, variable access, set immediately\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run driver JtregJextractSources -t test.jextract.test8259473 -- test8259473.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibTest8259473Test\n+ *\/\n+public class LibTest8259473Test {\n+    @Test\n+    public void nullChecksTest() {\n+        try {\n+            func();\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            assertTrue(ule.getMessage().contains(\"unresolved symbol: func\"));\n+        }\n+\n+        try {\n+            func$MH();\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            assertTrue(ule.getMessage().contains(\"unresolved symbol: func\"));\n+        }\n+\n+        try {\n+            x$get();\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            assertTrue(ule.getMessage().contains(\"unresolved symbol: x\"));\n+        }\n+\n+        try {\n+            x$set(1);\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            assertTrue(ule.getMessage().contains(\"unresolved symbol: x\"));\n+        }\n+\n+        try {\n+            x$SEGMENT();\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            assertTrue(ule.getMessage().contains(\"unresolved symbol: x\"));\n+        }\n+\n+        try {\n+            y$SEGMENT();\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            assertTrue(ule.getMessage().contains(\"unresolved symbol: y\"));\n+        }\n+\n+        try {\n+            pt$SEGMENT();\n+            throw new AssertionError(\"should not reach here\");\n+        } catch (UnsatisfiedLinkError ule) {\n+            assertTrue(ule.getMessage().contains(\"unresolved symbol: pt\"));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8259473\/LibTest8259473Test.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif \/\/ __cplusplus\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+void func();\n+extern int x;\n+extern int y[10];\n+\n+struct Point {\n+    int x;\n+    int y;\n+};\n+\n+extern struct Point pt;\n+\n+#ifdef __cplusplus\n+}\n+#endif \/\/ __cplusplus\n","filename":"test\/jdk\/tools\/jextract\/test8259473\/test8259473.h","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}