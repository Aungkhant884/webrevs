{"files":[{"patch":"@@ -61,0 +61,3 @@\n+     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n+     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n+     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n@@ -67,23 +70,0 @@\n-        return loaderLookup0(loader);\n-    }\n-\n-    \/**\n-     * Obtains a symbol lookup suitable to find symbols in native libraries associated with the given classloader\n-     * (that is, libraries loaded using {@link System#loadLibrary} or {@link System#load}).\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n-     *\n-     * @param loader the classloader whose symbol lookup is to be retrieved.\n-     * @return a symbol lookup suitable to find symbols in libraries loaded by given classloader.\n-     *\/\n-    @CallerSensitive\n-    static SymbolLookup loaderLookup(ClassLoader loader) {\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n-        Objects.requireNonNull(loader);\n-        return loaderLookup0(loader);\n-    }\n-\n-    private static SymbolLookup loaderLookup0(ClassLoader loader) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SymbolLookup.java","additions":3,"deletions":23,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -43,0 +43,4 @@\n+    \/*\n+     * On POSIX systems, dlsym will allow us to lookup symbol in library dependencies; the same trick doesn't work\n+     * on Windows. For this reason, on Windows we do not generate any side-library, and load msvcrt.dll directly instead.\n+     *\/\n@@ -46,1 +50,1 @@\n-                .loadLibrary(Path.of(System.getenv(\"SystemRoot\"), \"System32\", \"msvcrt.dll\").toString());\n+                .loadLibrary(null, Path.of(System.getenv(\"SystemRoot\"), \"System32\", \"msvcrt.dll\").toFile());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}