{"files":[{"patch":"@@ -142,0 +142,10 @@\n+    public void copyFromSwap(MemorySegment src, long elemSize) {\n+        AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl)src;\n+        long size = that.byteSize();\n+        checkAccess(0, size, false);\n+        that.checkAccess(0, size, true);\n+        SCOPED_MEMORY_ACCESS.copySwapMemory(scope, that.scope,\n+                that.base(), that.min(),\n+                base(), min(), size, elemSize);\n+    }\n+\n@@ -276,0 +286,1 @@\n+<<<<<<< HEAD\n@@ -284,0 +295,18 @@\n+=======\n+    @Override\n+    public MemorySegment withOwnerThread(Thread newOwner) {\n+        return withOwnerThreadInternal(newOwner, true);\n+    }\n+\n+    public MemorySegment withOwnerThreadInternal(Thread newOwner, boolean strict) {\n+        checkValidState();\n+        int expectedMode = newOwner != null ? HANDOFF : SHARE;\n+        if (strict && !isSet(expectedMode)) {\n+            throw unsupportedAccessMode(expectedMode);\n+        }\n+        try {\n+            return dup(0L, length, mask,\n+                    expectedMode == HANDOFF ?\n+                            scope.confineTo(newOwner, strict) :\n+                            scope.share());\n+>>>>>>> 36c8aa755c9b2e8ce0cb8d60fbcb8bf0ee9fc77d\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+<<<<<<< HEAD\n@@ -102,0 +103,9 @@\n+=======\n+    public static MemorySegment ofLongUnchecked(long value) {\n+        return ofLongUnchecked(value, Long.MAX_VALUE);\n+    }\n+\n+    public static MemorySegment ofLongUnchecked(long value, long byteSize) {\n+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(MemoryAddress.ofLong(value), byteSize)\n+                .withOwnerThread(null);\n+>>>>>>> 36c8aa755c9b2e8ce0cb8d60fbcb8bf0ee9fc77d\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+<<<<<<< HEAD\n@@ -115,0 +116,7 @@\n+=======\n+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize) {\n+        return makeNativeSegmentUnchecked(min, bytesSize, null);\n+    }\n+\n+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Object attachment) {\n+>>>>>>> 36c8aa755c9b2e8ce0cb8d60fbcb8bf0ee9fc77d\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n@@ -31,0 +30,1 @@\n+import jdk.incubator.foreign.CLinker;\n@@ -144,2 +144,7 @@\n-    public static native long allocate(int size);\n-    public static native void free(long address);\n+    public static MemoryAddress allocate(int size) {\n+        return CLinker.allocateMemoryRestricted(size);\n+    }\n+\n+    public static void free(MemoryAddress addr) {\n+        CLinker.freeMemoryRestricted(addr);\n+    }\n@@ -169,0 +174,1 @@\n+<<<<<<< HEAD\n@@ -171,0 +177,5 @@\n+=======\n+        MemoryAddress addr = allocate(12);\n+        MemorySegment mallocSegment = addr.asSegmentRestricted(12)\n+                .withCleanupAction(() -> free(addr));\n+>>>>>>> 36c8aa755c9b2e8ce0cb8d60fbcb8bf0ee9fc77d\n@@ -186,0 +197,1 @@\n+<<<<<<< HEAD\n@@ -188,0 +200,5 @@\n+=======\n+        MemoryAddress addr = allocate(12);\n+        MemorySegment mallocSegment = addr.asSegmentRestricted(12)\n+                .withCleanupAction(() -> free(addr));\n+>>>>>>> 36c8aa755c9b2e8ce0cb8d60fbcb8bf0ee9fc77d\n@@ -195,1 +212,1 @@\n-        MemoryAddress addr = MemoryAddress.ofLong(allocate(4));\n+        MemoryAddress addr = allocate(4);\n@@ -199,1 +216,1 @@\n-        free(addr.toRawLongValue());\n+        free(addr);\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"}]}