{"files":[{"patch":"@@ -119,22 +119,33 @@\n-        return fd != null ?\n-                new UnmapperProxy() {\n-                    @Override\n-                    public long address() {\n-                        return address;\n-                    }\n-\n-                    @Override\n-                    public FileDescriptor fileDescriptor() {\n-                        return fd;\n-                    }\n-\n-                    @Override\n-                    public boolean isSync() {\n-                        return isSync;\n-                    }\n-\n-                    @Override\n-                    public void unmap() {\n-                        Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n-                    }\n-                } : null;\n+        return fd == null\n+                ? null\n+                : new BufferUnmapperProxy(address);\n+    }\n+\n+    private final class BufferUnmapperProxy implements UnmapperProxy {\n+\n+        \/\/ Ensure safe publication as MappedByteBuffer.this.address is not final\n+        private final long addr;\n+\n+        BufferUnmapperProxy(long address) {\n+            this.addr = address;\n+        }\n+\n+        @Override\n+        public long address() {\n+            return addr;\n+        }\n+\n+        @Override\n+        public FileDescriptor fileDescriptor() {\n+            return fd;\n+        }\n+\n+        @Override\n+        public boolean isSync() {\n+            return isSync;\n+        }\n+\n+        @Override\n+        public void unmap() {\n+            Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java","additions":33,"deletions":22,"binary":false,"changes":55,"status":"modified"}]}