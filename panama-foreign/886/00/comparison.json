{"files":[{"patch":"@@ -108,2 +108,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireLayoutType(SequenceLayout.class);\n@@ -115,2 +114,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireLayoutType(SequenceLayout.class);\n@@ -125,1 +123,1 @@\n-                                     addStride(elemSize * step), addBound(maxIndex), derefAdapters, this);\n+                addStride(elemSize * step), addBound(maxIndex), derefAdapters, this);\n@@ -129,2 +127,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireLayoutType(SequenceLayout.class);\n@@ -134,1 +131,1 @@\n-        return LayoutPath.nestedPath(seq.elementLayout(), offset + elemOffset, strides, bounds, derefAdapters,this);\n+        return LayoutPath.nestedPath(seq.elementLayout(), offset + elemOffset, strides, bounds, derefAdapters, this);\n@@ -138,2 +135,1 @@\n-        check(GroupLayout.class, \"attempting to select a group element from a non-group layout\");\n-        GroupLayout g = (GroupLayout)layout;\n+        GroupLayout g = requireLayoutType(GroupLayout.class);\n@@ -159,2 +155,1 @@\n-        check(GroupLayout.class, \"attempting to select a group element from a non-group layout\");\n-        GroupLayout g = (GroupLayout)layout;\n+        GroupLayout g = requireLayoutType(GroupLayout.class);\n@@ -177,5 +172,3 @@\n-        if (!(layout instanceof AddressLayout addressLayout) ||\n-                addressLayout.targetLayout().isEmpty()) {\n-            throw badLayoutPath(\"Cannot dereference layout: \" + layout);\n-        }\n-        MemoryLayout derefLayout = addressLayout.targetLayout().get();\n+        AddressLayout addressLayout = requireLayoutType(AddressLayout.class);\n+        var derefLayout = addressLayout.targetLayout()\n+                .orElseThrow(() -> badLayoutPath(\"no targetLayout: \" + layout));\n@@ -204,1 +197,1 @@\n-            throw new IllegalArgumentException(\"Path does not select a value layout\");\n+            throw new IllegalArgumentException(\"Path does not select a value layout: \" + layout);\n@@ -291,1 +284,3 @@\n-            throw new IllegalArgumentException(\"Target offset incompatible with alignment constraints: \" + constraint.byteAlignment());\n+            throw new IllegalArgumentException(String.format(\n+                    \"Target offset %d is incompatible with byteAlignment %d (of %s) for segment %s\"\n+                    , offset, constraint.byteAlignment(), constraint, segment));\n@@ -317,1 +312,1 @@\n-    private void check(Class<?> layoutClass, String msg) {\n+    private <T extends MemoryLayout> T requireLayoutType(Class<T> layoutClass) {\n@@ -319,1 +314,1 @@\n-            throw badLayoutPath(msg);\n+            throw badLayoutPath(\"unable to select a \" + layoutClass.getSimpleName() + \" from layout: \" + layout);\n@@ -321,0 +316,1 @@\n+        return layoutClass.cast(layout);\n@@ -325,1 +321,2 @@\n-            throw badLayoutPath(String.format(\"Sequence index out of bound; found: %d, size: %d\", index, seq.elementCount()));\n+            throw badLayoutPath(String.format(\"sequence index out of bounds; index: %d, elementCount is %d for layout %s\",\n+                    index, seq.elementCount(), seq));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            } else if (!ex.getMessage().contains(\"alignment\") && !ex.getMessage().contains(\"Misaligned\")) {\n+            } else if (!ex.getMessage().contains(\"lignment\") && !ex.getMessage().contains(\"Misaligned\")) {\n","filename":"test\/jdk\/java\/foreign\/TestHeapAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-            String expectedMessage = \"Target offset incompatible with alignment constraints: \" + struct.byteAlignment();\n+            String expectedMessage = \"Target offset 0 is incompatible with byteAlignment \"+struct.byteAlignment()+\" (of [i4s2(x)]) for segment MemorySegment\";\n@@ -156,1 +156,1 @@\n-            assertEquals(iae.getMessage(), expectedMessage);\n+            assertTrue(iae.getMessage().startsWith(expectedMessage));\n@@ -162,1 +162,1 @@\n-            assertEquals(iae.getMessage(), expectedMessage);\n+            assertTrue(iae.getMessage().startsWith(expectedMessage));\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}