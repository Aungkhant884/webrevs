{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.util.Locale;\n@@ -108,2 +109,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireLayoutType(SequenceLayout.class);\n@@ -115,2 +115,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireLayoutType(SequenceLayout.class);\n@@ -125,1 +124,1 @@\n-                                     addStride(elemSize * step), addBound(maxIndex), derefAdapters, this);\n+                addStride(elemSize * step), addBound(maxIndex), derefAdapters, this);\n@@ -129,2 +128,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireLayoutType(SequenceLayout.class);\n@@ -134,1 +132,1 @@\n-        return LayoutPath.nestedPath(seq.elementLayout(), offset + elemOffset, strides, bounds, derefAdapters,this);\n+        return LayoutPath.nestedPath(seq.elementLayout(), offset + elemOffset, strides, bounds, derefAdapters, this);\n@@ -138,2 +136,1 @@\n-        check(GroupLayout.class, \"attempting to select a group element from a non-group layout\");\n-        GroupLayout g = (GroupLayout)layout;\n+        GroupLayout g = requireLayoutType(GroupLayout.class);\n@@ -159,2 +156,1 @@\n-        check(GroupLayout.class, \"attempting to select a group element from a non-group layout\");\n-        GroupLayout g = (GroupLayout)layout;\n+        GroupLayout g = requireLayoutType(GroupLayout.class);\n@@ -177,5 +173,3 @@\n-        if (!(layout instanceof AddressLayout addressLayout) ||\n-                addressLayout.targetLayout().isEmpty()) {\n-            throw badLayoutPath(\"Cannot dereference layout: \" + layout);\n-        }\n-        MemoryLayout derefLayout = addressLayout.targetLayout().get();\n+        AddressLayout addressLayout = requireLayoutType(AddressLayout.class);\n+        var derefLayout = addressLayout.targetLayout()\n+                .orElseThrow(() -> badLayoutPath(\"no targetLayout: \" + layout));\n@@ -204,1 +198,1 @@\n-            throw new IllegalArgumentException(\"Path does not select a value layout\");\n+            throw new IllegalArgumentException(\"Path does not select a value layout: \" + layout);\n@@ -291,1 +285,3 @@\n-            throw new IllegalArgumentException(\"Target offset incompatible with alignment constraints: \" + constraint.byteAlignment());\n+            throw new IllegalArgumentException(String.format(\n+                    \"Target offset %d is incompatible with alignment constraint %d (of %s) for segment %s\"\n+                    , offset, constraint.byteAlignment(), constraint, segment));\n@@ -317,1 +313,1 @@\n-    private void check(Class<?> layoutClass, String msg) {\n+    private <T extends MemoryLayout> T requireLayoutType(Class<T> layoutClass) {\n@@ -319,1 +315,8 @@\n-            throw badLayoutPath(msg);\n+            var name = layoutClass.getSimpleName();\n+            var type = name\n+                    \/\/ Take what is before \"Layout\"\n+                    .substring(0, name.indexOf(\"Layout\"))\n+                    .toLowerCase(Locale.ROOT);\n+            throw badLayoutPath(\n+                    String.format(\"attempting to select a %s element from a non-%s layout: %s\",\n+                            type, type, layout));\n@@ -321,0 +324,1 @@\n+        return layoutClass.cast(layout);\n@@ -325,1 +329,2 @@\n-            throw badLayoutPath(String.format(\"Sequence index out of bound; found: %d, size: %d\", index, seq.elementCount()));\n+            throw badLayoutPath(String.format(\"sequence index out of bounds; index: %d, elementCount is %d for layout %s\",\n+                    index, seq.elementCount(), seq));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.nio.ByteOrder;\n@@ -139,1 +140,1 @@\n-    public void testBadAlignmentOfRoot() throws Throwable {\n+    public void testBadAlignmentOfRoot() {\n@@ -150,1 +151,1 @@\n-            String expectedMessage = \"Target offset incompatible with alignment constraints: \" + struct.byteAlignment();\n+            String expectedMessage = \"Target offset 0 is incompatible with alignment constraint \" + struct.byteAlignment() + \" (of [i4s2(x)]) for segment MemorySegment\";\n@@ -156,1 +157,1 @@\n-            assertEquals(iae.getMessage(), expectedMessage);\n+            assertTrue(iae.getMessage().startsWith(expectedMessage));\n@@ -162,1 +163,1 @@\n-            assertEquals(iae.getMessage(), expectedMessage);\n+            assertTrue(iae.getMessage().startsWith(expectedMessage));\n@@ -166,0 +167,13 @@\n+    @Test\n+    public void testWrongType() {\n+        MemoryLayout struct = MemoryLayout.structLayout(\n+                JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN), JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN)\n+        );\n+\n+        var expectedMessage = \"Bad layout path: attempting to select a sequence element from a non-sequence layout: [i4i4]\";\n+\n+        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () ->\n+                struct.select(PathElement.sequenceElement()));\n+        assertEquals(iae.getMessage(), expectedMessage);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"}]}