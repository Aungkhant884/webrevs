{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -43,0 +44,1 @@\n+import java.util.Locale;\n@@ -46,0 +48,3 @@\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.joining;\n@@ -92,1 +97,0 @@\n-\n@@ -108,2 +112,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireSequenceLayout();\n@@ -115,2 +118,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireSequenceLayout();\n@@ -125,1 +127,1 @@\n-                                     addStride(elemSize * step), addBound(maxIndex), derefAdapters, this);\n+                addStride(elemSize * step), addBound(maxIndex), derefAdapters, this);\n@@ -129,2 +131,1 @@\n-        check(SequenceLayout.class, \"attempting to select a sequence element from a non-sequence layout\");\n-        SequenceLayout seq = (SequenceLayout)layout;\n+        SequenceLayout seq = requireSequenceLayout();\n@@ -134,1 +135,1 @@\n-        return LayoutPath.nestedPath(seq.elementLayout(), offset + elemOffset, strides, bounds, derefAdapters,this);\n+        return LayoutPath.nestedPath(seq.elementLayout(), offset + elemOffset, strides, bounds, derefAdapters, this);\n@@ -138,2 +139,1 @@\n-        check(GroupLayout.class, \"attempting to select a group element from a non-group layout\");\n-        GroupLayout g = (GroupLayout)layout;\n+        GroupLayout g = requireGroupLayout();\n@@ -153,1 +153,2 @@\n-            throw badLayoutPath(\"cannot resolve '\" + name + \"' in layout \" + layout);\n+            throw badLayoutPath(\n+                    String.format(\"cannot resolve '%s' in layout %s\", name, breadcrumbs()));\n@@ -159,2 +160,1 @@\n-        check(GroupLayout.class, \"attempting to select a group element from a non-group layout\");\n-        GroupLayout g = (GroupLayout)layout;\n+        GroupLayout g = requireGroupLayout();\n@@ -166,1 +166,2 @@\n-                throw badLayoutPath(\"cannot resolve element \" + index + \" in layout \" + layout);\n+                throw badLayoutPath(\n+                        String.format(\"cannot resolve element %d in layout: %s\", index, breadcrumbs()));\n@@ -179,1 +180,2 @@\n-            throw badLayoutPath(\"Cannot dereference layout: \" + layout);\n+            throw badLayoutPath(\n+                    String.format(\"Cannot dereference layout: %s\", breadcrumbs()));\n@@ -204,1 +206,2 @@\n-            throw new IllegalArgumentException(\"Path does not select a value layout\");\n+            throw new IllegalArgumentException(\n+                    String.format(\"Path does not select a value layout: %s\", breadcrumbs()));\n@@ -291,1 +294,3 @@\n-            throw new IllegalArgumentException(\"Target offset incompatible with alignment constraints: \" + constraint.byteAlignment());\n+            throw new IllegalArgumentException(String.format(\n+                    \"Target offset %d is incompatible with alignment constraint %d (of %s) for segment %s\"\n+                    , offset, constraint.byteAlignment(), constraint, segment));\n@@ -317,1 +322,9 @@\n-    private void check(Class<?> layoutClass, String msg) {\n+    private SequenceLayout requireSequenceLayout() {\n+        return requireLayoutType(SequenceLayout.class, \"sequence\");\n+    }\n+\n+    private GroupLayout requireGroupLayout() {\n+        return requireLayoutType(GroupLayout.class, \"group\");\n+    }\n+\n+    private <T extends MemoryLayout> T requireLayoutType(Class<T> layoutClass, String name) {\n@@ -319,1 +332,3 @@\n-            throw badLayoutPath(msg);\n+            throw badLayoutPath(\n+                    String.format(\"attempting to select a %s element from a non-%s layout: %s\",\n+                            name, name, breadcrumbs()));\n@@ -321,0 +336,1 @@\n+        return layoutClass.cast(layout);\n@@ -325,1 +341,2 @@\n-            throw badLayoutPath(String.format(\"Sequence index out of bound; found: %d, size: %d\", index, seq.elementCount()));\n+            throw badLayoutPath(String.format(\"sequence index out of bounds; index: %d, elementCount is %d for layout %s\",\n+                    index, seq.elementCount(), breadcrumbs()));\n@@ -345,0 +362,7 @@\n+    private String breadcrumbs() {\n+        return Stream.iterate(this, Objects::nonNull, lp -> lp.enclosing)\n+                .map(LayoutPath::layout)\n+                .map(Object::toString)\n+                .collect(joining(\", selected from: \"));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":45,"deletions":21,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.nio.ByteOrder;\n@@ -139,1 +140,1 @@\n-    public void testBadAlignmentOfRoot() throws Throwable {\n+    public void testBadAlignmentOfRoot() {\n@@ -150,1 +151,1 @@\n-            String expectedMessage = \"Target offset incompatible with alignment constraints: \" + struct.byteAlignment();\n+            String expectedMessage = \"Target offset 0 is incompatible with alignment constraint \" + struct.byteAlignment() + \" (of [i4s2(x)]) for segment MemorySegment\";\n@@ -156,1 +157,1 @@\n-            assertEquals(iae.getMessage(), expectedMessage);\n+            assertTrue(iae.getMessage().startsWith(expectedMessage));\n@@ -162,1 +163,1 @@\n-            assertEquals(iae.getMessage(), expectedMessage);\n+            assertTrue(iae.getMessage().startsWith(expectedMessage));\n@@ -166,0 +167,36 @@\n+    @Test\n+    public void testWrongTypeRoot() {\n+        MemoryLayout struct = MemoryLayout.structLayout(\n+                JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN)\n+        );\n+\n+        var expectedMessage = \"Bad layout path: attempting to select a sequence element from a non-sequence layout: [i4i4]\";\n+\n+        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () ->\n+                struct.select(PathElement.sequenceElement()));\n+        assertEquals(iae.getMessage(), expectedMessage);\n+    }\n+\n+    @Test\n+    public void testWrongTypeEnclosing() {\n+        MemoryLayout struct = MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(\n+                                JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN).withName(\"3a\"),\n+                                JAVA_INT.withOrder(ByteOrder.LITTLE_ENDIAN).withName(\"3b\")\n+                        ).withName(\"2\")\n+                ).withName(\"1\")\n+        ).withName(\"0\");\n+\n+        var expectedMessage = \"Bad layout path: attempting to select a sequence element from a non-sequence layout: \" +\n+                \"[i4(3a)i4(3b)](2), selected from: \" +\n+                \"[2:[i4(3a)i4(3b)](2)](1), selected from: \" +\n+                \"[[2:[i4(3a)i4(3b)](2)](1)](0)\";\n+\n+        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () ->\n+                struct.select(PathElement.groupElement(\"1\"),\n+                        PathElement.sequenceElement(),\n+                        PathElement.sequenceElement()));\n+        assertEquals(iae.getMessage(), expectedMessage);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"}]}