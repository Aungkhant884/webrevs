{"files":[{"patch":"@@ -262,1 +262,1 @@\n-     * (see {@link PathElement#dereferenceElement()} and {@link PathElement#dereferenceElement(MemoryLayout)}).\n+     * (see {@link PathElement#dereferenceElement()}).\n@@ -298,1 +298,1 @@\n-     * (see {@link PathElement#dereferenceElement()} and {@link PathElement#dereferenceElement(MemoryLayout)}).\n+     * (see {@link PathElement#dereferenceElement()}).\n@@ -315,1 +315,1 @@\n-     * (see {@link PathElement#dereferenceElement()} and {@link PathElement#dereferenceElement(MemoryLayout)}).\n+     * (see {@link PathElement#dereferenceElement()}).\n@@ -355,1 +355,1 @@\n-     * (see {@link PathElement#dereferenceElement()} and {@link PathElement#dereferenceElement(MemoryLayout)}).\n+     * (see {@link PathElement#dereferenceElement()}).\n@@ -420,0 +420,2 @@\n+     * @throws IllegalArgumentException if the layout path in {@code elements} contains a {@linkplain PathElement#dereferenceElement()\n+     * dereference path element} for an address layout that has no {@linkplain OfAddress#targetLayout() target layout}.\n@@ -465,1 +467,1 @@\n-     * (see {@link PathElement#dereferenceElement()} and {@link PathElement#dereferenceElement(MemoryLayout)}).\n+     * (see {@link PathElement#dereferenceElement()}).\n@@ -481,1 +483,1 @@\n-     * (see {@link PathElement#dereferenceElement()} and {@link PathElement#dereferenceElement(MemoryLayout)}).\n+     * (see {@link PathElement#dereferenceElement()}).\n@@ -647,15 +649,0 @@\n-\n-        \/**\n-         * Returns a path element which dereferences an address layout as the given layout.\n-         * The path element returned by this method does not alter the number of free dimensions of any path\n-         * that is combined with such element. Using this path layout to dereference an address layout\n-         * that already has a target layout results in an {@link IllegalArgumentException} (e.g. when\n-         * a var handle is {@linkplain #varHandle(PathElement...) obtained}).\n-         *\n-         * @param layout the\n-         * @return a path element which dereferences an address layout.\n-         *\/\n-        static PathElement dereferenceElement(MemoryLayout layout) {\n-            return new LayoutPath.PathElementImpl(PathKind.DEREF_ELEMENT,\n-                    path -> path.derefElement(layout));\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":8,"deletions":21,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -170,12 +170,1 @@\n-        return derefElementInternal(addressLayout.targetLayout().get());\n-    }\n-\n-    public LayoutPath derefElement(MemoryLayout derefLayout) {\n-        if (!(layout instanceof ValueLayout.OfAddress addressLayout) ||\n-            !addressLayout.targetLayout().isEmpty()) {\n-            throw badLayoutPath(\"Cannot dereference layout: \" + layout);\n-        }\n-        return derefElementInternal(derefLayout);\n-    }\n-\n-    private LayoutPath derefElementInternal(MemoryLayout derefLayout) {\n+        MemoryLayout derefLayout = addressLayout.targetLayout().get();\n@@ -277,2 +266,1 @@\n-        MethodHandle[] handles = new MethodHandle[encl.derefAdapters.length + 1];\n-        System.arraycopy(encl.derefAdapters, 0, handles, 0, encl.derefAdapters.length);\n+        MethodHandle[] handles = Arrays.copyOf(encl.derefAdapters, encl.derefAdapters.length + 1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -123,40 +123,0 @@\n-    static final MemoryLayout A_MULTI_NO_TARGET = MemoryLayout.structLayout(\n-            ValueLayout.ADDRESS.withName(\"bs\")\n-    );\n-\n-    static final MemoryLayout B_MULTI_NO_TARGET = MemoryLayout.structLayout(\n-            ValueLayout.ADDRESS.withName(\"cs\")\n-    );\n-\n-    static final VarHandle abcx_multi_no_target = A_MULTI_NO_TARGET.varHandle(\n-            PathElement.groupElement(\"bs\"), PathElement.dereferenceElement(MemoryLayout.sequenceLayout(2, B_MULTI_NO_TARGET)),\n-            PathElement.sequenceElement(), PathElement.groupElement(\"cs\"), PathElement.dereferenceElement(MemoryLayout.sequenceLayout(2, C)),\n-            PathElement.sequenceElement(), PathElement.groupElement(\"x\"));\n-\n-    @Test\n-    public void testMultiNoTarget() {\n-        try (Arena arena = Arena.openConfined()) {\n-            \/\/ init structs\n-            MemorySegment a = arena.allocate(A);\n-            MemorySegment b = arena.allocateArray(B, 2);\n-            MemorySegment c = arena.allocateArray(C, 4);\n-            \/\/ init struct fields\n-            a.set(ValueLayout.ADDRESS, 0, b);\n-            b.set(ValueLayout.ADDRESS, 0, c);\n-            b.setAtIndex(ValueLayout.ADDRESS, 1, c.asSlice(C.byteSize() * 2));\n-            c.setAtIndex(ValueLayout.JAVA_INT, 0, 1);\n-            c.setAtIndex(ValueLayout.JAVA_INT, 1, 2);\n-            c.setAtIndex(ValueLayout.JAVA_INT, 2, 3);\n-            c.setAtIndex(ValueLayout.JAVA_INT, 3, 4);\n-            \/\/ dereference\n-            int val00 = (int) abcx_multi_no_target.get(a, 0, 0); \/\/ a->b[0]->c[0] = 1\n-            assertEquals(val00, 1);\n-            int val10 = (int) abcx_multi_no_target.get(a, 1, 0); \/\/ a->b[1]->c[0] = 3\n-            assertEquals(val10, 3);\n-            int val01 = (int) abcx_multi_no_target.get(a, 0, 1); \/\/ a->b[0]->c[1] = 2\n-            assertEquals(val01, 2);\n-            int val11 = (int) abcx_multi_no_target.get(a, 1, 1); \/\/ a->b[1]->c[1] = 4\n-            assertEquals(val11, 4);\n-        }\n-    }\n-\n@@ -173,0 +133,4 @@\n+    static final MemoryLayout A_MULTI_NO_TARGET = MemoryLayout.structLayout(\n+            ValueLayout.ADDRESS.withName(\"bs\")\n+    );\n+\n@@ -177,5 +141,0 @@\n-\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    void badDerefAddressAlreadyHasTarget() {\n-        A_MULTI.varHandle(PathElement.groupElement(\"bs\"), PathElement.dereferenceElement(MemoryLayout.sequenceLayout(2, B_MULTI)));\n-    }\n","filename":"test\/jdk\/java\/foreign\/TestDereferencePath.java","additions":4,"deletions":45,"binary":false,"changes":49,"status":"modified"}]}