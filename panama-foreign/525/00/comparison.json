{"files":[{"patch":"@@ -139,1 +139,0 @@\n-            files.add(jfoFromString(pkgName,\"NativeScope\", getNativeScopeSource()));\n@@ -155,7 +154,0 @@\n-    private String getNativeScopeSource() throws URISyntaxException, IOException {\n-        URL runtimeHelper = OutputFactory.class.getResource(\"resources\/NativeScope.java.template\");\n-        return (pkgName.isEmpty()? \"\" : \"package \" + pkgName + \";\\n\") +\n-                String.join(\"\\n\", Files.readAllLines(Paths.get(runtimeHelper.toURI())))\n-                        .replace(\"${C_LANG}\", C_LANG_CONSTANTS_HOLDER);\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/\/ Generated by jextract\n-\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-\n-public class NativeScope implements SegmentAllocator, AutoCloseable {\n-    final ResourceScope resourceScope;\n-    final ResourceScope.Handle scopeHandle;\n-    final SegmentAllocator allocator;\n-\n-    long allocatedBytes = 0;\n-\n-    private NativeScope() {\n-        this.resourceScope = ResourceScope.newConfinedScope();\n-        this.scopeHandle = resourceScope.acquire();\n-        this.allocator = SegmentAllocator.arenaAllocator(resourceScope);\n-    }\n-\n-    private NativeScope(long size) {\n-        this.resourceScope = ResourceScope.newConfinedScope();\n-        this.scopeHandle = resourceScope.acquire();\n-        this.allocator = SegmentAllocator.arenaAllocator(size, resourceScope);\n-    }\n-\n-    @Override\n-    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-        allocatedBytes += bytesSize;\n-        return allocator.allocate(bytesSize, bytesAlignment);\n-    }\n-\n-    public ResourceScope scope() {\n-        return resourceScope;\n-    }\n-\n-    public long allocatedBytes() {\n-        return allocatedBytes;\n-    }\n-\n-    @Override\n-    public void close() {\n-        resourceScope.release(scopeHandle);\n-        resourceScope.close();\n-    }\n-\n-    public static NativeScope unboundedScope() {\n-        return new NativeScope();\n-    }\n-\n-    public static NativeScope boundedScope(long size) {\n-        return new NativeScope(size);\n-    }\n-}\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/NativeScope.java.template","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -81,4 +81,0 @@\n-    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, NativeScope scope) {\n-        return upcallStub(fi, z, fdesc, mtypeDesc, scope.scope());\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import test.jextract.funcpointers.NativeScope;\n","filename":"test\/jdk\/tools\/jextract\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -45,2 +47,3 @@\n-        try (var scope = NativeScope.unboundedScope()) {\n-            var addr = scope.allocate(C_INT, 12);\n+        try (var scope = ResourceScope.newConfinedScope()) {\n+            var allocator = SegmentAllocator.ofScope(scope);\n+            var addr = allocator.allocate(C_INT, 12);\n@@ -51,1 +54,1 @@\n-            addr = scope.allocate(C_DOUBLE, 12.0);\n+            addr = allocator.allocate(C_DOUBLE, 12.0);\n@@ -57,1 +60,1 @@\n-            addr = scope.allocateArray(C_INT, intArray);\n+            addr = allocator.allocateArray(C_INT, intArray);\n@@ -64,1 +67,1 @@\n-            addr = scope.allocateArray(C_DOUBLE, dblArray);\n+            addr = allocator.allocateArray(C_DOUBLE, dblArray);\n@@ -74,1 +77,1 @@\n-            var dest = scope.allocateArray(C_CHAR, 12);\n+            var dest = allocator.allocateArray(C_CHAR, 12);\n","filename":"test\/jdk\/tools\/jextract\/test8241925\/LibTest8241925Test.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -56,2 +58,3 @@\n-        try (var scope = NativeScope.unboundedScope()) {\n-            var addr = scope.allocate(mysize_t, 0L);\n+        try (var scope = ResourceScope.newConfinedScope()) {\n+            var allocator = SegmentAllocator.ofScope(scope);\n+            var addr = allocator.allocate(mysize_t, 0L);\n","filename":"test\/jdk\/tools\/jextract\/test8244412\/LibTest8244412Test.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -73,2 +74,3 @@\n-        try (var scope = NativeScope.boundedScope(C_POINTER.byteSize())) {\n-            var addr = scope.allocate(C_POINTER);\n+        try (var scope = ResourceScope.newConfinedScope()) {\n+            var allocator = SegmentAllocator.arenaAllocator(C_POINTER.byteSize(), scope);\n+            var addr = allocator.allocate(C_POINTER);\n","filename":"test\/jdk\/tools\/jextract\/test8246341\/LibTest8246341Test.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -55,1 +57,2 @@\n-        try (NativeScope scope = NativeScope.unboundedScope()) {\n+        try (var scope = ResourceScope.newConfinedScope()) {\n+            var allocator = SegmentAllocator.ofScope(scope);\n@@ -57,1 +60,1 @@\n-            MemorySegment seg = scope.allocateArray(CLinker.C_INT, array);\n+            MemorySegment seg = allocator.allocateArray(CLinker.C_INT, array);\n","filename":"test\/jdk\/tools\/jextract\/test8252121\/Test8252121.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -52,1 +53,1 @@\n-        try (var scope = NativeScope.unboundedScope()) {\n+        try (var scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/tools\/jextract\/test8252465\/LibTest8252465Test.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}