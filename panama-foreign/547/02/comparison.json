{"files":[{"patch":"@@ -48,0 +48,10 @@\n+else # windows\n+\n+  $(eval $(call SetupJdkLibrary, BUILD_SYSLOOKUPLIB, \\\n+      NAME := WinFallbackLookup, \\\n+      CFLAGS := $(CFLAGS_JDKLIB), \\\n+      CXXFLAGS := $(CXXFLAGS_JDKLIB), \\\n+      LDFLAGS := $(LDFLAGS_JDKLIB), \\\n+      LIBS := $(LIBCXX), \\\n+  ))\n+\n","filename":"make\/modules\/jdk.incubator.foreign\/Lib.gmk","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.ResourceScope;\n@@ -37,0 +40,3 @@\n+import java.util.function.Function;\n+\n+import static jdk.incubator.foreign.CLinker.C_POINTER;\n@@ -48,6 +54,16 @@\n-    final NativeLibrary syslookup = switch (CABI.current()) {\n-        case SysV, AArch64 -> NativeLibraries.rawNativeLibraries(SystemLookup.class, false).loadLibrary(\"syslookup\");\n-        case Win64 -> {\n-            Path system32 = Path.of(System.getenv(\"SystemRoot\"), \"System32\");\n-            Path ucrtbase = system32.resolve(\"ucrtbase.dll\");\n-            Path msvcrt = system32.resolve(\"msvcrt.dll\");\n+    private static final SymbolLookup syslookup = switch (CABI.current()) {\n+        case SysV, AArch64 -> libLookup(libs -> libs.loadLibrary(\"syslookup\"));\n+        case Win64 -> makeWindowsLookup(); \/\/ out of line to workaround javac crash\n+    };\n+\n+    private static SymbolLookup makeWindowsLookup() {\n+        Path system32 = Path.of(System.getenv(\"SystemRoot\"), \"System32\");\n+        Path ucrtbase = system32.resolve(\"ucrtbase.dll\");\n+        Path msvcrt = system32.resolve(\"msvcrt.dll\");\n+\n+        boolean useUCRT = Files.exists(ucrtbase);\n+        Path stdLib = useUCRT ? ucrtbase : msvcrt;\n+        SymbolLookup lookup = libLookup(libs -> libs.loadLibrary(null, stdLib.toFile()));\n+\n+        if (useUCRT) {\n+            \/\/ use a fallback lookup to look up inline functions from fallback lib\n@@ -55,1 +71,1 @@\n-            Path stdLib = Files.exists(ucrtbase) ? ucrtbase : msvcrt;\n+            SymbolLookup fallbackLibLookup = libLookup(libs -> libs.loadLibrary(\"WinFallbackLookup\"));\n@@ -57,2 +73,9 @@\n-            yield NativeLibraries.rawNativeLibraries(SystemLookup.class, false)\n-                    .loadLibrary(null, stdLib.toFile());\n+            int numSymbols = WindowsFallbackSymbols.values().length;\n+            MemorySegment funcs = fallbackLibLookup.lookup(\"funcs\").orElseThrow()\n+                .asSegment(C_POINTER.byteSize() * numSymbols, ResourceScope.newImplicitScope());\n+\n+            SymbolLookup fallbackLookup = name -> Optional.ofNullable(WindowsFallbackSymbols.valueOfOrNull(name))\n+                .map(symbol -> MemoryAccess.getAddressAtIndex(funcs, symbol.ordinal()));\n+\n+            final SymbolLookup finalLookup = lookup;\n+            lookup = name -> finalLookup.lookup(name).or(() -> fallbackLookup.lookup(name));\n@@ -60,1 +83,17 @@\n-    };\n+\n+        return lookup;\n+    }\n+\n+    private static SymbolLookup libLookup(Function<NativeLibraries, NativeLibrary> loader) {\n+        NativeLibrary lib = loader.apply(NativeLibraries.rawNativeLibraries(SystemLookup.class, false));\n+        return name -> {\n+            Objects.requireNonNull(name);\n+            try {\n+                long addr = lib.lookup(name);\n+                return addr == 0 ?\n+                        Optional.empty() : Optional.of(MemoryAddress.ofLong(addr));\n+            } catch (NoSuchMethodException e) {\n+                return Optional.empty();\n+            }\n+        };\n+    }\n@@ -64,4 +103,1 @@\n-        Objects.requireNonNull(name);\n-        long addr = syslookup.find(name);\n-        return addr == 0 ?\n-                Optional.empty() : Optional.of(MemoryAddress.ofLong(addr));\n+        return syslookup.lookup(name);\n@@ -73,0 +109,69 @@\n+\n+    \/\/ fallback symbols missing from ucrtbase.dll\n+    \/\/ this list has to be kept in sync with the table in the companion native library\n+    private enum WindowsFallbackSymbols {\n+        \/\/ stdio\n+        fprintf,\n+        fprintf_s,\n+        fscanf,\n+        fscanf_s,\n+        fwprintf,\n+        fwprintf_s,\n+        fwscanf,\n+        fwscanf_s,\n+        printf,\n+        printf_s,\n+        scanf,\n+        scanf_s,\n+        snprintf,\n+        sprintf,\n+        sprintf_s,\n+        sscanf,\n+        sscanf_s,\n+        swprintf,\n+        swprintf_s,\n+        swscanf,\n+        swscanf_s,\n+        vfprintf,\n+        vfprintf_s,\n+        vfscanf,\n+        vfscanf_s,\n+        vfwprintf,\n+        vfwprintf_s,\n+        vfwscanf,\n+        vfwscanf_s,\n+        vprintf,\n+        vprintf_s,\n+        vscanf,\n+        vscanf_s,\n+        vsnprintf,\n+        vsnprintf_s,\n+        vsprintf,\n+        vsprintf_s,\n+        vsscanf,\n+        vsscanf_s,\n+        vswprintf,\n+        vswprintf_s,\n+        vswscanf,\n+        vswscanf_s,\n+        vwprintf,\n+        vwprintf_s,\n+        vwscanf,\n+        vwscanf_s,\n+        wprintf,\n+        wprintf_s,\n+        wscanf,\n+        wscanf_s,\n+\n+        \/\/ time\n+        gmtime\n+        ;\n+\n+        static WindowsFallbackSymbols valueOfOrNull(String name) {\n+            try {\n+                return valueOf(name);\n+            } catch (IllegalArgumentException e) {\n+                return null;\n+            }\n+        }\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":119,"deletions":14,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <time.h>\n+\n+\/\/ Forces generation of inline code on Windows\n+__declspec(dllexport) void* funcs[] = {\n+    \/\/ stdio.h\n+    &fprintf,\n+    &fprintf_s,\n+    &fscanf,\n+    &fscanf_s,\n+    &fwprintf,\n+    &fwprintf_s,\n+    &fwscanf,\n+    &fwscanf_s,\n+    &printf,\n+    &printf_s,\n+    &scanf,\n+    &scanf_s,\n+    &snprintf,\n+    &sprintf,\n+    &sprintf_s,\n+    &sscanf,\n+    &sscanf_s,\n+    &swprintf,\n+    &swprintf_s,\n+    &swscanf,\n+    &swscanf_s,\n+    &vfprintf,\n+    &vfprintf_s,\n+    &vfscanf,\n+    &vfscanf_s,\n+    &vfwprintf,\n+    &vfwprintf_s,\n+    &vfwscanf,\n+    &vfwscanf_s,\n+    &vprintf,\n+    &vprintf_s,\n+    &vscanf,\n+    &vscanf_s,\n+    &vsnprintf,\n+    &vsnprintf_s,\n+    &vsprintf,\n+    &vsprintf_s,\n+    &vsscanf,\n+    &vsscanf_s,\n+    &vswprintf,\n+    &vswprintf_s,\n+    &vswscanf,\n+    &vswscanf_s,\n+    &vwprintf,\n+    &vwprintf_s,\n+    &vwscanf,\n+    &vwscanf_s,\n+    &wprintf,\n+    &wprintf_s,\n+    &wscanf,\n+    &wscanf_s,\n+\n+    \/\/ time.h\n+    &gmtime\n+};\n","filename":"src\/jdk.incubator.foreign\/windows\/native\/libWinFallbackLookup\/WinFallbackLookup.c","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -158,17 +158,1 @@\n-        static final SymbolLookup LOOKUP;\n-\n-        static {\n-            System.loadLibrary(\"StdLib\");\n-            SymbolLookup stdLibLookup = SymbolLookup.loaderLookup();\n-            MemorySegment funcs = stdLibLookup.lookup(\"funcs\").get()\n-                    .asSegment(C_POINTER.byteSize() * 3, ResourceScope.newImplicitScope());\n-\n-            SymbolLookup fallbackLookup = name -> switch (name) {\n-                    case \"printf\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 0));\n-                    case \"vprintf\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 1));\n-                    case \"gmtime\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 2));\n-                    default -> Optional.empty();\n-                };\n-\n-            LOOKUP = name -> CLinker.systemLookup().lookup(name).or(() -> fallbackLookup.lookup(name));\n-        }\n+        static final SymbolLookup LOOKUP = CLinker.systemLookup();\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-#include <stdio.h>\n-#include <time.h>\n-\n-#ifdef _WIN64\n-#define EXPORT __declspec(dllexport)\n-#else\n-#define EXPORT\n-#endif\n-\n-\/\/ Forces generation of inline code on Windows\n-EXPORT void* funcs[] = {\n-    &printf,\n-    &vprintf,\n-    &gmtime\n-};\n","filename":"test\/jdk\/java\/foreign\/libStdLib.c","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"}]}