{"files":[{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+\n@@ -238,4 +239,1 @@\n-    default long byteAlignment() {\n-        return Utils.bitsToBytesOrThrow(bitAlignment(),\n-                () -> new UnsupportedOperationException(\"Cannot compute byte alignment; bit alignment is not a multiple of 8\"));\n-    }\n+    long byteAlignment();\n@@ -614,1 +612,1 @@\n-     * Creates a padding layout with the given size.\n+     * Creates a padding layout with the given bitSize and a bit-alignment of eight.\n@@ -616,1 +614,1 @@\n-     * @param size the padding size in bits.\n+     * @param bitSize the padding size in bits.\n@@ -618,1 +616,1 @@\n-     * @throws IllegalArgumentException if {@code size <= 0}.\n+     * @throws IllegalArgumentException if {@code bitSize < 0} or {@code bitSize % 8 != 0}\n@@ -620,3 +618,2 @@\n-    static PaddingLayout paddingLayout(long size) {\n-        MemoryLayoutUtil.checkSize(size);\n-        return PaddingLayoutImpl.of(size);\n+    static PaddingLayout paddingLayout(long bitSize) {\n+        return PaddingLayoutImpl.of(MemoryLayoutUtil.requireBitSizeValid(bitSize));\n@@ -679,1 +676,1 @@\n-        MemoryLayoutUtil.checkSize(elementCount, true);\n+        MemoryLayoutUtil.requireNonNegative(elementCount);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+ * @sealedGraph\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,1 +148,1 @@\n-                    .orElse(1); \/\/ or minimal alignment if no member layout is given\n+                    .orElse(8); \/\/ or minimal alignment if no member layout is given\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import jdk.internal.foreign.Utils;\n-import jdk.internal.vm.annotation.ForceInline;\n-import jdk.internal.vm.annotation.Stable;\n-\n@@ -44,2 +40,2 @@\n-    private final long bitSize;\n-    private final long bitAlignment;\n+    private final long byteSize;\n+    private final long byteAlignment;\n@@ -47,2 +43,0 @@\n-    @Stable\n-    private long byteSize;\n@@ -51,3 +45,3 @@\n-        this.bitSize = bitSize;\n-        this.bitAlignment = bitAlignment;\n-        this.name = name;\n+        this.byteSize = MemoryLayoutUtil.requireBitSizeValid(bitSize) \/ 8;\n+        this.byteAlignment = requirePowerOfTwoAndGreaterOrEqualToEight(bitAlignment) \/ 8;\n+        this.name = Objects.requireNonNull(name);\n@@ -58,1 +52,1 @@\n-        return dup(bitAlignment, Optional.of(name));\n+        return dup(bitAlignment(), Optional.of(name));\n@@ -66,1 +60,0 @@\n-        checkAlignment(bitAlignment);\n@@ -71,1 +64,5 @@\n-        return bitAlignment;\n+        return byteAlignment * 8;\n+    }\n+\n+    public final long byteAlignment() {\n+        return byteAlignment;\n@@ -74,1 +71,0 @@\n-    @ForceInline\n@@ -76,4 +72,0 @@\n-        if (byteSize == 0) {\n-            byteSize = Utils.bitsToBytesOrThrow(bitSize(),\n-                    () -> new UnsupportedOperationException(\"Cannot compute byte size; bit size is not a multiple of 8\"));\n-        }\n@@ -84,1 +76,1 @@\n-        return bitSize;\n+        return byteSize * 8;\n@@ -88,1 +80,1 @@\n-        return bitSize == bitAlignment;\n+        return byteSize == byteAlignment;\n@@ -99,1 +91,1 @@\n-        return Objects.hash(name, bitSize, bitAlignment);\n+        return Objects.hash(name, byteSize, byteAlignment);\n@@ -127,2 +119,2 @@\n-                bitSize == otherLayout.bitSize &&\n-                bitAlignment == otherLayout.bitAlignment;\n+                byteSize == otherLayout.byteSize &&\n+                byteAlignment == otherLayout.byteAlignment;\n@@ -134,0 +126,1 @@\n+    @Override\n@@ -143,1 +136,1 @@\n-            s = bitAlignment + \"%\" + s;\n+            s = bitAlignment() + \"%\" + s;\n@@ -148,4 +141,4 @@\n-    private static void checkAlignment(long alignmentBitCount) {\n-        if (((alignmentBitCount & (alignmentBitCount - 1)) != 0L) || \/\/alignment must be a power of two\n-                (alignmentBitCount < 8)) { \/\/alignment must be greater than 8\n-            throw new IllegalArgumentException(\"Invalid alignment: \" + alignmentBitCount);\n+    private static long requirePowerOfTwoAndGreaterOrEqualToEight(long value) {\n+        if (((value & (value - 1)) != 0L) || \/\/ value must be a power of two\n+                (value < 8)) { \/\/ value must be greater or equal to 8\n+            throw new IllegalArgumentException(\"Invalid alignment: \" + value);\n@@ -153,0 +146,1 @@\n+        return value;\n@@ -155,1 +149,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":24,"deletions":31,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,5 @@\n-    public static void checkSize(long size) {\n-        checkSize(size, false);\n+    public static long requireNonNegative(long value) {\n+        if (value < 0) {\n+            throw new IllegalArgumentException(\"The provided value was negative: \" + value);\n+        }\n+        return value;\n@@ -37,3 +40,3 @@\n-    public static void checkSize(long size, boolean includeZero) {\n-        if (size < 0 || (!includeZero && size == 0)) {\n-            throw new IllegalArgumentException(\"Invalid size for layout: \" + size);\n+    public static long requireBitSizeValid(long bitSize) {\n+        if (bitSize < 0 || bitSize % 8 != 0) {\n+            throw new IllegalArgumentException(\"Invalid bitSize: \" + bitSize);\n@@ -41,0 +44,1 @@\n+        return bitSize;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/MemoryLayoutUtil.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-        this(bitSize, 1, Optional.empty());\n+        this(bitSize, 8, Optional.empty());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/PaddingLayoutImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,0 @@\n-        MemoryLayoutUtil.checkSize(elementCount, true);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/SequenceLayoutImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,19 +171,0 @@\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testBadMultiple() {\n-        GroupLayout g = MemoryLayout.structLayout(MemoryLayout.paddingLayout(3), JAVA_INT.withName(\"foo\"));\n-        g.byteOffset(groupElement(\"foo\"));\n-    }\n-\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testBadByteOffsetNoMultipleOf8() {\n-        MemoryLayout layout = MemoryLayout.structLayout(MemoryLayout.paddingLayout(7), JAVA_INT.withName(\"x\"));\n-        layout.byteOffset(groupElement(\"x\"));\n-    }\n-\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testBadByteOffsetHandleNoMultipleOf8() throws Throwable {\n-        MemoryLayout layout = MemoryLayout.structLayout(MemoryLayout.paddingLayout(7), JAVA_INT.withName(\"x\"));\n-        MethodHandle handle = layout.byteOffsetHandle(groupElement(\"x\"));\n-        handle.invoke();\n-    }\n-\n@@ -367,1 +348,1 @@\n-            MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(MemoryLayout.paddingLayout(5), JAVA_INT.withName(\"y\"))),\n+            MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(MemoryLayout.paddingLayout(8), JAVA_INT.withName(\"y\"))),\n@@ -370,1 +351,1 @@\n-            (JAVA_INT.bitSize() + 5) * 4 + 5\n+            (JAVA_INT.bitSize() + 8) * 4 + 8\n@@ -444,40 +425,0 @@\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testSliceHandleUOEInvalidOffsetEager() throws Throwable {\n-        MemoryLayout layout = MemoryLayout.structLayout(\n-            MemoryLayout.paddingLayout(5),\n-            JAVA_INT.withName(\"y\") \/\/ offset not a multiple of 8\n-        );\n-\n-        layout.sliceHandle(groupElement(\"y\")); \/\/ should throw\n-    }\n-\n-    @Test(expectedExceptions = UnsupportedOperationException.class)\n-    public void testSliceHandleUOEInvalidOffsetLate() throws Throwable {\n-        MemoryLayout layout = MemoryLayout.sequenceLayout(3,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.paddingLayout(4),\n-                    JAVA_INT.withName(\"y\") \/\/ offset not a multiple of 8\n-            )\n-        );\n-\n-        MethodHandle sliceHandle;\n-        try {\n-            sliceHandle = layout.sliceHandle(sequenceElement(), groupElement(\"y\")); \/\/ should work\n-        } catch (UnsupportedOperationException uoe) {\n-            fail(\"Unexpected exception\", uoe);\n-            return;\n-        }\n-\n-        try (Arena arena = Arena.openConfined()) {\n-            MemorySegment segment = MemorySegment.allocateNative(layout, arena.scope());\n-\n-            try {\n-                sliceHandle.invokeExact(segment, 1); \/\/ should work\n-            } catch (UnsupportedOperationException uoe) {\n-                fail(\"Unexpected exception\", uoe);\n-                return;\n-            }\n-\n-            sliceHandle.invokeExact(segment, 0); \/\/ should throw\n-        }\n-    }\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":3,"deletions":62,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import java.util.List;\n+import java.util.function.Function;\n@@ -82,1 +84,1 @@\n-        assertEquals(struct.bitAlignment(), 1);\n+        assertEquals(struct.bitAlignment(), 8);\n@@ -86,1 +88,1 @@\n-        assertEquals(union.bitAlignment(), 1);\n+        assertEquals(union.bitAlignment(), 8);\n@@ -104,1 +106,1 @@\n-        assertEquals(MemoryLayout.paddingLayout(layout.bitSize()).bitAlignment(), 1);\n+        assertEquals(MemoryLayout.paddingLayout(layout.bitSize()).bitAlignment(), 8);\n@@ -169,0 +171,30 @@\n+    @Test\n+    public void testPadding() {\n+        var padding = MemoryLayout.paddingLayout(8);\n+        assertEquals(padding.byteAlignment(), 1);\n+    }\n+\n+    @Test\n+    public void testPaddingInStruct() {\n+        var padding = MemoryLayout.paddingLayout(8);\n+        var struct = MemoryLayout.structLayout(padding);\n+        assertEquals(struct.byteAlignment(), 1);\n+    }\n+\n+    @Test\n+    public void testPaddingIllegalBitSize() {\n+        for (long bitSize : List.of(-1L, 1L, 7L)) {\n+            try {\n+                MemoryLayout.paddingLayout(bitSize);\n+                fail(\"bitSize cannot be \" + bitSize);\n+            } catch (IllegalArgumentException ignore) {\n+                \/\/ Happy path\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testPaddingZeroBitSize() {\n+        MemoryLayout.paddingLayout(0);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"}]}