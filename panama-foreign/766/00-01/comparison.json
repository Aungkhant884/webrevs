{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.util.stream.Stream;\n@@ -619,4 +620,1 @@\n-        if (bitSize < 0 || bitSize % 8 != 0) {\n-            throw new IllegalArgumentException(\"bitSize cannot be \" + bitSize);\n-        }\n-        return PaddingLayoutImpl.of(bitSize);\n+        return PaddingLayoutImpl.of(MemoryLayoutUtil.requireBitSizeValid(bitSize));\n@@ -712,1 +710,3 @@\n-        return wrapOverflow(() -> StructLayoutImpl.of(List.of(elements)));\n+        return wrapOverflow(() -> StructLayoutImpl.of(Stream.of(elements)\n+                .map(Objects::requireNonNull)\n+                .toList()));\n@@ -723,1 +723,3 @@\n-        return UnionLayoutImpl.of(List.of(elements));\n+        return UnionLayoutImpl.of(Stream.of(elements)\n+                .map(Objects::requireNonNull)\n+                .toList());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -201,15 +201,0 @@\n-    @Test\n-    public void testNullMember() {\n-        var illegalLayouts = new MemoryLayout[]{JAVA_INT, null, JAVA_INT};\n-        var factories = List.<Function<MemoryLayout[], GroupLayout>>\n-                of(MemoryLayout::structLayout, MemoryLayout::unionLayout);\n-        for (var factory : factories) {\n-            try {\n-                factory.apply(illegalLayouts);\n-                fail(\"Factory did not throw for null elements\");\n-            } catch (NullPointerException ignore) {\n-                \/\/ Happy path\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}