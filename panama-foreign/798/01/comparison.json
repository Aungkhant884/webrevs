{"files":[{"patch":"@@ -51,1 +51,0 @@\n-        Objects.requireNonNull(name);\n@@ -125,1 +124,1 @@\n-    abstract L dup(long alignment, Optional<String> name);\n+    abstract L dup(long bitAlignment, Optional<String> name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    private ValueLayouts() {\n-    }\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private ValueLayouts() {}\n@@ -73,4 +73,0 @@\n-        AbstractValueLayout(Class<?> carrier, ByteOrder order, long bitSize) {\n-            this(carrier, order, bitSize, bitSize, Optional.empty());\n-        }\n-\n@@ -98,1 +94,4 @@\n-        abstract V withOrder(ByteOrder order);\n+        public final V withOrder(ByteOrder order) {\n+            Objects.requireNonNull(order);\n+            return dup(order, bitAlignment(), name());\n+        }\n@@ -146,1 +145,5 @@\n-        abstract V dup(long bitAlignment, Optional<String> name);\n+        final V dup(long bitAlignment, Optional<String> name) {\n+            return dup(order(), bitAlignment, name);\n+        }\n+\n+        abstract V dup(ByteOrder order, long bitAlignment, Optional<String> name);\n@@ -188,4 +191,0 @@\n-        private OfBooleanImpl(ByteOrder order) {\n-            super(boolean.class, order, 8);\n-        }\n-\n@@ -193,6 +192,1 @@\n-            super(boolean.class, order, 8, bitAlignment, name);\n-        }\n-\n-        @Override\n-        OfBooleanImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfBooleanImpl(order(), bitAlignment, name);\n+            super(boolean.class, order, Byte.SIZE, bitAlignment, name);\n@@ -202,3 +196,2 @@\n-        public OfBooleanImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfBooleanImpl(order, bitAlignment(), name());\n+        OfBooleanImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfBooleanImpl(order, bitAlignment, name);\n@@ -208,1 +201,1 @@\n-            return new OfBooleanImpl(order);\n+            return new OfBooleanImpl(order, Byte.SIZE, Optional.empty());\n@@ -214,4 +207,0 @@\n-        private OfByteImpl(ByteOrder order) {\n-            super(byte.class, order, 8);\n-        }\n-\n@@ -219,1 +208,1 @@\n-            super(byte.class, order, 8, bitAlignment, name);\n+            super(byte.class, order, Byte.SIZE, bitAlignment, name);\n@@ -223,8 +212,2 @@\n-        OfByteImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfByteImpl(order(), bitAlignment, name);\n-        }\n-\n-        @Override\n-        public OfByteImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfByteImpl(order, bitAlignment(), name());\n+        OfByteImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfByteImpl(order, bitAlignment, name);\n@@ -234,1 +217,1 @@\n-            return new OfByteImpl(order);\n+            return new OfByteImpl(order, Byte.SIZE, Optional.empty());\n@@ -240,4 +223,0 @@\n-        private OfCharImpl(ByteOrder order) {\n-            super(char.class, order, 16);\n-        }\n-\n@@ -245,1 +224,1 @@\n-            super(char.class, order, 16, bitAlignment, name);\n+            super(char.class, order, Character.SIZE, bitAlignment, name);\n@@ -249,8 +228,2 @@\n-        OfCharImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfCharImpl(order(), bitAlignment, name);\n-        }\n-\n-        @Override\n-        public OfCharImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfCharImpl(order, bitAlignment(), name());\n+        OfCharImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfCharImpl(order, bitAlignment, name);\n@@ -260,1 +233,1 @@\n-            return new OfCharImpl(order);\n+            return new OfCharImpl(order, Character.SIZE, Optional.empty());\n@@ -266,4 +239,0 @@\n-        private OfShortImpl(ByteOrder order) {\n-            super(short.class, order, 16);\n-        }\n-\n@@ -271,1 +240,1 @@\n-            super(short.class, order, 16, bitAlignment, name);\n+            super(short.class, order, Short.SIZE, bitAlignment, name);\n@@ -275,8 +244,2 @@\n-        OfShortImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfShortImpl(order(), bitAlignment, name);\n-        }\n-\n-        @Override\n-        public OfShortImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfShortImpl(order, bitAlignment(), name());\n+        OfShortImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfShortImpl(order, bitAlignment, name);\n@@ -286,1 +249,1 @@\n-            return new OfShortImpl(order);\n+            return new OfShortImpl(order, Short.SIZE, Optional.empty());\n@@ -292,4 +255,0 @@\n-        private OfIntImpl(ByteOrder order) {\n-            super(int.class, order, 32);\n-        }\n-\n@@ -297,6 +256,1 @@\n-            super(int.class, order, 32, bitAlignment, name);\n-        }\n-\n-        @Override\n-        OfIntImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfIntImpl(order(), bitAlignment, name);\n+            super(int.class, order, Integer.SIZE, bitAlignment, name);\n@@ -306,3 +260,2 @@\n-        public OfIntImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfIntImpl(order, bitAlignment(), name());\n+        OfIntImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfIntImpl(order, bitAlignment, name);\n@@ -312,1 +265,1 @@\n-            return new OfIntImpl(order);\n+            return new OfIntImpl(order, Integer.SIZE, Optional.empty());\n@@ -318,4 +271,0 @@\n-        private OfFloatImpl(ByteOrder order) {\n-            super(float.class, order, 32);\n-        }\n-\n@@ -323,1 +272,1 @@\n-            super(float.class, order, 32, bitAlignment, name);\n+            super(float.class, order, Float.SIZE, bitAlignment, name);\n@@ -327,8 +276,2 @@\n-        OfFloatImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfFloatImpl(order(), bitAlignment, name);\n-        }\n-\n-        @Override\n-        public OfFloatImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfFloatImpl(order, bitAlignment(), name());\n+        OfFloatImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfFloatImpl(order, bitAlignment, name);\n@@ -338,1 +281,1 @@\n-            return new OfFloatImpl(order);\n+            return new OfFloatImpl(order, Float.SIZE, Optional.empty());\n@@ -344,4 +287,0 @@\n-        private OfLongImpl(ByteOrder order) {\n-            super(long.class, order, 64);\n-        }\n-\n@@ -349,6 +288,1 @@\n-            super(long.class, order, 64, bitAlignment, name);\n-        }\n-\n-        @Override\n-        OfLongImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfLongImpl(order(), bitAlignment, name);\n+            super(long.class, order, Long.SIZE, bitAlignment, name);\n@@ -358,3 +292,2 @@\n-        public OfLongImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfLongImpl(order, bitAlignment(), name());\n+        OfLongImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfLongImpl(order, bitAlignment, name);\n@@ -364,1 +297,1 @@\n-            return new OfLongImpl(order);\n+            return new OfLongImpl(order, Long.SIZE, Optional.empty());\n@@ -370,4 +303,0 @@\n-        private OfDoubleImpl(ByteOrder order) {\n-            super(double.class, order, 64);\n-        }\n-\n@@ -375,1 +304,1 @@\n-            super(double.class, order, 64, bitAlignment, name);\n+            super(double.class, order, Double.SIZE, bitAlignment, name);\n@@ -379,8 +308,2 @@\n-        OfDoubleImpl dup(long bitAlignment, Optional<String> name) {\n-            return new OfDoubleImpl(order(), bitAlignment, name);\n-        }\n-\n-        @Override\n-        public OfDoubleImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfDoubleImpl(order, bitAlignment(), name());\n+        OfDoubleImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfDoubleImpl(order, bitAlignment, name);\n@@ -390,1 +313,1 @@\n-            return new OfDoubleImpl(order);\n+            return new OfDoubleImpl(order, Double.SIZE, Optional.empty());\n@@ -399,7 +322,2 @@\n-        private OfAddressImpl(ByteOrder order) {\n-            super(MemorySegment.class, order, ADDRESS_SIZE_BITS);\n-            this.targetLayout = null;\n-        }\n-\n-        private OfAddressImpl(ByteOrder order, long size, long bitAlignment, MemoryLayout targetLayout, Optional<String> name) {\n-            super(MemorySegment.class, order, size, bitAlignment, name);\n+        private OfAddressImpl(ByteOrder order, long bitSize, long bitAlignment, MemoryLayout targetLayout, Optional<String> name) {\n+            super(MemorySegment.class, order, bitSize, bitAlignment, name);\n@@ -410,8 +328,2 @@\n-        OfAddressImpl dup(long alignment, Optional<String> name) {\n-            return new OfAddressImpl(order(), bitSize(), alignment, targetLayout, name);\n-        }\n-\n-        @Override\n-        public OfAddressImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return new OfAddressImpl(order, bitSize(), bitAlignment(), targetLayout, name());\n+        OfAddressImpl dup(ByteOrder order, long bitAlignment, Optional<String> name) {\n+            return new OfAddressImpl(order, bitSize(), bitAlignment,targetLayout, name);\n@@ -445,1 +357,1 @@\n-            return new OfAddressImpl(order);\n+            return new OfAddressImpl(order, ADDRESS_SIZE_BITS, ADDRESS_SIZE_BITS, null, Optional.empty());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":48,"deletions":136,"binary":false,"changes":184,"status":"modified"}]}