{"files":[{"patch":"@@ -173,0 +173,1 @@\n+        parser.accepts(\"header-class-name\", format(\"help.header-class-name\")).withRequiredArg();\n@@ -264,0 +265,4 @@\n+            String headerName = optionSet.has(\"header-class-name\") ?\n+                (String) optionSet.valueOf(\"header-class-name\") :\n+                header.getFileName().toString();\n+\n@@ -265,1 +270,1 @@\n-                toplevel, header.getFileName().toString(),\n+                toplevel, headerName,\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/incubator\/jextract\/JextractTool.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+help.header-class-name=name of the header class\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/Messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -127,0 +127,17 @@\n+\n+    @Test\n+    public void testHeaderClassName() {\n+        Path helloOutput = getOutputFilePath(\"hellogen\");\n+        Path helloH = getInputFilePath(\"hello.h\");\n+        run(\"--header-class-name\", \"MyHello\", \"-t\", \"com.acme\", \"-d\",\n+            helloOutput.toString(), helloH.toString()).checkSuccess();\n+        try(Loader loader = classLoader(helloOutput)) {\n+            Class<?> cls = loader.loadClass(\"com.acme.MyHello\");\n+            \/\/ check a method for \"void func(int)\"\n+            assertNotNull(findMethod(cls, \"func\", int.class));\n+            \/\/ check a method for \"int printf(MemoryAddress, Object[])\"\n+            assertNotNull(findMethod(cls, \"printf\", Addressable.class, Object[].class));\n+        } finally {\n+            deleteDir(helloOutput);\n+        }\n+    }\n","filename":"test\/jdk\/tools\/jextract\/JextractToolProviderTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}