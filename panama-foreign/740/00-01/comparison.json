{"files":[{"patch":"@@ -49,1 +49,1 @@\n-void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias, const StubLocations& locs) const {\n","filename":"src\/hotspot\/cpu\/arm\/foreignGlobals_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-  STACK = 0\n+  STACK = 0,\n+  PLACEHOLDER = 1,\n+\/\/ special locations used only by native code\n+  FRAME_DATA = PLACEHOLDER + 1,\n+  INVALID = -1\n@@ -36,2 +40,3 @@\n-constexpr inline StorageType VMStorage::stack_type() {\n-  return StorageType::STACK;\n+\/\/ need to define this before constructing VMStorage (below)\n+constexpr inline bool VMStorage::is_reg(StorageType type) {\n+   return false;\n@@ -39,0 +44,3 @@\n+constexpr inline StorageType VMStorage::stack_type() { return StorageType::STACK; }\n+constexpr inline StorageType VMStorage::placeholder_type() { return StorageType::PLACEHOLDER; }\n+constexpr inline StorageType VMStorage::frame_data_type() { return StorageType::FRAME_DATA; }\n","filename":"src\/hotspot\/cpu\/arm\/vmstorage_arm.inline.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias, const StubLocations& locs) const {\n","filename":"src\/hotspot\/cpu\/ppc\/foreignGlobals_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-  STACK = 0\n+  STACK = 0,\n+  PLACEHOLDER = 1,\n+\/\/ special locations used only by native code\n+  FRAME_DATA = PLACEHOLDER + 1,\n+  INVALID = -1\n@@ -36,2 +40,3 @@\n-constexpr inline StorageType VMStorage::stack_type() {\n-  return StorageType::STACK;\n+\/\/ need to define this before constructing VMStorage (below)\n+constexpr inline bool VMStorage::is_reg(StorageType type) {\n+   return false;\n@@ -39,0 +44,3 @@\n+constexpr inline StorageType VMStorage::stack_type() { return StorageType::STACK; }\n+constexpr inline StorageType VMStorage::placeholder_type() { return StorageType::PLACEHOLDER; }\n+constexpr inline StorageType VMStorage::frame_data_type() { return StorageType::FRAME_DATA; }\n","filename":"src\/hotspot\/cpu\/ppc\/vmstorage_ppc.inline.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias, const StubLocations& locs) const {\n","filename":"src\/hotspot\/cpu\/riscv\/foreignGlobals_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-  STACK = 0\n+  STACK = 0,\n+  PLACEHOLDER = 1,\n+\/\/ special locations used only by native code\n+  FRAME_DATA = PLACEHOLDER + 1,\n+  INVALID = -1\n@@ -36,2 +40,3 @@\n-constexpr inline StorageType VMStorage::stack_type() {\n-  return StorageType::STACK;\n+\/\/ need to define this before constructing VMStorage (below)\n+constexpr inline bool VMStorage::is_reg(StorageType type) {\n+   return false;\n@@ -39,0 +44,3 @@\n+constexpr inline StorageType VMStorage::stack_type() { return StorageType::STACK; }\n+constexpr inline StorageType VMStorage::placeholder_type() { return StorageType::PLACEHOLDER; }\n+constexpr inline StorageType VMStorage::frame_data_type() { return StorageType::FRAME_DATA; }\n","filename":"src\/hotspot\/cpu\/riscv\/vmstorage_riscv.inline.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias, const StubLocations& locs) const {\n","filename":"src\/hotspot\/cpu\/s390\/foreignGlobals_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-  STACK = 0\n+  STACK = 0,\n+  PLACEHOLDER = 1,\n+\/\/ special locations used only by native code\n+  FRAME_DATA = PLACEHOLDER + 1,\n+  INVALID = -1\n@@ -36,2 +40,3 @@\n-constexpr inline StorageType VMStorage::stack_type() {\n-  return StorageType::STACK;\n+\/\/ need to define this before constructing VMStorage (below)\n+constexpr inline bool VMStorage::is_reg(StorageType type) {\n+   return false;\n@@ -39,0 +44,3 @@\n+constexpr inline StorageType VMStorage::stack_type() { return StorageType::STACK; }\n+constexpr inline StorageType VMStorage::placeholder_type() { return StorageType::PLACEHOLDER; }\n+constexpr inline StorageType VMStorage::frame_data_type() { return StorageType::FRAME_DATA; }\n","filename":"src\/hotspot\/cpu\/s390\/vmstorage_s390.inline.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias, const StubLocations& locs) const {\n","filename":"src\/hotspot\/cpu\/x86\/foreignGlobals_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias) const {\n+void ArgumentShuffle::pd_generate(MacroAssembler* masm, VMStorage tmp, int in_stk_bias, int out_stk_bias, const StubLocations& locs) const {\n","filename":"src\/hotspot\/cpu\/zero\/foreignGlobals_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-  STACK = 0\n+  STACK = 0,\n+  PLACEHOLDER = 1,\n+\/\/ special locations used only by native code\n+  FRAME_DATA = PLACEHOLDER + 1,\n+  INVALID = -1\n@@ -36,2 +40,3 @@\n-constexpr inline StorageType VMStorage::stack_type() {\n-  return StorageType::STACK;\n+\/\/ need to define this before constructing VMStorage (below)\n+constexpr inline bool VMStorage::is_reg(StorageType type) {\n+   return false;\n@@ -39,0 +44,3 @@\n+constexpr inline StorageType VMStorage::stack_type() { return StorageType::STACK; }\n+constexpr inline StorageType VMStorage::placeholder_type() { return StorageType::PLACEHOLDER; }\n+constexpr inline StorageType VMStorage::frame_data_type() { return StorageType::FRAME_DATA; }\n","filename":"src\/hotspot\/cpu\/zero\/vmstorage_zero.inline.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}