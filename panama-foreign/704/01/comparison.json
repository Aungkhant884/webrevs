{"files":[{"patch":"@@ -78,2 +78,2 @@\n-    static void checkSize(long size, boolean includeZero) {\n-        if (size < 0 || (!includeZero && size == 0)) {\n+    static void checkSize(long size, boolean allowZero) {\n+        if (size < 0 || (!allowZero && size == 0)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AbstractLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -668,3 +668,1 @@\n-     * Creates a sequence layout with the given element layout and element count. If the element count has the\n-     * special value {@code -1}, the element count is inferred to be the biggest possible count such that\n-     * the sequence layout size does not overflow, using the following formula:\n+     * Creates a sequence layout with the given element layout and element count.\n@@ -672,5 +670,1 @@\n-     * <blockquote><pre>{@code\n-     * inferredElementCount = Long.MAX_VALUE \/ elementLayout.bitSize();\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param elementCount the sequence element count; if set to {@code -1}, the sequence element count is inferred.\n+     * @param elementCount the sequence element count.\n@@ -679,2 +673,1 @@\n-     * @throws IllegalArgumentException if {@code elementCount < -1}.\n-     * @throws IllegalArgumentException if {@code elementCount != -1} and the computation {@code elementCount * elementLayout.bitSize()} overflows.\n+     * @throws IllegalArgumentException if {@code elementCount } is negative.\n@@ -683,6 +676,0 @@\n-        if (elementCount == -1) {\n-            \/\/ inferred element count\n-            long inferredElementCount = Long.MAX_VALUE \/ elementLayout.bitSize();\n-            return new SequenceLayout(inferredElementCount, elementLayout);\n-        } else {\n-            \/\/ explicit element count\n@@ -690,0 +677,1 @@\n+            Objects.requireNonNull(elementLayout);\n@@ -691,2 +679,18 @@\n-                    new SequenceLayout(elementCount, Objects.requireNonNull(elementLayout)));\n-        }\n+                    new SequenceLayout(elementCount, elementLayout));\n+    }\n+\n+    \/**\n+     * Creates a sequence layout with the given element layout and the maximum element\n+     * count such that it does not overflow a {@code long}.\n+     *\n+     * This is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * sequenceLayout(Long.MAX_VALUE \/ elementLayout.bitSize(), elementLayout);\n+     * }\n+     *\n+     * @param elementLayout the sequence element layout.\n+     * @return a new sequence layout with the given element layout and maximum element count.\n+     *\/\n+    static SequenceLayout sequenceLayout(MemoryLayout elementLayout) {\n+        Objects.requireNonNull(elementLayout);\n+        return sequenceLayout(Long.MAX_VALUE \/ elementLayout.bitSize(), elementLayout);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -143,2 +143,2 @@\n-     * {@snippet lang=java :\n-     * SequenceLayout arrayLayout = MemoryLayout.sequenceLayout(-1,\n+     * {@snippet lang = java:\n+     * SequenceLayout arrayLayout = MemoryLayout.sequenceLayout(\n@@ -147,1 +147,1 @@\n-     * }\n+     *}\n@@ -193,1 +193,1 @@\n-        layout = MemoryLayout.sequenceLayout(-1, layout);\n+        layout = MemoryLayout.sequenceLayout(layout);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        assertEquals(MemoryLayout.sequenceLayout(-1, layout),\n+        assertEquals(MemoryLayout.sequenceLayout(layout),\n@@ -145,0 +145,5 @@\n+    public void testSequenceNegativeElementCount() {\n+        assertThrows(IllegalArgumentException.class, \/\/ negative\n+                () -> MemoryLayout.sequenceLayout(-1, JAVA_SHORT));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}