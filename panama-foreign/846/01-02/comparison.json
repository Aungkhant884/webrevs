{"files":[{"patch":"@@ -424,2 +424,2 @@\n- * types that can be used to replace the {@code ...}, as the variadic parameters of the specialized form will always\n- * have a promoted type.\n+ * types that can be used to replace the {@code ...}, as the variadic parameters of the specialized form of a variadic\n+ * function will always have a promoted type.\n@@ -433,8 +433,7 @@\n- * The native linker does not automatically perform default argument promotions, since it would be ambiguous whether sign\n- * extension should take place. However, since passing an argument of a non-promoted type as a variadic argument is not\n- * supported in C, the native linker will reject an attempt to link a specialized function descriptor with any variadic\n- * argument layouts corresponding to a non-promoted C type. Since the size of the C {@code int} type is platform-specific,\n- * exactly which layouts will be rejected is platform-specific as well. As an example: on Linux\/x64 the layouts\n- * corresponding to the C types {@code _Bool}, {@code (unsigned) char}, {@code (unsigned) short}, and {@code float}\n- * (among others), will be rejected by the linker. The {@link #canonicalLayouts()} API can be used to find which layout\n- * corresponds to a particular C type.\n+ * The native linker does not automatically perform default argument promotions. However, since passing an argument of a\n+ * non-promoted type as a variadic argument is not supported in C, the native linker will reject an attempt to link a\n+ * specialized function descriptor with any variadic argument value layouts corresponding to a non-promoted C type.\n+ * Since the size of the C {@code int} type is platform-specific, exactly which layouts will be rejected is\n+ * platform-specific as well. As an example: on Linux\/x64 the layouts corresponding to the C types {@code _Bool},\n+ * {@code (unsigned) char}, {@code (unsigned) short}, and {@code float} (among others), will be rejected by the linker.\n+ * The {@link #canonicalLayouts()} method can be used to find which layout corresponds to a particular C type.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}