{"files":[{"patch":"@@ -142,0 +142,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_BOOLEAN}.\n@@ -157,9 +159,0 @@\n-        \/**\n-         * {@return an OfBoolean with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfBoolean of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfBooleanImpl.of(order);\n-        }\n@@ -170,0 +163,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_BYTE}.\n@@ -185,9 +180,0 @@\n-        \/**\n-         * {@return an OfByte with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfByte of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfByteImpl.of(order);\n-        }\n@@ -198,0 +184,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_CHAR}.\n@@ -213,9 +201,0 @@\n-        \/**\n-         * {@return an OfChar with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfChar of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfCharImpl.of(order);\n-        }\n@@ -226,0 +205,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_SHORT}.\n@@ -241,9 +222,0 @@\n-        \/**\n-         * {@return an OfShort with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfShort of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfShortImpl.of(order);\n-        }\n@@ -254,0 +226,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_INT}.\n@@ -269,9 +243,0 @@\n-        \/**\n-         * {@return an OfInt with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfInt of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfIntImpl.of(order);\n-        }\n@@ -282,0 +247,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_FLOAT}.\n@@ -297,9 +264,0 @@\n-        \/**\n-         * {@return an OfFloat with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfFloat of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfFloatImpl.of(order);\n-        }\n@@ -310,0 +268,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_LONG}.\n@@ -325,9 +285,0 @@\n-        \/**\n-         * {@return an OfLong with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfLong of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfLongImpl.of(order);\n-        }\n@@ -338,0 +289,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #JAVA_LONG}.\n@@ -353,9 +306,0 @@\n-        \/**\n-         * {@return an OfDouble with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfDouble of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfDoubleImpl.of(order);\n-        }\n@@ -366,0 +310,2 @@\n+     * <p>\n+     * New instances of this type can be created using {@link #ADDRESS}.\n@@ -403,9 +349,0 @@\n-        \/**\n-         * {@return an OfAddress with the provided {@code order}} ;\n-         *\n-         * @param order the byte order to use\n-         *\/\n-        static OfAddress of(ByteOrder order) {\n-            Objects.requireNonNull(order);\n-            return ValueLayouts.OfAddressImpl.of(order);\n-        }\n@@ -419,1 +356,1 @@\n-     * OfAddress.of(ByteOrder.nativeOrder())\n+     * ADDRESS.of(ByteOrder.nativeOrder())\n@@ -423,1 +360,1 @@\n-    OfAddress ADDRESS = OfAddress.of(ByteOrder.nativeOrder());\n+    OfAddress ADDRESS = ValueLayouts.OfAddressImpl.of(ByteOrder.nativeOrder());\n@@ -430,1 +367,1 @@\n-     * OfByte.of(ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * JAVA_BYTE.of(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -433,1 +370,1 @@\n-    OfByte JAVA_BYTE = OfByte.of(ByteOrder.nativeOrder());\n+    OfByte JAVA_BYTE = ValueLayouts.OfByteImpl.of(ByteOrder.nativeOrder());\n@@ -440,1 +377,1 @@\n-     * OfBoolean.of(ByteOrder.nativeOrder()).withBitAlignment(8);\n+     * JAVA_BOOLEAN.of(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -443,1 +380,1 @@\n-    OfBoolean JAVA_BOOLEAN = OfBoolean.of(ByteOrder.nativeOrder());\n+    OfBoolean JAVA_BOOLEAN = ValueLayouts.OfBooleanImpl.of(ByteOrder.nativeOrder());\n@@ -450,1 +387,1 @@\n-     * OfChar.of(ByteOrder.nativeOrder()).withBitAlignment(16);\n+     * JAVA_CHAR.of(ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -453,1 +390,1 @@\n-    OfChar JAVA_CHAR = OfChar.of(ByteOrder.nativeOrder());\n+    OfChar JAVA_CHAR = ValueLayouts.OfCharImpl.of(ByteOrder.nativeOrder());\n@@ -460,1 +397,1 @@\n-     * OfShort.of(ByteOrder.nativeOrder()).withBitAlignment(16);\n+     * JAVA_SHORT.of(ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -463,1 +400,1 @@\n-    OfShort JAVA_SHORT = OfShort.of(ByteOrder.nativeOrder());\n+    OfShort JAVA_SHORT = ValueLayouts.OfShortImpl.of(ByteOrder.nativeOrder());\n@@ -470,1 +407,1 @@\n-     * OfInt.of(ByteOrder.nativeOrder()).withBitAlignment(32);\n+     * JAVA_INT.of(ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -473,1 +410,1 @@\n-    OfInt JAVA_INT = OfInt.of(ByteOrder.nativeOrder());\n+    OfInt JAVA_INT = ValueLayouts.OfIntImpl.of(ByteOrder.nativeOrder());\n@@ -480,1 +417,1 @@\n-     * OfLong.of(ByteOrder.nativeOrder()).withBitAlignment(64);\n+     * JAVA_LONG.of(ByteOrder.nativeOrder()).withBitAlignment(64);\n@@ -483,1 +420,1 @@\n-    OfLong JAVA_LONG = OfLong.of(ByteOrder.nativeOrder());\n+    OfLong JAVA_LONG = ValueLayouts.OfLongImpl.of(ByteOrder.nativeOrder());\n@@ -490,1 +427,1 @@\n-     * OfFloat.of(ByteOrder.nativeOrder()).withBitAlignment(32);\n+     * JAVA_FLOAT.of(ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -493,1 +430,1 @@\n-    OfFloat JAVA_FLOAT = OfFloat.of(ByteOrder.nativeOrder());\n+    OfFloat JAVA_FLOAT = ValueLayouts.OfFloatImpl.of(ByteOrder.nativeOrder());\n@@ -500,1 +437,1 @@\n-     * OfDouble.of(ByteOrder.nativeOrder()).withBitAlignment(64);\n+     * JAVA_DOUBLE.of(ByteOrder.nativeOrder()).withBitAlignment(64);\n@@ -503,1 +440,1 @@\n-    OfDouble JAVA_DOUBLE = OfDouble.of(ByteOrder.nativeOrder());\n+    OfDouble JAVA_DOUBLE = ValueLayouts.OfDoubleImpl.of(ByteOrder.nativeOrder());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":36,"deletions":99,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.javac.PreviewFeature;\n-\n@@ -31,1 +29,0 @@\n-import java.util.Collections;\n@@ -49,1 +46,0 @@\n-@PreviewFeature(feature=PreviewFeature.Feature.FOREIGN)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,5 +28,0 @@\n-import java.lang.foreign.ValueLayout;\n-import java.nio.ByteOrder;\n-\n-import static java.util.Objects.requireNonNull;\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/MemoryLayoutUtil.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.javac.PreviewFeature;\n-\n@@ -35,1 +33,0 @@\n-@PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/SequenceLayoutImpl.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n- * @since 19\n@@ -61,1 +60,0 @@\n-@PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -103,3 +101,0 @@\n-        \/**\n-         * {@inheritDoc}\n-         *\/\n@@ -115,3 +110,0 @@\n-        \/**\n-         * {@inheritDoc}\n-         *\/\n@@ -131,1 +123,0 @@\n-\n@@ -154,3 +145,0 @@\n-        \/**\n-         * {@inheritDoc}\n-         *\/\n@@ -208,6 +196,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code boolean.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -240,6 +222,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code byte.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -272,6 +248,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code char.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -280,2 +250,0 @@\n-        private static final OfChar NATIVE_ORDER = new OfCharImpl(ByteOrder.nativeOrder());\n-\n@@ -306,6 +274,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code short.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -314,2 +276,0 @@\n-        private static final OfShort NATIVE_ORDER = new OfShortImpl(ByteOrder.nativeOrder());\n-\n@@ -340,6 +300,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code int.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -348,2 +302,0 @@\n-        private static final OfInt NATIVE_ORDER = new OfIntImpl(ByteOrder.nativeOrder());\n-\n@@ -374,6 +326,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code float.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -382,2 +328,0 @@\n-        private static final OfFloat NATIVE_ORDER = new OfFloatImpl(ByteOrder.nativeOrder());\n-\n@@ -408,6 +352,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code long.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -416,2 +354,0 @@\n-        private static final OfLong NATIVE_ORDER = new OfLongImpl(ByteOrder.nativeOrder());\n-\n@@ -442,6 +378,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code double.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -475,6 +405,0 @@\n-    \/**\n-     * A value layout whose carrier is {@code MemorySegment.class}.\n-     *\n-     * @since 19\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.FOREIGN)\n@@ -500,1 +424,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"modified"}]}