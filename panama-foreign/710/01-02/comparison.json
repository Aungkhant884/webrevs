{"files":[{"patch":"@@ -47,1 +47,1 @@\n-import jdk.internal.foreign.layout.InternalValueLayout;\n+import jdk.internal.foreign.layout.ValueLayouts;\n@@ -1159,1 +1159,1 @@\n-        return (byte) ((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (byte) ((ValueLayouts.OfByteImpl) layout).accessHandle().get(this, offset);\n@@ -1181,1 +1181,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfByteImpl) layout).accessHandle().set(this, offset, value);\n@@ -1202,1 +1202,1 @@\n-        return (boolean)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (boolean) ((ValueLayouts.OfBooleanImpl) layout).accessHandle().get(this, offset);\n@@ -1224,1 +1224,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfBooleanImpl) layout).accessHandle().set(this, offset, value);\n@@ -1245,1 +1245,1 @@\n-        return (char)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (char) ((ValueLayouts.OfCharImpl) layout).accessHandle().get(this, offset);\n@@ -1267,1 +1267,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfCharImpl) layout).accessHandle().set(this, offset, value);\n@@ -1288,1 +1288,1 @@\n-        return (short)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (short) ((ValueLayouts.OfShortImpl) layout).accessHandle().get(this, offset);\n@@ -1310,1 +1310,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfShortImpl) layout).accessHandle().set(this, offset, value);\n@@ -1331,1 +1331,1 @@\n-        return (int)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (int) ((ValueLayouts.OfIntImpl) layout).accessHandle().get(this, offset);\n@@ -1353,1 +1353,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfIntImpl) layout).accessHandle().set(this, offset, value);\n@@ -1374,1 +1374,1 @@\n-        return (float)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (float)((ValueLayouts.OfFloatImpl) layout).accessHandle().get(this, offset);\n@@ -1396,1 +1396,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfFloatImpl) layout).accessHandle().set(this, offset, value);\n@@ -1417,1 +1417,1 @@\n-        return (long)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (long) ((ValueLayouts.OfLongImpl) layout).accessHandle().get(this, offset);\n@@ -1439,1 +1439,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfLongImpl) layout).accessHandle().set(this, offset, value);\n@@ -1460,1 +1460,1 @@\n-        return (double)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (double) ((ValueLayouts.OfDoubleImpl) layout).accessHandle().get(this, offset);\n@@ -1482,1 +1482,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfDoubleImpl) layout).accessHandle().set(this, offset, value);\n@@ -1506,1 +1506,1 @@\n-        return (MemorySegment)((InternalValueLayout) layout).accessHandle().get(this, offset);\n+        return (MemorySegment) ((ValueLayouts.OfAddressImpl) layout).accessHandle().get(this, offset);\n@@ -1528,1 +1528,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, offset, value);\n+        ((ValueLayouts.OfAddressImpl) layout).accessHandle().set(this, offset, value);\n@@ -1552,1 +1552,1 @@\n-        return (char)((InternalValueLayout) layout).accessHandle().get(this, index * layout.byteSize());\n+        return (char) ((ValueLayouts.OfCharImpl) layout).accessHandle().get(this, index * layout.byteSize());\n@@ -1577,1 +1577,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, index * layout.byteSize(), value);\n+        ((ValueLayouts.OfCharImpl) layout).accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1601,1 +1601,1 @@\n-        return (short)((InternalValueLayout) layout).accessHandle().get(this, index * layout.byteSize());\n+        return (short) ((ValueLayouts.OfShortImpl) layout).accessHandle().get(this, index * layout.byteSize());\n@@ -1626,1 +1626,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, index * layout.byteSize(), value);\n+        ((ValueLayouts.OfShortImpl) layout).accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1650,1 +1650,1 @@\n-        return (int)((InternalValueLayout) layout).accessHandle().get(this, index * layout.byteSize());\n+        return (int) ((ValueLayouts.OfIntImpl) layout).accessHandle().get(this, index * layout.byteSize());\n@@ -1675,1 +1675,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, index * layout.byteSize(), value);\n+        ((ValueLayouts.OfIntImpl) layout).accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1699,1 +1699,1 @@\n-        return (float)((InternalValueLayout) layout).accessHandle().get(this, index * layout.byteSize());\n+        return (float) ((ValueLayouts.OfFloatImpl) layout).accessHandle().get(this, index * layout.byteSize());\n@@ -1724,1 +1724,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, index * layout.byteSize(), value);\n+        ((ValueLayouts.OfFloatImpl) layout).accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1748,1 +1748,1 @@\n-        return (long)((InternalValueLayout) layout).accessHandle().get(this, index * layout.byteSize());\n+        return (long) ((ValueLayouts.OfLongImpl) layout).accessHandle().get(this, index * layout.byteSize());\n@@ -1773,1 +1773,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, index * layout.byteSize(), value);\n+        ((ValueLayouts.OfLongImpl) layout).accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1797,1 +1797,1 @@\n-        return (double)((InternalValueLayout) layout).accessHandle().get(this, index * layout.byteSize());\n+        return (double) ((ValueLayouts.OfDoubleImpl) layout).accessHandle().get(this, index * layout.byteSize());\n@@ -1822,1 +1822,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, index * layout.byteSize(), value);\n+        ((ValueLayouts.OfDoubleImpl) layout).accessHandle().set(this, index * layout.byteSize(), value);\n@@ -1850,1 +1850,1 @@\n-        return (MemorySegment)((InternalValueLayout) layout).accessHandle().get(this, index * layout.byteSize());\n+        return (MemorySegment) ((ValueLayouts.OfAddressImpl) layout).accessHandle().get(this, index * layout.byteSize());\n@@ -1875,1 +1875,1 @@\n-        ((InternalValueLayout) layout).accessHandle().set(this, index * layout.byteSize(), value);\n+        ((ValueLayouts.OfAddressImpl) layout).accessHandle().set(this, index * layout.byteSize(), value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-package jdk.internal.foreign.layout;\n-\n-import java.lang.invoke.VarHandle;\n-\n-public interface InternalValueLayout {\n-\n-    VarHandle accessHandle();\n-\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/InternalValueLayout.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -77,1 +77,1 @@\n-    public static PaddingLayout create(long bitSize) {\n+    public static PaddingLayout of(long bitSize) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/PaddingLayoutImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    abstract static class AbstractValueLayout<V extends AbstractValueLayout<V> & ValueLayout> extends AbstractLayout<V> implements InternalValueLayout {\n+    abstract static class AbstractValueLayout<V extends AbstractValueLayout<V> & ValueLayout> extends AbstractLayout<V> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED MemoryLayoutPrincipalTotalityTest\n+ * @run testng\/othervm MemoryLayoutPrincipalTotalityTest\n","filename":"test\/jdk\/java\/foreign\/MemoryLayoutPrincipalTotalityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED MemoryLayoutTypeRetentionTest\n+ * @run testng\/othervm MemoryLayoutTypeRetentionTest\n","filename":"test\/jdk\/java\/foreign\/MemoryLayoutTypeRetentionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}