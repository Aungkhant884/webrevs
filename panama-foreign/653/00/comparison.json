{"files":[{"patch":"@@ -72,1 +72,1 @@\n-        return name.isEmpty()? \"_x\" + i : name;\n+        return name.isEmpty()? \"_x\" + i : Utils.javaSafeIdentifier(name);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+import test.jextract.test8282235.*;\n+\n+\/*\n+ * @test id=sources\n+ * @bug 8282235\n+ * @summary jextract crashes when a Java keyword is used in as a function pointer typedef parameter name\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run main\/othervm JtregJextractSources -l Test8282235 -t test.jextract.test8282235 -- test8282235.h\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract,ALL-UNNAMED Test8282235\n+ *\/\n+public class Test8282235 {\n+    @Test\n+    public void testFunctionalInterfaceParameterNames() throws NoSuchMethodException {\n+        var apply = func.class.getMethod(\"apply\", int.class);\n+        assertEquals(apply.getParameters()[0].getName(), \"abstract_\");\n+        apply = fptr.class.getMethod(\"apply\", int.class, int.class);\n+        assertEquals(apply.getParameters()[0].getName(), \"public_\");\n+        assertEquals(apply.getParameters()[1].getName(), \"interface_\");\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8282235\/Test8282235.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -23,1 +23,0 @@\n-package p2;\n@@ -25,3 +24,2 @@\n-public interface TestIntf {\n-    String test();\n-}\n+typedef void func(int abstract);\n+typedef void (*fptr)(int public, int interface);\n","filename":"test\/jdk\/tools\/jextract\/test8282235\/test8282235.h","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/m2\/p2\/TestIntf.java","status":"copied"}]}