{"files":[{"patch":"@@ -223,1 +223,1 @@\n-                    methodType(MemorySegment.class, MemoryAddress.class, long.class, SharedUtils.Allocator.class));\n+                    methodType(MemorySegment.class, MemoryAddress.class, long.class));\n@@ -840,1 +840,1 @@\n-     * BOX_ADDRESS()\n+     * Box_ADDRESS()\n@@ -910,2 +910,2 @@\n-     * TO_SEGMENT([size])\n-     *   Pops a MemoryAddress from the operand stack, and converts it to a MemorySegment\n+     * BASE_ADDRESS([size])\n+     *   Pops a MemoryAddress from the operand stack, and takes the converts it to a MemorySegment\n@@ -924,3 +924,2 @@\n-        private static MemorySegment toSegment(MemoryAddress operand, long size, SharedUtils.Allocator allocator) {\n-            MemorySegment ms = MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size);\n-            return allocator.handoff(ms);\n+        private static MemorySegment toSegment(MemoryAddress operand, long size) {\n+            return MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size);\n@@ -940,1 +939,1 @@\n-            MemorySegment segment = toSegment(operand, size, allocator);\n+            MemorySegment segment = toSegment(operand, size);\n@@ -947,2 +946,1 @@\n-            specializedHandle = filterArguments(specializedHandle, insertPos, toSegmentHandle);\n-            return Binding.mergeArguments(specializedHandle, allocatorPos, insertPos + 1);\n+            return filterArguments(specializedHandle, insertPos, toSegmentHandle);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.foreign.NativeScope;\n@@ -86,2 +85,1 @@\n-        try (NativeScope scope = NativeScope.unboundedScope()) { \/\/ TODO exact size\n-            SharedUtils.Allocator allocator = SharedUtils.Allocator.ofScope(scope);\n+        try {\n@@ -104,1 +102,1 @@\n-                        }, allocator);\n+                        }, DEFAULT_ALLOCATOR);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableUpcallHandler.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -382,4 +382,0 @@\n-        default MemorySegment handoff(MemorySegment ms) {\n-            return ms;\n-        }\n-\n@@ -395,5 +391,0 @@\n-                @Override\n-                public MemorySegment handoff(MemorySegment ms) {\n-                    return ms.handoff(scope);\n-                }\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -410,0 +410,3 @@\n+                    \/\/ ASSERT SCOPE OF BOXED ADDRESS HERE\n+                    \/\/ caveat. buffer should instead go out of scope after call\n+                    bindings.copy(layout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -282,0 +282,3 @@\n+                    \/\/ ASSERT SCOPE OF BOXED ADDRESS HERE\n+                    \/\/ caveat. buffer should instead go out of scope after call\n+                    bindings.copy(layout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,2 +88,1 @@\n-            PASS_AND_SAVE = MethodHandles.lookup().findStatic(TestUpcall.class, \"passAndSave\",\n-                    MethodType.methodType(Object.class, Object[].class, AtomicReference.class, List.class));\n+            PASS_AND_SAVE = MethodHandles.lookup().findStatic(TestUpcall.class, \"passAndSave\", MethodType.methodType(Object.class, Object[].class, AtomicReference.class));\n@@ -159,1 +158,1 @@\n-        MethodHandle mh = insertArguments(PASS_AND_SAVE, 1, box, segments);\n+        MethodHandle mh = insertArguments(PASS_AND_SAVE, 1, box);\n@@ -197,10 +196,1 @@\n-    static Object passAndSave(Object[] o, AtomicReference<Object[]> ref, List<MemorySegment> copies) {\n-        for (int i = 0; i < o.length; i++) {\n-            if (o[i] instanceof MemorySegment) {\n-                MemorySegment ms = (MemorySegment) o[i];\n-                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize());\n-                copy.copyFrom(ms);\n-                o[i] = copy;\n-                copies.add(copy);\n-            }\n-        }\n+    static Object passAndSave(Object[] o, AtomicReference<Object[]> ref) {\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-                    MethodType.methodType(void.class, Object[].class, AtomicReference.class, List.class));\n+                    MethodType.methodType(void.class, Object[].class, AtomicReference.class));\n@@ -107,10 +107,1 @@\n-    static void passAndSave(Object[] o, AtomicReference<Object[]> ref, List<MemorySegment> copies) {\n-        for (int i = 0; i < o.length; i++) {\n-            if (o[i] instanceof MemorySegment) {\n-                MemorySegment ms = (MemorySegment) o[i];\n-                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize());\n-                copy.copyFrom(ms);\n-                o[i] = copy;\n-                copies.add(copy);\n-            }\n-        }\n+    static void passAndSave(Object[] o, AtomicReference<Object[]> ref) {\n@@ -123,1 +114,0 @@\n-        List<MemorySegment> segments = new ArrayList<>();\n@@ -125,1 +115,1 @@\n-        MethodHandle target = MethodHandles.insertArguments(MH_passAndSave, 1, capturedArgs, segments)\n+        MethodHandle target = MethodHandles.insertArguments(MH_passAndSave, 1, capturedArgs)\n@@ -129,0 +119,1 @@\n+            List<MemorySegment> segments = new ArrayList<>();\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"}]}