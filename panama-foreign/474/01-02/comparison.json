{"files":[{"patch":"@@ -68,4 +68,6 @@\n-        MemorySegment pathStr = CLinker.toCString(path.toAbsolutePath().toString());\n-        SaveError res = SaveError.valueOf(Index_h.clang_saveTranslationUnit(tu, pathStr, 0));\n-        if (res != SaveError.None) {\n-            throw new TranslationUnitSaveException(path, res);\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            MemorySegment pathStr = CLinker.toCString(path.toAbsolutePath().toString(), scope);\n+            SaveError res = SaveError.valueOf(Index_h.clang_saveTranslationUnit(tu, pathStr, 0));\n+            if (res != SaveError.None) {\n+                throw new TranslationUnitSaveException(path, res);\n+            }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -114,2 +114,4 @@\n-        MemorySegment cfname = CLinker.toCString(fieldName);\n-        return Index_h.clang_Type_getOffsetOf(type, cfname);\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            MemorySegment cfname = CLinker.toCString(fieldName, scope);\n+            return Index_h.clang_Type_getOffsetOf(type, cfname);\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Type.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -87,0 +87,18 @@\n+    \/\/ This class can be used to debug usages of functions requiring allocation - disabled by default\n+    final static class DumpAllocator implements SegmentAllocator {\n+\n+        boolean reported = false;\n+\n+        @Override\n+        public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n+            if (!reported) {\n+                new AssertionError(\"allocator required?\").printStackTrace();\n+            }\n+            reported = true;\n+            return SegmentAllocator.ofDefault().allocate(bytesSize, bytesAlignment);\n+        }\n+    }\n+\n+    \/\/ switch this to \"true\" to enable verbose analysis of function requiring allocation\n+    static boolean DEBUG_ALLOCATOR = false;\n+\n@@ -91,0 +109,2 @@\n+                    SegmentAllocator allocator = mt.returnType().equals(MemorySegment.class) && DEBUG_ALLOCATOR ?\n+                            new DumpAllocator() : DEFAULT_ALLOCATOR;\n@@ -93,1 +113,1 @@\n-                        LINKER.downcallHandle(addr, DEFAULT_ALLOCATOR, mt, fdesc);\n+                        LINKER.downcallHandle(addr, allocator, mt, fdesc);\n@@ -97,1 +117,1 @@\n-    static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic, NativeScope scope) {\n+    static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic, SegmentAllocator allocator) {\n@@ -103,1 +123,1 @@\n-                            LINKER.downcallHandle(addr, scope, mt, fdesc);\n+                            LINKER.downcallHandle(addr, allocator, mt, fdesc);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-            paramNames.add(\"allocator\");\n+            paramNames.add(0, \"allocator\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -53,6 +54,8 @@\n-        MemorySegment s = MemorySegment.allocateNative(1024);\n-        my_sprintf(s,\n-            toCString(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n-            (byte) 1, 'b', -1.25f, 5.5d, -200L, Long.MAX_VALUE, (byte) -2, (short) 2, 3, (short) -4, 5L, 'a');\n-        String str = toJavaString(s);\n-        assertEquals(str, \"1 b -1.25 5.50 -200 \" + Long.MAX_VALUE + \" -2 2 3 -4 5 a\");\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            MemorySegment s = MemorySegment.allocateNative(1024, scope);\n+            my_sprintf(s,\n+                    toCString(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n+                    (byte) 1, 'b', -1.25f, 5.5d, -200L, Long.MAX_VALUE, (byte) -2, (short) 2, 3, (short) -4, 5L, 'a');\n+            String str = toJavaString(s);\n+            assertEquals(str, \"1 b -1.25 5.50 -200 \" + Long.MAX_VALUE + \" -2 2 3 -4 5 a\");\n+        }\n","filename":"test\/jdk\/tools\/jextract\/test8244959\/Test8244959.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -55,10 +56,12 @@\n-        var callback = func$callback.allocate((argc, argv) -> {\n-            callbackCalled[0] = true;\n-            var addr = argv.asSegmentRestricted(C_POINTER.byteSize() * argc);\n-            assertEquals(argc, 4);\n-            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 0)), \"java\");\n-            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 1)), \"python\");\n-            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 2)), \"javascript\");\n-            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 3)), \"c++\");\n-        });\n-        func(callback);\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            var callback = func$callback.allocate((argc, argv) -> {\n+                callbackCalled[0] = true;\n+                var addr = argv.asSegmentRestricted(C_POINTER.byteSize() * argc, scope);\n+                assertEquals(argc, 4);\n+                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 0)), \"java\");\n+                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 1)), \"python\");\n+                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 2)), \"javascript\");\n+                assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 3)), \"c++\");\n+            }, scope);\n+            func(callback);\n+        }\n","filename":"test\/jdk\/tools\/jextract\/test8246341\/LibTest8246341Test.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -46,2 +47,4 @@\n-        var handle = func$f.allocate(x -> x*x);\n-        assertEquals(func(handle, 35), 35 * 35 + 35);\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            var handle = func$f.allocate(x -> x * x, scope);\n+            assertEquals(func(handle, 35), 35 * 35 + 35);\n+        }\n","filename":"test\/jdk\/tools\/jextract\/testFunctionPointer\/LibFuncPtrTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}