{"files":[{"patch":"@@ -242,0 +242,10 @@\n+    void emitPointerTypedef(String name) {\n+        incrAlign();\n+        indent();\n+        append(MEMBER_MODS);\n+        append(\" ValueLayout \");\n+        append(uniqueNestedClassName(name));\n+        append(\" = C_POINTER;\\n\");\n+        decrAlign();\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -371,0 +371,2 @@\n+            } else if (((TypeImpl)type).isPointer()) {\n+                toplevelBuilder.addTypedef(tree.name(), null, type);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,0 +109,3 @@\n+        } else if (((TypeImpl)type).isPointer()) {\n+            \/\/ pointer typedef\n+            nextHeader().emitPointerTypedef(name);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ToplevelBuilder.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -339,0 +339,5 @@\n+    public boolean isPointer() {\n+        return this instanceof Type.Delegated delegated &&\n+                delegated.kind() == Type.Delegated.Kind.POINTER;\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertNotNull;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 8273382\n+ * @summary jextract should generete alias layout for pointer typedefs\n+ * @run testng\/othervm --enable-native-access=jdk.incubator.jextract Test8273382\n+ *\/\n+public class Test8273382 extends JextractToolRunner {\n+    @Test\n+    public void testPointerTypedefs() {\n+        Path test8273382Output = getOutputFilePath(\"test8273382gen\");\n+        Path test8273382H = getInputFilePath(\"test8273382.h\");\n+        run(\"-d\", test8273382Output.toString(), test8273382H.toString()).checkSuccess();\n+        try(Loader loader = classLoader(test8273382Output)) {\n+            Class<?> headerCls = loader.loadClass(\"test8273382_h\");\n+            assertNotNull(findField(headerCls, \"int_ptr_t\"));\n+            assertNotNull(findField(headerCls, \"point_ptr_t\"));\n+        } finally {\n+            deleteDir(test8273382Output);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/Test8273382.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -24,5 +24,4 @@\n-struct foo {\n-   int clear_color[2];\n-   int clear_z;\n-   char clear_s;\n-   int pad:24;\n+typedef int* int_ptr_t;\n+\n+struct Point {\n+    int x, y;\n@@ -30,0 +29,2 @@\n+\n+typedef struct Point* point_ptr_t;\n","filename":"test\/jdk\/tools\/jextract\/test8273382.h","additions":6,"deletions":5,"binary":false,"changes":11,"previous_filename":"test\/jdk\/tools\/jextract\/test8261578\/test8261578_2.h","status":"copied"}]}