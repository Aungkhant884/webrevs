{"files":[{"patch":"@@ -228,0 +228,4 @@\n+         * <p>\n+         * This method is <em>restricted<\/em>. Restricted method are unsafe, and, if used incorrectly, their use might crash\n+         * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+         * restricted methods, and use safe and supported functionalities, where possible.\n@@ -232,1 +236,2 @@\n-        static VaList ofAddress(MemoryAddress address) {\n+        static VaList ofAddressRestricted(MemoryAddress address) {\n+            Utils.checkRestrictedAccess(\"VaList.ofAddressRestricted\");\n@@ -302,1 +307,1 @@\n-            Builder vargFromInt(MemoryLayout layout, int value);\n+            Builder vargFromInt(ValueLayout layout, int value);\n@@ -312,1 +317,1 @@\n-            Builder vargFromLong(MemoryLayout layout, long value);\n+            Builder vargFromLong(ValueLayout layout, long value);\n@@ -322,1 +327,1 @@\n-            Builder vargFromDouble(MemoryLayout layout, double value);\n+            Builder vargFromDouble(ValueLayout layout, double value);\n@@ -328,1 +333,1 @@\n-             * @param value the value, represented as a {@code MemoryAddress}.\n+             * @param value the value, represented as a {@code Addressable}.\n@@ -332,1 +337,1 @@\n-            Builder vargFromAddress(MemoryLayout layout, MemoryAddress value);\n+            Builder vargFromAddress(ValueLayout layout, Addressable value);\n@@ -342,1 +347,1 @@\n-            Builder vargFromSegment(MemoryLayout layout, MemorySegment value);\n+            Builder vargFromSegment(GroupLayout layout, MemorySegment value);\n@@ -894,0 +899,4 @@\n+     * <p>\n+     * This method is <em>restricted<\/em>. Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -905,0 +914,4 @@\n+     * <p>\n+     * This method is <em>restricted<\/em>. Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CSupport.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    default MemorySegment allocate(MemoryLayout layout, byte value) {\n+    default MemorySegment allocate(ValueLayout layout, byte value) {\n@@ -106,1 +106,1 @@\n-    default MemorySegment allocate(MemoryLayout layout, short value) {\n+    default MemorySegment allocate(ValueLayout layout, short value) {\n@@ -124,1 +124,1 @@\n-    default MemorySegment allocate(MemoryLayout layout, int value) {\n+    default MemorySegment allocate(ValueLayout layout, int value) {\n@@ -142,1 +142,1 @@\n-    default MemorySegment allocate(MemoryLayout layout, float value) {\n+    default MemorySegment allocate(ValueLayout layout, float value) {\n@@ -160,1 +160,1 @@\n-    default MemorySegment allocate(MemoryLayout layout, long value) {\n+    default MemorySegment allocate(ValueLayout layout, long value) {\n@@ -178,1 +178,1 @@\n-    default MemorySegment allocate(MemoryLayout layout, double value) {\n+    default MemorySegment allocate(ValueLayout layout, double value) {\n@@ -186,1 +186,2 @@\n-     * Allocate a block of memory in this native scope with given layout and initialize it with given address value.\n+     * Allocate a block of memory in this native scope with given layout and initialize it with given address value\n+     * (expressed as an {@link Addressable} instance).\n@@ -197,1 +198,1 @@\n-    default MemorySegment allocate(MemoryLayout layout, MemoryAddress value) {\n+    default MemorySegment allocate(ValueLayout layout, Addressable value) {\n@@ -202,2 +203,2 @@\n-            case 4: return allocate(layout, (int)value.toRawLongValue());\n-            case 8: return allocate(layout, value.toRawLongValue());\n+            case 4: return allocate(layout, (int)value.address().toRawLongValue());\n+            case 8: return allocate(layout, value.address().toRawLongValue());\n@@ -325,1 +326,1 @@\n-    default MemorySegment allocateArray(ValueLayout elementLayout, MemoryAddress[] array) {\n+    default MemorySegment allocateArray(ValueLayout elementLayout, Addressable[] array) {\n@@ -331,1 +332,1 @@\n-                            .mapToInt(a -> (int)a.toRawLongValue()).toArray(),\n+                            .mapToInt(a -> (int)a.address().toRawLongValue()).toArray(),\n@@ -334,1 +335,1 @@\n-                            .mapToLong(MemoryAddress::toRawLongValue).toArray(),\n+                            .mapToLong(a -> a.address().toRawLongValue()).toArray(),\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/NativeScope.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,7 +28,1 @@\n-import jdk.incubator.foreign.CSupport;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryHandles;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeScope;\n+import jdk.incubator.foreign.*;\n@@ -447,1 +441,1 @@\n-        public Builder vargFromInt(MemoryLayout layout, int value) {\n+        public Builder vargFromInt(ValueLayout layout, int value) {\n@@ -452,1 +446,1 @@\n-        public Builder vargFromLong(MemoryLayout layout, long value) {\n+        public Builder vargFromLong(ValueLayout layout, long value) {\n@@ -457,1 +451,1 @@\n-        public Builder vargFromDouble(MemoryLayout layout, double value) {\n+        public Builder vargFromDouble(ValueLayout layout, double value) {\n@@ -462,2 +456,2 @@\n-        public Builder vargFromAddress(MemoryLayout layout, MemoryAddress value) {\n-            return arg(MemoryAddress.class, layout, value);\n+        public Builder vargFromAddress(ValueLayout layout, Addressable value) {\n+            return arg(MemoryAddress.class, layout, value.address());\n@@ -467,1 +461,1 @@\n-        public Builder vargFromSegment(MemoryLayout layout, MemorySegment value) {\n+        public Builder vargFromSegment(GroupLayout layout, MemorySegment value) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64VaList.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,7 +28,1 @@\n-import jdk.incubator.foreign.CSupport;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryHandles;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeScope;\n+import jdk.incubator.foreign.*;\n@@ -378,1 +372,1 @@\n-        public Builder vargFromInt(MemoryLayout layout, int value) {\n+        public Builder vargFromInt(ValueLayout layout, int value) {\n@@ -383,1 +377,1 @@\n-        public Builder vargFromLong(MemoryLayout layout, long value) {\n+        public Builder vargFromLong(ValueLayout layout, long value) {\n@@ -388,1 +382,1 @@\n-        public Builder vargFromDouble(MemoryLayout layout, double value) {\n+        public Builder vargFromDouble(ValueLayout layout, double value) {\n@@ -393,2 +387,2 @@\n-        public Builder vargFromAddress(MemoryLayout layout, MemoryAddress value) {\n-            return arg(MemoryAddress.class, layout, value);\n+        public Builder vargFromAddress(ValueLayout layout, Addressable value) {\n+            return arg(MemoryAddress.class, layout, value.address());\n@@ -398,1 +392,1 @@\n-        public Builder vargFromSegment(MemoryLayout layout, MemorySegment value) {\n+        public Builder vargFromSegment(GroupLayout layout, MemorySegment value) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.*;\n@@ -30,5 +30,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryHandles;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeScope;\n@@ -209,1 +204,1 @@\n-        public Builder vargFromInt(MemoryLayout layout, int value) {\n+        public Builder vargFromInt(ValueLayout layout, int value) {\n@@ -214,1 +209,1 @@\n-        public Builder vargFromLong(MemoryLayout layout, long value) {\n+        public Builder vargFromLong(ValueLayout layout, long value) {\n@@ -219,1 +214,1 @@\n-        public Builder vargFromDouble(MemoryLayout layout, double value) {\n+        public Builder vargFromDouble(ValueLayout layout, double value) {\n@@ -224,2 +219,2 @@\n-        public Builder vargFromAddress(MemoryLayout layout, MemoryAddress value) {\n-            return arg(MemoryAddress.class, layout, value);\n+        public Builder vargFromAddress(ValueLayout layout, Addressable value) {\n+            return arg(MemoryAddress.class, layout, value.address());\n@@ -229,1 +224,1 @@\n-        public Builder vargFromSegment(MemoryLayout layout, MemorySegment value) {\n+        public Builder vargFromSegment(GroupLayout layout, MemorySegment value) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -47,9 +47,1 @@\n-import jdk.incubator.foreign.CSupport;\n-import jdk.incubator.foreign.ForeignLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.LibraryLookup;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeScope;\n-import jdk.incubator.foreign.SequenceLayout;\n+import jdk.incubator.foreign.*;\n@@ -429,1 +421,1 @@\n-        final MemoryLayout layout;\n+        final ValueLayout layout;\n@@ -436,1 +428,1 @@\n-        <Z> PrintfArg(Class<?> carrier, MemoryLayout layout, String format, Z nativeValue, Object javaValue, VaListBuilderCall<Z> builderCall) {\n+        <Z> PrintfArg(Class<?> carrier, ValueLayout layout, String format, Z nativeValue, Object javaValue, VaListBuilderCall<Z> builderCall) {\n@@ -452,1 +444,1 @@\n-            void build(VaList.Builder builder, MemoryLayout layout, V value);\n+            void build(VaList.Builder builder, ValueLayout layout, V value);\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.*;\n@@ -39,9 +39,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.LibraryLookup;\n-import jdk.incubator.foreign.MemoryAccess;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeScope;\n@@ -159,1 +150,1 @@\n-                           MemoryLayout intLayout) {\n+                           ValueLayout intLayout) {\n@@ -187,1 +178,1 @@\n-                              MemoryLayout doubleLayout) {\n+                              ValueLayout doubleLayout) {\n@@ -217,1 +208,1 @@\n-                                        MemoryLayout pointerLayout) {\n+                                        ValueLayout pointerLayout) {\n@@ -270,1 +261,1 @@\n-                           MemoryLayout Point_LAYOUT, VarHandle VH_Point_x, VarHandle VH_Point_y) {\n+                           GroupLayout Point_LAYOUT, VarHandle VH_Point_x, VarHandle VH_Point_y) {\n@@ -321,1 +312,1 @@\n-                              MemoryLayout BigPoint_LAYOUT, VarHandle VH_BigPoint_x, VarHandle VH_BigPoint_y) {\n+                              GroupLayout BigPoint_LAYOUT, VarHandle VH_BigPoint_x, VarHandle VH_BigPoint_y) {\n@@ -372,1 +363,1 @@\n-                                MemoryLayout FloatPoint_LAYOUT,\n+                                GroupLayout FloatPoint_LAYOUT,\n@@ -432,1 +423,1 @@\n-                               MemoryLayout HugePoint_LAYOUT,\n+                               GroupLayout HugePoint_LAYOUT,\n@@ -485,2 +476,2 @@\n-                          MemoryLayout longLayout,\n-                          MemoryLayout doubleLayout) {\n+                          ValueLayout longLayout,\n+                          ValueLayout doubleLayout) {\n@@ -558,1 +549,1 @@\n-                                 MemoryLayout intLayout) {\n+                                 ValueLayout intLayout) {\n@@ -574,1 +565,1 @@\n-                                MemoryLayout Point_LAYOUT, VarHandle VH_Point_x, VarHandle VH_Point_y) {\n+                                GroupLayout Point_LAYOUT, VarHandle VH_Point_x, VarHandle VH_Point_y) {\n@@ -602,1 +593,1 @@\n-    public void testCopy(Function<Consumer<VaList.Builder>, VaList> vaListFactory, MemoryLayout intLayout) {\n+    public void testCopy(Function<Consumer<VaList.Builder>, VaList> vaListFactory, ValueLayout intLayout) {\n@@ -618,1 +609,1 @@\n-    public void testScopedCopy(Function<Consumer<VaList.Builder>, VaList> vaListFactory, MemoryLayout intLayout) {\n+    public void testScopedCopy(Function<Consumer<VaList.Builder>, VaList> vaListFactory, ValueLayout intLayout) {\n@@ -638,1 +629,1 @@\n-                                                    MemoryLayout intLayout) {\n+                                                    ValueLayout intLayout) {\n@@ -651,1 +642,1 @@\n-                                                         MemoryLayout intLayout) {\n+                                                         ValueLayout intLayout) {\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"}]}