{"files":[{"patch":"@@ -7,1 +7,0 @@\n-* Generated C_LONG layouts are replaced with C_LONGLONG for portability\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/README","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.clang.libclang;\n+package jdk.internal.clang;\n@@ -30,1 +30,1 @@\n-public class CLayouts {\n+public interface CLayouts {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/CLayouts.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CLayouts.java","status":"renamed"},{"patch":"@@ -44,1 +44,1 @@\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n+import static jdk.internal.clang.CLayouts.C_POINTER;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Index.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-import static jdk.internal.clang.libclang.CLayouts.C_INT;\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n+import static jdk.internal.clang.CLayouts.C_INT;\n+import static jdk.internal.clang.CLayouts.C_POINTER;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/LibClang.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import static jdk.internal.clang.libclang.CLayouts.C_INT;\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n+import static jdk.internal.clang.CLayouts.C_INT;\n+import static jdk.internal.clang.CLayouts.C_POINTER;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceLocation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-import static jdk.internal.clang.libclang.CLayouts.C_INT;\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n+import static jdk.internal.clang.CLayouts.C_INT;\n+import static jdk.internal.clang.CLayouts.C_POINTER;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,1 +38,1 @@\n-    static Addressable allocate(CXCursorVisitor fi) {\n+    static CLinker.UpcallStub allocate(CXCursorVisitor fi) {\n@@ -41,1 +41,1 @@\n-    static Addressable allocate(CXCursorVisitor fi, ResourceScope scope) {\n+    static CLinker.UpcallStub allocate(CXCursorVisitor fi, ResourceScope scope) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXCursorVisitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,4 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.C_INT;\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n-\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -41,2 +38,2 @@\n-        MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-        C_POINTER.withName(\"ptr_data\")\n+        MemoryLayout.sequenceLayout(4, JAVA_INT).withName(\"int_data\"),\n+        ADDRESS.withName(\"ptr_data\")\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXToken.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,4 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.C_INT;\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n-\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -41,1 +38,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -43,1 +40,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXType.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,4 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.C_LONG_LONG;\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n-\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -41,3 +38,3 @@\n-        C_POINTER.withName(\"Filename\"),\n-        C_POINTER.withName(\"Contents\"),\n-        C_LONG_LONG.withName(\"Length\")\n+        ADDRESS.withName(\"Filename\"),\n+        ADDRESS.withName(\"Contents\"),\n+        JAVA_LONG.withName(\"Length\")\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXUnsavedFile.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -37,13 +37,9 @@\n-    \/\/ Manual change to handle platform specific library name difference\n-    private static String libName() {\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            return \"libclang\";\n-        }\n-        return \"clang\";\n-    }\n-\n-    static {\n-        System.loadLibrary(libName());\n-    }\n-\n-    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    \/* package-private *\/ Index_h() {}\n+    \/* package-private *\/ Index_h() {}\n+    public static ValueLayout.OfByte C_CHAR = JAVA_BYTE;\n+    public static ValueLayout.OfShort C_SHORT = JAVA_SHORT;\n+    public static ValueLayout.OfInt C_INT = JAVA_INT;\n+    public static ValueLayout.OfLong C_LONG = JAVA_LONG;\n+    public static ValueLayout.OfLong C_LONG_LONG = JAVA_LONG;\n+    public static ValueLayout.OfFloat C_FLOAT = JAVA_FLOAT;\n+    public static ValueLayout.OfDouble C_DOUBLE = JAVA_DOUBLE;\n+    public static ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS;\n@@ -87,0 +83,2 @@\n+    public static ValueLayout.OfAddress CXIndex = ValueLayout.ADDRESS;\n+    public static ValueLayout.OfAddress CXTranslationUnit = ValueLayout.ADDRESS;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.foreign.CLinker.UpcallStub;\n@@ -41,1 +40,0 @@\n-\n@@ -45,0 +43,6 @@\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n@@ -46,3 +50,2 @@\n-import static jdk.internal.clang.libclang.CLayouts.C_DOUBLE;\n-import static jdk.internal.clang.libclang.CLayouts.C_LONG_LONG;\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n+import static jdk.incubator.foreign.CLinker.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -51,0 +54,1 @@\n+\n@@ -55,0 +59,6 @@\n+    private final static SymbolLookup SYMBOL_LOOKUP;\n+\n+    static {\n+        \/\/ Manual change to handle platform specific library name difference\n+        String libName = System.getProperty(\"os.name\").startsWith(\"Windows\")? \"libclang\" : \"clang\";\n+        System.loadLibrary(libName);\n@@ -56,1 +66,0 @@\n-    static SymbolLookup lookup() {\n@@ -58,1 +67,1 @@\n-        return name -> loaderLookup.lookup(name).or(() -> LINKER.lookup(name));\n+        SYMBOL_LOOKUP = name -> loaderLookup.lookup(name).or(() -> LINKER.lookup(name));\n@@ -70,2 +79,2 @@\n-    static final MemorySegment lookupGlobalVariable(SymbolLookup LOOKUP, String name, MemoryLayout layout) {\n-        return LOOKUP.lookup(name).map(s -> MemorySegment.ofAddressNative(s.address(), layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n+    static final MemorySegment lookupGlobalVariable(String name, MemoryLayout layout) {\n+        return SYMBOL_LOOKUP.lookup(name).map(addr -> MemorySegment.ofAddressNative(addr, layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n@@ -74,2 +83,2 @@\n-    static final MethodHandle downcallHandle(SymbolLookup LOOKUP, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {\n-        return LOOKUP.lookup(name).map(\n+    static final MethodHandle downcallHandle(String name, FunctionDescriptor fdesc, boolean variadic) {\n+        return SYMBOL_LOOKUP.lookup(name).map(\n@@ -83,1 +92,1 @@\n-    static final MethodHandle downcallHandle(String desc, FunctionDescriptor fdesc, boolean variadic) {\n+    static final MethodHandle downcallHandle(FunctionDescriptor fdesc, boolean variadic) {\n@@ -90,1 +99,1 @@\n-    static final <Z> UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n+    static final <Z> CLinker.UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n@@ -94,1 +103,1 @@\n-    static final <Z> UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> CLinker.UpcallStub upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n@@ -244,1 +253,1 @@\n-                return C_LONG_LONG;\n+                return JAVA_LONG;\n@@ -246,1 +255,1 @@\n-                return C_DOUBLE;\n+                return JAVA_DOUBLE;\n@@ -248,1 +257,1 @@\n-                return C_POINTER;\n+                return ADDRESS;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":26,"deletions":17,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -34,3 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n-\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,1 +37,1 @@\n-    static final FunctionDescriptor clang_getCString$FUNC = FunctionDescriptor.of(C_POINTER,\n+    static final FunctionDescriptor clang_getCString$FUNC = FunctionDescriptor.of(ADDRESS,\n@@ -41,2 +39,2 @@\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n+            ADDRESS.withName(\"data\"),\n+            JAVA_INT.withName(\"private_flags\"),\n@@ -47,2 +45,1 @@\n-        Index_h.LIBRARIES, \"clang_getCString\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_getCString\",\n@@ -53,2 +50,2 @@\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n+            ADDRESS.withName(\"data\"),\n+            JAVA_INT.withName(\"private_flags\"),\n@@ -59,2 +56,1 @@\n-        Index_h.LIBRARIES, \"clang_disposeString\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n+        \"clang_disposeString\",\n@@ -63,3 +59,3 @@\n-    static final FunctionDescriptor clang_createIndex$FUNC = FunctionDescriptor.of(C_POINTER,\n-        C_INT,\n-        C_INT\n+    static final FunctionDescriptor clang_createIndex$FUNC = FunctionDescriptor.of(ADDRESS,\n+        JAVA_INT,\n+        JAVA_INT\n@@ -68,2 +64,1 @@\n-        Index_h.LIBRARIES, \"clang_createIndex\",\n-        \"(II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_createIndex\",\n@@ -73,1 +68,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -76,2 +71,1 @@\n-        Index_h.LIBRARIES, \"clang_disposeIndex\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_disposeIndex\",\n@@ -81,2 +75,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -85,1 +79,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -88,2 +82,1 @@\n-        Index_h.LIBRARIES, \"clang_getFileName\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getFileName\",\n@@ -93,2 +86,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -98,2 +91,1 @@\n-        Index_h.LIBRARIES, \"clang_getNullLocation\",\n-        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getNullLocation\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$0.java","additions":21,"deletions":29,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -34,3 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n-\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,1 +37,1 @@\n-    static final FunctionDescriptor clang_equalLocations$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_equalLocations$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -41,2 +39,2 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"int_data\"),\n@@ -46,2 +44,2 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"int_data\"),\n@@ -52,2 +50,1 @@\n-        Index_h.LIBRARIES, \"clang_equalLocations\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_equalLocations\",\n@@ -57,2 +54,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -61,4 +58,4 @@\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_INT\n+        ADDRESS,\n+        ADDRESS,\n+        JAVA_INT,\n+        JAVA_INT\n@@ -67,2 +64,1 @@\n-        Index_h.LIBRARIES, \"clang_getLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getLocation\",\n@@ -72,2 +68,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -76,3 +72,3 @@\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n+        ADDRESS,\n+        ADDRESS,\n+        JAVA_INT\n@@ -81,2 +77,1 @@\n-        Index_h.LIBRARIES, \"clang_getLocationForOffset\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getLocationForOffset\",\n@@ -85,1 +80,1 @@\n-    static final FunctionDescriptor clang_Location_isInSystemHeader$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Location_isInSystemHeader$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -87,2 +82,2 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"int_data\"),\n@@ -93,2 +88,1 @@\n-        Index_h.LIBRARIES, \"clang_Location_isInSystemHeader\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Location_isInSystemHeader\",\n@@ -97,1 +91,1 @@\n-    static final FunctionDescriptor clang_Location_isFromMainFile$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Location_isFromMainFile$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -99,2 +93,2 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"int_data\"),\n@@ -105,2 +99,1 @@\n-        Index_h.LIBRARIES, \"clang_Location_isFromMainFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Location_isFromMainFile\",\n@@ -109,1 +102,1 @@\n-    static final FunctionDescriptor clang_Range_isNull$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Range_isNull$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -111,3 +104,3 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"begin_int_data\"),\n+            JAVA_INT.withName(\"end_int_data\")\n@@ -117,2 +110,1 @@\n-        Index_h.LIBRARIES, \"clang_Range_isNull\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Range_isNull\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$1.java","additions":33,"deletions":41,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,1 +38,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -41,1 +40,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -44,1 +43,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -46,1 +45,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -50,2 +49,1 @@\n-        Index_h.LIBRARIES, \"clang_getPointeeType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getPointeeType\",\n@@ -55,3 +53,3 @@\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        JAVA_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -60,1 +58,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -62,1 +60,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -66,2 +64,1 @@\n-        Index_h.LIBRARIES, \"clang_getTypeDeclaration\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTypeDeclaration\",\n@@ -71,2 +68,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -75,1 +72,1 @@\n-        C_INT\n+        JAVA_INT\n@@ -78,2 +75,1 @@\n-        Index_h.LIBRARIES, \"clang_getTypeKindSpelling\",\n-        \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTypeKindSpelling\",\n@@ -82,1 +78,1 @@\n-    static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -84,1 +80,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -86,1 +82,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -90,2 +86,1 @@\n-        Index_h.LIBRARIES, \"clang_getFunctionTypeCallingConv\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_getFunctionTypeCallingConv\",\n@@ -95,1 +90,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -97,1 +92,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -100,1 +95,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -102,1 +97,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -106,2 +101,1 @@\n-        Index_h.LIBRARIES, \"clang_getResultType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getResultType\",\n@@ -110,1 +104,1 @@\n-    static final FunctionDescriptor clang_getNumArgTypes$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_getNumArgTypes$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -112,1 +106,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -114,1 +108,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -118,2 +112,1 @@\n-        Index_h.LIBRARIES, \"clang_getNumArgTypes\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_getNumArgTypes\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$10.java","additions":29,"deletions":36,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,1 +38,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -41,1 +40,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -44,1 +43,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -46,1 +45,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -48,1 +47,1 @@\n-        C_INT\n+        JAVA_INT\n@@ -51,2 +50,1 @@\n-        Index_h.LIBRARIES, \"clang_getArgType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getArgType\",\n@@ -55,1 +53,1 @@\n-    static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -57,1 +55,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -59,1 +57,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -63,2 +61,1 @@\n-        Index_h.LIBRARIES, \"clang_isFunctionTypeVariadic\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_isFunctionTypeVariadic\",\n@@ -68,1 +65,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -70,1 +67,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -73,3 +70,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -79,2 +76,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorResultType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorResultType\",\n@@ -84,1 +80,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -86,1 +82,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -89,1 +85,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -91,1 +87,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -95,2 +91,1 @@\n-        Index_h.LIBRARIES, \"clang_getElementType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getElementType\",\n@@ -99,1 +94,1 @@\n-    static final FunctionDescriptor clang_getNumElements$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+    static final FunctionDescriptor clang_getNumElements$FUNC = FunctionDescriptor.of(JAVA_LONG,\n@@ -101,1 +96,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -103,1 +98,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -107,2 +102,1 @@\n-        Index_h.LIBRARIES, \"clang_getNumElements\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        \"clang_getNumElements\",\n@@ -112,1 +106,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -114,1 +108,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -117,1 +111,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -119,1 +113,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -123,2 +117,1 @@\n-        Index_h.LIBRARIES, \"clang_getArrayElementType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getArrayElementType\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$11.java","additions":31,"deletions":38,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,1 +37,1 @@\n-    static final FunctionDescriptor clang_getArraySize$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+    static final FunctionDescriptor clang_getArraySize$FUNC = FunctionDescriptor.of(JAVA_LONG,\n@@ -40,1 +39,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -42,1 +41,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -46,2 +45,1 @@\n-        Index_h.LIBRARIES, \"clang_getArraySize\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        \"clang_getArraySize\",\n@@ -50,1 +48,1 @@\n-    static final FunctionDescriptor clang_Type_getSizeOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+    static final FunctionDescriptor clang_Type_getSizeOf$FUNC = FunctionDescriptor.of(JAVA_LONG,\n@@ -52,1 +50,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -54,1 +52,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -58,2 +56,1 @@\n-        Index_h.LIBRARIES, \"clang_Type_getSizeOf\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        \"clang_Type_getSizeOf\",\n@@ -62,1 +59,1 @@\n-    static final FunctionDescriptor clang_Type_getOffsetOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+    static final FunctionDescriptor clang_Type_getOffsetOf$FUNC = FunctionDescriptor.of(JAVA_LONG,\n@@ -64,1 +61,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -66,1 +63,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -68,1 +65,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -71,2 +68,1 @@\n-        Index_h.LIBRARIES, \"clang_Type_getOffsetOf\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+        \"clang_Type_getOffsetOf\",\n@@ -75,1 +71,1 @@\n-    static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -77,3 +73,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -83,2 +79,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_isAnonymous\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Cursor_isAnonymous\",\n@@ -87,1 +82,1 @@\n-    static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -89,3 +84,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -95,2 +90,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_isAnonymousRecordDecl\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Cursor_isAnonymousRecordDecl\",\n@@ -99,1 +93,1 @@\n-    static final FunctionDescriptor clang_Cursor_isBitField$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Cursor_isBitField$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -101,3 +95,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -107,2 +101,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_isBitField\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Cursor_isBitField\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$12.java","additions":29,"deletions":36,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,1 +37,1 @@\n-    static final FunctionDescriptor CXCursorVisitor$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor CXCursorVisitor$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -40,3 +39,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -45,3 +44,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -49,1 +48,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -52,1 +51,0 @@\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n@@ -55,1 +53,1 @@\n-    static final FunctionDescriptor clang_visitChildren$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_visitChildren$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -57,3 +55,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -61,2 +59,2 @@\n-        C_POINTER,\n-        C_POINTER\n+        ADDRESS,\n+        ADDRESS\n@@ -65,2 +63,1 @@\n-        Index_h.LIBRARIES, \"clang_visitChildren\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_visitChildren\",\n@@ -70,2 +67,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -75,3 +72,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -81,2 +78,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorUSR\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorUSR\",\n@@ -86,2 +82,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -91,3 +87,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -97,2 +93,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorSpelling\",\n@@ -101,3 +96,3 @@\n-    static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_INT\n+    static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS,\n+        JAVA_INT\n@@ -106,2 +101,1 @@\n-        Index_h.LIBRARIES, \"clang_PrintingPolicy_getProperty\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+        \"clang_PrintingPolicy_getProperty\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$13.java","additions":32,"deletions":38,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,3 +38,3 @@\n-        C_POINTER,\n-        C_INT,\n-        C_INT\n+        ADDRESS,\n+        JAVA_INT,\n+        JAVA_INT\n@@ -44,2 +43,1 @@\n-        Index_h.LIBRARIES, \"clang_PrintingPolicy_setProperty\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;II)V\",\n+        \"clang_PrintingPolicy_setProperty\",\n@@ -48,1 +46,1 @@\n-    static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n+    static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC = FunctionDescriptor.of(ADDRESS,\n@@ -50,3 +48,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -56,2 +54,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorPrintingPolicy\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_getCursorPrintingPolicy\",\n@@ -61,1 +58,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -64,2 +61,1 @@\n-        Index_h.LIBRARIES, \"clang_PrintingPolicy_dispose\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_PrintingPolicy_dispose\",\n@@ -69,2 +65,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -74,3 +70,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -78,1 +74,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -81,2 +77,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorPrettyPrinted\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorPrettyPrinted\",\n@@ -86,2 +81,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -91,3 +86,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -97,2 +92,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorDisplayName\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorDisplayName\",\n@@ -102,3 +96,3 @@\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        JAVA_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -107,3 +101,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -113,2 +107,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorReferenced\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorReferenced\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$14.java","additions":32,"deletions":39,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,3 +38,3 @@\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        JAVA_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -44,3 +43,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -50,2 +49,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorDefinition\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorDefinition\",\n@@ -54,1 +52,1 @@\n-    static final FunctionDescriptor clang_isCursorDefinition$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_isCursorDefinition$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -56,3 +54,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -62,2 +60,1 @@\n-        Index_h.LIBRARIES, \"clang_isCursorDefinition\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_isCursorDefinition\",\n@@ -66,1 +63,1 @@\n-    static final FunctionDescriptor clang_Cursor_isVariadic$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Cursor_isVariadic$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -68,3 +65,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -74,2 +71,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_isVariadic\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Cursor_isVariadic\",\n@@ -79,2 +75,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -84,3 +80,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -90,2 +86,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_getMangling\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_Cursor_getMangling\",\n@@ -94,1 +89,1 @@\n-    static final FunctionDescriptor clang_getTokenKind$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_getTokenKind$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -96,2 +91,2 @@\n-            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n+            MemoryLayout.sequenceLayout(4, JAVA_INT).withName(\"int_data\"),\n+            ADDRESS.withName(\"ptr_data\")\n@@ -101,2 +96,1 @@\n-        Index_h.LIBRARIES, \"clang_getTokenKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_getTokenKind\",\n@@ -106,2 +100,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -110,1 +104,1 @@\n-        C_POINTER,\n+        ADDRESS,\n@@ -112,2 +106,2 @@\n-            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n+            MemoryLayout.sequenceLayout(4, JAVA_INT).withName(\"int_data\"),\n+            ADDRESS.withName(\"ptr_data\")\n@@ -117,2 +111,1 @@\n-        Index_h.LIBRARIES, \"clang_getTokenSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTokenSpelling\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$15.java","additions":34,"deletions":41,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,2 +38,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -43,1 +42,1 @@\n-        C_POINTER,\n+        ADDRESS,\n@@ -45,2 +44,2 @@\n-            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n+            MemoryLayout.sequenceLayout(4, JAVA_INT).withName(\"int_data\"),\n+            ADDRESS.withName(\"ptr_data\")\n@@ -50,2 +49,1 @@\n-        Index_h.LIBRARIES, \"clang_getTokenLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTokenLocation\",\n@@ -55,3 +53,3 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"begin_int_data\"),\n+        JAVA_INT.withName(\"end_int_data\")\n@@ -59,1 +57,1 @@\n-        C_POINTER,\n+        ADDRESS,\n@@ -61,2 +59,2 @@\n-            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n+            MemoryLayout.sequenceLayout(4, JAVA_INT).withName(\"int_data\"),\n+            ADDRESS.withName(\"ptr_data\")\n@@ -66,2 +64,1 @@\n-        Index_h.LIBRARIES, \"clang_getTokenExtent\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTokenExtent\",\n@@ -71,1 +68,1 @@\n-        C_POINTER,\n+        ADDRESS,\n@@ -73,3 +70,3 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"begin_int_data\"),\n+            JAVA_INT.withName(\"end_int_data\")\n@@ -77,2 +74,2 @@\n-        C_POINTER,\n-        C_POINTER\n+        ADDRESS,\n+        ADDRESS\n@@ -81,2 +78,1 @@\n-        Index_h.LIBRARIES, \"clang_tokenize\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_tokenize\",\n@@ -86,3 +82,3 @@\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n+        ADDRESS,\n+        ADDRESS,\n+        JAVA_INT\n@@ -91,2 +87,1 @@\n-        Index_h.LIBRARIES, \"clang_disposeTokens\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+        \"clang_disposeTokens\",\n@@ -96,2 +91,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -100,1 +95,1 @@\n-        C_INT\n+        JAVA_INT\n@@ -103,2 +98,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorKindSpelling\",\n-        \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorKindSpelling\",\n@@ -108,2 +102,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -113,2 +107,1 @@\n-        Index_h.LIBRARIES, \"clang_getClangVersion\",\n-        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getClangVersion\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$16.java","additions":32,"deletions":39,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,1 +38,1 @@\n-        C_INT\n+        JAVA_INT\n@@ -42,2 +41,1 @@\n-        Index_h.LIBRARIES, \"clang_toggleCrashRecovery\",\n-        \"(I)V\",\n+        \"clang_toggleCrashRecovery\",\n@@ -46,1 +44,1 @@\n-    static final FunctionDescriptor clang_Cursor_Evaluate$FUNC = FunctionDescriptor.of(C_POINTER,\n+    static final FunctionDescriptor clang_Cursor_Evaluate$FUNC = FunctionDescriptor.of(ADDRESS,\n@@ -48,3 +46,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -54,2 +52,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_Evaluate\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_Cursor_Evaluate\",\n@@ -58,2 +55,2 @@\n-    static final FunctionDescriptor clang_EvalResult_getKind$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n+    static final FunctionDescriptor clang_EvalResult_getKind$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS\n@@ -62,2 +59,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_getKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_EvalResult_getKind\",\n@@ -66,2 +62,2 @@\n-    static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n+    static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS\n@@ -70,2 +66,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_getAsInt\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_EvalResult_getAsInt\",\n@@ -74,2 +69,2 @@\n-    static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-        C_POINTER\n+    static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC = FunctionDescriptor.of(JAVA_LONG,\n+        ADDRESS\n@@ -78,2 +73,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_getAsLongLong\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+        \"clang_EvalResult_getAsLongLong\",\n@@ -82,2 +76,2 @@\n-    static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n+    static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS\n@@ -86,2 +80,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_isUnsignedInt\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_EvalResult_isUnsignedInt\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$17.java","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,2 +37,2 @@\n-    static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-        C_POINTER\n+    static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC = FunctionDescriptor.of(JAVA_LONG,\n+        ADDRESS\n@@ -42,2 +41,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_getAsUnsigned\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+        \"clang_EvalResult_getAsUnsigned\",\n@@ -46,2 +44,2 @@\n-    static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC = FunctionDescriptor.of(C_DOUBLE,\n-        C_POINTER\n+    static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC = FunctionDescriptor.of(JAVA_DOUBLE,\n+        ADDRESS\n@@ -50,2 +48,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_getAsDouble\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)D\",\n+        \"clang_EvalResult_getAsDouble\",\n@@ -54,2 +51,2 @@\n-    static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n+    static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC = FunctionDescriptor.of(ADDRESS,\n+        ADDRESS\n@@ -58,2 +55,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_getAsStr\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_EvalResult_getAsStr\",\n@@ -63,1 +59,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -66,2 +62,1 @@\n-        Index_h.LIBRARIES, \"clang_EvalResult_dispose\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_EvalResult_dispose\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$18.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -40,2 +39,2 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"int_data\"),\n@@ -44,4 +43,4 @@\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS\n@@ -50,2 +49,1 @@\n-        Index_h.LIBRARIES, \"clang_getExpansionLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_getExpansionLocation\",\n@@ -56,2 +54,2 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"int_data\"),\n@@ -60,4 +58,4 @@\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS\n@@ -66,2 +64,1 @@\n-        Index_h.LIBRARIES, \"clang_getSpellingLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_getSpellingLocation\",\n@@ -72,2 +69,2 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"int_data\"),\n@@ -76,4 +73,4 @@\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS\n@@ -82,2 +79,1 @@\n-        Index_h.LIBRARIES, \"clang_getFileLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_getFileLocation\",\n@@ -87,2 +83,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -92,3 +88,3 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"begin_int_data\"),\n+            JAVA_INT.withName(\"end_int_data\")\n@@ -98,2 +94,1 @@\n-        Index_h.LIBRARIES, \"clang_getRangeStart\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getRangeStart\",\n@@ -103,2 +98,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -108,3 +103,3 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+            JAVA_INT.withName(\"begin_int_data\"),\n+            JAVA_INT.withName(\"end_int_data\")\n@@ -114,2 +109,1 @@\n-        Index_h.LIBRARIES, \"clang_getRangeEnd\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getRangeEnd\",\n@@ -118,2 +112,2 @@\n-    static final FunctionDescriptor clang_getChildDiagnostics$FUNC = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n+    static final FunctionDescriptor clang_getChildDiagnostics$FUNC = FunctionDescriptor.of(ADDRESS,\n+        ADDRESS\n@@ -122,2 +116,1 @@\n-        Index_h.LIBRARIES, \"clang_getChildDiagnostics\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_getChildDiagnostics\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$2.java","additions":37,"deletions":44,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,2 +37,2 @@\n-    static final FunctionDescriptor clang_getNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n+    static final FunctionDescriptor clang_getNumDiagnostics$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS\n@@ -42,2 +41,1 @@\n-        Index_h.LIBRARIES, \"clang_getNumDiagnostics\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_getNumDiagnostics\",\n@@ -46,3 +44,3 @@\n-    static final FunctionDescriptor clang_getDiagnostic$FUNC = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_INT\n+    static final FunctionDescriptor clang_getDiagnostic$FUNC = FunctionDescriptor.of(ADDRESS,\n+        ADDRESS,\n+        JAVA_INT\n@@ -51,2 +49,1 @@\n-        Index_h.LIBRARIES, \"clang_getDiagnostic\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_getDiagnostic\",\n@@ -56,1 +53,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -59,2 +56,1 @@\n-        Index_h.LIBRARIES, \"clang_disposeDiagnostic\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_disposeDiagnostic\",\n@@ -64,2 +60,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -68,2 +64,2 @@\n-        C_POINTER,\n-        C_INT\n+        ADDRESS,\n+        JAVA_INT\n@@ -72,2 +68,1 @@\n-        Index_h.LIBRARIES, \"clang_formatDiagnostic\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_formatDiagnostic\",\n@@ -76,1 +71,1 @@\n-    static final FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC = FunctionDescriptor.of(C_INT);\n+    static final FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC = FunctionDescriptor.of(JAVA_INT);\n@@ -78,2 +73,1 @@\n-        Index_h.LIBRARIES, \"clang_defaultDiagnosticDisplayOptions\",\n-        \"()I\",\n+        \"clang_defaultDiagnosticDisplayOptions\",\n@@ -82,2 +76,2 @@\n-    static final FunctionDescriptor clang_getDiagnosticSeverity$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n+    static final FunctionDescriptor clang_getDiagnosticSeverity$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS\n@@ -86,2 +80,1 @@\n-        Index_h.LIBRARIES, \"clang_getDiagnosticSeverity\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_getDiagnosticSeverity\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$3.java","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,2 +38,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -43,1 +42,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -46,2 +45,1 @@\n-        Index_h.LIBRARIES, \"clang_getDiagnosticLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getDiagnosticLocation\",\n@@ -51,2 +49,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -55,1 +53,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -58,2 +56,1 @@\n-        Index_h.LIBRARIES, \"clang_getDiagnosticSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getDiagnosticSpelling\",\n@@ -62,8 +59,8 @@\n-    static final FunctionDescriptor clang_parseTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_INT\n+    static final FunctionDescriptor clang_parseTranslationUnit$FUNC = FunctionDescriptor.of(ADDRESS,\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS,\n+        JAVA_INT,\n+        ADDRESS,\n+        JAVA_INT,\n+        JAVA_INT\n@@ -72,2 +69,1 @@\n-        Index_h.LIBRARIES, \"clang_parseTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_parseTranslationUnit\",\n@@ -76,9 +72,9 @@\n-    static final FunctionDescriptor clang_parseTranslationUnit2$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER\n+    static final FunctionDescriptor clang_parseTranslationUnit2$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS,\n+        ADDRESS,\n+        ADDRESS,\n+        JAVA_INT,\n+        ADDRESS,\n+        JAVA_INT,\n+        JAVA_INT,\n+        ADDRESS\n@@ -87,2 +83,1 @@\n-        Index_h.LIBRARIES, \"clang_parseTranslationUnit2\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_parseTranslationUnit2\",\n@@ -91,4 +86,4 @@\n-    static final FunctionDescriptor clang_saveTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n+    static final FunctionDescriptor clang_saveTranslationUnit$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS,\n+        ADDRESS,\n+        JAVA_INT\n@@ -97,2 +92,1 @@\n-        Index_h.LIBRARIES, \"clang_saveTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+        \"clang_saveTranslationUnit\",\n@@ -102,1 +96,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -105,2 +99,1 @@\n-        Index_h.LIBRARIES, \"clang_disposeTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        \"clang_disposeTranslationUnit\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$4.java","additions":35,"deletions":42,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,2 +37,2 @@\n-    static final FunctionDescriptor clang_defaultReparseOptions$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n+    static final FunctionDescriptor clang_defaultReparseOptions$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS\n@@ -42,2 +41,1 @@\n-        Index_h.LIBRARIES, \"clang_defaultReparseOptions\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        \"clang_defaultReparseOptions\",\n@@ -46,5 +44,5 @@\n-    static final FunctionDescriptor clang_reparseTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT\n+    static final FunctionDescriptor clang_reparseTranslationUnit$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        ADDRESS,\n+        JAVA_INT,\n+        ADDRESS,\n+        JAVA_INT\n@@ -53,2 +51,1 @@\n-        Index_h.LIBRARIES, \"clang_reparseTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+        \"clang_reparseTranslationUnit\",\n@@ -58,3 +55,3 @@\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        JAVA_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -63,2 +60,1 @@\n-        Index_h.LIBRARIES, \"clang_getNullCursor\",\n-        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getNullCursor\",\n@@ -68,3 +64,3 @@\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        JAVA_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -72,1 +68,1 @@\n-        C_POINTER\n+        ADDRESS\n@@ -75,2 +71,1 @@\n-        Index_h.LIBRARIES, \"clang_getTranslationUnitCursor\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTranslationUnitCursor\",\n@@ -79,1 +74,1 @@\n-    static final FunctionDescriptor clang_equalCursors$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_equalCursors$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -81,3 +76,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -86,3 +81,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -92,2 +87,1 @@\n-        Index_h.LIBRARIES, \"clang_equalCursors\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_equalCursors\",\n@@ -96,1 +90,1 @@\n-    static final FunctionDescriptor clang_Cursor_isNull$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Cursor_isNull$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -98,3 +92,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -104,2 +98,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_isNull\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Cursor_isNull\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$5.java","additions":32,"deletions":39,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,1 +37,1 @@\n-    static final FunctionDescriptor clang_getCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_getCursorKind$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -40,3 +39,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -46,2 +45,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_getCursorKind\",\n@@ -50,2 +48,2 @@\n-    static final FunctionDescriptor clang_isDeclaration$FUNC = FunctionDescriptor.of(C_INT,\n-        C_INT\n+    static final FunctionDescriptor clang_isDeclaration$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        JAVA_INT\n@@ -54,2 +52,1 @@\n-        Index_h.LIBRARIES, \"clang_isDeclaration\",\n-        \"(I)I\",\n+        \"clang_isDeclaration\",\n@@ -58,2 +55,2 @@\n-    static final FunctionDescriptor clang_isAttribute$FUNC = FunctionDescriptor.of(C_INT,\n-        C_INT\n+    static final FunctionDescriptor clang_isAttribute$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        JAVA_INT\n@@ -62,2 +59,1 @@\n-        Index_h.LIBRARIES, \"clang_isAttribute\",\n-        \"(I)I\",\n+        \"clang_isAttribute\",\n@@ -66,2 +62,2 @@\n-    static final FunctionDescriptor clang_isInvalid$FUNC = FunctionDescriptor.of(C_INT,\n-        C_INT\n+    static final FunctionDescriptor clang_isInvalid$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        JAVA_INT\n@@ -70,2 +66,1 @@\n-        Index_h.LIBRARIES, \"clang_isInvalid\",\n-        \"(I)I\",\n+        \"clang_isInvalid\",\n@@ -74,2 +69,2 @@\n-    static final FunctionDescriptor clang_isPreprocessing$FUNC = FunctionDescriptor.of(C_INT,\n-        C_INT\n+    static final FunctionDescriptor clang_isPreprocessing$FUNC = FunctionDescriptor.of(JAVA_INT,\n+        JAVA_INT\n@@ -78,2 +73,1 @@\n-        Index_h.LIBRARIES, \"clang_isPreprocessing\",\n-        \"(I)I\",\n+        \"clang_isPreprocessing\",\n@@ -82,1 +76,1 @@\n-    static final FunctionDescriptor clang_getCursorLanguage$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_getCursorLanguage$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -84,3 +78,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -90,2 +84,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorLanguage\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_getCursorLanguage\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$6.java","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,1 +37,1 @@\n-    static final FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+    static final FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC = FunctionDescriptor.of(ADDRESS,\n@@ -40,3 +39,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -46,2 +45,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_getTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        \"clang_Cursor_getTranslationUnit\",\n@@ -51,2 +49,2 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"int_data\"),\n@@ -56,3 +54,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -62,2 +60,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorLocation\",\n@@ -67,3 +64,3 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"ptr_data\"),\n+        JAVA_INT.withName(\"begin_int_data\"),\n+        JAVA_INT.withName(\"end_int_data\")\n@@ -72,3 +69,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -78,2 +75,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorExtent\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorExtent\",\n@@ -83,1 +79,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -85,1 +81,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -88,3 +84,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -94,2 +90,1 @@\n-        Index_h.LIBRARIES, \"clang_getCursorType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCursorType\",\n@@ -99,2 +94,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -104,1 +99,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -106,1 +101,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -110,2 +105,1 @@\n-        Index_h.LIBRARIES, \"clang_getTypeSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTypeSpelling\",\n@@ -115,1 +109,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -117,1 +111,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -120,3 +114,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -126,2 +120,1 @@\n-        Index_h.LIBRARIES, \"clang_getTypedefDeclUnderlyingType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTypedefDeclUnderlyingType\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$7.java","additions":36,"deletions":43,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -39,1 +38,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -41,1 +40,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -44,3 +43,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -50,2 +49,1 @@\n-        Index_h.LIBRARIES, \"clang_getEnumDeclIntegerType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getEnumDeclIntegerType\",\n@@ -54,1 +52,1 @@\n-    static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+    static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC = FunctionDescriptor.of(JAVA_LONG,\n@@ -56,3 +54,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -62,2 +60,1 @@\n-        Index_h.LIBRARIES, \"clang_getEnumConstantDeclValue\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        \"clang_getEnumConstantDeclValue\",\n@@ -66,1 +63,1 @@\n-    static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+    static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC = FunctionDescriptor.of(JAVA_LONG,\n@@ -68,3 +65,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -74,2 +71,1 @@\n-        Index_h.LIBRARIES, \"clang_getEnumConstantDeclUnsignedValue\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        \"clang_getEnumConstantDeclUnsignedValue\",\n@@ -78,1 +74,1 @@\n-    static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -80,3 +76,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -86,2 +82,1 @@\n-        Index_h.LIBRARIES, \"clang_getFieldDeclBitWidth\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_getFieldDeclBitWidth\",\n@@ -90,1 +85,1 @@\n-    static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -92,3 +87,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -98,2 +93,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_getNumArguments\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Cursor_getNumArguments\",\n@@ -103,3 +97,3 @@\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        JAVA_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -108,3 +102,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -112,1 +106,1 @@\n-        C_INT\n+        JAVA_INT\n@@ -115,2 +109,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_getArgument\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_Cursor_getArgument\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$8.java","additions":35,"deletions":42,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.internal.clang.libclang.CLayouts.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -38,1 +37,1 @@\n-    static final FunctionDescriptor clang_equalTypes$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_equalTypes$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -40,1 +39,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -42,1 +41,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -45,1 +44,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -47,1 +46,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -51,2 +50,1 @@\n-        Index_h.LIBRARIES, \"clang_equalTypes\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_equalTypes\",\n@@ -56,1 +54,1 @@\n-        C_INT.withName(\"kind\"),\n+        JAVA_INT.withName(\"kind\"),\n@@ -58,1 +56,1 @@\n-        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -61,1 +59,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -63,1 +61,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -67,2 +65,1 @@\n-        Index_h.LIBRARIES, \"clang_getCanonicalType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getCanonicalType\",\n@@ -71,1 +68,1 @@\n-    static final FunctionDescriptor clang_isConstQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_isConstQualifiedType$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -73,1 +70,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -75,1 +72,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -79,2 +76,1 @@\n-        Index_h.LIBRARIES, \"clang_isConstQualifiedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_isConstQualifiedType\",\n@@ -83,1 +79,1 @@\n-    static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -85,3 +81,3 @@\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            JAVA_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, ADDRESS).withName(\"data\")\n@@ -91,2 +87,1 @@\n-        Index_h.LIBRARIES, \"clang_Cursor_isMacroFunctionLike\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_Cursor_isMacroFunctionLike\",\n@@ -95,1 +90,1 @@\n-    static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n+    static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC = FunctionDescriptor.of(JAVA_INT,\n@@ -97,1 +92,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -99,1 +94,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -103,2 +98,1 @@\n-        Index_h.LIBRARIES, \"clang_isVolatileQualifiedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        \"clang_isVolatileQualifiedType\",\n@@ -108,2 +102,2 @@\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n@@ -113,1 +107,1 @@\n-            C_INT.withName(\"kind\"),\n+            JAVA_INT.withName(\"kind\"),\n@@ -115,1 +109,1 @@\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+            MemoryLayout.sequenceLayout(2, ADDRESS).withName(\"data\")\n@@ -119,2 +113,1 @@\n-        Index_h.LIBRARIES, \"clang_getTypedefName\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        \"clang_getTypedefName\",\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$9.java","additions":30,"deletions":37,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import static jdk.internal.clang.libclang.CLayouts.C_POINTER;\n+import static jdk.internal.clang.CLayouts.C_POINTER;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/TypeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}