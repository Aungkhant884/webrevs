{"files":[{"patch":"@@ -78,0 +78,1 @@\n+  guarantee(thread->thread_state() == _thread_in_native, \"wrong thread state for upcall\");\n","filename":"src\/hotspot\/share\/prims\/upcallLinker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        private static void assertContains(List<String> lines, String shouldInclude) {\n+        private static void assertContains(List<String> lines, String shouldInclude, String name) {\n@@ -42,1 +42,1 @@\n-                \"Did not find '\" + shouldInclude + \"' in stderr\");\n+                \"Did not find '\" + shouldInclude + \"' in \" + name);\n@@ -46,1 +46,5 @@\n-            assertContains(stderr, shouldInclude);\n+            assertContains(stderr, shouldInclude, \"stderr\");\n+        }\n+\n+        public void assertStdOutContains(String shouldInclude) {\n+            assertContains(stdout, shouldInclude, \"stdout\");\n","filename":"test\/jdk\/java\/foreign\/UpcallTestHelper.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @library ..\/ \/test\/lib\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestTrivialUpcall\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.invoke.MethodHandle;\n+\n+import static org.testng.Assert.fail;\n+\n+public class TestTrivialUpcall extends UpcallTestHelper {\n+\n+    @Test\n+    public void testUpcallFailure() throws IOException, InterruptedException {\n+        \/\/ test to see if we catch a trivial downcall doing an upcall\n+        runInNewProcess(Runner.class, true).assertStdOutContains(\"wrong thread state for upcall\");\n+    }\n+\n+    public static class Runner extends NativeTestHelper {\n+        public static void main(String[] args) throws Throwable {\n+            System.loadLibrary(\"Trivial\");\n+\n+            MethodHandle mh = downcallHandle(\"do_upcall\", FunctionDescriptor.ofVoid(C_POINTER), Linker.Option.isTrivial());\n+            MemorySegment stub = upcallStub(Runner.class, \"target\", FunctionDescriptor.ofVoid());\n+            mh.invokeExact(stub);\n+        }\n+\n+        public static void target() {\n+            fail(\"Should not get here\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestTrivialUpcall.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -40,2 +40,2 @@\n-  long long x;\n-  long long y;\n+    long long x;\n+    long long y;\n@@ -45,4 +45,4 @@\n-  struct Big b;\n-  b.x = 10;\n-  b.y = 11;\n-  return b;\n+    struct Big b;\n+    b.x = 10;\n+    b.y = 11;\n+    return b;\n@@ -52,1 +52,5 @@\n-  errno = value;\n+    errno = value;\n+}\n+\n+EXPORT void do_upcall(void(*f)(void)) {\n+    f();\n","filename":"test\/jdk\/java\/foreign\/trivial\/libTrivial.c","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}