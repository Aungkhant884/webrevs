{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.vm.annotation.Stable;\n@@ -103,1 +102,1 @@\n-        return new NonCloseableSharedScope(CleanerFactory.cleaner());\n+        return new ImplicitScopeImpl(CleanerFactory.cleaner());\n@@ -128,1 +127,1 @@\n-    public void release(Handle handle) {\n+    public final void release(Handle handle) {\n@@ -131,1 +130,1 @@\n-            if (!isImplicit() && handle.scope() != this) {\n+            if (!checkHandle(handle)) {\n@@ -140,0 +139,4 @@\n+    boolean checkHandle(Handle handle) {\n+        return handle.scope() == this;\n+    }\n+\n@@ -217,1 +220,1 @@\n-    static class NonCloseableSharedScope extends SharedScope {\n+    static class ImplicitScopeImpl extends SharedScope {\n@@ -219,1 +222,1 @@\n-        public NonCloseableSharedScope(Cleaner cleaner) {\n+        public ImplicitScopeImpl(Cleaner cleaner) {\n@@ -238,0 +241,5 @@\n+        @Override\n+        boolean checkHandle(Handle handle) {\n+            return handle == implicitHandle;\n+        }\n+\n@@ -252,1 +260,1 @@\n-     * The global, always alive, non-closeable, shared scope. This is like a {@link NonCloseableSharedScope non-closeable scope},\n+     * The global, always alive, non-closeable, shared scope. This is like a {@link ImplicitScopeImpl non-closeable scope},\n@@ -256,1 +264,1 @@\n-    public static ResourceScopeImpl GLOBAL = new NonCloseableSharedScope( null) {\n+    public static ResourceScopeImpl GLOBAL = new ImplicitScopeImpl( null) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"}]}