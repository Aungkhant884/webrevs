{"files":[{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-            checkCarrierSize(carrier, bitSize);\n+            assertCarrierSize(carrier, bitSize);\n@@ -111,7 +111,3 @@\n-            if (this == other) {\n-                return true;\n-            }\n-            if (!super.equals(other)) {\n-                return false;\n-            }\n-            return other instanceof AbstractValueLayout<?> otherValue &&\n+            return this == other ||\n+                    other instanceof AbstractValueLayout<?> otherValue &&\n+                    super.equals(other) &&\n@@ -152,13 +148,8 @@\n-        static void checkCarrierSize(Class<?> carrier, long size) {\n-            if (!isValidCarrier(carrier)) {\n-                throw new IllegalArgumentException(\"Invalid carrier: \" + carrier.getName());\n-            }\n-            if (carrier == MemorySegment.class && size != ADDRESS_SIZE_BITS) {\n-                throw new IllegalArgumentException(\"Address size mismatch: \" + ADDRESS_SIZE_BITS + \" != \" + size);\n-            }\n-            if (carrier.isPrimitive()) {\n-                int expectedSize = carrier == boolean.class ? 8 : Wrapper.forPrimitiveType(carrier).bitWidth();\n-                if (size != expectedSize) {\n-                    throw new IllegalArgumentException(\"Carrier size mismatch: \" + carrier.getName() + \" != \" + size);\n-                }\n-            }\n+        static void assertCarrierSize(Class<?> carrier, long bitSize) {\n+            assert isValidCarrier(carrier);\n+            assert carrier == MemorySegment.class\n+                    ? bitSize == ADDRESS_SIZE_BITS\n+                    : true;\n+            assert carrier.isPrimitive()\n+                    ? bitSize == (carrier == boolean.class ? 8 : Wrapper.forPrimitiveType(carrier).bitWidth())\n+                    : true;\n@@ -168,8 +159,1 @@\n-            return carrier == boolean.class\n-                    || carrier == byte.class\n-                    || carrier == short.class\n-                    || carrier == char.class\n-                    || carrier == int.class\n-                    || carrier == long.class\n-                    || carrier == float.class\n-                    || carrier == double.class\n+            return carrier.isPrimitive()\n@@ -179,1 +163,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":14,"deletions":31,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.function.Function;\n@@ -41,4 +40,1 @@\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n-import static java.lang.foreign.ValueLayout.JAVA_SHORT;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -54,0 +50,28 @@\n+    @Test\n+    public void testNotEquals() {\n+        List<MemoryLayout> basic = Stream.concat(Stream.of(basicLayouts), Stream.of(ADDRESS)).toList();\n+        MemoryLayout differentName = JAVA_INT.withName(\"CustomName\");\n+        basic.forEach(l ->\n+                assertFalse(l.equals(differentName))\n+        );\n+        \/\/ Swap endian\n+        MemoryLayout differentOrder = JAVA_INT.withOrder(JAVA_INT.order() == ByteOrder.BIG_ENDIAN ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);\n+        basic.forEach(l ->\n+                assertFalse(l.equals(differentOrder))\n+        );\n+\n+        \/\/ Something totally different\n+        basic.forEach(l ->\n+                assertFalse(l.equals(\"A\"))\n+        );\n+        \/\/ Null\n+        basic.forEach(l ->\n+                assertFalse(l.equals(null))\n+        );\n+    }\n+\n+    public void testTargetLayoutEquals() {\n+        MemoryLayout differentTargetLayout = ADDRESS.withTargetLayout(JAVA_CHAR);\n+        assertFalse(ADDRESS.equals(differentTargetLayout));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"}]}