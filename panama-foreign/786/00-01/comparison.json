{"files":[{"patch":"@@ -150,6 +150,6 @@\n-            assert carrier == MemorySegment.class\n-                    ? bitSize == ADDRESS_SIZE_BITS\n-                    : true;\n-            assert carrier.isPrimitive()\n-                    ? bitSize == (carrier == boolean.class ? 8 : Wrapper.forPrimitiveType(carrier).bitWidth())\n-                    : true;\n+            assert carrier != MemorySegment.class\n+                    \/\/ MemorySegment bitSize must always equal ADDRESS_SIZE_BITS\n+                    || bitSize == ADDRESS_SIZE_BITS;\n+            assert !carrier.isPrimitive() ||\n+                    \/\/ Primitive class bitSize must always correspond\n+                    bitSize == (carrier == boolean.class ? 8 : Wrapper.forPrimitiveType(carrier).bitWidth());\n@@ -159,1 +159,9 @@\n-            return carrier.isPrimitive()\n+            \/\/ void.class is not valid\n+            return carrier == boolean.class\n+                    || carrier == byte.class\n+                    || carrier == short.class\n+                    || carrier == char.class\n+                    || carrier == int.class\n+                    || carrier == long.class\n+                    || carrier == float.class\n+                    || carrier == double.class\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -50,7 +50,11 @@\n-    @Test\n-    public void testNotEquals() {\n-        List<MemoryLayout> basic = Stream.concat(Stream.of(basicLayouts), Stream.of(ADDRESS)).toList();\n-        MemoryLayout differentName = JAVA_INT.withName(\"CustomName\");\n-        basic.forEach(l ->\n-                assertFalse(l.equals(differentName))\n-        );\n+    @Test(dataProvider = \"basicLayoutsAndAddress\")\n+    public void testNotEquals(MemoryLayout layout) {\n+\n+        \/\/ Use another Type\n+        MemoryLayout differentType = MemoryLayout.paddingLayout(8);\n+        assertFalse(layout.equals(differentType));\n+\n+        \/\/ Use another name\n+        MemoryLayout differentName = layout.withName(\"CustomName\");\n+        assertFalse(layout.equals(differentName));\n+\n@@ -59,3 +63,1 @@\n-        basic.forEach(l ->\n-                assertFalse(l.equals(differentOrder))\n-        );\n+        assertFalse(layout.equals(differentOrder));\n@@ -64,3 +66,2 @@\n-        basic.forEach(l ->\n-                assertFalse(l.equals(\"A\"))\n-        );\n+        assertFalse(layout.equals(\"A\"));\n+\n@@ -68,3 +69,1 @@\n-        basic.forEach(l ->\n-                assertFalse(l.equals(null))\n-        );\n+        assertFalse(layout.equals(null));\n@@ -307,0 +306,7 @@\n+    @DataProvider(name = \"basicLayoutsAndAddress\")\n+    public Object[][] basicLayoutsAndAddress() {\n+        return Stream.concat(Stream.of(basicLayouts), Stream.of(ADDRESS))\n+                .map(l -> new Object[] { l })\n+                .toArray(Object[][]::new);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"}]}