{"files":[{"patch":"@@ -297,1 +297,1 @@\n-            MemorySegment hello = arena.allocateString(\"Hello\");\n+            MemorySegment hello = arena.allocateFrom(\"Hello\");\n@@ -309,1 +309,1 @@\n-            MemorySegment hello = arena.allocateString(\"Hello\");\n+            MemorySegment hello = arena.allocateFrom(\"Hello\");\n@@ -339,1 +339,1 @@\n-            MemorySegment array = arena.allocateArray(JAVA_INT, 0, 9, 3, 4, 6, 5, 1, 8, 2, 7);\n+            MemorySegment array = arena.allocateFrom(JAVA_INT, 0, 9, 3, 4, 6, 5, 1, 8, 2, 7);\n@@ -353,1 +353,1 @@\n-            MemorySegment s = arena.allocateString(\"%d plus %d equals %d\\n\");\n+            MemorySegment s = arena.allocateFrom(\"%d plus %d equals %d\\n\");\n","filename":"doc\/panama_ffi.md","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n- *         MemorySegment s = slicingArena.allocateArray(JAVA_INT, 1, 2, 3, 4, 5);\n+ *         MemorySegment s = slicingArena.allocateFrom(JAVA_INT, 1, 2, 3, 4, 5);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n- *     MemorySegment str = arena.allocateString(\"Hello\");\n+ *     MemorySegment str = arena.allocateFrom(\"Hello\");\n@@ -311,1 +311,1 @@\n- *     MemorySegment array = arena.allocateArray(JAVA_INT, 0, 9, 3, 4, 6, 5, 1, 8, 2, 7);\n+ *     MemorySegment array = arena.allocateFrom(JAVA_INT, 0, 9, 3, 4, 6, 5, 1, 8, 2, 7);\n@@ -478,1 +478,1 @@\n- *     int res = (int)printf.invokeExact(arena.allocateString(\"%d plus %d equals %d\"), 2, 2, 4); \/\/prints \"2 plus 2 equals 4\"\n+ *     int res = (int)printf.invokeExact(arena.allocateFrom(\"%d plus %d equals %d\"), 2, 2, 4); \/\/prints \"2 plus 2 equals 4\"\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -87,1 +86,1 @@\n-     * allocateString(str, StandardCharsets.UTF_8);\n+     * allocateFrom(str, StandardCharsets.UTF_8);\n@@ -94,1 +93,1 @@\n-    default MemorySegment allocateString(String str) {\n+    default MemorySegment allocateFrom(String str) {\n@@ -96,1 +95,1 @@\n-        return allocateString(str, StandardCharsets.UTF_8);\n+        return allocateFrom(str, StandardCharsets.UTF_8);\n@@ -127,1 +126,1 @@\n-    default MemorySegment allocateString(String str, Charset charset) {\n+    default MemorySegment allocateFrom(String str, Charset charset) {\n@@ -144,1 +143,1 @@\n-    default MemorySegment allocate(ValueLayout.OfByte layout, byte value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfByte layout, byte value) {\n@@ -158,1 +157,1 @@\n-    default MemorySegment allocate(ValueLayout.OfChar layout, char value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfChar layout, char value) {\n@@ -172,1 +171,1 @@\n-    default MemorySegment allocate(ValueLayout.OfShort layout, short value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfShort layout, short value) {\n@@ -186,1 +185,1 @@\n-    default MemorySegment allocate(ValueLayout.OfInt layout, int value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfInt layout, int value) {\n@@ -200,1 +199,1 @@\n-    default MemorySegment allocate(ValueLayout.OfFloat layout, float value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfFloat layout, float value) {\n@@ -214,1 +213,1 @@\n-    default MemorySegment allocate(ValueLayout.OfLong layout, long value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfLong layout, long value) {\n@@ -228,1 +227,1 @@\n-    default MemorySegment allocate(ValueLayout.OfDouble layout, double value) {\n+    default MemorySegment allocateFrom(ValueLayout.OfDouble layout, double value) {\n@@ -243,1 +242,1 @@\n-    default MemorySegment allocate(AddressLayout layout, MemorySegment value) {\n+    default MemorySegment allocateFrom(AddressLayout layout, MemorySegment value) {\n@@ -253,1 +252,1 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n@@ -258,1 +257,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfByte elementLayout, byte... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfByte elementLayout, byte... elements) {\n@@ -264,1 +263,1 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n@@ -269,1 +268,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfShort elementLayout, short... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfShort elementLayout, short... elements) {\n@@ -275,1 +274,1 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n@@ -280,1 +279,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfChar elementLayout, char... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfChar elementLayout, char... elements) {\n@@ -286,1 +285,1 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n@@ -291,1 +290,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfInt elementLayout, int... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfInt elementLayout, int... elements) {\n@@ -297,1 +296,1 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n@@ -302,1 +301,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfFloat elementLayout, float... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfFloat elementLayout, float... elements) {\n@@ -308,1 +307,1 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n@@ -313,1 +312,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfLong elementLayout, long... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfLong elementLayout, long... elements) {\n@@ -319,1 +318,1 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n@@ -324,1 +323,1 @@\n-    default MemorySegment allocateArray(ValueLayout.OfDouble elementLayout, double... elements) {\n+    default MemorySegment allocateFrom(ValueLayout.OfDouble elementLayout, double... elements) {\n@@ -331,1 +330,1 @@\n-        MemorySegment addr = allocateArray(Objects.requireNonNull(elementLayout), size);\n+        MemorySegment addr = allocate(Objects.requireNonNull(elementLayout), size);\n@@ -359,1 +358,1 @@\n-    default MemorySegment allocateArray(MemoryLayout elementLayout, long count) {\n+    default MemorySegment allocate(MemoryLayout elementLayout, long count) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":28,"deletions":29,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n- *     MemorySegment cString = arena.allocateString(\"Hello\");\n+ *     MemorySegment cString = arena.allocateFrom(\"Hello\");\n@@ -113,1 +113,1 @@\n- * {@linkplain java.lang.foreign.SegmentAllocator#allocateString(java.lang.String) converting} Java strings into\n+ * {@linkplain java.lang.foreign.SegmentAllocator#allocateFrom(java.lang.String) converting} Java strings into\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-                    MemorySegment s = slicingArena.allocateArray(JAVA_INT, 1, 2, 3, 4, 5);\n+                    MemorySegment s = slicingArena.allocateFrom(JAVA_INT, 1, 2, 3, 4, 5);\n@@ -170,1 +170,1 @@\n-                MemorySegment str = arena.allocateString(\"Hello\");\n+                MemorySegment str = arena.allocateFrom(\"Hello\");\n@@ -199,1 +199,1 @@\n-                MemorySegment array = arena.allocateArray(JAVA_INT, 0, 9, 3, 4, 6, 5, 1, 8, 2, 7);\n+                MemorySegment array = arena.allocateFrom(JAVA_INT, 0, 9, 3, 4, 6, 5, 1, 8, 2, 7);\n@@ -290,1 +290,1 @@\n-                int res = (int) printf.invokeExact(arena.allocateString(\"%d plus %d equals %d\"), 2, 2, 4); \/\/prints \"2 plus 2 equals 4\"\n+                int res = (int) printf.invokeExact(arena.allocateFrom(\"%d plus %d equals %d\"), 2, 2, 4); \/\/prints \"2 plus 2 equals 4\"\n@@ -575,1 +575,1 @@\n-                MemorySegment cString = arena.allocateString(\"Hello\");\n+                MemorySegment cString = arena.allocateFrom(\"Hello\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/snippet-files\/Snippets.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                MemorySegment other = arena.allocateString(s2);\n+                MemorySegment other = arena.allocateFrom(s2);\n@@ -198,2 +198,2 @@\n-                MemorySegment ns1 = arena.allocateString(s1);\n-                MemorySegment ns2 = arena.allocateString(s2);\n+                MemorySegment ns1 = arena.allocateFrom(s1);\n+                MemorySegment ns2 = arena.allocateFrom(s2);\n@@ -206,1 +206,1 @@\n-                MemorySegment s = arena.allocateString(msg);\n+                MemorySegment s = arena.allocateFrom(msg);\n@@ -213,1 +213,1 @@\n-                MemorySegment s = arena.allocateString(msg);\n+                MemorySegment s = arena.allocateFrom(msg);\n@@ -280,1 +280,1 @@\n-                MemorySegment nativeArr = arena.allocateArray(C_INT, arr);\n+                MemorySegment nativeArr = arena.allocateFrom(C_INT, arr);\n@@ -303,1 +303,1 @@\n-                MemorySegment formatStr = arena.allocateString(format);\n+                MemorySegment formatStr = arena.allocateFrom(format);\n@@ -384,1 +384,1 @@\n-        STRING(MemorySegment.class, C_POINTER, \"%s\", arena -> arena.allocateString(\"str\"), \"str\");\n+        STRING(MemorySegment.class, C_POINTER, \"%s\", arena -> arena.allocateFrom(\"str\"), \"str\");\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -101,2 +101,2 @@\n-            MemorySegment b = arena.allocateArray(B, 2);\n-            MemorySegment c = arena.allocateArray(C, 4);\n+            MemorySegment b = arena.allocate(B, 2);\n+            MemorySegment c = arena.allocate(C, 4);\n","filename":"test\/jdk\/java\/foreign\/TestDereferencePath.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,15 +125,15 @@\n-        ScopedOperation.ofScope(a -> a.allocate(JAVA_BYTE, (byte) 0), \"Arena::allocate\/byte\");\n-        ScopedOperation.ofScope(a -> a.allocate(ValueLayout.JAVA_CHAR, (char) 0), \"Arena::allocate\/char\");\n-        ScopedOperation.ofScope(a -> a.allocate(ValueLayout.JAVA_SHORT, (short) 0), \"Arena::allocate\/short\");\n-        ScopedOperation.ofScope(a -> a.allocate(ValueLayout.JAVA_INT, 0), \"Arena::allocate\/int\");\n-        ScopedOperation.ofScope(a -> a.allocate(ValueLayout.JAVA_FLOAT, 0f), \"Arena::allocate\/float\");\n-        ScopedOperation.ofScope(a -> a.allocate(ValueLayout.JAVA_LONG, 0L), \"Arena::allocate\/long\");\n-        ScopedOperation.ofScope(a -> a.allocate(ValueLayout.JAVA_DOUBLE, 0d), \"Arena::allocate\/double\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(JAVA_BYTE, 1L), \"Arena::allocateArray\/size\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(JAVA_BYTE, new byte[]{0}), \"Arena::allocateArray\/byte\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(ValueLayout.JAVA_CHAR, new char[]{0}), \"Arena::allocateArray\/char\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(ValueLayout.JAVA_SHORT, new short[]{0}), \"Arena::allocateArray\/short\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(ValueLayout.JAVA_INT, new int[]{0}), \"Arena::allocateArray\/int\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(ValueLayout.JAVA_FLOAT, new float[]{0}), \"Arena::allocateArray\/float\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(ValueLayout.JAVA_LONG, new long[]{0}), \"Arena::allocateArray\/long\");\n-        ScopedOperation.ofScope(a -> a.allocateArray(ValueLayout.JAVA_DOUBLE, new double[]{0}), \"Arena::allocateArray\/double\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(JAVA_BYTE, (byte) 0), \"Arena::allocate\/byte\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_CHAR, (char) 0), \"Arena::allocate\/char\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_SHORT, (short) 0), \"Arena::allocate\/short\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_INT, 0), \"Arena::allocate\/int\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_FLOAT, 0f), \"Arena::allocate\/float\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_LONG, 0L), \"Arena::allocate\/long\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_DOUBLE, 0d), \"Arena::allocate\/double\");\n+        ScopedOperation.ofScope(a -> a.allocate(JAVA_BYTE, 1L), \"Arena::allocate\/size\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(JAVA_BYTE, new byte[]{0}), \"Arena::allocateFrom\/byte\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_CHAR, new char[]{0}), \"Arena::allocateFrom\/char\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_SHORT, new short[]{0}), \"Arena::allocateFrom\/short\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_INT, new int[]{0}), \"Arena::allocateFrom\/int\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_FLOAT, new float[]{0}), \"Arena::allocateFrom\/float\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_LONG, new long[]{0}), \"Arena::allocateFrom\/long\");\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_DOUBLE, new double[]{0}), \"Arena::allocateFrom\/double\");\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-        allocator.allocateArray(ValueLayout.JAVA_BYTE, -1);\n+        allocator.allocate(ValueLayout.JAVA_BYTE, -1);\n@@ -155,1 +155,1 @@\n-        allocator.allocateArray(ValueLayout.JAVA_LONG,  Long.MAX_VALUE);\n+        allocator.allocate(ValueLayout.JAVA_LONG,  Long.MAX_VALUE);\n@@ -175,1 +175,1 @@\n-            public MemorySegment allocateArray(MemoryLayout elementLayout, long count) {\n+            public MemorySegment allocate(MemoryLayout elementLayout, long count) {\n@@ -180,7 +180,7 @@\n-        allocator.allocateArray(ValueLayout.JAVA_BYTE);\n-        allocator.allocateArray(ValueLayout.JAVA_SHORT);\n-        allocator.allocateArray(ValueLayout.JAVA_CHAR);\n-        allocator.allocateArray(ValueLayout.JAVA_INT);\n-        allocator.allocateArray(ValueLayout.JAVA_FLOAT);\n-        allocator.allocateArray(ValueLayout.JAVA_LONG);\n-        allocator.allocateArray(ValueLayout.JAVA_DOUBLE);\n+        allocator.allocateFrom(ValueLayout.JAVA_BYTE);\n+        allocator.allocateFrom(ValueLayout.JAVA_SHORT);\n+        allocator.allocateFrom(ValueLayout.JAVA_CHAR);\n+        allocator.allocateFrom(ValueLayout.JAVA_INT);\n+        allocator.allocateFrom(ValueLayout.JAVA_FLOAT);\n+        allocator.allocateFrom(ValueLayout.JAVA_LONG);\n+        allocator.allocateFrom(ValueLayout.JAVA_DOUBLE);\n@@ -206,1 +206,1 @@\n-        allocator.allocateString(\"Hello\");\n+        allocator.allocateFrom(\"Hello\");\n@@ -254,1 +254,1 @@\n-                    (AllocationFunction.OfByte) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfByte) SegmentAllocator::allocateFrom,\n@@ -257,1 +257,1 @@\n-                    (AllocationFunction.OfShort) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfShort) SegmentAllocator::allocateFrom,\n@@ -260,1 +260,1 @@\n-                    (AllocationFunction.OfChar) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfChar) SegmentAllocator::allocateFrom,\n@@ -264,1 +264,1 @@\n-                    (AllocationFunction.OfInt) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfInt) SegmentAllocator::allocateFrom,\n@@ -267,1 +267,1 @@\n-                    (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfFloat) SegmentAllocator::allocateFrom,\n@@ -270,1 +270,1 @@\n-                    (AllocationFunction.OfLong) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfLong) SegmentAllocator::allocateFrom,\n@@ -273,1 +273,1 @@\n-                    (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfDouble) SegmentAllocator::allocateFrom,\n@@ -276,1 +276,1 @@\n-                    (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfAddress) SegmentAllocator::allocateFrom,\n@@ -280,1 +280,1 @@\n-                    (AllocationFunction.OfShort) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfShort) SegmentAllocator::allocateFrom,\n@@ -283,1 +283,1 @@\n-                    (AllocationFunction.OfChar) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfChar) SegmentAllocator::allocateFrom,\n@@ -287,1 +287,1 @@\n-                    (AllocationFunction.OfInt) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfInt) SegmentAllocator::allocateFrom,\n@@ -290,1 +290,1 @@\n-                    (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfFloat) SegmentAllocator::allocateFrom,\n@@ -293,1 +293,1 @@\n-                    (AllocationFunction.OfLong) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfLong) SegmentAllocator::allocateFrom,\n@@ -296,1 +296,1 @@\n-                    (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfDouble) SegmentAllocator::allocateFrom,\n@@ -299,1 +299,1 @@\n-                    (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n+                    (AllocationFunction.OfAddress) SegmentAllocator::allocateFrom,\n@@ -310,1 +310,1 @@\n-                    (AllocationFunction.OfByteArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfByteArray) SegmentAllocator::allocateFrom,\n@@ -313,1 +313,1 @@\n-                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateFrom,\n@@ -316,1 +316,1 @@\n-                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateFrom,\n@@ -320,1 +320,1 @@\n-                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateFrom,\n@@ -323,1 +323,1 @@\n-                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateFrom,\n@@ -326,1 +326,1 @@\n-                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateFrom,\n@@ -329,1 +329,1 @@\n-                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateFrom,\n@@ -333,1 +333,1 @@\n-                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateFrom,\n@@ -336,1 +336,1 @@\n-                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateFrom,\n@@ -340,1 +340,1 @@\n-                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateFrom,\n@@ -343,1 +343,1 @@\n-                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateFrom,\n@@ -346,1 +346,1 @@\n-                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateFrom,\n@@ -349,1 +349,1 @@\n-                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n+                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateFrom,\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                    MemorySegment text = arena.allocateString(testString, charset);\n+                    MemorySegment text = arena.allocateFrom(testString, charset);\n@@ -67,1 +67,1 @@\n-                assertThrows(UnsupportedOperationException.class, () -> Arena.global().allocateString(testString, charset));\n+                assertThrows(UnsupportedOperationException.class, () -> Arena.global().allocateFrom(testString, charset));\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-            MemorySegment segment = arena.allocateString(str);\n+            MemorySegment segment = arena.allocateFrom(str);\n@@ -104,1 +104,1 @@\n-        return (int)STRLEN.invokeExact(arenaAllocator.allocateString(str));\n+        return (int)STRLEN.invokeExact(arenaAllocator.allocateFrom(str));\n@@ -110,1 +110,1 @@\n-        int l = (int) STRLEN.invokeExact(arena.allocateString(str));\n+        int l = (int) STRLEN.invokeExact(arena.allocateFrom(str));\n@@ -117,1 +117,1 @@\n-        return (int)STRLEN.invokeExact(segmentAllocator.allocateString(str));\n+        return (int)STRLEN.invokeExact(segmentAllocator.allocateFrom(str));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        MemorySegment segment = allocator.allocateArray(type.layout(), size);\n+        MemorySegment segment = allocator.allocate(type.layout(), size);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/pointers\/Pointer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}