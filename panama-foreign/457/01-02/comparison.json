{"files":[{"patch":"@@ -34,0 +34,2 @@\n+#include \"runtime\/signature.hpp\"\n+#include \"utilities\/formatBuffer.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86_64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"code\/vmreg.hpp\"\n","filename":"src\/hotspot\/share\/prims\/foreign_globals.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  Symbol* sym = SymbolTable::new_symbol(FOREIGN_ABI \"ProgrammableUpcallHandler$InterpretedHandler\");\n+  Symbol* sym = SymbolTable::new_symbol(FOREIGN_ABI \"ProgrammableUpcallHandler\");\n@@ -98,1 +98,1 @@\n-  upcall_method.sig = SymbolTable::new_symbol(\"(L\" FOREIGN_ABI \"ProgrammableUpcallHandler$InterpretedHandler;J)V\");\n+  upcall_method.sig = SymbolTable::new_symbol(\"(Ljava\/lang\/invoke\/MethodHandle;J)V\");\n@@ -141,1 +141,1 @@\n-  {CC \"allocateUpcallStub\", CC \"(\" \"L\" FOREIGN_ABI \"ProgrammableUpcallHandler$InterpretedHandler;\" \"L\" FOREIGN_ABI \"ABIDescriptor;\" \"L\" FOREIGN_ABI \"BufferLayout;\" \")J\", FN_PTR(PUH_AllocateUpcallStub)},\n+  {CC \"allocateUpcallStub\", CC \"(\" \"Ljava\/lang\/invoke\/MethodHandle;\" \"L\" FOREIGN_ABI \"ABIDescriptor;\" \"L\" FOREIGN_ABI \"BufferLayout;\" \")J\", FN_PTR(PUH_AllocateUpcallStub)},\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -203,1 +203,0 @@\n-        MethodType leafType = leafHandle.type();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -134,2 +134,1 @@\n-            InterpretedHandler handler = new InterpretedHandler(invokeMoves);\n-            entryPoint = allocateUpcallStub(handler, abi, layout);\n+            entryPoint = allocateUpcallStub(invokeMoves, abi, layout);\n@@ -206,10 +205,2 @@\n-    private static class InterpretedHandler {\n-        private final MethodHandle mh;\n-\n-        InterpretedHandler(MethodHandle mh) {\n-            this.mh = mh;\n-        }\n-\n-        public static void invoke(InterpretedHandler handler, long address) throws Throwable {\n-            handler.mh.invokeExact(MemoryAddress.ofLong(address));\n-        }\n+    public static void invoke(MethodHandle mh, long address) throws Throwable {\n+        mh.invokeExact(MemoryAddress.ofLong(address));\n@@ -310,1 +301,1 @@\n-    public static native long allocateUpcallStub(InterpretedHandler handler, ABIDescriptor abi, BufferLayout layout);\n+    public static native long allocateUpcallStub(MethodHandle mh, ABIDescriptor abi, BufferLayout layout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableUpcallHandler.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -292,1 +292,2 @@\n-                            Class<?> type = SharedUtils.primitiveCarrierForSize(copy, false);\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n+                            Class<?> type = SharedUtils.primitiveCarrierForSize(copy, useFloat);\n@@ -325,1 +326,2 @@\n-                            Class<?> type = SharedUtils.primitiveCarrierForSize(size, false);\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n+                            Class<?> type = SharedUtils.primitiveCarrierForSize(size, useFloat);\n@@ -394,1 +396,2 @@\n-                            Class<?> type = SharedUtils.primitiveCarrierForSize(copy, false);\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n+                            Class<?> type = SharedUtils.primitiveCarrierForSize(copy, useFloat);\n@@ -424,1 +427,2 @@\n-                            Class<?> type = SharedUtils.primitiveCarrierForSize(size, false);\n+                            boolean useFloat = storage.type() == StorageClasses.VECTOR;\n+                            Class<?> type = SharedUtils.primitiveCarrierForSize(size, useFloat);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -284,4 +284,4 @@\n-                bufferLoad(0, int.class),\n-                vmStore(v1, int.class),\n-                bufferLoad(4, int.class),\n-                vmStore(v2, int.class)\n+                bufferLoad(0, float.class),\n+                vmStore(v1, float.class),\n+                bufferLoad(4, float.class),\n+                vmStore(v2, float.class)\n@@ -294,2 +294,2 @@\n-            vmLoad(v0, int.class),\n-            bufferStore(0, int.class),\n+            vmLoad(v0, float.class),\n+            bufferStore(0, float.class),\n@@ -297,2 +297,2 @@\n-            vmLoad(v1, int.class),\n-            bufferStore(4, int.class),\n+            vmLoad(v1, float.class),\n+            bufferStore(4, float.class),\n@@ -318,2 +318,2 @@\n-                bufferLoad(0, int.class),\n-                vmStore(v0, int.class),\n+                bufferLoad(0, float.class),\n+                vmStore(v0, float.class),\n@@ -321,4 +321,4 @@\n-                bufferLoad(4, int.class),\n-                vmStore(v1, int.class),\n-                bufferLoad(8, int.class),\n-                vmStore(v2, int.class)\n+                bufferLoad(4, float.class),\n+                vmStore(v1, float.class),\n+                bufferLoad(8, float.class),\n+                vmStore(v2, float.class)\n@@ -328,2 +328,2 @@\n-                bufferLoad(0, int.class),\n-                vmStore(v3, int.class),\n+                bufferLoad(0, float.class),\n+                vmStore(v3, float.class),\n@@ -331,4 +331,4 @@\n-                bufferLoad(4, int.class),\n-                vmStore(v4, int.class),\n-                bufferLoad(8, int.class),\n-                vmStore(v5, int.class)\n+                bufferLoad(4, float.class),\n+                vmStore(v4, float.class),\n+                bufferLoad(8, float.class),\n+                vmStore(v5, float.class)\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}