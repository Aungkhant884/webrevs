{"files":[{"patch":"@@ -54,1 +54,1 @@\n-        emitFunctionaRestrictedFactory();\n+        emitFunctionalRestrictedFactory();\n@@ -98,1 +98,1 @@\n-    private void emitFunctionaRestrictedFactory() {\n+    private void emitFunctionalRestrictedFactory() {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+    private final Map<Type, String> functionTypeDefNames = new HashMap<>();\n@@ -87,0 +88,12 @@\n+    private void addFunctionTypedef(Type.Delegated typedef, String name) {\n+        functionTypeDefNames.put(typedef, name);\n+    }\n+\n+    private boolean functionTypedefSeen(Type.Delegated typedef) {\n+        return functionTypeDefNames.containsKey(typedef);\n+    }\n+\n+    private String functionTypedefName(Type.Delegated decl) {\n+        return functionTypeDefNames.get(decl);\n+    }\n+\n@@ -281,2 +294,2 @@\n-                getAsFunctionPointer(delegated.type()) != null) {\n-            return delegated.name();\n+                functionTypedefSeen(delegated)) {\n+            return Optional.of(functionTypedefName(delegated));\n@@ -347,1 +360,4 @@\n-                generateFunctionalInterface(func, tree.name());\n+                String funcIntfName = generateFunctionalInterface(func, tree.name());\n+                if (funcIntfName != null) {\n+                    addFunctionTypedef(Type.typedef(tree.name(), tree.type()), funcIntfName);\n+                }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    public void testStructField() {\n+    public void testStructFieldTypedef() {\n@@ -60,1 +60,1 @@\n-    public void testStructFieldFI() {\n+    public void testStructFieldFITypedef() {\n@@ -71,1 +71,1 @@\n-    public void testGlobal() {\n+    public void testGlobalTypedef() {\n@@ -81,1 +81,1 @@\n-    public void testGlobalFI() {\n+    public void testGlobalFITypedef() {\n@@ -89,0 +89,42 @@\n+\n+    @Test\n+    public void testStructFieldFunctionPointer() {\n+        try (NativeScope scope = NativeScope.unboundedScope()) {\n+            AtomicInteger val = new AtomicInteger(-1);\n+            MemorySegment baz = Baz.allocate(scope);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), scope).address());\n+            Baz.fp(baz).apply(42);\n+            assertEquals(val.get(), 42);\n+        }\n+    }\n+\n+    @Test\n+    public void testStructFieldFIFunctionPointer() {\n+        try (NativeScope scope = NativeScope.unboundedScope()) {\n+            AtomicInteger val = new AtomicInteger(-1);\n+            MemorySegment baz = Baz.allocate(scope);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), scope).address());\n+            Baz.fp.ofAddressRestricted(Baz.fp$get(baz)).apply(42);\n+            assertEquals(val.get(), 42);\n+        }\n+    }\n+\n+    @Test\n+    public void testGlobalFunctionPointer() {\n+        try (NativeScope scope = NativeScope.unboundedScope()) {\n+            AtomicInteger val = new AtomicInteger(-1);\n+            fp$set(fp.allocate((i) -> val.set(i), scope).address());\n+            fp().apply(42);\n+            assertEquals(val.get(), 42);\n+        }\n+    }\n+\n+    @Test\n+    public void testGlobalFIFunctionPointer() {\n+        try (NativeScope scope = NativeScope.unboundedScope()) {\n+            AtomicInteger val = new AtomicInteger(-1);\n+            fp$set(fp.allocate((i) -> val.set(i), scope).address());\n+            fp.ofAddressRestricted(fp$get()).apply(42);\n+            assertEquals(val.get(), 42);\n+        }\n+    }\n","filename":"test\/jdk\/tools\/jextract\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":46,"deletions":4,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+struct Baz {\n+   void (*fp)(int arg);\n+};\n+\n+EXPORT void (*fp)(int arg);\n+\n@@ -44,1 +50,1 @@\n-#endif \/\/ __cplusplus\n\\ No newline at end of file\n+#endif \/\/ __cplusplus\n","filename":"test\/jdk\/tools\/jextract\/funcPointerInvokers\/func.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}