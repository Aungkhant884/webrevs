{"files":[{"patch":"@@ -160,1 +160,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), CLinker.class, \"systemCLinker\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/CLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -851,1 +851,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemorySegment.class, \"ofAddress\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), NativeSymbol.class, \"ofAddress\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/NativeSymbol.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), VaList.class, \"ofAddress\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getUtf8String\");\n@@ -114,1 +114,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setUtf8String\");\n@@ -123,1 +123,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -131,1 +131,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -139,1 +139,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -147,1 +147,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -155,1 +155,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -163,1 +163,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -171,1 +171,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -179,1 +179,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -187,1 +187,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -195,1 +195,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -203,1 +203,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -211,1 +211,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -219,1 +219,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -227,1 +227,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -235,1 +235,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -243,1 +243,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -251,1 +251,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"get\");\n@@ -259,1 +259,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"set\");\n@@ -267,1 +267,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getAtIndex\");\n@@ -276,1 +276,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setAtIndex\");\n@@ -285,1 +285,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getAtIndex\");\n@@ -294,1 +294,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setAtIndex\");\n@@ -303,1 +303,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getAtIndex\");\n@@ -312,1 +312,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setAtIndex\");\n@@ -321,1 +321,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getAtIndex\");\n@@ -330,1 +330,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setAtIndex\");\n@@ -339,1 +339,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getAtIndex\");\n@@ -348,1 +348,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setAtIndex\");\n@@ -357,1 +357,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getAtIndex\");\n@@ -366,1 +366,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setAtIndex\");\n@@ -375,1 +375,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"getAtIndex\");\n@@ -384,1 +384,1 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), MemoryAddress.class, \"setAtIndex\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -775,0 +775,12 @@\n+    private static final boolean HAS_ENABLE_NATIVE_ACCESS_FLAG;\n+    private static final Set<String> NATIVE_ACCESS_MODULES;\n+\n+    public static boolean hasEnableNativeAccessFlag() {\n+        return HAS_ENABLE_NATIVE_ACCESS_FLAG;\n+    }\n+\n+    static {\n+        NATIVE_ACCESS_MODULES = decodeEnableNativeAccess();\n+        HAS_ENABLE_NATIVE_ACCESS_FLAG = !NATIVE_ACCESS_MODULES.isEmpty();\n+    }\n+\n@@ -779,1 +791,1 @@\n-        for (String name : decodeEnableNativeAccess()) {\n+        for (String name : NATIVE_ACCESS_MODULES) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,5 @@\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.security.CodeSource;\n+import java.security.PrivilegedAction;\n+import java.security.ProtectionDomain;\n@@ -33,0 +38,2 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n@@ -35,0 +42,1 @@\n+import jdk.internal.module.ModuleBootstrap;\n@@ -111,1 +119,1 @@\n-    public static void ensureNativeAccess(Class<?> currentClass) {\n+    public static void ensureNativeAccess(Class<?> currentClass, Class<?> owner, String methodName) {\n@@ -113,2 +121,25 @@\n-        if (!SharedSecrets.getJavaLangAccess().isEnableNativeAccess(module)) {\n-            throw new IllegalCallerException(\"Illegal native access from: \" + module);\n+        boolean isNativeAccessEnabled = SharedSecrets.getJavaLangAccess().isEnableNativeAccess(module);\n+        if (!isNativeAccessEnabled) {\n+            synchronized(module) {\n+                isNativeAccessEnabled = SharedSecrets.getJavaLangAccess().isEnableNativeAccess(module);\n+                if (isNativeAccessEnabled) {\n+                    \/\/ some other thread got to it, do nothing\n+                } else if (ModuleBootstrap.hasEnableNativeAccessFlag()) {\n+                    throw new IllegalCallerException(\"Illegal native access from: \" + module);\n+                } else {\n+                    \/\/ warn and set flag, so that only one warning is reported per module\n+                    String cls = owner.getName();\n+                    String mtd = cls + \"::\" + methodName;\n+                    String mod = module.isNamed() ? \"module \" + module.getName() : \"the unnamed module\";\n+                    System.err.printf(\"\"\"\n+                            WARNING: A restricted method in %s has been called\n+                            WARNING: %s has been called by %s\n+                            WARNING: Use --enable-native-access to allow this module to use restricted methods\n+                            %n\"\"\", cls, mtd, mod);\n+                    if (module.isNamed()) {\n+                        SharedSecrets.getJavaLangAccess().addEnableNativeAccess(module);\n+                    } else {\n+                        SharedSecrets.getJavaLangAccess().addEnableNativeAccessAllUnnamed();\n+                    }\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/Reflection.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.foreign.CLinker;\n-import java.lang.foreign.MemoryAddress;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.MemorySession;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.InvocationTargetException;\n-\n-import org.testng.annotations.Test;\n-\n-\/*\n- * @test\n- * @enablePreview\n- * @run testng TestRestricted\n- *\/\n-public class TestRestricted {\n-    @Test(expectedExceptions = InvocationTargetException.class)\n-    public void testReflection() throws Throwable {\n-        Method method = CLinker.class.getDeclaredMethod(\"systemCLinker\");\n-        method.invoke(null);\n-    }\n-\n-    @Test(expectedExceptions = IllegalCallerException.class)\n-    public void testInvoke() throws Throwable {\n-        var mh = MethodHandles.lookup().findStatic(CLinker.class,\n-                \"systemCLinker\", MethodType.methodType(CLinker.class));\n-        var seg = (CLinker)mh.invokeExact();\n-    }\n-\n-    @Test(expectedExceptions = IllegalCallerException.class)\n-    public void testDirectAccess() throws Throwable {\n-        CLinker.systemCLinker();\n-    }\n-\n-    @Test(expectedExceptions = InvocationTargetException.class)\n-    public void testReflection2() throws Throwable {\n-        Method method = MemorySegment.class.getDeclaredMethod(\"ofAddress\", MemoryAddress.class, long.class, MemorySession.class);\n-        method.invoke(null, MemoryAddress.NULL, 4000L, MemorySession.global());\n-    }\n-\n-    @Test(expectedExceptions = IllegalCallerException.class)\n-    public void testInvoke2() throws Throwable {\n-        var mh = MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddress\",\n-            MethodType.methodType(MemorySegment.class, MemoryAddress.class, long.class, MemorySession.class));\n-        var seg = (MemorySegment)mh.invokeExact(MemoryAddress.NULL, 4000L, MemorySession.global());\n-    }\n-\n-    @Test(expectedExceptions = IllegalCallerException.class)\n-    public void testDirectAccess2() throws Throwable {\n-        MemorySegment.ofAddress(MemoryAddress.NULL, 4000, MemorySession.global());\n-    }\n-}\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,131 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/**\n- * @test id=panama_enable_native_access\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMain\n- * @summary with --enable-native-access access to specific module Panama unsafe API succeeds\n- *\/\n-\n-\/**\n- * @test id=panama_enable_native_access_reflection\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMainReflection\n- * @summary with --enable-native-access access to specific module Panama unsafe API succeeds\n- *\/\n-\n-\/**\n- * @test id=panama_enable_native_access_invoke\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n- * @summary with --enable-native-access access to specific module Panama unsafe API succeeds\n- *\/\n-\n-\/**\n- * @test id=panama_comma_separated_enable\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMain\n- * @summary with --enable-native-access access to comma separated list of modules\n- *\/\n-\n-\/**\n- * @test id=panama_comma_separated_enable_reflection\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMainReflection\n- * @summary with --enable-native-access access to comma separated list of modules\n- *\/\n-\n-\/**\n- * @test id=panama_comma_separated_enable_invoke\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n- * @summary with --enable-native-access access to comma separated list of modules\n- *\/\n-\n-\/**\n- * @test id=panama_no_enable_native_access_fail\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMain\n- * @summary without --enable-native-access access to Panama unsafe API fails\n- *\/\n-\n-\/**\n- * @test id=panama_no_enable_native_access_fail_reflection\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMainReflection\n- * @summary without --enable-native-access access to Panama unsafe API fails\n- *\/\n-\n-\/**\n- * @test id=panama_no_enable_native_access_fail_invoke\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n- * @summary without --enable-native-access access to Panama unsafe API fails\n- *\/\n-\n-\/**\n- * @test id=panama_no_all_module_path_blanket_native_access\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build panama_module\/*\n- * @run main\/othervm\/fail --enable-native-access=ALL-MODULE-PATH panama_module\/org.openjdk.foreigntest.PanamaMain\n- * @summary --enable-native-access does not work with ALL-MODULE-PATH\n- *\/\n-\n-\/**\n- * @test id=panama_no_unnamed_module_native_access\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build org.openjdk.foreigntest.PanamaMainUnnamedModule\n- * @run testng\/othervm\/fail org.openjdk.foreigntest.PanamaMainUnnamedModule\n- * @summary --enable-native-access does not work without ALL-UNNAMED\n- *\/\n-\n-\/**\n- * @test id=panama_all_unnamed_module_native_access\n- * @enablePreview\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @build org.openjdk.foreigntest.PanamaMainUnnamedModule\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED org.openjdk.foreigntest.PanamaMainUnnamedModule\n- * @summary --enable-native-access ALL-UNNAMED works\n- *\/\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestDriver.java","additions":0,"deletions":131,"binary":false,"changes":131,"status":"deleted"},{"patch":"@@ -0,0 +1,227 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @library \/test\/lib\n+ * @build TestEnableNativeAccess\n+ *        panama_module\/*\n+ *        org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ * @run testng\/othervm\/timeout=180 TestEnableNativeAccess\n+ * @summary Basic test for java --enable-native-access\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+\/**\n+ * Basic test of --enable-native-access with expected behaviour:\n+ *\n+ *  if flag present:        - permit access to modules that are specified\n+ *                          - deny access to modules that are not specified\n+ *                            (throw IllegalCallerException)\n+ *  if flag not present:    - permit access to all modules and omit a warning\n+ *                            (on first access per module only)\n+*\/\n+\n+@Test\n+public class TestEnableNativeAccess {\n+\n+    static final String MODULE_PATH = System.getProperty(\"jdk.module.path\");\n+\n+    static final String PANAMA_MAIN = \"panama_module\/org.openjdk.foreigntest.PanamaMainDirect\";\n+    static final String PANAMA_REFLECTION = \"panama_module\/org.openjdk.foreigntest.PanamaMainReflection\";\n+    static final String PANAMA_INVOKE = \"panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\";\n+    static final String UNNAMED = \"org.openjdk.foreigntest.PanamaMainUnnamedModule\";\n+\n+    \/**\n+     * Represents the expected result of a test.\n+     *\/\n+    static final class Result {\n+        private final boolean success;\n+        private final List<String> expectedOutput = new ArrayList<>();\n+        private final List<String> notExpectedOutput = new ArrayList<>();\n+\n+        Result(boolean success) {\n+            this.success = success;\n+        }\n+\n+        Result expect(String msg) {\n+            expectedOutput.add(msg);\n+            return this;\n+        }\n+\n+        Result doNotExpect(String msg) {\n+            notExpectedOutput.add(msg);\n+            return this;\n+        }\n+\n+        boolean shouldSucceed() {\n+            return success;\n+        }\n+\n+        Stream<String> expectedOutput() {\n+            return expectedOutput.stream();\n+        }\n+\n+        Stream<String> notExpectedOutput() {\n+            return notExpectedOutput.stream();\n+        }\n+\n+        @Override\n+        public String toString() {\n+            String s = (success) ? \"success\" : \"failure\";\n+            for (String msg : expectedOutput) {\n+                s += \"\/\" + msg;\n+            }\n+            return s;\n+        }\n+    }\n+\n+    static Result success() {\n+        return new Result(true);\n+    }\n+\n+    static Result successNoWarning() {\n+        return success().doNotExpect(\"WARNING\");\n+    }\n+\n+    static Result successWithWarning() {\n+        return success().expect(\"WARNING\");\n+    }\n+\n+    static Result failWithWarning(String expectedOutput) {\n+        return new Result(false).expect(expectedOutput).expect(\"WARNING\");\n+    }\n+\n+    @DataProvider(name = \"succeedCases\")\n+    public Object[][] succeedCases() {\n+        return new Object[][] {\n+                { \"panama_enable_native_access\", PANAMA_MAIN, successNoWarning(), new String[]{\"--enable-native-access=panama_module\"} },\n+                { \"panama_enable_native_access_reflection\", PANAMA_REFLECTION, successNoWarning(), new String[]{\"--enable-native-access=panama_module\"} },\n+                { \"panama_enable_native_access_invoke\", PANAMA_INVOKE, successNoWarning(), new String[]{\"--enable-native-access=panama_module\"} },\n+\n+                { \"panama_comma_separated_enable\", PANAMA_MAIN, successNoWarning(), new String[]{\"--enable-native-access=java.base,panama_module\"} },\n+                { \"panama_comma_separated_enable_reflection\", PANAMA_REFLECTION, successNoWarning(), new String[]{\"--enable-native-access=java.base,panama_module\"} },\n+                { \"panama_comma_separated_enable_invoke\", PANAMA_INVOKE, successNoWarning(), new String[]{\"--enable-native-access=java.base,panama_module\"} },\n+\n+                { \"panama_enable_native_access_warn\", PANAMA_MAIN, successWithWarning(), new String[]{} },\n+                { \"panama_enable_native_access_warn_reflection\", PANAMA_REFLECTION, successWithWarning(), new String[]{} },\n+                { \"panama_enable_native_access_warn_invoke\", PANAMA_INVOKE, successWithWarning(), new String[]{} },\n+\n+                { \"panama_no_unnamed_module_native_access\", UNNAMED, successWithWarning(), new String[]{} },\n+                { \"panama_all_unnamed_module_native_access\", UNNAMED, successNoWarning(), new String[]{\"--enable-native-access=ALL-UNNAMED\"} },\n+        };\n+    }\n+\n+    \/**\n+     * Checks an expected result with the output captured by the given\n+     * OutputAnalyzer.\n+     *\/\n+    void checkResult(Result expectedResult, OutputAnalyzer outputAnalyzer) {\n+        expectedResult.expectedOutput().forEach(outputAnalyzer::shouldContain);\n+        expectedResult.notExpectedOutput().forEach(outputAnalyzer::shouldNotContain);\n+        int exitValue = outputAnalyzer.getExitValue();\n+        if (expectedResult.shouldSucceed()) {\n+            assertTrue(exitValue == 0);\n+        } else {\n+            assertTrue(exitValue != 0);\n+        }\n+    }\n+\n+    \/**\n+     * Runs the test to execute the given test action. The VM is run with the\n+     * given VM options and the output checked to see that it matches the\n+     * expected result.\n+     *\/\n+    OutputAnalyzer run(String action, String cls, Result expectedResult, String... vmopts)\n+            throws Exception\n+    {\n+        Stream<String> s1 = Stream.of(vmopts);\n+        Stream<String> s2 = cls.equals(UNNAMED) ? Stream.of(\"--enable-preview\", \"-p\", MODULE_PATH, cls, action)\n+                : Stream.of(\"--enable-preview\", \"-p\", MODULE_PATH, \"-m\", cls, action);\n+        String[] opts = Stream.concat(s1, s2).toArray(String[]::new);\n+        OutputAnalyzer outputAnalyzer = ProcessTools\n+                .executeTestJava(opts)\n+                .outputTo(System.out)\n+                .errorTo(System.out);\n+        checkResult(expectedResult, outputAnalyzer);\n+        return outputAnalyzer;\n+    }\n+\n+    @Test(dataProvider = \"succeedCases\")\n+    public void testSucceed(String action, String cls, Result expectedResult, String... vmopts) throws Exception {\n+        run(action, cls, expectedResult, vmopts);\n+    }\n+\n+    \/**\n+     * Tests that without --enable-native-access, a multi-line warning is printed\n+     * on first access of a module.\n+     *\/\n+    public void testWarnFirstAccess() throws Exception {\n+        List<String> output1 = run(\"panama_enable_native_access_first\", PANAMA_MAIN,\n+                successWithWarning()).asLines();\n+        assertTrue(count(output1, \"WARNING\") == 3);  \/\/ 3 on first access, none on subsequent access\n+    }\n+\n+    \/**\n+     * Specifies --enable-native-access more than once, each list of module names\n+     * is appended.\n+     *\/\n+    public void testRepeatedOption() throws Exception {\n+        run(\"panama_enable_native_access_last_one_wins\", PANAMA_MAIN,\n+                success(), \"--enable-native-access=java.base\", \"--enable-native-access=panama_module\");\n+        run(\"panama_enable_native_access_last_one_wins\", PANAMA_MAIN,\n+                success(), \"--enable-native-access=panama_module\", \"--enable-native-access=java.base\");\n+    }\n+\n+    \/**\n+     * Specifies bad value to --enable-native-access.\n+     *\/\n+    public void testBadValue() throws Exception {\n+        run(\"panama_enable_native_access_warn_unknown_module\", PANAMA_MAIN,\n+                failWithWarning(\"WARNING: Unknown module: BAD specified to --enable-native-access\"),\n+                \"--enable-native-access=BAD\");\n+        run(\"panama_no_all_module_path_blanket_native_access\", PANAMA_MAIN,\n+                failWithWarning(\"WARNING: Unknown module: ALL-MODULE-PATH specified to --enable-native-access\"),\n+                \"--enable-native-access=ALL-MODULE-PATH\" );\n+    }\n+\n+    private int count(Iterable<String> lines, CharSequence cs) {\n+        int count = 0;\n+        for (String line : lines) {\n+            if (line.contains(cs)) count++;\n+        }\n+        return count;\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccess.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n-import org.testng.annotations.Test;\n@@ -33,2 +32,8 @@\n-   @Test\n-   public void testReflection() throws Throwable {\n+    public static void main(String[] args) throws Throwable {\n+        testReflection();\n+        testSetAccessible();\n+        testInvoke();\n+        testDirectAccess();\n+    }\n+\n+   public static void testReflection() throws Throwable {\n@@ -39,2 +44,1 @@\n-   @Test\n-   public void testSetAccessible() throws Throwable {\n+   public static void testSetAccessible() throws Throwable {\n@@ -46,2 +50,1 @@\n-   @Test\n-   public void testInvoke() throws Throwable {\n+   public static void testInvoke() throws Throwable {\n@@ -53,2 +56,1 @@\n-   @Test\n-   public void testDirectAccess() throws Throwable {\n+   public static void testDirectAccess() {\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.foreigntest;\n-\n-import java.lang.foreign.*;\n-\n-public class PanamaMain {\n-   public static void main(String[] args) {\n-       System.out.println(\"Trying to get CLinker\");\n-       CLinker.systemCLinker();\n-       System.out.println(\"Got CLinker\");\n-   }\n-}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMain.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.foreigntest;\n+\n+import java.lang.foreign.*;\n+\n+public class PanamaMainDirect {\n+    public static void main(String[] args) {\n+       testDirectAccessCLinker();\n+       testDirectAccessMemorySegment();\n+    }\n+\n+    public static void testDirectAccessCLinker() {\n+        System.out.println(\"Trying to get CLinker\");\n+        CLinker.systemCLinker();\n+        System.out.println(\"Got CLinker\");\n+   }\n+\n+    public static void testDirectAccessMemorySegment() {\n+        System.out.println(\"Trying to get MemorySegment\");\n+        MemorySegment.ofAddress(MemoryAddress.NULL, 4000, MemorySession.global());\n+        System.out.println(\"Got MemorySegment\");\n+   }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainDirect.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -26,1 +26,0 @@\n-import java.lang.invoke.*;\n@@ -28,0 +27,1 @@\n+import java.lang.invoke.*;\n@@ -30,5 +30,20 @@\n-   public static void main(String[] args) throws Throwable {\n-       var mh = MethodHandles.lookup().findStatic(CLinker.class, \"systemCLinker\",\n-           MethodType.methodType(CLinker.class));\n-       var linker = (CLinker)mh.invokeExact();\n-   }\n+    public static void main(String[] args) throws Throwable {\n+       testInvokeCLinker();\n+       testInvokeMemorySegment();\n+    }\n+\n+    public static void testInvokeCLinker() throws Throwable {\n+        System.out.println(\"Trying to get CLinker\");\n+        var mh = MethodHandles.lookup().findStatic(CLinker.class, \"systemCLinker\",\n+                MethodType.methodType(CLinker.class));\n+        var linker = (CLinker)mh.invokeExact();\n+        System.out.println(\"Got CLinker\");\n+    }\n+\n+    public static void testInvokeMemorySegment() throws Throwable {\n+        System.out.println(\"Trying to get MemorySegment\");\n+        var mh = MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddress\",\n+                MethodType.methodType(MemorySegment.class, MemoryAddress.class, long.class, MemorySession.class));\n+        var seg = (MemorySegment)mh.invokeExact(MemoryAddress.NULL, 4000L, MemorySession.global());\n+        System.out.println(\"Got MemorySegment\");\n+    }\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainInvoke.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-       Method method = CLinker.class.getDeclaredMethod(\"systemCLinker\");\n-       method.invoke(null);\n+       testReflectionCLinker();\n+       testReflectionMemorySegment();\n@@ -34,0 +34,14 @@\n+\n+    public static void testReflectionCLinker() throws Throwable {\n+        System.out.println(\"Trying to get CLinker\");\n+        Method method = CLinker.class.getDeclaredMethod(\"systemCLinker\");\n+        method.invoke(null);\n+        System.out.println(\"Got CLinker\");\n+    }\n+\n+    public static void testReflectionMemorySegment() throws Throwable {\n+        System.out.println(\"Trying to get MemorySegment\");\n+        Method method = MemorySegment.class.getDeclaredMethod(\"ofAddress\", MemoryAddress.class, long.class, MemorySession.class);\n+        method.invoke(null, MemoryAddress.NULL, 4000L, MemorySession.global());\n+        System.out.println(\"Got MemorySegment\");\n+    }\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainReflection.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-                       lookup_module\/handle.lookup.MethodHandleLookup\n+ *                     lookup_module\/handle.lookup.MethodHandleLookup\n","filename":"test\/jdk\/java\/foreign\/handles\/Driver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}