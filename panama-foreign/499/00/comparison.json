{"files":[{"patch":"@@ -351,1 +351,1 @@\n-        private static final MemorySegment callback = Index_h.CXCursorVisitor.allocate((c, p, d) -> {\n+        private static final MemoryAddress callback = Index_h.CXCursorVisitor.allocate((c, p, d) -> {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Cursor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6959,1 +6959,1 @@\n-        static MemorySegment allocate(CXCursorVisitor fi) {\n+        static MemoryAddress allocate(CXCursorVisitor fi) {\n@@ -6962,1 +6962,1 @@\n-        static MemorySegment allocate(CXCursorVisitor fi, ResourceScope scope) {\n+        static MemoryAddress allocate(CXCursorVisitor fi, ResourceScope scope) {\n@@ -7087,1 +7087,1 @@\n-        static MemorySegment allocate(CXCursorVisitorBlock fi) {\n+        static MemoryAddress allocate(CXCursorVisitorBlock fi) {\n@@ -7090,1 +7090,1 @@\n-        static MemorySegment allocate(CXCursorVisitorBlock fi, ResourceScope scope) {\n+        static MemoryAddress allocate(CXCursorVisitorBlock fi, ResourceScope scope) {\n@@ -9218,1 +9218,1 @@\n-        static MemorySegment allocate(clang_executeOnThread$fn fi) {\n+        static MemoryAddress allocate(clang_executeOnThread$fn fi) {\n@@ -9221,1 +9221,1 @@\n-        static MemorySegment allocate(clang_executeOnThread$fn fi, ResourceScope scope) {\n+        static MemoryAddress allocate(clang_executeOnThread$fn fi, ResourceScope scope) {\n@@ -10124,1 +10124,1 @@\n-        static MemorySegment allocate(CXInclusionVisitor fi) {\n+        static MemoryAddress allocate(CXInclusionVisitor fi) {\n@@ -10127,1 +10127,1 @@\n-        static MemorySegment allocate(CXInclusionVisitor fi, ResourceScope scope) {\n+        static MemoryAddress allocate(CXInclusionVisitor fi, ResourceScope scope) {\n@@ -10482,1 +10482,1 @@\n-            static MemorySegment allocate(visit fi) {\n+            static MemoryAddress allocate(visit fi) {\n@@ -10485,1 +10485,1 @@\n-            static MemorySegment allocate(visit fi, ResourceScope scope) {\n+            static MemoryAddress allocate(visit fi, ResourceScope scope) {\n@@ -10620,1 +10620,1 @@\n-        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi) {\n+        static MemoryAddress allocate(CXCursorAndRangeVisitorBlock fi) {\n@@ -10623,1 +10623,1 @@\n-        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi, ResourceScope scope) {\n+        static MemoryAddress allocate(CXCursorAndRangeVisitorBlock fi, ResourceScope scope) {\n@@ -12175,1 +12175,1 @@\n-            static MemorySegment allocate(abortQuery fi) {\n+            static MemoryAddress allocate(abortQuery fi) {\n@@ -12178,1 +12178,1 @@\n-            static MemorySegment allocate(abortQuery fi, ResourceScope scope) {\n+            static MemoryAddress allocate(abortQuery fi, ResourceScope scope) {\n@@ -12223,1 +12223,1 @@\n-            static MemorySegment allocate(diagnostic fi) {\n+            static MemoryAddress allocate(diagnostic fi) {\n@@ -12226,1 +12226,1 @@\n-            static MemorySegment allocate(diagnostic fi, ResourceScope scope) {\n+            static MemoryAddress allocate(diagnostic fi, ResourceScope scope) {\n@@ -12271,1 +12271,1 @@\n-            static MemorySegment allocate(enteredMainFile fi) {\n+            static MemoryAddress allocate(enteredMainFile fi) {\n@@ -12274,1 +12274,1 @@\n-            static MemorySegment allocate(enteredMainFile fi, ResourceScope scope) {\n+            static MemoryAddress allocate(enteredMainFile fi, ResourceScope scope) {\n@@ -12318,1 +12318,1 @@\n-            static MemorySegment allocate(ppIncludedFile fi) {\n+            static MemoryAddress allocate(ppIncludedFile fi) {\n@@ -12321,1 +12321,1 @@\n-            static MemorySegment allocate(ppIncludedFile fi, ResourceScope scope) {\n+            static MemoryAddress allocate(ppIncludedFile fi, ResourceScope scope) {\n@@ -12365,1 +12365,1 @@\n-            static MemorySegment allocate(importedASTFile fi) {\n+            static MemoryAddress allocate(importedASTFile fi) {\n@@ -12368,1 +12368,1 @@\n-            static MemorySegment allocate(importedASTFile fi, ResourceScope scope) {\n+            static MemoryAddress allocate(importedASTFile fi, ResourceScope scope) {\n@@ -12412,1 +12412,1 @@\n-            static MemorySegment allocate(startedTranslationUnit fi) {\n+            static MemoryAddress allocate(startedTranslationUnit fi) {\n@@ -12415,1 +12415,1 @@\n-            static MemorySegment allocate(startedTranslationUnit fi, ResourceScope scope) {\n+            static MemoryAddress allocate(startedTranslationUnit fi, ResourceScope scope) {\n@@ -12459,1 +12459,1 @@\n-            static MemorySegment allocate(indexDeclaration fi) {\n+            static MemoryAddress allocate(indexDeclaration fi) {\n@@ -12462,1 +12462,1 @@\n-            static MemorySegment allocate(indexDeclaration fi, ResourceScope scope) {\n+            static MemoryAddress allocate(indexDeclaration fi, ResourceScope scope) {\n@@ -12506,1 +12506,1 @@\n-            static MemorySegment allocate(indexEntityReference fi) {\n+            static MemoryAddress allocate(indexEntityReference fi) {\n@@ -12509,1 +12509,1 @@\n-            static MemorySegment allocate(indexEntityReference fi, ResourceScope scope) {\n+            static MemoryAddress allocate(indexEntityReference fi, ResourceScope scope) {\n@@ -12631,1 +12631,1 @@\n-        static MemorySegment allocate(CXFieldVisitor fi) {\n+        static MemoryAddress allocate(CXFieldVisitor fi) {\n@@ -12634,1 +12634,1 @@\n-        static MemorySegment allocate(CXFieldVisitor fi, ResourceScope scope) {\n+        static MemoryAddress allocate(CXFieldVisitor fi, ResourceScope scope) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n+    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n@@ -108,1 +108,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, NativeScope scope) {\n+    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, NativeScope scope) {\n@@ -112,1 +112,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi) {\\n\");\n+            append(MEMBER_MODS + \" MemoryAddress allocate(\" + className() + \" fi) {\\n\");\n@@ -88,1 +88,1 @@\n-            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, ResourceScope scope) {\\n\");\n+            append(MEMBER_MODS + \" MemoryAddress allocate(\" + className() + \" fi, ResourceScope scope) {\\n\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n+    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n@@ -81,1 +81,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, NativeScope scope) {\n+    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, NativeScope scope) {\n@@ -85,1 +85,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-        MemorySegment callback = null;\n@@ -70,1 +69,1 @@\n-            callback = cosine_similarity$dot.allocate((a, b) -> {\n+            MemoryAddress callback = cosine_similarity$dot.allocate((a, b) -> {\n@@ -82,1 +81,0 @@\n-        assertTrue(!callback.scope().isAlive());\n","filename":"test\/jdk\/tools\/jextract\/test8246400\/LibTest8246400Test.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-        checkMethod(fiClass, \"allocate\", MemorySegment.class, fiClass);\n+        checkMethod(fiClass, \"allocate\", MemoryAddress.class, fiClass);\n","filename":"test\/jdk\/tools\/jextract\/testClassGen\/TestClassGeneration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}