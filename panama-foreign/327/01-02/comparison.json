{"files":[{"patch":"@@ -47,10 +47,9 @@\n- * a function descriptor. The method type, consisting of a set of <em>carrier<\/em> types constitute the\n- * set of carrier types, which, together, specify the Java signature which clients must adhere to when\n- * calling the underlying foreign function. The function descriptor contains a set of memory layouts which,\n- * together, specify the foreign function signature and classification information (via custom layout attributes),\n- * so that linking can take place. Memory layout attributes are used in the function descriptor\n- * to attach ABI classification meta-data to memory layouts, which are required for linking.\n- * Clients of this API should build function descriptors using the predefined memory layout constants\n- * (based on a subset of the built-in types provided by the C language), found in this interface;\n- * a failure to do so might result in linkage errors, given that linking requires additional classification\n- * information to determine, for instance, how arguments should be loaded into registers during a\n+ * a function descriptor. The method type, consists of a set of <em>carrier<\/em> types, which, together,\n+ * specify the Java signature which clients must adhere to when calling the underlying foreign function.\n+ * The function descriptor contains a set of memory layouts which, together, specify the foreign function\n+ * signature and classification information (via custom layout attributes), so that linking can take place.\n+ * Memory layout attributes are used in the function descriptor to attach ABI classification meta-data to\n+ * memory layouts, which are required for linking. Clients of this API should build function descriptors\n+ * using the predefined memory layout constants (based on a subset of the built-in types provided by the C language),\n+ * found in this interface; a failure to do so might result in linkage errors, given that linking requires additional\n+ * classification information to determine, for instance, how arguments should be loaded into registers during a\n@@ -93,0 +92,7 @@\n+ *\n+ * @apiNote In the future, if the Java language permits, {@link MemoryLayout}\n+ * may become a {@code sealed} interface, which would prohibit subclassing except by\n+ * explicitly permitted types.\n+ *\n+ * @implSpec\n+ * Implementations of this interface are immutable, thread-safe and <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n@@ -94,1 +100,1 @@\n-public interface CLinker extends ForeignLinker {\n+public interface CLinker {\n@@ -97,1 +103,1 @@\n-     * Obtain a linker that uses the de facto C ABI of the current system to do its linking.\n+     * Returns the C linker for the current platform.\n@@ -120,1 +126,0 @@\n-    @Override\n@@ -138,1 +143,0 @@\n-    @Override\n@@ -211,1 +215,1 @@\n-    public static MemorySegment toCString(String str) {\n+    static MemorySegment toCString(String str) {\n@@ -230,1 +234,1 @@\n-    public static MemorySegment toCString(String str, Charset charset) {\n+    static MemorySegment toCString(String str, Charset charset) {\n@@ -250,1 +254,1 @@\n-    public static MemorySegment toCString(String str, NativeScope scope) {\n+    static MemorySegment toCString(String str, NativeScope scope) {\n@@ -271,1 +275,1 @@\n-    public static MemorySegment toCString(String str, Charset charset, NativeScope scope) {\n+    static MemorySegment toCString(String str, Charset charset, NativeScope scope) {\n@@ -294,1 +298,1 @@\n-    public static String toJavaStringRestricted(MemoryAddress addr) {\n+    static String toJavaStringRestricted(MemoryAddress addr) {\n@@ -316,1 +320,1 @@\n-    public static String toJavaStringRestricted(MemoryAddress addr, Charset charset) {\n+    static String toJavaStringRestricted(MemoryAddress addr, Charset charset) {\n@@ -335,1 +339,1 @@\n-    public static String toJavaString(MemorySegment addr) {\n+    static String toJavaString(MemorySegment addr) {\n@@ -354,1 +358,1 @@\n-    public static String toJavaString(MemorySegment addr, Charset charset) {\n+    static String toJavaString(MemorySegment addr, Charset charset) {\n@@ -386,1 +390,1 @@\n-    public static MemoryAddress allocateMemoryRestricted(long size) {\n+    static MemoryAddress allocateMemoryRestricted(long size) {\n@@ -400,1 +404,1 @@\n-    public static void freeMemoryRestricted(MemoryAddress addr) {\n+    static void freeMemoryRestricted(MemoryAddress addr) {\n@@ -417,0 +421,5 @@\n+     *\n+     * @apiNote In the future, if the Java language permits, {@link VaList}\n+     * may become a {@code sealed} interface, which would prohibit subclassing except by\n+     * explicitly permitted types.\n+     *\n@@ -639,0 +648,5 @@\n+         *\n+         * @apiNote In the future, if the Java language permits, {@link MemoryLayout}\n+         * may become a {@code sealed} interface, which would prohibit subclassing except by\n+         * explicitly permitted types.\n+         *\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- *  Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-package jdk.incubator.foreign;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodType;\n-\n-\/**\n- * This class can be used to link native functions as a {@link MethodHandle}, or to link Java\n- * methods as a native function pointer (modelled as a {@link MemorySegment}).\n- *\n- * Instances of this interface can be obtained for instance by calling {@link CLinker#getSystemLinker()}\n- *\/\n-public interface ForeignLinker {\n-    \/**\n-     * Obtain a method handle which can be used to call a given native function.\n-     *\n-     * @param symbol downcall symbol.\n-     * @param type the method type.\n-     * @param function the function descriptor.\n-     * @return the downcall method handle.\n-     *\/\n-    MethodHandle downcallHandle(Addressable symbol, MethodType type, FunctionDescriptor function);\n-\n-    \/**\n-     * Allocates a native stub segment which contains executable code to upcall into a given method handle.\n-     * As such, the base address of the returned stub segment can be passed to other foreign functions\n-     * (as a function pointer). The returned segment is <em>not<\/em> thread-confined, and it only features\n-     * the {@link MemorySegment#CLOSE} access mode. When the returned segment is closed,\n-     * the corresponding native stub will be deallocated.\n-     *\n-     * @param target the target method handle.\n-     * @param function the function descriptor.\n-     * @return the native stub segment.\n-     *\/\n-    MemorySegment upcallStub(MethodHandle target, FunctionDescriptor function);\n-}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ForeignLinker.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -41,1 +41,1 @@\n- * {@link ForeignLinker#downcallHandle(Addressable, MethodType, FunctionDescriptor)}) also maintain a strong reference\n+ * {@link CLinker#downcallHandle(Addressable, MethodType, FunctionDescriptor)}) also maintain a strong reference\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    final static ForeignLinker abi = CLinker.getSystemLinker();\n+    final static CLinker abi = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -70,1 +69,1 @@\n-    static ForeignLinker abi = CLinker.getSystemLinker();\n+    static CLinker abi = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -50,1 +49,1 @@\n-    private static final ForeignLinker ABI = CLinker.getSystemLinker();\n+    private static final CLinker ABI = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -54,1 +53,1 @@\n-    static final ForeignLinker abi = CLinker.getSystemLinker();\n+    static final CLinker abi = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -83,1 +82,1 @@\n-    static ForeignLinker abi = CLinker.getSystemLinker();\n+    static CLinker abi = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -47,1 +46,1 @@\n-    static final ForeignLinker abi = CLinker.getSystemLinker();\n+    static final CLinker abi = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStubs.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -63,1 +62,1 @@\n-    static final ForeignLinker abi = CLinker.getSystemLinker();\n+    static final CLinker abi = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -68,1 +67,1 @@\n-    static final ForeignLinker linker = CLinker.getSystemLinker();\n+    static final CLinker linker = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    private static final ForeignLinker abi = CLinker.getSystemLinker();\n+    private static final CLinker abi = CLinker.getInstance();\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -58,1 +57,1 @@\n-    static final ForeignLinker abi = CLinker.getSystemLinker();\n+    static final CLinker abi = CLinker.getInstance();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/CallOverhead.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -55,1 +54,1 @@\n-    static final ForeignLinker abi = CLinker.getSystemLinker();\n+    static final CLinker abi = CLinker.getInstance();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -55,1 +54,1 @@\n-    static final ForeignLinker linker = CLinker.getSystemLinker();\n+    static final CLinker linker = CLinker.getInstance();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.foreign.ForeignLinker;\n@@ -54,1 +53,1 @@\n-            ForeignLinker abi = CLinker.getSystemLinker();\n+            CLinker abi = CLinker.getInstance();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}