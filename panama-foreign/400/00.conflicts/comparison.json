{"files":[{"patch":"@@ -29,0 +29,1 @@\n+<<<<<<< HEAD\n@@ -32,0 +33,3 @@\n+=======\n+import jdk.incubator.foreign.*;\n+>>>>>>> 3dd700d9447f4f44eb0e41220e35370d7f65bd57\n@@ -34,0 +38,1 @@\n+import sun.invoke.util.Wrapper;\n@@ -81,0 +86,10 @@\n+    public static MemoryAddress alignUp(MemoryAddress ma, long alignment) {\n+        long offset = ma.toRawLongValue();\n+        return ma.addOffset(alignUp(offset, alignment) - offset);\n+    }\n+\n+    public static MemorySegment alignUp(MemorySegment ms, long alignment) {\n+        long offset = ms.address().toRawLongValue();\n+        return ms.asSlice(alignUp(offset, alignment) - offset);\n+    }\n+\n@@ -121,0 +136,24 @@\n+\n+    public static void checkPrimitiveCarrierCompat(Class<?> carrier, MemoryLayout layout) {\n+        checkLayoutType(layout, ValueLayout.class);\n+        if (!isValidPrimitiveCarrier(carrier))\n+            throw new IllegalArgumentException(\"Unsupported carrier: \" + carrier);\n+        if (Wrapper.forPrimitiveType(carrier).bitWidth() != layout.bitSize())\n+            throw new IllegalArgumentException(\"Carrier size mismatch: \" + carrier + \" != \" + layout);\n+    }\n+\n+    public static boolean isValidPrimitiveCarrier(Class<?> carrier) {\n+        return carrier == byte.class\n+            || carrier == short.class\n+            || carrier == char.class\n+            || carrier == int.class\n+            || carrier == long.class\n+            || carrier == float.class\n+            || carrier == double.class;\n+    }\n+\n+    public static void checkLayoutType(MemoryLayout layout, Class<? extends MemoryLayout> layoutType) {\n+        if (!layoutType.isInstance(layout))\n+            throw new IllegalArgumentException(\"Expected a \" + layoutType.getSimpleName() + \": \" + layout);\n+    }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"}]}