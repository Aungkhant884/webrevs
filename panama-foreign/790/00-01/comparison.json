{"files":[{"patch":"@@ -50,2 +50,2 @@\n-    @Test(dataProvider = \"basicLayoutsAndAddress\")\n-    public void testNotEquals(MemoryLayout layout) {\n+    @Test(dataProvider = \"basicLayoutsAndAddressAndGroups\")\n+    public void testEqualities(MemoryLayout layout) {\n@@ -74,0 +74,9 @@\n+\n+        \/\/ Identity\n+        assertTrue(layout.equals(layout));\n+\n+        assertFalse(layout.equals(MemoryLayout.sequenceLayout(13, JAVA_LONG)));\n+\n+        MemoryLayout other = layout.withBitAlignment(128).withBitAlignment(layout.bitAlignment());\n+        assertTrue(layout.equals(other));\n+\n@@ -115,19 +124,1 @@\n-    @Test(dataProvider = \"groupLayouts\")\n-    public void testEquals(MemoryLayout layout) {\n-        assertFalse(layout.equals(null));\n-        assertFalse(layout.equals(\"A\"));\n-        assertFalse(layout.equals(JAVA_INT));\n-        assertFalse(layout.equals(layout.withBitAlignment(layout.bitAlignment() * 2)));\n-        assertFalse(layout.equals(layout.withName(\"OtherName\")));\n-        assertTrue(layout.equals(layout));\n-        assertFalse(layout.equals(MemoryLayout.sequenceLayout(13, JAVA_LONG)));\n-        MemoryLayout other = MemoryLayout.structLayout(JAVA_INT, JAVA_LONG);\n-        if (layout instanceof StructLayout sl) {\n-            \/\/ Test something that equals but is not an identity\n-            assertTrue(layout.equals(other));\n-        } else {\n-            assertFalse(layout.equals(other));\n-        }\n-    }\n-\n-    @Test(dataProvider = \"groupLayouts\", expectedExceptions = IllegalArgumentException.class)\n+    @Test(dataProvider = \"basicLayoutsAndAddressAndGroups\", expectedExceptions = IllegalArgumentException.class)\n@@ -138,1 +129,1 @@\n-    @Test(dataProvider = \"groupLayouts\", expectedExceptions = IllegalArgumentException.class)\n+    @Test(dataProvider = \"basicLayoutsAndAddressAndGroups\", expectedExceptions = IllegalArgumentException.class)\n@@ -143,5 +134,0 @@\n-    @Test(dataProvider = \"basicLayouts\", expectedExceptions = IllegalArgumentException.class)\n-    public void testBasicIllegalAlignment(MemoryLayout layout) {\n-        layout.withBitAlignment(3);\n-    }\n-\n@@ -151,1 +137,1 @@\n-        testEquals(paddingLayout);\n+        testEqualities(paddingLayout);\n@@ -374,0 +360,7 @@\n+    @DataProvider(name = \"basicLayoutsAndAddressAndGroups\")\n+    public Object[][] basicLayoutsAndAddressAndGroups() {\n+        return Stream.concat(Stream.concat(Stream.of(basicLayouts), Stream.of(ADDRESS)), groupLayoutStream())\n+                .map(l -> new Object[] { l })\n+                .toArray(Object[][]::new);\n+    }\n+\n@@ -399,6 +392,1 @@\n-        return Stream.of(\n-                        MemoryLayout.sequenceLayout(10, JAVA_INT),\n-                        MemoryLayout.sequenceLayout(JAVA_INT),\n-                        MemoryLayout.structLayout(JAVA_INT, JAVA_LONG),\n-                        MemoryLayout.unionLayout(JAVA_LONG, JAVA_DOUBLE)\n-                )\n+        return groupLayoutStream()\n@@ -409,0 +397,9 @@\n+    static Stream<MemoryLayout> groupLayoutStream() {\n+        return Stream.of(\n+                MemoryLayout.sequenceLayout(10, JAVA_INT),\n+                MemoryLayout.sequenceLayout(JAVA_INT),\n+                MemoryLayout.structLayout(JAVA_INT, JAVA_LONG),\n+                MemoryLayout.unionLayout(JAVA_LONG, JAVA_DOUBLE)\n+        );\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":31,"deletions":34,"binary":false,"changes":65,"status":"modified"}]}