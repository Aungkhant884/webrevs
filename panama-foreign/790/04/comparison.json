{"files":[{"patch":"@@ -91,9 +91,5 @@\n-        if (this == other) {\n-            return true;\n-        }\n-        if (!super.equals(other)) {\n-            return false;\n-        }\n-        return other instanceof AbstractGroupLayout<?> otherGroup &&\n-                kind == otherGroup.kind &&\n-                elements.equals(otherGroup.elements);\n+        return this == other ||\n+                other instanceof AbstractGroupLayout<?> otherGroup &&\n+                        super.equals(other) &&\n+                        kind == otherGroup.kind &&\n+                        elements.equals(otherGroup.elements);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -113,4 +113,0 @@\n-        if (this == other) {\n-            return true;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,10 +49,4 @@\n-        if (this == other) {\n-            return true;\n-        }\n-        if (!super.equals(other)) {\n-            return false;\n-        }\n-        if (!(other instanceof PaddingLayoutImpl p)) {\n-            return false;\n-        }\n-        return bitSize() == p.bitSize();\n+        return this == other ||\n+                other instanceof PaddingLayoutImpl otherPadding &&\n+                super.equals(other) &&\n+                bitSize() == otherPadding.bitSize();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/PaddingLayoutImpl.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -186,9 +186,5 @@\n-        if (this == other) {\n-            return true;\n-        }\n-        if (!super.equals(other)) {\n-            return false;\n-        }\n-        return other instanceof SequenceLayoutImpl otherSeq &&\n-                elemCount == otherSeq.elemCount &&\n-                elementLayout.equals(otherSeq.elementLayout);\n+        return this == other ||\n+                other instanceof SequenceLayoutImpl otherSeq &&\n+                        super.equals(other) &&\n+                        elemCount == otherSeq.elemCount &&\n+                        elementLayout.equals(otherSeq.elementLayout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/SequenceLayoutImpl.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -113,3 +113,3 @@\n-                    super.equals(other) &&\n-                    carrier.equals(otherValue.carrier) &&\n-                    order.equals(otherValue.order);\n+                            super.equals(other) &&\n+                            carrier.equals(otherValue.carrier) &&\n+                            order.equals(otherValue.order);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-    @Test(dataProvider = \"basicLayoutsAndAddress\")\n-    public void testNotEquals(MemoryLayout layout) {\n+    @Test(dataProvider = \"basicLayoutsAndAddressAndGroups\")\n+    public void testEqualities(MemoryLayout layout) {\n@@ -61,0 +61,4 @@\n+        \/\/ Use another alignment\n+        MemoryLayout differentAlignment = layout.withBitAlignment(layout.bitAlignment() * 2);\n+        assertFalse(layout.equals(differentAlignment));\n+\n@@ -70,0 +74,9 @@\n+\n+        \/\/ Identity\n+        assertTrue(layout.equals(layout));\n+\n+        assertFalse(layout.equals(MemoryLayout.sequenceLayout(13, JAVA_LONG)));\n+\n+        MemoryLayout other = layout.withBitAlignment(128).withBitAlignment(layout.bitAlignment());\n+        assertTrue(layout.equals(other));\n+\n@@ -75,0 +88,2 @@\n+        var equalButNotSame = ADDRESS.withTargetLayout(JAVA_INT).withTargetLayout(JAVA_CHAR);\n+        assertTrue(differentTargetLayout.equals(equalButNotSame));\n@@ -103,0 +118,24 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testReshape() {\n+        SequenceLayout layout = MemoryLayout.sequenceLayout(10, JAVA_INT);\n+        layout.reshape();\n+    }\n+\n+    @Test(dataProvider = \"basicLayoutsAndAddressAndGroups\", expectedExceptions = IllegalArgumentException.class)\n+    public void testGroupIllegalAlignmentNotPowerOfTwo(MemoryLayout layout) {\n+        layout.withBitAlignment(3);\n+    }\n+\n+    @Test(dataProvider = \"basicLayoutsAndAddressAndGroups\", expectedExceptions = IllegalArgumentException.class)\n+    public void testGroupIllegalAlignmentNotGreaterOrEqualTo8(MemoryLayout layout) {\n+        layout.withBitAlignment(4);\n+    }\n+\n+    @Test\n+    public void testEqualsPadding() {\n+        PaddingLayout paddingLayout = MemoryLayout.paddingLayout(16);\n+        testEqualities(paddingLayout);\n+        PaddingLayout paddingLayout2 = MemoryLayout.paddingLayout(32);\n+        assertNotEquals(paddingLayout, paddingLayout2);\n+    }\n+\n@@ -224,0 +263,8 @@\n+    @Test\n+    public void testStructToString() {\n+        StructLayout padding = MemoryLayout.structLayout(JAVA_INT).withName(\"struct\");\n+        assertEquals(padding.toString(), \"[i32](struct)\");\n+        var toStringUnaligned = padding.withBitAlignment(64).toString();\n+        assertEquals(toStringUnaligned, \"64%[i32](struct)\");\n+    }\n+\n@@ -313,0 +360,7 @@\n+    @DataProvider(name = \"basicLayoutsAndAddressAndGroups\")\n+    public Object[][] basicLayoutsAndAddressAndGroups() {\n+        return Stream.concat(Stream.concat(Stream.of(basicLayouts), Stream.of(ADDRESS)), groupLayoutStream())\n+                .map(l -> new Object[] { l })\n+                .toArray(Object[][]::new);\n+    }\n+\n@@ -336,0 +390,16 @@\n+    @DataProvider(name = \"groupLayouts\")\n+    public Object[][] groupLayouts() {\n+        return groupLayoutStream()\n+                .map(l -> new Object[] { l })\n+                .toArray(Object[][]::new);\n+    }\n+\n+    static Stream<MemoryLayout> groupLayoutStream() {\n+        return Stream.of(\n+                MemoryLayout.sequenceLayout(10, JAVA_INT),\n+                MemoryLayout.sequenceLayout(JAVA_INT),\n+                MemoryLayout.structLayout(JAVA_INT, JAVA_LONG),\n+                MemoryLayout.unionLayout(JAVA_LONG, JAVA_DOUBLE)\n+        );\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":72,"deletions":2,"binary":false,"changes":74,"status":"modified"}]}