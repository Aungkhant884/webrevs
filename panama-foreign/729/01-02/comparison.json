{"files":[{"patch":"@@ -274,1 +274,1 @@\n-        Module target = enableNativeAccessHolder();\n+        Module target = moduleForNativeAccess();\n@@ -280,1 +280,1 @@\n-    \/\/ Returns the Module object holds the enableNativeAccess\n+    \/\/ Returns the Module object that holds the enableNativeAccess\n@@ -282,1 +282,1 @@\n-    private Module enableNativeAccessHolder() {\n+    private Module moduleForNativeAccess() {\n@@ -289,1 +289,1 @@\n-        Module target = enableNativeAccessHolder();\n+        Module target = moduleForNativeAccess();\n@@ -293,1 +293,1 @@\n-            synchronized(target) {\n+            synchronized (target) {\n@@ -296,0 +296,1 @@\n+\n@@ -298,2 +299,2 @@\n-                   \/\/ another thread beat us to it - nothing to do\n-                   return;\n+                    \/\/ another thread beat us to it - nothing to do\n+                    return;\n@@ -301,1 +302,1 @@\n-                   throw new IllegalCallerException(\"Illegal native access from: \" + this);\n+                    throw new IllegalCallerException(\"Illegal native access from: \" + this);\n@@ -325,1 +326,1 @@\n-    static void implAddEnableNativeAccessAllUnnamed() {\n+    static void implAddEnableNativeAccessToAllUnnamed() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-         * already has native access.\n+         * has native access.\n@@ -313,1 +313,2 @@\n-         * @param target the module that's given native access\n+         * @param  target\n+         *         The module to update\n@@ -318,3 +319,3 @@\n-         * and the command line option {@code --enable-native-access} is specified, but does not\n-         * mention the module name {@code M}, or {@code ALL-UNNAMED} in case {@code M} is an\n-         * unnamed module.\n+         *         and the command line option {@code --enable-native-access} is specified, but\n+         *         does not mention the module name {@code M}, or {@code ALL-UNNAMED} in case\n+         *         {@code M} is an unnamed module.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ModuleLayer.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2434,2 +2434,2 @@\n-            public void addEnableNativeAccessAllUnnamed() {\n-                Module.implAddEnableNativeAccessAllUnnamed();\n+            public void addEnableNativeAccessToAllUnnamed() {\n+                Module.implAddEnableNativeAccessToAllUnnamed();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-    void addEnableNativeAccessAllUnnamed();\n+    void addEnableNativeAccessToAllUnnamed();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -792,1 +792,1 @@\n-                JLA.addEnableNativeAccessAllUnnamed();\n+                JLA.addEnableNativeAccessToAllUnnamed();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}