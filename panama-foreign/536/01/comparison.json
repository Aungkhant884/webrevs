{"files":[{"patch":"@@ -33,0 +33,2 @@\n+    public static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Optional;\n@@ -52,0 +53,1 @@\n+import org.testng.SkipException;\n@@ -157,1 +159,32 @@\n-        final static MethodHandle strcat = abi.downcallHandle(CLinker.systemLookup().lookup(\"strcat\").get(),\n+        final static SymbolLookup LOOKUP;\n+\n+        private static final int F_PRINTF = 0;\n+        private static final int F_VPRINTF = 1;\n+        private static final int F_GMTIME = 2;\n+\n+        static {\n+            System.loadLibrary(\"StdLib\");\n+            SymbolLookup stdLibLookup = SymbolLookup.loaderLookup();\n+            MethodHandle MH_get_ptr = abi.downcallHandle(stdLibLookup.lookup(\"get_ptr\").get(),\n+                MethodType.methodType(MemoryAddress.class, int.class),\n+                FunctionDescriptor.of(C_POINTER, C_INT));\n+\n+            SymbolLookup fallbackLookup = name -> {\n+                MemoryAddress ma;\n+                try {\n+                    ma = (MemoryAddress) MH_get_ptr.invokeExact((int) switch (name) {\n+                        case \"printf\" -> F_PRINTF;\n+                        case \"vprintf\" -> F_VPRINTF;\n+                        case \"gmtime\" -> F_GMTIME;\n+                        default -> -1;\n+                    });\n+                } catch (Throwable throwable) {\n+                    throw new RuntimeException(throwable);\n+                }\n+                return ma == MemoryAddress.NULL ? Optional.empty() : Optional.of(ma);\n+            };\n+\n+            LOOKUP = name -> CLinker.systemLookup().lookup(name).or(() -> fallbackLookup.lookup(name));\n+        }\n+\n+        final static MethodHandle strcat = abi.downcallHandle(LOOKUP.lookup(\"strcat\").get(),\n@@ -161,1 +194,1 @@\n-        final static MethodHandle strcmp = abi.downcallHandle(CLinker.systemLookup().lookup(\"strcmp\").get(),\n+        final static MethodHandle strcmp = abi.downcallHandle(LOOKUP.lookup(\"strcmp\").get(),\n@@ -165,1 +198,1 @@\n-        final static MethodHandle puts = abi.downcallHandle(CLinker.systemLookup().lookup(\"puts\").get(),\n+        final static MethodHandle puts = abi.downcallHandle(LOOKUP.lookup(\"puts\").get(),\n@@ -169,1 +202,1 @@\n-        final static MethodHandle strlen = abi.downcallHandle(CLinker.systemLookup().lookup(\"strlen\").get(),\n+        final static MethodHandle strlen = abi.downcallHandle(LOOKUP.lookup(\"strlen\").get(),\n@@ -173,1 +206,1 @@\n-        final static MethodHandle gmtime = abi.downcallHandle(CLinker.systemLookup().lookup(\"gmtime\").get(),\n+        final static MethodHandle gmtime = abi.downcallHandle(LOOKUP.lookup(\"gmtime\").get(),\n@@ -177,1 +210,1 @@\n-        final static MethodHandle qsort = abi.downcallHandle(CLinker.systemLookup().lookup(\"qsort\").get(),\n+        final static MethodHandle qsort = abi.downcallHandle(LOOKUP.lookup(\"qsort\").get(),\n@@ -185,1 +218,1 @@\n-        final static MethodHandle rand = abi.downcallHandle(CLinker.systemLookup().lookup(\"rand\").get(),\n+        final static MethodHandle rand = abi.downcallHandle(LOOKUP.lookup(\"rand\").get(),\n@@ -189,1 +222,1 @@\n-        final static MethodHandle vprintf = abi.downcallHandle(CLinker.systemLookup().lookup(\"vprintf\").get(),\n+        final static MethodHandle vprintf = abi.downcallHandle(LOOKUP.lookup(\"vprintf\").get(),\n@@ -193,1 +226,1 @@\n-        final static MemoryAddress printfAddr = CLinker.systemLookup().lookup(\"printf\").get();\n+        final static MemoryAddress printfAddr = LOOKUP.lookup(\"printf\").get();\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":42,"deletions":9,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#include <stdio.h>\n+#include <time.h>\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+enum Func {\n+  F_PRINTF = 0,\n+  F_VPRINTF = 1,\n+  F_GMTIME = 2\n+};\n+\n+EXPORT void* get_ptr(int func) {\n+    switch(func) {\n+        case F_PRINTF:  return &printf;\n+        case F_VPRINTF: return &vprintf;\n+        case F_GMTIME:  return &gmtime;\n+    }\n+    return NULL;\n+}\n","filename":"test\/jdk\/java\/foreign\/libStdLib.c","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}