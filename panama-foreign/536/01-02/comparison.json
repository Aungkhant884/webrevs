{"files":[{"patch":"@@ -161,4 +161,0 @@\n-        private static final int F_PRINTF = 0;\n-        private static final int F_VPRINTF = 1;\n-        private static final int F_GMTIME = 2;\n-\n@@ -168,18 +164,9 @@\n-            MethodHandle MH_get_ptr = abi.downcallHandle(stdLibLookup.lookup(\"get_ptr\").get(),\n-                MethodType.methodType(MemoryAddress.class, int.class),\n-                FunctionDescriptor.of(C_POINTER, C_INT));\n-\n-            SymbolLookup fallbackLookup = name -> {\n-                MemoryAddress ma;\n-                try {\n-                    ma = (MemoryAddress) MH_get_ptr.invokeExact((int) switch (name) {\n-                        case \"printf\" -> F_PRINTF;\n-                        case \"vprintf\" -> F_VPRINTF;\n-                        case \"gmtime\" -> F_GMTIME;\n-                        default -> -1;\n-                    });\n-                } catch (Throwable throwable) {\n-                    throw new RuntimeException(throwable);\n-                }\n-                return ma == MemoryAddress.NULL ? Optional.empty() : Optional.of(ma);\n-            };\n+            MemorySegment funcs = stdLibLookup.lookup(\"funcs\").get()\n+                    .asSegment(C_POINTER.byteSize() * 3, ResourceScope.newImplicitScope());\n+\n+            SymbolLookup fallbackLookup = name -> switch (name) {\n+                    case \"printf\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 0));\n+                    case \"vprintf\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 1));\n+                    case \"gmtime\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 2));\n+                    default -> Optional.empty();\n+                };\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -34,4 +34,5 @@\n-enum Func {\n-  F_PRINTF = 0,\n-  F_VPRINTF = 1,\n-  F_GMTIME = 2\n+\/\/ Forces generation of inline code on Windows\n+EXPORT void* funcs[] = {\n+    &printf,\n+    &vprintf,\n+    &gmtime\n@@ -39,9 +40,0 @@\n-\n-EXPORT void* get_ptr(int func) {\n-    switch(func) {\n-        case F_PRINTF:  return &printf;\n-        case F_VPRINTF: return &vprintf;\n-        case F_GMTIME:  return &gmtime;\n-    }\n-    return NULL;\n-}\n","filename":"test\/jdk\/java\/foreign\/libStdLib.c","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"}]}