{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Optional;\n@@ -157,1 +158,19 @@\n-        final static MethodHandle strcat = abi.downcallHandle(CLinker.systemLookup().lookup(\"strcat\").get(),\n+        final static SymbolLookup LOOKUP;\n+\n+        static {\n+            System.loadLibrary(\"StdLib\");\n+            SymbolLookup stdLibLookup = SymbolLookup.loaderLookup();\n+            MemorySegment funcs = stdLibLookup.lookup(\"funcs\").get()\n+                    .asSegment(C_POINTER.byteSize() * 3, ResourceScope.newImplicitScope());\n+\n+            SymbolLookup fallbackLookup = name -> switch (name) {\n+                    case \"printf\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 0));\n+                    case \"vprintf\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 1));\n+                    case \"gmtime\" -> Optional.of(MemoryAccess.getAddressAtIndex(funcs, 2));\n+                    default -> Optional.empty();\n+                };\n+\n+            LOOKUP = name -> CLinker.systemLookup().lookup(name).or(() -> fallbackLookup.lookup(name));\n+        }\n+\n+        final static MethodHandle strcat = abi.downcallHandle(LOOKUP.lookup(\"strcat\").get(),\n@@ -161,1 +180,1 @@\n-        final static MethodHandle strcmp = abi.downcallHandle(CLinker.systemLookup().lookup(\"strcmp\").get(),\n+        final static MethodHandle strcmp = abi.downcallHandle(LOOKUP.lookup(\"strcmp\").get(),\n@@ -165,1 +184,1 @@\n-        final static MethodHandle puts = abi.downcallHandle(CLinker.systemLookup().lookup(\"puts\").get(),\n+        final static MethodHandle puts = abi.downcallHandle(LOOKUP.lookup(\"puts\").get(),\n@@ -169,1 +188,1 @@\n-        final static MethodHandle strlen = abi.downcallHandle(CLinker.systemLookup().lookup(\"strlen\").get(),\n+        final static MethodHandle strlen = abi.downcallHandle(LOOKUP.lookup(\"strlen\").get(),\n@@ -173,1 +192,1 @@\n-        final static MethodHandle gmtime = abi.downcallHandle(CLinker.systemLookup().lookup(\"gmtime\").get(),\n+        final static MethodHandle gmtime = abi.downcallHandle(LOOKUP.lookup(\"gmtime\").get(),\n@@ -177,1 +196,1 @@\n-        final static MethodHandle qsort = abi.downcallHandle(CLinker.systemLookup().lookup(\"qsort\").get(),\n+        final static MethodHandle qsort = abi.downcallHandle(LOOKUP.lookup(\"qsort\").get(),\n@@ -185,1 +204,1 @@\n-        final static MethodHandle rand = abi.downcallHandle(CLinker.systemLookup().lookup(\"rand\").get(),\n+        final static MethodHandle rand = abi.downcallHandle(LOOKUP.lookup(\"rand\").get(),\n@@ -189,1 +208,1 @@\n-        final static MethodHandle vprintf = abi.downcallHandle(CLinker.systemLookup().lookup(\"vprintf\").get(),\n+        final static MethodHandle vprintf = abi.downcallHandle(LOOKUP.lookup(\"vprintf\").get(),\n@@ -193,1 +212,1 @@\n-        final static MemoryAddress printfAddr = CLinker.systemLookup().lookup(\"printf\").get();\n+        final static MemoryAddress printfAddr = LOOKUP.lookup(\"printf\").get();\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":28,"deletions":9,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#include <stdio.h>\n+#include <time.h>\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+\/\/ Forces generation of inline code on Windows\n+EXPORT void* funcs[] = {\n+    &printf,\n+    &vprintf,\n+    &gmtime\n+};\n","filename":"test\/jdk\/java\/foreign\/libStdLib.c","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}