{"files":[{"patch":"@@ -33,0 +33,2 @@\n+    public static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,30 +125,0 @@\n-    @Test(dataProvider = \"printfArgs\")\n-    void test_printf(List<PrintfArg> args) throws Throwable {\n-        String formatArgs = args.stream()\n-                .map(a -> a.format)\n-                .collect(Collectors.joining(\",\"));\n-\n-        String formatString = \"hello(\" + formatArgs + \")\\n\";\n-\n-        String expected = String.format(formatString, args.stream()\n-                .map(a -> a.javaValue).toArray());\n-\n-        int found = stdLibHelper.printf(formatString, args);\n-        assertEquals(found, expected.length());\n-    }\n-\n-    @Test(dataProvider = \"printfArgs\")\n-    void test_vprintf(List<PrintfArg> args) throws Throwable {\n-        String formatArgs = args.stream()\n-                .map(a -> a.format)\n-                .collect(Collectors.joining(\",\"));\n-\n-        String formatString = \"hello(\" + formatArgs + \")\\n\";\n-\n-        String expected = String.format(formatString, args.stream()\n-                .map(a -> a.javaValue).toArray());\n-\n-        int found = stdLibHelper.vprintf(formatString, args);\n-        assertEquals(found, expected.length());\n-    }\n-\n@@ -173,1 +143,2 @@\n-        final static MethodHandle gmtime = abi.downcallHandle(CLinker.systemLookup().lookup(\"gmtime\").get(),\n+        final static MethodHandle gmtime = abi.downcallHandle(\n+                CLinker.systemLookup().lookup(NativeTestHelper.IS_WINDOWS ? \"_gmtime64\" : \"gmtime\").get(),\n@@ -189,8 +160,0 @@\n-        final static MethodHandle vprintf = abi.downcallHandle(CLinker.systemLookup().lookup(\"vprintf\").get(),\n-                MethodType.methodType(int.class, MemoryAddress.class, VaList.class),\n-                FunctionDescriptor.of(C_INT, C_POINTER, C_VA_LIST));\n-\n-        final static MemoryAddress printfAddr = CLinker.systemLookup().lookup(\"printf\").get();\n-\n-        final static FunctionDescriptor printfBase = FunctionDescriptor.of(C_INT, C_POINTER);\n-\n@@ -315,28 +278,0 @@\n-\n-        int printf(String format, List<PrintfArg> args) throws Throwable {\n-            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-                MemorySegment formatStr = toCString(format, scope);\n-                return (int)specializedPrintf(args).invokeExact(formatStr.address(),\n-                        args.stream().map(a -> a.nativeValue(scope)).toArray());\n-            }\n-        }\n-\n-        int vprintf(String format, List<PrintfArg> args) throws Throwable {\n-            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-                MemorySegment formatStr = toCString(format, scope);\n-                VaList vaList = VaList.make(b -> args.forEach(a -> a.accept(b, scope)), scope);\n-                return (int)vprintf.invokeExact(formatStr.address(), vaList);\n-            }\n-        }\n-\n-        private MethodHandle specializedPrintf(List<PrintfArg> args) {\n-            \/\/method type\n-            MethodType mt = MethodType.methodType(int.class, MemoryAddress.class);\n-            FunctionDescriptor fd = printfBase;\n-            for (PrintfArg arg : args) {\n-                mt = mt.appendParameterTypes(arg.carrier);\n-                fd = fd.withAppendedArgumentLayouts(arg.layout);\n-            }\n-            MethodHandle mh = abi.downcallHandle(printfAddr, mt, fd);\n-            return mh.asSpreader(1, Object[].class, args.size());\n-        }\n@@ -386,52 +321,0 @@\n-    @DataProvider\n-    public static Object[][] printfArgs() {\n-        ArrayList<List<PrintfArg>> res = new ArrayList<>();\n-        List<List<PrintfArg>> perms = new ArrayList<>(perms(0, PrintfArg.values()));\n-        for (int i = 0 ; i < 100 ; i++) {\n-            Collections.shuffle(perms);\n-            res.addAll(perms);\n-        }\n-        return res.stream()\n-                .map(l -> new Object[] { l })\n-                .toArray(Object[][]::new);\n-    }\n-\n-    enum PrintfArg implements BiConsumer<VaList.Builder, ResourceScope> {\n-\n-        INTEGRAL(int.class, asVarArg(C_INT), \"%d\", scope -> 42, 42, VaList.Builder::vargFromInt),\n-        STRING(MemoryAddress.class, asVarArg(C_POINTER), \"%s\", scope -> toCString(\"str\", scope).address(), \"str\", VaList.Builder::vargFromAddress),\n-        CHAR(byte.class, asVarArg(C_CHAR), \"%c\", scope -> (byte) 'h', 'h', (builder, layout, value) -> builder.vargFromInt(C_INT, (int)value)),\n-        DOUBLE(double.class, asVarArg(C_DOUBLE), \"%.4f\", scope ->1.2345d, 1.2345d, VaList.Builder::vargFromDouble);\n-\n-        final Class<?> carrier;\n-        final ValueLayout layout;\n-        final String format;\n-        final Function<ResourceScope, ?> nativeValueFactory;\n-        final Object javaValue;\n-        @SuppressWarnings(\"rawtypes\")\n-        final VaListBuilderCall builderCall;\n-\n-        <Z> PrintfArg(Class<?> carrier, ValueLayout layout, String format, Function<ResourceScope, Z> nativeValueFactory, Object javaValue, VaListBuilderCall<Z> builderCall) {\n-            this.carrier = carrier;\n-            this.layout = layout;\n-            this.format = format;\n-            this.nativeValueFactory = nativeValueFactory;\n-            this.javaValue = javaValue;\n-            this.builderCall = builderCall;\n-        }\n-\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        public void accept(VaList.Builder builder, ResourceScope scope) {\n-            builderCall.build(builder, layout, nativeValueFactory.apply(scope));\n-        }\n-\n-        interface VaListBuilderCall<V> {\n-            void build(VaList.Builder builder, ValueLayout layout, V value);\n-        }\n-\n-        public Object nativeValue(ResourceScope scope) {\n-            return nativeValueFactory.apply(scope);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":2,"deletions":119,"binary":false,"changes":121,"status":"modified"}]}