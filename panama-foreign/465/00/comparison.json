{"files":[{"patch":"@@ -8,2 +8,1 @@\n-* Index_h$constants$N classes were renamed to be Index_h$constants_N\n-* Index_h$constants_0.libName was manually added to handle platform dependency of\n+* Index_h_1.libName was manually added to handle platform dependency of\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/README","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-        private static final MemorySegment callback = Index_h.clang_visitChildren$visitor.allocate((c, p, d) -> {\n+        private static final MemorySegment callback = Index_h.CXCursorVisitor.allocate((c, p, d) -> {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Cursor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-package jdk.internal.clang.libclang;\n-\/\/ Generated by jextract\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-\/**\n- * Annotation to indicate C types\n- *\/\n-@Target({ ElementType.TYPE_USE })\n-@Retention(RetentionPolicy.RUNTIME)\n-@Documented\n-public @interface C {\n-    \/**\n-     * The C type associated with a given Java type\n-     * @return The C type associated with a given Java type\n-     *\/\n-    String value();\n-}\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/C.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,4151 +0,0 @@\n-\/*\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-\/\/ Generated by jextract\n-\n-package jdk.internal.clang.libclang;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import jdk.incubator.foreign.*;\n-import jdk.incubator.foreign.MemoryLayout.PathElement;\n-import static jdk.incubator.foreign.CLinker.*;\n-\n-class Index_h$constants_0 {\n-    Index_h$constants_0() {}\n-\n-    \/\/ Manual change to handle platform specific library name difference\n-    private static String libName() {\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            return \"libclang\";\n-        }\n-        return \"clang\";\n-    }\n-\n-    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {\n-        libName()\n-    });\n-\n-    static final int CINDEX_VERSION_MAJOR() { return (int)0L; }\n-\n-    static final int CINDEX_VERSION_MINOR() { return (int)59L; }\n-\n-    static final int CXError_Success() { return (int)0L; }\n-\n-    static final int CXError_Failure() { return (int)1L; }\n-\n-    static final int CXError_Crashed() { return (int)2L; }\n-\n-    static final int CXError_InvalidArguments() { return (int)3L; }\n-\n-    static final int CXError_ASTReadError() { return (int)4L; }\n-\n-    static final MemoryLayout CXString$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXString$struct$LAYOUT() { return CXString$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXString$data$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXString$data$LAYOUT() { return CXString$data$LAYOUT_; }\n-\n-    static final VarHandle CXString$data$VH_ = MemoryHandles.asAddressVarHandle(CXString$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"data\")));\n-    static final java.lang.invoke.VarHandle CXString$data$VH() { return CXString$data$VH_; }\n-\n-    static final MemoryLayout CXString$private_flags$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXString$private_flags$LAYOUT() { return CXString$private_flags$LAYOUT_; }\n-\n-    static final VarHandle CXString$private_flags$VH_ = CXString$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"private_flags\"));\n-    static final java.lang.invoke.VarHandle CXString$private_flags$VH() { return CXString$private_flags$VH_; }\n-\n-    static final MemoryLayout CXStringSet$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"Strings\"),\n-        C_INT.withName(\"Count\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXStringSet$struct$LAYOUT() { return CXStringSet$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXStringSet$Strings$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXStringSet$Strings$LAYOUT() { return CXStringSet$Strings$LAYOUT_; }\n-\n-    static final VarHandle CXStringSet$Strings$VH_ = MemoryHandles.asAddressVarHandle(CXStringSet$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Strings\")));\n-    static final java.lang.invoke.VarHandle CXStringSet$Strings$VH() { return CXStringSet$Strings$VH_; }\n-\n-    static final MemoryLayout CXStringSet$Count$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXStringSet$Count$LAYOUT() { return CXStringSet$Count$LAYOUT_; }\n-\n-    static final VarHandle CXStringSet$Count$VH_ = CXStringSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Count\"));\n-    static final java.lang.invoke.VarHandle CXStringSet$Count$VH() { return CXStringSet$Count$VH_; }\n-\n-    static final FunctionDescriptor clang_getCString$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCString$FUNC() { return clang_getCString$FUNC_; }\n-\n-    static final MethodHandle clang_getCString$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCString\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getCString$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCString$MH() { return clang_getCString$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeString$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeString$FUNC() { return clang_disposeString$FUNC_; }\n-\n-    static final MethodHandle clang_disposeString$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeString\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n-        clang_disposeString$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeString$MH() { return clang_disposeString$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeStringSet$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeStringSet$FUNC() { return clang_disposeStringSet$FUNC_; }\n-\n-    static final MethodHandle clang_disposeStringSet$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeStringSet\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeStringSet$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeStringSet$MH() { return clang_disposeStringSet$MH_; }\n-\n-    static final MemoryLayout CXUnsavedFile$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"Filename\"),\n-        C_POINTER.withName(\"Contents\"),\n-        C_LONG_LONG.withName(\"Length\")\n-    ).withName(\"CXUnsavedFile\");\n-    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$struct$LAYOUT() { return CXUnsavedFile$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXUnsavedFile$Filename$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$Filename$LAYOUT() { return CXUnsavedFile$Filename$LAYOUT_; }\n-\n-    static final VarHandle CXUnsavedFile$Filename$VH_ = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Filename\")));\n-    static final java.lang.invoke.VarHandle CXUnsavedFile$Filename$VH() { return CXUnsavedFile$Filename$VH_; }\n-\n-    static final MemoryLayout CXUnsavedFile$Contents$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$Contents$LAYOUT() { return CXUnsavedFile$Contents$LAYOUT_; }\n-\n-    static final VarHandle CXUnsavedFile$Contents$VH_ = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Contents\")));\n-    static final java.lang.invoke.VarHandle CXUnsavedFile$Contents$VH() { return CXUnsavedFile$Contents$VH_; }\n-\n-    static final MemoryLayout CXUnsavedFile$Length$LAYOUT_ = C_LONG_LONG;\n-    static final jdk.incubator.foreign.MemoryLayout CXUnsavedFile$Length$LAYOUT() { return CXUnsavedFile$Length$LAYOUT_; }\n-\n-    static final VarHandle CXUnsavedFile$Length$VH_ = CXUnsavedFile$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Length\"));\n-    static final java.lang.invoke.VarHandle CXUnsavedFile$Length$VH() { return CXUnsavedFile$Length$VH_; }\n-\n-    static final int CXAvailability_Available() { return (int)0L; }\n-\n-    static final int CXAvailability_Deprecated() { return (int)1L; }\n-\n-    static final int CXAvailability_NotAvailable() { return (int)2L; }\n-\n-    static final int CXAvailability_NotAccessible() { return (int)3L; }\n-\n-    static final MemoryLayout CXVersion$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"Major\"),\n-        C_INT.withName(\"Minor\"),\n-        C_INT.withName(\"Subminor\")\n-    ).withName(\"CXVersion\");\n-    static final jdk.incubator.foreign.MemoryLayout CXVersion$struct$LAYOUT() { return CXVersion$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXVersion$Major$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXVersion$Major$LAYOUT() { return CXVersion$Major$LAYOUT_; }\n-\n-    static final VarHandle CXVersion$Major$VH_ = CXVersion$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Major\"));\n-    static final java.lang.invoke.VarHandle CXVersion$Major$VH() { return CXVersion$Major$VH_; }\n-\n-    static final MemoryLayout CXVersion$Minor$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXVersion$Minor$LAYOUT() { return CXVersion$Minor$LAYOUT_; }\n-\n-    static final VarHandle CXVersion$Minor$VH_ = CXVersion$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Minor\"));\n-    static final java.lang.invoke.VarHandle CXVersion$Minor$VH() { return CXVersion$Minor$VH_; }\n-\n-    static final MemoryLayout CXVersion$Subminor$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXVersion$Subminor$LAYOUT() { return CXVersion$Subminor$LAYOUT_; }\n-\n-    static final VarHandle CXVersion$Subminor$VH_ = CXVersion$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Subminor\"));\n-    static final java.lang.invoke.VarHandle CXVersion$Subminor$VH() { return CXVersion$Subminor$VH_; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_None() { return (int)0L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_DynamicNone() { return (int)1L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_Dynamic() { return (int)2L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_MSAny() { return (int)3L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_BasicNoexcept() { return (int)4L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_ComputedNoexcept() { return (int)5L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_Unevaluated() { return (int)6L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_Uninstantiated() { return (int)7L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_Unparsed() { return (int)8L; }\n-\n-    static final int CXCursor_ExceptionSpecificationKind_NoThrow() { return (int)9L; }\n-\n-    static final FunctionDescriptor clang_createIndex$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_createIndex$FUNC() { return clang_createIndex$FUNC_; }\n-\n-    static final MethodHandle clang_createIndex$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_createIndex\",\n-        \"(II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_createIndex$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_createIndex$MH() { return clang_createIndex$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeIndex$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeIndex$FUNC() { return clang_disposeIndex$FUNC_; }\n-\n-    static final MethodHandle clang_disposeIndex$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeIndex\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeIndex$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeIndex$MH() { return clang_disposeIndex$MH_; }\n-\n-    static final int CXGlobalOpt_None() { return (int)0L; }\n-\n-    static final int CXGlobalOpt_ThreadBackgroundPriorityForIndexing() { return (int)1L; }\n-\n-    static final int CXGlobalOpt_ThreadBackgroundPriorityForEditing() { return (int)2L; }\n-\n-    static final int CXGlobalOpt_ThreadBackgroundPriorityForAll() { return (int)3L; }\n-\n-    static final FunctionDescriptor clang_CXIndex_setGlobalOptions$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXIndex_setGlobalOptions$FUNC() { return clang_CXIndex_setGlobalOptions$FUNC_; }\n-\n-    static final MethodHandle clang_CXIndex_setGlobalOptions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXIndex_setGlobalOptions\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-        clang_CXIndex_setGlobalOptions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXIndex_setGlobalOptions$MH() { return clang_CXIndex_setGlobalOptions$MH_; }\n-\n-    static final FunctionDescriptor clang_CXIndex_getGlobalOptions$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXIndex_getGlobalOptions$FUNC() { return clang_CXIndex_getGlobalOptions$FUNC_; }\n-\n-    static final MethodHandle clang_CXIndex_getGlobalOptions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXIndex_getGlobalOptions\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_CXIndex_getGlobalOptions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXIndex_getGlobalOptions$MH() { return clang_CXIndex_getGlobalOptions$MH_; }\n-\n-    static final FunctionDescriptor clang_CXIndex_setInvocationEmissionPathOption$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXIndex_setInvocationEmissionPathOption$FUNC() { return clang_CXIndex_setInvocationEmissionPathOption$FUNC_; }\n-\n-    static final MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXIndex_setInvocationEmissionPathOption\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_CXIndex_setInvocationEmissionPathOption$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH() { return clang_CXIndex_setInvocationEmissionPathOption$MH_; }\n-\n-    static final FunctionDescriptor clang_getFileName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileName$FUNC() { return clang_getFileName$FUNC_; }\n-\n-    static final MethodHandle clang_getFileName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFileName\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getFileName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFileName$MH() { return clang_getFileName$MH_; }\n-\n-    static final FunctionDescriptor clang_getFileTime$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileTime$FUNC() { return clang_getFileTime$FUNC_; }\n-\n-    static final MethodHandle clang_getFileTime$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFileTime\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-        clang_getFileTime$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFileTime$MH() { return clang_getFileTime$MH_; }\n-\n-    static final MemoryLayout CXFileUniqueID$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(3, C_LONG_LONG).withName(\"data\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXFileUniqueID$struct$LAYOUT() { return CXFileUniqueID$struct$LAYOUT_; }\n-\n-    static final FunctionDescriptor clang_getFileUniqueID$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileUniqueID$FUNC() { return clang_getFileUniqueID$FUNC_; }\n-\n-    static final MethodHandle clang_getFileUniqueID$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFileUniqueID\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getFileUniqueID$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFileUniqueID$MH() { return clang_getFileUniqueID$MH_; }\n-\n-    static final FunctionDescriptor clang_isFileMultipleIncludeGuarded$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isFileMultipleIncludeGuarded$FUNC() { return clang_isFileMultipleIncludeGuarded$FUNC_; }\n-\n-    static final MethodHandle clang_isFileMultipleIncludeGuarded$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isFileMultipleIncludeGuarded\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_isFileMultipleIncludeGuarded$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isFileMultipleIncludeGuarded$MH() { return clang_isFileMultipleIncludeGuarded$MH_; }\n-\n-    static final FunctionDescriptor clang_getFile$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFile$FUNC() { return clang_getFile$FUNC_; }\n-\n-    static final MethodHandle clang_getFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFile$MH() { return clang_getFile$MH_; }\n-\n-    static final FunctionDescriptor clang_getFileContents$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileContents$FUNC() { return clang_getFileContents$FUNC_; }\n-\n-    static final MethodHandle clang_getFileContents$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFileContents\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getFileContents$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFileContents$MH() { return clang_getFileContents$MH_; }\n-\n-    static final FunctionDescriptor clang_File_isEqual$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_File_isEqual$FUNC() { return clang_File_isEqual$FUNC_; }\n-\n-    static final MethodHandle clang_File_isEqual$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_File_isEqual\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_File_isEqual$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_File_isEqual$MH() { return clang_File_isEqual$MH_; }\n-\n-    static final FunctionDescriptor clang_File_tryGetRealPathName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_File_tryGetRealPathName$FUNC() { return clang_File_tryGetRealPathName$FUNC_; }\n-\n-    static final MethodHandle clang_File_tryGetRealPathName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_File_tryGetRealPathName\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_File_tryGetRealPathName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_File_tryGetRealPathName$MH() { return clang_File_tryGetRealPathName$MH_; }\n-\n-    static final MemoryLayout CXSourceLocation$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceLocation$struct$LAYOUT() { return CXSourceLocation$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXSourceLocation$int_data$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceLocation$int_data$LAYOUT() { return CXSourceLocation$int_data$LAYOUT_; }\n-\n-    static final VarHandle CXSourceLocation$int_data$VH_ = CXSourceLocation$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"int_data\"));\n-    static final java.lang.invoke.VarHandle CXSourceLocation$int_data$VH() { return CXSourceLocation$int_data$VH_; }\n-\n-    static final MemoryLayout CXSourceRange$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceRange$struct$LAYOUT() { return CXSourceRange$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXSourceRange$begin_int_data$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceRange$begin_int_data$LAYOUT() { return CXSourceRange$begin_int_data$LAYOUT_; }\n-\n-    static final VarHandle CXSourceRange$begin_int_data$VH_ = CXSourceRange$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"begin_int_data\"));\n-    static final java.lang.invoke.VarHandle CXSourceRange$begin_int_data$VH() { return CXSourceRange$begin_int_data$VH_; }\n-\n-    static final MemoryLayout CXSourceRange$end_int_data$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceRange$end_int_data$LAYOUT() { return CXSourceRange$end_int_data$LAYOUT_; }\n-\n-    static final VarHandle CXSourceRange$end_int_data$VH_ = CXSourceRange$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"end_int_data\"));\n-    static final java.lang.invoke.VarHandle CXSourceRange$end_int_data$VH() { return CXSourceRange$end_int_data$VH_; }\n-\n-    static final FunctionDescriptor clang_getNullLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ));\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNullLocation$FUNC() { return clang_getNullLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getNullLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNullLocation\",\n-        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getNullLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNullLocation$MH() { return clang_getNullLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_equalLocations$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_equalLocations$FUNC() { return clang_equalLocations$FUNC_; }\n-\n-    static final MethodHandle clang_equalLocations$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_equalLocations\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_equalLocations$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_equalLocations$MH() { return clang_equalLocations$MH_; }\n-\n-    static final FunctionDescriptor clang_getLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getLocation$FUNC() { return clang_getLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getLocation$MH() { return clang_getLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getLocationForOffset$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getLocationForOffset$FUNC() { return clang_getLocationForOffset$FUNC_; }\n-\n-    static final MethodHandle clang_getLocationForOffset$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getLocationForOffset\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getLocationForOffset$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getLocationForOffset$MH() { return clang_getLocationForOffset$MH_; }\n-\n-    static final FunctionDescriptor clang_Location_isInSystemHeader$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Location_isInSystemHeader$FUNC() { return clang_Location_isInSystemHeader$FUNC_; }\n-\n-    static final MethodHandle clang_Location_isInSystemHeader$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Location_isInSystemHeader\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Location_isInSystemHeader$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Location_isInSystemHeader$MH() { return clang_Location_isInSystemHeader$MH_; }\n-\n-    static final FunctionDescriptor clang_Location_isFromMainFile$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Location_isFromMainFile$FUNC() { return clang_Location_isFromMainFile$FUNC_; }\n-\n-    static final MethodHandle clang_Location_isFromMainFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Location_isFromMainFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Location_isFromMainFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Location_isFromMainFile$MH() { return clang_Location_isFromMainFile$MH_; }\n-\n-    static final FunctionDescriptor clang_getNullRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ));\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNullRange$FUNC() { return clang_getNullRange$FUNC_; }\n-\n-    static final MethodHandle clang_getNullRange$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNullRange\",\n-        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getNullRange$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNullRange$MH() { return clang_getNullRange$MH_; }\n-\n-    static final FunctionDescriptor clang_getRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getRange$FUNC() { return clang_getRange$FUNC_; }\n-\n-    static final MethodHandle clang_getRange$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getRange\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getRange$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getRange$MH() { return clang_getRange$MH_; }\n-\n-    static final FunctionDescriptor clang_equalRanges$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_equalRanges$FUNC() { return clang_equalRanges$FUNC_; }\n-\n-    static final MethodHandle clang_equalRanges$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_equalRanges\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_equalRanges$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_equalRanges$MH() { return clang_equalRanges$MH_; }\n-\n-    static final FunctionDescriptor clang_Range_isNull$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Range_isNull$FUNC() { return clang_Range_isNull$FUNC_; }\n-\n-    static final MethodHandle clang_Range_isNull$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Range_isNull\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Range_isNull$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Range_isNull$MH() { return clang_Range_isNull$MH_; }\n-\n-    static final FunctionDescriptor clang_getExpansionLocation$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getExpansionLocation$FUNC() { return clang_getExpansionLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getExpansionLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getExpansionLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getExpansionLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getExpansionLocation$MH() { return clang_getExpansionLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getPresumedLocation$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getPresumedLocation$FUNC() { return clang_getPresumedLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getPresumedLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getPresumedLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getPresumedLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getPresumedLocation$MH() { return clang_getPresumedLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getInstantiationLocation$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getInstantiationLocation$FUNC() { return clang_getInstantiationLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getInstantiationLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getInstantiationLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getInstantiationLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getInstantiationLocation$MH() { return clang_getInstantiationLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getSpellingLocation$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getSpellingLocation$FUNC() { return clang_getSpellingLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getSpellingLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getSpellingLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getSpellingLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getSpellingLocation$MH() { return clang_getSpellingLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getFileLocation$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFileLocation$FUNC() { return clang_getFileLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getFileLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFileLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getFileLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFileLocation$MH() { return clang_getFileLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getRangeStart$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getRangeStart$FUNC() { return clang_getRangeStart$FUNC_; }\n-\n-    static final MethodHandle clang_getRangeStart$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getRangeStart\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getRangeStart$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getRangeStart$MH() { return clang_getRangeStart$MH_; }\n-\n-    static final FunctionDescriptor clang_getRangeEnd$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getRangeEnd$FUNC() { return clang_getRangeEnd$FUNC_; }\n-\n-    static final MethodHandle clang_getRangeEnd$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getRangeEnd\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getRangeEnd$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getRangeEnd$MH() { return clang_getRangeEnd$MH_; }\n-\n-    static final MemoryLayout CXSourceRangeList$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"count\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_POINTER.withName(\"ranges\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceRangeList$struct$LAYOUT() { return CXSourceRangeList$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXSourceRangeList$count$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceRangeList$count$LAYOUT() { return CXSourceRangeList$count$LAYOUT_; }\n-\n-    static final VarHandle CXSourceRangeList$count$VH_ = CXSourceRangeList$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"count\"));\n-    static final java.lang.invoke.VarHandle CXSourceRangeList$count$VH() { return CXSourceRangeList$count$VH_; }\n-\n-    static final MemoryLayout CXSourceRangeList$ranges$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXSourceRangeList$ranges$LAYOUT() { return CXSourceRangeList$ranges$LAYOUT_; }\n-\n-    static final VarHandle CXSourceRangeList$ranges$VH_ = MemoryHandles.asAddressVarHandle(CXSourceRangeList$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ranges\")));\n-    static final java.lang.invoke.VarHandle CXSourceRangeList$ranges$VH() { return CXSourceRangeList$ranges$VH_; }\n-\n-    static final FunctionDescriptor clang_getSkippedRanges$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getSkippedRanges$FUNC() { return clang_getSkippedRanges$FUNC_; }\n-\n-    static final MethodHandle clang_getSkippedRanges$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getSkippedRanges\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getSkippedRanges$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getSkippedRanges$MH() { return clang_getSkippedRanges$MH_; }\n-\n-    static final FunctionDescriptor clang_getAllSkippedRanges$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getAllSkippedRanges$FUNC() { return clang_getAllSkippedRanges$FUNC_; }\n-\n-    static final MethodHandle clang_getAllSkippedRanges$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getAllSkippedRanges\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getAllSkippedRanges$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getAllSkippedRanges$MH() { return clang_getAllSkippedRanges$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeSourceRangeList$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeSourceRangeList$FUNC() { return clang_disposeSourceRangeList$FUNC_; }\n-\n-    static final MethodHandle clang_disposeSourceRangeList$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeSourceRangeList\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeSourceRangeList$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeSourceRangeList$MH() { return clang_disposeSourceRangeList$MH_; }\n-\n-    static final int CXDiagnostic_Ignored() { return (int)0L; }\n-\n-    static final int CXDiagnostic_Note() { return (int)1L; }\n-\n-    static final int CXDiagnostic_Warning() { return (int)2L; }\n-\n-    static final int CXDiagnostic_Error() { return (int)3L; }\n-\n-    static final int CXDiagnostic_Fatal() { return (int)4L; }\n-\n-    static final FunctionDescriptor clang_getNumDiagnosticsInSet$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumDiagnosticsInSet$FUNC() { return clang_getNumDiagnosticsInSet$FUNC_; }\n-\n-    static final MethodHandle clang_getNumDiagnosticsInSet$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNumDiagnosticsInSet\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getNumDiagnosticsInSet$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNumDiagnosticsInSet$MH() { return clang_getNumDiagnosticsInSet$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticInSet$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticInSet$FUNC() { return clang_getDiagnosticInSet$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticInSet$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticInSet\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getDiagnosticInSet$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticInSet$MH() { return clang_getDiagnosticInSet$MH_; }\n-\n-    static final int CXLoadDiag_None() { return (int)0L; }\n-\n-    static final int CXLoadDiag_Unknown() { return (int)1L; }\n-\n-    static final int CXLoadDiag_CannotLoad() { return (int)2L; }\n-\n-    static final int CXLoadDiag_InvalidFile() { return (int)3L; }\n-\n-    static final FunctionDescriptor clang_loadDiagnostics$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_loadDiagnostics$FUNC() { return clang_loadDiagnostics$FUNC_; }\n-\n-    static final MethodHandle clang_loadDiagnostics$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_loadDiagnostics\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_loadDiagnostics$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_loadDiagnostics$MH() { return clang_loadDiagnostics$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeDiagnosticSet$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeDiagnosticSet$FUNC() { return clang_disposeDiagnosticSet$FUNC_; }\n-\n-    static final MethodHandle clang_disposeDiagnosticSet$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeDiagnosticSet\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeDiagnosticSet$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeDiagnosticSet$MH() { return clang_disposeDiagnosticSet$MH_; }\n-\n-    static final FunctionDescriptor clang_getChildDiagnostics$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getChildDiagnostics$FUNC() { return clang_getChildDiagnostics$FUNC_; }\n-\n-    static final MethodHandle clang_getChildDiagnostics$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getChildDiagnostics\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getChildDiagnostics$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getChildDiagnostics$MH() { return clang_getChildDiagnostics$MH_; }\n-\n-    static final FunctionDescriptor clang_getNumDiagnostics$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumDiagnostics$FUNC() { return clang_getNumDiagnostics$FUNC_; }\n-\n-    static final MethodHandle clang_getNumDiagnostics$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNumDiagnostics\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getNumDiagnostics$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNumDiagnostics$MH() { return clang_getNumDiagnostics$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnostic$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnostic$FUNC() { return clang_getDiagnostic$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnostic$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnostic\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getDiagnostic$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnostic$MH() { return clang_getDiagnostic$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticSetFromTU$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticSetFromTU$FUNC() { return clang_getDiagnosticSetFromTU$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticSetFromTU$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticSetFromTU\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getDiagnosticSetFromTU$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticSetFromTU$MH() { return clang_getDiagnosticSetFromTU$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeDiagnostic$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeDiagnostic$FUNC() { return clang_disposeDiagnostic$FUNC_; }\n-\n-    static final MethodHandle clang_disposeDiagnostic$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeDiagnostic\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeDiagnostic$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeDiagnostic$MH() { return clang_disposeDiagnostic$MH_; }\n-\n-    static final int CXDiagnostic_DisplaySourceLocation() { return (int)1L; }\n-\n-    static final int CXDiagnostic_DisplayColumn() { return (int)2L; }\n-\n-    static final int CXDiagnostic_DisplaySourceRanges() { return (int)4L; }\n-\n-    static final int CXDiagnostic_DisplayOption() { return (int)8L; }\n-\n-    static final int CXDiagnostic_DisplayCategoryId() { return (int)16L; }\n-\n-    static final int CXDiagnostic_DisplayCategoryName() { return (int)32L; }\n-\n-    static final FunctionDescriptor clang_formatDiagnostic$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_formatDiagnostic$FUNC() { return clang_formatDiagnostic$FUNC_; }\n-\n-    static final MethodHandle clang_formatDiagnostic$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_formatDiagnostic\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_formatDiagnostic$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_formatDiagnostic$MH() { return clang_formatDiagnostic$MH_; }\n-\n-    static final FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC_ = FunctionDescriptor.of(C_INT);\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC() { return clang_defaultDiagnosticDisplayOptions$FUNC_; }\n-\n-    static final MethodHandle clang_defaultDiagnosticDisplayOptions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_defaultDiagnosticDisplayOptions\",\n-        \"()I\",\n-        clang_defaultDiagnosticDisplayOptions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_defaultDiagnosticDisplayOptions$MH() { return clang_defaultDiagnosticDisplayOptions$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticSeverity$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticSeverity$FUNC() { return clang_getDiagnosticSeverity$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticSeverity$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticSeverity\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getDiagnosticSeverity$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticSeverity$MH() { return clang_getDiagnosticSeverity$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticLocation$FUNC() { return clang_getDiagnosticLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDiagnosticLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticLocation$MH() { return clang_getDiagnosticLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticSpelling$FUNC() { return clang_getDiagnosticSpelling$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticSpelling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDiagnosticSpelling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticSpelling$MH() { return clang_getDiagnosticSpelling$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticOption$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticOption$FUNC() { return clang_getDiagnosticOption$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticOption$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticOption\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDiagnosticOption$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticOption$MH() { return clang_getDiagnosticOption$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticCategory$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticCategory$FUNC() { return clang_getDiagnosticCategory$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticCategory$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticCategory\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getDiagnosticCategory$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticCategory$MH() { return clang_getDiagnosticCategory$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticCategoryName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticCategoryName$FUNC() { return clang_getDiagnosticCategoryName$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticCategoryName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticCategoryName\",\n-        \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDiagnosticCategoryName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticCategoryName$MH() { return clang_getDiagnosticCategoryName$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticCategoryText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticCategoryText$FUNC() { return clang_getDiagnosticCategoryText$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticCategoryText$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticCategoryText\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDiagnosticCategoryText$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticCategoryText$MH() { return clang_getDiagnosticCategoryText$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticNumRanges$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticNumRanges$FUNC() { return clang_getDiagnosticNumRanges$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticNumRanges$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticNumRanges\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getDiagnosticNumRanges$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticNumRanges$MH() { return clang_getDiagnosticNumRanges$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ),\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticRange$FUNC() { return clang_getDiagnosticRange$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticRange$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticRange\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDiagnosticRange$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticRange$MH() { return clang_getDiagnosticRange$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticNumFixIts$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticNumFixIts$FUNC() { return clang_getDiagnosticNumFixIts$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticNumFixIts$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticNumFixIts\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getDiagnosticNumFixIts$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticNumFixIts$MH() { return clang_getDiagnosticNumFixIts$MH_; }\n-\n-    static final FunctionDescriptor clang_getDiagnosticFixIt$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDiagnosticFixIt$FUNC() { return clang_getDiagnosticFixIt$FUNC_; }\n-\n-    static final MethodHandle clang_getDiagnosticFixIt$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDiagnosticFixIt\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDiagnosticFixIt$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDiagnosticFixIt$MH() { return clang_getDiagnosticFixIt$MH_; }\n-\n-    static final FunctionDescriptor clang_getTranslationUnitSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTranslationUnitSpelling$FUNC() { return clang_getTranslationUnitSpelling$FUNC_; }\n-\n-    static final MethodHandle clang_getTranslationUnitSpelling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTranslationUnitSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTranslationUnitSpelling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTranslationUnitSpelling$MH() { return clang_getTranslationUnitSpelling$MH_; }\n-\n-    static final FunctionDescriptor clang_createTranslationUnitFromSourceFile$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_createTranslationUnitFromSourceFile$FUNC() { return clang_createTranslationUnitFromSourceFile$FUNC_; }\n-\n-    static final MethodHandle clang_createTranslationUnitFromSourceFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_createTranslationUnitFromSourceFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_createTranslationUnitFromSourceFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_createTranslationUnitFromSourceFile$MH() { return clang_createTranslationUnitFromSourceFile$MH_; }\n-\n-    static final FunctionDescriptor clang_createTranslationUnit$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_createTranslationUnit$FUNC() { return clang_createTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_createTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_createTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_createTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_createTranslationUnit$MH() { return clang_createTranslationUnit$MH_; }\n-\n-    static final FunctionDescriptor clang_createTranslationUnit2$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_createTranslationUnit2$FUNC() { return clang_createTranslationUnit2$FUNC_; }\n-\n-    static final MethodHandle clang_createTranslationUnit2$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_createTranslationUnit2\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_createTranslationUnit2$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_createTranslationUnit2$MH() { return clang_createTranslationUnit2$MH_; }\n-\n-    static final int CXTranslationUnit_None() { return (int)0L; }\n-\n-    static final int CXTranslationUnit_DetailedPreprocessingRecord() { return (int)1L; }\n-\n-    static final int CXTranslationUnit_Incomplete() { return (int)2L; }\n-\n-    static final int CXTranslationUnit_PrecompiledPreamble() { return (int)4L; }\n-\n-    static final int CXTranslationUnit_CacheCompletionResults() { return (int)8L; }\n-\n-    static final int CXTranslationUnit_ForSerialization() { return (int)16L; }\n-\n-    static final int CXTranslationUnit_CXXChainedPCH() { return (int)32L; }\n-\n-    static final int CXTranslationUnit_SkipFunctionBodies() { return (int)64L; }\n-\n-    static final int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion() { return (int)128L; }\n-\n-    static final int CXTranslationUnit_CreatePreambleOnFirstParse() { return (int)256L; }\n-\n-    static final int CXTranslationUnit_KeepGoing() { return (int)512L; }\n-\n-    static final int CXTranslationUnit_SingleFileParse() { return (int)1024L; }\n-\n-    static final int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble() { return (int)2048L; }\n-\n-    static final int CXTranslationUnit_IncludeAttributedTypes() { return (int)4096L; }\n-\n-    static final int CXTranslationUnit_VisitImplicitAttributes() { return (int)8192L; }\n-\n-    static final int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles() { return (int)16384L; }\n-\n-    static final int CXTranslationUnit_RetainExcludedConditionalBlocks() { return (int)32768L; }\n-\n-    static final FunctionDescriptor clang_defaultEditingTranslationUnitOptions$FUNC_ = FunctionDescriptor.of(C_INT);\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultEditingTranslationUnitOptions$FUNC() { return clang_defaultEditingTranslationUnitOptions$FUNC_; }\n-\n-    static final MethodHandle clang_defaultEditingTranslationUnitOptions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_defaultEditingTranslationUnitOptions\",\n-        \"()I\",\n-        clang_defaultEditingTranslationUnitOptions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_defaultEditingTranslationUnitOptions$MH() { return clang_defaultEditingTranslationUnitOptions$MH_; }\n-\n-    static final FunctionDescriptor clang_parseTranslationUnit$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_parseTranslationUnit$FUNC() { return clang_parseTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_parseTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_parseTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_parseTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_parseTranslationUnit$MH() { return clang_parseTranslationUnit$MH_; }\n-\n-    static final FunctionDescriptor clang_parseTranslationUnit2$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_parseTranslationUnit2$FUNC() { return clang_parseTranslationUnit2$FUNC_; }\n-\n-    static final MethodHandle clang_parseTranslationUnit2$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_parseTranslationUnit2\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_parseTranslationUnit2$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_parseTranslationUnit2$MH() { return clang_parseTranslationUnit2$MH_; }\n-\n-    static final FunctionDescriptor clang_parseTranslationUnit2FullArgv$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_parseTranslationUnit2FullArgv$FUNC() { return clang_parseTranslationUnit2FullArgv$FUNC_; }\n-\n-    static final MethodHandle clang_parseTranslationUnit2FullArgv$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_parseTranslationUnit2FullArgv\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_parseTranslationUnit2FullArgv$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_parseTranslationUnit2FullArgv$MH() { return clang_parseTranslationUnit2FullArgv$MH_; }\n-\n-    static final int CXSaveTranslationUnit_None() { return (int)0L; }\n-\n-    static final FunctionDescriptor clang_defaultSaveOptions$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultSaveOptions$FUNC() { return clang_defaultSaveOptions$FUNC_; }\n-\n-    static final MethodHandle clang_defaultSaveOptions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_defaultSaveOptions\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_defaultSaveOptions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_defaultSaveOptions$MH() { return clang_defaultSaveOptions$MH_; }\n-\n-    static final int CXSaveError_None() { return (int)0L; }\n-\n-    static final int CXSaveError_Unknown() { return (int)1L; }\n-\n-    static final int CXSaveError_TranslationErrors() { return (int)2L; }\n-\n-    static final int CXSaveError_InvalidTU() { return (int)3L; }\n-\n-    static final FunctionDescriptor clang_saveTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_saveTranslationUnit$FUNC() { return clang_saveTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_saveTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_saveTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_saveTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_saveTranslationUnit$MH() { return clang_saveTranslationUnit$MH_; }\n-\n-    static final FunctionDescriptor clang_suspendTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_suspendTranslationUnit$FUNC() { return clang_suspendTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_suspendTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_suspendTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_suspendTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_suspendTranslationUnit$MH() { return clang_suspendTranslationUnit$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeTranslationUnit$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeTranslationUnit$FUNC() { return clang_disposeTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_disposeTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeTranslationUnit$MH() { return clang_disposeTranslationUnit$MH_; }\n-\n-    static final int CXReparse_None() { return (int)0L; }\n-\n-    static final FunctionDescriptor clang_defaultReparseOptions$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultReparseOptions$FUNC() { return clang_defaultReparseOptions$FUNC_; }\n-\n-    static final MethodHandle clang_defaultReparseOptions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_defaultReparseOptions\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_defaultReparseOptions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_defaultReparseOptions$MH() { return clang_defaultReparseOptions$MH_; }\n-\n-    static final FunctionDescriptor clang_reparseTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_reparseTranslationUnit$FUNC() { return clang_reparseTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_reparseTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_reparseTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_reparseTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_reparseTranslationUnit$MH() { return clang_reparseTranslationUnit$MH_; }\n-\n-    static final int CXTUResourceUsage_AST() { return (int)1L; }\n-\n-    static final int CXTUResourceUsage_Identifiers() { return (int)2L; }\n-\n-    static final int CXTUResourceUsage_Selectors() { return (int)3L; }\n-\n-    static final int CXTUResourceUsage_GlobalCompletionResults() { return (int)4L; }\n-\n-    static final int CXTUResourceUsage_SourceManagerContentCache() { return (int)5L; }\n-\n-    static final int CXTUResourceUsage_AST_SideTables() { return (int)6L; }\n-\n-    static final int CXTUResourceUsage_SourceManager_Membuffer_Malloc() { return (int)7L; }\n-\n-    static final int CXTUResourceUsage_SourceManager_Membuffer_MMap() { return (int)8L; }\n-\n-    static final int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc() { return (int)9L; }\n-\n-    static final int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap() { return (int)10L; }\n-\n-    static final int CXTUResourceUsage_Preprocessor() { return (int)11L; }\n-\n-    static final int CXTUResourceUsage_PreprocessingRecord() { return (int)12L; }\n-\n-    static final int CXTUResourceUsage_SourceManager_DataStructures() { return (int)13L; }\n-\n-    static final int CXTUResourceUsage_Preprocessor_HeaderSearch() { return (int)14L; }\n-\n-    static final int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN() { return (int)1L; }\n-\n-    static final int CXTUResourceUsage_MEMORY_IN_BYTES_END() { return (int)14L; }\n-\n-    static final int CXTUResourceUsage_First() { return (int)1L; }\n-\n-    static final int CXTUResourceUsage_Last() { return (int)14L; }\n-\n-    static final FunctionDescriptor clang_getTUResourceUsageName$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTUResourceUsageName$FUNC() { return clang_getTUResourceUsageName$FUNC_; }\n-\n-    static final MethodHandle clang_getTUResourceUsageName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTUResourceUsageName\",\n-        \"(I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getTUResourceUsageName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTUResourceUsageName$MH() { return clang_getTUResourceUsageName$MH_; }\n-\n-    static final MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_LONG_LONG.withName(\"amount\")\n-    ).withName(\"CXTUResourceUsageEntry\");\n-    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT() { return CXTUResourceUsageEntry$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXTUResourceUsageEntry$kind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsageEntry$kind$LAYOUT() { return CXTUResourceUsageEntry$kind$LAYOUT_; }\n-\n-    static final VarHandle CXTUResourceUsageEntry$kind$VH_ = CXTUResourceUsageEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-    static final java.lang.invoke.VarHandle CXTUResourceUsageEntry$kind$VH() { return CXTUResourceUsageEntry$kind$VH_; }\n-\n-    static final MemoryLayout CXTUResourceUsageEntry$amount$LAYOUT_ = C_LONG_LONG;\n-    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsageEntry$amount$LAYOUT() { return CXTUResourceUsageEntry$amount$LAYOUT_; }\n-\n-    static final VarHandle CXTUResourceUsageEntry$amount$VH_ = CXTUResourceUsageEntry$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"amount\"));\n-    static final java.lang.invoke.VarHandle CXTUResourceUsageEntry$amount$VH() { return CXTUResourceUsageEntry$amount$VH_; }\n-\n-    static final MemoryLayout CXTUResourceUsage$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"numEntries\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_POINTER.withName(\"entries\")\n-    ).withName(\"CXTUResourceUsage\");\n-    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$struct$LAYOUT() { return CXTUResourceUsage$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXTUResourceUsage$data$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$data$LAYOUT() { return CXTUResourceUsage$data$LAYOUT_; }\n-\n-    static final VarHandle CXTUResourceUsage$data$VH_ = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"data\")));\n-    static final java.lang.invoke.VarHandle CXTUResourceUsage$data$VH() { return CXTUResourceUsage$data$VH_; }\n-\n-    static final MemoryLayout CXTUResourceUsage$numEntries$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$numEntries$LAYOUT() { return CXTUResourceUsage$numEntries$LAYOUT_; }\n-\n-    static final VarHandle CXTUResourceUsage$numEntries$VH_ = CXTUResourceUsage$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numEntries\"));\n-    static final java.lang.invoke.VarHandle CXTUResourceUsage$numEntries$VH() { return CXTUResourceUsage$numEntries$VH_; }\n-\n-    static final MemoryLayout CXTUResourceUsage$entries$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXTUResourceUsage$entries$LAYOUT() { return CXTUResourceUsage$entries$LAYOUT_; }\n-\n-    static final VarHandle CXTUResourceUsage$entries$VH_ = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"entries\")));\n-    static final java.lang.invoke.VarHandle CXTUResourceUsage$entries$VH() { return CXTUResourceUsage$entries$VH_; }\n-\n-    static final FunctionDescriptor clang_getCXTUResourceUsage$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"numEntries\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_POINTER.withName(\"entries\")\n-    ).withName(\"CXTUResourceUsage\"),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCXTUResourceUsage$FUNC() { return clang_getCXTUResourceUsage$FUNC_; }\n-\n-    static final MethodHandle clang_getCXTUResourceUsage$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCXTUResourceUsage\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCXTUResourceUsage$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCXTUResourceUsage$MH() { return clang_getCXTUResourceUsage$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeCXTUResourceUsage$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"numEntries\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            C_POINTER.withName(\"entries\")\n-        ).withName(\"CXTUResourceUsage\")\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCXTUResourceUsage$FUNC() { return clang_disposeCXTUResourceUsage$FUNC_; }\n-\n-    static final MethodHandle clang_disposeCXTUResourceUsage$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeCXTUResourceUsage\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n-        clang_disposeCXTUResourceUsage$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeCXTUResourceUsage$MH() { return clang_disposeCXTUResourceUsage$MH_; }\n-\n-    static final FunctionDescriptor clang_getTranslationUnitTargetInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTranslationUnitTargetInfo$FUNC() { return clang_getTranslationUnitTargetInfo$FUNC_; }\n-\n-    static final MethodHandle clang_getTranslationUnitTargetInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTranslationUnitTargetInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getTranslationUnitTargetInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTranslationUnitTargetInfo$MH() { return clang_getTranslationUnitTargetInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_TargetInfo_dispose$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_TargetInfo_dispose$FUNC() { return clang_TargetInfo_dispose$FUNC_; }\n-\n-    static final MethodHandle clang_TargetInfo_dispose$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_TargetInfo_dispose\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_TargetInfo_dispose$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_TargetInfo_dispose$MH() { return clang_TargetInfo_dispose$MH_; }\n-\n-    static final FunctionDescriptor clang_TargetInfo_getTriple$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_TargetInfo_getTriple$FUNC() { return clang_TargetInfo_getTriple$FUNC_; }\n-\n-    static final MethodHandle clang_TargetInfo_getTriple$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_TargetInfo_getTriple\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_TargetInfo_getTriple$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_TargetInfo_getTriple$MH() { return clang_TargetInfo_getTriple$MH_; }\n-\n-    static final FunctionDescriptor clang_TargetInfo_getPointerWidth$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_TargetInfo_getPointerWidth$FUNC() { return clang_TargetInfo_getPointerWidth$FUNC_; }\n-\n-    static final MethodHandle clang_TargetInfo_getPointerWidth$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_TargetInfo_getPointerWidth\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_TargetInfo_getPointerWidth$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_TargetInfo_getPointerWidth$MH() { return clang_TargetInfo_getPointerWidth$MH_; }\n-\n-    static final int CXCursor_UnexposedDecl() { return (int)1L; }\n-\n-    static final int CXCursor_StructDecl() { return (int)2L; }\n-\n-    static final int CXCursor_UnionDecl() { return (int)3L; }\n-\n-    static final int CXCursor_ClassDecl() { return (int)4L; }\n-\n-    static final int CXCursor_EnumDecl() { return (int)5L; }\n-\n-    static final int CXCursor_FieldDecl() { return (int)6L; }\n-\n-    static final int CXCursor_EnumConstantDecl() { return (int)7L; }\n-\n-    static final int CXCursor_FunctionDecl() { return (int)8L; }\n-\n-    static final int CXCursor_VarDecl() { return (int)9L; }\n-\n-    static final int CXCursor_ParmDecl() { return (int)10L; }\n-\n-    static final int CXCursor_ObjCInterfaceDecl() { return (int)11L; }\n-\n-    static final int CXCursor_ObjCCategoryDecl() { return (int)12L; }\n-\n-    static final int CXCursor_ObjCProtocolDecl() { return (int)13L; }\n-\n-    static final int CXCursor_ObjCPropertyDecl() { return (int)14L; }\n-\n-    static final int CXCursor_ObjCIvarDecl() { return (int)15L; }\n-\n-    static final int CXCursor_ObjCInstanceMethodDecl() { return (int)16L; }\n-\n-    static final int CXCursor_ObjCClassMethodDecl() { return (int)17L; }\n-\n-    static final int CXCursor_ObjCImplementationDecl() { return (int)18L; }\n-\n-    static final int CXCursor_ObjCCategoryImplDecl() { return (int)19L; }\n-\n-    static final int CXCursor_TypedefDecl() { return (int)20L; }\n-\n-    static final int CXCursor_CXXMethod() { return (int)21L; }\n-\n-    static final int CXCursor_Namespace() { return (int)22L; }\n-\n-    static final int CXCursor_LinkageSpec() { return (int)23L; }\n-\n-    static final int CXCursor_Constructor() { return (int)24L; }\n-\n-    static final int CXCursor_Destructor() { return (int)25L; }\n-\n-    static final int CXCursor_ConversionFunction() { return (int)26L; }\n-\n-    static final int CXCursor_TemplateTypeParameter() { return (int)27L; }\n-\n-    static final int CXCursor_NonTypeTemplateParameter() { return (int)28L; }\n-\n-    static final int CXCursor_TemplateTemplateParameter() { return (int)29L; }\n-\n-    static final int CXCursor_FunctionTemplate() { return (int)30L; }\n-\n-    static final int CXCursor_ClassTemplate() { return (int)31L; }\n-\n-    static final int CXCursor_ClassTemplatePartialSpecialization() { return (int)32L; }\n-\n-    static final int CXCursor_NamespaceAlias() { return (int)33L; }\n-\n-    static final int CXCursor_UsingDirective() { return (int)34L; }\n-\n-    static final int CXCursor_UsingDeclaration() { return (int)35L; }\n-\n-    static final int CXCursor_TypeAliasDecl() { return (int)36L; }\n-\n-    static final int CXCursor_ObjCSynthesizeDecl() { return (int)37L; }\n-\n-    static final int CXCursor_ObjCDynamicDecl() { return (int)38L; }\n-\n-    static final int CXCursor_CXXAccessSpecifier() { return (int)39L; }\n-\n-    static final int CXCursor_FirstDecl() { return (int)1L; }\n-\n-    static final int CXCursor_LastDecl() { return (int)39L; }\n-\n-    static final int CXCursor_FirstRef() { return (int)40L; }\n-\n-    static final int CXCursor_ObjCSuperClassRef() { return (int)40L; }\n-\n-    static final int CXCursor_ObjCProtocolRef() { return (int)41L; }\n-\n-    static final int CXCursor_ObjCClassRef() { return (int)42L; }\n-\n-    static final int CXCursor_TypeRef() { return (int)43L; }\n-\n-    static final int CXCursor_CXXBaseSpecifier() { return (int)44L; }\n-\n-    static final int CXCursor_TemplateRef() { return (int)45L; }\n-\n-    static final int CXCursor_NamespaceRef() { return (int)46L; }\n-\n-    static final int CXCursor_MemberRef() { return (int)47L; }\n-\n-    static final int CXCursor_LabelRef() { return (int)48L; }\n-\n-    static final int CXCursor_OverloadedDeclRef() { return (int)49L; }\n-\n-    static final int CXCursor_VariableRef() { return (int)50L; }\n-\n-    static final int CXCursor_LastRef() { return (int)50L; }\n-\n-    static final int CXCursor_FirstInvalid() { return (int)70L; }\n-\n-    static final int CXCursor_InvalidFile() { return (int)70L; }\n-\n-    static final int CXCursor_NoDeclFound() { return (int)71L; }\n-\n-    static final int CXCursor_NotImplemented() { return (int)72L; }\n-\n-    static final int CXCursor_InvalidCode() { return (int)73L; }\n-\n-    static final int CXCursor_LastInvalid() { return (int)73L; }\n-\n-    static final int CXCursor_FirstExpr() { return (int)100L; }\n-\n-    static final int CXCursor_UnexposedExpr() { return (int)100L; }\n-\n-    static final int CXCursor_DeclRefExpr() { return (int)101L; }\n-\n-    static final int CXCursor_MemberRefExpr() { return (int)102L; }\n-\n-    static final int CXCursor_CallExpr() { return (int)103L; }\n-\n-    static final int CXCursor_ObjCMessageExpr() { return (int)104L; }\n-\n-    static final int CXCursor_BlockExpr() { return (int)105L; }\n-\n-    static final int CXCursor_IntegerLiteral() { return (int)106L; }\n-\n-    static final int CXCursor_FloatingLiteral() { return (int)107L; }\n-\n-    static final int CXCursor_ImaginaryLiteral() { return (int)108L; }\n-\n-    static final int CXCursor_StringLiteral() { return (int)109L; }\n-\n-    static final int CXCursor_CharacterLiteral() { return (int)110L; }\n-\n-    static final int CXCursor_ParenExpr() { return (int)111L; }\n-\n-    static final int CXCursor_UnaryOperator() { return (int)112L; }\n-\n-    static final int CXCursor_ArraySubscriptExpr() { return (int)113L; }\n-\n-    static final int CXCursor_BinaryOperator() { return (int)114L; }\n-\n-    static final int CXCursor_CompoundAssignOperator() { return (int)115L; }\n-\n-    static final int CXCursor_ConditionalOperator() { return (int)116L; }\n-\n-    static final int CXCursor_CStyleCastExpr() { return (int)117L; }\n-\n-    static final int CXCursor_CompoundLiteralExpr() { return (int)118L; }\n-\n-    static final int CXCursor_InitListExpr() { return (int)119L; }\n-\n-    static final int CXCursor_AddrLabelExpr() { return (int)120L; }\n-\n-    static final int CXCursor_StmtExpr() { return (int)121L; }\n-\n-    static final int CXCursor_GenericSelectionExpr() { return (int)122L; }\n-\n-    static final int CXCursor_GNUNullExpr() { return (int)123L; }\n-\n-    static final int CXCursor_CXXStaticCastExpr() { return (int)124L; }\n-\n-    static final int CXCursor_CXXDynamicCastExpr() { return (int)125L; }\n-\n-    static final int CXCursor_CXXReinterpretCastExpr() { return (int)126L; }\n-\n-    static final int CXCursor_CXXConstCastExpr() { return (int)127L; }\n-\n-    static final int CXCursor_CXXFunctionalCastExpr() { return (int)128L; }\n-\n-    static final int CXCursor_CXXTypeidExpr() { return (int)129L; }\n-\n-    static final int CXCursor_CXXBoolLiteralExpr() { return (int)130L; }\n-\n-    static final int CXCursor_CXXNullPtrLiteralExpr() { return (int)131L; }\n-\n-    static final int CXCursor_CXXThisExpr() { return (int)132L; }\n-\n-    static final int CXCursor_CXXThrowExpr() { return (int)133L; }\n-\n-    static final int CXCursor_CXXNewExpr() { return (int)134L; }\n-\n-    static final int CXCursor_CXXDeleteExpr() { return (int)135L; }\n-\n-    static final int CXCursor_UnaryExpr() { return (int)136L; }\n-\n-    static final int CXCursor_ObjCStringLiteral() { return (int)137L; }\n-\n-    static final int CXCursor_ObjCEncodeExpr() { return (int)138L; }\n-\n-    static final int CXCursor_ObjCSelectorExpr() { return (int)139L; }\n-\n-    static final int CXCursor_ObjCProtocolExpr() { return (int)140L; }\n-\n-    static final int CXCursor_ObjCBridgedCastExpr() { return (int)141L; }\n-\n-    static final int CXCursor_PackExpansionExpr() { return (int)142L; }\n-\n-    static final int CXCursor_SizeOfPackExpr() { return (int)143L; }\n-\n-    static final int CXCursor_LambdaExpr() { return (int)144L; }\n-\n-    static final int CXCursor_ObjCBoolLiteralExpr() { return (int)145L; }\n-\n-    static final int CXCursor_ObjCSelfExpr() { return (int)146L; }\n-\n-    static final int CXCursor_OMPArraySectionExpr() { return (int)147L; }\n-\n-    static final int CXCursor_ObjCAvailabilityCheckExpr() { return (int)148L; }\n-\n-    static final int CXCursor_FixedPointLiteral() { return (int)149L; }\n-\n-    static final int CXCursor_LastExpr() { return (int)149L; }\n-\n-    static final int CXCursor_FirstStmt() { return (int)200L; }\n-\n-    static final int CXCursor_UnexposedStmt() { return (int)200L; }\n-\n-    static final int CXCursor_LabelStmt() { return (int)201L; }\n-\n-    static final int CXCursor_CompoundStmt() { return (int)202L; }\n-\n-    static final int CXCursor_CaseStmt() { return (int)203L; }\n-\n-    static final int CXCursor_DefaultStmt() { return (int)204L; }\n-\n-    static final int CXCursor_IfStmt() { return (int)205L; }\n-\n-    static final int CXCursor_SwitchStmt() { return (int)206L; }\n-\n-    static final int CXCursor_WhileStmt() { return (int)207L; }\n-\n-    static final int CXCursor_DoStmt() { return (int)208L; }\n-\n-    static final int CXCursor_ForStmt() { return (int)209L; }\n-\n-    static final int CXCursor_GotoStmt() { return (int)210L; }\n-\n-    static final int CXCursor_IndirectGotoStmt() { return (int)211L; }\n-\n-    static final int CXCursor_ContinueStmt() { return (int)212L; }\n-\n-    static final int CXCursor_BreakStmt() { return (int)213L; }\n-\n-    static final int CXCursor_ReturnStmt() { return (int)214L; }\n-\n-    static final int CXCursor_GCCAsmStmt() { return (int)215L; }\n-\n-    static final int CXCursor_AsmStmt() { return (int)215L; }\n-\n-    static final int CXCursor_ObjCAtTryStmt() { return (int)216L; }\n-\n-    static final int CXCursor_ObjCAtCatchStmt() { return (int)217L; }\n-\n-    static final int CXCursor_ObjCAtFinallyStmt() { return (int)218L; }\n-\n-    static final int CXCursor_ObjCAtThrowStmt() { return (int)219L; }\n-\n-    static final int CXCursor_ObjCAtSynchronizedStmt() { return (int)220L; }\n-\n-    static final int CXCursor_ObjCAutoreleasePoolStmt() { return (int)221L; }\n-\n-    static final int CXCursor_ObjCForCollectionStmt() { return (int)222L; }\n-\n-    static final int CXCursor_CXXCatchStmt() { return (int)223L; }\n-\n-    static final int CXCursor_CXXTryStmt() { return (int)224L; }\n-\n-    static final int CXCursor_CXXForRangeStmt() { return (int)225L; }\n-\n-    static final int CXCursor_SEHTryStmt() { return (int)226L; }\n-\n-    static final int CXCursor_SEHExceptStmt() { return (int)227L; }\n-\n-    static final int CXCursor_SEHFinallyStmt() { return (int)228L; }\n-\n-    static final int CXCursor_MSAsmStmt() { return (int)229L; }\n-\n-    static final int CXCursor_NullStmt() { return (int)230L; }\n-\n-    static final int CXCursor_DeclStmt() { return (int)231L; }\n-\n-    static final int CXCursor_OMPParallelDirective() { return (int)232L; }\n-\n-    static final int CXCursor_OMPSimdDirective() { return (int)233L; }\n-\n-    static final int CXCursor_OMPForDirective() { return (int)234L; }\n-\n-    static final int CXCursor_OMPSectionsDirective() { return (int)235L; }\n-\n-    static final int CXCursor_OMPSectionDirective() { return (int)236L; }\n-\n-    static final int CXCursor_OMPSingleDirective() { return (int)237L; }\n-\n-    static final int CXCursor_OMPParallelForDirective() { return (int)238L; }\n-\n-    static final int CXCursor_OMPParallelSectionsDirective() { return (int)239L; }\n-\n-    static final int CXCursor_OMPTaskDirective() { return (int)240L; }\n-\n-    static final int CXCursor_OMPMasterDirective() { return (int)241L; }\n-\n-    static final int CXCursor_OMPCriticalDirective() { return (int)242L; }\n-\n-    static final int CXCursor_OMPTaskyieldDirective() { return (int)243L; }\n-\n-    static final int CXCursor_OMPBarrierDirective() { return (int)244L; }\n-\n-    static final int CXCursor_OMPTaskwaitDirective() { return (int)245L; }\n-\n-    static final int CXCursor_OMPFlushDirective() { return (int)246L; }\n-\n-    static final int CXCursor_SEHLeaveStmt() { return (int)247L; }\n-\n-    static final int CXCursor_OMPOrderedDirective() { return (int)248L; }\n-\n-    static final int CXCursor_OMPAtomicDirective() { return (int)249L; }\n-\n-    static final int CXCursor_OMPForSimdDirective() { return (int)250L; }\n-\n-    static final int CXCursor_OMPParallelForSimdDirective() { return (int)251L; }\n-\n-    static final int CXCursor_OMPTargetDirective() { return (int)252L; }\n-\n-    static final int CXCursor_OMPTeamsDirective() { return (int)253L; }\n-\n-    static final int CXCursor_OMPTaskgroupDirective() { return (int)254L; }\n-\n-    static final int CXCursor_OMPCancellationPointDirective() { return (int)255L; }\n-\n-    static final int CXCursor_OMPCancelDirective() { return (int)256L; }\n-\n-    static final int CXCursor_OMPTargetDataDirective() { return (int)257L; }\n-\n-    static final int CXCursor_OMPTaskLoopDirective() { return (int)258L; }\n-\n-    static final int CXCursor_OMPTaskLoopSimdDirective() { return (int)259L; }\n-\n-    static final int CXCursor_OMPDistributeDirective() { return (int)260L; }\n-\n-    static final int CXCursor_OMPTargetEnterDataDirective() { return (int)261L; }\n-\n-    static final int CXCursor_OMPTargetExitDataDirective() { return (int)262L; }\n-\n-    static final int CXCursor_OMPTargetParallelDirective() { return (int)263L; }\n-\n-    static final int CXCursor_OMPTargetParallelForDirective() { return (int)264L; }\n-\n-    static final int CXCursor_OMPTargetUpdateDirective() { return (int)265L; }\n-\n-    static final int CXCursor_OMPDistributeParallelForDirective() { return (int)266L; }\n-\n-    static final int CXCursor_OMPDistributeParallelForSimdDirective() { return (int)267L; }\n-\n-    static final int CXCursor_OMPDistributeSimdDirective() { return (int)268L; }\n-\n-    static final int CXCursor_OMPTargetParallelForSimdDirective() { return (int)269L; }\n-\n-    static final int CXCursor_OMPTargetSimdDirective() { return (int)270L; }\n-\n-    static final int CXCursor_OMPTeamsDistributeDirective() { return (int)271L; }\n-\n-    static final int CXCursor_OMPTeamsDistributeSimdDirective() { return (int)272L; }\n-\n-    static final int CXCursor_OMPTeamsDistributeParallelForSimdDirective() { return (int)273L; }\n-\n-    static final int CXCursor_OMPTeamsDistributeParallelForDirective() { return (int)274L; }\n-\n-    static final int CXCursor_OMPTargetTeamsDirective() { return (int)275L; }\n-\n-    static final int CXCursor_OMPTargetTeamsDistributeDirective() { return (int)276L; }\n-\n-    static final int CXCursor_OMPTargetTeamsDistributeParallelForDirective() { return (int)277L; }\n-\n-    static final int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective() { return (int)278L; }\n-\n-    static final int CXCursor_OMPTargetTeamsDistributeSimdDirective() { return (int)279L; }\n-\n-    static final int CXCursor_BuiltinBitCastExpr() { return (int)280L; }\n-\n-    static final int CXCursor_OMPMasterTaskLoopDirective() { return (int)281L; }\n-\n-    static final int CXCursor_OMPParallelMasterTaskLoopDirective() { return (int)282L; }\n-\n-    static final int CXCursor_OMPMasterTaskLoopSimdDirective() { return (int)283L; }\n-\n-    static final int CXCursor_OMPParallelMasterTaskLoopSimdDirective() { return (int)284L; }\n-\n-    static final int CXCursor_LastStmt() { return (int)284L; }\n-\n-    static final int CXCursor_TranslationUnit() { return (int)300L; }\n-\n-    static final int CXCursor_FirstAttr() { return (int)400L; }\n-\n-    static final int CXCursor_UnexposedAttr() { return (int)400L; }\n-\n-    static final int CXCursor_IBActionAttr() { return (int)401L; }\n-\n-    static final int CXCursor_IBOutletAttr() { return (int)402L; }\n-\n-    static final int CXCursor_IBOutletCollectionAttr() { return (int)403L; }\n-\n-    static final int CXCursor_CXXFinalAttr() { return (int)404L; }\n-\n-    static final int CXCursor_CXXOverrideAttr() { return (int)405L; }\n-\n-    static final int CXCursor_AnnotateAttr() { return (int)406L; }\n-\n-    static final int CXCursor_AsmLabelAttr() { return (int)407L; }\n-\n-    static final int CXCursor_PackedAttr() { return (int)408L; }\n-\n-    static final int CXCursor_PureAttr() { return (int)409L; }\n-\n-    static final int CXCursor_ConstAttr() { return (int)410L; }\n-\n-    static final int CXCursor_NoDuplicateAttr() { return (int)411L; }\n-\n-    static final int CXCursor_CUDAConstantAttr() { return (int)412L; }\n-\n-    static final int CXCursor_CUDADeviceAttr() { return (int)413L; }\n-\n-    static final int CXCursor_CUDAGlobalAttr() { return (int)414L; }\n-\n-    static final int CXCursor_CUDAHostAttr() { return (int)415L; }\n-\n-    static final int CXCursor_CUDASharedAttr() { return (int)416L; }\n-\n-    static final int CXCursor_VisibilityAttr() { return (int)417L; }\n-\n-    static final int CXCursor_DLLExport() { return (int)418L; }\n-\n-    static final int CXCursor_DLLImport() { return (int)419L; }\n-\n-    static final int CXCursor_NSReturnsRetained() { return (int)420L; }\n-\n-    static final int CXCursor_NSReturnsNotRetained() { return (int)421L; }\n-\n-    static final int CXCursor_NSReturnsAutoreleased() { return (int)422L; }\n-\n-    static final int CXCursor_NSConsumesSelf() { return (int)423L; }\n-\n-    static final int CXCursor_NSConsumed() { return (int)424L; }\n-\n-    static final int CXCursor_ObjCException() { return (int)425L; }\n-\n-    static final int CXCursor_ObjCNSObject() { return (int)426L; }\n-\n-    static final int CXCursor_ObjCIndependentClass() { return (int)427L; }\n-\n-    static final int CXCursor_ObjCPreciseLifetime() { return (int)428L; }\n-\n-    static final int CXCursor_ObjCReturnsInnerPointer() { return (int)429L; }\n-\n-    static final int CXCursor_ObjCRequiresSuper() { return (int)430L; }\n-\n-    static final int CXCursor_ObjCRootClass() { return (int)431L; }\n-\n-    static final int CXCursor_ObjCSubclassingRestricted() { return (int)432L; }\n-\n-    static final int CXCursor_ObjCExplicitProtocolImpl() { return (int)433L; }\n-\n-    static final int CXCursor_ObjCDesignatedInitializer() { return (int)434L; }\n-\n-    static final int CXCursor_ObjCRuntimeVisible() { return (int)435L; }\n-\n-    static final int CXCursor_ObjCBoxable() { return (int)436L; }\n-\n-    static final int CXCursor_FlagEnum() { return (int)437L; }\n-\n-    static final int CXCursor_ConvergentAttr() { return (int)438L; }\n-\n-    static final int CXCursor_WarnUnusedAttr() { return (int)439L; }\n-\n-    static final int CXCursor_WarnUnusedResultAttr() { return (int)440L; }\n-\n-    static final int CXCursor_AlignedAttr() { return (int)441L; }\n-\n-    static final int CXCursor_LastAttr() { return (int)441L; }\n-\n-    static final int CXCursor_PreprocessingDirective() { return (int)500L; }\n-\n-    static final int CXCursor_MacroDefinition() { return (int)501L; }\n-\n-    static final int CXCursor_MacroExpansion() { return (int)502L; }\n-\n-    static final int CXCursor_MacroInstantiation() { return (int)502L; }\n-\n-    static final int CXCursor_InclusionDirective() { return (int)503L; }\n-\n-    static final int CXCursor_FirstPreprocessing() { return (int)500L; }\n-\n-    static final int CXCursor_LastPreprocessing() { return (int)503L; }\n-\n-    static final int CXCursor_ModuleImportDecl() { return (int)600L; }\n-\n-    static final int CXCursor_TypeAliasTemplateDecl() { return (int)601L; }\n-\n-    static final int CXCursor_StaticAssert() { return (int)602L; }\n-\n-    static final int CXCursor_FriendDecl() { return (int)603L; }\n-\n-    static final int CXCursor_FirstExtraDecl() { return (int)600L; }\n-\n-    static final int CXCursor_LastExtraDecl() { return (int)603L; }\n-\n-    static final int CXCursor_OverloadCandidate() { return (int)700L; }\n-\n-    static final int CXTSK_Undeclared() { return (int)0L; }\n-\n-    static final int CXTSK_ImplicitInstantiation() { return (int)1L; }\n-\n-    static final int CXTSK_ExplicitSpecialization() { return (int)2L; }\n-\n-    static final int CXTSK_ExplicitInstantiationDeclaration() { return (int)3L; }\n-\n-    static final int CXTSK_ExplicitInstantiationDefinition() { return (int)4L; }\n-\n-    static final MemoryLayout CXCursor$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXCursor$struct$LAYOUT() { return CXCursor$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXCursor$kind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXCursor$kind$LAYOUT() { return CXCursor$kind$LAYOUT_; }\n-\n-    static final VarHandle CXCursor$kind$VH_ = CXCursor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-    static final java.lang.invoke.VarHandle CXCursor$kind$VH() { return CXCursor$kind$VH_; }\n-\n-    static final MemoryLayout CXCursor$xdata$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXCursor$xdata$LAYOUT() { return CXCursor$xdata$LAYOUT_; }\n-\n-    static final VarHandle CXCursor$xdata$VH_ = CXCursor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"xdata\"));\n-    static final java.lang.invoke.VarHandle CXCursor$xdata$VH() { return CXCursor$xdata$VH_; }\n-\n-    static final FunctionDescriptor clang_getNullCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ));\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNullCursor$FUNC() { return clang_getNullCursor$FUNC_; }\n-\n-    static final MethodHandle clang_getNullCursor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNullCursor\",\n-        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getNullCursor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNullCursor$MH() { return clang_getNullCursor$MH_; }\n-\n-    static final FunctionDescriptor clang_getTranslationUnitCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTranslationUnitCursor$FUNC() { return clang_getTranslationUnitCursor$FUNC_; }\n-\n-    static final MethodHandle clang_getTranslationUnitCursor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTranslationUnitCursor\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTranslationUnitCursor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTranslationUnitCursor$MH() { return clang_getTranslationUnitCursor$MH_; }\n-\n-    static final FunctionDescriptor clang_equalCursors$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_equalCursors$FUNC() { return clang_equalCursors$FUNC_; }\n-\n-    static final MethodHandle clang_equalCursors$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_equalCursors\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_equalCursors$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_equalCursors$MH() { return clang_equalCursors$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isNull$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isNull$FUNC() { return clang_Cursor_isNull$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isNull$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isNull\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isNull$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isNull$MH() { return clang_Cursor_isNull$MH_; }\n-\n-    static final FunctionDescriptor clang_hashCursor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_hashCursor$FUNC() { return clang_hashCursor$FUNC_; }\n-\n-    static final MethodHandle clang_hashCursor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_hashCursor\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_hashCursor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_hashCursor$MH() { return clang_hashCursor$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorKind$FUNC() { return clang_getCursorKind$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCursorKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorKind$MH() { return clang_getCursorKind$MH_; }\n-\n-    static final FunctionDescriptor clang_isDeclaration$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isDeclaration$FUNC() { return clang_isDeclaration$FUNC_; }\n-\n-    static final MethodHandle clang_isDeclaration$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isDeclaration\",\n-        \"(I)I\",\n-        clang_isDeclaration$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isDeclaration$MH() { return clang_isDeclaration$MH_; }\n-\n-    static final FunctionDescriptor clang_isInvalidDeclaration$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isInvalidDeclaration$FUNC() { return clang_isInvalidDeclaration$FUNC_; }\n-\n-    static final MethodHandle clang_isInvalidDeclaration$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isInvalidDeclaration\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isInvalidDeclaration$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isInvalidDeclaration$MH() { return clang_isInvalidDeclaration$MH_; }\n-\n-    static final FunctionDescriptor clang_isReference$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isReference$FUNC() { return clang_isReference$FUNC_; }\n-\n-    static final MethodHandle clang_isReference$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isReference\",\n-        \"(I)I\",\n-        clang_isReference$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isReference$MH() { return clang_isReference$MH_; }\n-\n-    static final FunctionDescriptor clang_isExpression$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isExpression$FUNC() { return clang_isExpression$FUNC_; }\n-\n-    static final MethodHandle clang_isExpression$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isExpression\",\n-        \"(I)I\",\n-        clang_isExpression$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isExpression$MH() { return clang_isExpression$MH_; }\n-\n-    static final FunctionDescriptor clang_isStatement$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isStatement$FUNC() { return clang_isStatement$FUNC_; }\n-\n-    static final MethodHandle clang_isStatement$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isStatement\",\n-        \"(I)I\",\n-        clang_isStatement$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isStatement$MH() { return clang_isStatement$MH_; }\n-\n-    static final FunctionDescriptor clang_isAttribute$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isAttribute$FUNC() { return clang_isAttribute$FUNC_; }\n-\n-    static final MethodHandle clang_isAttribute$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isAttribute\",\n-        \"(I)I\",\n-        clang_isAttribute$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isAttribute$MH() { return clang_isAttribute$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_hasAttrs$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_hasAttrs$FUNC() { return clang_Cursor_hasAttrs$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_hasAttrs$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_hasAttrs\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_hasAttrs$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_hasAttrs$MH() { return clang_Cursor_hasAttrs$MH_; }\n-\n-    static final FunctionDescriptor clang_isInvalid$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isInvalid$FUNC() { return clang_isInvalid$FUNC_; }\n-\n-    static final MethodHandle clang_isInvalid$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isInvalid\",\n-        \"(I)I\",\n-        clang_isInvalid$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isInvalid$MH() { return clang_isInvalid$MH_; }\n-\n-    static final FunctionDescriptor clang_isTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isTranslationUnit$FUNC() { return clang_isTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_isTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isTranslationUnit\",\n-        \"(I)I\",\n-        clang_isTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isTranslationUnit$MH() { return clang_isTranslationUnit$MH_; }\n-\n-    static final FunctionDescriptor clang_isPreprocessing$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isPreprocessing$FUNC() { return clang_isPreprocessing$FUNC_; }\n-\n-    static final MethodHandle clang_isPreprocessing$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isPreprocessing\",\n-        \"(I)I\",\n-        clang_isPreprocessing$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isPreprocessing$MH() { return clang_isPreprocessing$MH_; }\n-\n-    static final FunctionDescriptor clang_isUnexposed$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isUnexposed$FUNC() { return clang_isUnexposed$FUNC_; }\n-\n-    static final MethodHandle clang_isUnexposed$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isUnexposed\",\n-        \"(I)I\",\n-        clang_isUnexposed$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isUnexposed$MH() { return clang_isUnexposed$MH_; }\n-\n-    static final int CXLinkage_Invalid() { return (int)0L; }\n-\n-    static final int CXLinkage_NoLinkage() { return (int)1L; }\n-\n-    static final int CXLinkage_Internal() { return (int)2L; }\n-\n-    static final int CXLinkage_UniqueExternal() { return (int)3L; }\n-\n-    static final int CXLinkage_External() { return (int)4L; }\n-\n-    static final FunctionDescriptor clang_getCursorLinkage$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLinkage$FUNC() { return clang_getCursorLinkage$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorLinkage$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorLinkage\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCursorLinkage$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorLinkage$MH() { return clang_getCursorLinkage$MH_; }\n-\n-    static final int CXVisibility_Invalid() { return (int)0L; }\n-\n-    static final int CXVisibility_Hidden() { return (int)1L; }\n-\n-    static final int CXVisibility_Protected() { return (int)2L; }\n-\n-    static final int CXVisibility_Default() { return (int)3L; }\n-\n-    static final FunctionDescriptor clang_getCursorVisibility$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorVisibility$FUNC() { return clang_getCursorVisibility$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorVisibility$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorVisibility\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCursorVisibility$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorVisibility$MH() { return clang_getCursorVisibility$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorAvailability$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorAvailability$FUNC() { return clang_getCursorAvailability$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorAvailability$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorAvailability\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCursorAvailability$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorAvailability$MH() { return clang_getCursorAvailability$MH_; }\n-\n-    static final MemoryLayout CXPlatformAvailability$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"Platform\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"Major\"),\n-            C_INT.withName(\"Minor\"),\n-            C_INT.withName(\"Subminor\")\n-        ).withName(\"Introduced\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"Major\"),\n-            C_INT.withName(\"Minor\"),\n-            C_INT.withName(\"Subminor\")\n-        ).withName(\"Deprecated\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"Major\"),\n-            C_INT.withName(\"Minor\"),\n-            C_INT.withName(\"Subminor\")\n-        ).withName(\"Obsoleted\"),\n-        C_INT.withName(\"Unavailable\"),\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"Message\")\n-    ).withName(\"CXPlatformAvailability\");\n-    static final jdk.incubator.foreign.MemoryLayout CXPlatformAvailability$struct$LAYOUT() { return CXPlatformAvailability$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXPlatformAvailability$Unavailable$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXPlatformAvailability$Unavailable$LAYOUT() { return CXPlatformAvailability$Unavailable$LAYOUT_; }\n-\n-    static final VarHandle CXPlatformAvailability$Unavailable$VH_ = CXPlatformAvailability$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Unavailable\"));\n-    static final java.lang.invoke.VarHandle CXPlatformAvailability$Unavailable$VH() { return CXPlatformAvailability$Unavailable$VH_; }\n-\n-    static final FunctionDescriptor clang_getCursorPlatformAvailability$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorPlatformAvailability$FUNC() { return clang_getCursorPlatformAvailability$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorPlatformAvailability$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorPlatformAvailability\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_getCursorPlatformAvailability$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorPlatformAvailability$MH() { return clang_getCursorPlatformAvailability$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeCXPlatformAvailability$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCXPlatformAvailability$FUNC() { return clang_disposeCXPlatformAvailability$FUNC_; }\n-\n-    static final MethodHandle clang_disposeCXPlatformAvailability$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeCXPlatformAvailability\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeCXPlatformAvailability$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeCXPlatformAvailability$MH() { return clang_disposeCXPlatformAvailability$MH_; }\n-\n-    static final int CXLanguage_Invalid() { return (int)0L; }\n-\n-    static final int CXLanguage_C() { return (int)1L; }\n-\n-    static final int CXLanguage_ObjC() { return (int)2L; }\n-\n-    static final int CXLanguage_CPlusPlus() { return (int)3L; }\n-\n-    static final FunctionDescriptor clang_getCursorLanguage$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLanguage$FUNC() { return clang_getCursorLanguage$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorLanguage$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorLanguage\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCursorLanguage$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorLanguage$MH() { return clang_getCursorLanguage$MH_; }\n-\n-    static final int CXTLS_None() { return (int)0L; }\n-\n-    static final int CXTLS_Dynamic() { return (int)1L; }\n-\n-    static final int CXTLS_Static() { return (int)2L; }\n-\n-    static final FunctionDescriptor clang_getCursorTLSKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorTLSKind$FUNC() { return clang_getCursorTLSKind$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorTLSKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorTLSKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCursorTLSKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorTLSKind$MH() { return clang_getCursorTLSKind$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC() { return clang_Cursor_getTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Cursor_getTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getTranslationUnit$MH() { return clang_Cursor_getTranslationUnit$MH_; }\n-\n-    static final FunctionDescriptor clang_createCXCursorSet$FUNC_ = FunctionDescriptor.of(C_POINTER);\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_createCXCursorSet$FUNC() { return clang_createCXCursorSet$FUNC_; }\n-\n-    static final MethodHandle clang_createCXCursorSet$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_createCXCursorSet\",\n-        \"()Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_createCXCursorSet$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_createCXCursorSet$MH() { return clang_createCXCursorSet$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeCXCursorSet$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCXCursorSet$FUNC() { return clang_disposeCXCursorSet$FUNC_; }\n-\n-    static final MethodHandle clang_disposeCXCursorSet$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeCXCursorSet\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeCXCursorSet$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeCXCursorSet$MH() { return clang_disposeCXCursorSet$MH_; }\n-\n-    static final FunctionDescriptor clang_CXCursorSet_contains$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXCursorSet_contains$FUNC() { return clang_CXCursorSet_contains$FUNC_; }\n-\n-    static final MethodHandle clang_CXCursorSet_contains$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXCursorSet_contains\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXCursorSet_contains$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXCursorSet_contains$MH() { return clang_CXCursorSet_contains$MH_; }\n-\n-    static final FunctionDescriptor clang_CXCursorSet_insert$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXCursorSet_insert$FUNC() { return clang_CXCursorSet_insert$FUNC_; }\n-\n-    static final MethodHandle clang_CXCursorSet_insert$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXCursorSet_insert\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXCursorSet_insert$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXCursorSet_insert$MH() { return clang_CXCursorSet_insert$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorSemanticParent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorSemanticParent$FUNC() { return clang_getCursorSemanticParent$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorSemanticParent$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorSemanticParent\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorSemanticParent$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorSemanticParent$MH() { return clang_getCursorSemanticParent$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorLexicalParent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLexicalParent$FUNC() { return clang_getCursorLexicalParent$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorLexicalParent$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorLexicalParent\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorLexicalParent$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorLexicalParent$MH() { return clang_getCursorLexicalParent$MH_; }\n-\n-    static final FunctionDescriptor clang_getOverriddenCursors$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getOverriddenCursors$FUNC() { return clang_getOverriddenCursors$FUNC_; }\n-\n-    static final MethodHandle clang_getOverriddenCursors$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getOverriddenCursors\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getOverriddenCursors$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getOverriddenCursors$MH() { return clang_getOverriddenCursors$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeOverriddenCursors$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeOverriddenCursors$FUNC() { return clang_disposeOverriddenCursors$FUNC_; }\n-\n-    static final MethodHandle clang_disposeOverriddenCursors$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeOverriddenCursors\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeOverriddenCursors$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeOverriddenCursors$MH() { return clang_disposeOverriddenCursors$MH_; }\n-\n-    static final FunctionDescriptor clang_getIncludedFile$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getIncludedFile$FUNC() { return clang_getIncludedFile$FUNC_; }\n-\n-    static final MethodHandle clang_getIncludedFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getIncludedFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getIncludedFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getIncludedFile$MH() { return clang_getIncludedFile$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursor$FUNC() { return clang_getCursor$FUNC_; }\n-\n-    static final MethodHandle clang_getCursor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursor\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursor$MH() { return clang_getCursor$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorLocation$FUNC() { return clang_getCursorLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorLocation$MH() { return clang_getCursorLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorExtent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorExtent$FUNC() { return clang_getCursorExtent$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorExtent$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorExtent\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorExtent$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorExtent$MH() { return clang_getCursorExtent$MH_; }\n-\n-    static final int CXType_Invalid() { return (int)0L; }\n-\n-    static final int CXType_Unexposed() { return (int)1L; }\n-\n-    static final int CXType_Void() { return (int)2L; }\n-\n-    static final int CXType_Bool() { return (int)3L; }\n-\n-    static final int CXType_Char_U() { return (int)4L; }\n-\n-    static final int CXType_UChar() { return (int)5L; }\n-\n-    static final int CXType_Char16() { return (int)6L; }\n-\n-    static final int CXType_Char32() { return (int)7L; }\n-\n-    static final int CXType_UShort() { return (int)8L; }\n-\n-    static final int CXType_UInt() { return (int)9L; }\n-\n-    static final int CXType_ULong() { return (int)10L; }\n-\n-    static final int CXType_ULongLong() { return (int)11L; }\n-\n-    static final int CXType_UInt128() { return (int)12L; }\n-\n-    static final int CXType_Char_S() { return (int)13L; }\n-\n-    static final int CXType_SChar() { return (int)14L; }\n-\n-    static final int CXType_WChar() { return (int)15L; }\n-\n-    static final int CXType_Short() { return (int)16L; }\n-\n-    static final int CXType_Int() { return (int)17L; }\n-\n-    static final int CXType_Long() { return (int)18L; }\n-\n-    static final int CXType_LongLong() { return (int)19L; }\n-\n-    static final int CXType_Int128() { return (int)20L; }\n-\n-    static final int CXType_Float() { return (int)21L; }\n-\n-    static final int CXType_Double() { return (int)22L; }\n-\n-    static final int CXType_LongDouble() { return (int)23L; }\n-\n-    static final int CXType_NullPtr() { return (int)24L; }\n-\n-    static final int CXType_Overload() { return (int)25L; }\n-\n-    static final int CXType_Dependent() { return (int)26L; }\n-\n-    static final int CXType_ObjCId() { return (int)27L; }\n-\n-    static final int CXType_ObjCClass() { return (int)28L; }\n-\n-    static final int CXType_ObjCSel() { return (int)29L; }\n-\n-    static final int CXType_Float128() { return (int)30L; }\n-\n-    static final int CXType_Half() { return (int)31L; }\n-\n-    static final int CXType_Float16() { return (int)32L; }\n-\n-    static final int CXType_ShortAccum() { return (int)33L; }\n-\n-    static final int CXType_Accum() { return (int)34L; }\n-\n-    static final int CXType_LongAccum() { return (int)35L; }\n-\n-    static final int CXType_UShortAccum() { return (int)36L; }\n-\n-    static final int CXType_UAccum() { return (int)37L; }\n-\n-    static final int CXType_ULongAccum() { return (int)38L; }\n-\n-    static final int CXType_FirstBuiltin() { return (int)2L; }\n-\n-    static final int CXType_LastBuiltin() { return (int)38L; }\n-\n-    static final int CXType_Complex() { return (int)100L; }\n-\n-    static final int CXType_Pointer() { return (int)101L; }\n-\n-    static final int CXType_BlockPointer() { return (int)102L; }\n-\n-    static final int CXType_LValueReference() { return (int)103L; }\n-\n-    static final int CXType_RValueReference() { return (int)104L; }\n-\n-    static final int CXType_Record() { return (int)105L; }\n-\n-    static final int CXType_Enum() { return (int)106L; }\n-\n-    static final int CXType_Typedef() { return (int)107L; }\n-\n-    static final int CXType_ObjCInterface() { return (int)108L; }\n-\n-    static final int CXType_ObjCObjectPointer() { return (int)109L; }\n-\n-    static final int CXType_FunctionNoProto() { return (int)110L; }\n-\n-    static final int CXType_FunctionProto() { return (int)111L; }\n-\n-    static final int CXType_ConstantArray() { return (int)112L; }\n-\n-    static final int CXType_Vector() { return (int)113L; }\n-\n-    static final int CXType_IncompleteArray() { return (int)114L; }\n-\n-    static final int CXType_VariableArray() { return (int)115L; }\n-\n-    static final int CXType_DependentSizedArray() { return (int)116L; }\n-\n-    static final int CXType_MemberPointer() { return (int)117L; }\n-\n-    static final int CXType_Auto() { return (int)118L; }\n-\n-    static final int CXType_Elaborated() { return (int)119L; }\n-\n-    static final int CXType_Pipe() { return (int)120L; }\n-\n-    static final int CXType_OCLImage1dRO() { return (int)121L; }\n-\n-    static final int CXType_OCLImage1dArrayRO() { return (int)122L; }\n-\n-    static final int CXType_OCLImage1dBufferRO() { return (int)123L; }\n-\n-    static final int CXType_OCLImage2dRO() { return (int)124L; }\n-\n-    static final int CXType_OCLImage2dArrayRO() { return (int)125L; }\n-\n-    static final int CXType_OCLImage2dDepthRO() { return (int)126L; }\n-\n-    static final int CXType_OCLImage2dArrayDepthRO() { return (int)127L; }\n-\n-    static final int CXType_OCLImage2dMSAARO() { return (int)128L; }\n-\n-    static final int CXType_OCLImage2dArrayMSAARO() { return (int)129L; }\n-\n-    static final int CXType_OCLImage2dMSAADepthRO() { return (int)130L; }\n-\n-    static final int CXType_OCLImage2dArrayMSAADepthRO() { return (int)131L; }\n-\n-    static final int CXType_OCLImage3dRO() { return (int)132L; }\n-\n-    static final int CXType_OCLImage1dWO() { return (int)133L; }\n-\n-    static final int CXType_OCLImage1dArrayWO() { return (int)134L; }\n-\n-    static final int CXType_OCLImage1dBufferWO() { return (int)135L; }\n-\n-    static final int CXType_OCLImage2dWO() { return (int)136L; }\n-\n-    static final int CXType_OCLImage2dArrayWO() { return (int)137L; }\n-\n-    static final int CXType_OCLImage2dDepthWO() { return (int)138L; }\n-\n-    static final int CXType_OCLImage2dArrayDepthWO() { return (int)139L; }\n-\n-    static final int CXType_OCLImage2dMSAAWO() { return (int)140L; }\n-\n-    static final int CXType_OCLImage2dArrayMSAAWO() { return (int)141L; }\n-\n-    static final int CXType_OCLImage2dMSAADepthWO() { return (int)142L; }\n-\n-    static final int CXType_OCLImage2dArrayMSAADepthWO() { return (int)143L; }\n-\n-    static final int CXType_OCLImage3dWO() { return (int)144L; }\n-\n-    static final int CXType_OCLImage1dRW() { return (int)145L; }\n-\n-    static final int CXType_OCLImage1dArrayRW() { return (int)146L; }\n-\n-    static final int CXType_OCLImage1dBufferRW() { return (int)147L; }\n-\n-    static final int CXType_OCLImage2dRW() { return (int)148L; }\n-\n-    static final int CXType_OCLImage2dArrayRW() { return (int)149L; }\n-\n-    static final int CXType_OCLImage2dDepthRW() { return (int)150L; }\n-\n-    static final int CXType_OCLImage2dArrayDepthRW() { return (int)151L; }\n-\n-    static final int CXType_OCLImage2dMSAARW() { return (int)152L; }\n-\n-    static final int CXType_OCLImage2dArrayMSAARW() { return (int)153L; }\n-\n-    static final int CXType_OCLImage2dMSAADepthRW() { return (int)154L; }\n-\n-    static final int CXType_OCLImage2dArrayMSAADepthRW() { return (int)155L; }\n-\n-    static final int CXType_OCLImage3dRW() { return (int)156L; }\n-\n-    static final int CXType_OCLSampler() { return (int)157L; }\n-\n-    static final int CXType_OCLEvent() { return (int)158L; }\n-\n-    static final int CXType_OCLQueue() { return (int)159L; }\n-\n-    static final int CXType_OCLReserveID() { return (int)160L; }\n-\n-    static final int CXType_ObjCObject() { return (int)161L; }\n-\n-    static final int CXType_ObjCTypeParam() { return (int)162L; }\n-\n-    static final int CXType_Attributed() { return (int)163L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCMcePayload() { return (int)164L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCImePayload() { return (int)165L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCRefPayload() { return (int)166L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCSicPayload() { return (int)167L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCMceResult() { return (int)168L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCImeResult() { return (int)169L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCRefResult() { return (int)170L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCSicResult() { return (int)171L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout() { return (int)172L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout() { return (int)173L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin() { return (int)174L; }\n-\n-    static final int CXType_OCLIntelSubgroupAVCImeDualRefStreamin() { return (int)175L; }\n-\n-    static final int CXType_ExtVector() { return (int)176L; }\n-\n-    static final int CXCallingConv_Default() { return (int)0L; }\n-\n-    static final int CXCallingConv_C() { return (int)1L; }\n-\n-    static final int CXCallingConv_X86StdCall() { return (int)2L; }\n-\n-    static final int CXCallingConv_X86FastCall() { return (int)3L; }\n-\n-    static final int CXCallingConv_X86ThisCall() { return (int)4L; }\n-\n-    static final int CXCallingConv_X86Pascal() { return (int)5L; }\n-\n-    static final int CXCallingConv_AAPCS() { return (int)6L; }\n-\n-    static final int CXCallingConv_AAPCS_VFP() { return (int)7L; }\n-\n-    static final int CXCallingConv_X86RegCall() { return (int)8L; }\n-\n-    static final int CXCallingConv_IntelOclBicc() { return (int)9L; }\n-\n-    static final int CXCallingConv_Win64() { return (int)10L; }\n-\n-    static final int CXCallingConv_X86_64Win64() { return (int)10L; }\n-\n-    static final int CXCallingConv_X86_64SysV() { return (int)11L; }\n-\n-    static final int CXCallingConv_X86VectorCall() { return (int)12L; }\n-\n-    static final int CXCallingConv_Swift() { return (int)13L; }\n-\n-    static final int CXCallingConv_PreserveMost() { return (int)14L; }\n-\n-    static final int CXCallingConv_PreserveAll() { return (int)15L; }\n-\n-    static final int CXCallingConv_AArch64VectorCall() { return (int)16L; }\n-\n-    static final int CXCallingConv_Invalid() { return (int)100L; }\n-\n-    static final int CXCallingConv_Unexposed() { return (int)200L; }\n-\n-    static final MemoryLayout CXType$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXType$struct$LAYOUT() { return CXType$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXType$kind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXType$kind$LAYOUT() { return CXType$kind$LAYOUT_; }\n-\n-    static final VarHandle CXType$kind$VH_ = CXType$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-    static final java.lang.invoke.VarHandle CXType$kind$VH() { return CXType$kind$VH_; }\n-\n-    static final FunctionDescriptor clang_getCursorType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorType$FUNC() { return clang_getCursorType$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorType$MH() { return clang_getCursorType$MH_; }\n-\n-    static final FunctionDescriptor clang_getTypeSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypeSpelling$FUNC() { return clang_getTypeSpelling$FUNC_; }\n-\n-    static final MethodHandle clang_getTypeSpelling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTypeSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTypeSpelling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTypeSpelling$MH() { return clang_getTypeSpelling$MH_; }\n-\n-    static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC() { return clang_getTypedefDeclUnderlyingType$FUNC_; }\n-\n-    static final MethodHandle clang_getTypedefDeclUnderlyingType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTypedefDeclUnderlyingType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTypedefDeclUnderlyingType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTypedefDeclUnderlyingType$MH() { return clang_getTypedefDeclUnderlyingType$MH_; }\n-\n-    static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getEnumDeclIntegerType$FUNC() { return clang_getEnumDeclIntegerType$FUNC_; }\n-\n-    static final MethodHandle clang_getEnumDeclIntegerType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getEnumDeclIntegerType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getEnumDeclIntegerType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getEnumDeclIntegerType$MH() { return clang_getEnumDeclIntegerType$MH_; }\n-\n-    static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getEnumConstantDeclValue$FUNC() { return clang_getEnumConstantDeclValue$FUNC_; }\n-\n-    static final MethodHandle clang_getEnumConstantDeclValue$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getEnumConstantDeclValue\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-        clang_getEnumConstantDeclValue$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getEnumConstantDeclValue$MH() { return clang_getEnumConstantDeclValue$MH_; }\n-\n-    static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC() { return clang_getEnumConstantDeclUnsignedValue$FUNC_; }\n-\n-    static final MethodHandle clang_getEnumConstantDeclUnsignedValue$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getEnumConstantDeclUnsignedValue\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-        clang_getEnumConstantDeclUnsignedValue$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() { return clang_getEnumConstantDeclUnsignedValue$MH_; }\n-\n-    static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFieldDeclBitWidth$FUNC() { return clang_getFieldDeclBitWidth$FUNC_; }\n-\n-    static final MethodHandle clang_getFieldDeclBitWidth$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFieldDeclBitWidth\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getFieldDeclBitWidth$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFieldDeclBitWidth$MH() { return clang_getFieldDeclBitWidth$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getNumArguments$FUNC() { return clang_Cursor_getNumArguments$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getNumArguments$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getNumArguments\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_getNumArguments$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getNumArguments$MH() { return clang_Cursor_getNumArguments$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getArgument$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getArgument$FUNC() { return clang_Cursor_getArgument$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getArgument$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getArgument\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getArgument$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getArgument$MH() { return clang_Cursor_getArgument$MH_; }\n-\n-    static final int CXTemplateArgumentKind_Null() { return (int)0L; }\n-\n-    static final int CXTemplateArgumentKind_Type() { return (int)1L; }\n-\n-    static final int CXTemplateArgumentKind_Declaration() { return (int)2L; }\n-\n-    static final int CXTemplateArgumentKind_NullPtr() { return (int)3L; }\n-\n-    static final int CXTemplateArgumentKind_Integral() { return (int)4L; }\n-\n-    static final int CXTemplateArgumentKind_Template() { return (int)5L; }\n-\n-    static final int CXTemplateArgumentKind_TemplateExpansion() { return (int)6L; }\n-\n-    static final int CXTemplateArgumentKind_Expression() { return (int)7L; }\n-\n-    static final int CXTemplateArgumentKind_Pack() { return (int)8L; }\n-\n-    static final int CXTemplateArgumentKind_Invalid() { return (int)9L; }\n-\n-    static final FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC() { return clang_Cursor_getNumTemplateArguments$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getNumTemplateArguments$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getNumTemplateArguments\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_getNumTemplateArguments$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getNumTemplateArguments$MH() { return clang_Cursor_getNumTemplateArguments$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC() { return clang_Cursor_getTemplateArgumentKind$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getTemplateArgumentKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getTemplateArgumentKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)I\",\n-        clang_Cursor_getTemplateArgumentKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentKind$MH() { return clang_Cursor_getTemplateArgumentKind$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC() { return clang_Cursor_getTemplateArgumentType$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getTemplateArgumentType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getTemplateArgumentType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getTemplateArgumentType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentType$MH() { return clang_Cursor_getTemplateArgumentType$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC() { return clang_Cursor_getTemplateArgumentValue$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getTemplateArgumentValue$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getTemplateArgumentValue\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)J\",\n-        clang_Cursor_getTemplateArgumentValue$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentValue$MH() { return clang_Cursor_getTemplateArgumentValue$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC() { return clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getTemplateArgumentUnsignedValue\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)J\",\n-        clang_Cursor_getTemplateArgumentUnsignedValue$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH() { return clang_Cursor_getTemplateArgumentUnsignedValue$MH_; }\n-\n-    static final FunctionDescriptor clang_equalTypes$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_equalTypes$FUNC() { return clang_equalTypes$FUNC_; }\n-\n-    static final MethodHandle clang_equalTypes$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_equalTypes\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_equalTypes$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_equalTypes$MH() { return clang_equalTypes$MH_; }\n-\n-    static final FunctionDescriptor clang_getCanonicalType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCanonicalType$FUNC() { return clang_getCanonicalType$FUNC_; }\n-\n-    static final MethodHandle clang_getCanonicalType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCanonicalType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCanonicalType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCanonicalType$MH() { return clang_getCanonicalType$MH_; }\n-\n-    static final FunctionDescriptor clang_getLocalUnqualifiedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getLocalUnqualifiedType$FUNC() { return clang_getLocalUnqualifiedType$FUNC_; }\n-\n-    static final MethodHandle clang_getLocalUnqualifiedType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getLocalUnqualifiedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getLocalUnqualifiedType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getLocalUnqualifiedType$MH() { return clang_getLocalUnqualifiedType$MH_; }\n-\n-    static final FunctionDescriptor clang_isConstQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isConstQualifiedType$FUNC() { return clang_isConstQualifiedType$FUNC_; }\n-\n-    static final MethodHandle clang_isConstQualifiedType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isConstQualifiedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isConstQualifiedType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isConstQualifiedType$MH() { return clang_isConstQualifiedType$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC() { return clang_Cursor_isMacroFunctionLike$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isMacroFunctionLike$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isMacroFunctionLike\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isMacroFunctionLike$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isMacroFunctionLike$MH() { return clang_Cursor_isMacroFunctionLike$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC() { return clang_Cursor_isMacroBuiltin$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isMacroBuiltin$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isMacroBuiltin\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isMacroBuiltin$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isMacroBuiltin$MH() { return clang_Cursor_isMacroBuiltin$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC() { return clang_Cursor_isFunctionInlined$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isFunctionInlined$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isFunctionInlined\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isFunctionInlined$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isFunctionInlined$MH() { return clang_Cursor_isFunctionInlined$MH_; }\n-\n-    static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isVolatileQualifiedType$FUNC() { return clang_isVolatileQualifiedType$FUNC_; }\n-\n-    static final MethodHandle clang_isVolatileQualifiedType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isVolatileQualifiedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isVolatileQualifiedType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isVolatileQualifiedType$MH() { return clang_isVolatileQualifiedType$MH_; }\n-\n-    static final FunctionDescriptor clang_isRestrictQualifiedType$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isRestrictQualifiedType$FUNC() { return clang_isRestrictQualifiedType$FUNC_; }\n-\n-    static final MethodHandle clang_isRestrictQualifiedType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isRestrictQualifiedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isRestrictQualifiedType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isRestrictQualifiedType$MH() { return clang_isRestrictQualifiedType$MH_; }\n-\n-    static final FunctionDescriptor clang_getAddressSpace$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getAddressSpace$FUNC() { return clang_getAddressSpace$FUNC_; }\n-\n-    static final MethodHandle clang_getAddressSpace$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getAddressSpace\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getAddressSpace$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getAddressSpace$MH() { return clang_getAddressSpace$MH_; }\n-\n-    static final FunctionDescriptor clang_getTypedefName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypedefName$FUNC() { return clang_getTypedefName$FUNC_; }\n-\n-    static final MethodHandle clang_getTypedefName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTypedefName\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTypedefName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTypedefName$MH() { return clang_getTypedefName$MH_; }\n-\n-    static final FunctionDescriptor clang_getPointeeType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getPointeeType$FUNC() { return clang_getPointeeType$FUNC_; }\n-\n-    static final MethodHandle clang_getPointeeType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getPointeeType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getPointeeType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getPointeeType$MH() { return clang_getPointeeType$MH_; }\n-\n-    static final FunctionDescriptor clang_getTypeDeclaration$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypeDeclaration$FUNC() { return clang_getTypeDeclaration$FUNC_; }\n-\n-    static final MethodHandle clang_getTypeDeclaration$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTypeDeclaration\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTypeDeclaration$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTypeDeclaration$MH() { return clang_getTypeDeclaration$MH_; }\n-\n-    static final FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC() { return clang_getDeclObjCTypeEncoding$FUNC_; }\n-\n-    static final MethodHandle clang_getDeclObjCTypeEncoding$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDeclObjCTypeEncoding\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getDeclObjCTypeEncoding$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDeclObjCTypeEncoding$MH() { return clang_getDeclObjCTypeEncoding$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getObjCEncoding$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCEncoding$FUNC() { return clang_Type_getObjCEncoding$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getObjCEncoding$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getObjCEncoding\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getObjCEncoding$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getObjCEncoding$MH() { return clang_Type_getObjCEncoding$MH_; }\n-\n-    static final FunctionDescriptor clang_getTypeKindSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypeKindSpelling$FUNC() { return clang_getTypeKindSpelling$FUNC_; }\n-\n-    static final MethodHandle clang_getTypeKindSpelling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTypeKindSpelling\",\n-        \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTypeKindSpelling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTypeKindSpelling$MH() { return clang_getTypeKindSpelling$MH_; }\n-\n-    static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC() { return clang_getFunctionTypeCallingConv$FUNC_; }\n-\n-    static final MethodHandle clang_getFunctionTypeCallingConv$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getFunctionTypeCallingConv\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getFunctionTypeCallingConv$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getFunctionTypeCallingConv$MH() { return clang_getFunctionTypeCallingConv$MH_; }\n-\n-    static final FunctionDescriptor clang_getResultType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getResultType$FUNC() { return clang_getResultType$FUNC_; }\n-\n-    static final MethodHandle clang_getResultType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getResultType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getResultType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getResultType$MH() { return clang_getResultType$MH_; }\n-\n-    static final FunctionDescriptor clang_getExceptionSpecificationType$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getExceptionSpecificationType$FUNC() { return clang_getExceptionSpecificationType$FUNC_; }\n-\n-    static final MethodHandle clang_getExceptionSpecificationType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getExceptionSpecificationType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getExceptionSpecificationType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getExceptionSpecificationType$MH() { return clang_getExceptionSpecificationType$MH_; }\n-\n-    static final FunctionDescriptor clang_getNumArgTypes$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumArgTypes$FUNC() { return clang_getNumArgTypes$FUNC_; }\n-\n-    static final MethodHandle clang_getNumArgTypes$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNumArgTypes\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getNumArgTypes$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNumArgTypes$MH() { return clang_getNumArgTypes$MH_; }\n-\n-    static final FunctionDescriptor clang_getArgType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getArgType$FUNC() { return clang_getArgType$FUNC_; }\n-\n-    static final MethodHandle clang_getArgType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getArgType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getArgType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getArgType$MH() { return clang_getArgType$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC() { return clang_Type_getObjCObjectBaseType$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getObjCObjectBaseType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getObjCObjectBaseType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getObjCObjectBaseType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getObjCObjectBaseType$MH() { return clang_Type_getObjCObjectBaseType$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC() { return clang_Type_getNumObjCProtocolRefs$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getNumObjCProtocolRefs$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getNumObjCProtocolRefs\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Type_getNumObjCProtocolRefs$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getNumObjCProtocolRefs$MH() { return clang_Type_getNumObjCProtocolRefs$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC() { return clang_Type_getObjCProtocolDecl$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getObjCProtocolDecl$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getObjCProtocolDecl\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getObjCProtocolDecl$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getObjCProtocolDecl$MH() { return clang_Type_getObjCProtocolDecl$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC() { return clang_Type_getNumObjCTypeArgs$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getNumObjCTypeArgs$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getNumObjCTypeArgs\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Type_getNumObjCTypeArgs$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getNumObjCTypeArgs$MH() { return clang_Type_getNumObjCTypeArgs$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getObjCTypeArg$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getObjCTypeArg$FUNC() { return clang_Type_getObjCTypeArg$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getObjCTypeArg$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getObjCTypeArg\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getObjCTypeArg$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getObjCTypeArg$MH() { return clang_Type_getObjCTypeArg$MH_; }\n-\n-    static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isFunctionTypeVariadic$FUNC() { return clang_isFunctionTypeVariadic$FUNC_; }\n-\n-    static final MethodHandle clang_isFunctionTypeVariadic$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isFunctionTypeVariadic\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isFunctionTypeVariadic$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isFunctionTypeVariadic$MH() { return clang_isFunctionTypeVariadic$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorResultType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorResultType$FUNC() { return clang_getCursorResultType$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorResultType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorResultType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorResultType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorResultType$MH() { return clang_getCursorResultType$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC() { return clang_getCursorExceptionSpecificationType$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorExceptionSpecificationType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorExceptionSpecificationType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCursorExceptionSpecificationType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorExceptionSpecificationType$MH() { return clang_getCursorExceptionSpecificationType$MH_; }\n-\n-    static final FunctionDescriptor clang_isPODType$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isPODType$FUNC() { return clang_isPODType$FUNC_; }\n-\n-    static final MethodHandle clang_isPODType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isPODType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isPODType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isPODType$MH() { return clang_isPODType$MH_; }\n-\n-    static final FunctionDescriptor clang_getElementType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getElementType$FUNC() { return clang_getElementType$FUNC_; }\n-\n-    static final MethodHandle clang_getElementType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getElementType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getElementType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getElementType$MH() { return clang_getElementType$MH_; }\n-\n-    static final FunctionDescriptor clang_getNumElements$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumElements$FUNC() { return clang_getNumElements$FUNC_; }\n-\n-    static final MethodHandle clang_getNumElements$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNumElements\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-        clang_getNumElements$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNumElements$MH() { return clang_getNumElements$MH_; }\n-\n-    static final FunctionDescriptor clang_getArrayElementType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getArrayElementType$FUNC() { return clang_getArrayElementType$FUNC_; }\n-\n-    static final MethodHandle clang_getArrayElementType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getArrayElementType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getArrayElementType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getArrayElementType$MH() { return clang_getArrayElementType$MH_; }\n-\n-    static final FunctionDescriptor clang_getArraySize$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getArraySize$FUNC() { return clang_getArraySize$FUNC_; }\n-\n-    static final MethodHandle clang_getArraySize$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getArraySize\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-        clang_getArraySize$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getArraySize$MH() { return clang_getArraySize$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getNamedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNamedType$FUNC() { return clang_Type_getNamedType$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getNamedType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getNamedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getNamedType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getNamedType$MH() { return clang_Type_getNamedType$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC() { return clang_Type_isTransparentTagTypedef$FUNC_; }\n-\n-    static final MethodHandle clang_Type_isTransparentTagTypedef$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_isTransparentTagTypedef\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Type_isTransparentTagTypedef$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_isTransparentTagTypedef$MH() { return clang_Type_isTransparentTagTypedef$MH_; }\n-\n-    static final int CXTypeNullability_NonNull() { return (int)0L; }\n-\n-    static final int CXTypeNullability_Nullable() { return (int)1L; }\n-\n-    static final int CXTypeNullability_Unspecified() { return (int)2L; }\n-\n-    static final int CXTypeNullability_Invalid() { return (int)3L; }\n-\n-    static final FunctionDescriptor clang_Type_getNullability$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNullability$FUNC() { return clang_Type_getNullability$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getNullability$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getNullability\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Type_getNullability$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getNullability$MH() { return clang_Type_getNullability$MH_; }\n-\n-    static final int CXTypeLayoutError_Invalid() { return (int)-1L; }\n-\n-    static final int CXTypeLayoutError_Incomplete() { return (int)-2L; }\n-\n-    static final int CXTypeLayoutError_Dependent() { return (int)-3L; }\n-\n-    static final int CXTypeLayoutError_NotConstantSize() { return (int)-4L; }\n-\n-    static final int CXTypeLayoutError_InvalidFieldName() { return (int)-5L; }\n-\n-    static final int CXTypeLayoutError_Undeduced() { return (int)-6L; }\n-\n-    static final FunctionDescriptor clang_Type_getAlignOf$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getAlignOf$FUNC() { return clang_Type_getAlignOf$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getAlignOf$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getAlignOf\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-        clang_Type_getAlignOf$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getAlignOf$MH() { return clang_Type_getAlignOf$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getClassType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getClassType$FUNC() { return clang_Type_getClassType$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getClassType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getClassType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getClassType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getClassType$MH() { return clang_Type_getClassType$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getSizeOf$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getSizeOf$FUNC() { return clang_Type_getSizeOf$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getSizeOf$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getSizeOf\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-        clang_Type_getSizeOf$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getSizeOf$MH() { return clang_Type_getSizeOf$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getOffsetOf$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getOffsetOf$FUNC() { return clang_Type_getOffsetOf$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getOffsetOf$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getOffsetOf\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-        clang_Type_getOffsetOf$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getOffsetOf$MH() { return clang_Type_getOffsetOf$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getModifiedType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getModifiedType$FUNC() { return clang_Type_getModifiedType$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getModifiedType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getModifiedType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getModifiedType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getModifiedType$MH() { return clang_Type_getModifiedType$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC() { return clang_Cursor_getOffsetOfField$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getOffsetOfField$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getOffsetOfField\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-        clang_Cursor_getOffsetOfField$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getOffsetOfField$MH() { return clang_Cursor_getOffsetOfField$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isAnonymous$FUNC() { return clang_Cursor_isAnonymous$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isAnonymous$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isAnonymous\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isAnonymous$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isAnonymous$MH() { return clang_Cursor_isAnonymous$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC() { return clang_Cursor_isAnonymousRecordDecl$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isAnonymousRecordDecl\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isAnonymousRecordDecl$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() { return clang_Cursor_isAnonymousRecordDecl$MH_; }\n-\n-}\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h$constants_0.java","additions":0,"deletions":4151,"binary":false,"changes":4151,"status":"deleted"},{"patch":"@@ -1,3651 +0,0 @@\n-\/*\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-\/\/ Generated by jextract\n-\n-package jdk.internal.clang.libclang;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import jdk.incubator.foreign.*;\n-import jdk.incubator.foreign.MemoryLayout.PathElement;\n-import static jdk.incubator.foreign.CLinker.*;\n-\n-class Index_h$constants_1 extends Index_h$constants_0 {\n-    Index_h$constants_1() {}\n-    static final FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC() { return clang_Cursor_isInlineNamespace$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isInlineNamespace$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isInlineNamespace\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isInlineNamespace$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isInlineNamespace$MH() { return clang_Cursor_isInlineNamespace$MH_; }\n-\n-    static final int CXRefQualifier_None() { return (int)0L; }\n-\n-    static final int CXRefQualifier_LValue() { return (int)1L; }\n-\n-    static final int CXRefQualifier_RValue() { return (int)2L; }\n-\n-    static final FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC() { return clang_Type_getNumTemplateArguments$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getNumTemplateArguments$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getNumTemplateArguments\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Type_getNumTemplateArguments$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getNumTemplateArguments$MH() { return clang_Type_getNumTemplateArguments$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC() { return clang_Type_getTemplateArgumentAsType$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getTemplateArgumentAsType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getTemplateArgumentAsType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Type_getTemplateArgumentAsType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getTemplateArgumentAsType$MH() { return clang_Type_getTemplateArgumentAsType$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC() { return clang_Type_getCXXRefQualifier$FUNC_; }\n-\n-    static final MethodHandle clang_Type_getCXXRefQualifier$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_getCXXRefQualifier\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Type_getCXXRefQualifier$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_getCXXRefQualifier$MH() { return clang_Type_getCXXRefQualifier$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isBitField$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isBitField$FUNC() { return clang_Cursor_isBitField$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isBitField$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isBitField\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isBitField$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isBitField$MH() { return clang_Cursor_isBitField$MH_; }\n-\n-    static final FunctionDescriptor clang_isVirtualBase$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isVirtualBase$FUNC() { return clang_isVirtualBase$FUNC_; }\n-\n-    static final MethodHandle clang_isVirtualBase$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isVirtualBase\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isVirtualBase$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isVirtualBase$MH() { return clang_isVirtualBase$MH_; }\n-\n-    static final int CX_CXXInvalidAccessSpecifier() { return (int)0L; }\n-\n-    static final int CX_CXXPublic() { return (int)1L; }\n-\n-    static final int CX_CXXProtected() { return (int)2L; }\n-\n-    static final int CX_CXXPrivate() { return (int)3L; }\n-\n-    static final FunctionDescriptor clang_getCXXAccessSpecifier$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCXXAccessSpecifier$FUNC() { return clang_getCXXAccessSpecifier$FUNC_; }\n-\n-    static final MethodHandle clang_getCXXAccessSpecifier$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCXXAccessSpecifier\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getCXXAccessSpecifier$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCXXAccessSpecifier$MH() { return clang_getCXXAccessSpecifier$MH_; }\n-\n-    static final int CX_SC_Invalid() { return (int)0L; }\n-\n-    static final int CX_SC_None() { return (int)1L; }\n-\n-    static final int CX_SC_Extern() { return (int)2L; }\n-\n-    static final int CX_SC_Static() { return (int)3L; }\n-\n-    static final int CX_SC_PrivateExtern() { return (int)4L; }\n-\n-    static final int CX_SC_OpenCLWorkGroupLocal() { return (int)5L; }\n-\n-    static final int CX_SC_Auto() { return (int)6L; }\n-\n-    static final int CX_SC_Register() { return (int)7L; }\n-\n-    static final FunctionDescriptor clang_Cursor_getStorageClass$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getStorageClass$FUNC() { return clang_Cursor_getStorageClass$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getStorageClass$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getStorageClass\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_getStorageClass$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getStorageClass$MH() { return clang_Cursor_getStorageClass$MH_; }\n-\n-    static final FunctionDescriptor clang_getNumOverloadedDecls$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumOverloadedDecls$FUNC() { return clang_getNumOverloadedDecls$FUNC_; }\n-\n-    static final MethodHandle clang_getNumOverloadedDecls$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNumOverloadedDecls\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getNumOverloadedDecls$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNumOverloadedDecls$MH() { return clang_getNumOverloadedDecls$MH_; }\n-\n-    static final FunctionDescriptor clang_getOverloadedDecl$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getOverloadedDecl$FUNC() { return clang_getOverloadedDecl$FUNC_; }\n-\n-    static final MethodHandle clang_getOverloadedDecl$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getOverloadedDecl\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getOverloadedDecl$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getOverloadedDecl$MH() { return clang_getOverloadedDecl$MH_; }\n-\n-    static final FunctionDescriptor clang_getIBOutletCollectionType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getIBOutletCollectionType$FUNC() { return clang_getIBOutletCollectionType$FUNC_; }\n-\n-    static final MethodHandle clang_getIBOutletCollectionType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getIBOutletCollectionType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getIBOutletCollectionType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getIBOutletCollectionType$MH() { return clang_getIBOutletCollectionType$MH_; }\n-\n-    static final int CXChildVisit_Break() { return (int)0L; }\n-\n-    static final int CXChildVisit_Continue() { return (int)1L; }\n-\n-    static final int CXChildVisit_Recurse() { return (int)2L; }\n-\n-    static final FunctionDescriptor clang_visitChildren$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildren$FUNC() { return clang_visitChildren$FUNC_; }\n-\n-    static final MethodHandle clang_visitChildren$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_visitChildren\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_visitChildren$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_visitChildren$MH() { return clang_visitChildren$MH_; }\n-\n-    static final FunctionDescriptor clang_visitChildren$visitor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildren$visitor$FUNC() { return clang_visitChildren$visitor$FUNC_; }\n-\n-    static final FunctionDescriptor clang_visitTemplateSpecializations$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializations$FUNC() { return clang_visitTemplateSpecializations$FUNC_; }\n-\n-    static final MethodHandle clang_visitTemplateSpecializations$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_visitTemplateSpecializations\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_visitTemplateSpecializations$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_visitTemplateSpecializations$MH() { return clang_visitTemplateSpecializations$MH_; }\n-\n-    static final FunctionDescriptor clang_visitTemplateSpecializations$visitor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializations$visitor$FUNC() { return clang_visitTemplateSpecializations$visitor$FUNC_; }\n-\n-    static final FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC() { return clang_visitTemplateSpecializationChildren$FUNC_; }\n-\n-    static final MethodHandle clang_visitTemplateSpecializationChildren$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_visitTemplateSpecializationChildren\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_visitTemplateSpecializationChildren$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_visitTemplateSpecializationChildren$MH() { return clang_visitTemplateSpecializationChildren$MH_; }\n-\n-    static final FunctionDescriptor clang_visitTemplateSpecializationChildren$visitor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitTemplateSpecializationChildren$visitor$FUNC() { return clang_visitTemplateSpecializationChildren$visitor$FUNC_; }\n-\n-    static final FunctionDescriptor clang_visitChildrenWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildrenWithBlock$FUNC() { return clang_visitChildrenWithBlock$FUNC_; }\n-\n-    static final MethodHandle clang_visitChildrenWithBlock$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_visitChildrenWithBlock\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_visitChildrenWithBlock$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_visitChildrenWithBlock$MH() { return clang_visitChildrenWithBlock$MH_; }\n-\n-    static final FunctionDescriptor clang_visitChildrenWithBlock$block$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_visitChildrenWithBlock$block$FUNC() { return clang_visitChildrenWithBlock$block$FUNC_; }\n-\n-    static final FunctionDescriptor clang_getCursorUSR$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorUSR$FUNC() { return clang_getCursorUSR$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorUSR$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorUSR\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorUSR$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorUSR$MH() { return clang_getCursorUSR$MH_; }\n-\n-    static final FunctionDescriptor clang_constructUSR_ObjCClass$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCClass$FUNC() { return clang_constructUSR_ObjCClass$FUNC_; }\n-\n-    static final MethodHandle clang_constructUSR_ObjCClass$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_constructUSR_ObjCClass\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_constructUSR_ObjCClass$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCClass$MH() { return clang_constructUSR_ObjCClass$MH_; }\n-\n-    static final FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC() { return clang_constructUSR_ObjCCategory$FUNC_; }\n-\n-    static final MethodHandle clang_constructUSR_ObjCCategory$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_constructUSR_ObjCCategory\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_constructUSR_ObjCCategory$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCCategory$MH() { return clang_constructUSR_ObjCCategory$MH_; }\n-\n-    static final FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC() { return clang_constructUSR_ObjCProtocol$FUNC_; }\n-\n-    static final MethodHandle clang_constructUSR_ObjCProtocol$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_constructUSR_ObjCProtocol\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_constructUSR_ObjCProtocol$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCProtocol$MH() { return clang_constructUSR_ObjCProtocol$MH_; }\n-\n-    static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC() { return clang_constructUSR_ObjCIvar$FUNC_; }\n-\n-    static final MethodHandle clang_constructUSR_ObjCIvar$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_constructUSR_ObjCIvar\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_constructUSR_ObjCIvar$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCIvar$MH() { return clang_constructUSR_ObjCIvar$MH_; }\n-\n-    static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_INT,\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC() { return clang_constructUSR_ObjCMethod$FUNC_; }\n-\n-    static final MethodHandle clang_constructUSR_ObjCMethod$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_constructUSR_ObjCMethod\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_constructUSR_ObjCMethod$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCMethod$MH() { return clang_constructUSR_ObjCMethod$MH_; }\n-\n-    static final FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC() { return clang_constructUSR_ObjCProperty$FUNC_; }\n-\n-    static final MethodHandle clang_constructUSR_ObjCProperty$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_constructUSR_ObjCProperty\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_constructUSR_ObjCProperty$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_constructUSR_ObjCProperty$MH() { return clang_constructUSR_ObjCProperty$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorSpelling$FUNC() { return clang_getCursorSpelling$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorSpelling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorSpelling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorSpelling$MH() { return clang_getCursorSpelling$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC() { return clang_Cursor_getSpellingNameRange$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getSpellingNameRange$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getSpellingNameRange\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getSpellingNameRange$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getSpellingNameRange$MH() { return clang_Cursor_getSpellingNameRange$MH_; }\n-\n-    static final int CXPrintingPolicy_Indentation() { return (int)0L; }\n-\n-    static final int CXPrintingPolicy_SuppressSpecifiers() { return (int)1L; }\n-\n-    static final int CXPrintingPolicy_SuppressTagKeyword() { return (int)2L; }\n-\n-    static final int CXPrintingPolicy_IncludeTagDefinition() { return (int)3L; }\n-\n-    static final int CXPrintingPolicy_SuppressScope() { return (int)4L; }\n-\n-    static final int CXPrintingPolicy_SuppressUnwrittenScope() { return (int)5L; }\n-\n-    static final int CXPrintingPolicy_SuppressInitializers() { return (int)6L; }\n-\n-    static final int CXPrintingPolicy_ConstantArraySizeAsWritten() { return (int)7L; }\n-\n-    static final int CXPrintingPolicy_AnonymousTagLocations() { return (int)8L; }\n-\n-    static final int CXPrintingPolicy_SuppressStrongLifetime() { return (int)9L; }\n-\n-    static final int CXPrintingPolicy_SuppressLifetimeQualifiers() { return (int)10L; }\n-\n-    static final int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() { return (int)11L; }\n-\n-    static final int CXPrintingPolicy_Bool() { return (int)12L; }\n-\n-    static final int CXPrintingPolicy_Restrict() { return (int)13L; }\n-\n-    static final int CXPrintingPolicy_Alignof() { return (int)14L; }\n-\n-    static final int CXPrintingPolicy_UnderscoreAlignof() { return (int)15L; }\n-\n-    static final int CXPrintingPolicy_UseVoidForZeroParams() { return (int)16L; }\n-\n-    static final int CXPrintingPolicy_TerseOutput() { return (int)17L; }\n-\n-    static final int CXPrintingPolicy_PolishForDeclaration() { return (int)18L; }\n-\n-    static final int CXPrintingPolicy_Half() { return (int)19L; }\n-\n-    static final int CXPrintingPolicy_MSWChar() { return (int)20L; }\n-\n-    static final int CXPrintingPolicy_IncludeNewlines() { return (int)21L; }\n-\n-    static final int CXPrintingPolicy_MSVCFormatting() { return (int)22L; }\n-\n-    static final int CXPrintingPolicy_ConstantsAsWritten() { return (int)23L; }\n-\n-    static final int CXPrintingPolicy_SuppressImplicitBase() { return (int)24L; }\n-\n-    static final int CXPrintingPolicy_FullyQualifiedName() { return (int)25L; }\n-\n-    static final int CXPrintingPolicy_LastProperty() { return (int)25L; }\n-\n-    static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC() { return clang_PrintingPolicy_getProperty$FUNC_; }\n-\n-    static final MethodHandle clang_PrintingPolicy_getProperty$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_PrintingPolicy_getProperty\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_PrintingPolicy_getProperty$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_PrintingPolicy_getProperty$MH() { return clang_PrintingPolicy_getProperty$MH_; }\n-\n-    static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC() { return clang_PrintingPolicy_setProperty$FUNC_; }\n-\n-    static final MethodHandle clang_PrintingPolicy_setProperty$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_PrintingPolicy_setProperty\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;II)V\",\n-        clang_PrintingPolicy_setProperty$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_PrintingPolicy_setProperty$MH() { return clang_PrintingPolicy_setProperty$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorPrintingPolicy$FUNC() { return clang_getCursorPrintingPolicy$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorPrintingPolicy$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorPrintingPolicy\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getCursorPrintingPolicy$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorPrintingPolicy$MH() { return clang_getCursorPrintingPolicy$MH_; }\n-\n-    static final FunctionDescriptor clang_PrintingPolicy_dispose$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_PrintingPolicy_dispose$FUNC() { return clang_PrintingPolicy_dispose$FUNC_; }\n-\n-    static final MethodHandle clang_PrintingPolicy_dispose$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_PrintingPolicy_dispose\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_PrintingPolicy_dispose$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_PrintingPolicy_dispose$MH() { return clang_PrintingPolicy_dispose$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorPrettyPrinted$FUNC() { return clang_getCursorPrettyPrinted$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorPrettyPrinted$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorPrettyPrinted\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorPrettyPrinted$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorPrettyPrinted$MH() { return clang_getCursorPrettyPrinted$MH_; }\n-\n-    static final FunctionDescriptor clang_getTypePrintingPolicy$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypePrintingPolicy$FUNC() { return clang_getTypePrintingPolicy$FUNC_; }\n-\n-    static final MethodHandle clang_getTypePrintingPolicy$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTypePrintingPolicy\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getTypePrintingPolicy$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTypePrintingPolicy$MH() { return clang_getTypePrintingPolicy$MH_; }\n-\n-    static final FunctionDescriptor clang_getTypePrettyPrinted$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTypePrettyPrinted$FUNC() { return clang_getTypePrettyPrinted$FUNC_; }\n-\n-    static final MethodHandle clang_getTypePrettyPrinted$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTypePrettyPrinted\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTypePrettyPrinted$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTypePrettyPrinted$MH() { return clang_getTypePrettyPrinted$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorDisplayName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorDisplayName$FUNC() { return clang_getCursorDisplayName$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorDisplayName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorDisplayName\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorDisplayName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorDisplayName$MH() { return clang_getCursorDisplayName$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorReferenced$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorReferenced$FUNC() { return clang_getCursorReferenced$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorReferenced$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorReferenced\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorReferenced$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorReferenced$MH() { return clang_getCursorReferenced$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorDefinition$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorDefinition$FUNC() { return clang_getCursorDefinition$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorDefinition$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorDefinition\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorDefinition$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorDefinition$MH() { return clang_getCursorDefinition$MH_; }\n-\n-    static final FunctionDescriptor clang_isCursorDefinition$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_isCursorDefinition$FUNC() { return clang_isCursorDefinition$FUNC_; }\n-\n-    static final MethodHandle clang_isCursorDefinition$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_isCursorDefinition\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_isCursorDefinition$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_isCursorDefinition$MH() { return clang_isCursorDefinition$MH_; }\n-\n-    static final FunctionDescriptor clang_getCanonicalCursor$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCanonicalCursor$FUNC() { return clang_getCanonicalCursor$FUNC_; }\n-\n-    static final MethodHandle clang_getCanonicalCursor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCanonicalCursor\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCanonicalCursor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCanonicalCursor$MH() { return clang_getCanonicalCursor$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC() { return clang_Cursor_getObjCSelectorIndex$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getObjCSelectorIndex$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getObjCSelectorIndex\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_getObjCSelectorIndex$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCSelectorIndex$MH() { return clang_Cursor_getObjCSelectorIndex$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isDynamicCall$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isDynamicCall$FUNC() { return clang_Cursor_isDynamicCall$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isDynamicCall$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isDynamicCall\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isDynamicCall$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isDynamicCall$MH() { return clang_Cursor_isDynamicCall$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getReceiverType$FUNC() { return clang_Cursor_getReceiverType$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getReceiverType$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getReceiverType\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getReceiverType$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getReceiverType$MH() { return clang_Cursor_getReceiverType$MH_; }\n-\n-    static final int CXObjCPropertyAttr_noattr() { return (int)0L; }\n-\n-    static final int CXObjCPropertyAttr_readonly() { return (int)1L; }\n-\n-    static final int CXObjCPropertyAttr_getter() { return (int)2L; }\n-\n-    static final int CXObjCPropertyAttr_assign() { return (int)4L; }\n-\n-    static final int CXObjCPropertyAttr_readwrite() { return (int)8L; }\n-\n-    static final int CXObjCPropertyAttr_retain() { return (int)16L; }\n-\n-    static final int CXObjCPropertyAttr_copy() { return (int)32L; }\n-\n-    static final int CXObjCPropertyAttr_nonatomic() { return (int)64L; }\n-\n-    static final int CXObjCPropertyAttr_setter() { return (int)128L; }\n-\n-    static final int CXObjCPropertyAttr_atomic() { return (int)256L; }\n-\n-    static final int CXObjCPropertyAttr_weak() { return (int)512L; }\n-\n-    static final int CXObjCPropertyAttr_strong() { return (int)1024L; }\n-\n-    static final int CXObjCPropertyAttr_unsafe_unretained() { return (int)2048L; }\n-\n-    static final int CXObjCPropertyAttr_class() { return (int)4096L; }\n-\n-    static final FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC() { return clang_Cursor_getObjCPropertyAttributes$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getObjCPropertyAttributes$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getObjCPropertyAttributes\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)I\",\n-        clang_Cursor_getObjCPropertyAttributes$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() { return clang_Cursor_getObjCPropertyAttributes$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC() { return clang_Cursor_getObjCPropertyGetterName$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getObjCPropertyGetterName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getObjCPropertyGetterName\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getObjCPropertyGetterName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() { return clang_Cursor_getObjCPropertyGetterName$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC() { return clang_Cursor_getObjCPropertySetterName$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getObjCPropertySetterName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getObjCPropertySetterName\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getObjCPropertySetterName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCPropertySetterName$MH() { return clang_Cursor_getObjCPropertySetterName$MH_; }\n-\n-    static final int CXObjCDeclQualifier_None() { return (int)0L; }\n-\n-    static final int CXObjCDeclQualifier_In() { return (int)1L; }\n-\n-    static final int CXObjCDeclQualifier_Inout() { return (int)2L; }\n-\n-    static final int CXObjCDeclQualifier_Out() { return (int)4L; }\n-\n-    static final int CXObjCDeclQualifier_Bycopy() { return (int)8L; }\n-\n-    static final int CXObjCDeclQualifier_Byref() { return (int)16L; }\n-\n-    static final int CXObjCDeclQualifier_Oneway() { return (int)32L; }\n-\n-    static final FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC() { return clang_Cursor_getObjCDeclQualifiers$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getObjCDeclQualifiers$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getObjCDeclQualifiers\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_getObjCDeclQualifiers$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() { return clang_Cursor_getObjCDeclQualifiers$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isObjCOptional$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isObjCOptional$FUNC() { return clang_Cursor_isObjCOptional$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isObjCOptional$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isObjCOptional\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isObjCOptional$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isObjCOptional$MH() { return clang_Cursor_isObjCOptional$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isVariadic$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isVariadic$FUNC() { return clang_Cursor_isVariadic$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isVariadic$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isVariadic\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_Cursor_isVariadic$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isVariadic$MH() { return clang_Cursor_isVariadic$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC() { return clang_Cursor_isExternalSymbol$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_isExternalSymbol$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_isExternalSymbol\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_Cursor_isExternalSymbol$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_isExternalSymbol$MH() { return clang_Cursor_isExternalSymbol$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getCommentRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getCommentRange$FUNC() { return clang_Cursor_getCommentRange$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getCommentRange$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getCommentRange\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getCommentRange$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getCommentRange$MH() { return clang_Cursor_getCommentRange$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getRawCommentText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getRawCommentText$FUNC() { return clang_Cursor_getRawCommentText$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getRawCommentText$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getRawCommentText\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getRawCommentText$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getRawCommentText$MH() { return clang_Cursor_getRawCommentText$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC() { return clang_Cursor_getBriefCommentText$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getBriefCommentText$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getBriefCommentText\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getBriefCommentText$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getBriefCommentText$MH() { return clang_Cursor_getBriefCommentText$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getMangling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getMangling$FUNC() { return clang_Cursor_getMangling$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getMangling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getMangling\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Cursor_getMangling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getMangling$MH() { return clang_Cursor_getMangling$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getCXXManglings$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getCXXManglings$FUNC() { return clang_Cursor_getCXXManglings$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getCXXManglings$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getCXXManglings\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Cursor_getCXXManglings$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getCXXManglings$MH() { return clang_Cursor_getCXXManglings$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getObjCManglings$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getObjCManglings$FUNC() { return clang_Cursor_getObjCManglings$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getObjCManglings$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getObjCManglings\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Cursor_getObjCManglings$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getObjCManglings$MH() { return clang_Cursor_getObjCManglings$MH_; }\n-\n-    static final FunctionDescriptor clang_Cursor_getModule$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_getModule$FUNC() { return clang_Cursor_getModule$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_getModule$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_getModule\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Cursor_getModule$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_getModule$MH() { return clang_Cursor_getModule$MH_; }\n-\n-    static final FunctionDescriptor clang_getModuleForFile$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getModuleForFile$FUNC() { return clang_getModuleForFile$FUNC_; }\n-\n-    static final MethodHandle clang_getModuleForFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getModuleForFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getModuleForFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getModuleForFile$MH() { return clang_getModuleForFile$MH_; }\n-\n-    static final FunctionDescriptor clang_Module_getASTFile$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getASTFile$FUNC() { return clang_Module_getASTFile$FUNC_; }\n-\n-    static final MethodHandle clang_Module_getASTFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Module_getASTFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Module_getASTFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Module_getASTFile$MH() { return clang_Module_getASTFile$MH_; }\n-\n-    static final FunctionDescriptor clang_Module_getParent$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getParent$FUNC() { return clang_Module_getParent$FUNC_; }\n-\n-    static final MethodHandle clang_Module_getParent$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Module_getParent\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Module_getParent$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Module_getParent$MH() { return clang_Module_getParent$MH_; }\n-\n-    static final FunctionDescriptor clang_Module_getName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getName$FUNC() { return clang_Module_getName$FUNC_; }\n-\n-    static final MethodHandle clang_Module_getName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Module_getName\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Module_getName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Module_getName$MH() { return clang_Module_getName$MH_; }\n-\n-    static final FunctionDescriptor clang_Module_getFullName$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getFullName$FUNC() { return clang_Module_getFullName$FUNC_; }\n-\n-    static final MethodHandle clang_Module_getFullName$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Module_getFullName\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_Module_getFullName$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Module_getFullName$MH() { return clang_Module_getFullName$MH_; }\n-\n-    static final FunctionDescriptor clang_Module_isSystem$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_isSystem$FUNC() { return clang_Module_isSystem$FUNC_; }\n-\n-    static final MethodHandle clang_Module_isSystem$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Module_isSystem\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_Module_isSystem$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Module_isSystem$MH() { return clang_Module_isSystem$MH_; }\n-\n-    static final FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC() { return clang_Module_getNumTopLevelHeaders$FUNC_; }\n-\n-    static final MethodHandle clang_Module_getNumTopLevelHeaders$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Module_getNumTopLevelHeaders\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_Module_getNumTopLevelHeaders$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Module_getNumTopLevelHeaders$MH() { return clang_Module_getNumTopLevelHeaders$MH_; }\n-\n-    static final FunctionDescriptor clang_Module_getTopLevelHeader$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Module_getTopLevelHeader$FUNC() { return clang_Module_getTopLevelHeader$FUNC_; }\n-\n-    static final MethodHandle clang_Module_getTopLevelHeader$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Module_getTopLevelHeader\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Module_getTopLevelHeader$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Module_getTopLevelHeader$MH() { return clang_Module_getTopLevelHeader$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC() { return clang_CXXConstructor_isConvertingConstructor$FUNC_; }\n-\n-    static final MethodHandle clang_CXXConstructor_isConvertingConstructor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXConstructor_isConvertingConstructor\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXConstructor_isConvertingConstructor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() { return clang_CXXConstructor_isConvertingConstructor$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC() { return clang_CXXConstructor_isCopyConstructor$FUNC_; }\n-\n-    static final MethodHandle clang_CXXConstructor_isCopyConstructor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXConstructor_isCopyConstructor\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXConstructor_isCopyConstructor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isCopyConstructor$MH() { return clang_CXXConstructor_isCopyConstructor$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC() { return clang_CXXConstructor_isDefaultConstructor$FUNC_; }\n-\n-    static final MethodHandle clang_CXXConstructor_isDefaultConstructor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXConstructor_isDefaultConstructor\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXConstructor_isDefaultConstructor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isDefaultConstructor$MH() { return clang_CXXConstructor_isDefaultConstructor$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC() { return clang_CXXConstructor_isMoveConstructor$FUNC_; }\n-\n-    static final MethodHandle clang_CXXConstructor_isMoveConstructor$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXConstructor_isMoveConstructor\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXConstructor_isMoveConstructor$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXConstructor_isMoveConstructor$MH() { return clang_CXXConstructor_isMoveConstructor$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXField_isMutable$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXField_isMutable$FUNC() { return clang_CXXField_isMutable$FUNC_; }\n-\n-    static final MethodHandle clang_CXXField_isMutable$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXField_isMutable\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXField_isMutable$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXField_isMutable$MH() { return clang_CXXField_isMutable$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC() { return clang_CXXMethod_isDefaulted$FUNC_; }\n-\n-    static final MethodHandle clang_CXXMethod_isDefaulted$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXMethod_isDefaulted\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXMethod_isDefaulted$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXMethod_isDefaulted$MH() { return clang_CXXMethod_isDefaulted$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC() { return clang_CXXMethod_isPureVirtual$FUNC_; }\n-\n-    static final MethodHandle clang_CXXMethod_isPureVirtual$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXMethod_isPureVirtual\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXMethod_isPureVirtual$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXMethod_isPureVirtual$MH() { return clang_CXXMethod_isPureVirtual$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXMethod_isStatic$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isStatic$FUNC() { return clang_CXXMethod_isStatic$FUNC_; }\n-\n-    static final MethodHandle clang_CXXMethod_isStatic$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXMethod_isStatic\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXMethod_isStatic$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXMethod_isStatic$MH() { return clang_CXXMethod_isStatic$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXMethod_isVirtual$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isVirtual$FUNC() { return clang_CXXMethod_isVirtual$FUNC_; }\n-\n-    static final MethodHandle clang_CXXMethod_isVirtual$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXMethod_isVirtual\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXMethod_isVirtual$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXMethod_isVirtual$MH() { return clang_CXXMethod_isVirtual$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXRecord_isAbstract$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXRecord_isAbstract$FUNC() { return clang_CXXRecord_isAbstract$FUNC_; }\n-\n-    static final MethodHandle clang_CXXRecord_isAbstract$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXRecord_isAbstract\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXRecord_isAbstract$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXRecord_isAbstract$MH() { return clang_CXXRecord_isAbstract$MH_; }\n-\n-    static final FunctionDescriptor clang_EnumDecl_isScoped$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EnumDecl_isScoped$FUNC() { return clang_EnumDecl_isScoped$FUNC_; }\n-\n-    static final MethodHandle clang_EnumDecl_isScoped$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EnumDecl_isScoped\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_EnumDecl_isScoped$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EnumDecl_isScoped$MH() { return clang_EnumDecl_isScoped$MH_; }\n-\n-    static final FunctionDescriptor clang_CXXMethod_isConst$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_CXXMethod_isConst$FUNC() { return clang_CXXMethod_isConst$FUNC_; }\n-\n-    static final MethodHandle clang_CXXMethod_isConst$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_CXXMethod_isConst\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_CXXMethod_isConst$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_CXXMethod_isConst$MH() { return clang_CXXMethod_isConst$MH_; }\n-\n-    static final FunctionDescriptor clang_getTemplateCursorKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTemplateCursorKind$FUNC() { return clang_getTemplateCursorKind$FUNC_; }\n-\n-    static final MethodHandle clang_getTemplateCursorKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTemplateCursorKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getTemplateCursorKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTemplateCursorKind$MH() { return clang_getTemplateCursorKind$MH_; }\n-\n-    static final FunctionDescriptor clang_getTemplateSpecializationKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTemplateSpecializationKind$FUNC() { return clang_getTemplateSpecializationKind$FUNC_; }\n-\n-    static final MethodHandle clang_getTemplateSpecializationKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTemplateSpecializationKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getTemplateSpecializationKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTemplateSpecializationKind$MH() { return clang_getTemplateSpecializationKind$MH_; }\n-\n-    static final FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"xdata\"),\n-        MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC() { return clang_getSpecializedCursorTemplate$FUNC_; }\n-\n-    static final MethodHandle clang_getSpecializedCursorTemplate$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getSpecializedCursorTemplate\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getSpecializedCursorTemplate$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getSpecializedCursorTemplate$MH() { return clang_getSpecializedCursorTemplate$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorReferenceNameRange$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorReferenceNameRange$FUNC() { return clang_getCursorReferenceNameRange$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorReferenceNameRange$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorReferenceNameRange\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorReferenceNameRange$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorReferenceNameRange$MH() { return clang_getCursorReferenceNameRange$MH_; }\n-\n-    static final int CXNameRange_WantQualifier() { return (int)1L; }\n-\n-    static final int CXNameRange_WantTemplateArgs() { return (int)2L; }\n-\n-    static final int CXNameRange_WantSinglePiece() { return (int)4L; }\n-\n-    static final int CXToken_Punctuation() { return (int)0L; }\n-\n-    static final int CXToken_Keyword() { return (int)1L; }\n-\n-    static final int CXToken_Identifier() { return (int)2L; }\n-\n-    static final int CXToken_Literal() { return (int)3L; }\n-\n-    static final int CXToken_Comment() { return (int)4L; }\n-\n-    static final MemoryLayout CXToken$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n-        C_POINTER.withName(\"ptr_data\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXToken$struct$LAYOUT() { return CXToken$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXToken$ptr_data$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXToken$ptr_data$LAYOUT() { return CXToken$ptr_data$LAYOUT_; }\n-\n-    static final VarHandle CXToken$ptr_data$VH_ = MemoryHandles.asAddressVarHandle(CXToken$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ptr_data\")));\n-    static final java.lang.invoke.VarHandle CXToken$ptr_data$VH() { return CXToken$ptr_data$VH_; }\n-\n-    static final FunctionDescriptor clang_getToken$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getToken$FUNC() { return clang_getToken$FUNC_; }\n-\n-    static final MethodHandle clang_getToken$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getToken\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getToken$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getToken$MH() { return clang_getToken$MH_; }\n-\n-    static final FunctionDescriptor clang_getTokenKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenKind$FUNC() { return clang_getTokenKind$FUNC_; }\n-\n-    static final MethodHandle clang_getTokenKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTokenKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_getTokenKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTokenKind$MH() { return clang_getTokenKind$MH_; }\n-\n-    static final FunctionDescriptor clang_getTokenSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenSpelling$FUNC() { return clang_getTokenSpelling$FUNC_; }\n-\n-    static final MethodHandle clang_getTokenSpelling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTokenSpelling\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTokenSpelling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTokenSpelling$MH() { return clang_getTokenSpelling$MH_; }\n-\n-    static final FunctionDescriptor clang_getTokenLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenLocation$FUNC() { return clang_getTokenLocation$FUNC_; }\n-\n-    static final MethodHandle clang_getTokenLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTokenLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTokenLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTokenLocation$MH() { return clang_getTokenLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_getTokenExtent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"begin_int_data\"),\n-        C_INT.withName(\"end_int_data\")\n-    ),\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getTokenExtent$FUNC() { return clang_getTokenExtent$FUNC_; }\n-\n-    static final MethodHandle clang_getTokenExtent$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getTokenExtent\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getTokenExtent$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getTokenExtent$MH() { return clang_getTokenExtent$MH_; }\n-\n-    static final FunctionDescriptor clang_tokenize$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_tokenize$FUNC() { return clang_tokenize$FUNC_; }\n-\n-    static final MethodHandle clang_tokenize$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_tokenize\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_tokenize$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_tokenize$MH() { return clang_tokenize$MH_; }\n-\n-    static final FunctionDescriptor clang_annotateTokens$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_annotateTokens$FUNC() { return clang_annotateTokens$FUNC_; }\n-\n-    static final MethodHandle clang_annotateTokens$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_annotateTokens\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_annotateTokens$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_annotateTokens$MH() { return clang_annotateTokens$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeTokens$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeTokens$FUNC() { return clang_disposeTokens$FUNC_; }\n-\n-    static final MethodHandle clang_disposeTokens$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeTokens\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-        clang_disposeTokens$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeTokens$MH() { return clang_disposeTokens$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorKindSpelling$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorKindSpelling$FUNC() { return clang_getCursorKindSpelling$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorKindSpelling$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorKindSpelling\",\n-        \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCursorKindSpelling$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorKindSpelling$MH() { return clang_getCursorKindSpelling$MH_; }\n-\n-    static final FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC() { return clang_getDefinitionSpellingAndExtent$FUNC_; }\n-\n-    static final MethodHandle clang_getDefinitionSpellingAndExtent$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getDefinitionSpellingAndExtent\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getDefinitionSpellingAndExtent$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getDefinitionSpellingAndExtent$MH() { return clang_getDefinitionSpellingAndExtent$MH_; }\n-\n-    static final FunctionDescriptor clang_enableStackTraces$FUNC_ = FunctionDescriptor.ofVoid();\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_enableStackTraces$FUNC() { return clang_enableStackTraces$FUNC_; }\n-\n-    static final MethodHandle clang_enableStackTraces$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_enableStackTraces\",\n-        \"()V\",\n-        clang_enableStackTraces$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_enableStackTraces$MH() { return clang_enableStackTraces$MH_; }\n-\n-    static final FunctionDescriptor clang_executeOnThread$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_executeOnThread$FUNC() { return clang_executeOnThread$FUNC_; }\n-\n-    static final MethodHandle clang_executeOnThread$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_executeOnThread\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-        clang_executeOnThread$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_executeOnThread$MH() { return clang_executeOnThread$MH_; }\n-\n-    static final FunctionDescriptor clang_executeOnThread$fn$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_executeOnThread$fn$FUNC() { return clang_executeOnThread$fn$FUNC_; }\n-\n-    static final MemoryLayout CXCompletionResult$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"CursorKind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_POINTER.withName(\"CompletionString\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXCompletionResult$struct$LAYOUT() { return CXCompletionResult$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXCompletionResult$CursorKind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXCompletionResult$CursorKind$LAYOUT() { return CXCompletionResult$CursorKind$LAYOUT_; }\n-\n-    static final VarHandle CXCompletionResult$CursorKind$VH_ = CXCompletionResult$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"CursorKind\"));\n-    static final java.lang.invoke.VarHandle CXCompletionResult$CursorKind$VH() { return CXCompletionResult$CursorKind$VH_; }\n-\n-    static final MemoryLayout CXCompletionResult$CompletionString$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXCompletionResult$CompletionString$LAYOUT() { return CXCompletionResult$CompletionString$LAYOUT_; }\n-\n-    static final VarHandle CXCompletionResult$CompletionString$VH_ = MemoryHandles.asAddressVarHandle(CXCompletionResult$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"CompletionString\")));\n-    static final java.lang.invoke.VarHandle CXCompletionResult$CompletionString$VH() { return CXCompletionResult$CompletionString$VH_; }\n-\n-    static final int CXCompletionChunk_Optional() { return (int)0L; }\n-\n-    static final int CXCompletionChunk_TypedText() { return (int)1L; }\n-\n-    static final int CXCompletionChunk_Text() { return (int)2L; }\n-\n-    static final int CXCompletionChunk_Placeholder() { return (int)3L; }\n-\n-    static final int CXCompletionChunk_Informative() { return (int)4L; }\n-\n-    static final int CXCompletionChunk_CurrentParameter() { return (int)5L; }\n-\n-    static final int CXCompletionChunk_LeftParen() { return (int)6L; }\n-\n-    static final int CXCompletionChunk_RightParen() { return (int)7L; }\n-\n-    static final int CXCompletionChunk_LeftBracket() { return (int)8L; }\n-\n-    static final int CXCompletionChunk_RightBracket() { return (int)9L; }\n-\n-    static final int CXCompletionChunk_LeftBrace() { return (int)10L; }\n-\n-    static final int CXCompletionChunk_RightBrace() { return (int)11L; }\n-\n-    static final int CXCompletionChunk_LeftAngle() { return (int)12L; }\n-\n-    static final int CXCompletionChunk_RightAngle() { return (int)13L; }\n-\n-    static final int CXCompletionChunk_Comma() { return (int)14L; }\n-\n-    static final int CXCompletionChunk_ResultType() { return (int)15L; }\n-\n-    static final int CXCompletionChunk_Colon() { return (int)16L; }\n-\n-    static final int CXCompletionChunk_SemiColon() { return (int)17L; }\n-\n-    static final int CXCompletionChunk_Equal() { return (int)18L; }\n-\n-    static final int CXCompletionChunk_HorizontalSpace() { return (int)19L; }\n-\n-    static final int CXCompletionChunk_VerticalSpace() { return (int)20L; }\n-\n-    static final FunctionDescriptor clang_getCompletionChunkKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkKind$FUNC() { return clang_getCompletionChunkKind$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionChunkKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionChunkKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_getCompletionChunkKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionChunkKind$MH() { return clang_getCompletionChunkKind$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionChunkText$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkText$FUNC() { return clang_getCompletionChunkText$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionChunkText$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionChunkText\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCompletionChunkText$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionChunkText$MH() { return clang_getCompletionChunkText$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC() { return clang_getCompletionChunkCompletionString$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionChunkCompletionString$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionChunkCompletionString\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getCompletionChunkCompletionString$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionChunkCompletionString$MH() { return clang_getCompletionChunkCompletionString$MH_; }\n-\n-    static final FunctionDescriptor clang_getNumCompletionChunks$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getNumCompletionChunks$FUNC() { return clang_getNumCompletionChunks$FUNC_; }\n-\n-    static final MethodHandle clang_getNumCompletionChunks$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getNumCompletionChunks\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getNumCompletionChunks$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getNumCompletionChunks$MH() { return clang_getNumCompletionChunks$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionPriority$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionPriority$FUNC() { return clang_getCompletionPriority$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionPriority$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionPriority\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getCompletionPriority$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionPriority$MH() { return clang_getCompletionPriority$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionAvailability$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionAvailability$FUNC() { return clang_getCompletionAvailability$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionAvailability$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionAvailability\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getCompletionAvailability$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionAvailability$MH() { return clang_getCompletionAvailability$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionNumAnnotations$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionNumAnnotations$FUNC() { return clang_getCompletionNumAnnotations$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionNumAnnotations$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionNumAnnotations\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_getCompletionNumAnnotations$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionNumAnnotations$MH() { return clang_getCompletionNumAnnotations$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionAnnotation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionAnnotation$FUNC() { return clang_getCompletionAnnotation$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionAnnotation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionAnnotation\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCompletionAnnotation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionAnnotation$MH() { return clang_getCompletionAnnotation$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionParent$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionParent$FUNC() { return clang_getCompletionParent$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionParent$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionParent\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCompletionParent$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionParent$MH() { return clang_getCompletionParent$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionBriefComment$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionBriefComment$FUNC() { return clang_getCompletionBriefComment$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionBriefComment$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionBriefComment\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCompletionBriefComment$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionBriefComment$MH() { return clang_getCompletionBriefComment$MH_; }\n-\n-    static final FunctionDescriptor clang_getCursorCompletionString$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCursorCompletionString$FUNC() { return clang_getCursorCompletionString$FUNC_; }\n-\n-    static final MethodHandle clang_getCursorCompletionString$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCursorCompletionString\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getCursorCompletionString$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCursorCompletionString$MH() { return clang_getCursorCompletionString$MH_; }\n-\n-    static final MemoryLayout CXCodeCompleteResults$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"Results\"),\n-        C_INT.withName(\"NumResults\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXCodeCompleteResults$struct$LAYOUT() { return CXCodeCompleteResults$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXCodeCompleteResults$Results$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXCodeCompleteResults$Results$LAYOUT() { return CXCodeCompleteResults$Results$LAYOUT_; }\n-\n-    static final VarHandle CXCodeCompleteResults$Results$VH_ = MemoryHandles.asAddressVarHandle(CXCodeCompleteResults$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Results\")));\n-    static final java.lang.invoke.VarHandle CXCodeCompleteResults$Results$VH() { return CXCodeCompleteResults$Results$VH_; }\n-\n-    static final MemoryLayout CXCodeCompleteResults$NumResults$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXCodeCompleteResults$NumResults$LAYOUT() { return CXCodeCompleteResults$NumResults$LAYOUT_; }\n-\n-    static final VarHandle CXCodeCompleteResults$NumResults$VH_ = CXCodeCompleteResults$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"NumResults\"));\n-    static final java.lang.invoke.VarHandle CXCodeCompleteResults$NumResults$VH() { return CXCodeCompleteResults$NumResults$VH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionNumFixIts$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionNumFixIts$FUNC() { return clang_getCompletionNumFixIts$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionNumFixIts$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionNumFixIts\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_getCompletionNumFixIts$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionNumFixIts$MH() { return clang_getCompletionNumFixIts$MH_; }\n-\n-    static final FunctionDescriptor clang_getCompletionFixIt$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getCompletionFixIt$FUNC() { return clang_getCompletionFixIt$FUNC_; }\n-\n-    static final MethodHandle clang_getCompletionFixIt$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getCompletionFixIt\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getCompletionFixIt$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getCompletionFixIt$MH() { return clang_getCompletionFixIt$MH_; }\n-\n-    static final int CXCodeComplete_IncludeMacros() { return (int)1L; }\n-\n-    static final int CXCodeComplete_IncludeCodePatterns() { return (int)2L; }\n-\n-    static final int CXCodeComplete_IncludeBriefComments() { return (int)4L; }\n-\n-    static final int CXCodeComplete_SkipPreamble() { return (int)8L; }\n-\n-    static final int CXCodeComplete_IncludeCompletionsWithFixIts() { return (int)16L; }\n-\n-    static final int CXCompletionContext_Unexposed() { return (int)0L; }\n-\n-    static final int CXCompletionContext_AnyType() { return (int)1L; }\n-\n-    static final int CXCompletionContext_AnyValue() { return (int)2L; }\n-\n-    static final int CXCompletionContext_ObjCObjectValue() { return (int)4L; }\n-\n-    static final int CXCompletionContext_ObjCSelectorValue() { return (int)8L; }\n-\n-    static final int CXCompletionContext_CXXClassTypeValue() { return (int)16L; }\n-\n-    static final int CXCompletionContext_DotMemberAccess() { return (int)32L; }\n-\n-    static final int CXCompletionContext_ArrowMemberAccess() { return (int)64L; }\n-\n-    static final int CXCompletionContext_ObjCPropertyAccess() { return (int)128L; }\n-\n-    static final int CXCompletionContext_EnumTag() { return (int)256L; }\n-\n-    static final int CXCompletionContext_UnionTag() { return (int)512L; }\n-\n-    static final int CXCompletionContext_StructTag() { return (int)1024L; }\n-\n-    static final int CXCompletionContext_ClassTag() { return (int)2048L; }\n-\n-    static final int CXCompletionContext_Namespace() { return (int)4096L; }\n-\n-    static final int CXCompletionContext_NestedNameSpecifier() { return (int)8192L; }\n-\n-    static final int CXCompletionContext_ObjCInterface() { return (int)16384L; }\n-\n-    static final int CXCompletionContext_ObjCProtocol() { return (int)32768L; }\n-\n-    static final int CXCompletionContext_ObjCCategory() { return (int)65536L; }\n-\n-    static final int CXCompletionContext_ObjCInstanceMessage() { return (int)131072L; }\n-\n-    static final int CXCompletionContext_ObjCClassMessage() { return (int)262144L; }\n-\n-    static final int CXCompletionContext_ObjCSelectorName() { return (int)524288L; }\n-\n-    static final int CXCompletionContext_MacroName() { return (int)1048576L; }\n-\n-    static final int CXCompletionContext_NaturalLanguage() { return (int)2097152L; }\n-\n-    static final int CXCompletionContext_IncludedFile() { return (int)4194304L; }\n-\n-    static final int CXCompletionContext_Unknown() { return (int)8388607L; }\n-\n-    static final FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC_ = FunctionDescriptor.of(C_INT);\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC() { return clang_defaultCodeCompleteOptions$FUNC_; }\n-\n-    static final MethodHandle clang_defaultCodeCompleteOptions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_defaultCodeCompleteOptions\",\n-        \"()I\",\n-        clang_defaultCodeCompleteOptions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_defaultCodeCompleteOptions$MH() { return clang_defaultCodeCompleteOptions$MH_; }\n-\n-    static final FunctionDescriptor clang_codeCompleteAt$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteAt$FUNC() { return clang_codeCompleteAt$FUNC_; }\n-\n-    static final MethodHandle clang_codeCompleteAt$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_codeCompleteAt\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_codeCompleteAt$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_codeCompleteAt$MH() { return clang_codeCompleteAt$MH_; }\n-\n-    static final FunctionDescriptor clang_sortCodeCompletionResults$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_sortCodeCompletionResults$FUNC() { return clang_sortCodeCompletionResults$FUNC_; }\n-\n-    static final MethodHandle clang_sortCodeCompletionResults$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_sortCodeCompletionResults\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-        clang_sortCodeCompletionResults$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_sortCodeCompletionResults$MH() { return clang_sortCodeCompletionResults$MH_; }\n-\n-    static final FunctionDescriptor clang_disposeCodeCompleteResults$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_disposeCodeCompleteResults$FUNC() { return clang_disposeCodeCompleteResults$FUNC_; }\n-\n-    static final MethodHandle clang_disposeCodeCompleteResults$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_disposeCodeCompleteResults\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_disposeCodeCompleteResults$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_disposeCodeCompleteResults$MH() { return clang_disposeCodeCompleteResults$MH_; }\n-\n-    static final FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC() { return clang_codeCompleteGetNumDiagnostics$FUNC_; }\n-\n-    static final MethodHandle clang_codeCompleteGetNumDiagnostics$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_codeCompleteGetNumDiagnostics\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_codeCompleteGetNumDiagnostics$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_codeCompleteGetNumDiagnostics$MH() { return clang_codeCompleteGetNumDiagnostics$MH_; }\n-\n-    static final FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC() { return clang_codeCompleteGetDiagnostic$FUNC_; }\n-\n-    static final MethodHandle clang_codeCompleteGetDiagnostic$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_codeCompleteGetDiagnostic\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_codeCompleteGetDiagnostic$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_codeCompleteGetDiagnostic$MH() { return clang_codeCompleteGetDiagnostic$MH_; }\n-\n-    static final FunctionDescriptor clang_codeCompleteGetContexts$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContexts$FUNC() { return clang_codeCompleteGetContexts$FUNC_; }\n-\n-    static final MethodHandle clang_codeCompleteGetContexts$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_codeCompleteGetContexts\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-        clang_codeCompleteGetContexts$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_codeCompleteGetContexts$MH() { return clang_codeCompleteGetContexts$MH_; }\n-\n-    static final FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC() { return clang_codeCompleteGetContainerKind$FUNC_; }\n-\n-    static final MethodHandle clang_codeCompleteGetContainerKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_codeCompleteGetContainerKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_codeCompleteGetContainerKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_codeCompleteGetContainerKind$MH() { return clang_codeCompleteGetContainerKind$MH_; }\n-\n-    static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC() { return clang_codeCompleteGetContainerUSR$FUNC_; }\n-\n-    static final MethodHandle clang_codeCompleteGetContainerUSR$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_codeCompleteGetContainerUSR\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_codeCompleteGetContainerUSR$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_codeCompleteGetContainerUSR$MH() { return clang_codeCompleteGetContainerUSR$MH_; }\n-\n-    static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC() { return clang_codeCompleteGetObjCSelector$FUNC_; }\n-\n-    static final MethodHandle clang_codeCompleteGetObjCSelector$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_codeCompleteGetObjCSelector\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_codeCompleteGetObjCSelector$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_codeCompleteGetObjCSelector$MH() { return clang_codeCompleteGetObjCSelector$MH_; }\n-\n-    static final FunctionDescriptor clang_getClangVersion$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"data\"),\n-        C_INT.withName(\"private_flags\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ));\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getClangVersion$FUNC() { return clang_getClangVersion$FUNC_; }\n-\n-    static final MethodHandle clang_getClangVersion$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getClangVersion\",\n-        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_getClangVersion$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getClangVersion$MH() { return clang_getClangVersion$MH_; }\n-\n-    static final FunctionDescriptor clang_toggleCrashRecovery$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_toggleCrashRecovery$FUNC() { return clang_toggleCrashRecovery$FUNC_; }\n-\n-    static final MethodHandle clang_toggleCrashRecovery$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_toggleCrashRecovery\",\n-        \"(I)V\",\n-        clang_toggleCrashRecovery$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_toggleCrashRecovery$MH() { return clang_toggleCrashRecovery$MH_; }\n-\n-    static final FunctionDescriptor clang_getInclusions$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getInclusions$FUNC() { return clang_getInclusions$FUNC_; }\n-\n-    static final MethodHandle clang_getInclusions$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getInclusions\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_getInclusions$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getInclusions$MH() { return clang_getInclusions$MH_; }\n-\n-    static final FunctionDescriptor clang_getInclusions$visitor$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getInclusions$visitor$FUNC() { return clang_getInclusions$visitor$FUNC_; }\n-\n-    static final int CXEval_Int() { return (int)1L; }\n-\n-    static final int CXEval_Float() { return (int)2L; }\n-\n-    static final int CXEval_ObjCStrLiteral() { return (int)3L; }\n-\n-    static final int CXEval_StrLiteral() { return (int)4L; }\n-\n-    static final int CXEval_CFStr() { return (int)5L; }\n-\n-    static final int CXEval_Other() { return (int)6L; }\n-\n-    static final int CXEval_UnExposed() { return (int)0L; }\n-\n-    static final FunctionDescriptor clang_Cursor_Evaluate$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Cursor_Evaluate$FUNC() { return clang_Cursor_Evaluate$FUNC_; }\n-\n-    static final MethodHandle clang_Cursor_Evaluate$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Cursor_Evaluate\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_Cursor_Evaluate$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Cursor_Evaluate$MH() { return clang_Cursor_Evaluate$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_getKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getKind$FUNC() { return clang_EvalResult_getKind$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_getKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_getKind\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_EvalResult_getKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_getKind$MH() { return clang_EvalResult_getKind$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsInt$FUNC() { return clang_EvalResult_getAsInt$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_getAsInt$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_getAsInt\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_EvalResult_getAsInt$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsInt$MH() { return clang_EvalResult_getAsInt$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC() { return clang_EvalResult_getAsLongLong$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_getAsLongLong$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_getAsLongLong\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-        clang_EvalResult_getAsLongLong$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsLongLong$MH() { return clang_EvalResult_getAsLongLong$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC() { return clang_EvalResult_isUnsignedInt$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_isUnsignedInt$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_isUnsignedInt\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_EvalResult_isUnsignedInt$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_isUnsignedInt$MH() { return clang_EvalResult_isUnsignedInt$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC_ = FunctionDescriptor.of(C_LONG_LONG,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC() { return clang_EvalResult_getAsUnsigned$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_getAsUnsigned$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_getAsUnsigned\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-        clang_EvalResult_getAsUnsigned$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsUnsigned$MH() { return clang_EvalResult_getAsUnsigned$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC_ = FunctionDescriptor.of(C_DOUBLE,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsDouble$FUNC() { return clang_EvalResult_getAsDouble$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_getAsDouble$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_getAsDouble\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)D\",\n-        clang_EvalResult_getAsDouble$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsDouble$MH() { return clang_EvalResult_getAsDouble$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_getAsStr$FUNC() { return clang_EvalResult_getAsStr$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_getAsStr$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_getAsStr\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_EvalResult_getAsStr$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_getAsStr$MH() { return clang_EvalResult_getAsStr$MH_; }\n-\n-    static final FunctionDescriptor clang_EvalResult_dispose$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_EvalResult_dispose$FUNC() { return clang_EvalResult_dispose$FUNC_; }\n-\n-    static final MethodHandle clang_EvalResult_dispose$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_EvalResult_dispose\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_EvalResult_dispose$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_EvalResult_dispose$MH() { return clang_EvalResult_dispose$MH_; }\n-\n-    static final FunctionDescriptor clang_getRemappings$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getRemappings$FUNC() { return clang_getRemappings$FUNC_; }\n-\n-    static final MethodHandle clang_getRemappings$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getRemappings\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getRemappings$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getRemappings$MH() { return clang_getRemappings$MH_; }\n-\n-    static final FunctionDescriptor clang_getRemappingsFromFileList$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_getRemappingsFromFileList$FUNC() { return clang_getRemappingsFromFileList$FUNC_; }\n-\n-    static final MethodHandle clang_getRemappingsFromFileList$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_getRemappingsFromFileList\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_getRemappingsFromFileList$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_getRemappingsFromFileList$MH() { return clang_getRemappingsFromFileList$MH_; }\n-\n-    static final FunctionDescriptor clang_remap_getNumFiles$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_remap_getNumFiles$FUNC() { return clang_remap_getNumFiles$FUNC_; }\n-\n-    static final MethodHandle clang_remap_getNumFiles$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_remap_getNumFiles\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_remap_getNumFiles$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_remap_getNumFiles$MH() { return clang_remap_getNumFiles$MH_; }\n-\n-    static final FunctionDescriptor clang_remap_getFilenames$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_remap_getFilenames$FUNC() { return clang_remap_getFilenames$FUNC_; }\n-\n-    static final MethodHandle clang_remap_getFilenames$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_remap_getFilenames\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_remap_getFilenames$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_remap_getFilenames$MH() { return clang_remap_getFilenames$MH_; }\n-\n-    static final FunctionDescriptor clang_remap_dispose$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_remap_dispose$FUNC() { return clang_remap_dispose$FUNC_; }\n-\n-    static final MethodHandle clang_remap_dispose$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_remap_dispose\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_remap_dispose$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_remap_dispose$MH() { return clang_remap_dispose$MH_; }\n-\n-    static final int CXVisit_Break() { return (int)0L; }\n-\n-    static final int CXVisit_Continue() { return (int)1L; }\n-\n-    static final MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"context\"),\n-        C_POINTER.withName(\"visit\")\n-    ).withName(\"CXCursorAndRangeVisitor\");\n-    static final jdk.incubator.foreign.MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT() { return CXCursorAndRangeVisitor$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXCursorAndRangeVisitor$context$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXCursorAndRangeVisitor$context$LAYOUT() { return CXCursorAndRangeVisitor$context$LAYOUT_; }\n-\n-    static final VarHandle CXCursorAndRangeVisitor$context$VH_ = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"context\")));\n-    static final java.lang.invoke.VarHandle CXCursorAndRangeVisitor$context$VH() { return CXCursorAndRangeVisitor$context$VH_; }\n-\n-    static final MemoryLayout CXCursorAndRangeVisitor$visit$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXCursorAndRangeVisitor$visit$LAYOUT() { return CXCursorAndRangeVisitor$visit$LAYOUT_; }\n-\n-    static final VarHandle CXCursorAndRangeVisitor$visit$VH_ = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"visit\")));\n-    static final java.lang.invoke.VarHandle CXCursorAndRangeVisitor$visit$VH() { return CXCursorAndRangeVisitor$visit$VH_; }\n-\n-    static final int CXResult_Success() { return (int)0L; }\n-\n-    static final int CXResult_Invalid() { return (int)1L; }\n-\n-    static final int CXResult_VisitBreak() { return (int)2L; }\n-\n-    static final FunctionDescriptor clang_findReferencesInFile$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"context\"),\n-            C_POINTER.withName(\"visit\")\n-        ).withName(\"CXCursorAndRangeVisitor\")\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFile$FUNC() { return clang_findReferencesInFile$FUNC_; }\n-\n-    static final MethodHandle clang_findReferencesInFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_findReferencesInFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_findReferencesInFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_findReferencesInFile$MH() { return clang_findReferencesInFile$MH_; }\n-\n-    static final FunctionDescriptor clang_findIncludesInFile$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        MemoryLayout.ofStruct(\n-            C_POINTER.withName(\"context\"),\n-            C_POINTER.withName(\"visit\")\n-        ).withName(\"CXCursorAndRangeVisitor\")\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFile$FUNC() { return clang_findIncludesInFile$FUNC_; }\n-\n-    static final MethodHandle clang_findIncludesInFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_findIncludesInFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-        clang_findIncludesInFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_findIncludesInFile$MH() { return clang_findIncludesInFile$MH_; }\n-\n-    static final FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC() { return clang_findReferencesInFileWithBlock$FUNC_; }\n-\n-    static final MethodHandle clang_findReferencesInFileWithBlock$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_findReferencesInFileWithBlock\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_findReferencesInFileWithBlock$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_findReferencesInFileWithBlock$MH() { return clang_findReferencesInFileWithBlock$MH_; }\n-\n-    static final FunctionDescriptor clang_findReferencesInFileWithBlock$x0$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_findReferencesInFileWithBlock$x0$FUNC() { return clang_findReferencesInFileWithBlock$x0$FUNC_; }\n-\n-    static final FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC() { return clang_findIncludesInFileWithBlock$FUNC_; }\n-\n-    static final MethodHandle clang_findIncludesInFileWithBlock$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_findIncludesInFileWithBlock\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_findIncludesInFileWithBlock$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_findIncludesInFileWithBlock$MH() { return clang_findIncludesInFileWithBlock$MH_; }\n-\n-    static final FunctionDescriptor clang_findIncludesInFileWithBlock$x0$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_findIncludesInFileWithBlock$x0$FUNC() { return clang_findIncludesInFileWithBlock$x0$FUNC_; }\n-\n-    static final MemoryLayout CXIdxLoc$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxLoc$struct$LAYOUT() { return CXIdxLoc$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxLoc$int_data$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxLoc$int_data$LAYOUT() { return CXIdxLoc$int_data$LAYOUT_; }\n-\n-    static final VarHandle CXIdxLoc$int_data$VH_ = CXIdxLoc$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"int_data\"));\n-    static final java.lang.invoke.VarHandle CXIdxLoc$int_data$VH() { return CXIdxLoc$int_data$VH_; }\n-\n-    static final MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"hashLoc\"),\n-        C_POINTER.withName(\"filename\"),\n-        C_POINTER.withName(\"file\"),\n-        C_INT.withName(\"isImport\"),\n-        C_INT.withName(\"isAngled\"),\n-        C_INT.withName(\"isModuleImport\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT() { return CXIdxIncludedFileInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxIncludedFileInfo$filename$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$filename$LAYOUT() { return CXIdxIncludedFileInfo$filename$LAYOUT_; }\n-\n-    static final VarHandle CXIdxIncludedFileInfo$filename$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"filename\")));\n-    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$filename$VH() { return CXIdxIncludedFileInfo$filename$VH_; }\n-\n-    static final MemoryLayout CXIdxIncludedFileInfo$file$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$file$LAYOUT() { return CXIdxIncludedFileInfo$file$LAYOUT_; }\n-\n-    static final VarHandle CXIdxIncludedFileInfo$file$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"file\")));\n-    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$file$VH() { return CXIdxIncludedFileInfo$file$VH_; }\n-\n-    static final MemoryLayout CXIdxIncludedFileInfo$isImport$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$isImport$LAYOUT() { return CXIdxIncludedFileInfo$isImport$LAYOUT_; }\n-\n-    static final VarHandle CXIdxIncludedFileInfo$isImport$VH_ = CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImport\"));\n-    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$isImport$VH() { return CXIdxIncludedFileInfo$isImport$VH_; }\n-\n-    static final MemoryLayout CXIdxIncludedFileInfo$isAngled$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$isAngled$LAYOUT() { return CXIdxIncludedFileInfo$isAngled$LAYOUT_; }\n-\n-    static final VarHandle CXIdxIncludedFileInfo$isAngled$VH_ = CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isAngled\"));\n-    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$isAngled$VH() { return CXIdxIncludedFileInfo$isAngled$VH_; }\n-\n-    static final MemoryLayout CXIdxIncludedFileInfo$isModuleImport$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIncludedFileInfo$isModuleImport$LAYOUT() { return CXIdxIncludedFileInfo$isModuleImport$LAYOUT_; }\n-\n-    static final VarHandle CXIdxIncludedFileInfo$isModuleImport$VH_ = CXIdxIncludedFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isModuleImport\"));\n-    static final java.lang.invoke.VarHandle CXIdxIncludedFileInfo$isModuleImport$VH() { return CXIdxIncludedFileInfo$isModuleImport$VH_; }\n-\n-    static final MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"file\"),\n-        C_POINTER.withName(\"module\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"loc\"),\n-        C_INT.withName(\"isImplicit\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT() { return CXIdxImportedASTFileInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxImportedASTFileInfo$file$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$file$LAYOUT() { return CXIdxImportedASTFileInfo$file$LAYOUT_; }\n-\n-    static final VarHandle CXIdxImportedASTFileInfo$file$VH_ = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"file\")));\n-    static final java.lang.invoke.VarHandle CXIdxImportedASTFileInfo$file$VH() { return CXIdxImportedASTFileInfo$file$VH_; }\n-\n-    static final MemoryLayout CXIdxImportedASTFileInfo$module$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$module$LAYOUT() { return CXIdxImportedASTFileInfo$module$LAYOUT_; }\n-\n-    static final VarHandle CXIdxImportedASTFileInfo$module$VH_ = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"module\")));\n-    static final java.lang.invoke.VarHandle CXIdxImportedASTFileInfo$module$VH() { return CXIdxImportedASTFileInfo$module$VH_; }\n-\n-    static final MemoryLayout CXIdxImportedASTFileInfo$isImplicit$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxImportedASTFileInfo$isImplicit$LAYOUT() { return CXIdxImportedASTFileInfo$isImplicit$LAYOUT_; }\n-\n-    static final VarHandle CXIdxImportedASTFileInfo$isImplicit$VH_ = CXIdxImportedASTFileInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImplicit\"));\n-    static final java.lang.invoke.VarHandle CXIdxImportedASTFileInfo$isImplicit$VH() { return CXIdxImportedASTFileInfo$isImplicit$VH_; }\n-\n-    static final int CXIdxEntity_Unexposed() { return (int)0L; }\n-\n-    static final int CXIdxEntity_Typedef() { return (int)1L; }\n-\n-    static final int CXIdxEntity_Function() { return (int)2L; }\n-\n-    static final int CXIdxEntity_Variable() { return (int)3L; }\n-\n-    static final int CXIdxEntity_Field() { return (int)4L; }\n-\n-    static final int CXIdxEntity_EnumConstant() { return (int)5L; }\n-\n-    static final int CXIdxEntity_ObjCClass() { return (int)6L; }\n-\n-    static final int CXIdxEntity_ObjCProtocol() { return (int)7L; }\n-\n-    static final int CXIdxEntity_ObjCCategory() { return (int)8L; }\n-\n-    static final int CXIdxEntity_ObjCInstanceMethod() { return (int)9L; }\n-\n-    static final int CXIdxEntity_ObjCClassMethod() { return (int)10L; }\n-\n-    static final int CXIdxEntity_ObjCProperty() { return (int)11L; }\n-\n-    static final int CXIdxEntity_ObjCIvar() { return (int)12L; }\n-\n-    static final int CXIdxEntity_Enum() { return (int)13L; }\n-\n-    static final int CXIdxEntity_Struct() { return (int)14L; }\n-\n-    static final int CXIdxEntity_Union() { return (int)15L; }\n-\n-    static final int CXIdxEntity_CXXClass() { return (int)16L; }\n-\n-    static final int CXIdxEntity_CXXNamespace() { return (int)17L; }\n-\n-    static final int CXIdxEntity_CXXNamespaceAlias() { return (int)18L; }\n-\n-    static final int CXIdxEntity_CXXStaticVariable() { return (int)19L; }\n-\n-    static final int CXIdxEntity_CXXStaticMethod() { return (int)20L; }\n-\n-    static final int CXIdxEntity_CXXInstanceMethod() { return (int)21L; }\n-\n-    static final int CXIdxEntity_CXXConstructor() { return (int)22L; }\n-\n-    static final int CXIdxEntity_CXXDestructor() { return (int)23L; }\n-\n-    static final int CXIdxEntity_CXXConversionFunction() { return (int)24L; }\n-\n-    static final int CXIdxEntity_CXXTypeAlias() { return (int)25L; }\n-\n-    static final int CXIdxEntity_CXXInterface() { return (int)26L; }\n-\n-    static final int CXIdxEntityLang_None() { return (int)0L; }\n-\n-    static final int CXIdxEntityLang_C() { return (int)1L; }\n-\n-    static final int CXIdxEntityLang_ObjC() { return (int)2L; }\n-\n-    static final int CXIdxEntityLang_CXX() { return (int)3L; }\n-\n-    static final int CXIdxEntityLang_Swift() { return (int)4L; }\n-\n-    static final int CXIdxEntity_NonTemplate() { return (int)0L; }\n-\n-    static final int CXIdxEntity_Template() { return (int)1L; }\n-\n-    static final int CXIdxEntity_TemplatePartialSpecialization() { return (int)2L; }\n-\n-    static final int CXIdxEntity_TemplateSpecialization() { return (int)3L; }\n-\n-    static final int CXIdxAttr_Unexposed() { return (int)0L; }\n-\n-    static final int CXIdxAttr_IBAction() { return (int)1L; }\n-\n-    static final int CXIdxAttr_IBOutlet() { return (int)2L; }\n-\n-    static final int CXIdxAttr_IBOutletCollection() { return (int)3L; }\n-\n-    static final MemoryLayout CXIdxAttrInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"cursor\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"loc\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxAttrInfo$struct$LAYOUT() { return CXIdxAttrInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxAttrInfo$kind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxAttrInfo$kind$LAYOUT() { return CXIdxAttrInfo$kind$LAYOUT_; }\n-\n-    static final VarHandle CXIdxAttrInfo$kind$VH_ = CXIdxAttrInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-    static final java.lang.invoke.VarHandle CXIdxAttrInfo$kind$VH() { return CXIdxAttrInfo$kind$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        C_INT.withName(\"templateKind\"),\n-        C_INT.withName(\"lang\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_POINTER.withName(\"name\"),\n-        C_POINTER.withName(\"USR\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"cursor\"),\n-        C_POINTER.withName(\"attributes\"),\n-        C_INT.withName(\"numAttributes\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$struct$LAYOUT() { return CXIdxEntityInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$kind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$kind$LAYOUT() { return CXIdxEntityInfo$kind$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityInfo$kind$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-    static final java.lang.invoke.VarHandle CXIdxEntityInfo$kind$VH() { return CXIdxEntityInfo$kind$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$templateKind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$templateKind$LAYOUT() { return CXIdxEntityInfo$templateKind$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityInfo$templateKind$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"templateKind\"));\n-    static final java.lang.invoke.VarHandle CXIdxEntityInfo$templateKind$VH() { return CXIdxEntityInfo$templateKind$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$lang$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$lang$LAYOUT() { return CXIdxEntityInfo$lang$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityInfo$lang$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"lang\"));\n-    static final java.lang.invoke.VarHandle CXIdxEntityInfo$lang$VH() { return CXIdxEntityInfo$lang$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$name$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$name$LAYOUT() { return CXIdxEntityInfo$name$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityInfo$name$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"name\")));\n-    static final java.lang.invoke.VarHandle CXIdxEntityInfo$name$VH() { return CXIdxEntityInfo$name$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$USR$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$USR$LAYOUT() { return CXIdxEntityInfo$USR$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityInfo$USR$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"USR\")));\n-    static final java.lang.invoke.VarHandle CXIdxEntityInfo$USR$VH() { return CXIdxEntityInfo$USR$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$attributes$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$attributes$LAYOUT() { return CXIdxEntityInfo$attributes$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityInfo$attributes$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attributes\")));\n-    static final java.lang.invoke.VarHandle CXIdxEntityInfo$attributes$VH() { return CXIdxEntityInfo$attributes$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityInfo$numAttributes$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityInfo$numAttributes$LAYOUT() { return CXIdxEntityInfo$numAttributes$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityInfo$numAttributes$VH_ = CXIdxEntityInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numAttributes\"));\n-    static final java.lang.invoke.VarHandle CXIdxEntityInfo$numAttributes$VH() { return CXIdxEntityInfo$numAttributes$VH_; }\n-\n-    static final MemoryLayout CXIdxContainerInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"cursor\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxContainerInfo$struct$LAYOUT() { return CXIdxContainerInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"attrInfo\"),\n-        C_POINTER.withName(\"objcClass\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"classCursor\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"classLoc\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT() { return CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$attrInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIBOutletCollectionAttrInfo$attrInfo$LAYOUT() { return CXIdxIBOutletCollectionAttrInfo$attrInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxIBOutletCollectionAttrInfo$attrInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attrInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxIBOutletCollectionAttrInfo$attrInfo$VH() { return CXIdxIBOutletCollectionAttrInfo$attrInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$objcClass$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxIBOutletCollectionAttrInfo$objcClass$LAYOUT() { return CXIdxIBOutletCollectionAttrInfo$objcClass$LAYOUT_; }\n-\n-    static final VarHandle CXIdxIBOutletCollectionAttrInfo$objcClass$VH_ = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"objcClass\")));\n-    static final java.lang.invoke.VarHandle CXIdxIBOutletCollectionAttrInfo$objcClass$VH() { return CXIdxIBOutletCollectionAttrInfo$objcClass$VH_; }\n-\n-    static final int CXIdxDeclFlag_Skipped() { return (int)1L; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"entityInfo\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"cursor\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"loc\"),\n-        C_POINTER.withName(\"semanticContainer\"),\n-        C_POINTER.withName(\"lexicalContainer\"),\n-        C_INT.withName(\"isRedeclaration\"),\n-        C_INT.withName(\"isDefinition\"),\n-        C_INT.withName(\"isContainer\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_POINTER.withName(\"declAsContainer\"),\n-        C_INT.withName(\"isImplicit\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        C_POINTER.withName(\"attributes\"),\n-        C_INT.withName(\"numAttributes\"),\n-        C_INT.withName(\"flags\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$struct$LAYOUT() { return CXIdxDeclInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$entityInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$entityInfo$LAYOUT() { return CXIdxDeclInfo$entityInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$entityInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"entityInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$entityInfo$VH() { return CXIdxDeclInfo$entityInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$semanticContainer$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$semanticContainer$LAYOUT() { return CXIdxDeclInfo$semanticContainer$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$semanticContainer$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"semanticContainer\")));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$semanticContainer$VH() { return CXIdxDeclInfo$semanticContainer$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$lexicalContainer$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$lexicalContainer$LAYOUT() { return CXIdxDeclInfo$lexicalContainer$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$lexicalContainer$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"lexicalContainer\")));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$lexicalContainer$VH() { return CXIdxDeclInfo$lexicalContainer$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$isRedeclaration$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isRedeclaration$LAYOUT() { return CXIdxDeclInfo$isRedeclaration$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$isRedeclaration$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isRedeclaration\"));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isRedeclaration$VH() { return CXIdxDeclInfo$isRedeclaration$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$isDefinition$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isDefinition$LAYOUT() { return CXIdxDeclInfo$isDefinition$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$isDefinition$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isDefinition\"));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isDefinition$VH() { return CXIdxDeclInfo$isDefinition$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$isContainer$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isContainer$LAYOUT() { return CXIdxDeclInfo$isContainer$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$isContainer$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isContainer\"));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isContainer$VH() { return CXIdxDeclInfo$isContainer$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$declAsContainer$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$declAsContainer$LAYOUT() { return CXIdxDeclInfo$declAsContainer$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$declAsContainer$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declAsContainer\")));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$declAsContainer$VH() { return CXIdxDeclInfo$declAsContainer$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$isImplicit$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$isImplicit$LAYOUT() { return CXIdxDeclInfo$isImplicit$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$isImplicit$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImplicit\"));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$isImplicit$VH() { return CXIdxDeclInfo$isImplicit$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$attributes$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$attributes$LAYOUT() { return CXIdxDeclInfo$attributes$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$attributes$VH_ = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attributes\")));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$attributes$VH() { return CXIdxDeclInfo$attributes$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$numAttributes$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$numAttributes$LAYOUT() { return CXIdxDeclInfo$numAttributes$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$numAttributes$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numAttributes\"));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$numAttributes$VH() { return CXIdxDeclInfo$numAttributes$VH_; }\n-\n-    static final MemoryLayout CXIdxDeclInfo$flags$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxDeclInfo$flags$LAYOUT() { return CXIdxDeclInfo$flags$LAYOUT_; }\n-\n-    static final VarHandle CXIdxDeclInfo$flags$VH_ = CXIdxDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"flags\"));\n-    static final java.lang.invoke.VarHandle CXIdxDeclInfo$flags$VH() { return CXIdxDeclInfo$flags$VH_; }\n-\n-    static final int CXIdxObjCContainer_ForwardRef() { return (int)0L; }\n-\n-    static final int CXIdxObjCContainer_Interface() { return (int)1L; }\n-\n-    static final int CXIdxObjCContainer_Implementation() { return (int)2L; }\n-\n-    static final MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"declInfo\"),\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT() { return CXIdxObjCContainerDeclInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxObjCContainerDeclInfo$declInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCContainerDeclInfo$declInfo$LAYOUT() { return CXIdxObjCContainerDeclInfo$declInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCContainerDeclInfo$declInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCContainerDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCContainerDeclInfo$declInfo$VH() { return CXIdxObjCContainerDeclInfo$declInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCContainerDeclInfo$kind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCContainerDeclInfo$kind$LAYOUT() { return CXIdxObjCContainerDeclInfo$kind$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCContainerDeclInfo$kind$VH_ = CXIdxObjCContainerDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-    static final java.lang.invoke.VarHandle CXIdxObjCContainerDeclInfo$kind$VH() { return CXIdxObjCContainerDeclInfo$kind$VH_; }\n-\n-    static final MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"base\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"cursor\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"loc\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT() { return CXIdxBaseClassInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxBaseClassInfo$base$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxBaseClassInfo$base$LAYOUT() { return CXIdxBaseClassInfo$base$LAYOUT_; }\n-\n-    static final VarHandle CXIdxBaseClassInfo$base$VH_ = MemoryHandles.asAddressVarHandle(CXIdxBaseClassInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"base\")));\n-    static final java.lang.invoke.VarHandle CXIdxBaseClassInfo$base$VH() { return CXIdxBaseClassInfo$base$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"protocol\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"cursor\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"loc\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT() { return CXIdxObjCProtocolRefInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxObjCProtocolRefInfo$protocol$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefInfo$protocol$LAYOUT() { return CXIdxObjCProtocolRefInfo$protocol$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCProtocolRefInfo$protocol$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocol\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCProtocolRefInfo$protocol$VH() { return CXIdxObjCProtocolRefInfo$protocol$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"protocols\"),\n-        C_INT.withName(\"numProtocols\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT() { return CXIdxObjCProtocolRefListInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxObjCProtocolRefListInfo$protocols$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefListInfo$protocols$LAYOUT() { return CXIdxObjCProtocolRefListInfo$protocols$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCProtocolRefListInfo$protocols$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefListInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCProtocolRefListInfo$protocols$VH() { return CXIdxObjCProtocolRefListInfo$protocols$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCProtocolRefListInfo$numProtocols$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCProtocolRefListInfo$numProtocols$LAYOUT() { return CXIdxObjCProtocolRefListInfo$numProtocols$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCProtocolRefListInfo$numProtocols$VH_ = CXIdxObjCProtocolRefListInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numProtocols\"));\n-    static final java.lang.invoke.VarHandle CXIdxObjCProtocolRefListInfo$numProtocols$VH() { return CXIdxObjCProtocolRefListInfo$numProtocols$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"containerInfo\"),\n-        C_POINTER.withName(\"superInfo\"),\n-        C_POINTER.withName(\"protocols\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$containerInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$containerInfo$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$containerInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCInterfaceDeclInfo$containerInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"containerInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCInterfaceDeclInfo$containerInfo$VH() { return CXIdxObjCInterfaceDeclInfo$containerInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$superInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$superInfo$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$superInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCInterfaceDeclInfo$superInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"superInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCInterfaceDeclInfo$superInfo$VH() { return CXIdxObjCInterfaceDeclInfo$superInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCInterfaceDeclInfo$protocols$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCInterfaceDeclInfo$protocols$LAYOUT() { return CXIdxObjCInterfaceDeclInfo$protocols$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCInterfaceDeclInfo$protocols$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCInterfaceDeclInfo$protocols$VH() { return CXIdxObjCInterfaceDeclInfo$protocols$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"containerInfo\"),\n-        C_POINTER.withName(\"objcClass\"),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"classCursor\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"classLoc\"),\n-        C_POINTER.withName(\"protocols\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT() { return CXIdxObjCCategoryDeclInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxObjCCategoryDeclInfo$containerInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$containerInfo$LAYOUT() { return CXIdxObjCCategoryDeclInfo$containerInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCCategoryDeclInfo$containerInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"containerInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCCategoryDeclInfo$containerInfo$VH() { return CXIdxObjCCategoryDeclInfo$containerInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCCategoryDeclInfo$objcClass$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$objcClass$LAYOUT() { return CXIdxObjCCategoryDeclInfo$objcClass$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCCategoryDeclInfo$objcClass$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"objcClass\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCCategoryDeclInfo$objcClass$VH() { return CXIdxObjCCategoryDeclInfo$objcClass$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCCategoryDeclInfo$protocols$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCCategoryDeclInfo$protocols$LAYOUT() { return CXIdxObjCCategoryDeclInfo$protocols$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCCategoryDeclInfo$protocols$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCCategoryDeclInfo$protocols$VH() { return CXIdxObjCCategoryDeclInfo$protocols$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"declInfo\"),\n-        C_POINTER.withName(\"getter\"),\n-        C_POINTER.withName(\"setter\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT() { return CXIdxObjCPropertyDeclInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxObjCPropertyDeclInfo$declInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$declInfo$LAYOUT() { return CXIdxObjCPropertyDeclInfo$declInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCPropertyDeclInfo$declInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCPropertyDeclInfo$declInfo$VH() { return CXIdxObjCPropertyDeclInfo$declInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCPropertyDeclInfo$getter$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$getter$LAYOUT() { return CXIdxObjCPropertyDeclInfo$getter$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCPropertyDeclInfo$getter$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"getter\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCPropertyDeclInfo$getter$VH() { return CXIdxObjCPropertyDeclInfo$getter$VH_; }\n-\n-    static final MemoryLayout CXIdxObjCPropertyDeclInfo$setter$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxObjCPropertyDeclInfo$setter$LAYOUT() { return CXIdxObjCPropertyDeclInfo$setter$LAYOUT_; }\n-\n-    static final VarHandle CXIdxObjCPropertyDeclInfo$setter$VH_ = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"setter\")));\n-    static final java.lang.invoke.VarHandle CXIdxObjCPropertyDeclInfo$setter$VH() { return CXIdxObjCPropertyDeclInfo$setter$VH_; }\n-\n-    static final MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"declInfo\"),\n-        C_POINTER.withName(\"bases\"),\n-        C_INT.withName(\"numBases\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT() { return CXIdxCXXClassDeclInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxCXXClassDeclInfo$declInfo$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$declInfo$LAYOUT() { return CXIdxCXXClassDeclInfo$declInfo$LAYOUT_; }\n-\n-    static final VarHandle CXIdxCXXClassDeclInfo$declInfo$VH_ = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n-    static final java.lang.invoke.VarHandle CXIdxCXXClassDeclInfo$declInfo$VH() { return CXIdxCXXClassDeclInfo$declInfo$VH_; }\n-\n-    static final MemoryLayout CXIdxCXXClassDeclInfo$bases$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$bases$LAYOUT() { return CXIdxCXXClassDeclInfo$bases$LAYOUT_; }\n-\n-    static final VarHandle CXIdxCXXClassDeclInfo$bases$VH_ = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"bases\")));\n-    static final java.lang.invoke.VarHandle CXIdxCXXClassDeclInfo$bases$VH() { return CXIdxCXXClassDeclInfo$bases$VH_; }\n-\n-    static final MemoryLayout CXIdxCXXClassDeclInfo$numBases$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxCXXClassDeclInfo$numBases$LAYOUT() { return CXIdxCXXClassDeclInfo$numBases$LAYOUT_; }\n-\n-    static final VarHandle CXIdxCXXClassDeclInfo$numBases$VH_ = CXIdxCXXClassDeclInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numBases\"));\n-    static final java.lang.invoke.VarHandle CXIdxCXXClassDeclInfo$numBases$VH() { return CXIdxCXXClassDeclInfo$numBases$VH_; }\n-\n-    static final int CXIdxEntityRef_Direct() { return (int)1L; }\n-\n-    static final int CXIdxEntityRef_Implicit() { return (int)2L; }\n-\n-    static final int CXSymbolRole_None() { return (int)0L; }\n-\n-    static final int CXSymbolRole_Declaration() { return (int)1L; }\n-\n-    static final int CXSymbolRole_Definition() { return (int)2L; }\n-\n-    static final int CXSymbolRole_Reference() { return (int)4L; }\n-\n-    static final int CXSymbolRole_Read() { return (int)8L; }\n-\n-    static final int CXSymbolRole_Write() { return (int)16L; }\n-\n-    static final int CXSymbolRole_Call() { return (int)32L; }\n-\n-    static final int CXSymbolRole_Dynamic() { return (int)64L; }\n-\n-    static final int CXSymbolRole_AddressOf() { return (int)128L; }\n-\n-    static final int CXSymbolRole_Implicit() { return (int)256L; }\n-\n-    static final MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_INT.withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(32),\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ).withName(\"cursor\"),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ).withName(\"loc\"),\n-        C_POINTER.withName(\"referencedEntity\"),\n-        C_POINTER.withName(\"parentEntity\"),\n-        C_POINTER.withName(\"container\"),\n-        C_INT.withName(\"role\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT() { return CXIdxEntityRefInfo$struct$LAYOUT_; }\n-\n-    static final MemoryLayout CXIdxEntityRefInfo$kind$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$kind$LAYOUT() { return CXIdxEntityRefInfo$kind$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityRefInfo$kind$VH_ = CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$kind$VH() { return CXIdxEntityRefInfo$kind$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityRefInfo$referencedEntity$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$referencedEntity$LAYOUT() { return CXIdxEntityRefInfo$referencedEntity$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityRefInfo$referencedEntity$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"referencedEntity\")));\n-    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$referencedEntity$VH() { return CXIdxEntityRefInfo$referencedEntity$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityRefInfo$parentEntity$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$parentEntity$LAYOUT() { return CXIdxEntityRefInfo$parentEntity$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityRefInfo$parentEntity$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"parentEntity\")));\n-    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$parentEntity$VH() { return CXIdxEntityRefInfo$parentEntity$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityRefInfo$container$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$container$LAYOUT() { return CXIdxEntityRefInfo$container$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityRefInfo$container$VH_ = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"container\")));\n-    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$container$VH() { return CXIdxEntityRefInfo$container$VH_; }\n-\n-    static final MemoryLayout CXIdxEntityRefInfo$role$LAYOUT_ = C_INT;\n-    static final jdk.incubator.foreign.MemoryLayout CXIdxEntityRefInfo$role$LAYOUT() { return CXIdxEntityRefInfo$role$LAYOUT_; }\n-\n-    static final VarHandle CXIdxEntityRefInfo$role$VH_ = CXIdxEntityRefInfo$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"role\"));\n-    static final java.lang.invoke.VarHandle CXIdxEntityRefInfo$role$VH() { return CXIdxEntityRefInfo$role$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$struct$LAYOUT_ = MemoryLayout.ofStruct(\n-        C_POINTER.withName(\"abortQuery\"),\n-        C_POINTER.withName(\"diagnostic\"),\n-        C_POINTER.withName(\"enteredMainFile\"),\n-        C_POINTER.withName(\"ppIncludedFile\"),\n-        C_POINTER.withName(\"importedASTFile\"),\n-        C_POINTER.withName(\"startedTranslationUnit\"),\n-        C_POINTER.withName(\"indexDeclaration\"),\n-        C_POINTER.withName(\"indexEntityReference\")\n-    );\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$struct$LAYOUT() { return IndexerCallbacks$struct$LAYOUT_; }\n-\n-    static final MemoryLayout IndexerCallbacks$abortQuery$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$abortQuery$LAYOUT() { return IndexerCallbacks$abortQuery$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$abortQuery$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"abortQuery\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$abortQuery$VH() { return IndexerCallbacks$abortQuery$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$diagnostic$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$diagnostic$LAYOUT() { return IndexerCallbacks$diagnostic$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$diagnostic$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"diagnostic\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$diagnostic$VH() { return IndexerCallbacks$diagnostic$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$enteredMainFile$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$enteredMainFile$LAYOUT() { return IndexerCallbacks$enteredMainFile$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$enteredMainFile$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"enteredMainFile\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$enteredMainFile$VH() { return IndexerCallbacks$enteredMainFile$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$ppIncludedFile$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$ppIncludedFile$LAYOUT() { return IndexerCallbacks$ppIncludedFile$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$ppIncludedFile$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ppIncludedFile\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$ppIncludedFile$VH() { return IndexerCallbacks$ppIncludedFile$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$importedASTFile$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$importedASTFile$LAYOUT() { return IndexerCallbacks$importedASTFile$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$importedASTFile$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"importedASTFile\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$importedASTFile$VH() { return IndexerCallbacks$importedASTFile$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$startedTranslationUnit$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$startedTranslationUnit$LAYOUT() { return IndexerCallbacks$startedTranslationUnit$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$startedTranslationUnit$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"startedTranslationUnit\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$startedTranslationUnit$VH() { return IndexerCallbacks$startedTranslationUnit$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$indexDeclaration$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$indexDeclaration$LAYOUT() { return IndexerCallbacks$indexDeclaration$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$indexDeclaration$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"indexDeclaration\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$indexDeclaration$VH() { return IndexerCallbacks$indexDeclaration$VH_; }\n-\n-    static final MemoryLayout IndexerCallbacks$indexEntityReference$LAYOUT_ = C_POINTER;\n-    static final jdk.incubator.foreign.MemoryLayout IndexerCallbacks$indexEntityReference$LAYOUT() { return IndexerCallbacks$indexEntityReference$LAYOUT_; }\n-\n-    static final VarHandle IndexerCallbacks$indexEntityReference$VH_ = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"indexEntityReference\")));\n-    static final java.lang.invoke.VarHandle IndexerCallbacks$indexEntityReference$VH() { return IndexerCallbacks$indexEntityReference$VH_; }\n-\n-    static final FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC() { return clang_index_isEntityObjCContainerKind$FUNC_; }\n-\n-    static final MethodHandle clang_index_isEntityObjCContainerKind$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_isEntityObjCContainerKind\",\n-        \"(I)I\",\n-        clang_index_isEntityObjCContainerKind$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_isEntityObjCContainerKind$MH() { return clang_index_isEntityObjCContainerKind$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC() { return clang_index_getObjCContainerDeclInfo$FUNC_; }\n-\n-    static final MethodHandle clang_index_getObjCContainerDeclInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getObjCContainerDeclInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getObjCContainerDeclInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getObjCContainerDeclInfo$MH() { return clang_index_getObjCContainerDeclInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC() { return clang_index_getObjCInterfaceDeclInfo$FUNC_; }\n-\n-    static final MethodHandle clang_index_getObjCInterfaceDeclInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getObjCInterfaceDeclInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getObjCInterfaceDeclInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() { return clang_index_getObjCInterfaceDeclInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC() { return clang_index_getObjCCategoryDeclInfo$FUNC_; }\n-\n-    static final MethodHandle clang_index_getObjCCategoryDeclInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getObjCCategoryDeclInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getObjCCategoryDeclInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getObjCCategoryDeclInfo$MH() { return clang_index_getObjCCategoryDeclInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC() { return clang_index_getObjCProtocolRefListInfo$FUNC_; }\n-\n-    static final MethodHandle clang_index_getObjCProtocolRefListInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getObjCProtocolRefListInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getObjCProtocolRefListInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getObjCProtocolRefListInfo$MH() { return clang_index_getObjCProtocolRefListInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC() { return clang_index_getObjCPropertyDeclInfo$FUNC_; }\n-\n-    static final MethodHandle clang_index_getObjCPropertyDeclInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getObjCPropertyDeclInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getObjCPropertyDeclInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getObjCPropertyDeclInfo$MH() { return clang_index_getObjCPropertyDeclInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC() { return clang_index_getIBOutletCollectionAttrInfo$FUNC_; }\n-\n-    static final MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getIBOutletCollectionAttrInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getIBOutletCollectionAttrInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() { return clang_index_getIBOutletCollectionAttrInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC() { return clang_index_getCXXClassDeclInfo$FUNC_; }\n-\n-    static final MethodHandle clang_index_getCXXClassDeclInfo$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getCXXClassDeclInfo\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getCXXClassDeclInfo$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getCXXClassDeclInfo$MH() { return clang_index_getCXXClassDeclInfo$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getClientContainer$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getClientContainer$FUNC() { return clang_index_getClientContainer$FUNC_; }\n-\n-    static final MethodHandle clang_index_getClientContainer$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getClientContainer\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getClientContainer$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getClientContainer$MH() { return clang_index_getClientContainer$MH_; }\n-\n-    static final FunctionDescriptor clang_index_setClientContainer$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_setClientContainer$FUNC() { return clang_index_setClientContainer$FUNC_; }\n-\n-    static final MethodHandle clang_index_setClientContainer$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_setClientContainer\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_index_setClientContainer$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_setClientContainer$MH() { return clang_index_setClientContainer$MH_; }\n-\n-    static final FunctionDescriptor clang_index_getClientEntity$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_getClientEntity$FUNC() { return clang_index_getClientEntity$FUNC_; }\n-\n-    static final MethodHandle clang_index_getClientEntity$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_getClientEntity\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_index_getClientEntity$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_getClientEntity$MH() { return clang_index_getClientEntity$MH_; }\n-\n-    static final FunctionDescriptor clang_index_setClientEntity$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_index_setClientEntity$FUNC() { return clang_index_setClientEntity$FUNC_; }\n-\n-    static final MethodHandle clang_index_setClientEntity$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_index_setClientEntity\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_index_setClientEntity$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_index_setClientEntity$MH() { return clang_index_setClientEntity$MH_; }\n-\n-    static final FunctionDescriptor clang_IndexAction_create$FUNC_ = FunctionDescriptor.of(C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_IndexAction_create$FUNC() { return clang_IndexAction_create$FUNC_; }\n-\n-    static final MethodHandle clang_IndexAction_create$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_IndexAction_create\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-        clang_IndexAction_create$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_IndexAction_create$MH() { return clang_IndexAction_create$MH_; }\n-\n-    static final FunctionDescriptor clang_IndexAction_dispose$FUNC_ = FunctionDescriptor.ofVoid(\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_IndexAction_dispose$FUNC() { return clang_IndexAction_dispose$FUNC_; }\n-\n-    static final MethodHandle clang_IndexAction_dispose$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_IndexAction_dispose\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_IndexAction_dispose$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_IndexAction_dispose$MH() { return clang_IndexAction_dispose$MH_; }\n-\n-    static final int CXIndexOpt_None() { return (int)0L; }\n-\n-    static final int CXIndexOpt_SuppressRedundantRefs() { return (int)1L; }\n-\n-    static final int CXIndexOpt_IndexFunctionLocalSymbols() { return (int)2L; }\n-\n-    static final int CXIndexOpt_IndexImplicitTemplateInstantiations() { return (int)4L; }\n-\n-    static final int CXIndexOpt_SuppressWarnings() { return (int)8L; }\n-\n-    static final int CXIndexOpt_SkipParsedBodiesInSession() { return (int)16L; }\n-\n-    static final FunctionDescriptor clang_indexSourceFile$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_indexSourceFile$FUNC() { return clang_indexSourceFile$FUNC_; }\n-\n-    static final MethodHandle clang_indexSourceFile$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_indexSourceFile\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_indexSourceFile$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_indexSourceFile$MH() { return clang_indexSourceFile$MH_; }\n-\n-    static final FunctionDescriptor clang_indexSourceFileFullArgv$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT,\n-        C_POINTER,\n-        C_INT\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_indexSourceFileFullArgv$FUNC() { return clang_indexSourceFileFullArgv$FUNC_; }\n-\n-    static final MethodHandle clang_indexSourceFileFullArgv$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_indexSourceFileFullArgv\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-        clang_indexSourceFileFullArgv$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_indexSourceFileFullArgv$MH() { return clang_indexSourceFileFullArgv$MH_; }\n-\n-    static final FunctionDescriptor clang_indexTranslationUnit$FUNC_ = FunctionDescriptor.of(C_INT,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_INT,\n-        C_INT,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_indexTranslationUnit$FUNC() { return clang_indexTranslationUnit$FUNC_; }\n-\n-    static final MethodHandle clang_indexTranslationUnit$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_indexTranslationUnit\",\n-        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_indexTranslationUnit$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_indexTranslationUnit$MH() { return clang_indexTranslationUnit$MH_; }\n-\n-    static final FunctionDescriptor clang_indexLoc_getFileLocation$FUNC_ = FunctionDescriptor.ofVoid(\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        ),\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_indexLoc_getFileLocation$FUNC() { return clang_indexLoc_getFileLocation$FUNC_; }\n-\n-    static final MethodHandle clang_indexLoc_getFileLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_indexLoc_getFileLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-        clang_indexLoc_getFileLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_indexLoc_getFileLocation$MH() { return clang_indexLoc_getFileLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(\n-        MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-        C_INT.withName(\"int_data\"),\n-        MemoryLayout.ofPaddingBits(32)\n-    ),\n-        MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.ofPaddingBits(32)\n-        )\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC() { return clang_indexLoc_getCXSourceLocation$FUNC_; }\n-\n-    static final MethodHandle clang_indexLoc_getCXSourceLocation$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_indexLoc_getCXSourceLocation\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-        clang_indexLoc_getCXSourceLocation$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_indexLoc_getCXSourceLocation$MH() { return clang_indexLoc_getCXSourceLocation$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_visitFields$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.ofPaddingBits(32),\n-            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER,\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_visitFields$FUNC() { return clang_Type_visitFields$FUNC_; }\n-\n-    static final MethodHandle clang_Type_visitFields$MH_ = RuntimeHelper.downcallHandle(\n-        LIBRARIES, \"clang_Type_visitFields\",\n-        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-        clang_Type_visitFields$FUNC_, false\n-    );\n-    static final java.lang.invoke.MethodHandle clang_Type_visitFields$MH() { return clang_Type_visitFields$MH_; }\n-\n-    static final FunctionDescriptor clang_Type_visitFields$visitor$FUNC_ = FunctionDescriptor.of(C_INT,\n-        MemoryLayout.ofStruct(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n-        ),\n-        C_POINTER\n-    );\n-    static final jdk.incubator.foreign.FunctionDescriptor clang_Type_visitFields$visitor$FUNC() { return clang_Type_visitFields$visitor$FUNC_; }\n-\n-    static final int CINDEX_VERSION() { return (int)59L; }\n-\n-    static final MemorySegment CINDEX_VERSION_STRING$SEGMENT_CONSTANT_ = CLinker.toCString(\"0.59\");\n-    static final jdk.incubator.foreign.MemorySegment CINDEX_VERSION_STRING() { return CINDEX_VERSION_STRING$SEGMENT_CONSTANT_; }\n-\n-}\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h$constants_1.java","additions":0,"deletions":3651,"binary":false,"changes":3651,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.nio.ByteOrder;\n@@ -34,1 +35,0 @@\n-import jdk.incubator.foreign.MemoryLayout.PathElement;\n@@ -36,1 +36,1 @@\n-public final class Index_h {\n+public class Index_h extends Index_h_1 {\n@@ -38,3 +38,3 @@\n-    private Index_h() {}\n-    public static @C(\"int\") int CINDEX_VERSION_MAJOR() {\n-        return Index_h$constants_0.CINDEX_VERSION_MAJOR();\n+    \/* package-private *\/ Index_h() {}\n+    public static int CINDEX_VERSION_MAJOR() {\n+        return (int)0L;\n@@ -42,2 +42,2 @@\n-    public static @C(\"int\") int CINDEX_VERSION_MINOR() {\n-        return Index_h$constants_0.CINDEX_VERSION_MINOR();\n+    public static int CINDEX_VERSION_MINOR() {\n+        return (int)59L;\n@@ -45,2 +45,2 @@\n-    public static @C(\"int\") int CXError_Success() {\n-        return Index_h$constants_0.CXError_Success();\n+    public static int CXError_Success() {\n+        return (int)0L;\n@@ -48,2 +48,2 @@\n-    public static @C(\"int\") int CXError_Failure() {\n-        return Index_h$constants_0.CXError_Failure();\n+    public static int CXError_Failure() {\n+        return (int)1L;\n@@ -51,2 +51,2 @@\n-    public static @C(\"int\") int CXError_Crashed() {\n-        return Index_h$constants_0.CXError_Crashed();\n+    public static int CXError_Crashed() {\n+        return (int)2L;\n@@ -54,2 +54,2 @@\n-    public static @C(\"int\") int CXError_InvalidArguments() {\n-        return Index_h$constants_0.CXError_InvalidArguments();\n+    public static int CXError_InvalidArguments() {\n+        return (int)3L;\n@@ -57,2 +57,2 @@\n-    public static @C(\"int\") int CXError_ASTReadError() {\n-        return Index_h$constants_0.CXError_ASTReadError();\n+    public static int CXError_ASTReadError() {\n+        return (int)4L;\n@@ -62,1 +62,5 @@\n-        private CXString() {}\n+        static final MemoryLayout CXString$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -64,1 +68,1 @@\n-            return Index_h$constants_0.CXString$struct$LAYOUT();\n+            return CXString.CXString$struct$LAYOUT;\n@@ -66,0 +70,1 @@\n+        static final VarHandle data$VH = MemoryHandles.asAddressVarHandle(CXString$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"data\")));\n@@ -67,1 +72,1 @@\n-            return Index_h$constants_0.CXString$data$VH();\n+            return CXString.data$VH;\n@@ -69,2 +74,2 @@\n-        public static  @C(\"void*\") MemoryAddress data$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXString$data$VH().get(seg);\n+        public static MemoryAddress data$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg);\n@@ -72,2 +77,2 @@\n-        public static  @C(\"void*\") MemoryAddress data$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXString$data$VH().get(seg.asSlice(index*sizeof()));\n+        public static void data$set( MemorySegment seg, MemoryAddress x) {\n+            CXString.data$VH.set(seg, x);\n@@ -75,2 +80,2 @@\n-        public static void data$set(@C(\"struct \") MemorySegment seg, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_0.CXString$data$VH().set(seg, x);\n+        public static MemoryAddress data$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg.asSlice(index*sizeof()));\n@@ -78,2 +83,2 @@\n-        public static void data$set(@C(\"struct \") MemorySegment seg, long index, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_0.CXString$data$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void data$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXString.data$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -81,0 +86,1 @@\n+        static final VarHandle private_flags$VH = CXString$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"private_flags\"));\n@@ -82,1 +88,1 @@\n-            return Index_h$constants_0.CXString$private_flags$VH();\n+            return CXString.private_flags$VH;\n@@ -84,2 +90,2 @@\n-        public static  @C(\"unsigned int\") int private_flags$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXString$private_flags$VH().get(seg);\n+        public static int private_flags$get(MemorySegment seg) {\n+            return (int)CXString.private_flags$VH.get(seg);\n@@ -87,2 +93,2 @@\n-        public static  @C(\"unsigned int\") int private_flags$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXString$private_flags$VH().get(seg.asSlice(index*sizeof()));\n+        public static void private_flags$set( MemorySegment seg, int x) {\n+            CXString.private_flags$VH.set(seg, x);\n@@ -90,2 +96,2 @@\n-        public static void private_flags$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXString$private_flags$VH().set(seg, x);\n+        public static int private_flags$get(MemorySegment seg, long index) {\n+            return (int)CXString.private_flags$VH.get(seg.asSlice(index*sizeof()));\n@@ -93,2 +99,2 @@\n-        public static void private_flags$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXString$private_flags$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void private_flags$set(MemorySegment seg, long index, int x) {\n+            CXString.private_flags$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -97,3 +103,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -101,1 +107,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -104,1 +110,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -107,1 +113,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -110,1 +116,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -115,1 +121,5 @@\n-        private CXStringSet() {}\n+        static final MemoryLayout CXStringSet$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"Strings\"),\n+            C_INT.withName(\"Count\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -117,1 +127,1 @@\n-            return Index_h$constants_0.CXStringSet$struct$LAYOUT();\n+            return CXStringSet.CXStringSet$struct$LAYOUT;\n@@ -119,0 +129,1 @@\n+        static final VarHandle Strings$VH = MemoryHandles.asAddressVarHandle(CXStringSet$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Strings\")));\n@@ -120,1 +131,1 @@\n-            return Index_h$constants_0.CXStringSet$Strings$VH();\n+            return CXStringSet.Strings$VH;\n@@ -122,2 +133,2 @@\n-        public static  @C(\"CXString*\") MemoryAddress Strings$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXStringSet$Strings$VH().get(seg);\n+        public static MemoryAddress Strings$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXStringSet.Strings$VH.get(seg);\n@@ -125,2 +136,2 @@\n-        public static  @C(\"CXString*\") MemoryAddress Strings$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXStringSet$Strings$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Strings$set( MemorySegment seg, MemoryAddress x) {\n+            CXStringSet.Strings$VH.set(seg, x);\n@@ -128,2 +139,2 @@\n-        public static void Strings$set(@C(\"struct \") MemorySegment seg, @C(\"CXString*\") MemoryAddress x) {\n-            Index_h$constants_0.CXStringSet$Strings$VH().set(seg, x);\n+        public static MemoryAddress Strings$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXStringSet.Strings$VH.get(seg.asSlice(index*sizeof()));\n@@ -131,2 +142,2 @@\n-        public static void Strings$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXString*\") MemoryAddress x) {\n-            Index_h$constants_0.CXStringSet$Strings$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Strings$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXStringSet.Strings$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -134,0 +145,1 @@\n+        static final VarHandle Count$VH = CXStringSet$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Count\"));\n@@ -135,1 +147,1 @@\n-            return Index_h$constants_0.CXStringSet$Count$VH();\n+            return CXStringSet.Count$VH;\n@@ -137,2 +149,2 @@\n-        public static  @C(\"unsigned int\") int Count$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXStringSet$Count$VH().get(seg);\n+        public static int Count$get(MemorySegment seg) {\n+            return (int)CXStringSet.Count$VH.get(seg);\n@@ -140,2 +152,2 @@\n-        public static  @C(\"unsigned int\") int Count$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXStringSet$Count$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Count$set( MemorySegment seg, int x) {\n+            CXStringSet.Count$VH.set(seg, x);\n@@ -143,2 +155,2 @@\n-        public static void Count$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXStringSet$Count$VH().set(seg, x);\n+        public static int Count$get(MemorySegment seg, long index) {\n+            return (int)CXStringSet.Count$VH.get(seg.asSlice(index*sizeof()));\n@@ -146,2 +158,2 @@\n-        public static void Count$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXStringSet$Count$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Count$set(MemorySegment seg, long index, int x) {\n+            CXStringSet.Count$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -150,3 +162,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -154,1 +166,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -157,1 +169,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -160,1 +172,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -163,1 +175,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -166,2 +178,2 @@\n-    public static  MethodHandle clang_getCString$MH() {\n-        return Index_h$constants_0.clang_getCString$MH();\n+    public static MethodHandle clang_getCString$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_getCString$MH,\"clang_getCString\");\n@@ -169,1 +181,2 @@\n-    public static @C(\"char*\") MemoryAddress clang_getCString (@C(\"CXString\") MemorySegment string) {\n+    public static MemoryAddress clang_getCString ( MemorySegment string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_getCString$MH, \"clang_getCString\");\n@@ -171,3 +184,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getCString$MH().invokeExact(string);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -176,2 +189,2 @@\n-    public static  MethodHandle clang_disposeString$MH() {\n-        return Index_h$constants_0.clang_disposeString$MH();\n+    public static MethodHandle clang_disposeString$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_disposeString$MH,\"clang_disposeString\");\n@@ -179,1 +192,2 @@\n-    public static void clang_disposeString (@C(\"CXString\") MemorySegment string) {\n+    public static void clang_disposeString ( MemorySegment string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_disposeString$MH, \"clang_disposeString\");\n@@ -181,3 +195,3 @@\n-            Index_h$constants_0.clang_disposeString$MH().invokeExact(string);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(string);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -186,2 +200,2 @@\n-    public static  MethodHandle clang_disposeStringSet$MH() {\n-        return Index_h$constants_0.clang_disposeStringSet$MH();\n+    public static MethodHandle clang_disposeStringSet$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_disposeStringSet$MH,\"clang_disposeStringSet\");\n@@ -189,1 +203,2 @@\n-    public static void clang_disposeStringSet (@C(\"CXStringSet*\") Addressable set) {\n+    public static void clang_disposeStringSet ( Addressable set) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_disposeStringSet$MH, \"clang_disposeStringSet\");\n@@ -191,3 +206,3 @@\n-            Index_h$constants_0.clang_disposeStringSet$MH().invokeExact(set.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(set.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -198,1 +213,5 @@\n-        private CXUnsavedFile() {}\n+        static final MemoryLayout CXUnsavedFile$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"Filename\"),\n+            C_POINTER.withName(\"Contents\"),\n+            C_LONG_LONG.withName(\"Length\")\n+        ).withName(\"CXUnsavedFile\");\n@@ -200,1 +219,1 @@\n-            return Index_h$constants_0.CXUnsavedFile$struct$LAYOUT();\n+            return CXUnsavedFile.CXUnsavedFile$struct$LAYOUT;\n@@ -202,0 +221,1 @@\n+        static final VarHandle Filename$VH = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Filename\")));\n@@ -203,1 +223,1 @@\n-            return Index_h$constants_0.CXUnsavedFile$Filename$VH();\n+            return CXUnsavedFile.Filename$VH;\n@@ -205,2 +225,2 @@\n-        public static  @C(\"char*\") MemoryAddress Filename$get(@C(\"struct CXUnsavedFile\") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXUnsavedFile$Filename$VH().get(seg);\n+        public static MemoryAddress Filename$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg);\n@@ -208,2 +228,2 @@\n-        public static  @C(\"char*\") MemoryAddress Filename$get(@C(\"struct CXUnsavedFile\") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXUnsavedFile$Filename$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Filename$set( MemorySegment seg, MemoryAddress x) {\n+            CXUnsavedFile.Filename$VH.set(seg, x);\n@@ -211,2 +231,2 @@\n-        public static void Filename$set(@C(\"struct CXUnsavedFile\") MemorySegment seg, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_0.CXUnsavedFile$Filename$VH().set(seg, x);\n+        public static MemoryAddress Filename$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg.asSlice(index*sizeof()));\n@@ -214,2 +234,2 @@\n-        public static void Filename$set(@C(\"struct CXUnsavedFile\") MemorySegment seg, long index, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_0.CXUnsavedFile$Filename$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Filename$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXUnsavedFile.Filename$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -217,0 +237,1 @@\n+        static final VarHandle Contents$VH = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Contents\")));\n@@ -218,1 +239,1 @@\n-            return Index_h$constants_0.CXUnsavedFile$Contents$VH();\n+            return CXUnsavedFile.Contents$VH;\n@@ -220,2 +241,2 @@\n-        public static  @C(\"char*\") MemoryAddress Contents$get(@C(\"struct CXUnsavedFile\") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXUnsavedFile$Contents$VH().get(seg);\n+        public static MemoryAddress Contents$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg);\n@@ -223,2 +244,2 @@\n-        public static  @C(\"char*\") MemoryAddress Contents$get(@C(\"struct CXUnsavedFile\") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXUnsavedFile$Contents$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Contents$set( MemorySegment seg, MemoryAddress x) {\n+            CXUnsavedFile.Contents$VH.set(seg, x);\n@@ -226,2 +247,2 @@\n-        public static void Contents$set(@C(\"struct CXUnsavedFile\") MemorySegment seg, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_0.CXUnsavedFile$Contents$VH().set(seg, x);\n+        public static MemoryAddress Contents$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg.asSlice(index*sizeof()));\n@@ -229,2 +250,2 @@\n-        public static void Contents$set(@C(\"struct CXUnsavedFile\") MemorySegment seg, long index, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_0.CXUnsavedFile$Contents$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Contents$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXUnsavedFile.Contents$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -232,0 +253,1 @@\n+        static final VarHandle Length$VH = CXUnsavedFile$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Length\"));\n@@ -233,1 +255,1 @@\n-            return Index_h$constants_0.CXUnsavedFile$Length$VH();\n+            return CXUnsavedFile.Length$VH;\n@@ -235,2 +257,2 @@\n-        public static  @C(\"unsigned long\") long Length$get(@C(\"struct CXUnsavedFile\") MemorySegment seg) {\n-            return (long)Index_h$constants_0.CXUnsavedFile$Length$VH().get(seg);\n+        public static long Length$get(MemorySegment seg) {\n+            return (long)CXUnsavedFile.Length$VH.get(seg);\n@@ -238,2 +260,2 @@\n-        public static  @C(\"unsigned long\") long Length$get(@C(\"struct CXUnsavedFile\") MemorySegment seg, long index) {\n-            return (long)Index_h$constants_0.CXUnsavedFile$Length$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Length$set( MemorySegment seg, long x) {\n+            CXUnsavedFile.Length$VH.set(seg, x);\n@@ -241,2 +263,2 @@\n-        public static void Length$set(@C(\"struct CXUnsavedFile\") MemorySegment seg, @C(\"unsigned long\") long x) {\n-            Index_h$constants_0.CXUnsavedFile$Length$VH().set(seg, x);\n+        public static long Length$get(MemorySegment seg, long index) {\n+            return (long)CXUnsavedFile.Length$VH.get(seg.asSlice(index*sizeof()));\n@@ -244,2 +266,2 @@\n-        public static void Length$set(@C(\"struct CXUnsavedFile\") MemorySegment seg, long index, @C(\"unsigned long\") long x) {\n-            Index_h$constants_0.CXUnsavedFile$Length$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Length$set(MemorySegment seg, long index, long x) {\n+            CXUnsavedFile.Length$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -248,3 +270,3 @@\n-        public static @C(\"struct CXUnsavedFile\") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct CXUnsavedFile\") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct CXUnsavedFile[]\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -252,1 +274,1 @@\n-        }        public static @C(\"struct CXUnsavedFile[]\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -255,1 +277,1 @@\n-        public static @C(\"struct CXUnsavedFile*\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -258,1 +280,1 @@\n-        public static @C(\"struct CXUnsavedFile*\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -261,1 +283,1 @@\n-        public static @C(\"struct CXUnsavedFile\") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -264,2 +286,2 @@\n-    public static @C(\"int\") int CXAvailability_Available() {\n-        return Index_h$constants_0.CXAvailability_Available();\n+    public static int CXAvailability_Available() {\n+        return (int)0L;\n@@ -267,2 +289,2 @@\n-    public static @C(\"int\") int CXAvailability_Deprecated() {\n-        return Index_h$constants_0.CXAvailability_Deprecated();\n+    public static int CXAvailability_Deprecated() {\n+        return (int)1L;\n@@ -270,2 +292,2 @@\n-    public static @C(\"int\") int CXAvailability_NotAvailable() {\n-        return Index_h$constants_0.CXAvailability_NotAvailable();\n+    public static int CXAvailability_NotAvailable() {\n+        return (int)2L;\n@@ -273,2 +295,2 @@\n-    public static @C(\"int\") int CXAvailability_NotAccessible() {\n-        return Index_h$constants_0.CXAvailability_NotAccessible();\n+    public static int CXAvailability_NotAccessible() {\n+        return (int)3L;\n@@ -278,1 +300,5 @@\n-        private CXVersion() {}\n+        static final MemoryLayout CXVersion$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"Major\"),\n+            C_INT.withName(\"Minor\"),\n+            C_INT.withName(\"Subminor\")\n+        ).withName(\"CXVersion\");\n@@ -280,1 +306,1 @@\n-            return Index_h$constants_0.CXVersion$struct$LAYOUT();\n+            return CXVersion.CXVersion$struct$LAYOUT;\n@@ -282,0 +308,1 @@\n+        static final VarHandle Major$VH = CXVersion$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Major\"));\n@@ -283,1 +310,1 @@\n-            return Index_h$constants_0.CXVersion$Major$VH();\n+            return CXVersion.Major$VH;\n@@ -285,2 +312,2 @@\n-        public static  @C(\"int\") int Major$get(@C(\"struct CXVersion\") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXVersion$Major$VH().get(seg);\n+        public static int Major$get(MemorySegment seg) {\n+            return (int)CXVersion.Major$VH.get(seg);\n@@ -288,2 +315,2 @@\n-        public static  @C(\"int\") int Major$get(@C(\"struct CXVersion\") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXVersion$Major$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Major$set( MemorySegment seg, int x) {\n+            CXVersion.Major$VH.set(seg, x);\n@@ -291,2 +318,2 @@\n-        public static void Major$set(@C(\"struct CXVersion\") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_0.CXVersion$Major$VH().set(seg, x);\n+        public static int Major$get(MemorySegment seg, long index) {\n+            return (int)CXVersion.Major$VH.get(seg.asSlice(index*sizeof()));\n@@ -294,2 +321,2 @@\n-        public static void Major$set(@C(\"struct CXVersion\") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_0.CXVersion$Major$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Major$set(MemorySegment seg, long index, int x) {\n+            CXVersion.Major$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -297,0 +324,1 @@\n+        static final VarHandle Minor$VH = CXVersion$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Minor\"));\n@@ -298,1 +326,1 @@\n-            return Index_h$constants_0.CXVersion$Minor$VH();\n+            return CXVersion.Minor$VH;\n@@ -300,2 +328,2 @@\n-        public static  @C(\"int\") int Minor$get(@C(\"struct CXVersion\") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXVersion$Minor$VH().get(seg);\n+        public static int Minor$get(MemorySegment seg) {\n+            return (int)CXVersion.Minor$VH.get(seg);\n@@ -303,2 +331,2 @@\n-        public static  @C(\"int\") int Minor$get(@C(\"struct CXVersion\") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXVersion$Minor$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Minor$set( MemorySegment seg, int x) {\n+            CXVersion.Minor$VH.set(seg, x);\n@@ -306,2 +334,2 @@\n-        public static void Minor$set(@C(\"struct CXVersion\") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_0.CXVersion$Minor$VH().set(seg, x);\n+        public static int Minor$get(MemorySegment seg, long index) {\n+            return (int)CXVersion.Minor$VH.get(seg.asSlice(index*sizeof()));\n@@ -309,2 +337,2 @@\n-        public static void Minor$set(@C(\"struct CXVersion\") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_0.CXVersion$Minor$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Minor$set(MemorySegment seg, long index, int x) {\n+            CXVersion.Minor$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -312,0 +340,1 @@\n+        static final VarHandle Subminor$VH = CXVersion$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Subminor\"));\n@@ -313,1 +342,1 @@\n-            return Index_h$constants_0.CXVersion$Subminor$VH();\n+            return CXVersion.Subminor$VH;\n@@ -315,2 +344,2 @@\n-        public static  @C(\"int\") int Subminor$get(@C(\"struct CXVersion\") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXVersion$Subminor$VH().get(seg);\n+        public static int Subminor$get(MemorySegment seg) {\n+            return (int)CXVersion.Subminor$VH.get(seg);\n@@ -318,2 +347,2 @@\n-        public static  @C(\"int\") int Subminor$get(@C(\"struct CXVersion\") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXVersion$Subminor$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Subminor$set( MemorySegment seg, int x) {\n+            CXVersion.Subminor$VH.set(seg, x);\n@@ -321,2 +350,2 @@\n-        public static void Subminor$set(@C(\"struct CXVersion\") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_0.CXVersion$Subminor$VH().set(seg, x);\n+        public static int Subminor$get(MemorySegment seg, long index) {\n+            return (int)CXVersion.Subminor$VH.get(seg.asSlice(index*sizeof()));\n@@ -324,2 +353,2 @@\n-        public static void Subminor$set(@C(\"struct CXVersion\") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_0.CXVersion$Subminor$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Subminor$set(MemorySegment seg, long index, int x) {\n+            CXVersion.Subminor$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -328,3 +357,3 @@\n-        public static @C(\"struct CXVersion\") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct CXVersion\") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct CXVersion[]\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -332,1 +361,1 @@\n-        }        public static @C(\"struct CXVersion[]\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -335,1 +364,1 @@\n-        public static @C(\"struct CXVersion*\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -338,1 +367,1 @@\n-        public static @C(\"struct CXVersion*\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -341,1 +370,1 @@\n-        public static @C(\"struct CXVersion\") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -344,2 +373,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_None() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_None();\n+    public static int CXCursor_ExceptionSpecificationKind_None() {\n+        return (int)0L;\n@@ -347,2 +376,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_DynamicNone() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_DynamicNone();\n+    public static int CXCursor_ExceptionSpecificationKind_DynamicNone() {\n+        return (int)1L;\n@@ -350,2 +379,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_Dynamic() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Dynamic();\n+    public static int CXCursor_ExceptionSpecificationKind_Dynamic() {\n+        return (int)2L;\n@@ -353,2 +382,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_MSAny() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_MSAny();\n+    public static int CXCursor_ExceptionSpecificationKind_MSAny() {\n+        return (int)3L;\n@@ -356,2 +385,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_BasicNoexcept() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_BasicNoexcept();\n+    public static int CXCursor_ExceptionSpecificationKind_BasicNoexcept() {\n+        return (int)4L;\n@@ -359,2 +388,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_ComputedNoexcept() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_ComputedNoexcept();\n+    public static int CXCursor_ExceptionSpecificationKind_ComputedNoexcept() {\n+        return (int)5L;\n@@ -362,2 +391,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_Unevaluated() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Unevaluated();\n+    public static int CXCursor_ExceptionSpecificationKind_Unevaluated() {\n+        return (int)6L;\n@@ -365,2 +394,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_Uninstantiated() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Uninstantiated();\n+    public static int CXCursor_ExceptionSpecificationKind_Uninstantiated() {\n+        return (int)7L;\n@@ -368,2 +397,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_Unparsed() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_Unparsed();\n+    public static int CXCursor_ExceptionSpecificationKind_Unparsed() {\n+        return (int)8L;\n@@ -371,2 +400,2 @@\n-    public static @C(\"int\") int CXCursor_ExceptionSpecificationKind_NoThrow() {\n-        return Index_h$constants_0.CXCursor_ExceptionSpecificationKind_NoThrow();\n+    public static int CXCursor_ExceptionSpecificationKind_NoThrow() {\n+        return (int)9L;\n@@ -374,2 +403,2 @@\n-    public static  MethodHandle clang_createIndex$MH() {\n-        return Index_h$constants_0.clang_createIndex$MH();\n+    public static MethodHandle clang_createIndex$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_createIndex$MH,\"clang_createIndex\");\n@@ -377,1 +406,2 @@\n-    public static @C(\"CXIndex\") MemoryAddress clang_createIndex (@C(\"int\") int excludeDeclarationsFromPCH, @C(\"int\") int displayDiagnostics) {\n+    public static MemoryAddress clang_createIndex ( int excludeDeclarationsFromPCH,  int displayDiagnostics) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_createIndex$MH, \"clang_createIndex\");\n@@ -379,3 +409,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createIndex$MH().invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -384,2 +414,2 @@\n-    public static  MethodHandle clang_disposeIndex$MH() {\n-        return Index_h$constants_0.clang_disposeIndex$MH();\n+    public static MethodHandle clang_disposeIndex$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_disposeIndex$MH,\"clang_disposeIndex\");\n@@ -387,1 +417,2 @@\n-    public static void clang_disposeIndex (@C(\"CXIndex\") Addressable index) {\n+    public static void clang_disposeIndex ( Addressable index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_disposeIndex$MH, \"clang_disposeIndex\");\n@@ -389,3 +420,3 @@\n-            Index_h$constants_0.clang_disposeIndex$MH().invokeExact(index.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(index.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -394,2 +425,2 @@\n-    public static @C(\"int\") int CXGlobalOpt_None() {\n-        return Index_h$constants_0.CXGlobalOpt_None();\n+    public static int CXGlobalOpt_None() {\n+        return (int)0L;\n@@ -397,2 +428,2 @@\n-    public static @C(\"int\") int CXGlobalOpt_ThreadBackgroundPriorityForIndexing() {\n-        return Index_h$constants_0.CXGlobalOpt_ThreadBackgroundPriorityForIndexing();\n+    public static int CXGlobalOpt_ThreadBackgroundPriorityForIndexing() {\n+        return (int)1L;\n@@ -400,2 +431,2 @@\n-    public static @C(\"int\") int CXGlobalOpt_ThreadBackgroundPriorityForEditing() {\n-        return Index_h$constants_0.CXGlobalOpt_ThreadBackgroundPriorityForEditing();\n+    public static int CXGlobalOpt_ThreadBackgroundPriorityForEditing() {\n+        return (int)2L;\n@@ -403,2 +434,2 @@\n-    public static @C(\"int\") int CXGlobalOpt_ThreadBackgroundPriorityForAll() {\n-        return Index_h$constants_0.CXGlobalOpt_ThreadBackgroundPriorityForAll();\n+    public static int CXGlobalOpt_ThreadBackgroundPriorityForAll() {\n+        return (int)3L;\n@@ -406,2 +437,2 @@\n-    public static  MethodHandle clang_CXIndex_setGlobalOptions$MH() {\n-        return Index_h$constants_0.clang_CXIndex_setGlobalOptions$MH();\n+    public static MethodHandle clang_CXIndex_setGlobalOptions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_CXIndex_setGlobalOptions$MH,\"clang_CXIndex_setGlobalOptions\");\n@@ -409,1 +440,2 @@\n-    public static void clang_CXIndex_setGlobalOptions (@C(\"CXIndex\") Addressable x0, @C(\"unsigned int\") int options) {\n+    public static void clang_CXIndex_setGlobalOptions ( Addressable x0,  int options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_CXIndex_setGlobalOptions$MH, \"clang_CXIndex_setGlobalOptions\");\n@@ -411,3 +443,3 @@\n-            Index_h$constants_0.clang_CXIndex_setGlobalOptions$MH().invokeExact(x0.address(), options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(x0.address(), options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -416,2 +448,64 @@\n-    public static  MethodHandle clang_CXIndex_getGlobalOptions$MH() {\n-        return Index_h$constants_0.clang_CXIndex_getGlobalOptions$MH();\n+    public static class constants$0 {\n+\n+        static final FunctionDescriptor clang_getCString$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_getCString$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCString\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$0.clang_getCString$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeString$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_disposeString$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeString\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n+            constants$0.clang_disposeString$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeStringSet$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeStringSet$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeStringSet\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$0.clang_disposeStringSet$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_createIndex$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_createIndex$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_createIndex\",\n+            \"(II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$0.clang_createIndex$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeIndex$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeIndex$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeIndex\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$0.clang_disposeIndex$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXIndex_setGlobalOptions$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_CXIndex_setGlobalOptions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXIndex_setGlobalOptions\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+            constants$0.clang_CXIndex_setGlobalOptions$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_CXIndex_getGlobalOptions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_getGlobalOptions$MH,\"clang_CXIndex_getGlobalOptions\");\n@@ -419,1 +513,2 @@\n-    public static @C(\"unsigned int\") int clang_CXIndex_getGlobalOptions (@C(\"CXIndex\") Addressable x0) {\n+    public static int clang_CXIndex_getGlobalOptions ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_getGlobalOptions$MH, \"clang_CXIndex_getGlobalOptions\");\n@@ -421,3 +516,3 @@\n-            return (int)Index_h$constants_0.clang_CXIndex_getGlobalOptions$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -426,2 +521,2 @@\n-    public static  MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH() {\n-        return Index_h$constants_0.clang_CXIndex_setInvocationEmissionPathOption$MH();\n+    public static MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_setInvocationEmissionPathOption$MH,\"clang_CXIndex_setInvocationEmissionPathOption\");\n@@ -429,1 +524,2 @@\n-    public static void clang_CXIndex_setInvocationEmissionPathOption (@C(\"CXIndex\") Addressable x0, @C(\"char*\") Addressable Path) {\n+    public static void clang_CXIndex_setInvocationEmissionPathOption ( Addressable x0,  Addressable Path) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_setInvocationEmissionPathOption$MH, \"clang_CXIndex_setInvocationEmissionPathOption\");\n@@ -431,3 +527,3 @@\n-            Index_h$constants_0.clang_CXIndex_setInvocationEmissionPathOption$MH().invokeExact(x0.address(), Path.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(x0.address(), Path.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -436,2 +532,2 @@\n-    public static  MethodHandle clang_getFileName$MH() {\n-        return Index_h$constants_0.clang_getFileName$MH();\n+    public static MethodHandle clang_getFileName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_getFileName$MH,\"clang_getFileName\");\n@@ -439,1 +535,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getFileName (@C(\"CXFile\") Addressable SFile) {\n+    public static MemorySegment clang_getFileName ( Addressable SFile) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getFileName$MH, \"clang_getFileName\");\n@@ -441,3 +538,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getFileName$MH().invokeExact(SFile.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(SFile.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -446,2 +543,2 @@\n-    public static  MethodHandle clang_getFileTime$MH() {\n-        return Index_h$constants_0.clang_getFileTime$MH();\n+    public static MethodHandle clang_getFileTime$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_getFileTime$MH,\"clang_getFileTime\");\n@@ -449,1 +546,2 @@\n-    public static @C(\"time_t\") long clang_getFileTime (@C(\"CXFile\") Addressable SFile) {\n+    public static long clang_getFileTime ( Addressable SFile) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getFileTime$MH, \"clang_getFileTime\");\n@@ -451,3 +549,3 @@\n-            return (long)Index_h$constants_0.clang_getFileTime$MH().invokeExact(SFile.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(SFile.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -458,1 +556,3 @@\n-        private CXFileUniqueID() {}\n+        static final MemoryLayout CXFileUniqueID$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(3, C_LONG_LONG).withName(\"data\")\n+        );\n@@ -460,1 +560,1 @@\n-            return Index_h$constants_0.CXFileUniqueID$struct$LAYOUT();\n+            return CXFileUniqueID.CXFileUniqueID$struct$LAYOUT;\n@@ -466,3 +566,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -470,1 +570,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -473,1 +573,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -476,1 +576,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -479,1 +579,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -482,2 +582,2 @@\n-    public static  MethodHandle clang_getFileUniqueID$MH() {\n-        return Index_h$constants_0.clang_getFileUniqueID$MH();\n+    public static MethodHandle clang_getFileUniqueID$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_getFileUniqueID$MH,\"clang_getFileUniqueID\");\n@@ -485,1 +585,2 @@\n-    public static @C(\"int\") int clang_getFileUniqueID (@C(\"CXFile\") Addressable file, @C(\"CXFileUniqueID*\") Addressable outID) {\n+    public static int clang_getFileUniqueID ( Addressable file,  Addressable outID) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getFileUniqueID$MH, \"clang_getFileUniqueID\");\n@@ -487,3 +588,3 @@\n-            return (int)Index_h$constants_0.clang_getFileUniqueID$MH().invokeExact(file.address(), outID.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(file.address(), outID.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -492,2 +593,2 @@\n-    public static  MethodHandle clang_isFileMultipleIncludeGuarded$MH() {\n-        return Index_h$constants_0.clang_isFileMultipleIncludeGuarded$MH();\n+    public static MethodHandle clang_isFileMultipleIncludeGuarded$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_isFileMultipleIncludeGuarded$MH,\"clang_isFileMultipleIncludeGuarded\");\n@@ -495,1 +596,2 @@\n-    public static @C(\"unsigned int\") int clang_isFileMultipleIncludeGuarded (@C(\"CXTranslationUnit\") Addressable tu, @C(\"CXFile\") Addressable file) {\n+    public static int clang_isFileMultipleIncludeGuarded ( Addressable tu,  Addressable file) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_isFileMultipleIncludeGuarded$MH, \"clang_isFileMultipleIncludeGuarded\");\n@@ -497,3 +599,3 @@\n-            return (int)Index_h$constants_0.clang_isFileMultipleIncludeGuarded$MH().invokeExact(tu.address(), file.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(tu.address(), file.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -502,2 +604,61 @@\n-    public static  MethodHandle clang_getFile$MH() {\n-        return Index_h$constants_0.clang_getFile$MH();\n+    public static class constants$1 {\n+\n+        static final FunctionDescriptor clang_CXIndex_getGlobalOptions$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_CXIndex_getGlobalOptions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXIndex_getGlobalOptions\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$1.clang_CXIndex_getGlobalOptions$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXIndex_setInvocationEmissionPathOption$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXIndex_setInvocationEmissionPathOption\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$1.clang_CXIndex_setInvocationEmissionPathOption$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getFileName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getFileName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFileName\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$1.clang_getFileName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getFileTime$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getFileTime$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFileTime\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+            constants$1.clang_getFileTime$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getFileUniqueID$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getFileUniqueID$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFileUniqueID\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$1.clang_getFileUniqueID$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isFileMultipleIncludeGuarded$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_isFileMultipleIncludeGuarded$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isFileMultipleIncludeGuarded\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$1.clang_isFileMultipleIncludeGuarded$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getFile$MH,\"clang_getFile\");\n@@ -505,1 +666,2 @@\n-    public static @C(\"CXFile\") MemoryAddress clang_getFile (@C(\"CXTranslationUnit\") Addressable tu, @C(\"char*\") Addressable file_name) {\n+    public static MemoryAddress clang_getFile ( Addressable tu,  Addressable file_name) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getFile$MH, \"clang_getFile\");\n@@ -507,3 +669,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getFile$MH().invokeExact(tu.address(), file_name.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address(), file_name.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -512,2 +674,2 @@\n-    public static  MethodHandle clang_getFileContents$MH() {\n-        return Index_h$constants_0.clang_getFileContents$MH();\n+    public static MethodHandle clang_getFileContents$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getFileContents$MH,\"clang_getFileContents\");\n@@ -515,1 +677,2 @@\n-    public static @C(\"char*\") MemoryAddress clang_getFileContents (@C(\"CXTranslationUnit\") Addressable tu, @C(\"CXFile\") Addressable file, @C(\"size_t*\") Addressable size) {\n+    public static MemoryAddress clang_getFileContents ( Addressable tu,  Addressable file,  Addressable size) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getFileContents$MH, \"clang_getFileContents\");\n@@ -517,3 +680,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getFileContents$MH().invokeExact(tu.address(), file.address(), size.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address(), file.address(), size.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -522,2 +685,2 @@\n-    public static  MethodHandle clang_File_isEqual$MH() {\n-        return Index_h$constants_0.clang_File_isEqual$MH();\n+    public static MethodHandle clang_File_isEqual$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_File_isEqual$MH,\"clang_File_isEqual\");\n@@ -525,1 +688,2 @@\n-    public static @C(\"int\") int clang_File_isEqual (@C(\"CXFile\") Addressable file1, @C(\"CXFile\") Addressable file2) {\n+    public static int clang_File_isEqual ( Addressable file1,  Addressable file2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_File_isEqual$MH, \"clang_File_isEqual\");\n@@ -527,3 +691,3 @@\n-            return (int)Index_h$constants_0.clang_File_isEqual$MH().invokeExact(file1.address(), file2.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(file1.address(), file2.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -532,2 +696,2 @@\n-    public static  MethodHandle clang_File_tryGetRealPathName$MH() {\n-        return Index_h$constants_0.clang_File_tryGetRealPathName$MH();\n+    public static MethodHandle clang_File_tryGetRealPathName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_File_tryGetRealPathName$MH,\"clang_File_tryGetRealPathName\");\n@@ -535,1 +699,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_File_tryGetRealPathName (@C(\"CXFile\") Addressable file) {\n+    public static MemorySegment clang_File_tryGetRealPathName ( Addressable file) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_File_tryGetRealPathName$MH, \"clang_File_tryGetRealPathName\");\n@@ -537,3 +702,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_File_tryGetRealPathName$MH().invokeExact(file.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(file.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -544,1 +709,5 @@\n-        private CXSourceLocation() {}\n+        static final MemoryLayout CXSourceLocation$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -546,1 +715,1 @@\n-            return Index_h$constants_0.CXSourceLocation$struct$LAYOUT();\n+            return CXSourceLocation.CXSourceLocation$struct$LAYOUT;\n@@ -551,0 +720,1 @@\n+        static final VarHandle int_data$VH = CXSourceLocation$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"int_data\"));\n@@ -552,1 +722,1 @@\n-            return Index_h$constants_0.CXSourceLocation$int_data$VH();\n+            return CXSourceLocation.int_data$VH;\n@@ -554,2 +724,2 @@\n-        public static  @C(\"unsigned int\") int int_data$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXSourceLocation$int_data$VH().get(seg);\n+        public static int int_data$get(MemorySegment seg) {\n+            return (int)CXSourceLocation.int_data$VH.get(seg);\n@@ -557,2 +727,2 @@\n-        public static  @C(\"unsigned int\") int int_data$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXSourceLocation$int_data$VH().get(seg.asSlice(index*sizeof()));\n+        public static void int_data$set( MemorySegment seg, int x) {\n+            CXSourceLocation.int_data$VH.set(seg, x);\n@@ -560,2 +730,2 @@\n-        public static void int_data$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceLocation$int_data$VH().set(seg, x);\n+        public static int int_data$get(MemorySegment seg, long index) {\n+            return (int)CXSourceLocation.int_data$VH.get(seg.asSlice(index*sizeof()));\n@@ -563,2 +733,2 @@\n-        public static void int_data$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceLocation$int_data$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void int_data$set(MemorySegment seg, long index, int x) {\n+            CXSourceLocation.int_data$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -567,3 +737,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -571,1 +741,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -574,1 +744,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -577,1 +747,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -580,1 +750,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -585,1 +755,5 @@\n-        private CXSourceRange() {}\n+        static final MemoryLayout CXSourceRange$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        );\n@@ -587,1 +761,1 @@\n-            return Index_h$constants_0.CXSourceRange$struct$LAYOUT();\n+            return CXSourceRange.CXSourceRange$struct$LAYOUT;\n@@ -592,0 +766,1 @@\n+        static final VarHandle begin_int_data$VH = CXSourceRange$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"begin_int_data\"));\n@@ -593,1 +768,1 @@\n-            return Index_h$constants_0.CXSourceRange$begin_int_data$VH();\n+            return CXSourceRange.begin_int_data$VH;\n@@ -595,2 +770,2 @@\n-        public static  @C(\"unsigned int\") int begin_int_data$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXSourceRange$begin_int_data$VH().get(seg);\n+        public static int begin_int_data$get(MemorySegment seg) {\n+            return (int)CXSourceRange.begin_int_data$VH.get(seg);\n@@ -598,2 +773,2 @@\n-        public static  @C(\"unsigned int\") int begin_int_data$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXSourceRange$begin_int_data$VH().get(seg.asSlice(index*sizeof()));\n+        public static void begin_int_data$set( MemorySegment seg, int x) {\n+            CXSourceRange.begin_int_data$VH.set(seg, x);\n@@ -601,2 +776,2 @@\n-        public static void begin_int_data$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceRange$begin_int_data$VH().set(seg, x);\n+        public static int begin_int_data$get(MemorySegment seg, long index) {\n+            return (int)CXSourceRange.begin_int_data$VH.get(seg.asSlice(index*sizeof()));\n@@ -604,2 +779,2 @@\n-        public static void begin_int_data$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceRange$begin_int_data$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void begin_int_data$set(MemorySegment seg, long index, int x) {\n+            CXSourceRange.begin_int_data$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -607,0 +782,1 @@\n+        static final VarHandle end_int_data$VH = CXSourceRange$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"end_int_data\"));\n@@ -608,1 +784,1 @@\n-            return Index_h$constants_0.CXSourceRange$end_int_data$VH();\n+            return CXSourceRange.end_int_data$VH;\n@@ -610,2 +786,2 @@\n-        public static  @C(\"unsigned int\") int end_int_data$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXSourceRange$end_int_data$VH().get(seg);\n+        public static int end_int_data$get(MemorySegment seg) {\n+            return (int)CXSourceRange.end_int_data$VH.get(seg);\n@@ -613,2 +789,2 @@\n-        public static  @C(\"unsigned int\") int end_int_data$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXSourceRange$end_int_data$VH().get(seg.asSlice(index*sizeof()));\n+        public static void end_int_data$set( MemorySegment seg, int x) {\n+            CXSourceRange.end_int_data$VH.set(seg, x);\n@@ -616,2 +792,2 @@\n-        public static void end_int_data$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceRange$end_int_data$VH().set(seg, x);\n+        public static int end_int_data$get(MemorySegment seg, long index) {\n+            return (int)CXSourceRange.end_int_data$VH.get(seg.asSlice(index*sizeof()));\n@@ -619,2 +795,2 @@\n-        public static void end_int_data$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceRange$end_int_data$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void end_int_data$set(MemorySegment seg, long index, int x) {\n+            CXSourceRange.end_int_data$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -623,3 +799,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -627,1 +803,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -630,1 +806,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -633,1 +809,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -636,1 +812,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -639,2 +815,2 @@\n-    public static  MethodHandle clang_getNullLocation$MH() {\n-        return Index_h$constants_0.clang_getNullLocation$MH();\n+    public static MethodHandle clang_getNullLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getNullLocation$MH,\"clang_getNullLocation\");\n@@ -642,1 +818,2 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getNullLocation () {\n+    public static MemorySegment clang_getNullLocation () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getNullLocation$MH, \"clang_getNullLocation\");\n@@ -644,3 +821,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getNullLocation$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -649,2 +826,2 @@\n-    public static  MethodHandle clang_equalLocations$MH() {\n-        return Index_h$constants_0.clang_equalLocations$MH();\n+    public static MethodHandle clang_equalLocations$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_equalLocations$MH,\"clang_equalLocations\");\n@@ -652,1 +829,2 @@\n-    public static @C(\"unsigned int\") int clang_equalLocations (@C(\"CXSourceLocation\") MemorySegment loc1, @C(\"CXSourceLocation\") MemorySegment loc2) {\n+    public static int clang_equalLocations ( MemorySegment loc1,  MemorySegment loc2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_equalLocations$MH, \"clang_equalLocations\");\n@@ -654,3 +832,3 @@\n-            return (int)Index_h$constants_0.clang_equalLocations$MH().invokeExact(loc1, loc2);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(loc1, loc2);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -659,2 +837,73 @@\n-    public static  MethodHandle clang_getLocation$MH() {\n-        return Index_h$constants_0.clang_getLocation$MH();\n+    public static class constants$2 {\n+\n+        static final FunctionDescriptor clang_getFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$2.clang_getFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getFileContents$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getFileContents$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFileContents\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$2.clang_getFileContents$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_File_isEqual$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_File_isEqual$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_File_isEqual\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$2.clang_File_isEqual$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_File_tryGetRealPathName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_File_tryGetRealPathName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_File_tryGetRealPathName\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$2.clang_File_tryGetRealPathName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getNullLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ));\n+        static final MethodHandle clang_getNullLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNullLocation\",\n+            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$2.clang_getNullLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_equalLocations$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_equalLocations$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_equalLocations\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$2.clang_equalLocations$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_getLocation$MH,\"clang_getLocation\");\n@@ -662,1 +911,2 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getLocation (@C(\"CXTranslationUnit\") Addressable tu, @C(\"CXFile\") Addressable file, @C(\"unsigned int\") int line, @C(\"unsigned int\") int column) {\n+    public static MemorySegment clang_getLocation ( Addressable tu,  Addressable file,  int line,  int column) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getLocation$MH, \"clang_getLocation\");\n@@ -664,3 +914,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getLocation$MH().invokeExact(tu.address(), file.address(), line, column);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(tu.address(), file.address(), line, column);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -669,2 +919,2 @@\n-    public static  MethodHandle clang_getLocationForOffset$MH() {\n-        return Index_h$constants_0.clang_getLocationForOffset$MH();\n+    public static MethodHandle clang_getLocationForOffset$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_getLocationForOffset$MH,\"clang_getLocationForOffset\");\n@@ -672,1 +922,2 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getLocationForOffset (@C(\"CXTranslationUnit\") Addressable tu, @C(\"CXFile\") Addressable file, @C(\"unsigned int\") int offset) {\n+    public static MemorySegment clang_getLocationForOffset ( Addressable tu,  Addressable file,  int offset) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getLocationForOffset$MH, \"clang_getLocationForOffset\");\n@@ -674,3 +925,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getLocationForOffset$MH().invokeExact(tu.address(), file.address(), offset);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(tu.address(), file.address(), offset);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -679,2 +930,2 @@\n-    public static  MethodHandle clang_Location_isInSystemHeader$MH() {\n-        return Index_h$constants_0.clang_Location_isInSystemHeader$MH();\n+    public static MethodHandle clang_Location_isInSystemHeader$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_Location_isInSystemHeader$MH,\"clang_Location_isInSystemHeader\");\n@@ -682,1 +933,2 @@\n-    public static @C(\"int\") int clang_Location_isInSystemHeader (@C(\"CXSourceLocation\") MemorySegment location) {\n+    public static int clang_Location_isInSystemHeader ( MemorySegment location) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_Location_isInSystemHeader$MH, \"clang_Location_isInSystemHeader\");\n@@ -684,3 +936,3 @@\n-            return (int)Index_h$constants_0.clang_Location_isInSystemHeader$MH().invokeExact(location);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(location);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -689,2 +941,2 @@\n-    public static  MethodHandle clang_Location_isFromMainFile$MH() {\n-        return Index_h$constants_0.clang_Location_isFromMainFile$MH();\n+    public static MethodHandle clang_Location_isFromMainFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_Location_isFromMainFile$MH,\"clang_Location_isFromMainFile\");\n@@ -692,1 +944,2 @@\n-    public static @C(\"int\") int clang_Location_isFromMainFile (@C(\"CXSourceLocation\") MemorySegment location) {\n+    public static int clang_Location_isFromMainFile ( MemorySegment location) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_Location_isFromMainFile$MH, \"clang_Location_isFromMainFile\");\n@@ -694,3 +947,3 @@\n-            return (int)Index_h$constants_0.clang_Location_isFromMainFile$MH().invokeExact(location);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(location);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -699,2 +952,2 @@\n-    public static  MethodHandle clang_getNullRange$MH() {\n-        return Index_h$constants_0.clang_getNullRange$MH();\n+    public static MethodHandle clang_getNullRange$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_getNullRange$MH,\"clang_getNullRange\");\n@@ -702,1 +955,2 @@\n-    public static @C(\"CXSourceRange\") MemorySegment clang_getNullRange () {\n+    public static MemorySegment clang_getNullRange () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getNullRange$MH, \"clang_getNullRange\");\n@@ -704,3 +958,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getNullRange$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -709,2 +963,2 @@\n-    public static  MethodHandle clang_getRange$MH() {\n-        return Index_h$constants_0.clang_getRange$MH();\n+    public static MethodHandle clang_getRange$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_getRange$MH,\"clang_getRange\");\n@@ -712,1 +966,2 @@\n-    public static @C(\"CXSourceRange\") MemorySegment clang_getRange (@C(\"CXSourceLocation\") MemorySegment begin, @C(\"CXSourceLocation\") MemorySegment end) {\n+    public static MemorySegment clang_getRange ( MemorySegment begin,  MemorySegment end) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getRange$MH, \"clang_getRange\");\n@@ -714,3 +969,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getRange$MH().invokeExact(begin, end);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(begin, end);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -719,2 +974,90 @@\n-    public static  MethodHandle clang_equalRanges$MH() {\n-        return Index_h$constants_0.clang_equalRanges$MH();\n+    public static class constants$3 {\n+\n+        static final FunctionDescriptor clang_getLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$3.clang_getLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getLocationForOffset$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getLocationForOffset$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getLocationForOffset\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$3.clang_getLocationForOffset$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Location_isInSystemHeader$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_Location_isInSystemHeader$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Location_isInSystemHeader\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$3.clang_Location_isInSystemHeader$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Location_isFromMainFile$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_Location_isFromMainFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Location_isFromMainFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$3.clang_Location_isFromMainFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getNullRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ));\n+        static final MethodHandle clang_getNullRange$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNullRange\",\n+            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$3.clang_getNullRange$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_getRange$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getRange\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$3.clang_getRange$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_equalRanges$MH() {\n+        return RuntimeHelper.requireNonNull(constants$4.clang_equalRanges$MH,\"clang_equalRanges\");\n@@ -722,1 +1065,2 @@\n-    public static @C(\"unsigned int\") int clang_equalRanges (@C(\"CXSourceRange\") MemorySegment range1, @C(\"CXSourceRange\") MemorySegment range2) {\n+    public static int clang_equalRanges ( MemorySegment range1,  MemorySegment range2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_equalRanges$MH, \"clang_equalRanges\");\n@@ -724,3 +1068,3 @@\n-            return (int)Index_h$constants_0.clang_equalRanges$MH().invokeExact(range1, range2);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(range1, range2);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -729,2 +1073,2 @@\n-    public static  MethodHandle clang_Range_isNull$MH() {\n-        return Index_h$constants_0.clang_Range_isNull$MH();\n+    public static MethodHandle clang_Range_isNull$MH() {\n+        return RuntimeHelper.requireNonNull(constants$4.clang_Range_isNull$MH,\"clang_Range_isNull\");\n@@ -732,1 +1076,2 @@\n-    public static @C(\"int\") int clang_Range_isNull (@C(\"CXSourceRange\") MemorySegment range) {\n+    public static int clang_Range_isNull ( MemorySegment range) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_Range_isNull$MH, \"clang_Range_isNull\");\n@@ -734,3 +1079,3 @@\n-            return (int)Index_h$constants_0.clang_Range_isNull$MH().invokeExact(range);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(range);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -739,2 +1084,2 @@\n-    public static  MethodHandle clang_getExpansionLocation$MH() {\n-        return Index_h$constants_0.clang_getExpansionLocation$MH();\n+    public static MethodHandle clang_getExpansionLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$4.clang_getExpansionLocation$MH,\"clang_getExpansionLocation\");\n@@ -742,1 +1087,2 @@\n-    public static void clang_getExpansionLocation (@C(\"CXSourceLocation\") MemorySegment location, @C(\"CXFile*\") Addressable file, @C(\"unsigned int*\") Addressable line, @C(\"unsigned int*\") Addressable column, @C(\"unsigned int*\") Addressable offset) {\n+    public static void clang_getExpansionLocation ( MemorySegment location,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getExpansionLocation$MH, \"clang_getExpansionLocation\");\n@@ -744,3 +1090,3 @@\n-            Index_h$constants_0.clang_getExpansionLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -749,2 +1095,2 @@\n-    public static  MethodHandle clang_getPresumedLocation$MH() {\n-        return Index_h$constants_0.clang_getPresumedLocation$MH();\n+    public static MethodHandle clang_getPresumedLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$4.clang_getPresumedLocation$MH,\"clang_getPresumedLocation\");\n@@ -752,1 +1098,2 @@\n-    public static void clang_getPresumedLocation (@C(\"CXSourceLocation\") MemorySegment location, @C(\"CXString*\") Addressable filename, @C(\"unsigned int*\") Addressable line, @C(\"unsigned int*\") Addressable column) {\n+    public static void clang_getPresumedLocation ( MemorySegment location,  Addressable filename,  Addressable line,  Addressable column) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getPresumedLocation$MH, \"clang_getPresumedLocation\");\n@@ -754,3 +1101,3 @@\n-            Index_h$constants_0.clang_getPresumedLocation$MH().invokeExact(location, filename.address(), line.address(), column.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(location, filename.address(), line.address(), column.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -759,2 +1106,2 @@\n-    public static  MethodHandle clang_getInstantiationLocation$MH() {\n-        return Index_h$constants_0.clang_getInstantiationLocation$MH();\n+    public static MethodHandle clang_getInstantiationLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$4.clang_getInstantiationLocation$MH,\"clang_getInstantiationLocation\");\n@@ -762,1 +1109,2 @@\n-    public static void clang_getInstantiationLocation (@C(\"CXSourceLocation\") MemorySegment location, @C(\"CXFile*\") Addressable file, @C(\"unsigned int*\") Addressable line, @C(\"unsigned int*\") Addressable column, @C(\"unsigned int*\") Addressable offset) {\n+    public static void clang_getInstantiationLocation ( MemorySegment location,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getInstantiationLocation$MH, \"clang_getInstantiationLocation\");\n@@ -764,3 +1112,3 @@\n-            Index_h$constants_0.clang_getInstantiationLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -769,2 +1117,2 @@\n-    public static  MethodHandle clang_getSpellingLocation$MH() {\n-        return Index_h$constants_0.clang_getSpellingLocation$MH();\n+    public static MethodHandle clang_getSpellingLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$4.clang_getSpellingLocation$MH,\"clang_getSpellingLocation\");\n@@ -772,1 +1120,2 @@\n-    public static void clang_getSpellingLocation (@C(\"CXSourceLocation\") MemorySegment location, @C(\"CXFile*\") Addressable file, @C(\"unsigned int*\") Addressable line, @C(\"unsigned int*\") Addressable column, @C(\"unsigned int*\") Addressable offset) {\n+    public static void clang_getSpellingLocation ( MemorySegment location,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getSpellingLocation$MH, \"clang_getSpellingLocation\");\n@@ -774,3 +1123,3 @@\n-            Index_h$constants_0.clang_getSpellingLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -779,2 +1128,98 @@\n-    public static  MethodHandle clang_getFileLocation$MH() {\n-        return Index_h$constants_0.clang_getFileLocation$MH();\n+    public static class constants$4 {\n+\n+        static final FunctionDescriptor clang_equalRanges$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+        static final MethodHandle clang_equalRanges$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_equalRanges\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$4.clang_equalRanges$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Range_isNull$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+        static final MethodHandle clang_Range_isNull$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Range_isNull\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$4.clang_Range_isNull$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getExpansionLocation$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getExpansionLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getExpansionLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$4.clang_getExpansionLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getPresumedLocation$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getPresumedLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getPresumedLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$4.clang_getPresumedLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getInstantiationLocation$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getInstantiationLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getInstantiationLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$4.clang_getInstantiationLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getSpellingLocation$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getSpellingLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getSpellingLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$4.clang_getSpellingLocation$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getFileLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$5.clang_getFileLocation$MH,\"clang_getFileLocation\");\n@@ -782,1 +1227,2 @@\n-    public static void clang_getFileLocation (@C(\"CXSourceLocation\") MemorySegment location, @C(\"CXFile*\") Addressable file, @C(\"unsigned int*\") Addressable line, @C(\"unsigned int*\") Addressable column, @C(\"unsigned int*\") Addressable offset) {\n+    public static void clang_getFileLocation ( MemorySegment location,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getFileLocation$MH, \"clang_getFileLocation\");\n@@ -784,3 +1230,3 @@\n-            Index_h$constants_0.clang_getFileLocation$MH().invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -789,2 +1235,2 @@\n-    public static  MethodHandle clang_getRangeStart$MH() {\n-        return Index_h$constants_0.clang_getRangeStart$MH();\n+    public static MethodHandle clang_getRangeStart$MH() {\n+        return RuntimeHelper.requireNonNull(constants$5.clang_getRangeStart$MH,\"clang_getRangeStart\");\n@@ -792,1 +1238,2 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getRangeStart (@C(\"CXSourceRange\") MemorySegment range) {\n+    public static MemorySegment clang_getRangeStart ( MemorySegment range) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getRangeStart$MH, \"clang_getRangeStart\");\n@@ -794,3 +1241,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getRangeStart$MH().invokeExact(range);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(range);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -799,2 +1246,2 @@\n-    public static  MethodHandle clang_getRangeEnd$MH() {\n-        return Index_h$constants_0.clang_getRangeEnd$MH();\n+    public static MethodHandle clang_getRangeEnd$MH() {\n+        return RuntimeHelper.requireNonNull(constants$5.clang_getRangeEnd$MH,\"clang_getRangeEnd\");\n@@ -802,1 +1249,2 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getRangeEnd (@C(\"CXSourceRange\") MemorySegment range) {\n+    public static MemorySegment clang_getRangeEnd ( MemorySegment range) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getRangeEnd$MH, \"clang_getRangeEnd\");\n@@ -804,3 +1252,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getRangeEnd$MH().invokeExact(range);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(range);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -811,1 +1259,5 @@\n-        private CXSourceRangeList() {}\n+        static final MemoryLayout CXSourceRangeList$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"count\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_POINTER.withName(\"ranges\")\n+        );\n@@ -813,1 +1265,1 @@\n-            return Index_h$constants_0.CXSourceRangeList$struct$LAYOUT();\n+            return CXSourceRangeList.CXSourceRangeList$struct$LAYOUT;\n@@ -815,0 +1267,1 @@\n+        static final VarHandle count$VH = CXSourceRangeList$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"count\"));\n@@ -816,1 +1269,1 @@\n-            return Index_h$constants_0.CXSourceRangeList$count$VH();\n+            return CXSourceRangeList.count$VH;\n@@ -818,2 +1271,2 @@\n-        public static  @C(\"unsigned int\") int count$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXSourceRangeList$count$VH().get(seg);\n+        public static int count$get(MemorySegment seg) {\n+            return (int)CXSourceRangeList.count$VH.get(seg);\n@@ -821,2 +1274,2 @@\n-        public static  @C(\"unsigned int\") int count$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXSourceRangeList$count$VH().get(seg.asSlice(index*sizeof()));\n+        public static void count$set( MemorySegment seg, int x) {\n+            CXSourceRangeList.count$VH.set(seg, x);\n@@ -824,2 +1277,2 @@\n-        public static void count$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceRangeList$count$VH().set(seg, x);\n+        public static int count$get(MemorySegment seg, long index) {\n+            return (int)CXSourceRangeList.count$VH.get(seg.asSlice(index*sizeof()));\n@@ -827,2 +1280,2 @@\n-        public static void count$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXSourceRangeList$count$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void count$set(MemorySegment seg, long index, int x) {\n+            CXSourceRangeList.count$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -830,0 +1283,1 @@\n+        static final VarHandle ranges$VH = MemoryHandles.asAddressVarHandle(CXSourceRangeList$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ranges\")));\n@@ -831,1 +1285,1 @@\n-            return Index_h$constants_0.CXSourceRangeList$ranges$VH();\n+            return CXSourceRangeList.ranges$VH;\n@@ -833,2 +1287,2 @@\n-        public static  @C(\"CXSourceRange*\") MemoryAddress ranges$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXSourceRangeList$ranges$VH().get(seg);\n+        public static MemoryAddress ranges$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXSourceRangeList.ranges$VH.get(seg);\n@@ -836,2 +1290,2 @@\n-        public static  @C(\"CXSourceRange*\") MemoryAddress ranges$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXSourceRangeList$ranges$VH().get(seg.asSlice(index*sizeof()));\n+        public static void ranges$set( MemorySegment seg, MemoryAddress x) {\n+            CXSourceRangeList.ranges$VH.set(seg, x);\n@@ -839,2 +1293,2 @@\n-        public static void ranges$set(@C(\"struct \") MemorySegment seg, @C(\"CXSourceRange*\") MemoryAddress x) {\n-            Index_h$constants_0.CXSourceRangeList$ranges$VH().set(seg, x);\n+        public static MemoryAddress ranges$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXSourceRangeList.ranges$VH.get(seg.asSlice(index*sizeof()));\n@@ -842,2 +1296,2 @@\n-        public static void ranges$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXSourceRange*\") MemoryAddress x) {\n-            Index_h$constants_0.CXSourceRangeList$ranges$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void ranges$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXSourceRangeList.ranges$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -846,3 +1300,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -850,1 +1304,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -853,1 +1307,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -856,1 +1310,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -859,1 +1313,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -862,2 +1316,2 @@\n-    public static  MethodHandle clang_getSkippedRanges$MH() {\n-        return Index_h$constants_0.clang_getSkippedRanges$MH();\n+    public static MethodHandle clang_getSkippedRanges$MH() {\n+        return RuntimeHelper.requireNonNull(constants$5.clang_getSkippedRanges$MH,\"clang_getSkippedRanges\");\n@@ -865,1 +1319,2 @@\n-    public static @C(\"CXSourceRangeList*\") MemoryAddress clang_getSkippedRanges (@C(\"CXTranslationUnit\") Addressable tu, @C(\"CXFile\") Addressable file) {\n+    public static MemoryAddress clang_getSkippedRanges ( Addressable tu,  Addressable file) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getSkippedRanges$MH, \"clang_getSkippedRanges\");\n@@ -867,3 +1322,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getSkippedRanges$MH().invokeExact(tu.address(), file.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address(), file.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -872,2 +1327,2 @@\n-    public static  MethodHandle clang_getAllSkippedRanges$MH() {\n-        return Index_h$constants_0.clang_getAllSkippedRanges$MH();\n+    public static MethodHandle clang_getAllSkippedRanges$MH() {\n+        return RuntimeHelper.requireNonNull(constants$5.clang_getAllSkippedRanges$MH,\"clang_getAllSkippedRanges\");\n@@ -875,1 +1330,2 @@\n-    public static @C(\"CXSourceRangeList*\") MemoryAddress clang_getAllSkippedRanges (@C(\"CXTranslationUnit\") Addressable tu) {\n+    public static MemoryAddress clang_getAllSkippedRanges ( Addressable tu) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getAllSkippedRanges$MH, \"clang_getAllSkippedRanges\");\n@@ -877,3 +1333,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getAllSkippedRanges$MH().invokeExact(tu.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -882,2 +1338,2 @@\n-    public static  MethodHandle clang_disposeSourceRangeList$MH() {\n-        return Index_h$constants_0.clang_disposeSourceRangeList$MH();\n+    public static MethodHandle clang_disposeSourceRangeList$MH() {\n+        return RuntimeHelper.requireNonNull(constants$5.clang_disposeSourceRangeList$MH,\"clang_disposeSourceRangeList\");\n@@ -885,1 +1341,2 @@\n-    public static void clang_disposeSourceRangeList (@C(\"CXSourceRangeList*\") Addressable ranges) {\n+    public static void clang_disposeSourceRangeList ( Addressable ranges) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_disposeSourceRangeList$MH, \"clang_disposeSourceRangeList\");\n@@ -887,3 +1344,3 @@\n-            Index_h$constants_0.clang_disposeSourceRangeList$MH().invokeExact(ranges.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(ranges.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -892,2 +1349,2 @@\n-    public static @C(\"int\") int CXDiagnostic_Ignored() {\n-        return Index_h$constants_0.CXDiagnostic_Ignored();\n+    public static int CXDiagnostic_Ignored() {\n+        return (int)0L;\n@@ -895,2 +1352,2 @@\n-    public static @C(\"int\") int CXDiagnostic_Note() {\n-        return Index_h$constants_0.CXDiagnostic_Note();\n+    public static int CXDiagnostic_Note() {\n+        return (int)1L;\n@@ -898,2 +1355,2 @@\n-    public static @C(\"int\") int CXDiagnostic_Warning() {\n-        return Index_h$constants_0.CXDiagnostic_Warning();\n+    public static int CXDiagnostic_Warning() {\n+        return (int)2L;\n@@ -901,2 +1358,2 @@\n-    public static @C(\"int\") int CXDiagnostic_Error() {\n-        return Index_h$constants_0.CXDiagnostic_Error();\n+    public static int CXDiagnostic_Error() {\n+        return (int)3L;\n@@ -904,2 +1361,2 @@\n-    public static @C(\"int\") int CXDiagnostic_Fatal() {\n-        return Index_h$constants_0.CXDiagnostic_Fatal();\n+    public static int CXDiagnostic_Fatal() {\n+        return (int)4L;\n@@ -907,2 +1364,75 @@\n-    public static  MethodHandle clang_getNumDiagnosticsInSet$MH() {\n-        return Index_h$constants_0.clang_getNumDiagnosticsInSet$MH();\n+    public static class constants$5 {\n+\n+        static final FunctionDescriptor clang_getFileLocation$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getFileLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFileLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$5.clang_getFileLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getRangeStart$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getRangeStart$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getRangeStart\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$5.clang_getRangeStart$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getRangeEnd$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getRangeEnd$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getRangeEnd\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$5.clang_getRangeEnd$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getSkippedRanges$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getSkippedRanges$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getSkippedRanges\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$5.clang_getSkippedRanges$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getAllSkippedRanges$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getAllSkippedRanges$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getAllSkippedRanges\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$5.clang_getAllSkippedRanges$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeSourceRangeList$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeSourceRangeList$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeSourceRangeList\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$5.clang_disposeSourceRangeList$FUNC, false\n+        );\n@@ -910,1 +1440,6 @@\n-    public static @C(\"unsigned int\") int clang_getNumDiagnosticsInSet (@C(\"CXDiagnosticSet\") Addressable Diags) {\n+\n+    public static MethodHandle clang_getNumDiagnosticsInSet$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnosticsInSet$MH,\"clang_getNumDiagnosticsInSet\");\n+    }\n+    public static int clang_getNumDiagnosticsInSet ( Addressable Diags) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnosticsInSet$MH, \"clang_getNumDiagnosticsInSet\");\n@@ -912,3 +1447,3 @@\n-            return (int)Index_h$constants_0.clang_getNumDiagnosticsInSet$MH().invokeExact(Diags.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Diags.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -917,2 +1452,2 @@\n-    public static  MethodHandle clang_getDiagnosticInSet$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticInSet$MH();\n+    public static MethodHandle clang_getDiagnosticInSet$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_getDiagnosticInSet$MH,\"clang_getDiagnosticInSet\");\n@@ -920,1 +1455,2 @@\n-    public static @C(\"CXDiagnostic\") MemoryAddress clang_getDiagnosticInSet (@C(\"CXDiagnosticSet\") Addressable Diags, @C(\"unsigned int\") int Index) {\n+    public static MemoryAddress clang_getDiagnosticInSet ( Addressable Diags,  int Index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getDiagnosticInSet$MH, \"clang_getDiagnosticInSet\");\n@@ -922,3 +1458,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getDiagnosticInSet$MH().invokeExact(Diags.address(), Index);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Diags.address(), Index);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -927,2 +1463,2 @@\n-    public static @C(\"int\") int CXLoadDiag_None() {\n-        return Index_h$constants_0.CXLoadDiag_None();\n+    public static int CXLoadDiag_None() {\n+        return (int)0L;\n@@ -930,2 +1466,2 @@\n-    public static @C(\"int\") int CXLoadDiag_Unknown() {\n-        return Index_h$constants_0.CXLoadDiag_Unknown();\n+    public static int CXLoadDiag_Unknown() {\n+        return (int)1L;\n@@ -933,2 +1469,2 @@\n-    public static @C(\"int\") int CXLoadDiag_CannotLoad() {\n-        return Index_h$constants_0.CXLoadDiag_CannotLoad();\n+    public static int CXLoadDiag_CannotLoad() {\n+        return (int)2L;\n@@ -936,2 +1472,2 @@\n-    public static @C(\"int\") int CXLoadDiag_InvalidFile() {\n-        return Index_h$constants_0.CXLoadDiag_InvalidFile();\n+    public static int CXLoadDiag_InvalidFile() {\n+        return (int)3L;\n@@ -939,2 +1475,2 @@\n-    public static  MethodHandle clang_loadDiagnostics$MH() {\n-        return Index_h$constants_0.clang_loadDiagnostics$MH();\n+    public static MethodHandle clang_loadDiagnostics$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_loadDiagnostics$MH,\"clang_loadDiagnostics\");\n@@ -942,1 +1478,2 @@\n-    public static @C(\"CXDiagnosticSet\") MemoryAddress clang_loadDiagnostics (@C(\"char*\") Addressable file, @C(\"enum CXLoadDiag_Error*\") Addressable error, @C(\"CXString*\") Addressable errorString) {\n+    public static MemoryAddress clang_loadDiagnostics ( Addressable file,  Addressable error,  Addressable errorString) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_loadDiagnostics$MH, \"clang_loadDiagnostics\");\n@@ -944,3 +1481,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_loadDiagnostics$MH().invokeExact(file.address(), error.address(), errorString.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file.address(), error.address(), errorString.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -949,2 +1486,2 @@\n-    public static  MethodHandle clang_disposeDiagnosticSet$MH() {\n-        return Index_h$constants_0.clang_disposeDiagnosticSet$MH();\n+    public static MethodHandle clang_disposeDiagnosticSet$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_disposeDiagnosticSet$MH,\"clang_disposeDiagnosticSet\");\n@@ -952,1 +1489,2 @@\n-    public static void clang_disposeDiagnosticSet (@C(\"CXDiagnosticSet\") Addressable Diags) {\n+    public static void clang_disposeDiagnosticSet ( Addressable Diags) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_disposeDiagnosticSet$MH, \"clang_disposeDiagnosticSet\");\n@@ -954,3 +1492,3 @@\n-            Index_h$constants_0.clang_disposeDiagnosticSet$MH().invokeExact(Diags.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(Diags.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -959,2 +1497,2 @@\n-    public static  MethodHandle clang_getChildDiagnostics$MH() {\n-        return Index_h$constants_0.clang_getChildDiagnostics$MH();\n+    public static MethodHandle clang_getChildDiagnostics$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_getChildDiagnostics$MH,\"clang_getChildDiagnostics\");\n@@ -962,1 +1500,2 @@\n-    public static @C(\"CXDiagnosticSet\") MemoryAddress clang_getChildDiagnostics (@C(\"CXDiagnostic\") Addressable D) {\n+    public static MemoryAddress clang_getChildDiagnostics ( Addressable D) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getChildDiagnostics$MH, \"clang_getChildDiagnostics\");\n@@ -964,3 +1503,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getChildDiagnostics$MH().invokeExact(D.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(D.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -969,2 +1508,2 @@\n-    public static  MethodHandle clang_getNumDiagnostics$MH() {\n-        return Index_h$constants_0.clang_getNumDiagnostics$MH();\n+    public static MethodHandle clang_getNumDiagnostics$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnostics$MH,\"clang_getNumDiagnostics\");\n@@ -972,1 +1511,2 @@\n-    public static @C(\"unsigned int\") int clang_getNumDiagnostics (@C(\"CXTranslationUnit\") Addressable Unit) {\n+    public static int clang_getNumDiagnostics ( Addressable Unit) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnostics$MH, \"clang_getNumDiagnostics\");\n@@ -974,3 +1514,3 @@\n-            return (int)Index_h$constants_0.clang_getNumDiagnostics$MH().invokeExact(Unit.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Unit.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -979,2 +1519,53 @@\n-    public static  MethodHandle clang_getDiagnostic$MH() {\n-        return Index_h$constants_0.clang_getDiagnostic$MH();\n+    public static class constants$6 {\n+\n+        static final FunctionDescriptor clang_getNumDiagnosticsInSet$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getNumDiagnosticsInSet$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNumDiagnosticsInSet\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$6.clang_getNumDiagnosticsInSet$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticInSet$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getDiagnosticInSet$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticInSet\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$6.clang_getDiagnosticInSet$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_loadDiagnostics$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_loadDiagnostics$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_loadDiagnostics\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$6.clang_loadDiagnostics$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeDiagnosticSet$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeDiagnosticSet$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeDiagnosticSet\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$6.clang_disposeDiagnosticSet$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getChildDiagnostics$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getChildDiagnostics$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getChildDiagnostics\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$6.clang_getChildDiagnostics$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getNumDiagnostics$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNumDiagnostics\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$6.clang_getNumDiagnostics$FUNC, false\n+        );\n@@ -982,1 +1573,6 @@\n-    public static @C(\"CXDiagnostic\") MemoryAddress clang_getDiagnostic (@C(\"CXTranslationUnit\") Addressable Unit, @C(\"unsigned int\") int Index) {\n+\n+    public static MethodHandle clang_getDiagnostic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getDiagnostic$MH,\"clang_getDiagnostic\");\n+    }\n+    public static MemoryAddress clang_getDiagnostic ( Addressable Unit,  int Index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getDiagnostic$MH, \"clang_getDiagnostic\");\n@@ -984,3 +1580,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getDiagnostic$MH().invokeExact(Unit.address(), Index);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Unit.address(), Index);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -989,2 +1585,2 @@\n-    public static  MethodHandle clang_getDiagnosticSetFromTU$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticSetFromTU$MH();\n+    public static MethodHandle clang_getDiagnosticSetFromTU$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSetFromTU$MH,\"clang_getDiagnosticSetFromTU\");\n@@ -992,1 +1588,2 @@\n-    public static @C(\"CXDiagnosticSet\") MemoryAddress clang_getDiagnosticSetFromTU (@C(\"CXTranslationUnit\") Addressable Unit) {\n+    public static MemoryAddress clang_getDiagnosticSetFromTU ( Addressable Unit) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSetFromTU$MH, \"clang_getDiagnosticSetFromTU\");\n@@ -994,3 +1591,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getDiagnosticSetFromTU$MH().invokeExact(Unit.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Unit.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -999,2 +1596,2 @@\n-    public static  MethodHandle clang_disposeDiagnostic$MH() {\n-        return Index_h$constants_0.clang_disposeDiagnostic$MH();\n+    public static MethodHandle clang_disposeDiagnostic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_disposeDiagnostic$MH,\"clang_disposeDiagnostic\");\n@@ -1002,1 +1599,2 @@\n-    public static void clang_disposeDiagnostic (@C(\"CXDiagnostic\") Addressable Diagnostic) {\n+    public static void clang_disposeDiagnostic ( Addressable Diagnostic) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_disposeDiagnostic$MH, \"clang_disposeDiagnostic\");\n@@ -1004,3 +1602,3 @@\n-            Index_h$constants_0.clang_disposeDiagnostic$MH().invokeExact(Diagnostic.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(Diagnostic.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1009,2 +1607,2 @@\n-    public static @C(\"int\") int CXDiagnostic_DisplaySourceLocation() {\n-        return Index_h$constants_0.CXDiagnostic_DisplaySourceLocation();\n+    public static int CXDiagnostic_DisplaySourceLocation() {\n+        return (int)1L;\n@@ -1012,2 +1610,2 @@\n-    public static @C(\"int\") int CXDiagnostic_DisplayColumn() {\n-        return Index_h$constants_0.CXDiagnostic_DisplayColumn();\n+    public static int CXDiagnostic_DisplayColumn() {\n+        return (int)2L;\n@@ -1015,2 +1613,2 @@\n-    public static @C(\"int\") int CXDiagnostic_DisplaySourceRanges() {\n-        return Index_h$constants_0.CXDiagnostic_DisplaySourceRanges();\n+    public static int CXDiagnostic_DisplaySourceRanges() {\n+        return (int)4L;\n@@ -1018,2 +1616,2 @@\n-    public static @C(\"int\") int CXDiagnostic_DisplayOption() {\n-        return Index_h$constants_0.CXDiagnostic_DisplayOption();\n+    public static int CXDiagnostic_DisplayOption() {\n+        return (int)8L;\n@@ -1021,2 +1619,2 @@\n-    public static @C(\"int\") int CXDiagnostic_DisplayCategoryId() {\n-        return Index_h$constants_0.CXDiagnostic_DisplayCategoryId();\n+    public static int CXDiagnostic_DisplayCategoryId() {\n+        return (int)16L;\n@@ -1024,2 +1622,2 @@\n-    public static @C(\"int\") int CXDiagnostic_DisplayCategoryName() {\n-        return Index_h$constants_0.CXDiagnostic_DisplayCategoryName();\n+    public static int CXDiagnostic_DisplayCategoryName() {\n+        return (int)32L;\n@@ -1027,2 +1625,2 @@\n-    public static  MethodHandle clang_formatDiagnostic$MH() {\n-        return Index_h$constants_0.clang_formatDiagnostic$MH();\n+    public static MethodHandle clang_formatDiagnostic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_formatDiagnostic$MH,\"clang_formatDiagnostic\");\n@@ -1030,1 +1628,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_formatDiagnostic (@C(\"CXDiagnostic\") Addressable Diagnostic, @C(\"unsigned int\") int Options) {\n+    public static MemorySegment clang_formatDiagnostic ( Addressable Diagnostic,  int Options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_formatDiagnostic$MH, \"clang_formatDiagnostic\");\n@@ -1032,3 +1631,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_formatDiagnostic$MH().invokeExact(Diagnostic.address(), Options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diagnostic.address(), Options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1037,2 +1636,2 @@\n-    public static  MethodHandle clang_defaultDiagnosticDisplayOptions$MH() {\n-        return Index_h$constants_0.clang_defaultDiagnosticDisplayOptions$MH();\n+    public static MethodHandle clang_defaultDiagnosticDisplayOptions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_defaultDiagnosticDisplayOptions$MH,\"clang_defaultDiagnosticDisplayOptions\");\n@@ -1040,1 +1639,2 @@\n-    public static @C(\"unsigned int\") int clang_defaultDiagnosticDisplayOptions () {\n+    public static int clang_defaultDiagnosticDisplayOptions () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_defaultDiagnosticDisplayOptions$MH, \"clang_defaultDiagnosticDisplayOptions\");\n@@ -1042,3 +1642,3 @@\n-            return (int)Index_h$constants_0.clang_defaultDiagnosticDisplayOptions$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1047,2 +1647,2 @@\n-    public static  MethodHandle clang_getDiagnosticSeverity$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticSeverity$MH();\n+    public static MethodHandle clang_getDiagnosticSeverity$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSeverity$MH,\"clang_getDiagnosticSeverity\");\n@@ -1050,1 +1650,2 @@\n-    public static @C(\"enum CXDiagnosticSeverity\") int clang_getDiagnosticSeverity (@C(\"CXDiagnostic\") Addressable x0) {\n+    public static int clang_getDiagnosticSeverity ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSeverity$MH, \"clang_getDiagnosticSeverity\");\n@@ -1052,3 +1653,3 @@\n-            return (int)Index_h$constants_0.clang_getDiagnosticSeverity$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1057,2 +1658,54 @@\n-    public static  MethodHandle clang_getDiagnosticLocation$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticLocation$MH();\n+    public static class constants$7 {\n+\n+        static final FunctionDescriptor clang_getDiagnostic$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getDiagnostic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnostic\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$7.clang_getDiagnostic$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticSetFromTU$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticSetFromTU$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticSetFromTU\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$7.clang_getDiagnosticSetFromTU$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeDiagnostic$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeDiagnostic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeDiagnostic\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$7.clang_disposeDiagnostic$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_formatDiagnostic$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_formatDiagnostic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_formatDiagnostic\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$7.clang_formatDiagnostic$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC = FunctionDescriptor.of(C_INT);\n+        static final MethodHandle clang_defaultDiagnosticDisplayOptions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_defaultDiagnosticDisplayOptions\",\n+            \"()I\",\n+            constants$7.clang_defaultDiagnosticDisplayOptions$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticSeverity$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticSeverity$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticSeverity\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$7.clang_getDiagnosticSeverity$FUNC, false\n+        );\n@@ -1060,1 +1713,6 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getDiagnosticLocation (@C(\"CXDiagnostic\") Addressable x0) {\n+\n+    public static MethodHandle clang_getDiagnosticLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticLocation$MH,\"clang_getDiagnosticLocation\");\n+    }\n+    public static MemorySegment clang_getDiagnosticLocation ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticLocation$MH, \"clang_getDiagnosticLocation\");\n@@ -1062,3 +1720,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticLocation$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1067,2 +1725,2 @@\n-    public static  MethodHandle clang_getDiagnosticSpelling$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticSpelling$MH();\n+    public static MethodHandle clang_getDiagnosticSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticSpelling$MH,\"clang_getDiagnosticSpelling\");\n@@ -1070,1 +1728,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getDiagnosticSpelling (@C(\"CXDiagnostic\") Addressable x0) {\n+    public static MemorySegment clang_getDiagnosticSpelling ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticSpelling$MH, \"clang_getDiagnosticSpelling\");\n@@ -1072,3 +1731,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticSpelling$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1077,2 +1736,2 @@\n-    public static  MethodHandle clang_getDiagnosticOption$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticOption$MH();\n+    public static MethodHandle clang_getDiagnosticOption$MH() {\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticOption$MH,\"clang_getDiagnosticOption\");\n@@ -1080,1 +1739,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getDiagnosticOption (@C(\"CXDiagnostic\") Addressable Diag, @C(\"CXString*\") Addressable Disable) {\n+    public static MemorySegment clang_getDiagnosticOption ( Addressable Diag,  Addressable Disable) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticOption$MH, \"clang_getDiagnosticOption\");\n@@ -1082,3 +1742,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticOption$MH().invokeExact(Diag.address(), Disable.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diag.address(), Disable.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1087,2 +1747,2 @@\n-    public static  MethodHandle clang_getDiagnosticCategory$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticCategory$MH();\n+    public static MethodHandle clang_getDiagnosticCategory$MH() {\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategory$MH,\"clang_getDiagnosticCategory\");\n@@ -1090,1 +1750,2 @@\n-    public static @C(\"unsigned int\") int clang_getDiagnosticCategory (@C(\"CXDiagnostic\") Addressable x0) {\n+    public static int clang_getDiagnosticCategory ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategory$MH, \"clang_getDiagnosticCategory\");\n@@ -1092,3 +1753,3 @@\n-            return (int)Index_h$constants_0.clang_getDiagnosticCategory$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1097,2 +1758,2 @@\n-    public static  MethodHandle clang_getDiagnosticCategoryName$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticCategoryName$MH();\n+    public static MethodHandle clang_getDiagnosticCategoryName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryName$MH,\"clang_getDiagnosticCategoryName\");\n@@ -1100,1 +1761,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getDiagnosticCategoryName (@C(\"unsigned int\") int Category) {\n+    public static MemorySegment clang_getDiagnosticCategoryName ( int Category) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryName$MH, \"clang_getDiagnosticCategoryName\");\n@@ -1102,3 +1764,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticCategoryName$MH().invokeExact(Category);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Category);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1107,2 +1769,2 @@\n-    public static  MethodHandle clang_getDiagnosticCategoryText$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticCategoryText$MH();\n+    public static MethodHandle clang_getDiagnosticCategoryText$MH() {\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryText$MH,\"clang_getDiagnosticCategoryText\");\n@@ -1110,1 +1772,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getDiagnosticCategoryText (@C(\"CXDiagnostic\") Addressable x0) {\n+    public static MemorySegment clang_getDiagnosticCategoryText ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryText$MH, \"clang_getDiagnosticCategoryText\");\n@@ -1112,3 +1775,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticCategoryText$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1117,2 +1780,75 @@\n-    public static  MethodHandle clang_getDiagnosticNumRanges$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticNumRanges$MH();\n+    public static class constants$8 {\n+\n+        static final FunctionDescriptor clang_getDiagnosticLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$8.clang_getDiagnosticLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticSpelling\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$8.clang_getDiagnosticSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticOption$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticOption$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticOption\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$8.clang_getDiagnosticOption$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticCategory$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticCategory$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticCategory\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$8.clang_getDiagnosticCategory$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticCategoryName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_getDiagnosticCategoryName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticCategoryName\",\n+            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$8.clang_getDiagnosticCategoryName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticCategoryText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticCategoryText$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticCategoryText\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$8.clang_getDiagnosticCategoryText$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getDiagnosticNumRanges$MH() {\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumRanges$MH,\"clang_getDiagnosticNumRanges\");\n@@ -1120,1 +1856,2 @@\n-    public static @C(\"unsigned int\") int clang_getDiagnosticNumRanges (@C(\"CXDiagnostic\") Addressable x0) {\n+    public static int clang_getDiagnosticNumRanges ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumRanges$MH, \"clang_getDiagnosticNumRanges\");\n@@ -1122,3 +1859,3 @@\n-            return (int)Index_h$constants_0.clang_getDiagnosticNumRanges$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1127,2 +1864,2 @@\n-    public static  MethodHandle clang_getDiagnosticRange$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticRange$MH();\n+    public static MethodHandle clang_getDiagnosticRange$MH() {\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticRange$MH,\"clang_getDiagnosticRange\");\n@@ -1130,1 +1867,2 @@\n-    public static @C(\"CXSourceRange\") MemorySegment clang_getDiagnosticRange (@C(\"CXDiagnostic\") Addressable Diagnostic, @C(\"unsigned int\") int Range) {\n+    public static MemorySegment clang_getDiagnosticRange ( Addressable Diagnostic,  int Range) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticRange$MH, \"clang_getDiagnosticRange\");\n@@ -1132,3 +1870,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticRange$MH().invokeExact(Diagnostic.address(), Range);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diagnostic.address(), Range);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1137,2 +1875,2 @@\n-    public static  MethodHandle clang_getDiagnosticNumFixIts$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticNumFixIts$MH();\n+    public static MethodHandle clang_getDiagnosticNumFixIts$MH() {\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumFixIts$MH,\"clang_getDiagnosticNumFixIts\");\n@@ -1140,1 +1878,2 @@\n-    public static @C(\"unsigned int\") int clang_getDiagnosticNumFixIts (@C(\"CXDiagnostic\") Addressable Diagnostic) {\n+    public static int clang_getDiagnosticNumFixIts ( Addressable Diagnostic) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumFixIts$MH, \"clang_getDiagnosticNumFixIts\");\n@@ -1142,3 +1881,3 @@\n-            return (int)Index_h$constants_0.clang_getDiagnosticNumFixIts$MH().invokeExact(Diagnostic.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Diagnostic.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1147,2 +1886,2 @@\n-    public static  MethodHandle clang_getDiagnosticFixIt$MH() {\n-        return Index_h$constants_0.clang_getDiagnosticFixIt$MH();\n+    public static MethodHandle clang_getDiagnosticFixIt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticFixIt$MH,\"clang_getDiagnosticFixIt\");\n@@ -1150,1 +1889,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getDiagnosticFixIt (@C(\"CXDiagnostic\") Addressable Diagnostic, @C(\"unsigned int\") int FixIt, @C(\"CXSourceRange*\") Addressable ReplacementRange) {\n+    public static MemorySegment clang_getDiagnosticFixIt ( Addressable Diagnostic,  int FixIt,  Addressable ReplacementRange) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticFixIt$MH, \"clang_getDiagnosticFixIt\");\n@@ -1152,3 +1892,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDiagnosticFixIt$MH().invokeExact(Diagnostic.address(), FixIt, ReplacementRange.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diagnostic.address(), FixIt, ReplacementRange.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1157,2 +1897,2 @@\n-    public static  MethodHandle clang_getTranslationUnitSpelling$MH() {\n-        return Index_h$constants_0.clang_getTranslationUnitSpelling$MH();\n+    public static MethodHandle clang_getTranslationUnitSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getTranslationUnitSpelling$MH,\"clang_getTranslationUnitSpelling\");\n@@ -1160,1 +1900,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getTranslationUnitSpelling (@C(\"CXTranslationUnit\") Addressable CTUnit) {\n+    public static MemorySegment clang_getTranslationUnitSpelling ( Addressable CTUnit) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getTranslationUnitSpelling$MH, \"clang_getTranslationUnitSpelling\");\n@@ -1162,3 +1903,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTranslationUnitSpelling$MH().invokeExact(CTUnit.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CTUnit.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1167,2 +1908,2 @@\n-    public static  MethodHandle clang_createTranslationUnitFromSourceFile$MH() {\n-        return Index_h$constants_0.clang_createTranslationUnitFromSourceFile$MH();\n+    public static MethodHandle clang_createTranslationUnitFromSourceFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$9.clang_createTranslationUnitFromSourceFile$MH,\"clang_createTranslationUnitFromSourceFile\");\n@@ -1170,1 +1911,2 @@\n-    public static @C(\"CXTranslationUnit\") MemoryAddress clang_createTranslationUnitFromSourceFile (@C(\"CXIndex\") Addressable CIdx, @C(\"char*\") Addressable source_filename, @C(\"int\") int num_clang_command_line_args, @C(\"char**\") Addressable clang_command_line_args, @C(\"unsigned int\") int num_unsaved_files, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files) {\n+    public static MemoryAddress clang_createTranslationUnitFromSourceFile ( Addressable CIdx,  Addressable source_filename,  int num_clang_command_line_args,  Addressable clang_command_line_args,  int num_unsaved_files,  Addressable unsaved_files) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_createTranslationUnitFromSourceFile$MH, \"clang_createTranslationUnitFromSourceFile\");\n@@ -1172,3 +1914,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createTranslationUnitFromSourceFile$MH().invokeExact(CIdx.address(), source_filename.address(), num_clang_command_line_args, clang_command_line_args.address(), num_unsaved_files, unsaved_files.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address(), source_filename.address(), num_clang_command_line_args, clang_command_line_args.address(), num_unsaved_files, unsaved_files.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1177,2 +1919,70 @@\n-    public static  MethodHandle clang_createTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_createTranslationUnit$MH();\n+    public static class constants$9 {\n+\n+        static final FunctionDescriptor clang_getDiagnosticNumRanges$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticNumRanges$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticNumRanges\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$9.clang_getDiagnosticNumRanges$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getDiagnosticRange$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticRange\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$9.clang_getDiagnosticRange$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticNumFixIts$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticNumFixIts$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticNumFixIts\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$9.clang_getDiagnosticNumFixIts$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDiagnosticFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDiagnosticFixIt$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDiagnosticFixIt\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$9.clang_getDiagnosticFixIt$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTranslationUnitSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getTranslationUnitSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTranslationUnitSpelling\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$9.clang_getTranslationUnitSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_createTranslationUnitFromSourceFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_createTranslationUnitFromSourceFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_createTranslationUnitFromSourceFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$9.clang_createTranslationUnitFromSourceFile$FUNC, false\n+        );\n@@ -1180,1 +1990,6 @@\n-    public static @C(\"CXTranslationUnit\") MemoryAddress clang_createTranslationUnit (@C(\"CXIndex\") Addressable CIdx, @C(\"char*\") Addressable ast_filename) {\n+\n+    public static MethodHandle clang_createTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit$MH,\"clang_createTranslationUnit\");\n+    }\n+    public static MemoryAddress clang_createTranslationUnit ( Addressable CIdx,  Addressable ast_filename) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit$MH, \"clang_createTranslationUnit\");\n@@ -1182,3 +1997,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createTranslationUnit$MH().invokeExact(CIdx.address(), ast_filename.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address(), ast_filename.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1187,2 +2002,2 @@\n-    public static  MethodHandle clang_createTranslationUnit2$MH() {\n-        return Index_h$constants_0.clang_createTranslationUnit2$MH();\n+    public static MethodHandle clang_createTranslationUnit2$MH() {\n+        return RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit2$MH,\"clang_createTranslationUnit2\");\n@@ -1190,1 +2005,2 @@\n-    public static @C(\"enum CXErrorCode\") int clang_createTranslationUnit2 (@C(\"CXIndex\") Addressable CIdx, @C(\"char*\") Addressable ast_filename, @C(\"CXTranslationUnit*\") Addressable out_TU) {\n+    public static int clang_createTranslationUnit2 ( Addressable CIdx,  Addressable ast_filename,  Addressable out_TU) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit2$MH, \"clang_createTranslationUnit2\");\n@@ -1192,3 +2008,3 @@\n-            return (int)Index_h$constants_0.clang_createTranslationUnit2$MH().invokeExact(CIdx.address(), ast_filename.address(), out_TU.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(CIdx.address(), ast_filename.address(), out_TU.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1197,2 +2013,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_None() {\n-        return Index_h$constants_0.CXTranslationUnit_None();\n+    public static int CXTranslationUnit_None() {\n+        return (int)0L;\n@@ -1200,2 +2016,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_DetailedPreprocessingRecord() {\n-        return Index_h$constants_0.CXTranslationUnit_DetailedPreprocessingRecord();\n+    public static int CXTranslationUnit_DetailedPreprocessingRecord() {\n+        return (int)1L;\n@@ -1203,2 +2019,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_Incomplete() {\n-        return Index_h$constants_0.CXTranslationUnit_Incomplete();\n+    public static int CXTranslationUnit_Incomplete() {\n+        return (int)2L;\n@@ -1206,2 +2022,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_PrecompiledPreamble() {\n-        return Index_h$constants_0.CXTranslationUnit_PrecompiledPreamble();\n+    public static int CXTranslationUnit_PrecompiledPreamble() {\n+        return (int)4L;\n@@ -1209,2 +2025,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_CacheCompletionResults() {\n-        return Index_h$constants_0.CXTranslationUnit_CacheCompletionResults();\n+    public static int CXTranslationUnit_CacheCompletionResults() {\n+        return (int)8L;\n@@ -1212,2 +2028,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_ForSerialization() {\n-        return Index_h$constants_0.CXTranslationUnit_ForSerialization();\n+    public static int CXTranslationUnit_ForSerialization() {\n+        return (int)16L;\n@@ -1215,2 +2031,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_CXXChainedPCH() {\n-        return Index_h$constants_0.CXTranslationUnit_CXXChainedPCH();\n+    public static int CXTranslationUnit_CXXChainedPCH() {\n+        return (int)32L;\n@@ -1218,2 +2034,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_SkipFunctionBodies() {\n-        return Index_h$constants_0.CXTranslationUnit_SkipFunctionBodies();\n+    public static int CXTranslationUnit_SkipFunctionBodies() {\n+        return (int)64L;\n@@ -1221,2 +2037,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion() {\n-        return Index_h$constants_0.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion();\n+    public static int CXTranslationUnit_IncludeBriefCommentsInCodeCompletion() {\n+        return (int)128L;\n@@ -1224,2 +2040,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_CreatePreambleOnFirstParse() {\n-        return Index_h$constants_0.CXTranslationUnit_CreatePreambleOnFirstParse();\n+    public static int CXTranslationUnit_CreatePreambleOnFirstParse() {\n+        return (int)256L;\n@@ -1227,2 +2043,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_KeepGoing() {\n-        return Index_h$constants_0.CXTranslationUnit_KeepGoing();\n+    public static int CXTranslationUnit_KeepGoing() {\n+        return (int)512L;\n@@ -1230,2 +2046,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_SingleFileParse() {\n-        return Index_h$constants_0.CXTranslationUnit_SingleFileParse();\n+    public static int CXTranslationUnit_SingleFileParse() {\n+        return (int)1024L;\n@@ -1233,2 +2049,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble() {\n-        return Index_h$constants_0.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble();\n+    public static int CXTranslationUnit_LimitSkipFunctionBodiesToPreamble() {\n+        return (int)2048L;\n@@ -1236,2 +2052,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_IncludeAttributedTypes() {\n-        return Index_h$constants_0.CXTranslationUnit_IncludeAttributedTypes();\n+    public static int CXTranslationUnit_IncludeAttributedTypes() {\n+        return (int)4096L;\n@@ -1239,2 +2055,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_VisitImplicitAttributes() {\n-        return Index_h$constants_0.CXTranslationUnit_VisitImplicitAttributes();\n+    public static int CXTranslationUnit_VisitImplicitAttributes() {\n+        return (int)8192L;\n@@ -1242,2 +2058,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles() {\n-        return Index_h$constants_0.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles();\n+    public static int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles() {\n+        return (int)16384L;\n@@ -1245,2 +2061,2 @@\n-    public static @C(\"int\") int CXTranslationUnit_RetainExcludedConditionalBlocks() {\n-        return Index_h$constants_0.CXTranslationUnit_RetainExcludedConditionalBlocks();\n+    public static int CXTranslationUnit_RetainExcludedConditionalBlocks() {\n+        return (int)32768L;\n@@ -1248,2 +2064,2 @@\n-    public static  MethodHandle clang_defaultEditingTranslationUnitOptions$MH() {\n-        return Index_h$constants_0.clang_defaultEditingTranslationUnitOptions$MH();\n+    public static MethodHandle clang_defaultEditingTranslationUnitOptions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$10.clang_defaultEditingTranslationUnitOptions$MH,\"clang_defaultEditingTranslationUnitOptions\");\n@@ -1251,1 +2067,2 @@\n-    public static @C(\"unsigned int\") int clang_defaultEditingTranslationUnitOptions () {\n+    public static int clang_defaultEditingTranslationUnitOptions () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_defaultEditingTranslationUnitOptions$MH, \"clang_defaultEditingTranslationUnitOptions\");\n@@ -1253,3 +2070,3 @@\n-            return (int)Index_h$constants_0.clang_defaultEditingTranslationUnitOptions$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1258,2 +2075,2 @@\n-    public static  MethodHandle clang_parseTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_parseTranslationUnit$MH();\n+    public static MethodHandle clang_parseTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit$MH,\"clang_parseTranslationUnit\");\n@@ -1261,1 +2078,2 @@\n-    public static @C(\"CXTranslationUnit\") MemoryAddress clang_parseTranslationUnit (@C(\"CXIndex\") Addressable CIdx, @C(\"char*\") Addressable source_filename, @C(\"char**\") Addressable command_line_args, @C(\"int\") int num_command_line_args, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files, @C(\"unsigned int\") int num_unsaved_files, @C(\"unsigned int\") int options) {\n+    public static MemoryAddress clang_parseTranslationUnit ( Addressable CIdx,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  int options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit$MH, \"clang_parseTranslationUnit\");\n@@ -1263,3 +2081,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_parseTranslationUnit$MH().invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1268,2 +2086,2 @@\n-    public static  MethodHandle clang_parseTranslationUnit2$MH() {\n-        return Index_h$constants_0.clang_parseTranslationUnit2$MH();\n+    public static MethodHandle clang_parseTranslationUnit2$MH() {\n+        return RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2$MH,\"clang_parseTranslationUnit2\");\n@@ -1271,1 +2089,2 @@\n-    public static @C(\"enum CXErrorCode\") int clang_parseTranslationUnit2 (@C(\"CXIndex\") Addressable CIdx, @C(\"char*\") Addressable source_filename, @C(\"char**\") Addressable command_line_args, @C(\"int\") int num_command_line_args, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files, @C(\"unsigned int\") int num_unsaved_files, @C(\"unsigned int\") int options, @C(\"CXTranslationUnit*\") Addressable out_TU) {\n+    public static int clang_parseTranslationUnit2 ( Addressable CIdx,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  int options,  Addressable out_TU) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2$MH, \"clang_parseTranslationUnit2\");\n@@ -1273,3 +2092,3 @@\n-            return (int)Index_h$constants_0.clang_parseTranslationUnit2$MH().invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options, out_TU.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options, out_TU.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1278,2 +2097,2 @@\n-    public static  MethodHandle clang_parseTranslationUnit2FullArgv$MH() {\n-        return Index_h$constants_0.clang_parseTranslationUnit2FullArgv$MH();\n+    public static MethodHandle clang_parseTranslationUnit2FullArgv$MH() {\n+        return RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2FullArgv$MH,\"clang_parseTranslationUnit2FullArgv\");\n@@ -1281,1 +2100,2 @@\n-    public static @C(\"enum CXErrorCode\") int clang_parseTranslationUnit2FullArgv (@C(\"CXIndex\") Addressable CIdx, @C(\"char*\") Addressable source_filename, @C(\"char**\") Addressable command_line_args, @C(\"int\") int num_command_line_args, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files, @C(\"unsigned int\") int num_unsaved_files, @C(\"unsigned int\") int options, @C(\"CXTranslationUnit*\") Addressable out_TU) {\n+    public static int clang_parseTranslationUnit2FullArgv ( Addressable CIdx,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  int options,  Addressable out_TU) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2FullArgv$MH, \"clang_parseTranslationUnit2FullArgv\");\n@@ -1283,3 +2103,3 @@\n-            return (int)Index_h$constants_0.clang_parseTranslationUnit2FullArgv$MH().invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options, out_TU.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options, out_TU.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1288,2 +2108,2 @@\n-    public static @C(\"int\") int CXSaveTranslationUnit_None() {\n-        return Index_h$constants_0.CXSaveTranslationUnit_None();\n+    public static int CXSaveTranslationUnit_None() {\n+        return (int)0L;\n@@ -1291,2 +2111,75 @@\n-    public static  MethodHandle clang_defaultSaveOptions$MH() {\n-        return Index_h$constants_0.clang_defaultSaveOptions$MH();\n+    public static class constants$10 {\n+\n+        static final FunctionDescriptor clang_createTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_createTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_createTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$10.clang_createTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_createTranslationUnit2$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_createTranslationUnit2$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_createTranslationUnit2\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$10.clang_createTranslationUnit2$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_defaultEditingTranslationUnitOptions$FUNC = FunctionDescriptor.of(C_INT);\n+        static final MethodHandle clang_defaultEditingTranslationUnitOptions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_defaultEditingTranslationUnitOptions\",\n+            \"()I\",\n+            constants$10.clang_defaultEditingTranslationUnitOptions$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_parseTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_parseTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_parseTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$10.clang_parseTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_parseTranslationUnit2$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_parseTranslationUnit2$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_parseTranslationUnit2\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$10.clang_parseTranslationUnit2$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_parseTranslationUnit2FullArgv$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_parseTranslationUnit2FullArgv$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_parseTranslationUnit2FullArgv\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$10.clang_parseTranslationUnit2FullArgv$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_defaultSaveOptions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_defaultSaveOptions$MH,\"clang_defaultSaveOptions\");\n@@ -1294,1 +2187,2 @@\n-    public static @C(\"unsigned int\") int clang_defaultSaveOptions (@C(\"CXTranslationUnit\") Addressable TU) {\n+    public static int clang_defaultSaveOptions ( Addressable TU) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_defaultSaveOptions$MH, \"clang_defaultSaveOptions\");\n@@ -1296,3 +2190,3 @@\n-            return (int)Index_h$constants_0.clang_defaultSaveOptions$MH().invokeExact(TU.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(TU.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1301,2 +2195,2 @@\n-    public static @C(\"int\") int CXSaveError_None() {\n-        return Index_h$constants_0.CXSaveError_None();\n+    public static int CXSaveError_None() {\n+        return (int)0L;\n@@ -1304,2 +2198,2 @@\n-    public static @C(\"int\") int CXSaveError_Unknown() {\n-        return Index_h$constants_0.CXSaveError_Unknown();\n+    public static int CXSaveError_Unknown() {\n+        return (int)1L;\n@@ -1307,2 +2201,2 @@\n-    public static @C(\"int\") int CXSaveError_TranslationErrors() {\n-        return Index_h$constants_0.CXSaveError_TranslationErrors();\n+    public static int CXSaveError_TranslationErrors() {\n+        return (int)2L;\n@@ -1310,2 +2204,2 @@\n-    public static @C(\"int\") int CXSaveError_InvalidTU() {\n-        return Index_h$constants_0.CXSaveError_InvalidTU();\n+    public static int CXSaveError_InvalidTU() {\n+        return (int)3L;\n@@ -1313,2 +2207,2 @@\n-    public static  MethodHandle clang_saveTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_saveTranslationUnit$MH();\n+    public static MethodHandle clang_saveTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_saveTranslationUnit$MH,\"clang_saveTranslationUnit\");\n@@ -1316,1 +2210,2 @@\n-    public static @C(\"int\") int clang_saveTranslationUnit (@C(\"CXTranslationUnit\") Addressable TU, @C(\"char*\") Addressable FileName, @C(\"unsigned int\") int options) {\n+    public static int clang_saveTranslationUnit ( Addressable TU,  Addressable FileName,  int options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_saveTranslationUnit$MH, \"clang_saveTranslationUnit\");\n@@ -1318,3 +2213,3 @@\n-            return (int)Index_h$constants_0.clang_saveTranslationUnit$MH().invokeExact(TU.address(), FileName.address(), options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(TU.address(), FileName.address(), options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1323,2 +2218,2 @@\n-    public static  MethodHandle clang_suspendTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_suspendTranslationUnit$MH();\n+    public static MethodHandle clang_suspendTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_suspendTranslationUnit$MH,\"clang_suspendTranslationUnit\");\n@@ -1326,1 +2221,2 @@\n-    public static @C(\"unsigned int\") int clang_suspendTranslationUnit (@C(\"CXTranslationUnit\") Addressable x0) {\n+    public static int clang_suspendTranslationUnit ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_suspendTranslationUnit$MH, \"clang_suspendTranslationUnit\");\n@@ -1328,3 +2224,3 @@\n-            return (int)Index_h$constants_0.clang_suspendTranslationUnit$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1333,2 +2229,2 @@\n-    public static  MethodHandle clang_disposeTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_disposeTranslationUnit$MH();\n+    public static MethodHandle clang_disposeTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_disposeTranslationUnit$MH,\"clang_disposeTranslationUnit\");\n@@ -1336,1 +2232,2 @@\n-    public static void clang_disposeTranslationUnit (@C(\"CXTranslationUnit\") Addressable x0) {\n+    public static void clang_disposeTranslationUnit ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_disposeTranslationUnit$MH, \"clang_disposeTranslationUnit\");\n@@ -1338,3 +2235,3 @@\n-            Index_h$constants_0.clang_disposeTranslationUnit$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1343,2 +2240,2 @@\n-    public static @C(\"int\") int CXReparse_None() {\n-        return Index_h$constants_0.CXReparse_None();\n+    public static int CXReparse_None() {\n+        return (int)0L;\n@@ -1346,2 +2243,2 @@\n-    public static  MethodHandle clang_defaultReparseOptions$MH() {\n-        return Index_h$constants_0.clang_defaultReparseOptions$MH();\n+    public static MethodHandle clang_defaultReparseOptions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_defaultReparseOptions$MH,\"clang_defaultReparseOptions\");\n@@ -1349,1 +2246,2 @@\n-    public static @C(\"unsigned int\") int clang_defaultReparseOptions (@C(\"CXTranslationUnit\") Addressable TU) {\n+    public static int clang_defaultReparseOptions ( Addressable TU) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_defaultReparseOptions$MH, \"clang_defaultReparseOptions\");\n@@ -1351,3 +2249,3 @@\n-            return (int)Index_h$constants_0.clang_defaultReparseOptions$MH().invokeExact(TU.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(TU.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1356,2 +2254,2 @@\n-    public static  MethodHandle clang_reparseTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_reparseTranslationUnit$MH();\n+    public static MethodHandle clang_reparseTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_reparseTranslationUnit$MH,\"clang_reparseTranslationUnit\");\n@@ -1359,1 +2257,2 @@\n-    public static @C(\"int\") int clang_reparseTranslationUnit (@C(\"CXTranslationUnit\") Addressable TU, @C(\"unsigned int\") int num_unsaved_files, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files, @C(\"unsigned int\") int options) {\n+    public static int clang_reparseTranslationUnit ( Addressable TU,  int num_unsaved_files,  Addressable unsaved_files,  int options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_reparseTranslationUnit$MH, \"clang_reparseTranslationUnit\");\n@@ -1361,3 +2260,3 @@\n-            return (int)Index_h$constants_0.clang_reparseTranslationUnit$MH().invokeExact(TU.address(), num_unsaved_files, unsaved_files.address(), options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(TU.address(), num_unsaved_files, unsaved_files.address(), options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1366,2 +2265,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_AST() {\n-        return Index_h$constants_0.CXTUResourceUsage_AST();\n+    public static int CXTUResourceUsage_AST() {\n+        return (int)1L;\n@@ -1369,2 +2268,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_Identifiers() {\n-        return Index_h$constants_0.CXTUResourceUsage_Identifiers();\n+    public static int CXTUResourceUsage_Identifiers() {\n+        return (int)2L;\n@@ -1372,2 +2271,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_Selectors() {\n-        return Index_h$constants_0.CXTUResourceUsage_Selectors();\n+    public static int CXTUResourceUsage_Selectors() {\n+        return (int)3L;\n@@ -1375,2 +2274,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_GlobalCompletionResults() {\n-        return Index_h$constants_0.CXTUResourceUsage_GlobalCompletionResults();\n+    public static int CXTUResourceUsage_GlobalCompletionResults() {\n+        return (int)4L;\n@@ -1378,2 +2277,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_SourceManagerContentCache() {\n-        return Index_h$constants_0.CXTUResourceUsage_SourceManagerContentCache();\n+    public static int CXTUResourceUsage_SourceManagerContentCache() {\n+        return (int)5L;\n@@ -1381,2 +2280,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_AST_SideTables() {\n-        return Index_h$constants_0.CXTUResourceUsage_AST_SideTables();\n+    public static int CXTUResourceUsage_AST_SideTables() {\n+        return (int)6L;\n@@ -1384,2 +2283,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_SourceManager_Membuffer_Malloc() {\n-        return Index_h$constants_0.CXTUResourceUsage_SourceManager_Membuffer_Malloc();\n+    public static int CXTUResourceUsage_SourceManager_Membuffer_Malloc() {\n+        return (int)7L;\n@@ -1387,2 +2286,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_SourceManager_Membuffer_MMap() {\n-        return Index_h$constants_0.CXTUResourceUsage_SourceManager_Membuffer_MMap();\n+    public static int CXTUResourceUsage_SourceManager_Membuffer_MMap() {\n+        return (int)8L;\n@@ -1390,2 +2289,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc() {\n-        return Index_h$constants_0.CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc();\n+    public static int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc() {\n+        return (int)9L;\n@@ -1393,2 +2292,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap() {\n-        return Index_h$constants_0.CXTUResourceUsage_ExternalASTSource_Membuffer_MMap();\n+    public static int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap() {\n+        return (int)10L;\n@@ -1396,2 +2295,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_Preprocessor() {\n-        return Index_h$constants_0.CXTUResourceUsage_Preprocessor();\n+    public static int CXTUResourceUsage_Preprocessor() {\n+        return (int)11L;\n@@ -1399,2 +2298,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_PreprocessingRecord() {\n-        return Index_h$constants_0.CXTUResourceUsage_PreprocessingRecord();\n+    public static int CXTUResourceUsage_PreprocessingRecord() {\n+        return (int)12L;\n@@ -1402,2 +2301,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_SourceManager_DataStructures() {\n-        return Index_h$constants_0.CXTUResourceUsage_SourceManager_DataStructures();\n+    public static int CXTUResourceUsage_SourceManager_DataStructures() {\n+        return (int)13L;\n@@ -1405,2 +2304,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_Preprocessor_HeaderSearch() {\n-        return Index_h$constants_0.CXTUResourceUsage_Preprocessor_HeaderSearch();\n+    public static int CXTUResourceUsage_Preprocessor_HeaderSearch() {\n+        return (int)14L;\n@@ -1408,2 +2307,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN() {\n-        return Index_h$constants_0.CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN();\n+    public static int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN() {\n+        return (int)1L;\n@@ -1411,2 +2310,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_MEMORY_IN_BYTES_END() {\n-        return Index_h$constants_0.CXTUResourceUsage_MEMORY_IN_BYTES_END();\n+    public static int CXTUResourceUsage_MEMORY_IN_BYTES_END() {\n+        return (int)14L;\n@@ -1414,2 +2313,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_First() {\n-        return Index_h$constants_0.CXTUResourceUsage_First();\n+    public static int CXTUResourceUsage_First() {\n+        return (int)1L;\n@@ -1417,2 +2316,2 @@\n-    public static @C(\"int\") int CXTUResourceUsage_Last() {\n-        return Index_h$constants_0.CXTUResourceUsage_Last();\n+    public static int CXTUResourceUsage_Last() {\n+        return (int)14L;\n@@ -1420,2 +2319,59 @@\n-    public static  MethodHandle clang_getTUResourceUsageName$MH() {\n-        return Index_h$constants_0.clang_getTUResourceUsageName$MH();\n+    public static class constants$11 {\n+\n+        static final FunctionDescriptor clang_defaultSaveOptions$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_defaultSaveOptions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_defaultSaveOptions\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$11.clang_defaultSaveOptions$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_saveTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_saveTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_saveTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$11.clang_saveTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_suspendTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_suspendTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_suspendTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$11.clang_suspendTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeTranslationUnit$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$11.clang_disposeTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_defaultReparseOptions$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_defaultReparseOptions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_defaultReparseOptions\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$11.clang_defaultReparseOptions$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_reparseTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_reparseTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_reparseTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$11.clang_reparseTranslationUnit$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getTUResourceUsageName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_getTUResourceUsageName$MH,\"clang_getTUResourceUsageName\");\n@@ -1423,1 +2379,2 @@\n-    public static @C(\"char*\") MemoryAddress clang_getTUResourceUsageName (@C(\"enum CXTUResourceUsageKind\") int kind) {\n+    public static MemoryAddress clang_getTUResourceUsageName ( int kind) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_getTUResourceUsageName$MH, \"clang_getTUResourceUsageName\");\n@@ -1425,3 +2382,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getTUResourceUsageName$MH().invokeExact(kind);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(kind);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1432,1 +2389,5 @@\n-        private CXTUResourceUsageEntry() {}\n+        static final MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_LONG_LONG.withName(\"amount\")\n+        ).withName(\"CXTUResourceUsageEntry\");\n@@ -1434,1 +2395,1 @@\n-            return Index_h$constants_0.CXTUResourceUsageEntry$struct$LAYOUT();\n+            return CXTUResourceUsageEntry.CXTUResourceUsageEntry$struct$LAYOUT;\n@@ -1436,0 +2397,1 @@\n+        static final VarHandle kind$VH = CXTUResourceUsageEntry$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n@@ -1437,1 +2399,1 @@\n-            return Index_h$constants_0.CXTUResourceUsageEntry$kind$VH();\n+            return CXTUResourceUsageEntry.kind$VH;\n@@ -1439,2 +2401,2 @@\n-        public static  @C(\"enum CXTUResourceUsageKind\") int kind$get(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXTUResourceUsageEntry$kind$VH().get(seg);\n+        public static int kind$get(MemorySegment seg) {\n+            return (int)CXTUResourceUsageEntry.kind$VH.get(seg);\n@@ -1442,2 +2404,2 @@\n-        public static  @C(\"enum CXTUResourceUsageKind\") int kind$get(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXTUResourceUsageEntry$kind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void kind$set( MemorySegment seg, int x) {\n+            CXTUResourceUsageEntry.kind$VH.set(seg, x);\n@@ -1445,2 +2407,2 @@\n-        public static void kind$set(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg, @C(\"enum CXTUResourceUsageKind\") int x) {\n-            Index_h$constants_0.CXTUResourceUsageEntry$kind$VH().set(seg, x);\n+        public static int kind$get(MemorySegment seg, long index) {\n+            return (int)CXTUResourceUsageEntry.kind$VH.get(seg.asSlice(index*sizeof()));\n@@ -1448,2 +2410,2 @@\n-        public static void kind$set(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg, long index, @C(\"enum CXTUResourceUsageKind\") int x) {\n-            Index_h$constants_0.CXTUResourceUsageEntry$kind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void kind$set(MemorySegment seg, long index, int x) {\n+            CXTUResourceUsageEntry.kind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -1451,0 +2413,1 @@\n+        static final VarHandle amount$VH = CXTUResourceUsageEntry$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"amount\"));\n@@ -1452,1 +2415,1 @@\n-            return Index_h$constants_0.CXTUResourceUsageEntry$amount$VH();\n+            return CXTUResourceUsageEntry.amount$VH;\n@@ -1454,2 +2417,2 @@\n-        public static  @C(\"unsigned long\") long amount$get(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg) {\n-            return (long)Index_h$constants_0.CXTUResourceUsageEntry$amount$VH().get(seg);\n+        public static long amount$get(MemorySegment seg) {\n+            return (long)CXTUResourceUsageEntry.amount$VH.get(seg);\n@@ -1457,2 +2420,2 @@\n-        public static  @C(\"unsigned long\") long amount$get(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg, long index) {\n-            return (long)Index_h$constants_0.CXTUResourceUsageEntry$amount$VH().get(seg.asSlice(index*sizeof()));\n+        public static void amount$set( MemorySegment seg, long x) {\n+            CXTUResourceUsageEntry.amount$VH.set(seg, x);\n@@ -1460,2 +2423,2 @@\n-        public static void amount$set(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg, @C(\"unsigned long\") long x) {\n-            Index_h$constants_0.CXTUResourceUsageEntry$amount$VH().set(seg, x);\n+        public static long amount$get(MemorySegment seg, long index) {\n+            return (long)CXTUResourceUsageEntry.amount$VH.get(seg.asSlice(index*sizeof()));\n@@ -1463,2 +2426,2 @@\n-        public static void amount$set(@C(\"struct CXTUResourceUsageEntry\") MemorySegment seg, long index, @C(\"unsigned long\") long x) {\n-            Index_h$constants_0.CXTUResourceUsageEntry$amount$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void amount$set(MemorySegment seg, long index, long x) {\n+            CXTUResourceUsageEntry.amount$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -1467,3 +2430,3 @@\n-        public static @C(\"struct CXTUResourceUsageEntry\") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct CXTUResourceUsageEntry\") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct CXTUResourceUsageEntry[]\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -1471,1 +2434,1 @@\n-        }        public static @C(\"struct CXTUResourceUsageEntry[]\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -1474,1 +2437,1 @@\n-        public static @C(\"struct CXTUResourceUsageEntry*\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -1477,1 +2440,1 @@\n-        public static @C(\"struct CXTUResourceUsageEntry*\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -1480,1 +2443,1 @@\n-        public static @C(\"struct CXTUResourceUsageEntry\") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -1485,1 +2448,6 @@\n-        private CXTUResourceUsage() {}\n+        static final MemoryLayout CXTUResourceUsage$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"numEntries\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_POINTER.withName(\"entries\")\n+        ).withName(\"CXTUResourceUsage\");\n@@ -1487,1 +2455,1 @@\n-            return Index_h$constants_0.CXTUResourceUsage$struct$LAYOUT();\n+            return CXTUResourceUsage.CXTUResourceUsage$struct$LAYOUT;\n@@ -1489,0 +2457,1 @@\n+        static final VarHandle data$VH = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"data\")));\n@@ -1490,1 +2459,1 @@\n-            return Index_h$constants_0.CXTUResourceUsage$data$VH();\n+            return CXTUResourceUsage.data$VH;\n@@ -1492,2 +2461,2 @@\n-        public static  @C(\"void*\") MemoryAddress data$get(@C(\"struct CXTUResourceUsage\") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXTUResourceUsage$data$VH().get(seg);\n+        public static MemoryAddress data$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.data$VH.get(seg);\n@@ -1495,2 +2464,2 @@\n-        public static  @C(\"void*\") MemoryAddress data$get(@C(\"struct CXTUResourceUsage\") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXTUResourceUsage$data$VH().get(seg.asSlice(index*sizeof()));\n+        public static void data$set( MemorySegment seg, MemoryAddress x) {\n+            CXTUResourceUsage.data$VH.set(seg, x);\n@@ -1498,2 +2467,2 @@\n-        public static void data$set(@C(\"struct CXTUResourceUsage\") MemorySegment seg, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_0.CXTUResourceUsage$data$VH().set(seg, x);\n+        public static MemoryAddress data$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.data$VH.get(seg.asSlice(index*sizeof()));\n@@ -1501,2 +2470,2 @@\n-        public static void data$set(@C(\"struct CXTUResourceUsage\") MemorySegment seg, long index, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_0.CXTUResourceUsage$data$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void data$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXTUResourceUsage.data$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -1504,0 +2473,1 @@\n+        static final VarHandle numEntries$VH = CXTUResourceUsage$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numEntries\"));\n@@ -1505,1 +2475,1 @@\n-            return Index_h$constants_0.CXTUResourceUsage$numEntries$VH();\n+            return CXTUResourceUsage.numEntries$VH;\n@@ -1507,2 +2477,2 @@\n-        public static  @C(\"unsigned int\") int numEntries$get(@C(\"struct CXTUResourceUsage\") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXTUResourceUsage$numEntries$VH().get(seg);\n+        public static int numEntries$get(MemorySegment seg) {\n+            return (int)CXTUResourceUsage.numEntries$VH.get(seg);\n@@ -1510,2 +2480,2 @@\n-        public static  @C(\"unsigned int\") int numEntries$get(@C(\"struct CXTUResourceUsage\") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXTUResourceUsage$numEntries$VH().get(seg.asSlice(index*sizeof()));\n+        public static void numEntries$set( MemorySegment seg, int x) {\n+            CXTUResourceUsage.numEntries$VH.set(seg, x);\n@@ -1513,2 +2483,2 @@\n-        public static void numEntries$set(@C(\"struct CXTUResourceUsage\") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXTUResourceUsage$numEntries$VH().set(seg, x);\n+        public static int numEntries$get(MemorySegment seg, long index) {\n+            return (int)CXTUResourceUsage.numEntries$VH.get(seg.asSlice(index*sizeof()));\n@@ -1516,2 +2486,2 @@\n-        public static void numEntries$set(@C(\"struct CXTUResourceUsage\") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_0.CXTUResourceUsage$numEntries$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void numEntries$set(MemorySegment seg, long index, int x) {\n+            CXTUResourceUsage.numEntries$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -1519,0 +2489,1 @@\n+        static final VarHandle entries$VH = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"entries\")));\n@@ -1520,1 +2491,1 @@\n-            return Index_h$constants_0.CXTUResourceUsage$entries$VH();\n+            return CXTUResourceUsage.entries$VH;\n@@ -1522,2 +2493,2 @@\n-        public static  @C(\"CXTUResourceUsageEntry*\") MemoryAddress entries$get(@C(\"struct CXTUResourceUsage\") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXTUResourceUsage$entries$VH().get(seg);\n+        public static MemoryAddress entries$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.entries$VH.get(seg);\n@@ -1525,2 +2496,2 @@\n-        public static  @C(\"CXTUResourceUsageEntry*\") MemoryAddress entries$get(@C(\"struct CXTUResourceUsage\") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.CXTUResourceUsage$entries$VH().get(seg.asSlice(index*sizeof()));\n+        public static void entries$set( MemorySegment seg, MemoryAddress x) {\n+            CXTUResourceUsage.entries$VH.set(seg, x);\n@@ -1528,2 +2499,2 @@\n-        public static void entries$set(@C(\"struct CXTUResourceUsage\") MemorySegment seg, @C(\"CXTUResourceUsageEntry*\") MemoryAddress x) {\n-            Index_h$constants_0.CXTUResourceUsage$entries$VH().set(seg, x);\n+        public static MemoryAddress entries$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.entries$VH.get(seg.asSlice(index*sizeof()));\n@@ -1531,2 +2502,2 @@\n-        public static void entries$set(@C(\"struct CXTUResourceUsage\") MemorySegment seg, long index, @C(\"CXTUResourceUsageEntry*\") MemoryAddress x) {\n-            Index_h$constants_0.CXTUResourceUsage$entries$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void entries$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXTUResourceUsage.entries$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -1535,3 +2506,3 @@\n-        public static @C(\"struct CXTUResourceUsage\") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct CXTUResourceUsage\") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct CXTUResourceUsage[]\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -1539,1 +2510,1 @@\n-        }        public static @C(\"struct CXTUResourceUsage[]\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -1542,1 +2513,1 @@\n-        public static @C(\"struct CXTUResourceUsage*\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -1545,1 +2516,1 @@\n-        public static @C(\"struct CXTUResourceUsage*\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -1548,1 +2519,1 @@\n-        public static @C(\"struct CXTUResourceUsage\") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -1551,2 +2522,2 @@\n-    public static  MethodHandle clang_getCXTUResourceUsage$MH() {\n-        return Index_h$constants_0.clang_getCXTUResourceUsage$MH();\n+    public static MethodHandle clang_getCXTUResourceUsage$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_getCXTUResourceUsage$MH,\"clang_getCXTUResourceUsage\");\n@@ -1554,1 +2525,2 @@\n-    public static @C(\"CXTUResourceUsage\") MemorySegment clang_getCXTUResourceUsage (@C(\"CXTranslationUnit\") Addressable TU) {\n+    public static MemorySegment clang_getCXTUResourceUsage ( Addressable TU) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_getCXTUResourceUsage$MH, \"clang_getCXTUResourceUsage\");\n@@ -1556,3 +2528,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCXTUResourceUsage$MH().invokeExact(TU.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(TU.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1561,2 +2533,2 @@\n-    public static  MethodHandle clang_disposeCXTUResourceUsage$MH() {\n-        return Index_h$constants_0.clang_disposeCXTUResourceUsage$MH();\n+    public static MethodHandle clang_disposeCXTUResourceUsage$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_disposeCXTUResourceUsage$MH,\"clang_disposeCXTUResourceUsage\");\n@@ -1564,1 +2536,2 @@\n-    public static void clang_disposeCXTUResourceUsage (@C(\"CXTUResourceUsage\") MemorySegment usage) {\n+    public static void clang_disposeCXTUResourceUsage ( MemorySegment usage) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_disposeCXTUResourceUsage$MH, \"clang_disposeCXTUResourceUsage\");\n@@ -1566,3 +2539,3 @@\n-            Index_h$constants_0.clang_disposeCXTUResourceUsage$MH().invokeExact(usage);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(usage);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1571,2 +2544,2 @@\n-    public static  MethodHandle clang_getTranslationUnitTargetInfo$MH() {\n-        return Index_h$constants_0.clang_getTranslationUnitTargetInfo$MH();\n+    public static MethodHandle clang_getTranslationUnitTargetInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_getTranslationUnitTargetInfo$MH,\"clang_getTranslationUnitTargetInfo\");\n@@ -1574,1 +2547,2 @@\n-    public static @C(\"CXTargetInfo\") MemoryAddress clang_getTranslationUnitTargetInfo (@C(\"CXTranslationUnit\") Addressable CTUnit) {\n+    public static MemoryAddress clang_getTranslationUnitTargetInfo ( Addressable CTUnit) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_getTranslationUnitTargetInfo$MH, \"clang_getTranslationUnitTargetInfo\");\n@@ -1576,3 +2550,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getTranslationUnitTargetInfo$MH().invokeExact(CTUnit.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CTUnit.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1581,2 +2555,2 @@\n-    public static  MethodHandle clang_TargetInfo_dispose$MH() {\n-        return Index_h$constants_0.clang_TargetInfo_dispose$MH();\n+    public static MethodHandle clang_TargetInfo_dispose$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_dispose$MH,\"clang_TargetInfo_dispose\");\n@@ -1584,1 +2558,2 @@\n-    public static void clang_TargetInfo_dispose (@C(\"CXTargetInfo\") Addressable Info) {\n+    public static void clang_TargetInfo_dispose ( Addressable Info) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_dispose$MH, \"clang_TargetInfo_dispose\");\n@@ -1586,3 +2561,3 @@\n-            Index_h$constants_0.clang_TargetInfo_dispose$MH().invokeExact(Info.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(Info.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1591,2 +2566,2 @@\n-    public static  MethodHandle clang_TargetInfo_getTriple$MH() {\n-        return Index_h$constants_0.clang_TargetInfo_getTriple$MH();\n+    public static MethodHandle clang_TargetInfo_getTriple$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_getTriple$MH,\"clang_TargetInfo_getTriple\");\n@@ -1594,1 +2569,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_TargetInfo_getTriple (@C(\"CXTargetInfo\") Addressable Info) {\n+    public static MemorySegment clang_TargetInfo_getTriple ( Addressable Info) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_getTriple$MH, \"clang_TargetInfo_getTriple\");\n@@ -1596,3 +2572,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_TargetInfo_getTriple$MH().invokeExact(Info.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Info.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1601,2 +2577,68 @@\n-    public static  MethodHandle clang_TargetInfo_getPointerWidth$MH() {\n-        return Index_h$constants_0.clang_TargetInfo_getPointerWidth$MH();\n+    public static class constants$12 {\n+\n+        static final FunctionDescriptor clang_getTUResourceUsageName$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getTUResourceUsageName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTUResourceUsageName\",\n+            \"(I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$12.clang_getTUResourceUsageName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCXTUResourceUsage$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"numEntries\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_POINTER.withName(\"entries\")\n+        ).withName(\"CXTUResourceUsage\"),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCXTUResourceUsage$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCXTUResourceUsage\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$12.clang_getCXTUResourceUsage$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeCXTUResourceUsage$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"numEntries\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                C_POINTER.withName(\"entries\")\n+            ).withName(\"CXTUResourceUsage\")\n+        );\n+        static final MethodHandle clang_disposeCXTUResourceUsage$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeCXTUResourceUsage\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n+            constants$12.clang_disposeCXTUResourceUsage$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTranslationUnitTargetInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getTranslationUnitTargetInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTranslationUnitTargetInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$12.clang_getTranslationUnitTargetInfo$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_TargetInfo_dispose$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_TargetInfo_dispose$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_TargetInfo_dispose\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$12.clang_TargetInfo_dispose$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_TargetInfo_getTriple$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_TargetInfo_getTriple$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_TargetInfo_getTriple\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$12.clang_TargetInfo_getTriple$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_TargetInfo_getPointerWidth$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_TargetInfo_getPointerWidth$MH,\"clang_TargetInfo_getPointerWidth\");\n@@ -1604,1 +2646,2 @@\n-    public static @C(\"int\") int clang_TargetInfo_getPointerWidth (@C(\"CXTargetInfo\") Addressable Info) {\n+    public static int clang_TargetInfo_getPointerWidth ( Addressable Info) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_TargetInfo_getPointerWidth$MH, \"clang_TargetInfo_getPointerWidth\");\n@@ -1606,3 +2649,3 @@\n-            return (int)Index_h$constants_0.clang_TargetInfo_getPointerWidth$MH().invokeExact(Info.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Info.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -1611,2 +2654,2 @@\n-    public static @C(\"int\") int CXCursor_UnexposedDecl() {\n-        return Index_h$constants_0.CXCursor_UnexposedDecl();\n+    public static int CXCursor_UnexposedDecl() {\n+        return (int)1L;\n@@ -1614,2 +2657,2 @@\n-    public static @C(\"int\") int CXCursor_StructDecl() {\n-        return Index_h$constants_0.CXCursor_StructDecl();\n+    public static int CXCursor_StructDecl() {\n+        return (int)2L;\n@@ -1617,2 +2660,2 @@\n-    public static @C(\"int\") int CXCursor_UnionDecl() {\n-        return Index_h$constants_0.CXCursor_UnionDecl();\n+    public static int CXCursor_UnionDecl() {\n+        return (int)3L;\n@@ -1620,2 +2663,2 @@\n-    public static @C(\"int\") int CXCursor_ClassDecl() {\n-        return Index_h$constants_0.CXCursor_ClassDecl();\n+    public static int CXCursor_ClassDecl() {\n+        return (int)4L;\n@@ -1623,2 +2666,2 @@\n-    public static @C(\"int\") int CXCursor_EnumDecl() {\n-        return Index_h$constants_0.CXCursor_EnumDecl();\n+    public static int CXCursor_EnumDecl() {\n+        return (int)5L;\n@@ -1626,2 +2669,2 @@\n-    public static @C(\"int\") int CXCursor_FieldDecl() {\n-        return Index_h$constants_0.CXCursor_FieldDecl();\n+    public static int CXCursor_FieldDecl() {\n+        return (int)6L;\n@@ -1629,2 +2672,2 @@\n-    public static @C(\"int\") int CXCursor_EnumConstantDecl() {\n-        return Index_h$constants_0.CXCursor_EnumConstantDecl();\n+    public static int CXCursor_EnumConstantDecl() {\n+        return (int)7L;\n@@ -1632,2 +2675,2 @@\n-    public static @C(\"int\") int CXCursor_FunctionDecl() {\n-        return Index_h$constants_0.CXCursor_FunctionDecl();\n+    public static int CXCursor_FunctionDecl() {\n+        return (int)8L;\n@@ -1635,2 +2678,2 @@\n-    public static @C(\"int\") int CXCursor_VarDecl() {\n-        return Index_h$constants_0.CXCursor_VarDecl();\n+    public static int CXCursor_VarDecl() {\n+        return (int)9L;\n@@ -1638,2 +2681,2 @@\n-    public static @C(\"int\") int CXCursor_ParmDecl() {\n-        return Index_h$constants_0.CXCursor_ParmDecl();\n+    public static int CXCursor_ParmDecl() {\n+        return (int)10L;\n@@ -1641,2 +2684,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCInterfaceDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCInterfaceDecl();\n+    public static int CXCursor_ObjCInterfaceDecl() {\n+        return (int)11L;\n@@ -1644,2 +2687,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCCategoryDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCCategoryDecl();\n+    public static int CXCursor_ObjCCategoryDecl() {\n+        return (int)12L;\n@@ -1647,2 +2690,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCProtocolDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCProtocolDecl();\n+    public static int CXCursor_ObjCProtocolDecl() {\n+        return (int)13L;\n@@ -1650,2 +2693,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCPropertyDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCPropertyDecl();\n+    public static int CXCursor_ObjCPropertyDecl() {\n+        return (int)14L;\n@@ -1653,2 +2696,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCIvarDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCIvarDecl();\n+    public static int CXCursor_ObjCIvarDecl() {\n+        return (int)15L;\n@@ -1656,2 +2699,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCInstanceMethodDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCInstanceMethodDecl();\n+    public static int CXCursor_ObjCInstanceMethodDecl() {\n+        return (int)16L;\n@@ -1659,2 +2702,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCClassMethodDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCClassMethodDecl();\n+    public static int CXCursor_ObjCClassMethodDecl() {\n+        return (int)17L;\n@@ -1662,2 +2705,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCImplementationDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCImplementationDecl();\n+    public static int CXCursor_ObjCImplementationDecl() {\n+        return (int)18L;\n@@ -1665,2 +2708,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCCategoryImplDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCCategoryImplDecl();\n+    public static int CXCursor_ObjCCategoryImplDecl() {\n+        return (int)19L;\n@@ -1668,2 +2711,2 @@\n-    public static @C(\"int\") int CXCursor_TypedefDecl() {\n-        return Index_h$constants_0.CXCursor_TypedefDecl();\n+    public static int CXCursor_TypedefDecl() {\n+        return (int)20L;\n@@ -1671,2 +2714,2 @@\n-    public static @C(\"int\") int CXCursor_CXXMethod() {\n-        return Index_h$constants_0.CXCursor_CXXMethod();\n+    public static int CXCursor_CXXMethod() {\n+        return (int)21L;\n@@ -1674,2 +2717,2 @@\n-    public static @C(\"int\") int CXCursor_Namespace() {\n-        return Index_h$constants_0.CXCursor_Namespace();\n+    public static int CXCursor_Namespace() {\n+        return (int)22L;\n@@ -1677,2 +2720,2 @@\n-    public static @C(\"int\") int CXCursor_LinkageSpec() {\n-        return Index_h$constants_0.CXCursor_LinkageSpec();\n+    public static int CXCursor_LinkageSpec() {\n+        return (int)23L;\n@@ -1680,2 +2723,2 @@\n-    public static @C(\"int\") int CXCursor_Constructor() {\n-        return Index_h$constants_0.CXCursor_Constructor();\n+    public static int CXCursor_Constructor() {\n+        return (int)24L;\n@@ -1683,2 +2726,2 @@\n-    public static @C(\"int\") int CXCursor_Destructor() {\n-        return Index_h$constants_0.CXCursor_Destructor();\n+    public static int CXCursor_Destructor() {\n+        return (int)25L;\n@@ -1686,2 +2729,2 @@\n-    public static @C(\"int\") int CXCursor_ConversionFunction() {\n-        return Index_h$constants_0.CXCursor_ConversionFunction();\n+    public static int CXCursor_ConversionFunction() {\n+        return (int)26L;\n@@ -1689,2 +2732,2 @@\n-    public static @C(\"int\") int CXCursor_TemplateTypeParameter() {\n-        return Index_h$constants_0.CXCursor_TemplateTypeParameter();\n+    public static int CXCursor_TemplateTypeParameter() {\n+        return (int)27L;\n@@ -1692,2 +2735,2 @@\n-    public static @C(\"int\") int CXCursor_NonTypeTemplateParameter() {\n-        return Index_h$constants_0.CXCursor_NonTypeTemplateParameter();\n+    public static int CXCursor_NonTypeTemplateParameter() {\n+        return (int)28L;\n@@ -1695,2 +2738,2 @@\n-    public static @C(\"int\") int CXCursor_TemplateTemplateParameter() {\n-        return Index_h$constants_0.CXCursor_TemplateTemplateParameter();\n+    public static int CXCursor_TemplateTemplateParameter() {\n+        return (int)29L;\n@@ -1698,2 +2741,2 @@\n-    public static @C(\"int\") int CXCursor_FunctionTemplate() {\n-        return Index_h$constants_0.CXCursor_FunctionTemplate();\n+    public static int CXCursor_FunctionTemplate() {\n+        return (int)30L;\n@@ -1701,2 +2744,2 @@\n-    public static @C(\"int\") int CXCursor_ClassTemplate() {\n-        return Index_h$constants_0.CXCursor_ClassTemplate();\n+    public static int CXCursor_ClassTemplate() {\n+        return (int)31L;\n@@ -1704,2 +2747,2 @@\n-    public static @C(\"int\") int CXCursor_ClassTemplatePartialSpecialization() {\n-        return Index_h$constants_0.CXCursor_ClassTemplatePartialSpecialization();\n+    public static int CXCursor_ClassTemplatePartialSpecialization() {\n+        return (int)32L;\n@@ -1707,2 +2750,2 @@\n-    public static @C(\"int\") int CXCursor_NamespaceAlias() {\n-        return Index_h$constants_0.CXCursor_NamespaceAlias();\n+    public static int CXCursor_NamespaceAlias() {\n+        return (int)33L;\n@@ -1710,2 +2753,2 @@\n-    public static @C(\"int\") int CXCursor_UsingDirective() {\n-        return Index_h$constants_0.CXCursor_UsingDirective();\n+    public static int CXCursor_UsingDirective() {\n+        return (int)34L;\n@@ -1713,2 +2756,2 @@\n-    public static @C(\"int\") int CXCursor_UsingDeclaration() {\n-        return Index_h$constants_0.CXCursor_UsingDeclaration();\n+    public static int CXCursor_UsingDeclaration() {\n+        return (int)35L;\n@@ -1716,2 +2759,2 @@\n-    public static @C(\"int\") int CXCursor_TypeAliasDecl() {\n-        return Index_h$constants_0.CXCursor_TypeAliasDecl();\n+    public static int CXCursor_TypeAliasDecl() {\n+        return (int)36L;\n@@ -1719,2 +2762,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCSynthesizeDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCSynthesizeDecl();\n+    public static int CXCursor_ObjCSynthesizeDecl() {\n+        return (int)37L;\n@@ -1722,2 +2765,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCDynamicDecl() {\n-        return Index_h$constants_0.CXCursor_ObjCDynamicDecl();\n+    public static int CXCursor_ObjCDynamicDecl() {\n+        return (int)38L;\n@@ -1725,2 +2768,2 @@\n-    public static @C(\"int\") int CXCursor_CXXAccessSpecifier() {\n-        return Index_h$constants_0.CXCursor_CXXAccessSpecifier();\n+    public static int CXCursor_CXXAccessSpecifier() {\n+        return (int)39L;\n@@ -1728,2 +2771,2 @@\n-    public static @C(\"int\") int CXCursor_FirstDecl() {\n-        return Index_h$constants_0.CXCursor_FirstDecl();\n+    public static int CXCursor_FirstDecl() {\n+        return (int)1L;\n@@ -1731,2 +2774,2 @@\n-    public static @C(\"int\") int CXCursor_LastDecl() {\n-        return Index_h$constants_0.CXCursor_LastDecl();\n+    public static int CXCursor_LastDecl() {\n+        return (int)39L;\n@@ -1734,2 +2777,2 @@\n-    public static @C(\"int\") int CXCursor_FirstRef() {\n-        return Index_h$constants_0.CXCursor_FirstRef();\n+    public static int CXCursor_FirstRef() {\n+        return (int)40L;\n@@ -1737,2 +2780,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCSuperClassRef() {\n-        return Index_h$constants_0.CXCursor_ObjCSuperClassRef();\n+    public static int CXCursor_ObjCSuperClassRef() {\n+        return (int)40L;\n@@ -1740,2 +2783,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCProtocolRef() {\n-        return Index_h$constants_0.CXCursor_ObjCProtocolRef();\n+    public static int CXCursor_ObjCProtocolRef() {\n+        return (int)41L;\n@@ -1743,2 +2786,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCClassRef() {\n-        return Index_h$constants_0.CXCursor_ObjCClassRef();\n+    public static int CXCursor_ObjCClassRef() {\n+        return (int)42L;\n@@ -1746,2 +2789,2 @@\n-    public static @C(\"int\") int CXCursor_TypeRef() {\n-        return Index_h$constants_0.CXCursor_TypeRef();\n+    public static int CXCursor_TypeRef() {\n+        return (int)43L;\n@@ -1749,2 +2792,2 @@\n-    public static @C(\"int\") int CXCursor_CXXBaseSpecifier() {\n-        return Index_h$constants_0.CXCursor_CXXBaseSpecifier();\n+    public static int CXCursor_CXXBaseSpecifier() {\n+        return (int)44L;\n@@ -1752,2 +2795,2 @@\n-    public static @C(\"int\") int CXCursor_TemplateRef() {\n-        return Index_h$constants_0.CXCursor_TemplateRef();\n+    public static int CXCursor_TemplateRef() {\n+        return (int)45L;\n@@ -1755,2 +2798,2 @@\n-    public static @C(\"int\") int CXCursor_NamespaceRef() {\n-        return Index_h$constants_0.CXCursor_NamespaceRef();\n+    public static int CXCursor_NamespaceRef() {\n+        return (int)46L;\n@@ -1758,2 +2801,2 @@\n-    public static @C(\"int\") int CXCursor_MemberRef() {\n-        return Index_h$constants_0.CXCursor_MemberRef();\n+    public static int CXCursor_MemberRef() {\n+        return (int)47L;\n@@ -1761,2 +2804,2 @@\n-    public static @C(\"int\") int CXCursor_LabelRef() {\n-        return Index_h$constants_0.CXCursor_LabelRef();\n+    public static int CXCursor_LabelRef() {\n+        return (int)48L;\n@@ -1764,2 +2807,2 @@\n-    public static @C(\"int\") int CXCursor_OverloadedDeclRef() {\n-        return Index_h$constants_0.CXCursor_OverloadedDeclRef();\n+    public static int CXCursor_OverloadedDeclRef() {\n+        return (int)49L;\n@@ -1767,2 +2810,2 @@\n-    public static @C(\"int\") int CXCursor_VariableRef() {\n-        return Index_h$constants_0.CXCursor_VariableRef();\n+    public static int CXCursor_VariableRef() {\n+        return (int)50L;\n@@ -1770,2 +2813,2 @@\n-    public static @C(\"int\") int CXCursor_LastRef() {\n-        return Index_h$constants_0.CXCursor_LastRef();\n+    public static int CXCursor_LastRef() {\n+        return (int)50L;\n@@ -1773,2 +2816,2 @@\n-    public static @C(\"int\") int CXCursor_FirstInvalid() {\n-        return Index_h$constants_0.CXCursor_FirstInvalid();\n+    public static int CXCursor_FirstInvalid() {\n+        return (int)70L;\n@@ -1776,2 +2819,2 @@\n-    public static @C(\"int\") int CXCursor_InvalidFile() {\n-        return Index_h$constants_0.CXCursor_InvalidFile();\n+    public static int CXCursor_InvalidFile() {\n+        return (int)70L;\n@@ -1779,2 +2822,2 @@\n-    public static @C(\"int\") int CXCursor_NoDeclFound() {\n-        return Index_h$constants_0.CXCursor_NoDeclFound();\n+    public static int CXCursor_NoDeclFound() {\n+        return (int)71L;\n@@ -1782,2 +2825,2 @@\n-    public static @C(\"int\") int CXCursor_NotImplemented() {\n-        return Index_h$constants_0.CXCursor_NotImplemented();\n+    public static int CXCursor_NotImplemented() {\n+        return (int)72L;\n@@ -1785,2 +2828,2 @@\n-    public static @C(\"int\") int CXCursor_InvalidCode() {\n-        return Index_h$constants_0.CXCursor_InvalidCode();\n+    public static int CXCursor_InvalidCode() {\n+        return (int)73L;\n@@ -1788,2 +2831,2 @@\n-    public static @C(\"int\") int CXCursor_LastInvalid() {\n-        return Index_h$constants_0.CXCursor_LastInvalid();\n+    public static int CXCursor_LastInvalid() {\n+        return (int)73L;\n@@ -1791,2 +2834,2 @@\n-    public static @C(\"int\") int CXCursor_FirstExpr() {\n-        return Index_h$constants_0.CXCursor_FirstExpr();\n+    public static int CXCursor_FirstExpr() {\n+        return (int)100L;\n@@ -1794,2 +2837,2 @@\n-    public static @C(\"int\") int CXCursor_UnexposedExpr() {\n-        return Index_h$constants_0.CXCursor_UnexposedExpr();\n+    public static int CXCursor_UnexposedExpr() {\n+        return (int)100L;\n@@ -1797,2 +2840,2 @@\n-    public static @C(\"int\") int CXCursor_DeclRefExpr() {\n-        return Index_h$constants_0.CXCursor_DeclRefExpr();\n+    public static int CXCursor_DeclRefExpr() {\n+        return (int)101L;\n@@ -1800,2 +2843,2 @@\n-    public static @C(\"int\") int CXCursor_MemberRefExpr() {\n-        return Index_h$constants_0.CXCursor_MemberRefExpr();\n+    public static int CXCursor_MemberRefExpr() {\n+        return (int)102L;\n@@ -1803,2 +2846,2 @@\n-    public static @C(\"int\") int CXCursor_CallExpr() {\n-        return Index_h$constants_0.CXCursor_CallExpr();\n+    public static int CXCursor_CallExpr() {\n+        return (int)103L;\n@@ -1806,2 +2849,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCMessageExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCMessageExpr();\n+    public static int CXCursor_ObjCMessageExpr() {\n+        return (int)104L;\n@@ -1809,2 +2852,2 @@\n-    public static @C(\"int\") int CXCursor_BlockExpr() {\n-        return Index_h$constants_0.CXCursor_BlockExpr();\n+    public static int CXCursor_BlockExpr() {\n+        return (int)105L;\n@@ -1812,2 +2855,2 @@\n-    public static @C(\"int\") int CXCursor_IntegerLiteral() {\n-        return Index_h$constants_0.CXCursor_IntegerLiteral();\n+    public static int CXCursor_IntegerLiteral() {\n+        return (int)106L;\n@@ -1815,2 +2858,2 @@\n-    public static @C(\"int\") int CXCursor_FloatingLiteral() {\n-        return Index_h$constants_0.CXCursor_FloatingLiteral();\n+    public static int CXCursor_FloatingLiteral() {\n+        return (int)107L;\n@@ -1818,2 +2861,2 @@\n-    public static @C(\"int\") int CXCursor_ImaginaryLiteral() {\n-        return Index_h$constants_0.CXCursor_ImaginaryLiteral();\n+    public static int CXCursor_ImaginaryLiteral() {\n+        return (int)108L;\n@@ -1821,2 +2864,2 @@\n-    public static @C(\"int\") int CXCursor_StringLiteral() {\n-        return Index_h$constants_0.CXCursor_StringLiteral();\n+    public static int CXCursor_StringLiteral() {\n+        return (int)109L;\n@@ -1824,2 +2867,2 @@\n-    public static @C(\"int\") int CXCursor_CharacterLiteral() {\n-        return Index_h$constants_0.CXCursor_CharacterLiteral();\n+    public static int CXCursor_CharacterLiteral() {\n+        return (int)110L;\n@@ -1827,2 +2870,2 @@\n-    public static @C(\"int\") int CXCursor_ParenExpr() {\n-        return Index_h$constants_0.CXCursor_ParenExpr();\n+    public static int CXCursor_ParenExpr() {\n+        return (int)111L;\n@@ -1830,2 +2873,2 @@\n-    public static @C(\"int\") int CXCursor_UnaryOperator() {\n-        return Index_h$constants_0.CXCursor_UnaryOperator();\n+    public static int CXCursor_UnaryOperator() {\n+        return (int)112L;\n@@ -1833,2 +2876,2 @@\n-    public static @C(\"int\") int CXCursor_ArraySubscriptExpr() {\n-        return Index_h$constants_0.CXCursor_ArraySubscriptExpr();\n+    public static int CXCursor_ArraySubscriptExpr() {\n+        return (int)113L;\n@@ -1836,2 +2879,2 @@\n-    public static @C(\"int\") int CXCursor_BinaryOperator() {\n-        return Index_h$constants_0.CXCursor_BinaryOperator();\n+    public static int CXCursor_BinaryOperator() {\n+        return (int)114L;\n@@ -1839,2 +2882,2 @@\n-    public static @C(\"int\") int CXCursor_CompoundAssignOperator() {\n-        return Index_h$constants_0.CXCursor_CompoundAssignOperator();\n+    public static int CXCursor_CompoundAssignOperator() {\n+        return (int)115L;\n@@ -1842,2 +2885,2 @@\n-    public static @C(\"int\") int CXCursor_ConditionalOperator() {\n-        return Index_h$constants_0.CXCursor_ConditionalOperator();\n+    public static int CXCursor_ConditionalOperator() {\n+        return (int)116L;\n@@ -1845,2 +2888,2 @@\n-    public static @C(\"int\") int CXCursor_CStyleCastExpr() {\n-        return Index_h$constants_0.CXCursor_CStyleCastExpr();\n+    public static int CXCursor_CStyleCastExpr() {\n+        return (int)117L;\n@@ -1848,2 +2891,2 @@\n-    public static @C(\"int\") int CXCursor_CompoundLiteralExpr() {\n-        return Index_h$constants_0.CXCursor_CompoundLiteralExpr();\n+    public static int CXCursor_CompoundLiteralExpr() {\n+        return (int)118L;\n@@ -1851,2 +2894,2 @@\n-    public static @C(\"int\") int CXCursor_InitListExpr() {\n-        return Index_h$constants_0.CXCursor_InitListExpr();\n+    public static int CXCursor_InitListExpr() {\n+        return (int)119L;\n@@ -1854,2 +2897,2 @@\n-    public static @C(\"int\") int CXCursor_AddrLabelExpr() {\n-        return Index_h$constants_0.CXCursor_AddrLabelExpr();\n+    public static int CXCursor_AddrLabelExpr() {\n+        return (int)120L;\n@@ -1857,2 +2900,2 @@\n-    public static @C(\"int\") int CXCursor_StmtExpr() {\n-        return Index_h$constants_0.CXCursor_StmtExpr();\n+    public static int CXCursor_StmtExpr() {\n+        return (int)121L;\n@@ -1860,2 +2903,2 @@\n-    public static @C(\"int\") int CXCursor_GenericSelectionExpr() {\n-        return Index_h$constants_0.CXCursor_GenericSelectionExpr();\n+    public static int CXCursor_GenericSelectionExpr() {\n+        return (int)122L;\n@@ -1863,2 +2906,2 @@\n-    public static @C(\"int\") int CXCursor_GNUNullExpr() {\n-        return Index_h$constants_0.CXCursor_GNUNullExpr();\n+    public static int CXCursor_GNUNullExpr() {\n+        return (int)123L;\n@@ -1866,2 +2909,2 @@\n-    public static @C(\"int\") int CXCursor_CXXStaticCastExpr() {\n-        return Index_h$constants_0.CXCursor_CXXStaticCastExpr();\n+    public static int CXCursor_CXXStaticCastExpr() {\n+        return (int)124L;\n@@ -1869,2 +2912,2 @@\n-    public static @C(\"int\") int CXCursor_CXXDynamicCastExpr() {\n-        return Index_h$constants_0.CXCursor_CXXDynamicCastExpr();\n+    public static int CXCursor_CXXDynamicCastExpr() {\n+        return (int)125L;\n@@ -1872,2 +2915,2 @@\n-    public static @C(\"int\") int CXCursor_CXXReinterpretCastExpr() {\n-        return Index_h$constants_0.CXCursor_CXXReinterpretCastExpr();\n+    public static int CXCursor_CXXReinterpretCastExpr() {\n+        return (int)126L;\n@@ -1875,2 +2918,2 @@\n-    public static @C(\"int\") int CXCursor_CXXConstCastExpr() {\n-        return Index_h$constants_0.CXCursor_CXXConstCastExpr();\n+    public static int CXCursor_CXXConstCastExpr() {\n+        return (int)127L;\n@@ -1878,2 +2921,2 @@\n-    public static @C(\"int\") int CXCursor_CXXFunctionalCastExpr() {\n-        return Index_h$constants_0.CXCursor_CXXFunctionalCastExpr();\n+    public static int CXCursor_CXXFunctionalCastExpr() {\n+        return (int)128L;\n@@ -1881,2 +2924,2 @@\n-    public static @C(\"int\") int CXCursor_CXXTypeidExpr() {\n-        return Index_h$constants_0.CXCursor_CXXTypeidExpr();\n+    public static int CXCursor_CXXTypeidExpr() {\n+        return (int)129L;\n@@ -1884,2 +2927,2 @@\n-    public static @C(\"int\") int CXCursor_CXXBoolLiteralExpr() {\n-        return Index_h$constants_0.CXCursor_CXXBoolLiteralExpr();\n+    public static int CXCursor_CXXBoolLiteralExpr() {\n+        return (int)130L;\n@@ -1887,2 +2930,2 @@\n-    public static @C(\"int\") int CXCursor_CXXNullPtrLiteralExpr() {\n-        return Index_h$constants_0.CXCursor_CXXNullPtrLiteralExpr();\n+    public static int CXCursor_CXXNullPtrLiteralExpr() {\n+        return (int)131L;\n@@ -1890,2 +2933,2 @@\n-    public static @C(\"int\") int CXCursor_CXXThisExpr() {\n-        return Index_h$constants_0.CXCursor_CXXThisExpr();\n+    public static int CXCursor_CXXThisExpr() {\n+        return (int)132L;\n@@ -1893,2 +2936,2 @@\n-    public static @C(\"int\") int CXCursor_CXXThrowExpr() {\n-        return Index_h$constants_0.CXCursor_CXXThrowExpr();\n+    public static int CXCursor_CXXThrowExpr() {\n+        return (int)133L;\n@@ -1896,2 +2939,2 @@\n-    public static @C(\"int\") int CXCursor_CXXNewExpr() {\n-        return Index_h$constants_0.CXCursor_CXXNewExpr();\n+    public static int CXCursor_CXXNewExpr() {\n+        return (int)134L;\n@@ -1899,2 +2942,2 @@\n-    public static @C(\"int\") int CXCursor_CXXDeleteExpr() {\n-        return Index_h$constants_0.CXCursor_CXXDeleteExpr();\n+    public static int CXCursor_CXXDeleteExpr() {\n+        return (int)135L;\n@@ -1902,2 +2945,2 @@\n-    public static @C(\"int\") int CXCursor_UnaryExpr() {\n-        return Index_h$constants_0.CXCursor_UnaryExpr();\n+    public static int CXCursor_UnaryExpr() {\n+        return (int)136L;\n@@ -1905,2 +2948,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCStringLiteral() {\n-        return Index_h$constants_0.CXCursor_ObjCStringLiteral();\n+    public static int CXCursor_ObjCStringLiteral() {\n+        return (int)137L;\n@@ -1908,2 +2951,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCEncodeExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCEncodeExpr();\n+    public static int CXCursor_ObjCEncodeExpr() {\n+        return (int)138L;\n@@ -1911,2 +2954,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCSelectorExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCSelectorExpr();\n+    public static int CXCursor_ObjCSelectorExpr() {\n+        return (int)139L;\n@@ -1914,2 +2957,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCProtocolExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCProtocolExpr();\n+    public static int CXCursor_ObjCProtocolExpr() {\n+        return (int)140L;\n@@ -1917,2 +2960,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCBridgedCastExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCBridgedCastExpr();\n+    public static int CXCursor_ObjCBridgedCastExpr() {\n+        return (int)141L;\n@@ -1920,2 +2963,2 @@\n-    public static @C(\"int\") int CXCursor_PackExpansionExpr() {\n-        return Index_h$constants_0.CXCursor_PackExpansionExpr();\n+    public static int CXCursor_PackExpansionExpr() {\n+        return (int)142L;\n@@ -1923,2 +2966,2 @@\n-    public static @C(\"int\") int CXCursor_SizeOfPackExpr() {\n-        return Index_h$constants_0.CXCursor_SizeOfPackExpr();\n+    public static int CXCursor_SizeOfPackExpr() {\n+        return (int)143L;\n@@ -1926,2 +2969,2 @@\n-    public static @C(\"int\") int CXCursor_LambdaExpr() {\n-        return Index_h$constants_0.CXCursor_LambdaExpr();\n+    public static int CXCursor_LambdaExpr() {\n+        return (int)144L;\n@@ -1929,2 +2972,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCBoolLiteralExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCBoolLiteralExpr();\n+    public static int CXCursor_ObjCBoolLiteralExpr() {\n+        return (int)145L;\n@@ -1932,2 +2975,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCSelfExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCSelfExpr();\n+    public static int CXCursor_ObjCSelfExpr() {\n+        return (int)146L;\n@@ -1935,2 +2978,2 @@\n-    public static @C(\"int\") int CXCursor_OMPArraySectionExpr() {\n-        return Index_h$constants_0.CXCursor_OMPArraySectionExpr();\n+    public static int CXCursor_OMPArraySectionExpr() {\n+        return (int)147L;\n@@ -1938,2 +2981,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCAvailabilityCheckExpr() {\n-        return Index_h$constants_0.CXCursor_ObjCAvailabilityCheckExpr();\n+    public static int CXCursor_ObjCAvailabilityCheckExpr() {\n+        return (int)148L;\n@@ -1941,2 +2984,2 @@\n-    public static @C(\"int\") int CXCursor_FixedPointLiteral() {\n-        return Index_h$constants_0.CXCursor_FixedPointLiteral();\n+    public static int CXCursor_FixedPointLiteral() {\n+        return (int)149L;\n@@ -1944,2 +2987,2 @@\n-    public static @C(\"int\") int CXCursor_LastExpr() {\n-        return Index_h$constants_0.CXCursor_LastExpr();\n+    public static int CXCursor_LastExpr() {\n+        return (int)149L;\n@@ -1947,2 +2990,2 @@\n-    public static @C(\"int\") int CXCursor_FirstStmt() {\n-        return Index_h$constants_0.CXCursor_FirstStmt();\n+    public static int CXCursor_FirstStmt() {\n+        return (int)200L;\n@@ -1950,2 +2993,2 @@\n-    public static @C(\"int\") int CXCursor_UnexposedStmt() {\n-        return Index_h$constants_0.CXCursor_UnexposedStmt();\n+    public static int CXCursor_UnexposedStmt() {\n+        return (int)200L;\n@@ -1953,2 +2996,2 @@\n-    public static @C(\"int\") int CXCursor_LabelStmt() {\n-        return Index_h$constants_0.CXCursor_LabelStmt();\n+    public static int CXCursor_LabelStmt() {\n+        return (int)201L;\n@@ -1956,2 +2999,2 @@\n-    public static @C(\"int\") int CXCursor_CompoundStmt() {\n-        return Index_h$constants_0.CXCursor_CompoundStmt();\n+    public static int CXCursor_CompoundStmt() {\n+        return (int)202L;\n@@ -1959,2 +3002,2 @@\n-    public static @C(\"int\") int CXCursor_CaseStmt() {\n-        return Index_h$constants_0.CXCursor_CaseStmt();\n+    public static int CXCursor_CaseStmt() {\n+        return (int)203L;\n@@ -1962,2 +3005,2 @@\n-    public static @C(\"int\") int CXCursor_DefaultStmt() {\n-        return Index_h$constants_0.CXCursor_DefaultStmt();\n+    public static int CXCursor_DefaultStmt() {\n+        return (int)204L;\n@@ -1965,2 +3008,2 @@\n-    public static @C(\"int\") int CXCursor_IfStmt() {\n-        return Index_h$constants_0.CXCursor_IfStmt();\n+    public static int CXCursor_IfStmt() {\n+        return (int)205L;\n@@ -1968,2 +3011,2 @@\n-    public static @C(\"int\") int CXCursor_SwitchStmt() {\n-        return Index_h$constants_0.CXCursor_SwitchStmt();\n+    public static int CXCursor_SwitchStmt() {\n+        return (int)206L;\n@@ -1971,2 +3014,2 @@\n-    public static @C(\"int\") int CXCursor_WhileStmt() {\n-        return Index_h$constants_0.CXCursor_WhileStmt();\n+    public static int CXCursor_WhileStmt() {\n+        return (int)207L;\n@@ -1974,2 +3017,2 @@\n-    public static @C(\"int\") int CXCursor_DoStmt() {\n-        return Index_h$constants_0.CXCursor_DoStmt();\n+    public static int CXCursor_DoStmt() {\n+        return (int)208L;\n@@ -1977,2 +3020,2 @@\n-    public static @C(\"int\") int CXCursor_ForStmt() {\n-        return Index_h$constants_0.CXCursor_ForStmt();\n+    public static int CXCursor_ForStmt() {\n+        return (int)209L;\n@@ -1980,2 +3023,2 @@\n-    public static @C(\"int\") int CXCursor_GotoStmt() {\n-        return Index_h$constants_0.CXCursor_GotoStmt();\n+    public static int CXCursor_GotoStmt() {\n+        return (int)210L;\n@@ -1983,2 +3026,2 @@\n-    public static @C(\"int\") int CXCursor_IndirectGotoStmt() {\n-        return Index_h$constants_0.CXCursor_IndirectGotoStmt();\n+    public static int CXCursor_IndirectGotoStmt() {\n+        return (int)211L;\n@@ -1986,2 +3029,2 @@\n-    public static @C(\"int\") int CXCursor_ContinueStmt() {\n-        return Index_h$constants_0.CXCursor_ContinueStmt();\n+    public static int CXCursor_ContinueStmt() {\n+        return (int)212L;\n@@ -1989,2 +3032,2 @@\n-    public static @C(\"int\") int CXCursor_BreakStmt() {\n-        return Index_h$constants_0.CXCursor_BreakStmt();\n+    public static int CXCursor_BreakStmt() {\n+        return (int)213L;\n@@ -1992,2 +3035,2 @@\n-    public static @C(\"int\") int CXCursor_ReturnStmt() {\n-        return Index_h$constants_0.CXCursor_ReturnStmt();\n+    public static int CXCursor_ReturnStmt() {\n+        return (int)214L;\n@@ -1995,2 +3038,2 @@\n-    public static @C(\"int\") int CXCursor_GCCAsmStmt() {\n-        return Index_h$constants_0.CXCursor_GCCAsmStmt();\n+    public static int CXCursor_GCCAsmStmt() {\n+        return (int)215L;\n@@ -1998,2 +3041,2 @@\n-    public static @C(\"int\") int CXCursor_AsmStmt() {\n-        return Index_h$constants_0.CXCursor_AsmStmt();\n+    public static int CXCursor_AsmStmt() {\n+        return (int)215L;\n@@ -2001,2 +3044,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCAtTryStmt() {\n-        return Index_h$constants_0.CXCursor_ObjCAtTryStmt();\n+    public static int CXCursor_ObjCAtTryStmt() {\n+        return (int)216L;\n@@ -2004,2 +3047,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCAtCatchStmt() {\n-        return Index_h$constants_0.CXCursor_ObjCAtCatchStmt();\n+    public static int CXCursor_ObjCAtCatchStmt() {\n+        return (int)217L;\n@@ -2007,2 +3050,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCAtFinallyStmt() {\n-        return Index_h$constants_0.CXCursor_ObjCAtFinallyStmt();\n+    public static int CXCursor_ObjCAtFinallyStmt() {\n+        return (int)218L;\n@@ -2010,2 +3053,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCAtThrowStmt() {\n-        return Index_h$constants_0.CXCursor_ObjCAtThrowStmt();\n+    public static int CXCursor_ObjCAtThrowStmt() {\n+        return (int)219L;\n@@ -2013,2 +3056,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCAtSynchronizedStmt() {\n-        return Index_h$constants_0.CXCursor_ObjCAtSynchronizedStmt();\n+    public static int CXCursor_ObjCAtSynchronizedStmt() {\n+        return (int)220L;\n@@ -2016,2 +3059,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCAutoreleasePoolStmt() {\n-        return Index_h$constants_0.CXCursor_ObjCAutoreleasePoolStmt();\n+    public static int CXCursor_ObjCAutoreleasePoolStmt() {\n+        return (int)221L;\n@@ -2019,2 +3062,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCForCollectionStmt() {\n-        return Index_h$constants_0.CXCursor_ObjCForCollectionStmt();\n+    public static int CXCursor_ObjCForCollectionStmt() {\n+        return (int)222L;\n@@ -2022,2 +3065,2 @@\n-    public static @C(\"int\") int CXCursor_CXXCatchStmt() {\n-        return Index_h$constants_0.CXCursor_CXXCatchStmt();\n+    public static int CXCursor_CXXCatchStmt() {\n+        return (int)223L;\n@@ -2025,2 +3068,2 @@\n-    public static @C(\"int\") int CXCursor_CXXTryStmt() {\n-        return Index_h$constants_0.CXCursor_CXXTryStmt();\n+    public static int CXCursor_CXXTryStmt() {\n+        return (int)224L;\n@@ -2028,2 +3071,2 @@\n-    public static @C(\"int\") int CXCursor_CXXForRangeStmt() {\n-        return Index_h$constants_0.CXCursor_CXXForRangeStmt();\n+    public static int CXCursor_CXXForRangeStmt() {\n+        return (int)225L;\n@@ -2031,2 +3074,2 @@\n-    public static @C(\"int\") int CXCursor_SEHTryStmt() {\n-        return Index_h$constants_0.CXCursor_SEHTryStmt();\n+    public static int CXCursor_SEHTryStmt() {\n+        return (int)226L;\n@@ -2034,2 +3077,2 @@\n-    public static @C(\"int\") int CXCursor_SEHExceptStmt() {\n-        return Index_h$constants_0.CXCursor_SEHExceptStmt();\n+    public static int CXCursor_SEHExceptStmt() {\n+        return (int)227L;\n@@ -2037,2 +3080,2 @@\n-    public static @C(\"int\") int CXCursor_SEHFinallyStmt() {\n-        return Index_h$constants_0.CXCursor_SEHFinallyStmt();\n+    public static int CXCursor_SEHFinallyStmt() {\n+        return (int)228L;\n@@ -2040,2 +3083,2 @@\n-    public static @C(\"int\") int CXCursor_MSAsmStmt() {\n-        return Index_h$constants_0.CXCursor_MSAsmStmt();\n+    public static int CXCursor_MSAsmStmt() {\n+        return (int)229L;\n@@ -2043,2 +3086,2 @@\n-    public static @C(\"int\") int CXCursor_NullStmt() {\n-        return Index_h$constants_0.CXCursor_NullStmt();\n+    public static int CXCursor_NullStmt() {\n+        return (int)230L;\n@@ -2046,2 +3089,2 @@\n-    public static @C(\"int\") int CXCursor_DeclStmt() {\n-        return Index_h$constants_0.CXCursor_DeclStmt();\n+    public static int CXCursor_DeclStmt() {\n+        return (int)231L;\n@@ -2049,2 +3092,2 @@\n-    public static @C(\"int\") int CXCursor_OMPParallelDirective() {\n-        return Index_h$constants_0.CXCursor_OMPParallelDirective();\n+    public static int CXCursor_OMPParallelDirective() {\n+        return (int)232L;\n@@ -2052,2 +3095,2 @@\n-    public static @C(\"int\") int CXCursor_OMPSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPSimdDirective();\n+    public static int CXCursor_OMPSimdDirective() {\n+        return (int)233L;\n@@ -2055,2 +3098,2 @@\n-    public static @C(\"int\") int CXCursor_OMPForDirective() {\n-        return Index_h$constants_0.CXCursor_OMPForDirective();\n+    public static int CXCursor_OMPForDirective() {\n+        return (int)234L;\n@@ -2058,2 +3101,2 @@\n-    public static @C(\"int\") int CXCursor_OMPSectionsDirective() {\n-        return Index_h$constants_0.CXCursor_OMPSectionsDirective();\n+    public static int CXCursor_OMPSectionsDirective() {\n+        return (int)235L;\n@@ -2061,2 +3104,2 @@\n-    public static @C(\"int\") int CXCursor_OMPSectionDirective() {\n-        return Index_h$constants_0.CXCursor_OMPSectionDirective();\n+    public static int CXCursor_OMPSectionDirective() {\n+        return (int)236L;\n@@ -2064,2 +3107,2 @@\n-    public static @C(\"int\") int CXCursor_OMPSingleDirective() {\n-        return Index_h$constants_0.CXCursor_OMPSingleDirective();\n+    public static int CXCursor_OMPSingleDirective() {\n+        return (int)237L;\n@@ -2067,2 +3110,2 @@\n-    public static @C(\"int\") int CXCursor_OMPParallelForDirective() {\n-        return Index_h$constants_0.CXCursor_OMPParallelForDirective();\n+    public static int CXCursor_OMPParallelForDirective() {\n+        return (int)238L;\n@@ -2070,2 +3113,2 @@\n-    public static @C(\"int\") int CXCursor_OMPParallelSectionsDirective() {\n-        return Index_h$constants_0.CXCursor_OMPParallelSectionsDirective();\n+    public static int CXCursor_OMPParallelSectionsDirective() {\n+        return (int)239L;\n@@ -2073,2 +3116,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTaskDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTaskDirective();\n+    public static int CXCursor_OMPTaskDirective() {\n+        return (int)240L;\n@@ -2076,2 +3119,2 @@\n-    public static @C(\"int\") int CXCursor_OMPMasterDirective() {\n-        return Index_h$constants_0.CXCursor_OMPMasterDirective();\n+    public static int CXCursor_OMPMasterDirective() {\n+        return (int)241L;\n@@ -2079,2 +3122,2 @@\n-    public static @C(\"int\") int CXCursor_OMPCriticalDirective() {\n-        return Index_h$constants_0.CXCursor_OMPCriticalDirective();\n+    public static int CXCursor_OMPCriticalDirective() {\n+        return (int)242L;\n@@ -2082,2 +3125,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTaskyieldDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTaskyieldDirective();\n+    public static int CXCursor_OMPTaskyieldDirective() {\n+        return (int)243L;\n@@ -2085,2 +3128,2 @@\n-    public static @C(\"int\") int CXCursor_OMPBarrierDirective() {\n-        return Index_h$constants_0.CXCursor_OMPBarrierDirective();\n+    public static int CXCursor_OMPBarrierDirective() {\n+        return (int)244L;\n@@ -2088,2 +3131,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTaskwaitDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTaskwaitDirective();\n+    public static int CXCursor_OMPTaskwaitDirective() {\n+        return (int)245L;\n@@ -2091,2 +3134,2 @@\n-    public static @C(\"int\") int CXCursor_OMPFlushDirective() {\n-        return Index_h$constants_0.CXCursor_OMPFlushDirective();\n+    public static int CXCursor_OMPFlushDirective() {\n+        return (int)246L;\n@@ -2094,2 +3137,2 @@\n-    public static @C(\"int\") int CXCursor_SEHLeaveStmt() {\n-        return Index_h$constants_0.CXCursor_SEHLeaveStmt();\n+    public static int CXCursor_SEHLeaveStmt() {\n+        return (int)247L;\n@@ -2097,2 +3140,2 @@\n-    public static @C(\"int\") int CXCursor_OMPOrderedDirective() {\n-        return Index_h$constants_0.CXCursor_OMPOrderedDirective();\n+    public static int CXCursor_OMPOrderedDirective() {\n+        return (int)248L;\n@@ -2100,2 +3143,2 @@\n-    public static @C(\"int\") int CXCursor_OMPAtomicDirective() {\n-        return Index_h$constants_0.CXCursor_OMPAtomicDirective();\n+    public static int CXCursor_OMPAtomicDirective() {\n+        return (int)249L;\n@@ -2103,2 +3146,2 @@\n-    public static @C(\"int\") int CXCursor_OMPForSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPForSimdDirective();\n+    public static int CXCursor_OMPForSimdDirective() {\n+        return (int)250L;\n@@ -2106,2 +3149,2 @@\n-    public static @C(\"int\") int CXCursor_OMPParallelForSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPParallelForSimdDirective();\n+    public static int CXCursor_OMPParallelForSimdDirective() {\n+        return (int)251L;\n@@ -2109,2 +3152,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetDirective();\n+    public static int CXCursor_OMPTargetDirective() {\n+        return (int)252L;\n@@ -2112,2 +3155,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTeamsDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTeamsDirective();\n+    public static int CXCursor_OMPTeamsDirective() {\n+        return (int)253L;\n@@ -2115,2 +3158,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTaskgroupDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTaskgroupDirective();\n+    public static int CXCursor_OMPTaskgroupDirective() {\n+        return (int)254L;\n@@ -2118,2 +3161,2 @@\n-    public static @C(\"int\") int CXCursor_OMPCancellationPointDirective() {\n-        return Index_h$constants_0.CXCursor_OMPCancellationPointDirective();\n+    public static int CXCursor_OMPCancellationPointDirective() {\n+        return (int)255L;\n@@ -2121,2 +3164,2 @@\n-    public static @C(\"int\") int CXCursor_OMPCancelDirective() {\n-        return Index_h$constants_0.CXCursor_OMPCancelDirective();\n+    public static int CXCursor_OMPCancelDirective() {\n+        return (int)256L;\n@@ -2124,2 +3167,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetDataDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetDataDirective();\n+    public static int CXCursor_OMPTargetDataDirective() {\n+        return (int)257L;\n@@ -2127,2 +3170,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTaskLoopDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTaskLoopDirective();\n+    public static int CXCursor_OMPTaskLoopDirective() {\n+        return (int)258L;\n@@ -2130,2 +3173,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTaskLoopSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTaskLoopSimdDirective();\n+    public static int CXCursor_OMPTaskLoopSimdDirective() {\n+        return (int)259L;\n@@ -2133,2 +3176,2 @@\n-    public static @C(\"int\") int CXCursor_OMPDistributeDirective() {\n-        return Index_h$constants_0.CXCursor_OMPDistributeDirective();\n+    public static int CXCursor_OMPDistributeDirective() {\n+        return (int)260L;\n@@ -2136,2 +3179,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetEnterDataDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetEnterDataDirective();\n+    public static int CXCursor_OMPTargetEnterDataDirective() {\n+        return (int)261L;\n@@ -2139,2 +3182,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetExitDataDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetExitDataDirective();\n+    public static int CXCursor_OMPTargetExitDataDirective() {\n+        return (int)262L;\n@@ -2142,2 +3185,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetParallelDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetParallelDirective();\n+    public static int CXCursor_OMPTargetParallelDirective() {\n+        return (int)263L;\n@@ -2145,2 +3188,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetParallelForDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetParallelForDirective();\n+    public static int CXCursor_OMPTargetParallelForDirective() {\n+        return (int)264L;\n@@ -2148,2 +3191,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetUpdateDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetUpdateDirective();\n+    public static int CXCursor_OMPTargetUpdateDirective() {\n+        return (int)265L;\n@@ -2151,2 +3194,2 @@\n-    public static @C(\"int\") int CXCursor_OMPDistributeParallelForDirective() {\n-        return Index_h$constants_0.CXCursor_OMPDistributeParallelForDirective();\n+    public static int CXCursor_OMPDistributeParallelForDirective() {\n+        return (int)266L;\n@@ -2154,2 +3197,2 @@\n-    public static @C(\"int\") int CXCursor_OMPDistributeParallelForSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPDistributeParallelForSimdDirective();\n+    public static int CXCursor_OMPDistributeParallelForSimdDirective() {\n+        return (int)267L;\n@@ -2157,2 +3200,2 @@\n-    public static @C(\"int\") int CXCursor_OMPDistributeSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPDistributeSimdDirective();\n+    public static int CXCursor_OMPDistributeSimdDirective() {\n+        return (int)268L;\n@@ -2160,2 +3203,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetParallelForSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetParallelForSimdDirective();\n+    public static int CXCursor_OMPTargetParallelForSimdDirective() {\n+        return (int)269L;\n@@ -2163,2 +3206,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetSimdDirective();\n+    public static int CXCursor_OMPTargetSimdDirective() {\n+        return (int)270L;\n@@ -2166,2 +3209,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTeamsDistributeDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTeamsDistributeDirective();\n+    public static int CXCursor_OMPTeamsDistributeDirective() {\n+        return (int)271L;\n@@ -2169,2 +3212,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTeamsDistributeSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTeamsDistributeSimdDirective();\n+    public static int CXCursor_OMPTeamsDistributeSimdDirective() {\n+        return (int)272L;\n@@ -2172,2 +3215,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTeamsDistributeParallelForSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTeamsDistributeParallelForSimdDirective();\n+    public static int CXCursor_OMPTeamsDistributeParallelForSimdDirective() {\n+        return (int)273L;\n@@ -2175,2 +3218,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTeamsDistributeParallelForDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTeamsDistributeParallelForDirective();\n+    public static int CXCursor_OMPTeamsDistributeParallelForDirective() {\n+        return (int)274L;\n@@ -2178,2 +3221,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetTeamsDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetTeamsDirective();\n+    public static int CXCursor_OMPTargetTeamsDirective() {\n+        return (int)275L;\n@@ -2181,2 +3224,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetTeamsDistributeDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeDirective();\n+    public static int CXCursor_OMPTargetTeamsDistributeDirective() {\n+        return (int)276L;\n@@ -2184,2 +3227,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetTeamsDistributeParallelForDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeParallelForDirective();\n+    public static int CXCursor_OMPTargetTeamsDistributeParallelForDirective() {\n+        return (int)277L;\n@@ -2187,2 +3230,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective();\n+    public static int CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective() {\n+        return (int)278L;\n@@ -2190,2 +3233,2 @@\n-    public static @C(\"int\") int CXCursor_OMPTargetTeamsDistributeSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPTargetTeamsDistributeSimdDirective();\n+    public static int CXCursor_OMPTargetTeamsDistributeSimdDirective() {\n+        return (int)279L;\n@@ -2193,2 +3236,2 @@\n-    public static @C(\"int\") int CXCursor_BuiltinBitCastExpr() {\n-        return Index_h$constants_0.CXCursor_BuiltinBitCastExpr();\n+    public static int CXCursor_BuiltinBitCastExpr() {\n+        return (int)280L;\n@@ -2196,2 +3239,2 @@\n-    public static @C(\"int\") int CXCursor_OMPMasterTaskLoopDirective() {\n-        return Index_h$constants_0.CXCursor_OMPMasterTaskLoopDirective();\n+    public static int CXCursor_OMPMasterTaskLoopDirective() {\n+        return (int)281L;\n@@ -2199,2 +3242,2 @@\n-    public static @C(\"int\") int CXCursor_OMPParallelMasterTaskLoopDirective() {\n-        return Index_h$constants_0.CXCursor_OMPParallelMasterTaskLoopDirective();\n+    public static int CXCursor_OMPParallelMasterTaskLoopDirective() {\n+        return (int)282L;\n@@ -2202,2 +3245,2 @@\n-    public static @C(\"int\") int CXCursor_OMPMasterTaskLoopSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPMasterTaskLoopSimdDirective();\n+    public static int CXCursor_OMPMasterTaskLoopSimdDirective() {\n+        return (int)283L;\n@@ -2205,2 +3248,2 @@\n-    public static @C(\"int\") int CXCursor_OMPParallelMasterTaskLoopSimdDirective() {\n-        return Index_h$constants_0.CXCursor_OMPParallelMasterTaskLoopSimdDirective();\n+    public static int CXCursor_OMPParallelMasterTaskLoopSimdDirective() {\n+        return (int)284L;\n@@ -2208,2 +3251,2 @@\n-    public static @C(\"int\") int CXCursor_LastStmt() {\n-        return Index_h$constants_0.CXCursor_LastStmt();\n+    public static int CXCursor_LastStmt() {\n+        return (int)284L;\n@@ -2211,2 +3254,2 @@\n-    public static @C(\"int\") int CXCursor_TranslationUnit() {\n-        return Index_h$constants_0.CXCursor_TranslationUnit();\n+    public static int CXCursor_TranslationUnit() {\n+        return (int)300L;\n@@ -2214,2 +3257,2 @@\n-    public static @C(\"int\") int CXCursor_FirstAttr() {\n-        return Index_h$constants_0.CXCursor_FirstAttr();\n+    public static int CXCursor_FirstAttr() {\n+        return (int)400L;\n@@ -2217,2 +3260,2 @@\n-    public static @C(\"int\") int CXCursor_UnexposedAttr() {\n-        return Index_h$constants_0.CXCursor_UnexposedAttr();\n+    public static int CXCursor_UnexposedAttr() {\n+        return (int)400L;\n@@ -2220,2 +3263,2 @@\n-    public static @C(\"int\") int CXCursor_IBActionAttr() {\n-        return Index_h$constants_0.CXCursor_IBActionAttr();\n+    public static int CXCursor_IBActionAttr() {\n+        return (int)401L;\n@@ -2223,2 +3266,2 @@\n-    public static @C(\"int\") int CXCursor_IBOutletAttr() {\n-        return Index_h$constants_0.CXCursor_IBOutletAttr();\n+    public static int CXCursor_IBOutletAttr() {\n+        return (int)402L;\n@@ -2226,2 +3269,2 @@\n-    public static @C(\"int\") int CXCursor_IBOutletCollectionAttr() {\n-        return Index_h$constants_0.CXCursor_IBOutletCollectionAttr();\n+    public static int CXCursor_IBOutletCollectionAttr() {\n+        return (int)403L;\n@@ -2229,2 +3272,2 @@\n-    public static @C(\"int\") int CXCursor_CXXFinalAttr() {\n-        return Index_h$constants_0.CXCursor_CXXFinalAttr();\n+    public static int CXCursor_CXXFinalAttr() {\n+        return (int)404L;\n@@ -2232,2 +3275,2 @@\n-    public static @C(\"int\") int CXCursor_CXXOverrideAttr() {\n-        return Index_h$constants_0.CXCursor_CXXOverrideAttr();\n+    public static int CXCursor_CXXOverrideAttr() {\n+        return (int)405L;\n@@ -2235,2 +3278,2 @@\n-    public static @C(\"int\") int CXCursor_AnnotateAttr() {\n-        return Index_h$constants_0.CXCursor_AnnotateAttr();\n+    public static int CXCursor_AnnotateAttr() {\n+        return (int)406L;\n@@ -2238,2 +3281,2 @@\n-    public static @C(\"int\") int CXCursor_AsmLabelAttr() {\n-        return Index_h$constants_0.CXCursor_AsmLabelAttr();\n+    public static int CXCursor_AsmLabelAttr() {\n+        return (int)407L;\n@@ -2241,2 +3284,2 @@\n-    public static @C(\"int\") int CXCursor_PackedAttr() {\n-        return Index_h$constants_0.CXCursor_PackedAttr();\n+    public static int CXCursor_PackedAttr() {\n+        return (int)408L;\n@@ -2244,2 +3287,2 @@\n-    public static @C(\"int\") int CXCursor_PureAttr() {\n-        return Index_h$constants_0.CXCursor_PureAttr();\n+    public static int CXCursor_PureAttr() {\n+        return (int)409L;\n@@ -2247,2 +3290,2 @@\n-    public static @C(\"int\") int CXCursor_ConstAttr() {\n-        return Index_h$constants_0.CXCursor_ConstAttr();\n+    public static int CXCursor_ConstAttr() {\n+        return (int)410L;\n@@ -2250,2 +3293,2 @@\n-    public static @C(\"int\") int CXCursor_NoDuplicateAttr() {\n-        return Index_h$constants_0.CXCursor_NoDuplicateAttr();\n+    public static int CXCursor_NoDuplicateAttr() {\n+        return (int)411L;\n@@ -2253,2 +3296,2 @@\n-    public static @C(\"int\") int CXCursor_CUDAConstantAttr() {\n-        return Index_h$constants_0.CXCursor_CUDAConstantAttr();\n+    public static int CXCursor_CUDAConstantAttr() {\n+        return (int)412L;\n@@ -2256,2 +3299,2 @@\n-    public static @C(\"int\") int CXCursor_CUDADeviceAttr() {\n-        return Index_h$constants_0.CXCursor_CUDADeviceAttr();\n+    public static int CXCursor_CUDADeviceAttr() {\n+        return (int)413L;\n@@ -2259,2 +3302,2 @@\n-    public static @C(\"int\") int CXCursor_CUDAGlobalAttr() {\n-        return Index_h$constants_0.CXCursor_CUDAGlobalAttr();\n+    public static int CXCursor_CUDAGlobalAttr() {\n+        return (int)414L;\n@@ -2262,2 +3305,2 @@\n-    public static @C(\"int\") int CXCursor_CUDAHostAttr() {\n-        return Index_h$constants_0.CXCursor_CUDAHostAttr();\n+    public static int CXCursor_CUDAHostAttr() {\n+        return (int)415L;\n@@ -2265,2 +3308,2 @@\n-    public static @C(\"int\") int CXCursor_CUDASharedAttr() {\n-        return Index_h$constants_0.CXCursor_CUDASharedAttr();\n+    public static int CXCursor_CUDASharedAttr() {\n+        return (int)416L;\n@@ -2268,2 +3311,2 @@\n-    public static @C(\"int\") int CXCursor_VisibilityAttr() {\n-        return Index_h$constants_0.CXCursor_VisibilityAttr();\n+    public static int CXCursor_VisibilityAttr() {\n+        return (int)417L;\n@@ -2271,2 +3314,2 @@\n-    public static @C(\"int\") int CXCursor_DLLExport() {\n-        return Index_h$constants_0.CXCursor_DLLExport();\n+    public static int CXCursor_DLLExport() {\n+        return (int)418L;\n@@ -2274,2 +3317,2 @@\n-    public static @C(\"int\") int CXCursor_DLLImport() {\n-        return Index_h$constants_0.CXCursor_DLLImport();\n+    public static int CXCursor_DLLImport() {\n+        return (int)419L;\n@@ -2277,2 +3320,2 @@\n-    public static @C(\"int\") int CXCursor_NSReturnsRetained() {\n-        return Index_h$constants_0.CXCursor_NSReturnsRetained();\n+    public static int CXCursor_NSReturnsRetained() {\n+        return (int)420L;\n@@ -2280,2 +3323,2 @@\n-    public static @C(\"int\") int CXCursor_NSReturnsNotRetained() {\n-        return Index_h$constants_0.CXCursor_NSReturnsNotRetained();\n+    public static int CXCursor_NSReturnsNotRetained() {\n+        return (int)421L;\n@@ -2283,2 +3326,2 @@\n-    public static @C(\"int\") int CXCursor_NSReturnsAutoreleased() {\n-        return Index_h$constants_0.CXCursor_NSReturnsAutoreleased();\n+    public static int CXCursor_NSReturnsAutoreleased() {\n+        return (int)422L;\n@@ -2286,2 +3329,2 @@\n-    public static @C(\"int\") int CXCursor_NSConsumesSelf() {\n-        return Index_h$constants_0.CXCursor_NSConsumesSelf();\n+    public static int CXCursor_NSConsumesSelf() {\n+        return (int)423L;\n@@ -2289,2 +3332,2 @@\n-    public static @C(\"int\") int CXCursor_NSConsumed() {\n-        return Index_h$constants_0.CXCursor_NSConsumed();\n+    public static int CXCursor_NSConsumed() {\n+        return (int)424L;\n@@ -2292,2 +3335,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCException() {\n-        return Index_h$constants_0.CXCursor_ObjCException();\n+    public static int CXCursor_ObjCException() {\n+        return (int)425L;\n@@ -2295,2 +3338,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCNSObject() {\n-        return Index_h$constants_0.CXCursor_ObjCNSObject();\n+    public static int CXCursor_ObjCNSObject() {\n+        return (int)426L;\n@@ -2298,2 +3341,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCIndependentClass() {\n-        return Index_h$constants_0.CXCursor_ObjCIndependentClass();\n+    public static int CXCursor_ObjCIndependentClass() {\n+        return (int)427L;\n@@ -2301,2 +3344,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCPreciseLifetime() {\n-        return Index_h$constants_0.CXCursor_ObjCPreciseLifetime();\n+    public static int CXCursor_ObjCPreciseLifetime() {\n+        return (int)428L;\n@@ -2304,2 +3347,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCReturnsInnerPointer() {\n-        return Index_h$constants_0.CXCursor_ObjCReturnsInnerPointer();\n+    public static int CXCursor_ObjCReturnsInnerPointer() {\n+        return (int)429L;\n@@ -2307,2 +3350,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCRequiresSuper() {\n-        return Index_h$constants_0.CXCursor_ObjCRequiresSuper();\n+    public static int CXCursor_ObjCRequiresSuper() {\n+        return (int)430L;\n@@ -2310,2 +3353,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCRootClass() {\n-        return Index_h$constants_0.CXCursor_ObjCRootClass();\n+    public static int CXCursor_ObjCRootClass() {\n+        return (int)431L;\n@@ -2313,2 +3356,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCSubclassingRestricted() {\n-        return Index_h$constants_0.CXCursor_ObjCSubclassingRestricted();\n+    public static int CXCursor_ObjCSubclassingRestricted() {\n+        return (int)432L;\n@@ -2316,2 +3359,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCExplicitProtocolImpl() {\n-        return Index_h$constants_0.CXCursor_ObjCExplicitProtocolImpl();\n+    public static int CXCursor_ObjCExplicitProtocolImpl() {\n+        return (int)433L;\n@@ -2319,2 +3362,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCDesignatedInitializer() {\n-        return Index_h$constants_0.CXCursor_ObjCDesignatedInitializer();\n+    public static int CXCursor_ObjCDesignatedInitializer() {\n+        return (int)434L;\n@@ -2322,2 +3365,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCRuntimeVisible() {\n-        return Index_h$constants_0.CXCursor_ObjCRuntimeVisible();\n+    public static int CXCursor_ObjCRuntimeVisible() {\n+        return (int)435L;\n@@ -2325,2 +3368,2 @@\n-    public static @C(\"int\") int CXCursor_ObjCBoxable() {\n-        return Index_h$constants_0.CXCursor_ObjCBoxable();\n+    public static int CXCursor_ObjCBoxable() {\n+        return (int)436L;\n@@ -2328,2 +3371,2 @@\n-    public static @C(\"int\") int CXCursor_FlagEnum() {\n-        return Index_h$constants_0.CXCursor_FlagEnum();\n+    public static int CXCursor_FlagEnum() {\n+        return (int)437L;\n@@ -2331,2 +3374,2 @@\n-    public static @C(\"int\") int CXCursor_ConvergentAttr() {\n-        return Index_h$constants_0.CXCursor_ConvergentAttr();\n+    public static int CXCursor_ConvergentAttr() {\n+        return (int)438L;\n@@ -2334,2 +3377,2 @@\n-    public static @C(\"int\") int CXCursor_WarnUnusedAttr() {\n-        return Index_h$constants_0.CXCursor_WarnUnusedAttr();\n+    public static int CXCursor_WarnUnusedAttr() {\n+        return (int)439L;\n@@ -2337,2 +3380,2 @@\n-    public static @C(\"int\") int CXCursor_WarnUnusedResultAttr() {\n-        return Index_h$constants_0.CXCursor_WarnUnusedResultAttr();\n+    public static int CXCursor_WarnUnusedResultAttr() {\n+        return (int)440L;\n@@ -2340,2 +3383,2 @@\n-    public static @C(\"int\") int CXCursor_AlignedAttr() {\n-        return Index_h$constants_0.CXCursor_AlignedAttr();\n+    public static int CXCursor_AlignedAttr() {\n+        return (int)441L;\n@@ -2343,2 +3386,2 @@\n-    public static @C(\"int\") int CXCursor_LastAttr() {\n-        return Index_h$constants_0.CXCursor_LastAttr();\n+    public static int CXCursor_LastAttr() {\n+        return (int)441L;\n@@ -2346,2 +3389,2 @@\n-    public static @C(\"int\") int CXCursor_PreprocessingDirective() {\n-        return Index_h$constants_0.CXCursor_PreprocessingDirective();\n+    public static int CXCursor_PreprocessingDirective() {\n+        return (int)500L;\n@@ -2349,2 +3392,2 @@\n-    public static @C(\"int\") int CXCursor_MacroDefinition() {\n-        return Index_h$constants_0.CXCursor_MacroDefinition();\n+    public static int CXCursor_MacroDefinition() {\n+        return (int)501L;\n@@ -2352,2 +3395,2 @@\n-    public static @C(\"int\") int CXCursor_MacroExpansion() {\n-        return Index_h$constants_0.CXCursor_MacroExpansion();\n+    public static int CXCursor_MacroExpansion() {\n+        return (int)502L;\n@@ -2355,2 +3398,2 @@\n-    public static @C(\"int\") int CXCursor_MacroInstantiation() {\n-        return Index_h$constants_0.CXCursor_MacroInstantiation();\n+    public static int CXCursor_MacroInstantiation() {\n+        return (int)502L;\n@@ -2358,2 +3401,2 @@\n-    public static @C(\"int\") int CXCursor_InclusionDirective() {\n-        return Index_h$constants_0.CXCursor_InclusionDirective();\n+    public static int CXCursor_InclusionDirective() {\n+        return (int)503L;\n@@ -2361,2 +3404,2 @@\n-    public static @C(\"int\") int CXCursor_FirstPreprocessing() {\n-        return Index_h$constants_0.CXCursor_FirstPreprocessing();\n+    public static int CXCursor_FirstPreprocessing() {\n+        return (int)500L;\n@@ -2364,2 +3407,2 @@\n-    public static @C(\"int\") int CXCursor_LastPreprocessing() {\n-        return Index_h$constants_0.CXCursor_LastPreprocessing();\n+    public static int CXCursor_LastPreprocessing() {\n+        return (int)503L;\n@@ -2367,2 +3410,2 @@\n-    public static @C(\"int\") int CXCursor_ModuleImportDecl() {\n-        return Index_h$constants_0.CXCursor_ModuleImportDecl();\n+    public static int CXCursor_ModuleImportDecl() {\n+        return (int)600L;\n@@ -2370,2 +3413,2 @@\n-    public static @C(\"int\") int CXCursor_TypeAliasTemplateDecl() {\n-        return Index_h$constants_0.CXCursor_TypeAliasTemplateDecl();\n+    public static int CXCursor_TypeAliasTemplateDecl() {\n+        return (int)601L;\n@@ -2373,2 +3416,2 @@\n-    public static @C(\"int\") int CXCursor_StaticAssert() {\n-        return Index_h$constants_0.CXCursor_StaticAssert();\n+    public static int CXCursor_StaticAssert() {\n+        return (int)602L;\n@@ -2376,2 +3419,2 @@\n-    public static @C(\"int\") int CXCursor_FriendDecl() {\n-        return Index_h$constants_0.CXCursor_FriendDecl();\n+    public static int CXCursor_FriendDecl() {\n+        return (int)603L;\n@@ -2379,2 +3422,2 @@\n-    public static @C(\"int\") int CXCursor_FirstExtraDecl() {\n-        return Index_h$constants_0.CXCursor_FirstExtraDecl();\n+    public static int CXCursor_FirstExtraDecl() {\n+        return (int)600L;\n@@ -2382,2 +3425,2 @@\n-    public static @C(\"int\") int CXCursor_LastExtraDecl() {\n-        return Index_h$constants_0.CXCursor_LastExtraDecl();\n+    public static int CXCursor_LastExtraDecl() {\n+        return (int)603L;\n@@ -2385,2 +3428,2 @@\n-    public static @C(\"int\") int CXCursor_OverloadCandidate() {\n-        return Index_h$constants_0.CXCursor_OverloadCandidate();\n+    public static int CXCursor_OverloadCandidate() {\n+        return (int)700L;\n@@ -2388,2 +3431,2 @@\n-    public static @C(\"int\") int CXTSK_Undeclared() {\n-        return Index_h$constants_0.CXTSK_Undeclared();\n+    public static int CXTSK_Undeclared() {\n+        return (int)0L;\n@@ -2391,2 +3434,2 @@\n-    public static @C(\"int\") int CXTSK_ImplicitInstantiation() {\n-        return Index_h$constants_0.CXTSK_ImplicitInstantiation();\n+    public static int CXTSK_ImplicitInstantiation() {\n+        return (int)1L;\n@@ -2394,2 +3437,2 @@\n-    public static @C(\"int\") int CXTSK_ExplicitSpecialization() {\n-        return Index_h$constants_0.CXTSK_ExplicitSpecialization();\n+    public static int CXTSK_ExplicitSpecialization() {\n+        return (int)2L;\n@@ -2397,2 +3440,2 @@\n-    public static @C(\"int\") int CXTSK_ExplicitInstantiationDeclaration() {\n-        return Index_h$constants_0.CXTSK_ExplicitInstantiationDeclaration();\n+    public static int CXTSK_ExplicitInstantiationDeclaration() {\n+        return (int)3L;\n@@ -2400,2 +3443,2 @@\n-    public static @C(\"int\") int CXTSK_ExplicitInstantiationDefinition() {\n-        return Index_h$constants_0.CXTSK_ExplicitInstantiationDefinition();\n+    public static int CXTSK_ExplicitInstantiationDefinition() {\n+        return (int)4L;\n@@ -2405,1 +3448,5 @@\n-        private CXCursor() {}\n+        static final MemoryLayout CXCursor$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        );\n@@ -2407,1 +3454,1 @@\n-            return Index_h$constants_0.CXCursor$struct$LAYOUT();\n+            return CXCursor.CXCursor$struct$LAYOUT;\n@@ -2409,0 +3456,1 @@\n+        static final VarHandle kind$VH = CXCursor$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n@@ -2410,1 +3458,1 @@\n-            return Index_h$constants_0.CXCursor$kind$VH();\n+            return CXCursor.kind$VH;\n@@ -2412,2 +3460,2 @@\n-        public static  @C(\"enum CXCursorKind\") int kind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXCursor$kind$VH().get(seg);\n+        public static int kind$get(MemorySegment seg) {\n+            return (int)CXCursor.kind$VH.get(seg);\n@@ -2415,2 +3463,2 @@\n-        public static  @C(\"enum CXCursorKind\") int kind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXCursor$kind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void kind$set( MemorySegment seg, int x) {\n+            CXCursor.kind$VH.set(seg, x);\n@@ -2418,2 +3466,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, @C(\"enum CXCursorKind\") int x) {\n-            Index_h$constants_0.CXCursor$kind$VH().set(seg, x);\n+        public static int kind$get(MemorySegment seg, long index) {\n+            return (int)CXCursor.kind$VH.get(seg.asSlice(index*sizeof()));\n@@ -2421,2 +3469,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"enum CXCursorKind\") int x) {\n-            Index_h$constants_0.CXCursor$kind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void kind$set(MemorySegment seg, long index, int x) {\n+            CXCursor.kind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -2424,0 +3472,1 @@\n+        static final VarHandle xdata$VH = CXCursor$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"xdata\"));\n@@ -2425,1 +3474,1 @@\n-            return Index_h$constants_0.CXCursor$xdata$VH();\n+            return CXCursor.xdata$VH;\n@@ -2427,2 +3476,2 @@\n-        public static  @C(\"int\") int xdata$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXCursor$xdata$VH().get(seg);\n+        public static int xdata$get(MemorySegment seg) {\n+            return (int)CXCursor.xdata$VH.get(seg);\n@@ -2430,2 +3479,2 @@\n-        public static  @C(\"int\") int xdata$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXCursor$xdata$VH().get(seg.asSlice(index*sizeof()));\n+        public static void xdata$set( MemorySegment seg, int x) {\n+            CXCursor.xdata$VH.set(seg, x);\n@@ -2433,2 +3482,2 @@\n-        public static void xdata$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_0.CXCursor$xdata$VH().set(seg, x);\n+        public static int xdata$get(MemorySegment seg, long index) {\n+            return (int)CXCursor.xdata$VH.get(seg.asSlice(index*sizeof()));\n@@ -2436,2 +3485,2 @@\n-        public static void xdata$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_0.CXCursor$xdata$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void xdata$set(MemorySegment seg, long index, int x) {\n+            CXCursor.xdata$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -2443,3 +3492,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -2447,1 +3496,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -2450,1 +3499,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -2453,1 +3502,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -2456,1 +3505,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -2459,2 +3508,2 @@\n-    public static  MethodHandle clang_getNullCursor$MH() {\n-        return Index_h$constants_0.clang_getNullCursor$MH();\n+    public static MethodHandle clang_getNullCursor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_getNullCursor$MH,\"clang_getNullCursor\");\n@@ -2462,1 +3511,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getNullCursor () {\n+    public static MemorySegment clang_getNullCursor () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_getNullCursor$MH, \"clang_getNullCursor\");\n@@ -2464,3 +3514,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getNullCursor$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2469,2 +3519,2 @@\n-    public static  MethodHandle clang_getTranslationUnitCursor$MH() {\n-        return Index_h$constants_0.clang_getTranslationUnitCursor$MH();\n+    public static MethodHandle clang_getTranslationUnitCursor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_getTranslationUnitCursor$MH,\"clang_getTranslationUnitCursor\");\n@@ -2472,1 +3522,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getTranslationUnitCursor (@C(\"CXTranslationUnit\") Addressable x0) {\n+    public static MemorySegment clang_getTranslationUnitCursor ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_getTranslationUnitCursor$MH, \"clang_getTranslationUnitCursor\");\n@@ -2474,3 +3525,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTranslationUnitCursor$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2479,2 +3530,2 @@\n-    public static  MethodHandle clang_equalCursors$MH() {\n-        return Index_h$constants_0.clang_equalCursors$MH();\n+    public static MethodHandle clang_equalCursors$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_equalCursors$MH,\"clang_equalCursors\");\n@@ -2482,1 +3533,2 @@\n-    public static @C(\"unsigned int\") int clang_equalCursors (@C(\"CXCursor\") MemorySegment x0, @C(\"CXCursor\") MemorySegment x1) {\n+    public static int clang_equalCursors ( MemorySegment x0,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_equalCursors$MH, \"clang_equalCursors\");\n@@ -2484,3 +3536,3 @@\n-            return (int)Index_h$constants_0.clang_equalCursors$MH().invokeExact(x0, x1);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0, x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2489,2 +3541,2 @@\n-    public static  MethodHandle clang_Cursor_isNull$MH() {\n-        return Index_h$constants_0.clang_Cursor_isNull$MH();\n+    public static MethodHandle clang_Cursor_isNull$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isNull$MH,\"clang_Cursor_isNull\");\n@@ -2492,1 +3544,2 @@\n-    public static @C(\"int\") int clang_Cursor_isNull (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_Cursor_isNull ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isNull$MH, \"clang_Cursor_isNull\");\n@@ -2494,3 +3547,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_isNull$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2499,2 +3552,2 @@\n-    public static  MethodHandle clang_hashCursor$MH() {\n-        return Index_h$constants_0.clang_hashCursor$MH();\n+    public static MethodHandle clang_hashCursor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_hashCursor$MH,\"clang_hashCursor\");\n@@ -2502,1 +3555,2 @@\n-    public static @C(\"unsigned int\") int clang_hashCursor (@C(\"CXCursor\") MemorySegment x0) {\n+    public static int clang_hashCursor ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_hashCursor$MH, \"clang_hashCursor\");\n@@ -2504,3 +3558,3 @@\n-            return (int)Index_h$constants_0.clang_hashCursor$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2509,2 +3563,73 @@\n-    public static  MethodHandle clang_getCursorKind$MH() {\n-        return Index_h$constants_0.clang_getCursorKind$MH();\n+    public static class constants$13 {\n+\n+        static final FunctionDescriptor clang_TargetInfo_getPointerWidth$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_TargetInfo_getPointerWidth$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_TargetInfo_getPointerWidth\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$13.clang_TargetInfo_getPointerWidth$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getNullCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ));\n+        static final MethodHandle clang_getNullCursor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNullCursor\",\n+            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$13.clang_getNullCursor$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTranslationUnitCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getTranslationUnitCursor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTranslationUnitCursor\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$13.clang_getTranslationUnitCursor$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_equalCursors$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_equalCursors$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_equalCursors\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$13.clang_equalCursors$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isNull$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isNull$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isNull\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$13.clang_Cursor_isNull$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_hashCursor$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_hashCursor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_hashCursor\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$13.clang_hashCursor$FUNC, false\n+        );\n@@ -2512,1 +3637,6 @@\n-    public static @C(\"enum CXCursorKind\") int clang_getCursorKind (@C(\"CXCursor\") MemorySegment x0) {\n+\n+    public static MethodHandle clang_getCursorKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorKind$MH,\"clang_getCursorKind\");\n+    }\n+    public static int clang_getCursorKind ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_getCursorKind$MH, \"clang_getCursorKind\");\n@@ -2514,3 +3644,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorKind$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2519,2 +3649,2 @@\n-    public static  MethodHandle clang_isDeclaration$MH() {\n-        return Index_h$constants_0.clang_isDeclaration$MH();\n+    public static MethodHandle clang_isDeclaration$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_isDeclaration$MH,\"clang_isDeclaration\");\n@@ -2522,1 +3652,2 @@\n-    public static @C(\"unsigned int\") int clang_isDeclaration (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isDeclaration ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isDeclaration$MH, \"clang_isDeclaration\");\n@@ -2524,3 +3655,3 @@\n-            return (int)Index_h$constants_0.clang_isDeclaration$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2529,2 +3660,2 @@\n-    public static  MethodHandle clang_isInvalidDeclaration$MH() {\n-        return Index_h$constants_0.clang_isInvalidDeclaration$MH();\n+    public static MethodHandle clang_isInvalidDeclaration$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_isInvalidDeclaration$MH,\"clang_isInvalidDeclaration\");\n@@ -2532,1 +3663,2 @@\n-    public static @C(\"unsigned int\") int clang_isInvalidDeclaration (@C(\"CXCursor\") MemorySegment x0) {\n+    public static int clang_isInvalidDeclaration ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isInvalidDeclaration$MH, \"clang_isInvalidDeclaration\");\n@@ -2534,3 +3666,3 @@\n-            return (int)Index_h$constants_0.clang_isInvalidDeclaration$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2539,2 +3671,2 @@\n-    public static  MethodHandle clang_isReference$MH() {\n-        return Index_h$constants_0.clang_isReference$MH();\n+    public static MethodHandle clang_isReference$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_isReference$MH,\"clang_isReference\");\n@@ -2542,1 +3674,2 @@\n-    public static @C(\"unsigned int\") int clang_isReference (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isReference ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isReference$MH, \"clang_isReference\");\n@@ -2544,3 +3677,3 @@\n-            return (int)Index_h$constants_0.clang_isReference$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2549,2 +3682,2 @@\n-    public static  MethodHandle clang_isExpression$MH() {\n-        return Index_h$constants_0.clang_isExpression$MH();\n+    public static MethodHandle clang_isExpression$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_isExpression$MH,\"clang_isExpression\");\n@@ -2552,1 +3685,2 @@\n-    public static @C(\"unsigned int\") int clang_isExpression (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isExpression ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isExpression$MH, \"clang_isExpression\");\n@@ -2554,3 +3688,3 @@\n-            return (int)Index_h$constants_0.clang_isExpression$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2559,2 +3693,2 @@\n-    public static  MethodHandle clang_isStatement$MH() {\n-        return Index_h$constants_0.clang_isStatement$MH();\n+    public static MethodHandle clang_isStatement$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_isStatement$MH,\"clang_isStatement\");\n@@ -2562,1 +3696,2 @@\n-    public static @C(\"unsigned int\") int clang_isStatement (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isStatement ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isStatement$MH, \"clang_isStatement\");\n@@ -2564,3 +3699,3 @@\n-            return (int)Index_h$constants_0.clang_isStatement$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2569,2 +3704,62 @@\n-    public static  MethodHandle clang_isAttribute$MH() {\n-        return Index_h$constants_0.clang_isAttribute$MH();\n+    public static class constants$14 {\n+\n+        static final FunctionDescriptor clang_getCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$14.clang_getCursorKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isDeclaration$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isDeclaration$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isDeclaration\",\n+            \"(I)I\",\n+            constants$14.clang_isDeclaration$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isInvalidDeclaration$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isInvalidDeclaration$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isInvalidDeclaration\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$14.clang_isInvalidDeclaration$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isReference$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isReference$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isReference\",\n+            \"(I)I\",\n+            constants$14.clang_isReference$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isExpression$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isExpression$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isExpression\",\n+            \"(I)I\",\n+            constants$14.clang_isExpression$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isStatement$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isStatement$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isStatement\",\n+            \"(I)I\",\n+            constants$14.clang_isStatement$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_isAttribute$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_isAttribute$MH,\"clang_isAttribute\");\n@@ -2572,1 +3767,2 @@\n-    public static @C(\"unsigned int\") int clang_isAttribute (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isAttribute ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isAttribute$MH, \"clang_isAttribute\");\n@@ -2574,3 +3770,3 @@\n-            return (int)Index_h$constants_0.clang_isAttribute$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2579,2 +3775,2 @@\n-    public static  MethodHandle clang_Cursor_hasAttrs$MH() {\n-        return Index_h$constants_0.clang_Cursor_hasAttrs$MH();\n+    public static MethodHandle clang_Cursor_hasAttrs$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_Cursor_hasAttrs$MH,\"clang_Cursor_hasAttrs\");\n@@ -2582,1 +3778,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_hasAttrs (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_hasAttrs ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_Cursor_hasAttrs$MH, \"clang_Cursor_hasAttrs\");\n@@ -2584,3 +3781,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_hasAttrs$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2589,2 +3786,2 @@\n-    public static  MethodHandle clang_isInvalid$MH() {\n-        return Index_h$constants_0.clang_isInvalid$MH();\n+    public static MethodHandle clang_isInvalid$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_isInvalid$MH,\"clang_isInvalid\");\n@@ -2592,1 +3789,2 @@\n-    public static @C(\"unsigned int\") int clang_isInvalid (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isInvalid ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isInvalid$MH, \"clang_isInvalid\");\n@@ -2594,3 +3792,3 @@\n-            return (int)Index_h$constants_0.clang_isInvalid$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2599,2 +3797,2 @@\n-    public static  MethodHandle clang_isTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_isTranslationUnit$MH();\n+    public static MethodHandle clang_isTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_isTranslationUnit$MH,\"clang_isTranslationUnit\");\n@@ -2602,1 +3800,2 @@\n-    public static @C(\"unsigned int\") int clang_isTranslationUnit (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isTranslationUnit ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isTranslationUnit$MH, \"clang_isTranslationUnit\");\n@@ -2604,3 +3803,3 @@\n-            return (int)Index_h$constants_0.clang_isTranslationUnit$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2609,2 +3808,2 @@\n-    public static  MethodHandle clang_isPreprocessing$MH() {\n-        return Index_h$constants_0.clang_isPreprocessing$MH();\n+    public static MethodHandle clang_isPreprocessing$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_isPreprocessing$MH,\"clang_isPreprocessing\");\n@@ -2612,1 +3811,2 @@\n-    public static @C(\"unsigned int\") int clang_isPreprocessing (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isPreprocessing ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isPreprocessing$MH, \"clang_isPreprocessing\");\n@@ -2614,3 +3814,3 @@\n-            return (int)Index_h$constants_0.clang_isPreprocessing$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2619,2 +3819,2 @@\n-    public static  MethodHandle clang_isUnexposed$MH() {\n-        return Index_h$constants_0.clang_isUnexposed$MH();\n+    public static MethodHandle clang_isUnexposed$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_isUnexposed$MH,\"clang_isUnexposed\");\n@@ -2622,1 +3822,2 @@\n-    public static @C(\"unsigned int\") int clang_isUnexposed (@C(\"enum CXCursorKind\") int x0) {\n+    public static int clang_isUnexposed ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isUnexposed$MH, \"clang_isUnexposed\");\n@@ -2624,3 +3825,3 @@\n-            return (int)Index_h$constants_0.clang_isUnexposed$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2629,2 +3830,5 @@\n-    public static @C(\"int\") int CXLinkage_Invalid() {\n-        return Index_h$constants_0.CXLinkage_Invalid();\n+    public static int CXLinkage_Invalid() {\n+        return (int)0L;\n+    }\n+    public static int CXLinkage_NoLinkage() {\n+        return (int)1L;\n@@ -2632,2 +3836,2 @@\n-    public static @C(\"int\") int CXLinkage_NoLinkage() {\n-        return Index_h$constants_0.CXLinkage_NoLinkage();\n+    public static int CXLinkage_Internal() {\n+        return (int)2L;\n@@ -2635,2 +3839,2 @@\n-    public static @C(\"int\") int CXLinkage_Internal() {\n-        return Index_h$constants_0.CXLinkage_Internal();\n+    public static int CXLinkage_UniqueExternal() {\n+        return (int)3L;\n@@ -2638,2 +3842,2 @@\n-    public static @C(\"int\") int CXLinkage_UniqueExternal() {\n-        return Index_h$constants_0.CXLinkage_UniqueExternal();\n+    public static int CXLinkage_External() {\n+        return (int)4L;\n@@ -2641,2 +3845,54 @@\n-    public static @C(\"int\") int CXLinkage_External() {\n-        return Index_h$constants_0.CXLinkage_External();\n+    public static class constants$15 {\n+\n+        static final FunctionDescriptor clang_isAttribute$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isAttribute$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isAttribute\",\n+            \"(I)I\",\n+            constants$15.clang_isAttribute$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_hasAttrs$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_hasAttrs$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_hasAttrs\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$15.clang_Cursor_hasAttrs$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isInvalid$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isInvalid$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isInvalid\",\n+            \"(I)I\",\n+            constants$15.clang_isInvalid$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isTranslationUnit\",\n+            \"(I)I\",\n+            constants$15.clang_isTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isPreprocessing$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isPreprocessing$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isPreprocessing\",\n+            \"(I)I\",\n+            constants$15.clang_isPreprocessing$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isUnexposed$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_isUnexposed$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isUnexposed\",\n+            \"(I)I\",\n+            constants$15.clang_isUnexposed$FUNC, false\n+        );\n@@ -2644,2 +3900,3 @@\n-    public static  MethodHandle clang_getCursorLinkage$MH() {\n-        return Index_h$constants_0.clang_getCursorLinkage$MH();\n+\n+    public static MethodHandle clang_getCursorLinkage$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorLinkage$MH,\"clang_getCursorLinkage\");\n@@ -2647,1 +3904,2 @@\n-    public static @C(\"enum CXLinkageKind\") int clang_getCursorLinkage (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_getCursorLinkage ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorLinkage$MH, \"clang_getCursorLinkage\");\n@@ -2649,3 +3907,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorLinkage$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2654,2 +3912,2 @@\n-    public static @C(\"int\") int CXVisibility_Invalid() {\n-        return Index_h$constants_0.CXVisibility_Invalid();\n+    public static int CXVisibility_Invalid() {\n+        return (int)0L;\n@@ -2657,2 +3915,2 @@\n-    public static @C(\"int\") int CXVisibility_Hidden() {\n-        return Index_h$constants_0.CXVisibility_Hidden();\n+    public static int CXVisibility_Hidden() {\n+        return (int)1L;\n@@ -2660,2 +3918,2 @@\n-    public static @C(\"int\") int CXVisibility_Protected() {\n-        return Index_h$constants_0.CXVisibility_Protected();\n+    public static int CXVisibility_Protected() {\n+        return (int)2L;\n@@ -2663,2 +3921,2 @@\n-    public static @C(\"int\") int CXVisibility_Default() {\n-        return Index_h$constants_0.CXVisibility_Default();\n+    public static int CXVisibility_Default() {\n+        return (int)3L;\n@@ -2666,2 +3924,2 @@\n-    public static  MethodHandle clang_getCursorVisibility$MH() {\n-        return Index_h$constants_0.clang_getCursorVisibility$MH();\n+    public static MethodHandle clang_getCursorVisibility$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorVisibility$MH,\"clang_getCursorVisibility\");\n@@ -2669,1 +3927,2 @@\n-    public static @C(\"enum CXVisibilityKind\") int clang_getCursorVisibility (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_getCursorVisibility ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorVisibility$MH, \"clang_getCursorVisibility\");\n@@ -2671,3 +3930,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorVisibility$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2676,2 +3935,2 @@\n-    public static  MethodHandle clang_getCursorAvailability$MH() {\n-        return Index_h$constants_0.clang_getCursorAvailability$MH();\n+    public static MethodHandle clang_getCursorAvailability$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorAvailability$MH,\"clang_getCursorAvailability\");\n@@ -2679,1 +3938,2 @@\n-    public static @C(\"enum CXAvailabilityKind\") int clang_getCursorAvailability (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_getCursorAvailability ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorAvailability$MH, \"clang_getCursorAvailability\");\n@@ -2681,3 +3941,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorAvailability$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2688,1 +3948,28 @@\n-        private CXPlatformAvailability() {}\n+        static final MemoryLayout CXPlatformAvailability$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"Platform\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"Major\"),\n+                C_INT.withName(\"Minor\"),\n+                C_INT.withName(\"Subminor\")\n+            ).withName(\"Introduced\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"Major\"),\n+                C_INT.withName(\"Minor\"),\n+                C_INT.withName(\"Subminor\")\n+            ).withName(\"Deprecated\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"Major\"),\n+                C_INT.withName(\"Minor\"),\n+                C_INT.withName(\"Subminor\")\n+            ).withName(\"Obsoleted\"),\n+            C_INT.withName(\"Unavailable\"),\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"Message\")\n+        ).withName(\"CXPlatformAvailability\");\n@@ -2690,1 +3977,1 @@\n-            return Index_h$constants_0.CXPlatformAvailability$struct$LAYOUT();\n+            return CXPlatformAvailability.CXPlatformAvailability$struct$LAYOUT;\n@@ -2704,0 +3991,1 @@\n+        static final VarHandle Unavailable$VH = CXPlatformAvailability$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Unavailable\"));\n@@ -2705,1 +3993,1 @@\n-            return Index_h$constants_0.CXPlatformAvailability$Unavailable$VH();\n+            return CXPlatformAvailability.Unavailable$VH;\n@@ -2707,2 +3995,2 @@\n-        public static  @C(\"int\") int Unavailable$get(@C(\"struct CXPlatformAvailability\") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXPlatformAvailability$Unavailable$VH().get(seg);\n+        public static int Unavailable$get(MemorySegment seg) {\n+            return (int)CXPlatformAvailability.Unavailable$VH.get(seg);\n@@ -2710,2 +3998,2 @@\n-        public static  @C(\"int\") int Unavailable$get(@C(\"struct CXPlatformAvailability\") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXPlatformAvailability$Unavailable$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Unavailable$set( MemorySegment seg, int x) {\n+            CXPlatformAvailability.Unavailable$VH.set(seg, x);\n@@ -2713,2 +4001,2 @@\n-        public static void Unavailable$set(@C(\"struct CXPlatformAvailability\") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_0.CXPlatformAvailability$Unavailable$VH().set(seg, x);\n+        public static int Unavailable$get(MemorySegment seg, long index) {\n+            return (int)CXPlatformAvailability.Unavailable$VH.get(seg.asSlice(index*sizeof()));\n@@ -2716,2 +4004,2 @@\n-        public static void Unavailable$set(@C(\"struct CXPlatformAvailability\") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_0.CXPlatformAvailability$Unavailable$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Unavailable$set(MemorySegment seg, long index, int x) {\n+            CXPlatformAvailability.Unavailable$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -2723,3 +4011,3 @@\n-        public static @C(\"struct CXPlatformAvailability\") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct CXPlatformAvailability\") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct CXPlatformAvailability[]\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -2727,1 +4015,1 @@\n-        }        public static @C(\"struct CXPlatformAvailability[]\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -2730,1 +4018,1 @@\n-        public static @C(\"struct CXPlatformAvailability*\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -2733,1 +4021,1 @@\n-        public static @C(\"struct CXPlatformAvailability*\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -2736,1 +4024,1 @@\n-        public static @C(\"struct CXPlatformAvailability\") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -2739,2 +4027,2 @@\n-    public static  MethodHandle clang_getCursorPlatformAvailability$MH() {\n-        return Index_h$constants_0.clang_getCursorPlatformAvailability$MH();\n+    public static MethodHandle clang_getCursorPlatformAvailability$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorPlatformAvailability$MH,\"clang_getCursorPlatformAvailability\");\n@@ -2742,1 +4030,2 @@\n-    public static @C(\"int\") int clang_getCursorPlatformAvailability (@C(\"CXCursor\") MemorySegment cursor, @C(\"int*\") Addressable always_deprecated, @C(\"CXString*\") Addressable deprecated_message, @C(\"int*\") Addressable always_unavailable, @C(\"CXString*\") Addressable unavailable_message, @C(\"CXPlatformAvailability*\") Addressable availability, @C(\"int\") int availability_size) {\n+    public static int clang_getCursorPlatformAvailability ( MemorySegment cursor,  Addressable always_deprecated,  Addressable deprecated_message,  Addressable always_unavailable,  Addressable unavailable_message,  Addressable availability,  int availability_size) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorPlatformAvailability$MH, \"clang_getCursorPlatformAvailability\");\n@@ -2744,3 +4033,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorPlatformAvailability$MH().invokeExact(cursor, always_deprecated.address(), deprecated_message.address(), always_unavailable.address(), unavailable_message.address(), availability.address(), availability_size);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor, always_deprecated.address(), deprecated_message.address(), always_unavailable.address(), unavailable_message.address(), availability.address(), availability_size);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2749,2 +4038,2 @@\n-    public static  MethodHandle clang_disposeCXPlatformAvailability$MH() {\n-        return Index_h$constants_0.clang_disposeCXPlatformAvailability$MH();\n+    public static MethodHandle clang_disposeCXPlatformAvailability$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_disposeCXPlatformAvailability$MH,\"clang_disposeCXPlatformAvailability\");\n@@ -2752,1 +4041,2 @@\n-    public static void clang_disposeCXPlatformAvailability (@C(\"CXPlatformAvailability*\") Addressable availability) {\n+    public static void clang_disposeCXPlatformAvailability ( Addressable availability) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_disposeCXPlatformAvailability$MH, \"clang_disposeCXPlatformAvailability\");\n@@ -2754,3 +4044,3 @@\n-            Index_h$constants_0.clang_disposeCXPlatformAvailability$MH().invokeExact(availability.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(availability.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2759,2 +4049,2 @@\n-    public static @C(\"int\") int CXLanguage_Invalid() {\n-        return Index_h$constants_0.CXLanguage_Invalid();\n+    public static int CXLanguage_Invalid() {\n+        return (int)0L;\n@@ -2762,2 +4052,2 @@\n-    public static @C(\"int\") int CXLanguage_C() {\n-        return Index_h$constants_0.CXLanguage_C();\n+    public static int CXLanguage_C() {\n+        return (int)1L;\n@@ -2765,2 +4055,2 @@\n-    public static @C(\"int\") int CXLanguage_ObjC() {\n-        return Index_h$constants_0.CXLanguage_ObjC();\n+    public static int CXLanguage_ObjC() {\n+        return (int)2L;\n@@ -2768,2 +4058,2 @@\n-    public static @C(\"int\") int CXLanguage_CPlusPlus() {\n-        return Index_h$constants_0.CXLanguage_CPlusPlus();\n+    public static int CXLanguage_CPlusPlus() {\n+        return (int)3L;\n@@ -2771,2 +4061,2 @@\n-    public static  MethodHandle clang_getCursorLanguage$MH() {\n-        return Index_h$constants_0.clang_getCursorLanguage$MH();\n+    public static MethodHandle clang_getCursorLanguage$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorLanguage$MH,\"clang_getCursorLanguage\");\n@@ -2774,1 +4064,2 @@\n-    public static @C(\"enum CXLanguageKind\") int clang_getCursorLanguage (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_getCursorLanguage ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorLanguage$MH, \"clang_getCursorLanguage\");\n@@ -2776,3 +4067,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorLanguage$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2781,2 +4072,2 @@\n-    public static @C(\"int\") int CXTLS_None() {\n-        return Index_h$constants_0.CXTLS_None();\n+    public static int CXTLS_None() {\n+        return (int)0L;\n@@ -2784,2 +4075,2 @@\n-    public static @C(\"int\") int CXTLS_Dynamic() {\n-        return Index_h$constants_0.CXTLS_Dynamic();\n+    public static int CXTLS_Dynamic() {\n+        return (int)1L;\n@@ -2787,2 +4078,2 @@\n-    public static @C(\"int\") int CXTLS_Static() {\n-        return Index_h$constants_0.CXTLS_Static();\n+    public static int CXTLS_Static() {\n+        return (int)2L;\n@@ -2790,2 +4081,76 @@\n-    public static  MethodHandle clang_getCursorTLSKind$MH() {\n-        return Index_h$constants_0.clang_getCursorTLSKind$MH();\n+    public static class constants$16 {\n+\n+        static final FunctionDescriptor clang_getCursorLinkage$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorLinkage$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorLinkage\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$16.clang_getCursorLinkage$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorVisibility$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorVisibility$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorVisibility\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$16.clang_getCursorVisibility$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorAvailability$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorAvailability$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorAvailability\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$16.clang_getCursorAvailability$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorPlatformAvailability$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCursorPlatformAvailability$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorPlatformAvailability\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$16.clang_getCursorPlatformAvailability$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeCXPlatformAvailability$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeCXPlatformAvailability$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeCXPlatformAvailability\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$16.clang_disposeCXPlatformAvailability$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorLanguage$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorLanguage$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorLanguage\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$16.clang_getCursorLanguage$FUNC, false\n+        );\n@@ -2793,1 +4158,6 @@\n-    public static @C(\"enum CXTLSKind\") int clang_getCursorTLSKind (@C(\"CXCursor\") MemorySegment cursor) {\n+\n+    public static MethodHandle clang_getCursorTLSKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_getCursorTLSKind$MH,\"clang_getCursorTLSKind\");\n+    }\n+    public static int clang_getCursorTLSKind ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_getCursorTLSKind$MH, \"clang_getCursorTLSKind\");\n@@ -2795,3 +4165,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorTLSKind$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2800,2 +4170,2 @@\n-    public static  MethodHandle clang_Cursor_getTranslationUnit$MH() {\n-        return Index_h$constants_0.clang_Cursor_getTranslationUnit$MH();\n+    public static MethodHandle clang_Cursor_getTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_Cursor_getTranslationUnit$MH,\"clang_Cursor_getTranslationUnit\");\n@@ -2803,1 +4173,2 @@\n-    public static @C(\"CXTranslationUnit\") MemoryAddress clang_Cursor_getTranslationUnit (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemoryAddress clang_Cursor_getTranslationUnit ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_Cursor_getTranslationUnit$MH, \"clang_Cursor_getTranslationUnit\");\n@@ -2805,3 +4176,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_Cursor_getTranslationUnit$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2810,2 +4181,2 @@\n-    public static  MethodHandle clang_createCXCursorSet$MH() {\n-        return Index_h$constants_0.clang_createCXCursorSet$MH();\n+    public static MethodHandle clang_createCXCursorSet$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_createCXCursorSet$MH,\"clang_createCXCursorSet\");\n@@ -2813,1 +4184,2 @@\n-    public static @C(\"CXCursorSet\") MemoryAddress clang_createCXCursorSet () {\n+    public static MemoryAddress clang_createCXCursorSet () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_createCXCursorSet$MH, \"clang_createCXCursorSet\");\n@@ -2815,3 +4187,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_createCXCursorSet$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2820,2 +4192,2 @@\n-    public static  MethodHandle clang_disposeCXCursorSet$MH() {\n-        return Index_h$constants_0.clang_disposeCXCursorSet$MH();\n+    public static MethodHandle clang_disposeCXCursorSet$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_disposeCXCursorSet$MH,\"clang_disposeCXCursorSet\");\n@@ -2823,1 +4195,2 @@\n-    public static void clang_disposeCXCursorSet (@C(\"CXCursorSet\") Addressable cset) {\n+    public static void clang_disposeCXCursorSet ( Addressable cset) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_disposeCXCursorSet$MH, \"clang_disposeCXCursorSet\");\n@@ -2825,3 +4198,3 @@\n-            Index_h$constants_0.clang_disposeCXCursorSet$MH().invokeExact(cset.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(cset.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2830,2 +4203,2 @@\n-    public static  MethodHandle clang_CXCursorSet_contains$MH() {\n-        return Index_h$constants_0.clang_CXCursorSet_contains$MH();\n+    public static MethodHandle clang_CXCursorSet_contains$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_contains$MH,\"clang_CXCursorSet_contains\");\n@@ -2833,1 +4206,2 @@\n-    public static @C(\"unsigned int\") int clang_CXCursorSet_contains (@C(\"CXCursorSet\") Addressable cset, @C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_CXCursorSet_contains ( Addressable cset,  MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_contains$MH, \"clang_CXCursorSet_contains\");\n@@ -2835,3 +4209,3 @@\n-            return (int)Index_h$constants_0.clang_CXCursorSet_contains$MH().invokeExact(cset.address(), cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cset.address(), cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2840,2 +4214,2 @@\n-    public static  MethodHandle clang_CXCursorSet_insert$MH() {\n-        return Index_h$constants_0.clang_CXCursorSet_insert$MH();\n+    public static MethodHandle clang_CXCursorSet_insert$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_insert$MH,\"clang_CXCursorSet_insert\");\n@@ -2843,1 +4217,2 @@\n-    public static @C(\"unsigned int\") int clang_CXCursorSet_insert (@C(\"CXCursorSet\") Addressable cset, @C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_CXCursorSet_insert ( Addressable cset,  MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_insert$MH, \"clang_CXCursorSet_insert\");\n@@ -2845,3 +4220,3 @@\n-            return (int)Index_h$constants_0.clang_CXCursorSet_insert$MH().invokeExact(cset.address(), cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cset.address(), cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2850,2 +4225,70 @@\n-    public static  MethodHandle clang_getCursorSemanticParent$MH() {\n-        return Index_h$constants_0.clang_getCursorSemanticParent$MH();\n+    public static class constants$17 {\n+\n+        static final FunctionDescriptor clang_getCursorTLSKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorTLSKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorTLSKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$17.clang_getCursorTLSKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$17.clang_Cursor_getTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_createCXCursorSet$FUNC = FunctionDescriptor.of(C_POINTER);\n+        static final MethodHandle clang_createCXCursorSet$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_createCXCursorSet\",\n+            \"()Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$17.clang_createCXCursorSet$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeCXCursorSet$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeCXCursorSet$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeCXCursorSet\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$17.clang_disposeCXCursorSet$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXCursorSet_contains$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXCursorSet_contains$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXCursorSet_contains\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$17.clang_CXCursorSet_contains$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXCursorSet_insert$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXCursorSet_insert$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXCursorSet_insert\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$17.clang_CXCursorSet_insert$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getCursorSemanticParent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_getCursorSemanticParent$MH,\"clang_getCursorSemanticParent\");\n@@ -2853,1 +4296,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getCursorSemanticParent (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static MemorySegment clang_getCursorSemanticParent ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getCursorSemanticParent$MH, \"clang_getCursorSemanticParent\");\n@@ -2855,3 +4299,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorSemanticParent$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2860,2 +4304,2 @@\n-    public static  MethodHandle clang_getCursorLexicalParent$MH() {\n-        return Index_h$constants_0.clang_getCursorLexicalParent$MH();\n+    public static MethodHandle clang_getCursorLexicalParent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_getCursorLexicalParent$MH,\"clang_getCursorLexicalParent\");\n@@ -2863,1 +4307,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getCursorLexicalParent (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static MemorySegment clang_getCursorLexicalParent ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getCursorLexicalParent$MH, \"clang_getCursorLexicalParent\");\n@@ -2865,3 +4310,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorLexicalParent$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2870,2 +4315,2 @@\n-    public static  MethodHandle clang_getOverriddenCursors$MH() {\n-        return Index_h$constants_0.clang_getOverriddenCursors$MH();\n+    public static MethodHandle clang_getOverriddenCursors$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_getOverriddenCursors$MH,\"clang_getOverriddenCursors\");\n@@ -2873,1 +4318,2 @@\n-    public static void clang_getOverriddenCursors (@C(\"CXCursor\") MemorySegment cursor, @C(\"CXCursor**\") Addressable overridden, @C(\"unsigned int*\") Addressable num_overridden) {\n+    public static void clang_getOverriddenCursors ( MemorySegment cursor,  Addressable overridden,  Addressable num_overridden) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getOverriddenCursors$MH, \"clang_getOverriddenCursors\");\n@@ -2875,3 +4321,3 @@\n-            Index_h$constants_0.clang_getOverriddenCursors$MH().invokeExact(cursor, overridden.address(), num_overridden.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(cursor, overridden.address(), num_overridden.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2880,2 +4326,2 @@\n-    public static  MethodHandle clang_disposeOverriddenCursors$MH() {\n-        return Index_h$constants_0.clang_disposeOverriddenCursors$MH();\n+    public static MethodHandle clang_disposeOverriddenCursors$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_disposeOverriddenCursors$MH,\"clang_disposeOverriddenCursors\");\n@@ -2883,1 +4329,2 @@\n-    public static void clang_disposeOverriddenCursors (@C(\"CXCursor*\") Addressable overridden) {\n+    public static void clang_disposeOverriddenCursors ( Addressable overridden) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_disposeOverriddenCursors$MH, \"clang_disposeOverriddenCursors\");\n@@ -2885,3 +4332,3 @@\n-            Index_h$constants_0.clang_disposeOverriddenCursors$MH().invokeExact(overridden.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(overridden.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2890,2 +4337,2 @@\n-    public static  MethodHandle clang_getIncludedFile$MH() {\n-        return Index_h$constants_0.clang_getIncludedFile$MH();\n+    public static MethodHandle clang_getIncludedFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_getIncludedFile$MH,\"clang_getIncludedFile\");\n@@ -2893,1 +4340,2 @@\n-    public static @C(\"CXFile\") MemoryAddress clang_getIncludedFile (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static MemoryAddress clang_getIncludedFile ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getIncludedFile$MH, \"clang_getIncludedFile\");\n@@ -2895,3 +4343,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_0.clang_getIncludedFile$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2900,2 +4348,2 @@\n-    public static  MethodHandle clang_getCursor$MH() {\n-        return Index_h$constants_0.clang_getCursor$MH();\n+    public static MethodHandle clang_getCursor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_getCursor$MH,\"clang_getCursor\");\n@@ -2903,1 +4351,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getCursor (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXSourceLocation\") MemorySegment x1) {\n+    public static MemorySegment clang_getCursor ( Addressable x0,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getCursor$MH, \"clang_getCursor\");\n@@ -2905,3 +4354,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursor$MH().invokeExact(x0.address(), x1);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2910,2 +4359,89 @@\n-    public static  MethodHandle clang_getCursorLocation$MH() {\n-        return Index_h$constants_0.clang_getCursorLocation$MH();\n+    public static class constants$18 {\n+\n+        static final FunctionDescriptor clang_getCursorSemanticParent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorSemanticParent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorSemanticParent\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$18.clang_getCursorSemanticParent$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorLexicalParent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorLexicalParent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorLexicalParent\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$18.clang_getCursorLexicalParent$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getOverriddenCursors$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getOverriddenCursors$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getOverriddenCursors\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$18.clang_getOverriddenCursors$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeOverriddenCursors$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeOverriddenCursors$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeOverriddenCursors\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$18.clang_disposeOverriddenCursors$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getIncludedFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getIncludedFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getIncludedFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$18.clang_getIncludedFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_getCursor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursor\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$18.clang_getCursor$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getCursorLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$19.clang_getCursorLocation$MH,\"clang_getCursorLocation\");\n@@ -2913,1 +4449,2 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getCursorLocation (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getCursorLocation ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getCursorLocation$MH, \"clang_getCursorLocation\");\n@@ -2915,3 +4452,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorLocation$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2920,2 +4457,2 @@\n-    public static  MethodHandle clang_getCursorExtent$MH() {\n-        return Index_h$constants_0.clang_getCursorExtent$MH();\n+    public static MethodHandle clang_getCursorExtent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$19.clang_getCursorExtent$MH,\"clang_getCursorExtent\");\n@@ -2923,1 +4460,2 @@\n-    public static @C(\"CXSourceRange\") MemorySegment clang_getCursorExtent (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getCursorExtent ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getCursorExtent$MH, \"clang_getCursorExtent\");\n@@ -2925,3 +4463,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorExtent$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -2930,2 +4468,2 @@\n-    public static @C(\"int\") int CXType_Invalid() {\n-        return Index_h$constants_0.CXType_Invalid();\n+    public static int CXType_Invalid() {\n+        return (int)0L;\n@@ -2933,2 +4471,2 @@\n-    public static @C(\"int\") int CXType_Unexposed() {\n-        return Index_h$constants_0.CXType_Unexposed();\n+    public static int CXType_Unexposed() {\n+        return (int)1L;\n@@ -2936,2 +4474,2 @@\n-    public static @C(\"int\") int CXType_Void() {\n-        return Index_h$constants_0.CXType_Void();\n+    public static int CXType_Void() {\n+        return (int)2L;\n@@ -2939,2 +4477,2 @@\n-    public static @C(\"int\") int CXType_Bool() {\n-        return Index_h$constants_0.CXType_Bool();\n+    public static int CXType_Bool() {\n+        return (int)3L;\n@@ -2942,2 +4480,2 @@\n-    public static @C(\"int\") int CXType_Char_U() {\n-        return Index_h$constants_0.CXType_Char_U();\n+    public static int CXType_Char_U() {\n+        return (int)4L;\n@@ -2945,2 +4483,2 @@\n-    public static @C(\"int\") int CXType_UChar() {\n-        return Index_h$constants_0.CXType_UChar();\n+    public static int CXType_UChar() {\n+        return (int)5L;\n@@ -2948,2 +4486,2 @@\n-    public static @C(\"int\") int CXType_Char16() {\n-        return Index_h$constants_0.CXType_Char16();\n+    public static int CXType_Char16() {\n+        return (int)6L;\n@@ -2951,2 +4489,2 @@\n-    public static @C(\"int\") int CXType_Char32() {\n-        return Index_h$constants_0.CXType_Char32();\n+    public static int CXType_Char32() {\n+        return (int)7L;\n@@ -2954,2 +4492,2 @@\n-    public static @C(\"int\") int CXType_UShort() {\n-        return Index_h$constants_0.CXType_UShort();\n+    public static int CXType_UShort() {\n+        return (int)8L;\n@@ -2957,2 +4495,2 @@\n-    public static @C(\"int\") int CXType_UInt() {\n-        return Index_h$constants_0.CXType_UInt();\n+    public static int CXType_UInt() {\n+        return (int)9L;\n@@ -2960,2 +4498,2 @@\n-    public static @C(\"int\") int CXType_ULong() {\n-        return Index_h$constants_0.CXType_ULong();\n+    public static int CXType_ULong() {\n+        return (int)10L;\n@@ -2963,2 +4501,2 @@\n-    public static @C(\"int\") int CXType_ULongLong() {\n-        return Index_h$constants_0.CXType_ULongLong();\n+    public static int CXType_ULongLong() {\n+        return (int)11L;\n@@ -2966,2 +4504,2 @@\n-    public static @C(\"int\") int CXType_UInt128() {\n-        return Index_h$constants_0.CXType_UInt128();\n+    public static int CXType_UInt128() {\n+        return (int)12L;\n@@ -2969,2 +4507,2 @@\n-    public static @C(\"int\") int CXType_Char_S() {\n-        return Index_h$constants_0.CXType_Char_S();\n+    public static int CXType_Char_S() {\n+        return (int)13L;\n@@ -2972,2 +4510,2 @@\n-    public static @C(\"int\") int CXType_SChar() {\n-        return Index_h$constants_0.CXType_SChar();\n+    public static int CXType_SChar() {\n+        return (int)14L;\n@@ -2975,2 +4513,2 @@\n-    public static @C(\"int\") int CXType_WChar() {\n-        return Index_h$constants_0.CXType_WChar();\n+    public static int CXType_WChar() {\n+        return (int)15L;\n@@ -2978,2 +4516,2 @@\n-    public static @C(\"int\") int CXType_Short() {\n-        return Index_h$constants_0.CXType_Short();\n+    public static int CXType_Short() {\n+        return (int)16L;\n@@ -2981,2 +4519,2 @@\n-    public static @C(\"int\") int CXType_Int() {\n-        return Index_h$constants_0.CXType_Int();\n+    public static int CXType_Int() {\n+        return (int)17L;\n@@ -2984,2 +4522,2 @@\n-    public static @C(\"int\") int CXType_Long() {\n-        return Index_h$constants_0.CXType_Long();\n+    public static int CXType_Long() {\n+        return (int)18L;\n@@ -2987,2 +4525,2 @@\n-    public static @C(\"int\") int CXType_LongLong() {\n-        return Index_h$constants_0.CXType_LongLong();\n+    public static int CXType_LongLong() {\n+        return (int)19L;\n@@ -2990,2 +4528,2 @@\n-    public static @C(\"int\") int CXType_Int128() {\n-        return Index_h$constants_0.CXType_Int128();\n+    public static int CXType_Int128() {\n+        return (int)20L;\n@@ -2993,2 +4531,2 @@\n-    public static @C(\"int\") int CXType_Float() {\n-        return Index_h$constants_0.CXType_Float();\n+    public static int CXType_Float() {\n+        return (int)21L;\n@@ -2996,2 +4534,2 @@\n-    public static @C(\"int\") int CXType_Double() {\n-        return Index_h$constants_0.CXType_Double();\n+    public static int CXType_Double() {\n+        return (int)22L;\n@@ -2999,2 +4537,2 @@\n-    public static @C(\"int\") int CXType_LongDouble() {\n-        return Index_h$constants_0.CXType_LongDouble();\n+    public static int CXType_LongDouble() {\n+        return (int)23L;\n@@ -3002,2 +4540,2 @@\n-    public static @C(\"int\") int CXType_NullPtr() {\n-        return Index_h$constants_0.CXType_NullPtr();\n+    public static int CXType_NullPtr() {\n+        return (int)24L;\n@@ -3005,2 +4543,2 @@\n-    public static @C(\"int\") int CXType_Overload() {\n-        return Index_h$constants_0.CXType_Overload();\n+    public static int CXType_Overload() {\n+        return (int)25L;\n@@ -3008,2 +4546,2 @@\n-    public static @C(\"int\") int CXType_Dependent() {\n-        return Index_h$constants_0.CXType_Dependent();\n+    public static int CXType_Dependent() {\n+        return (int)26L;\n@@ -3011,2 +4549,2 @@\n-    public static @C(\"int\") int CXType_ObjCId() {\n-        return Index_h$constants_0.CXType_ObjCId();\n+    public static int CXType_ObjCId() {\n+        return (int)27L;\n@@ -3014,2 +4552,2 @@\n-    public static @C(\"int\") int CXType_ObjCClass() {\n-        return Index_h$constants_0.CXType_ObjCClass();\n+    public static int CXType_ObjCClass() {\n+        return (int)28L;\n@@ -3017,2 +4555,2 @@\n-    public static @C(\"int\") int CXType_ObjCSel() {\n-        return Index_h$constants_0.CXType_ObjCSel();\n+    public static int CXType_ObjCSel() {\n+        return (int)29L;\n@@ -3020,2 +4558,2 @@\n-    public static @C(\"int\") int CXType_Float128() {\n-        return Index_h$constants_0.CXType_Float128();\n+    public static int CXType_Float128() {\n+        return (int)30L;\n@@ -3023,2 +4561,2 @@\n-    public static @C(\"int\") int CXType_Half() {\n-        return Index_h$constants_0.CXType_Half();\n+    public static int CXType_Half() {\n+        return (int)31L;\n@@ -3026,2 +4564,2 @@\n-    public static @C(\"int\") int CXType_Float16() {\n-        return Index_h$constants_0.CXType_Float16();\n+    public static int CXType_Float16() {\n+        return (int)32L;\n@@ -3029,2 +4567,2 @@\n-    public static @C(\"int\") int CXType_ShortAccum() {\n-        return Index_h$constants_0.CXType_ShortAccum();\n+    public static int CXType_ShortAccum() {\n+        return (int)33L;\n@@ -3032,2 +4570,2 @@\n-    public static @C(\"int\") int CXType_Accum() {\n-        return Index_h$constants_0.CXType_Accum();\n+    public static int CXType_Accum() {\n+        return (int)34L;\n@@ -3035,2 +4573,2 @@\n-    public static @C(\"int\") int CXType_LongAccum() {\n-        return Index_h$constants_0.CXType_LongAccum();\n+    public static int CXType_LongAccum() {\n+        return (int)35L;\n@@ -3038,2 +4576,2 @@\n-    public static @C(\"int\") int CXType_UShortAccum() {\n-        return Index_h$constants_0.CXType_UShortAccum();\n+    public static int CXType_UShortAccum() {\n+        return (int)36L;\n@@ -3041,2 +4579,2 @@\n-    public static @C(\"int\") int CXType_UAccum() {\n-        return Index_h$constants_0.CXType_UAccum();\n+    public static int CXType_UAccum() {\n+        return (int)37L;\n@@ -3044,2 +4582,2 @@\n-    public static @C(\"int\") int CXType_ULongAccum() {\n-        return Index_h$constants_0.CXType_ULongAccum();\n+    public static int CXType_ULongAccum() {\n+        return (int)38L;\n@@ -3047,2 +4585,2 @@\n-    public static @C(\"int\") int CXType_FirstBuiltin() {\n-        return Index_h$constants_0.CXType_FirstBuiltin();\n+    public static int CXType_FirstBuiltin() {\n+        return (int)2L;\n@@ -3050,2 +4588,2 @@\n-    public static @C(\"int\") int CXType_LastBuiltin() {\n-        return Index_h$constants_0.CXType_LastBuiltin();\n+    public static int CXType_LastBuiltin() {\n+        return (int)38L;\n@@ -3053,2 +4591,2 @@\n-    public static @C(\"int\") int CXType_Complex() {\n-        return Index_h$constants_0.CXType_Complex();\n+    public static int CXType_Complex() {\n+        return (int)100L;\n@@ -3056,2 +4594,2 @@\n-    public static @C(\"int\") int CXType_Pointer() {\n-        return Index_h$constants_0.CXType_Pointer();\n+    public static int CXType_Pointer() {\n+        return (int)101L;\n@@ -3059,2 +4597,2 @@\n-    public static @C(\"int\") int CXType_BlockPointer() {\n-        return Index_h$constants_0.CXType_BlockPointer();\n+    public static int CXType_BlockPointer() {\n+        return (int)102L;\n@@ -3062,2 +4600,2 @@\n-    public static @C(\"int\") int CXType_LValueReference() {\n-        return Index_h$constants_0.CXType_LValueReference();\n+    public static int CXType_LValueReference() {\n+        return (int)103L;\n@@ -3065,2 +4603,2 @@\n-    public static @C(\"int\") int CXType_RValueReference() {\n-        return Index_h$constants_0.CXType_RValueReference();\n+    public static int CXType_RValueReference() {\n+        return (int)104L;\n@@ -3068,2 +4606,2 @@\n-    public static @C(\"int\") int CXType_Record() {\n-        return Index_h$constants_0.CXType_Record();\n+    public static int CXType_Record() {\n+        return (int)105L;\n@@ -3071,2 +4609,2 @@\n-    public static @C(\"int\") int CXType_Enum() {\n-        return Index_h$constants_0.CXType_Enum();\n+    public static int CXType_Enum() {\n+        return (int)106L;\n@@ -3074,2 +4612,2 @@\n-    public static @C(\"int\") int CXType_Typedef() {\n-        return Index_h$constants_0.CXType_Typedef();\n+    public static int CXType_Typedef() {\n+        return (int)107L;\n@@ -3077,2 +4615,2 @@\n-    public static @C(\"int\") int CXType_ObjCInterface() {\n-        return Index_h$constants_0.CXType_ObjCInterface();\n+    public static int CXType_ObjCInterface() {\n+        return (int)108L;\n@@ -3080,2 +4618,2 @@\n-    public static @C(\"int\") int CXType_ObjCObjectPointer() {\n-        return Index_h$constants_0.CXType_ObjCObjectPointer();\n+    public static int CXType_ObjCObjectPointer() {\n+        return (int)109L;\n@@ -3083,2 +4621,2 @@\n-    public static @C(\"int\") int CXType_FunctionNoProto() {\n-        return Index_h$constants_0.CXType_FunctionNoProto();\n+    public static int CXType_FunctionNoProto() {\n+        return (int)110L;\n@@ -3086,2 +4624,2 @@\n-    public static @C(\"int\") int CXType_FunctionProto() {\n-        return Index_h$constants_0.CXType_FunctionProto();\n+    public static int CXType_FunctionProto() {\n+        return (int)111L;\n@@ -3089,2 +4627,2 @@\n-    public static @C(\"int\") int CXType_ConstantArray() {\n-        return Index_h$constants_0.CXType_ConstantArray();\n+    public static int CXType_ConstantArray() {\n+        return (int)112L;\n@@ -3092,2 +4630,2 @@\n-    public static @C(\"int\") int CXType_Vector() {\n-        return Index_h$constants_0.CXType_Vector();\n+    public static int CXType_Vector() {\n+        return (int)113L;\n@@ -3095,2 +4633,2 @@\n-    public static @C(\"int\") int CXType_IncompleteArray() {\n-        return Index_h$constants_0.CXType_IncompleteArray();\n+    public static int CXType_IncompleteArray() {\n+        return (int)114L;\n@@ -3098,2 +4636,2 @@\n-    public static @C(\"int\") int CXType_VariableArray() {\n-        return Index_h$constants_0.CXType_VariableArray();\n+    public static int CXType_VariableArray() {\n+        return (int)115L;\n@@ -3101,2 +4639,2 @@\n-    public static @C(\"int\") int CXType_DependentSizedArray() {\n-        return Index_h$constants_0.CXType_DependentSizedArray();\n+    public static int CXType_DependentSizedArray() {\n+        return (int)116L;\n@@ -3104,2 +4642,2 @@\n-    public static @C(\"int\") int CXType_MemberPointer() {\n-        return Index_h$constants_0.CXType_MemberPointer();\n+    public static int CXType_MemberPointer() {\n+        return (int)117L;\n@@ -3107,2 +4645,2 @@\n-    public static @C(\"int\") int CXType_Auto() {\n-        return Index_h$constants_0.CXType_Auto();\n+    public static int CXType_Auto() {\n+        return (int)118L;\n@@ -3110,2 +4648,2 @@\n-    public static @C(\"int\") int CXType_Elaborated() {\n-        return Index_h$constants_0.CXType_Elaborated();\n+    public static int CXType_Elaborated() {\n+        return (int)119L;\n@@ -3113,2 +4651,2 @@\n-    public static @C(\"int\") int CXType_Pipe() {\n-        return Index_h$constants_0.CXType_Pipe();\n+    public static int CXType_Pipe() {\n+        return (int)120L;\n@@ -3116,2 +4654,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dRO() {\n-        return Index_h$constants_0.CXType_OCLImage1dRO();\n+    public static int CXType_OCLImage1dRO() {\n+        return (int)121L;\n@@ -3119,2 +4657,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dArrayRO() {\n-        return Index_h$constants_0.CXType_OCLImage1dArrayRO();\n+    public static int CXType_OCLImage1dArrayRO() {\n+        return (int)122L;\n@@ -3122,2 +4660,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dBufferRO() {\n-        return Index_h$constants_0.CXType_OCLImage1dBufferRO();\n+    public static int CXType_OCLImage1dBufferRO() {\n+        return (int)123L;\n@@ -3125,2 +4663,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dRO() {\n-        return Index_h$constants_0.CXType_OCLImage2dRO();\n+    public static int CXType_OCLImage2dRO() {\n+        return (int)124L;\n@@ -3128,2 +4666,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayRO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayRO();\n+    public static int CXType_OCLImage2dArrayRO() {\n+        return (int)125L;\n@@ -3131,2 +4669,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dDepthRO() {\n-        return Index_h$constants_0.CXType_OCLImage2dDepthRO();\n+    public static int CXType_OCLImage2dDepthRO() {\n+        return (int)126L;\n@@ -3134,2 +4672,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayDepthRO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayDepthRO();\n+    public static int CXType_OCLImage2dArrayDepthRO() {\n+        return (int)127L;\n@@ -3137,2 +4675,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dMSAARO() {\n-        return Index_h$constants_0.CXType_OCLImage2dMSAARO();\n+    public static int CXType_OCLImage2dMSAARO() {\n+        return (int)128L;\n@@ -3140,2 +4678,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayMSAARO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayMSAARO();\n+    public static int CXType_OCLImage2dArrayMSAARO() {\n+        return (int)129L;\n@@ -3143,2 +4681,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dMSAADepthRO() {\n-        return Index_h$constants_0.CXType_OCLImage2dMSAADepthRO();\n+    public static int CXType_OCLImage2dMSAADepthRO() {\n+        return (int)130L;\n@@ -3146,2 +4684,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayMSAADepthRO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayMSAADepthRO();\n+    public static int CXType_OCLImage2dArrayMSAADepthRO() {\n+        return (int)131L;\n@@ -3149,2 +4687,2 @@\n-    public static @C(\"int\") int CXType_OCLImage3dRO() {\n-        return Index_h$constants_0.CXType_OCLImage3dRO();\n+    public static int CXType_OCLImage3dRO() {\n+        return (int)132L;\n@@ -3152,2 +4690,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dWO() {\n-        return Index_h$constants_0.CXType_OCLImage1dWO();\n+    public static int CXType_OCLImage1dWO() {\n+        return (int)133L;\n@@ -3155,2 +4693,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dArrayWO() {\n-        return Index_h$constants_0.CXType_OCLImage1dArrayWO();\n+    public static int CXType_OCLImage1dArrayWO() {\n+        return (int)134L;\n@@ -3158,2 +4696,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dBufferWO() {\n-        return Index_h$constants_0.CXType_OCLImage1dBufferWO();\n+    public static int CXType_OCLImage1dBufferWO() {\n+        return (int)135L;\n@@ -3161,2 +4699,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dWO();\n+    public static int CXType_OCLImage2dWO() {\n+        return (int)136L;\n@@ -3164,2 +4702,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayWO();\n+    public static int CXType_OCLImage2dArrayWO() {\n+        return (int)137L;\n@@ -3167,2 +4705,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dDepthWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dDepthWO();\n+    public static int CXType_OCLImage2dDepthWO() {\n+        return (int)138L;\n@@ -3170,2 +4708,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayDepthWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayDepthWO();\n+    public static int CXType_OCLImage2dArrayDepthWO() {\n+        return (int)139L;\n@@ -3173,2 +4711,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dMSAAWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dMSAAWO();\n+    public static int CXType_OCLImage2dMSAAWO() {\n+        return (int)140L;\n@@ -3176,2 +4714,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayMSAAWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayMSAAWO();\n+    public static int CXType_OCLImage2dArrayMSAAWO() {\n+        return (int)141L;\n@@ -3179,2 +4717,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dMSAADepthWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dMSAADepthWO();\n+    public static int CXType_OCLImage2dMSAADepthWO() {\n+        return (int)142L;\n@@ -3182,2 +4720,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayMSAADepthWO() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayMSAADepthWO();\n+    public static int CXType_OCLImage2dArrayMSAADepthWO() {\n+        return (int)143L;\n@@ -3185,2 +4723,2 @@\n-    public static @C(\"int\") int CXType_OCLImage3dWO() {\n-        return Index_h$constants_0.CXType_OCLImage3dWO();\n+    public static int CXType_OCLImage3dWO() {\n+        return (int)144L;\n@@ -3188,2 +4726,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dRW() {\n-        return Index_h$constants_0.CXType_OCLImage1dRW();\n+    public static int CXType_OCLImage1dRW() {\n+        return (int)145L;\n@@ -3191,2 +4729,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dArrayRW() {\n-        return Index_h$constants_0.CXType_OCLImage1dArrayRW();\n+    public static int CXType_OCLImage1dArrayRW() {\n+        return (int)146L;\n@@ -3194,2 +4732,2 @@\n-    public static @C(\"int\") int CXType_OCLImage1dBufferRW() {\n-        return Index_h$constants_0.CXType_OCLImage1dBufferRW();\n+    public static int CXType_OCLImage1dBufferRW() {\n+        return (int)147L;\n@@ -3197,2 +4735,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dRW() {\n-        return Index_h$constants_0.CXType_OCLImage2dRW();\n+    public static int CXType_OCLImage2dRW() {\n+        return (int)148L;\n@@ -3200,2 +4738,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayRW() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayRW();\n+    public static int CXType_OCLImage2dArrayRW() {\n+        return (int)149L;\n@@ -3203,2 +4741,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dDepthRW() {\n-        return Index_h$constants_0.CXType_OCLImage2dDepthRW();\n+    public static int CXType_OCLImage2dDepthRW() {\n+        return (int)150L;\n@@ -3206,2 +4744,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayDepthRW() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayDepthRW();\n+    public static int CXType_OCLImage2dArrayDepthRW() {\n+        return (int)151L;\n@@ -3209,2 +4747,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dMSAARW() {\n-        return Index_h$constants_0.CXType_OCLImage2dMSAARW();\n+    public static int CXType_OCLImage2dMSAARW() {\n+        return (int)152L;\n@@ -3212,2 +4750,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayMSAARW() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayMSAARW();\n+    public static int CXType_OCLImage2dArrayMSAARW() {\n+        return (int)153L;\n@@ -3215,2 +4753,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dMSAADepthRW() {\n-        return Index_h$constants_0.CXType_OCLImage2dMSAADepthRW();\n+    public static int CXType_OCLImage2dMSAADepthRW() {\n+        return (int)154L;\n@@ -3218,2 +4756,2 @@\n-    public static @C(\"int\") int CXType_OCLImage2dArrayMSAADepthRW() {\n-        return Index_h$constants_0.CXType_OCLImage2dArrayMSAADepthRW();\n+    public static int CXType_OCLImage2dArrayMSAADepthRW() {\n+        return (int)155L;\n@@ -3221,2 +4759,2 @@\n-    public static @C(\"int\") int CXType_OCLImage3dRW() {\n-        return Index_h$constants_0.CXType_OCLImage3dRW();\n+    public static int CXType_OCLImage3dRW() {\n+        return (int)156L;\n@@ -3224,2 +4762,2 @@\n-    public static @C(\"int\") int CXType_OCLSampler() {\n-        return Index_h$constants_0.CXType_OCLSampler();\n+    public static int CXType_OCLSampler() {\n+        return (int)157L;\n@@ -3227,2 +4765,2 @@\n-    public static @C(\"int\") int CXType_OCLEvent() {\n-        return Index_h$constants_0.CXType_OCLEvent();\n+    public static int CXType_OCLEvent() {\n+        return (int)158L;\n@@ -3230,2 +4768,2 @@\n-    public static @C(\"int\") int CXType_OCLQueue() {\n-        return Index_h$constants_0.CXType_OCLQueue();\n+    public static int CXType_OCLQueue() {\n+        return (int)159L;\n@@ -3233,2 +4771,2 @@\n-    public static @C(\"int\") int CXType_OCLReserveID() {\n-        return Index_h$constants_0.CXType_OCLReserveID();\n+    public static int CXType_OCLReserveID() {\n+        return (int)160L;\n@@ -3236,2 +4774,2 @@\n-    public static @C(\"int\") int CXType_ObjCObject() {\n-        return Index_h$constants_0.CXType_ObjCObject();\n+    public static int CXType_ObjCObject() {\n+        return (int)161L;\n@@ -3239,2 +4777,2 @@\n-    public static @C(\"int\") int CXType_ObjCTypeParam() {\n-        return Index_h$constants_0.CXType_ObjCTypeParam();\n+    public static int CXType_ObjCTypeParam() {\n+        return (int)162L;\n@@ -3242,2 +4780,2 @@\n-    public static @C(\"int\") int CXType_Attributed() {\n-        return Index_h$constants_0.CXType_Attributed();\n+    public static int CXType_Attributed() {\n+        return (int)163L;\n@@ -3245,2 +4783,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCMcePayload() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCMcePayload();\n+    public static int CXType_OCLIntelSubgroupAVCMcePayload() {\n+        return (int)164L;\n@@ -3248,2 +4786,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCImePayload() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImePayload();\n+    public static int CXType_OCLIntelSubgroupAVCImePayload() {\n+        return (int)165L;\n@@ -3251,2 +4789,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCRefPayload() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCRefPayload();\n+    public static int CXType_OCLIntelSubgroupAVCRefPayload() {\n+        return (int)166L;\n@@ -3254,2 +4792,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCSicPayload() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCSicPayload();\n+    public static int CXType_OCLIntelSubgroupAVCSicPayload() {\n+        return (int)167L;\n@@ -3257,2 +4795,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCMceResult() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCMceResult();\n+    public static int CXType_OCLIntelSubgroupAVCMceResult() {\n+        return (int)168L;\n@@ -3260,2 +4798,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCImeResult() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeResult();\n+    public static int CXType_OCLIntelSubgroupAVCImeResult() {\n+        return (int)169L;\n@@ -3263,2 +4801,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCRefResult() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCRefResult();\n+    public static int CXType_OCLIntelSubgroupAVCRefResult() {\n+        return (int)170L;\n@@ -3266,2 +4804,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCSicResult() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCSicResult();\n+    public static int CXType_OCLIntelSubgroupAVCSicResult() {\n+        return (int)171L;\n@@ -3269,2 +4807,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout();\n+    public static int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout() {\n+        return (int)172L;\n@@ -3272,2 +4810,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout();\n+    public static int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout() {\n+        return (int)173L;\n@@ -3275,2 +4813,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin();\n+    public static int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin() {\n+        return (int)174L;\n@@ -3278,2 +4816,2 @@\n-    public static @C(\"int\") int CXType_OCLIntelSubgroupAVCImeDualRefStreamin() {\n-        return Index_h$constants_0.CXType_OCLIntelSubgroupAVCImeDualRefStreamin();\n+    public static int CXType_OCLIntelSubgroupAVCImeDualRefStreamin() {\n+        return (int)175L;\n@@ -3281,2 +4819,2 @@\n-    public static @C(\"int\") int CXType_ExtVector() {\n-        return Index_h$constants_0.CXType_ExtVector();\n+    public static int CXType_ExtVector() {\n+        return (int)176L;\n@@ -3284,2 +4822,2 @@\n-    public static @C(\"int\") int CXCallingConv_Default() {\n-        return Index_h$constants_0.CXCallingConv_Default();\n+    public static int CXCallingConv_Default() {\n+        return (int)0L;\n@@ -3287,2 +4825,2 @@\n-    public static @C(\"int\") int CXCallingConv_C() {\n-        return Index_h$constants_0.CXCallingConv_C();\n+    public static int CXCallingConv_C() {\n+        return (int)1L;\n@@ -3290,2 +4828,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86StdCall() {\n-        return Index_h$constants_0.CXCallingConv_X86StdCall();\n+    public static int CXCallingConv_X86StdCall() {\n+        return (int)2L;\n@@ -3293,2 +4831,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86FastCall() {\n-        return Index_h$constants_0.CXCallingConv_X86FastCall();\n+    public static int CXCallingConv_X86FastCall() {\n+        return (int)3L;\n@@ -3296,2 +4834,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86ThisCall() {\n-        return Index_h$constants_0.CXCallingConv_X86ThisCall();\n+    public static int CXCallingConv_X86ThisCall() {\n+        return (int)4L;\n@@ -3299,2 +4837,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86Pascal() {\n-        return Index_h$constants_0.CXCallingConv_X86Pascal();\n+    public static int CXCallingConv_X86Pascal() {\n+        return (int)5L;\n@@ -3302,2 +4840,2 @@\n-    public static @C(\"int\") int CXCallingConv_AAPCS() {\n-        return Index_h$constants_0.CXCallingConv_AAPCS();\n+    public static int CXCallingConv_AAPCS() {\n+        return (int)6L;\n@@ -3305,2 +4843,2 @@\n-    public static @C(\"int\") int CXCallingConv_AAPCS_VFP() {\n-        return Index_h$constants_0.CXCallingConv_AAPCS_VFP();\n+    public static int CXCallingConv_AAPCS_VFP() {\n+        return (int)7L;\n@@ -3308,2 +4846,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86RegCall() {\n-        return Index_h$constants_0.CXCallingConv_X86RegCall();\n+    public static int CXCallingConv_X86RegCall() {\n+        return (int)8L;\n@@ -3311,2 +4849,2 @@\n-    public static @C(\"int\") int CXCallingConv_IntelOclBicc() {\n-        return Index_h$constants_0.CXCallingConv_IntelOclBicc();\n+    public static int CXCallingConv_IntelOclBicc() {\n+        return (int)9L;\n@@ -3314,2 +4852,2 @@\n-    public static @C(\"int\") int CXCallingConv_Win64() {\n-        return Index_h$constants_0.CXCallingConv_Win64();\n+    public static int CXCallingConv_Win64() {\n+        return (int)10L;\n@@ -3317,2 +4855,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86_64Win64() {\n-        return Index_h$constants_0.CXCallingConv_X86_64Win64();\n+    public static int CXCallingConv_X86_64Win64() {\n+        return (int)10L;\n@@ -3320,2 +4858,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86_64SysV() {\n-        return Index_h$constants_0.CXCallingConv_X86_64SysV();\n+    public static int CXCallingConv_X86_64SysV() {\n+        return (int)11L;\n@@ -3323,2 +4861,2 @@\n-    public static @C(\"int\") int CXCallingConv_X86VectorCall() {\n-        return Index_h$constants_0.CXCallingConv_X86VectorCall();\n+    public static int CXCallingConv_X86VectorCall() {\n+        return (int)12L;\n@@ -3326,2 +4864,2 @@\n-    public static @C(\"int\") int CXCallingConv_Swift() {\n-        return Index_h$constants_0.CXCallingConv_Swift();\n+    public static int CXCallingConv_Swift() {\n+        return (int)13L;\n@@ -3329,2 +4867,2 @@\n-    public static @C(\"int\") int CXCallingConv_PreserveMost() {\n-        return Index_h$constants_0.CXCallingConv_PreserveMost();\n+    public static int CXCallingConv_PreserveMost() {\n+        return (int)14L;\n@@ -3332,2 +4870,2 @@\n-    public static @C(\"int\") int CXCallingConv_PreserveAll() {\n-        return Index_h$constants_0.CXCallingConv_PreserveAll();\n+    public static int CXCallingConv_PreserveAll() {\n+        return (int)15L;\n@@ -3335,2 +4873,2 @@\n-    public static @C(\"int\") int CXCallingConv_AArch64VectorCall() {\n-        return Index_h$constants_0.CXCallingConv_AArch64VectorCall();\n+    public static int CXCallingConv_AArch64VectorCall() {\n+        return (int)16L;\n@@ -3338,2 +4876,2 @@\n-    public static @C(\"int\") int CXCallingConv_Invalid() {\n-        return Index_h$constants_0.CXCallingConv_Invalid();\n+    public static int CXCallingConv_Invalid() {\n+        return (int)100L;\n@@ -3341,2 +4879,2 @@\n-    public static @C(\"int\") int CXCallingConv_Unexposed() {\n-        return Index_h$constants_0.CXCallingConv_Unexposed();\n+    public static int CXCallingConv_Unexposed() {\n+        return (int)200L;\n@@ -3346,1 +4884,5 @@\n-        private CXType() {}\n+        static final MemoryLayout CXType$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        );\n@@ -3348,1 +4890,1 @@\n-            return Index_h$constants_0.CXType$struct$LAYOUT();\n+            return CXType.CXType$struct$LAYOUT;\n@@ -3350,0 +4892,1 @@\n+        static final VarHandle kind$VH = CXType$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n@@ -3351,1 +4894,1 @@\n-            return Index_h$constants_0.CXType$kind$VH();\n+            return CXType.kind$VH;\n@@ -3353,2 +4896,2 @@\n-        public static  @C(\"enum CXTypeKind\") int kind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_0.CXType$kind$VH().get(seg);\n+        public static int kind$get(MemorySegment seg) {\n+            return (int)CXType.kind$VH.get(seg);\n@@ -3356,2 +4899,2 @@\n-        public static  @C(\"enum CXTypeKind\") int kind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_0.CXType$kind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void kind$set( MemorySegment seg, int x) {\n+            CXType.kind$VH.set(seg, x);\n@@ -3359,2 +4902,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, @C(\"enum CXTypeKind\") int x) {\n-            Index_h$constants_0.CXType$kind$VH().set(seg, x);\n+        public static int kind$get(MemorySegment seg, long index) {\n+            return (int)CXType.kind$VH.get(seg.asSlice(index*sizeof()));\n@@ -3362,2 +4905,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"enum CXTypeKind\") int x) {\n-            Index_h$constants_0.CXType$kind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void kind$set(MemorySegment seg, long index, int x) {\n+            CXType.kind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -3369,3 +4912,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -3373,1 +4916,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -3376,1 +4919,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -3379,1 +4922,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -3382,1 +4925,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -3385,2 +4928,2 @@\n-    public static  MethodHandle clang_getCursorType$MH() {\n-        return Index_h$constants_0.clang_getCursorType$MH();\n+    public static MethodHandle clang_getCursorType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$19.clang_getCursorType$MH,\"clang_getCursorType\");\n@@ -3388,1 +4931,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getCursorType (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_getCursorType ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getCursorType$MH, \"clang_getCursorType\");\n@@ -3390,3 +4934,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorType$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3395,2 +4939,2 @@\n-    public static  MethodHandle clang_getTypeSpelling$MH() {\n-        return Index_h$constants_0.clang_getTypeSpelling$MH();\n+    public static MethodHandle clang_getTypeSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$19.clang_getTypeSpelling$MH,\"clang_getTypeSpelling\");\n@@ -3398,1 +4942,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getTypeSpelling (@C(\"CXType\") MemorySegment CT) {\n+    public static MemorySegment clang_getTypeSpelling ( MemorySegment CT) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getTypeSpelling$MH, \"clang_getTypeSpelling\");\n@@ -3400,3 +4945,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTypeSpelling$MH().invokeExact(CT);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CT);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3405,2 +4950,2 @@\n-    public static  MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n-        return Index_h$constants_0.clang_getTypedefDeclUnderlyingType$MH();\n+    public static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$19.clang_getTypedefDeclUnderlyingType$MH,\"clang_getTypedefDeclUnderlyingType\");\n@@ -3408,1 +4953,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getTypedefDeclUnderlyingType (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getTypedefDeclUnderlyingType$MH, \"clang_getTypedefDeclUnderlyingType\");\n@@ -3410,3 +4956,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTypedefDeclUnderlyingType$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3415,2 +4961,2 @@\n-    public static  MethodHandle clang_getEnumDeclIntegerType$MH() {\n-        return Index_h$constants_0.clang_getEnumDeclIntegerType$MH();\n+    public static MethodHandle clang_getEnumDeclIntegerType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$19.clang_getEnumDeclIntegerType$MH,\"clang_getEnumDeclIntegerType\");\n@@ -3418,1 +4964,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getEnumDeclIntegerType (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_getEnumDeclIntegerType ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getEnumDeclIntegerType$MH, \"clang_getEnumDeclIntegerType\");\n@@ -3420,3 +4967,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getEnumDeclIntegerType$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3425,2 +4972,102 @@\n-    public static  MethodHandle clang_getEnumConstantDeclValue$MH() {\n-        return Index_h$constants_0.clang_getEnumConstantDeclValue$MH();\n+    public static class constants$19 {\n+\n+        static final FunctionDescriptor clang_getCursorLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$19.clang_getCursorLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorExtent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorExtent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorExtent\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$19.clang_getCursorExtent$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$19.clang_getCursorType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTypeSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTypeSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTypeSpelling\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$19.clang_getTypeSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTypedefDeclUnderlyingType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTypedefDeclUnderlyingType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$19.clang_getTypedefDeclUnderlyingType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getEnumDeclIntegerType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getEnumDeclIntegerType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$19.clang_getEnumDeclIntegerType$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getEnumConstantDeclValue$MH() {\n+        return RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclValue$MH,\"clang_getEnumConstantDeclValue\");\n@@ -3428,1 +5075,2 @@\n-    public static @C(\"long long\") long clang_getEnumConstantDeclValue (@C(\"CXCursor\") MemorySegment C) {\n+    public static long clang_getEnumConstantDeclValue ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclValue$MH, \"clang_getEnumConstantDeclValue\");\n@@ -3430,3 +5078,3 @@\n-            return (long)Index_h$constants_0.clang_getEnumConstantDeclValue$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3435,2 +5083,2 @@\n-    public static  MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() {\n-        return Index_h$constants_0.clang_getEnumConstantDeclUnsignedValue$MH();\n+    public static MethodHandle clang_getEnumConstantDeclUnsignedValue$MH() {\n+        return RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclUnsignedValue$MH,\"clang_getEnumConstantDeclUnsignedValue\");\n@@ -3438,1 +5086,2 @@\n-    public static @C(\"unsigned long long\") long clang_getEnumConstantDeclUnsignedValue (@C(\"CXCursor\") MemorySegment C) {\n+    public static long clang_getEnumConstantDeclUnsignedValue ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclUnsignedValue$MH, \"clang_getEnumConstantDeclUnsignedValue\");\n@@ -3440,3 +5089,3 @@\n-            return (long)Index_h$constants_0.clang_getEnumConstantDeclUnsignedValue$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3445,2 +5094,2 @@\n-    public static  MethodHandle clang_getFieldDeclBitWidth$MH() {\n-        return Index_h$constants_0.clang_getFieldDeclBitWidth$MH();\n+    public static MethodHandle clang_getFieldDeclBitWidth$MH() {\n+        return RuntimeHelper.requireNonNull(constants$20.clang_getFieldDeclBitWidth$MH,\"clang_getFieldDeclBitWidth\");\n@@ -3448,1 +5097,2 @@\n-    public static @C(\"int\") int clang_getFieldDeclBitWidth (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_getFieldDeclBitWidth ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_getFieldDeclBitWidth$MH, \"clang_getFieldDeclBitWidth\");\n@@ -3450,3 +5100,3 @@\n-            return (int)Index_h$constants_0.clang_getFieldDeclBitWidth$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3455,2 +5105,2 @@\n-    public static  MethodHandle clang_Cursor_getNumArguments$MH() {\n-        return Index_h$constants_0.clang_Cursor_getNumArguments$MH();\n+    public static MethodHandle clang_Cursor_getNumArguments$MH() {\n+        return RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumArguments$MH,\"clang_Cursor_getNumArguments\");\n@@ -3458,1 +5108,2 @@\n-    public static @C(\"int\") int clang_Cursor_getNumArguments (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_getNumArguments ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumArguments$MH, \"clang_Cursor_getNumArguments\");\n@@ -3460,3 +5111,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_getNumArguments$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3465,2 +5116,2 @@\n-    public static  MethodHandle clang_Cursor_getArgument$MH() {\n-        return Index_h$constants_0.clang_Cursor_getArgument$MH();\n+    public static MethodHandle clang_Cursor_getArgument$MH() {\n+        return RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getArgument$MH,\"clang_Cursor_getArgument\");\n@@ -3468,1 +5119,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_Cursor_getArgument (@C(\"CXCursor\") MemorySegment C, @C(\"unsigned int\") int i) {\n+    public static MemorySegment clang_Cursor_getArgument ( MemorySegment C,  int i) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getArgument$MH, \"clang_Cursor_getArgument\");\n@@ -3470,3 +5122,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Cursor_getArgument$MH().invokeExact(C, i);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C, i);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3475,2 +5127,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Null() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Null();\n+    public static int CXTemplateArgumentKind_Null() {\n+        return (int)0L;\n@@ -3478,2 +5130,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Type() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Type();\n+    public static int CXTemplateArgumentKind_Type() {\n+        return (int)1L;\n@@ -3481,2 +5133,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Declaration() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Declaration();\n+    public static int CXTemplateArgumentKind_Declaration() {\n+        return (int)2L;\n@@ -3484,2 +5136,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_NullPtr() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_NullPtr();\n+    public static int CXTemplateArgumentKind_NullPtr() {\n+        return (int)3L;\n@@ -3487,2 +5139,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Integral() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Integral();\n+    public static int CXTemplateArgumentKind_Integral() {\n+        return (int)4L;\n@@ -3490,2 +5142,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Template() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Template();\n+    public static int CXTemplateArgumentKind_Template() {\n+        return (int)5L;\n@@ -3493,2 +5145,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_TemplateExpansion() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_TemplateExpansion();\n+    public static int CXTemplateArgumentKind_TemplateExpansion() {\n+        return (int)6L;\n@@ -3496,2 +5148,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Expression() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Expression();\n+    public static int CXTemplateArgumentKind_Expression() {\n+        return (int)7L;\n@@ -3499,2 +5151,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Pack() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Pack();\n+    public static int CXTemplateArgumentKind_Pack() {\n+        return (int)8L;\n@@ -3502,2 +5154,2 @@\n-    public static @C(\"int\") int CXTemplateArgumentKind_Invalid() {\n-        return Index_h$constants_0.CXTemplateArgumentKind_Invalid();\n+    public static int CXTemplateArgumentKind_Invalid() {\n+        return (int)9L;\n@@ -3505,2 +5157,2 @@\n-    public static  MethodHandle clang_Cursor_getNumTemplateArguments$MH() {\n-        return Index_h$constants_0.clang_Cursor_getNumTemplateArguments$MH();\n+    public static MethodHandle clang_Cursor_getNumTemplateArguments$MH() {\n+        return RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumTemplateArguments$MH,\"clang_Cursor_getNumTemplateArguments\");\n@@ -3508,1 +5160,2 @@\n-    public static @C(\"int\") int clang_Cursor_getNumTemplateArguments (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_getNumTemplateArguments ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumTemplateArguments$MH, \"clang_Cursor_getNumTemplateArguments\");\n@@ -3510,3 +5163,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_getNumTemplateArguments$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3515,2 +5168,83 @@\n-    public static  MethodHandle clang_Cursor_getTemplateArgumentKind$MH() {\n-        return Index_h$constants_0.clang_Cursor_getTemplateArgumentKind$MH();\n+    public static class constants$20 {\n+\n+        static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getEnumConstantDeclValue$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getEnumConstantDeclValue\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+            constants$20.clang_getEnumConstantDeclValue$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getEnumConstantDeclUnsignedValue$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getEnumConstantDeclUnsignedValue\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+            constants$20.clang_getEnumConstantDeclUnsignedValue$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getFieldDeclBitWidth$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFieldDeclBitWidth\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$20.clang_getFieldDeclBitWidth$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getNumArguments$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getNumArguments\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$20.clang_Cursor_getNumArguments$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getArgument$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Cursor_getArgument$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getArgument\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$20.clang_Cursor_getArgument$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getNumTemplateArguments$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getNumTemplateArguments\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$20.clang_Cursor_getNumTemplateArguments$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Cursor_getTemplateArgumentKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentKind$MH,\"clang_Cursor_getTemplateArgumentKind\");\n@@ -3518,1 +5252,2 @@\n-    public static @C(\"enum CXTemplateArgumentKind\") int clang_Cursor_getTemplateArgumentKind (@C(\"CXCursor\") MemorySegment C, @C(\"unsigned int\") int I) {\n+    public static int clang_Cursor_getTemplateArgumentKind ( MemorySegment C,  int I) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentKind$MH, \"clang_Cursor_getTemplateArgumentKind\");\n@@ -3520,3 +5255,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_getTemplateArgumentKind$MH().invokeExact(C, I);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C, I);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3525,2 +5260,2 @@\n-    public static  MethodHandle clang_Cursor_getTemplateArgumentType$MH() {\n-        return Index_h$constants_0.clang_Cursor_getTemplateArgumentType$MH();\n+    public static MethodHandle clang_Cursor_getTemplateArgumentType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentType$MH,\"clang_Cursor_getTemplateArgumentType\");\n@@ -3528,1 +5263,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Cursor_getTemplateArgumentType (@C(\"CXCursor\") MemorySegment C, @C(\"unsigned int\") int I) {\n+    public static MemorySegment clang_Cursor_getTemplateArgumentType ( MemorySegment C,  int I) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentType$MH, \"clang_Cursor_getTemplateArgumentType\");\n@@ -3530,3 +5266,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Cursor_getTemplateArgumentType$MH().invokeExact(C, I);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C, I);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3535,2 +5271,2 @@\n-    public static  MethodHandle clang_Cursor_getTemplateArgumentValue$MH() {\n-        return Index_h$constants_0.clang_Cursor_getTemplateArgumentValue$MH();\n+    public static MethodHandle clang_Cursor_getTemplateArgumentValue$MH() {\n+        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentValue$MH,\"clang_Cursor_getTemplateArgumentValue\");\n@@ -3538,1 +5274,2 @@\n-    public static @C(\"long long\") long clang_Cursor_getTemplateArgumentValue (@C(\"CXCursor\") MemorySegment C, @C(\"unsigned int\") int I) {\n+    public static long clang_Cursor_getTemplateArgumentValue ( MemorySegment C,  int I) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentValue$MH, \"clang_Cursor_getTemplateArgumentValue\");\n@@ -3540,3 +5277,3 @@\n-            return (long)Index_h$constants_0.clang_Cursor_getTemplateArgumentValue$MH().invokeExact(C, I);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(C, I);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3545,2 +5282,2 @@\n-    public static  MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH() {\n-        return Index_h$constants_0.clang_Cursor_getTemplateArgumentUnsignedValue$MH();\n+    public static MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH() {\n+        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentUnsignedValue$MH,\"clang_Cursor_getTemplateArgumentUnsignedValue\");\n@@ -3548,1 +5285,2 @@\n-    public static @C(\"unsigned long long\") long clang_Cursor_getTemplateArgumentUnsignedValue (@C(\"CXCursor\") MemorySegment C, @C(\"unsigned int\") int I) {\n+    public static long clang_Cursor_getTemplateArgumentUnsignedValue ( MemorySegment C,  int I) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentUnsignedValue$MH, \"clang_Cursor_getTemplateArgumentUnsignedValue\");\n@@ -3550,3 +5288,3 @@\n-            return (long)Index_h$constants_0.clang_Cursor_getTemplateArgumentUnsignedValue$MH().invokeExact(C, I);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(C, I);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3555,2 +5293,2 @@\n-    public static  MethodHandle clang_equalTypes$MH() {\n-        return Index_h$constants_0.clang_equalTypes$MH();\n+    public static MethodHandle clang_equalTypes$MH() {\n+        return RuntimeHelper.requireNonNull(constants$21.clang_equalTypes$MH,\"clang_equalTypes\");\n@@ -3558,1 +5296,2 @@\n-    public static @C(\"unsigned int\") int clang_equalTypes (@C(\"CXType\") MemorySegment A, @C(\"CXType\") MemorySegment B) {\n+    public static int clang_equalTypes ( MemorySegment A,  MemorySegment B) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_equalTypes$MH, \"clang_equalTypes\");\n@@ -3560,3 +5299,3 @@\n-            return (int)Index_h$constants_0.clang_equalTypes$MH().invokeExact(A, B);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(A, B);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3565,2 +5304,2 @@\n-    public static  MethodHandle clang_getCanonicalType$MH() {\n-        return Index_h$constants_0.clang_getCanonicalType$MH();\n+    public static MethodHandle clang_getCanonicalType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$21.clang_getCanonicalType$MH,\"clang_getCanonicalType\");\n@@ -3568,1 +5307,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getCanonicalType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_getCanonicalType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_getCanonicalType$MH, \"clang_getCanonicalType\");\n@@ -3570,3 +5310,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCanonicalType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3575,2 +5315,91 @@\n-    public static  MethodHandle clang_getLocalUnqualifiedType$MH() {\n-        return Index_h$constants_0.clang_getLocalUnqualifiedType$MH();\n+    public static class constants$21 {\n+\n+        static final FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Cursor_getTemplateArgumentKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getTemplateArgumentKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)I\",\n+            constants$21.clang_Cursor_getTemplateArgumentKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Cursor_getTemplateArgumentType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getTemplateArgumentType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$21.clang_Cursor_getTemplateArgumentType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Cursor_getTemplateArgumentValue$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getTemplateArgumentValue\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)J\",\n+            constants$21.clang_Cursor_getTemplateArgumentValue$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getTemplateArgumentUnsignedValue\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)J\",\n+            constants$21.clang_Cursor_getTemplateArgumentUnsignedValue$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_equalTypes$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_equalTypes$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_equalTypes\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$21.clang_equalTypes$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCanonicalType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCanonicalType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCanonicalType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$21.clang_getCanonicalType$FUNC, false\n+        );\n@@ -3578,1 +5407,6 @@\n-    public static @C(\"CXType\") MemorySegment clang_getLocalUnqualifiedType (@C(\"CXType\") MemorySegment T) {\n+\n+    public static MethodHandle clang_getLocalUnqualifiedType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$22.clang_getLocalUnqualifiedType$MH,\"clang_getLocalUnqualifiedType\");\n+    }\n+    public static MemorySegment clang_getLocalUnqualifiedType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_getLocalUnqualifiedType$MH, \"clang_getLocalUnqualifiedType\");\n@@ -3580,3 +5414,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getLocalUnqualifiedType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3585,2 +5419,2 @@\n-    public static  MethodHandle clang_isConstQualifiedType$MH() {\n-        return Index_h$constants_0.clang_isConstQualifiedType$MH();\n+    public static MethodHandle clang_isConstQualifiedType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$22.clang_isConstQualifiedType$MH,\"clang_isConstQualifiedType\");\n@@ -3588,1 +5422,2 @@\n-    public static @C(\"unsigned int\") int clang_isConstQualifiedType (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_isConstQualifiedType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_isConstQualifiedType$MH, \"clang_isConstQualifiedType\");\n@@ -3590,3 +5425,3 @@\n-            return (int)Index_h$constants_0.clang_isConstQualifiedType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3595,2 +5430,2 @@\n-    public static  MethodHandle clang_Cursor_isMacroFunctionLike$MH() {\n-        return Index_h$constants_0.clang_Cursor_isMacroFunctionLike$MH();\n+    public static MethodHandle clang_Cursor_isMacroFunctionLike$MH() {\n+        return RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroFunctionLike$MH,\"clang_Cursor_isMacroFunctionLike\");\n@@ -3598,1 +5433,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isMacroFunctionLike (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isMacroFunctionLike ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroFunctionLike$MH, \"clang_Cursor_isMacroFunctionLike\");\n@@ -3600,3 +5436,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_isMacroFunctionLike$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3605,2 +5441,2 @@\n-    public static  MethodHandle clang_Cursor_isMacroBuiltin$MH() {\n-        return Index_h$constants_0.clang_Cursor_isMacroBuiltin$MH();\n+    public static MethodHandle clang_Cursor_isMacroBuiltin$MH() {\n+        return RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroBuiltin$MH,\"clang_Cursor_isMacroBuiltin\");\n@@ -3608,1 +5444,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isMacroBuiltin (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isMacroBuiltin ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroBuiltin$MH, \"clang_Cursor_isMacroBuiltin\");\n@@ -3610,3 +5447,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_isMacroBuiltin$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3615,2 +5452,2 @@\n-    public static  MethodHandle clang_Cursor_isFunctionInlined$MH() {\n-        return Index_h$constants_0.clang_Cursor_isFunctionInlined$MH();\n+    public static MethodHandle clang_Cursor_isFunctionInlined$MH() {\n+        return RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isFunctionInlined$MH,\"clang_Cursor_isFunctionInlined\");\n@@ -3618,1 +5455,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isFunctionInlined (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isFunctionInlined ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isFunctionInlined$MH, \"clang_Cursor_isFunctionInlined\");\n@@ -3620,3 +5458,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_isFunctionInlined$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3625,2 +5463,2 @@\n-    public static  MethodHandle clang_isVolatileQualifiedType$MH() {\n-        return Index_h$constants_0.clang_isVolatileQualifiedType$MH();\n+    public static MethodHandle clang_isVolatileQualifiedType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$22.clang_isVolatileQualifiedType$MH,\"clang_isVolatileQualifiedType\");\n@@ -3628,1 +5466,2 @@\n-    public static @C(\"unsigned int\") int clang_isVolatileQualifiedType (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_isVolatileQualifiedType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_isVolatileQualifiedType$MH, \"clang_isVolatileQualifiedType\");\n@@ -3630,3 +5469,3 @@\n-            return (int)Index_h$constants_0.clang_isVolatileQualifiedType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3635,2 +5474,82 @@\n-    public static  MethodHandle clang_isRestrictQualifiedType$MH() {\n-        return Index_h$constants_0.clang_isRestrictQualifiedType$MH();\n+    public static class constants$22 {\n+\n+        static final FunctionDescriptor clang_getLocalUnqualifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getLocalUnqualifiedType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getLocalUnqualifiedType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$22.clang_getLocalUnqualifiedType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isConstQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isConstQualifiedType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isConstQualifiedType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$22.clang_isConstQualifiedType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isMacroFunctionLike$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isMacroFunctionLike\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$22.clang_Cursor_isMacroFunctionLike$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isMacroBuiltin$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isMacroBuiltin\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$22.clang_Cursor_isMacroBuiltin$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isFunctionInlined$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isFunctionInlined\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$22.clang_Cursor_isFunctionInlined$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isVolatileQualifiedType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isVolatileQualifiedType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$22.clang_isVolatileQualifiedType$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_isRestrictQualifiedType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$23.clang_isRestrictQualifiedType$MH,\"clang_isRestrictQualifiedType\");\n@@ -3638,1 +5557,2 @@\n-    public static @C(\"unsigned int\") int clang_isRestrictQualifiedType (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_isRestrictQualifiedType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_isRestrictQualifiedType$MH, \"clang_isRestrictQualifiedType\");\n@@ -3640,3 +5560,3 @@\n-            return (int)Index_h$constants_0.clang_isRestrictQualifiedType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3645,2 +5565,2 @@\n-    public static  MethodHandle clang_getAddressSpace$MH() {\n-        return Index_h$constants_0.clang_getAddressSpace$MH();\n+    public static MethodHandle clang_getAddressSpace$MH() {\n+        return RuntimeHelper.requireNonNull(constants$23.clang_getAddressSpace$MH,\"clang_getAddressSpace\");\n@@ -3648,1 +5568,2 @@\n-    public static @C(\"unsigned int\") int clang_getAddressSpace (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_getAddressSpace ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getAddressSpace$MH, \"clang_getAddressSpace\");\n@@ -3650,3 +5571,3 @@\n-            return (int)Index_h$constants_0.clang_getAddressSpace$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3655,2 +5576,2 @@\n-    public static  MethodHandle clang_getTypedefName$MH() {\n-        return Index_h$constants_0.clang_getTypedefName$MH();\n+    public static MethodHandle clang_getTypedefName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$23.clang_getTypedefName$MH,\"clang_getTypedefName\");\n@@ -3658,1 +5579,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getTypedefName (@C(\"CXType\") MemorySegment CT) {\n+    public static MemorySegment clang_getTypedefName ( MemorySegment CT) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getTypedefName$MH, \"clang_getTypedefName\");\n@@ -3660,3 +5582,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTypedefName$MH().invokeExact(CT);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CT);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3665,2 +5587,2 @@\n-    public static  MethodHandle clang_getPointeeType$MH() {\n-        return Index_h$constants_0.clang_getPointeeType$MH();\n+    public static MethodHandle clang_getPointeeType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$23.clang_getPointeeType$MH,\"clang_getPointeeType\");\n@@ -3668,1 +5590,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getPointeeType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_getPointeeType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getPointeeType$MH, \"clang_getPointeeType\");\n@@ -3670,3 +5593,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getPointeeType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3675,2 +5598,2 @@\n-    public static  MethodHandle clang_getTypeDeclaration$MH() {\n-        return Index_h$constants_0.clang_getTypeDeclaration$MH();\n+    public static MethodHandle clang_getTypeDeclaration$MH() {\n+        return RuntimeHelper.requireNonNull(constants$23.clang_getTypeDeclaration$MH,\"clang_getTypeDeclaration\");\n@@ -3678,1 +5601,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getTypeDeclaration (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_getTypeDeclaration ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getTypeDeclaration$MH, \"clang_getTypeDeclaration\");\n@@ -3680,3 +5604,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTypeDeclaration$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3685,2 +5609,2 @@\n-    public static  MethodHandle clang_getDeclObjCTypeEncoding$MH() {\n-        return Index_h$constants_0.clang_getDeclObjCTypeEncoding$MH();\n+    public static MethodHandle clang_getDeclObjCTypeEncoding$MH() {\n+        return RuntimeHelper.requireNonNull(constants$23.clang_getDeclObjCTypeEncoding$MH,\"clang_getDeclObjCTypeEncoding\");\n@@ -3688,1 +5612,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getDeclObjCTypeEncoding (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_getDeclObjCTypeEncoding ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getDeclObjCTypeEncoding$MH, \"clang_getDeclObjCTypeEncoding\");\n@@ -3690,3 +5615,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getDeclObjCTypeEncoding$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3695,2 +5620,90 @@\n-    public static  MethodHandle clang_Type_getObjCEncoding$MH() {\n-        return Index_h$constants_0.clang_Type_getObjCEncoding$MH();\n+    public static class constants$23 {\n+\n+        static final FunctionDescriptor clang_isRestrictQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isRestrictQualifiedType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isRestrictQualifiedType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$23.clang_isRestrictQualifiedType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getAddressSpace$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getAddressSpace$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getAddressSpace\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$23.clang_getAddressSpace$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTypedefName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTypedefName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTypedefName\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$23.clang_getTypedefName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getPointeeType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getPointeeType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getPointeeType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$23.clang_getPointeeType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTypeDeclaration$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTypeDeclaration$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTypeDeclaration\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$23.clang_getTypeDeclaration$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getDeclObjCTypeEncoding$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDeclObjCTypeEncoding\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$23.clang_getDeclObjCTypeEncoding$FUNC, false\n+        );\n@@ -3698,1 +5711,6 @@\n-    public static @C(\"CXString\") MemorySegment clang_Type_getObjCEncoding (@C(\"CXType\") MemorySegment type) {\n+\n+    public static MethodHandle clang_Type_getObjCEncoding$MH() {\n+        return RuntimeHelper.requireNonNull(constants$24.clang_Type_getObjCEncoding$MH,\"clang_Type_getObjCEncoding\");\n+    }\n+    public static MemorySegment clang_Type_getObjCEncoding ( MemorySegment type) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_Type_getObjCEncoding$MH, \"clang_Type_getObjCEncoding\");\n@@ -3700,3 +5718,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Type_getObjCEncoding$MH().invokeExact(type);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(type);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3705,2 +5723,2 @@\n-    public static  MethodHandle clang_getTypeKindSpelling$MH() {\n-        return Index_h$constants_0.clang_getTypeKindSpelling$MH();\n+    public static MethodHandle clang_getTypeKindSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$24.clang_getTypeKindSpelling$MH,\"clang_getTypeKindSpelling\");\n@@ -3708,1 +5726,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getTypeKindSpelling (@C(\"enum CXTypeKind\") int K) {\n+    public static MemorySegment clang_getTypeKindSpelling ( int K) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getTypeKindSpelling$MH, \"clang_getTypeKindSpelling\");\n@@ -3710,3 +5729,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getTypeKindSpelling$MH().invokeExact(K);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(K);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3715,2 +5734,2 @@\n-    public static  MethodHandle clang_getFunctionTypeCallingConv$MH() {\n-        return Index_h$constants_0.clang_getFunctionTypeCallingConv$MH();\n+    public static MethodHandle clang_getFunctionTypeCallingConv$MH() {\n+        return RuntimeHelper.requireNonNull(constants$24.clang_getFunctionTypeCallingConv$MH,\"clang_getFunctionTypeCallingConv\");\n@@ -3718,1 +5737,2 @@\n-    public static @C(\"enum CXCallingConv\") int clang_getFunctionTypeCallingConv (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_getFunctionTypeCallingConv ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getFunctionTypeCallingConv$MH, \"clang_getFunctionTypeCallingConv\");\n@@ -3720,3 +5740,3 @@\n-            return (int)Index_h$constants_0.clang_getFunctionTypeCallingConv$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3725,2 +5745,2 @@\n-    public static  MethodHandle clang_getResultType$MH() {\n-        return Index_h$constants_0.clang_getResultType$MH();\n+    public static MethodHandle clang_getResultType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$24.clang_getResultType$MH,\"clang_getResultType\");\n@@ -3728,1 +5748,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getResultType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_getResultType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getResultType$MH, \"clang_getResultType\");\n@@ -3730,3 +5751,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getResultType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3735,2 +5756,2 @@\n-    public static  MethodHandle clang_getExceptionSpecificationType$MH() {\n-        return Index_h$constants_0.clang_getExceptionSpecificationType$MH();\n+    public static MethodHandle clang_getExceptionSpecificationType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$24.clang_getExceptionSpecificationType$MH,\"clang_getExceptionSpecificationType\");\n@@ -3738,1 +5759,2 @@\n-    public static @C(\"int\") int clang_getExceptionSpecificationType (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_getExceptionSpecificationType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getExceptionSpecificationType$MH, \"clang_getExceptionSpecificationType\");\n@@ -3740,3 +5762,3 @@\n-            return (int)Index_h$constants_0.clang_getExceptionSpecificationType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3745,2 +5767,2 @@\n-    public static  MethodHandle clang_getNumArgTypes$MH() {\n-        return Index_h$constants_0.clang_getNumArgTypes$MH();\n+    public static MethodHandle clang_getNumArgTypes$MH() {\n+        return RuntimeHelper.requireNonNull(constants$24.clang_getNumArgTypes$MH,\"clang_getNumArgTypes\");\n@@ -3748,1 +5770,2 @@\n-    public static @C(\"int\") int clang_getNumArgTypes (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_getNumArgTypes ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getNumArgTypes$MH, \"clang_getNumArgTypes\");\n@@ -3750,3 +5773,3 @@\n-            return (int)Index_h$constants_0.clang_getNumArgTypes$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3755,2 +5778,82 @@\n-    public static  MethodHandle clang_getArgType$MH() {\n-        return Index_h$constants_0.clang_getArgType$MH();\n+    public static class constants$24 {\n+\n+        static final FunctionDescriptor clang_Type_getObjCEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getObjCEncoding$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getObjCEncoding\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$24.clang_Type_getObjCEncoding$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTypeKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_getTypeKindSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTypeKindSpelling\",\n+            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$24.clang_getTypeKindSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getFunctionTypeCallingConv$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getFunctionTypeCallingConv\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$24.clang_getFunctionTypeCallingConv$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getResultType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getResultType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getResultType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$24.clang_getResultType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getExceptionSpecificationType$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getExceptionSpecificationType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getExceptionSpecificationType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$24.clang_getExceptionSpecificationType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getNumArgTypes$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getNumArgTypes$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNumArgTypes\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$24.clang_getNumArgTypes$FUNC, false\n+        );\n@@ -3758,1 +5861,6 @@\n-    public static @C(\"CXType\") MemorySegment clang_getArgType (@C(\"CXType\") MemorySegment T, @C(\"unsigned int\") int i) {\n+\n+    public static MethodHandle clang_getArgType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$25.clang_getArgType$MH,\"clang_getArgType\");\n+    }\n+    public static MemorySegment clang_getArgType ( MemorySegment T,  int i) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_getArgType$MH, \"clang_getArgType\");\n@@ -3760,3 +5868,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getArgType$MH().invokeExact(T, i);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3765,2 +5873,2 @@\n-    public static  MethodHandle clang_Type_getObjCObjectBaseType$MH() {\n-        return Index_h$constants_0.clang_Type_getObjCObjectBaseType$MH();\n+    public static MethodHandle clang_Type_getObjCObjectBaseType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCObjectBaseType$MH,\"clang_Type_getObjCObjectBaseType\");\n@@ -3768,1 +5876,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Type_getObjCObjectBaseType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_Type_getObjCObjectBaseType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCObjectBaseType$MH, \"clang_Type_getObjCObjectBaseType\");\n@@ -3770,3 +5879,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Type_getObjCObjectBaseType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3775,2 +5884,2 @@\n-    public static  MethodHandle clang_Type_getNumObjCProtocolRefs$MH() {\n-        return Index_h$constants_0.clang_Type_getNumObjCProtocolRefs$MH();\n+    public static MethodHandle clang_Type_getNumObjCProtocolRefs$MH() {\n+        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCProtocolRefs$MH,\"clang_Type_getNumObjCProtocolRefs\");\n@@ -3778,1 +5887,2 @@\n-    public static @C(\"unsigned int\") int clang_Type_getNumObjCProtocolRefs (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_Type_getNumObjCProtocolRefs ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCProtocolRefs$MH, \"clang_Type_getNumObjCProtocolRefs\");\n@@ -3780,3 +5890,3 @@\n-            return (int)Index_h$constants_0.clang_Type_getNumObjCProtocolRefs$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3785,2 +5895,2 @@\n-    public static  MethodHandle clang_Type_getObjCProtocolDecl$MH() {\n-        return Index_h$constants_0.clang_Type_getObjCProtocolDecl$MH();\n+    public static MethodHandle clang_Type_getObjCProtocolDecl$MH() {\n+        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCProtocolDecl$MH,\"clang_Type_getObjCProtocolDecl\");\n@@ -3788,1 +5898,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_Type_getObjCProtocolDecl (@C(\"CXType\") MemorySegment T, @C(\"unsigned int\") int i) {\n+    public static MemorySegment clang_Type_getObjCProtocolDecl ( MemorySegment T,  int i) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCProtocolDecl$MH, \"clang_Type_getObjCProtocolDecl\");\n@@ -3790,3 +5901,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Type_getObjCProtocolDecl$MH().invokeExact(T, i);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3795,2 +5906,2 @@\n-    public static  MethodHandle clang_Type_getNumObjCTypeArgs$MH() {\n-        return Index_h$constants_0.clang_Type_getNumObjCTypeArgs$MH();\n+    public static MethodHandle clang_Type_getNumObjCTypeArgs$MH() {\n+        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCTypeArgs$MH,\"clang_Type_getNumObjCTypeArgs\");\n@@ -3798,1 +5909,2 @@\n-    public static @C(\"unsigned int\") int clang_Type_getNumObjCTypeArgs (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_Type_getNumObjCTypeArgs ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCTypeArgs$MH, \"clang_Type_getNumObjCTypeArgs\");\n@@ -3800,3 +5912,3 @@\n-            return (int)Index_h$constants_0.clang_Type_getNumObjCTypeArgs$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3805,2 +5917,2 @@\n-    public static  MethodHandle clang_Type_getObjCTypeArg$MH() {\n-        return Index_h$constants_0.clang_Type_getObjCTypeArg$MH();\n+    public static MethodHandle clang_Type_getObjCTypeArg$MH() {\n+        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCTypeArg$MH,\"clang_Type_getObjCTypeArg\");\n@@ -3808,1 +5920,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Type_getObjCTypeArg (@C(\"CXType\") MemorySegment T, @C(\"unsigned int\") int i) {\n+    public static MemorySegment clang_Type_getObjCTypeArg ( MemorySegment T,  int i) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCTypeArg$MH, \"clang_Type_getObjCTypeArg\");\n@@ -3810,3 +5923,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Type_getObjCTypeArg$MH().invokeExact(T, i);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3815,2 +5928,93 @@\n-    public static  MethodHandle clang_isFunctionTypeVariadic$MH() {\n-        return Index_h$constants_0.clang_isFunctionTypeVariadic$MH();\n+    public static class constants$25 {\n+\n+        static final FunctionDescriptor clang_getArgType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_getArgType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getArgType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$25.clang_getArgType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getObjCObjectBaseType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getObjCObjectBaseType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$25.clang_Type_getObjCObjectBaseType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getNumObjCProtocolRefs$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getNumObjCProtocolRefs\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$25.clang_Type_getNumObjCProtocolRefs$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Type_getObjCProtocolDecl$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getObjCProtocolDecl\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$25.clang_Type_getObjCProtocolDecl$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getNumObjCTypeArgs$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getNumObjCTypeArgs\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$25.clang_Type_getNumObjCTypeArgs$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getObjCTypeArg$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Type_getObjCTypeArg$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getObjCTypeArg\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$25.clang_Type_getObjCTypeArg$FUNC, false\n+        );\n@@ -3818,1 +6022,6 @@\n-    public static @C(\"unsigned int\") int clang_isFunctionTypeVariadic (@C(\"CXType\") MemorySegment T) {\n+\n+    public static MethodHandle clang_isFunctionTypeVariadic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$26.clang_isFunctionTypeVariadic$MH,\"clang_isFunctionTypeVariadic\");\n+    }\n+    public static int clang_isFunctionTypeVariadic ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_isFunctionTypeVariadic$MH, \"clang_isFunctionTypeVariadic\");\n@@ -3820,3 +6029,3 @@\n-            return (int)Index_h$constants_0.clang_isFunctionTypeVariadic$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3825,2 +6034,2 @@\n-    public static  MethodHandle clang_getCursorResultType$MH() {\n-        return Index_h$constants_0.clang_getCursorResultType$MH();\n+    public static MethodHandle clang_getCursorResultType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$26.clang_getCursorResultType$MH,\"clang_getCursorResultType\");\n@@ -3828,1 +6037,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getCursorResultType (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_getCursorResultType ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getCursorResultType$MH, \"clang_getCursorResultType\");\n@@ -3830,3 +6040,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getCursorResultType$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3835,2 +6045,2 @@\n-    public static  MethodHandle clang_getCursorExceptionSpecificationType$MH() {\n-        return Index_h$constants_0.clang_getCursorExceptionSpecificationType$MH();\n+    public static MethodHandle clang_getCursorExceptionSpecificationType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$26.clang_getCursorExceptionSpecificationType$MH,\"clang_getCursorExceptionSpecificationType\");\n@@ -3838,1 +6048,2 @@\n-    public static @C(\"int\") int clang_getCursorExceptionSpecificationType (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_getCursorExceptionSpecificationType ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getCursorExceptionSpecificationType$MH, \"clang_getCursorExceptionSpecificationType\");\n@@ -3840,3 +6051,3 @@\n-            return (int)Index_h$constants_0.clang_getCursorExceptionSpecificationType$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3845,2 +6056,2 @@\n-    public static  MethodHandle clang_isPODType$MH() {\n-        return Index_h$constants_0.clang_isPODType$MH();\n+    public static MethodHandle clang_isPODType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$26.clang_isPODType$MH,\"clang_isPODType\");\n@@ -3848,1 +6059,2 @@\n-    public static @C(\"unsigned int\") int clang_isPODType (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_isPODType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_isPODType$MH, \"clang_isPODType\");\n@@ -3850,3 +6062,3 @@\n-            return (int)Index_h$constants_0.clang_isPODType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3855,2 +6067,2 @@\n-    public static  MethodHandle clang_getElementType$MH() {\n-        return Index_h$constants_0.clang_getElementType$MH();\n+    public static MethodHandle clang_getElementType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$26.clang_getElementType$MH,\"clang_getElementType\");\n@@ -3858,1 +6070,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getElementType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_getElementType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getElementType$MH, \"clang_getElementType\");\n@@ -3860,3 +6073,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getElementType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3865,2 +6078,2 @@\n-    public static  MethodHandle clang_getNumElements$MH() {\n-        return Index_h$constants_0.clang_getNumElements$MH();\n+    public static MethodHandle clang_getNumElements$MH() {\n+        return RuntimeHelper.requireNonNull(constants$26.clang_getNumElements$MH,\"clang_getNumElements\");\n@@ -3868,1 +6081,2 @@\n-    public static @C(\"long long\") long clang_getNumElements (@C(\"CXType\") MemorySegment T) {\n+    public static long clang_getNumElements ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getNumElements$MH, \"clang_getNumElements\");\n@@ -3870,3 +6084,3 @@\n-            return (long)Index_h$constants_0.clang_getNumElements$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3875,2 +6089,86 @@\n-    public static  MethodHandle clang_getArrayElementType$MH() {\n-        return Index_h$constants_0.clang_getArrayElementType$MH();\n+    public static class constants$26 {\n+\n+        static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isFunctionTypeVariadic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isFunctionTypeVariadic\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$26.clang_isFunctionTypeVariadic$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorResultType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorResultType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorResultType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$26.clang_getCursorResultType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorExceptionSpecificationType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorExceptionSpecificationType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$26.clang_getCursorExceptionSpecificationType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isPODType$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isPODType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isPODType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$26.clang_isPODType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getElementType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getElementType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getElementType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$26.clang_getElementType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getNumElements$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getNumElements$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNumElements\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+            constants$26.clang_getNumElements$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getArrayElementType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$27.clang_getArrayElementType$MH,\"clang_getArrayElementType\");\n@@ -3878,1 +6176,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getArrayElementType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_getArrayElementType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_getArrayElementType$MH, \"clang_getArrayElementType\");\n@@ -3880,3 +6179,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_getArrayElementType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3885,2 +6184,2 @@\n-    public static  MethodHandle clang_getArraySize$MH() {\n-        return Index_h$constants_0.clang_getArraySize$MH();\n+    public static MethodHandle clang_getArraySize$MH() {\n+        return RuntimeHelper.requireNonNull(constants$27.clang_getArraySize$MH,\"clang_getArraySize\");\n@@ -3888,1 +6187,2 @@\n-    public static @C(\"long long\") long clang_getArraySize (@C(\"CXType\") MemorySegment T) {\n+    public static long clang_getArraySize ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_getArraySize$MH, \"clang_getArraySize\");\n@@ -3890,3 +6190,3 @@\n-            return (long)Index_h$constants_0.clang_getArraySize$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3895,2 +6195,2 @@\n-    public static  MethodHandle clang_Type_getNamedType$MH() {\n-        return Index_h$constants_0.clang_Type_getNamedType$MH();\n+    public static MethodHandle clang_Type_getNamedType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$27.clang_Type_getNamedType$MH,\"clang_Type_getNamedType\");\n@@ -3898,1 +6198,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Type_getNamedType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_Type_getNamedType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_getNamedType$MH, \"clang_Type_getNamedType\");\n@@ -3900,3 +6201,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Type_getNamedType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3905,2 +6206,2 @@\n-    public static  MethodHandle clang_Type_isTransparentTagTypedef$MH() {\n-        return Index_h$constants_0.clang_Type_isTransparentTagTypedef$MH();\n+    public static MethodHandle clang_Type_isTransparentTagTypedef$MH() {\n+        return RuntimeHelper.requireNonNull(constants$27.clang_Type_isTransparentTagTypedef$MH,\"clang_Type_isTransparentTagTypedef\");\n@@ -3908,1 +6209,2 @@\n-    public static @C(\"unsigned int\") int clang_Type_isTransparentTagTypedef (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_Type_isTransparentTagTypedef ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_isTransparentTagTypedef$MH, \"clang_Type_isTransparentTagTypedef\");\n@@ -3910,3 +6212,3 @@\n-            return (int)Index_h$constants_0.clang_Type_isTransparentTagTypedef$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3915,2 +6217,2 @@\n-    public static @C(\"int\") int CXTypeNullability_NonNull() {\n-        return Index_h$constants_0.CXTypeNullability_NonNull();\n+    public static int CXTypeNullability_NonNull() {\n+        return (int)0L;\n@@ -3918,2 +6220,2 @@\n-    public static @C(\"int\") int CXTypeNullability_Nullable() {\n-        return Index_h$constants_0.CXTypeNullability_Nullable();\n+    public static int CXTypeNullability_Nullable() {\n+        return (int)1L;\n@@ -3921,2 +6223,2 @@\n-    public static @C(\"int\") int CXTypeNullability_Unspecified() {\n-        return Index_h$constants_0.CXTypeNullability_Unspecified();\n+    public static int CXTypeNullability_Unspecified() {\n+        return (int)2L;\n@@ -3924,2 +6226,2 @@\n-    public static @C(\"int\") int CXTypeNullability_Invalid() {\n-        return Index_h$constants_0.CXTypeNullability_Invalid();\n+    public static int CXTypeNullability_Invalid() {\n+        return (int)3L;\n@@ -3927,2 +6229,2 @@\n-    public static  MethodHandle clang_Type_getNullability$MH() {\n-        return Index_h$constants_0.clang_Type_getNullability$MH();\n+    public static MethodHandle clang_Type_getNullability$MH() {\n+        return RuntimeHelper.requireNonNull(constants$27.clang_Type_getNullability$MH,\"clang_Type_getNullability\");\n@@ -3930,1 +6232,2 @@\n-    public static @C(\"enum CXTypeNullabilityKind\") int clang_Type_getNullability (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_Type_getNullability ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_getNullability$MH, \"clang_Type_getNullability\");\n@@ -3932,3 +6235,3 @@\n-            return (int)Index_h$constants_0.clang_Type_getNullability$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3937,2 +6240,2 @@\n-    public static @C(\"int\") int CXTypeLayoutError_Invalid() {\n-        return Index_h$constants_0.CXTypeLayoutError_Invalid();\n+    public static int CXTypeLayoutError_Invalid() {\n+        return (int)-1L;\n@@ -3940,2 +6243,2 @@\n-    public static @C(\"int\") int CXTypeLayoutError_Incomplete() {\n-        return Index_h$constants_0.CXTypeLayoutError_Incomplete();\n+    public static int CXTypeLayoutError_Incomplete() {\n+        return (int)-2L;\n@@ -3943,2 +6246,2 @@\n-    public static @C(\"int\") int CXTypeLayoutError_Dependent() {\n-        return Index_h$constants_0.CXTypeLayoutError_Dependent();\n+    public static int CXTypeLayoutError_Dependent() {\n+        return (int)-3L;\n@@ -3946,2 +6249,2 @@\n-    public static @C(\"int\") int CXTypeLayoutError_NotConstantSize() {\n-        return Index_h$constants_0.CXTypeLayoutError_NotConstantSize();\n+    public static int CXTypeLayoutError_NotConstantSize() {\n+        return (int)-4L;\n@@ -3949,2 +6252,2 @@\n-    public static @C(\"int\") int CXTypeLayoutError_InvalidFieldName() {\n-        return Index_h$constants_0.CXTypeLayoutError_InvalidFieldName();\n+    public static int CXTypeLayoutError_InvalidFieldName() {\n+        return (int)-5L;\n@@ -3952,2 +6255,2 @@\n-    public static @C(\"int\") int CXTypeLayoutError_Undeduced() {\n-        return Index_h$constants_0.CXTypeLayoutError_Undeduced();\n+    public static int CXTypeLayoutError_Undeduced() {\n+        return (int)-6L;\n@@ -3955,2 +6258,2 @@\n-    public static  MethodHandle clang_Type_getAlignOf$MH() {\n-        return Index_h$constants_0.clang_Type_getAlignOf$MH();\n+    public static MethodHandle clang_Type_getAlignOf$MH() {\n+        return RuntimeHelper.requireNonNull(constants$27.clang_Type_getAlignOf$MH,\"clang_Type_getAlignOf\");\n@@ -3958,1 +6261,2 @@\n-    public static @C(\"long long\") long clang_Type_getAlignOf (@C(\"CXType\") MemorySegment T) {\n+    public static long clang_Type_getAlignOf ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_getAlignOf$MH, \"clang_Type_getAlignOf\");\n@@ -3960,3 +6264,3 @@\n-            return (long)Index_h$constants_0.clang_Type_getAlignOf$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3965,2 +6269,86 @@\n-    public static  MethodHandle clang_Type_getClassType$MH() {\n-        return Index_h$constants_0.clang_Type_getClassType$MH();\n+    public static class constants$27 {\n+\n+        static final FunctionDescriptor clang_getArrayElementType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getArrayElementType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getArrayElementType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$27.clang_getArrayElementType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getArraySize$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getArraySize$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getArraySize\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+            constants$27.clang_getArraySize$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getNamedType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getNamedType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getNamedType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$27.clang_Type_getNamedType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_isTransparentTagTypedef$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_isTransparentTagTypedef\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$27.clang_Type_isTransparentTagTypedef$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getNullability$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getNullability$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getNullability\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$27.clang_Type_getNullability$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getAlignOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getAlignOf$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getAlignOf\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+            constants$27.clang_Type_getAlignOf$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Type_getClassType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getClassType$MH,\"clang_Type_getClassType\");\n@@ -3968,1 +6356,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Type_getClassType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_Type_getClassType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getClassType$MH, \"clang_Type_getClassType\");\n@@ -3970,3 +6359,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Type_getClassType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3975,2 +6364,2 @@\n-    public static  MethodHandle clang_Type_getSizeOf$MH() {\n-        return Index_h$constants_0.clang_Type_getSizeOf$MH();\n+    public static MethodHandle clang_Type_getSizeOf$MH() {\n+        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getSizeOf$MH,\"clang_Type_getSizeOf\");\n@@ -3978,1 +6367,2 @@\n-    public static @C(\"long long\") long clang_Type_getSizeOf (@C(\"CXType\") MemorySegment T) {\n+    public static long clang_Type_getSizeOf ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getSizeOf$MH, \"clang_Type_getSizeOf\");\n@@ -3980,3 +6370,3 @@\n-            return (long)Index_h$constants_0.clang_Type_getSizeOf$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3985,2 +6375,2 @@\n-    public static  MethodHandle clang_Type_getOffsetOf$MH() {\n-        return Index_h$constants_0.clang_Type_getOffsetOf$MH();\n+    public static MethodHandle clang_Type_getOffsetOf$MH() {\n+        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getOffsetOf$MH,\"clang_Type_getOffsetOf\");\n@@ -3988,1 +6378,2 @@\n-    public static @C(\"long long\") long clang_Type_getOffsetOf (@C(\"CXType\") MemorySegment T, @C(\"char*\") Addressable S) {\n+    public static long clang_Type_getOffsetOf ( MemorySegment T,  Addressable S) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getOffsetOf$MH, \"clang_Type_getOffsetOf\");\n@@ -3990,3 +6381,3 @@\n-            return (long)Index_h$constants_0.clang_Type_getOffsetOf$MH().invokeExact(T, S.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(T, S.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -3995,2 +6386,2 @@\n-    public static  MethodHandle clang_Type_getModifiedType$MH() {\n-        return Index_h$constants_0.clang_Type_getModifiedType$MH();\n+    public static MethodHandle clang_Type_getModifiedType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getModifiedType$MH,\"clang_Type_getModifiedType\");\n@@ -3998,1 +6389,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Type_getModifiedType (@C(\"CXType\") MemorySegment T) {\n+    public static MemorySegment clang_Type_getModifiedType ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getModifiedType$MH, \"clang_Type_getModifiedType\");\n@@ -4000,3 +6392,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_0.clang_Type_getModifiedType$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4005,2 +6397,2 @@\n-    public static  MethodHandle clang_Cursor_getOffsetOfField$MH() {\n-        return Index_h$constants_0.clang_Cursor_getOffsetOfField$MH();\n+    public static MethodHandle clang_Cursor_getOffsetOfField$MH() {\n+        return RuntimeHelper.requireNonNull(constants$28.clang_Cursor_getOffsetOfField$MH,\"clang_Cursor_getOffsetOfField\");\n@@ -4008,1 +6400,2 @@\n-    public static @C(\"long long\") long clang_Cursor_getOffsetOfField (@C(\"CXCursor\") MemorySegment C) {\n+    public static long clang_Cursor_getOffsetOfField ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Cursor_getOffsetOfField$MH, \"clang_Cursor_getOffsetOfField\");\n@@ -4010,3 +6403,3 @@\n-            return (long)Index_h$constants_0.clang_Cursor_getOffsetOfField$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4015,2 +6408,2 @@\n-    public static  MethodHandle clang_Cursor_isAnonymous$MH() {\n-        return Index_h$constants_0.clang_Cursor_isAnonymous$MH();\n+    public static MethodHandle clang_Cursor_isAnonymous$MH() {\n+        return RuntimeHelper.requireNonNull(constants$28.clang_Cursor_isAnonymous$MH,\"clang_Cursor_isAnonymous\");\n@@ -4018,1 +6411,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isAnonymous (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isAnonymous ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Cursor_isAnonymous$MH, \"clang_Cursor_isAnonymous\");\n@@ -4020,3 +6414,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_isAnonymous$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4025,2 +6419,87 @@\n-    public static  MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n-        return Index_h$constants_0.clang_Cursor_isAnonymousRecordDecl$MH();\n+    public static class constants$28 {\n+\n+        static final FunctionDescriptor clang_Type_getClassType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getClassType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getClassType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$28.clang_Type_getClassType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getSizeOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getSizeOf$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getSizeOf\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+            constants$28.clang_Type_getSizeOf$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getOffsetOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Type_getOffsetOf$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getOffsetOf\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+            constants$28.clang_Type_getOffsetOf$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getModifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getModifiedType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getModifiedType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$28.clang_Type_getModifiedType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getOffsetOfField$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getOffsetOfField\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+            constants$28.clang_Cursor_getOffsetOfField$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isAnonymous$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isAnonymous\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$28.clang_Cursor_isAnonymous$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n+        return RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isAnonymousRecordDecl$MH,\"clang_Cursor_isAnonymousRecordDecl\");\n@@ -4028,1 +6507,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isAnonymousRecordDecl (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isAnonymousRecordDecl ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isAnonymousRecordDecl$MH, \"clang_Cursor_isAnonymousRecordDecl\");\n@@ -4030,3 +6510,3 @@\n-            return (int)Index_h$constants_0.clang_Cursor_isAnonymousRecordDecl$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4035,2 +6515,2 @@\n-    public static  MethodHandle clang_Cursor_isInlineNamespace$MH() {\n-        return Index_h$constants_1.clang_Cursor_isInlineNamespace$MH();\n+    public static MethodHandle clang_Cursor_isInlineNamespace$MH() {\n+        return RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isInlineNamespace$MH,\"clang_Cursor_isInlineNamespace\");\n@@ -4038,1 +6518,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isInlineNamespace (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isInlineNamespace ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isInlineNamespace$MH, \"clang_Cursor_isInlineNamespace\");\n@@ -4040,3 +6521,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_isInlineNamespace$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4045,2 +6526,2 @@\n-    public static @C(\"int\") int CXRefQualifier_None() {\n-        return Index_h$constants_1.CXRefQualifier_None();\n+    public static int CXRefQualifier_None() {\n+        return (int)0L;\n@@ -4048,2 +6529,2 @@\n-    public static @C(\"int\") int CXRefQualifier_LValue() {\n-        return Index_h$constants_1.CXRefQualifier_LValue();\n+    public static int CXRefQualifier_LValue() {\n+        return (int)1L;\n@@ -4051,2 +6532,2 @@\n-    public static @C(\"int\") int CXRefQualifier_RValue() {\n-        return Index_h$constants_1.CXRefQualifier_RValue();\n+    public static int CXRefQualifier_RValue() {\n+        return (int)2L;\n@@ -4054,2 +6535,2 @@\n-    public static  MethodHandle clang_Type_getNumTemplateArguments$MH() {\n-        return Index_h$constants_1.clang_Type_getNumTemplateArguments$MH();\n+    public static MethodHandle clang_Type_getNumTemplateArguments$MH() {\n+        return RuntimeHelper.requireNonNull(constants$29.clang_Type_getNumTemplateArguments$MH,\"clang_Type_getNumTemplateArguments\");\n@@ -4057,1 +6538,2 @@\n-    public static @C(\"int\") int clang_Type_getNumTemplateArguments (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_Type_getNumTemplateArguments ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Type_getNumTemplateArguments$MH, \"clang_Type_getNumTemplateArguments\");\n@@ -4059,3 +6541,3 @@\n-            return (int)Index_h$constants_1.clang_Type_getNumTemplateArguments$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4064,2 +6546,2 @@\n-    public static  MethodHandle clang_Type_getTemplateArgumentAsType$MH() {\n-        return Index_h$constants_1.clang_Type_getTemplateArgumentAsType$MH();\n+    public static MethodHandle clang_Type_getTemplateArgumentAsType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$29.clang_Type_getTemplateArgumentAsType$MH,\"clang_Type_getTemplateArgumentAsType\");\n@@ -4067,1 +6549,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Type_getTemplateArgumentAsType (@C(\"CXType\") MemorySegment T, @C(\"unsigned int\") int i) {\n+    public static MemorySegment clang_Type_getTemplateArgumentAsType ( MemorySegment T,  int i) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Type_getTemplateArgumentAsType$MH, \"clang_Type_getTemplateArgumentAsType\");\n@@ -4069,3 +6552,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Type_getTemplateArgumentAsType$MH().invokeExact(T, i);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4074,2 +6557,2 @@\n-    public static  MethodHandle clang_Type_getCXXRefQualifier$MH() {\n-        return Index_h$constants_1.clang_Type_getCXXRefQualifier$MH();\n+    public static MethodHandle clang_Type_getCXXRefQualifier$MH() {\n+        return RuntimeHelper.requireNonNull(constants$29.clang_Type_getCXXRefQualifier$MH,\"clang_Type_getCXXRefQualifier\");\n@@ -4077,1 +6560,2 @@\n-    public static @C(\"enum CXRefQualifierKind\") int clang_Type_getCXXRefQualifier (@C(\"CXType\") MemorySegment T) {\n+    public static int clang_Type_getCXXRefQualifier ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Type_getCXXRefQualifier$MH, \"clang_Type_getCXXRefQualifier\");\n@@ -4079,3 +6563,3 @@\n-            return (int)Index_h$constants_1.clang_Type_getCXXRefQualifier$MH().invokeExact(T);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(T);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4084,2 +6568,2 @@\n-    public static  MethodHandle clang_Cursor_isBitField$MH() {\n-        return Index_h$constants_1.clang_Cursor_isBitField$MH();\n+    public static MethodHandle clang_Cursor_isBitField$MH() {\n+        return RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isBitField$MH,\"clang_Cursor_isBitField\");\n@@ -4087,1 +6571,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isBitField (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isBitField ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isBitField$MH, \"clang_Cursor_isBitField\");\n@@ -4089,3 +6574,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_isBitField$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4094,2 +6579,83 @@\n-    public static  MethodHandle clang_isVirtualBase$MH() {\n-        return Index_h$constants_1.clang_isVirtualBase$MH();\n+    public static class constants$29 {\n+\n+        static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isAnonymousRecordDecl\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$29.clang_Cursor_isAnonymousRecordDecl$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isInlineNamespace$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isInlineNamespace\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$29.clang_Cursor_isInlineNamespace$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getNumTemplateArguments$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getNumTemplateArguments\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$29.clang_Type_getNumTemplateArguments$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Type_getTemplateArgumentAsType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getTemplateArgumentAsType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$29.clang_Type_getTemplateArgumentAsType$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Type_getCXXRefQualifier$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_getCXXRefQualifier\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$29.clang_Type_getCXXRefQualifier$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isBitField$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isBitField$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isBitField\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$29.clang_Cursor_isBitField$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_isVirtualBase$MH() {\n+        return RuntimeHelper.requireNonNull(constants$30.clang_isVirtualBase$MH,\"clang_isVirtualBase\");\n@@ -4097,1 +6663,2 @@\n-    public static @C(\"unsigned int\") int clang_isVirtualBase (@C(\"CXCursor\") MemorySegment x0) {\n+    public static int clang_isVirtualBase ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_isVirtualBase$MH, \"clang_isVirtualBase\");\n@@ -4099,3 +6666,3 @@\n-            return (int)Index_h$constants_1.clang_isVirtualBase$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4104,2 +6671,2 @@\n-    public static @C(\"int\") int CX_CXXInvalidAccessSpecifier() {\n-        return Index_h$constants_1.CX_CXXInvalidAccessSpecifier();\n+    public static int CX_CXXInvalidAccessSpecifier() {\n+        return (int)0L;\n@@ -4107,2 +6674,2 @@\n-    public static @C(\"int\") int CX_CXXPublic() {\n-        return Index_h$constants_1.CX_CXXPublic();\n+    public static int CX_CXXPublic() {\n+        return (int)1L;\n@@ -4110,2 +6677,2 @@\n-    public static @C(\"int\") int CX_CXXProtected() {\n-        return Index_h$constants_1.CX_CXXProtected();\n+    public static int CX_CXXProtected() {\n+        return (int)2L;\n@@ -4113,2 +6680,2 @@\n-    public static @C(\"int\") int CX_CXXPrivate() {\n-        return Index_h$constants_1.CX_CXXPrivate();\n+    public static int CX_CXXPrivate() {\n+        return (int)3L;\n@@ -4116,2 +6683,2 @@\n-    public static  MethodHandle clang_getCXXAccessSpecifier$MH() {\n-        return Index_h$constants_1.clang_getCXXAccessSpecifier$MH();\n+    public static MethodHandle clang_getCXXAccessSpecifier$MH() {\n+        return RuntimeHelper.requireNonNull(constants$30.clang_getCXXAccessSpecifier$MH,\"clang_getCXXAccessSpecifier\");\n@@ -4119,1 +6686,2 @@\n-    public static @C(\"enum CX_CXXAccessSpecifier\") int clang_getCXXAccessSpecifier (@C(\"CXCursor\") MemorySegment x0) {\n+    public static int clang_getCXXAccessSpecifier ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getCXXAccessSpecifier$MH, \"clang_getCXXAccessSpecifier\");\n@@ -4121,3 +6689,3 @@\n-            return (int)Index_h$constants_1.clang_getCXXAccessSpecifier$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4126,2 +6694,2 @@\n-    public static @C(\"int\") int CX_SC_Invalid() {\n-        return Index_h$constants_1.CX_SC_Invalid();\n+    public static int CX_SC_Invalid() {\n+        return (int)0L;\n@@ -4129,2 +6697,2 @@\n-    public static @C(\"int\") int CX_SC_None() {\n-        return Index_h$constants_1.CX_SC_None();\n+    public static int CX_SC_None() {\n+        return (int)1L;\n@@ -4132,2 +6700,2 @@\n-    public static @C(\"int\") int CX_SC_Extern() {\n-        return Index_h$constants_1.CX_SC_Extern();\n+    public static int CX_SC_Extern() {\n+        return (int)2L;\n@@ -4135,2 +6703,2 @@\n-    public static @C(\"int\") int CX_SC_Static() {\n-        return Index_h$constants_1.CX_SC_Static();\n+    public static int CX_SC_Static() {\n+        return (int)3L;\n@@ -4138,2 +6706,2 @@\n-    public static @C(\"int\") int CX_SC_PrivateExtern() {\n-        return Index_h$constants_1.CX_SC_PrivateExtern();\n+    public static int CX_SC_PrivateExtern() {\n+        return (int)4L;\n@@ -4141,2 +6709,2 @@\n-    public static @C(\"int\") int CX_SC_OpenCLWorkGroupLocal() {\n-        return Index_h$constants_1.CX_SC_OpenCLWorkGroupLocal();\n+    public static int CX_SC_OpenCLWorkGroupLocal() {\n+        return (int)5L;\n@@ -4144,2 +6712,2 @@\n-    public static @C(\"int\") int CX_SC_Auto() {\n-        return Index_h$constants_1.CX_SC_Auto();\n+    public static int CX_SC_Auto() {\n+        return (int)6L;\n@@ -4147,2 +6715,2 @@\n-    public static @C(\"int\") int CX_SC_Register() {\n-        return Index_h$constants_1.CX_SC_Register();\n+    public static int CX_SC_Register() {\n+        return (int)7L;\n@@ -4150,2 +6718,2 @@\n-    public static  MethodHandle clang_Cursor_getStorageClass$MH() {\n-        return Index_h$constants_1.clang_Cursor_getStorageClass$MH();\n+    public static MethodHandle clang_Cursor_getStorageClass$MH() {\n+        return RuntimeHelper.requireNonNull(constants$30.clang_Cursor_getStorageClass$MH,\"clang_Cursor_getStorageClass\");\n@@ -4153,1 +6721,2 @@\n-    public static @C(\"enum CX_StorageClass\") int clang_Cursor_getStorageClass (@C(\"CXCursor\") MemorySegment x0) {\n+    public static int clang_Cursor_getStorageClass ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_Cursor_getStorageClass$MH, \"clang_Cursor_getStorageClass\");\n@@ -4155,3 +6724,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_getStorageClass$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4160,2 +6729,2 @@\n-    public static  MethodHandle clang_getNumOverloadedDecls$MH() {\n-        return Index_h$constants_1.clang_getNumOverloadedDecls$MH();\n+    public static MethodHandle clang_getNumOverloadedDecls$MH() {\n+        return RuntimeHelper.requireNonNull(constants$30.clang_getNumOverloadedDecls$MH,\"clang_getNumOverloadedDecls\");\n@@ -4163,1 +6732,2 @@\n-    public static @C(\"unsigned int\") int clang_getNumOverloadedDecls (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static int clang_getNumOverloadedDecls ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getNumOverloadedDecls$MH, \"clang_getNumOverloadedDecls\");\n@@ -4165,3 +6735,3 @@\n-            return (int)Index_h$constants_1.clang_getNumOverloadedDecls$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4170,2 +6740,2 @@\n-    public static  MethodHandle clang_getOverloadedDecl$MH() {\n-        return Index_h$constants_1.clang_getOverloadedDecl$MH();\n+    public static MethodHandle clang_getOverloadedDecl$MH() {\n+        return RuntimeHelper.requireNonNull(constants$30.clang_getOverloadedDecl$MH,\"clang_getOverloadedDecl\");\n@@ -4173,1 +6743,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getOverloadedDecl (@C(\"CXCursor\") MemorySegment cursor, @C(\"unsigned int\") int index) {\n+    public static MemorySegment clang_getOverloadedDecl ( MemorySegment cursor,  int index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getOverloadedDecl$MH, \"clang_getOverloadedDecl\");\n@@ -4175,3 +6746,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getOverloadedDecl$MH().invokeExact(cursor, index);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(cursor, index);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4180,2 +6751,2 @@\n-    public static  MethodHandle clang_getIBOutletCollectionType$MH() {\n-        return Index_h$constants_1.clang_getIBOutletCollectionType$MH();\n+    public static MethodHandle clang_getIBOutletCollectionType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$30.clang_getIBOutletCollectionType$MH,\"clang_getIBOutletCollectionType\");\n@@ -4183,1 +6754,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_getIBOutletCollectionType (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getIBOutletCollectionType ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getIBOutletCollectionType$MH, \"clang_getIBOutletCollectionType\");\n@@ -4185,3 +6757,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getIBOutletCollectionType$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4190,5 +6762,2 @@\n-    public static @C(\"int\") int CXChildVisit_Break() {\n-        return Index_h$constants_1.CXChildVisit_Break();\n-    }\n-    public static @C(\"int\") int CXChildVisit_Continue() {\n-        return Index_h$constants_1.CXChildVisit_Continue();\n+    public static int CXChildVisit_Break() {\n+        return (int)0L;\n@@ -4196,2 +6765,2 @@\n-    public static @C(\"int\") int CXChildVisit_Recurse() {\n-        return Index_h$constants_1.CXChildVisit_Recurse();\n+    public static int CXChildVisit_Continue() {\n+        return (int)1L;\n@@ -4199,2 +6768,2 @@\n-    public static  MethodHandle clang_visitChildren$MH() {\n-        return Index_h$constants_1.clang_visitChildren$MH();\n+    public static int CXChildVisit_Recurse() {\n+        return (int)2L;\n@@ -4202,6 +6771,83 @@\n-    public static @C(\"unsigned int\") int clang_visitChildren (@C(\"CXCursor\") MemorySegment parent, @C(\"CXCursorVisitor\") Addressable visitor, @C(\"CXClientData\") Addressable client_data) {\n-        try {\n-            return (int)Index_h$constants_1.clang_visitChildren$MH().invokeExact(parent, visitor.address(), client_data.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n+    public static class constants$30 {\n+\n+        static final FunctionDescriptor clang_isVirtualBase$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isVirtualBase$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isVirtualBase\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$30.clang_isVirtualBase$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCXXAccessSpecifier$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCXXAccessSpecifier$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCXXAccessSpecifier\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$30.clang_getCXXAccessSpecifier$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getStorageClass$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getStorageClass$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getStorageClass\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$30.clang_Cursor_getStorageClass$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getNumOverloadedDecls$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getNumOverloadedDecls$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNumOverloadedDecls\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$30.clang_getNumOverloadedDecls$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getOverloadedDecl$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_getOverloadedDecl$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getOverloadedDecl\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$30.clang_getOverloadedDecl$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getIBOutletCollectionType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getIBOutletCollectionType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getIBOutletCollectionType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$30.clang_getIBOutletCollectionType$FUNC, false\n+        );\n@@ -4209,1 +6855,3 @@\n-    public interface clang_visitChildren$visitor {\n+\n+    public interface CXCursorVisitor {\n+\n@@ -4211,2 +6859,2 @@\n-        public static  @C(\"CXCursorVisitor\") MemorySegment allocate(clang_visitChildren$visitor fi) {\n-            return RuntimeHelper.upcallStub(clang_visitChildren$visitor.class, fi, Index_h$constants_1.clang_visitChildren$visitor$FUNC(), \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+        static MemorySegment allocate(CXCursorVisitor fi) {\n+            return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$31.CXCursorVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n@@ -4214,1 +6862,1 @@\n-        public static  @C(\"CXCursorVisitor\") MemorySegment allocate(clang_visitChildren$visitor fi, NativeScope scope) {\n+        static MemorySegment allocate(CXCursorVisitor fi, NativeScope scope) {\n@@ -4218,2 +6866,3 @@\n-    public static  MethodHandle clang_visitTemplateSpecializations$MH() {\n-        return Index_h$constants_1.clang_visitTemplateSpecializations$MH();\n+\n+    public static MethodHandle clang_visitChildren$MH() {\n+        return RuntimeHelper.requireNonNull(constants$31.clang_visitChildren$MH,\"clang_visitChildren\");\n@@ -4221,1 +6870,2 @@\n-    public static @C(\"unsigned int\") int clang_visitTemplateSpecializations (@C(\"CXCursor\") MemorySegment parent, @C(\"CXCursorVisitor\") Addressable visitor, @C(\"CXClientData\") Addressable client_data) {\n+    public static int clang_visitChildren ( MemorySegment parent,  Addressable visitor,  Addressable client_data) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitChildren$MH, \"clang_visitChildren\");\n@@ -4223,3 +6873,3 @@\n-            return (int)Index_h$constants_1.clang_visitTemplateSpecializations$MH().invokeExact(parent, visitor.address(), client_data.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(parent, visitor.address(), client_data.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4228,7 +6878,9 @@\n-    public interface clang_visitTemplateSpecializations$visitor {\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2);\n-        public static  @C(\"CXCursorVisitor\") MemorySegment allocate(clang_visitTemplateSpecializations$visitor fi) {\n-            return RuntimeHelper.upcallStub(clang_visitTemplateSpecializations$visitor.class, fi, Index_h$constants_1.clang_visitTemplateSpecializations$visitor$FUNC(), \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n-        }\n-        public static  @C(\"CXCursorVisitor\") MemorySegment allocate(clang_visitTemplateSpecializations$visitor fi, NativeScope scope) {\n-            return allocate(fi).handoff(scope);\n+    public static MethodHandle clang_visitTemplateSpecializations$MH() {\n+        return RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializations$MH,\"clang_visitTemplateSpecializations\");\n+    }\n+    public static int clang_visitTemplateSpecializations ( MemorySegment parent,  Addressable visitor,  Addressable client_data) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializations$MH, \"clang_visitTemplateSpecializations\");\n+        try {\n+            return (int)mh$.invokeExact(parent, visitor.address(), client_data.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4237,2 +6889,2 @@\n-    public static  MethodHandle clang_visitTemplateSpecializationChildren$MH() {\n-        return Index_h$constants_1.clang_visitTemplateSpecializationChildren$MH();\n+    public static MethodHandle clang_visitTemplateSpecializationChildren$MH() {\n+        return RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializationChildren$MH,\"clang_visitTemplateSpecializationChildren\");\n@@ -4240,1 +6892,2 @@\n-    public static @C(\"unsigned int\") int clang_visitTemplateSpecializationChildren (@C(\"CXCursor\") MemorySegment classTemplate, @C(\"CXCursorVisitor\") Addressable visitor, @C(\"CXClientData\") Addressable client_data) {\n+    public static int clang_visitTemplateSpecializationChildren ( MemorySegment classTemplate,  Addressable visitor,  Addressable client_data) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializationChildren$MH, \"clang_visitTemplateSpecializationChildren\");\n@@ -4242,3 +6895,3 @@\n-            return (int)Index_h$constants_1.clang_visitTemplateSpecializationChildren$MH().invokeExact(classTemplate, visitor.address(), client_data.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(classTemplate, visitor.address(), client_data.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4247,4 +6900,5 @@\n-    public interface clang_visitTemplateSpecializationChildren$visitor {\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2);\n-        public static  @C(\"CXCursorVisitor\") MemorySegment allocate(clang_visitTemplateSpecializationChildren$visitor fi) {\n-            return RuntimeHelper.upcallStub(clang_visitTemplateSpecializationChildren$visitor.class, fi, Index_h$constants_1.clang_visitTemplateSpecializationChildren$visitor$FUNC(), \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+    public interface CXCursorVisitorBlock {\n+\n+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n+        static MemorySegment allocate(CXCursorVisitorBlock fi) {\n+            return RuntimeHelper.upcallStub(CXCursorVisitorBlock.class, fi, constants$31.CXCursorVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n@@ -4252,1 +6906,1 @@\n-        public static  @C(\"CXCursorVisitor\") MemorySegment allocate(clang_visitTemplateSpecializationChildren$visitor fi, NativeScope scope) {\n+        static MemorySegment allocate(CXCursorVisitorBlock fi, NativeScope scope) {\n@@ -4256,2 +6910,3 @@\n-    public static  MethodHandle clang_visitChildrenWithBlock$MH() {\n-        return Index_h$constants_1.clang_visitChildrenWithBlock$MH();\n+\n+    public static MethodHandle clang_visitChildrenWithBlock$MH() {\n+        return RuntimeHelper.requireNonNull(constants$31.clang_visitChildrenWithBlock$MH,\"clang_visitChildrenWithBlock\");\n@@ -4259,1 +6914,2 @@\n-    public static @C(\"unsigned int\") int clang_visitChildrenWithBlock (@C(\"CXCursor\") MemorySegment parent, @C(\"CXCursorVisitorBlock\") Addressable block) {\n+    public static int clang_visitChildrenWithBlock ( MemorySegment parent,  Addressable block) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitChildrenWithBlock$MH, \"clang_visitChildrenWithBlock\");\n@@ -4261,3 +6917,3 @@\n-            return (int)Index_h$constants_1.clang_visitChildrenWithBlock$MH().invokeExact(parent, block.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(parent, block.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4266,8 +6922,82 @@\n-    public interface clang_visitChildrenWithBlock$block {\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n-        public static  @C(\"CXCursorVisitorBlock\") MemorySegment allocate(clang_visitChildrenWithBlock$block fi) {\n-            return RuntimeHelper.upcallStub(clang_visitChildrenWithBlock$block.class, fi, Index_h$constants_1.clang_visitChildrenWithBlock$block$FUNC(), \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n-        }\n-        public static  @C(\"CXCursorVisitorBlock\") MemorySegment allocate(clang_visitChildrenWithBlock$block fi, NativeScope scope) {\n-            return allocate(fi).handoff(scope);\n-        }\n+    public static class constants$31 {\n+\n+        static final FunctionDescriptor CXCursorVisitor$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor clang_visitChildren$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_visitChildren$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_visitChildren\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$31.clang_visitChildren$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_visitTemplateSpecializations$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_visitTemplateSpecializations$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_visitTemplateSpecializations\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$31.clang_visitTemplateSpecializations$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_visitTemplateSpecializationChildren$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_visitTemplateSpecializationChildren\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$31.clang_visitTemplateSpecializationChildren$FUNC, false\n+        );\n+        static final FunctionDescriptor CXCursorVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final FunctionDescriptor clang_visitChildrenWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_visitChildrenWithBlock$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_visitChildrenWithBlock\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$31.clang_visitChildrenWithBlock$FUNC, false\n+        );\n@@ -4275,2 +7005,3 @@\n-    public static  MethodHandle clang_getCursorUSR$MH() {\n-        return Index_h$constants_1.clang_getCursorUSR$MH();\n+\n+    public static MethodHandle clang_getCursorUSR$MH() {\n+        return RuntimeHelper.requireNonNull(constants$32.clang_getCursorUSR$MH,\"clang_getCursorUSR\");\n@@ -4278,1 +7009,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCursorUSR (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getCursorUSR ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_getCursorUSR$MH, \"clang_getCursorUSR\");\n@@ -4280,3 +7012,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorUSR$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4285,2 +7017,2 @@\n-    public static  MethodHandle clang_constructUSR_ObjCClass$MH() {\n-        return Index_h$constants_1.clang_constructUSR_ObjCClass$MH();\n+    public static MethodHandle clang_constructUSR_ObjCClass$MH() {\n+        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCClass$MH,\"clang_constructUSR_ObjCClass\");\n@@ -4288,1 +7020,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_constructUSR_ObjCClass (@C(\"char*\") Addressable class_name) {\n+    public static MemorySegment clang_constructUSR_ObjCClass ( Addressable class_name) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCClass$MH, \"clang_constructUSR_ObjCClass\");\n@@ -4290,3 +7023,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCClass$MH().invokeExact(class_name.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(class_name.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4295,2 +7028,2 @@\n-    public static  MethodHandle clang_constructUSR_ObjCCategory$MH() {\n-        return Index_h$constants_1.clang_constructUSR_ObjCCategory$MH();\n+    public static MethodHandle clang_constructUSR_ObjCCategory$MH() {\n+        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCCategory$MH,\"clang_constructUSR_ObjCCategory\");\n@@ -4298,1 +7031,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_constructUSR_ObjCCategory (@C(\"char*\") Addressable class_name, @C(\"char*\") Addressable category_name) {\n+    public static MemorySegment clang_constructUSR_ObjCCategory ( Addressable class_name,  Addressable category_name) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCCategory$MH, \"clang_constructUSR_ObjCCategory\");\n@@ -4300,3 +7034,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCCategory$MH().invokeExact(class_name.address(), category_name.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(class_name.address(), category_name.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4305,2 +7039,2 @@\n-    public static  MethodHandle clang_constructUSR_ObjCProtocol$MH() {\n-        return Index_h$constants_1.clang_constructUSR_ObjCProtocol$MH();\n+    public static MethodHandle clang_constructUSR_ObjCProtocol$MH() {\n+        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCProtocol$MH,\"clang_constructUSR_ObjCProtocol\");\n@@ -4308,1 +7042,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_constructUSR_ObjCProtocol (@C(\"char*\") Addressable protocol_name) {\n+    public static MemorySegment clang_constructUSR_ObjCProtocol ( Addressable protocol_name) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCProtocol$MH, \"clang_constructUSR_ObjCProtocol\");\n@@ -4310,3 +7045,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCProtocol$MH().invokeExact(protocol_name.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(protocol_name.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4315,2 +7050,2 @@\n-    public static  MethodHandle clang_constructUSR_ObjCIvar$MH() {\n-        return Index_h$constants_1.clang_constructUSR_ObjCIvar$MH();\n+    public static MethodHandle clang_constructUSR_ObjCIvar$MH() {\n+        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCIvar$MH,\"clang_constructUSR_ObjCIvar\");\n@@ -4318,1 +7053,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_constructUSR_ObjCIvar (@C(\"char*\") Addressable name, @C(\"CXString\") MemorySegment classUSR) {\n+    public static MemorySegment clang_constructUSR_ObjCIvar ( Addressable name,  MemorySegment classUSR) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCIvar$MH, \"clang_constructUSR_ObjCIvar\");\n@@ -4320,3 +7056,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCIvar$MH().invokeExact(name.address(), classUSR);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(name.address(), classUSR);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4325,2 +7061,2 @@\n-    public static  MethodHandle clang_constructUSR_ObjCMethod$MH() {\n-        return Index_h$constants_1.clang_constructUSR_ObjCMethod$MH();\n+    public static MethodHandle clang_constructUSR_ObjCMethod$MH() {\n+        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCMethod$MH,\"clang_constructUSR_ObjCMethod\");\n@@ -4328,1 +7064,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_constructUSR_ObjCMethod (@C(\"char*\") Addressable name, @C(\"unsigned int\") int isInstanceMethod, @C(\"CXString\") MemorySegment classUSR) {\n+    public static MemorySegment clang_constructUSR_ObjCMethod ( Addressable name,  int isInstanceMethod,  MemorySegment classUSR) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCMethod$MH, \"clang_constructUSR_ObjCMethod\");\n@@ -4330,3 +7067,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCMethod$MH().invokeExact(name.address(), isInstanceMethod, classUSR);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(name.address(), isInstanceMethod, classUSR);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4335,2 +7072,90 @@\n-    public static  MethodHandle clang_constructUSR_ObjCProperty$MH() {\n-        return Index_h$constants_1.clang_constructUSR_ObjCProperty$MH();\n+    public static class constants$32 {\n+\n+        static final FunctionDescriptor clang_getCursorUSR$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorUSR$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorUSR\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$32.clang_getCursorUSR$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_constructUSR_ObjCClass$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCClass$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCClass\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$32.clang_constructUSR_ObjCClass$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCCategory$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCCategory\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$32.clang_constructUSR_ObjCCategory$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCProtocol$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCProtocol\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$32.clang_constructUSR_ObjCProtocol$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCIvar$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCIvar\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$32.clang_constructUSR_ObjCIvar$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_INT,\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCMethod$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCMethod\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$32.clang_constructUSR_ObjCMethod$FUNC, false\n+        );\n@@ -4338,1 +7163,6 @@\n-    public static @C(\"CXString\") MemorySegment clang_constructUSR_ObjCProperty (@C(\"char*\") Addressable property, @C(\"CXString\") MemorySegment classUSR) {\n+\n+    public static MethodHandle clang_constructUSR_ObjCProperty$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCProperty$MH,\"clang_constructUSR_ObjCProperty\");\n+    }\n+    public static MemorySegment clang_constructUSR_ObjCProperty ( Addressable property,  MemorySegment classUSR) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCProperty$MH, \"clang_constructUSR_ObjCProperty\");\n@@ -4340,3 +7170,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_constructUSR_ObjCProperty$MH().invokeExact(property.address(), classUSR);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(property.address(), classUSR);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4345,2 +7175,2 @@\n-    public static  MethodHandle clang_getCursorSpelling$MH() {\n-        return Index_h$constants_1.clang_getCursorSpelling$MH();\n+    public static MethodHandle clang_getCursorSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_getCursorSpelling$MH,\"clang_getCursorSpelling\");\n@@ -4348,1 +7178,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCursorSpelling (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getCursorSpelling ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_getCursorSpelling$MH, \"clang_getCursorSpelling\");\n@@ -4350,3 +7181,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorSpelling$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4355,2 +7186,2 @@\n-    public static  MethodHandle clang_Cursor_getSpellingNameRange$MH() {\n-        return Index_h$constants_1.clang_Cursor_getSpellingNameRange$MH();\n+    public static MethodHandle clang_Cursor_getSpellingNameRange$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_Cursor_getSpellingNameRange$MH,\"clang_Cursor_getSpellingNameRange\");\n@@ -4358,1 +7189,2 @@\n-    public static @C(\"CXSourceRange\") MemorySegment clang_Cursor_getSpellingNameRange (@C(\"CXCursor\") MemorySegment x0, @C(\"unsigned int\") int pieceIndex, @C(\"unsigned int\") int options) {\n+    public static MemorySegment clang_Cursor_getSpellingNameRange ( MemorySegment x0,  int pieceIndex,  int options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_Cursor_getSpellingNameRange$MH, \"clang_Cursor_getSpellingNameRange\");\n@@ -4360,3 +7192,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getSpellingNameRange$MH().invokeExact(x0, pieceIndex, options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0, pieceIndex, options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4365,2 +7197,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_Indentation() {\n-        return Index_h$constants_1.CXPrintingPolicy_Indentation();\n+    public static int CXPrintingPolicy_Indentation() {\n+        return (int)0L;\n@@ -4368,2 +7200,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressSpecifiers() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressSpecifiers();\n+    public static int CXPrintingPolicy_SuppressSpecifiers() {\n+        return (int)1L;\n@@ -4371,2 +7203,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressTagKeyword() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressTagKeyword();\n+    public static int CXPrintingPolicy_SuppressTagKeyword() {\n+        return (int)2L;\n@@ -4374,2 +7206,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_IncludeTagDefinition() {\n-        return Index_h$constants_1.CXPrintingPolicy_IncludeTagDefinition();\n+    public static int CXPrintingPolicy_IncludeTagDefinition() {\n+        return (int)3L;\n@@ -4377,2 +7209,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressScope() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressScope();\n+    public static int CXPrintingPolicy_SuppressScope() {\n+        return (int)4L;\n@@ -4380,2 +7212,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressUnwrittenScope() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressUnwrittenScope();\n+    public static int CXPrintingPolicy_SuppressUnwrittenScope() {\n+        return (int)5L;\n@@ -4383,2 +7215,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressInitializers() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressInitializers();\n+    public static int CXPrintingPolicy_SuppressInitializers() {\n+        return (int)6L;\n@@ -4386,2 +7218,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_ConstantArraySizeAsWritten() {\n-        return Index_h$constants_1.CXPrintingPolicy_ConstantArraySizeAsWritten();\n+    public static int CXPrintingPolicy_ConstantArraySizeAsWritten() {\n+        return (int)7L;\n@@ -4389,2 +7221,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_AnonymousTagLocations() {\n-        return Index_h$constants_1.CXPrintingPolicy_AnonymousTagLocations();\n+    public static int CXPrintingPolicy_AnonymousTagLocations() {\n+        return (int)8L;\n@@ -4392,2 +7224,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressStrongLifetime() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressStrongLifetime();\n+    public static int CXPrintingPolicy_SuppressStrongLifetime() {\n+        return (int)9L;\n@@ -4395,2 +7227,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressLifetimeQualifiers() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressLifetimeQualifiers();\n+    public static int CXPrintingPolicy_SuppressLifetimeQualifiers() {\n+        return (int)10L;\n@@ -4398,2 +7230,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors();\n+    public static int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() {\n+        return (int)11L;\n@@ -4401,2 +7233,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_Bool() {\n-        return Index_h$constants_1.CXPrintingPolicy_Bool();\n+    public static int CXPrintingPolicy_Bool() {\n+        return (int)12L;\n@@ -4404,2 +7236,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_Restrict() {\n-        return Index_h$constants_1.CXPrintingPolicy_Restrict();\n+    public static int CXPrintingPolicy_Restrict() {\n+        return (int)13L;\n@@ -4407,2 +7239,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_Alignof() {\n-        return Index_h$constants_1.CXPrintingPolicy_Alignof();\n+    public static int CXPrintingPolicy_Alignof() {\n+        return (int)14L;\n@@ -4410,2 +7242,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_UnderscoreAlignof() {\n-        return Index_h$constants_1.CXPrintingPolicy_UnderscoreAlignof();\n+    public static int CXPrintingPolicy_UnderscoreAlignof() {\n+        return (int)15L;\n@@ -4413,2 +7245,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_UseVoidForZeroParams() {\n-        return Index_h$constants_1.CXPrintingPolicy_UseVoidForZeroParams();\n+    public static int CXPrintingPolicy_UseVoidForZeroParams() {\n+        return (int)16L;\n@@ -4416,2 +7248,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_TerseOutput() {\n-        return Index_h$constants_1.CXPrintingPolicy_TerseOutput();\n+    public static int CXPrintingPolicy_TerseOutput() {\n+        return (int)17L;\n@@ -4419,2 +7251,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_PolishForDeclaration() {\n-        return Index_h$constants_1.CXPrintingPolicy_PolishForDeclaration();\n+    public static int CXPrintingPolicy_PolishForDeclaration() {\n+        return (int)18L;\n@@ -4422,2 +7254,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_Half() {\n-        return Index_h$constants_1.CXPrintingPolicy_Half();\n+    public static int CXPrintingPolicy_Half() {\n+        return (int)19L;\n@@ -4425,2 +7257,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_MSWChar() {\n-        return Index_h$constants_1.CXPrintingPolicy_MSWChar();\n+    public static int CXPrintingPolicy_MSWChar() {\n+        return (int)20L;\n@@ -4428,2 +7260,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_IncludeNewlines() {\n-        return Index_h$constants_1.CXPrintingPolicy_IncludeNewlines();\n+    public static int CXPrintingPolicy_IncludeNewlines() {\n+        return (int)21L;\n@@ -4431,2 +7263,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_MSVCFormatting() {\n-        return Index_h$constants_1.CXPrintingPolicy_MSVCFormatting();\n+    public static int CXPrintingPolicy_MSVCFormatting() {\n+        return (int)22L;\n@@ -4434,2 +7266,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_ConstantsAsWritten() {\n-        return Index_h$constants_1.CXPrintingPolicy_ConstantsAsWritten();\n+    public static int CXPrintingPolicy_ConstantsAsWritten() {\n+        return (int)23L;\n@@ -4437,2 +7269,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_SuppressImplicitBase() {\n-        return Index_h$constants_1.CXPrintingPolicy_SuppressImplicitBase();\n+    public static int CXPrintingPolicy_SuppressImplicitBase() {\n+        return (int)24L;\n@@ -4440,2 +7272,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_FullyQualifiedName() {\n-        return Index_h$constants_1.CXPrintingPolicy_FullyQualifiedName();\n+    public static int CXPrintingPolicy_FullyQualifiedName() {\n+        return (int)25L;\n@@ -4443,2 +7275,2 @@\n-    public static @C(\"int\") int CXPrintingPolicy_LastProperty() {\n-        return Index_h$constants_1.CXPrintingPolicy_LastProperty();\n+    public static int CXPrintingPolicy_LastProperty() {\n+        return (int)25L;\n@@ -4446,2 +7278,2 @@\n-    public static  MethodHandle clang_PrintingPolicy_getProperty$MH() {\n-        return Index_h$constants_1.clang_PrintingPolicy_getProperty$MH();\n+    public static MethodHandle clang_PrintingPolicy_getProperty$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_getProperty$MH,\"clang_PrintingPolicy_getProperty\");\n@@ -4449,1 +7281,2 @@\n-    public static @C(\"unsigned int\") int clang_PrintingPolicy_getProperty (@C(\"CXPrintingPolicy\") Addressable Policy, @C(\"enum CXPrintingPolicyProperty\") int Property) {\n+    public static int clang_PrintingPolicy_getProperty ( Addressable Policy,  int Property) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_getProperty$MH, \"clang_PrintingPolicy_getProperty\");\n@@ -4451,3 +7284,3 @@\n-            return (int)Index_h$constants_1.clang_PrintingPolicy_getProperty$MH().invokeExact(Policy.address(), Property);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Policy.address(), Property);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4456,2 +7289,2 @@\n-    public static  MethodHandle clang_PrintingPolicy_setProperty$MH() {\n-        return Index_h$constants_1.clang_PrintingPolicy_setProperty$MH();\n+    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_setProperty$MH,\"clang_PrintingPolicy_setProperty\");\n@@ -4459,1 +7292,2 @@\n-    public static void clang_PrintingPolicy_setProperty (@C(\"CXPrintingPolicy\") Addressable Policy, @C(\"enum CXPrintingPolicyProperty\") int Property, @C(\"unsigned int\") int Value) {\n+    public static void clang_PrintingPolicy_setProperty ( Addressable Policy,  int Property,  int Value) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_setProperty$MH, \"clang_PrintingPolicy_setProperty\");\n@@ -4461,3 +7295,3 @@\n-            Index_h$constants_1.clang_PrintingPolicy_setProperty$MH().invokeExact(Policy.address(), Property, Value);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(Policy.address(), Property, Value);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4466,2 +7300,2 @@\n-    public static  MethodHandle clang_getCursorPrintingPolicy$MH() {\n-        return Index_h$constants_1.clang_getCursorPrintingPolicy$MH();\n+    public static MethodHandle clang_getCursorPrintingPolicy$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_getCursorPrintingPolicy$MH,\"clang_getCursorPrintingPolicy\");\n@@ -4469,1 +7303,2 @@\n-    public static @C(\"CXPrintingPolicy\") MemoryAddress clang_getCursorPrintingPolicy (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemoryAddress clang_getCursorPrintingPolicy ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_getCursorPrintingPolicy$MH, \"clang_getCursorPrintingPolicy\");\n@@ -4471,3 +7306,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getCursorPrintingPolicy$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4476,2 +7311,84 @@\n-    public static  MethodHandle clang_PrintingPolicy_dispose$MH() {\n-        return Index_h$constants_1.clang_PrintingPolicy_dispose$MH();\n+    public static class constants$33 {\n+\n+        static final FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCProperty$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCProperty\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$33.clang_constructUSR_ObjCProperty$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorSpelling\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$33.clang_getCursorSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_Cursor_getSpellingNameRange$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getSpellingNameRange\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$33.clang_Cursor_getSpellingNameRange$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_PrintingPolicy_getProperty$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_PrintingPolicy_getProperty\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$33.clang_PrintingPolicy_getProperty$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_PrintingPolicy_setProperty$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_PrintingPolicy_setProperty\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;II)V\",\n+            constants$33.clang_PrintingPolicy_setProperty$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorPrintingPolicy$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorPrintingPolicy\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$33.clang_getCursorPrintingPolicy$FUNC, false\n+        );\n@@ -4479,1 +7396,6 @@\n-    public static void clang_PrintingPolicy_dispose (@C(\"CXPrintingPolicy\") Addressable Policy) {\n+\n+    public static MethodHandle clang_PrintingPolicy_dispose$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_dispose$MH,\"clang_PrintingPolicy_dispose\");\n+    }\n+    public static void clang_PrintingPolicy_dispose ( Addressable Policy) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_dispose$MH, \"clang_PrintingPolicy_dispose\");\n@@ -4481,3 +7403,3 @@\n-            Index_h$constants_1.clang_PrintingPolicy_dispose$MH().invokeExact(Policy.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(Policy.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4486,2 +7408,2 @@\n-    public static  MethodHandle clang_getCursorPrettyPrinted$MH() {\n-        return Index_h$constants_1.clang_getCursorPrettyPrinted$MH();\n+    public static MethodHandle clang_getCursorPrettyPrinted$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrettyPrinted$MH,\"clang_getCursorPrettyPrinted\");\n@@ -4489,1 +7411,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCursorPrettyPrinted (@C(\"CXCursor\") MemorySegment Cursor, @C(\"CXPrintingPolicy\") Addressable Policy) {\n+    public static MemorySegment clang_getCursorPrettyPrinted ( MemorySegment Cursor,  Addressable Policy) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrettyPrinted$MH, \"clang_getCursorPrettyPrinted\");\n@@ -4491,3 +7414,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorPrettyPrinted$MH().invokeExact(Cursor, Policy.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Cursor, Policy.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4496,2 +7419,2 @@\n-    public static  MethodHandle clang_getTypePrintingPolicy$MH() {\n-        return Index_h$constants_1.clang_getTypePrintingPolicy$MH();\n+    public static MethodHandle clang_getTypePrintingPolicy$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_getTypePrintingPolicy$MH,\"clang_getTypePrintingPolicy\");\n@@ -4499,1 +7422,2 @@\n-    public static @C(\"CXPrintingPolicy\") MemoryAddress clang_getTypePrintingPolicy (@C(\"CXType\") MemorySegment x0) {\n+    public static MemoryAddress clang_getTypePrintingPolicy ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getTypePrintingPolicy$MH, \"clang_getTypePrintingPolicy\");\n@@ -4501,3 +7425,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getTypePrintingPolicy$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4506,2 +7430,2 @@\n-    public static  MethodHandle clang_getTypePrettyPrinted$MH() {\n-        return Index_h$constants_1.clang_getTypePrettyPrinted$MH();\n+    public static MethodHandle clang_getTypePrettyPrinted$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_getTypePrettyPrinted$MH,\"clang_getTypePrettyPrinted\");\n@@ -4509,1 +7433,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getTypePrettyPrinted (@C(\"CXType\") MemorySegment CT, @C(\"CXPrintingPolicy\") Addressable Policy) {\n+    public static MemorySegment clang_getTypePrettyPrinted ( MemorySegment CT,  Addressable Policy) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getTypePrettyPrinted$MH, \"clang_getTypePrettyPrinted\");\n@@ -4511,3 +7436,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTypePrettyPrinted$MH().invokeExact(CT, Policy.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CT, Policy.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4516,2 +7441,2 @@\n-    public static  MethodHandle clang_getCursorDisplayName$MH() {\n-        return Index_h$constants_1.clang_getCursorDisplayName$MH();\n+    public static MethodHandle clang_getCursorDisplayName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n@@ -4519,1 +7444,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCursorDisplayName (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getCursorDisplayName ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorDisplayName$MH, \"clang_getCursorDisplayName\");\n@@ -4521,3 +7447,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorDisplayName$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4526,2 +7452,2 @@\n-    public static  MethodHandle clang_getCursorReferenced$MH() {\n-        return Index_h$constants_1.clang_getCursorReferenced$MH();\n+    public static MethodHandle clang_getCursorReferenced$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n@@ -4529,1 +7455,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getCursorReferenced (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getCursorReferenced ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorReferenced$MH, \"clang_getCursorReferenced\");\n@@ -4531,3 +7458,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorReferenced$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4536,2 +7463,88 @@\n-    public static  MethodHandle clang_getCursorDefinition$MH() {\n-        return Index_h$constants_1.clang_getCursorDefinition$MH();\n+    public static class constants$34 {\n+\n+        static final FunctionDescriptor clang_PrintingPolicy_dispose$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_PrintingPolicy_dispose$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_PrintingPolicy_dispose\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$34.clang_PrintingPolicy_dispose$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCursorPrettyPrinted$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorPrettyPrinted\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$34.clang_getCursorPrettyPrinted$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTypePrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTypePrintingPolicy$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTypePrintingPolicy\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$34.clang_getTypePrintingPolicy$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTypePrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getTypePrettyPrinted$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTypePrettyPrinted\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$34.clang_getTypePrettyPrinted$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorDisplayName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorDisplayName\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$34.clang_getCursorDisplayName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorReferenced$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorReferenced\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$34.clang_getCursorReferenced$FUNC, false\n+        );\n@@ -4539,1 +7552,6 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getCursorDefinition (@C(\"CXCursor\") MemorySegment x0) {\n+\n+    public static MethodHandle clang_getCursorDefinition$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_getCursorDefinition$MH,\"clang_getCursorDefinition\");\n+    }\n+    public static MemorySegment clang_getCursorDefinition ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCursorDefinition$MH, \"clang_getCursorDefinition\");\n@@ -4541,3 +7559,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorDefinition$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4546,2 +7564,2 @@\n-    public static  MethodHandle clang_isCursorDefinition$MH() {\n-        return Index_h$constants_1.clang_isCursorDefinition$MH();\n+    public static MethodHandle clang_isCursorDefinition$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_isCursorDefinition$MH,\"clang_isCursorDefinition\");\n@@ -4549,1 +7567,2 @@\n-    public static @C(\"unsigned int\") int clang_isCursorDefinition (@C(\"CXCursor\") MemorySegment x0) {\n+    public static int clang_isCursorDefinition ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_isCursorDefinition$MH, \"clang_isCursorDefinition\");\n@@ -4551,3 +7570,3 @@\n-            return (int)Index_h$constants_1.clang_isCursorDefinition$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4556,2 +7575,2 @@\n-    public static  MethodHandle clang_getCanonicalCursor$MH() {\n-        return Index_h$constants_1.clang_getCanonicalCursor$MH();\n+    public static MethodHandle clang_getCanonicalCursor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_getCanonicalCursor$MH,\"clang_getCanonicalCursor\");\n@@ -4559,1 +7578,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getCanonicalCursor (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_getCanonicalCursor ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCanonicalCursor$MH, \"clang_getCanonicalCursor\");\n@@ -4561,3 +7581,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCanonicalCursor$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4566,2 +7586,2 @@\n-    public static  MethodHandle clang_Cursor_getObjCSelectorIndex$MH() {\n-        return Index_h$constants_1.clang_Cursor_getObjCSelectorIndex$MH();\n+    public static MethodHandle clang_Cursor_getObjCSelectorIndex$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getObjCSelectorIndex$MH,\"clang_Cursor_getObjCSelectorIndex\");\n@@ -4569,1 +7589,2 @@\n-    public static @C(\"int\") int clang_Cursor_getObjCSelectorIndex (@C(\"CXCursor\") MemorySegment x0) {\n+    public static int clang_Cursor_getObjCSelectorIndex ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getObjCSelectorIndex$MH, \"clang_Cursor_getObjCSelectorIndex\");\n@@ -4571,3 +7592,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_getObjCSelectorIndex$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4576,2 +7597,2 @@\n-    public static  MethodHandle clang_Cursor_isDynamicCall$MH() {\n-        return Index_h$constants_1.clang_Cursor_isDynamicCall$MH();\n+    public static MethodHandle clang_Cursor_isDynamicCall$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_Cursor_isDynamicCall$MH,\"clang_Cursor_isDynamicCall\");\n@@ -4579,1 +7600,2 @@\n-    public static @C(\"int\") int clang_Cursor_isDynamicCall (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isDynamicCall ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_Cursor_isDynamicCall$MH, \"clang_Cursor_isDynamicCall\");\n@@ -4581,3 +7603,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_isDynamicCall$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4586,2 +7608,2 @@\n-    public static  MethodHandle clang_Cursor_getReceiverType$MH() {\n-        return Index_h$constants_1.clang_Cursor_getReceiverType$MH();\n+    public static MethodHandle clang_Cursor_getReceiverType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getReceiverType$MH,\"clang_Cursor_getReceiverType\");\n@@ -4589,1 +7611,2 @@\n-    public static @C(\"CXType\") MemorySegment clang_Cursor_getReceiverType (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getReceiverType ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getReceiverType$MH, \"clang_Cursor_getReceiverType\");\n@@ -4591,3 +7614,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getReceiverType$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4596,2 +7619,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_noattr() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_noattr();\n+    public static int CXObjCPropertyAttr_noattr() {\n+        return (int)0L;\n@@ -4599,2 +7622,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_readonly() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_readonly();\n+    public static int CXObjCPropertyAttr_readonly() {\n+        return (int)1L;\n@@ -4602,2 +7625,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_getter() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_getter();\n+    public static int CXObjCPropertyAttr_getter() {\n+        return (int)2L;\n@@ -4605,2 +7628,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_assign() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_assign();\n+    public static int CXObjCPropertyAttr_assign() {\n+        return (int)4L;\n@@ -4608,2 +7631,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_readwrite() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_readwrite();\n+    public static int CXObjCPropertyAttr_readwrite() {\n+        return (int)8L;\n@@ -4611,2 +7634,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_retain() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_retain();\n+    public static int CXObjCPropertyAttr_retain() {\n+        return (int)16L;\n@@ -4614,2 +7637,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_copy() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_copy();\n+    public static int CXObjCPropertyAttr_copy() {\n+        return (int)32L;\n@@ -4617,2 +7640,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_nonatomic() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_nonatomic();\n+    public static int CXObjCPropertyAttr_nonatomic() {\n+        return (int)64L;\n@@ -4620,2 +7643,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_setter() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_setter();\n+    public static int CXObjCPropertyAttr_setter() {\n+        return (int)128L;\n@@ -4623,2 +7646,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_atomic() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_atomic();\n+    public static int CXObjCPropertyAttr_atomic() {\n+        return (int)256L;\n@@ -4626,2 +7649,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_weak() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_weak();\n+    public static int CXObjCPropertyAttr_weak() {\n+        return (int)512L;\n@@ -4629,2 +7652,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_strong() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_strong();\n+    public static int CXObjCPropertyAttr_strong() {\n+        return (int)1024L;\n@@ -4632,2 +7655,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_unsafe_unretained() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_unsafe_unretained();\n+    public static int CXObjCPropertyAttr_unsafe_unretained() {\n+        return (int)2048L;\n@@ -4635,2 +7658,2 @@\n-    public static @C(\"int\") int CXObjCPropertyAttr_class() {\n-        return Index_h$constants_1.CXObjCPropertyAttr_class();\n+    public static int CXObjCPropertyAttr_class() {\n+        return (int)4096L;\n@@ -4638,2 +7661,90 @@\n-    public static  MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() {\n-        return Index_h$constants_1.clang_Cursor_getObjCPropertyAttributes$MH();\n+    public static class constants$35 {\n+\n+        static final FunctionDescriptor clang_getCursorDefinition$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorDefinition$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorDefinition\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$35.clang_getCursorDefinition$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_isCursorDefinition$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_isCursorDefinition$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_isCursorDefinition\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$35.clang_isCursorDefinition$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCanonicalCursor$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCanonicalCursor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCanonicalCursor\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$35.clang_getCanonicalCursor$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getObjCSelectorIndex$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getObjCSelectorIndex\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$35.clang_Cursor_getObjCSelectorIndex$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isDynamicCall$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isDynamicCall$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isDynamicCall\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$35.clang_Cursor_isDynamicCall$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getReceiverType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getReceiverType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$35.clang_Cursor_getReceiverType$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH,\"clang_Cursor_getObjCPropertyAttributes\");\n@@ -4641,1 +7752,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_getObjCPropertyAttributes (@C(\"CXCursor\") MemorySegment C, @C(\"unsigned int\") int reserved) {\n+    public static int clang_Cursor_getObjCPropertyAttributes ( MemorySegment C,  int reserved) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH, \"clang_Cursor_getObjCPropertyAttributes\");\n@@ -4643,3 +7755,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_getObjCPropertyAttributes$MH().invokeExact(C, reserved);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C, reserved);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4648,2 +7760,2 @@\n-    public static  MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() {\n-        return Index_h$constants_1.clang_Cursor_getObjCPropertyGetterName$MH();\n+    public static MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH,\"clang_Cursor_getObjCPropertyGetterName\");\n@@ -4651,1 +7763,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_Cursor_getObjCPropertyGetterName (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getObjCPropertyGetterName ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH, \"clang_Cursor_getObjCPropertyGetterName\");\n@@ -4653,3 +7766,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getObjCPropertyGetterName$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4658,2 +7771,2 @@\n-    public static  MethodHandle clang_Cursor_getObjCPropertySetterName$MH() {\n-        return Index_h$constants_1.clang_Cursor_getObjCPropertySetterName$MH();\n+    public static MethodHandle clang_Cursor_getObjCPropertySetterName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH,\"clang_Cursor_getObjCPropertySetterName\");\n@@ -4661,1 +7774,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_Cursor_getObjCPropertySetterName (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getObjCPropertySetterName ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH, \"clang_Cursor_getObjCPropertySetterName\");\n@@ -4663,3 +7777,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getObjCPropertySetterName$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4668,2 +7782,2 @@\n-    public static @C(\"int\") int CXObjCDeclQualifier_None() {\n-        return Index_h$constants_1.CXObjCDeclQualifier_None();\n+    public static int CXObjCDeclQualifier_None() {\n+        return (int)0L;\n@@ -4671,2 +7785,2 @@\n-    public static @C(\"int\") int CXObjCDeclQualifier_In() {\n-        return Index_h$constants_1.CXObjCDeclQualifier_In();\n+    public static int CXObjCDeclQualifier_In() {\n+        return (int)1L;\n@@ -4674,2 +7788,2 @@\n-    public static @C(\"int\") int CXObjCDeclQualifier_Inout() {\n-        return Index_h$constants_1.CXObjCDeclQualifier_Inout();\n+    public static int CXObjCDeclQualifier_Inout() {\n+        return (int)2L;\n@@ -4677,2 +7791,2 @@\n-    public static @C(\"int\") int CXObjCDeclQualifier_Out() {\n-        return Index_h$constants_1.CXObjCDeclQualifier_Out();\n+    public static int CXObjCDeclQualifier_Out() {\n+        return (int)4L;\n@@ -4680,2 +7794,2 @@\n-    public static @C(\"int\") int CXObjCDeclQualifier_Bycopy() {\n-        return Index_h$constants_1.CXObjCDeclQualifier_Bycopy();\n+    public static int CXObjCDeclQualifier_Bycopy() {\n+        return (int)8L;\n@@ -4683,2 +7797,2 @@\n-    public static @C(\"int\") int CXObjCDeclQualifier_Byref() {\n-        return Index_h$constants_1.CXObjCDeclQualifier_Byref();\n+    public static int CXObjCDeclQualifier_Byref() {\n+        return (int)16L;\n@@ -4686,2 +7800,2 @@\n-    public static @C(\"int\") int CXObjCDeclQualifier_Oneway() {\n-        return Index_h$constants_1.CXObjCDeclQualifier_Oneway();\n+    public static int CXObjCDeclQualifier_Oneway() {\n+        return (int)32L;\n@@ -4689,2 +7803,2 @@\n-    public static  MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() {\n-        return Index_h$constants_1.clang_Cursor_getObjCDeclQualifiers$MH();\n+    public static MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH,\"clang_Cursor_getObjCDeclQualifiers\");\n@@ -4692,1 +7806,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_getObjCDeclQualifiers (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_getObjCDeclQualifiers ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH, \"clang_Cursor_getObjCDeclQualifiers\");\n@@ -4694,3 +7809,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_getObjCDeclQualifiers$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4699,2 +7814,2 @@\n-    public static  MethodHandle clang_Cursor_isObjCOptional$MH() {\n-        return Index_h$constants_1.clang_Cursor_isObjCOptional$MH();\n+    public static MethodHandle clang_Cursor_isObjCOptional$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isObjCOptional$MH,\"clang_Cursor_isObjCOptional\");\n@@ -4702,1 +7817,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isObjCOptional (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isObjCOptional ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isObjCOptional$MH, \"clang_Cursor_isObjCOptional\");\n@@ -4704,3 +7820,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_isObjCOptional$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4709,2 +7825,2 @@\n-    public static  MethodHandle clang_Cursor_isVariadic$MH() {\n-        return Index_h$constants_1.clang_Cursor_isVariadic$MH();\n+    public static MethodHandle clang_Cursor_isVariadic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isVariadic$MH,\"clang_Cursor_isVariadic\");\n@@ -4712,1 +7828,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isVariadic (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_Cursor_isVariadic ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isVariadic$MH, \"clang_Cursor_isVariadic\");\n@@ -4714,3 +7831,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_isVariadic$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4719,2 +7836,87 @@\n-    public static  MethodHandle clang_Cursor_isExternalSymbol$MH() {\n-        return Index_h$constants_1.clang_Cursor_isExternalSymbol$MH();\n+    public static class constants$36 {\n+\n+        static final FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_Cursor_getObjCPropertyAttributes$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getObjCPropertyAttributes\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)I\",\n+            constants$36.clang_Cursor_getObjCPropertyAttributes$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getObjCPropertyGetterName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getObjCPropertyGetterName\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$36.clang_Cursor_getObjCPropertyGetterName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getObjCPropertySetterName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getObjCPropertySetterName\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$36.clang_Cursor_getObjCPropertySetterName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getObjCDeclQualifiers$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getObjCDeclQualifiers\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$36.clang_Cursor_getObjCDeclQualifiers$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isObjCOptional$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isObjCOptional$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isObjCOptional\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$36.clang_Cursor_isObjCOptional$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isVariadic$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isVariadic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isVariadic\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$36.clang_Cursor_isVariadic$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Cursor_isExternalSymbol$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isExternalSymbol$MH,\"clang_Cursor_isExternalSymbol\");\n@@ -4722,1 +7924,2 @@\n-    public static @C(\"unsigned int\") int clang_Cursor_isExternalSymbol (@C(\"CXCursor\") MemorySegment C, @C(\"CXString*\") Addressable language, @C(\"CXString*\") Addressable definedIn, @C(\"unsigned int*\") Addressable isGenerated) {\n+    public static int clang_Cursor_isExternalSymbol ( MemorySegment C,  Addressable language,  Addressable definedIn,  Addressable isGenerated) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isExternalSymbol$MH, \"clang_Cursor_isExternalSymbol\");\n@@ -4724,3 +7927,3 @@\n-            return (int)Index_h$constants_1.clang_Cursor_isExternalSymbol$MH().invokeExact(C, language.address(), definedIn.address(), isGenerated.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C, language.address(), definedIn.address(), isGenerated.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4729,2 +7932,2 @@\n-    public static  MethodHandle clang_Cursor_getCommentRange$MH() {\n-        return Index_h$constants_1.clang_Cursor_getCommentRange$MH();\n+    public static MethodHandle clang_Cursor_getCommentRange$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCommentRange$MH,\"clang_Cursor_getCommentRange\");\n@@ -4732,1 +7935,2 @@\n-    public static @C(\"CXSourceRange\") MemorySegment clang_Cursor_getCommentRange (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getCommentRange ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCommentRange$MH, \"clang_Cursor_getCommentRange\");\n@@ -4734,3 +7938,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getCommentRange$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4739,2 +7943,2 @@\n-    public static  MethodHandle clang_Cursor_getRawCommentText$MH() {\n-        return Index_h$constants_1.clang_Cursor_getRawCommentText$MH();\n+    public static MethodHandle clang_Cursor_getRawCommentText$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getRawCommentText$MH,\"clang_Cursor_getRawCommentText\");\n@@ -4742,1 +7946,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_Cursor_getRawCommentText (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getRawCommentText ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getRawCommentText$MH, \"clang_Cursor_getRawCommentText\");\n@@ -4744,3 +7949,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getRawCommentText$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4749,2 +7954,2 @@\n-    public static  MethodHandle clang_Cursor_getBriefCommentText$MH() {\n-        return Index_h$constants_1.clang_Cursor_getBriefCommentText$MH();\n+    public static MethodHandle clang_Cursor_getBriefCommentText$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getBriefCommentText$MH,\"clang_Cursor_getBriefCommentText\");\n@@ -4752,1 +7957,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_Cursor_getBriefCommentText (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getBriefCommentText ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getBriefCommentText$MH, \"clang_Cursor_getBriefCommentText\");\n@@ -4754,3 +7960,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getBriefCommentText$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4759,2 +7965,2 @@\n-    public static  MethodHandle clang_Cursor_getMangling$MH() {\n-        return Index_h$constants_1.clang_Cursor_getMangling$MH();\n+    public static MethodHandle clang_Cursor_getMangling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getMangling$MH,\"clang_Cursor_getMangling\");\n@@ -4762,1 +7968,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_Cursor_getMangling (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemorySegment clang_Cursor_getMangling ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getMangling$MH, \"clang_Cursor_getMangling\");\n@@ -4764,3 +7971,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Cursor_getMangling$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4769,2 +7976,2 @@\n-    public static  MethodHandle clang_Cursor_getCXXManglings$MH() {\n-        return Index_h$constants_1.clang_Cursor_getCXXManglings$MH();\n+    public static MethodHandle clang_Cursor_getCXXManglings$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCXXManglings$MH,\"clang_Cursor_getCXXManglings\");\n@@ -4772,1 +7979,2 @@\n-    public static @C(\"CXStringSet*\") MemoryAddress clang_Cursor_getCXXManglings (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemoryAddress clang_Cursor_getCXXManglings ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCXXManglings$MH, \"clang_Cursor_getCXXManglings\");\n@@ -4774,3 +7982,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_getCXXManglings$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4779,2 +7987,97 @@\n-    public static  MethodHandle clang_Cursor_getObjCManglings$MH() {\n-        return Index_h$constants_1.clang_Cursor_getObjCManglings$MH();\n+    public static class constants$37 {\n+\n+        static final FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Cursor_isExternalSymbol$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isExternalSymbol\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$37.clang_Cursor_isExternalSymbol$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getCommentRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getCommentRange$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getCommentRange\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$37.clang_Cursor_getCommentRange$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getRawCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getRawCommentText$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getRawCommentText\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$37.clang_Cursor_getRawCommentText$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getBriefCommentText$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getBriefCommentText\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$37.clang_Cursor_getBriefCommentText$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getMangling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getMangling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getMangling\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$37.clang_Cursor_getMangling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getCXXManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getCXXManglings$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getCXXManglings\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$37.clang_Cursor_getCXXManglings$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Cursor_getObjCManglings$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getObjCManglings$MH,\"clang_Cursor_getObjCManglings\");\n@@ -4782,1 +8085,2 @@\n-    public static @C(\"CXStringSet*\") MemoryAddress clang_Cursor_getObjCManglings (@C(\"CXCursor\") MemorySegment x0) {\n+    public static MemoryAddress clang_Cursor_getObjCManglings ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getObjCManglings$MH, \"clang_Cursor_getObjCManglings\");\n@@ -4784,3 +8088,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_getObjCManglings$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4789,2 +8093,2 @@\n-    public static  MethodHandle clang_Cursor_getModule$MH() {\n-        return Index_h$constants_1.clang_Cursor_getModule$MH();\n+    public static MethodHandle clang_Cursor_getModule$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getModule$MH,\"clang_Cursor_getModule\");\n@@ -4792,1 +8096,2 @@\n-    public static @C(\"CXModule\") MemoryAddress clang_Cursor_getModule (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemoryAddress clang_Cursor_getModule ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getModule$MH, \"clang_Cursor_getModule\");\n@@ -4794,3 +8099,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_getModule$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4799,2 +8104,2 @@\n-    public static  MethodHandle clang_getModuleForFile$MH() {\n-        return Index_h$constants_1.clang_getModuleForFile$MH();\n+    public static MethodHandle clang_getModuleForFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_getModuleForFile$MH,\"clang_getModuleForFile\");\n@@ -4802,1 +8107,2 @@\n-    public static @C(\"CXModule\") MemoryAddress clang_getModuleForFile (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXFile\") Addressable x1) {\n+    public static MemoryAddress clang_getModuleForFile ( Addressable x0,  Addressable x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_getModuleForFile$MH, \"clang_getModuleForFile\");\n@@ -4804,3 +8110,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getModuleForFile$MH().invokeExact(x0.address(), x1.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4809,2 +8115,2 @@\n-    public static  MethodHandle clang_Module_getASTFile$MH() {\n-        return Index_h$constants_1.clang_Module_getASTFile$MH();\n+    public static MethodHandle clang_Module_getASTFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_Module_getASTFile$MH,\"clang_Module_getASTFile\");\n@@ -4812,1 +8118,2 @@\n-    public static @C(\"CXFile\") MemoryAddress clang_Module_getASTFile (@C(\"CXModule\") Addressable Module) {\n+    public static MemoryAddress clang_Module_getASTFile ( Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Module_getASTFile$MH, \"clang_Module_getASTFile\");\n@@ -4814,3 +8121,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Module_getASTFile$MH().invokeExact(Module.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4819,2 +8126,2 @@\n-    public static  MethodHandle clang_Module_getParent$MH() {\n-        return Index_h$constants_1.clang_Module_getParent$MH();\n+    public static MethodHandle clang_Module_getParent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_Module_getParent$MH,\"clang_Module_getParent\");\n@@ -4822,1 +8129,2 @@\n-    public static @C(\"CXModule\") MemoryAddress clang_Module_getParent (@C(\"CXModule\") Addressable Module) {\n+    public static MemoryAddress clang_Module_getParent ( Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Module_getParent$MH, \"clang_Module_getParent\");\n@@ -4824,3 +8132,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Module_getParent$MH().invokeExact(Module.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4829,2 +8137,2 @@\n-    public static  MethodHandle clang_Module_getName$MH() {\n-        return Index_h$constants_1.clang_Module_getName$MH();\n+    public static MethodHandle clang_Module_getName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_Module_getName$MH,\"clang_Module_getName\");\n@@ -4832,1 +8140,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_Module_getName (@C(\"CXModule\") Addressable Module) {\n+    public static MemorySegment clang_Module_getName ( Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Module_getName$MH, \"clang_Module_getName\");\n@@ -4834,3 +8143,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Module_getName$MH().invokeExact(Module.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4839,2 +8148,67 @@\n-    public static  MethodHandle clang_Module_getFullName$MH() {\n-        return Index_h$constants_1.clang_Module_getFullName$MH();\n+    public static class constants$38 {\n+\n+        static final FunctionDescriptor clang_Cursor_getObjCManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getObjCManglings$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getObjCManglings\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$38.clang_Cursor_getObjCManglings$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getModule$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getModule$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getModule\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$38.clang_Cursor_getModule$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getModuleForFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getModuleForFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getModuleForFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$38.clang_getModuleForFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Module_getASTFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_getASTFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getASTFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$38.clang_Module_getASTFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Module_getParent$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_getParent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getParent\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$38.clang_Module_getParent$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Module_getName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_getName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getName\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$38.clang_Module_getName$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Module_getFullName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getFullName$MH,\"clang_Module_getFullName\");\n@@ -4842,1 +8216,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_Module_getFullName (@C(\"CXModule\") Addressable Module) {\n+    public static MemorySegment clang_Module_getFullName ( Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getFullName$MH, \"clang_Module_getFullName\");\n@@ -4844,3 +8219,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_Module_getFullName$MH().invokeExact(Module.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4849,2 +8224,2 @@\n-    public static  MethodHandle clang_Module_isSystem$MH() {\n-        return Index_h$constants_1.clang_Module_isSystem$MH();\n+    public static MethodHandle clang_Module_isSystem$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_Module_isSystem$MH,\"clang_Module_isSystem\");\n@@ -4852,1 +8227,2 @@\n-    public static @C(\"int\") int clang_Module_isSystem (@C(\"CXModule\") Addressable Module) {\n+    public static int clang_Module_isSystem ( Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_isSystem$MH, \"clang_Module_isSystem\");\n@@ -4854,3 +8230,3 @@\n-            return (int)Index_h$constants_1.clang_Module_isSystem$MH().invokeExact(Module.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4859,2 +8235,2 @@\n-    public static  MethodHandle clang_Module_getNumTopLevelHeaders$MH() {\n-        return Index_h$constants_1.clang_Module_getNumTopLevelHeaders$MH();\n+    public static MethodHandle clang_Module_getNumTopLevelHeaders$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getNumTopLevelHeaders$MH,\"clang_Module_getNumTopLevelHeaders\");\n@@ -4862,1 +8238,2 @@\n-    public static @C(\"unsigned int\") int clang_Module_getNumTopLevelHeaders (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXModule\") Addressable Module) {\n+    public static int clang_Module_getNumTopLevelHeaders ( Addressable x0,  Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getNumTopLevelHeaders$MH, \"clang_Module_getNumTopLevelHeaders\");\n@@ -4864,3 +8241,3 @@\n-            return (int)Index_h$constants_1.clang_Module_getNumTopLevelHeaders$MH().invokeExact(x0.address(), Module.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0.address(), Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4869,2 +8246,2 @@\n-    public static  MethodHandle clang_Module_getTopLevelHeader$MH() {\n-        return Index_h$constants_1.clang_Module_getTopLevelHeader$MH();\n+    public static MethodHandle clang_Module_getTopLevelHeader$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getTopLevelHeader$MH,\"clang_Module_getTopLevelHeader\");\n@@ -4872,1 +8249,2 @@\n-    public static @C(\"CXFile\") MemoryAddress clang_Module_getTopLevelHeader (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXModule\") Addressable Module, @C(\"unsigned int\") int Index) {\n+    public static MemoryAddress clang_Module_getTopLevelHeader ( Addressable x0,  Addressable Module,  int Index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getTopLevelHeader$MH, \"clang_Module_getTopLevelHeader\");\n@@ -4874,3 +8252,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Module_getTopLevelHeader$MH().invokeExact(x0.address(), Module.address(), Index);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), Module.address(), Index);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4879,2 +8257,2 @@\n-    public static  MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() {\n-        return Index_h$constants_1.clang_CXXConstructor_isConvertingConstructor$MH();\n+    public static MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isConvertingConstructor$MH,\"clang_CXXConstructor_isConvertingConstructor\");\n@@ -4882,1 +8260,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXConstructor_isConvertingConstructor (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXConstructor_isConvertingConstructor ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isConvertingConstructor$MH, \"clang_CXXConstructor_isConvertingConstructor\");\n@@ -4884,3 +8263,3 @@\n-            return (int)Index_h$constants_1.clang_CXXConstructor_isConvertingConstructor$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4889,2 +8268,2 @@\n-    public static  MethodHandle clang_CXXConstructor_isCopyConstructor$MH() {\n-        return Index_h$constants_1.clang_CXXConstructor_isCopyConstructor$MH();\n+    public static MethodHandle clang_CXXConstructor_isCopyConstructor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isCopyConstructor$MH,\"clang_CXXConstructor_isCopyConstructor\");\n@@ -4892,1 +8271,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXConstructor_isCopyConstructor (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXConstructor_isCopyConstructor ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isCopyConstructor$MH, \"clang_CXXConstructor_isCopyConstructor\");\n@@ -4894,3 +8274,3 @@\n-            return (int)Index_h$constants_1.clang_CXXConstructor_isCopyConstructor$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4899,2 +8279,65 @@\n-    public static  MethodHandle clang_CXXConstructor_isDefaultConstructor$MH() {\n-        return Index_h$constants_1.clang_CXXConstructor_isDefaultConstructor$MH();\n+    public static class constants$39 {\n+\n+        static final FunctionDescriptor clang_Module_getFullName$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_getFullName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getFullName\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$39.clang_Module_getFullName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Module_isSystem$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_isSystem$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_isSystem\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$39.clang_Module_isSystem$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_getNumTopLevelHeaders$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getNumTopLevelHeaders\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$39.clang_Module_getNumTopLevelHeaders$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Module_getTopLevelHeader$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_Module_getTopLevelHeader$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getTopLevelHeader\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$39.clang_Module_getTopLevelHeader$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXConstructor_isConvertingConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isConvertingConstructor\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$39.clang_CXXConstructor_isConvertingConstructor$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXConstructor_isCopyConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isCopyConstructor\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$39.clang_CXXConstructor_isCopyConstructor$FUNC, false\n+        );\n@@ -4902,1 +8345,6 @@\n-    public static @C(\"unsigned int\") int clang_CXXConstructor_isDefaultConstructor (@C(\"CXCursor\") MemorySegment C) {\n+\n+    public static MethodHandle clang_CXXConstructor_isDefaultConstructor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isDefaultConstructor$MH,\"clang_CXXConstructor_isDefaultConstructor\");\n+    }\n+    public static int clang_CXXConstructor_isDefaultConstructor ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isDefaultConstructor$MH, \"clang_CXXConstructor_isDefaultConstructor\");\n@@ -4904,3 +8352,3 @@\n-            return (int)Index_h$constants_1.clang_CXXConstructor_isDefaultConstructor$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4909,2 +8357,2 @@\n-    public static  MethodHandle clang_CXXConstructor_isMoveConstructor$MH() {\n-        return Index_h$constants_1.clang_CXXConstructor_isMoveConstructor$MH();\n+    public static MethodHandle clang_CXXConstructor_isMoveConstructor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isMoveConstructor$MH,\"clang_CXXConstructor_isMoveConstructor\");\n@@ -4912,1 +8360,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXConstructor_isMoveConstructor (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXConstructor_isMoveConstructor ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isMoveConstructor$MH, \"clang_CXXConstructor_isMoveConstructor\");\n@@ -4914,3 +8363,3 @@\n-            return (int)Index_h$constants_1.clang_CXXConstructor_isMoveConstructor$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4919,2 +8368,2 @@\n-    public static  MethodHandle clang_CXXField_isMutable$MH() {\n-        return Index_h$constants_1.clang_CXXField_isMutable$MH();\n+    public static MethodHandle clang_CXXField_isMutable$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXField_isMutable$MH,\"clang_CXXField_isMutable\");\n@@ -4922,1 +8371,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXField_isMutable (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXField_isMutable ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXField_isMutable$MH, \"clang_CXXField_isMutable\");\n@@ -4924,3 +8374,3 @@\n-            return (int)Index_h$constants_1.clang_CXXField_isMutable$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4929,2 +8379,2 @@\n-    public static  MethodHandle clang_CXXMethod_isDefaulted$MH() {\n-        return Index_h$constants_1.clang_CXXMethod_isDefaulted$MH();\n+    public static MethodHandle clang_CXXMethod_isDefaulted$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isDefaulted$MH,\"clang_CXXMethod_isDefaulted\");\n@@ -4932,1 +8382,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXMethod_isDefaulted (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXMethod_isDefaulted ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isDefaulted$MH, \"clang_CXXMethod_isDefaulted\");\n@@ -4934,3 +8385,3 @@\n-            return (int)Index_h$constants_1.clang_CXXMethod_isDefaulted$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4939,2 +8390,2 @@\n-    public static  MethodHandle clang_CXXMethod_isPureVirtual$MH() {\n-        return Index_h$constants_1.clang_CXXMethod_isPureVirtual$MH();\n+    public static MethodHandle clang_CXXMethod_isPureVirtual$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isPureVirtual$MH,\"clang_CXXMethod_isPureVirtual\");\n@@ -4942,1 +8393,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXMethod_isPureVirtual (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXMethod_isPureVirtual ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isPureVirtual$MH, \"clang_CXXMethod_isPureVirtual\");\n@@ -4944,3 +8396,3 @@\n-            return (int)Index_h$constants_1.clang_CXXMethod_isPureVirtual$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4949,2 +8401,2 @@\n-    public static  MethodHandle clang_CXXMethod_isStatic$MH() {\n-        return Index_h$constants_1.clang_CXXMethod_isStatic$MH();\n+    public static MethodHandle clang_CXXMethod_isStatic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isStatic$MH,\"clang_CXXMethod_isStatic\");\n@@ -4952,1 +8404,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXMethod_isStatic (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXMethod_isStatic ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isStatic$MH, \"clang_CXXMethod_isStatic\");\n@@ -4954,3 +8407,3 @@\n-            return (int)Index_h$constants_1.clang_CXXMethod_isStatic$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4959,2 +8412,74 @@\n-    public static  MethodHandle clang_CXXMethod_isVirtual$MH() {\n-        return Index_h$constants_1.clang_CXXMethod_isVirtual$MH();\n+    public static class constants$40 {\n+\n+        static final FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXConstructor_isDefaultConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isDefaultConstructor\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$40.clang_CXXConstructor_isDefaultConstructor$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXConstructor_isMoveConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isMoveConstructor\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$40.clang_CXXConstructor_isMoveConstructor$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXField_isMutable$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXField_isMutable$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXField_isMutable\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$40.clang_CXXField_isMutable$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXMethod_isDefaulted$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isDefaulted\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$40.clang_CXXMethod_isDefaulted$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXMethod_isPureVirtual$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isPureVirtual\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$40.clang_CXXMethod_isPureVirtual$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXMethod_isStatic$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXMethod_isStatic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isStatic\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$40.clang_CXXMethod_isStatic$FUNC, false\n+        );\n@@ -4962,1 +8487,6 @@\n-    public static @C(\"unsigned int\") int clang_CXXMethod_isVirtual (@C(\"CXCursor\") MemorySegment C) {\n+\n+    public static MethodHandle clang_CXXMethod_isVirtual$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isVirtual$MH,\"clang_CXXMethod_isVirtual\");\n+    }\n+    public static int clang_CXXMethod_isVirtual ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isVirtual$MH, \"clang_CXXMethod_isVirtual\");\n@@ -4964,3 +8494,3 @@\n-            return (int)Index_h$constants_1.clang_CXXMethod_isVirtual$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4969,2 +8499,2 @@\n-    public static  MethodHandle clang_CXXRecord_isAbstract$MH() {\n-        return Index_h$constants_1.clang_CXXRecord_isAbstract$MH();\n+    public static MethodHandle clang_CXXRecord_isAbstract$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_CXXRecord_isAbstract$MH,\"clang_CXXRecord_isAbstract\");\n@@ -4972,1 +8502,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXRecord_isAbstract (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXRecord_isAbstract ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXRecord_isAbstract$MH, \"clang_CXXRecord_isAbstract\");\n@@ -4974,3 +8505,3 @@\n-            return (int)Index_h$constants_1.clang_CXXRecord_isAbstract$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4979,2 +8510,2 @@\n-    public static  MethodHandle clang_EnumDecl_isScoped$MH() {\n-        return Index_h$constants_1.clang_EnumDecl_isScoped$MH();\n+    public static MethodHandle clang_EnumDecl_isScoped$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_EnumDecl_isScoped$MH,\"clang_EnumDecl_isScoped\");\n@@ -4982,1 +8513,2 @@\n-    public static @C(\"unsigned int\") int clang_EnumDecl_isScoped (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_EnumDecl_isScoped ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_EnumDecl_isScoped$MH, \"clang_EnumDecl_isScoped\");\n@@ -4984,3 +8516,3 @@\n-            return (int)Index_h$constants_1.clang_EnumDecl_isScoped$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4989,2 +8521,2 @@\n-    public static  MethodHandle clang_CXXMethod_isConst$MH() {\n-        return Index_h$constants_1.clang_CXXMethod_isConst$MH();\n+    public static MethodHandle clang_CXXMethod_isConst$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isConst$MH,\"clang_CXXMethod_isConst\");\n@@ -4992,1 +8524,2 @@\n-    public static @C(\"unsigned int\") int clang_CXXMethod_isConst (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_CXXMethod_isConst ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isConst$MH, \"clang_CXXMethod_isConst\");\n@@ -4994,3 +8527,3 @@\n-            return (int)Index_h$constants_1.clang_CXXMethod_isConst$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -4999,2 +8532,2 @@\n-    public static  MethodHandle clang_getTemplateCursorKind$MH() {\n-        return Index_h$constants_1.clang_getTemplateCursorKind$MH();\n+    public static MethodHandle clang_getTemplateCursorKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_getTemplateCursorKind$MH,\"clang_getTemplateCursorKind\");\n@@ -5002,1 +8535,2 @@\n-    public static @C(\"enum CXCursorKind\") int clang_getTemplateCursorKind (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_getTemplateCursorKind ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_getTemplateCursorKind$MH, \"clang_getTemplateCursorKind\");\n@@ -5004,3 +8538,3 @@\n-            return (int)Index_h$constants_1.clang_getTemplateCursorKind$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5009,2 +8543,2 @@\n-    public static  MethodHandle clang_getTemplateSpecializationKind$MH() {\n-        return Index_h$constants_1.clang_getTemplateSpecializationKind$MH();\n+    public static MethodHandle clang_getTemplateSpecializationKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_getTemplateSpecializationKind$MH,\"clang_getTemplateSpecializationKind\");\n@@ -5012,1 +8546,2 @@\n-    public static @C(\"enum CXTemplateSpecializationKind\") int clang_getTemplateSpecializationKind (@C(\"CXCursor\") MemorySegment C) {\n+    public static int clang_getTemplateSpecializationKind ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_getTemplateSpecializationKind$MH, \"clang_getTemplateSpecializationKind\");\n@@ -5014,3 +8549,3 @@\n-            return (int)Index_h$constants_1.clang_getTemplateSpecializationKind$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5019,2 +8554,78 @@\n-    public static  MethodHandle clang_getSpecializedCursorTemplate$MH() {\n-        return Index_h$constants_1.clang_getSpecializedCursorTemplate$MH();\n+    public static class constants$41 {\n+\n+        static final FunctionDescriptor clang_CXXMethod_isVirtual$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXMethod_isVirtual$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isVirtual\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_CXXMethod_isVirtual$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXRecord_isAbstract$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXRecord_isAbstract$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXRecord_isAbstract\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_CXXRecord_isAbstract$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EnumDecl_isScoped$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_EnumDecl_isScoped$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EnumDecl_isScoped\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_EnumDecl_isScoped$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXMethod_isConst$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXMethod_isConst$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isConst\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_CXXMethod_isConst$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTemplateCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTemplateCursorKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTemplateCursorKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_getTemplateCursorKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTemplateSpecializationKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTemplateSpecializationKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTemplateSpecializationKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_getTemplateSpecializationKind$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_getSpecializedCursorTemplate$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getSpecializedCursorTemplate$MH,\"clang_getSpecializedCursorTemplate\");\n@@ -5022,1 +8633,2 @@\n-    public static @C(\"CXCursor\") MemorySegment clang_getSpecializedCursorTemplate (@C(\"CXCursor\") MemorySegment C) {\n+    public static MemorySegment clang_getSpecializedCursorTemplate ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getSpecializedCursorTemplate$MH, \"clang_getSpecializedCursorTemplate\");\n@@ -5024,3 +8636,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getSpecializedCursorTemplate$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5029,2 +8641,2 @@\n-    public static  MethodHandle clang_getCursorReferenceNameRange$MH() {\n-        return Index_h$constants_1.clang_getCursorReferenceNameRange$MH();\n+    public static MethodHandle clang_getCursorReferenceNameRange$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getCursorReferenceNameRange$MH,\"clang_getCursorReferenceNameRange\");\n@@ -5032,1 +8644,2 @@\n-    public static @C(\"CXSourceRange\") MemorySegment clang_getCursorReferenceNameRange (@C(\"CXCursor\") MemorySegment C, @C(\"unsigned int\") int NameFlags, @C(\"unsigned int\") int PieceIndex) {\n+    public static MemorySegment clang_getCursorReferenceNameRange ( MemorySegment C,  int NameFlags,  int PieceIndex) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getCursorReferenceNameRange$MH, \"clang_getCursorReferenceNameRange\");\n@@ -5034,3 +8647,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorReferenceNameRange$MH().invokeExact(C, NameFlags, PieceIndex);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C, NameFlags, PieceIndex);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5039,2 +8652,2 @@\n-    public static @C(\"int\") int CXNameRange_WantQualifier() {\n-        return Index_h$constants_1.CXNameRange_WantQualifier();\n+    public static int CXNameRange_WantQualifier() {\n+        return (int)1L;\n@@ -5042,2 +8655,2 @@\n-    public static @C(\"int\") int CXNameRange_WantTemplateArgs() {\n-        return Index_h$constants_1.CXNameRange_WantTemplateArgs();\n+    public static int CXNameRange_WantTemplateArgs() {\n+        return (int)2L;\n@@ -5045,2 +8658,2 @@\n-    public static @C(\"int\") int CXNameRange_WantSinglePiece() {\n-        return Index_h$constants_1.CXNameRange_WantSinglePiece();\n+    public static int CXNameRange_WantSinglePiece() {\n+        return (int)4L;\n@@ -5048,2 +8661,2 @@\n-    public static @C(\"int\") int CXToken_Punctuation() {\n-        return Index_h$constants_1.CXToken_Punctuation();\n+    public static int CXToken_Punctuation() {\n+        return (int)0L;\n@@ -5051,2 +8664,2 @@\n-    public static @C(\"int\") int CXToken_Keyword() {\n-        return Index_h$constants_1.CXToken_Keyword();\n+    public static int CXToken_Keyword() {\n+        return (int)1L;\n@@ -5054,2 +8667,2 @@\n-    public static @C(\"int\") int CXToken_Identifier() {\n-        return Index_h$constants_1.CXToken_Identifier();\n+    public static int CXToken_Identifier() {\n+        return (int)2L;\n@@ -5057,2 +8670,2 @@\n-    public static @C(\"int\") int CXToken_Literal() {\n-        return Index_h$constants_1.CXToken_Literal();\n+    public static int CXToken_Literal() {\n+        return (int)3L;\n@@ -5060,2 +8673,2 @@\n-    public static @C(\"int\") int CXToken_Comment() {\n-        return Index_h$constants_1.CXToken_Comment();\n+    public static int CXToken_Comment() {\n+        return (int)4L;\n@@ -5065,1 +8678,4 @@\n-        private CXToken() {}\n+        static final MemoryLayout CXToken$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+            C_POINTER.withName(\"ptr_data\")\n+        );\n@@ -5067,1 +8683,1 @@\n-            return Index_h$constants_1.CXToken$struct$LAYOUT();\n+            return CXToken.CXToken$struct$LAYOUT;\n@@ -5072,0 +8688,1 @@\n+        static final VarHandle ptr_data$VH = MemoryHandles.asAddressVarHandle(CXToken$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ptr_data\")));\n@@ -5073,1 +8690,1 @@\n-            return Index_h$constants_1.CXToken$ptr_data$VH();\n+            return CXToken.ptr_data$VH;\n@@ -5075,2 +8692,2 @@\n-        public static  @C(\"void*\") MemoryAddress ptr_data$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXToken$ptr_data$VH().get(seg);\n+        public static MemoryAddress ptr_data$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg);\n@@ -5078,2 +8695,2 @@\n-        public static  @C(\"void*\") MemoryAddress ptr_data$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXToken$ptr_data$VH().get(seg.asSlice(index*sizeof()));\n+        public static void ptr_data$set( MemorySegment seg, MemoryAddress x) {\n+            CXToken.ptr_data$VH.set(seg, x);\n@@ -5081,2 +8698,2 @@\n-        public static void ptr_data$set(@C(\"struct \") MemorySegment seg, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_1.CXToken$ptr_data$VH().set(seg, x);\n+        public static MemoryAddress ptr_data$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg.asSlice(index*sizeof()));\n@@ -5084,2 +8701,2 @@\n-        public static void ptr_data$set(@C(\"struct \") MemorySegment seg, long index, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_1.CXToken$ptr_data$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void ptr_data$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXToken.ptr_data$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -5088,3 +8705,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -5092,1 +8709,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -5095,1 +8712,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -5098,1 +8715,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -5101,1 +8718,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -5104,2 +8721,2 @@\n-    public static  MethodHandle clang_getToken$MH() {\n-        return Index_h$constants_1.clang_getToken$MH();\n+    public static MethodHandle clang_getToken$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getToken$MH,\"clang_getToken\");\n@@ -5107,1 +8724,2 @@\n-    public static @C(\"CXToken*\") MemoryAddress clang_getToken (@C(\"CXTranslationUnit\") Addressable TU, @C(\"CXSourceLocation\") MemorySegment Location) {\n+    public static MemoryAddress clang_getToken ( Addressable TU,  MemorySegment Location) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getToken$MH, \"clang_getToken\");\n@@ -5109,3 +8727,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getToken$MH().invokeExact(TU.address(), Location);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(TU.address(), Location);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5114,2 +8732,2 @@\n-    public static  MethodHandle clang_getTokenKind$MH() {\n-        return Index_h$constants_1.clang_getTokenKind$MH();\n+    public static MethodHandle clang_getTokenKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getTokenKind$MH,\"clang_getTokenKind\");\n@@ -5117,1 +8735,2 @@\n-    public static @C(\"CXTokenKind\") int clang_getTokenKind (@C(\"CXToken\") MemorySegment x0) {\n+    public static int clang_getTokenKind ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTokenKind$MH, \"clang_getTokenKind\");\n@@ -5119,3 +8738,3 @@\n-            return (int)Index_h$constants_1.clang_getTokenKind$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5124,2 +8743,2 @@\n-    public static  MethodHandle clang_getTokenSpelling$MH() {\n-        return Index_h$constants_1.clang_getTokenSpelling$MH();\n+    public static MethodHandle clang_getTokenSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n@@ -5127,1 +8746,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getTokenSpelling (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXToken\") MemorySegment x1) {\n+    public static MemorySegment clang_getTokenSpelling ( Addressable x0,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTokenSpelling$MH, \"clang_getTokenSpelling\");\n@@ -5129,3 +8749,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTokenSpelling$MH().invokeExact(x0.address(), x1);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5134,2 +8754,2 @@\n-    public static  MethodHandle clang_getTokenLocation$MH() {\n-        return Index_h$constants_1.clang_getTokenLocation$MH();\n+    public static MethodHandle clang_getTokenLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getTokenLocation$MH,\"clang_getTokenLocation\");\n@@ -5137,1 +8757,2 @@\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_getTokenLocation (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXToken\") MemorySegment x1) {\n+    public static MemorySegment clang_getTokenLocation ( Addressable x0,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTokenLocation$MH, \"clang_getTokenLocation\");\n@@ -5139,3 +8760,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTokenLocation$MH().invokeExact(x0.address(), x1);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5144,9 +8765,92 @@\n-    public static  MethodHandle clang_getTokenExtent$MH() {\n-        return Index_h$constants_1.clang_getTokenExtent$MH();\n-    }\n-    public static @C(\"CXSourceRange\") MemorySegment clang_getTokenExtent (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXToken\") MemorySegment x1) {\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getTokenExtent$MH().invokeExact(x0.address(), x1);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n+    public static class constants$42 {\n+\n+        static final FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getSpecializedCursorTemplate$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getSpecializedCursorTemplate\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$42.clang_getSpecializedCursorTemplate$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorReferenceNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCursorReferenceNameRange$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorReferenceNameRange\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$42.clang_getCursorReferenceNameRange$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getToken$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_getToken$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getToken\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$42.clang_getToken$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTokenKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+                C_POINTER.withName(\"ptr_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTokenKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTokenKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$42.clang_getTokenKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+                C_POINTER.withName(\"ptr_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTokenSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTokenSpelling\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$42.clang_getTokenSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTokenLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+                C_POINTER.withName(\"ptr_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTokenLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTokenLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$42.clang_getTokenLocation$FUNC, false\n+        );\n@@ -5154,2 +8858,3 @@\n-    public static  MethodHandle clang_tokenize$MH() {\n-        return Index_h$constants_1.clang_tokenize$MH();\n+\n+    public static MethodHandle clang_getTokenExtent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_getTokenExtent$MH,\"clang_getTokenExtent\");\n@@ -5157,1 +8862,2 @@\n-    public static void clang_tokenize (@C(\"CXTranslationUnit\") Addressable TU, @C(\"CXSourceRange\") MemorySegment Range, @C(\"CXToken**\") Addressable Tokens, @C(\"unsigned int*\") Addressable NumTokens) {\n+    public static MemorySegment clang_getTokenExtent ( Addressable x0,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getTokenExtent$MH, \"clang_getTokenExtent\");\n@@ -5159,3 +8865,3 @@\n-            Index_h$constants_1.clang_tokenize$MH().invokeExact(TU.address(), Range, Tokens.address(), NumTokens.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5164,2 +8870,2 @@\n-    public static  MethodHandle clang_annotateTokens$MH() {\n-        return Index_h$constants_1.clang_annotateTokens$MH();\n+    public static MethodHandle clang_tokenize$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_tokenize$MH,\"clang_tokenize\");\n@@ -5167,1 +8873,2 @@\n-    public static void clang_annotateTokens (@C(\"CXTranslationUnit\") Addressable TU, @C(\"CXToken*\") Addressable Tokens, @C(\"unsigned int\") int NumTokens, @C(\"CXCursor*\") Addressable Cursors) {\n+    public static void clang_tokenize ( Addressable TU,  MemorySegment Range,  Addressable Tokens,  Addressable NumTokens) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_tokenize$MH, \"clang_tokenize\");\n@@ -5169,3 +8876,3 @@\n-            Index_h$constants_1.clang_annotateTokens$MH().invokeExact(TU.address(), Tokens.address(), NumTokens, Cursors.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(TU.address(), Range, Tokens.address(), NumTokens.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5174,2 +8881,2 @@\n-    public static  MethodHandle clang_disposeTokens$MH() {\n-        return Index_h$constants_1.clang_disposeTokens$MH();\n+    public static MethodHandle clang_annotateTokens$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_annotateTokens$MH,\"clang_annotateTokens\");\n@@ -5177,1 +8884,2 @@\n-    public static void clang_disposeTokens (@C(\"CXTranslationUnit\") Addressable TU, @C(\"CXToken*\") Addressable Tokens, @C(\"unsigned int\") int NumTokens) {\n+    public static void clang_annotateTokens ( Addressable TU,  Addressable Tokens,  int NumTokens,  Addressable Cursors) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_annotateTokens$MH, \"clang_annotateTokens\");\n@@ -5179,3 +8887,3 @@\n-            Index_h$constants_1.clang_disposeTokens$MH().invokeExact(TU.address(), Tokens.address(), NumTokens);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(TU.address(), Tokens.address(), NumTokens, Cursors.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5184,2 +8892,2 @@\n-    public static  MethodHandle clang_getCursorKindSpelling$MH() {\n-        return Index_h$constants_1.clang_getCursorKindSpelling$MH();\n+    public static MethodHandle clang_disposeTokens$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_disposeTokens$MH,\"clang_disposeTokens\");\n@@ -5187,1 +8895,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCursorKindSpelling (@C(\"enum CXCursorKind\") int Kind) {\n+    public static void clang_disposeTokens ( Addressable TU,  Addressable Tokens,  int NumTokens) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_disposeTokens$MH, \"clang_disposeTokens\");\n@@ -5189,3 +8898,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCursorKindSpelling$MH().invokeExact(Kind);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(TU.address(), Tokens.address(), NumTokens);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5194,2 +8903,2 @@\n-    public static  MethodHandle clang_getDefinitionSpellingAndExtent$MH() {\n-        return Index_h$constants_1.clang_getDefinitionSpellingAndExtent$MH();\n+    public static MethodHandle clang_getCursorKindSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n@@ -5197,1 +8906,2 @@\n-    public static void clang_getDefinitionSpellingAndExtent (@C(\"CXCursor\") MemorySegment x0, @C(\"char**\") Addressable startBuf, @C(\"char**\") Addressable endBuf, @C(\"unsigned int*\") Addressable startLine, @C(\"unsigned int*\") Addressable startColumn, @C(\"unsigned int*\") Addressable endLine, @C(\"unsigned int*\") Addressable endColumn) {\n+    public static MemorySegment clang_getCursorKindSpelling ( int Kind) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getCursorKindSpelling$MH, \"clang_getCursorKindSpelling\");\n@@ -5199,3 +8909,3 @@\n-            Index_h$constants_1.clang_getDefinitionSpellingAndExtent$MH().invokeExact(x0, startBuf.address(), endBuf.address(), startLine.address(), startColumn.address(), endLine.address(), endColumn.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Kind);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5204,2 +8914,2 @@\n-    public static  MethodHandle clang_enableStackTraces$MH() {\n-        return Index_h$constants_1.clang_enableStackTraces$MH();\n+    public static MethodHandle clang_getDefinitionSpellingAndExtent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_getDefinitionSpellingAndExtent$MH,\"clang_getDefinitionSpellingAndExtent\");\n@@ -5207,1 +8917,2 @@\n-    public static void clang_enableStackTraces () {\n+    public static void clang_getDefinitionSpellingAndExtent ( MemorySegment x0,  Addressable startBuf,  Addressable endBuf,  Addressable startLine,  Addressable startColumn,  Addressable endLine,  Addressable endColumn) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getDefinitionSpellingAndExtent$MH, \"clang_getDefinitionSpellingAndExtent\");\n@@ -5209,3 +8920,3 @@\n-            Index_h$constants_1.clang_enableStackTraces$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(x0, startBuf.address(), endBuf.address(), startLine.address(), startColumn.address(), endLine.address(), endColumn.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5214,2 +8925,88 @@\n-    public static  MethodHandle clang_executeOnThread$MH() {\n-        return Index_h$constants_1.clang_executeOnThread$MH();\n+    public static class constants$43 {\n+\n+        static final FunctionDescriptor clang_getTokenExtent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(4, C_INT).withName(\"int_data\"),\n+                C_POINTER.withName(\"ptr_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTokenExtent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTokenExtent\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$43.clang_getTokenExtent$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_tokenize$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_tokenize$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_tokenize\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$43.clang_tokenize$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_annotateTokens$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_annotateTokens$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_annotateTokens\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$43.clang_annotateTokens$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeTokens$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_disposeTokens$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeTokens\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+            constants$43.clang_disposeTokens$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCursorKindSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorKindSpelling\",\n+            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$43.clang_getCursorKindSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getDefinitionSpellingAndExtent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDefinitionSpellingAndExtent\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$43.clang_getDefinitionSpellingAndExtent$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_enableStackTraces$MH() {\n+        return RuntimeHelper.requireNonNull(constants$44.clang_enableStackTraces$MH,\"clang_enableStackTraces\");\n@@ -5217,1 +9014,2 @@\n-    public static void clang_executeOnThread (@C(\"void(*)(void*)\") Addressable fn, @C(\"void*\") Addressable user_data, @C(\"unsigned int\") int stack_size) {\n+    public static void clang_enableStackTraces () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_enableStackTraces$MH, \"clang_enableStackTraces\");\n@@ -5219,3 +9017,3 @@\n-            Index_h$constants_1.clang_executeOnThread$MH().invokeExact(fn.address(), user_data.address(), stack_size);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5225,0 +9023,1 @@\n+\n@@ -5226,2 +9025,2 @@\n-        public static  @C(\"void(*)(void*)\") MemorySegment allocate(clang_executeOnThread$fn fi) {\n-            return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, Index_h$constants_1.clang_executeOnThread$fn$FUNC(), \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+        static MemorySegment allocate(clang_executeOnThread$fn fi) {\n+            return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, constants$44.clang_executeOnThread$fn$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n@@ -5229,1 +9028,1 @@\n-        public static  @C(\"void(*)(void*)\") MemorySegment allocate(clang_executeOnThread$fn fi, NativeScope scope) {\n+        static MemorySegment allocate(clang_executeOnThread$fn fi, NativeScope scope) {\n@@ -5233,0 +9032,12 @@\n+\n+    public static MethodHandle clang_executeOnThread$MH() {\n+        return RuntimeHelper.requireNonNull(constants$44.clang_executeOnThread$MH,\"clang_executeOnThread\");\n+    }\n+    public static void clang_executeOnThread ( Addressable fn,  Addressable user_data,  int stack_size) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_executeOnThread$MH, \"clang_executeOnThread\");\n+        try {\n+            mh$.invokeExact(fn.address(), user_data.address(), stack_size);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -5235,1 +9046,5 @@\n-        private CXCompletionResult() {}\n+        static final MemoryLayout CXCompletionResult$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"CursorKind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_POINTER.withName(\"CompletionString\")\n+        );\n@@ -5237,1 +9052,1 @@\n-            return Index_h$constants_1.CXCompletionResult$struct$LAYOUT();\n+            return CXCompletionResult.CXCompletionResult$struct$LAYOUT;\n@@ -5239,0 +9054,1 @@\n+        static final VarHandle CursorKind$VH = CXCompletionResult$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"CursorKind\"));\n@@ -5240,1 +9056,1 @@\n-            return Index_h$constants_1.CXCompletionResult$CursorKind$VH();\n+            return CXCompletionResult.CursorKind$VH;\n@@ -5242,2 +9058,2 @@\n-        public static  @C(\"enum CXCursorKind\") int CursorKind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXCompletionResult$CursorKind$VH().get(seg);\n+        public static int CursorKind$get(MemorySegment seg) {\n+            return (int)CXCompletionResult.CursorKind$VH.get(seg);\n@@ -5245,2 +9061,2 @@\n-        public static  @C(\"enum CXCursorKind\") int CursorKind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXCompletionResult$CursorKind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void CursorKind$set( MemorySegment seg, int x) {\n+            CXCompletionResult.CursorKind$VH.set(seg, x);\n@@ -5248,2 +9064,2 @@\n-        public static void CursorKind$set(@C(\"struct \") MemorySegment seg, @C(\"enum CXCursorKind\") int x) {\n-            Index_h$constants_1.CXCompletionResult$CursorKind$VH().set(seg, x);\n+        public static int CursorKind$get(MemorySegment seg, long index) {\n+            return (int)CXCompletionResult.CursorKind$VH.get(seg.asSlice(index*sizeof()));\n@@ -5251,2 +9067,2 @@\n-        public static void CursorKind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"enum CXCursorKind\") int x) {\n-            Index_h$constants_1.CXCompletionResult$CursorKind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void CursorKind$set(MemorySegment seg, long index, int x) {\n+            CXCompletionResult.CursorKind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -5254,0 +9070,1 @@\n+        static final VarHandle CompletionString$VH = MemoryHandles.asAddressVarHandle(CXCompletionResult$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"CompletionString\")));\n@@ -5255,1 +9072,1 @@\n-            return Index_h$constants_1.CXCompletionResult$CompletionString$VH();\n+            return CXCompletionResult.CompletionString$VH;\n@@ -5257,2 +9074,2 @@\n-        public static  @C(\"CXCompletionString\") MemoryAddress CompletionString$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCompletionResult$CompletionString$VH().get(seg);\n+        public static MemoryAddress CompletionString$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCompletionResult.CompletionString$VH.get(seg);\n@@ -5260,2 +9077,2 @@\n-        public static  @C(\"CXCompletionString\") MemoryAddress CompletionString$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCompletionResult$CompletionString$VH().get(seg.asSlice(index*sizeof()));\n+        public static void CompletionString$set( MemorySegment seg, MemoryAddress x) {\n+            CXCompletionResult.CompletionString$VH.set(seg, x);\n@@ -5263,2 +9080,2 @@\n-        public static void CompletionString$set(@C(\"struct \") MemorySegment seg, @C(\"CXCompletionString\") MemoryAddress x) {\n-            Index_h$constants_1.CXCompletionResult$CompletionString$VH().set(seg, x);\n+        public static MemoryAddress CompletionString$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCompletionResult.CompletionString$VH.get(seg.asSlice(index*sizeof()));\n@@ -5266,2 +9083,2 @@\n-        public static void CompletionString$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXCompletionString\") MemoryAddress x) {\n-            Index_h$constants_1.CXCompletionResult$CompletionString$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void CompletionString$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXCompletionResult.CompletionString$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -5270,3 +9087,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -5274,1 +9091,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -5277,1 +9094,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -5280,1 +9097,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -5283,1 +9100,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -5286,2 +9103,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_Optional() {\n-        return Index_h$constants_1.CXCompletionChunk_Optional();\n+    public static int CXCompletionChunk_Optional() {\n+        return (int)0L;\n@@ -5289,2 +9106,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_TypedText() {\n-        return Index_h$constants_1.CXCompletionChunk_TypedText();\n+    public static int CXCompletionChunk_TypedText() {\n+        return (int)1L;\n@@ -5292,2 +9109,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_Text() {\n-        return Index_h$constants_1.CXCompletionChunk_Text();\n+    public static int CXCompletionChunk_Text() {\n+        return (int)2L;\n@@ -5295,2 +9112,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_Placeholder() {\n-        return Index_h$constants_1.CXCompletionChunk_Placeholder();\n+    public static int CXCompletionChunk_Placeholder() {\n+        return (int)3L;\n@@ -5298,2 +9115,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_Informative() {\n-        return Index_h$constants_1.CXCompletionChunk_Informative();\n+    public static int CXCompletionChunk_Informative() {\n+        return (int)4L;\n@@ -5301,2 +9118,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_CurrentParameter() {\n-        return Index_h$constants_1.CXCompletionChunk_CurrentParameter();\n+    public static int CXCompletionChunk_CurrentParameter() {\n+        return (int)5L;\n@@ -5304,2 +9121,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_LeftParen() {\n-        return Index_h$constants_1.CXCompletionChunk_LeftParen();\n+    public static int CXCompletionChunk_LeftParen() {\n+        return (int)6L;\n@@ -5307,2 +9124,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_RightParen() {\n-        return Index_h$constants_1.CXCompletionChunk_RightParen();\n+    public static int CXCompletionChunk_RightParen() {\n+        return (int)7L;\n@@ -5310,2 +9127,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_LeftBracket() {\n-        return Index_h$constants_1.CXCompletionChunk_LeftBracket();\n+    public static int CXCompletionChunk_LeftBracket() {\n+        return (int)8L;\n@@ -5313,2 +9130,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_RightBracket() {\n-        return Index_h$constants_1.CXCompletionChunk_RightBracket();\n+    public static int CXCompletionChunk_RightBracket() {\n+        return (int)9L;\n@@ -5316,2 +9133,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_LeftBrace() {\n-        return Index_h$constants_1.CXCompletionChunk_LeftBrace();\n+    public static int CXCompletionChunk_LeftBrace() {\n+        return (int)10L;\n@@ -5319,2 +9136,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_RightBrace() {\n-        return Index_h$constants_1.CXCompletionChunk_RightBrace();\n+    public static int CXCompletionChunk_RightBrace() {\n+        return (int)11L;\n@@ -5322,2 +9139,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_LeftAngle() {\n-        return Index_h$constants_1.CXCompletionChunk_LeftAngle();\n+    public static int CXCompletionChunk_LeftAngle() {\n+        return (int)12L;\n@@ -5325,2 +9142,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_RightAngle() {\n-        return Index_h$constants_1.CXCompletionChunk_RightAngle();\n+    public static int CXCompletionChunk_RightAngle() {\n+        return (int)13L;\n@@ -5328,2 +9145,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_Comma() {\n-        return Index_h$constants_1.CXCompletionChunk_Comma();\n+    public static int CXCompletionChunk_Comma() {\n+        return (int)14L;\n@@ -5331,2 +9148,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_ResultType() {\n-        return Index_h$constants_1.CXCompletionChunk_ResultType();\n+    public static int CXCompletionChunk_ResultType() {\n+        return (int)15L;\n@@ -5334,2 +9151,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_Colon() {\n-        return Index_h$constants_1.CXCompletionChunk_Colon();\n+    public static int CXCompletionChunk_Colon() {\n+        return (int)16L;\n@@ -5337,2 +9154,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_SemiColon() {\n-        return Index_h$constants_1.CXCompletionChunk_SemiColon();\n+    public static int CXCompletionChunk_SemiColon() {\n+        return (int)17L;\n@@ -5340,2 +9157,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_Equal() {\n-        return Index_h$constants_1.CXCompletionChunk_Equal();\n+    public static int CXCompletionChunk_Equal() {\n+        return (int)18L;\n@@ -5343,2 +9160,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_HorizontalSpace() {\n-        return Index_h$constants_1.CXCompletionChunk_HorizontalSpace();\n+    public static int CXCompletionChunk_HorizontalSpace() {\n+        return (int)19L;\n@@ -5346,2 +9163,2 @@\n-    public static @C(\"int\") int CXCompletionChunk_VerticalSpace() {\n-        return Index_h$constants_1.CXCompletionChunk_VerticalSpace();\n+    public static int CXCompletionChunk_VerticalSpace() {\n+        return (int)20L;\n@@ -5349,2 +9166,2 @@\n-    public static  MethodHandle clang_getCompletionChunkKind$MH() {\n-        return Index_h$constants_1.clang_getCompletionChunkKind$MH();\n+    public static MethodHandle clang_getCompletionChunkKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkKind$MH,\"clang_getCompletionChunkKind\");\n@@ -5352,1 +9169,2 @@\n-    public static @C(\"enum CXCompletionChunkKind\") int clang_getCompletionChunkKind (@C(\"CXCompletionString\") Addressable completion_string, @C(\"unsigned int\") int chunk_number) {\n+    public static int clang_getCompletionChunkKind ( Addressable completion_string,  int chunk_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkKind$MH, \"clang_getCompletionChunkKind\");\n@@ -5354,3 +9172,3 @@\n-            return (int)Index_h$constants_1.clang_getCompletionChunkKind$MH().invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(completion_string.address(), chunk_number);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5359,2 +9177,2 @@\n-    public static  MethodHandle clang_getCompletionChunkText$MH() {\n-        return Index_h$constants_1.clang_getCompletionChunkText$MH();\n+    public static MethodHandle clang_getCompletionChunkText$MH() {\n+        return RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkText$MH,\"clang_getCompletionChunkText\");\n@@ -5362,1 +9180,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCompletionChunkText (@C(\"CXCompletionString\") Addressable completion_string, @C(\"unsigned int\") int chunk_number) {\n+    public static MemorySegment clang_getCompletionChunkText ( Addressable completion_string,  int chunk_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkText$MH, \"clang_getCompletionChunkText\");\n@@ -5364,3 +9183,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionChunkText$MH().invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address(), chunk_number);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5369,2 +9188,2 @@\n-    public static  MethodHandle clang_getCompletionChunkCompletionString$MH() {\n-        return Index_h$constants_1.clang_getCompletionChunkCompletionString$MH();\n+    public static MethodHandle clang_getCompletionChunkCompletionString$MH() {\n+        return RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkCompletionString$MH,\"clang_getCompletionChunkCompletionString\");\n@@ -5372,1 +9191,2 @@\n-    public static @C(\"CXCompletionString\") MemoryAddress clang_getCompletionChunkCompletionString (@C(\"CXCompletionString\") Addressable completion_string, @C(\"unsigned int\") int chunk_number) {\n+    public static MemoryAddress clang_getCompletionChunkCompletionString ( Addressable completion_string,  int chunk_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkCompletionString$MH, \"clang_getCompletionChunkCompletionString\");\n@@ -5374,3 +9194,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getCompletionChunkCompletionString$MH().invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(completion_string.address(), chunk_number);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5379,2 +9199,52 @@\n-    public static  MethodHandle clang_getNumCompletionChunks$MH() {\n-        return Index_h$constants_1.clang_getNumCompletionChunks$MH();\n+    public static class constants$44 {\n+\n+        static final FunctionDescriptor clang_enableStackTraces$FUNC = FunctionDescriptor.ofVoid();\n+        static final MethodHandle clang_enableStackTraces$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_enableStackTraces\",\n+            \"()V\",\n+            constants$44.clang_enableStackTraces$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_executeOnThread$fn$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor clang_executeOnThread$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_executeOnThread$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_executeOnThread\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+            constants$44.clang_executeOnThread$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionChunkKind$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionChunkKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionChunkKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$44.clang_getCompletionChunkKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionChunkText$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionChunkText$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionChunkText\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$44.clang_getCompletionChunkText$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionChunkCompletionString$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionChunkCompletionString\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$44.clang_getCompletionChunkCompletionString$FUNC, false\n+        );\n@@ -5382,1 +9252,6 @@\n-    public static @C(\"unsigned int\") int clang_getNumCompletionChunks (@C(\"CXCompletionString\") Addressable completion_string) {\n+\n+    public static MethodHandle clang_getNumCompletionChunks$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH,\"clang_getNumCompletionChunks\");\n+    }\n+    public static int clang_getNumCompletionChunks ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH, \"clang_getNumCompletionChunks\");\n@@ -5384,3 +9259,3 @@\n-            return (int)Index_h$constants_1.clang_getNumCompletionChunks$MH().invokeExact(completion_string.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(completion_string.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5389,2 +9264,2 @@\n-    public static  MethodHandle clang_getCompletionPriority$MH() {\n-        return Index_h$constants_1.clang_getCompletionPriority$MH();\n+    public static MethodHandle clang_getCompletionPriority$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH,\"clang_getCompletionPriority\");\n@@ -5392,1 +9267,2 @@\n-    public static @C(\"unsigned int\") int clang_getCompletionPriority (@C(\"CXCompletionString\") Addressable completion_string) {\n+    public static int clang_getCompletionPriority ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH, \"clang_getCompletionPriority\");\n@@ -5394,3 +9270,3 @@\n-            return (int)Index_h$constants_1.clang_getCompletionPriority$MH().invokeExact(completion_string.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(completion_string.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5399,2 +9275,2 @@\n-    public static  MethodHandle clang_getCompletionAvailability$MH() {\n-        return Index_h$constants_1.clang_getCompletionAvailability$MH();\n+    public static MethodHandle clang_getCompletionAvailability$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH,\"clang_getCompletionAvailability\");\n@@ -5402,1 +9278,2 @@\n-    public static @C(\"enum CXAvailabilityKind\") int clang_getCompletionAvailability (@C(\"CXCompletionString\") Addressable completion_string) {\n+    public static int clang_getCompletionAvailability ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH, \"clang_getCompletionAvailability\");\n@@ -5404,3 +9281,3 @@\n-            return (int)Index_h$constants_1.clang_getCompletionAvailability$MH().invokeExact(completion_string.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(completion_string.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5409,2 +9286,2 @@\n-    public static  MethodHandle clang_getCompletionNumAnnotations$MH() {\n-        return Index_h$constants_1.clang_getCompletionNumAnnotations$MH();\n+    public static MethodHandle clang_getCompletionNumAnnotations$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionNumAnnotations$MH,\"clang_getCompletionNumAnnotations\");\n@@ -5412,1 +9289,2 @@\n-    public static @C(\"unsigned int\") int clang_getCompletionNumAnnotations (@C(\"CXCompletionString\") Addressable completion_string) {\n+    public static int clang_getCompletionNumAnnotations ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionNumAnnotations$MH, \"clang_getCompletionNumAnnotations\");\n@@ -5414,3 +9292,3 @@\n-            return (int)Index_h$constants_1.clang_getCompletionNumAnnotations$MH().invokeExact(completion_string.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(completion_string.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5419,2 +9297,2 @@\n-    public static  MethodHandle clang_getCompletionAnnotation$MH() {\n-        return Index_h$constants_1.clang_getCompletionAnnotation$MH();\n+    public static MethodHandle clang_getCompletionAnnotation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAnnotation$MH,\"clang_getCompletionAnnotation\");\n@@ -5422,1 +9300,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCompletionAnnotation (@C(\"CXCompletionString\") Addressable completion_string, @C(\"unsigned int\") int annotation_number) {\n+    public static MemorySegment clang_getCompletionAnnotation ( Addressable completion_string,  int annotation_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAnnotation$MH, \"clang_getCompletionAnnotation\");\n@@ -5424,3 +9303,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionAnnotation$MH().invokeExact(completion_string.address(), annotation_number);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address(), annotation_number);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5429,2 +9308,2 @@\n-    public static  MethodHandle clang_getCompletionParent$MH() {\n-        return Index_h$constants_1.clang_getCompletionParent$MH();\n+    public static MethodHandle clang_getCompletionParent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionParent$MH,\"clang_getCompletionParent\");\n@@ -5432,1 +9311,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCompletionParent (@C(\"CXCompletionString\") Addressable completion_string, @C(\"enum CXCursorKind*\") Addressable kind) {\n+    public static MemorySegment clang_getCompletionParent ( Addressable completion_string,  Addressable kind) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionParent$MH, \"clang_getCompletionParent\");\n@@ -5434,3 +9314,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionParent$MH().invokeExact(completion_string.address(), kind.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address(), kind.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5439,2 +9319,60 @@\n-    public static  MethodHandle clang_getCompletionBriefComment$MH() {\n-        return Index_h$constants_1.clang_getCompletionBriefComment$MH();\n+    public static class constants$45 {\n+\n+        static final FunctionDescriptor clang_getNumCompletionChunks$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getNumCompletionChunks$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getNumCompletionChunks\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$45.clang_getNumCompletionChunks$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionPriority$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionPriority$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionPriority\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$45.clang_getCompletionPriority$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionAvailability$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionAvailability$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionAvailability\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$45.clang_getCompletionAvailability$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionNumAnnotations$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionNumAnnotations$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionNumAnnotations\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$45.clang_getCompletionNumAnnotations$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionAnnotation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionAnnotation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionAnnotation\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$45.clang_getCompletionAnnotation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionParent$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionParent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionParent\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$45.clang_getCompletionParent$FUNC, false\n+        );\n@@ -5442,1 +9380,6 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCompletionBriefComment (@C(\"CXCompletionString\") Addressable completion_string) {\n+\n+    public static MethodHandle clang_getCompletionBriefComment$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionBriefComment$MH,\"clang_getCompletionBriefComment\");\n+    }\n+    public static MemorySegment clang_getCompletionBriefComment ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionBriefComment$MH, \"clang_getCompletionBriefComment\");\n@@ -5444,3 +9387,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionBriefComment$MH().invokeExact(completion_string.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5449,2 +9392,2 @@\n-    public static  MethodHandle clang_getCursorCompletionString$MH() {\n-        return Index_h$constants_1.clang_getCursorCompletionString$MH();\n+    public static MethodHandle clang_getCursorCompletionString$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_getCursorCompletionString$MH,\"clang_getCursorCompletionString\");\n@@ -5452,1 +9395,2 @@\n-    public static @C(\"CXCompletionString\") MemoryAddress clang_getCursorCompletionString (@C(\"CXCursor\") MemorySegment cursor) {\n+    public static MemoryAddress clang_getCursorCompletionString ( MemorySegment cursor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCursorCompletionString$MH, \"clang_getCursorCompletionString\");\n@@ -5454,3 +9398,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getCursorCompletionString$MH().invokeExact(cursor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5461,1 +9405,5 @@\n-        private CXCodeCompleteResults() {}\n+        static final MemoryLayout CXCodeCompleteResults$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"Results\"),\n+            C_INT.withName(\"NumResults\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -5463,1 +9411,1 @@\n-            return Index_h$constants_1.CXCodeCompleteResults$struct$LAYOUT();\n+            return CXCodeCompleteResults.CXCodeCompleteResults$struct$LAYOUT;\n@@ -5465,0 +9413,1 @@\n+        static final VarHandle Results$VH = MemoryHandles.asAddressVarHandle(CXCodeCompleteResults$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Results\")));\n@@ -5466,1 +9415,1 @@\n-            return Index_h$constants_1.CXCodeCompleteResults$Results$VH();\n+            return CXCodeCompleteResults.Results$VH;\n@@ -5468,2 +9417,2 @@\n-        public static  @C(\"CXCompletionResult*\") MemoryAddress Results$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCodeCompleteResults$Results$VH().get(seg);\n+        public static MemoryAddress Results$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCodeCompleteResults.Results$VH.get(seg);\n@@ -5471,2 +9420,2 @@\n-        public static  @C(\"CXCompletionResult*\") MemoryAddress Results$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCodeCompleteResults$Results$VH().get(seg.asSlice(index*sizeof()));\n+        public static void Results$set( MemorySegment seg, MemoryAddress x) {\n+            CXCodeCompleteResults.Results$VH.set(seg, x);\n@@ -5474,2 +9423,2 @@\n-        public static void Results$set(@C(\"struct \") MemorySegment seg, @C(\"CXCompletionResult*\") MemoryAddress x) {\n-            Index_h$constants_1.CXCodeCompleteResults$Results$VH().set(seg, x);\n+        public static MemoryAddress Results$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCodeCompleteResults.Results$VH.get(seg.asSlice(index*sizeof()));\n@@ -5477,2 +9426,2 @@\n-        public static void Results$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXCompletionResult*\") MemoryAddress x) {\n-            Index_h$constants_1.CXCodeCompleteResults$Results$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void Results$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXCodeCompleteResults.Results$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -5480,0 +9429,1 @@\n+        static final VarHandle NumResults$VH = CXCodeCompleteResults$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"NumResults\"));\n@@ -5481,1 +9431,1 @@\n-            return Index_h$constants_1.CXCodeCompleteResults$NumResults$VH();\n+            return CXCodeCompleteResults.NumResults$VH;\n@@ -5483,2 +9433,2 @@\n-        public static  @C(\"unsigned int\") int NumResults$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXCodeCompleteResults$NumResults$VH().get(seg);\n+        public static int NumResults$get(MemorySegment seg) {\n+            return (int)CXCodeCompleteResults.NumResults$VH.get(seg);\n@@ -5486,2 +9436,2 @@\n-        public static  @C(\"unsigned int\") int NumResults$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXCodeCompleteResults$NumResults$VH().get(seg.asSlice(index*sizeof()));\n+        public static void NumResults$set( MemorySegment seg, int x) {\n+            CXCodeCompleteResults.NumResults$VH.set(seg, x);\n@@ -5489,2 +9439,2 @@\n-        public static void NumResults$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXCodeCompleteResults$NumResults$VH().set(seg, x);\n+        public static int NumResults$get(MemorySegment seg, long index) {\n+            return (int)CXCodeCompleteResults.NumResults$VH.get(seg.asSlice(index*sizeof()));\n@@ -5492,2 +9442,2 @@\n-        public static void NumResults$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXCodeCompleteResults$NumResults$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void NumResults$set(MemorySegment seg, long index, int x) {\n+            CXCodeCompleteResults.NumResults$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -5496,3 +9446,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -5500,1 +9450,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -5503,1 +9453,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -5506,1 +9456,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -5509,1 +9459,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -5512,2 +9462,2 @@\n-    public static  MethodHandle clang_getCompletionNumFixIts$MH() {\n-        return Index_h$constants_1.clang_getCompletionNumFixIts$MH();\n+    public static MethodHandle clang_getCompletionNumFixIts$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumFixIts$MH,\"clang_getCompletionNumFixIts\");\n@@ -5515,1 +9465,2 @@\n-    public static @C(\"unsigned int\") int clang_getCompletionNumFixIts (@C(\"CXCodeCompleteResults*\") Addressable results, @C(\"unsigned int\") int completion_index) {\n+    public static int clang_getCompletionNumFixIts ( Addressable results,  int completion_index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumFixIts$MH, \"clang_getCompletionNumFixIts\");\n@@ -5517,3 +9468,3 @@\n-            return (int)Index_h$constants_1.clang_getCompletionNumFixIts$MH().invokeExact(results.address(), completion_index);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(results.address(), completion_index);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5522,2 +9473,2 @@\n-    public static  MethodHandle clang_getCompletionFixIt$MH() {\n-        return Index_h$constants_1.clang_getCompletionFixIt$MH();\n+    public static MethodHandle clang_getCompletionFixIt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionFixIt$MH,\"clang_getCompletionFixIt\");\n@@ -5525,1 +9476,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getCompletionFixIt (@C(\"CXCodeCompleteResults*\") Addressable results, @C(\"unsigned int\") int completion_index, @C(\"unsigned int\") int fixit_index, @C(\"CXSourceRange*\") Addressable replacement_range) {\n+    public static MemorySegment clang_getCompletionFixIt ( Addressable results,  int completion_index,  int fixit_index,  Addressable replacement_range) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionFixIt$MH, \"clang_getCompletionFixIt\");\n@@ -5527,3 +9479,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getCompletionFixIt$MH().invokeExact(results.address(), completion_index, fixit_index, replacement_range.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(results.address(), completion_index, fixit_index, replacement_range.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5532,2 +9484,2 @@\n-    public static @C(\"int\") int CXCodeComplete_IncludeMacros() {\n-        return Index_h$constants_1.CXCodeComplete_IncludeMacros();\n+    public static int CXCodeComplete_IncludeMacros() {\n+        return (int)1L;\n@@ -5535,2 +9487,2 @@\n-    public static @C(\"int\") int CXCodeComplete_IncludeCodePatterns() {\n-        return Index_h$constants_1.CXCodeComplete_IncludeCodePatterns();\n+    public static int CXCodeComplete_IncludeCodePatterns() {\n+        return (int)2L;\n@@ -5538,2 +9490,2 @@\n-    public static @C(\"int\") int CXCodeComplete_IncludeBriefComments() {\n-        return Index_h$constants_1.CXCodeComplete_IncludeBriefComments();\n+    public static int CXCodeComplete_IncludeBriefComments() {\n+        return (int)4L;\n@@ -5541,2 +9493,2 @@\n-    public static @C(\"int\") int CXCodeComplete_SkipPreamble() {\n-        return Index_h$constants_1.CXCodeComplete_SkipPreamble();\n+    public static int CXCodeComplete_SkipPreamble() {\n+        return (int)8L;\n@@ -5544,2 +9496,2 @@\n-    public static @C(\"int\") int CXCodeComplete_IncludeCompletionsWithFixIts() {\n-        return Index_h$constants_1.CXCodeComplete_IncludeCompletionsWithFixIts();\n+    public static int CXCodeComplete_IncludeCompletionsWithFixIts() {\n+        return (int)16L;\n@@ -5547,2 +9499,2 @@\n-    public static @C(\"int\") int CXCompletionContext_Unexposed() {\n-        return Index_h$constants_1.CXCompletionContext_Unexposed();\n+    public static int CXCompletionContext_Unexposed() {\n+        return (int)0L;\n@@ -5550,2 +9502,2 @@\n-    public static @C(\"int\") int CXCompletionContext_AnyType() {\n-        return Index_h$constants_1.CXCompletionContext_AnyType();\n+    public static int CXCompletionContext_AnyType() {\n+        return (int)1L;\n@@ -5553,2 +9505,2 @@\n-    public static @C(\"int\") int CXCompletionContext_AnyValue() {\n-        return Index_h$constants_1.CXCompletionContext_AnyValue();\n+    public static int CXCompletionContext_AnyValue() {\n+        return (int)2L;\n@@ -5556,2 +9508,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCObjectValue() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCObjectValue();\n+    public static int CXCompletionContext_ObjCObjectValue() {\n+        return (int)4L;\n@@ -5559,2 +9511,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCSelectorValue() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCSelectorValue();\n+    public static int CXCompletionContext_ObjCSelectorValue() {\n+        return (int)8L;\n@@ -5562,2 +9514,2 @@\n-    public static @C(\"int\") int CXCompletionContext_CXXClassTypeValue() {\n-        return Index_h$constants_1.CXCompletionContext_CXXClassTypeValue();\n+    public static int CXCompletionContext_CXXClassTypeValue() {\n+        return (int)16L;\n@@ -5565,2 +9517,2 @@\n-    public static @C(\"int\") int CXCompletionContext_DotMemberAccess() {\n-        return Index_h$constants_1.CXCompletionContext_DotMemberAccess();\n+    public static int CXCompletionContext_DotMemberAccess() {\n+        return (int)32L;\n@@ -5568,2 +9520,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ArrowMemberAccess() {\n-        return Index_h$constants_1.CXCompletionContext_ArrowMemberAccess();\n+    public static int CXCompletionContext_ArrowMemberAccess() {\n+        return (int)64L;\n@@ -5571,2 +9523,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCPropertyAccess() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCPropertyAccess();\n+    public static int CXCompletionContext_ObjCPropertyAccess() {\n+        return (int)128L;\n@@ -5574,2 +9526,2 @@\n-    public static @C(\"int\") int CXCompletionContext_EnumTag() {\n-        return Index_h$constants_1.CXCompletionContext_EnumTag();\n+    public static int CXCompletionContext_EnumTag() {\n+        return (int)256L;\n@@ -5577,2 +9529,2 @@\n-    public static @C(\"int\") int CXCompletionContext_UnionTag() {\n-        return Index_h$constants_1.CXCompletionContext_UnionTag();\n+    public static int CXCompletionContext_UnionTag() {\n+        return (int)512L;\n@@ -5580,2 +9532,2 @@\n-    public static @C(\"int\") int CXCompletionContext_StructTag() {\n-        return Index_h$constants_1.CXCompletionContext_StructTag();\n+    public static int CXCompletionContext_StructTag() {\n+        return (int)1024L;\n@@ -5583,2 +9535,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ClassTag() {\n-        return Index_h$constants_1.CXCompletionContext_ClassTag();\n+    public static int CXCompletionContext_ClassTag() {\n+        return (int)2048L;\n@@ -5586,2 +9538,2 @@\n-    public static @C(\"int\") int CXCompletionContext_Namespace() {\n-        return Index_h$constants_1.CXCompletionContext_Namespace();\n+    public static int CXCompletionContext_Namespace() {\n+        return (int)4096L;\n@@ -5589,2 +9541,2 @@\n-    public static @C(\"int\") int CXCompletionContext_NestedNameSpecifier() {\n-        return Index_h$constants_1.CXCompletionContext_NestedNameSpecifier();\n+    public static int CXCompletionContext_NestedNameSpecifier() {\n+        return (int)8192L;\n@@ -5592,2 +9544,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCInterface() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCInterface();\n+    public static int CXCompletionContext_ObjCInterface() {\n+        return (int)16384L;\n@@ -5595,2 +9547,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCProtocol() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCProtocol();\n+    public static int CXCompletionContext_ObjCProtocol() {\n+        return (int)32768L;\n@@ -5598,2 +9550,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCCategory() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCCategory();\n+    public static int CXCompletionContext_ObjCCategory() {\n+        return (int)65536L;\n@@ -5601,2 +9553,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCInstanceMessage() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCInstanceMessage();\n+    public static int CXCompletionContext_ObjCInstanceMessage() {\n+        return (int)131072L;\n@@ -5604,2 +9556,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCClassMessage() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCClassMessage();\n+    public static int CXCompletionContext_ObjCClassMessage() {\n+        return (int)262144L;\n@@ -5607,2 +9559,2 @@\n-    public static @C(\"int\") int CXCompletionContext_ObjCSelectorName() {\n-        return Index_h$constants_1.CXCompletionContext_ObjCSelectorName();\n+    public static int CXCompletionContext_ObjCSelectorName() {\n+        return (int)524288L;\n@@ -5610,2 +9562,2 @@\n-    public static @C(\"int\") int CXCompletionContext_MacroName() {\n-        return Index_h$constants_1.CXCompletionContext_MacroName();\n+    public static int CXCompletionContext_MacroName() {\n+        return (int)1048576L;\n@@ -5613,2 +9565,2 @@\n-    public static @C(\"int\") int CXCompletionContext_NaturalLanguage() {\n-        return Index_h$constants_1.CXCompletionContext_NaturalLanguage();\n+    public static int CXCompletionContext_NaturalLanguage() {\n+        return (int)2097152L;\n@@ -5616,2 +9568,2 @@\n-    public static @C(\"int\") int CXCompletionContext_IncludedFile() {\n-        return Index_h$constants_1.CXCompletionContext_IncludedFile();\n+    public static int CXCompletionContext_IncludedFile() {\n+        return (int)4194304L;\n@@ -5619,2 +9571,2 @@\n-    public static @C(\"int\") int CXCompletionContext_Unknown() {\n-        return Index_h$constants_1.CXCompletionContext_Unknown();\n+    public static int CXCompletionContext_Unknown() {\n+        return (int)8388607L;\n@@ -5622,2 +9574,2 @@\n-    public static  MethodHandle clang_defaultCodeCompleteOptions$MH() {\n-        return Index_h$constants_1.clang_defaultCodeCompleteOptions$MH();\n+    public static MethodHandle clang_defaultCodeCompleteOptions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_defaultCodeCompleteOptions$MH,\"clang_defaultCodeCompleteOptions\");\n@@ -5625,1 +9577,2 @@\n-    public static @C(\"unsigned int\") int clang_defaultCodeCompleteOptions () {\n+    public static int clang_defaultCodeCompleteOptions () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_defaultCodeCompleteOptions$MH, \"clang_defaultCodeCompleteOptions\");\n@@ -5627,3 +9580,3 @@\n-            return (int)Index_h$constants_1.clang_defaultCodeCompleteOptions$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5632,2 +9585,2 @@\n-    public static  MethodHandle clang_codeCompleteAt$MH() {\n-        return Index_h$constants_1.clang_codeCompleteAt$MH();\n+    public static MethodHandle clang_codeCompleteAt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_codeCompleteAt$MH,\"clang_codeCompleteAt\");\n@@ -5635,1 +9588,2 @@\n-    public static @C(\"CXCodeCompleteResults*\") MemoryAddress clang_codeCompleteAt (@C(\"CXTranslationUnit\") Addressable TU, @C(\"char*\") Addressable complete_filename, @C(\"unsigned int\") int complete_line, @C(\"unsigned int\") int complete_column, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files, @C(\"unsigned int\") int num_unsaved_files, @C(\"unsigned int\") int options) {\n+    public static MemoryAddress clang_codeCompleteAt ( Addressable TU,  Addressable complete_filename,  int complete_line,  int complete_column,  Addressable unsaved_files,  int num_unsaved_files,  int options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_codeCompleteAt$MH, \"clang_codeCompleteAt\");\n@@ -5637,3 +9591,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_codeCompleteAt$MH().invokeExact(TU.address(), complete_filename.address(), complete_line, complete_column, unsaved_files.address(), num_unsaved_files, options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(TU.address(), complete_filename.address(), complete_line, complete_column, unsaved_files.address(), num_unsaved_files, options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5642,9 +9596,70 @@\n-    public static  MethodHandle clang_sortCodeCompletionResults$MH() {\n-        return Index_h$constants_1.clang_sortCodeCompletionResults$MH();\n-    }\n-    public static void clang_sortCodeCompletionResults (@C(\"CXCompletionResult*\") Addressable Results, @C(\"unsigned int\") int NumResults) {\n-        try {\n-            Index_h$constants_1.clang_sortCodeCompletionResults$MH().invokeExact(Results.address(), NumResults);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n+    public static class constants$46 {\n+\n+        static final FunctionDescriptor clang_getCompletionBriefComment$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionBriefComment$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionBriefComment\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$46.clang_getCompletionBriefComment$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorCompletionString$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorCompletionString\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$46.clang_getCursorCompletionString$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionNumFixIts$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionNumFixIts$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionNumFixIts\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$46.clang_getCompletionNumFixIts$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER,\n+            C_INT,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionFixIt$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionFixIt\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$46.clang_getCompletionFixIt$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC = FunctionDescriptor.of(C_INT);\n+        static final MethodHandle clang_defaultCodeCompleteOptions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_defaultCodeCompleteOptions\",\n+            \"()I\",\n+            constants$46.clang_defaultCodeCompleteOptions$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteAt$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_codeCompleteAt$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteAt\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$46.clang_codeCompleteAt$FUNC, false\n+        );\n@@ -5652,2 +9667,3 @@\n-    public static  MethodHandle clang_disposeCodeCompleteResults$MH() {\n-        return Index_h$constants_1.clang_disposeCodeCompleteResults$MH();\n+\n+    public static MethodHandle clang_sortCodeCompletionResults$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH,\"clang_sortCodeCompletionResults\");\n@@ -5655,1 +9671,2 @@\n-    public static void clang_disposeCodeCompleteResults (@C(\"CXCodeCompleteResults*\") Addressable Results) {\n+    public static void clang_sortCodeCompletionResults ( Addressable Results,  int NumResults) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH, \"clang_sortCodeCompletionResults\");\n@@ -5657,3 +9674,3 @@\n-            Index_h$constants_1.clang_disposeCodeCompleteResults$MH().invokeExact(Results.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(Results.address(), NumResults);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5662,2 +9679,2 @@\n-    public static  MethodHandle clang_codeCompleteGetNumDiagnostics$MH() {\n-        return Index_h$constants_1.clang_codeCompleteGetNumDiagnostics$MH();\n+    public static MethodHandle clang_disposeCodeCompleteResults$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH,\"clang_disposeCodeCompleteResults\");\n@@ -5665,1 +9682,2 @@\n-    public static @C(\"unsigned int\") int clang_codeCompleteGetNumDiagnostics (@C(\"CXCodeCompleteResults*\") Addressable Results) {\n+    public static void clang_disposeCodeCompleteResults ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH, \"clang_disposeCodeCompleteResults\");\n@@ -5667,3 +9685,3 @@\n-            return (int)Index_h$constants_1.clang_codeCompleteGetNumDiagnostics$MH().invokeExact(Results.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(Results.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5672,2 +9690,2 @@\n-    public static  MethodHandle clang_codeCompleteGetDiagnostic$MH() {\n-        return Index_h$constants_1.clang_codeCompleteGetDiagnostic$MH();\n+    public static MethodHandle clang_codeCompleteGetNumDiagnostics$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH,\"clang_codeCompleteGetNumDiagnostics\");\n@@ -5675,1 +9693,2 @@\n-    public static @C(\"CXDiagnostic\") MemoryAddress clang_codeCompleteGetDiagnostic (@C(\"CXCodeCompleteResults*\") Addressable Results, @C(\"unsigned int\") int Index) {\n+    public static int clang_codeCompleteGetNumDiagnostics ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH, \"clang_codeCompleteGetNumDiagnostics\");\n@@ -5677,3 +9696,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_codeCompleteGetDiagnostic$MH().invokeExact(Results.address(), Index);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Results.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5682,2 +9701,2 @@\n-    public static  MethodHandle clang_codeCompleteGetContexts$MH() {\n-        return Index_h$constants_1.clang_codeCompleteGetContexts$MH();\n+    public static MethodHandle clang_codeCompleteGetDiagnostic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetDiagnostic$MH,\"clang_codeCompleteGetDiagnostic\");\n@@ -5685,1 +9704,2 @@\n-    public static @C(\"unsigned long long\") long clang_codeCompleteGetContexts (@C(\"CXCodeCompleteResults*\") Addressable Results) {\n+    public static MemoryAddress clang_codeCompleteGetDiagnostic ( Addressable Results,  int Index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetDiagnostic$MH, \"clang_codeCompleteGetDiagnostic\");\n@@ -5687,3 +9707,3 @@\n-            return (long)Index_h$constants_1.clang_codeCompleteGetContexts$MH().invokeExact(Results.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Results.address(), Index);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5692,2 +9712,2 @@\n-    public static  MethodHandle clang_codeCompleteGetContainerKind$MH() {\n-        return Index_h$constants_1.clang_codeCompleteGetContainerKind$MH();\n+    public static MethodHandle clang_codeCompleteGetContexts$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContexts$MH,\"clang_codeCompleteGetContexts\");\n@@ -5695,1 +9715,2 @@\n-    public static @C(\"enum CXCursorKind\") int clang_codeCompleteGetContainerKind (@C(\"CXCodeCompleteResults*\") Addressable Results, @C(\"unsigned int*\") Addressable IsIncomplete) {\n+    public static long clang_codeCompleteGetContexts ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContexts$MH, \"clang_codeCompleteGetContexts\");\n@@ -5697,3 +9718,3 @@\n-            return (int)Index_h$constants_1.clang_codeCompleteGetContainerKind$MH().invokeExact(Results.address(), IsIncomplete.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(Results.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5702,2 +9723,2 @@\n-    public static  MethodHandle clang_codeCompleteGetContainerUSR$MH() {\n-        return Index_h$constants_1.clang_codeCompleteGetContainerUSR$MH();\n+    public static MethodHandle clang_codeCompleteGetContainerKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContainerKind$MH,\"clang_codeCompleteGetContainerKind\");\n@@ -5705,1 +9726,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_codeCompleteGetContainerUSR (@C(\"CXCodeCompleteResults*\") Addressable Results) {\n+    public static int clang_codeCompleteGetContainerKind ( Addressable Results,  Addressable IsIncomplete) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContainerKind$MH, \"clang_codeCompleteGetContainerKind\");\n@@ -5707,3 +9729,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_codeCompleteGetContainerUSR$MH().invokeExact(Results.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(Results.address(), IsIncomplete.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5712,2 +9734,57 @@\n-    public static  MethodHandle clang_codeCompleteGetObjCSelector$MH() {\n-        return Index_h$constants_1.clang_codeCompleteGetObjCSelector$MH();\n+    public static class constants$47 {\n+\n+        static final FunctionDescriptor clang_sortCodeCompletionResults$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_sortCodeCompletionResults$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_sortCodeCompletionResults\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+            constants$47.clang_sortCodeCompletionResults$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeCodeCompleteResults$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeCodeCompleteResults$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeCodeCompleteResults\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$47.clang_disposeCodeCompleteResults$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetNumDiagnostics$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetNumDiagnostics\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$47.clang_codeCompleteGetNumDiagnostics$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_codeCompleteGetDiagnostic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetDiagnostic\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$47.clang_codeCompleteGetDiagnostic$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetContexts$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetContexts$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetContexts\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+            constants$47.clang_codeCompleteGetContexts$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetContainerKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetContainerKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$47.clang_codeCompleteGetContainerKind$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_codeCompleteGetContainerUSR$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH,\"clang_codeCompleteGetContainerUSR\");\n@@ -5715,1 +9792,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_codeCompleteGetObjCSelector (@C(\"CXCodeCompleteResults*\") Addressable Results) {\n+    public static MemorySegment clang_codeCompleteGetContainerUSR ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH, \"clang_codeCompleteGetContainerUSR\");\n@@ -5717,3 +9795,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_codeCompleteGetObjCSelector$MH().invokeExact(Results.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Results.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5722,2 +9800,2 @@\n-    public static  MethodHandle clang_getClangVersion$MH() {\n-        return Index_h$constants_1.clang_getClangVersion$MH();\n+    public static MethodHandle clang_codeCompleteGetObjCSelector$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH,\"clang_codeCompleteGetObjCSelector\");\n@@ -5725,1 +9803,2 @@\n-    public static @C(\"CXString\") MemorySegment clang_getClangVersion () {\n+    public static MemorySegment clang_codeCompleteGetObjCSelector ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH, \"clang_codeCompleteGetObjCSelector\");\n@@ -5727,3 +9806,3 @@\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_getClangVersion$MH().invokeExact();\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Results.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5732,2 +9811,2 @@\n-    public static  MethodHandle clang_toggleCrashRecovery$MH() {\n-        return Index_h$constants_1.clang_toggleCrashRecovery$MH();\n+    public static MethodHandle clang_getClangVersion$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH,\"clang_getClangVersion\");\n@@ -5735,1 +9814,2 @@\n-    public static void clang_toggleCrashRecovery (@C(\"unsigned int\") int isEnabled) {\n+    public static MemorySegment clang_getClangVersion () {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH, \"clang_getClangVersion\");\n@@ -5737,3 +9817,3 @@\n-            Index_h$constants_1.clang_toggleCrashRecovery$MH().invokeExact(isEnabled);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5742,2 +9822,2 @@\n-    public static  MethodHandle clang_getInclusions$MH() {\n-        return Index_h$constants_1.clang_getInclusions$MH();\n+    public static MethodHandle clang_toggleCrashRecovery$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_toggleCrashRecovery$MH,\"clang_toggleCrashRecovery\");\n@@ -5745,1 +9825,2 @@\n-    public static void clang_getInclusions (@C(\"CXTranslationUnit\") Addressable tu, @C(\"CXInclusionVisitor\") Addressable visitor, @C(\"CXClientData\") Addressable client_data) {\n+    public static void clang_toggleCrashRecovery ( int isEnabled) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_toggleCrashRecovery$MH, \"clang_toggleCrashRecovery\");\n@@ -5747,3 +9828,3 @@\n-            Index_h$constants_1.clang_getInclusions$MH().invokeExact(tu.address(), visitor.address(), client_data.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(isEnabled);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5752,1 +9833,2 @@\n-    public interface clang_getInclusions$visitor {\n+    public interface CXInclusionVisitor {\n+\n@@ -5754,2 +9836,2 @@\n-        public static  @C(\"CXInclusionVisitor\") MemorySegment allocate(clang_getInclusions$visitor fi) {\n-            return RuntimeHelper.upcallStub(clang_getInclusions$visitor.class, fi, Index_h$constants_1.clang_getInclusions$visitor$FUNC(), \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\");\n+        static MemorySegment allocate(CXInclusionVisitor fi) {\n+            return RuntimeHelper.upcallStub(CXInclusionVisitor.class, fi, constants$48.CXInclusionVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\");\n@@ -5757,1 +9839,1 @@\n-        public static  @C(\"CXInclusionVisitor\") MemorySegment allocate(clang_getInclusions$visitor fi, NativeScope scope) {\n+        static MemorySegment allocate(CXInclusionVisitor fi, NativeScope scope) {\n@@ -5761,2 +9843,11 @@\n-    public static @C(\"int\") int CXEval_Int() {\n-        return Index_h$constants_1.CXEval_Int();\n+\n+    public static MethodHandle clang_getInclusions$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_getInclusions$MH,\"clang_getInclusions\");\n+    }\n+    public static void clang_getInclusions ( Addressable tu,  Addressable visitor,  Addressable client_data) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_getInclusions$MH, \"clang_getInclusions\");\n+        try {\n+            mh$.invokeExact(tu.address(), visitor.address(), client_data.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -5764,2 +9855,2 @@\n-    public static @C(\"int\") int CXEval_Float() {\n-        return Index_h$constants_1.CXEval_Float();\n+    public static int CXEval_Int() {\n+        return (int)1L;\n@@ -5767,2 +9858,2 @@\n-    public static @C(\"int\") int CXEval_ObjCStrLiteral() {\n-        return Index_h$constants_1.CXEval_ObjCStrLiteral();\n+    public static int CXEval_Float() {\n+        return (int)2L;\n@@ -5770,2 +9861,2 @@\n-    public static @C(\"int\") int CXEval_StrLiteral() {\n-        return Index_h$constants_1.CXEval_StrLiteral();\n+    public static int CXEval_ObjCStrLiteral() {\n+        return (int)3L;\n@@ -5773,2 +9864,2 @@\n-    public static @C(\"int\") int CXEval_CFStr() {\n-        return Index_h$constants_1.CXEval_CFStr();\n+    public static int CXEval_StrLiteral() {\n+        return (int)4L;\n@@ -5776,2 +9867,2 @@\n-    public static @C(\"int\") int CXEval_Other() {\n-        return Index_h$constants_1.CXEval_Other();\n+    public static int CXEval_CFStr() {\n+        return (int)5L;\n@@ -5779,2 +9870,2 @@\n-    public static @C(\"int\") int CXEval_UnExposed() {\n-        return Index_h$constants_1.CXEval_UnExposed();\n+    public static int CXEval_Other() {\n+        return (int)6L;\n@@ -5782,2 +9873,2 @@\n-    public static  MethodHandle clang_Cursor_Evaluate$MH() {\n-        return Index_h$constants_1.clang_Cursor_Evaluate$MH();\n+    public static int CXEval_UnExposed() {\n+        return (int)0L;\n@@ -5785,1 +9876,67 @@\n-    public static @C(\"CXEvalResult\") MemoryAddress clang_Cursor_Evaluate (@C(\"CXCursor\") MemorySegment C) {\n+    public static class constants$48 {\n+\n+        static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetContainerUSR$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetContainerUSR\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$48.clang_codeCompleteGetContainerUSR$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetObjCSelector$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetObjCSelector\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$48.clang_codeCompleteGetObjCSelector$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ));\n+        static final MethodHandle clang_getClangVersion$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getClangVersion\",\n+            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$48.clang_getClangVersion$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_toggleCrashRecovery$FUNC = FunctionDescriptor.ofVoid(\n+            C_INT\n+        );\n+        static final MethodHandle clang_toggleCrashRecovery$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_toggleCrashRecovery\",\n+            \"(I)V\",\n+            constants$48.clang_toggleCrashRecovery$FUNC, false\n+        );\n+        static final FunctionDescriptor CXInclusionVisitor$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor clang_getInclusions$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getInclusions$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getInclusions\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$48.clang_getInclusions$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_Cursor_Evaluate$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH,\"clang_Cursor_Evaluate\");\n+    }\n+    public static MemoryAddress clang_Cursor_Evaluate ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH, \"clang_Cursor_Evaluate\");\n@@ -5787,3 +9944,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_Cursor_Evaluate$MH().invokeExact(C);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5792,2 +9949,2 @@\n-    public static  MethodHandle clang_EvalResult_getKind$MH() {\n-        return Index_h$constants_1.clang_EvalResult_getKind$MH();\n+    public static MethodHandle clang_EvalResult_getKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH,\"clang_EvalResult_getKind\");\n@@ -5795,1 +9952,2 @@\n-    public static @C(\"CXEvalResultKind\") int clang_EvalResult_getKind (@C(\"CXEvalResult\") Addressable E) {\n+    public static int clang_EvalResult_getKind ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH, \"clang_EvalResult_getKind\");\n@@ -5797,3 +9955,3 @@\n-            return (int)Index_h$constants_1.clang_EvalResult_getKind$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5802,2 +9960,2 @@\n-    public static  MethodHandle clang_EvalResult_getAsInt$MH() {\n-        return Index_h$constants_1.clang_EvalResult_getAsInt$MH();\n+    public static MethodHandle clang_EvalResult_getAsInt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsInt$MH,\"clang_EvalResult_getAsInt\");\n@@ -5805,1 +9963,2 @@\n-    public static @C(\"int\") int clang_EvalResult_getAsInt (@C(\"CXEvalResult\") Addressable E) {\n+    public static int clang_EvalResult_getAsInt ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsInt$MH, \"clang_EvalResult_getAsInt\");\n@@ -5807,3 +9966,3 @@\n-            return (int)Index_h$constants_1.clang_EvalResult_getAsInt$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5812,2 +9971,2 @@\n-    public static  MethodHandle clang_EvalResult_getAsLongLong$MH() {\n-        return Index_h$constants_1.clang_EvalResult_getAsLongLong$MH();\n+    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n@@ -5815,1 +9974,2 @@\n-    public static @C(\"long long\") long clang_EvalResult_getAsLongLong (@C(\"CXEvalResult\") Addressable E) {\n+    public static long clang_EvalResult_getAsLongLong ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsLongLong$MH, \"clang_EvalResult_getAsLongLong\");\n@@ -5817,3 +9977,3 @@\n-            return (long)Index_h$constants_1.clang_EvalResult_getAsLongLong$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5822,2 +9982,2 @@\n-    public static  MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n-        return Index_h$constants_1.clang_EvalResult_isUnsignedInt$MH();\n+    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n@@ -5825,1 +9985,2 @@\n-    public static @C(\"unsigned int\") int clang_EvalResult_isUnsignedInt (@C(\"CXEvalResult\") Addressable E) {\n+    public static int clang_EvalResult_isUnsignedInt ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_isUnsignedInt$MH, \"clang_EvalResult_isUnsignedInt\");\n@@ -5827,3 +9988,3 @@\n-            return (int)Index_h$constants_1.clang_EvalResult_isUnsignedInt$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5832,2 +9993,2 @@\n-    public static  MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n-        return Index_h$constants_1.clang_EvalResult_getAsUnsigned$MH();\n+    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsUnsigned$MH,\"clang_EvalResult_getAsUnsigned\");\n@@ -5835,1 +9996,2 @@\n-    public static @C(\"unsigned long long\") long clang_EvalResult_getAsUnsigned (@C(\"CXEvalResult\") Addressable E) {\n+    public static long clang_EvalResult_getAsUnsigned ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsUnsigned$MH, \"clang_EvalResult_getAsUnsigned\");\n@@ -5837,3 +9999,3 @@\n-            return (long)Index_h$constants_1.clang_EvalResult_getAsUnsigned$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (long)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5842,2 +10004,58 @@\n-    public static  MethodHandle clang_EvalResult_getAsDouble$MH() {\n-        return Index_h$constants_1.clang_EvalResult_getAsDouble$MH();\n+    public static class constants$49 {\n+\n+        static final FunctionDescriptor clang_Cursor_Evaluate$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_Evaluate$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_Evaluate\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$49.clang_Cursor_Evaluate$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getKind$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$49.clang_EvalResult_getKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getAsInt$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getAsInt\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$49.clang_EvalResult_getAsInt$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getAsLongLong$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getAsLongLong\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+            constants$49.clang_EvalResult_getAsLongLong$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_isUnsignedInt$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_isUnsignedInt\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$49.clang_EvalResult_isUnsignedInt$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getAsUnsigned$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getAsUnsigned\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+            constants$49.clang_EvalResult_getAsUnsigned$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_EvalResult_getAsDouble$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH,\"clang_EvalResult_getAsDouble\");\n@@ -5845,1 +10063,2 @@\n-    public static @C(\"double\") double clang_EvalResult_getAsDouble (@C(\"CXEvalResult\") Addressable E) {\n+    public static double clang_EvalResult_getAsDouble ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH, \"clang_EvalResult_getAsDouble\");\n@@ -5847,3 +10066,3 @@\n-            return (double)Index_h$constants_1.clang_EvalResult_getAsDouble$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (double)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5852,2 +10071,2 @@\n-    public static  MethodHandle clang_EvalResult_getAsStr$MH() {\n-        return Index_h$constants_1.clang_EvalResult_getAsStr$MH();\n+    public static MethodHandle clang_EvalResult_getAsStr$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH,\"clang_EvalResult_getAsStr\");\n@@ -5855,1 +10074,2 @@\n-    public static @C(\"char*\") MemoryAddress clang_EvalResult_getAsStr (@C(\"CXEvalResult\") Addressable E) {\n+    public static MemoryAddress clang_EvalResult_getAsStr ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH, \"clang_EvalResult_getAsStr\");\n@@ -5857,3 +10077,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_EvalResult_getAsStr$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5862,2 +10082,2 @@\n-    public static  MethodHandle clang_EvalResult_dispose$MH() {\n-        return Index_h$constants_1.clang_EvalResult_dispose$MH();\n+    public static MethodHandle clang_EvalResult_dispose$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_dispose$MH,\"clang_EvalResult_dispose\");\n@@ -5865,1 +10085,2 @@\n-    public static void clang_EvalResult_dispose (@C(\"CXEvalResult\") Addressable E) {\n+    public static void clang_EvalResult_dispose ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_dispose$MH, \"clang_EvalResult_dispose\");\n@@ -5867,3 +10088,3 @@\n-            Index_h$constants_1.clang_EvalResult_dispose$MH().invokeExact(E.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5872,2 +10093,2 @@\n-    public static  MethodHandle clang_getRemappings$MH() {\n-        return Index_h$constants_1.clang_getRemappings$MH();\n+    public static MethodHandle clang_getRemappings$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_getRemappings$MH,\"clang_getRemappings\");\n@@ -5875,1 +10096,2 @@\n-    public static @C(\"CXRemapping\") MemoryAddress clang_getRemappings (@C(\"char*\") Addressable path) {\n+    public static MemoryAddress clang_getRemappings ( Addressable path) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_getRemappings$MH, \"clang_getRemappings\");\n@@ -5877,3 +10099,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getRemappings$MH().invokeExact(path.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(path.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5882,2 +10104,2 @@\n-    public static  MethodHandle clang_getRemappingsFromFileList$MH() {\n-        return Index_h$constants_1.clang_getRemappingsFromFileList$MH();\n+    public static MethodHandle clang_getRemappingsFromFileList$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_getRemappingsFromFileList$MH,\"clang_getRemappingsFromFileList\");\n@@ -5885,1 +10107,2 @@\n-    public static @C(\"CXRemapping\") MemoryAddress clang_getRemappingsFromFileList (@C(\"char**\") Addressable filePaths, @C(\"unsigned int\") int numFiles) {\n+    public static MemoryAddress clang_getRemappingsFromFileList ( Addressable filePaths,  int numFiles) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_getRemappingsFromFileList$MH, \"clang_getRemappingsFromFileList\");\n@@ -5887,3 +10110,3 @@\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_getRemappingsFromFileList$MH().invokeExact(filePaths.address(), numFiles);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filePaths.address(), numFiles);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5892,2 +10115,2 @@\n-    public static  MethodHandle clang_remap_getNumFiles$MH() {\n-        return Index_h$constants_1.clang_remap_getNumFiles$MH();\n+    public static MethodHandle clang_remap_getNumFiles$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_remap_getNumFiles$MH,\"clang_remap_getNumFiles\");\n@@ -5895,1 +10118,2 @@\n-    public static @C(\"unsigned int\") int clang_remap_getNumFiles (@C(\"CXRemapping\") Addressable x0) {\n+    public static int clang_remap_getNumFiles ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_remap_getNumFiles$MH, \"clang_remap_getNumFiles\");\n@@ -5897,3 +10121,3 @@\n-            return (int)Index_h$constants_1.clang_remap_getNumFiles$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5902,2 +10126,55 @@\n-    public static  MethodHandle clang_remap_getFilenames$MH() {\n-        return Index_h$constants_1.clang_remap_getFilenames$MH();\n+    public static class constants$50 {\n+\n+        static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC = FunctionDescriptor.of(C_DOUBLE,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getAsDouble$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getAsDouble\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)D\",\n+            constants$50.clang_EvalResult_getAsDouble$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getAsStr$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getAsStr\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$50.clang_EvalResult_getAsStr$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_dispose$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_dispose$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_dispose\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$50.clang_EvalResult_dispose$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getRemappings$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getRemappings$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getRemappings\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$50.clang_getRemappings$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getRemappingsFromFileList$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getRemappingsFromFileList$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getRemappingsFromFileList\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$50.clang_getRemappingsFromFileList$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_remap_getNumFiles$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_remap_getNumFiles$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_remap_getNumFiles\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$50.clang_remap_getNumFiles$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_remap_getFilenames$MH() {\n+        return RuntimeHelper.requireNonNull(constants$51.clang_remap_getFilenames$MH,\"clang_remap_getFilenames\");\n@@ -5905,1 +10182,2 @@\n-    public static void clang_remap_getFilenames (@C(\"CXRemapping\") Addressable x0, @C(\"unsigned int\") int index, @C(\"CXString*\") Addressable original, @C(\"CXString*\") Addressable transformed) {\n+    public static void clang_remap_getFilenames ( Addressable x0,  int index,  Addressable original,  Addressable transformed) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_remap_getFilenames$MH, \"clang_remap_getFilenames\");\n@@ -5907,3 +10185,3 @@\n-            Index_h$constants_1.clang_remap_getFilenames$MH().invokeExact(x0.address(), index, original.address(), transformed.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(x0.address(), index, original.address(), transformed.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5912,2 +10190,2 @@\n-    public static  MethodHandle clang_remap_dispose$MH() {\n-        return Index_h$constants_1.clang_remap_dispose$MH();\n+    public static MethodHandle clang_remap_dispose$MH() {\n+        return RuntimeHelper.requireNonNull(constants$51.clang_remap_dispose$MH,\"clang_remap_dispose\");\n@@ -5915,1 +10193,2 @@\n-    public static void clang_remap_dispose (@C(\"CXRemapping\") Addressable x0) {\n+    public static void clang_remap_dispose ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_remap_dispose$MH, \"clang_remap_dispose\");\n@@ -5917,3 +10196,3 @@\n-            Index_h$constants_1.clang_remap_dispose$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -5922,2 +10201,2 @@\n-    public static @C(\"int\") int CXVisit_Break() {\n-        return Index_h$constants_1.CXVisit_Break();\n+    public static int CXVisit_Break() {\n+        return (int)0L;\n@@ -5925,2 +10204,2 @@\n-    public static @C(\"int\") int CXVisit_Continue() {\n-        return Index_h$constants_1.CXVisit_Continue();\n+    public static int CXVisit_Continue() {\n+        return (int)1L;\n@@ -5930,1 +10209,4 @@\n-        private CXCursorAndRangeVisitor() {}\n+        static final MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"context\"),\n+            C_POINTER.withName(\"visit\")\n+        ).withName(\"CXCursorAndRangeVisitor\");\n@@ -5932,1 +10214,1 @@\n-            return Index_h$constants_1.CXCursorAndRangeVisitor$struct$LAYOUT();\n+            return CXCursorAndRangeVisitor.CXCursorAndRangeVisitor$struct$LAYOUT;\n@@ -5934,0 +10216,1 @@\n+        static final VarHandle context$VH = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"context\")));\n@@ -5935,1 +10218,4 @@\n-            return Index_h$constants_1.CXCursorAndRangeVisitor$context$VH();\n+            return CXCursorAndRangeVisitor.context$VH;\n+        }\n+        public static MemoryAddress context$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.context$VH.get(seg);\n@@ -5937,2 +10223,2 @@\n-        public static  @C(\"void*\") MemoryAddress context$get(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCursorAndRangeVisitor$context$VH().get(seg);\n+        public static void context$set( MemorySegment seg, MemoryAddress x) {\n+            CXCursorAndRangeVisitor.context$VH.set(seg, x);\n@@ -5940,2 +10226,2 @@\n-        public static  @C(\"void*\") MemoryAddress context$get(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCursorAndRangeVisitor$context$VH().get(seg.asSlice(index*sizeof()));\n+        public static MemoryAddress context$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.context$VH.get(seg.asSlice(index*sizeof()));\n@@ -5943,2 +10229,2 @@\n-        public static void context$set(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_1.CXCursorAndRangeVisitor$context$VH().set(seg, x);\n+        public static void context$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXCursorAndRangeVisitor.context$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -5946,2 +10232,9 @@\n-        public static void context$set(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg, long index, @C(\"void*\") MemoryAddress x) {\n-            Index_h$constants_1.CXCursorAndRangeVisitor$context$VH().set(seg.asSlice(index*sizeof()), x);\n+        public interface visit {\n+\n+            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2);\n+            static MemorySegment allocate(visit fi) {\n+                return RuntimeHelper.upcallStub(visit.class, fi, constants$51.visit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n+            }\n+            static MemorySegment allocate(visit fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n@@ -5949,0 +10242,2 @@\n+\n+        static final VarHandle visit$VH = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"visit\")));\n@@ -5950,1 +10245,1 @@\n-            return Index_h$constants_1.CXCursorAndRangeVisitor$visit$VH();\n+            return CXCursorAndRangeVisitor.visit$VH;\n@@ -5952,2 +10247,2 @@\n-        public static  @C(\"enum CXVisitorResult(*)(void*,CXCursor,CXSourceRange)\") MemoryAddress visit$get(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCursorAndRangeVisitor$visit$VH().get(seg);\n+        public static MemoryAddress visit$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.visit$VH.get(seg);\n@@ -5955,2 +10250,2 @@\n-        public static  @C(\"enum CXVisitorResult(*)(void*,CXCursor,CXSourceRange)\") MemoryAddress visit$get(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXCursorAndRangeVisitor$visit$VH().get(seg.asSlice(index*sizeof()));\n+        public static void visit$set( MemorySegment seg, MemoryAddress x) {\n+            CXCursorAndRangeVisitor.visit$VH.set(seg, x);\n@@ -5958,2 +10253,2 @@\n-        public static void visit$set(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg, @C(\"enum CXVisitorResult(*)(void*,CXCursor,CXSourceRange)\") MemoryAddress x) {\n-            Index_h$constants_1.CXCursorAndRangeVisitor$visit$VH().set(seg, x);\n+        public static MemoryAddress visit$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.visit$VH.get(seg.asSlice(index*sizeof()));\n@@ -5961,2 +10256,2 @@\n-        public static void visit$set(@C(\"struct CXCursorAndRangeVisitor\") MemorySegment seg, long index, @C(\"enum CXVisitorResult(*)(void*,CXCursor,CXSourceRange)\") MemoryAddress x) {\n-            Index_h$constants_1.CXCursorAndRangeVisitor$visit$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void visit$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXCursorAndRangeVisitor.visit$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -5965,3 +10260,3 @@\n-        public static @C(\"struct CXCursorAndRangeVisitor\") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct CXCursorAndRangeVisitor\") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct CXCursorAndRangeVisitor[]\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -5969,1 +10264,1 @@\n-        }        public static @C(\"struct CXCursorAndRangeVisitor[]\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -5972,1 +10267,1 @@\n-        public static @C(\"struct CXCursorAndRangeVisitor*\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -5975,1 +10270,1 @@\n-        public static @C(\"struct CXCursorAndRangeVisitor*\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -5978,1 +10273,1 @@\n-        public static @C(\"struct CXCursorAndRangeVisitor\") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -5981,8 +10276,2 @@\n-    public static @C(\"int\") int CXResult_Success() {\n-        return Index_h$constants_1.CXResult_Success();\n-    }\n-    public static @C(\"int\") int CXResult_Invalid() {\n-        return Index_h$constants_1.CXResult_Invalid();\n-    }\n-    public static @C(\"int\") int CXResult_VisitBreak() {\n-        return Index_h$constants_1.CXResult_VisitBreak();\n+    public static int CXResult_Success() {\n+        return (int)0L;\n@@ -5990,2 +10279,2 @@\n-    public static  MethodHandle clang_findReferencesInFile$MH() {\n-        return Index_h$constants_1.clang_findReferencesInFile$MH();\n+    public static int CXResult_Invalid() {\n+        return (int)1L;\n@@ -5993,6 +10282,2 @@\n-    public static @C(\"CXResult\") int clang_findReferencesInFile (@C(\"CXCursor\") MemorySegment cursor, @C(\"CXFile\") Addressable file, @C(\"CXCursorAndRangeVisitor\") MemorySegment visitor) {\n-        try {\n-            return (int)Index_h$constants_1.clang_findReferencesInFile$MH().invokeExact(cursor, file.address(), visitor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n+    public static int CXResult_VisitBreak() {\n+        return (int)2L;\n@@ -6000,2 +10285,2 @@\n-    public static  MethodHandle clang_findIncludesInFile$MH() {\n-        return Index_h$constants_1.clang_findIncludesInFile$MH();\n+    public static MethodHandle clang_findReferencesInFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$51.clang_findReferencesInFile$MH,\"clang_findReferencesInFile\");\n@@ -6003,1 +10288,2 @@\n-    public static @C(\"CXResult\") int clang_findIncludesInFile (@C(\"CXTranslationUnit\") Addressable TU, @C(\"CXFile\") Addressable file, @C(\"CXCursorAndRangeVisitor\") MemorySegment visitor) {\n+    public static int clang_findReferencesInFile ( MemorySegment cursor,  Addressable file,  MemorySegment visitor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_findReferencesInFile$MH, \"clang_findReferencesInFile\");\n@@ -6005,3 +10291,3 @@\n-            return (int)Index_h$constants_1.clang_findIncludesInFile$MH().invokeExact(TU.address(), file.address(), visitor);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(cursor, file.address(), visitor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -6010,2 +10296,2 @@\n-    public static  MethodHandle clang_findReferencesInFileWithBlock$MH() {\n-        return Index_h$constants_1.clang_findReferencesInFileWithBlock$MH();\n+    public static MethodHandle clang_findIncludesInFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$51.clang_findIncludesInFile$MH,\"clang_findIncludesInFile\");\n@@ -6013,1 +10299,2 @@\n-    public static @C(\"CXResult\") int clang_findReferencesInFileWithBlock (@C(\"CXCursor\") MemorySegment x0, @C(\"CXFile\") Addressable x1, @C(\"CXCursorAndRangeVisitorBlock\") Addressable x2) {\n+    public static int clang_findIncludesInFile ( Addressable TU,  Addressable file,  MemorySegment visitor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_findIncludesInFile$MH, \"clang_findIncludesInFile\");\n@@ -6015,3 +10302,3 @@\n-            return (int)Index_h$constants_1.clang_findReferencesInFileWithBlock$MH().invokeExact(x0, x1.address(), x2.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(TU.address(), file.address(), visitor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -6020,1 +10307,2 @@\n-    public interface clang_findReferencesInFileWithBlock$x0 {\n+    public interface CXCursorAndRangeVisitorBlock {\n+\n@@ -6022,2 +10310,2 @@\n-        public static  @C(\"CXCursorAndRangeVisitorBlock\") MemorySegment allocate(clang_findReferencesInFileWithBlock$x0 fi) {\n-            return RuntimeHelper.upcallStub(clang_findReferencesInFileWithBlock$x0.class, fi, Index_h$constants_1.clang_findReferencesInFileWithBlock$x0$FUNC(), \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n+        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi) {\n+            return RuntimeHelper.upcallStub(CXCursorAndRangeVisitorBlock.class, fi, constants$51.CXCursorAndRangeVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n@@ -6025,1 +10313,1 @@\n-        public static  @C(\"CXCursorAndRangeVisitorBlock\") MemorySegment allocate(clang_findReferencesInFileWithBlock$x0 fi, NativeScope scope) {\n+        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi, NativeScope scope) {\n@@ -6029,2 +10317,81 @@\n-    public static  MethodHandle clang_findIncludesInFileWithBlock$MH() {\n-        return Index_h$constants_1.clang_findIncludesInFileWithBlock$MH();\n+\n+    public static class constants$51 {\n+\n+        static final FunctionDescriptor clang_remap_getFilenames$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_remap_getFilenames$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_remap_getFilenames\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$51.clang_remap_getFilenames$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_remap_dispose$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_remap_dispose$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_remap_dispose\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$51.clang_remap_dispose$FUNC, false\n+        );\n+        static final FunctionDescriptor visit$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+        static final FunctionDescriptor clang_findReferencesInFile$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"context\"),\n+                C_POINTER.withName(\"visit\")\n+            ).withName(\"CXCursorAndRangeVisitor\")\n+        );\n+        static final MethodHandle clang_findReferencesInFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findReferencesInFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$51.clang_findReferencesInFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_findIncludesInFile$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            MemoryLayout.ofStruct(\n+                C_POINTER.withName(\"context\"),\n+                C_POINTER.withName(\"visit\")\n+            ).withName(\"CXCursorAndRangeVisitor\")\n+        );\n+        static final MethodHandle clang_findIncludesInFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findIncludesInFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$51.clang_findIncludesInFile$FUNC, false\n+        );\n+        static final FunctionDescriptor CXCursorAndRangeVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+    }\n+\n+    public static MethodHandle clang_findReferencesInFileWithBlock$MH() {\n+        return RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFileWithBlock$MH,\"clang_findReferencesInFileWithBlock\");\n@@ -6032,1 +10399,2 @@\n-    public static @C(\"CXResult\") int clang_findIncludesInFileWithBlock (@C(\"CXTranslationUnit\") Addressable x0, @C(\"CXFile\") Addressable x1, @C(\"CXCursorAndRangeVisitorBlock\") Addressable x2) {\n+    public static int clang_findReferencesInFileWithBlock ( MemorySegment x0,  Addressable x1,  Addressable x2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFileWithBlock$MH, \"clang_findReferencesInFileWithBlock\");\n@@ -6034,3 +10402,3 @@\n-            return (int)Index_h$constants_1.clang_findIncludesInFileWithBlock$MH().invokeExact(x0.address(), x1.address(), x2.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n+            return (int)mh$.invokeExact(x0, x1.address(), x2.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -6039,7 +10407,9 @@\n-    public interface clang_findIncludesInFileWithBlock$x0 {\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n-        public static  @C(\"CXCursorAndRangeVisitorBlock\") MemorySegment allocate(clang_findIncludesInFileWithBlock$x0 fi) {\n-            return RuntimeHelper.upcallStub(clang_findIncludesInFileWithBlock$x0.class, fi, Index_h$constants_1.clang_findIncludesInFileWithBlock$x0$FUNC(), \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n-        }\n-        public static  @C(\"CXCursorAndRangeVisitorBlock\") MemorySegment allocate(clang_findIncludesInFileWithBlock$x0 fi, NativeScope scope) {\n-            return allocate(fi).handoff(scope);\n+    public static MethodHandle clang_findIncludesInFileWithBlock$MH() {\n+        return RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFileWithBlock$MH,\"clang_findIncludesInFileWithBlock\");\n+    }\n+    public static int clang_findIncludesInFileWithBlock ( Addressable x0,  Addressable x1,  Addressable x2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFileWithBlock$MH, \"clang_findIncludesInFileWithBlock\");\n+        try {\n+            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n@@ -6050,1 +10420,5 @@\n-        private CXIdxLoc() {}\n+        static final MemoryLayout CXIdxLoc$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -6052,1 +10426,1 @@\n-            return Index_h$constants_1.CXIdxLoc$struct$LAYOUT();\n+            return CXIdxLoc.CXIdxLoc$struct$LAYOUT;\n@@ -6057,0 +10431,1 @@\n+        static final VarHandle int_data$VH = CXIdxLoc$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"int_data\"));\n@@ -6058,1 +10433,1 @@\n-            return Index_h$constants_1.CXIdxLoc$int_data$VH();\n+            return CXIdxLoc.int_data$VH;\n@@ -6060,2 +10435,2 @@\n-        public static  @C(\"unsigned int\") int int_data$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxLoc$int_data$VH().get(seg);\n+        public static int int_data$get(MemorySegment seg) {\n+            return (int)CXIdxLoc.int_data$VH.get(seg);\n@@ -6063,2 +10438,2 @@\n-        public static  @C(\"unsigned int\") int int_data$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxLoc$int_data$VH().get(seg.asSlice(index*sizeof()));\n+        public static void int_data$set( MemorySegment seg, int x) {\n+            CXIdxLoc.int_data$VH.set(seg, x);\n@@ -6066,2 +10441,2 @@\n-        public static void int_data$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxLoc$int_data$VH().set(seg, x);\n+        public static int int_data$get(MemorySegment seg, long index) {\n+            return (int)CXIdxLoc.int_data$VH.get(seg.asSlice(index*sizeof()));\n@@ -6069,2 +10444,2 @@\n-        public static void int_data$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxLoc$int_data$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void int_data$set(MemorySegment seg, long index, int x) {\n+            CXIdxLoc.int_data$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6073,3 +10448,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6077,1 +10452,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6080,1 +10455,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6083,1 +10458,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6086,1 +10461,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6091,1 +10466,13 @@\n-        private CXIdxIncludedFileInfo() {}\n+        static final MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"hashLoc\"),\n+            C_POINTER.withName(\"filename\"),\n+            C_POINTER.withName(\"file\"),\n+            C_INT.withName(\"isImport\"),\n+            C_INT.withName(\"isAngled\"),\n+            C_INT.withName(\"isModuleImport\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -6093,1 +10480,1 @@\n-            return Index_h$constants_1.CXIdxIncludedFileInfo$struct$LAYOUT();\n+            return CXIdxIncludedFileInfo.CXIdxIncludedFileInfo$struct$LAYOUT;\n@@ -6098,0 +10485,1 @@\n+        static final VarHandle filename$VH = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"filename\")));\n@@ -6099,1 +10487,1 @@\n-            return Index_h$constants_1.CXIdxIncludedFileInfo$filename$VH();\n+            return CXIdxIncludedFileInfo.filename$VH;\n@@ -6101,2 +10489,2 @@\n-        public static  @C(\"char*\") MemoryAddress filename$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIncludedFileInfo$filename$VH().get(seg);\n+        public static MemoryAddress filename$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.filename$VH.get(seg);\n@@ -6104,2 +10492,2 @@\n-        public static  @C(\"char*\") MemoryAddress filename$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIncludedFileInfo$filename$VH().get(seg.asSlice(index*sizeof()));\n+        public static void filename$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxIncludedFileInfo.filename$VH.set(seg, x);\n@@ -6107,2 +10495,2 @@\n-        public static void filename$set(@C(\"struct \") MemorySegment seg, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$filename$VH().set(seg, x);\n+        public static MemoryAddress filename$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.filename$VH.get(seg.asSlice(index*sizeof()));\n@@ -6110,2 +10498,2 @@\n-        public static void filename$set(@C(\"struct \") MemorySegment seg, long index, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$filename$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void filename$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxIncludedFileInfo.filename$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6113,0 +10501,1 @@\n+        static final VarHandle file$VH = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"file\")));\n@@ -6114,1 +10503,1 @@\n-            return Index_h$constants_1.CXIdxIncludedFileInfo$file$VH();\n+            return CXIdxIncludedFileInfo.file$VH;\n@@ -6116,2 +10505,2 @@\n-        public static  @C(\"CXFile\") MemoryAddress file$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIncludedFileInfo$file$VH().get(seg);\n+        public static MemoryAddress file$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.file$VH.get(seg);\n@@ -6119,2 +10508,2 @@\n-        public static  @C(\"CXFile\") MemoryAddress file$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIncludedFileInfo$file$VH().get(seg.asSlice(index*sizeof()));\n+        public static void file$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxIncludedFileInfo.file$VH.set(seg, x);\n@@ -6122,2 +10511,2 @@\n-        public static void file$set(@C(\"struct \") MemorySegment seg, @C(\"CXFile\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$file$VH().set(seg, x);\n+        public static MemoryAddress file$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.file$VH.get(seg.asSlice(index*sizeof()));\n@@ -6125,2 +10514,2 @@\n-        public static void file$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXFile\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$file$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void file$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxIncludedFileInfo.file$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6128,0 +10517,1 @@\n+        static final VarHandle isImport$VH = CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImport\"));\n@@ -6129,1 +10519,1 @@\n-            return Index_h$constants_1.CXIdxIncludedFileInfo$isImport$VH();\n+            return CXIdxIncludedFileInfo.isImport$VH;\n@@ -6131,2 +10521,2 @@\n-        public static  @C(\"int\") int isImport$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxIncludedFileInfo$isImport$VH().get(seg);\n+        public static int isImport$get(MemorySegment seg) {\n+            return (int)CXIdxIncludedFileInfo.isImport$VH.get(seg);\n@@ -6134,2 +10524,2 @@\n-        public static  @C(\"int\") int isImport$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxIncludedFileInfo$isImport$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isImport$set( MemorySegment seg, int x) {\n+            CXIdxIncludedFileInfo.isImport$VH.set(seg, x);\n@@ -6137,2 +10527,2 @@\n-        public static void isImport$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$isImport$VH().set(seg, x);\n+        public static int isImport$get(MemorySegment seg, long index) {\n+            return (int)CXIdxIncludedFileInfo.isImport$VH.get(seg.asSlice(index*sizeof()));\n@@ -6140,2 +10530,2 @@\n-        public static void isImport$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$isImport$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isImport$set(MemorySegment seg, long index, int x) {\n+            CXIdxIncludedFileInfo.isImport$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6143,0 +10533,1 @@\n+        static final VarHandle isAngled$VH = CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isAngled\"));\n@@ -6144,1 +10535,1 @@\n-            return Index_h$constants_1.CXIdxIncludedFileInfo$isAngled$VH();\n+            return CXIdxIncludedFileInfo.isAngled$VH;\n@@ -6146,2 +10537,2 @@\n-        public static  @C(\"int\") int isAngled$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxIncludedFileInfo$isAngled$VH().get(seg);\n+        public static int isAngled$get(MemorySegment seg) {\n+            return (int)CXIdxIncludedFileInfo.isAngled$VH.get(seg);\n@@ -6149,2 +10540,2 @@\n-        public static  @C(\"int\") int isAngled$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxIncludedFileInfo$isAngled$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isAngled$set( MemorySegment seg, int x) {\n+            CXIdxIncludedFileInfo.isAngled$VH.set(seg, x);\n@@ -6152,2 +10543,2 @@\n-        public static void isAngled$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$isAngled$VH().set(seg, x);\n+        public static int isAngled$get(MemorySegment seg, long index) {\n+            return (int)CXIdxIncludedFileInfo.isAngled$VH.get(seg.asSlice(index*sizeof()));\n@@ -6155,2 +10546,2 @@\n-        public static void isAngled$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$isAngled$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isAngled$set(MemorySegment seg, long index, int x) {\n+            CXIdxIncludedFileInfo.isAngled$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6158,0 +10549,1 @@\n+        static final VarHandle isModuleImport$VH = CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isModuleImport\"));\n@@ -6159,1 +10551,1 @@\n-            return Index_h$constants_1.CXIdxIncludedFileInfo$isModuleImport$VH();\n+            return CXIdxIncludedFileInfo.isModuleImport$VH;\n@@ -6161,2 +10553,2 @@\n-        public static  @C(\"int\") int isModuleImport$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxIncludedFileInfo$isModuleImport$VH().get(seg);\n+        public static int isModuleImport$get(MemorySegment seg) {\n+            return (int)CXIdxIncludedFileInfo.isModuleImport$VH.get(seg);\n@@ -6164,2 +10556,2 @@\n-        public static  @C(\"int\") int isModuleImport$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxIncludedFileInfo$isModuleImport$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isModuleImport$set( MemorySegment seg, int x) {\n+            CXIdxIncludedFileInfo.isModuleImport$VH.set(seg, x);\n@@ -6167,2 +10559,2 @@\n-        public static void isModuleImport$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$isModuleImport$VH().set(seg, x);\n+        public static int isModuleImport$get(MemorySegment seg, long index) {\n+            return (int)CXIdxIncludedFileInfo.isModuleImport$VH.get(seg.asSlice(index*sizeof()));\n@@ -6170,2 +10562,2 @@\n-        public static void isModuleImport$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxIncludedFileInfo$isModuleImport$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isModuleImport$set(MemorySegment seg, long index, int x) {\n+            CXIdxIncludedFileInfo.isModuleImport$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6174,3 +10566,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6178,1 +10570,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6181,1 +10573,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6184,1 +10576,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6187,1 +10579,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6192,1 +10584,11 @@\n-        private CXIdxImportedASTFileInfo() {}\n+        static final MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"file\"),\n+            C_POINTER.withName(\"module\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"loc\"),\n+            C_INT.withName(\"isImplicit\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -6194,1 +10596,1 @@\n-            return Index_h$constants_1.CXIdxImportedASTFileInfo$struct$LAYOUT();\n+            return CXIdxImportedASTFileInfo.CXIdxImportedASTFileInfo$struct$LAYOUT;\n@@ -6196,0 +10598,1 @@\n+        static final VarHandle file$VH = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"file\")));\n@@ -6197,1 +10600,1 @@\n-            return Index_h$constants_1.CXIdxImportedASTFileInfo$file$VH();\n+            return CXIdxImportedASTFileInfo.file$VH;\n@@ -6199,2 +10602,2 @@\n-        public static  @C(\"CXFile\") MemoryAddress file$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxImportedASTFileInfo$file$VH().get(seg);\n+        public static MemoryAddress file$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.file$VH.get(seg);\n@@ -6202,2 +10605,2 @@\n-        public static  @C(\"CXFile\") MemoryAddress file$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxImportedASTFileInfo$file$VH().get(seg.asSlice(index*sizeof()));\n+        public static void file$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxImportedASTFileInfo.file$VH.set(seg, x);\n@@ -6205,2 +10608,2 @@\n-        public static void file$set(@C(\"struct \") MemorySegment seg, @C(\"CXFile\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxImportedASTFileInfo$file$VH().set(seg, x);\n+        public static MemoryAddress file$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.file$VH.get(seg.asSlice(index*sizeof()));\n@@ -6208,2 +10611,2 @@\n-        public static void file$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXFile\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxImportedASTFileInfo$file$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void file$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxImportedASTFileInfo.file$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6211,0 +10614,1 @@\n+        static final VarHandle module$VH = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"module\")));\n@@ -6212,1 +10616,1 @@\n-            return Index_h$constants_1.CXIdxImportedASTFileInfo$module$VH();\n+            return CXIdxImportedASTFileInfo.module$VH;\n@@ -6214,2 +10618,2 @@\n-        public static  @C(\"CXModule\") MemoryAddress module$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxImportedASTFileInfo$module$VH().get(seg);\n+        public static MemoryAddress module$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.module$VH.get(seg);\n@@ -6217,2 +10621,2 @@\n-        public static  @C(\"CXModule\") MemoryAddress module$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxImportedASTFileInfo$module$VH().get(seg.asSlice(index*sizeof()));\n+        public static void module$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxImportedASTFileInfo.module$VH.set(seg, x);\n@@ -6220,2 +10624,2 @@\n-        public static void module$set(@C(\"struct \") MemorySegment seg, @C(\"CXModule\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxImportedASTFileInfo$module$VH().set(seg, x);\n+        public static MemoryAddress module$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.module$VH.get(seg.asSlice(index*sizeof()));\n@@ -6223,2 +10627,2 @@\n-        public static void module$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXModule\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxImportedASTFileInfo$module$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void module$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxImportedASTFileInfo.module$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6229,0 +10633,1 @@\n+        static final VarHandle isImplicit$VH = CXIdxImportedASTFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImplicit\"));\n@@ -6230,1 +10635,1 @@\n-            return Index_h$constants_1.CXIdxImportedASTFileInfo$isImplicit$VH();\n+            return CXIdxImportedASTFileInfo.isImplicit$VH;\n@@ -6232,2 +10637,2 @@\n-        public static  @C(\"int\") int isImplicit$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxImportedASTFileInfo$isImplicit$VH().get(seg);\n+        public static int isImplicit$get(MemorySegment seg) {\n+            return (int)CXIdxImportedASTFileInfo.isImplicit$VH.get(seg);\n@@ -6235,2 +10640,2 @@\n-        public static  @C(\"int\") int isImplicit$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxImportedASTFileInfo$isImplicit$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isImplicit$set( MemorySegment seg, int x) {\n+            CXIdxImportedASTFileInfo.isImplicit$VH.set(seg, x);\n@@ -6238,2 +10643,2 @@\n-        public static void isImplicit$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxImportedASTFileInfo$isImplicit$VH().set(seg, x);\n+        public static int isImplicit$get(MemorySegment seg, long index) {\n+            return (int)CXIdxImportedASTFileInfo.isImplicit$VH.get(seg.asSlice(index*sizeof()));\n@@ -6241,2 +10646,2 @@\n-        public static void isImplicit$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxImportedASTFileInfo$isImplicit$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isImplicit$set(MemorySegment seg, long index, int x) {\n+            CXIdxImportedASTFileInfo.isImplicit$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6245,3 +10650,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6249,1 +10654,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6252,1 +10657,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6255,1 +10660,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6258,1 +10663,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6261,5 +10666,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Unexposed() {\n-        return Index_h$constants_1.CXIdxEntity_Unexposed();\n-    }\n-    public static @C(\"int\") int CXIdxEntity_Typedef() {\n-        return Index_h$constants_1.CXIdxEntity_Typedef();\n+    public static int CXIdxEntity_Unexposed() {\n+        return (int)0L;\n@@ -6267,2 +10669,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Function() {\n-        return Index_h$constants_1.CXIdxEntity_Function();\n+    public static int CXIdxEntity_Typedef() {\n+        return (int)1L;\n@@ -6270,2 +10672,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Variable() {\n-        return Index_h$constants_1.CXIdxEntity_Variable();\n+    public static int CXIdxEntity_Function() {\n+        return (int)2L;\n@@ -6273,2 +10675,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Field() {\n-        return Index_h$constants_1.CXIdxEntity_Field();\n+    public static int CXIdxEntity_Variable() {\n+        return (int)3L;\n@@ -6276,2 +10678,2 @@\n-    public static @C(\"int\") int CXIdxEntity_EnumConstant() {\n-        return Index_h$constants_1.CXIdxEntity_EnumConstant();\n+    public static int CXIdxEntity_Field() {\n+        return (int)4L;\n@@ -6279,2 +10681,2 @@\n-    public static @C(\"int\") int CXIdxEntity_ObjCClass() {\n-        return Index_h$constants_1.CXIdxEntity_ObjCClass();\n+    public static int CXIdxEntity_EnumConstant() {\n+        return (int)5L;\n@@ -6282,2 +10684,2 @@\n-    public static @C(\"int\") int CXIdxEntity_ObjCProtocol() {\n-        return Index_h$constants_1.CXIdxEntity_ObjCProtocol();\n+    public static int CXIdxEntity_ObjCClass() {\n+        return (int)6L;\n@@ -6285,2 +10687,2 @@\n-    public static @C(\"int\") int CXIdxEntity_ObjCCategory() {\n-        return Index_h$constants_1.CXIdxEntity_ObjCCategory();\n+    public static int CXIdxEntity_ObjCProtocol() {\n+        return (int)7L;\n@@ -6288,2 +10690,2 @@\n-    public static @C(\"int\") int CXIdxEntity_ObjCInstanceMethod() {\n-        return Index_h$constants_1.CXIdxEntity_ObjCInstanceMethod();\n+    public static int CXIdxEntity_ObjCCategory() {\n+        return (int)8L;\n@@ -6291,2 +10693,2 @@\n-    public static @C(\"int\") int CXIdxEntity_ObjCClassMethod() {\n-        return Index_h$constants_1.CXIdxEntity_ObjCClassMethod();\n+    public static int CXIdxEntity_ObjCInstanceMethod() {\n+        return (int)9L;\n@@ -6294,2 +10696,2 @@\n-    public static @C(\"int\") int CXIdxEntity_ObjCProperty() {\n-        return Index_h$constants_1.CXIdxEntity_ObjCProperty();\n+    public static int CXIdxEntity_ObjCClassMethod() {\n+        return (int)10L;\n@@ -6297,2 +10699,2 @@\n-    public static @C(\"int\") int CXIdxEntity_ObjCIvar() {\n-        return Index_h$constants_1.CXIdxEntity_ObjCIvar();\n+    public static int CXIdxEntity_ObjCProperty() {\n+        return (int)11L;\n@@ -6300,2 +10702,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Enum() {\n-        return Index_h$constants_1.CXIdxEntity_Enum();\n+    public static int CXIdxEntity_ObjCIvar() {\n+        return (int)12L;\n@@ -6303,2 +10705,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Struct() {\n-        return Index_h$constants_1.CXIdxEntity_Struct();\n+    public static int CXIdxEntity_Enum() {\n+        return (int)13L;\n@@ -6306,2 +10708,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Union() {\n-        return Index_h$constants_1.CXIdxEntity_Union();\n+    public static int CXIdxEntity_Struct() {\n+        return (int)14L;\n@@ -6309,2 +10711,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXClass() {\n-        return Index_h$constants_1.CXIdxEntity_CXXClass();\n+    public static int CXIdxEntity_Union() {\n+        return (int)15L;\n@@ -6312,2 +10714,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXNamespace() {\n-        return Index_h$constants_1.CXIdxEntity_CXXNamespace();\n+    public static int CXIdxEntity_CXXClass() {\n+        return (int)16L;\n@@ -6315,2 +10717,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXNamespaceAlias() {\n-        return Index_h$constants_1.CXIdxEntity_CXXNamespaceAlias();\n+    public static int CXIdxEntity_CXXNamespace() {\n+        return (int)17L;\n@@ -6318,2 +10720,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXStaticVariable() {\n-        return Index_h$constants_1.CXIdxEntity_CXXStaticVariable();\n+    public static int CXIdxEntity_CXXNamespaceAlias() {\n+        return (int)18L;\n@@ -6321,2 +10723,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXStaticMethod() {\n-        return Index_h$constants_1.CXIdxEntity_CXXStaticMethod();\n+    public static int CXIdxEntity_CXXStaticVariable() {\n+        return (int)19L;\n@@ -6324,2 +10726,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXInstanceMethod() {\n-        return Index_h$constants_1.CXIdxEntity_CXXInstanceMethod();\n+    public static int CXIdxEntity_CXXStaticMethod() {\n+        return (int)20L;\n@@ -6327,2 +10729,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXConstructor() {\n-        return Index_h$constants_1.CXIdxEntity_CXXConstructor();\n+    public static int CXIdxEntity_CXXInstanceMethod() {\n+        return (int)21L;\n@@ -6330,2 +10732,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXDestructor() {\n-        return Index_h$constants_1.CXIdxEntity_CXXDestructor();\n+    public static int CXIdxEntity_CXXConstructor() {\n+        return (int)22L;\n@@ -6333,2 +10735,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXConversionFunction() {\n-        return Index_h$constants_1.CXIdxEntity_CXXConversionFunction();\n+    public static int CXIdxEntity_CXXDestructor() {\n+        return (int)23L;\n@@ -6336,2 +10738,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXTypeAlias() {\n-        return Index_h$constants_1.CXIdxEntity_CXXTypeAlias();\n+    public static int CXIdxEntity_CXXConversionFunction() {\n+        return (int)24L;\n@@ -6339,2 +10741,2 @@\n-    public static @C(\"int\") int CXIdxEntity_CXXInterface() {\n-        return Index_h$constants_1.CXIdxEntity_CXXInterface();\n+    public static int CXIdxEntity_CXXTypeAlias() {\n+        return (int)25L;\n@@ -6342,2 +10744,2 @@\n-    public static @C(\"int\") int CXIdxEntityLang_None() {\n-        return Index_h$constants_1.CXIdxEntityLang_None();\n+    public static int CXIdxEntity_CXXInterface() {\n+        return (int)26L;\n@@ -6345,2 +10747,2 @@\n-    public static @C(\"int\") int CXIdxEntityLang_C() {\n-        return Index_h$constants_1.CXIdxEntityLang_C();\n+    public static int CXIdxEntityLang_None() {\n+        return (int)0L;\n@@ -6348,2 +10750,2 @@\n-    public static @C(\"int\") int CXIdxEntityLang_ObjC() {\n-        return Index_h$constants_1.CXIdxEntityLang_ObjC();\n+    public static int CXIdxEntityLang_C() {\n+        return (int)1L;\n@@ -6351,2 +10753,2 @@\n-    public static @C(\"int\") int CXIdxEntityLang_CXX() {\n-        return Index_h$constants_1.CXIdxEntityLang_CXX();\n+    public static int CXIdxEntityLang_ObjC() {\n+        return (int)2L;\n@@ -6354,2 +10756,2 @@\n-    public static @C(\"int\") int CXIdxEntityLang_Swift() {\n-        return Index_h$constants_1.CXIdxEntityLang_Swift();\n+    public static int CXIdxEntityLang_CXX() {\n+        return (int)3L;\n@@ -6357,2 +10759,2 @@\n-    public static @C(\"int\") int CXIdxEntity_NonTemplate() {\n-        return Index_h$constants_1.CXIdxEntity_NonTemplate();\n+    public static int CXIdxEntityLang_Swift() {\n+        return (int)4L;\n@@ -6360,2 +10762,2 @@\n-    public static @C(\"int\") int CXIdxEntity_Template() {\n-        return Index_h$constants_1.CXIdxEntity_Template();\n+    public static int CXIdxEntity_NonTemplate() {\n+        return (int)0L;\n@@ -6363,2 +10765,2 @@\n-    public static @C(\"int\") int CXIdxEntity_TemplatePartialSpecialization() {\n-        return Index_h$constants_1.CXIdxEntity_TemplatePartialSpecialization();\n+    public static int CXIdxEntity_Template() {\n+        return (int)1L;\n@@ -6366,14 +10768,2 @@\n-    public static @C(\"int\") int CXIdxEntity_TemplateSpecialization() {\n-        return Index_h$constants_1.CXIdxEntity_TemplateSpecialization();\n-    }\n-    public static @C(\"int\") int CXIdxAttr_Unexposed() {\n-        return Index_h$constants_1.CXIdxAttr_Unexposed();\n-    }\n-    public static @C(\"int\") int CXIdxAttr_IBAction() {\n-        return Index_h$constants_1.CXIdxAttr_IBAction();\n-    }\n-    public static @C(\"int\") int CXIdxAttr_IBOutlet() {\n-        return Index_h$constants_1.CXIdxAttr_IBOutlet();\n-    }\n-    public static @C(\"int\") int CXIdxAttr_IBOutletCollection() {\n-        return Index_h$constants_1.CXIdxAttr_IBOutletCollection();\n+    public static int CXIdxEntity_TemplatePartialSpecialization() {\n+        return (int)2L;\n@@ -6383,1 +10773,14 @@\n-        private CXIdxAttrInfo() {}\n+        static final MemoryLayout CXIdxAttrInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"cursor\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"loc\")\n+        );\n@@ -6385,1 +10788,1 @@\n-            return Index_h$constants_1.CXIdxAttrInfo$struct$LAYOUT();\n+            return CXIdxAttrInfo.CXIdxAttrInfo$struct$LAYOUT;\n@@ -6387,0 +10790,1 @@\n+        static final VarHandle kind$VH = CXIdxAttrInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n@@ -6388,1 +10792,1 @@\n-            return Index_h$constants_1.CXIdxAttrInfo$kind$VH();\n+            return CXIdxAttrInfo.kind$VH;\n@@ -6390,2 +10794,2 @@\n-        public static  @C(\"CXIdxAttrKind\") int kind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxAttrInfo$kind$VH().get(seg);\n+        public static int kind$get(MemorySegment seg) {\n+            return (int)CXIdxAttrInfo.kind$VH.get(seg);\n@@ -6393,2 +10797,2 @@\n-        public static  @C(\"CXIdxAttrKind\") int kind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxAttrInfo$kind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void kind$set( MemorySegment seg, int x) {\n+            CXIdxAttrInfo.kind$VH.set(seg, x);\n@@ -6396,2 +10800,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxAttrKind\") int x) {\n-            Index_h$constants_1.CXIdxAttrInfo$kind$VH().set(seg, x);\n+        public static int kind$get(MemorySegment seg, long index) {\n+            return (int)CXIdxAttrInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n@@ -6399,2 +10803,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxAttrKind\") int x) {\n-            Index_h$constants_1.CXIdxAttrInfo$kind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void kind$set(MemorySegment seg, long index, int x) {\n+            CXIdxAttrInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6409,3 +10813,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6413,1 +10817,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6416,1 +10820,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6419,1 +10823,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6422,1 +10826,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6427,1 +10831,16 @@\n-        private CXIdxEntityInfo() {}\n+        static final MemoryLayout CXIdxEntityInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"templateKind\"),\n+            C_INT.withName(\"lang\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_POINTER.withName(\"name\"),\n+            C_POINTER.withName(\"USR\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"cursor\"),\n+            C_POINTER.withName(\"attributes\"),\n+            C_INT.withName(\"numAttributes\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -6429,1 +10848,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$struct$LAYOUT();\n+            return CXIdxEntityInfo.CXIdxEntityInfo$struct$LAYOUT;\n@@ -6431,0 +10850,1 @@\n+        static final VarHandle kind$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n@@ -6432,1 +10852,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$kind$VH();\n+            return CXIdxEntityInfo.kind$VH;\n@@ -6434,2 +10854,2 @@\n-        public static  @C(\"CXIdxEntityKind\") int kind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$kind$VH().get(seg);\n+        public static int kind$get(MemorySegment seg) {\n+            return (int)CXIdxEntityInfo.kind$VH.get(seg);\n@@ -6437,2 +10857,2 @@\n-        public static  @C(\"CXIdxEntityKind\") int kind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$kind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void kind$set( MemorySegment seg, int x) {\n+            CXIdxEntityInfo.kind$VH.set(seg, x);\n@@ -6440,2 +10860,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxEntityKind\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$kind$VH().set(seg, x);\n+        public static int kind$get(MemorySegment seg, long index) {\n+            return (int)CXIdxEntityInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n@@ -6443,2 +10863,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxEntityKind\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$kind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void kind$set(MemorySegment seg, long index, int x) {\n+            CXIdxEntityInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6446,0 +10866,1 @@\n+        static final VarHandle templateKind$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"templateKind\"));\n@@ -6447,1 +10868,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$templateKind$VH();\n+            return CXIdxEntityInfo.templateKind$VH;\n@@ -6449,2 +10870,2 @@\n-        public static  @C(\"CXIdxEntityCXXTemplateKind\") int templateKind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$templateKind$VH().get(seg);\n+        public static int templateKind$get(MemorySegment seg) {\n+            return (int)CXIdxEntityInfo.templateKind$VH.get(seg);\n@@ -6452,2 +10873,2 @@\n-        public static  @C(\"CXIdxEntityCXXTemplateKind\") int templateKind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$templateKind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void templateKind$set( MemorySegment seg, int x) {\n+            CXIdxEntityInfo.templateKind$VH.set(seg, x);\n@@ -6455,2 +10876,2 @@\n-        public static void templateKind$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxEntityCXXTemplateKind\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$templateKind$VH().set(seg, x);\n+        public static int templateKind$get(MemorySegment seg, long index) {\n+            return (int)CXIdxEntityInfo.templateKind$VH.get(seg.asSlice(index*sizeof()));\n@@ -6458,2 +10879,2 @@\n-        public static void templateKind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxEntityCXXTemplateKind\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$templateKind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void templateKind$set(MemorySegment seg, long index, int x) {\n+            CXIdxEntityInfo.templateKind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6461,0 +10882,1 @@\n+        static final VarHandle lang$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"lang\"));\n@@ -6462,1 +10884,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$lang$VH();\n+            return CXIdxEntityInfo.lang$VH;\n@@ -6464,2 +10886,2 @@\n-        public static  @C(\"CXIdxEntityLanguage\") int lang$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$lang$VH().get(seg);\n+        public static int lang$get(MemorySegment seg) {\n+            return (int)CXIdxEntityInfo.lang$VH.get(seg);\n@@ -6467,2 +10889,2 @@\n-        public static  @C(\"CXIdxEntityLanguage\") int lang$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$lang$VH().get(seg.asSlice(index*sizeof()));\n+        public static void lang$set( MemorySegment seg, int x) {\n+            CXIdxEntityInfo.lang$VH.set(seg, x);\n@@ -6470,2 +10892,2 @@\n-        public static void lang$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxEntityLanguage\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$lang$VH().set(seg, x);\n+        public static int lang$get(MemorySegment seg, long index) {\n+            return (int)CXIdxEntityInfo.lang$VH.get(seg.asSlice(index*sizeof()));\n@@ -6473,2 +10895,2 @@\n-        public static void lang$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxEntityLanguage\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$lang$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void lang$set(MemorySegment seg, long index, int x) {\n+            CXIdxEntityInfo.lang$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6476,0 +10898,1 @@\n+        static final VarHandle name$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"name\")));\n@@ -6477,1 +10900,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$name$VH();\n+            return CXIdxEntityInfo.name$VH;\n@@ -6479,2 +10902,2 @@\n-        public static  @C(\"char*\") MemoryAddress name$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityInfo$name$VH().get(seg);\n+        public static MemoryAddress name$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.name$VH.get(seg);\n@@ -6482,2 +10905,2 @@\n-        public static  @C(\"char*\") MemoryAddress name$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityInfo$name$VH().get(seg.asSlice(index*sizeof()));\n+        public static void name$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxEntityInfo.name$VH.set(seg, x);\n@@ -6485,2 +10908,2 @@\n-        public static void name$set(@C(\"struct \") MemorySegment seg, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityInfo$name$VH().set(seg, x);\n+        public static MemoryAddress name$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.name$VH.get(seg.asSlice(index*sizeof()));\n@@ -6488,2 +10911,2 @@\n-        public static void name$set(@C(\"struct \") MemorySegment seg, long index, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityInfo$name$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void name$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxEntityInfo.name$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6491,0 +10914,1 @@\n+        static final VarHandle USR$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"USR\")));\n@@ -6492,1 +10916,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$USR$VH();\n+            return CXIdxEntityInfo.USR$VH;\n@@ -6494,2 +10918,2 @@\n-        public static  @C(\"char*\") MemoryAddress USR$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityInfo$USR$VH().get(seg);\n+        public static MemoryAddress USR$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.USR$VH.get(seg);\n@@ -6497,2 +10921,2 @@\n-        public static  @C(\"char*\") MemoryAddress USR$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityInfo$USR$VH().get(seg.asSlice(index*sizeof()));\n+        public static void USR$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxEntityInfo.USR$VH.set(seg, x);\n@@ -6500,2 +10924,2 @@\n-        public static void USR$set(@C(\"struct \") MemorySegment seg, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityInfo$USR$VH().set(seg, x);\n+        public static MemoryAddress USR$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.USR$VH.get(seg.asSlice(index*sizeof()));\n@@ -6503,2 +10927,2 @@\n-        public static void USR$set(@C(\"struct \") MemorySegment seg, long index, @C(\"char*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityInfo$USR$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void USR$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxEntityInfo.USR$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6509,0 +10933,1 @@\n+        static final VarHandle attributes$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attributes\")));\n@@ -6510,1 +10935,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$attributes$VH();\n+            return CXIdxEntityInfo.attributes$VH;\n@@ -6512,2 +10937,2 @@\n-        public static  @C(\"const CXIdxAttrInfo**\") MemoryAddress attributes$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityInfo$attributes$VH().get(seg);\n+        public static MemoryAddress attributes$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.attributes$VH.get(seg);\n@@ -6515,2 +10940,2 @@\n-        public static  @C(\"const CXIdxAttrInfo**\") MemoryAddress attributes$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityInfo$attributes$VH().get(seg.asSlice(index*sizeof()));\n+        public static void attributes$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxEntityInfo.attributes$VH.set(seg, x);\n@@ -6518,2 +10943,2 @@\n-        public static void attributes$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxAttrInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityInfo$attributes$VH().set(seg, x);\n+        public static MemoryAddress attributes$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.attributes$VH.get(seg.asSlice(index*sizeof()));\n@@ -6521,2 +10946,2 @@\n-        public static void attributes$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxAttrInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityInfo$attributes$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void attributes$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxEntityInfo.attributes$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6524,0 +10949,1 @@\n+        static final VarHandle numAttributes$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numAttributes\"));\n@@ -6525,1 +10951,1 @@\n-            return Index_h$constants_1.CXIdxEntityInfo$numAttributes$VH();\n+            return CXIdxEntityInfo.numAttributes$VH;\n@@ -6527,2 +10953,2 @@\n-        public static  @C(\"unsigned int\") int numAttributes$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$numAttributes$VH().get(seg);\n+        public static int numAttributes$get(MemorySegment seg) {\n+            return (int)CXIdxEntityInfo.numAttributes$VH.get(seg);\n@@ -6530,2 +10956,2 @@\n-        public static  @C(\"unsigned int\") int numAttributes$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxEntityInfo$numAttributes$VH().get(seg.asSlice(index*sizeof()));\n+        public static void numAttributes$set( MemorySegment seg, int x) {\n+            CXIdxEntityInfo.numAttributes$VH.set(seg, x);\n@@ -6533,2 +10959,2 @@\n-        public static void numAttributes$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$numAttributes$VH().set(seg, x);\n+        public static int numAttributes$get(MemorySegment seg, long index) {\n+            return (int)CXIdxEntityInfo.numAttributes$VH.get(seg.asSlice(index*sizeof()));\n@@ -6536,2 +10962,2 @@\n-        public static void numAttributes$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxEntityInfo$numAttributes$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void numAttributes$set(MemorySegment seg, long index, int x) {\n+            CXIdxEntityInfo.numAttributes$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6540,3 +10966,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6544,1 +10970,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6547,1 +10973,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6550,1 +10976,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6553,1 +10979,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6558,1 +10984,7 @@\n-        private CXIdxContainerInfo() {}\n+        static final MemoryLayout CXIdxContainerInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"cursor\")\n+        );\n@@ -6560,1 +10992,1 @@\n-            return Index_h$constants_1.CXIdxContainerInfo$struct$LAYOUT();\n+            return CXIdxContainerInfo.CXIdxContainerInfo$struct$LAYOUT;\n@@ -6566,3 +10998,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6570,1 +11002,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6573,1 +11005,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6576,1 +11008,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6579,1 +11011,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6584,1 +11016,14 @@\n-        private CXIdxIBOutletCollectionAttrInfo() {}\n+        static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"attrInfo\"),\n+            C_POINTER.withName(\"objcClass\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"classCursor\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"classLoc\")\n+        );\n@@ -6586,1 +11031,1 @@\n-            return Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT();\n+            return CXIdxIBOutletCollectionAttrInfo.CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT;\n@@ -6588,0 +11033,1 @@\n+        static final VarHandle attrInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attrInfo\")));\n@@ -6589,1 +11035,1 @@\n-            return Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$attrInfo$VH();\n+            return CXIdxIBOutletCollectionAttrInfo.attrInfo$VH;\n@@ -6591,2 +11037,2 @@\n-        public static  @C(\"const CXIdxAttrInfo*\") MemoryAddress attrInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$attrInfo$VH().get(seg);\n+        public static MemoryAddress attrInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.get(seg);\n@@ -6594,2 +11040,2 @@\n-        public static  @C(\"const CXIdxAttrInfo*\") MemoryAddress attrInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$attrInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void attrInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.set(seg, x);\n@@ -6597,2 +11043,2 @@\n-        public static void attrInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxAttrInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$attrInfo$VH().set(seg, x);\n+        public static MemoryAddress attrInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -6600,2 +11046,2 @@\n-        public static void attrInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxAttrInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$attrInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void attrInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6603,0 +11049,1 @@\n+        static final VarHandle objcClass$VH = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"objcClass\")));\n@@ -6604,1 +11051,1 @@\n-            return Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$objcClass$VH();\n+            return CXIdxIBOutletCollectionAttrInfo.objcClass$VH;\n@@ -6606,2 +11053,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress objcClass$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$objcClass$VH().get(seg);\n+        public static MemoryAddress objcClass$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.objcClass$VH.get(seg);\n@@ -6609,2 +11056,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress objcClass$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$objcClass$VH().get(seg.asSlice(index*sizeof()));\n+        public static void objcClass$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxIBOutletCollectionAttrInfo.objcClass$VH.set(seg, x);\n@@ -6612,2 +11059,2 @@\n-        public static void objcClass$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$objcClass$VH().set(seg, x);\n+        public static MemoryAddress objcClass$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.objcClass$VH.get(seg.asSlice(index*sizeof()));\n@@ -6615,2 +11062,2 @@\n-        public static void objcClass$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxIBOutletCollectionAttrInfo$objcClass$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void objcClass$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxIBOutletCollectionAttrInfo.objcClass$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6625,3 +11072,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6629,1 +11076,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6632,1 +11079,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6635,1 +11082,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6638,1 +11085,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6641,3 +11088,0 @@\n-    public static @C(\"int\") int CXIdxDeclFlag_Skipped() {\n-        return Index_h$constants_1.CXIdxDeclFlag_Skipped();\n-    }\n@@ -6646,1 +11090,25 @@\n-        private CXIdxDeclInfo() {}\n+        static final MemoryLayout CXIdxDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"entityInfo\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"cursor\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"loc\"),\n+            C_POINTER.withName(\"semanticContainer\"),\n+            C_POINTER.withName(\"lexicalContainer\"),\n+            C_INT.withName(\"isRedeclaration\"),\n+            C_INT.withName(\"isDefinition\"),\n+            C_INT.withName(\"isContainer\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_POINTER.withName(\"declAsContainer\"),\n+            C_INT.withName(\"isImplicit\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            C_POINTER.withName(\"attributes\"),\n+            C_INT.withName(\"numAttributes\"),\n+            C_INT.withName(\"flags\")\n+        );\n@@ -6648,1 +11116,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$struct$LAYOUT();\n+            return CXIdxDeclInfo.CXIdxDeclInfo$struct$LAYOUT;\n@@ -6650,0 +11118,1 @@\n+        static final VarHandle entityInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"entityInfo\")));\n@@ -6651,1 +11120,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$entityInfo$VH();\n+            return CXIdxDeclInfo.entityInfo$VH;\n@@ -6653,2 +11122,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress entityInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$entityInfo$VH().get(seg);\n+        public static MemoryAddress entityInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.entityInfo$VH.get(seg);\n@@ -6656,2 +11125,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress entityInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$entityInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void entityInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxDeclInfo.entityInfo$VH.set(seg, x);\n@@ -6659,2 +11128,2 @@\n-        public static void entityInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$entityInfo$VH().set(seg, x);\n+        public static MemoryAddress entityInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.entityInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -6662,2 +11131,2 @@\n-        public static void entityInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$entityInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void entityInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxDeclInfo.entityInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6671,0 +11140,1 @@\n+        static final VarHandle semanticContainer$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"semanticContainer\")));\n@@ -6672,1 +11142,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$semanticContainer$VH();\n+            return CXIdxDeclInfo.semanticContainer$VH;\n@@ -6674,2 +11144,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress semanticContainer$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$semanticContainer$VH().get(seg);\n+        public static MemoryAddress semanticContainer$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.semanticContainer$VH.get(seg);\n@@ -6677,2 +11147,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress semanticContainer$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$semanticContainer$VH().get(seg.asSlice(index*sizeof()));\n+        public static void semanticContainer$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxDeclInfo.semanticContainer$VH.set(seg, x);\n@@ -6680,2 +11150,2 @@\n-        public static void semanticContainer$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$semanticContainer$VH().set(seg, x);\n+        public static MemoryAddress semanticContainer$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.semanticContainer$VH.get(seg.asSlice(index*sizeof()));\n@@ -6683,2 +11153,2 @@\n-        public static void semanticContainer$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$semanticContainer$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void semanticContainer$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxDeclInfo.semanticContainer$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6686,0 +11156,1 @@\n+        static final VarHandle lexicalContainer$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"lexicalContainer\")));\n@@ -6687,1 +11158,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$lexicalContainer$VH();\n+            return CXIdxDeclInfo.lexicalContainer$VH;\n@@ -6689,2 +11160,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress lexicalContainer$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$lexicalContainer$VH().get(seg);\n+        public static MemoryAddress lexicalContainer$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.lexicalContainer$VH.get(seg);\n@@ -6692,2 +11163,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress lexicalContainer$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$lexicalContainer$VH().get(seg.asSlice(index*sizeof()));\n+        public static void lexicalContainer$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxDeclInfo.lexicalContainer$VH.set(seg, x);\n@@ -6695,2 +11166,2 @@\n-        public static void lexicalContainer$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$lexicalContainer$VH().set(seg, x);\n+        public static MemoryAddress lexicalContainer$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.lexicalContainer$VH.get(seg.asSlice(index*sizeof()));\n@@ -6698,2 +11169,2 @@\n-        public static void lexicalContainer$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$lexicalContainer$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void lexicalContainer$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxDeclInfo.lexicalContainer$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6701,0 +11172,1 @@\n+        static final VarHandle isRedeclaration$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isRedeclaration\"));\n@@ -6702,1 +11174,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$isRedeclaration$VH();\n+            return CXIdxDeclInfo.isRedeclaration$VH;\n@@ -6704,2 +11176,2 @@\n-        public static  @C(\"int\") int isRedeclaration$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isRedeclaration$VH().get(seg);\n+        public static int isRedeclaration$get(MemorySegment seg) {\n+            return (int)CXIdxDeclInfo.isRedeclaration$VH.get(seg);\n@@ -6707,2 +11179,2 @@\n-        public static  @C(\"int\") int isRedeclaration$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isRedeclaration$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isRedeclaration$set( MemorySegment seg, int x) {\n+            CXIdxDeclInfo.isRedeclaration$VH.set(seg, x);\n@@ -6710,2 +11182,2 @@\n-        public static void isRedeclaration$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isRedeclaration$VH().set(seg, x);\n+        public static int isRedeclaration$get(MemorySegment seg, long index) {\n+            return (int)CXIdxDeclInfo.isRedeclaration$VH.get(seg.asSlice(index*sizeof()));\n@@ -6713,2 +11185,2 @@\n-        public static void isRedeclaration$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isRedeclaration$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isRedeclaration$set(MemorySegment seg, long index, int x) {\n+            CXIdxDeclInfo.isRedeclaration$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6716,0 +11188,1 @@\n+        static final VarHandle isDefinition$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isDefinition\"));\n@@ -6717,1 +11190,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$isDefinition$VH();\n+            return CXIdxDeclInfo.isDefinition$VH;\n@@ -6719,2 +11192,2 @@\n-        public static  @C(\"int\") int isDefinition$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isDefinition$VH().get(seg);\n+        public static int isDefinition$get(MemorySegment seg) {\n+            return (int)CXIdxDeclInfo.isDefinition$VH.get(seg);\n@@ -6722,2 +11195,2 @@\n-        public static  @C(\"int\") int isDefinition$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isDefinition$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isDefinition$set( MemorySegment seg, int x) {\n+            CXIdxDeclInfo.isDefinition$VH.set(seg, x);\n@@ -6725,2 +11198,2 @@\n-        public static void isDefinition$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isDefinition$VH().set(seg, x);\n+        public static int isDefinition$get(MemorySegment seg, long index) {\n+            return (int)CXIdxDeclInfo.isDefinition$VH.get(seg.asSlice(index*sizeof()));\n@@ -6728,2 +11201,2 @@\n-        public static void isDefinition$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isDefinition$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isDefinition$set(MemorySegment seg, long index, int x) {\n+            CXIdxDeclInfo.isDefinition$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6731,0 +11204,1 @@\n+        static final VarHandle isContainer$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isContainer\"));\n@@ -6732,1 +11206,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$isContainer$VH();\n+            return CXIdxDeclInfo.isContainer$VH;\n@@ -6734,2 +11208,2 @@\n-        public static  @C(\"int\") int isContainer$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isContainer$VH().get(seg);\n+        public static int isContainer$get(MemorySegment seg) {\n+            return (int)CXIdxDeclInfo.isContainer$VH.get(seg);\n@@ -6737,2 +11211,2 @@\n-        public static  @C(\"int\") int isContainer$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isContainer$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isContainer$set( MemorySegment seg, int x) {\n+            CXIdxDeclInfo.isContainer$VH.set(seg, x);\n@@ -6740,2 +11214,2 @@\n-        public static void isContainer$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isContainer$VH().set(seg, x);\n+        public static int isContainer$get(MemorySegment seg, long index) {\n+            return (int)CXIdxDeclInfo.isContainer$VH.get(seg.asSlice(index*sizeof()));\n@@ -6743,2 +11217,2 @@\n-        public static void isContainer$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isContainer$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isContainer$set(MemorySegment seg, long index, int x) {\n+            CXIdxDeclInfo.isContainer$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6746,0 +11220,1 @@\n+        static final VarHandle declAsContainer$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declAsContainer\")));\n@@ -6747,1 +11222,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$declAsContainer$VH();\n+            return CXIdxDeclInfo.declAsContainer$VH;\n@@ -6749,2 +11224,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress declAsContainer$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$declAsContainer$VH().get(seg);\n+        public static MemoryAddress declAsContainer$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.declAsContainer$VH.get(seg);\n@@ -6752,2 +11227,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress declAsContainer$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$declAsContainer$VH().get(seg.asSlice(index*sizeof()));\n+        public static void declAsContainer$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxDeclInfo.declAsContainer$VH.set(seg, x);\n@@ -6755,2 +11230,2 @@\n-        public static void declAsContainer$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$declAsContainer$VH().set(seg, x);\n+        public static MemoryAddress declAsContainer$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.declAsContainer$VH.get(seg.asSlice(index*sizeof()));\n@@ -6758,2 +11233,2 @@\n-        public static void declAsContainer$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$declAsContainer$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void declAsContainer$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxDeclInfo.declAsContainer$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6761,0 +11236,1 @@\n+        static final VarHandle isImplicit$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImplicit\"));\n@@ -6762,1 +11238,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$isImplicit$VH();\n+            return CXIdxDeclInfo.isImplicit$VH;\n@@ -6764,2 +11240,2 @@\n-        public static  @C(\"int\") int isImplicit$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isImplicit$VH().get(seg);\n+        public static int isImplicit$get(MemorySegment seg) {\n+            return (int)CXIdxDeclInfo.isImplicit$VH.get(seg);\n@@ -6767,2 +11243,2 @@\n-        public static  @C(\"int\") int isImplicit$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$isImplicit$VH().get(seg.asSlice(index*sizeof()));\n+        public static void isImplicit$set( MemorySegment seg, int x) {\n+            CXIdxDeclInfo.isImplicit$VH.set(seg, x);\n@@ -6770,2 +11246,2 @@\n-        public static void isImplicit$set(@C(\"struct \") MemorySegment seg, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isImplicit$VH().set(seg, x);\n+        public static int isImplicit$get(MemorySegment seg, long index) {\n+            return (int)CXIdxDeclInfo.isImplicit$VH.get(seg.asSlice(index*sizeof()));\n@@ -6773,2 +11249,2 @@\n-        public static void isImplicit$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$isImplicit$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void isImplicit$set(MemorySegment seg, long index, int x) {\n+            CXIdxDeclInfo.isImplicit$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6776,0 +11252,1 @@\n+        static final VarHandle attributes$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attributes\")));\n@@ -6777,1 +11254,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$attributes$VH();\n+            return CXIdxDeclInfo.attributes$VH;\n@@ -6779,2 +11256,2 @@\n-        public static  @C(\"const CXIdxAttrInfo**\") MemoryAddress attributes$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$attributes$VH().get(seg);\n+        public static MemoryAddress attributes$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.attributes$VH.get(seg);\n@@ -6782,2 +11259,2 @@\n-        public static  @C(\"const CXIdxAttrInfo**\") MemoryAddress attributes$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxDeclInfo$attributes$VH().get(seg.asSlice(index*sizeof()));\n+        public static void attributes$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxDeclInfo.attributes$VH.set(seg, x);\n@@ -6785,2 +11262,2 @@\n-        public static void attributes$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxAttrInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$attributes$VH().set(seg, x);\n+        public static MemoryAddress attributes$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.attributes$VH.get(seg.asSlice(index*sizeof()));\n@@ -6788,2 +11265,2 @@\n-        public static void attributes$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxAttrInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxDeclInfo$attributes$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void attributes$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxDeclInfo.attributes$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6791,0 +11268,1 @@\n+        static final VarHandle numAttributes$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numAttributes\"));\n@@ -6792,1 +11270,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$numAttributes$VH();\n+            return CXIdxDeclInfo.numAttributes$VH;\n@@ -6794,2 +11272,2 @@\n-        public static  @C(\"unsigned int\") int numAttributes$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$numAttributes$VH().get(seg);\n+        public static int numAttributes$get(MemorySegment seg) {\n+            return (int)CXIdxDeclInfo.numAttributes$VH.get(seg);\n@@ -6797,2 +11275,2 @@\n-        public static  @C(\"unsigned int\") int numAttributes$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$numAttributes$VH().get(seg.asSlice(index*sizeof()));\n+        public static void numAttributes$set( MemorySegment seg, int x) {\n+            CXIdxDeclInfo.numAttributes$VH.set(seg, x);\n@@ -6800,2 +11278,2 @@\n-        public static void numAttributes$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$numAttributes$VH().set(seg, x);\n+        public static int numAttributes$get(MemorySegment seg, long index) {\n+            return (int)CXIdxDeclInfo.numAttributes$VH.get(seg.asSlice(index*sizeof()));\n@@ -6803,2 +11281,2 @@\n-        public static void numAttributes$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$numAttributes$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void numAttributes$set(MemorySegment seg, long index, int x) {\n+            CXIdxDeclInfo.numAttributes$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6806,0 +11284,1 @@\n+        static final VarHandle flags$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"flags\"));\n@@ -6807,1 +11286,1 @@\n-            return Index_h$constants_1.CXIdxDeclInfo$flags$VH();\n+            return CXIdxDeclInfo.flags$VH;\n@@ -6809,2 +11288,2 @@\n-        public static  @C(\"unsigned int\") int flags$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$flags$VH().get(seg);\n+        public static int flags$get(MemorySegment seg) {\n+            return (int)CXIdxDeclInfo.flags$VH.get(seg);\n@@ -6812,2 +11291,2 @@\n-        public static  @C(\"unsigned int\") int flags$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxDeclInfo$flags$VH().get(seg.asSlice(index*sizeof()));\n+        public static void flags$set( MemorySegment seg, int x) {\n+            CXIdxDeclInfo.flags$VH.set(seg, x);\n@@ -6815,2 +11294,2 @@\n-        public static void flags$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$flags$VH().set(seg, x);\n+        public static int flags$get(MemorySegment seg, long index) {\n+            return (int)CXIdxDeclInfo.flags$VH.get(seg.asSlice(index*sizeof()));\n@@ -6818,2 +11297,2 @@\n-        public static void flags$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxDeclInfo$flags$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void flags$set(MemorySegment seg, long index, int x) {\n+            CXIdxDeclInfo.flags$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6822,3 +11301,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6826,1 +11305,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6829,1 +11308,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6832,1 +11311,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6835,1 +11314,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6838,9 +11317,0 @@\n-    public static @C(\"int\") int CXIdxObjCContainer_ForwardRef() {\n-        return Index_h$constants_1.CXIdxObjCContainer_ForwardRef();\n-    }\n-    public static @C(\"int\") int CXIdxObjCContainer_Interface() {\n-        return Index_h$constants_1.CXIdxObjCContainer_Interface();\n-    }\n-    public static @C(\"int\") int CXIdxObjCContainer_Implementation() {\n-        return Index_h$constants_1.CXIdxObjCContainer_Implementation();\n-    }\n@@ -6849,1 +11319,5 @@\n-        private CXIdxObjCContainerDeclInfo() {}\n+        static final MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"declInfo\"),\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -6851,1 +11325,1 @@\n-            return Index_h$constants_1.CXIdxObjCContainerDeclInfo$struct$LAYOUT();\n+            return CXIdxObjCContainerDeclInfo.CXIdxObjCContainerDeclInfo$struct$LAYOUT;\n@@ -6853,0 +11327,1 @@\n+        static final VarHandle declInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCContainerDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n@@ -6854,1 +11329,1 @@\n-            return Index_h$constants_1.CXIdxObjCContainerDeclInfo$declInfo$VH();\n+            return CXIdxObjCContainerDeclInfo.declInfo$VH;\n@@ -6856,2 +11331,2 @@\n-        public static  @C(\"const CXIdxDeclInfo*\") MemoryAddress declInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCContainerDeclInfo$declInfo$VH().get(seg);\n+        public static MemoryAddress declInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCContainerDeclInfo.declInfo$VH.get(seg);\n@@ -6859,2 +11334,2 @@\n-        public static  @C(\"const CXIdxDeclInfo*\") MemoryAddress declInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCContainerDeclInfo$declInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void declInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCContainerDeclInfo.declInfo$VH.set(seg, x);\n@@ -6862,2 +11337,2 @@\n-        public static void declInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCContainerDeclInfo$declInfo$VH().set(seg, x);\n+        public static MemoryAddress declInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCContainerDeclInfo.declInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -6865,2 +11340,2 @@\n-        public static void declInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCContainerDeclInfo$declInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void declInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCContainerDeclInfo.declInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6868,0 +11343,1 @@\n+        static final VarHandle kind$VH = CXIdxObjCContainerDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n@@ -6869,1 +11345,1 @@\n-            return Index_h$constants_1.CXIdxObjCContainerDeclInfo$kind$VH();\n+            return CXIdxObjCContainerDeclInfo.kind$VH;\n@@ -6871,2 +11347,2 @@\n-        public static  @C(\"CXIdxObjCContainerKind\") int kind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxObjCContainerDeclInfo$kind$VH().get(seg);\n+        public static int kind$get(MemorySegment seg) {\n+            return (int)CXIdxObjCContainerDeclInfo.kind$VH.get(seg);\n@@ -6874,2 +11350,2 @@\n-        public static  @C(\"CXIdxObjCContainerKind\") int kind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxObjCContainerDeclInfo$kind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void kind$set( MemorySegment seg, int x) {\n+            CXIdxObjCContainerDeclInfo.kind$VH.set(seg, x);\n@@ -6877,2 +11353,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxObjCContainerKind\") int x) {\n-            Index_h$constants_1.CXIdxObjCContainerDeclInfo$kind$VH().set(seg, x);\n+        public static int kind$get(MemorySegment seg, long index) {\n+            return (int)CXIdxObjCContainerDeclInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n@@ -6880,2 +11356,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxObjCContainerKind\") int x) {\n-            Index_h$constants_1.CXIdxObjCContainerDeclInfo$kind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void kind$set(MemorySegment seg, long index, int x) {\n+            CXIdxObjCContainerDeclInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6884,3 +11360,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6888,1 +11364,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6891,1 +11367,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6894,1 +11370,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6897,1 +11373,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6902,1 +11378,13 @@\n-        private CXIdxBaseClassInfo() {}\n+        static final MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"base\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"cursor\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"loc\")\n+        );\n@@ -6904,1 +11392,1 @@\n-            return Index_h$constants_1.CXIdxBaseClassInfo$struct$LAYOUT();\n+            return CXIdxBaseClassInfo.CXIdxBaseClassInfo$struct$LAYOUT;\n@@ -6906,0 +11394,1 @@\n+        static final VarHandle base$VH = MemoryHandles.asAddressVarHandle(CXIdxBaseClassInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"base\")));\n@@ -6907,1 +11396,1 @@\n-            return Index_h$constants_1.CXIdxBaseClassInfo$base$VH();\n+            return CXIdxBaseClassInfo.base$VH;\n@@ -6909,2 +11398,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress base$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxBaseClassInfo$base$VH().get(seg);\n+        public static MemoryAddress base$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxBaseClassInfo.base$VH.get(seg);\n@@ -6912,2 +11401,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress base$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxBaseClassInfo$base$VH().get(seg.asSlice(index*sizeof()));\n+        public static void base$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxBaseClassInfo.base$VH.set(seg, x);\n@@ -6915,2 +11404,2 @@\n-        public static void base$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxBaseClassInfo$base$VH().set(seg, x);\n+        public static MemoryAddress base$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxBaseClassInfo.base$VH.get(seg.asSlice(index*sizeof()));\n@@ -6918,2 +11407,2 @@\n-        public static void base$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxBaseClassInfo$base$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void base$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxBaseClassInfo.base$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6928,3 +11417,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6932,1 +11421,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6935,1 +11424,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6938,1 +11427,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6941,1 +11430,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6946,1 +11435,13 @@\n-        private CXIdxObjCProtocolRefInfo() {}\n+        static final MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"protocol\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"cursor\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"loc\")\n+        );\n@@ -6948,1 +11449,1 @@\n-            return Index_h$constants_1.CXIdxObjCProtocolRefInfo$struct$LAYOUT();\n+            return CXIdxObjCProtocolRefInfo.CXIdxObjCProtocolRefInfo$struct$LAYOUT;\n@@ -6950,0 +11451,1 @@\n+        static final VarHandle protocol$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocol\")));\n@@ -6951,1 +11453,1 @@\n-            return Index_h$constants_1.CXIdxObjCProtocolRefInfo$protocol$VH();\n+            return CXIdxObjCProtocolRefInfo.protocol$VH;\n@@ -6953,2 +11455,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress protocol$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCProtocolRefInfo$protocol$VH().get(seg);\n+        public static MemoryAddress protocol$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefInfo.protocol$VH.get(seg);\n@@ -6956,2 +11458,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress protocol$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCProtocolRefInfo$protocol$VH().get(seg.asSlice(index*sizeof()));\n+        public static void protocol$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCProtocolRefInfo.protocol$VH.set(seg, x);\n@@ -6959,2 +11461,2 @@\n-        public static void protocol$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCProtocolRefInfo$protocol$VH().set(seg, x);\n+        public static MemoryAddress protocol$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefInfo.protocol$VH.get(seg.asSlice(index*sizeof()));\n@@ -6962,2 +11464,2 @@\n-        public static void protocol$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCProtocolRefInfo$protocol$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void protocol$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCProtocolRefInfo.protocol$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -6972,3 +11474,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -6976,1 +11478,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -6979,1 +11481,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -6982,1 +11484,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -6985,1 +11487,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -6990,1 +11492,5 @@\n-        private CXIdxObjCProtocolRefListInfo() {}\n+        static final MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"protocols\"),\n+            C_INT.withName(\"numProtocols\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -6992,1 +11498,1 @@\n-            return Index_h$constants_1.CXIdxObjCProtocolRefListInfo$struct$LAYOUT();\n+            return CXIdxObjCProtocolRefListInfo.CXIdxObjCProtocolRefListInfo$struct$LAYOUT;\n@@ -6994,0 +11500,1 @@\n+        static final VarHandle protocols$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefListInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n@@ -6995,1 +11502,1 @@\n-            return Index_h$constants_1.CXIdxObjCProtocolRefListInfo$protocols$VH();\n+            return CXIdxObjCProtocolRefListInfo.protocols$VH;\n@@ -6997,2 +11504,2 @@\n-        public static  @C(\"const CXIdxObjCProtocolRefInfo**\") MemoryAddress protocols$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCProtocolRefListInfo$protocols$VH().get(seg);\n+        public static MemoryAddress protocols$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefListInfo.protocols$VH.get(seg);\n@@ -7000,2 +11507,2 @@\n-        public static  @C(\"const CXIdxObjCProtocolRefInfo**\") MemoryAddress protocols$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCProtocolRefListInfo$protocols$VH().get(seg.asSlice(index*sizeof()));\n+        public static void protocols$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCProtocolRefListInfo.protocols$VH.set(seg, x);\n@@ -7003,2 +11510,2 @@\n-        public static void protocols$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxObjCProtocolRefInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCProtocolRefListInfo$protocols$VH().set(seg, x);\n+        public static MemoryAddress protocols$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefListInfo.protocols$VH.get(seg.asSlice(index*sizeof()));\n@@ -7006,2 +11513,2 @@\n-        public static void protocols$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxObjCProtocolRefInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCProtocolRefListInfo$protocols$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void protocols$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCProtocolRefListInfo.protocols$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7009,0 +11516,1 @@\n+        static final VarHandle numProtocols$VH = CXIdxObjCProtocolRefListInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numProtocols\"));\n@@ -7010,1 +11518,1 @@\n-            return Index_h$constants_1.CXIdxObjCProtocolRefListInfo$numProtocols$VH();\n+            return CXIdxObjCProtocolRefListInfo.numProtocols$VH;\n@@ -7012,2 +11520,2 @@\n-        public static  @C(\"unsigned int\") int numProtocols$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxObjCProtocolRefListInfo$numProtocols$VH().get(seg);\n+        public static int numProtocols$get(MemorySegment seg) {\n+            return (int)CXIdxObjCProtocolRefListInfo.numProtocols$VH.get(seg);\n@@ -7015,2 +11523,2 @@\n-        public static  @C(\"unsigned int\") int numProtocols$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxObjCProtocolRefListInfo$numProtocols$VH().get(seg.asSlice(index*sizeof()));\n+        public static void numProtocols$set( MemorySegment seg, int x) {\n+            CXIdxObjCProtocolRefListInfo.numProtocols$VH.set(seg, x);\n@@ -7018,2 +11526,2 @@\n-        public static void numProtocols$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxObjCProtocolRefListInfo$numProtocols$VH().set(seg, x);\n+        public static int numProtocols$get(MemorySegment seg, long index) {\n+            return (int)CXIdxObjCProtocolRefListInfo.numProtocols$VH.get(seg.asSlice(index*sizeof()));\n@@ -7021,2 +11529,2 @@\n-        public static void numProtocols$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxObjCProtocolRefListInfo$numProtocols$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void numProtocols$set(MemorySegment seg, long index, int x) {\n+            CXIdxObjCProtocolRefListInfo.numProtocols$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7025,3 +11533,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -7029,1 +11537,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -7032,1 +11540,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -7035,1 +11543,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -7038,1 +11546,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -7043,1 +11551,5 @@\n-        private CXIdxObjCInterfaceDeclInfo() {}\n+        static final MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"containerInfo\"),\n+            C_POINTER.withName(\"superInfo\"),\n+            C_POINTER.withName(\"protocols\")\n+        );\n@@ -7045,1 +11557,1 @@\n-            return Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$struct$LAYOUT();\n+            return CXIdxObjCInterfaceDeclInfo.CXIdxObjCInterfaceDeclInfo$struct$LAYOUT;\n@@ -7047,0 +11559,1 @@\n+        static final VarHandle containerInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"containerInfo\")));\n@@ -7048,1 +11561,1 @@\n-            return Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$containerInfo$VH();\n+            return CXIdxObjCInterfaceDeclInfo.containerInfo$VH;\n@@ -7050,2 +11563,2 @@\n-        public static  @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress containerInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$containerInfo$VH().get(seg);\n+        public static MemoryAddress containerInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.containerInfo$VH.get(seg);\n@@ -7053,2 +11566,2 @@\n-        public static  @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress containerInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$containerInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void containerInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCInterfaceDeclInfo.containerInfo$VH.set(seg, x);\n@@ -7056,2 +11569,2 @@\n-        public static void containerInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$containerInfo$VH().set(seg, x);\n+        public static MemoryAddress containerInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.containerInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -7059,2 +11572,2 @@\n-        public static void containerInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$containerInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void containerInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCInterfaceDeclInfo.containerInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7062,0 +11575,1 @@\n+        static final VarHandle superInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"superInfo\")));\n@@ -7063,1 +11577,1 @@\n-            return Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$superInfo$VH();\n+            return CXIdxObjCInterfaceDeclInfo.superInfo$VH;\n@@ -7065,2 +11579,2 @@\n-        public static  @C(\"const CXIdxBaseClassInfo*\") MemoryAddress superInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$superInfo$VH().get(seg);\n+        public static MemoryAddress superInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.superInfo$VH.get(seg);\n@@ -7068,2 +11582,2 @@\n-        public static  @C(\"const CXIdxBaseClassInfo*\") MemoryAddress superInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$superInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void superInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCInterfaceDeclInfo.superInfo$VH.set(seg, x);\n@@ -7071,2 +11585,2 @@\n-        public static void superInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxBaseClassInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$superInfo$VH().set(seg, x);\n+        public static MemoryAddress superInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.superInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -7074,2 +11588,2 @@\n-        public static void superInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxBaseClassInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$superInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void superInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCInterfaceDeclInfo.superInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7077,0 +11591,1 @@\n+        static final VarHandle protocols$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n@@ -7078,1 +11593,1 @@\n-            return Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$protocols$VH();\n+            return CXIdxObjCInterfaceDeclInfo.protocols$VH;\n@@ -7080,2 +11595,2 @@\n-        public static  @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress protocols$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$protocols$VH().get(seg);\n+        public static MemoryAddress protocols$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.protocols$VH.get(seg);\n@@ -7083,2 +11598,2 @@\n-        public static  @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress protocols$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$protocols$VH().get(seg.asSlice(index*sizeof()));\n+        public static void protocols$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCInterfaceDeclInfo.protocols$VH.set(seg, x);\n@@ -7086,2 +11601,2 @@\n-        public static void protocols$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$protocols$VH().set(seg, x);\n+        public static MemoryAddress protocols$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.protocols$VH.get(seg.asSlice(index*sizeof()));\n@@ -7089,2 +11604,2 @@\n-        public static void protocols$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCInterfaceDeclInfo$protocols$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void protocols$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCInterfaceDeclInfo.protocols$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7093,3 +11608,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -7097,1 +11612,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -7100,1 +11615,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -7103,1 +11618,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -7106,1 +11621,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -7111,1 +11626,15 @@\n-        private CXIdxObjCCategoryDeclInfo() {}\n+        static final MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"containerInfo\"),\n+            C_POINTER.withName(\"objcClass\"),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"classCursor\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"classLoc\"),\n+            C_POINTER.withName(\"protocols\")\n+        );\n@@ -7113,1 +11642,1 @@\n-            return Index_h$constants_1.CXIdxObjCCategoryDeclInfo$struct$LAYOUT();\n+            return CXIdxObjCCategoryDeclInfo.CXIdxObjCCategoryDeclInfo$struct$LAYOUT;\n@@ -7115,0 +11644,1 @@\n+        static final VarHandle containerInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"containerInfo\")));\n@@ -7116,1 +11646,1 @@\n-            return Index_h$constants_1.CXIdxObjCCategoryDeclInfo$containerInfo$VH();\n+            return CXIdxObjCCategoryDeclInfo.containerInfo$VH;\n@@ -7118,2 +11648,2 @@\n-        public static  @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress containerInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCCategoryDeclInfo$containerInfo$VH().get(seg);\n+        public static MemoryAddress containerInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.containerInfo$VH.get(seg);\n@@ -7121,2 +11651,2 @@\n-        public static  @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress containerInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCCategoryDeclInfo$containerInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void containerInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCCategoryDeclInfo.containerInfo$VH.set(seg, x);\n@@ -7124,2 +11654,2 @@\n-        public static void containerInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCCategoryDeclInfo$containerInfo$VH().set(seg, x);\n+        public static MemoryAddress containerInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.containerInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -7127,2 +11657,2 @@\n-        public static void containerInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCCategoryDeclInfo$containerInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void containerInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCCategoryDeclInfo.containerInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7130,0 +11660,1 @@\n+        static final VarHandle objcClass$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"objcClass\")));\n@@ -7131,1 +11662,1 @@\n-            return Index_h$constants_1.CXIdxObjCCategoryDeclInfo$objcClass$VH();\n+            return CXIdxObjCCategoryDeclInfo.objcClass$VH;\n@@ -7133,2 +11664,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress objcClass$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCCategoryDeclInfo$objcClass$VH().get(seg);\n+        public static MemoryAddress objcClass$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.objcClass$VH.get(seg);\n@@ -7136,2 +11667,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress objcClass$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCCategoryDeclInfo$objcClass$VH().get(seg.asSlice(index*sizeof()));\n+        public static void objcClass$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCCategoryDeclInfo.objcClass$VH.set(seg, x);\n@@ -7139,2 +11670,2 @@\n-        public static void objcClass$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCCategoryDeclInfo$objcClass$VH().set(seg, x);\n+        public static MemoryAddress objcClass$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.objcClass$VH.get(seg.asSlice(index*sizeof()));\n@@ -7142,2 +11673,2 @@\n-        public static void objcClass$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCCategoryDeclInfo$objcClass$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void objcClass$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCCategoryDeclInfo.objcClass$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7151,0 +11682,1 @@\n+        static final VarHandle protocols$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n@@ -7152,1 +11684,1 @@\n-            return Index_h$constants_1.CXIdxObjCCategoryDeclInfo$protocols$VH();\n+            return CXIdxObjCCategoryDeclInfo.protocols$VH;\n@@ -7154,2 +11686,2 @@\n-        public static  @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress protocols$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCCategoryDeclInfo$protocols$VH().get(seg);\n+        public static MemoryAddress protocols$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.protocols$VH.get(seg);\n@@ -7157,2 +11689,2 @@\n-        public static  @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress protocols$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCCategoryDeclInfo$protocols$VH().get(seg.asSlice(index*sizeof()));\n+        public static void protocols$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCCategoryDeclInfo.protocols$VH.set(seg, x);\n@@ -7160,2 +11692,2 @@\n-        public static void protocols$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCCategoryDeclInfo$protocols$VH().set(seg, x);\n+        public static MemoryAddress protocols$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.protocols$VH.get(seg.asSlice(index*sizeof()));\n@@ -7163,2 +11695,2 @@\n-        public static void protocols$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCCategoryDeclInfo$protocols$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void protocols$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCCategoryDeclInfo.protocols$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7167,3 +11699,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -7171,1 +11703,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -7174,1 +11706,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -7177,1 +11709,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -7180,1 +11712,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -7185,1 +11717,5 @@\n-        private CXIdxObjCPropertyDeclInfo() {}\n+        static final MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"declInfo\"),\n+            C_POINTER.withName(\"getter\"),\n+            C_POINTER.withName(\"setter\")\n+        );\n@@ -7187,1 +11723,1 @@\n-            return Index_h$constants_1.CXIdxObjCPropertyDeclInfo$struct$LAYOUT();\n+            return CXIdxObjCPropertyDeclInfo.CXIdxObjCPropertyDeclInfo$struct$LAYOUT;\n@@ -7189,0 +11725,1 @@\n+        static final VarHandle declInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n@@ -7190,1 +11727,1 @@\n-            return Index_h$constants_1.CXIdxObjCPropertyDeclInfo$declInfo$VH();\n+            return CXIdxObjCPropertyDeclInfo.declInfo$VH;\n@@ -7192,2 +11729,2 @@\n-        public static  @C(\"const CXIdxDeclInfo*\") MemoryAddress declInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCPropertyDeclInfo$declInfo$VH().get(seg);\n+        public static MemoryAddress declInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.declInfo$VH.get(seg);\n@@ -7195,2 +11732,2 @@\n-        public static  @C(\"const CXIdxDeclInfo*\") MemoryAddress declInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCPropertyDeclInfo$declInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void declInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCPropertyDeclInfo.declInfo$VH.set(seg, x);\n@@ -7198,2 +11735,2 @@\n-        public static void declInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCPropertyDeclInfo$declInfo$VH().set(seg, x);\n+        public static MemoryAddress declInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.declInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -7201,2 +11738,2 @@\n-        public static void declInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCPropertyDeclInfo$declInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void declInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCPropertyDeclInfo.declInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7204,0 +11741,1 @@\n+        static final VarHandle getter$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"getter\")));\n@@ -7205,1 +11743,1 @@\n-            return Index_h$constants_1.CXIdxObjCPropertyDeclInfo$getter$VH();\n+            return CXIdxObjCPropertyDeclInfo.getter$VH;\n@@ -7207,2 +11745,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress getter$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCPropertyDeclInfo$getter$VH().get(seg);\n+        public static MemoryAddress getter$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.getter$VH.get(seg);\n@@ -7210,2 +11748,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress getter$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCPropertyDeclInfo$getter$VH().get(seg.asSlice(index*sizeof()));\n+        public static void getter$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCPropertyDeclInfo.getter$VH.set(seg, x);\n@@ -7213,2 +11751,2 @@\n-        public static void getter$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCPropertyDeclInfo$getter$VH().set(seg, x);\n+        public static MemoryAddress getter$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.getter$VH.get(seg.asSlice(index*sizeof()));\n@@ -7216,2 +11754,2 @@\n-        public static void getter$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCPropertyDeclInfo$getter$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void getter$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCPropertyDeclInfo.getter$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7219,0 +11757,1 @@\n+        static final VarHandle setter$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"setter\")));\n@@ -7220,1 +11759,1 @@\n-            return Index_h$constants_1.CXIdxObjCPropertyDeclInfo$setter$VH();\n+            return CXIdxObjCPropertyDeclInfo.setter$VH;\n@@ -7222,2 +11761,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress setter$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCPropertyDeclInfo$setter$VH().get(seg);\n+        public static MemoryAddress setter$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.setter$VH.get(seg);\n@@ -7225,2 +11764,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress setter$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxObjCPropertyDeclInfo$setter$VH().get(seg.asSlice(index*sizeof()));\n+        public static void setter$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxObjCPropertyDeclInfo.setter$VH.set(seg, x);\n@@ -7228,2 +11767,2 @@\n-        public static void setter$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCPropertyDeclInfo$setter$VH().set(seg, x);\n+        public static MemoryAddress setter$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.setter$VH.get(seg.asSlice(index*sizeof()));\n@@ -7231,2 +11770,2 @@\n-        public static void setter$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxObjCPropertyDeclInfo$setter$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void setter$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxObjCPropertyDeclInfo.setter$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7235,3 +11774,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -7239,1 +11778,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -7242,1 +11781,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -7245,1 +11784,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -7248,1 +11787,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -7253,1 +11792,6 @@\n-        private CXIdxCXXClassDeclInfo() {}\n+        static final MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"declInfo\"),\n+            C_POINTER.withName(\"bases\"),\n+            C_INT.withName(\"numBases\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -7255,1 +11799,1 @@\n-            return Index_h$constants_1.CXIdxCXXClassDeclInfo$struct$LAYOUT();\n+            return CXIdxCXXClassDeclInfo.CXIdxCXXClassDeclInfo$struct$LAYOUT;\n@@ -7257,0 +11801,1 @@\n+        static final VarHandle declInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n@@ -7258,1 +11803,1 @@\n-            return Index_h$constants_1.CXIdxCXXClassDeclInfo$declInfo$VH();\n+            return CXIdxCXXClassDeclInfo.declInfo$VH;\n@@ -7260,2 +11805,2 @@\n-        public static  @C(\"const CXIdxDeclInfo*\") MemoryAddress declInfo$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxCXXClassDeclInfo$declInfo$VH().get(seg);\n+        public static MemoryAddress declInfo$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.declInfo$VH.get(seg);\n@@ -7263,2 +11808,2 @@\n-        public static  @C(\"const CXIdxDeclInfo*\") MemoryAddress declInfo$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxCXXClassDeclInfo$declInfo$VH().get(seg.asSlice(index*sizeof()));\n+        public static void declInfo$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxCXXClassDeclInfo.declInfo$VH.set(seg, x);\n@@ -7266,2 +11811,2 @@\n-        public static void declInfo$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxCXXClassDeclInfo$declInfo$VH().set(seg, x);\n+        public static MemoryAddress declInfo$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.declInfo$VH.get(seg.asSlice(index*sizeof()));\n@@ -7269,2 +11814,2 @@\n-        public static void declInfo$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxDeclInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxCXXClassDeclInfo$declInfo$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void declInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxCXXClassDeclInfo.declInfo$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7272,0 +11817,1 @@\n+        static final VarHandle bases$VH = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"bases\")));\n@@ -7273,1 +11819,1 @@\n-            return Index_h$constants_1.CXIdxCXXClassDeclInfo$bases$VH();\n+            return CXIdxCXXClassDeclInfo.bases$VH;\n@@ -7275,2 +11821,2 @@\n-        public static  @C(\"const CXIdxBaseClassInfo**\") MemoryAddress bases$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxCXXClassDeclInfo$bases$VH().get(seg);\n+        public static MemoryAddress bases$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.bases$VH.get(seg);\n@@ -7278,2 +11824,2 @@\n-        public static  @C(\"const CXIdxBaseClassInfo**\") MemoryAddress bases$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxCXXClassDeclInfo$bases$VH().get(seg.asSlice(index*sizeof()));\n+        public static void bases$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxCXXClassDeclInfo.bases$VH.set(seg, x);\n@@ -7281,2 +11827,2 @@\n-        public static void bases$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxBaseClassInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxCXXClassDeclInfo$bases$VH().set(seg, x);\n+        public static MemoryAddress bases$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.bases$VH.get(seg.asSlice(index*sizeof()));\n@@ -7284,2 +11830,2 @@\n-        public static void bases$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxBaseClassInfo**\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxCXXClassDeclInfo$bases$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void bases$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxCXXClassDeclInfo.bases$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7287,0 +11833,1 @@\n+        static final VarHandle numBases$VH = CXIdxCXXClassDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numBases\"));\n@@ -7288,1 +11835,1 @@\n-            return Index_h$constants_1.CXIdxCXXClassDeclInfo$numBases$VH();\n+            return CXIdxCXXClassDeclInfo.numBases$VH;\n@@ -7290,2 +11837,2 @@\n-        public static  @C(\"unsigned int\") int numBases$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxCXXClassDeclInfo$numBases$VH().get(seg);\n+        public static int numBases$get(MemorySegment seg) {\n+            return (int)CXIdxCXXClassDeclInfo.numBases$VH.get(seg);\n@@ -7293,2 +11840,2 @@\n-        public static  @C(\"unsigned int\") int numBases$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxCXXClassDeclInfo$numBases$VH().get(seg.asSlice(index*sizeof()));\n+        public static void numBases$set( MemorySegment seg, int x) {\n+            CXIdxCXXClassDeclInfo.numBases$VH.set(seg, x);\n@@ -7296,2 +11843,2 @@\n-        public static void numBases$set(@C(\"struct \") MemorySegment seg, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxCXXClassDeclInfo$numBases$VH().set(seg, x);\n+        public static int numBases$get(MemorySegment seg, long index) {\n+            return (int)CXIdxCXXClassDeclInfo.numBases$VH.get(seg.asSlice(index*sizeof()));\n@@ -7299,2 +11846,2 @@\n-        public static void numBases$set(@C(\"struct \") MemorySegment seg, long index, @C(\"unsigned int\") int x) {\n-            Index_h$constants_1.CXIdxCXXClassDeclInfo$numBases$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void numBases$set(MemorySegment seg, long index, int x) {\n+            CXIdxCXXClassDeclInfo.numBases$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7303,3 +11850,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -7307,1 +11854,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -7310,1 +11857,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -7313,1 +11860,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -7316,1 +11863,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -7319,36 +11866,0 @@\n-    public static @C(\"int\") int CXIdxEntityRef_Direct() {\n-        return Index_h$constants_1.CXIdxEntityRef_Direct();\n-    }\n-    public static @C(\"int\") int CXIdxEntityRef_Implicit() {\n-        return Index_h$constants_1.CXIdxEntityRef_Implicit();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_None() {\n-        return Index_h$constants_1.CXSymbolRole_None();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Declaration() {\n-        return Index_h$constants_1.CXSymbolRole_Declaration();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Definition() {\n-        return Index_h$constants_1.CXSymbolRole_Definition();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Reference() {\n-        return Index_h$constants_1.CXSymbolRole_Reference();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Read() {\n-        return Index_h$constants_1.CXSymbolRole_Read();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Write() {\n-        return Index_h$constants_1.CXSymbolRole_Write();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Call() {\n-        return Index_h$constants_1.CXSymbolRole_Call();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Dynamic() {\n-        return Index_h$constants_1.CXSymbolRole_Dynamic();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_AddressOf() {\n-        return Index_h$constants_1.CXSymbolRole_AddressOf();\n-    }\n-    public static @C(\"int\") int CXSymbolRole_Implicit() {\n-        return Index_h$constants_1.CXSymbolRole_Implicit();\n-    }\n@@ -7357,1 +11868,19 @@\n-        private CXIdxEntityRefInfo() {}\n+        static final MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.ofPaddingBits(32),\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ).withName(\"cursor\"),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ).withName(\"loc\"),\n+            C_POINTER.withName(\"referencedEntity\"),\n+            C_POINTER.withName(\"parentEntity\"),\n+            C_POINTER.withName(\"container\"),\n+            C_INT.withName(\"role\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        );\n@@ -7359,1 +11888,1 @@\n-            return Index_h$constants_1.CXIdxEntityRefInfo$struct$LAYOUT();\n+            return CXIdxEntityRefInfo.CXIdxEntityRefInfo$struct$LAYOUT;\n@@ -7361,0 +11890,1 @@\n+        static final VarHandle kind$VH = CXIdxEntityRefInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n@@ -7362,1 +11892,1 @@\n-            return Index_h$constants_1.CXIdxEntityRefInfo$kind$VH();\n+            return CXIdxEntityRefInfo.kind$VH;\n@@ -7364,2 +11894,2 @@\n-        public static  @C(\"CXIdxEntityRefKind\") int kind$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxEntityRefInfo$kind$VH().get(seg);\n+        public static int kind$get(MemorySegment seg) {\n+            return (int)CXIdxEntityRefInfo.kind$VH.get(seg);\n@@ -7367,2 +11897,2 @@\n-        public static  @C(\"CXIdxEntityRefKind\") int kind$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxEntityRefInfo$kind$VH().get(seg.asSlice(index*sizeof()));\n+        public static void kind$set( MemorySegment seg, int x) {\n+            CXIdxEntityRefInfo.kind$VH.set(seg, x);\n@@ -7370,2 +11900,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxEntityRefKind\") int x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$kind$VH().set(seg, x);\n+        public static int kind$get(MemorySegment seg, long index) {\n+            return (int)CXIdxEntityRefInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n@@ -7373,2 +11903,2 @@\n-        public static void kind$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxEntityRefKind\") int x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$kind$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void kind$set(MemorySegment seg, long index, int x) {\n+            CXIdxEntityRefInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7382,0 +11912,1 @@\n+        static final VarHandle referencedEntity$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"referencedEntity\")));\n@@ -7383,1 +11914,1 @@\n-            return Index_h$constants_1.CXIdxEntityRefInfo$referencedEntity$VH();\n+            return CXIdxEntityRefInfo.referencedEntity$VH;\n@@ -7385,2 +11916,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress referencedEntity$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityRefInfo$referencedEntity$VH().get(seg);\n+        public static MemoryAddress referencedEntity$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.referencedEntity$VH.get(seg);\n@@ -7388,2 +11919,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress referencedEntity$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityRefInfo$referencedEntity$VH().get(seg.asSlice(index*sizeof()));\n+        public static void referencedEntity$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxEntityRefInfo.referencedEntity$VH.set(seg, x);\n@@ -7391,2 +11922,2 @@\n-        public static void referencedEntity$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$referencedEntity$VH().set(seg, x);\n+        public static MemoryAddress referencedEntity$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.referencedEntity$VH.get(seg.asSlice(index*sizeof()));\n@@ -7394,2 +11925,2 @@\n-        public static void referencedEntity$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$referencedEntity$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void referencedEntity$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxEntityRefInfo.referencedEntity$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7397,0 +11928,1 @@\n+        static final VarHandle parentEntity$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"parentEntity\")));\n@@ -7398,1 +11930,1 @@\n-            return Index_h$constants_1.CXIdxEntityRefInfo$parentEntity$VH();\n+            return CXIdxEntityRefInfo.parentEntity$VH;\n@@ -7400,2 +11932,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress parentEntity$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityRefInfo$parentEntity$VH().get(seg);\n+        public static MemoryAddress parentEntity$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.parentEntity$VH.get(seg);\n@@ -7403,2 +11935,2 @@\n-        public static  @C(\"const CXIdxEntityInfo*\") MemoryAddress parentEntity$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityRefInfo$parentEntity$VH().get(seg.asSlice(index*sizeof()));\n+        public static void parentEntity$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxEntityRefInfo.parentEntity$VH.set(seg, x);\n@@ -7406,2 +11938,2 @@\n-        public static void parentEntity$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$parentEntity$VH().set(seg, x);\n+        public static MemoryAddress parentEntity$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.parentEntity$VH.get(seg.asSlice(index*sizeof()));\n@@ -7409,2 +11941,2 @@\n-        public static void parentEntity$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxEntityInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$parentEntity$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void parentEntity$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxEntityRefInfo.parentEntity$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7412,0 +11944,1 @@\n+        static final VarHandle container$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"container\")));\n@@ -7413,1 +11946,1 @@\n-            return Index_h$constants_1.CXIdxEntityRefInfo$container$VH();\n+            return CXIdxEntityRefInfo.container$VH;\n@@ -7415,2 +11948,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress container$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityRefInfo$container$VH().get(seg);\n+        public static MemoryAddress container$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.container$VH.get(seg);\n@@ -7418,2 +11951,2 @@\n-        public static  @C(\"const CXIdxContainerInfo*\") MemoryAddress container$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.CXIdxEntityRefInfo$container$VH().get(seg.asSlice(index*sizeof()));\n+        public static void container$set( MemorySegment seg, MemoryAddress x) {\n+            CXIdxEntityRefInfo.container$VH.set(seg, x);\n@@ -7421,2 +11954,2 @@\n-        public static void container$set(@C(\"struct \") MemorySegment seg, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$container$VH().set(seg, x);\n+        public static MemoryAddress container$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.container$VH.get(seg.asSlice(index*sizeof()));\n@@ -7424,2 +11957,2 @@\n-        public static void container$set(@C(\"struct \") MemorySegment seg, long index, @C(\"const CXIdxContainerInfo*\") MemoryAddress x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$container$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void container$set(MemorySegment seg, long index, MemoryAddress x) {\n+            CXIdxEntityRefInfo.container$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7427,0 +11960,1 @@\n+        static final VarHandle role$VH = CXIdxEntityRefInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"role\"));\n@@ -7428,1 +11962,1 @@\n-            return Index_h$constants_1.CXIdxEntityRefInfo$role$VH();\n+            return CXIdxEntityRefInfo.role$VH;\n@@ -7430,2 +11964,2 @@\n-        public static  @C(\"CXSymbolRole\") int role$get(@C(\"struct \") MemorySegment seg) {\n-            return (int)Index_h$constants_1.CXIdxEntityRefInfo$role$VH().get(seg);\n+        public static int role$get(MemorySegment seg) {\n+            return (int)CXIdxEntityRefInfo.role$VH.get(seg);\n@@ -7433,2 +11967,2 @@\n-        public static  @C(\"CXSymbolRole\") int role$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (int)Index_h$constants_1.CXIdxEntityRefInfo$role$VH().get(seg.asSlice(index*sizeof()));\n+        public static void role$set( MemorySegment seg, int x) {\n+            CXIdxEntityRefInfo.role$VH.set(seg, x);\n@@ -7436,2 +11970,2 @@\n-        public static void role$set(@C(\"struct \") MemorySegment seg, @C(\"CXSymbolRole\") int x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$role$VH().set(seg, x);\n+        public static int role$get(MemorySegment seg, long index) {\n+            return (int)CXIdxEntityRefInfo.role$VH.get(seg.asSlice(index*sizeof()));\n@@ -7439,2 +11973,2 @@\n-        public static void role$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXSymbolRole\") int x) {\n-            Index_h$constants_1.CXIdxEntityRefInfo$role$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void role$set(MemorySegment seg, long index, int x) {\n+            CXIdxEntityRefInfo.role$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7443,3 +11977,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -7447,1 +11981,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -7450,1 +11984,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -7453,1 +11987,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -7456,1 +11990,47 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+    }\n+\n+    public static class constants$52 {\n+\n+        static final FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_findReferencesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findReferencesInFileWithBlock\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$52.clang_findReferencesInFileWithBlock$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_findIncludesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findIncludesInFileWithBlock\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$52.clang_findIncludesInFileWithBlock$FUNC, false\n+        );\n+        static final FunctionDescriptor abortQuery$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor diagnostic$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor enteredMainFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor ppIncludedFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n@@ -7461,1 +12041,10 @@\n-        private IndexerCallbacks() {}\n+        static final MemoryLayout IndexerCallbacks$struct$LAYOUT = MemoryLayout.ofStruct(\n+            C_POINTER.withName(\"abortQuery\"),\n+            C_POINTER.withName(\"diagnostic\"),\n+            C_POINTER.withName(\"enteredMainFile\"),\n+            C_POINTER.withName(\"ppIncludedFile\"),\n+            C_POINTER.withName(\"importedASTFile\"),\n+            C_POINTER.withName(\"startedTranslationUnit\"),\n+            C_POINTER.withName(\"indexDeclaration\"),\n+            C_POINTER.withName(\"indexEntityReference\")\n+        );\n@@ -7463,1 +12052,11 @@\n-            return Index_h$constants_1.IndexerCallbacks$struct$LAYOUT();\n+            return IndexerCallbacks.IndexerCallbacks$struct$LAYOUT;\n+        }\n+        public interface abortQuery {\n+\n+            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n+            static MemorySegment allocate(abortQuery fi) {\n+                return RuntimeHelper.upcallStub(abortQuery.class, fi, constants$52.abortQuery$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+            }\n+            static MemorySegment allocate(abortQuery fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n@@ -7465,0 +12064,2 @@\n+\n+        static final VarHandle abortQuery$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"abortQuery\")));\n@@ -7466,1 +12067,1 @@\n-            return Index_h$constants_1.IndexerCallbacks$abortQuery$VH();\n+            return IndexerCallbacks.abortQuery$VH;\n@@ -7468,2 +12069,2 @@\n-        public static  @C(\"int(*)(CXClientData,void*)\") MemoryAddress abortQuery$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$abortQuery$VH().get(seg);\n+        public static MemoryAddress abortQuery$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.abortQuery$VH.get(seg);\n@@ -7471,2 +12072,2 @@\n-        public static  @C(\"int(*)(CXClientData,void*)\") MemoryAddress abortQuery$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$abortQuery$VH().get(seg.asSlice(index*sizeof()));\n+        public static void abortQuery$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.abortQuery$VH.set(seg, x);\n@@ -7474,2 +12075,2 @@\n-        public static void abortQuery$set(@C(\"struct \") MemorySegment seg, @C(\"int(*)(CXClientData,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$abortQuery$VH().set(seg, x);\n+        public static MemoryAddress abortQuery$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.abortQuery$VH.get(seg.asSlice(index*sizeof()));\n@@ -7477,2 +12078,2 @@\n-        public static void abortQuery$set(@C(\"struct \") MemorySegment seg, long index, @C(\"int(*)(CXClientData,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$abortQuery$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void abortQuery$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.abortQuery$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7480,0 +12081,12 @@\n+        public interface diagnostic {\n+\n+            void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);\n+            static MemorySegment allocate(diagnostic fi) {\n+                return RuntimeHelper.upcallStub(diagnostic.class, fi, constants$52.diagnostic$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+            }\n+            static MemorySegment allocate(diagnostic fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n+        }\n+\n+        static final VarHandle diagnostic$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"diagnostic\")));\n@@ -7481,1 +12094,1 @@\n-            return Index_h$constants_1.IndexerCallbacks$diagnostic$VH();\n+            return IndexerCallbacks.diagnostic$VH;\n@@ -7483,2 +12096,2 @@\n-        public static  @C(\"void(*)(CXClientData,CXDiagnosticSet,void*)\") MemoryAddress diagnostic$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$diagnostic$VH().get(seg);\n+        public static MemoryAddress diagnostic$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.diagnostic$VH.get(seg);\n@@ -7486,2 +12099,2 @@\n-        public static  @C(\"void(*)(CXClientData,CXDiagnosticSet,void*)\") MemoryAddress diagnostic$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$diagnostic$VH().get(seg.asSlice(index*sizeof()));\n+        public static void diagnostic$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.diagnostic$VH.set(seg, x);\n@@ -7489,2 +12102,2 @@\n-        public static void diagnostic$set(@C(\"struct \") MemorySegment seg, @C(\"void(*)(CXClientData,CXDiagnosticSet,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$diagnostic$VH().set(seg, x);\n+        public static MemoryAddress diagnostic$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.diagnostic$VH.get(seg.asSlice(index*sizeof()));\n@@ -7492,2 +12105,2 @@\n-        public static void diagnostic$set(@C(\"struct \") MemorySegment seg, long index, @C(\"void(*)(CXClientData,CXDiagnosticSet,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$diagnostic$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void diagnostic$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.diagnostic$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7495,0 +12108,12 @@\n+        public interface enteredMainFile {\n+\n+            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);\n+            static MemorySegment allocate(enteredMainFile fi) {\n+                return RuntimeHelper.upcallStub(enteredMainFile.class, fi, constants$52.enteredMainFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+            }\n+            static MemorySegment allocate(enteredMainFile fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n+        }\n+\n+        static final VarHandle enteredMainFile$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"enteredMainFile\")));\n@@ -7496,1 +12121,1 @@\n-            return Index_h$constants_1.IndexerCallbacks$enteredMainFile$VH();\n+            return IndexerCallbacks.enteredMainFile$VH;\n@@ -7498,2 +12123,2 @@\n-        public static  @C(\"CXIdxClientFile(*)(CXClientData,CXFile,void*)\") MemoryAddress enteredMainFile$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$enteredMainFile$VH().get(seg);\n+        public static MemoryAddress enteredMainFile$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.enteredMainFile$VH.get(seg);\n@@ -7501,2 +12126,2 @@\n-        public static  @C(\"CXIdxClientFile(*)(CXClientData,CXFile,void*)\") MemoryAddress enteredMainFile$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$enteredMainFile$VH().get(seg.asSlice(index*sizeof()));\n+        public static void enteredMainFile$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.enteredMainFile$VH.set(seg, x);\n@@ -7504,2 +12129,2 @@\n-        public static void enteredMainFile$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxClientFile(*)(CXClientData,CXFile,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$enteredMainFile$VH().set(seg, x);\n+        public static MemoryAddress enteredMainFile$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.enteredMainFile$VH.get(seg.asSlice(index*sizeof()));\n@@ -7507,2 +12132,2 @@\n-        public static void enteredMainFile$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxClientFile(*)(CXClientData,CXFile,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$enteredMainFile$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void enteredMainFile$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.enteredMainFile$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7510,0 +12135,12 @@\n+        public interface ppIncludedFile {\n+\n+            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n+            static MemorySegment allocate(ppIncludedFile fi) {\n+                return RuntimeHelper.upcallStub(ppIncludedFile.class, fi, constants$52.ppIncludedFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+            }\n+            static MemorySegment allocate(ppIncludedFile fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n+        }\n+\n+        static final VarHandle ppIncludedFile$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ppIncludedFile\")));\n@@ -7511,1 +12148,1 @@\n-            return Index_h$constants_1.IndexerCallbacks$ppIncludedFile$VH();\n+            return IndexerCallbacks.ppIncludedFile$VH;\n@@ -7513,2 +12150,2 @@\n-        public static  @C(\"CXIdxClientFile(*)(CXClientData,const CXIdxIncludedFileInfo*)\") MemoryAddress ppIncludedFile$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$ppIncludedFile$VH().get(seg);\n+        public static MemoryAddress ppIncludedFile$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.ppIncludedFile$VH.get(seg);\n@@ -7516,2 +12153,2 @@\n-        public static  @C(\"CXIdxClientFile(*)(CXClientData,const CXIdxIncludedFileInfo*)\") MemoryAddress ppIncludedFile$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$ppIncludedFile$VH().get(seg.asSlice(index*sizeof()));\n+        public static void ppIncludedFile$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.ppIncludedFile$VH.set(seg, x);\n@@ -7519,2 +12156,2 @@\n-        public static void ppIncludedFile$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxClientFile(*)(CXClientData,const CXIdxIncludedFileInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$ppIncludedFile$VH().set(seg, x);\n+        public static MemoryAddress ppIncludedFile$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.ppIncludedFile$VH.get(seg.asSlice(index*sizeof()));\n@@ -7522,2 +12159,2 @@\n-        public static void ppIncludedFile$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxClientFile(*)(CXClientData,const CXIdxIncludedFileInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$ppIncludedFile$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void ppIncludedFile$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.ppIncludedFile$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7525,0 +12162,12 @@\n+        public interface importedASTFile {\n+\n+            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n+            static MemorySegment allocate(importedASTFile fi) {\n+                return RuntimeHelper.upcallStub(importedASTFile.class, fi, constants$53.importedASTFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+            }\n+            static MemorySegment allocate(importedASTFile fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n+        }\n+\n+        static final VarHandle importedASTFile$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"importedASTFile\")));\n@@ -7526,1 +12175,1 @@\n-            return Index_h$constants_1.IndexerCallbacks$importedASTFile$VH();\n+            return IndexerCallbacks.importedASTFile$VH;\n@@ -7528,2 +12177,2 @@\n-        public static  @C(\"CXIdxClientASTFile(*)(CXClientData,const CXIdxImportedASTFileInfo*)\") MemoryAddress importedASTFile$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$importedASTFile$VH().get(seg);\n+        public static MemoryAddress importedASTFile$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.importedASTFile$VH.get(seg);\n@@ -7531,2 +12180,2 @@\n-        public static  @C(\"CXIdxClientASTFile(*)(CXClientData,const CXIdxImportedASTFileInfo*)\") MemoryAddress importedASTFile$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$importedASTFile$VH().get(seg.asSlice(index*sizeof()));\n+        public static void importedASTFile$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.importedASTFile$VH.set(seg, x);\n@@ -7534,2 +12183,2 @@\n-        public static void importedASTFile$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxClientASTFile(*)(CXClientData,const CXIdxImportedASTFileInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$importedASTFile$VH().set(seg, x);\n+        public static MemoryAddress importedASTFile$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.importedASTFile$VH.get(seg.asSlice(index*sizeof()));\n@@ -7537,2 +12186,2 @@\n-        public static void importedASTFile$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxClientASTFile(*)(CXClientData,const CXIdxImportedASTFileInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$importedASTFile$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void importedASTFile$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.importedASTFile$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7540,0 +12189,12 @@\n+        public interface startedTranslationUnit {\n+\n+            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n+            static MemorySegment allocate(startedTranslationUnit fi) {\n+                return RuntimeHelper.upcallStub(startedTranslationUnit.class, fi, constants$53.startedTranslationUnit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+            }\n+            static MemorySegment allocate(startedTranslationUnit fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n+        }\n+\n+        static final VarHandle startedTranslationUnit$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"startedTranslationUnit\")));\n@@ -7541,1 +12202,1 @@\n-            return Index_h$constants_1.IndexerCallbacks$startedTranslationUnit$VH();\n+            return IndexerCallbacks.startedTranslationUnit$VH;\n@@ -7543,2 +12204,2 @@\n-        public static  @C(\"CXIdxClientContainer(*)(CXClientData,void*)\") MemoryAddress startedTranslationUnit$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$startedTranslationUnit$VH().get(seg);\n+        public static MemoryAddress startedTranslationUnit$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.startedTranslationUnit$VH.get(seg);\n@@ -7546,2 +12207,2 @@\n-        public static  @C(\"CXIdxClientContainer(*)(CXClientData,void*)\") MemoryAddress startedTranslationUnit$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$startedTranslationUnit$VH().get(seg.asSlice(index*sizeof()));\n+        public static void startedTranslationUnit$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.startedTranslationUnit$VH.set(seg, x);\n@@ -7549,2 +12210,2 @@\n-        public static void startedTranslationUnit$set(@C(\"struct \") MemorySegment seg, @C(\"CXIdxClientContainer(*)(CXClientData,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$startedTranslationUnit$VH().set(seg, x);\n+        public static MemoryAddress startedTranslationUnit$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.startedTranslationUnit$VH.get(seg.asSlice(index*sizeof()));\n@@ -7552,2 +12213,12 @@\n-        public static void startedTranslationUnit$set(@C(\"struct \") MemorySegment seg, long index, @C(\"CXIdxClientContainer(*)(CXClientData,void*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$startedTranslationUnit$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void startedTranslationUnit$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.startedTranslationUnit$VH.set(seg.asSlice(index*sizeof()), x);\n+        }\n+        public interface indexDeclaration {\n+\n+            void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n+            static MemorySegment allocate(indexDeclaration fi) {\n+                return RuntimeHelper.upcallStub(indexDeclaration.class, fi, constants$53.indexDeclaration$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+            }\n+            static MemorySegment allocate(indexDeclaration fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n@@ -7555,0 +12226,2 @@\n+\n+        static final VarHandle indexDeclaration$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"indexDeclaration\")));\n@@ -7556,1 +12229,4 @@\n-            return Index_h$constants_1.IndexerCallbacks$indexDeclaration$VH();\n+            return IndexerCallbacks.indexDeclaration$VH;\n+        }\n+        public static MemoryAddress indexDeclaration$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexDeclaration$VH.get(seg);\n@@ -7558,2 +12234,2 @@\n-        public static  @C(\"void(*)(CXClientData,const CXIdxDeclInfo*)\") MemoryAddress indexDeclaration$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$indexDeclaration$VH().get(seg);\n+        public static void indexDeclaration$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.indexDeclaration$VH.set(seg, x);\n@@ -7561,2 +12237,2 @@\n-        public static  @C(\"void(*)(CXClientData,const CXIdxDeclInfo*)\") MemoryAddress indexDeclaration$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$indexDeclaration$VH().get(seg.asSlice(index*sizeof()));\n+        public static MemoryAddress indexDeclaration$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexDeclaration$VH.get(seg.asSlice(index*sizeof()));\n@@ -7564,2 +12240,2 @@\n-        public static void indexDeclaration$set(@C(\"struct \") MemorySegment seg, @C(\"void(*)(CXClientData,const CXIdxDeclInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$indexDeclaration$VH().set(seg, x);\n+        public static void indexDeclaration$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.indexDeclaration$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7567,2 +12243,9 @@\n-        public static void indexDeclaration$set(@C(\"struct \") MemorySegment seg, long index, @C(\"void(*)(CXClientData,const CXIdxDeclInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$indexDeclaration$VH().set(seg.asSlice(index*sizeof()), x);\n+        public interface indexEntityReference {\n+\n+            void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n+            static MemorySegment allocate(indexEntityReference fi) {\n+                return RuntimeHelper.upcallStub(indexEntityReference.class, fi, constants$53.indexEntityReference$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+            }\n+            static MemorySegment allocate(indexEntityReference fi, NativeScope scope) {\n+                return allocate(fi).handoff(scope);\n+            }\n@@ -7570,0 +12253,2 @@\n+\n+        static final VarHandle indexEntityReference$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"indexEntityReference\")));\n@@ -7571,1 +12256,1 @@\n-            return Index_h$constants_1.IndexerCallbacks$indexEntityReference$VH();\n+            return IndexerCallbacks.indexEntityReference$VH;\n@@ -7573,2 +12258,2 @@\n-        public static  @C(\"void(*)(CXClientData,const CXIdxEntityRefInfo*)\") MemoryAddress indexEntityReference$get(@C(\"struct \") MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$indexEntityReference$VH().get(seg);\n+        public static MemoryAddress indexEntityReference$get(MemorySegment seg) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexEntityReference$VH.get(seg);\n@@ -7576,2 +12261,2 @@\n-        public static  @C(\"void(*)(CXClientData,const CXIdxEntityRefInfo*)\") MemoryAddress indexEntityReference$get(@C(\"struct \") MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.IndexerCallbacks$indexEntityReference$VH().get(seg.asSlice(index*sizeof()));\n+        public static void indexEntityReference$set( MemorySegment seg, MemoryAddress x) {\n+            IndexerCallbacks.indexEntityReference$VH.set(seg, x);\n@@ -7579,2 +12264,2 @@\n-        public static void indexEntityReference$set(@C(\"struct \") MemorySegment seg, @C(\"void(*)(CXClientData,const CXIdxEntityRefInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$indexEntityReference$VH().set(seg, x);\n+        public static MemoryAddress indexEntityReference$get(MemorySegment seg, long index) {\n+            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexEntityReference$VH.get(seg.asSlice(index*sizeof()));\n@@ -7582,2 +12267,2 @@\n-        public static void indexEntityReference$set(@C(\"struct \") MemorySegment seg, long index, @C(\"void(*)(CXClientData,const CXIdxEntityRefInfo*)\") MemoryAddress x) {\n-            Index_h$constants_1.IndexerCallbacks$indexEntityReference$VH().set(seg.asSlice(index*sizeof()), x);\n+        public static void indexEntityReference$set(MemorySegment seg, long index, MemoryAddress x) {\n+            IndexerCallbacks.indexEntityReference$VH.set(seg.asSlice(index*sizeof()), x);\n@@ -7586,3 +12271,3 @@\n-        public static @C(\"struct \") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n-        public static @C(\"struct \") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static @C(\"struct []\") MemorySegment allocateArray(int len) {\n+        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }\n+        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n+        public static MemorySegment allocateArray(int len) {\n@@ -7590,1 +12275,1 @@\n-        }        public static @C(\"struct []\") MemorySegment allocateArray(int len, NativeScope scope) {\n+        }        public static MemorySegment allocateArray(int len, NativeScope scope) {\n@@ -7593,1 +12278,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer() {\n+        public static MemorySegment allocatePointer() {\n@@ -7596,1 +12281,1 @@\n-        public static @C(\"struct *\") MemorySegment allocatePointer(NativeScope scope) {\n+        public static MemorySegment allocatePointer(NativeScope scope) {\n@@ -7599,1 +12284,1 @@\n-        public static @C(\"struct \") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }\n@@ -7602,219 +12287,2 @@\n-    public static  MethodHandle clang_index_isEntityObjCContainerKind$MH() {\n-        return Index_h$constants_1.clang_index_isEntityObjCContainerKind$MH();\n-    }\n-    public static @C(\"int\") int clang_index_isEntityObjCContainerKind (@C(\"CXIdxEntityKind\") int x0) {\n-        try {\n-            return (int)Index_h$constants_1.clang_index_isEntityObjCContainerKind$MH().invokeExact(x0);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getObjCContainerDeclInfo$MH() {\n-        return Index_h$constants_1.clang_index_getObjCContainerDeclInfo$MH();\n-    }\n-    public static @C(\"const CXIdxObjCContainerDeclInfo*\") MemoryAddress clang_index_getObjCContainerDeclInfo (@C(\"const CXIdxDeclInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getObjCContainerDeclInfo$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() {\n-        return Index_h$constants_1.clang_index_getObjCInterfaceDeclInfo$MH();\n-    }\n-    public static @C(\"const CXIdxObjCInterfaceDeclInfo*\") MemoryAddress clang_index_getObjCInterfaceDeclInfo (@C(\"const CXIdxDeclInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getObjCInterfaceDeclInfo$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getObjCCategoryDeclInfo$MH() {\n-        return Index_h$constants_1.clang_index_getObjCCategoryDeclInfo$MH();\n-    }\n-    public static @C(\"const CXIdxObjCCategoryDeclInfo*\") MemoryAddress clang_index_getObjCCategoryDeclInfo (@C(\"const CXIdxDeclInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getObjCCategoryDeclInfo$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getObjCProtocolRefListInfo$MH() {\n-        return Index_h$constants_1.clang_index_getObjCProtocolRefListInfo$MH();\n-    }\n-    public static @C(\"const CXIdxObjCProtocolRefListInfo*\") MemoryAddress clang_index_getObjCProtocolRefListInfo (@C(\"const CXIdxDeclInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getObjCProtocolRefListInfo$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getObjCPropertyDeclInfo$MH() {\n-        return Index_h$constants_1.clang_index_getObjCPropertyDeclInfo$MH();\n-    }\n-    public static @C(\"const CXIdxObjCPropertyDeclInfo*\") MemoryAddress clang_index_getObjCPropertyDeclInfo (@C(\"const CXIdxDeclInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getObjCPropertyDeclInfo$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() {\n-        return Index_h$constants_1.clang_index_getIBOutletCollectionAttrInfo$MH();\n-    }\n-    public static @C(\"const CXIdxIBOutletCollectionAttrInfo*\") MemoryAddress clang_index_getIBOutletCollectionAttrInfo (@C(\"const CXIdxAttrInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getIBOutletCollectionAttrInfo$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getCXXClassDeclInfo$MH() {\n-        return Index_h$constants_1.clang_index_getCXXClassDeclInfo$MH();\n-    }\n-    public static @C(\"const CXIdxCXXClassDeclInfo*\") MemoryAddress clang_index_getCXXClassDeclInfo (@C(\"const CXIdxDeclInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getCXXClassDeclInfo$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getClientContainer$MH() {\n-        return Index_h$constants_1.clang_index_getClientContainer$MH();\n-    }\n-    public static @C(\"CXIdxClientContainer\") MemoryAddress clang_index_getClientContainer (@C(\"const CXIdxContainerInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getClientContainer$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_setClientContainer$MH() {\n-        return Index_h$constants_1.clang_index_setClientContainer$MH();\n-    }\n-    public static void clang_index_setClientContainer (@C(\"const CXIdxContainerInfo*\") Addressable x0, @C(\"CXIdxClientContainer\") Addressable x1) {\n-        try {\n-            Index_h$constants_1.clang_index_setClientContainer$MH().invokeExact(x0.address(), x1.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_getClientEntity$MH() {\n-        return Index_h$constants_1.clang_index_getClientEntity$MH();\n-    }\n-    public static @C(\"CXIdxClientEntity\") MemoryAddress clang_index_getClientEntity (@C(\"const CXIdxEntityInfo*\") Addressable x0) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_index_getClientEntity$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_index_setClientEntity$MH() {\n-        return Index_h$constants_1.clang_index_setClientEntity$MH();\n-    }\n-    public static void clang_index_setClientEntity (@C(\"const CXIdxEntityInfo*\") Addressable x0, @C(\"CXIdxClientEntity\") Addressable x1) {\n-        try {\n-            Index_h$constants_1.clang_index_setClientEntity$MH().invokeExact(x0.address(), x1.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_IndexAction_create$MH() {\n-        return Index_h$constants_1.clang_IndexAction_create$MH();\n-    }\n-    public static @C(\"CXIndexAction\") MemoryAddress clang_IndexAction_create (@C(\"CXIndex\") Addressable CIdx) {\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)Index_h$constants_1.clang_IndexAction_create$MH().invokeExact(CIdx.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_IndexAction_dispose$MH() {\n-        return Index_h$constants_1.clang_IndexAction_dispose$MH();\n-    }\n-    public static void clang_IndexAction_dispose (@C(\"CXIndexAction\") Addressable x0) {\n-        try {\n-            Index_h$constants_1.clang_IndexAction_dispose$MH().invokeExact(x0.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static @C(\"int\") int CXIndexOpt_None() {\n-        return Index_h$constants_1.CXIndexOpt_None();\n-    }\n-    public static @C(\"int\") int CXIndexOpt_SuppressRedundantRefs() {\n-        return Index_h$constants_1.CXIndexOpt_SuppressRedundantRefs();\n-    }\n-    public static @C(\"int\") int CXIndexOpt_IndexFunctionLocalSymbols() {\n-        return Index_h$constants_1.CXIndexOpt_IndexFunctionLocalSymbols();\n-    }\n-    public static @C(\"int\") int CXIndexOpt_IndexImplicitTemplateInstantiations() {\n-        return Index_h$constants_1.CXIndexOpt_IndexImplicitTemplateInstantiations();\n-    }\n-    public static @C(\"int\") int CXIndexOpt_SuppressWarnings() {\n-        return Index_h$constants_1.CXIndexOpt_SuppressWarnings();\n-    }\n-    public static @C(\"int\") int CXIndexOpt_SkipParsedBodiesInSession() {\n-        return Index_h$constants_1.CXIndexOpt_SkipParsedBodiesInSession();\n-    }\n-    public static  MethodHandle clang_indexSourceFile$MH() {\n-        return Index_h$constants_1.clang_indexSourceFile$MH();\n-    }\n-    public static @C(\"int\") int clang_indexSourceFile (@C(\"CXIndexAction\") Addressable x0, @C(\"CXClientData\") Addressable client_data, @C(\"IndexerCallbacks*\") Addressable index_callbacks, @C(\"unsigned int\") int index_callbacks_size, @C(\"unsigned int\") int index_options, @C(\"char*\") Addressable source_filename, @C(\"char**\") Addressable command_line_args, @C(\"int\") int num_command_line_args, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files, @C(\"unsigned int\") int num_unsaved_files, @C(\"CXTranslationUnit*\") Addressable out_TU, @C(\"unsigned int\") int TU_options) {\n-        try {\n-            return (int)Index_h$constants_1.clang_indexSourceFile$MH().invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_indexSourceFileFullArgv$MH() {\n-        return Index_h$constants_1.clang_indexSourceFileFullArgv$MH();\n-    }\n-    public static @C(\"int\") int clang_indexSourceFileFullArgv (@C(\"CXIndexAction\") Addressable x0, @C(\"CXClientData\") Addressable client_data, @C(\"IndexerCallbacks*\") Addressable index_callbacks, @C(\"unsigned int\") int index_callbacks_size, @C(\"unsigned int\") int index_options, @C(\"char*\") Addressable source_filename, @C(\"char**\") Addressable command_line_args, @C(\"int\") int num_command_line_args, @C(\"struct CXUnsavedFile*\") Addressable unsaved_files, @C(\"unsigned int\") int num_unsaved_files, @C(\"CXTranslationUnit*\") Addressable out_TU, @C(\"unsigned int\") int TU_options) {\n-        try {\n-            return (int)Index_h$constants_1.clang_indexSourceFileFullArgv$MH().invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_indexTranslationUnit$MH() {\n-        return Index_h$constants_1.clang_indexTranslationUnit$MH();\n-    }\n-    public static @C(\"int\") int clang_indexTranslationUnit (@C(\"CXIndexAction\") Addressable x0, @C(\"CXClientData\") Addressable client_data, @C(\"IndexerCallbacks*\") Addressable index_callbacks, @C(\"unsigned int\") int index_callbacks_size, @C(\"unsigned int\") int index_options, @C(\"CXTranslationUnit\") Addressable x5) {\n-        try {\n-            return (int)Index_h$constants_1.clang_indexTranslationUnit$MH().invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, x5.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_indexLoc_getFileLocation$MH() {\n-        return Index_h$constants_1.clang_indexLoc_getFileLocation$MH();\n-    }\n-    public static void clang_indexLoc_getFileLocation (@C(\"CXIdxLoc\") MemorySegment loc, @C(\"CXIdxClientFile*\") Addressable indexFile, @C(\"CXFile*\") Addressable file, @C(\"unsigned int*\") Addressable line, @C(\"unsigned int*\") Addressable column, @C(\"unsigned int*\") Addressable offset) {\n-        try {\n-            Index_h$constants_1.clang_indexLoc_getFileLocation$MH().invokeExact(loc, indexFile.address(), file.address(), line.address(), column.address(), offset.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_indexLoc_getCXSourceLocation$MH() {\n-        return Index_h$constants_1.clang_indexLoc_getCXSourceLocation$MH();\n-    }\n-    public static @C(\"CXSourceLocation\") MemorySegment clang_indexLoc_getCXSourceLocation (@C(\"CXIdxLoc\") MemorySegment loc) {\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)Index_h$constants_1.clang_indexLoc_getCXSourceLocation$MH().invokeExact(loc);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public static  MethodHandle clang_Type_visitFields$MH() {\n-        return Index_h$constants_1.clang_Type_visitFields$MH();\n-    }\n-    public static @C(\"unsigned int\") int clang_Type_visitFields (@C(\"CXType\") MemorySegment T, @C(\"CXFieldVisitor\") Addressable visitor, @C(\"CXClientData\") Addressable client_data) {\n-        try {\n-            return (int)Index_h$constants_1.clang_Type_visitFields$MH().invokeExact(T, visitor.address(), client_data.address());\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-    public interface clang_Type_visitFields$visitor {\n+    public interface CXFieldVisitor {\n+\n@@ -7822,2 +12290,2 @@\n-        public static  @C(\"CXFieldVisitor\") MemorySegment allocate(clang_Type_visitFields$visitor fi) {\n-            return RuntimeHelper.upcallStub(clang_Type_visitFields$visitor.class, fi, Index_h$constants_1.clang_Type_visitFields$visitor$FUNC(), \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+        static MemorySegment allocate(CXFieldVisitor fi) {\n+            return RuntimeHelper.upcallStub(CXFieldVisitor.class, fi, constants$53.CXFieldVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n@@ -7825,1 +12293,1 @@\n-        public static  @C(\"CXFieldVisitor\") MemorySegment allocate(clang_Type_visitFields$visitor fi, NativeScope scope) {\n+        static MemorySegment allocate(CXFieldVisitor fi, NativeScope scope) {\n@@ -7829,5 +12297,27 @@\n-    public static @C(\"int\") int CINDEX_VERSION() {\n-        return Index_h$constants_1.CINDEX_VERSION();\n-    }\n-    public static @C(\"char*\") MemorySegment CINDEX_VERSION_STRING() {\n-        return Index_h$constants_1.CINDEX_VERSION_STRING();\n+\n+    public static class constants$53 {\n+\n+        static final FunctionDescriptor importedASTFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor startedTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor indexDeclaration$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor indexEntityReference$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final FunctionDescriptor CXFieldVisitor$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.ofSequence(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER\n+        );\n@@ -7835,0 +12325,1 @@\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":9213,"deletions":4722,"binary":false,"changes":13935,"status":"modified"},{"patch":"@@ -0,0 +1,589 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+ class Index_h_1 {\n+\n+    public static int CXIdxEntity_TemplateSpecialization() {\n+        return (int)3L;\n+    }\n+    public static int CXIdxAttr_Unexposed() {\n+        return (int)0L;\n+    }\n+    public static int CXIdxAttr_IBAction() {\n+        return (int)1L;\n+    }\n+    public static int CXIdxAttr_IBOutlet() {\n+        return (int)2L;\n+    }\n+    public static int CXIdxAttr_IBOutletCollection() {\n+        return (int)3L;\n+    }\n+    public static int CXIdxDeclFlag_Skipped() {\n+        return (int)1L;\n+    }\n+    public static int CXIdxObjCContainer_ForwardRef() {\n+        return (int)0L;\n+    }\n+    public static int CXIdxObjCContainer_Interface() {\n+        return (int)1L;\n+    }\n+    public static int CXIdxObjCContainer_Implementation() {\n+        return (int)2L;\n+    }\n+    public static int CXIdxEntityRef_Direct() {\n+        return (int)1L;\n+    }\n+    public static int CXIdxEntityRef_Implicit() {\n+        return (int)2L;\n+    }\n+    public static int CXSymbolRole_None() {\n+        return (int)0L;\n+    }\n+    public static int CXSymbolRole_Declaration() {\n+        return (int)1L;\n+    }\n+    public static int CXSymbolRole_Definition() {\n+        return (int)2L;\n+    }\n+    public static int CXSymbolRole_Reference() {\n+        return (int)4L;\n+    }\n+    public static int CXSymbolRole_Read() {\n+        return (int)8L;\n+    }\n+    public static int CXSymbolRole_Write() {\n+        return (int)16L;\n+    }\n+    public static int CXSymbolRole_Call() {\n+        return (int)32L;\n+    }\n+    public static int CXSymbolRole_Dynamic() {\n+        return (int)64L;\n+    }\n+    public static int CXSymbolRole_AddressOf() {\n+        return (int)128L;\n+    }\n+    public static int CXSymbolRole_Implicit() {\n+        return (int)256L;\n+    }\n+    public static MethodHandle clang_index_isEntityObjCContainerKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_index_isEntityObjCContainerKind$MH,\"clang_index_isEntityObjCContainerKind\");\n+    }\n+    public static int clang_index_isEntityObjCContainerKind ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_isEntityObjCContainerKind$MH, \"clang_index_isEntityObjCContainerKind\");\n+        try {\n+            return (int)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getObjCContainerDeclInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCContainerDeclInfo$MH,\"clang_index_getObjCContainerDeclInfo\");\n+    }\n+    public static MemoryAddress clang_index_getObjCContainerDeclInfo ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCContainerDeclInfo$MH, \"clang_index_getObjCContainerDeclInfo\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCInterfaceDeclInfo$MH,\"clang_index_getObjCInterfaceDeclInfo\");\n+    }\n+    public static MemoryAddress clang_index_getObjCInterfaceDeclInfo ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCInterfaceDeclInfo$MH, \"clang_index_getObjCInterfaceDeclInfo\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getObjCCategoryDeclInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCCategoryDeclInfo$MH,\"clang_index_getObjCCategoryDeclInfo\");\n+    }\n+    public static MemoryAddress clang_index_getObjCCategoryDeclInfo ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCCategoryDeclInfo$MH, \"clang_index_getObjCCategoryDeclInfo\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getObjCProtocolRefListInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCProtocolRefListInfo$MH,\"clang_index_getObjCProtocolRefListInfo\");\n+    }\n+    public static MemoryAddress clang_index_getObjCProtocolRefListInfo ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCProtocolRefListInfo$MH, \"clang_index_getObjCProtocolRefListInfo\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getObjCPropertyDeclInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCPropertyDeclInfo$MH,\"clang_index_getObjCPropertyDeclInfo\");\n+    }\n+    public static MemoryAddress clang_index_getObjCPropertyDeclInfo ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCPropertyDeclInfo$MH, \"clang_index_getObjCPropertyDeclInfo\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static class constants$0 {\n+\n+        static final FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC = FunctionDescriptor.of(C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_index_isEntityObjCContainerKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_isEntityObjCContainerKind\",\n+            \"(I)I\",\n+            constants$0.clang_index_isEntityObjCContainerKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getObjCContainerDeclInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getObjCContainerDeclInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$0.clang_index_getObjCContainerDeclInfo$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getObjCInterfaceDeclInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getObjCInterfaceDeclInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$0.clang_index_getObjCInterfaceDeclInfo$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getObjCCategoryDeclInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getObjCCategoryDeclInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$0.clang_index_getObjCCategoryDeclInfo$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getObjCProtocolRefListInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getObjCProtocolRefListInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$0.clang_index_getObjCProtocolRefListInfo$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getObjCPropertyDeclInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getObjCPropertyDeclInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$0.clang_index_getObjCPropertyDeclInfo$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_index_getIBOutletCollectionAttrInfo$MH,\"clang_index_getIBOutletCollectionAttrInfo\");\n+    }\n+    public static MemoryAddress clang_index_getIBOutletCollectionAttrInfo ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getIBOutletCollectionAttrInfo$MH, \"clang_index_getIBOutletCollectionAttrInfo\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getCXXClassDeclInfo$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_index_getCXXClassDeclInfo$MH,\"clang_index_getCXXClassDeclInfo\");\n+    }\n+    public static MemoryAddress clang_index_getCXXClassDeclInfo ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getCXXClassDeclInfo$MH, \"clang_index_getCXXClassDeclInfo\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getClientContainer$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_index_getClientContainer$MH,\"clang_index_getClientContainer\");\n+    }\n+    public static MemoryAddress clang_index_getClientContainer ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getClientContainer$MH, \"clang_index_getClientContainer\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_setClientContainer$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_index_setClientContainer$MH,\"clang_index_setClientContainer\");\n+    }\n+    public static void clang_index_setClientContainer ( Addressable x0,  Addressable x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_setClientContainer$MH, \"clang_index_setClientContainer\");\n+        try {\n+            mh$.invokeExact(x0.address(), x1.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_getClientEntity$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_index_getClientEntity$MH,\"clang_index_getClientEntity\");\n+    }\n+    public static MemoryAddress clang_index_getClientEntity ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getClientEntity$MH, \"clang_index_getClientEntity\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_index_setClientEntity$MH() {\n+        return RuntimeHelper.requireNonNull(constants$1.clang_index_setClientEntity$MH,\"clang_index_setClientEntity\");\n+    }\n+    public static void clang_index_setClientEntity ( Addressable x0,  Addressable x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_setClientEntity$MH, \"clang_index_setClientEntity\");\n+        try {\n+            mh$.invokeExact(x0.address(), x1.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static class constants$1 {\n+\n+        static final FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getIBOutletCollectionAttrInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$1.clang_index_getIBOutletCollectionAttrInfo$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getCXXClassDeclInfo$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getCXXClassDeclInfo\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$1.clang_index_getCXXClassDeclInfo$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getClientContainer$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getClientContainer$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getClientContainer\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$1.clang_index_getClientContainer$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_setClientContainer$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_setClientContainer$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_setClientContainer\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$1.clang_index_setClientContainer$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_getClientEntity$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_getClientEntity$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_getClientEntity\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$1.clang_index_getClientEntity$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_index_setClientEntity$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_index_setClientEntity$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_index_setClientEntity\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$1.clang_index_setClientEntity$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_IndexAction_create$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_create$MH,\"clang_IndexAction_create\");\n+    }\n+    public static MemoryAddress clang_IndexAction_create ( Addressable CIdx) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_create$MH, \"clang_IndexAction_create\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_IndexAction_dispose$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_dispose$MH,\"clang_IndexAction_dispose\");\n+    }\n+    public static void clang_IndexAction_dispose ( Addressable x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_dispose$MH, \"clang_IndexAction_dispose\");\n+        try {\n+            mh$.invokeExact(x0.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static int CXIndexOpt_None() {\n+        return (int)0L;\n+    }\n+    public static int CXIndexOpt_SuppressRedundantRefs() {\n+        return (int)1L;\n+    }\n+    public static int CXIndexOpt_IndexFunctionLocalSymbols() {\n+        return (int)2L;\n+    }\n+    public static int CXIndexOpt_IndexImplicitTemplateInstantiations() {\n+        return (int)4L;\n+    }\n+    public static int CXIndexOpt_SuppressWarnings() {\n+        return (int)8L;\n+    }\n+    public static int CXIndexOpt_SkipParsedBodiesInSession() {\n+        return (int)16L;\n+    }\n+    public static MethodHandle clang_indexSourceFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFile$MH,\"clang_indexSourceFile\");\n+    }\n+    public static int clang_indexSourceFile ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  Addressable out_TU,  int TU_options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFile$MH, \"clang_indexSourceFile\");\n+        try {\n+            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_indexSourceFileFullArgv$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFileFullArgv$MH,\"clang_indexSourceFileFullArgv\");\n+    }\n+    public static int clang_indexSourceFileFullArgv ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  Addressable out_TU,  int TU_options) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFileFullArgv$MH, \"clang_indexSourceFileFullArgv\");\n+        try {\n+            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_indexTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_indexTranslationUnit$MH,\"clang_indexTranslationUnit\");\n+    }\n+    public static int clang_indexTranslationUnit ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable x5) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexTranslationUnit$MH, \"clang_indexTranslationUnit\");\n+        try {\n+            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, x5.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_indexLoc_getFileLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$2.clang_indexLoc_getFileLocation$MH,\"clang_indexLoc_getFileLocation\");\n+    }\n+    public static void clang_indexLoc_getFileLocation ( MemorySegment loc,  Addressable indexFile,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexLoc_getFileLocation$MH, \"clang_indexLoc_getFileLocation\");\n+        try {\n+            mh$.invokeExact(loc, indexFile.address(), file.address(), line.address(), column.address(), offset.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static class constants$2 {\n+\n+        static final FunctionDescriptor clang_IndexAction_create$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_IndexAction_create$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_IndexAction_create\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$2.clang_IndexAction_create$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_IndexAction_dispose$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_IndexAction_dispose$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_IndexAction_dispose\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$2.clang_IndexAction_dispose$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_indexSourceFile$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_indexSourceFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_indexSourceFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$2.clang_indexSourceFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_indexSourceFileFullArgv$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_indexSourceFileFullArgv$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_indexSourceFileFullArgv\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$2.clang_indexSourceFileFullArgv$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_indexTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_INT,\n+            C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_indexTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_indexTranslationUnit\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$2.clang_indexTranslationUnit$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_indexLoc_getFileLocation$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            ),\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_indexLoc_getFileLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_indexLoc_getFileLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$2.clang_indexLoc_getFileLocation$FUNC, false\n+        );\n+    }\n+\n+    public static MethodHandle clang_indexLoc_getCXSourceLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_indexLoc_getCXSourceLocation$MH,\"clang_indexLoc_getCXSourceLocation\");\n+    }\n+    public static MemorySegment clang_indexLoc_getCXSourceLocation ( MemorySegment loc) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_indexLoc_getCXSourceLocation$MH, \"clang_indexLoc_getCXSourceLocation\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(loc);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_Type_visitFields$MH() {\n+        return RuntimeHelper.requireNonNull(constants$3.clang_Type_visitFields$MH,\"clang_Type_visitFields\");\n+    }\n+    public static int clang_Type_visitFields ( MemorySegment T,  Addressable visitor,  Addressable client_data) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_Type_visitFields$MH, \"clang_Type_visitFields\");\n+        try {\n+            return (int)mh$.invokeExact(T, visitor.address(), client_data.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static int CINDEX_VERSION() {\n+        return (int)59L;\n+    }\n+    public static MemorySegment CINDEX_VERSION_STRING() {\n+        return constants$3.CINDEX_VERSION_STRING$SEGMENT;\n+    }\n+\n+    \/\/ Manual change to handle platform specific library name difference\n+    private static String libName() {\n+        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+            return \"libclang\";\n+        }\n+        return \"clang\";\n+    }\n+\n+    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {\n+        libName()\n+    });\n+\n+    public static class constants$3 {\n+\n+        static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC = FunctionDescriptor.of(MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.ofPaddingBits(32)\n+        ),\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"int_data\"),\n+                MemoryLayout.ofPaddingBits(32)\n+            )\n+        );\n+        static final MethodHandle clang_indexLoc_getCXSourceLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_indexLoc_getCXSourceLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$3.clang_indexLoc_getCXSourceLocation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Type_visitFields$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.ofStruct(\n+                C_INT.withName(\"kind\"),\n+                MemoryLayout.ofPaddingBits(32),\n+                MemoryLayout.ofSequence(2, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Type_visitFields$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Type_visitFields\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$3.clang_Type_visitFields$FUNC, false\n+        );\n+        static final MemorySegment CINDEX_VERSION_STRING$SEGMENT = CLinker.toCString(\"0.59\");\n+    }\n+\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h_1.java","additions":589,"deletions":0,"binary":false,"changes":589,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,7 @@\n+    static <T> T requireNonNull(T obj, String symbolName) {\n+        if (obj == null) {\n+            throw new UnsatisfiedLinkError(\"unresolved symbol: \" + symbolName);\n+        }\n+        return obj;\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}