{"files":[{"patch":"@@ -74,2 +74,4 @@\n-        return LibClang.CXStrToString(\n-                Index_h.clang_getCursorSpelling(cursor));\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(\n+                Index_h.clang_getCursorSpelling(scope, cursor));\n+        }\n@@ -79,2 +81,4 @@\n-        return LibClang.CXStrToString(\n-                Index_h.clang_getCursorUSR(cursor));\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(\n+                Index_h.clang_getCursorUSR(scope, cursor));\n+        }\n@@ -84,2 +88,4 @@\n-        return LibClang.CXStrToString(\n-                Index_h.clang_getCursorPrettyPrinted(cursor, policy.ptr()));\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(\n+                Index_h.clang_getCursorPrettyPrinted(scope, cursor, policy.ptr()));\n+        }\n@@ -95,2 +101,4 @@\n-        return LibClang.CXStrToString(\n-                Index_h.clang_getCursorDisplayName(cursor));\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(\n+                Index_h.clang_getCursorDisplayName(scope, cursor));\n+        }\n@@ -104,1 +112,1 @@\n-        return new Type(Index_h.clang_getCursorType(cursor));\n+        return new Type(Index_h.clang_getCursorType(ResourceScope.newImplicitScope(), cursor));\n@@ -108,1 +116,1 @@\n-        return new Type(Index_h.clang_getEnumDeclIntegerType(cursor));\n+        return new Type(Index_h.clang_getEnumDeclIntegerType(ResourceScope.newImplicitScope(), cursor));\n@@ -116,1 +124,1 @@\n-        return new Cursor(Index_h.clang_getCursorDefinition(cursor));\n+        return new Cursor(Index_h.clang_getCursorDefinition(ResourceScope.newImplicitScope(), cursor));\n@@ -120,3 +128,5 @@\n-        MemorySegment loc = Index_h.clang_getCursorLocation(cursor);\n-        if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation()) != 0) {\n-            return null;\n+        MemorySegment loc = Index_h.clang_getCursorLocation(ResourceScope.newImplicitScope(), cursor);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(scope)) != 0) {\n+                return null;\n+            }\n@@ -128,1 +138,1 @@\n-        MemorySegment range = Index_h.clang_getCursorExtent(cursor);\n+        MemorySegment range = Index_h.clang_getCursorExtent(ResourceScope.newImplicitScope(), cursor);\n@@ -140,1 +150,1 @@\n-        return new Cursor(Index_h.clang_Cursor_getArgument(cursor, idx));\n+        return new Cursor(Index_h.clang_Cursor_getArgument(ResourceScope.newImplicitScope(), cursor, idx));\n@@ -153,1 +163,1 @@\n-        return new Type(Index_h.clang_Cursor_getTemplateArgumentType(cursor, idx));\n+        return new Type(Index_h.clang_Cursor_getTemplateArgumentType(ResourceScope.newImplicitScope(), cursor, idx));\n@@ -320,1 +330,1 @@\n-        return new Cursor(Index_h.clang_getOverloadedDecl(cursor, index));\n+        return new Cursor(Index_h.clang_getOverloadedDecl(ResourceScope.newImplicitScope(), cursor, index));\n@@ -327,1 +337,1 @@\n-        return new Cursor(Index_h.clang_getCursorReferenced(cursor));\n+        return new Cursor(Index_h.clang_getCursorReferenced(ResourceScope.newImplicitScope(), cursor));\n@@ -336,1 +346,1 @@\n-        return new Cursor(Index_h.clang_getSpecializedCursorTemplate(cursor));\n+        return new Cursor(Index_h.clang_getSpecializedCursorTemplate(ResourceScope.newImplicitScope(), cursor));\n@@ -368,2 +378,4 @@\n-        return LibClang.CXStrToString(\n-                Index_h.clang_Cursor_getMangling(cursor));\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(\n+                Index_h.clang_Cursor_getMangling(scope, cursor));\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Cursor.java","additions":34,"deletions":22,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -75,1 +76,1 @@\n-        return new SourceLocation(Index_h.clang_getDiagnosticLocation(ptr));\n+        return new SourceLocation(Index_h.clang_getDiagnosticLocation(ResourceScope.newImplicitScope(), ptr));\n@@ -79,2 +80,4 @@\n-        return LibClang.CXStrToString(\n-                Index_h.clang_getDiagnosticSpelling(ptr));\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+           return LibClang.CXStrToString(\n+                Index_h.clang_getDiagnosticSpelling(scope, ptr));\n+        }\n@@ -89,2 +92,3 @@\n-        return LibClang.CXStrToString(\n-                Index_h.clang_formatDiagnostic(ptr,\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(\n+                Index_h.clang_formatDiagnostic(scope, ptr,\n@@ -92,0 +96,1 @@\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Diagnostic.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -80,1 +80,3 @@\n-        return CXStrToString(Index_h.clang_getClangVersion());\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return CXStrToString(Index_h.clang_getClangVersion(scope));\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/LibClang.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,5 +64,1 @@\n-\n-\n-            String str = fname == MemoryAddress.NULL ?\n-                    null :\n-                    LibClang.CXStrToString(Index_h.clang_getFileName(fname));\n+            String str = fname == MemoryAddress.NULL ?  null : getFileName(fname);\n@@ -75,0 +71,6 @@\n+    private static String getFileName(MemoryAddress fname) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(Index_h.clang_getFileName(scope, fname));\n+        }\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceLocation.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -39,1 +40,1 @@\n-        MemorySegment loc = Index_h.clang_getRangeStart(range);\n+        MemorySegment loc = Index_h.clang_getRangeStart(ResourceScope.newImplicitScope(), range);\n@@ -44,1 +45,1 @@\n-        MemorySegment loc = Index_h.clang_getRangeEnd(range);\n+        MemorySegment loc = Index_h.clang_getRangeEnd(ResourceScope.newImplicitScope(), range);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/SourceRange.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        return new Cursor(Index_h.clang_getTranslationUnitCursor(tu));\n+        return new Cursor(Index_h.clang_getTranslationUnitCursor(ResourceScope.newImplicitScope(), tu));\n@@ -177,6 +177,8 @@\n-                MemorySegment s = Index_h.clang_getTokenSpelling(tu, getTokenSegment(i));\n-                sb.append(\"Token[\");\n-                sb.append(i);\n-                sb.append(\"]=\");\n-                sb.append(LibClang.CXStrToString(s));\n-                sb.append(\"\\n\");\n+                try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                    MemorySegment s = Index_h.clang_getTokenSpelling(scope, tu, getTokenSegment(i));\n+                    sb.append(\"Token[\");\n+                    sb.append(i);\n+                    sb.append(\"]=\");\n+                    sb.append(LibClang.CXStrToString(s));\n+                    sb.append(\"\\n\");\n+                }\n@@ -200,3 +202,5 @@\n-            MemorySegment s = Index_h.clang_getTokenSpelling(\n-                    tu, token);\n-            return LibClang.CXStrToString(s);\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                MemorySegment s = Index_h.clang_getTokenSpelling(\n+                    scope, tu, token);\n+                return LibClang.CXStrToString(s);\n+            }\n@@ -206,2 +210,4 @@\n-            return new SourceLocation(Index_h.clang_getTokenLocation(\n-                    tu, token));\n+            try (ResourceScope scope = ResourceScope.newImplicitScope()) {\n+                return new SourceLocation(Index_h.clang_getTokenLocation(\n+                    scope, tu, token));\n+            }\n@@ -211,1 +217,2 @@\n-            return new SourceRange(Index_h.clang_getTokenExtent(\n+            try (ResourceScope scope = ResourceScope.newImplicitScope()) {\n+                return new SourceRange(Index_h.clang_getTokenExtent(scope,\n@@ -213,0 +220,1 @@\n+            }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        return new Type(Index_h.clang_getResultType(type));\n+        return new Type(Index_h.clang_getResultType(ResourceScope.newImplicitScope(), type));\n@@ -57,1 +57,1 @@\n-        return new Type(Index_h.clang_getArgType(type, idx));\n+        return new Type(Index_h.clang_getArgType(ResourceScope.newImplicitScope(), type, idx));\n@@ -100,1 +100,1 @@\n-        return new Type(Index_h.clang_getPointeeType(type));\n+        return new Type(Index_h.clang_getPointeeType(ResourceScope.newImplicitScope(), type));\n@@ -105,1 +105,1 @@\n-        return new Type(Index_h.clang_getElementType(type));\n+        return new Type(Index_h.clang_getElementType(ResourceScope.newImplicitScope(), type));\n@@ -138,1 +138,1 @@\n-        return new Type(Index_h.clang_getCanonicalType(type));\n+        return new Type(Index_h.clang_getCanonicalType(ResourceScope.newImplicitScope(), type));\n@@ -184,1 +184,1 @@\n-        return new Type(Index_h.clang_Type_getTemplateArgumentAsType(type, idx));\n+        return new Type(Index_h.clang_Type_getTemplateArgumentAsType(ResourceScope.newImplicitScope(), type, idx));\n@@ -188,1 +188,3 @@\n-        return LibClang.CXStrToString(Index_h.clang_getTypeSpelling(type));\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return LibClang.CXStrToString(Index_h.clang_getTypeSpelling(scope, type));\n+        }\n@@ -215,1 +217,1 @@\n-        return new Cursor(Index_h.clang_getTypeDeclaration(type));\n+        return new Cursor(Index_h.clang_getTypeDeclaration(ResourceScope.newImplicitScope(), type));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Type.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -103,3 +103,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -107,2 +108,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -110,1 +111,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -156,3 +157,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -160,2 +162,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -163,1 +165,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -258,3 +260,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -262,2 +265,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -265,1 +268,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -339,3 +342,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -343,2 +347,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -346,1 +350,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -511,1 +515,1 @@\n-    public static MemorySegment clang_getFileName ( Addressable SFile) {\n+    public static MemorySegment clang_getFileName ( SegmentAllocator allocator,  Addressable SFile) {\n@@ -514,1 +518,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(SFile.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, SFile.address());\n@@ -519,0 +523,3 @@\n+    public static MemorySegment clang_getFileName ( ResourceScope scope,  Addressable SFile) {\n+        return clang_getFileName(SegmentAllocator.ofScope(scope), SFile.address());\n+    }\n@@ -539,1 +546,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 24));\n+            return seg.asSlice(0, 24);\n@@ -542,3 +549,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -546,2 +554,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -549,1 +557,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -669,1 +677,1 @@\n-    public static MemorySegment clang_File_tryGetRealPathName ( Addressable file) {\n+    public static MemorySegment clang_File_tryGetRealPathName ( SegmentAllocator allocator,  Addressable file) {\n@@ -672,1 +680,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(file.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, file.address());\n@@ -677,0 +685,3 @@\n+    public static MemorySegment clang_File_tryGetRealPathName ( ResourceScope scope,  Addressable file) {\n+        return clang_File_tryGetRealPathName(SegmentAllocator.ofScope(scope), file.address());\n+    }\n@@ -688,1 +699,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));\n+            return seg.asSlice(0, 16);\n@@ -707,3 +718,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -711,2 +723,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -714,1 +726,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -728,1 +740,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));\n+            return seg.asSlice(0, 16);\n@@ -763,3 +775,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -767,2 +780,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -770,1 +783,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -776,1 +789,1 @@\n-    public static MemorySegment clang_getNullLocation () {\n+    public static MemorySegment clang_getNullLocation ( SegmentAllocator allocator) {\n@@ -779,1 +792,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -784,0 +797,3 @@\n+    public static MemorySegment clang_getNullLocation ( ResourceScope scope) {\n+        return clang_getNullLocation(SegmentAllocator.ofScope(scope));\n+    }\n@@ -869,1 +885,1 @@\n-    public static MemorySegment clang_getLocation ( Addressable tu,  Addressable file,  int line,  int column) {\n+    public static MemorySegment clang_getLocation ( SegmentAllocator allocator,  Addressable tu,  Addressable file,  int line,  int column) {\n@@ -872,1 +888,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(tu.address(), file.address(), line, column);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, tu.address(), file.address(), line, column);\n@@ -877,0 +893,3 @@\n+    public static MemorySegment clang_getLocation ( ResourceScope scope,  Addressable tu,  Addressable file,  int line,  int column) {\n+        return clang_getLocation(SegmentAllocator.ofScope(scope), tu.address(), file.address(), line, column);\n+    }\n@@ -880,1 +899,1 @@\n-    public static MemorySegment clang_getLocationForOffset ( Addressable tu,  Addressable file,  int offset) {\n+    public static MemorySegment clang_getLocationForOffset ( SegmentAllocator allocator,  Addressable tu,  Addressable file,  int offset) {\n@@ -883,1 +902,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(tu.address(), file.address(), offset);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, tu.address(), file.address(), offset);\n@@ -888,0 +907,3 @@\n+    public static MemorySegment clang_getLocationForOffset ( ResourceScope scope,  Addressable tu,  Addressable file,  int offset) {\n+        return clang_getLocationForOffset(SegmentAllocator.ofScope(scope), tu.address(), file.address(), offset);\n+    }\n@@ -913,1 +935,1 @@\n-    public static MemorySegment clang_getNullRange () {\n+    public static MemorySegment clang_getNullRange ( SegmentAllocator allocator) {\n@@ -916,1 +938,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -921,0 +943,3 @@\n+    public static MemorySegment clang_getNullRange ( ResourceScope scope) {\n+        return clang_getNullRange(SegmentAllocator.ofScope(scope));\n+    }\n@@ -924,1 +949,1 @@\n-    public static MemorySegment clang_getRange ( MemorySegment begin,  MemorySegment end) {\n+    public static MemorySegment clang_getRange ( SegmentAllocator allocator,  MemorySegment begin,  MemorySegment end) {\n@@ -927,1 +952,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(begin, end);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, begin, end);\n@@ -932,0 +957,3 @@\n+    public static MemorySegment clang_getRange ( ResourceScope scope,  MemorySegment begin,  MemorySegment end) {\n+        return clang_getRange(SegmentAllocator.ofScope(scope), begin, end);\n+    }\n@@ -1196,1 +1224,1 @@\n-    public static MemorySegment clang_getRangeStart ( MemorySegment range) {\n+    public static MemorySegment clang_getRangeStart ( SegmentAllocator allocator,  MemorySegment range) {\n@@ -1199,1 +1227,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(range);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n@@ -1204,0 +1232,3 @@\n+    public static MemorySegment clang_getRangeStart ( ResourceScope scope,  MemorySegment range) {\n+        return clang_getRangeStart(SegmentAllocator.ofScope(scope), range);\n+    }\n@@ -1207,1 +1238,1 @@\n-    public static MemorySegment clang_getRangeEnd ( MemorySegment range) {\n+    public static MemorySegment clang_getRangeEnd ( SegmentAllocator allocator,  MemorySegment range) {\n@@ -1210,1 +1241,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(range);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n@@ -1215,0 +1246,3 @@\n+    public static MemorySegment clang_getRangeEnd ( ResourceScope scope,  MemorySegment range) {\n+        return clang_getRangeEnd(SegmentAllocator.ofScope(scope), range);\n+    }\n@@ -1258,3 +1292,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -1262,2 +1297,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -1265,1 +1300,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -1580,1 +1615,1 @@\n-    public static MemorySegment clang_formatDiagnostic ( Addressable Diagnostic,  int Options) {\n+    public static MemorySegment clang_formatDiagnostic ( SegmentAllocator allocator,  Addressable Diagnostic,  int Options) {\n@@ -1583,1 +1618,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diagnostic.address(), Options);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic.address(), Options);\n@@ -1588,0 +1623,3 @@\n+    public static MemorySegment clang_formatDiagnostic ( ResourceScope scope,  Addressable Diagnostic,  int Options) {\n+        return clang_formatDiagnostic(SegmentAllocator.ofScope(scope), Diagnostic.address(), Options);\n+    }\n@@ -1669,1 +1707,1 @@\n-    public static MemorySegment clang_getDiagnosticLocation ( Addressable x0) {\n+    public static MemorySegment clang_getDiagnosticLocation ( SegmentAllocator allocator,  Addressable x1) {\n@@ -1672,1 +1710,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address());\n@@ -1677,0 +1715,3 @@\n+    public static MemorySegment clang_getDiagnosticLocation ( ResourceScope scope,  Addressable x1) {\n+        return clang_getDiagnosticLocation(SegmentAllocator.ofScope(scope), x1.address());\n+    }\n@@ -1680,1 +1721,1 @@\n-    public static MemorySegment clang_getDiagnosticSpelling ( Addressable x0) {\n+    public static MemorySegment clang_getDiagnosticSpelling ( SegmentAllocator allocator,  Addressable x1) {\n@@ -1683,1 +1724,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address());\n@@ -1688,0 +1729,3 @@\n+    public static MemorySegment clang_getDiagnosticSpelling ( ResourceScope scope,  Addressable x1) {\n+        return clang_getDiagnosticSpelling(SegmentAllocator.ofScope(scope), x1.address());\n+    }\n@@ -1691,1 +1735,1 @@\n-    public static MemorySegment clang_getDiagnosticOption ( Addressable Diag,  Addressable Disable) {\n+    public static MemorySegment clang_getDiagnosticOption ( SegmentAllocator allocator,  Addressable Diag,  Addressable Disable) {\n@@ -1694,1 +1738,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diag.address(), Disable.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diag.address(), Disable.address());\n@@ -1699,0 +1743,3 @@\n+    public static MemorySegment clang_getDiagnosticOption ( ResourceScope scope,  Addressable Diag,  Addressable Disable) {\n+        return clang_getDiagnosticOption(SegmentAllocator.ofScope(scope), Diag.address(), Disable.address());\n+    }\n@@ -1713,1 +1760,1 @@\n-    public static MemorySegment clang_getDiagnosticCategoryName ( int Category) {\n+    public static MemorySegment clang_getDiagnosticCategoryName ( SegmentAllocator allocator,  int Category) {\n@@ -1716,1 +1763,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Category);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Category);\n@@ -1721,0 +1768,3 @@\n+    public static MemorySegment clang_getDiagnosticCategoryName ( ResourceScope scope,  int Category) {\n+        return clang_getDiagnosticCategoryName(SegmentAllocator.ofScope(scope), Category);\n+    }\n@@ -1724,1 +1774,1 @@\n-    public static MemorySegment clang_getDiagnosticCategoryText ( Addressable x0) {\n+    public static MemorySegment clang_getDiagnosticCategoryText ( SegmentAllocator allocator,  Addressable x1) {\n@@ -1727,1 +1777,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address());\n@@ -1732,0 +1782,3 @@\n+    public static MemorySegment clang_getDiagnosticCategoryText ( ResourceScope scope,  Addressable x1) {\n+        return clang_getDiagnosticCategoryText(SegmentAllocator.ofScope(scope), x1.address());\n+    }\n@@ -1819,1 +1872,1 @@\n-    public static MemorySegment clang_getDiagnosticRange ( Addressable Diagnostic,  int Range) {\n+    public static MemorySegment clang_getDiagnosticRange ( SegmentAllocator allocator,  Addressable Diagnostic,  int Range) {\n@@ -1822,1 +1875,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diagnostic.address(), Range);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic.address(), Range);\n@@ -1827,0 +1880,3 @@\n+    public static MemorySegment clang_getDiagnosticRange ( ResourceScope scope,  Addressable Diagnostic,  int Range) {\n+        return clang_getDiagnosticRange(SegmentAllocator.ofScope(scope), Diagnostic.address(), Range);\n+    }\n@@ -1841,1 +1897,1 @@\n-    public static MemorySegment clang_getDiagnosticFixIt ( Addressable Diagnostic,  int FixIt,  Addressable ReplacementRange) {\n+    public static MemorySegment clang_getDiagnosticFixIt ( SegmentAllocator allocator,  Addressable Diagnostic,  int FixIt,  Addressable ReplacementRange) {\n@@ -1844,1 +1900,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Diagnostic.address(), FixIt, ReplacementRange.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic.address(), FixIt, ReplacementRange.address());\n@@ -1849,0 +1905,3 @@\n+    public static MemorySegment clang_getDiagnosticFixIt ( ResourceScope scope,  Addressable Diagnostic,  int FixIt,  Addressable ReplacementRange) {\n+        return clang_getDiagnosticFixIt(SegmentAllocator.ofScope(scope), Diagnostic.address(), FixIt, ReplacementRange.address());\n+    }\n@@ -1852,1 +1911,1 @@\n-    public static MemorySegment clang_getTranslationUnitSpelling ( Addressable CTUnit) {\n+    public static MemorySegment clang_getTranslationUnitSpelling ( SegmentAllocator allocator,  Addressable CTUnit) {\n@@ -1855,1 +1914,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CTUnit.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CTUnit.address());\n@@ -1860,0 +1919,3 @@\n+    public static MemorySegment clang_getTranslationUnitSpelling ( ResourceScope scope,  Addressable CTUnit) {\n+        return clang_getTranslationUnitSpelling(SegmentAllocator.ofScope(scope), CTUnit.address());\n+    }\n@@ -2382,3 +2444,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -2386,2 +2449,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -2389,1 +2452,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -2452,3 +2515,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -2456,2 +2520,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -2459,1 +2523,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -2465,1 +2529,1 @@\n-    public static MemorySegment clang_getCXTUResourceUsage ( Addressable TU) {\n+    public static MemorySegment clang_getCXTUResourceUsage ( SegmentAllocator allocator,  Addressable TU) {\n@@ -2468,1 +2532,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(TU.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, TU.address());\n@@ -2473,0 +2537,3 @@\n+    public static MemorySegment clang_getCXTUResourceUsage ( ResourceScope scope,  Addressable TU) {\n+        return clang_getCXTUResourceUsage(SegmentAllocator.ofScope(scope), TU.address());\n+    }\n@@ -2509,1 +2576,1 @@\n-    public static MemorySegment clang_TargetInfo_getTriple ( Addressable Info) {\n+    public static MemorySegment clang_TargetInfo_getTriple ( SegmentAllocator allocator,  Addressable Info) {\n@@ -2512,1 +2579,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Info.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Info.address());\n@@ -2517,0 +2584,3 @@\n+    public static MemorySegment clang_TargetInfo_getTriple ( ResourceScope scope,  Addressable Info) {\n+        return clang_TargetInfo_getTriple(SegmentAllocator.ofScope(scope), Info.address());\n+    }\n@@ -3429,1 +3499,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 24));\n+            return seg.asSlice(8, 24);\n@@ -3432,3 +3502,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -3436,2 +3507,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -3439,1 +3510,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -3445,1 +3516,1 @@\n-    public static MemorySegment clang_getNullCursor () {\n+    public static MemorySegment clang_getNullCursor ( SegmentAllocator allocator) {\n@@ -3448,1 +3519,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -3453,0 +3524,3 @@\n+    public static MemorySegment clang_getNullCursor ( ResourceScope scope) {\n+        return clang_getNullCursor(SegmentAllocator.ofScope(scope));\n+    }\n@@ -3456,1 +3530,1 @@\n-    public static MemorySegment clang_getTranslationUnitCursor ( Addressable x0) {\n+    public static MemorySegment clang_getTranslationUnitCursor ( SegmentAllocator allocator,  Addressable x1) {\n@@ -3459,1 +3533,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address());\n@@ -3464,0 +3538,3 @@\n+    public static MemorySegment clang_getTranslationUnitCursor ( ResourceScope scope,  Addressable x1) {\n+        return clang_getTranslationUnitCursor(SegmentAllocator.ofScope(scope), x1.address());\n+    }\n@@ -3914,1 +3991,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));\n+            return seg.asSlice(0, 16);\n@@ -3917,1 +3994,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 12));\n+            return seg.asSlice(16, 12);\n@@ -3920,1 +3997,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 12));\n+            return seg.asSlice(28, 12);\n@@ -3923,1 +4000,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 12));\n+            return seg.asSlice(40, 12);\n@@ -3942,1 +4019,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));\n+            return seg.asSlice(56, 16);\n@@ -3945,3 +4022,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -3949,2 +4027,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -3952,1 +4030,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -4224,1 +4302,1 @@\n-    public static MemorySegment clang_getCursorSemanticParent ( MemorySegment cursor) {\n+    public static MemorySegment clang_getCursorSemanticParent ( SegmentAllocator allocator,  MemorySegment cursor) {\n@@ -4227,1 +4305,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(cursor);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, cursor);\n@@ -4232,0 +4310,3 @@\n+    public static MemorySegment clang_getCursorSemanticParent ( ResourceScope scope,  MemorySegment cursor) {\n+        return clang_getCursorSemanticParent(SegmentAllocator.ofScope(scope), cursor);\n+    }\n@@ -4235,1 +4316,1 @@\n-    public static MemorySegment clang_getCursorLexicalParent ( MemorySegment cursor) {\n+    public static MemorySegment clang_getCursorLexicalParent ( SegmentAllocator allocator,  MemorySegment cursor) {\n@@ -4238,1 +4319,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(cursor);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, cursor);\n@@ -4243,0 +4324,3 @@\n+    public static MemorySegment clang_getCursorLexicalParent ( ResourceScope scope,  MemorySegment cursor) {\n+        return clang_getCursorLexicalParent(SegmentAllocator.ofScope(scope), cursor);\n+    }\n@@ -4279,1 +4363,1 @@\n-    public static MemorySegment clang_getCursor ( Addressable x0,  MemorySegment x1) {\n+    public static MemorySegment clang_getCursor ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n@@ -4282,1 +4366,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n@@ -4287,0 +4371,3 @@\n+    public static MemorySegment clang_getCursor ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getCursor(SegmentAllocator.ofScope(scope), x1.address(), x2);\n+    }\n@@ -4377,1 +4464,1 @@\n-    public static MemorySegment clang_getCursorLocation ( MemorySegment x0) {\n+    public static MemorySegment clang_getCursorLocation ( SegmentAllocator allocator,  MemorySegment x1) {\n@@ -4380,1 +4467,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -4385,0 +4472,3 @@\n+    public static MemorySegment clang_getCursorLocation ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorLocation(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -4388,1 +4478,1 @@\n-    public static MemorySegment clang_getCursorExtent ( MemorySegment x0) {\n+    public static MemorySegment clang_getCursorExtent ( SegmentAllocator allocator,  MemorySegment x1) {\n@@ -4391,1 +4481,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -4396,0 +4486,3 @@\n+    public static MemorySegment clang_getCursorExtent ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorExtent(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -4837,1 +4930,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));\n+            return seg.asSlice(8, 16);\n@@ -4840,3 +4933,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -4844,2 +4938,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -4847,1 +4941,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -4853,1 +4947,1 @@\n-    public static MemorySegment clang_getCursorType ( MemorySegment C) {\n+    public static MemorySegment clang_getCursorType ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -4856,1 +4950,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -4861,0 +4955,3 @@\n+    public static MemorySegment clang_getCursorType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getCursorType(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -4864,1 +4961,1 @@\n-    public static MemorySegment clang_getTypeSpelling ( MemorySegment CT) {\n+    public static MemorySegment clang_getTypeSpelling ( SegmentAllocator allocator,  MemorySegment CT) {\n@@ -4867,1 +4964,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CT);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n@@ -4872,0 +4969,3 @@\n+    public static MemorySegment clang_getTypeSpelling ( ResourceScope scope,  MemorySegment CT) {\n+        return clang_getTypeSpelling(SegmentAllocator.ofScope(scope), CT);\n+    }\n@@ -4875,1 +4975,1 @@\n-    public static MemorySegment clang_getTypedefDeclUnderlyingType ( MemorySegment C) {\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -4878,1 +4978,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -4883,0 +4983,3 @@\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getTypedefDeclUnderlyingType(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -4886,1 +4989,1 @@\n-    public static MemorySegment clang_getEnumDeclIntegerType ( MemorySegment C) {\n+    public static MemorySegment clang_getEnumDeclIntegerType ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -4889,1 +4992,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -4894,0 +4997,3 @@\n+    public static MemorySegment clang_getEnumDeclIntegerType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getEnumDeclIntegerType(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -5041,1 +5147,1 @@\n-    public static MemorySegment clang_Cursor_getArgument ( MemorySegment C,  int i) {\n+    public static MemorySegment clang_Cursor_getArgument ( SegmentAllocator allocator,  MemorySegment C,  int i) {\n@@ -5044,1 +5150,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C, i);\n@@ -5049,0 +5155,3 @@\n+    public static MemorySegment clang_Cursor_getArgument ( ResourceScope scope,  MemorySegment C,  int i) {\n+        return clang_Cursor_getArgument(SegmentAllocator.ofScope(scope), C, i);\n+    }\n@@ -5185,1 +5294,1 @@\n-    public static MemorySegment clang_Cursor_getTemplateArgumentType ( MemorySegment C,  int I) {\n+    public static MemorySegment clang_Cursor_getTemplateArgumentType ( SegmentAllocator allocator,  MemorySegment C,  int I) {\n@@ -5188,1 +5297,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C, I);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C, I);\n@@ -5193,0 +5302,3 @@\n+    public static MemorySegment clang_Cursor_getTemplateArgumentType ( ResourceScope scope,  MemorySegment C,  int I) {\n+        return clang_Cursor_getTemplateArgumentType(SegmentAllocator.ofScope(scope), C, I);\n+    }\n@@ -5229,1 +5341,1 @@\n-    public static MemorySegment clang_getCanonicalType ( MemorySegment T) {\n+    public static MemorySegment clang_getCanonicalType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -5232,1 +5344,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5237,0 +5349,3 @@\n+    public static MemorySegment clang_getCanonicalType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getCanonicalType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -5333,1 +5448,1 @@\n-    public static MemorySegment clang_getLocalUnqualifiedType ( MemorySegment T) {\n+    public static MemorySegment clang_getLocalUnqualifiedType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -5336,1 +5451,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5341,0 +5456,3 @@\n+    public static MemorySegment clang_getLocalUnqualifiedType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getLocalUnqualifiedType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -5501,1 +5619,1 @@\n-    public static MemorySegment clang_getTypedefName ( MemorySegment CT) {\n+    public static MemorySegment clang_getTypedefName ( SegmentAllocator allocator,  MemorySegment CT) {\n@@ -5504,1 +5622,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CT);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n@@ -5509,0 +5627,3 @@\n+    public static MemorySegment clang_getTypedefName ( ResourceScope scope,  MemorySegment CT) {\n+        return clang_getTypedefName(SegmentAllocator.ofScope(scope), CT);\n+    }\n@@ -5512,1 +5633,1 @@\n-    public static MemorySegment clang_getPointeeType ( MemorySegment T) {\n+    public static MemorySegment clang_getPointeeType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -5515,1 +5636,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5520,0 +5641,3 @@\n+    public static MemorySegment clang_getPointeeType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getPointeeType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -5523,1 +5647,1 @@\n-    public static MemorySegment clang_getTypeDeclaration ( MemorySegment T) {\n+    public static MemorySegment clang_getTypeDeclaration ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -5526,1 +5650,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5531,0 +5655,3 @@\n+    public static MemorySegment clang_getTypeDeclaration ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getTypeDeclaration(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -5534,1 +5661,1 @@\n-    public static MemorySegment clang_getDeclObjCTypeEncoding ( MemorySegment C) {\n+    public static MemorySegment clang_getDeclObjCTypeEncoding ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -5537,1 +5664,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -5542,0 +5669,3 @@\n+    public static MemorySegment clang_getDeclObjCTypeEncoding ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getDeclObjCTypeEncoding(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -5637,1 +5767,1 @@\n-    public static MemorySegment clang_Type_getObjCEncoding ( MemorySegment type) {\n+    public static MemorySegment clang_Type_getObjCEncoding ( SegmentAllocator allocator,  MemorySegment type) {\n@@ -5640,1 +5770,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(type);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, type);\n@@ -5645,0 +5775,3 @@\n+    public static MemorySegment clang_Type_getObjCEncoding ( ResourceScope scope,  MemorySegment type) {\n+        return clang_Type_getObjCEncoding(SegmentAllocator.ofScope(scope), type);\n+    }\n@@ -5648,1 +5781,1 @@\n-    public static MemorySegment clang_getTypeKindSpelling ( int K) {\n+    public static MemorySegment clang_getTypeKindSpelling ( SegmentAllocator allocator,  int K) {\n@@ -5651,1 +5784,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(K);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, K);\n@@ -5656,0 +5789,3 @@\n+    public static MemorySegment clang_getTypeKindSpelling ( ResourceScope scope,  int K) {\n+        return clang_getTypeKindSpelling(SegmentAllocator.ofScope(scope), K);\n+    }\n@@ -5670,1 +5806,1 @@\n-    public static MemorySegment clang_getResultType ( MemorySegment T) {\n+    public static MemorySegment clang_getResultType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -5673,1 +5809,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5678,0 +5814,3 @@\n+    public static MemorySegment clang_getResultType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getResultType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -5787,1 +5926,1 @@\n-    public static MemorySegment clang_getArgType ( MemorySegment T,  int i) {\n+    public static MemorySegment clang_getArgType ( SegmentAllocator allocator,  MemorySegment T,  int i) {\n@@ -5790,1 +5929,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n@@ -5795,0 +5934,3 @@\n+    public static MemorySegment clang_getArgType ( ResourceScope scope,  MemorySegment T,  int i) {\n+        return clang_getArgType(SegmentAllocator.ofScope(scope), T, i);\n+    }\n@@ -5798,1 +5940,1 @@\n-    public static MemorySegment clang_Type_getObjCObjectBaseType ( MemorySegment T) {\n+    public static MemorySegment clang_Type_getObjCObjectBaseType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -5801,1 +5943,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5806,0 +5948,3 @@\n+    public static MemorySegment clang_Type_getObjCObjectBaseType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_Type_getObjCObjectBaseType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -5820,1 +5965,1 @@\n-    public static MemorySegment clang_Type_getObjCProtocolDecl ( MemorySegment T,  int i) {\n+    public static MemorySegment clang_Type_getObjCProtocolDecl ( SegmentAllocator allocator,  MemorySegment T,  int i) {\n@@ -5823,1 +5968,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n@@ -5828,0 +5973,3 @@\n+    public static MemorySegment clang_Type_getObjCProtocolDecl ( ResourceScope scope,  MemorySegment T,  int i) {\n+        return clang_Type_getObjCProtocolDecl(SegmentAllocator.ofScope(scope), T, i);\n+    }\n@@ -5842,1 +5990,1 @@\n-    public static MemorySegment clang_Type_getObjCTypeArg ( MemorySegment T,  int i) {\n+    public static MemorySegment clang_Type_getObjCTypeArg ( SegmentAllocator allocator,  MemorySegment T,  int i) {\n@@ -5845,1 +5993,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n@@ -5850,0 +5998,3 @@\n+    public static MemorySegment clang_Type_getObjCTypeArg ( ResourceScope scope,  MemorySegment T,  int i) {\n+        return clang_Type_getObjCTypeArg(SegmentAllocator.ofScope(scope), T, i);\n+    }\n@@ -5959,1 +6110,1 @@\n-    public static MemorySegment clang_getCursorResultType ( MemorySegment C) {\n+    public static MemorySegment clang_getCursorResultType ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -5962,1 +6113,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -5967,0 +6118,3 @@\n+    public static MemorySegment clang_getCursorResultType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getCursorResultType(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -5992,1 +6146,1 @@\n-    public static MemorySegment clang_getElementType ( MemorySegment T) {\n+    public static MemorySegment clang_getElementType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -5995,1 +6149,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6000,0 +6154,3 @@\n+    public static MemorySegment clang_getElementType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getElementType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -6098,1 +6255,1 @@\n-    public static MemorySegment clang_getArrayElementType ( MemorySegment T) {\n+    public static MemorySegment clang_getArrayElementType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -6101,1 +6258,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6106,0 +6263,3 @@\n+    public static MemorySegment clang_getArrayElementType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getArrayElementType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -6120,1 +6280,1 @@\n-    public static MemorySegment clang_Type_getNamedType ( MemorySegment T) {\n+    public static MemorySegment clang_Type_getNamedType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -6123,1 +6283,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6128,0 +6288,3 @@\n+    public static MemorySegment clang_Type_getNamedType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_Type_getNamedType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -6278,1 +6441,1 @@\n-    public static MemorySegment clang_Type_getClassType ( MemorySegment T) {\n+    public static MemorySegment clang_Type_getClassType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -6281,1 +6444,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6286,0 +6449,3 @@\n+    public static MemorySegment clang_Type_getClassType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_Type_getClassType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -6311,1 +6477,1 @@\n-    public static MemorySegment clang_Type_getModifiedType ( MemorySegment T) {\n+    public static MemorySegment clang_Type_getModifiedType ( SegmentAllocator allocator,  MemorySegment T) {\n@@ -6314,1 +6480,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -6319,0 +6485,3 @@\n+    public static MemorySegment clang_Type_getModifiedType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_Type_getModifiedType(SegmentAllocator.ofScope(scope), T);\n+    }\n@@ -6471,1 +6640,1 @@\n-    public static MemorySegment clang_Type_getTemplateArgumentAsType ( MemorySegment T,  int i) {\n+    public static MemorySegment clang_Type_getTemplateArgumentAsType ( SegmentAllocator allocator,  MemorySegment T,  int i) {\n@@ -6474,1 +6643,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(T, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n@@ -6479,0 +6648,3 @@\n+    public static MemorySegment clang_Type_getTemplateArgumentAsType ( ResourceScope scope,  MemorySegment T,  int i) {\n+        return clang_Type_getTemplateArgumentAsType(SegmentAllocator.ofScope(scope), T, i);\n+    }\n@@ -6665,1 +6837,1 @@\n-    public static MemorySegment clang_getOverloadedDecl ( MemorySegment cursor,  int index) {\n+    public static MemorySegment clang_getOverloadedDecl ( SegmentAllocator allocator,  MemorySegment cursor,  int index) {\n@@ -6668,1 +6840,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(cursor, index);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, cursor, index);\n@@ -6673,0 +6845,3 @@\n+    public static MemorySegment clang_getOverloadedDecl ( ResourceScope scope,  MemorySegment cursor,  int index) {\n+        return clang_getOverloadedDecl(SegmentAllocator.ofScope(scope), cursor, index);\n+    }\n@@ -6676,1 +6851,1 @@\n-    public static MemorySegment clang_getIBOutletCollectionType ( MemorySegment x0) {\n+    public static MemorySegment clang_getIBOutletCollectionType ( SegmentAllocator allocator,  MemorySegment x1) {\n@@ -6679,1 +6854,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6684,0 +6859,3 @@\n+    public static MemorySegment clang_getIBOutletCollectionType ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getIBOutletCollectionType(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -6784,1 +6962,1 @@\n-        static MemorySegment allocate(CXCursorVisitor fi, NativeScope scope) {\n+        static MemorySegment allocate(CXCursorVisitor fi, ResourceScope scope) {\n@@ -6787,0 +6965,9 @@\n+        static CXCursorVisitor ofAddress(MemoryAddress addr) {\n+            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n+                try {\n+                    return (int)constants$31.CXCursorVisitor$MH.invokeExact((Addressable)addr, x0, x1, x2);\n+                } catch (Throwable ex$) {\n+                    throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            };\n+        }\n@@ -6822,22 +7009,0 @@\n-    public interface CXCursorVisitorBlock {\n-\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n-        static MemorySegment allocate(CXCursorVisitorBlock fi) {\n-            return RuntimeHelper.upcallStub(CXCursorVisitorBlock.class, fi, constants$31.CXCursorVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n-        }\n-        static MemorySegment allocate(CXCursorVisitorBlock fi, NativeScope scope) {\n-            return RuntimeHelper.upcallStub(CXCursorVisitorBlock.class, fi, constants$31.CXCursorVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n-        }\n-    }\n-\n-    public static MethodHandle clang_visitChildrenWithBlock$MH() {\n-        return RuntimeHelper.requireNonNull(constants$31.clang_visitChildrenWithBlock$MH,\"clang_visitChildrenWithBlock\");\n-    }\n-    public static int clang_visitChildrenWithBlock ( MemorySegment parent,  Addressable block) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitChildrenWithBlock$MH, \"clang_visitChildrenWithBlock\");\n-        try {\n-            return (int)mh$.invokeExact(parent, block.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -6859,0 +7024,4 @@\n+        static final MethodHandle CXCursorVisitor$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$31.CXCursorVisitor$FUNC, false\n+        );\n@@ -6913,13 +7082,0 @@\n-        static final FunctionDescriptor clang_visitChildrenWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_visitChildrenWithBlock$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_visitChildrenWithBlock\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$31.clang_visitChildrenWithBlock$FUNC, false\n-        );\n@@ -6928,0 +7084,31 @@\n+    public interface CXCursorVisitorBlock {\n+\n+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n+        static MemorySegment allocate(CXCursorVisitorBlock fi) {\n+            return RuntimeHelper.upcallStub(CXCursorVisitorBlock.class, fi, constants$31.CXCursorVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n+        }\n+        static MemorySegment allocate(CXCursorVisitorBlock fi, ResourceScope scope) {\n+            return RuntimeHelper.upcallStub(CXCursorVisitorBlock.class, fi, constants$31.CXCursorVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n+        }\n+        static CXCursorVisitorBlock ofAddress(MemoryAddress addr) {\n+            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1) -> {\n+                try {\n+                    return (int)constants$32.CXCursorVisitorBlock$MH.invokeExact((Addressable)addr, x0, x1);\n+                } catch (Throwable ex$) {\n+                    throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            };\n+        }\n+    }\n+\n+    public static MethodHandle clang_visitChildrenWithBlock$MH() {\n+        return RuntimeHelper.requireNonNull(constants$32.clang_visitChildrenWithBlock$MH,\"clang_visitChildrenWithBlock\");\n+    }\n+    public static int clang_visitChildrenWithBlock ( MemorySegment parent,  Addressable block) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_visitChildrenWithBlock$MH, \"clang_visitChildrenWithBlock\");\n+        try {\n+            return (int)mh$.invokeExact(parent, block.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -6931,1 +7118,1 @@\n-    public static MemorySegment clang_getCursorUSR ( MemorySegment x0) {\n+    public static MemorySegment clang_getCursorUSR ( SegmentAllocator allocator,  MemorySegment x1) {\n@@ -6934,1 +7121,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6939,0 +7126,3 @@\n+    public static MemorySegment clang_getCursorUSR ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorUSR(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -6942,1 +7132,1 @@\n-    public static MemorySegment clang_constructUSR_ObjCClass ( Addressable class_name) {\n+    public static MemorySegment clang_constructUSR_ObjCClass ( SegmentAllocator allocator,  Addressable class_name) {\n@@ -6945,1 +7135,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(class_name.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, class_name.address());\n@@ -6950,0 +7140,3 @@\n+    public static MemorySegment clang_constructUSR_ObjCClass ( ResourceScope scope,  Addressable class_name) {\n+        return clang_constructUSR_ObjCClass(SegmentAllocator.ofScope(scope), class_name.address());\n+    }\n@@ -6953,1 +7146,1 @@\n-    public static MemorySegment clang_constructUSR_ObjCCategory ( Addressable class_name,  Addressable category_name) {\n+    public static MemorySegment clang_constructUSR_ObjCCategory ( SegmentAllocator allocator,  Addressable class_name,  Addressable category_name) {\n@@ -6956,1 +7149,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(class_name.address(), category_name.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, class_name.address(), category_name.address());\n@@ -6961,0 +7154,3 @@\n+    public static MemorySegment clang_constructUSR_ObjCCategory ( ResourceScope scope,  Addressable class_name,  Addressable category_name) {\n+        return clang_constructUSR_ObjCCategory(SegmentAllocator.ofScope(scope), class_name.address(), category_name.address());\n+    }\n@@ -6964,1 +7160,1 @@\n-    public static MemorySegment clang_constructUSR_ObjCProtocol ( Addressable protocol_name) {\n+    public static MemorySegment clang_constructUSR_ObjCProtocol ( SegmentAllocator allocator,  Addressable protocol_name) {\n@@ -6967,12 +7163,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(protocol_name.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_constructUSR_ObjCIvar$MH() {\n-        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCIvar$MH,\"clang_constructUSR_ObjCIvar\");\n-    }\n-    public static MemorySegment clang_constructUSR_ObjCIvar ( Addressable name,  MemorySegment classUSR) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCIvar$MH, \"clang_constructUSR_ObjCIvar\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(name.address(), classUSR);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, protocol_name.address());\n@@ -6983,10 +7168,2 @@\n-    public static MethodHandle clang_constructUSR_ObjCMethod$MH() {\n-        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCMethod$MH,\"clang_constructUSR_ObjCMethod\");\n-    }\n-    public static MemorySegment clang_constructUSR_ObjCMethod ( Addressable name,  int isInstanceMethod,  MemorySegment classUSR) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCMethod$MH, \"clang_constructUSR_ObjCMethod\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(name.address(), isInstanceMethod, classUSR);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_constructUSR_ObjCProtocol ( ResourceScope scope,  Addressable protocol_name) {\n+        return clang_constructUSR_ObjCProtocol(SegmentAllocator.ofScope(scope), protocol_name.address());\n@@ -6996,0 +7173,29 @@\n+        static final FunctionDescriptor CXCursorVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle CXCursorVisitorBlock$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$32.CXCursorVisitorBlock$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_visitChildrenWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_visitChildrenWithBlock$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_visitChildrenWithBlock\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$32.clang_visitChildrenWithBlock$FUNC, false\n+        );\n@@ -7049,35 +7255,0 @@\n-        static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCIvar$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCIvar\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$32.clang_constructUSR_ObjCIvar$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCMethod$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCMethod\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$32.clang_constructUSR_ObjCMethod$FUNC, false\n-        );\n@@ -7086,0 +7257,28 @@\n+    public static MethodHandle clang_constructUSR_ObjCIvar$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCIvar$MH,\"clang_constructUSR_ObjCIvar\");\n+    }\n+    public static MemorySegment clang_constructUSR_ObjCIvar ( SegmentAllocator allocator,  Addressable name,  MemorySegment classUSR) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCIvar$MH, \"clang_constructUSR_ObjCIvar\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, name.address(), classUSR);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_constructUSR_ObjCIvar ( ResourceScope scope,  Addressable name,  MemorySegment classUSR) {\n+        return clang_constructUSR_ObjCIvar(SegmentAllocator.ofScope(scope), name.address(), classUSR);\n+    }\n+    public static MethodHandle clang_constructUSR_ObjCMethod$MH() {\n+        return RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCMethod$MH,\"clang_constructUSR_ObjCMethod\");\n+    }\n+    public static MemorySegment clang_constructUSR_ObjCMethod ( SegmentAllocator allocator,  Addressable name,  int isInstanceMethod,  MemorySegment classUSR) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCMethod$MH, \"clang_constructUSR_ObjCMethod\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, name.address(), isInstanceMethod, classUSR);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_constructUSR_ObjCMethod ( ResourceScope scope,  Addressable name,  int isInstanceMethod,  MemorySegment classUSR) {\n+        return clang_constructUSR_ObjCMethod(SegmentAllocator.ofScope(scope), name.address(), isInstanceMethod, classUSR);\n+    }\n@@ -7089,1 +7288,1 @@\n-    public static MemorySegment clang_constructUSR_ObjCProperty ( Addressable property,  MemorySegment classUSR) {\n+    public static MemorySegment clang_constructUSR_ObjCProperty ( SegmentAllocator allocator,  Addressable property,  MemorySegment classUSR) {\n@@ -7092,1 +7291,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(property.address(), classUSR);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, property.address(), classUSR);\n@@ -7097,0 +7296,3 @@\n+    public static MemorySegment clang_constructUSR_ObjCProperty ( ResourceScope scope,  Addressable property,  MemorySegment classUSR) {\n+        return clang_constructUSR_ObjCProperty(SegmentAllocator.ofScope(scope), property.address(), classUSR);\n+    }\n@@ -7100,1 +7302,1 @@\n-    public static MemorySegment clang_getCursorSpelling ( MemorySegment x0) {\n+    public static MemorySegment clang_getCursorSpelling ( SegmentAllocator allocator,  MemorySegment x1) {\n@@ -7103,1 +7305,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -7108,0 +7310,3 @@\n+    public static MemorySegment clang_getCursorSpelling ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorSpelling(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -7111,1 +7316,1 @@\n-    public static MemorySegment clang_Cursor_getSpellingNameRange ( MemorySegment x0,  int pieceIndex,  int options) {\n+    public static MemorySegment clang_Cursor_getSpellingNameRange ( SegmentAllocator allocator,  MemorySegment x1,  int pieceIndex,  int options) {\n@@ -7114,1 +7319,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0, pieceIndex, options);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, pieceIndex, options);\n@@ -7119,0 +7324,3 @@\n+    public static MemorySegment clang_Cursor_getSpellingNameRange ( ResourceScope scope,  MemorySegment x1,  int pieceIndex,  int options) {\n+        return clang_Cursor_getSpellingNameRange(SegmentAllocator.ofScope(scope), x1, pieceIndex, options);\n+    }\n@@ -7211,22 +7419,0 @@\n-    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_setProperty$MH,\"clang_PrintingPolicy_setProperty\");\n-    }\n-    public static void clang_PrintingPolicy_setProperty ( Addressable Policy,  int Property,  int Value) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_setProperty$MH, \"clang_PrintingPolicy_setProperty\");\n-        try {\n-            mh$.invokeExact(Policy.address(), Property, Value);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCursorPrintingPolicy$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_getCursorPrintingPolicy$MH,\"clang_getCursorPrintingPolicy\");\n-    }\n-    public static MemoryAddress clang_getCursorPrintingPolicy ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_getCursorPrintingPolicy$MH, \"clang_getCursorPrintingPolicy\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -7235,0 +7421,35 @@\n+        static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.paddingLayout(32)\n+            )\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCIvar$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCIvar\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$33.clang_constructUSR_ObjCIvar$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER,\n+            C_INT,\n+            MemoryLayout.structLayout(\n+                C_POINTER.withName(\"data\"),\n+                C_INT.withName(\"private_flags\"),\n+                MemoryLayout.paddingLayout(32)\n+            )\n+        );\n+        static final MethodHandle clang_constructUSR_ObjCMethod$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_constructUSR_ObjCMethod\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$33.clang_constructUSR_ObjCMethod$FUNC, false\n+        );\n@@ -7295,22 +7516,0 @@\n-        static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_PrintingPolicy_setProperty$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_PrintingPolicy_setProperty\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;II)V\",\n-            constants$33.clang_PrintingPolicy_setProperty$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorPrintingPolicy$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorPrintingPolicy\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$33.clang_getCursorPrintingPolicy$FUNC, false\n-        );\n@@ -7319,0 +7518,22 @@\n+    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_setProperty$MH,\"clang_PrintingPolicy_setProperty\");\n+    }\n+    public static void clang_PrintingPolicy_setProperty ( Addressable Policy,  int Property,  int Value) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_setProperty$MH, \"clang_PrintingPolicy_setProperty\");\n+        try {\n+            mh$.invokeExact(Policy.address(), Property, Value);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_getCursorPrintingPolicy$MH() {\n+        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrintingPolicy$MH,\"clang_getCursorPrintingPolicy\");\n+    }\n+    public static MemoryAddress clang_getCursorPrintingPolicy ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrintingPolicy$MH, \"clang_getCursorPrintingPolicy\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -7333,1 +7554,1 @@\n-    public static MemorySegment clang_getCursorPrettyPrinted ( MemorySegment Cursor,  Addressable Policy) {\n+    public static MemorySegment clang_getCursorPrettyPrinted ( SegmentAllocator allocator,  MemorySegment Cursor,  Addressable Policy) {\n@@ -7336,1 +7557,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Cursor, Policy.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Cursor, Policy.address());\n@@ -7341,0 +7562,3 @@\n+    public static MemorySegment clang_getCursorPrettyPrinted ( ResourceScope scope,  MemorySegment Cursor,  Addressable Policy) {\n+        return clang_getCursorPrettyPrinted(SegmentAllocator.ofScope(scope), Cursor, Policy.address());\n+    }\n@@ -7355,1 +7579,1 @@\n-    public static MemorySegment clang_getTypePrettyPrinted ( MemorySegment CT,  Addressable Policy) {\n+    public static MemorySegment clang_getTypePrettyPrinted ( SegmentAllocator allocator,  MemorySegment CT,  Addressable Policy) {\n@@ -7358,12 +7582,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(CT, Policy.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCursorDisplayName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n-    }\n-    public static MemorySegment clang_getCursorDisplayName ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorDisplayName$MH, \"clang_getCursorDisplayName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT, Policy.address());\n@@ -7374,10 +7587,2 @@\n-    public static MethodHandle clang_getCursorReferenced$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n-    }\n-    public static MemorySegment clang_getCursorReferenced ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorReferenced$MH, \"clang_getCursorReferenced\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_getTypePrettyPrinted ( ResourceScope scope,  MemorySegment CT,  Addressable Policy) {\n+        return clang_getTypePrettyPrinted(SegmentAllocator.ofScope(scope), CT, Policy.address());\n@@ -7387,0 +7592,22 @@\n+        static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_INT,\n+            C_INT\n+        );\n+        static final MethodHandle clang_PrintingPolicy_setProperty$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_PrintingPolicy_setProperty\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;II)V\",\n+            constants$34.clang_PrintingPolicy_setProperty$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorPrintingPolicy$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorPrintingPolicy\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$34.clang_getCursorPrintingPolicy$FUNC, false\n+        );\n@@ -7441,32 +7668,0 @@\n-        static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorDisplayName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorDisplayName\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$34.clang_getCursorDisplayName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorReferenced$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorReferenced\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$34.clang_getCursorReferenced$FUNC, false\n-        );\n@@ -7475,0 +7670,28 @@\n+    public static MethodHandle clang_getCursorDisplayName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n+    }\n+    public static MemorySegment clang_getCursorDisplayName ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCursorDisplayName$MH, \"clang_getCursorDisplayName\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_getCursorDisplayName ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorDisplayName(SegmentAllocator.ofScope(scope), x1);\n+    }\n+    public static MethodHandle clang_getCursorReferenced$MH() {\n+        return RuntimeHelper.requireNonNull(constants$35.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n+    }\n+    public static MemorySegment clang_getCursorReferenced ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCursorReferenced$MH, \"clang_getCursorReferenced\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_getCursorReferenced ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorReferenced(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -7478,1 +7701,1 @@\n-    public static MemorySegment clang_getCursorDefinition ( MemorySegment x0) {\n+    public static MemorySegment clang_getCursorDefinition ( SegmentAllocator allocator,  MemorySegment x1) {\n@@ -7481,1 +7704,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -7486,0 +7709,3 @@\n+    public static MemorySegment clang_getCursorDefinition ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorDefinition(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -7500,1 +7726,1 @@\n-    public static MemorySegment clang_getCanonicalCursor ( MemorySegment x0) {\n+    public static MemorySegment clang_getCanonicalCursor ( SegmentAllocator allocator,  MemorySegment x1) {\n@@ -7503,1 +7729,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -7508,0 +7734,3 @@\n+    public static MemorySegment clang_getCanonicalCursor ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCanonicalCursor(SegmentAllocator.ofScope(scope), x1);\n+    }\n@@ -7519,64 +7748,0 @@\n-    public static MethodHandle clang_Cursor_isDynamicCall$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_Cursor_isDynamicCall$MH,\"clang_Cursor_isDynamicCall\");\n-    }\n-    public static int clang_Cursor_isDynamicCall ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_Cursor_isDynamicCall$MH, \"clang_Cursor_isDynamicCall\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getReceiverType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getReceiverType$MH,\"clang_Cursor_getReceiverType\");\n-    }\n-    public static MemorySegment clang_Cursor_getReceiverType ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getReceiverType$MH, \"clang_Cursor_getReceiverType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXObjCPropertyAttr_noattr() {\n-        return (int)0L;\n-    }\n-    public static int CXObjCPropertyAttr_readonly() {\n-        return (int)1L;\n-    }\n-    public static int CXObjCPropertyAttr_getter() {\n-        return (int)2L;\n-    }\n-    public static int CXObjCPropertyAttr_assign() {\n-        return (int)4L;\n-    }\n-    public static int CXObjCPropertyAttr_readwrite() {\n-        return (int)8L;\n-    }\n-    public static int CXObjCPropertyAttr_retain() {\n-        return (int)16L;\n-    }\n-    public static int CXObjCPropertyAttr_copy() {\n-        return (int)32L;\n-    }\n-    public static int CXObjCPropertyAttr_nonatomic() {\n-        return (int)64L;\n-    }\n-    public static int CXObjCPropertyAttr_setter() {\n-        return (int)128L;\n-    }\n-    public static int CXObjCPropertyAttr_atomic() {\n-        return (int)256L;\n-    }\n-    public static int CXObjCPropertyAttr_weak() {\n-        return (int)512L;\n-    }\n-    public static int CXObjCPropertyAttr_strong() {\n-        return (int)1024L;\n-    }\n-    public static int CXObjCPropertyAttr_unsafe_unretained() {\n-        return (int)2048L;\n-    }\n-    public static int CXObjCPropertyAttr_class() {\n-        return (int)4096L;\n-    }\n@@ -7585,0 +7750,32 @@\n+        static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorDisplayName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorDisplayName\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$35.clang_getCursorDisplayName$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorReferenced$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorReferenced\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$35.clang_getCursorReferenced$FUNC, false\n+        );\n@@ -7641,28 +7838,0 @@\n-        static final FunctionDescriptor clang_Cursor_isDynamicCall$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isDynamicCall$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isDynamicCall\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$35.clang_Cursor_isDynamicCall$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getReceiverType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getReceiverType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$35.clang_Cursor_getReceiverType$FUNC, false\n-        );\n@@ -7671,2 +7840,2 @@\n-    public static MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH,\"clang_Cursor_getObjCPropertyAttributes\");\n+    public static MethodHandle clang_Cursor_isDynamicCall$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isDynamicCall$MH,\"clang_Cursor_isDynamicCall\");\n@@ -7674,2 +7843,2 @@\n-    public static int clang_Cursor_getObjCPropertyAttributes ( MemorySegment C,  int reserved) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH, \"clang_Cursor_getObjCPropertyAttributes\");\n+    public static int clang_Cursor_isDynamicCall ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isDynamicCall$MH, \"clang_Cursor_isDynamicCall\");\n@@ -7677,1 +7846,1 @@\n-            return (int)mh$.invokeExact(C, reserved);\n+            return (int)mh$.invokeExact(C);\n@@ -7682,2 +7851,2 @@\n-    public static MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH,\"clang_Cursor_getObjCPropertyGetterName\");\n+    public static MethodHandle clang_Cursor_getReceiverType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getReceiverType$MH,\"clang_Cursor_getReceiverType\");\n@@ -7685,2 +7854,2 @@\n-    public static MemorySegment clang_Cursor_getObjCPropertyGetterName ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH, \"clang_Cursor_getObjCPropertyGetterName\");\n+    public static MemorySegment clang_Cursor_getReceiverType ( SegmentAllocator allocator,  MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getReceiverType$MH, \"clang_Cursor_getReceiverType\");\n@@ -7688,1 +7857,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -7693,10 +7862,2 @@\n-    public static MethodHandle clang_Cursor_getObjCPropertySetterName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH,\"clang_Cursor_getObjCPropertySetterName\");\n-    }\n-    public static MemorySegment clang_Cursor_getObjCPropertySetterName ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH, \"clang_Cursor_getObjCPropertySetterName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_Cursor_getReceiverType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_Cursor_getReceiverType(SegmentAllocator.ofScope(scope), C);\n@@ -7704,1 +7865,1 @@\n-    public static int CXObjCDeclQualifier_None() {\n+    public static int CXObjCPropertyAttr_noattr() {\n@@ -7707,1 +7868,1 @@\n-    public static int CXObjCDeclQualifier_In() {\n+    public static int CXObjCPropertyAttr_readonly() {\n@@ -7710,1 +7871,1 @@\n-    public static int CXObjCDeclQualifier_Inout() {\n+    public static int CXObjCPropertyAttr_getter() {\n@@ -7713,1 +7874,1 @@\n-    public static int CXObjCDeclQualifier_Out() {\n+    public static int CXObjCPropertyAttr_assign() {\n@@ -7716,1 +7877,1 @@\n-    public static int CXObjCDeclQualifier_Bycopy() {\n+    public static int CXObjCPropertyAttr_readwrite() {\n@@ -7719,1 +7880,1 @@\n-    public static int CXObjCDeclQualifier_Byref() {\n+    public static int CXObjCPropertyAttr_retain() {\n@@ -7722,1 +7883,1 @@\n-    public static int CXObjCDeclQualifier_Oneway() {\n+    public static int CXObjCPropertyAttr_copy() {\n@@ -7725,2 +7886,2 @@\n-    public static MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH,\"clang_Cursor_getObjCDeclQualifiers\");\n+    public static int CXObjCPropertyAttr_nonatomic() {\n+        return (int)64L;\n@@ -7728,2 +7889,23 @@\n-    public static int clang_Cursor_getObjCDeclQualifiers ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH, \"clang_Cursor_getObjCDeclQualifiers\");\n+    public static int CXObjCPropertyAttr_setter() {\n+        return (int)128L;\n+    }\n+    public static int CXObjCPropertyAttr_atomic() {\n+        return (int)256L;\n+    }\n+    public static int CXObjCPropertyAttr_weak() {\n+        return (int)512L;\n+    }\n+    public static int CXObjCPropertyAttr_strong() {\n+        return (int)1024L;\n+    }\n+    public static int CXObjCPropertyAttr_unsafe_unretained() {\n+        return (int)2048L;\n+    }\n+    public static int CXObjCPropertyAttr_class() {\n+        return (int)4096L;\n+    }\n+    public static MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH,\"clang_Cursor_getObjCPropertyAttributes\");\n+    }\n+    public static int clang_Cursor_getObjCPropertyAttributes ( MemorySegment C,  int reserved) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH, \"clang_Cursor_getObjCPropertyAttributes\");\n@@ -7731,1 +7913,1 @@\n-            return (int)mh$.invokeExact(C);\n+            return (int)mh$.invokeExact(C, reserved);\n@@ -7736,2 +7918,2 @@\n-    public static MethodHandle clang_Cursor_isObjCOptional$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isObjCOptional$MH,\"clang_Cursor_isObjCOptional\");\n+    public static MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH,\"clang_Cursor_getObjCPropertyGetterName\");\n@@ -7739,2 +7921,2 @@\n-    public static int clang_Cursor_isObjCOptional ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isObjCOptional$MH, \"clang_Cursor_isObjCOptional\");\n+    public static MemorySegment clang_Cursor_getObjCPropertyGetterName ( SegmentAllocator allocator,  MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH, \"clang_Cursor_getObjCPropertyGetterName\");\n@@ -7742,1 +7924,1 @@\n-            return (int)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -7747,2 +7929,2 @@\n-    public static MethodHandle clang_Cursor_isVariadic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isVariadic$MH,\"clang_Cursor_isVariadic\");\n+    public static MemorySegment clang_Cursor_getObjCPropertyGetterName ( ResourceScope scope,  MemorySegment C) {\n+        return clang_Cursor_getObjCPropertyGetterName(SegmentAllocator.ofScope(scope), C);\n@@ -7750,2 +7932,40 @@\n-    public static int clang_Cursor_isVariadic ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isVariadic$MH, \"clang_Cursor_isVariadic\");\n+    public static MethodHandle clang_Cursor_getObjCPropertySetterName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH,\"clang_Cursor_getObjCPropertySetterName\");\n+    }\n+    public static MemorySegment clang_Cursor_getObjCPropertySetterName ( SegmentAllocator allocator,  MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH, \"clang_Cursor_getObjCPropertySetterName\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_Cursor_getObjCPropertySetterName ( ResourceScope scope,  MemorySegment C) {\n+        return clang_Cursor_getObjCPropertySetterName(SegmentAllocator.ofScope(scope), C);\n+    }\n+    public static int CXObjCDeclQualifier_None() {\n+        return (int)0L;\n+    }\n+    public static int CXObjCDeclQualifier_In() {\n+        return (int)1L;\n+    }\n+    public static int CXObjCDeclQualifier_Inout() {\n+        return (int)2L;\n+    }\n+    public static int CXObjCDeclQualifier_Out() {\n+        return (int)4L;\n+    }\n+    public static int CXObjCDeclQualifier_Bycopy() {\n+        return (int)8L;\n+    }\n+    public static int CXObjCDeclQualifier_Byref() {\n+        return (int)16L;\n+    }\n+    public static int CXObjCDeclQualifier_Oneway() {\n+        return (int)32L;\n+    }\n+    public static MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() {\n+        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH,\"clang_Cursor_getObjCDeclQualifiers\");\n+    }\n+    public static int clang_Cursor_getObjCDeclQualifiers ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH, \"clang_Cursor_getObjCDeclQualifiers\");\n@@ -7760,0 +7980,28 @@\n+        static final FunctionDescriptor clang_Cursor_isDynamicCall$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isDynamicCall$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isDynamicCall\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$36.clang_Cursor_isDynamicCall$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        ),\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getReceiverType$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getReceiverType\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$36.clang_Cursor_getReceiverType$FUNC, false\n+        );\n@@ -7817,24 +8065,0 @@\n-        static final FunctionDescriptor clang_Cursor_isObjCOptional$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isObjCOptional$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isObjCOptional\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$36.clang_Cursor_isObjCOptional$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isVariadic$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isVariadic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isVariadic\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$36.clang_Cursor_isVariadic$FUNC, false\n-        );\n@@ -7843,0 +8067,22 @@\n+    public static MethodHandle clang_Cursor_isObjCOptional$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isObjCOptional$MH,\"clang_Cursor_isObjCOptional\");\n+    }\n+    public static int clang_Cursor_isObjCOptional ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isObjCOptional$MH, \"clang_Cursor_isObjCOptional\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_Cursor_isVariadic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isVariadic$MH,\"clang_Cursor_isVariadic\");\n+    }\n+    public static int clang_Cursor_isVariadic ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isVariadic$MH, \"clang_Cursor_isVariadic\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -7857,1 +8103,1 @@\n-    public static MemorySegment clang_Cursor_getCommentRange ( MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getCommentRange ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -7860,1 +8106,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -7865,0 +8111,3 @@\n+    public static MemorySegment clang_Cursor_getCommentRange ( ResourceScope scope,  MemorySegment C) {\n+        return clang_Cursor_getCommentRange(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -7868,1 +8117,1 @@\n-    public static MemorySegment clang_Cursor_getRawCommentText ( MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getRawCommentText ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -7871,1 +8120,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -7876,0 +8125,3 @@\n+    public static MemorySegment clang_Cursor_getRawCommentText ( ResourceScope scope,  MemorySegment C) {\n+        return clang_Cursor_getRawCommentText(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -7879,1 +8131,1 @@\n-    public static MemorySegment clang_Cursor_getBriefCommentText ( MemorySegment C) {\n+    public static MemorySegment clang_Cursor_getBriefCommentText ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -7882,1 +8134,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -7887,21 +8139,2 @@\n-    public static MethodHandle clang_Cursor_getMangling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getMangling$MH,\"clang_Cursor_getMangling\");\n-    }\n-    public static MemorySegment clang_Cursor_getMangling ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getMangling$MH, \"clang_Cursor_getMangling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getCXXManglings$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCXXManglings$MH,\"clang_Cursor_getCXXManglings\");\n-    }\n-    public static MemoryAddress clang_Cursor_getCXXManglings ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCXXManglings$MH, \"clang_Cursor_getCXXManglings\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_Cursor_getBriefCommentText ( ResourceScope scope,  MemorySegment C) {\n+        return clang_Cursor_getBriefCommentText(SegmentAllocator.ofScope(scope), C);\n@@ -7911,0 +8144,24 @@\n+        static final FunctionDescriptor clang_Cursor_isObjCOptional$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isObjCOptional$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isObjCOptional\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$37.clang_Cursor_isObjCOptional$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_isVariadic$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_isVariadic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_isVariadic\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$37.clang_Cursor_isVariadic$FUNC, false\n+        );\n@@ -7974,28 +8231,0 @@\n-        static final FunctionDescriptor clang_Cursor_getMangling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getMangling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getMangling\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$37.clang_Cursor_getMangling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getCXXManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getCXXManglings$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getCXXManglings\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$37.clang_Cursor_getCXXManglings$FUNC, false\n-        );\n@@ -8004,0 +8233,25 @@\n+    public static MethodHandle clang_Cursor_getMangling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getMangling$MH,\"clang_Cursor_getMangling\");\n+    }\n+    public static MemorySegment clang_Cursor_getMangling ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getMangling$MH, \"clang_Cursor_getMangling\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_Cursor_getMangling ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_Cursor_getMangling(SegmentAllocator.ofScope(scope), x1);\n+    }\n+    public static MethodHandle clang_Cursor_getCXXManglings$MH() {\n+        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getCXXManglings$MH,\"clang_Cursor_getCXXManglings\");\n+    }\n+    public static MemoryAddress clang_Cursor_getCXXManglings ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getCXXManglings$MH, \"clang_Cursor_getCXXManglings\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -8048,22 +8302,0 @@\n-    public static MethodHandle clang_Module_getParent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_Module_getParent$MH,\"clang_Module_getParent\");\n-    }\n-    public static MemoryAddress clang_Module_getParent ( Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Module_getParent$MH, \"clang_Module_getParent\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Module_getName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_Module_getName$MH,\"clang_Module_getName\");\n-    }\n-    public static MemorySegment clang_Module_getName ( Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Module_getName$MH, \"clang_Module_getName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -8072,1 +8304,5 @@\n-        static final FunctionDescriptor clang_Cursor_getObjCManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n+        static final FunctionDescriptor clang_Cursor_getMangling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n@@ -8079,2 +8315,26 @@\n-        static final MethodHandle clang_Cursor_getObjCManglings$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getObjCManglings\",\n+        static final MethodHandle clang_Cursor_getMangling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getMangling\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$38.clang_Cursor_getMangling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getCXXManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getCXXManglings$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getCXXManglings\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$38.clang_Cursor_getCXXManglings$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_getObjCManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_getObjCManglings$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_getObjCManglings\",\n@@ -8113,20 +8373,0 @@\n-        static final FunctionDescriptor clang_Module_getParent$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_getParent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getParent\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$38.clang_Module_getParent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Module_getName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_getName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getName\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$38.clang_Module_getName$FUNC, false\n-        );\n@@ -8135,0 +8375,25 @@\n+    public static MethodHandle clang_Module_getParent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getParent$MH,\"clang_Module_getParent\");\n+    }\n+    public static MemoryAddress clang_Module_getParent ( Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getParent$MH, \"clang_Module_getParent\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_Module_getName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getName$MH,\"clang_Module_getName\");\n+    }\n+    public static MemorySegment clang_Module_getName ( SegmentAllocator allocator,  Addressable Module) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getName$MH, \"clang_Module_getName\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Module.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_Module_getName ( ResourceScope scope,  Addressable Module) {\n+        return clang_Module_getName(SegmentAllocator.ofScope(scope), Module.address());\n+    }\n@@ -8138,1 +8403,1 @@\n-    public static MemorySegment clang_Module_getFullName ( Addressable Module) {\n+    public static MemorySegment clang_Module_getFullName ( SegmentAllocator allocator,  Addressable Module) {\n@@ -8141,1 +8406,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Module.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Module.address());\n@@ -8146,0 +8411,3 @@\n+    public static MemorySegment clang_Module_getFullName ( ResourceScope scope,  Addressable Module) {\n+        return clang_Module_getFullName(SegmentAllocator.ofScope(scope), Module.address());\n+    }\n@@ -8179,22 +8447,0 @@\n-    public static MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isConvertingConstructor$MH,\"clang_CXXConstructor_isConvertingConstructor\");\n-    }\n-    public static int clang_CXXConstructor_isConvertingConstructor ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isConvertingConstructor$MH, \"clang_CXXConstructor_isConvertingConstructor\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXConstructor_isCopyConstructor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isCopyConstructor$MH,\"clang_CXXConstructor_isCopyConstructor\");\n-    }\n-    public static int clang_CXXConstructor_isCopyConstructor ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_CXXConstructor_isCopyConstructor$MH, \"clang_CXXConstructor_isCopyConstructor\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -8203,0 +8449,20 @@\n+        static final FunctionDescriptor clang_Module_getParent$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_getParent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getParent\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$39.clang_Module_getParent$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Module_getName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_Module_getName$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Module_getName\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$39.clang_Module_getName$FUNC, false\n+        );\n@@ -8242,24 +8508,0 @@\n-        static final FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXConstructor_isConvertingConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isConvertingConstructor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$39.clang_CXXConstructor_isConvertingConstructor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXConstructor_isCopyConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isCopyConstructor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$39.clang_CXXConstructor_isCopyConstructor$FUNC, false\n-        );\n@@ -8268,0 +8510,22 @@\n+    public static MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isConvertingConstructor$MH,\"clang_CXXConstructor_isConvertingConstructor\");\n+    }\n+    public static int clang_CXXConstructor_isConvertingConstructor ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isConvertingConstructor$MH, \"clang_CXXConstructor_isConvertingConstructor\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_CXXConstructor_isCopyConstructor$MH() {\n+        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isCopyConstructor$MH,\"clang_CXXConstructor_isCopyConstructor\");\n+    }\n+    public static int clang_CXXConstructor_isCopyConstructor ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isCopyConstructor$MH, \"clang_CXXConstructor_isCopyConstructor\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -8312,22 +8576,0 @@\n-    public static MethodHandle clang_CXXMethod_isPureVirtual$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isPureVirtual$MH,\"clang_CXXMethod_isPureVirtual\");\n-    }\n-    public static int clang_CXXMethod_isPureVirtual ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isPureVirtual$MH, \"clang_CXXMethod_isPureVirtual\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXMethod_isStatic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isStatic$MH,\"clang_CXXMethod_isStatic\");\n-    }\n-    public static int clang_CXXMethod_isStatic ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isStatic$MH, \"clang_CXXMethod_isStatic\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -8336,1 +8578,1 @@\n-        static final FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC = FunctionDescriptor.of(C_INT,\n+        static final FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC = FunctionDescriptor.of(C_INT,\n@@ -8343,2 +8585,2 @@\n-        static final MethodHandle clang_CXXConstructor_isDefaultConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isDefaultConstructor\",\n+        static final MethodHandle clang_CXXConstructor_isConvertingConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isConvertingConstructor\",\n@@ -8346,1 +8588,1 @@\n-            constants$40.clang_CXXConstructor_isDefaultConstructor$FUNC, false\n+            constants$40.clang_CXXConstructor_isConvertingConstructor$FUNC, false\n@@ -8348,1 +8590,1 @@\n-        static final FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC = FunctionDescriptor.of(C_INT,\n+        static final FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC = FunctionDescriptor.of(C_INT,\n@@ -8355,2 +8597,2 @@\n-        static final MethodHandle clang_CXXConstructor_isMoveConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isMoveConstructor\",\n+        static final MethodHandle clang_CXXConstructor_isCopyConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isCopyConstructor\",\n@@ -8358,1 +8600,1 @@\n-            constants$40.clang_CXXConstructor_isMoveConstructor$FUNC, false\n+            constants$40.clang_CXXConstructor_isCopyConstructor$FUNC, false\n@@ -8360,1 +8602,1 @@\n-        static final FunctionDescriptor clang_CXXField_isMutable$FUNC = FunctionDescriptor.of(C_INT,\n+        static final FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC = FunctionDescriptor.of(C_INT,\n@@ -8367,2 +8609,2 @@\n-        static final MethodHandle clang_CXXField_isMutable$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXField_isMutable\",\n+        static final MethodHandle clang_CXXConstructor_isDefaultConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isDefaultConstructor\",\n@@ -8370,1 +8612,1 @@\n-            constants$40.clang_CXXField_isMutable$FUNC, false\n+            constants$40.clang_CXXConstructor_isDefaultConstructor$FUNC, false\n@@ -8372,1 +8614,1 @@\n-        static final FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC = FunctionDescriptor.of(C_INT,\n+        static final FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC = FunctionDescriptor.of(C_INT,\n@@ -8379,2 +8621,2 @@\n-        static final MethodHandle clang_CXXMethod_isDefaulted$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isDefaulted\",\n+        static final MethodHandle clang_CXXConstructor_isMoveConstructor$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXConstructor_isMoveConstructor\",\n@@ -8382,1 +8624,1 @@\n-            constants$40.clang_CXXMethod_isDefaulted$FUNC, false\n+            constants$40.clang_CXXConstructor_isMoveConstructor$FUNC, false\n@@ -8384,1 +8626,1 @@\n-        static final FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC = FunctionDescriptor.of(C_INT,\n+        static final FunctionDescriptor clang_CXXField_isMutable$FUNC = FunctionDescriptor.of(C_INT,\n@@ -8391,2 +8633,2 @@\n-        static final MethodHandle clang_CXXMethod_isPureVirtual$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isPureVirtual\",\n+        static final MethodHandle clang_CXXField_isMutable$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXField_isMutable\",\n@@ -8394,1 +8636,1 @@\n-            constants$40.clang_CXXMethod_isPureVirtual$FUNC, false\n+            constants$40.clang_CXXField_isMutable$FUNC, false\n@@ -8396,1 +8638,1 @@\n-        static final FunctionDescriptor clang_CXXMethod_isStatic$FUNC = FunctionDescriptor.of(C_INT,\n+        static final FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC = FunctionDescriptor.of(C_INT,\n@@ -8403,2 +8645,2 @@\n-        static final MethodHandle clang_CXXMethod_isStatic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isStatic\",\n+        static final MethodHandle clang_CXXMethod_isDefaulted$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isDefaulted\",\n@@ -8406,1 +8648,1 @@\n-            constants$40.clang_CXXMethod_isStatic$FUNC, false\n+            constants$40.clang_CXXMethod_isDefaulted$FUNC, false\n@@ -8410,0 +8652,22 @@\n+    public static MethodHandle clang_CXXMethod_isPureVirtual$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isPureVirtual$MH,\"clang_CXXMethod_isPureVirtual\");\n+    }\n+    public static int clang_CXXMethod_isPureVirtual ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isPureVirtual$MH, \"clang_CXXMethod_isPureVirtual\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_CXXMethod_isStatic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isStatic$MH,\"clang_CXXMethod_isStatic\");\n+    }\n+    public static int clang_CXXMethod_isStatic ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isStatic$MH, \"clang_CXXMethod_isStatic\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -8454,22 +8718,0 @@\n-    public static MethodHandle clang_getTemplateCursorKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_getTemplateCursorKind$MH,\"clang_getTemplateCursorKind\");\n-    }\n-    public static int clang_getTemplateCursorKind ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_getTemplateCursorKind$MH, \"clang_getTemplateCursorKind\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTemplateSpecializationKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_getTemplateSpecializationKind$MH,\"clang_getTemplateSpecializationKind\");\n-    }\n-    public static int clang_getTemplateSpecializationKind ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_getTemplateSpecializationKind$MH, \"clang_getTemplateSpecializationKind\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -8478,0 +8720,24 @@\n+        static final FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXMethod_isPureVirtual$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isPureVirtual\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_CXXMethod_isPureVirtual$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_CXXMethod_isStatic$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_CXXMethod_isStatic$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_CXXMethod_isStatic\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$41.clang_CXXMethod_isStatic$FUNC, false\n+        );\n@@ -8526,24 +8792,0 @@\n-        static final FunctionDescriptor clang_getTemplateCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTemplateCursorKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTemplateCursorKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_getTemplateCursorKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTemplateSpecializationKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTemplateSpecializationKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTemplateSpecializationKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_getTemplateSpecializationKind$FUNC, false\n-        );\n@@ -8552,0 +8794,22 @@\n+    public static MethodHandle clang_getTemplateCursorKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getTemplateCursorKind$MH,\"clang_getTemplateCursorKind\");\n+    }\n+    public static int clang_getTemplateCursorKind ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTemplateCursorKind$MH, \"clang_getTemplateCursorKind\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_getTemplateSpecializationKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$42.clang_getTemplateSpecializationKind$MH,\"clang_getTemplateSpecializationKind\");\n+    }\n+    public static int clang_getTemplateSpecializationKind ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTemplateSpecializationKind$MH, \"clang_getTemplateSpecializationKind\");\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -8555,1 +8819,1 @@\n-    public static MemorySegment clang_getSpecializedCursorTemplate ( MemorySegment C) {\n+    public static MemorySegment clang_getSpecializedCursorTemplate ( SegmentAllocator allocator,  MemorySegment C) {\n@@ -8558,1 +8822,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -8563,0 +8827,3 @@\n+    public static MemorySegment clang_getSpecializedCursorTemplate ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getSpecializedCursorTemplate(SegmentAllocator.ofScope(scope), C);\n+    }\n@@ -8566,1 +8833,1 @@\n-    public static MemorySegment clang_getCursorReferenceNameRange ( MemorySegment C,  int NameFlags,  int PieceIndex) {\n+    public static MemorySegment clang_getCursorReferenceNameRange ( SegmentAllocator allocator,  MemorySegment C,  int NameFlags,  int PieceIndex) {\n@@ -8569,1 +8836,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(C, NameFlags, PieceIndex);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C, NameFlags, PieceIndex);\n@@ -8574,0 +8841,3 @@\n+    public static MemorySegment clang_getCursorReferenceNameRange ( ResourceScope scope,  MemorySegment C,  int NameFlags,  int PieceIndex) {\n+        return clang_getCursorReferenceNameRange(SegmentAllocator.ofScope(scope), C, NameFlags, PieceIndex);\n+    }\n@@ -8608,1 +8878,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));\n+            return seg.asSlice(0, 16);\n@@ -8627,3 +8897,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -8631,2 +8902,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -8634,1 +8905,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -8659,22 +8930,0 @@\n-    public static MethodHandle clang_getTokenSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n-    }\n-    public static MemorySegment clang_getTokenSpelling ( Addressable x0,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTokenSpelling$MH, \"clang_getTokenSpelling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTokenLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getTokenLocation$MH,\"clang_getTokenLocation\");\n-    }\n-    public static MemorySegment clang_getTokenLocation ( Addressable x0,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTokenLocation$MH, \"clang_getTokenLocation\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -8683,0 +8932,24 @@\n+        static final FunctionDescriptor clang_getTemplateCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTemplateCursorKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTemplateCursorKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$42.clang_getTemplateCursorKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTemplateSpecializationKind$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTemplateSpecializationKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTemplateSpecializationKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$42.clang_getTemplateSpecializationKind$FUNC, false\n+        );\n@@ -8741,32 +9014,0 @@\n-        static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-                C_POINTER.withName(\"ptr_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTokenSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTokenSpelling\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$42.clang_getTokenSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTokenLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-                C_POINTER.withName(\"ptr_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTokenLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTokenLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$42.clang_getTokenLocation$FUNC, false\n-        );\n@@ -8775,0 +9016,28 @@\n+    public static MethodHandle clang_getTokenSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n+    }\n+    public static MemorySegment clang_getTokenSpelling ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getTokenSpelling$MH, \"clang_getTokenSpelling\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_getTokenSpelling ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenSpelling(SegmentAllocator.ofScope(scope), x1.address(), x2);\n+    }\n+    public static MethodHandle clang_getTokenLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$43.clang_getTokenLocation$MH,\"clang_getTokenLocation\");\n+    }\n+    public static MemorySegment clang_getTokenLocation ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getTokenLocation$MH, \"clang_getTokenLocation\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_getTokenLocation ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenLocation(SegmentAllocator.ofScope(scope), x1.address(), x2);\n+    }\n@@ -8778,1 +9047,1 @@\n-    public static MemorySegment clang_getTokenExtent ( Addressable x0,  MemorySegment x1) {\n+    public static MemorySegment clang_getTokenExtent ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n@@ -8781,1 +9050,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(x0.address(), x1);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n@@ -8786,0 +9055,3 @@\n+    public static MemorySegment clang_getTokenExtent ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenExtent(SegmentAllocator.ofScope(scope), x1.address(), x2);\n+    }\n@@ -8819,22 +9091,0 @@\n-    public static MethodHandle clang_getCursorKindSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n-    }\n-    public static MemorySegment clang_getCursorKindSpelling ( int Kind) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getCursorKindSpelling$MH, \"clang_getCursorKindSpelling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Kind);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getDefinitionSpellingAndExtent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_getDefinitionSpellingAndExtent$MH,\"clang_getDefinitionSpellingAndExtent\");\n-    }\n-    public static void clang_getDefinitionSpellingAndExtent ( MemorySegment x0,  Addressable startBuf,  Addressable endBuf,  Addressable startLine,  Addressable startColumn,  Addressable endLine,  Addressable endColumn) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getDefinitionSpellingAndExtent$MH, \"clang_getDefinitionSpellingAndExtent\");\n-        try {\n-            mh$.invokeExact(x0, startBuf.address(), endBuf.address(), startLine.address(), startColumn.address(), endLine.address(), endColumn.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -8843,0 +9093,32 @@\n+        static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER,\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n+                C_POINTER.withName(\"ptr_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTokenSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTokenSpelling\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$43.clang_getTokenSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getTokenLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER,\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n+                C_POINTER.withName(\"ptr_data\")\n+            )\n+        );\n+        static final MethodHandle clang_getTokenLocation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getTokenLocation\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$43.clang_getTokenLocation$FUNC, false\n+        );\n@@ -8895,30 +9177,0 @@\n-        static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCursorKindSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorKindSpelling\",\n-            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$43.clang_getCursorKindSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDefinitionSpellingAndExtent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDefinitionSpellingAndExtent\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$43.clang_getDefinitionSpellingAndExtent$FUNC, false\n-        );\n@@ -8927,0 +9179,25 @@\n+    public static MethodHandle clang_getCursorKindSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$44.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n+    }\n+    public static MemorySegment clang_getCursorKindSpelling ( SegmentAllocator allocator,  int Kind) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCursorKindSpelling$MH, \"clang_getCursorKindSpelling\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Kind);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_getCursorKindSpelling ( ResourceScope scope,  int Kind) {\n+        return clang_getCursorKindSpelling(SegmentAllocator.ofScope(scope), Kind);\n+    }\n+    public static MethodHandle clang_getDefinitionSpellingAndExtent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$44.clang_getDefinitionSpellingAndExtent$MH,\"clang_getDefinitionSpellingAndExtent\");\n+    }\n+    public static void clang_getDefinitionSpellingAndExtent ( MemorySegment x0,  Addressable startBuf,  Addressable endBuf,  Addressable startLine,  Addressable startColumn,  Addressable endLine,  Addressable endColumn) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getDefinitionSpellingAndExtent$MH, \"clang_getDefinitionSpellingAndExtent\");\n+        try {\n+            mh$.invokeExact(x0, startBuf.address(), endBuf.address(), startLine.address(), startColumn.address(), endLine.address(), endColumn.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -8944,1 +9221,1 @@\n-        static MemorySegment allocate(clang_executeOnThread$fn fi, NativeScope scope) {\n+        static MemorySegment allocate(clang_executeOnThread$fn fi, ResourceScope scope) {\n@@ -8947,0 +9224,9 @@\n+        static clang_executeOnThread$fn ofAddress(MemoryAddress addr) {\n+            return (jdk.incubator.foreign.MemoryAddress x0) -> {\n+                try {\n+                    constants$44.clang_executeOnThread$fn$MH.invokeExact((Addressable)addr, x0);\n+                } catch (Throwable ex$) {\n+                    throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            };\n+        }\n@@ -9003,3 +9289,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -9007,2 +9294,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -9010,1 +9297,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -9076,33 +9363,0 @@\n-    public static MethodHandle clang_getCompletionChunkKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkKind$MH,\"clang_getCompletionChunkKind\");\n-    }\n-    public static int clang_getCompletionChunkKind ( Addressable completion_string,  int chunk_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkKind$MH, \"clang_getCompletionChunkKind\");\n-        try {\n-            return (int)mh$.invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCompletionChunkText$MH() {\n-        return RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkText$MH,\"clang_getCompletionChunkText\");\n-    }\n-    public static MemorySegment clang_getCompletionChunkText ( Addressable completion_string,  int chunk_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkText$MH, \"clang_getCompletionChunkText\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCompletionChunkCompletionString$MH() {\n-        return RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkCompletionString$MH,\"clang_getCompletionChunkCompletionString\");\n-    }\n-    public static MemoryAddress clang_getCompletionChunkCompletionString ( Addressable completion_string,  int chunk_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCompletionChunkCompletionString$MH, \"clang_getCompletionChunkCompletionString\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -9111,8 +9365,6 @@\n-        static final FunctionDescriptor clang_enableStackTraces$FUNC = FunctionDescriptor.ofVoid();\n-        static final MethodHandle clang_enableStackTraces$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_enableStackTraces\",\n-            \"()V\",\n-            constants$44.clang_enableStackTraces$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_executeOnThread$fn$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n+        static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_INT\n@@ -9120,1 +9372,11 @@\n-        static final FunctionDescriptor clang_executeOnThread$FUNC = FunctionDescriptor.ofVoid(\n+        static final MethodHandle clang_getCursorKindSpelling$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorKindSpelling\",\n+            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$44.clang_getCursorKindSpelling$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC = FunctionDescriptor.ofVoid(\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            ),\n@@ -9123,8 +9385,0 @@\n-            C_INT\n-        );\n-        static final MethodHandle clang_executeOnThread$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_executeOnThread\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-            constants$44.clang_executeOnThread$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionChunkKind$FUNC = FunctionDescriptor.of(C_INT,\n@@ -9132,1 +9386,3 @@\n-            C_INT\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n@@ -9134,4 +9390,4 @@\n-        static final MethodHandle clang_getCompletionChunkKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionChunkKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$44.clang_getCompletionChunkKind$FUNC, false\n+        static final MethodHandle clang_getDefinitionSpellingAndExtent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getDefinitionSpellingAndExtent\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$44.clang_getDefinitionSpellingAndExtent$FUNC, false\n@@ -9139,7 +9395,5 @@\n-        static final FunctionDescriptor clang_getCompletionChunkText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT\n+        static final FunctionDescriptor clang_enableStackTraces$FUNC = FunctionDescriptor.ofVoid();\n+        static final MethodHandle clang_enableStackTraces$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_enableStackTraces\",\n+            \"()V\",\n+            constants$44.clang_enableStackTraces$FUNC, false\n@@ -9147,4 +9401,2 @@\n-        static final MethodHandle clang_getCompletionChunkText$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionChunkText\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$44.clang_getCompletionChunkText$FUNC, false\n+        static final FunctionDescriptor clang_executeOnThread$fn$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n@@ -9152,1 +9404,6 @@\n-        static final FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n+        static final MethodHandle clang_executeOnThread$fn$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$44.clang_executeOnThread$fn$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_executeOnThread$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n@@ -9156,4 +9413,4 @@\n-        static final MethodHandle clang_getCompletionChunkCompletionString$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionChunkCompletionString\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$44.clang_getCompletionChunkCompletionString$FUNC, false\n+        static final MethodHandle clang_executeOnThread$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_executeOnThread\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+            constants$44.clang_executeOnThread$FUNC, false\n@@ -9163,2 +9420,2 @@\n-    public static MethodHandle clang_getNumCompletionChunks$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH,\"clang_getNumCompletionChunks\");\n+    public static MethodHandle clang_getCompletionChunkKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkKind$MH,\"clang_getCompletionChunkKind\");\n@@ -9166,2 +9423,2 @@\n-    public static int clang_getNumCompletionChunks ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH, \"clang_getNumCompletionChunks\");\n+    public static int clang_getCompletionChunkKind ( Addressable completion_string,  int chunk_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkKind$MH, \"clang_getCompletionChunkKind\");\n@@ -9169,1 +9426,1 @@\n-            return (int)mh$.invokeExact(completion_string.address());\n+            return (int)mh$.invokeExact(completion_string.address(), chunk_number);\n@@ -9174,2 +9431,2 @@\n-    public static MethodHandle clang_getCompletionPriority$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH,\"clang_getCompletionPriority\");\n+    public static MethodHandle clang_getCompletionChunkText$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkText$MH,\"clang_getCompletionChunkText\");\n@@ -9177,2 +9434,2 @@\n-    public static int clang_getCompletionPriority ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH, \"clang_getCompletionPriority\");\n+    public static MemorySegment clang_getCompletionChunkText ( SegmentAllocator allocator,  Addressable completion_string,  int chunk_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkText$MH, \"clang_getCompletionChunkText\");\n@@ -9180,1 +9437,1 @@\n-            return (int)mh$.invokeExact(completion_string.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address(), chunk_number);\n@@ -9185,2 +9442,2 @@\n-    public static MethodHandle clang_getCompletionAvailability$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH,\"clang_getCompletionAvailability\");\n+    public static MemorySegment clang_getCompletionChunkText ( ResourceScope scope,  Addressable completion_string,  int chunk_number) {\n+        return clang_getCompletionChunkText(SegmentAllocator.ofScope(scope), completion_string.address(), chunk_number);\n@@ -9188,2 +9445,5 @@\n-    public static int clang_getCompletionAvailability ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH, \"clang_getCompletionAvailability\");\n+    public static MethodHandle clang_getCompletionChunkCompletionString$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkCompletionString$MH,\"clang_getCompletionChunkCompletionString\");\n+    }\n+    public static MemoryAddress clang_getCompletionChunkCompletionString ( Addressable completion_string,  int chunk_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkCompletionString$MH, \"clang_getCompletionChunkCompletionString\");\n@@ -9191,1 +9451,1 @@\n-            return (int)mh$.invokeExact(completion_string.address());\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(completion_string.address(), chunk_number);\n@@ -9196,2 +9456,2 @@\n-    public static MethodHandle clang_getCompletionNumAnnotations$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionNumAnnotations$MH,\"clang_getCompletionNumAnnotations\");\n+    public static MethodHandle clang_getNumCompletionChunks$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH,\"clang_getNumCompletionChunks\");\n@@ -9199,2 +9459,2 @@\n-    public static int clang_getCompletionNumAnnotations ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionNumAnnotations$MH, \"clang_getCompletionNumAnnotations\");\n+    public static int clang_getNumCompletionChunks ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH, \"clang_getNumCompletionChunks\");\n@@ -9207,2 +9467,2 @@\n-    public static MethodHandle clang_getCompletionAnnotation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAnnotation$MH,\"clang_getCompletionAnnotation\");\n+    public static MethodHandle clang_getCompletionPriority$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH,\"clang_getCompletionPriority\");\n@@ -9210,2 +9470,2 @@\n-    public static MemorySegment clang_getCompletionAnnotation ( Addressable completion_string,  int annotation_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAnnotation$MH, \"clang_getCompletionAnnotation\");\n+    public static int clang_getCompletionPriority ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH, \"clang_getCompletionPriority\");\n@@ -9213,1 +9473,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address(), annotation_number);\n+            return (int)mh$.invokeExact(completion_string.address());\n@@ -9218,2 +9478,2 @@\n-    public static MethodHandle clang_getCompletionParent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionParent$MH,\"clang_getCompletionParent\");\n+    public static MethodHandle clang_getCompletionAvailability$MH() {\n+        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH,\"clang_getCompletionAvailability\");\n@@ -9221,2 +9481,2 @@\n-    public static MemorySegment clang_getCompletionParent ( Addressable completion_string,  Addressable kind) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionParent$MH, \"clang_getCompletionParent\");\n+    public static int clang_getCompletionAvailability ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH, \"clang_getCompletionAvailability\");\n@@ -9224,1 +9484,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address(), kind.address());\n+            return (int)mh$.invokeExact(completion_string.address());\n@@ -9231,0 +9491,31 @@\n+        static final FunctionDescriptor clang_getCompletionChunkKind$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionChunkKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionChunkKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$45.clang_getCompletionChunkKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionChunkText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionChunkText$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionChunkText\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$45.clang_getCompletionChunkText$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionChunkCompletionString$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionChunkCompletionString\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$45.clang_getCompletionChunkCompletionString$FUNC, false\n+        );\n@@ -9255,34 +9546,0 @@\n-        static final FunctionDescriptor clang_getCompletionNumAnnotations$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionNumAnnotations$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionNumAnnotations\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$45.clang_getCompletionNumAnnotations$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionAnnotation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCompletionAnnotation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionAnnotation\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$45.clang_getCompletionAnnotation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionParent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionParent\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$45.clang_getCompletionParent$FUNC, false\n-        );\n@@ -9291,0 +9548,39 @@\n+    public static MethodHandle clang_getCompletionNumAnnotations$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumAnnotations$MH,\"clang_getCompletionNumAnnotations\");\n+    }\n+    public static int clang_getCompletionNumAnnotations ( Addressable completion_string) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumAnnotations$MH, \"clang_getCompletionNumAnnotations\");\n+        try {\n+            return (int)mh$.invokeExact(completion_string.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_getCompletionAnnotation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionAnnotation$MH,\"clang_getCompletionAnnotation\");\n+    }\n+    public static MemorySegment clang_getCompletionAnnotation ( SegmentAllocator allocator,  Addressable completion_string,  int annotation_number) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionAnnotation$MH, \"clang_getCompletionAnnotation\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address(), annotation_number);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_getCompletionAnnotation ( ResourceScope scope,  Addressable completion_string,  int annotation_number) {\n+        return clang_getCompletionAnnotation(SegmentAllocator.ofScope(scope), completion_string.address(), annotation_number);\n+    }\n+    public static MethodHandle clang_getCompletionParent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionParent$MH,\"clang_getCompletionParent\");\n+    }\n+    public static MemorySegment clang_getCompletionParent ( SegmentAllocator allocator,  Addressable completion_string,  Addressable kind) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionParent$MH, \"clang_getCompletionParent\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address(), kind.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MemorySegment clang_getCompletionParent ( ResourceScope scope,  Addressable completion_string,  Addressable kind) {\n+        return clang_getCompletionParent(SegmentAllocator.ofScope(scope), completion_string.address(), kind.address());\n+    }\n@@ -9294,1 +9590,1 @@\n-    public static MemorySegment clang_getCompletionBriefComment ( Addressable completion_string) {\n+    public static MemorySegment clang_getCompletionBriefComment ( SegmentAllocator allocator,  Addressable completion_string) {\n@@ -9297,1 +9593,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(completion_string.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address());\n@@ -9302,0 +9598,3 @@\n+    public static MemorySegment clang_getCompletionBriefComment ( ResourceScope scope,  Addressable completion_string) {\n+        return clang_getCompletionBriefComment(SegmentAllocator.ofScope(scope), completion_string.address());\n+    }\n@@ -9356,3 +9655,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -9360,2 +9660,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -9363,1 +9663,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -9377,0 +9677,71 @@\n+    public static class constants$46 {\n+\n+        static final FunctionDescriptor clang_getCompletionNumAnnotations$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionNumAnnotations$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionNumAnnotations\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$46.clang_getCompletionNumAnnotations$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionAnnotation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionAnnotation$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionAnnotation\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$46.clang_getCompletionAnnotation$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionParent$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionParent\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$46.clang_getCompletionParent$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionBriefComment$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_getCompletionBriefComment$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionBriefComment\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$46.clang_getCompletionBriefComment$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCursorCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_getCursorCompletionString$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCursorCompletionString\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$46.clang_getCursorCompletionString$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getCompletionNumFixIts$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_getCompletionNumFixIts$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getCompletionNumFixIts\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+            constants$46.clang_getCompletionNumFixIts$FUNC, false\n+        );\n+    }\n+\n@@ -9378,1 +9749,1 @@\n-        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionFixIt$MH,\"clang_getCompletionFixIt\");\n+        return RuntimeHelper.requireNonNull(constants$47.clang_getCompletionFixIt$MH,\"clang_getCompletionFixIt\");\n@@ -9380,2 +9751,2 @@\n-    public static MemorySegment clang_getCompletionFixIt ( Addressable results,  int completion_index,  int fixit_index,  Addressable replacement_range) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionFixIt$MH, \"clang_getCompletionFixIt\");\n+    public static MemorySegment clang_getCompletionFixIt ( SegmentAllocator allocator,  Addressable results,  int completion_index,  int fixit_index,  Addressable replacement_range) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_getCompletionFixIt$MH, \"clang_getCompletionFixIt\");\n@@ -9383,1 +9754,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(results.address(), completion_index, fixit_index, replacement_range.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, results.address(), completion_index, fixit_index, replacement_range.address());\n@@ -9388,0 +9759,3 @@\n+    public static MemorySegment clang_getCompletionFixIt ( ResourceScope scope,  Addressable results,  int completion_index,  int fixit_index,  Addressable replacement_range) {\n+        return clang_getCompletionFixIt(SegmentAllocator.ofScope(scope), results.address(), completion_index, fixit_index, replacement_range.address());\n+    }\n@@ -9479,1 +9853,1 @@\n-        return RuntimeHelper.requireNonNull(constants$46.clang_defaultCodeCompleteOptions$MH,\"clang_defaultCodeCompleteOptions\");\n+        return RuntimeHelper.requireNonNull(constants$47.clang_defaultCodeCompleteOptions$MH,\"clang_defaultCodeCompleteOptions\");\n@@ -9482,1 +9856,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_defaultCodeCompleteOptions$MH, \"clang_defaultCodeCompleteOptions\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_defaultCodeCompleteOptions$MH, \"clang_defaultCodeCompleteOptions\");\n@@ -9490,1 +9864,1 @@\n-        return RuntimeHelper.requireNonNull(constants$46.clang_codeCompleteAt$MH,\"clang_codeCompleteAt\");\n+        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteAt$MH,\"clang_codeCompleteAt\");\n@@ -9493,1 +9867,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_codeCompleteAt$MH, \"clang_codeCompleteAt\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteAt$MH, \"clang_codeCompleteAt\");\n@@ -9500,35 +9874,35 @@\n-    public static class constants$46 {\n-\n-        static final FunctionDescriptor clang_getCompletionBriefComment$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionBriefComment$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionBriefComment\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$46.clang_getCompletionBriefComment$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorCompletionString$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorCompletionString\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$46.clang_getCursorCompletionString$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionNumFixIts$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCompletionNumFixIts$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionNumFixIts\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$46.clang_getCompletionNumFixIts$FUNC, false\n-        );\n+    public static MethodHandle clang_sortCodeCompletionResults$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH,\"clang_sortCodeCompletionResults\");\n+    }\n+    public static void clang_sortCodeCompletionResults ( Addressable Results,  int NumResults) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH, \"clang_sortCodeCompletionResults\");\n+        try {\n+            mh$.invokeExact(Results.address(), NumResults);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_disposeCodeCompleteResults$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH,\"clang_disposeCodeCompleteResults\");\n+    }\n+    public static void clang_disposeCodeCompleteResults ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH, \"clang_disposeCodeCompleteResults\");\n+        try {\n+            mh$.invokeExact(Results.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_codeCompleteGetNumDiagnostics$MH() {\n+        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH,\"clang_codeCompleteGetNumDiagnostics\");\n+    }\n+    public static int clang_codeCompleteGetNumDiagnostics ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH, \"clang_codeCompleteGetNumDiagnostics\");\n+        try {\n+            return (int)mh$.invokeExact(Results.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static class constants$47 {\n+\n@@ -9548,1 +9922,1 @@\n-            constants$46.clang_getCompletionFixIt$FUNC, false\n+            constants$47.clang_getCompletionFixIt$FUNC, false\n@@ -9554,1 +9928,1 @@\n-            constants$46.clang_defaultCodeCompleteOptions$FUNC, false\n+            constants$47.clang_defaultCodeCompleteOptions$FUNC, false\n@@ -9568,1 +9942,26 @@\n-            constants$46.clang_codeCompleteAt$FUNC, false\n+            constants$47.clang_codeCompleteAt$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_sortCodeCompletionResults$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_INT\n+        );\n+        static final MethodHandle clang_sortCodeCompletionResults$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_sortCodeCompletionResults\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+            constants$47.clang_sortCodeCompletionResults$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_disposeCodeCompleteResults$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_disposeCodeCompleteResults$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_disposeCodeCompleteResults\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$47.clang_disposeCodeCompleteResults$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetNumDiagnostics$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetNumDiagnostics\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$47.clang_codeCompleteGetNumDiagnostics$FUNC, false\n@@ -9572,2 +9971,2 @@\n-    public static MethodHandle clang_sortCodeCompletionResults$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH,\"clang_sortCodeCompletionResults\");\n+    public static MethodHandle clang_codeCompleteGetDiagnostic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetDiagnostic$MH,\"clang_codeCompleteGetDiagnostic\");\n@@ -9575,2 +9974,2 @@\n-    public static void clang_sortCodeCompletionResults ( Addressable Results,  int NumResults) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH, \"clang_sortCodeCompletionResults\");\n+    public static MemoryAddress clang_codeCompleteGetDiagnostic ( Addressable Results,  int Index) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetDiagnostic$MH, \"clang_codeCompleteGetDiagnostic\");\n@@ -9578,1 +9977,1 @@\n-            mh$.invokeExact(Results.address(), NumResults);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Results.address(), Index);\n@@ -9583,2 +9982,2 @@\n-    public static MethodHandle clang_disposeCodeCompleteResults$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH,\"clang_disposeCodeCompleteResults\");\n+    public static MethodHandle clang_codeCompleteGetContexts$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContexts$MH,\"clang_codeCompleteGetContexts\");\n@@ -9586,2 +9985,2 @@\n-    public static void clang_disposeCodeCompleteResults ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH, \"clang_disposeCodeCompleteResults\");\n+    public static long clang_codeCompleteGetContexts ( Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContexts$MH, \"clang_codeCompleteGetContexts\");\n@@ -9589,1 +9988,1 @@\n-            mh$.invokeExact(Results.address());\n+            return (long)mh$.invokeExact(Results.address());\n@@ -9594,2 +9993,2 @@\n-    public static MethodHandle clang_codeCompleteGetNumDiagnostics$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH,\"clang_codeCompleteGetNumDiagnostics\");\n+    public static MethodHandle clang_codeCompleteGetContainerKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerKind$MH,\"clang_codeCompleteGetContainerKind\");\n@@ -9597,2 +9996,2 @@\n-    public static int clang_codeCompleteGetNumDiagnostics ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH, \"clang_codeCompleteGetNumDiagnostics\");\n+    public static int clang_codeCompleteGetContainerKind ( Addressable Results,  Addressable IsIncomplete) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerKind$MH, \"clang_codeCompleteGetContainerKind\");\n@@ -9600,1 +9999,1 @@\n-            return (int)mh$.invokeExact(Results.address());\n+            return (int)mh$.invokeExact(Results.address(), IsIncomplete.address());\n@@ -9605,2 +10004,2 @@\n-    public static MethodHandle clang_codeCompleteGetDiagnostic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetDiagnostic$MH,\"clang_codeCompleteGetDiagnostic\");\n+    public static MethodHandle clang_codeCompleteGetContainerUSR$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH,\"clang_codeCompleteGetContainerUSR\");\n@@ -9608,2 +10007,2 @@\n-    public static MemoryAddress clang_codeCompleteGetDiagnostic ( Addressable Results,  int Index) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetDiagnostic$MH, \"clang_codeCompleteGetDiagnostic\");\n+    public static MemorySegment clang_codeCompleteGetContainerUSR ( SegmentAllocator allocator,  Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH, \"clang_codeCompleteGetContainerUSR\");\n@@ -9611,1 +10010,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Results.address(), Index);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Results.address());\n@@ -9616,2 +10015,2 @@\n-    public static MethodHandle clang_codeCompleteGetContexts$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContexts$MH,\"clang_codeCompleteGetContexts\");\n+    public static MemorySegment clang_codeCompleteGetContainerUSR ( ResourceScope scope,  Addressable Results) {\n+        return clang_codeCompleteGetContainerUSR(SegmentAllocator.ofScope(scope), Results.address());\n@@ -9619,2 +10018,5 @@\n-    public static long clang_codeCompleteGetContexts ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContexts$MH, \"clang_codeCompleteGetContexts\");\n+    public static MethodHandle clang_codeCompleteGetObjCSelector$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH,\"clang_codeCompleteGetObjCSelector\");\n+    }\n+    public static MemorySegment clang_codeCompleteGetObjCSelector ( SegmentAllocator allocator,  Addressable Results) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH, \"clang_codeCompleteGetObjCSelector\");\n@@ -9622,1 +10024,1 @@\n-            return (long)mh$.invokeExact(Results.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Results.address());\n@@ -9627,2 +10029,2 @@\n-    public static MethodHandle clang_codeCompleteGetContainerKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContainerKind$MH,\"clang_codeCompleteGetContainerKind\");\n+    public static MemorySegment clang_codeCompleteGetObjCSelector ( ResourceScope scope,  Addressable Results) {\n+        return clang_codeCompleteGetObjCSelector(SegmentAllocator.ofScope(scope), Results.address());\n@@ -9630,2 +10032,5 @@\n-    public static int clang_codeCompleteGetContainerKind ( Addressable Results,  Addressable IsIncomplete) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetContainerKind$MH, \"clang_codeCompleteGetContainerKind\");\n+    public static MethodHandle clang_getClangVersion$MH() {\n+        return RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH,\"clang_getClangVersion\");\n+    }\n+    public static MemorySegment clang_getClangVersion ( SegmentAllocator allocator) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH, \"clang_getClangVersion\");\n@@ -9633,1 +10038,1 @@\n-            return (int)mh$.invokeExact(Results.address(), IsIncomplete.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -9638,1 +10043,4 @@\n-    public static class constants$47 {\n+    public static MemorySegment clang_getClangVersion ( ResourceScope scope) {\n+        return clang_getClangVersion(SegmentAllocator.ofScope(scope));\n+    }\n+    public static class constants$48 {\n@@ -9640,25 +10048,0 @@\n-        static final FunctionDescriptor clang_sortCodeCompletionResults$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_sortCodeCompletionResults$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_sortCodeCompletionResults\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-            constants$47.clang_sortCodeCompletionResults$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeCodeCompleteResults$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeCodeCompleteResults$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeCodeCompleteResults\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$47.clang_disposeCodeCompleteResults$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetNumDiagnostics$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetNumDiagnostics\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$47.clang_codeCompleteGetNumDiagnostics$FUNC, false\n-        );\n@@ -9672,1 +10055,1 @@\n-            constants$47.clang_codeCompleteGetDiagnostic$FUNC, false\n+            constants$48.clang_codeCompleteGetDiagnostic$FUNC, false\n@@ -9680,1 +10063,1 @@\n-            constants$47.clang_codeCompleteGetContexts$FUNC, false\n+            constants$48.clang_codeCompleteGetContexts$FUNC, false\n@@ -9689,1 +10072,35 @@\n-            constants$47.clang_codeCompleteGetContainerKind$FUNC, false\n+            constants$48.clang_codeCompleteGetContainerKind$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetContainerUSR$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetContainerUSR\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$48.clang_codeCompleteGetContainerUSR$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_codeCompleteGetObjCSelector$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_codeCompleteGetObjCSelector\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$48.clang_codeCompleteGetObjCSelector$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        ));\n+        static final MethodHandle clang_getClangVersion$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getClangVersion\",\n+            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+            constants$48.clang_getClangVersion$FUNC, false\n@@ -9693,33 +10110,0 @@\n-    public static MethodHandle clang_codeCompleteGetContainerUSR$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH,\"clang_codeCompleteGetContainerUSR\");\n-    }\n-    public static MemorySegment clang_codeCompleteGetContainerUSR ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH, \"clang_codeCompleteGetContainerUSR\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Results.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_codeCompleteGetObjCSelector$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH,\"clang_codeCompleteGetObjCSelector\");\n-    }\n-    public static MemorySegment clang_codeCompleteGetObjCSelector ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH, \"clang_codeCompleteGetObjCSelector\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(Results.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getClangVersion$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH,\"clang_getClangVersion\");\n-    }\n-    public static MemorySegment clang_getClangVersion () {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH, \"clang_getClangVersion\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact();\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -9727,1 +10111,1 @@\n-        return RuntimeHelper.requireNonNull(constants$48.clang_toggleCrashRecovery$MH,\"clang_toggleCrashRecovery\");\n+        return RuntimeHelper.requireNonNull(constants$49.clang_toggleCrashRecovery$MH,\"clang_toggleCrashRecovery\");\n@@ -9730,1 +10114,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_toggleCrashRecovery$MH, \"clang_toggleCrashRecovery\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_toggleCrashRecovery$MH, \"clang_toggleCrashRecovery\");\n@@ -9741,1 +10125,4 @@\n-            return RuntimeHelper.upcallStub(CXInclusionVisitor.class, fi, constants$48.CXInclusionVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\");\n+            return RuntimeHelper.upcallStub(CXInclusionVisitor.class, fi, constants$49.CXInclusionVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\");\n+        }\n+        static MemorySegment allocate(CXInclusionVisitor fi, ResourceScope scope) {\n+            return RuntimeHelper.upcallStub(CXInclusionVisitor.class, fi, constants$49.CXInclusionVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n@@ -9743,2 +10130,8 @@\n-        static MemorySegment allocate(CXInclusionVisitor fi, NativeScope scope) {\n-            return RuntimeHelper.upcallStub(CXInclusionVisitor.class, fi, constants$48.CXInclusionVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+        static CXInclusionVisitor ofAddress(MemoryAddress addr) {\n+            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {\n+                try {\n+                    constants$49.CXInclusionVisitor$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);\n+                } catch (Throwable ex$) {\n+                    throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            };\n@@ -9749,1 +10142,1 @@\n-        return RuntimeHelper.requireNonNull(constants$48.clang_getInclusions$MH,\"clang_getInclusions\");\n+        return RuntimeHelper.requireNonNull(constants$49.clang_getInclusions$MH,\"clang_getInclusions\");\n@@ -9752,1 +10145,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_getInclusions$MH, \"clang_getInclusions\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_getInclusions$MH, \"clang_getInclusions\");\n@@ -9780,1 +10173,23 @@\n-    public static class constants$48 {\n+    public static MethodHandle clang_Cursor_Evaluate$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH,\"clang_Cursor_Evaluate\");\n+    }\n+    public static MemoryAddress clang_Cursor_Evaluate ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH, \"clang_Cursor_Evaluate\");\n+        try {\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_EvalResult_getKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH,\"clang_EvalResult_getKind\");\n+    }\n+    public static int clang_EvalResult_getKind ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH, \"clang_EvalResult_getKind\");\n+        try {\n+            return (int)mh$.invokeExact(E.address());\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static class constants$49 {\n@@ -9782,34 +10197,0 @@\n-        static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetContainerUSR$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetContainerUSR\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$48.clang_codeCompleteGetContainerUSR$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetObjCSelector$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetObjCSelector\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$48.clang_codeCompleteGetObjCSelector$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ));\n-        static final MethodHandle clang_getClangVersion$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getClangVersion\",\n-            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$48.clang_getClangVersion$FUNC, false\n-        );\n@@ -9822,1 +10203,1 @@\n-            constants$48.clang_toggleCrashRecovery$FUNC, false\n+            constants$49.clang_toggleCrashRecovery$FUNC, false\n@@ -9830,0 +10211,4 @@\n+        static final MethodHandle CXInclusionVisitor$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$49.CXInclusionVisitor$FUNC, false\n+        );\n@@ -9838,1 +10223,21 @@\n-            constants$48.clang_getInclusions$FUNC, false\n+            constants$49.clang_getInclusions$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_Cursor_Evaluate$FUNC = FunctionDescriptor.of(C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            )\n+        );\n+        static final MethodHandle clang_Cursor_Evaluate$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_Cursor_Evaluate\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$49.clang_Cursor_Evaluate$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getKind$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getKind$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getKind\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$49.clang_EvalResult_getKind$FUNC, false\n@@ -9842,2 +10247,2 @@\n-    public static MethodHandle clang_Cursor_Evaluate$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH,\"clang_Cursor_Evaluate\");\n+    public static MethodHandle clang_EvalResult_getAsInt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsInt$MH,\"clang_EvalResult_getAsInt\");\n@@ -9845,2 +10250,2 @@\n-    public static MemoryAddress clang_Cursor_Evaluate ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH, \"clang_Cursor_Evaluate\");\n+    public static int clang_EvalResult_getAsInt ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsInt$MH, \"clang_EvalResult_getAsInt\");\n@@ -9848,1 +10253,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n+            return (int)mh$.invokeExact(E.address());\n@@ -9853,2 +10258,2 @@\n-    public static MethodHandle clang_EvalResult_getKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH,\"clang_EvalResult_getKind\");\n+    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n@@ -9856,2 +10261,2 @@\n-    public static int clang_EvalResult_getKind ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH, \"clang_EvalResult_getKind\");\n+    public static long clang_EvalResult_getAsLongLong ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsLongLong$MH, \"clang_EvalResult_getAsLongLong\");\n@@ -9859,1 +10264,1 @@\n-            return (int)mh$.invokeExact(E.address());\n+            return (long)mh$.invokeExact(E.address());\n@@ -9864,2 +10269,2 @@\n-    public static MethodHandle clang_EvalResult_getAsInt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsInt$MH,\"clang_EvalResult_getAsInt\");\n+    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n@@ -9867,2 +10272,2 @@\n-    public static int clang_EvalResult_getAsInt ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsInt$MH, \"clang_EvalResult_getAsInt\");\n+    public static int clang_EvalResult_isUnsignedInt ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_isUnsignedInt$MH, \"clang_EvalResult_isUnsignedInt\");\n@@ -9875,2 +10280,2 @@\n-    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n+    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsUnsigned$MH,\"clang_EvalResult_getAsUnsigned\");\n@@ -9878,2 +10283,2 @@\n-    public static long clang_EvalResult_getAsLongLong ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsLongLong$MH, \"clang_EvalResult_getAsLongLong\");\n+    public static long clang_EvalResult_getAsUnsigned ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsUnsigned$MH, \"clang_EvalResult_getAsUnsigned\");\n@@ -9886,2 +10291,2 @@\n-    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n+    public static MethodHandle clang_EvalResult_getAsDouble$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH,\"clang_EvalResult_getAsDouble\");\n@@ -9889,2 +10294,2 @@\n-    public static int clang_EvalResult_isUnsignedInt ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_isUnsignedInt$MH, \"clang_EvalResult_isUnsignedInt\");\n+    public static double clang_EvalResult_getAsDouble ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH, \"clang_EvalResult_getAsDouble\");\n@@ -9892,1 +10297,1 @@\n-            return (int)mh$.invokeExact(E.address());\n+            return (double)mh$.invokeExact(E.address());\n@@ -9897,2 +10302,2 @@\n-    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsUnsigned$MH,\"clang_EvalResult_getAsUnsigned\");\n+    public static MethodHandle clang_EvalResult_getAsStr$MH() {\n+        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH,\"clang_EvalResult_getAsStr\");\n@@ -9900,2 +10305,2 @@\n-    public static long clang_EvalResult_getAsUnsigned ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getAsUnsigned$MH, \"clang_EvalResult_getAsUnsigned\");\n+    public static MemoryAddress clang_EvalResult_getAsStr ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH, \"clang_EvalResult_getAsStr\");\n@@ -9903,1 +10308,1 @@\n-            return (long)mh$.invokeExact(E.address());\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(E.address());\n@@ -9908,1 +10313,1 @@\n-    public static class constants$49 {\n+    public static class constants$50 {\n@@ -9910,20 +10315,0 @@\n-        static final FunctionDescriptor clang_Cursor_Evaluate$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_Evaluate$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_Evaluate\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$49.clang_Cursor_Evaluate$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_getKind$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$49.clang_EvalResult_getKind$FUNC, false\n-        );\n@@ -9936,1 +10321,1 @@\n-            constants$49.clang_EvalResult_getAsInt$FUNC, false\n+            constants$50.clang_EvalResult_getAsInt$FUNC, false\n@@ -9944,1 +10329,1 @@\n-            constants$49.clang_EvalResult_getAsLongLong$FUNC, false\n+            constants$50.clang_EvalResult_getAsLongLong$FUNC, false\n@@ -9952,1 +10337,1 @@\n-            constants$49.clang_EvalResult_isUnsignedInt$FUNC, false\n+            constants$50.clang_EvalResult_isUnsignedInt$FUNC, false\n@@ -9960,1 +10345,17 @@\n-            constants$49.clang_EvalResult_getAsUnsigned$FUNC, false\n+            constants$50.clang_EvalResult_getAsUnsigned$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC = FunctionDescriptor.of(C_DOUBLE,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getAsDouble$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getAsDouble\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)D\",\n+            constants$50.clang_EvalResult_getAsDouble$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_EvalResult_getAsStr$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_getAsStr\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$50.clang_EvalResult_getAsStr$FUNC, false\n@@ -9964,22 +10365,0 @@\n-    public static MethodHandle clang_EvalResult_getAsDouble$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH,\"clang_EvalResult_getAsDouble\");\n-    }\n-    public static double clang_EvalResult_getAsDouble ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH, \"clang_EvalResult_getAsDouble\");\n-        try {\n-            return (double)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getAsStr$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH,\"clang_EvalResult_getAsStr\");\n-    }\n-    public static MemoryAddress clang_EvalResult_getAsStr ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH, \"clang_EvalResult_getAsStr\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -9987,1 +10366,1 @@\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_dispose$MH,\"clang_EvalResult_dispose\");\n+        return RuntimeHelper.requireNonNull(constants$51.clang_EvalResult_dispose$MH,\"clang_EvalResult_dispose\");\n@@ -9990,1 +10369,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_dispose$MH, \"clang_EvalResult_dispose\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_EvalResult_dispose$MH, \"clang_EvalResult_dispose\");\n@@ -9998,1 +10377,1 @@\n-        return RuntimeHelper.requireNonNull(constants$50.clang_getRemappings$MH,\"clang_getRemappings\");\n+        return RuntimeHelper.requireNonNull(constants$51.clang_getRemappings$MH,\"clang_getRemappings\");\n@@ -10001,1 +10380,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_getRemappings$MH, \"clang_getRemappings\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_getRemappings$MH, \"clang_getRemappings\");\n@@ -10009,1 +10388,1 @@\n-        return RuntimeHelper.requireNonNull(constants$50.clang_getRemappingsFromFileList$MH,\"clang_getRemappingsFromFileList\");\n+        return RuntimeHelper.requireNonNull(constants$51.clang_getRemappingsFromFileList$MH,\"clang_getRemappingsFromFileList\");\n@@ -10012,1 +10391,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_getRemappingsFromFileList$MH, \"clang_getRemappingsFromFileList\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_getRemappingsFromFileList$MH, \"clang_getRemappingsFromFileList\");\n@@ -10020,1 +10399,1 @@\n-        return RuntimeHelper.requireNonNull(constants$50.clang_remap_getNumFiles$MH,\"clang_remap_getNumFiles\");\n+        return RuntimeHelper.requireNonNull(constants$51.clang_remap_getNumFiles$MH,\"clang_remap_getNumFiles\");\n@@ -10023,1 +10402,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_remap_getNumFiles$MH, \"clang_remap_getNumFiles\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_remap_getNumFiles$MH, \"clang_remap_getNumFiles\");\n@@ -10030,53 +10409,0 @@\n-    public static class constants$50 {\n-\n-        static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC = FunctionDescriptor.of(C_DOUBLE,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getAsDouble$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getAsDouble\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)D\",\n-            constants$50.clang_EvalResult_getAsDouble$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getAsStr$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getAsStr\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$50.clang_EvalResult_getAsStr$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_dispose$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_dispose$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_dispose\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$50.clang_EvalResult_dispose$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getRemappings$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getRemappings$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getRemappings\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$50.clang_getRemappings$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getRemappingsFromFileList$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getRemappingsFromFileList$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getRemappingsFromFileList\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$50.clang_getRemappingsFromFileList$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_remap_getNumFiles$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_remap_getNumFiles$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_remap_getNumFiles\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$50.clang_remap_getNumFiles$FUNC, false\n-        );\n-    }\n-\n@@ -10136,0 +10462,17 @@\n+        static final FunctionDescriptor visit$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+        static final MethodHandle visit$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            CXCursorAndRangeVisitor.visit$FUNC, false\n+        );\n@@ -10140,1 +10483,4 @@\n-                return RuntimeHelper.upcallStub(visit.class, fi, constants$51.visit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n+                return RuntimeHelper.upcallStub(visit.class, fi, CXCursorAndRangeVisitor.visit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n+            }\n+            static MemorySegment allocate(visit fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(visit.class, fi, CXCursorAndRangeVisitor.visit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n@@ -10142,2 +10488,8 @@\n-            static MemorySegment allocate(visit fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(visit.class, fi, constants$51.visit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n+            static visit ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2) -> {\n+                    try {\n+                        return (int)CXCursorAndRangeVisitor.visit$MH.invokeExact((Addressable)addr, x0, x1, x2);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -10163,0 +10515,3 @@\n+        public static CXCursorAndRangeVisitor.visit visit (MemorySegment segment) {\n+            return CXCursorAndRangeVisitor.visit.ofAddress(visit$get(segment));\n+        }\n@@ -10164,3 +10519,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10168,2 +10524,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10171,1 +10527,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10183,33 +10539,0 @@\n-    public static MethodHandle clang_findReferencesInFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_findReferencesInFile$MH,\"clang_findReferencesInFile\");\n-    }\n-    public static int clang_findReferencesInFile ( MemorySegment cursor,  Addressable file,  MemorySegment visitor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_findReferencesInFile$MH, \"clang_findReferencesInFile\");\n-        try {\n-            return (int)mh$.invokeExact(cursor, file.address(), visitor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_findIncludesInFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_findIncludesInFile$MH,\"clang_findIncludesInFile\");\n-    }\n-    public static int clang_findIncludesInFile ( Addressable TU,  Addressable file,  MemorySegment visitor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_findIncludesInFile$MH, \"clang_findIncludesInFile\");\n-        try {\n-            return (int)mh$.invokeExact(TU.address(), file.address(), visitor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public interface CXCursorAndRangeVisitorBlock {\n-\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n-        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi) {\n-            return RuntimeHelper.upcallStub(CXCursorAndRangeVisitorBlock.class, fi, constants$51.CXCursorAndRangeVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n-        }\n-        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi, NativeScope scope) {\n-            return RuntimeHelper.upcallStub(CXCursorAndRangeVisitorBlock.class, fi, constants$51.CXCursorAndRangeVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n-        }\n-    }\n-\n@@ -10218,4 +10541,1 @@\n-        static final FunctionDescriptor clang_remap_getFilenames$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n+        static final FunctionDescriptor clang_EvalResult_dispose$FUNC = FunctionDescriptor.ofVoid(\n@@ -10224,4 +10544,4 @@\n-        static final MethodHandle clang_remap_getFilenames$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_remap_getFilenames\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$51.clang_remap_getFilenames$FUNC, false\n+        static final MethodHandle clang_EvalResult_dispose$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_EvalResult_dispose\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$51.clang_EvalResult_dispose$FUNC, false\n@@ -10229,1 +10549,1 @@\n-        static final FunctionDescriptor clang_remap_dispose$FUNC = FunctionDescriptor.ofVoid(\n+        static final FunctionDescriptor clang_getRemappings$FUNC = FunctionDescriptor.of(C_POINTER,\n@@ -10232,4 +10552,4 @@\n-        static final MethodHandle clang_remap_dispose$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_remap_dispose\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$51.clang_remap_dispose$FUNC, false\n+        static final MethodHandle clang_getRemappings$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getRemappings\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$51.clang_getRemappings$FUNC, false\n@@ -10237,1 +10557,1 @@\n-        static final FunctionDescriptor visit$FUNC = FunctionDescriptor.of(C_INT,\n+        static final FunctionDescriptor clang_getRemappingsFromFileList$FUNC = FunctionDescriptor.of(C_POINTER,\n@@ -10239,10 +10559,1 @@\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n+            C_INT\n@@ -10250,11 +10561,4 @@\n-        static final FunctionDescriptor clang_findReferencesInFile$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"context\"),\n-                C_POINTER.withName(\"visit\")\n-            ).withName(\"CXCursorAndRangeVisitor\")\n+        static final MethodHandle clang_getRemappingsFromFileList$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_getRemappingsFromFileList\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            constants$51.clang_getRemappingsFromFileList$FUNC, false\n@@ -10262,4 +10566,2 @@\n-        static final MethodHandle clang_findReferencesInFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findReferencesInFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$51.clang_findReferencesInFile$FUNC, false\n+        static final FunctionDescriptor clang_remap_getNumFiles$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER\n@@ -10267,2 +10569,6 @@\n-        static final FunctionDescriptor clang_findIncludesInFile$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n+        static final MethodHandle clang_remap_getNumFiles$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_remap_getNumFiles\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$51.clang_remap_getNumFiles$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_remap_getFilenames$FUNC = FunctionDescriptor.ofVoid(\n@@ -10270,4 +10576,3 @@\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"context\"),\n-                C_POINTER.withName(\"visit\")\n-            ).withName(\"CXCursorAndRangeVisitor\")\n+            C_INT,\n+            C_POINTER,\n+            C_POINTER\n@@ -10275,4 +10580,4 @@\n-        static final MethodHandle clang_findIncludesInFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findIncludesInFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$51.clang_findIncludesInFile$FUNC, false\n+        static final MethodHandle clang_remap_getFilenames$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_remap_getFilenames\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$51.clang_remap_getFilenames$FUNC, false\n@@ -10280,11 +10585,7 @@\n-        static final FunctionDescriptor CXCursorAndRangeVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n+        static final FunctionDescriptor clang_remap_dispose$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER\n+        );\n+        static final MethodHandle clang_remap_dispose$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_remap_dispose\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            constants$51.clang_remap_dispose$FUNC, false\n@@ -10294,0 +10595,42 @@\n+    public static MethodHandle clang_findReferencesInFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFile$MH,\"clang_findReferencesInFile\");\n+    }\n+    public static int clang_findReferencesInFile ( MemorySegment cursor,  Addressable file,  MemorySegment visitor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFile$MH, \"clang_findReferencesInFile\");\n+        try {\n+            return (int)mh$.invokeExact(cursor, file.address(), visitor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public static MethodHandle clang_findIncludesInFile$MH() {\n+        return RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFile$MH,\"clang_findIncludesInFile\");\n+    }\n+    public static int clang_findIncludesInFile ( Addressable TU,  Addressable file,  MemorySegment visitor) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFile$MH, \"clang_findIncludesInFile\");\n+        try {\n+            return (int)mh$.invokeExact(TU.address(), file.address(), visitor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+    public interface CXCursorAndRangeVisitorBlock {\n+\n+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n+        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi) {\n+            return RuntimeHelper.upcallStub(CXCursorAndRangeVisitorBlock.class, fi, constants$52.CXCursorAndRangeVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n+        }\n+        static MemorySegment allocate(CXCursorAndRangeVisitorBlock fi, ResourceScope scope) {\n+            return RuntimeHelper.upcallStub(CXCursorAndRangeVisitorBlock.class, fi, constants$52.CXCursorAndRangeVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n+        }\n+        static CXCursorAndRangeVisitorBlock ofAddress(MemoryAddress addr) {\n+            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1) -> {\n+                try {\n+                    return (int)constants$52.CXCursorAndRangeVisitorBlock$MH.invokeExact((Addressable)addr, x0, x1);\n+                } catch (Throwable ex$) {\n+                    throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            };\n+        }\n+    }\n+\n@@ -10327,1 +10670,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));\n+            return seg.asSlice(0, 16);\n@@ -10346,3 +10689,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10350,2 +10694,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10353,1 +10697,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10375,1 +10719,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 24));\n+            return seg.asSlice(0, 24);\n@@ -10458,3 +10802,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10462,2 +10807,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10465,1 +10810,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10517,1 +10862,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 24));\n+            return seg.asSlice(16, 24);\n@@ -10536,3 +10881,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10540,2 +10886,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10543,1 +10889,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10687,1 +11033,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));\n+            return seg.asSlice(8, 32);\n@@ -10690,1 +11036,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));\n+            return seg.asSlice(40, 24);\n@@ -10693,3 +11039,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10697,2 +11044,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10700,1 +11047,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10805,1 +11152,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 32));\n+            return seg.asSlice(32, 32);\n@@ -10840,3 +11187,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10844,2 +11192,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10847,1 +11195,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10863,1 +11211,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 32));\n+            return seg.asSlice(0, 32);\n@@ -10866,3 +11214,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10870,2 +11219,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10873,1 +11222,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10928,1 +11277,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 32));\n+            return seg.asSlice(16, 32);\n@@ -10931,1 +11280,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 24));\n+            return seg.asSlice(48, 24);\n@@ -10934,3 +11283,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -10938,2 +11288,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -10941,1 +11291,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -10991,1 +11341,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));\n+            return seg.asSlice(8, 32);\n@@ -10994,1 +11344,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));\n+            return seg.asSlice(40, 24);\n@@ -11157,3 +11507,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11161,2 +11512,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11164,1 +11515,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11210,3 +11561,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11214,2 +11566,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11217,1 +11569,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11255,1 +11607,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));\n+            return seg.asSlice(8, 32);\n@@ -11258,1 +11610,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));\n+            return seg.asSlice(40, 24);\n@@ -11261,3 +11613,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11265,2 +11618,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11268,1 +11621,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11306,1 +11659,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));\n+            return seg.asSlice(8, 32);\n@@ -11309,1 +11662,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));\n+            return seg.asSlice(40, 24);\n@@ -11312,3 +11665,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11316,2 +11670,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11319,1 +11673,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11365,3 +11719,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11369,2 +11724,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11372,1 +11727,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11434,3 +11789,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11438,2 +11794,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11441,1 +11797,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11497,1 +11853,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 32));\n+            return seg.asSlice(16, 32);\n@@ -11500,1 +11856,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 24));\n+            return seg.asSlice(48, 24);\n@@ -11519,3 +11875,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11523,2 +11880,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11526,1 +11883,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11588,3 +11945,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11592,2 +11950,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11595,1 +11953,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11658,3 +12016,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11662,2 +12021,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11665,1 +12024,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11709,1 +12068,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));\n+            return seg.asSlice(8, 32);\n@@ -11712,1 +12071,1 @@\n-            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 24));\n+            return seg.asSlice(40, 24);\n@@ -11779,3 +12138,4 @@\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -11783,2 +12143,2 @@\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -11786,47 +12146,1 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n-    }\n-\n-    public static class constants$52 {\n-\n-        static final FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_findReferencesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findReferencesInFileWithBlock\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$52.clang_findReferencesInFileWithBlock$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_findIncludesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findIncludesInFileWithBlock\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$52.clang_findIncludesInFileWithBlock$FUNC, false\n-        );\n-        static final FunctionDescriptor abortQuery$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final FunctionDescriptor diagnostic$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final FunctionDescriptor enteredMainFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final FunctionDescriptor ppIncludedFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -11850,0 +12164,8 @@\n+        static final FunctionDescriptor abortQuery$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle abortQuery$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            IndexerCallbacks.abortQuery$FUNC, false\n+        );\n@@ -11854,1 +12176,1 @@\n-                return RuntimeHelper.upcallStub(abortQuery.class, fi, constants$52.abortQuery$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+                return RuntimeHelper.upcallStub(abortQuery.class, fi, IndexerCallbacks.abortQuery$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n@@ -11856,2 +12178,11 @@\n-            static MemorySegment allocate(abortQuery fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(abortQuery.class, fi, constants$52.abortQuery$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n+            static MemorySegment allocate(abortQuery fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(abortQuery.class, fi, IndexerCallbacks.abortQuery$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n+            }\n+            static abortQuery ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+                    try {\n+                        return (int)IndexerCallbacks.abortQuery$MH.invokeExact((Addressable)addr, x0, x1);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -11877,0 +12208,12 @@\n+        public static IndexerCallbacks.abortQuery abortQuery (MemorySegment segment) {\n+            return IndexerCallbacks.abortQuery.ofAddress(abortQuery$get(segment));\n+        }\n+        static final FunctionDescriptor diagnostic$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle diagnostic$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            IndexerCallbacks.diagnostic$FUNC, false\n+        );\n@@ -11881,1 +12224,4 @@\n-                return RuntimeHelper.upcallStub(diagnostic.class, fi, constants$52.diagnostic$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+                return RuntimeHelper.upcallStub(diagnostic.class, fi, IndexerCallbacks.diagnostic$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+            }\n+            static MemorySegment allocate(diagnostic fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(diagnostic.class, fi, IndexerCallbacks.diagnostic$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n@@ -11883,2 +12229,8 @@\n-            static MemorySegment allocate(diagnostic fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(diagnostic.class, fi, constants$52.diagnostic$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+            static diagnostic ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n+                    try {\n+                        IndexerCallbacks.diagnostic$MH.invokeExact((Addressable)addr, x0, x1, x2);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -11904,0 +12256,12 @@\n+        public static IndexerCallbacks.diagnostic diagnostic (MemorySegment segment) {\n+            return IndexerCallbacks.diagnostic.ofAddress(diagnostic$get(segment));\n+        }\n+        static final FunctionDescriptor enteredMainFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle enteredMainFile$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            IndexerCallbacks.enteredMainFile$FUNC, false\n+        );\n@@ -11908,1 +12272,1 @@\n-                return RuntimeHelper.upcallStub(enteredMainFile.class, fi, constants$52.enteredMainFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+                return RuntimeHelper.upcallStub(enteredMainFile.class, fi, IndexerCallbacks.enteredMainFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n@@ -11910,2 +12274,11 @@\n-            static MemorySegment allocate(enteredMainFile fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(enteredMainFile.class, fi, constants$52.enteredMainFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            static MemorySegment allocate(enteredMainFile fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(enteredMainFile.class, fi, IndexerCallbacks.enteredMainFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            }\n+            static enteredMainFile ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n+                    try {\n+                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.enteredMainFile$MH.invokeExact((Addressable)addr, x0, x1, x2);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -11931,0 +12304,11 @@\n+        public static IndexerCallbacks.enteredMainFile enteredMainFile (MemorySegment segment) {\n+            return IndexerCallbacks.enteredMainFile.ofAddress(enteredMainFile$get(segment));\n+        }\n+        static final FunctionDescriptor ppIncludedFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle ppIncludedFile$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            IndexerCallbacks.ppIncludedFile$FUNC, false\n+        );\n@@ -11935,1 +12319,1 @@\n-                return RuntimeHelper.upcallStub(ppIncludedFile.class, fi, constants$52.ppIncludedFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+                return RuntimeHelper.upcallStub(ppIncludedFile.class, fi, IndexerCallbacks.ppIncludedFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n@@ -11937,2 +12321,11 @@\n-            static MemorySegment allocate(ppIncludedFile fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(ppIncludedFile.class, fi, constants$52.ppIncludedFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            static MemorySegment allocate(ppIncludedFile fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(ppIncludedFile.class, fi, IndexerCallbacks.ppIncludedFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            }\n+            static ppIncludedFile ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+                    try {\n+                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.ppIncludedFile$MH.invokeExact((Addressable)addr, x0, x1);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -11958,0 +12351,11 @@\n+        public static IndexerCallbacks.ppIncludedFile ppIncludedFile (MemorySegment segment) {\n+            return IndexerCallbacks.ppIncludedFile.ofAddress(ppIncludedFile$get(segment));\n+        }\n+        static final FunctionDescriptor importedASTFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle importedASTFile$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            IndexerCallbacks.importedASTFile$FUNC, false\n+        );\n@@ -11962,1 +12366,1 @@\n-                return RuntimeHelper.upcallStub(importedASTFile.class, fi, constants$53.importedASTFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+                return RuntimeHelper.upcallStub(importedASTFile.class, fi, IndexerCallbacks.importedASTFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n@@ -11964,2 +12368,11 @@\n-            static MemorySegment allocate(importedASTFile fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(importedASTFile.class, fi, constants$53.importedASTFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            static MemorySegment allocate(importedASTFile fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(importedASTFile.class, fi, IndexerCallbacks.importedASTFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            }\n+            static importedASTFile ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+                    try {\n+                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.importedASTFile$MH.invokeExact((Addressable)addr, x0, x1);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -11985,0 +12398,11 @@\n+        public static IndexerCallbacks.importedASTFile importedASTFile (MemorySegment segment) {\n+            return IndexerCallbacks.importedASTFile.ofAddress(importedASTFile$get(segment));\n+        }\n+        static final FunctionDescriptor startedTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle startedTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+            IndexerCallbacks.startedTranslationUnit$FUNC, false\n+        );\n@@ -11989,1 +12413,1 @@\n-                return RuntimeHelper.upcallStub(startedTranslationUnit.class, fi, constants$53.startedTranslationUnit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n+                return RuntimeHelper.upcallStub(startedTranslationUnit.class, fi, IndexerCallbacks.startedTranslationUnit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n@@ -11991,2 +12415,11 @@\n-            static MemorySegment allocate(startedTranslationUnit fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(startedTranslationUnit.class, fi, constants$53.startedTranslationUnit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            static MemorySegment allocate(startedTranslationUnit fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(startedTranslationUnit.class, fi, IndexerCallbacks.startedTranslationUnit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+            }\n+            static startedTranslationUnit ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+                    try {\n+                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.startedTranslationUnit$MH.invokeExact((Addressable)addr, x0, x1);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -12012,0 +12445,11 @@\n+        public static IndexerCallbacks.startedTranslationUnit startedTranslationUnit (MemorySegment segment) {\n+            return IndexerCallbacks.startedTranslationUnit.ofAddress(startedTranslationUnit$get(segment));\n+        }\n+        static final FunctionDescriptor indexDeclaration$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle indexDeclaration$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            IndexerCallbacks.indexDeclaration$FUNC, false\n+        );\n@@ -12016,1 +12460,1 @@\n-                return RuntimeHelper.upcallStub(indexDeclaration.class, fi, constants$53.indexDeclaration$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+                return RuntimeHelper.upcallStub(indexDeclaration.class, fi, IndexerCallbacks.indexDeclaration$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n@@ -12018,2 +12462,11 @@\n-            static MemorySegment allocate(indexDeclaration fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(indexDeclaration.class, fi, constants$53.indexDeclaration$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+            static MemorySegment allocate(indexDeclaration fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(indexDeclaration.class, fi, IndexerCallbacks.indexDeclaration$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+            }\n+            static indexDeclaration ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+                    try {\n+                        IndexerCallbacks.indexDeclaration$MH.invokeExact((Addressable)addr, x0, x1);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -12039,0 +12492,11 @@\n+        public static IndexerCallbacks.indexDeclaration indexDeclaration (MemorySegment segment) {\n+            return IndexerCallbacks.indexDeclaration.ofAddress(indexDeclaration$get(segment));\n+        }\n+        static final FunctionDescriptor indexEntityReference$FUNC = FunctionDescriptor.ofVoid(\n+            C_POINTER,\n+            C_POINTER\n+        );\n+        static final MethodHandle indexEntityReference$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+            IndexerCallbacks.indexEntityReference$FUNC, false\n+        );\n@@ -12043,1 +12507,1 @@\n-                return RuntimeHelper.upcallStub(indexEntityReference.class, fi, constants$53.indexEntityReference$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n+                return RuntimeHelper.upcallStub(indexEntityReference.class, fi, IndexerCallbacks.indexEntityReference$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n@@ -12045,2 +12509,11 @@\n-            static MemorySegment allocate(indexEntityReference fi, NativeScope scope) {\n-                return RuntimeHelper.upcallStub(indexEntityReference.class, fi, constants$53.indexEntityReference$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+            static MemorySegment allocate(indexEntityReference fi, ResourceScope scope) {\n+                return RuntimeHelper.upcallStub(indexEntityReference.class, fi, IndexerCallbacks.indexEntityReference$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+            }\n+            static indexEntityReference ofAddress(MemoryAddress addr) {\n+                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+                    try {\n+                        IndexerCallbacks.indexEntityReference$MH.invokeExact((Addressable)addr, x0, x1);\n+                    } catch (Throwable ex$) {\n+                        throw new AssertionError(\"should not reach here\", ex$);\n+                    }\n+                };\n@@ -12066,7 +12539,2 @@\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }\n-        public static MemorySegment allocateArray(int len, NativeScope scope) {\n-            return scope.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocatePointer(NativeScope scope) {\n-            return scope.allocate(C_POINTER);\n+        public static IndexerCallbacks.indexEntityReference indexEntityReference (MemorySegment segment) {\n+            return IndexerCallbacks.indexEntityReference.ofAddress(indexEntityReference$get(segment));\n@@ -12074,8 +12542,5 @@\n-        public static MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }\n-    }\n-\n-    public interface CXFieldVisitor {\n-\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemoryAddress x1);\n-        static MemorySegment allocate(CXFieldVisitor fi) {\n-            return RuntimeHelper.upcallStub(CXFieldVisitor.class, fi, constants$53.CXFieldVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+        public static long sizeof() { return $LAYOUT().byteSize(); }\n+        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n@@ -12083,2 +12548,2 @@\n-        static MemorySegment allocate(CXFieldVisitor fi, NativeScope scope) {\n-            return RuntimeHelper.upcallStub(CXFieldVisitor.class, fi, constants$53.CXFieldVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+            return allocateArray(len, SegmentAllocator.ofScope(scope));\n@@ -12086,0 +12551,1 @@\n+        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n@@ -12088,1 +12554,1 @@\n-    public static class constants$53 {\n+    public static class constants$52 {\n@@ -12090,1 +12556,6 @@\n-        static final FunctionDescriptor importedASTFile$FUNC = FunctionDescriptor.of(C_POINTER,\n+        static final FunctionDescriptor clang_findReferencesInFile$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            ),\n@@ -12092,1 +12563,4 @@\n-            C_POINTER\n+            MemoryLayout.structLayout(\n+                C_POINTER.withName(\"context\"),\n+                C_POINTER.withName(\"visit\")\n+            ).withName(\"CXCursorAndRangeVisitor\")\n@@ -12094,1 +12568,6 @@\n-        static final FunctionDescriptor startedTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+        static final MethodHandle clang_findReferencesInFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findReferencesInFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$52.clang_findReferencesInFile$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_findIncludesInFile$FUNC = FunctionDescriptor.of(C_INT,\n@@ -12096,1 +12575,5 @@\n-            C_POINTER\n+            C_POINTER,\n+            MemoryLayout.structLayout(\n+                C_POINTER.withName(\"context\"),\n+                C_POINTER.withName(\"visit\")\n+            ).withName(\"CXCursorAndRangeVisitor\")\n@@ -12098,1 +12581,27 @@\n-        static final FunctionDescriptor indexDeclaration$FUNC = FunctionDescriptor.ofVoid(\n+        static final MethodHandle clang_findIncludesInFile$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findIncludesInFile\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$52.clang_findIncludesInFile$FUNC, false\n+        );\n+        static final FunctionDescriptor CXCursorAndRangeVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            ),\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+                C_INT.withName(\"begin_int_data\"),\n+                C_INT.withName(\"end_int_data\")\n+            )\n+        );\n+        static final MethodHandle CXCursorAndRangeVisitorBlock$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+            constants$52.CXCursorAndRangeVisitorBlock$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            MemoryLayout.structLayout(\n+                C_INT.withName(\"kind\"),\n+                C_INT.withName(\"xdata\"),\n+                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+            ),\n@@ -12102,1 +12611,7 @@\n-        static final FunctionDescriptor indexEntityReference$FUNC = FunctionDescriptor.ofVoid(\n+        static final MethodHandle clang_findReferencesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findReferencesInFileWithBlock\",\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$52.clang_findReferencesInFileWithBlock$FUNC, false\n+        );\n+        static final FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n+            C_POINTER,\n@@ -12106,0 +12621,29 @@\n+        static final MethodHandle clang_findIncludesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n+            LIBRARIES, \"clang_findIncludesInFileWithBlock\",\n+            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$52.clang_findIncludesInFileWithBlock$FUNC, false\n+        );\n+    }\n+\n+    public interface CXFieldVisitor {\n+\n+        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemoryAddress x1);\n+        static MemorySegment allocate(CXFieldVisitor fi) {\n+            return RuntimeHelper.upcallStub(CXFieldVisitor.class, fi, constants$53.CXFieldVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+        }\n+        static MemorySegment allocate(CXFieldVisitor fi, ResourceScope scope) {\n+            return RuntimeHelper.upcallStub(CXFieldVisitor.class, fi, constants$53.CXFieldVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n+        }\n+        static CXFieldVisitor ofAddress(MemoryAddress addr) {\n+            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+                try {\n+                    return (int)constants$53.CXFieldVisitor$MH.invokeExact((Addressable)addr, x0, x1);\n+                } catch (Throwable ex$) {\n+                    throw new AssertionError(\"should not reach here\", ex$);\n+                }\n+            };\n+        }\n+    }\n+\n+    public static class constants$53 {\n+\n@@ -12114,0 +12658,4 @@\n+        static final MethodHandle CXFieldVisitor$MH = RuntimeHelper.downcallHandle(\n+            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+            constants$53.CXFieldVisitor$FUNC, false\n+        );\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":2257,"deletions":1709,"binary":false,"changes":3966,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-    public static MemorySegment clang_indexLoc_getCXSourceLocation ( MemorySegment loc) {\n+    public static MemorySegment clang_indexLoc_getCXSourceLocation ( SegmentAllocator allocator,  MemorySegment loc) {\n@@ -517,1 +517,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(loc);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, loc);\n@@ -522,0 +522,3 @@\n+    public static MemorySegment clang_indexLoc_getCXSourceLocation ( ResourceScope scope,  MemorySegment loc) {\n+        return clang_indexLoc_getCXSourceLocation(SegmentAllocator.ofScope(scope), loc);\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h_1.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+\/\/ Generated by jextract\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/NativeScope.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-\n@@ -65,0 +64,2 @@\n+    private final static SegmentAllocator THROWING_ALLOCATOR = (x, y) -> { throw new AssertionError(\"should not reach here\"); };\n+\n@@ -82,19 +83,1 @@\n-        return lookup(LIBRARIES, name).map(s ->\n-            s.address().asSegment(layout.byteSize(), ResourceScope.newImplicitScope())).orElse(null);\n-    }\n-\n-    final static SegmentAllocator DEFAULT_ALLOCATOR = (x, y) -> MemorySegment.allocateNative(x, y, ResourceScope.newImplicitScope());\n-\n-    \/\/ This class can be used to debug usages of functions requiring allocation - disabled by default\n-    final static class DumpAllocator implements SegmentAllocator {\n-\n-        boolean reported = false;\n-\n-        @Override\n-        public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-            if (!reported) {\n-                new AssertionError(\"allocator required?\").printStackTrace();\n-            }\n-            reported = true;\n-            return DEFAULT_ALLOCATOR.allocate(bytesSize, bytesAlignment);\n-        }\n+        return lookup(LIBRARIES, name).map(s -> s.address().asSegment(layout.byteSize(), ResourceScope.newImplicitScope())).orElse(null);\n@@ -103,3 +86,0 @@\n-    \/\/ switch this to \"true\" to enable verbose analysis of function requiring allocation\n-    static boolean DEBUG_ALLOCATOR = false;\n-\n@@ -110,2 +90,0 @@\n-                    SegmentAllocator allocator = mt.returnType().equals(MemorySegment.class) && DEBUG_ALLOCATOR ?\n-                            new DumpAllocator() : DEFAULT_ALLOCATOR;\n@@ -114,1 +92,1 @@\n-                        LINKER.downcallHandle(addr, allocator, mt, fdesc);\n+                        LINKER.downcallHandle(addr, mt, fdesc);\n@@ -118,8 +96,6 @@\n-    static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic, SegmentAllocator allocator) {\n-        return lookup(LIBRARIES, name).map(\n-                addr -> {\n-                    MethodType mt = MethodType.fromMethodDescriptorString(desc, LOADER);\n-                    return variadic ?\n-                            VarargsInvoker.make(addr, mt, fdesc) :\n-                            LINKER.downcallHandle(addr, allocator, mt, fdesc);\n-                }).orElse(null);\n+    static final MethodHandle downcallHandle(String desc, FunctionDescriptor fdesc, boolean variadic) {\n+        if (variadic) {\n+            throw new AssertionError(\"Cannot get here!\");\n+        }\n+        MethodType mt = MethodType.fromMethodDescriptorString(desc, LOADER);\n+        return LINKER.downcallHandle(mt, fdesc);\n@@ -136,1 +112,1 @@\n-    private static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n@@ -147,6 +123,2 @@\n-    static final MemorySegment nonCloseableNonTransferableSegment(MemorySegment seg) {\n-        return seg;\n-    }\n-\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements) {\n-        return addr.asSegment(numElements * layout.byteSize(), ResourceScope.newImplicitScope());\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, ResourceScope scope) {\n+         return addr.asSegment(numElements * layout.byteSize(), scope);\n@@ -176,1 +148,1 @@\n-                INVOKE_MH = MethodHandles.lookup().findVirtual(VarargsInvoker.class, \"invoke\", MethodType.methodType(Object.class, Object[].class));\n+                INVOKE_MH = MethodHandles.lookup().findVirtual(VarargsInvoker.class, \"invoke\", MethodType.methodType(Object.class, SegmentAllocator.class, Object[].class));\n@@ -184,2 +156,7 @@\n-            return INVOKE_MH.bindTo(invoker).asCollector(Object[].class, type.parameterCount())\n-                    .asType(type);\n+            MethodHandle handle = INVOKE_MH.bindTo(invoker).asCollector(Object[].class, type.parameterCount());\n+            if (type.returnType().equals(MemorySegment.class)) {\n+                type = type.insertParameterTypes(0, SegmentAllocator.class);\n+            } else {\n+                handle = MethodHandles.insertArguments(handle, 0, THROWING_ALLOCATOR);\n+            }\n+            return handle.asType(type);\n@@ -188,1 +165,1 @@\n-        private Object invoke(Object[] args) throws Throwable {\n+        private Object invoke(SegmentAllocator allocator, Object[] args) throws Throwable {\n@@ -217,1 +194,1 @@\n-            MethodHandle mh = LINKER.downcallHandle(symbol, mt, f);\n+            MethodHandle mh = LINKER.downcallHandle(symbol, allocator, mt, f);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":23,"deletions":46,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-            append(\"return (\" + functionInfo.methodType().returnType().getName() + \")\");\n+            append(\"return \");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}