{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    static final JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();\n+    static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n@@ -243,1 +243,1 @@\n-        throw new UnsupportedOperationException(\"Not a mapped segment\");\n+        throw notAMappedSegment();\n@@ -248,1 +248,1 @@\n-        throw new UnsupportedOperationException(\"Not a mapped segment\");\n+        throw notAMappedSegment();\n@@ -253,1 +253,1 @@\n-        throw new UnsupportedOperationException(\"Not a mapped segment\");\n+        throw notAMappedSegment();\n@@ -258,0 +258,4 @@\n+        throw notAMappedSegment();\n+    }\n+\n+    private static UnsupportedOperationException notAMappedSegment() {\n@@ -464,3 +468,3 @@\n-        long bbAddress = nioAccess.getBufferAddress(bb);\n-        Object base = nioAccess.getBufferBase(bb);\n-        UnmapperProxy unmapper = nioAccess.unmapper(bb);\n+        long bbAddress = NIO_ACCESS.getBufferAddress(bb);\n+        Object base = NIO_ACCESS.getBufferBase(bb);\n+        UnmapperProxy unmapper = NIO_ACCESS.unmapper(bb);\n@@ -472,1 +476,1 @@\n-        AbstractMemorySegmentImpl bufferSegment = (AbstractMemorySegmentImpl)nioAccess.bufferSegment(bb);\n+        AbstractMemorySegmentImpl bufferSegment = (AbstractMemorySegmentImpl) NIO_ACCESS.bufferSegment(bb);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -179,1 +179,3 @@\n-                returnLayout().map(Object::toString).orElse(\"v\"));\n+                returnLayout()\n+                        .map(Object::toString)\n+                        .orElse(\"v\"));\n@@ -231,1 +233,3 @@\n-                    Stream.concat(descriptor.argumentLayouts().stream(), Arrays.stream(argLayouts).map(Objects::requireNonNull)).toList());\n+                    Stream.concat(descriptor.argumentLayouts().stream(), Arrays.stream(argLayouts)\n+                            .map(Objects::requireNonNull))\n+                            .toList());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/FunctionDescriptorImpl.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,0 +54,3 @@\n+    private static final long[] EMPTY_STRIDES = new long[0];\n+    private static final long[] EMPTY_BOUNDS = new long[0];\n+\n@@ -261,3 +264,0 @@\n-    private static final long[] EMPTY_STRIDES = new long[0];\n-    private static final long[] EMPTY_BOUNDS = new long[0];\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        return nioAccess.newMappedByteBuffer(unmapper, min, (int)length, null,\n+        return NIO_ACCESS.newMappedByteBuffer(unmapper, min, (int)length, null,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,4 +58,0 @@\n-    final ResourceList resourceList;\n-    final Cleaner.Cleanable cleanable;\n-    final Thread owner;\n-\n@@ -66,2 +62,0 @@\n-    int state = OPEN;\n-\n@@ -69,0 +63,11 @@\n+    static final int MAX_FORKS = Integer.MAX_VALUE;\n+\n+    public static final MemorySessionImpl GLOBAL = new GlobalSessionImpl(null);\n+\n+    static final ScopedMemoryAccess.ScopedAccessError ALREADY_CLOSED = new ScopedMemoryAccess.ScopedAccessError(MemorySessionImpl::alreadyClosed);\n+    static final ScopedMemoryAccess.ScopedAccessError WRONG_THREAD = new ScopedMemoryAccess.ScopedAccessError(MemorySessionImpl::wrongThread);\n+\n+    final ResourceList resourceList;\n+    final Cleaner.Cleanable cleanable;\n+    final Thread owner;\n+    int state = OPEN;\n@@ -78,2 +83,0 @@\n-    static final int MAX_FORKS = Integer.MAX_VALUE;\n-\n@@ -299,2 +302,0 @@\n-    public static final MemorySessionImpl GLOBAL = new GlobalSessionImpl(null);\n-\n@@ -470,3 +471,0 @@\n-    static final ScopedMemoryAccess.ScopedAccessError ALREADY_CLOSED = new ScopedMemoryAccess.ScopedAccessError(MemorySessionImpl::alreadyClosed);\n-\n-    static final ScopedMemoryAccess.ScopedAccessError WRONG_THREAD = new ScopedMemoryAccess.ScopedAccessError(MemorySessionImpl::wrongThread);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -45,11 +45,1 @@\n-    private static final Unsafe unsafe = Unsafe.getUnsafe();\n-\n-    @Override\n-    public long address() {\n-        return min;\n-    }\n-\n-    @Override\n-    public Optional<Object> array() {\n-        return Optional.empty();\n-    }\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -60,1 +50,0 @@\n-\n@@ -71,0 +60,10 @@\n+    @Override\n+    public long address() {\n+        return min;\n+    }\n+\n+    @Override\n+    public Optional<Object> array() {\n+        return Optional.empty();\n+    }\n+\n@@ -79,1 +78,1 @@\n-        return nioAccess.newDirectByteBuffer(min, (int) this.length, null,\n+        return NIO_ACCESS.newDirectByteBuffer(min, (int) this.length, null,\n@@ -109,1 +108,1 @@\n-            byteAlignment = Math.max(byteAlignment, nioAccess.pageSize());\n+            byteAlignment = Math.max(byteAlignment, NIO_ACCESS.pageSize());\n@@ -115,2 +114,3 @@\n-        nioAccess.reserveMemory(alignedSize, byteSize);\n-        long buf = unsafe.allocateMemory(alignedSize);\n+        NIO_ACCESS.reserveMemory(alignedSize, byteSize);\n+\n+        long buf = UNSAFE.allocateMemory(alignedSize);\n@@ -118,1 +118,1 @@\n-            unsafe.setMemory(buf, alignedSize, (byte)0);\n+            UNSAFE.setMemory(buf, alignedSize, (byte)0);\n@@ -126,2 +126,2 @@\n-                unsafe.freeMemory(buf);\n-                nioAccess.unreserveMemory(alignedSize, byteSize);\n+                UNSAFE.freeMemory(buf);\n+                NIO_ACCESS.unreserveMemory(alignedSize, byteSize);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -80,0 +80,3 @@\n+    private Utils() {\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,4 @@\n-public class BindingInterpreter {\n+public final class BindingInterpreter {\n+\n+    private BindingInterpreter() {\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingInterpreter.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    public final CallingSequenceBuilder addArgumentBindings(Class<?> carrier, MemoryLayout layout,\n+    public CallingSequenceBuilder addArgumentBindings(Class<?> carrier, MemoryLayout layout,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -392,1 +392,1 @@\n-    public static non-sealed class EmptyVaList implements VaList {\n+    public static final class EmptyVaList implements VaList {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,0 +64,3 @@\n+    private UpcallLinker() {\n+    }\n+\n@@ -199,1 +202,1 @@\n-    private static record CallRegs(VMStorage[] argRegs, VMStorage[] retRegs) {}\n+    private record CallRegs(VMStorage[] argRegs, VMStorage[] retRegs) {}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallLinker.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    public Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {\n+    public final Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {\n@@ -152,1 +152,1 @@\n-    public MethodHandle arrangeDowncall(MethodType mt, FunctionDescriptor cDesc) {\n+    public final MethodHandle arrangeDowncall(MethodType mt, FunctionDescriptor cDesc) {\n@@ -164,1 +164,1 @@\n-    public MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, MemorySession session) {\n+    public final MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, MemorySession session) {\n@@ -413,1 +413,1 @@\n-    class BoxBindingCalculator extends BindingCalculator {\n+    final class BoxBindingCalculator extends BindingCalculator {\n@@ -431,1 +431,1 @@\n-                case STRUCT_REGISTER: {\n+                case STRUCT_REGISTER -> {\n@@ -435,1 +435,1 @@\n-                        StorageClasses.INTEGER, layout);\n+                            StorageClasses.INTEGER, layout);\n@@ -452,1 +452,0 @@\n-                    break;\n@@ -454,1 +453,1 @@\n-                case STRUCT_REFERENCE: {\n+                case STRUCT_REFERENCE -> {\n@@ -457,1 +456,1 @@\n-                        StorageClasses.INTEGER, AArch64.C_POINTER);\n+                            StorageClasses.INTEGER, AArch64.C_POINTER);\n@@ -460,1 +459,0 @@\n-                    break;\n@@ -462,1 +460,1 @@\n-                case STRUCT_HFA: {\n+                case STRUCT_HFA -> {\n@@ -465,1 +463,1 @@\n-                    GroupLayout group = (GroupLayout)layout;\n+                    GroupLayout group = (GroupLayout) layout;\n@@ -467,1 +465,1 @@\n-                        StorageClasses.VECTOR, group.memberLayouts().size());\n+                            StorageClasses.VECTOR, group.memberLayouts().size());\n@@ -483,1 +481,0 @@\n-                    break;\n@@ -485,1 +482,1 @@\n-                case POINTER: {\n+                case POINTER -> {\n@@ -487,1 +484,1 @@\n-                        storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                            storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n@@ -490,1 +487,0 @@\n-                    break;\n@@ -492,1 +488,1 @@\n-                case INTEGER: {\n+                case INTEGER -> {\n@@ -494,1 +490,1 @@\n-                        storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n+                            storageCalculator.nextStorage(StorageClasses.INTEGER, layout);\n@@ -496,1 +492,0 @@\n-                    break;\n@@ -498,1 +493,1 @@\n-                case FLOAT: {\n+                case FLOAT -> {\n@@ -500,1 +495,1 @@\n-                        storageCalculator.nextStorage(StorageClasses.VECTOR, layout);\n+                            storageCalculator.nextStorage(StorageClasses.VECTOR, layout);\n@@ -502,1 +497,0 @@\n-                    break;\n@@ -504,2 +498,1 @@\n-                default:\n-                    throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n+                default -> throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -155,1 +155,3 @@\n-                IntStream.range(0, numX87Outputs).mapToObj(X86_64Architecture::x87Storage).toArray(VMStorage[]::new)\n+                IntStream.range(0, numX87Outputs)\n+                        .mapToObj(X86_64Architecture::x87Storage)\n+                        .toArray(VMStorage[]::new)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    static class StorageCalculator {\n+    static final class StorageCalculator {\n@@ -219,8 +219,5 @@\n-            switch (type) {\n-                case StorageClasses.INTEGER:\n-                    return nIntegerReg;\n-                case StorageClasses.VECTOR:\n-                    return nVectorReg;\n-                default:\n-                    throw new IllegalStateException();\n-            }\n+            return switch (type) {\n+                case StorageClasses.INTEGER -> nIntegerReg;\n+                case StorageClasses.VECTOR -> nVectorReg;\n+                default -> throw new IllegalStateException();\n+            };\n@@ -231,8 +228,3 @@\n-                case StorageClasses.INTEGER:\n-                    nIntegerReg++;\n-                    break;\n-                case StorageClasses.VECTOR:\n-                    nVectorReg++;\n-                    break;\n-                default:\n-                    throw new IllegalStateException();\n+                case StorageClasses.INTEGER -> nIntegerReg++;\n+                case StorageClasses.VECTOR -> nVectorReg++;\n+                default -> throw new IllegalStateException();\n@@ -264,1 +256,1 @@\n-                case STRUCT: {\n+                case STRUCT -> {\n@@ -281,1 +273,0 @@\n-                    break;\n@@ -283,1 +274,1 @@\n-                case POINTER: {\n+                case POINTER -> {\n@@ -287,3 +278,2 @@\n-                    break;\n-                }\n-                case INTEGER: {\n+                                    }\n+                case INTEGER -> {\n@@ -292,1 +282,0 @@\n-                    break;\n@@ -294,1 +283,1 @@\n-                case FLOAT: {\n+                case FLOAT -> {\n@@ -297,1 +286,0 @@\n-                    break;\n@@ -299,2 +287,1 @@\n-                default:\n-                    throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n+                default -> throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n@@ -317,1 +304,1 @@\n-                case STRUCT: {\n+                case STRUCT -> {\n@@ -333,1 +320,0 @@\n-                    break;\n@@ -335,1 +321,1 @@\n-                case POINTER: {\n+                case POINTER -> {\n@@ -339,1 +325,0 @@\n-                    break;\n@@ -341,1 +326,1 @@\n-                case INTEGER: {\n+                case INTEGER -> {\n@@ -344,1 +329,0 @@\n-                    break;\n@@ -346,1 +330,1 @@\n-                case FLOAT: {\n+                case FLOAT -> {\n@@ -349,1 +333,0 @@\n-                    break;\n@@ -351,2 +334,1 @@\n-                default:\n-                    throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n+                default -> throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":20,"deletions":38,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -86,14 +86,0 @@\n-    \/**\n-     * {@return {@code true}, if this group layout is a struct layout}\n-     *\/\n-    public final boolean isStruct() {\n-        return kind == Kind.STRUCT;\n-    }\n-\n-    \/**\n-     * {@return {@code true}, if this group layout is a union layout}\n-     *\/\n-    public final boolean isUnion() {\n-        return kind == Kind.UNION;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+            System.out.println(\"Using layout: \" + alignedLayout);\n@@ -78,0 +79,1 @@\n+                    System.out.println(\"Using session: \" + session);\n@@ -80,1 +82,4 @@\n-                        MemorySegment address = allocationFunction.allocate(allocator, alignedLayout, value);\n+                        if (allocationFactory == AllocationFactory.NATIVE_ALLOCATOR && layout.toString().contains(\"I32\")) {\n+                            System.out.format(\"%d %n\", i);\n+                        }\n+                        MemorySegment address =  allocationFunction.allocate(allocator, alignedLayout, value);\n@@ -242,2 +247,2 @@\n-                    (AllocationFunction.OfByte) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfByte) SegmentAllocator::allocate, \"OfByte\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -245,2 +250,2 @@\n-                    (AllocationFunction.OfShort) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfShort) SegmentAllocator::allocate, \"OfShort\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -248,2 +253,2 @@\n-                    (AllocationFunction.OfChar) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfChar) SegmentAllocator::allocate, \"OfChar\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -252,2 +257,2 @@\n-                    (AllocationFunction.OfInt) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfInt) SegmentAllocator::allocate, \"OfInt\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -255,2 +260,2 @@\n-                    (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfFloat) SegmentAllocator::allocate, \"OfFloat\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -258,2 +263,2 @@\n-                    (AllocationFunction.OfLong) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfLong) SegmentAllocator::allocate,\"OfLong\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -261,2 +266,2 @@\n-                    (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfDouble) SegmentAllocator::allocate,\"OfDouble\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -264,2 +269,2 @@\n-                    (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfAddress) SegmentAllocator::allocate,\"OfAddress\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -268,2 +273,2 @@\n-                    (AllocationFunction.OfShort) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfShort) SegmentAllocator::allocate,\"OfShort\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -271,2 +276,2 @@\n-                    (AllocationFunction.OfChar) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfChar) SegmentAllocator::allocate,\"OfChar\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -275,2 +280,2 @@\n-                    (AllocationFunction.OfInt) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfInt) SegmentAllocator::allocate,\"OfInt\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -278,2 +283,2 @@\n-                    (AllocationFunction.OfFloat) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfFloat) SegmentAllocator::allocate,\"OfFloat\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -281,2 +286,2 @@\n-                    (AllocationFunction.OfLong) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfLong) SegmentAllocator::allocate,\"OfLong\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -284,2 +289,2 @@\n-                    (AllocationFunction.OfDouble) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfDouble) SegmentAllocator::allocate,\"OfDouble\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -287,2 +292,2 @@\n-                    (AllocationFunction.OfAddress) SegmentAllocator::allocate,\n-                    (Function<MemoryLayout, VarHandle>)l -> l.varHandle() });\n+                    new NamedAllocationFunction<>((AllocationFunction.OfAddress) SegmentAllocator::allocate, \"OfAddress\"),\n+                    (Function<MemoryLayout, VarHandle>) MemoryLayout::varHandle});\n@@ -297,2 +302,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_BYTE,\n-                    (AllocationFunction.OfByteArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_BYTE,\n+                    new NamedAllocationFunction<>((AllocationFunction.OfByteArray) SegmentAllocator::allocateArray, \"OfByteArray\"),\n@@ -300,2 +306,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_CHAR.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfCharArray) SegmentAllocator::allocateArray, \"OfCharArray\"),\n@@ -303,2 +310,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_SHORT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfShortArray) SegmentAllocator::allocateArray, \"OfShortArray\"),\n@@ -308,1 +316,1 @@\n-                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n+                    new NamedAllocationFunction<>((AllocationFunction.OfIntArray) SegmentAllocator::allocateArray, \"OfIntArray\"),\n@@ -310,2 +318,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray, \"OfFloatArray\"),\n@@ -313,2 +322,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_LONG.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfLongArray) SegmentAllocator::allocateArray, \"OfLongArray\"),\n@@ -316,2 +326,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n-                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.LITTLE_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\"OfDoubleArray\"),\n@@ -320,2 +331,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n-                    (AllocationFunction.OfCharArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_CHAR.withOrder(ByteOrder.BIG_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfCharArray) SegmentAllocator::allocateArray, \"OfCharArray\"),\n@@ -323,2 +335,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n-                    (AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_SHORT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfShortArray) SegmentAllocator::allocateArray,\"OfShortArray\"),\n@@ -328,1 +341,1 @@\n-                    (AllocationFunction.OfIntArray) SegmentAllocator::allocateArray,\n+                    new NamedAllocationFunction<>((AllocationFunction.OfIntArray) SegmentAllocator::allocateArray, \"OfIntArray\"),\n@@ -330,2 +343,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n-                    (AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_FLOAT.withOrder(ByteOrder.BIG_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfFloatArray) SegmentAllocator::allocateArray,\"OfFloatArray\"),\n@@ -333,2 +347,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n-                    (AllocationFunction.OfLongArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_LONG.withOrder(ByteOrder.BIG_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfLongArray) SegmentAllocator::allocateArray, \"OfLongArray\"),\n@@ -336,2 +351,3 @@\n-            arrayAllocations.add(new Object[] { factory, ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n-                    (AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\n+            arrayAllocations.add(new Object[] { factory,\n+                    ValueLayout.JAVA_DOUBLE.withOrder(ByteOrder.BIG_ENDIAN),\n+                    new NamedAllocationFunction<>((AllocationFunction.OfDoubleArray) SegmentAllocator::allocateArray,\"OfDoubleArray\"),\n@@ -365,0 +381,14 @@\n+    record NamedAllocationFunction<X, L extends ValueLayout>(AllocationFunction<X, L> allocationFunction,\n+                                                             String name)\n+            implements AllocationFunction<X, L> {\n+        @Override\n+        public MemorySegment allocate(SegmentAllocator allocator, L layout, X value) {\n+            return allocationFunction.allocate(allocator, layout, value);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":85,"deletions":55,"binary":false,"changes":140,"status":"modified"}]}