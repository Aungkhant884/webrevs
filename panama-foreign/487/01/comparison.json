{"files":[{"patch":"@@ -217,1 +217,1 @@\n-    static final MethodHandleDesc MH_PADDING = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofPaddingBits\",\n+    static final MethodHandleDesc MH_PADDING = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"paddingLayout\",\n@@ -220,1 +220,1 @@\n-    static final MethodHandleDesc MH_VALUE = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofValueBits\",\n+    static final MethodHandleDesc MH_VALUE = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"valueLayout\",\n@@ -223,1 +223,1 @@\n-    static final MethodHandleDesc MH_SIZED_SEQUENCE = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofSequence\",\n+    static final MethodHandleDesc MH_SIZED_SEQUENCE = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"sequenceLayout\",\n@@ -226,1 +226,1 @@\n-    static final MethodHandleDesc MH_UNSIZED_SEQUENCE = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofSequence\",\n+    static final MethodHandleDesc MH_UNSIZED_SEQUENCE = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"sequenceLayout\",\n@@ -229,1 +229,1 @@\n-    static final MethodHandleDesc MH_STRUCT = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofStruct\",\n+    static final MethodHandleDesc MH_STRUCT = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"structLayout\",\n@@ -232,1 +232,1 @@\n-    static final MethodHandleDesc MH_UNION = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"ofUnion\",\n+    static final MethodHandleDesc MH_UNION = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_MEMORY_LAYOUT, \"unionLayout\",\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/AbstractLayout.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.foreign.MemoryScope;\n@@ -38,1 +37,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -288,1 +286,1 @@\n-        return toCString(str, SegmentAllocator.scoped(scope));\n+        return toCString(str, SegmentAllocator.ofScope(scope));\n@@ -327,1 +325,1 @@\n-        return toCString(str, charset, SegmentAllocator.scoped(scope));\n+        return toCString(str, charset, SegmentAllocator.ofScope(scope));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n- * (see {@link MemoryLayout#ofStruct(MemoryLayout...)}); conversely, if all member layouts are laid out at the same starting offset,\n- * the resulting group layout is said to be a <em>union<\/em> (see {@link MemoryLayout#ofUnion(MemoryLayout...)}).\n+ * (see {@link MemoryLayout#structLayout(MemoryLayout...)}); conversely, if all member layouts are laid out at the same starting offset,\n+ * the resulting group layout is said to be a <em>union<\/em> (see {@link MemoryLayout#unionLayout(MemoryLayout...)}).\n@@ -121,2 +121,2 @@\n-     * been passed to one of the group layout factory methods (see {@link MemoryLayout#ofStruct(MemoryLayout...)},\n-     * {@link MemoryLayout#ofUnion(MemoryLayout...)}).\n+     * been passed to one of the group layout factory methods (see {@link MemoryLayout#structLayout(MemoryLayout...)},\n+     * {@link MemoryLayout#unionLayout(MemoryLayout...)}).\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-    MemorySegment segment = MemorySegment.allocateNative(2);\n+    MemorySegment segment = MemorySegment.allocateNative(2, newImplicitScope());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * segment whose contents should be ignored, and which are primarily present for alignment reasons (see {@link MemoryLayout#ofPaddingBits(long)}).\n+ * segment whose contents should be ignored, and which are primarily present for alignment reasons (see {@link MemoryLayout#paddingLayout(long)}).\n@@ -221,1 +221,1 @@\n-     * Value layouts (see {@link ValueLayout}) and padding layouts (see {@link MemoryLayout#ofPaddingBits(long)})\n+     * Value layouts (see {@link ValueLayout}) and padding layouts (see {@link MemoryLayout#paddingLayout(long)})\n@@ -589,1 +589,1 @@\n-     * Is this a padding layout (e.g. a layout created from {@link #ofPaddingBits(long)}) ?\n+     * Is this a padding layout (e.g. a layout created from {@link #paddingLayout(long)}) ?\n@@ -733,1 +733,1 @@\n-    static MemoryLayout ofPaddingBits(long size) {\n+    static MemoryLayout paddingLayout(long size) {\n@@ -746,1 +746,1 @@\n-    static ValueLayout ofValueBits(long size, ByteOrder order) {\n+    static ValueLayout valueLayout(long size, ByteOrder order) {\n@@ -760,1 +760,1 @@\n-    static SequenceLayout ofSequence(long elementCount, MemoryLayout elementLayout) {\n+    static SequenceLayout sequenceLayout(long elementCount, MemoryLayout elementLayout) {\n@@ -772,1 +772,1 @@\n-    static SequenceLayout ofSequence(MemoryLayout elementLayout) {\n+    static SequenceLayout sequenceLayout(MemoryLayout elementLayout) {\n@@ -782,1 +782,1 @@\n-    static GroupLayout ofStruct(MemoryLayout... elements) {\n+    static GroupLayout structLayout(MemoryLayout... elements) {\n@@ -796,1 +796,1 @@\n-    static GroupLayout ofUnion(MemoryLayout... elements) {\n+    static GroupLayout unionLayout(MemoryLayout... elements) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    public static final ValueLayout BITS_8_LE = MemoryLayout.ofValueBits(8, ByteOrder.LITTLE_ENDIAN);\n+    public static final ValueLayout BITS_8_LE = MemoryLayout.valueLayout(8, ByteOrder.LITTLE_ENDIAN);\n@@ -54,1 +54,1 @@\n-    public static final ValueLayout BITS_16_LE = MemoryLayout.ofValueBits(16, ByteOrder.LITTLE_ENDIAN);\n+    public static final ValueLayout BITS_16_LE = MemoryLayout.valueLayout(16, ByteOrder.LITTLE_ENDIAN);\n@@ -59,1 +59,1 @@\n-    public static final ValueLayout BITS_32_LE = MemoryLayout.ofValueBits(32, ByteOrder.LITTLE_ENDIAN);\n+    public static final ValueLayout BITS_32_LE = MemoryLayout.valueLayout(32, ByteOrder.LITTLE_ENDIAN);\n@@ -64,1 +64,1 @@\n-    public static final ValueLayout BITS_64_LE = MemoryLayout.ofValueBits(64, ByteOrder.LITTLE_ENDIAN);\n+    public static final ValueLayout BITS_64_LE = MemoryLayout.valueLayout(64, ByteOrder.LITTLE_ENDIAN);\n@@ -69,1 +69,1 @@\n-    public static final ValueLayout BITS_8_BE = MemoryLayout.ofValueBits(8, ByteOrder.BIG_ENDIAN);\n+    public static final ValueLayout BITS_8_BE = MemoryLayout.valueLayout(8, ByteOrder.BIG_ENDIAN);\n@@ -74,1 +74,1 @@\n-    public static final ValueLayout BITS_16_BE = MemoryLayout.ofValueBits(16, ByteOrder.BIG_ENDIAN);\n+    public static final ValueLayout BITS_16_BE = MemoryLayout.valueLayout(16, ByteOrder.BIG_ENDIAN);\n@@ -79,1 +79,1 @@\n-    public static final ValueLayout BITS_32_BE = MemoryLayout.ofValueBits(32, ByteOrder.BIG_ENDIAN);\n+    public static final ValueLayout BITS_32_BE = MemoryLayout.valueLayout(32, ByteOrder.BIG_ENDIAN);\n@@ -84,1 +84,1 @@\n-    public static final ValueLayout BITS_64_BE = MemoryLayout.ofValueBits(64, ByteOrder.BIG_ENDIAN);\n+    public static final ValueLayout BITS_64_BE = MemoryLayout.valueLayout(64, ByteOrder.BIG_ENDIAN);\n@@ -89,1 +89,1 @@\n-    public static final MemoryLayout PAD_8 = MemoryLayout.ofPaddingBits(8);\n+    public static final MemoryLayout PAD_8 = MemoryLayout.paddingLayout(8);\n@@ -94,1 +94,1 @@\n-    public static final MemoryLayout PAD_16 = MemoryLayout.ofPaddingBits(16);\n+    public static final MemoryLayout PAD_16 = MemoryLayout.paddingLayout(16);\n@@ -99,1 +99,1 @@\n-    public static final MemoryLayout PAD_32 = MemoryLayout.ofPaddingBits(32);\n+    public static final MemoryLayout PAD_32 = MemoryLayout.paddingLayout(32);\n@@ -104,1 +104,1 @@\n-    public static final MemoryLayout PAD_64 = MemoryLayout.ofPaddingBits(64);\n+    public static final MemoryLayout PAD_64 = MemoryLayout.paddingLayout(64);\n@@ -109,1 +109,1 @@\n-    public static final ValueLayout ADDRESS = MemoryLayout.ofValueBits(Unsafe.ADDRESS_SIZE * 8, ByteOrder.nativeOrder());\n+    public static final ValueLayout ADDRESS = MemoryLayout.valueLayout(Unsafe.ADDRESS_SIZE * 8, ByteOrder.nativeOrder());\n@@ -114,1 +114,1 @@\n-    public static final ValueLayout JAVA_BYTE = MemoryLayout.ofValueBits(8, ByteOrder.nativeOrder());\n+    public static final ValueLayout JAVA_BYTE = MemoryLayout.valueLayout(8, ByteOrder.nativeOrder());\n@@ -119,1 +119,1 @@\n-    public static final ValueLayout JAVA_CHAR = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder());\n+    public static final ValueLayout JAVA_CHAR = MemoryLayout.valueLayout(16, ByteOrder.nativeOrder());\n@@ -124,1 +124,1 @@\n-    public static final ValueLayout JAVA_SHORT = MemoryLayout.ofValueBits(16, ByteOrder.nativeOrder());\n+    public static final ValueLayout JAVA_SHORT = MemoryLayout.valueLayout(16, ByteOrder.nativeOrder());\n@@ -129,1 +129,1 @@\n-    public static final ValueLayout JAVA_INT = MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder());\n+    public static final ValueLayout JAVA_INT = MemoryLayout.valueLayout(32, ByteOrder.nativeOrder());\n@@ -139,1 +139,1 @@\n-    public static final ValueLayout JAVA_LONG = MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder())\n+    public static final ValueLayout JAVA_LONG = MemoryLayout.valueLayout(64, ByteOrder.nativeOrder())\n@@ -145,1 +145,1 @@\n-    public static final ValueLayout JAVA_FLOAT = MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder());\n+    public static final ValueLayout JAVA_FLOAT = MemoryLayout.valueLayout(32, ByteOrder.nativeOrder());\n@@ -155,1 +155,1 @@\n-    public static final ValueLayout JAVA_DOUBLE = MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder())\n+    public static final ValueLayout JAVA_DOUBLE = MemoryLayout.valueLayout(64, ByteOrder.nativeOrder())\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayouts.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.internal.foreign.MemoryScope;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -626,1 +626,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, (MemoryScope) scope);\n+        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes, (ResourceScopeImpl) scope);\n@@ -670,1 +670,1 @@\n-        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, (MemoryScope) scope);\n+        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesOffset, bytesSize, mapMode, (ResourceScopeImpl) scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.foreign.MemoryScope;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -52,1 +52,1 @@\n- *     (see {@link MemorySegment#allocateNative(long, ResourceScope)}, or {@link SegmentAllocator#arenaUnbounded(ResourceScope)})<\/li>\n+ *     (see {@link MemorySegment#allocateNative(long, ResourceScope)}, or {@link SegmentAllocator#arenaAllocator(ResourceScope)})<\/li>\n@@ -61,1 +61,1 @@\n- * Resource scopes can be associated with a {@link Cleaner} instance (see {@link #ofConfined(Cleaner)}) - we call these\n+ * Resource scopes can be associated with a {@link Cleaner} instance (see {@link #newConfinedScope(Cleaner)}) - we call these\n@@ -70,1 +70,1 @@\n- * Some managed resource scopes are implicitly managed (see {@link #ofImplicit()}, {@link #globalScope()}, and are said to be <em>implicit scopes<\/em>.\n+ * Some managed resource scopes are implicitly managed (see {@link #newImplicitScope()}, {@link #globalScope()}, and are said to be <em>implicit scopes<\/em>.\n@@ -79,1 +79,1 @@\n- * Confined resource scopes (see {@link #ofConfined()}), support strong thread-confinement guarantees. Upon creation,\n+ * Confined resource scopes (see {@link #newConfinedScope()}), support strong thread-confinement guarantees. Upon creation,\n@@ -85,1 +85,1 @@\n- * Shared resource scopes (see {@link #ofShared()}), on the other hand, have no owner thread; as such resources associated\n+ * Shared resource scopes (see {@link #newSharedScope()}), on the other hand, have no owner thread; as such resources associated\n@@ -150,1 +150,1 @@\n-     * @see #ofImplicit()\n+     * @see #newImplicitScope()\n@@ -212,2 +212,2 @@\n-    static ResourceScope ofConfined() {\n-        return MemoryScope.createConfined( null);\n+    static ResourceScope newConfinedScope() {\n+        return ResourceScopeImpl.createConfined( null);\n@@ -222,1 +222,1 @@\n-    static ResourceScope ofConfined(Cleaner cleaner) {\n+    static ResourceScope newConfinedScope(Cleaner cleaner) {\n@@ -224,1 +224,1 @@\n-        return MemoryScope.createConfined( cleaner);\n+        return ResourceScopeImpl.createConfined( cleaner);\n@@ -231,2 +231,2 @@\n-    static ResourceScope ofShared() {\n-        return MemoryScope.createShared(null);\n+    static ResourceScope newSharedScope() {\n+        return ResourceScopeImpl.createShared(null);\n@@ -241,1 +241,1 @@\n-    static ResourceScope ofShared(Cleaner cleaner) {\n+    static ResourceScope newSharedScope(Cleaner cleaner) {\n@@ -243,1 +243,1 @@\n-        return MemoryScope.createShared(cleaner);\n+        return ResourceScopeImpl.createShared(cleaner);\n@@ -255,2 +255,2 @@\n-    static ResourceScope ofImplicit() {\n-        return MemoryScope.createImplicitScope();\n+    static ResourceScope newImplicitScope() {\n+        return ResourceScopeImpl.createImplicitScope();\n@@ -264,1 +264,1 @@\n-        return MemoryScope.GLOBAL;\n+        return ResourceScopeImpl.GLOBAL;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n-import jdk.internal.foreign.MemoryScope;\n-import jdk.internal.foreign.NativeMemorySegmentImpl;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -39,1 +38,0 @@\n-import java.util.function.Supplier;\n@@ -50,1 +48,1 @@\n- * This interface provides a factory, namely {@link SegmentAllocator#scoped(ResourceScope)} which can be used to obtain\n+ * This interface provides a factory, namely {@link SegmentAllocator#ofScope(ResourceScope)} which can be used to obtain\n@@ -56,1 +54,1 @@\n-   SegmentAllocator allocator = SegmentAllocator.scoped(scope);\n+   SegmentAllocator allocator = SegmentAllocator.ofScope(scope);\n@@ -61,3 +59,2 @@\n- * In addition, this interface also defines factories for commonly used allocators; for instance, {@link #malloc(Supplier)} returns a\n- * native allocator which returns segments backed by separate resources scopes, while {@link #arenaUnbounded(ResourceScope)}\n- * and {@link #arenaBounded(long, ResourceScope)} are arena-style native allocators. Finally {@link #prefix(MemorySegment)}\n+ * In addition, this interface also defines factories for commonly used allocators; for instance {@link #arenaAllocator(ResourceScope)}\n+ * and {@link #arenaAllocator(long, ResourceScope)} are arena-style native allocators. Finally {@link #ofSegment(MemorySegment)}\n@@ -308,1 +305,1 @@\n-        MemorySegment addr = allocate(MemoryLayout.ofSequence(Array.getLength(array), elementLayout));\n+        MemorySegment addr = allocate(MemoryLayout.sequenceLayout(Array.getLength(array), elementLayout));\n@@ -335,1 +332,1 @@\n-        return allocate(MemoryLayout.ofSequence(count, elementLayout));\n+        return allocate(MemoryLayout.sequenceLayout(count, elementLayout));\n@@ -355,18 +352,0 @@\n-    \/**\n-     * Returns a native allocator which allocates memory segments using the {@code malloc} allocation primitive,\n-     * each backed by a resource scope that is obtained using the provided supplier. For instance, to create an allocator which\n-     * returns independent, confined segments, clients can use the following code:\n-     *\n-     * <blockquote><pre>{@code\n-    SegmentAllocator confinedAllocator = malloc(ResourceScope::ofConfined);\n-    SegmentAllocator sharedAllocator = malloc(ResourceScope::ofShared);\n-     * }<\/pre><\/blockquote>\n-     *\n-     * @param scopeFactory the factory used to generate the resource scope attached to each newly allocated segment.\n-     * @return a native allocator using the {@code malloc} allocation primitive.\n-     *\/\n-    static SegmentAllocator malloc(Supplier<ResourceScope> scopeFactory) {\n-        Objects.requireNonNull(scopeFactory);\n-        return (size, align) -> MemorySegment.allocateNative(size, align, scopeFactory.get());\n-    }\n-\n@@ -387,1 +366,1 @@\n-    static SegmentAllocator arenaBounded(long size, ResourceScope scope) {\n+    static SegmentAllocator arenaAllocator(long size, ResourceScope scope) {\n@@ -418,1 +397,1 @@\n-    static SegmentAllocator arenaUnbounded(ResourceScope scope) {\n+    static SegmentAllocator arenaAllocator(ResourceScope scope) {\n@@ -438,1 +417,1 @@\n-    static SegmentAllocator prefix(MemorySegment segment) {\n+    static SegmentAllocator ofSegment(MemorySegment segment) {\n@@ -455,1 +434,1 @@\n-    static SegmentAllocator scoped(ResourceScope scope) {\n+    static SegmentAllocator ofScope(ResourceScope scope) {\n@@ -457,13 +436,1 @@\n-        return (MemoryScope)scope;\n-    }\n-\n-    \/**\n-     * Returns a native allocator which creates segments associated with fresh implicit scopes. This code is equivalent\n-     * (but likely more efficient) to the following:\n-     * <blockquote><pre>{@code\n-    SegmentAllocator implicitAllocator = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.ofImplicit());\n-     * }<\/pre><\/blockquote>\n-     * @return the implicit native allocator.\n-     *\/\n-    static SegmentAllocator implicit() {\n-        return NativeMemorySegmentImpl.IMPLICIT_ALLOCATOR;\n+        return (ResourceScopeImpl)scope;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":12,"deletions":45,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.stream.LongStream;\n@@ -190,1 +189,1 @@\n-            res = MemoryLayout.ofSequence(elementCounts[i], res);\n+            res = MemoryLayout.sequenceLayout(elementCounts[i], res);\n@@ -224,1 +223,1 @@\n-        return MemoryLayout.ofSequence(count, elemLayout);\n+        return MemoryLayout.sequenceLayout(count, elemLayout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-MemorySegment segment = MemorySegment.allocateNative(10 * 4);\n+MemorySegment segment = MemorySegment.allocateNative(10 * 4, newImplicitScope());\n@@ -149,1 +149,1 @@\n-MemorySegment segment = MemorySegment.allocateNative(100);\n+MemorySegment segment = MemorySegment.allocateNative(100, scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.internal.foreign.MemoryScope;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractCLinker.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n- * than the owner thread. See {@link MemoryScope} for more details on management of temporal bounds. Subclasses\n+ * than the owner thread. See {@link ResourceScopeImpl} for more details on management of temporal bounds. Subclasses\n@@ -68,1 +68,1 @@\n-    final MemoryScope scope;\n+    final ResourceScopeImpl scope;\n@@ -71,1 +71,1 @@\n-    AbstractMemorySegmentImpl(long length, int mask, MemoryScope scope) {\n+    AbstractMemorySegmentImpl(long length, int mask, ResourceScopeImpl scope) {\n@@ -81,1 +81,1 @@\n-    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope);\n+    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, ResourceScopeImpl scope);\n@@ -194,4 +194,4 @@\n-    private static long vectorizedMismatchLargeForBytes(MemoryScope aScope, MemoryScope bScope,\n-                                                       Object a, long aOffset,\n-                                                       Object b, long bOffset,\n-                                                       long length) {\n+    private static long vectorizedMismatchLargeForBytes(ResourceScopeImpl aScope, ResourceScopeImpl bScope,\n+                                                        Object a, long aOffset,\n+                                                        Object b, long bOffset,\n+                                                        long length) {\n@@ -363,1 +363,1 @@\n-    public MemoryScope scope() {\n+    public ResourceScopeImpl scope() {\n@@ -486,1 +486,1 @@\n-        final MemoryScope bufferScope;\n+        final ResourceScopeImpl bufferScope;\n@@ -492,1 +492,1 @@\n-            bufferScope = MemoryScope.GLOBAL;\n+            bufferScope = ResourceScopeImpl.GLOBAL;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-        this.allocator = SegmentAllocator.malloc(() -> scope);\n+        this.allocator = (size, align) -> MemorySegment.allocateNative(size, align, scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-final class ConfinedScope extends MemoryScope {\n+final class ConfinedScope extends ResourceScopeImpl {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ConfinedScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        super(length, mask, MemoryScope.GLOBAL);\n+        super(length, mask, ResourceScopeImpl.GLOBAL);\n@@ -69,1 +69,1 @@\n-    abstract HeapMemorySegmentImpl<H> dup(long offset, long size, int mask, MemoryScope scope);\n+    abstract HeapMemorySegmentImpl<H> dup(long offset, long size, int mask, ResourceScopeImpl scope);\n@@ -89,1 +89,1 @@\n-        OfByte dup(long offset, long size, int mask, MemoryScope scope) {\n+        OfByte dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -112,1 +112,1 @@\n-        OfChar dup(long offset, long size, int mask, MemoryScope scope) {\n+        OfChar dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -135,1 +135,1 @@\n-        OfShort dup(long offset, long size, int mask, MemoryScope scope) {\n+        OfShort dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -158,1 +158,1 @@\n-        OfInt dup(long offset, long size, int mask, MemoryScope scope) {\n+        OfInt dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -181,1 +181,1 @@\n-        OfLong dup(long offset, long size, int mask, MemoryScope scope) {\n+        OfLong dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -204,1 +204,1 @@\n-        OfFloat dup(long offset, long size, int mask, MemoryScope scope) {\n+        OfFloat dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -227,1 +227,1 @@\n-        OfDouble dup(long offset, long size, int mask, MemoryScope scope) {\n+        OfDouble dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import sun.invoke.util.Wrapper;\n@@ -233,1 +232,1 @@\n-                return enclosing.map(l -> dup(l, MemoryLayout.ofSequence(seq.elementCount().getAsLong(), newLayout)));\n+                return enclosing.map(l -> dup(l, MemoryLayout.sequenceLayout(seq.elementCount().getAsLong(), newLayout)));\n@@ -235,1 +234,1 @@\n-                return enclosing.map(l -> dup(l, MemoryLayout.ofSequence(newLayout)));\n+                return enclosing.map(l -> dup(l, MemoryLayout.sequenceLayout(newLayout)));\n@@ -243,1 +242,1 @@\n-                return enclosing.map(l -> dup(l, MemoryLayout.ofUnion(newElements.toArray(new MemoryLayout[0]))));\n+                return enclosing.map(l -> dup(l, MemoryLayout.unionLayout(newElements.toArray(new MemoryLayout[0]))));\n@@ -245,1 +244,1 @@\n-                return enclosing.map(l -> dup(l, MemoryLayout.ofStruct(newElements.toArray(new MemoryLayout[0]))));\n+                return enclosing.map(l -> dup(l, MemoryLayout.structLayout(newElements.toArray(new MemoryLayout[0]))));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                MemoryScope s = MemoryScope.createImplicitScope();\n+                ResourceScopeImpl s = ResourceScopeImpl.createImplicitScope();\n@@ -95,1 +95,1 @@\n-                s.addOrCleanupIfFail(MemoryScope.ResourceList.ResourceCleanup.ofRunnable(() -> {\n+                s.addOrCleanupIfFail(ResourceScopeImpl.ResourceList.ResourceCleanup.ofRunnable(() -> {\n@@ -147,1 +147,1 @@\n-        static LibraryLookup DEFAULT_LOOKUP = new LibraryLookupImpl(NativeLibraries.defaultLibrary, MemoryScope.GLOBAL);\n+        static LibraryLookup DEFAULT_LOOKUP = new LibraryLookupImpl(NativeLibraries.defaultLibrary, ResourceScopeImpl.GLOBAL);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LibrariesHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, MemoryScope scope) {\n+    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, ResourceScopeImpl scope) {\n@@ -63,1 +63,1 @@\n-                scope == MemoryScope.GLOBAL ? null : this);\n+                scope == ResourceScopeImpl.GLOBAL ? null : this);\n@@ -67,1 +67,1 @@\n-    MappedMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope) {\n+    MappedMemorySegmentImpl dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -108,1 +108,1 @@\n-    public static MemorySegment makeMappedSegment(Path path, long bytesOffset, long bytesSize, FileChannel.MapMode mapMode, MemoryScope scope) throws IOException {\n+    public static MemorySegment makeMappedSegment(Path path, long bytesOffset, long bytesSize, FileChannel.MapMode mapMode, ResourceScopeImpl scope) throws IOException {\n@@ -128,1 +128,1 @@\n-                scope.addOrCleanupIfFail(new MemoryScope.ResourceList.ResourceCleanup() {\n+                scope.addOrCleanupIfFail(new ResourceScopeImpl.ResourceList.ResourceCleanup() {\n@@ -153,1 +153,1 @@\n-        public EmptyMappedMemorySegmentImpl(int modes, MemoryScope scope) {\n+        public EmptyMappedMemorySegmentImpl(int modes, ResourceScopeImpl scope) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-                (MemoryScope) scope);\n+                (ResourceScopeImpl) scope);\n@@ -132,2 +132,2 @@\n-    public static MemorySegment ofLongUnchecked(long value, long byteSize, MemoryScope memoryScope) {\n-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(MemoryAddress.ofLong(value), byteSize, null, memoryScope);\n+    public static MemorySegment ofLongUnchecked(long value, long byteSize, ResourceScopeImpl resourceScope) {\n+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(MemoryAddress.ofLong(value), byteSize, null, resourceScope);\n@@ -137,1 +137,1 @@\n-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(MemoryAddress.ofLong(value), byteSize, null, MemoryScope.GLOBAL);\n+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(MemoryAddress.ofLong(value), byteSize, null, ResourceScopeImpl.GLOBAL);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    public static final MemorySegment EVERYTHING = makeNativeSegmentUnchecked(MemoryAddress.NULL, Long.MAX_VALUE, null, MemoryScope.GLOBAL);\n+    public static final MemorySegment EVERYTHING = makeNativeSegmentUnchecked(MemoryAddress.NULL, Long.MAX_VALUE, null, ResourceScopeImpl.GLOBAL);\n@@ -50,1 +50,1 @@\n-    public static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.ofImplicit());\n+    public static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n@@ -61,1 +61,1 @@\n-    NativeMemorySegmentImpl(long min, long length, int mask, MemoryScope scope) {\n+    NativeMemorySegmentImpl(long min, long length, int mask, ResourceScopeImpl scope) {\n@@ -67,1 +67,1 @@\n-    NativeMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope) {\n+    NativeMemorySegmentImpl dup(long offset, long size, int mask, ResourceScopeImpl scope) {\n@@ -74,1 +74,1 @@\n-                scope == MemoryScope.GLOBAL ? null : this);\n+                scope == ResourceScopeImpl.GLOBAL ? null : this);\n@@ -89,1 +89,1 @@\n-    public static MemorySegment makeNativeSegment(long bytesSize, long alignmentBytes, MemoryScope scope) {\n+    public static MemorySegment makeNativeSegment(long bytesSize, long alignmentBytes, ResourceScopeImpl scope) {\n@@ -107,1 +107,1 @@\n-        scope.addOrCleanupIfFail(new MemoryScope.ResourceList.ResourceCleanup() {\n+        scope.addOrCleanupIfFail(new ResourceScopeImpl.ResourceList.ResourceCleanup() {\n@@ -121,1 +121,1 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Runnable cleanupAction, MemoryScope scope) {\n+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Runnable cleanupAction, ResourceScopeImpl scope) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import static jdk.incubator.foreign.MemoryLayouts.ADDRESS;\n@@ -54,1 +53,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n@@ -59,1 +58,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n@@ -64,1 +63,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n@@ -69,1 +68,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n@@ -74,1 +73,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n@@ -79,1 +78,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n@@ -84,1 +83,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n@@ -89,1 +88,1 @@\n-        return MemoryLayout.ofValueBits(bitSize, order)\n+        return MemoryLayout.valueLayout(bitSize, order)\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-public abstract class MemoryScope implements ResourceScope, ScopedMemoryAccess.Scope, SegmentAllocator {\n+public abstract class ResourceScopeImpl implements ResourceScope, ScopedMemoryAccess.Scope, SegmentAllocator {\n@@ -95,1 +95,1 @@\n-    protected MemoryScope(Cleaner cleaner, ResourceList resourceList) {\n+    protected ResourceScopeImpl(Cleaner cleaner, ResourceList resourceList) {\n@@ -102,1 +102,1 @@\n-    public static MemoryScope createImplicitScope() {\n+    public static ResourceScopeImpl createImplicitScope() {\n@@ -106,1 +106,1 @@\n-    public static MemoryScope createConfined(Thread thread, Cleaner cleaner) {\n+    public static ResourceScopeImpl createConfined(Thread thread, Cleaner cleaner) {\n@@ -115,1 +115,1 @@\n-    public static MemoryScope createConfined(Cleaner cleaner) {\n+    public static ResourceScopeImpl createConfined(Cleaner cleaner) {\n@@ -123,1 +123,1 @@\n-    public static MemoryScope createShared(Cleaner cleaner) {\n+    public static ResourceScopeImpl createShared(Cleaner cleaner) {\n@@ -183,1 +183,1 @@\n-     * Allocates a segment using this scope. Used by {@link SegmentAllocator#scoped(ResourceScope)}.\n+     * Allocates a segment using this scope. Used by {@link SegmentAllocator#ofScope(ResourceScope)}.\n@@ -230,1 +230,1 @@\n-    public static MemoryScope GLOBAL = new NonCloseableSharedScope( null) {\n+    public static ResourceScopeImpl GLOBAL = new NonCloseableSharedScope( null) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryScope.java","status":"renamed"},{"patch":"@@ -45,1 +45,1 @@\n-class SharedScope extends MemoryScope {\n+class SharedScope extends ResourceScopeImpl {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SharedScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.internal.foreign.MemoryScope;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -264,2 +264,2 @@\n-            ResourceScope scope = ResourceScope.ofConfined();\n-            return new Context(SegmentAllocator.arenaBounded(size, scope), scope);\n+            ResourceScope scope = ResourceScope.newConfinedScope();\n+            return new Context(SegmentAllocator.arenaAllocator(size, scope), scope);\n@@ -286,1 +286,1 @@\n-            ResourceScope scope = ResourceScope.ofConfined();\n+            ResourceScope scope = ResourceScope.newConfinedScope();\n@@ -992,1 +992,1 @@\n-            return MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size, (MemoryScope) context.scope);\n+            return MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), size, (ResourceScopeImpl) context.scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-import static java.lang.invoke.MethodHandles.empty;\n@@ -56,1 +55,0 @@\n-import static java.lang.invoke.MethodHandles.tryFinally;\n@@ -267,1 +265,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.foreign.MemoryScope;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -34,1 +34,1 @@\n-    public static MemorySegment upcallAddress(UpcallHandler handler, MemoryScope scope) {\n+    public static MemorySegment upcallAddress(UpcallHandler handler, ResourceScopeImpl scope) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n-import jdk.internal.foreign.MemoryScope;\n-import jdk.internal.foreign.abi.Binding;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -101,1 +100,1 @@\n-        return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function), (MemoryScope) scope);\n+        return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function), (ResourceScopeImpl) scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Linker.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    static final GroupLayout LAYOUT = MemoryLayout.ofStruct(\n+    static final GroupLayout LAYOUT = MemoryLayout.structLayout(\n@@ -74,1 +74,1 @@\n-        = MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder());\n+        = MemoryLayout.valueLayout(64, ByteOrder.nativeOrder());\n@@ -76,1 +76,1 @@\n-        = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder());\n+        = MemoryLayout.valueLayout(128, ByteOrder.nativeOrder());\n@@ -79,1 +79,1 @@\n-        = MemoryLayout.ofSequence(MAX_REGISTER_ARGUMENTS, GP_REG);\n+        = MemoryLayout.sequenceLayout(MAX_REGISTER_ARGUMENTS, GP_REG);\n@@ -81,1 +81,1 @@\n-        = MemoryLayout.ofSequence(MAX_REGISTER_ARGUMENTS, FP_REG);\n+        = MemoryLayout.sequenceLayout(MAX_REGISTER_ARGUMENTS, FP_REG);\n@@ -126,1 +126,1 @@\n-                LAYOUT.byteSize(), () -> U.freeMemory(ptr), ResourceScope.ofShared());\n+                LAYOUT.byteSize(), () -> U.freeMemory(ptr), ResourceScope.newSharedScope());\n@@ -240,1 +240,1 @@\n-        return vargAsSegment(layout, SegmentAllocator.scoped(scope));\n+        return vargAsSegment(layout, SegmentAllocator.ofScope(scope));\n@@ -511,1 +511,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64VaList.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static final GroupLayout LAYOUT = MemoryLayout.ofStruct(\n+    static final GroupLayout LAYOUT = MemoryLayout.structLayout(\n@@ -70,2 +70,2 @@\n-    private static final MemoryLayout GP_REG = MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder());\n-    private static final MemoryLayout FP_REG = MemoryLayout.ofValueBits(128, ByteOrder.nativeOrder());\n+    private static final MemoryLayout GP_REG = MemoryLayout.valueLayout(64, ByteOrder.nativeOrder());\n+    private static final MemoryLayout FP_REG = MemoryLayout.valueLayout(128, ByteOrder.nativeOrder());\n@@ -73,1 +73,1 @@\n-    private static final GroupLayout LAYOUT_REG_SAVE_AREA = MemoryLayout.ofStruct(\n+    private static final GroupLayout LAYOUT_REG_SAVE_AREA = MemoryLayout.structLayout(\n@@ -134,1 +134,1 @@\n-                LAYOUT.byteSize(), () -> U.freeMemory(ptr), ResourceScope.ofShared());\n+                LAYOUT.byteSize(), () -> U.freeMemory(ptr), ResourceScope.newSharedScope());\n@@ -218,1 +218,1 @@\n-        return vargAsSegment(layout, SegmentAllocator.scoped(scope));\n+        return vargAsSegment(layout, SegmentAllocator.ofScope(scope));\n@@ -242,1 +242,1 @@\n-                    try (ResourceScope localScope = ResourceScope.ofConfined()) {\n+                    try (ResourceScope localScope = ResourceScope.newConfinedScope()) {\n@@ -433,1 +433,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n-import jdk.internal.foreign.MemoryScope;\n-import jdk.internal.foreign.abi.Binding;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -112,1 +111,1 @@\n-        return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function), (MemoryScope) scope);\n+        return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function), (ResourceScopeImpl) scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.foreign.MemoryScope;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -105,1 +105,1 @@\n-        return vargAsSegment(layout, SegmentAllocator.scoped(scope));\n+        return vargAsSegment(layout, SegmentAllocator.ofScope(scope));\n@@ -164,1 +164,1 @@\n-        ((MemoryScope)scope).checkValidStateSlow();\n+        ((ResourceScopeImpl)scope).checkValidStateSlow();\n@@ -179,1 +179,1 @@\n-            ((MemoryScope)scope).checkValidStateSlow();\n+            ((ResourceScopeImpl)scope).checkValidStateSlow();\n@@ -220,1 +220,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,2 +32,1 @@\n-import jdk.internal.foreign.MemoryScope;\n-import jdk.internal.foreign.abi.Binding;\n+import jdk.internal.foreign.ResourceScopeImpl;\n@@ -113,1 +112,1 @@\n-        return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function), (MemoryScope) scope);\n+        return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function), (ResourceScopeImpl) scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -47,0 +48,2 @@\n+    static SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+\n@@ -141,1 +144,1 @@\n-                        layouts.add(MemoryLayout.ofPaddingBits(padding));\n+                        layouts.add(MemoryLayout.paddingLayout(padding));\n@@ -147,1 +150,1 @@\n-                return MemoryLayout.ofStruct(layouts.toArray(new MemoryLayout[0]));\n+                return MemoryLayout.structLayout(layouts.toArray(new MemoryLayout[0]));\n@@ -364,1 +367,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+            MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -368,1 +371,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(1, ResourceScope.ofImplicit());\n+            MemorySegment segment = MemorySegment.allocateNative(1, ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/CallGeneratorHelper.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            this.resourceScope = ResourceScope.ofConfined();\n+            this.resourceScope = ResourceScope.newConfinedScope();\n@@ -56,1 +56,1 @@\n-            this.allocator = SegmentAllocator.arenaUnbounded(resourceScope);\n+            this.allocator = SegmentAllocator.arenaAllocator(resourceScope);\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -223,1 +223,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -231,1 +231,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -238,1 +238,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -245,1 +245,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -295,2 +295,2 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n-                SegmentAllocator allocator = SegmentAllocator.scoped(scope);\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                SegmentAllocator allocator = SegmentAllocator.ofScope(scope);\n@@ -319,1 +319,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -327,1 +327,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -90,1 +89,1 @@\n-    static final VarHandle intHandleIndexed = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)\n+    static final VarHandle intHandleIndexed = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT)\n@@ -100,1 +99,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -119,1 +118,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -140,1 +139,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -208,1 +207,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -251,1 +250,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -289,1 +288,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -328,1 +327,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -371,1 +370,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -82,1 +82,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestAddressHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    static SequenceLayout bytes = MemoryLayout.ofSequence(100,\n+    static SequenceLayout bytes = MemoryLayout.sequenceLayout(100,\n@@ -54,1 +54,1 @@\n-    static SequenceLayout chars = MemoryLayout.ofSequence(100,\n+    static SequenceLayout chars = MemoryLayout.sequenceLayout(100,\n@@ -58,1 +58,1 @@\n-    static SequenceLayout shorts = MemoryLayout.ofSequence(100,\n+    static SequenceLayout shorts = MemoryLayout.sequenceLayout(100,\n@@ -62,1 +62,1 @@\n-    static SequenceLayout ints = MemoryLayout.ofSequence(100,\n+    static SequenceLayout ints = MemoryLayout.sequenceLayout(100,\n@@ -66,1 +66,1 @@\n-    static SequenceLayout floats = MemoryLayout.ofSequence(100,\n+    static SequenceLayout floats = MemoryLayout.sequenceLayout(100,\n@@ -70,1 +70,1 @@\n-    static SequenceLayout longs = MemoryLayout.ofSequence(100,\n+    static SequenceLayout longs = MemoryLayout.sequenceLayout(100,\n@@ -74,1 +74,1 @@\n-    static SequenceLayout doubles = MemoryLayout.ofSequence(100,\n+    static SequenceLayout doubles = MemoryLayout.sequenceLayout(100,\n@@ -104,1 +104,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -113,1 +113,1 @@\n-        MemoryLayout seq = MemoryLayout.ofSequence((Integer.MAX_VALUE * layout.byteSize()) + 1, layout);\n+        MemoryLayout seq = MemoryLayout.sequenceLayout((Integer.MAX_VALUE * layout.byteSize()) + 1, layout);\n@@ -123,1 +123,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -132,1 +132,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofConfined());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newConfinedScope());\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-import static jdk.incubator.foreign.MemorySegment.*;\n+\n@@ -102,2 +102,2 @@\n-    static SequenceLayout tuples = MemoryLayout.ofSequence(500,\n-            MemoryLayout.ofStruct(\n+    static SequenceLayout tuples = MemoryLayout.sequenceLayout(500,\n+            MemoryLayout.structLayout(\n@@ -108,1 +108,1 @@\n-    static SequenceLayout bytes = MemoryLayout.ofSequence(100,\n+    static SequenceLayout bytes = MemoryLayout.sequenceLayout(100,\n@@ -112,1 +112,1 @@\n-    static SequenceLayout chars = MemoryLayout.ofSequence(100,\n+    static SequenceLayout chars = MemoryLayout.sequenceLayout(100,\n@@ -116,1 +116,1 @@\n-    static SequenceLayout shorts = MemoryLayout.ofSequence(100,\n+    static SequenceLayout shorts = MemoryLayout.sequenceLayout(100,\n@@ -120,1 +120,1 @@\n-    static SequenceLayout ints = MemoryLayout.ofSequence(100,\n+    static SequenceLayout ints = MemoryLayout.sequenceLayout(100,\n@@ -124,1 +124,1 @@\n-    static SequenceLayout floats = MemoryLayout.ofSequence(100,\n+    static SequenceLayout floats = MemoryLayout.sequenceLayout(100,\n@@ -128,1 +128,1 @@\n-    static SequenceLayout longs = MemoryLayout.ofSequence(100,\n+    static SequenceLayout longs = MemoryLayout.sequenceLayout(100,\n@@ -132,1 +132,1 @@\n-    static SequenceLayout doubles = MemoryLayout.ofSequence(100,\n+    static SequenceLayout doubles = MemoryLayout.sequenceLayout(100,\n@@ -189,1 +189,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -234,1 +234,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -239,1 +239,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -251,1 +251,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -258,1 +258,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -271,1 +271,1 @@\n-        MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0L, 8, FileChannel.MapMode.READ_WRITE, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0L, 8, FileChannel.MapMode.READ_WRITE, ResourceScope.newImplicitScope());\n@@ -287,1 +287,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -297,1 +297,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -327,1 +327,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -353,1 +353,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -387,1 +387,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -400,1 +400,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -438,1 +438,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -449,1 +449,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -467,1 +467,1 @@\n-        MemorySegment.mapFile(f.toPath(), 0L, -1, FileChannel.MapMode.READ_WRITE, ResourceScope.ofImplicit());\n+        MemorySegment.mapFile(f.toPath(), 0L, -1, FileChannel.MapMode.READ_WRITE, ResourceScope.newImplicitScope());\n@@ -475,1 +475,1 @@\n-        MemorySegment.mapFile(f.toPath(), -1, 1, FileChannel.MapMode.READ_WRITE, ResourceScope.ofImplicit());\n+        MemorySegment.mapFile(f.toPath(), -1, 1, FileChannel.MapMode.READ_WRITE, ResourceScope.newImplicitScope());\n@@ -486,1 +486,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -495,1 +495,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -508,1 +508,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -519,1 +519,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -534,1 +534,1 @@\n-        MemorySegment.mapFile(path, 0L, 0L, FileChannel.MapMode.READ_WRITE, ResourceScope.ofImplicit());\n+        MemorySegment.mapFile(path, 0L, 0L, FileChannel.MapMode.READ_WRITE, ResourceScope.newImplicitScope());\n@@ -541,1 +541,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -554,1 +554,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -604,1 +604,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -614,1 +614,1 @@\n-        MemorySegment s1 = MemorySegment.allocateNative(MemoryLayouts.JAVA_INT, ResourceScope.ofConfined());\n+        MemorySegment s1 = MemorySegment.allocateNative(MemoryLayouts.JAVA_INT, ResourceScope.newConfinedScope());\n@@ -628,1 +628,1 @@\n-             ResourceScope scope = ResourceScope.ofShared()) {\n+             ResourceScope scope = ResourceScope.newSharedScope()) {\n@@ -644,1 +644,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(10, ResourceScope.ofConfined());\n+            MemorySegment segment = MemorySegment.allocateNative(10, ResourceScope.newConfinedScope());\n@@ -659,1 +659,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(10, ResourceScope.ofConfined());\n+            MemorySegment segment = MemorySegment.allocateNative(10, ResourceScope.newConfinedScope());\n@@ -670,1 +670,1 @@\n-        try (ResourceScope scope = ResourceScope.ofShared()) {\n+        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n@@ -688,1 +688,1 @@\n-        try (ResourceScope scope = ResourceScope.ofShared()) {\n+        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n@@ -699,1 +699,1 @@\n-                { (Supplier<MemorySegment>) () -> MemorySegment.allocateNative(16, ResourceScope.ofImplicit()) },\n+                { (Supplier<MemorySegment>) () -> MemorySegment.allocateNative(16, ResourceScope.newImplicitScope()) },\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-        testValues.add(MemoryLayout.ofStruct(constants));\n-        testValues.add(MemoryLayout.ofUnion(constants));\n+        testValues.add(MemoryLayout.structLayout(constants));\n+        testValues.add(MemoryLayout.unionLayout(constants));\n@@ -76,2 +76,2 @@\n-            testValues.add(MemoryLayout.ofSequence(ml));\n-            testValues.add(MemoryLayout.ofSequence(10, ml));\n+            testValues.add(MemoryLayout.sequenceLayout(ml));\n+            testValues.add(MemoryLayout.sequenceLayout(10, ml));\n","filename":"test\/jdk\/java\/foreign\/TestCondy.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        Object res = doCall(addr, SegmentAllocator.implicit(), mt, descriptor, args);\n+        Object res = doCall(addr, IMPLICIT_ALLOCATOR, mt, descriptor, args);\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-            ResourceScope scope = ResourceScope.ofShared();\n+            ResourceScope scope = ResourceScope.newSharedScope();\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                FunctionDescriptor.ofVoid(MemoryLayout.ofPaddingBits(32)),\n+                FunctionDescriptor.ofVoid(MemoryLayout.paddingLayout(32)),\n@@ -91,1 +91,1 @@\n-                FunctionDescriptor.ofVoid(MemoryLayout.ofPaddingBits(64)),\n+                FunctionDescriptor.ofVoid(MemoryLayout.paddingLayout(64)),\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,4 +70,4 @@\n-                { MemoryLayout.ofSequence(MemoryLayouts.PAD_32) },\n-                { MemoryLayout.ofSequence(5, MemoryLayouts.PAD_32) },\n-                { MemoryLayout.ofStruct(MemoryLayouts.PAD_32, MemoryLayouts.PAD_32) },\n-                { MemoryLayout.ofUnion(MemoryLayouts.PAD_32, MemoryLayouts.PAD_32) },\n+                { MemoryLayout.sequenceLayout(MemoryLayouts.PAD_32) },\n+                { MemoryLayout.sequenceLayout(5, MemoryLayouts.PAD_32) },\n+                { MemoryLayout.structLayout(MemoryLayouts.PAD_32, MemoryLayouts.PAD_32) },\n+                { MemoryLayout.unionLayout(MemoryLayouts.PAD_32, MemoryLayouts.PAD_32) },\n@@ -76,1 +76,1 @@\n-                { MemoryLayout.ofStruct(\n+                { MemoryLayout.structLayout(\n@@ -79,1 +79,1 @@\n-                { MemoryLayout.ofUnion(\n+                { MemoryLayout.unionLayout(\n@@ -84,1 +84,1 @@\n-                { MemoryLayout.ofStruct(\n+                { MemoryLayout.structLayout(\n@@ -87,1 +87,1 @@\n-                { MemoryLayout.ofUnion(\n+                { MemoryLayout.unionLayout(\n@@ -91,1 +91,1 @@\n-                { MemoryLayout.ofStruct(\n+                { MemoryLayout.structLayout(\n@@ -93,1 +93,1 @@\n-                        MemoryLayout.ofStruct(\n+                        MemoryLayout.structLayout(\n@@ -96,1 +96,1 @@\n-                { MemoryLayout.ofUnion(\n+                { MemoryLayout.unionLayout(\n@@ -98,1 +98,1 @@\n-                        MemoryLayout.ofStruct(\n+                        MemoryLayout.structLayout(\n@@ -101,2 +101,2 @@\n-                { MemoryLayout.ofSequence(\n-                        MemoryLayout.ofStruct(\n+                { MemoryLayout.sequenceLayout(\n+                        MemoryLayout.structLayout(\n@@ -105,2 +105,2 @@\n-                { MemoryLayout.ofSequence(5,\n-                        MemoryLayout.ofStruct(\n+                { MemoryLayout.sequenceLayout(5,\n+                        MemoryLayout.structLayout(\n","filename":"test\/jdk\/java\/foreign\/TestLayoutConstants.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        ValueLayout newLayout = MemoryLayout.ofValueBits(layout.bitSize(), layout.order());\n+        ValueLayout newLayout = MemoryLayout.valueLayout(layout.bitSize(), layout.order());\n","filename":"test\/jdk\/java\/foreign\/TestLayoutEquality.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(JAVA_INT);\n@@ -61,1 +61,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(JAVA_INT);\n@@ -67,1 +67,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        GroupLayout g = MemoryLayout.structLayout(JAVA_INT);\n@@ -73,1 +73,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        GroupLayout g = MemoryLayout.structLayout(JAVA_INT);\n@@ -79,1 +79,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(JAVA_INT);\n@@ -85,1 +85,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(JAVA_INT);\n@@ -91,1 +91,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        GroupLayout g = MemoryLayout.structLayout(JAVA_INT);\n@@ -97,1 +97,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        GroupLayout g = MemoryLayout.structLayout(JAVA_INT);\n@@ -103,1 +103,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, JAVA_INT);\n@@ -109,1 +109,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, JAVA_INT);\n@@ -120,1 +120,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, JAVA_INT);\n@@ -126,1 +126,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, JAVA_INT);\n@@ -132,1 +132,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, JAVA_INT);\n@@ -143,1 +143,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, JAVA_INT);\n@@ -149,1 +149,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, JAVA_INT);\n@@ -155,1 +155,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayout.ofStruct(JAVA_INT));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(JAVA_INT));\n@@ -161,1 +161,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayout.ofStruct(JAVA_INT));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(JAVA_INT));\n@@ -167,1 +167,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayout.ofStruct(JAVA_INT));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(JAVA_INT));\n@@ -173,1 +173,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(3), JAVA_INT.withName(\"foo\"));\n+        GroupLayout g = MemoryLayout.structLayout(MemoryLayout.paddingLayout(3), JAVA_INT.withName(\"foo\"));\n@@ -179,1 +179,1 @@\n-        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        MemoryLayout layout = MemoryLayout.sequenceLayout(MemoryLayout.sequenceLayout(JAVA_INT));\n@@ -185,1 +185,1 @@\n-        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        MemoryLayout layout = MemoryLayout.sequenceLayout(MemoryLayout.sequenceLayout(JAVA_INT));\n@@ -191,1 +191,1 @@\n-        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        MemoryLayout layout = MemoryLayout.sequenceLayout(MemoryLayout.sequenceLayout(JAVA_INT));\n@@ -197,1 +197,1 @@\n-        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        MemoryLayout layout = MemoryLayout.sequenceLayout(MemoryLayout.sequenceLayout(JAVA_INT));\n@@ -203,1 +203,1 @@\n-        MemoryLayout layout = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(7), JAVA_INT.withName(\"x\"));\n+        MemoryLayout layout = MemoryLayout.structLayout(MemoryLayout.paddingLayout(7), JAVA_INT.withName(\"x\"));\n@@ -209,1 +209,1 @@\n-        MemoryLayout layout = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(7), JAVA_INT.withName(\"x\"));\n+        MemoryLayout layout = MemoryLayout.structLayout(MemoryLayout.paddingLayout(7), JAVA_INT.withName(\"x\"));\n@@ -216,1 +216,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT.withBitAlignment(16).withName(\"foo\")).withBitAlignment(8);\n+        GroupLayout g = MemoryLayout.structLayout(JAVA_INT.withBitAlignment(16).withName(\"foo\")).withBitAlignment(8);\n@@ -235,1 +235,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.PAD_8, JAVA_INT.withBitAlignment(16).withName(\"foo\"));\n+        GroupLayout g = MemoryLayout.structLayout(MemoryLayouts.PAD_8, JAVA_INT.withBitAlignment(16).withName(\"foo\"));\n@@ -254,1 +254,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(10, JAVA_INT);\n@@ -274,1 +274,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(10, JAVA_INT);\n@@ -287,1 +287,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(10, JAVA_INT);\n@@ -301,1 +301,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(\n+        GroupLayout g = MemoryLayout.structLayout(\n@@ -342,1 +342,1 @@\n-        GroupLayout g = MemoryLayout.ofUnion(\n+        GroupLayout g = MemoryLayout.unionLayout(\n@@ -383,1 +383,1 @@\n-        SequenceLayout g = MemoryLayout.ofSequence(4, MemoryLayouts.JAVA_BYTE);\n+        SequenceLayout g = MemoryLayout.sequenceLayout(4, MemoryLayouts.JAVA_BYTE);\n@@ -425,1 +425,1 @@\n-            MemoryLayout.ofSequence(10, JAVA_INT),\n+            MemoryLayout.sequenceLayout(10, JAVA_INT),\n@@ -431,1 +431,1 @@\n-            MemoryLayout.ofSequence(10, MemoryLayout.ofStruct(JAVA_INT, JAVA_INT.withName(\"y\"))),\n+            MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(JAVA_INT, JAVA_INT.withName(\"y\"))),\n@@ -437,1 +437,1 @@\n-            MemoryLayout.ofSequence(10, MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(5), JAVA_INT.withName(\"y\"))),\n+            MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(MemoryLayout.paddingLayout(5), JAVA_INT.withName(\"y\"))),\n@@ -443,1 +443,1 @@\n-            MemoryLayout.ofSequence(10, JAVA_INT),\n+            MemoryLayout.sequenceLayout(10, JAVA_INT),\n@@ -449,2 +449,2 @@\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofSequence(10, JAVA_INT).withName(\"data\")\n+            MemoryLayout.structLayout(\n+                MemoryLayout.sequenceLayout(10, JAVA_INT).withName(\"data\")\n@@ -457,4 +457,4 @@\n-        MemoryLayout complexLayout = MemoryLayout.ofStruct(\n-            MemoryLayout.ofSequence(10,\n-                MemoryLayout.ofSequence(10,\n-                    MemoryLayout.ofStruct(\n+        MemoryLayout complexLayout = MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(10,\n+                MemoryLayout.sequenceLayout(10,\n+                    MemoryLayout.structLayout(\n@@ -506,1 +506,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -516,3 +516,3 @@\n-        MemoryLayout layout = MemoryLayout.ofStruct(\n-            MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()).withName(\"x\"),\n-            MemoryLayout.ofValueBits(31, ByteOrder.nativeOrder()).withName(\"y\") \/\/ size not a multiple of 8\n+        MemoryLayout layout = MemoryLayout.structLayout(\n+            MemoryLayout.valueLayout(32, ByteOrder.nativeOrder()).withName(\"x\"),\n+            MemoryLayout.valueLayout(31, ByteOrder.nativeOrder()).withName(\"y\") \/\/ size not a multiple of 8\n@@ -526,3 +526,3 @@\n-        MemoryLayout layout = MemoryLayout.ofStruct(\n-            MemoryLayout.ofPaddingBits(5),\n-            MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()).withName(\"y\") \/\/ offset not a multiple of 8\n+        MemoryLayout layout = MemoryLayout.structLayout(\n+            MemoryLayout.paddingLayout(5),\n+            MemoryLayout.valueLayout(32, ByteOrder.nativeOrder()).withName(\"y\") \/\/ offset not a multiple of 8\n@@ -536,4 +536,4 @@\n-        MemoryLayout layout = MemoryLayout.ofSequence(3,\n-            MemoryLayout.ofStruct(\n-                MemoryLayout.ofPaddingBits(4),\n-                MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()).withName(\"y\") \/\/ offset not a multiple of 8\n+        MemoryLayout layout = MemoryLayout.sequenceLayout(3,\n+            MemoryLayout.structLayout(\n+                MemoryLayout.paddingLayout(4),\n+                MemoryLayout.valueLayout(32, ByteOrder.nativeOrder()).withName(\"y\") \/\/ offset not a multiple of 8\n@@ -551,1 +551,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        MemoryLayout layout = MemoryLayout.ofStruct(\n+        MemoryLayout layout = MemoryLayout.structLayout(\n@@ -55,2 +55,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(MemoryLayouts.JAVA_DOUBLE).withName(\"arr\"));\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_DOUBLE).withName(\"arr\"));\n@@ -62,1 +62,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -79,1 +79,1 @@\n-        MemoryLayout layout = MemoryLayout.ofStruct(\n+        MemoryLayout layout = MemoryLayout.structLayout(\n@@ -81,2 +81,2 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofSequence(1, MemoryLayout.ofSequence(MemoryLayouts.JAVA_DOUBLE)).withName(\"arr\"));\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.sequenceLayout(1, MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_DOUBLE)).withName(\"arr\"));\n@@ -89,1 +89,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -106,2 +106,2 @@\n-        MemoryLayout seq = MemoryLayout.ofSequence(10, MemoryLayouts.JAVA_INT);\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        MemoryLayout seq = MemoryLayout.sequenceLayout(10, MemoryLayouts.JAVA_INT);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -146,1 +146,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT);\n@@ -152,1 +152,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(10, MemoryLayouts.JAVA_INT);\n@@ -158,1 +158,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct();\n+        MemoryLayout struct = MemoryLayout.structLayout();\n@@ -162,1 +162,1 @@\n-        MemoryLayout union = MemoryLayout.ofUnion();\n+        MemoryLayout union = MemoryLayout.unionLayout();\n@@ -169,2 +169,2 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(\n-                MemoryLayout.ofPaddingBits(8),\n+        MemoryLayout struct = MemoryLayout.structLayout(\n+                MemoryLayout.paddingLayout(8),\n@@ -182,1 +182,1 @@\n-        assertEquals(MemoryLayout.ofPaddingBits(layout.bitSize()).bitAlignment(), 1);\n+        assertEquals(MemoryLayout.paddingLayout(layout.bitSize()).bitAlignment(), 1);\n@@ -187,2 +187,2 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(\n-                layout, MemoryLayout.ofPaddingBits(128 - layout.bitSize()));\n+        MemoryLayout struct = MemoryLayout.structLayout(\n+                layout, MemoryLayout.paddingLayout(128 - layout.bitSize()));\n@@ -194,2 +194,2 @@\n-        MemoryLayout struct = MemoryLayout.ofUnion(\n-                layout, MemoryLayout.ofPaddingBits(128 - layout.bitSize()));\n+        MemoryLayout struct = MemoryLayout.unionLayout(\n+                layout, MemoryLayout.paddingLayout(128 - layout.bitSize()));\n@@ -201,1 +201,1 @@\n-        MemoryLayout struct = MemoryLayout.ofUnion(\n+        MemoryLayout struct = MemoryLayout.unionLayout(\n@@ -243,9 +243,9 @@\n-                { MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT), 32 },\n-                { MemoryLayout.ofSequence(MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)), 32 },\n-                { MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)), 32 },\n-                { MemoryLayout.ofStruct(MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)), 32 },\n-                { MemoryLayout.ofStruct(MemoryLayout.ofSequence(MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT))), 32 },\n-                { MemoryLayout.ofStruct(MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT))), 32 },\n-                { MemoryLayout.ofUnion(MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)), 32 },\n-                { MemoryLayout.ofUnion(MemoryLayout.ofSequence(MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT))), 32 },\n-                { MemoryLayout.ofUnion(MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT))), 32 },\n+                { MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT), 32 },\n+                { MemoryLayout.sequenceLayout(MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT)), 32 },\n+                { MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT)), 32 },\n+                { MemoryLayout.structLayout(MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT)), 32 },\n+                { MemoryLayout.structLayout(MemoryLayout.sequenceLayout(MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT))), 32 },\n+                { MemoryLayout.structLayout(MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT))), 32 },\n+                { MemoryLayout.unionLayout(MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT)), 32 },\n+                { MemoryLayout.unionLayout(MemoryLayout.sequenceLayout(MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT))), 32 },\n+                { MemoryLayout.unionLayout(MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT))), 32 },\n@@ -274,4 +274,4 @@\n-        VALUE_LE(size -> MemoryLayout.ofValueBits(size, ByteOrder.LITTLE_ENDIAN)),\n-        VALUE_BE(size -> MemoryLayout.ofValueBits(size, ByteOrder.BIG_ENDIAN)),\n-        PADDING(MemoryLayout::ofPaddingBits),\n-        SEQUENCE(size -> MemoryLayout.ofSequence(size, MemoryLayouts.PAD_8));\n+        VALUE_LE(size -> MemoryLayout.valueLayout(size, ByteOrder.LITTLE_ENDIAN)),\n+        VALUE_BE(size -> MemoryLayout.valueLayout(size, ByteOrder.BIG_ENDIAN)),\n+        PADDING(MemoryLayout::paddingLayout),\n+        SEQUENCE(size -> MemoryLayout.sequenceLayout(size, MemoryLayouts.PAD_8));\n@@ -294,3 +294,3 @@\n-        SEQUENCE(MemoryLayout.ofSequence(1, MemoryLayouts.PAD_8)),\n-        STRUCT(MemoryLayout.ofStruct(MemoryLayouts.PAD_8, MemoryLayouts.PAD_8)),\n-        UNION(MemoryLayout.ofUnion(MemoryLayouts.PAD_8, MemoryLayouts.PAD_8));\n+        SEQUENCE(MemoryLayout.sequenceLayout(1, MemoryLayouts.PAD_8)),\n+        STRUCT(MemoryLayout.structLayout(MemoryLayouts.PAD_8, MemoryLayouts.PAD_8)),\n+        UNION(MemoryLayout.unionLayout(MemoryLayouts.PAD_8, MemoryLayouts.PAD_8));\n@@ -322,1 +322,1 @@\n-            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.ofSequence(4, l), l.bitAlignment() };\n+            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.sequenceLayout(4, l), l.bitAlignment() };\n@@ -326,1 +326,1 @@\n-            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.ofStruct(l), l.bitAlignment() };\n+            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.structLayout(l), l.bitAlignment() };\n@@ -330,1 +330,1 @@\n-            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.ofUnion(l), l.bitAlignment() };\n+            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.unionLayout(l), l.bitAlignment() };\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        GroupLayout layout = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(elemLayout.bitSize()), elemLayout.withName(\"elem\"));\n+        GroupLayout layout = MemoryLayout.structLayout(MemoryLayout.paddingLayout(elemLayout.bitSize()), elemLayout.withName(\"elem\"));\n@@ -63,1 +63,1 @@\n-        SequenceLayout layout = MemoryLayout.ofSequence(2, elemLayout);\n+        SequenceLayout layout = MemoryLayout.sequenceLayout(2, elemLayout);\n@@ -69,1 +69,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, elemLayout.withName(\"elem\"));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(10, elemLayout.withName(\"elem\"));\n@@ -75,1 +75,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(elemLayout.bitSize()), elemLayout.withName(\"elem\")));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(MemoryLayout.paddingLayout(elemLayout.bitSize()), elemLayout.withName(\"elem\")));\n@@ -81,1 +81,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, MemoryLayout.ofSequence(2, elemLayout));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(10, MemoryLayout.sequenceLayout(2, elemLayout));\n@@ -87,1 +87,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -119,1 +119,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -153,2 +153,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(20,\n-                MemoryLayout.ofSequence(10, elemLayout.withName(\"elem\")));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(20,\n+                MemoryLayout.sequenceLayout(10, elemLayout.withName(\"elem\")));\n@@ -161,2 +161,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(20,\n-                MemoryLayout.ofSequence(10, MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(elemLayout.bitSize()), elemLayout.withName(\"elem\"))));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(20,\n+                MemoryLayout.sequenceLayout(10, MemoryLayout.structLayout(MemoryLayout.paddingLayout(elemLayout.bitSize()), elemLayout.withName(\"elem\"))));\n@@ -171,2 +171,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(20,\n-                MemoryLayout.ofSequence(10, MemoryLayout.ofSequence(2, elemLayout)));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(20,\n+                MemoryLayout.sequenceLayout(10, MemoryLayout.sequenceLayout(2, elemLayout)));\n@@ -188,1 +188,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -66,1 +66,1 @@\n-        MemoryLayout alignedGroup = MemoryLayout.ofStruct(MemoryLayouts.PAD_8, aligned);\n+        MemoryLayout alignedGroup = MemoryLayout.structLayout(MemoryLayouts.PAD_8, aligned);\n@@ -69,1 +69,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -82,1 +82,1 @@\n-        GroupLayout alignedGroup = MemoryLayout.ofStruct(MemoryLayouts.PAD_8, aligned);\n+        GroupLayout alignedGroup = MemoryLayout.structLayout(MemoryLayouts.PAD_8, aligned);\n@@ -93,1 +93,1 @@\n-        SequenceLayout layout = MemoryLayout.ofSequence(5, MemoryLayouts.BITS_32_BE.withBitAlignment(align));\n+        SequenceLayout layout = MemoryLayout.sequenceLayout(5, MemoryLayouts.BITS_32_BE.withBitAlignment(align));\n@@ -96,1 +96,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -113,1 +113,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(vChar.withBitAlignment(8).withName(\"a\"),\n+        GroupLayout g = MemoryLayout.structLayout(vChar.withBitAlignment(8).withName(\"a\"),\n@@ -120,1 +120,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-            NATIVE(i -> MemorySegment.allocateNative(i, ResourceScope.ofImplicit())),\n+            NATIVE(i -> MemorySegment.allocateNative(i, ResourceScope.newImplicitScope())),\n","filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -32,1 +31,0 @@\n-import java.nio.ByteOrder;\n@@ -34,1 +32,0 @@\n-import java.util.concurrent.locks.ReentrantLock;\n@@ -64,1 +61,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -87,1 +84,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -110,1 +107,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -133,1 +130,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -160,1 +157,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -171,1 +168,1 @@\n-        MemoryLayout layout = MemoryLayout.ofSequence(2, MemoryLayouts.BITS_8_BE);\n+        MemoryLayout layout = MemoryLayout.sequenceLayout(2, MemoryLayouts.BITS_8_BE);\n@@ -175,1 +172,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -190,1 +187,1 @@\n-            VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)\n+            VarHandle byteHandle = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_BYTE)\n@@ -196,1 +193,1 @@\n-            VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)\n+            VarHandle byteHandle = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_BYTE)\n","filename":"test\/jdk\/java\/foreign\/TestMemoryHandleAsUnsigned.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -116,1 +116,1 @@\n-            try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -155,1 +155,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -166,1 +166,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -208,1 +208,1 @@\n-        NATIVE(i -> MemorySegment.allocateNative(i, ResourceScope.ofImplicit())),\n+        NATIVE(i -> MemorySegment.allocateNative(i, ResourceScope.newImplicitScope())),\n","filename":"test\/jdk\/java\/foreign\/TestMismatch.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-import static jdk.incubator.foreign.MemorySegment.*;\n+\n@@ -63,1 +63,1 @@\n-    static SequenceLayout bytes = MemoryLayout.ofSequence(100,\n+    static SequenceLayout bytes = MemoryLayout.sequenceLayout(100,\n@@ -67,1 +67,1 @@\n-    static SequenceLayout chars = MemoryLayout.ofSequence(100,\n+    static SequenceLayout chars = MemoryLayout.sequenceLayout(100,\n@@ -71,1 +71,1 @@\n-    static SequenceLayout shorts = MemoryLayout.ofSequence(100,\n+    static SequenceLayout shorts = MemoryLayout.sequenceLayout(100,\n@@ -75,1 +75,1 @@\n-    static SequenceLayout ints = MemoryLayout.ofSequence(100,\n+    static SequenceLayout ints = MemoryLayout.sequenceLayout(100,\n@@ -79,1 +79,1 @@\n-    static SequenceLayout floats = MemoryLayout.ofSequence(100,\n+    static SequenceLayout floats = MemoryLayout.sequenceLayout(100,\n@@ -83,1 +83,1 @@\n-    static SequenceLayout longs = MemoryLayout.ofSequence(100,\n+    static SequenceLayout longs = MemoryLayout.sequenceLayout(100,\n@@ -87,1 +87,1 @@\n-    static SequenceLayout doubles = MemoryLayout.ofSequence(100,\n+    static SequenceLayout doubles = MemoryLayout.sequenceLayout(100,\n@@ -157,1 +157,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -167,1 +167,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -180,1 +180,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -196,1 +196,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -215,1 +215,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -153,2 +153,2 @@\n-        addDefaultMapping(GroupLayout.class, MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT));\n-        addDefaultMapping(SequenceLayout.class, MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT));\n+        addDefaultMapping(GroupLayout.class, MemoryLayout.structLayout(MemoryLayouts.JAVA_INT));\n+        addDefaultMapping(SequenceLayout.class, MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT));\n@@ -161,2 +161,2 @@\n-        addDefaultMapping(ResourceScope.class, ResourceScope.ofConfined());\n-        addDefaultMapping(SegmentAllocator.class, SegmentAllocator.implicit());\n+        addDefaultMapping(ResourceScope.class, ResourceScope.newConfinedScope());\n+        addDefaultMapping(SegmentAllocator.class, (size, align) -> null);\n@@ -175,1 +175,1 @@\n-            }, ResourceScope.ofImplicit());\n+            }, ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.incubator.foreign.MemoryLayouts;\n@@ -38,1 +37,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -85,1 +83,1 @@\n-            NATIVE(i -> MemorySegment.allocateNative(i, ResourceScope.ofImplicit())),\n+            NATIVE(i -> MemorySegment.allocateNative(i, ResourceScope.newImplicitScope())),\n","filename":"test\/jdk\/java\/foreign\/TestRebase.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        SequenceLayout seq_flattened = MemoryLayout.ofSequence(flattenedSize, layout);\n+        SequenceLayout seq_flattened = MemoryLayout.sequenceLayout(flattenedSize, layout);\n@@ -57,1 +57,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(4, MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(4, MemoryLayouts.JAVA_INT);\n@@ -63,1 +63,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(4, MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(4, MemoryLayouts.JAVA_INT);\n@@ -69,1 +69,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(4, MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(4, MemoryLayouts.JAVA_INT);\n@@ -75,1 +75,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(4, MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(4, MemoryLayouts.JAVA_INT);\n@@ -81,1 +81,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT);\n@@ -87,1 +87,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT);\n@@ -93,1 +93,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT));\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT));\n@@ -127,1 +127,1 @@\n-    static MemoryLayout POINT = MemoryLayout.ofStruct(\n+    static MemoryLayout POINT = MemoryLayout.structLayout(\n","filename":"test\/jdk\/java\/foreign\/TestReshape.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-                ResourceScope.ofConfined(cleaner) :\n-                ResourceScope.ofConfined();\n+                ResourceScope.newConfinedScope(cleaner) :\n+                ResourceScope.newConfinedScope();\n@@ -81,2 +81,2 @@\n-                ResourceScope.ofShared(cleaner) :\n-                ResourceScope.ofShared();\n+                ResourceScope.newSharedScope(cleaner) :\n+                ResourceScope.newSharedScope();\n@@ -107,2 +107,2 @@\n-                ResourceScope.ofShared(cleaner) :\n-                ResourceScope.ofShared();\n+                ResourceScope.newSharedScope(cleaner) :\n+                ResourceScope.newSharedScope();\n@@ -157,2 +157,2 @@\n-                ResourceScope.ofConfined(cleaner) :\n-                ResourceScope.ofConfined();\n+                ResourceScope.newConfinedScope(cleaner) :\n+                ResourceScope.newConfinedScope();\n@@ -183,2 +183,2 @@\n-                ResourceScope.ofShared(cleaner) :\n-                ResourceScope.ofShared();\n+                ResourceScope.newSharedScope(cleaner) :\n+                ResourceScope.newSharedScope();\n@@ -211,1 +211,1 @@\n-        ResourceScope.ofConfined().close();\n+        ResourceScope.newConfinedScope().close();\n@@ -216,1 +216,1 @@\n-        ResourceScope.ofShared().close();\n+        ResourceScope.newSharedScope().close();\n@@ -221,1 +221,1 @@\n-        ResourceScope.Handle handle = ResourceScope.ofConfined().acquire();\n+        ResourceScope.Handle handle = ResourceScope.newConfinedScope().acquire();\n","filename":"test\/jdk\/java\/foreign\/TestResourceScope.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        ResourceScope scope = ResourceScope.ofConfined();\n+        ResourceScope scope = ResourceScope.newConfinedScope();\n@@ -70,1 +70,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -104,1 +104,1 @@\n-            ScopedOperation.ofSegment(s -> MemoryLayout.ofSequence(s.byteSize(), MemoryLayouts.JAVA_BYTE), \"MemorySegment::spliterator\");\n+            ScopedOperation.ofSegment(s -> MemoryLayout.sequenceLayout(s.byteSize(), MemoryLayouts.JAVA_BYTE), \"MemorySegment::spliterator\");\n@@ -116,2 +116,1 @@\n-            ScopedOperation.ofVaList(list -> list.vargAsSegment(MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT), ResourceScope.ofImplicit()), \"VaList::vargAsSegment\/1\");\n-            ScopedOperation.ofVaList(list -> list.vargAsSegment(MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT), SegmentAllocator.malloc(list::scope)), \"VaList::vargAsSegment\/2\");\n+            ScopedOperation.ofVaList(list -> list.vargAsSegment(MemoryLayout.structLayout(MemoryLayouts.JAVA_INT), ResourceScope.newImplicitScope()), \"VaList::vargAsSegment\/1\");\n@@ -218,3 +217,2 @@\n-            MALLOC(scope -> SegmentAllocator.malloc(() -> scope)),\n-            ARENA_BOUNDED(scope -> SegmentAllocator.arenaBounded(1000, scope)),\n-            ARENA_UNBOUNDED(SegmentAllocator::arenaUnbounded),\n+            ARENA_BOUNDED(scope -> SegmentAllocator.arenaAllocator(1000, scope)),\n+            ARENA_UNBOUNDED(SegmentAllocator::arenaAllocator),\n@@ -223,1 +221,1 @@\n-                return SegmentAllocator.prefix(segment);\n+                return SegmentAllocator.ofSegment(segment);\n@@ -225,1 +223,1 @@\n-            FROM_SCOPED(SegmentAllocator::scoped);\n+            FROM_SCOPE(SegmentAllocator::ofScope);\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-                    ResourceScope.ofConfined(),\n-                    ResourceScope.ofShared()\n+                    ResourceScope.newConfinedScope(),\n+                    ResourceScope.newSharedScope()\n@@ -102,2 +102,2 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n-            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n@@ -118,2 +118,2 @@\n-                ResourceScope.ofConfined(),\n-                ResourceScope.ofShared()\n+                ResourceScope.newConfinedScope(),\n+                ResourceScope.newSharedScope()\n@@ -360,2 +360,2 @@\n-        static AllocationFactory BOUNDED = new AllocationFactory(true, SegmentAllocator::arenaBounded);\n-        static AllocationFactory UNBOUNDED = new AllocationFactory(false, (size, scope) -> SegmentAllocator.arenaUnbounded(scope));\n+        static AllocationFactory BOUNDED = new AllocationFactory(true, SegmentAllocator::arenaAllocator);\n+        static AllocationFactory UNBOUNDED = new AllocationFactory(false, (size, scope) -> SegmentAllocator.arenaAllocator(scope));\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,3 +38,0 @@\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n@@ -43,1 +40,0 @@\n-import java.util.ArrayList;\n@@ -45,1 +41,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -50,2 +45,1 @@\n-import java.util.stream.Stream;\n-import static jdk.incubator.foreign.MemorySegment.*;\n+\n@@ -58,1 +52,1 @@\n-        MemorySegment.allocateNative(size, align, ResourceScope.ofImplicit());\n+        MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n@@ -63,1 +57,1 @@\n-        MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n@@ -69,1 +63,1 @@\n-        MemorySegment.allocateNative(Long.MAX_VALUE, ResourceScope.ofImplicit());\n+        MemorySegment.allocateNative(Long.MAX_VALUE, ResourceScope.newImplicitScope());\n@@ -74,1 +68,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(1024 * 1024 * 8 * 2, ResourceScope.ofImplicit()); \/\/ 2M\n+        MemorySegment segment = MemorySegment.allocateNative(1024 * 1024 * 8 * 2, ResourceScope.newImplicitScope()); \/\/ 2M\n@@ -79,1 +73,1 @@\n-        VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)\n+        VarHandle byteHandle = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_BYTE)\n@@ -81,1 +75,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -91,1 +85,1 @@\n-        VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)\n+        VarHandle byteHandle = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_BYTE)\n@@ -93,1 +87,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -134,6 +128,6 @@\n-                () -> MemorySegment.allocateNative(4, ResourceScope.ofImplicit()),\n-                () -> MemorySegment.allocateNative(4, 8, ResourceScope.ofImplicit()),\n-                () -> MemorySegment.allocateNative(MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()), ResourceScope.ofImplicit()),\n-                () -> MemorySegment.allocateNative(4, ResourceScope.ofConfined()),\n-                () -> MemorySegment.allocateNative(4, 8, ResourceScope.ofConfined()),\n-                () -> MemorySegment.allocateNative(MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()), ResourceScope.ofConfined())\n+                () -> MemorySegment.allocateNative(4, ResourceScope.newImplicitScope()),\n+                () -> MemorySegment.allocateNative(4, 8, ResourceScope.newImplicitScope()),\n+                () -> MemorySegment.allocateNative(MemoryLayout.valueLayout(32, ByteOrder.nativeOrder()), ResourceScope.newImplicitScope()),\n+                () -> MemorySegment.allocateNative(4, ResourceScope.newConfinedScope()),\n+                () -> MemorySegment.allocateNative(4, 8, ResourceScope.newConfinedScope()),\n+                () -> MemorySegment.allocateNative(MemoryLayout.valueLayout(32, ByteOrder.nativeOrder()), ResourceScope.newConfinedScope())\n@@ -147,1 +141,1 @@\n-        VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)\n+        VarHandle byteHandle = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_BYTE)\n@@ -247,1 +241,1 @@\n-            values[i * 2] = new Object[] { MemoryLayout.ofStruct(layoutFactories[i].make(7), MemoryLayout.ofPaddingBits(9)) }; \/\/ good size, bad align\n+            values[i * 2] = new Object[] { MemoryLayout.structLayout(layoutFactories[i].make(7), MemoryLayout.paddingLayout(9)) }; \/\/ good size, bad align\n@@ -254,3 +248,3 @@\n-        VALUE_BE(size -> MemoryLayout.ofValueBits(size, ByteOrder.BIG_ENDIAN)),\n-        VALUE_LE(size -> MemoryLayout.ofValueBits(size, ByteOrder.LITTLE_ENDIAN)),\n-        PADDING(MemoryLayout::ofPaddingBits);\n+        VALUE_BE(size -> MemoryLayout.valueLayout(size, ByteOrder.BIG_ENDIAN)),\n+        VALUE_LE(size -> MemoryLayout.valueLayout(size, ByteOrder.LITTLE_ENDIAN)),\n+        PADDING(MemoryLayout::paddingLayout);\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":20,"deletions":26,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n@@ -51,2 +50,2 @@\n-        SequenceLayout layout = MemoryLayout.ofSequence(1024, MemoryLayouts.JAVA_INT);\n-        try (ResourceScope scope = ResourceScope.ofShared()) {\n+        SequenceLayout layout = MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_INT);\n+        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n@@ -97,1 +96,1 @@\n-        try (ResourceScope scope = ResourceScope.ofShared()) {\n+        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n@@ -124,2 +123,2 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n-            MemorySegment s1 = MemorySegment.allocateNative(MemoryLayout.ofSequence(2, MemoryLayouts.JAVA_INT), scope);\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            MemorySegment s1 = MemorySegment.allocateNative(MemoryLayout.sequenceLayout(2, MemoryLayouts.JAVA_INT), scope);\n","filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.incubator.foreign.MemoryHandles;\n@@ -42,2 +41,2 @@\n-    static MemoryLayout LAYOUT = MemoryLayout.ofSequence(2,\n-            MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT));\n+    static MemoryLayout LAYOUT = MemoryLayout.sequenceLayout(2,\n+            MemoryLayout.sequenceLayout(5, MemoryLayouts.JAVA_INT));\n@@ -50,1 +49,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestSlices.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Map;\n@@ -43,2 +42,0 @@\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n@@ -49,1 +46,1 @@\n-import static jdk.incubator.foreign.MemorySegment.*;\n+\n@@ -54,1 +51,1 @@\n-    static final VarHandle INT_HANDLE = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)\n+    static final VarHandle INT_HANDLE = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT)\n@@ -61,1 +58,1 @@\n-        SequenceLayout layout = MemoryLayout.ofSequence(size, MemoryLayouts.JAVA_INT);\n+        SequenceLayout layout = MemoryLayout.sequenceLayout(size, MemoryLayouts.JAVA_INT);\n@@ -64,1 +61,1 @@\n-        try (ResourceScope scope = ResourceScope.ofShared()) {\n+        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n@@ -88,1 +85,1 @@\n-        SequenceLayout layout = MemoryLayout.ofSequence(1024, MemoryLayouts.JAVA_INT);\n+        SequenceLayout layout = MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_INT);\n@@ -91,1 +88,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(layout, ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -39,1 +38,0 @@\n-import java.nio.ByteOrder;\n@@ -49,1 +47,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -57,1 +55,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -65,1 +63,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -73,1 +71,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -81,1 +79,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -89,1 +87,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestTypeAccess.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        dummyStub = abi.upcallStub(DUMMY, FunctionDescriptor.ofVoid(), ResourceScope.ofImplicit());\n+        dummyStub = abi.upcallStub(DUMMY, FunctionDescriptor.ofVoid(), ResourceScope.newImplicitScope());\n@@ -111,2 +111,2 @@\n-        MethodHandle mh = abi.downcallHandle(addr, SegmentAllocator.implicit(), mtype, function(ret, paramTypes, fields));\n-        Object[] args = makeArgs(ResourceScope.ofImplicit(), ret, paramTypes, fields, returnChecks, argChecks);\n+        MethodHandle mh = abi.downcallHandle(addr, IMPLICIT_ALLOCATOR, mtype, function(ret, paramTypes, fields));\n+        Object[] args = makeArgs(ResourceScope.newImplicitScope(), ret, paramTypes, fields, returnChecks, argChecks);\n@@ -200,1 +200,1 @@\n-                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize(), ResourceScope.ofImplicit());\n+                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize(), ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import java.util.ArrayList;\n@@ -62,1 +61,1 @@\n-    static final MemoryLayout S_PDI_LAYOUT = MemoryLayout.ofStruct(\n+    static final MemoryLayout S_PDI_LAYOUT = MemoryLayout.structLayout(\n@@ -95,1 +94,1 @@\n-                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize(), ResourceScope.ofImplicit());\n+                MemorySegment copy = MemorySegment.allocateNative(ms.byteSize(), ResourceScope.newImplicitScope());\n@@ -110,1 +109,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    static final MemoryLayout S_PDI_LAYOUT = MemoryLayout.ofStruct(\n+    static final MemoryLayout S_PDI_LAYOUT = MemoryLayout.structLayout(\n@@ -96,1 +96,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStructScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.lang.ref.Cleaner;\n@@ -62,1 +61,1 @@\n-        return abi.upcallStub(MH_dummy, FunctionDescriptor.ofVoid(), ResourceScope.ofConfined());\n+        return abi.upcallStub(MH_dummy, FunctionDescriptor.ofVoid(), ResourceScope.newConfinedScope());\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStubs.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    static final MemoryLayout ML_CallInfo = MemoryLayout.ofStruct(\n+    static final MemoryLayout ML_CallInfo = MemoryLayout.structLayout(\n@@ -61,1 +61,1 @@\n-    static final VarHandle VH_IntArray = MemoryLayout.ofSequence(C_INT).varHandle(int.class, sequenceElement());\n+    static final VarHandle VH_IntArray = MemoryLayout.sequenceLayout(C_INT).varHandle(int.class, sequenceElement());\n@@ -71,1 +71,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -74,1 +74,1 @@\n-            MemorySegment argIDs = MemorySegment.allocateNative(MemoryLayout.ofSequence(args.size(), C_INT), scope);\n+            MemorySegment argIDs = MemorySegment.allocateNative(MemoryLayout.sequenceLayout(args.size(), C_INT), scope);\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -78,1 +77,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(1, 2, ResourceScope.ofImplicit());\n+        MemorySegment segment = MemorySegment.allocateNative(1, 2, ResourceScope.newImplicitScope());\n@@ -112,1 +111,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-        MemoryLayout struct2 = MemoryLayout.ofStruct(C_INT, C_INT, C_DOUBLE, C_INT);\n+        MemoryLayout struct2 = MemoryLayout.structLayout(C_INT, C_INT, C_DOUBLE, C_INT);\n@@ -150,1 +150,1 @@\n-            { MemoryLayout.ofStruct(C_INT, C_INT, C_DOUBLE), new Binding[] {\n+            { MemoryLayout.structLayout(C_INT, C_INT, C_DOUBLE), new Binding[] {\n@@ -165,1 +165,1 @@\n-            { MemoryLayout.ofStruct(C_INT, C_INT, C_FLOAT, C_FLOAT), new Binding[] {\n+            { MemoryLayout.structLayout(C_INT, C_INT, C_FLOAT, C_FLOAT), new Binding[] {\n@@ -173,1 +173,1 @@\n-            { MemoryLayout.ofStruct(C_FLOAT, MemoryLayout.ofPaddingBits(32), C_DOUBLE),\n+            { MemoryLayout.structLayout(C_FLOAT, MemoryLayout.paddingLayout(32), C_DOUBLE),\n@@ -186,2 +186,2 @@\n-        MemoryLayout struct1 = MemoryLayout.ofStruct(C_INT, C_INT, C_DOUBLE, C_INT);\n-        MemoryLayout struct2 = MemoryLayout.ofStruct(C_LONG, C_LONG, C_LONG);\n+        MemoryLayout struct1 = MemoryLayout.structLayout(C_INT, C_INT, C_DOUBLE, C_INT);\n+        MemoryLayout struct2 = MemoryLayout.structLayout(C_LONG, C_LONG, C_LONG);\n@@ -219,1 +219,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG, C_LONG, C_FLOAT);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG, C_LONG, C_FLOAT);\n@@ -242,1 +242,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG, C_LONG);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG, C_LONG);\n@@ -268,1 +268,1 @@\n-        MemoryLayout hfa = MemoryLayout.ofStruct(C_FLOAT, C_FLOAT);\n+        MemoryLayout hfa = MemoryLayout.structLayout(C_FLOAT, C_FLOAT);\n@@ -304,1 +304,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_FLOAT, C_FLOAT, C_FLOAT);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_FLOAT, C_FLOAT, C_FLOAT);\n@@ -354,1 +354,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_INT, C_INT, C_DOUBLE, C_INT);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_INT, C_INT, C_DOUBLE, C_INT);\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        MemoryLayout POINT = MemoryLayout.ofStruct(\n+        MemoryLayout POINT = MemoryLayout.structLayout(\n@@ -80,1 +80,1 @@\n-                MemoryLayout.ofStruct(\n+                MemoryLayout.structLayout(\n@@ -107,1 +107,1 @@\n-        MemoryLayout POINT = MemoryLayout.ofStruct(\n+        MemoryLayout POINT = MemoryLayout.structLayout(\n@@ -109,3 +109,3 @@\n-                MemoryLayout.ofPaddingBits(32),\n-                MemoryLayout.ofUnion(\n-                        MemoryLayout.ofStruct(C_INT, C_INT),\n+                MemoryLayout.paddingLayout(32),\n+                MemoryLayout.unionLayout(\n+                        MemoryLayout.structLayout(C_INT, C_INT),\n@@ -137,1 +137,1 @@\n-        MemoryLayout POINT = MemoryLayout.ofStruct(\n+        MemoryLayout POINT = MemoryLayout.structLayout(\n@@ -139,1 +139,1 @@\n-                MemoryLayout.ofStruct(\n+                MemoryLayout.structLayout(\n@@ -166,1 +166,1 @@\n-        MemoryLayout POINT = MemoryLayout.ofStruct(\n+        MemoryLayout POINT = MemoryLayout.structLayout(\n@@ -168,2 +168,2 @@\n-                MemoryLayout.ofUnion(\n-                        MemoryLayout.ofStruct(C_INT, C_INT),\n+                MemoryLayout.unionLayout(\n+                        MemoryLayout.structLayout(C_INT, C_INT),\n@@ -312,1 +312,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_INT, C_INT, C_DOUBLE);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_INT, C_INT, C_DOUBLE);\n@@ -403,1 +403,1 @@\n-            { MemoryLayout.ofStruct(C_LONG), new Binding[]{\n+            { MemoryLayout.structLayout(C_LONG), new Binding[]{\n@@ -407,1 +407,1 @@\n-            { MemoryLayout.ofStruct(C_LONG, C_LONG), new Binding[]{\n+            { MemoryLayout.structLayout(C_LONG, C_LONG), new Binding[]{\n@@ -413,1 +413,1 @@\n-            { MemoryLayout.ofStruct(C_LONG, C_LONG, C_LONG), new Binding[]{\n+            { MemoryLayout.structLayout(C_LONG, C_LONG, C_LONG), new Binding[]{\n@@ -421,1 +421,1 @@\n-            { MemoryLayout.ofStruct(C_LONG, C_LONG, C_LONG, C_LONG), new Binding[]{\n+            { MemoryLayout.structLayout(C_LONG, C_LONG, C_LONG, C_LONG), new Binding[]{\n@@ -436,1 +436,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG, C_LONG);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG, C_LONG);\n@@ -466,1 +466,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG, C_LONG, C_LONG);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG, C_LONG, C_LONG);\n@@ -489,1 +489,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_FLOAT); \/\/ should be passed in float regs\n+        MemoryLayout struct = MemoryLayout.structLayout(C_FLOAT); \/\/ should be passed in float regs\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-        MemoryLayout structLayout = MemoryLayout.ofStruct(C_INT, C_INT, C_DOUBLE);\n+        MemoryLayout structLayout = MemoryLayout.structLayout(C_INT, C_INT, C_DOUBLE);\n@@ -211,1 +211,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG_LONG);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG_LONG);\n@@ -240,1 +240,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG_LONG, C_LONG_LONG);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG_LONG, C_LONG_LONG);\n@@ -291,1 +291,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG_LONG);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG_LONG);\n@@ -313,1 +313,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG_LONG, C_LONG_LONG);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_LONG_LONG, C_LONG_LONG);\n@@ -333,1 +333,1 @@\n-        MemoryLayout struct = MemoryLayout.ofStruct(C_POINTER, C_DOUBLE, C_INT);\n+        MemoryLayout struct = MemoryLayout.structLayout(C_POINTER, C_DOUBLE, C_INT);\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.internal.foreign.abi.SharedUtils;\n@@ -110,1 +109,1 @@\n-            = actions -> Windowsx64Linker.newVaList(actions, ResourceScope.ofConfined());\n+            = actions -> Windowsx64Linker.newVaList(actions, ResourceScope.newConfinedScope());\n@@ -112,1 +111,1 @@\n-            = actions -> SysVx64Linker.newVaList(actions, ResourceScope.ofConfined());\n+            = actions -> SysVx64Linker.newVaList(actions, ResourceScope.newConfinedScope());\n@@ -114,1 +113,1 @@\n-            = actions -> AArch64Linker.newVaList(actions, ResourceScope.ofConfined());\n+            = actions -> AArch64Linker.newVaList(actions, ResourceScope.newConfinedScope());\n@@ -116,1 +115,1 @@\n-            = (builder) -> VaList.make(builder, ResourceScope.ofConfined());\n+            = (builder) -> VaList.make(builder, ResourceScope.newConfinedScope());\n@@ -204,1 +203,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -224,1 +223,1 @@\n-                    MemorySegment struct = list.vargAsSegment(pointLayout, ResourceScope.ofImplicit());\n+                    MemorySegment struct = list.vargAsSegment(pointLayout, ResourceScope.newImplicitScope());\n@@ -237,1 +236,1 @@\n-            GroupLayout pointLayout =  MemoryLayout.ofStruct(\n+            GroupLayout pointLayout =  MemoryLayout.structLayout(\n@@ -258,1 +257,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -276,1 +275,1 @@\n-                    MemorySegment struct = list.vargAsSegment(BigPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = list.vargAsSegment(BigPoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -289,1 +288,1 @@\n-            GroupLayout BigPoint_LAYOUT =  MemoryLayout.ofStruct(\n+            GroupLayout BigPoint_LAYOUT =  MemoryLayout.structLayout(\n@@ -310,1 +309,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -328,1 +327,1 @@\n-                    MemorySegment struct = list.vargAsSegment(FloatPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = list.vargAsSegment(FloatPoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -341,1 +340,1 @@\n-            GroupLayout FloatPoint_LAYOUT = MemoryLayout.ofStruct(\n+            GroupLayout FloatPoint_LAYOUT = MemoryLayout.structLayout(\n@@ -363,1 +362,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -385,1 +384,1 @@\n-                    MemorySegment struct = list.vargAsSegment(HugePoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = list.vargAsSegment(HugePoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -399,1 +398,1 @@\n-            GroupLayout HugePoint_LAYOUT = MemoryLayout.ofStruct(\n+            GroupLayout HugePoint_LAYOUT = MemoryLayout.structLayout(\n@@ -426,1 +425,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -478,1 +477,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -510,1 +509,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -572,1 +571,1 @@\n-            try (ResourceScope innerScope = ResourceScope.ofConfined()) {\n+            try (ResourceScope innerScope = ResourceScope.newConfinedScope()) {\n@@ -631,1 +630,1 @@\n-        GroupLayout BigPoint_LAYOUT = MemoryLayout.ofStruct(\n+        GroupLayout BigPoint_LAYOUT = MemoryLayout.structLayout(\n@@ -637,1 +636,1 @@\n-        GroupLayout Point_LAYOUT = MemoryLayout.ofStruct(\n+        GroupLayout Point_LAYOUT = MemoryLayout.structLayout(\n@@ -643,1 +642,1 @@\n-        GroupLayout FloatPoint_LAYOUT = MemoryLayout.ofStruct(\n+        GroupLayout FloatPoint_LAYOUT = MemoryLayout.structLayout(\n@@ -649,1 +648,1 @@\n-        GroupLayout HugePoint_LAYOUT = MemoryLayout.ofStruct(\n+        GroupLayout HugePoint_LAYOUT = MemoryLayout.structLayout(\n@@ -660,1 +659,1 @@\n-                    MemorySegment struct = vaList.vargAsSegment(BigPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = vaList.vargAsSegment(BigPoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -666,1 +665,1 @@\n-                    MemorySegment struct = vaList.vargAsSegment(BigPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = vaList.vargAsSegment(BigPoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -674,1 +673,1 @@\n-                    struct = copy.vargAsSegment(BigPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    struct = copy.vargAsSegment(BigPoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -679,1 +678,1 @@\n-                    MemorySegment struct = vaList.vargAsSegment(Point_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = vaList.vargAsSegment(Point_LAYOUT, ResourceScope.newImplicitScope());\n@@ -684,1 +683,1 @@\n-                    MemorySegment struct = vaList.vargAsSegment(HugePoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = vaList.vargAsSegment(HugePoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -690,1 +689,1 @@\n-                    MemorySegment struct = vaList.vargAsSegment(FloatPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = vaList.vargAsSegment(FloatPoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -735,1 +734,1 @@\n-                    MemorySegment point = vaList.vargAsSegment(Point_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment point = vaList.vargAsSegment(Point_LAYOUT, ResourceScope.newImplicitScope());\n@@ -740,1 +739,1 @@\n-                    MemorySegment bigPoint = vaList.vargAsSegment(BigPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment bigPoint = vaList.vargAsSegment(BigPoint_LAYOUT, ResourceScope.newImplicitScope());\n@@ -748,1 +747,1 @@\n-                    MemorySegment struct = copy.vargAsSegment(BigPoint_LAYOUT, ResourceScope.ofImplicit());\n+                    MemorySegment struct = copy.vargAsSegment(BigPoint_LAYOUT, ResourceScope.newImplicitScope());\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":33,"deletions":34,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.ofConfined());\n+    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.newConfinedScope());\n@@ -67,2 +67,2 @@\n-    static final MemorySegment mismatchSegmentLarge1 = MemorySegment.allocateNative(SIZE_WITH_TAIL, ResourceScope.ofConfined());\n-    static final MemorySegment mismatchSegmentLarge2 = MemorySegment.allocateNative(SIZE_WITH_TAIL, ResourceScope.ofConfined());\n+    static final MemorySegment mismatchSegmentLarge1 = MemorySegment.allocateNative(SIZE_WITH_TAIL, ResourceScope.newConfinedScope());\n+    static final MemorySegment mismatchSegmentLarge2 = MemorySegment.allocateNative(SIZE_WITH_TAIL, ResourceScope.newConfinedScope());\n@@ -73,2 +73,2 @@\n-    static final MemorySegment mismatchSegmentSmall1 = MemorySegment.allocateNative(7, ResourceScope.ofConfined());\n-    static final MemorySegment mismatchSegmentSmall2 = MemorySegment.allocateNative(7, ResourceScope.ofConfined());\n+    static final MemorySegment mismatchSegmentSmall1 = MemorySegment.allocateNative(7, ResourceScope.newConfinedScope());\n+    static final MemorySegment mismatchSegmentSmall2 = MemorySegment.allocateNative(7, ResourceScope.newConfinedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/BulkOps.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -82,1 +83,1 @@\n-    static final MemoryLayout POINT_LAYOUT = MemoryLayout.ofStruct(\n+    static final MemoryLayout POINT_LAYOUT = MemoryLayout.structLayout(\n@@ -86,1 +87,1 @@\n-    static final MemorySegment point = MemorySegment.allocateNative(POINT_LAYOUT);\n+    static final MemorySegment point = MemorySegment.allocateNative(POINT_LAYOUT, ResourceScope.newImplicitScope());\n@@ -88,1 +89,1 @@\n-    static final SegmentAllocator recycling_allocator = SegmentAllocator.prefix(MemorySegment.allocateNative(POINT_LAYOUT));\n+    static final SegmentAllocator recycling_allocator = SegmentAllocator.ofSegment(MemorySegment.allocateNative(POINT_LAYOUT, ResourceScope.newImplicitScope()));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/CallOverheadHelper.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -39,1 +40,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -75,2 +75,2 @@\n-    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE);\n-    static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());\n+    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.newImplicitScope());\n+    static final VarHandle VH_int = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, sequenceElement());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverConstant.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    static final MemoryLayout ALLOC_LAYOUT = MemoryLayout.ofSequence(ELEM_SIZE, JAVA_INT);\n+    static final MemoryLayout ALLOC_LAYOUT = MemoryLayout.sequenceLayout(ELEM_SIZE, JAVA_INT);\n@@ -64,1 +64,1 @@\n-    static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());\n+    static final VarHandle VH_int = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, sequenceElement());\n@@ -66,2 +66,2 @@\n-    final ResourceScope scope = ResourceScope.ofConfined();\n-    final SegmentAllocator recyclingAlloc = SegmentAllocator.prefix(MemorySegment.allocateNative(ALLOC_LAYOUT, scope));\n+    final ResourceScope scope = ResourceScope.newConfinedScope();\n+    final SegmentAllocator recyclingAlloc = SegmentAllocator.ofSegment(MemorySegment.allocateNative(ALLOC_LAYOUT, scope));\n@@ -85,1 +85,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -95,1 +95,1 @@\n-        try (ResourceScope scope = ResourceScope.ofShared()) {\n+        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n@@ -141,1 +141,1 @@\n-        MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, 4);\n+        MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, 4, ResourceScope.newImplicitScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNew.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());\n+    static final VarHandle VH_int = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, sequenceElement());\n@@ -75,1 +75,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.ofConfined());\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.newConfinedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-        segmentIn = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.ofConfined());\n-        segmentOut = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.ofConfined());\n+        segmentIn = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.newConfinedScope());\n+        segmentOut = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.newConfinedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantFP.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());\n+    static final VarHandle VH_int = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, sequenceElement());\n@@ -82,1 +82,1 @@\n-            MemorySegment s = MemorySegment.allocateNative(ALLOC_SIZE, 1, ResourceScope.ofConfined(Cleaner.create()));\n+            MemorySegment s = MemorySegment.allocateNative(ALLOC_SIZE, 1, ResourceScope.newConfinedScope(Cleaner.create()));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());\n+    static final VarHandle VH_int = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, sequenceElement());\n@@ -99,1 +99,1 @@\n-        segment = MemorySegment.mapFile(tempPath, 0L, ALLOC_SIZE, FileChannel.MapMode.READ_WRITE, ResourceScope.ofConfined());\n+        segment = MemorySegment.mapFile(tempPath, 0L, ALLOC_SIZE, FileChannel.MapMode.READ_WRITE, ResourceScope.newConfinedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());\n+    static final VarHandle VH_int = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, sequenceElement());\n@@ -75,1 +75,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, ResourceScope.ofShared());\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, ResourceScope.newSharedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantShared.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    static final VarHandle intHandle = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, MemoryLayout.PathElement.sequenceElement());\n+    static final VarHandle intHandle = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, MemoryLayout.PathElement.sequenceElement());\n@@ -75,1 +75,1 @@\n-        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, 4, ResourceScope.ofConfined());\n+        nativeSegment = MemorySegment.allocateNative(ALLOC_SIZE, 4, ResourceScope.newConfinedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverPollutedSegments.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());\n+    static final VarHandle VH_int = MemoryLayout.sequenceLayout(JAVA_INT).varHandle(int.class, sequenceElement());\n@@ -71,1 +71,1 @@\n-    final static SequenceLayout SEQUENCE_LAYOUT = MemoryLayout.ofSequence(ELEM_SIZE, MemoryLayouts.JAVA_INT);\n+    final static SequenceLayout SEQUENCE_LAYOUT = MemoryLayout.sequenceLayout(ELEM_SIZE, MemoryLayouts.JAVA_INT);\n@@ -86,1 +86,1 @@\n-        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, ResourceScope.ofShared());\n+        segment = MemorySegment.allocateNative(ALLOC_SIZE, CARRIER_SIZE, ResourceScope.newSharedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ParallelSum.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    ResourceScope scope = ResourceScope.ofConfined();\n+    ResourceScope scope = ResourceScope.newConfinedScope();\n@@ -65,1 +65,1 @@\n-    SegmentAllocator arenaAllocator = SegmentAllocator.arenaUnbounded(scope);\n+    SegmentAllocator arenaAllocator = SegmentAllocator.arenaAllocator(scope);\n@@ -101,1 +101,1 @@\n-        segmentAllocator = SegmentAllocator.prefix(MemorySegment.allocateNative(size + 1));\n+        segmentAllocator = SegmentAllocator.ofSegment(MemorySegment.allocateNative(size + 1, ResourceScope.newImplicitScope()));\n@@ -116,1 +116,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n@@ -136,1 +136,1 @@\n-        CLinker.freeMemoryRestricted(address);\n+        CLinker.freeMemory(address);\n@@ -151,2 +151,2 @@\n-        MemoryAddress address = CLinker.allocateMemoryRestricted(len + 1);\n-        MemorySegment str = address.asSegmentRestricted(len + 1, ResourceScope.globalScope());\n+        MemoryAddress address = CLinker.allocateMemory(len + 1);\n+        MemorySegment str = address.asSegment(len + 1, ResourceScope.globalScope());\n@@ -162,1 +162,1 @@\n-        MemorySegment str = address.asSegmentRestricted(len + 1, ResourceScope.globalScope());\n+        MemorySegment str = address.asSegment(len + 1, ResourceScope.globalScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/StrLenTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -89,1 +88,1 @@\n-    static final VarHandle VH_addr_int = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)\n+    static final VarHandle VH_addr_int = MemoryLayout.sequenceLayout(MemoryLayouts.JAVA_INT)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestAdaptVarHandles.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -37,1 +36,0 @@\n-import java.lang.reflect.Field;\n@@ -51,1 +49,1 @@\n-    static final VarHandle LONG_HANDLE = MemoryLayout.ofSequence(SIZE, MemoryLayouts.JAVA_LONG)\n+    static final VarHandle LONG_HANDLE = MemoryLayout.sequenceLayout(SIZE, MemoryLayouts.JAVA_LONG)\n@@ -70,2 +68,2 @@\n-            this.inputSegment = MemoryAddress.ofLong(inputAddress).asSegmentRestricted(8*SIZE);\n-            this.outputSegment = MemoryAddress.ofLong(outputAddress).asSegmentRestricted(8*SIZE);\n+            this.inputSegment = MemoryAddress.ofLong(inputAddress).asSegment(8*SIZE, ResourceScope.globalScope());\n+            this.outputSegment = MemoryAddress.ofLong(outputAddress).asSegment(8*SIZE, ResourceScope.globalScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/UnrolledAccess.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -137,1 +138,1 @@\n-            fd\n+            fd, ResourceScope.globalScope()\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        data = MemorySegment.allocateNative(JAVA_INT, ResourceScope.ofConfined());\n+        data = MemorySegment.allocateNative(JAVA_INT, ResourceScope.newConfinedScope());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VarHandleExact.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    public static final MemoryLayout LAYOUT = MemoryLayout.ofStruct(\n+    public static final MemoryLayout LAYOUT = MemoryLayout.structLayout(\n@@ -70,1 +70,1 @@\n-        this(MemorySegment.allocateNative(LAYOUT, ResourceScope.ofConfined()), x, y);\n+        this(MemorySegment.allocateNative(LAYOUT, ResourceScope.newConfinedScope()), x, y);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}