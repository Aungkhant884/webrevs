[{"commit":{"message":"MemorySegmentPool + Allocator\n\n(Preview)\n\nThe MemorySegmentPool is a pool maintaining memory segments, optionally can expose allocator which can be bound to other scope, and which will return allocated segments back to pool.\n\nHowever the best results has been achieved by using getSegmentEntry & putSegmentEntry methods.\n\nThe pool is intended to be used by long running applications (i.e. like global shared pool), where fast allocation and de-allocation of segments is critical (was designed during implementation of I\/O subsystem with Panama, as a pool for temporary buffers between system I\/O methods and Java byte arrays from InputStreams).\n\nThe pool uses hand-made SpinLockQueue as the Deque from JDK offers too much functionality and overhead."},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegmentPool.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SpinLockQueue.java"}],"sha":"b31434cef94045b37811ded33e228eff575d5ae8"}]