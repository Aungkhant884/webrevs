{"files":[{"patch":"@@ -546,1 +546,1 @@\n-            bufferScope = ResourceScopeImpl.GLOBAL;\n+            bufferScope = ResourceScopeImpl.heapScope(bb);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.lang.ref.Reference;\n@@ -68,0 +69,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -611,0 +613,22 @@\n+    @Test\n+    public void testOfBufferScopeReachable() throws InterruptedException {\n+        ByteBuffer buffer = ByteBuffer.allocateDirect(1000);\n+        MemorySegment segment = MemorySegment.ofByteBuffer(buffer);\n+        try {\n+            AtomicBoolean reachable = new AtomicBoolean(true);\n+            Cleaner.create().register(buffer, () -> {\n+                reachable.set(false);\n+            });\n+            buffer = null;\n+            System.gc();\n+            \/\/ let's sleep to let cleaner run\n+            Thread.sleep(100);\n+            segment.get(JAVA_BYTE, 0);\n+            if (!reachable.get()) {\n+                throw new IllegalStateException();\n+            }\n+        } finally {\n+            Reference.reachabilityFence(segment);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}