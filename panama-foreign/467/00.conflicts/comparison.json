{"files":[{"patch":"@@ -358,0 +358,7 @@\n+<<<<<<< HEAD\n+=======\n+  if (map->update_map() && jfa->saved_fp_address()) {\n+    update_map_with_saved_link(map, jfa->saved_fp_address());\n+  }\n+\n+>>>>>>> 96c29d5271d655c1a967ffd67041b21da056d503\n@@ -361,0 +368,10 @@\n+JavaFrameAnchor* EntryBlob::jfa_for_frame(const frame& frame) const {\n+  ShouldNotCallThis();\n+  return nullptr;\n+}\n+\n+frame frame::sender_for_panama_entry_frame(RegisterMap* map) const {\n+  ShouldNotCallThis();\n+  return {};\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+    } else if (is_panama_entry_frame()) {\n+      return fp_safe;\n@@ -202,0 +204,2 @@\n+    } else if (sender_blob->is_entry_blob()) {\n+      return false;\n@@ -349,0 +353,37 @@\n+<<<<<<< HEAD\n+=======\n+  if (map->update_map() && jfa->saved_rbp_address()) {\n+    update_map_with_saved_link(map, jfa->saved_rbp_address());\n+  }\n+\n+  return fr;\n+}\n+\n+JavaFrameAnchor* EntryBlob::jfa_for_frame(const frame& frame) const {\n+  \/\/ need unextended_sp here, since normal sp is wrong for interpreter callees\n+  return reinterpret_cast<JavaFrameAnchor*>(reinterpret_cast<char*>(frame.unextended_sp()) + in_bytes(jfa_sp_offset()));\n+}\n+\n+frame frame::sender_for_panama_entry_frame(RegisterMap* map) const {\n+  assert(map != NULL, \"map must be set\");\n+  EntryBlob* blob = _cb->as_entry_blob();\n+  \/\/ Java frame called from C; skip all C frames and return top C\n+  \/\/ frame of that chunk as the sender\n+  JavaFrameAnchor* jfa = blob->jfa_for_frame(*this);\n+  assert(jfa->last_Java_sp() > sp(), \"must be above this frame on stack\");\n+  \/\/ Since we are walking the stack now this nested anchor is obviously walkable\n+  \/\/ even if it wasn't when it was stacked.\n+  if (!jfa->walkable()) {\n+    \/\/ Capture _last_Java_pc (if needed) and mark anchor walkable.\n+    jfa->capture_last_Java_pc();\n+  }\n+  map->clear();\n+  assert(map->include_argument_oops(), \"should be set by clear\");\n+  vmassert(jfa->last_Java_pc() != NULL, \"not walkable\");\n+  frame fr(jfa->last_Java_sp(), jfa->last_Java_fp(), jfa->last_Java_pc());\n+\n+  if (map->update_map() && jfa->saved_rbp_address()) {\n+    update_map_with_saved_link(map, jfa->saved_rbp_address());\n+  }\n+\n+>>>>>>> 96c29d5271d655c1a967ffd67041b21da056d503\n@@ -481,2 +522,3 @@\n-  if (is_entry_frame())       return sender_for_entry_frame(map);\n-  if (is_interpreted_frame()) return sender_for_interpreter_frame(map);\n+  if (is_entry_frame())        return sender_for_entry_frame(map);\n+  if (is_panama_entry_frame()) return sender_for_panama_entry_frame(map);\n+  if (is_interpreted_frame())  return sender_for_interpreter_frame(map);\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+<<<<<<< HEAD\n@@ -74,0 +75,3 @@\n+=======\n+  intptr_t** saved_rbp_address(void) const       { return _saved_rbp_address; }\n+>>>>>>> 96c29d5271d655c1a967ffd67041b21da056d503\n","filename":"src\/hotspot\/cpu\/x86\/javaFrameAnchor_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}