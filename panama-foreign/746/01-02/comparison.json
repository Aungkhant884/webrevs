{"files":[{"patch":"@@ -193,1 +193,1 @@\n-        VMStorage stackAlloc(long size, long alignment, boolean subSlotPacking) {\n+        VMStorage stackAlloc(long size, long alignment) {\n@@ -195,4 +195,1 @@\n-            long stackSlotAlignment = subSlotPacking && !forVarArgs\n-                    ? alignment\n-                    : Math.max(alignment, STACK_SLOT_SIZE);\n-            long alignedStackOffset = Utils.alignUp(stackOffset, stackSlotAlignment);\n+            long alignedStackOffset = Utils.alignUp(stackOffset, alignment);\n@@ -210,1 +207,4 @@\n-            return stackAlloc(layout.byteSize(), layout.byteAlignment(), requiresSubSlotStackPacking());\n+            long stackSlotAlignment = requiresSubSlotStackPacking() && !forVarArgs\n+                    ? layout.byteAlignment()\n+                    : Math.max(layout.byteAlignment(), STACK_SLOT_SIZE);\n+            return stackAlloc(layout.byteSize(), stackSlotAlignment);\n@@ -254,2 +254,1 @@\n-                    MemoryLayout member = group.memberLayouts().get(i);\n-                    slots[i] = stackAlloc(member.byteSize(), member.byteAlignment(), true);\n+                    slots[i] = stackAlloc(group.memberLayouts().get(i));\n@@ -290,1 +289,1 @@\n-                    storageCalculator.stackAlloc(copy, layout.byteAlignment(), false);\n+                    storageCalculator.stackAlloc(copy, STACK_SLOT_SIZE);\n@@ -317,1 +316,1 @@\n-                    storageCalculator.stackAlloc(copy, layout.byteAlignment(), false);\n+                    storageCalculator.stackAlloc(copy, STACK_SLOT_SIZE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}