{"files":[{"patch":"@@ -211,2 +211,4 @@\n-    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String ignored, MemoryLayout parentLayout) {\n-        return addVarHandle(javaName, nativeName, layout, type, parentLayout);\n+    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout,\n+                                                    Class<?> type, String ignored, MemoryLayout rootLayout,\n+                                                    List<String> prefixElementNames) {\n+        return addVarHandle(javaName, nativeName, layout, type, rootLayout, prefixElementNames);\n@@ -217,1 +219,1 @@\n-        return addVarHandle(javaName, nativeName, layout, type, null);\n+        return addVarHandle(javaName, nativeName, layout, type, null, List.of());\n@@ -220,2 +222,4 @@\n-    private DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n-        return emitCondyGetter(javaName + \"$VH\", VarHandle.class, varHandleDesc(javaName, nativeName, layout, type, parentLayout));\n+    private DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type,\n+                                                MemoryLayout rootLayout, List<String> prefixElementNames) {\n+        return emitCondyGetter(javaName + \"$VH\", VarHandle.class,\n+                varHandleDesc(javaName, nativeName, layout, type, rootLayout, prefixElementNames));\n@@ -443,2 +447,7 @@\n-    private static ConstantDesc varHandleDesc(String name, ConstantDesc memoryLayout, ClassDesc carrier, ConstantDesc path) {\n-        return DynamicConstantDesc.ofNamed(BSM_INVOKE, \"VH_\" + name, CD_VarHandle, MH_MemoryLayout_varHandle, memoryLayout, carrier, path);\n+    private static ConstantDesc varHandleDesc(String name, ConstantDesc memoryLayout, ClassDesc carrier, ConstantDesc[] path) {\n+        ConstantDesc[] args = new ConstantDesc[path.length + 3];\n+        args[0] = MH_MemoryLayout_varHandle;\n+        args[1] = memoryLayout;\n+        args[2] = carrier;\n+        System.arraycopy(path, 0, args, 3, path.length);\n+        return DynamicConstantDesc.ofNamed(BSM_INVOKE, \"VH_\" + name, CD_VarHandle, args);\n@@ -459,1 +468,2 @@\n-    private static ConstantDesc varHandleDesc(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    private static ConstantDesc varHandleDesc(String javaName, String nativeName, MemoryLayout layout, Class<?> type,\n+                                              MemoryLayout rootLayout, List<String> prefixElementNames) {\n@@ -465,3 +475,12 @@\n-        var varHandle = parentLayout != null ?\n-                varHandleDesc(javaName, desc(parentLayout), carrier, groupElementDesc(nativeName)) :\n-                varHandleDesc(javaName, desc(layout), carrier);\n+        ConstantDesc varHandle;\n+        if (rootLayout != null) {\n+            ConstantDesc[] pathElems = new ConstantDesc[prefixElementNames.size() + 1];\n+            int i = 0;\n+            for (; i < prefixElementNames.size(); i++) {\n+                pathElems[i] = groupElementDesc(prefixElementNames.get(i));\n+            }\n+            pathElems[i] = groupElementDesc(nativeName);\n+            varHandle = varHandleDesc(javaName, desc(rootLayout), carrier, pathElems);\n+        } else {\n+            varHandle = varHandleDesc(javaName, desc(layout), carrier);\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ClassConstantHelper.java","additions":30,"deletions":11,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-    DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout parentLayout);\n+    DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type,\n+                                             String rootJavaName, MemoryLayout rootLayout, List<String> elementNames);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ConstantHelper.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,3 @@\n+\n+    public static final String JEXTRACT_ANONYMOUS = \"jextract\/anonymous\";\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/LayoutUtils.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,3 @@\n-    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout parentLayout) {\n+    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout,\n+                                                    Class<?> type, String rootJavaName, MemoryLayout rootLayout,\n+                                                    List<String> elementNames) {\n@@ -91,1 +93,1 @@\n-        return delegate.addFieldVarHandle(javaName, nativeName, layout, type, parentJavaName, parentLayout);\n+        return delegate.addFieldVarHandle(javaName, nativeName, layout, type, rootJavaName, rootLayout, elementNames);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/MultiFileConstantHelper.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+import static jdk.internal.jextract.impl.LayoutUtils.JEXTRACT_ANONYMOUS;\n+\n@@ -192,15 +194,19 @@\n-        boolean structClass = false;\n-        if (!d.name().isEmpty() || !isRecord(parent)) {\n-            \/\/only add explicit struct layout if the struct is not to be flattened inside another struct\n-            switch (d.kind()) {\n-                case STRUCT:\n-                case UNION: {\n-                    structClass = true;\n-                    String className = d.name().isEmpty() ? parent.name() : d.name();\n-                    GroupLayout parentLayout = (GroupLayout)parentLayout(d);\n-                    currentBuilder = currentBuilder.newStructBuilder(className, parentLayout, Type.declared(d));\n-                    addStructDefinition(d, currentBuilder.className);\n-                    currentBuilder.classBegin();\n-                    currentBuilder.addLayoutGetter(((StructBuilder)currentBuilder).layoutField(), d.layout().get());\n-                    break;\n-                }\n+        boolean isStructKind = switch (d.kind()) {\n+            case STRUCT, UNION -> true;\n+            default -> false;\n+        };\n+        boolean isAnonNested = d.name().isEmpty() && isRecord(parent);\n+        if (isStructKind) {\n+            if (!isAnonNested) {\n+                \/\/only add explicit struct layout if the struct is not to be flattened inside another struct\n+                String className = d.name().isEmpty() ? parent.name() : d.name();\n+                GroupLayout parentLayout = (GroupLayout) layoutFor(d);\n+                currentBuilder = currentBuilder.newStructBuilder(className, parentLayout, Type.declared(d));\n+                addStructDefinition(d, currentBuilder.className);\n+                currentBuilder.classBegin();\n+                currentBuilder.addLayoutGetter(((StructBuilder) currentBuilder).layoutField(), d.layout().get());\n+            } else {\n+                \/\/ for anonymous nested structs, add a prefix for field layout lookups\n+                \/\/ but don't generate a separate class\n+                String anonymousStructName = findAnonymousStructName(d, (Declaration.Scoped) parent);\n+                ((StructBuilder) currentBuilder).pushPrefixElement(anonymousStructName);\n@@ -210,2 +216,6 @@\n-        if (structClass) {\n-            currentBuilder = currentBuilder.classEnd();\n+        if (isStructKind) {\n+            if (!isAnonNested) {\n+                currentBuilder = currentBuilder.classEnd();\n+            } else {\n+                ((StructBuilder) currentBuilder).popPrefixElement();\n+            }\n@@ -216,0 +226,18 @@\n+    private String findAnonymousStructName(Declaration.Scoped d, Declaration.Scoped parent) {\n+        \/\/ nested anonymous struct or union\n+        GroupLayout layout = (GroupLayout) layoutFor(d);\n+        \/\/ look up layout in parent, which will have the right context-dependent name\n+        GroupLayout parentLayout = (GroupLayout) parent.layout().orElseThrow();\n+        for (MemoryLayout ml : parentLayout.memberLayouts()) {\n+            \/\/ look for anonymous structs\n+            if (ml.attribute(JEXTRACT_ANONYMOUS).isPresent()) {\n+                \/\/ it's enough to just compare the member layouts, since the member names\n+                \/\/ have to be unique within the parent layout (in C)\n+                if (((GroupLayout) ml).memberLayouts().equals(layout.memberLayouts())) {\n+                    return ml.name().orElseThrow();\n+                }\n+            }\n+        }\n+        throw new IllegalStateException(\"Could not find layout in parent\");\n+    }\n+\n@@ -514,3 +542,3 @@\n-    protected static MemoryLayout parentLayout(Declaration parent) {\n-        if (parent instanceof Declaration.Typedef) {\n-            Declaration.Typedef alias = (Declaration.Typedef) parent;\n+    protected static MemoryLayout layoutFor(Declaration decl) {\n+        if (decl instanceof Declaration.Typedef) {\n+            Declaration.Typedef alias = (Declaration.Typedef) decl;\n@@ -518,2 +546,2 @@\n-        } else if (parent instanceof Declaration.Scoped) {\n-            return ((Declaration.Scoped) parent).layout().orElseThrow();\n+        } else if (decl instanceof Declaration.Scoped) {\n+            return ((Declaration.Scoped) decl).layout().orElseThrow();\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":50,"deletions":22,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import static jdk.internal.jextract.impl.LayoutUtils.JEXTRACT_ANONYMOUS;\n+\n@@ -55,0 +57,2 @@\n+    private int anonCount = 0;\n+\n@@ -104,6 +108,10 @@\n-        if (c.isAnonymousStruct()) {\n-            GroupLayout layout = (GroupLayout) compute(offset, parent, c.type());\n-            fieldLayouts.addAll(layout.memberLayouts());\n-        } else {\n-            addFieldLayout(fieldLayout(c));\n-        }\n+        MemoryLayout memoryLayout = c.isAnonymousStruct()\n+            ? compute(offset, parent, c.type())\n+                .withName(nextAnonymousName())\n+                .withAttribute(JEXTRACT_ANONYMOUS, true)\n+            : fieldLayout(c);\n+        addFieldLayout(memoryLayout);\n+    }\n+\n+    private String nextAnonymousName() {\n+        return \"$anon$\" + anonCount++;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/RecordLayoutComputer.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -97,2 +97,4 @@\n-    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout ignored) {\n-        return addVarHandle(javaName, nativeName, layout, type, parentJavaName);\n+    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout,\n+                                                    Class<?> type, String rootJavaName, MemoryLayout ignored,\n+                                                    List<String> prefixElementNames) {\n+        return addVarHandle(javaName, nativeName, layout, type, rootJavaName, prefixElementNames);\n@@ -103,1 +105,1 @@\n-        return addVarHandle(javaName, nativeName, layout, type, null);\n+        return addVarHandle(javaName, nativeName, layout, type, null, List.of());\n@@ -106,1 +108,2 @@\n-    private DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaFieldName) {\n+    private DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type,\n+                                                String rootLayoutName, List<String> prefixElementNames) {\n@@ -112,1 +115,1 @@\n-            String fieldName = emitVarHandleField(javaName, nativeName, type, layout, parentJavaFieldName);\n+            String fieldName = emitVarHandleField(javaName, nativeName, type, layout, rootLayoutName, prefixElementNames);\n@@ -264,1 +267,2 @@\n-    private String emitVarHandleField(String javaName, String nativeName, Class<?> type, MemoryLayout layout, String parentJavaName) {\n+    private String emitVarHandleField(String javaName, String nativeName, Class<?> type, MemoryLayout layout,\n+                                      String rootLayoutName, List<String> prefixElementNames) {\n@@ -278,1 +282,1 @@\n-        builder.append(getLayoutFieldName(parentJavaName != null ? parentJavaName : javaName));\n+        builder.append(getLayoutFieldName(rootLayoutName != null ? rootLayoutName : javaName));\n@@ -280,1 +284,4 @@\n-        if (parentJavaName != null) {\n+        if (rootLayoutName != null) {\n+            for (String prefixElementName : prefixElementNames) {\n+                builder.append(\", MemoryLayout.PathElement.groupElement(\\\"\" + prefixElementName + \"\\\")\");\n+            }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/SourceConstantHelper.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.jextract.Declaration;\n@@ -33,0 +32,6 @@\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.List;\n+\n@@ -38,1 +43,1 @@\n-    private final GroupLayout parentLayout;\n+    private final GroupLayout structLayout;\n@@ -43,0 +48,1 @@\n+    private final Deque<String> prefixElementNames;\n@@ -44,1 +50,1 @@\n-    StructBuilder(JavaSourceBuilder enclosing, String className, GroupLayout parentLayout, Type structType) {\n+    StructBuilder(JavaSourceBuilder enclosing, String className, GroupLayout structLayout, Type structType) {\n@@ -46,1 +52,1 @@\n-        this.parentLayout = parentLayout;\n+        this.structLayout = structLayout;\n@@ -51,0 +57,13 @@\n+        prefixElementNames = new ArrayDeque<>();\n+    }\n+\n+    public void pushPrefixElement(String prefixElementName) {\n+        this.prefixElementNames.push(prefixElementName);\n+    }\n+\n+    public void popPrefixElement() {\n+        this.prefixElementNames.pop();\n+    }\n+\n+    private List<String> prefixNamesList() {\n+        return Collections.unmodifiableList(new ArrayList<>(prefixElementNames));\n@@ -77,1 +96,1 @@\n-        var desc = constantHelper.addFieldVarHandle(getQualifiedName(javaName), nativeName, layout, type, layoutField(), parentLayout);\n+        var desc = constantHelper.addFieldVarHandle(getQualifiedName(javaName), nativeName, layout, type, layoutField(), structLayout, prefixNamesList());\n@@ -139,0 +158,11 @@\n+    private MemoryLayout.PathElement[] elementPaths(String nativeFieldName) {\n+        List<String> prefixElements = prefixNamesList();\n+        MemoryLayout.PathElement[] elems = new MemoryLayout.PathElement[prefixElements.size() + 1];\n+        int i = 0;\n+        for (; i < prefixElements.size(); i++) {\n+            elems[i] = MemoryLayout.PathElement.groupElement(prefixElements.get(i));\n+        }\n+        elems[i] = MemoryLayout.PathElement.groupElement(nativeFieldName);\n+        return elems;\n+    }\n+\n@@ -147,1 +177,1 @@\n-        builder.append(parentLayout.byteOffset(MemoryLayout.PathElement.groupElement(nativeName)));\n+        builder.append(structLayout.byteOffset(elementPaths(nativeName)));\n@@ -278,1 +308,1 @@\n-        return getCallString(constantHelper.addFieldVarHandle(javaName, nativeName, layout, type, layoutField(), parentLayout));\n+        return getCallString(constantHelper.addFieldVarHandle(javaName, nativeName, layout, type, layoutField(), structLayout, prefixNamesList()));\n@@ -294,2 +324,1 @@\n-        GroupLayout groupLayout = parentLayout;\n-        String suffix = groupLayout.isUnion() ? \"union\" : \"struct\";\n+        String suffix = structLayout.isUnion() ? \"union\" : \"struct\";\n@@ -298,0 +327,5 @@\n+\n+    @Override\n+    StructBuilder newStructBuilder(String name, GroupLayout structLayout, Type type) {\n+        return new StructBuilder(this, name, structLayout, type);\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":43,"deletions":9,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-    protected MemoryLayout findLayout(Class<?> cls, String name) {\n+    protected static MemoryLayout findLayout(Class<?> cls, String name) {\n@@ -262,1 +262,1 @@\n-    protected MemoryLayout findLayout(Class<?> cls) {\n+    protected static MemoryLayout findLayout(Class<?> cls) {\n","filename":"test\/jdk\/tools\/jextract\/JextractToolRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Path;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertNotNull;\n-\n-\/*\n- * @test\n- * @modules jdk.incubator.jextract\n- * @library \/test\/lib\n- * @build JextractToolRunner\n- * @bug 8244512\n- * @summary jextract throws NPE for a nested struct declaration\n- * @run testng\/othervm -Dforeign.restricted=permit Test8244512\n- *\/\n-public class Test8244512 extends JextractToolRunner {\n-    @Test\n-    public void testNestedStructs() {\n-        Path nestedOutput = getOutputFilePath(\"nestedgen\");\n-        Path nestedH = getInputFilePath(\"nested.h\");\n-        run(\"-d\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n-        try(Loader loader = classLoader(nestedOutput)) {\n-            checkClass(loader, \"Foo\");\n-            checkClass(loader, \"Foo$Bar\");\n-            checkClass(loader, \"U\");\n-            checkClass(loader, \"U$Point\");\n-            checkClass(loader, \"MyStruct\");\n-            checkClass(loader, \"MyStruct$MyStruct_Z\");\n-            checkClass(loader, \"MyStruct$k\");\n-            checkClass(loader, \"MyUnion\");\n-            checkClass(loader, \"MyUnion$MyUnion_Z\");\n-            checkClass(loader, \"MyUnion$k\");\n-            checkClass(loader, \"X\");\n-            checkClass(loader, \"X2\");\n-        } finally {\n-            deleteDir(nestedOutput);\n-        }\n-    }\n-\n-    private static void checkClass(Loader loader, String name) {\n-        assertNotNull(loader.loadClass(\"nested_h$\" + name));\n-    }\n-}\n","filename":"test\/jdk\/tools\/jextract\/Test8244512.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.function.BiConsumer;\n+\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+import org.testng.annotations.Test;\n+\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.groupElement;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 8244512 8252759\n+ * @summary test nested structs and unions\n+ * @run testng\/othervm -Dforeign.restricted=permit TestNested\n+ *\/\n+public class TestNested extends JextractToolRunner {\n+    @Test\n+    public void testNestedStructs() {\n+        Path nestedOutput = getOutputFilePath(\"nestedgen\");\n+        Path nestedH = getInputFilePath(\"nested.h\");\n+        run(\"-d\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n+        try(Loader loader = classLoader(nestedOutput)) {\n+            checkClass(loader, \"Foo\",\n+                checkField(\"bar\", MemorySegment.class, 0),\n+                checkField(\"color\", int.class, 8)\n+            );\n+            checkClass(loader, \"Foo$Bar\",\n+                checkField(\"x\", int.class, 0),\n+                checkField(\"y\", int.class, 4)\n+            );\n+            checkClass(loader, \"U\",\n+                checkField(\"point\", MemorySegment.class, 0),\n+                checkField(\"rgb\", int.class, 0),\n+                checkField(\"i\", int.class, 0)\n+            );\n+            checkClass(loader, \"U$Point\",\n+                checkField(\"x\", short.class, 0),\n+                checkField(\"y\", short.class, 2)\n+            );\n+            checkClass(loader, \"MyStruct\",\n+                checkField(\"a\", byte.class, 0),\n+\n+                checkField(\"b\", int.class, 4, \"$anon$0\"),\n+                checkField(\"c\", int.class, 8, \"$anon$0\", \"$anon$0\"),\n+\n+                checkField(\"d\", byte.class, 12, \"$anon$0\"),\n+                checkField(\"f\", MemorySegment.class, 13, \"$anon$0\"),\n+\n+                checkField(\"g\", int.class, 16, \"$anon$1\"),\n+                checkField(\"h\", long.class, 16, \"$anon$1\"),\n+\n+                checkField(\"k\", MemorySegment.class, 24)\n+            );\n+            checkClass(loader, \"MyStruct$MyStruct_Z\",\n+                checkField(\"e\", byte.class, 0)\n+            );\n+            checkClass(loader, \"MyStruct$k\",\n+                checkField(\"i\", int.class, 0),\n+                checkField(\"j\", int.class, 4)\n+            );\n+            checkClass(loader, \"MyUnion\",\n+                checkField(\"a\", byte.class, 0),\n+\n+                checkField(\"b\", int.class, 0, \"$anon$0\"),\n+                checkField(\"c\", int.class, 4, \"$anon$0\", \"$anon$0\"),\n+\n+                checkField(\"d\", byte.class, 8, \"$anon$0\"),\n+                checkField(\"f\", MemorySegment.class, 9, \"$anon$0\"),\n+\n+                checkField(\"g\", int.class, 0, \"$anon$1\"),\n+                checkField(\"h\", int.class, 4, \"$anon$1\"),\n+\n+                checkField(\"k\", MemorySegment.class, 0)\n+            );\n+            checkClass(loader, \"MyUnion$MyUnion_Z\",\n+                checkField(\"e\", byte.class, 0)\n+            );\n+            checkClass(loader, \"MyUnion$k\",\n+                checkField(\"i\", int.class, 0),\n+                checkField(\"j\", long.class, 0)\n+            );\n+            checkClass(loader, \"X\",\n+                checkField(\"Z\", MemorySegment.class, 0, \"$anon$0\")\n+            );\n+            checkClass(loader, \"X$Z\",\n+                checkField(\"y\", int.class, 0)\n+            );\n+            checkClass(loader, \"X2\",\n+                checkField(\"y\", int.class, 0, \"$anon$0\", \"$anon$0\")\n+            );\n+        } finally {\n+            deleteDir(nestedOutput);\n+        }\n+    }\n+\n+    @SafeVarargs\n+    private static void checkClass(Loader loader, String name, BiConsumer<Class<?>, MemoryLayout>... checks) {\n+        Class<?> cls = loader.loadClass(\"nested_h$\" + name);\n+        assertNotNull(cls);\n+        MemoryLayout layout = findLayout(cls);\n+        for (var check : checks) {\n+            check.accept(cls, layout);\n+        }\n+    }\n+\n+    private static BiConsumer<Class<?>, MemoryLayout> checkField(String fieldName, Class<?> fieldType,\n+                                                                 long expectedOffset, String... fieldPath) {\n+        MemoryLayout.PathElement[] path = new MemoryLayout.PathElement[fieldPath.length + 1];\n+        int i = 0;\n+        for (; i < fieldPath.length; i++) {\n+            path[i] = groupElement(fieldPath[i]);\n+        }\n+        path[i] = groupElement(fieldName);\n+        return (cls, layout) -> {\n+            assertEquals(layout.byteOffset(path), expectedOffset);\n+            checkAccessors(cls, layout, fieldName, fieldType, layout.select(path));\n+        };\n+    }\n+\n+    private static void checkAccessors(Class<?> cls, MemoryLayout layout, String fieldName, Class<?> type,\n+                                       MemoryLayout fieldLayout) {\n+        try {\n+            if (type == MemorySegment.class) {\n+                Method slicer = cls.getMethod(fieldName + \"$slice\", MemorySegment.class);\n+                assertEquals(slicer.getReturnType(), MemorySegment.class);\n+                try (MemorySegment struct = MemorySegment.allocateNative(layout)) {\n+                    MemorySegment slice = (MemorySegment) slicer.invoke(null, struct);\n+                    assertEquals(slice.byteSize(), fieldLayout.byteSize());\n+                }\n+            } else {\n+                Method getter = cls.getMethod(fieldName + \"$get\", MemorySegment.class);\n+                assertEquals(getter.getReturnType(), type);\n+                Method setter = cls.getMethod(fieldName + \"$set\", MemorySegment.class, type);\n+                assertEquals(setter.getReturnType(), void.class);\n+\n+                Object zero = MethodHandles.zero(type).invoke();\n+                try (MemorySegment struct = MemorySegment.allocateNative(layout)) {\n+                    setter.invoke(null, struct, zero);\n+                    Object actual = getter.invoke(null, struct);\n+                    assertEquals(actual, zero);\n+                }\n+            }\n+        } catch (Throwable t) {\n+            fail(\"Unexpected exception\", t);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/TestNested.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -60,1 +60,1 @@\n-        long h;\n+        long long h;\n@@ -92,1 +92,1 @@\n-        long j;\n+        long long j;\n","filename":"test\/jdk\/tools\/jextract\/nested.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import jdk.incubator.foreign.MemoryLayout;\n+import org.testng.annotations.Test;\n+\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.groupElement;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library .. \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 8252759\n+ * @run testng\/othervm -Dforeign.restricted=permit TestNestedAnonUnion\n+ *\/\n+public class TestNestedAnonUnion extends JextractToolRunner {\n+    @Test\n+    public void testNestedStructs() {\n+        Path nestedOutput = getOutputFilePath(\"nestedanongen\");\n+        Path nestedH = getInputFilePath(\"nestedAnonUnion.h\");\n+        run(\"-d\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n+        try(Loader loader = classLoader(nestedOutput)) {\n+            Class<?> fooCls = loader.loadClass(\"nestedAnonUnion_h$Foo\");\n+            assertNotNull(fooCls);\n+\n+            MemoryLayout layout = findLayout(fooCls);\n+            assertEquals(layout.byteOffset(groupElement(\"x\")), 0);\n+            assertEquals(layout.byteOffset(groupElement(\"$anon$0\"), groupElement(\"y\")), 4);\n+            assertEquals(layout.byteOffset(groupElement(\"$anon$0\"), groupElement(\"z\")), 4);\n+        } finally {\n+            deleteDir(nestedOutput);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/nestedAnonUnion\/TestNestedAnonUnion.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+struct Foo {\n+    int x;\n+    union {\n+        int y;\n+        int z;\n+    };\n+};\n","filename":"test\/jdk\/tools\/jextract\/nestedAnonUnion\/nestedAnonUnion.h","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"}]}