{"files":[{"patch":"@@ -249,1 +249,1 @@\n-    protected MemoryLayout findLayout(Class<?> cls, String name) {\n+    protected static MemoryLayout findLayout(Class<?> cls, String name) {\n@@ -262,1 +262,1 @@\n-    protected MemoryLayout findLayout(Class<?> cls) {\n+    protected static MemoryLayout findLayout(Class<?> cls) {\n","filename":"test\/jdk\/tools\/jextract\/JextractToolRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Path;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertNotNull;\n-\n-\/*\n- * @test\n- * @modules jdk.incubator.jextract\n- * @library \/test\/lib\n- * @build JextractToolRunner\n- * @bug 8244512\n- * @summary jextract throws NPE for a nested struct declaration\n- * @run testng\/othervm -Dforeign.restricted=permit Test8244512\n- *\/\n-public class Test8244512 extends JextractToolRunner {\n-    @Test\n-    public void testNestedStructs() {\n-        Path nestedOutput = getOutputFilePath(\"nestedgen\");\n-        Path nestedH = getInputFilePath(\"nested.h\");\n-        run(\"-d\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n-        try(Loader loader = classLoader(nestedOutput)) {\n-            checkClass(loader, \"Foo\");\n-            checkClass(loader, \"Foo$Bar\");\n-            checkClass(loader, \"U\");\n-            checkClass(loader, \"U$Point\");\n-            checkClass(loader, \"MyStruct\");\n-            checkClass(loader, \"MyStruct$MyStruct_Z\");\n-            checkClass(loader, \"MyStruct$k\");\n-            checkClass(loader, \"MyUnion\");\n-            checkClass(loader, \"MyUnion$MyUnion_Z\");\n-            checkClass(loader, \"MyUnion$k\");\n-            checkClass(loader, \"X\");\n-            checkClass(loader, \"X2\");\n-        } finally {\n-            deleteDir(nestedOutput);\n-        }\n-    }\n-\n-    private static void checkClass(Loader loader, String name) {\n-        assertNotNull(loader.loadClass(\"nested_h$\" + name));\n-    }\n-}\n","filename":"test\/jdk\/tools\/jextract\/Test8244512.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.function.BiConsumer;\n+\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+import org.testng.annotations.Test;\n+\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.groupElement;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 8244512 8252759\n+ * @summary test nested structs and unions\n+ * @run testng\/othervm -Dforeign.restricted=permit TestNested\n+ *\/\n+public class TestNested extends JextractToolRunner {\n+    @Test\n+    public void testNestedStructs() {\n+        Path nestedOutput = getOutputFilePath(\"nestedgen\");\n+        Path nestedH = getInputFilePath(\"nested.h\");\n+        run(\"-d\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n+        try(Loader loader = classLoader(nestedOutput)) {\n+            checkClass(loader, \"Foo\",\n+                checkField(\"bar\", MemorySegment.class, 0),\n+                checkField(\"color\", int.class, 8)\n+            );\n+            checkClass(loader, \"Foo$Bar\",\n+                checkField(\"x\", int.class, 0),\n+                checkField(\"y\", int.class, 4)\n+            );\n+            checkClass(loader, \"U\",\n+                checkField(\"point\", MemorySegment.class, 0),\n+                checkField(\"rgb\", int.class, 0),\n+                checkField(\"i\", int.class, 0)\n+            );\n+            checkClass(loader, \"U$Point\",\n+                checkField(\"x\", short.class, 0),\n+                checkField(\"y\", short.class, 2)\n+            );\n+            checkClass(loader, \"MyStruct\",\n+                checkField(\"a\", byte.class, 0),\n+\n+                checkField(\"b\", int.class, 4, \"$anon$0\"),\n+                checkField(\"c\", int.class, 8, \"$anon$0\", \"$anon$0\"),\n+\n+                checkField(\"d\", byte.class, 12, \"$anon$0\"),\n+                checkField(\"f\", MemorySegment.class, 13, \"$anon$0\"),\n+\n+                checkField(\"g\", int.class, 16, \"$anon$1\"),\n+                checkField(\"h\", long.class, 16, \"$anon$1\"),\n+\n+                checkField(\"k\", MemorySegment.class, 24)\n+            );\n+            checkClass(loader, \"MyStruct$MyStruct_Z\",\n+                checkField(\"e\", byte.class, 0)\n+            );\n+            checkClass(loader, \"MyStruct$k\",\n+                checkField(\"i\", int.class, 0),\n+                checkField(\"j\", int.class, 4)\n+            );\n+            checkClass(loader, \"MyUnion\",\n+                checkField(\"a\", byte.class, 0),\n+\n+                checkField(\"b\", int.class, 0, \"$anon$0\"),\n+                checkField(\"c\", int.class, 4, \"$anon$0\", \"$anon$0\"),\n+\n+                checkField(\"d\", byte.class, 8, \"$anon$0\"),\n+                checkField(\"f\", MemorySegment.class, 9, \"$anon$0\"),\n+\n+                checkField(\"g\", int.class, 0, \"$anon$1\"),\n+                checkField(\"h\", int.class, 4, \"$anon$1\"),\n+\n+                checkField(\"k\", MemorySegment.class, 0)\n+            );\n+            checkClass(loader, \"MyUnion$MyUnion_Z\",\n+                checkField(\"e\", byte.class, 0)\n+            );\n+            checkClass(loader, \"MyUnion$k\",\n+                checkField(\"i\", int.class, 0),\n+                checkField(\"j\", long.class, 0)\n+            );\n+            checkClass(loader, \"X\",\n+                checkField(\"Z\", MemorySegment.class, 0, \"$anon$0\")\n+            );\n+            checkClass(loader, \"X$Z\",\n+                checkField(\"y\", int.class, 0)\n+            );\n+            checkClass(loader, \"X2\",\n+                checkField(\"y\", int.class, 0, \"$anon$0\", \"$anon$0\")\n+            );\n+        } finally {\n+            deleteDir(nestedOutput);\n+        }\n+    }\n+\n+    @SafeVarargs\n+    private static void checkClass(Loader loader, String name, BiConsumer<Class<?>, MemoryLayout>... checks) {\n+        Class<?> cls = loader.loadClass(\"nested_h$\" + name);\n+        assertNotNull(cls);\n+        MemoryLayout layout = findLayout(cls);\n+        for (var check : checks) {\n+            check.accept(cls, layout);\n+        }\n+    }\n+\n+    private static BiConsumer<Class<?>, MemoryLayout> checkField(String fieldName, Class<?> fieldType,\n+                                                                 long expectedOffset, String... fieldPath) {\n+        MemoryLayout.PathElement[] path = new MemoryLayout.PathElement[fieldPath.length + 1];\n+        int i = 0;\n+        for (; i < fieldPath.length; i++) {\n+            path[i] = groupElement(fieldPath[i]);\n+        }\n+        path[i] = groupElement(fieldName);\n+        return (cls, layout) -> {\n+            assertEquals(layout.byteOffset(path), expectedOffset);\n+            checkAccessors(cls, layout, fieldName, fieldType, layout.select(path));\n+        };\n+    }\n+\n+    private static void checkAccessors(Class<?> cls, MemoryLayout layout, String fieldName, Class<?> type,\n+                                       MemoryLayout fieldLayout) {\n+        try {\n+            if (type == MemorySegment.class) {\n+                Method slicer = cls.getMethod(fieldName + \"$slice\", MemorySegment.class);\n+                assertEquals(slicer.getReturnType(), MemorySegment.class);\n+                try (MemorySegment struct = MemorySegment.allocateNative(layout)) {\n+                    MemorySegment slice = (MemorySegment) slicer.invoke(null, struct);\n+                    assertEquals(slice.byteSize(), fieldLayout.byteSize());\n+                }\n+            } else {\n+                Method getter = cls.getMethod(fieldName + \"$get\", MemorySegment.class);\n+                assertEquals(getter.getReturnType(), type);\n+                Method setter = cls.getMethod(fieldName + \"$set\", MemorySegment.class, type);\n+                assertEquals(setter.getReturnType(), void.class);\n+\n+                Object zero = MethodHandles.zero(type).invoke();\n+                try (MemorySegment struct = MemorySegment.allocateNative(layout)) {\n+                    setter.invoke(null, struct, zero);\n+                    Object actual = getter.invoke(null, struct);\n+                    assertEquals(actual, zero);\n+                }\n+            }\n+        } catch (Throwable t) {\n+            fail(\"Unexpected exception\", t);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/TestNested.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -60,1 +60,1 @@\n-        long h;\n+        long long h;\n@@ -92,1 +92,1 @@\n-        long j;\n+        long long j;\n","filename":"test\/jdk\/tools\/jextract\/nested.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}