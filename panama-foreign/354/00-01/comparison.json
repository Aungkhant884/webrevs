{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -41,0 +40,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -62,1 +63,1 @@\n-    private static final MethodHandle MH_invoke_consumer;\n+    private static final MethodHandle[] MH_invoke_high_arity;\n@@ -93,7 +94,10 @@\n-            {\n-                LibraryLookup.Symbol ma = lookup.lookup(\"invoke_consumer\").get();\n-                MethodType mt = methodType(void.class, int.class, double.class, long.class, float.class, byte.class,\n-                        short.class, char.class);\n-                FunctionDescriptor fd = FunctionDescriptor.ofVoid(C_INT, C_DOUBLE, C_LONGLONG, C_FLOAT, C_CHAR,\n-                        C_SHORT, C_SHORT);\n-                MH_invoke_consumer = abi.downcallHandle(ma, mt, fd);\n+            MH_invoke_high_arity = new MethodHandle[7];\n+            MethodType baseMT = methodType(void.class, int.class, double.class, long.class, float.class, byte.class,\n+                    short.class, char.class);\n+            FunctionDescriptor baseFD = FunctionDescriptor.ofVoid(C_INT, C_DOUBLE, C_LONGLONG, C_FLOAT, C_CHAR,\n+                    C_SHORT, C_SHORT);\n+            for (int i = 0; i < MH_invoke_high_arity.length; i++) {\n+                LibraryLookup.Symbol ma = lookup.lookup(\"invoke_high_arity\" + i);\n+                MethodType mt = baseMT.changeReturnType(baseMT.parameterType(i));\n+                FunctionDescriptor fd = baseFD.changeReturnLayout(baseFD.argumentLayouts().get(i));\n+                MH_invoke_high_arity[i] = abi.downcallHandle(ma, mt, fd);\n@@ -106,19 +110,2 @@\n-    @DataProvider\n-    public Object[][] handles() throws Throwable {\n-        return new Object[][] {\n-            { \"invoke_empty\" },\n-            { \"invoke_identity_char\" },\n-            { \"invoke_identity_short\" },\n-            { \"invoke_identity_int\" },\n-            { \"invoke_identity_long\" },\n-            { \"invoke_identity_float\" },\n-            { \"invoke_identity_double\" },\n-            { \"invoke_identity_va\" },\n-            { \"invoke_consumer\" },\n-        };\n-    }\n-\n-    @Test(dataProvider = \"handles\")\n-    public void testIntrinsics(String methodName) throws Throwable {\n-        MethodHandle handle = MethodHandles.lookup().findStatic(TestIntrinsics.class, methodName, methodType(void.class));\n-\n+    @Test(dataProvider = \"tests\")\n+    public void testIntrinsics(RunnableX test) throws Throwable {\n@@ -126,1 +113,1 @@\n-            handle.invokeExact();\n+            test.run();\n@@ -130,4 +117,2 @@\n-    \/\/ where\n-\n-    public static void invoke_empty() throws Throwable {\n-        MH_empty.invokeExact();\n+    interface RunnableX {\n+        void run() throws Throwable;\n@@ -136,34 +121,42 @@\n-    public static void invoke_identity_char() throws Throwable {\n-        byte x = (byte) MH_identity_char.invokeExact((byte) 10);\n-        assertEquals(x, (byte) 10);\n-    }\n-\n-    public static void invoke_identity_short() throws Throwable {\n-        short x = (short) MH_identity_short.invokeExact((short) 10);\n-        assertEquals(x, (short) 10);\n-    }\n-\n-    public static void invoke_identity_int() throws Throwable {\n-        int x = (int) MH_identity_int.invokeExact(10);\n-        assertEquals(x, 10);\n-    }\n-\n-    public static void invoke_identity_long() throws Throwable {\n-        long x = (long) MH_identity_long.invokeExact(10L);\n-        assertEquals(x, 10L);\n-    }\n-\n-    public static void invoke_identity_float() throws Throwable {\n-        float x = (float) MH_identity_float.invokeExact(10F);\n-        assertEquals(x, 10F);\n-    }\n-\n-    public static void invoke_identity_double() throws Throwable {\n-        double x = (double) MH_identity_double.invokeExact(10D);\n-        assertEquals(x, 10D);\n-    }\n-\n-    public static void invoke_identity_va() throws Throwable {\n-        int x = (int) MH_identity_va.invokeExact(1, 10D, 2, 3F, 4L);\n-        assertEquals(x, 1);\n-    }\n+    @DataProvider\n+    public Object[][] tests() {\n+        List<RunnableX> tests = new ArrayList<>();\n+        tests.add(MH_empty::invokeExact);\n+        tests.add(() -> {\n+            byte x = (byte) MH_identity_char.invokeExact((byte) 10);\n+            assertEquals(x, (byte) 10);\n+        });\n+        tests.add(() -> {\n+            short x = (short) MH_identity_short.invokeExact((short) 10);\n+            assertEquals(x, (short) 10);\n+        });\n+        tests.add(() -> {\n+            int x = (int) MH_identity_int.invokeExact(10);\n+            assertEquals(x, 10);\n+        });\n+        tests.add(() -> {\n+            long x = (long) MH_identity_long.invokeExact(10L);\n+            assertEquals(x, 10L);\n+        });\n+        tests.add(() -> {\n+            float x = (float) MH_identity_float.invokeExact(10F);\n+            assertEquals(x, 10F);\n+        });\n+        tests.add(() -> {\n+            double x = (double) MH_identity_double.invokeExact(10D);\n+            assertEquals(x, 10D);\n+        });\n+        tests.add(() -> {\n+            int x = (int) MH_identity_va.invokeExact(1, 10D, 2, 3F, 4L);\n+            assertEquals(x, 1);\n+        });\n+\n+        Object[] args = { 1, 10D, 2L, 3F, (byte) 0, (short) 13, (char) 'a' };\n+        for (int i = 0; i < MH_invoke_high_arity.length; i++) {\n+            MethodHandle mh = MH_invoke_high_arity[i];\n+            Object expected = args[i];\n+            tests.add(() -> {\n+                Object actual = mh.invokeWithArguments(args);\n+                assertEquals(actual, expected);\n+            });\n+        }\n@@ -171,2 +164,1 @@\n-    public static void invoke_consumer() throws Throwable {\n-        MH_invoke_consumer.invokeExact(1, 10D, 2L, 3F, (byte) 0, (short) 13, (char) 'a');\n+        return tests.stream().map(rx -> new Object[]{ rx }).toArray(Object[][]::new);\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":61,"deletions":69,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -62,1 +62,17 @@\n-EXPORT void invoke_consumer(int x, double d, long long l, float f, char c, short s1, short s2) {\n+EXPORT int invoke_high_arity0(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return x;\n+}\n+EXPORT double invoke_high_arity1(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return d;\n+}\n+EXPORT long long invoke_high_arity2(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return l;\n+}\n+EXPORT float invoke_high_arity3(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return f;\n+}\n+EXPORT char invoke_high_arity4(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return c;\n+}\n+EXPORT short invoke_high_arity5(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return s1;\n@@ -64,0 +80,3 @@\n+EXPORT short invoke_high_arity6(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return s2;\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/foreign\/libIntrinsics.c","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}