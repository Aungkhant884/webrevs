{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import static jdk.incubator.foreign.FunctionDescriptor.TRIVIAL_ATTRIBUTE_NAME;\n@@ -55,13 +56,2 @@\n-    private static final MethodHandle MH_empty;\n-    private static final MethodHandle MH_identity_int;\n-    private static final MethodHandle MH_identity_char;\n-    private static final MethodHandle MH_identity_short;\n-    private static final MethodHandle MH_identity_long;\n-    private static final MethodHandle MH_identity_float;\n-    private static final MethodHandle MH_identity_double;\n-    private static final MethodHandle MH_identity_va;\n-    private static final MethodHandle[] MH_invoke_high_arity;\n-\n-    private static MethodHandle linkIndentity(String name, Class<?> carrier, MemoryLayout layout)\n-            throws NoSuchMethodException {\n-        LibraryLookup.Symbol ma = lookup.lookup(name).get();\n+    private static MethodHandle linkIndentity(String name, Class<?> carrier, MemoryLayout layout, boolean trivial) {\n+        LibraryLookup.Symbol ma = lookup.lookup(name).orElseThrow();\n@@ -70,37 +60,2 @@\n-        return abi.downcallHandle(ma, mt, fd);\n-    }\n-\n-    static {\n-        try {\n-            {\n-                LibraryLookup.Symbol ma = lookup.lookup(\"empty\").get();\n-                MethodType mt = methodType(void.class);\n-                FunctionDescriptor fd = FunctionDescriptor.ofVoid();\n-                MH_empty = abi.downcallHandle(ma, mt, fd);\n-            }\n-            MH_identity_char = linkIndentity(\"identity_char\", byte.class, C_CHAR);\n-            MH_identity_short = linkIndentity(\"identity_short\", short.class, C_SHORT);\n-            MH_identity_int = linkIndentity(\"identity_int\", int.class, C_INT);\n-            MH_identity_long = linkIndentity(\"identity_long\", long.class, C_LONGLONG);\n-            MH_identity_float = linkIndentity(\"identity_float\", float.class, C_FLOAT);\n-            MH_identity_double = linkIndentity(\"identity_double\", double.class, C_DOUBLE);\n-            {\n-                LibraryLookup.Symbol ma = lookup.lookup(\"identity_va\").get();\n-                MethodType mt = methodType(int.class, int.class, double.class, int.class, float.class, long.class);\n-                FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_INT, asVarArg(C_DOUBLE),\n-                        asVarArg(C_INT), asVarArg(C_FLOAT), asVarArg(C_LONGLONG));\n-                MH_identity_va = abi.downcallHandle(ma, mt, fd);\n-            }\n-            MH_invoke_high_arity = new MethodHandle[7];\n-            MethodType baseMT = methodType(void.class, int.class, double.class, long.class, float.class, byte.class,\n-                    short.class, char.class);\n-            FunctionDescriptor baseFD = FunctionDescriptor.ofVoid(C_INT, C_DOUBLE, C_LONGLONG, C_FLOAT, C_CHAR,\n-                    C_SHORT, C_SHORT);\n-            for (int i = 0; i < MH_invoke_high_arity.length; i++) {\n-                LibraryLookup.Symbol ma = lookup.lookup(\"invoke_high_arity\" + i);\n-                MethodType mt = baseMT.changeReturnType(baseMT.parameterType(i));\n-                FunctionDescriptor fd = baseFD.changeReturnLayout(baseFD.argumentLayouts().get(i));\n-                MH_invoke_high_arity[i] = abi.downcallHandle(ma, mt, fd);\n-            }\n-        } catch (ReflectiveOperationException e) {\n-            throw new BootstrapMethodError(e);\n+        if (trivial) {\n+            fd = fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true);\n@@ -108,0 +63,1 @@\n+        return abi.downcallHandle(ma, mt, fd);\n@@ -117,1 +73,1 @@\n-    interface RunnableX {\n+    private interface RunnableX {\n@@ -121,0 +77,4 @@\n+    private interface AddTest {\n+        void add(MethodHandle target, Object expectedResult, Object... args);\n+    }\n+\n@@ -123,29 +83,4 @@\n-        List<RunnableX> tests = new ArrayList<>();\n-        tests.add(MH_empty::invokeExact);\n-        tests.add(() -> {\n-            byte x = (byte) MH_identity_char.invokeExact((byte) 10);\n-            assertEquals(x, (byte) 10);\n-        });\n-        tests.add(() -> {\n-            short x = (short) MH_identity_short.invokeExact((short) 10);\n-            assertEquals(x, (short) 10);\n-        });\n-        tests.add(() -> {\n-            int x = (int) MH_identity_int.invokeExact(10);\n-            assertEquals(x, 10);\n-        });\n-        tests.add(() -> {\n-            long x = (long) MH_identity_long.invokeExact(10L);\n-            assertEquals(x, 10L);\n-        });\n-        tests.add(() -> {\n-            float x = (float) MH_identity_float.invokeExact(10F);\n-            assertEquals(x, 10F);\n-        });\n-        tests.add(() -> {\n-            double x = (double) MH_identity_double.invokeExact(10D);\n-            assertEquals(x, 10D);\n-        });\n-        tests.add(() -> {\n-            int x = (int) MH_identity_va.invokeExact(1, 10D, 2, 3F, 4L);\n-            assertEquals(x, 1);\n+        List<RunnableX> testsList = new ArrayList<>();\n+        AddTest tests = (mh, expectedResult, args) -> testsList.add(() -> {\n+            Object actual = mh.invokeWithArguments(args);\n+            assertEquals(actual, expectedResult);\n@@ -154,8 +89,44 @@\n-        Object[] args = { 1, 10D, 2L, 3F, (byte) 0, (short) 13, (char) 'a' };\n-        for (int i = 0; i < MH_invoke_high_arity.length; i++) {\n-            MethodHandle mh = MH_invoke_high_arity[i];\n-            Object expected = args[i];\n-            tests.add(() -> {\n-                Object actual = mh.invokeWithArguments(args);\n-                assertEquals(actual, expected);\n-            });\n+        { \/\/ empty\n+            LibraryLookup.Symbol ma = lookup.lookup(\"empty\").orElseThrow();\n+            MethodType mt = methodType(void.class);\n+            FunctionDescriptor fd = FunctionDescriptor.ofVoid();\n+            tests.add(abi.downcallHandle(ma, mt, fd), null);\n+            tests.add(abi.downcallHandle(ma, mt, fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true)), null);\n+        }\n+\n+        tests.add(linkIndentity(\"identity_char\", byte.class, C_CHAR, false), (byte) 10, (byte) 10);\n+        tests.add(linkIndentity(\"identity_char\", byte.class, C_CHAR, true), (byte) 10, (byte) 10);\n+        tests.add(linkIndentity(\"identity_short\", short.class, C_SHORT, false), (short) 10, (short) 10);\n+        tests.add(linkIndentity(\"identity_short\", short.class, C_SHORT, true), (short) 10, (short) 10);\n+        tests.add(linkIndentity(\"identity_int\", int.class, C_INT, false), 10, 10);\n+        tests.add(linkIndentity(\"identity_int\", int.class, C_INT, true), 10, 10);\n+        tests.add(linkIndentity(\"identity_long\", long.class, C_LONGLONG, false), 10L, 10L);\n+        tests.add(linkIndentity(\"identity_long\", long.class, C_LONGLONG, true), 10L, 10L);\n+        tests.add(linkIndentity(\"identity_float\", float.class, C_FLOAT, false), 10F, 10F);\n+        tests.add(linkIndentity(\"identity_float\", float.class, C_FLOAT, true), 10F, 10F);\n+        tests.add(linkIndentity(\"identity_double\", double.class, C_DOUBLE, false), 10D, 10D);\n+        tests.add(linkIndentity(\"identity_double\", double.class, C_DOUBLE, true), 10D, 10D);\n+\n+        { \/\/ identity_va\n+            LibraryLookup.Symbol ma = lookup.lookup(\"identity_va\").orElseThrow();\n+            MethodType mt = methodType(int.class, int.class, double.class, int.class, float.class, long.class);\n+            FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_INT, asVarArg(C_DOUBLE),\n+                    asVarArg(C_INT), asVarArg(C_FLOAT), asVarArg(C_LONGLONG));\n+            tests.add(abi.downcallHandle(ma, mt, fd), 1, 1, 10D, 2, 3F, 4L);\n+            tests.add(abi.downcallHandle(ma, mt, fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true)), 1, 1, 10D, 2, 3F, 4L);\n+        }\n+\n+        { \/\/ high_arity\n+            MethodType baseMT = methodType(void.class, int.class, double.class, long.class, float.class, byte.class,\n+                    short.class, char.class);\n+            FunctionDescriptor baseFD = FunctionDescriptor.ofVoid(C_INT, C_DOUBLE, C_LONGLONG, C_FLOAT, C_CHAR,\n+                    C_SHORT, C_SHORT);\n+            Object[] args = {1, 10D, 2L, 3F, (byte) 0, (short) 13, 'a'};\n+            for (int i = 0; i < args.length; i++) {\n+                LibraryLookup.Symbol ma = lookup.lookup(\"invoke_high_arity\" + i).orElseThrow();\n+                MethodType mt = baseMT.changeReturnType(baseMT.parameterType(i));\n+                FunctionDescriptor fd = baseFD.changeReturnLayout(baseFD.argumentLayouts().get(i));\n+                Object expected = args[i];\n+                tests.add(abi.downcallHandle(ma, mt, fd), expected, args);\n+                tests.add(abi.downcallHandle(ma, mt, fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true)), expected, args);\n+            }\n@@ -164,1 +135,1 @@\n-        return tests.stream().map(rx -> new Object[]{ rx }).toArray(Object[][]::new);\n+        return testsList.stream().map(rx -> new Object[]{ rx }).toArray(Object[][]::new);\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":60,"deletions":89,"binary":false,"changes":149,"status":"modified"}]}