{"files":[{"patch":"@@ -71,1 +71,1 @@\n-        GetPropertyAction.privilegedGetProperty(\"jdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS\", \"false\"));\n+        GetPropertyAction.privilegedGetProperty(\"jdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS\", \"true\"));\n@@ -164,1 +164,2 @@\n-        if (USE_INTRINSICS && isSimple) {\n+        boolean usesStackArgs = stackArgsBytes != 0;\n+        if (USE_INTRINSICS && isSimple && !usesStackArgs) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -41,0 +40,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -47,0 +48,1 @@\n+import static jdk.incubator.foreign.FunctionDescriptor.TRIVIAL_ATTRIBUTE_NAME;\n@@ -54,13 +56,2 @@\n-    private static final MethodHandle MH_empty;\n-    private static final MethodHandle MH_identity_int;\n-    private static final MethodHandle MH_identity_char;\n-    private static final MethodHandle MH_identity_short;\n-    private static final MethodHandle MH_identity_long;\n-    private static final MethodHandle MH_identity_float;\n-    private static final MethodHandle MH_identity_double;\n-    private static final MethodHandle MH_identity_va;\n-    private static final MethodHandle MH_invoke_consumer;\n-\n-    private static MethodHandle linkIndentity(String name, Class<?> carrier, MemoryLayout layout)\n-            throws NoSuchMethodException {\n-        LibraryLookup.Symbol ma = lookup.lookup(name).get();\n+    private static MethodHandle linkIndentity(String name, Class<?> carrier, MemoryLayout layout, boolean trivial) {\n+        LibraryLookup.Symbol ma = lookup.lookup(name).orElseThrow();\n@@ -69,34 +60,2 @@\n-        return abi.downcallHandle(ma, mt, fd);\n-    }\n-\n-    static {\n-        try {\n-            {\n-                LibraryLookup.Symbol ma = lookup.lookup(\"empty\").get();\n-                MethodType mt = methodType(void.class);\n-                FunctionDescriptor fd = FunctionDescriptor.ofVoid();\n-                MH_empty = abi.downcallHandle(ma, mt, fd);\n-            }\n-            MH_identity_char = linkIndentity(\"identity_char\", byte.class, C_CHAR);\n-            MH_identity_short = linkIndentity(\"identity_short\", short.class, C_SHORT);\n-            MH_identity_int = linkIndentity(\"identity_int\", int.class, C_INT);\n-            MH_identity_long = linkIndentity(\"identity_long\", long.class, C_LONGLONG);\n-            MH_identity_float = linkIndentity(\"identity_float\", float.class, C_FLOAT);\n-            MH_identity_double = linkIndentity(\"identity_double\", double.class, C_DOUBLE);\n-            {\n-                LibraryLookup.Symbol ma = lookup.lookup(\"identity_va\").get();\n-                MethodType mt = methodType(int.class, int.class, double.class, int.class, float.class, long.class);\n-                FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_INT, asVarArg(C_DOUBLE),\n-                        asVarArg(C_INT), asVarArg(C_FLOAT), asVarArg(C_LONGLONG));\n-                MH_identity_va = abi.downcallHandle(ma, mt, fd);\n-            }\n-            {\n-                LibraryLookup.Symbol ma = lookup.lookup(\"invoke_consumer\").get();\n-                MethodType mt = methodType(void.class, int.class, double.class, long.class, float.class, byte.class,\n-                        short.class, char.class);\n-                FunctionDescriptor fd = FunctionDescriptor.ofVoid(C_INT, C_DOUBLE, C_LONGLONG, C_FLOAT, C_CHAR,\n-                        C_SHORT, C_SHORT);\n-                MH_invoke_consumer = abi.downcallHandle(ma, mt, fd);\n-            }\n-        } catch (ReflectiveOperationException e) {\n-            throw new BootstrapMethodError(e);\n+        if (trivial) {\n+            fd = fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true);\n@@ -104,0 +63,1 @@\n+        return abi.downcallHandle(ma, mt, fd);\n@@ -106,19 +66,2 @@\n-    @DataProvider\n-    public Object[][] handles() throws Throwable {\n-        return new Object[][] {\n-            { \"invoke_empty\" },\n-            { \"invoke_identity_char\" },\n-            { \"invoke_identity_short\" },\n-            { \"invoke_identity_int\" },\n-            { \"invoke_identity_long\" },\n-            { \"invoke_identity_float\" },\n-            { \"invoke_identity_double\" },\n-            { \"invoke_identity_va\" },\n-            { \"invoke_consumer\" },\n-        };\n-    }\n-\n-    @Test(dataProvider = \"handles\")\n-    public void testIntrinsics(String methodName) throws Throwable {\n-        MethodHandle handle = MethodHandles.lookup().findStatic(TestIntrinsics.class, methodName, methodType(void.class));\n-\n+    @Test(dataProvider = \"tests\")\n+    public void testIntrinsics(RunnableX test) throws Throwable {\n@@ -126,1 +69,1 @@\n-            handle.invokeExact();\n+            test.run();\n@@ -130,14 +73,2 @@\n-    \/\/ where\n-\n-    public static void invoke_empty() throws Throwable {\n-        MH_empty.invokeExact();\n-    }\n-\n-    public static void invoke_identity_char() throws Throwable {\n-        byte x = (byte) MH_identity_char.invokeExact((byte) 10);\n-        assertEquals(x, (byte) 10);\n-    }\n-\n-    public static void invoke_identity_short() throws Throwable {\n-        short x = (short) MH_identity_short.invokeExact((short) 10);\n-        assertEquals(x, (short) 10);\n+    private interface RunnableX {\n+        void run() throws Throwable;\n@@ -146,3 +77,2 @@\n-    public static void invoke_identity_int() throws Throwable {\n-        int x = (int) MH_identity_int.invokeExact(10);\n-        assertEquals(x, 10);\n+    private interface AddTest {\n+        void add(MethodHandle target, Object expectedResult, Object... args);\n@@ -151,9 +81,15 @@\n-    public static void invoke_identity_long() throws Throwable {\n-        long x = (long) MH_identity_long.invokeExact(10L);\n-        assertEquals(x, 10L);\n-    }\n-\n-    public static void invoke_identity_float() throws Throwable {\n-        float x = (float) MH_identity_float.invokeExact(10F);\n-        assertEquals(x, 10F);\n-    }\n+    @DataProvider\n+    public Object[][] tests() {\n+        List<RunnableX> testsList = new ArrayList<>();\n+        AddTest tests = (mh, expectedResult, args) -> testsList.add(() -> {\n+            Object actual = mh.invokeWithArguments(args);\n+            assertEquals(actual, expectedResult);\n+        });\n+\n+        { \/\/ empty\n+            LibraryLookup.Symbol ma = lookup.lookup(\"empty\").orElseThrow();\n+            MethodType mt = methodType(void.class);\n+            FunctionDescriptor fd = FunctionDescriptor.ofVoid();\n+            tests.add(abi.downcallHandle(ma, mt, fd), null);\n+            tests.add(abi.downcallHandle(ma, mt, fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true)), null);\n+        }\n@@ -161,4 +97,21 @@\n-    public static void invoke_identity_double() throws Throwable {\n-        double x = (double) MH_identity_double.invokeExact(10D);\n-        assertEquals(x, 10D);\n-    }\n+        tests.add(linkIndentity(\"identity_char\", byte.class, C_CHAR, false), (byte) 10, (byte) 10);\n+        tests.add(linkIndentity(\"identity_char\", byte.class, C_CHAR, true), (byte) 10, (byte) 10);\n+        tests.add(linkIndentity(\"identity_short\", short.class, C_SHORT, false), (short) 10, (short) 10);\n+        tests.add(linkIndentity(\"identity_short\", short.class, C_SHORT, true), (short) 10, (short) 10);\n+        tests.add(linkIndentity(\"identity_int\", int.class, C_INT, false), 10, 10);\n+        tests.add(linkIndentity(\"identity_int\", int.class, C_INT, true), 10, 10);\n+        tests.add(linkIndentity(\"identity_long\", long.class, C_LONGLONG, false), 10L, 10L);\n+        tests.add(linkIndentity(\"identity_long\", long.class, C_LONGLONG, true), 10L, 10L);\n+        tests.add(linkIndentity(\"identity_float\", float.class, C_FLOAT, false), 10F, 10F);\n+        tests.add(linkIndentity(\"identity_float\", float.class, C_FLOAT, true), 10F, 10F);\n+        tests.add(linkIndentity(\"identity_double\", double.class, C_DOUBLE, false), 10D, 10D);\n+        tests.add(linkIndentity(\"identity_double\", double.class, C_DOUBLE, true), 10D, 10D);\n+\n+        { \/\/ identity_va\n+            LibraryLookup.Symbol ma = lookup.lookup(\"identity_va\").orElseThrow();\n+            MethodType mt = methodType(int.class, int.class, double.class, int.class, float.class, long.class);\n+            FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_INT, asVarArg(C_DOUBLE),\n+                    asVarArg(C_INT), asVarArg(C_FLOAT), asVarArg(C_LONGLONG));\n+            tests.add(abi.downcallHandle(ma, mt, fd), 1, 1, 10D, 2, 3F, 4L);\n+            tests.add(abi.downcallHandle(ma, mt, fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true)), 1, 1, 10D, 2, 3F, 4L);\n+        }\n@@ -166,4 +119,15 @@\n-    public static void invoke_identity_va() throws Throwable {\n-        int x = (int) MH_identity_va.invokeExact(1, 10D, 2, 3F, 4L);\n-        assertEquals(x, 1);\n-    }\n+        { \/\/ high_arity\n+            MethodType baseMT = methodType(void.class, int.class, double.class, long.class, float.class, byte.class,\n+                    short.class, char.class);\n+            FunctionDescriptor baseFD = FunctionDescriptor.ofVoid(C_INT, C_DOUBLE, C_LONGLONG, C_FLOAT, C_CHAR,\n+                    C_SHORT, C_SHORT);\n+            Object[] args = {1, 10D, 2L, 3F, (byte) 0, (short) 13, 'a'};\n+            for (int i = 0; i < args.length; i++) {\n+                LibraryLookup.Symbol ma = lookup.lookup(\"invoke_high_arity\" + i).orElseThrow();\n+                MethodType mt = baseMT.changeReturnType(baseMT.parameterType(i));\n+                FunctionDescriptor fd = baseFD.changeReturnLayout(baseFD.argumentLayouts().get(i));\n+                Object expected = args[i];\n+                tests.add(abi.downcallHandle(ma, mt, fd), expected, args);\n+                tests.add(abi.downcallHandle(ma, mt, fd.withAttribute(TRIVIAL_ATTRIBUTE_NAME, true)), expected, args);\n+            }\n+        }\n@@ -171,2 +135,1 @@\n-    public static void invoke_consumer() throws Throwable {\n-        MH_invoke_consumer.invokeExact(1, 10D, 2L, 3F, (byte) 0, (short) 13, (char) 'a');\n+        return testsList.stream().map(rx -> new Object[]{ rx }).toArray(Object[][]::new);\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":67,"deletions":104,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -62,1 +62,17 @@\n-EXPORT void invoke_consumer(int x, double d, long long l, float f, char c, short s1, short s2) {\n+EXPORT int invoke_high_arity0(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return x;\n+}\n+EXPORT double invoke_high_arity1(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return d;\n+}\n+EXPORT long long invoke_high_arity2(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return l;\n+}\n+EXPORT float invoke_high_arity3(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return f;\n+}\n+EXPORT char invoke_high_arity4(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return c;\n+}\n+EXPORT short invoke_high_arity5(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return s1;\n@@ -64,0 +80,3 @@\n+EXPORT short invoke_high_arity6(int x, double d, long long l, float f, char c, short s1, short s2) {\n+    return s2;\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/foreign\/libIntrinsics.c","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}