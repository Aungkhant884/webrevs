{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.function.Function;\n@@ -42,4 +43,2 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n-import jdk.internal.foreign.HeapMemorySegmentImpl;\n-import jdk.internal.foreign.NativeMemorySegmentImpl;\n-import jdk.internal.foreign.Utils;\n+\n+import jdk.internal.foreign.*;\n@@ -55,0 +54,1 @@\n+import static jdk.internal.foreign.MemorySegmentRenderUtil.STANDARD_VALUE_LAYOUT_RENDERER;\n@@ -1877,0 +1877,53 @@\n+    \/**\n+     * Returns a human-readable view of this memory segment viewed through\n+     * the provided {@code layout} and {@code renderer}.\n+     * <p>\n+     * The format of the returned view is as follows:\n+     * <ol>\n+     *     <li>tag\/value pairs are separated with an \"=\" character.<\/li>\n+     *     <li>Each element is tagged with its {@link MemoryLayout#name()} or, if no name exists,\n+     *     its {@link MemoryLayout#toString()} representation.<\/li>\n+     *     <li>Values are rendered as specified by the provided {@code renderer}<\/li>\n+     *     <li>Values in a group layout are rendered with enclosing curly braces.<\/li>\n+     *     <li>Structure and sequence elements are separated with a \",\" character.<\/li>\n+     *     <li>Union elements are separated with a \"|\" character.<\/li>\n+     *     <li>Lines are separated with the system-dependent line separator {@link System#lineSeparator() }.<\/li>\n+     * <\/ol>\n+     * Otherwise, the exact format of the returned view is unspecified and should not\n+     * be acted upon programmatically.\n+     * <p>\n+     * As an example, a memory segment viewed though the following memory layout\n+     * {@snippet lang = java:\n+     *   memorySegment.set(ValueLayout.JAVA_INT, 0, 1);\n+     *   memorySegment.set(ValueLayout.JAVA_INT, 4, 2);\n+     *\n+     *    var layout = MemoryLayout.structLayout(\n+     *           ValueLayout.JAVA_INT.withName(\"x\"),\n+     *           ValueLayout.JAVA_INT.withName(\"y\")\n+     *   ).withName(\"Point\");\n+     *\n+     *   System.out.println(memorySegment.toString(layout, ValueLayoutRenderer.standard()));\n+     *}\n+     * will print:\n+     * {@snippet lang = text:\n+     * Point {\n+     *   x=1,\n+     *   y=2\n+     * }\n+     *}\n+     *\n+     * @param layout   to use as a layout when viewing the memory segment\n+     * @param renderer to apply when formatting value layouts. {@link ValueLayoutRenderer#standard()} can\n+     *                 be used if no custom formatting is needed.\n+     * @return a view of the memory segment viewed through a memory layout\n+     * @throws OutOfMemoryError if the size of the UTF-8 string is greater than the largest string\n+     *         supported by the platform.\n+     * @see ValueLayoutRenderer\n+     * @see ValueLayoutRenderer#standard()\n+     *\/\n+    default String toString(MemoryLayout layout, ValueLayoutRenderer renderer) {\n+        Objects.requireNonNull(layout);\n+        Objects.requireNonNull(renderer);\n+        return MemorySegmentRenderUtil.toString(this, layout, renderer);\n+    }\n+\n@@ -2105,0 +2158,142 @@\n+\n+    \/**\n+     * An interface that can be used to specify custom rendering of value\n+     * layouts via the {@link MemorySegment#toString(MemoryLayout, ValueLayoutRenderer)} method.\n+     * <p>\n+     * The render methods take two parameters:\n+     * <ul>\n+     *     <li>layout: This can be used to select different formatting for different paths<\/li>\n+     *     <li>value: The actual value<\/li>\n+     * <\/ul>\n+     * <p>\n+     * The {@linkplain ValueLayoutRenderer#standard() standard() } value layout renderer is path\n+     * agnostic and will thus render all layouts of the same type the same way.\n+     * @see MemorySegment#toString(MemoryLayout, ValueLayoutRenderer)\n+     *\/\n+    interface ValueLayoutRenderer {\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfBoolean layout, boolean value) {\n+            Objects.requireNonNull(layout);\n+            return Boolean.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfByte layout, byte value) {\n+            Objects.requireNonNull(layout);\n+            return Byte.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfChar layout, char value) {\n+            Objects.requireNonNull(layout);\n+            return Character.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfShort layout, short value) {\n+            Objects.requireNonNull(layout);\n+            return Short.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfInt layout, int value) {\n+            Objects.requireNonNull(layout);\n+            return Integer.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfLong layout, long value) {\n+            Objects.requireNonNull(layout);\n+            return Long.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfFloat layout, float value) {\n+            Objects.requireNonNull(layout);\n+            return Float.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfDouble layout, double value) {\n+            Objects.requireNonNull(layout);\n+            return Double.toString(value);\n+        }\n+\n+        \/**\n+         * Renders the provided {@code layout} and {@code value} to a String.\n+         *\n+         * @param layout the layout to render\n+         * @param value  the value to render\n+         * @return rendered String\n+         *\/\n+        default String render(ValueLayout.OfAddress layout, MemorySegment value) {\n+            Objects.requireNonNull(layout);\n+            return String.format(\"0x%0\" + (ValueLayout.ADDRESS.byteSize() * 2) + \"X\", value.address());\n+        }\n+\n+        \/**\n+         * {@return a standard value layout renderer that will render numeric values into decimal form and where\n+         * other value types are rendered to a reasonable \"natural\" form}\n+         * <p>\n+         * More specifically, values types are rendered as follows:\n+         * <ul>\n+         *     <li>Numeric values are rendered in decimal form (e.g 1 or 1.2).<\/li>\n+         *     <li>Boolean values are rendered as {@code true} or {@code false}.<\/li>\n+         *     <li>Character values are rendered as {@code char}.<\/li>\n+         *     <li>Address values are rendered in hexadecimal form e.g. {@code 0x0000000000000000} (on 64-bit platforms) or\n+         *     {@code 0x00000000} (on 32-bit platforms)<\/li>\n+         * <\/ul>\n+         *\/\n+        static ValueLayoutRenderer standard() {\n+            return STANDARD_VALUE_LAYOUT_RENDERER;\n+        }\n+\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":199,"deletions":4,"binary":false,"changes":203,"status":"modified"},{"patch":"@@ -0,0 +1,411 @@\n+\/*\n+ *  Copyright (c) 2022, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+package jdk.internal.foreign;\n+\n+import java.lang.foreign.*;\n+import java.nio.ByteBuffer;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.LongStream;\n+import java.util.stream.Stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * Internal class to support rendering of MemorySegments into various formats.\n+ *\/\n+public final class MemorySegmentRenderUtil {\n+\n+    private static final byte[] UPPERCASE_HEX_DIGITS = {\n+            '0', '1', '2', '3', '4', '5', '6', '7',\n+            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n+    };\n+\n+    private static final int HEX_STREAM_BYTES_PER_ROW = 1 << 4; \/\/ Should be a power of 2\n+    private static final int HEX_LINE_LENGTH_EXCLUDING_CHARS = Long.BYTES * 2 + HEX_STREAM_BYTES_PER_ROW * 3 + 4;\n+\n+    private static final String ADDRESS_FORMATTING = \"0x%0\" + (ValueLayout.ADDRESS.byteSize() * 2) + \"X\";\n+\n+    public static final MemorySegment.ValueLayoutRenderer STANDARD_VALUE_LAYOUT_RENDERER = new StandardValueLayoutRenderer();\n+\n+    private MemorySegmentRenderUtil() {\n+    }\n+\n+    \/**\n+     * Returns a Stream of human-readable, lines with hexadecimal values for this memory segment.\n+     * <p>\n+     * Each element in the stream comprises the following characters:\n+     * <ol>\n+     *     <li>an initial 64-bit offset (e.g. \"0000000000000010\").<\/li>\n+     *     <li>a sequence of two spaces (i.e. \"  \").<\/li>\n+     *     <li>a sequence of at most eight bytes (e.g. \"66 6F 78 20 6A 75 6D 70\") where\n+     *     each byte is separated by a space.<\/li>\n+     *     <li>a sequence of two spaces (i.e. \"  \").<\/li>\n+     *     <li>a sequence of at most eight bytes (e.g. \"65 64 20 6F 76 65 72 20\") where\n+     *     each byte separated by a space.<\/li>\n+     *     <li>a sequence of N spaces (i.e. \"  \") such that the intermediate line is aligned to 68 characters<\/li>\n+     *     <li>a \"|\" separator.<\/li>\n+     *     <li>a sequence of at most 16 printable Ascii characters (values outside [32, 127] will be printed as \".\").<\/li>\n+     *     <li>a \"|\" separator.<\/li>\n+     * <\/ol>\n+     * All the values above are given in hexadecimal form with leading zeros. As there are at most 16 bytes\n+     * rendered for each line, there will be N = ({@link MemorySegment#byteSize()} + 15) \/ 16 elements in the returned stream.\n+     * <p>\n+     * As a consequence of the above, this method renders to a format similar to the *nix command \"hexdump -C\".\n+     * <p>\n+     * As an example, a memory segment created, initialized and used as follows\n+     * {@snippet lang = java:\n+     *   MemorySegment segment = memorySession.allocate(64 + 4);\n+     *   segment.setUtf8String(0, \"The quick brown fox jumped over the lazy dog\\nSecond line\\t:here\");\n+     *   segment.hexDump()\n+     *       .forEach(System.out::println);\n+     *}\n+     * will be printed as:\n+     * {@snippet lang = text:\n+     * 0000000000000000  54 68 65 20 71 75 69 63  6B 20 62 72 6F 77 6E 20  |The quick brown |\n+     * 0000000000000010  66 6F 78 20 6A 75 6D 70  65 64 20 6F 76 65 72 20  |fox jumped over |\n+     * 0000000000000020  74 68 65 20 6C 61 7A 79  20 64 6F 67 0A 53 65 63  |the lazy dog.Sec|\n+     * 0000000000000030  6F 6E 64 20 6C 69 6E 65  09 3A 68 65 72 65 00 00  |ond line.:here..|\n+     * 0000000000000040  00 00 00 00                                       |....|\n+     *}\n+     * <p>\n+     * Use a {@linkplain MemorySegment#asSlice(long, long) slice} to inspect a specific region\n+     * of a memory segment.\n+     * <p>\n+     * This method can be used to dump the contents of various other memory containers such as\n+     * {@linkplain ByteBuffer ByteBuffers} and byte arrays by means of first wrapping the container\n+     * into a MemorySegment:\n+     * {@snippet lang = java:\n+     *   MemorySegment.ofArray(byteArray).hexDump();\n+     *   MemorySegment.ofBuffer(byteBuffer).hexDump();\n+     *}\n+     *\n+     * @param segment to inspect\n+     * @return a Stream of human-readable, lines with hexadecimal values\n+     *\/\n+    public static Stream<String> hexDump(MemorySegment segment) {\n+        requireNonNull(segment);\n+        \/\/ Todo: Investigate how to handle mapped sparse files\n+\n+        final var state = new HexStreamState();\n+        return LongStream.range(0, segment.byteSize())\n+                .mapToObj(index -> {\n+                    if (state.isEmpty()) {\n+                        \/\/ We are on a new line: Append the index\n+                        state.appendIndex(index);\n+                    }\n+                    if (index % (HEX_STREAM_BYTES_PER_ROW >>> 1) == 0) {\n+                        \/\/ We are either at the beginning or halfway through: add an extra space for readability\n+                        state.appendSpace();\n+                    }\n+                    \/\/ Append the actual memory value\n+                    state.appendValue(segment.get(ValueLayout.JAVA_BYTE, index));\n+                    final long nextCnt = index + 1;\n+                    if (nextCnt % HEX_STREAM_BYTES_PER_ROW == 0 || nextCnt == segment.byteSize()) {\n+                        \/\/ We have a complete line (eiter a full line or the last line)\n+                        return state.renderLineToStringAndReset();\n+                    } else {\n+                        \/\/ For this count, there was no line break so pass null and filter it away later\n+                        return null;\n+                    }\n+                })\n+                .filter(Objects::nonNull);\n+    }\n+\n+    \/**\n+     * Returns a human-readable view of the provided {@code segment} viewed through\n+     * the provided {@code layout}.\n+     * <p>\n+     * Lines are separated with the system-dependent line separator {@link System#lineSeparator() }.\n+     * Otherwise, the exact format of the returned view is unspecified and should not\n+     * be acted upon programmatically.\n+     * <p>\n+     * As an example, a MemorySegment viewed though the following memory layout\n+     * {@snippet lang = java:\n+     * var layout = MemoryLayout.structLayout(\n+     *         ValueLayout.JAVA_INT.withName(\"x\"),\n+     *         ValueLayout.JAVA_INT.withName(\"y\")\n+     * ).withName(\"Point\");\n+     *}\n+     * might be rendered to something like this:\n+     * {@snippet lang = text:\n+     * Point {\n+     *   x=1,\n+     *   y=2\n+     * }\n+     *}\n+     * <p>\n+     * This method is intended to view memory segments through small and medium-sized memory layouts\n+     * and is, in all cases, restricted by the inherent String capacity limit.\n+     *\n+     * @param segment to be viewed\n+     * @param layout  to use as a layout when viewing the memory segment\n+     * @return a view of the memory segment viewed through the memory layout\n+     * @throws OutOfMemoryError if the view exceeds the array size VM limit\n+     *\/\n+    public static String toString(MemorySegment segment,\n+                                  MemoryLayout layout,\n+                                  MemorySegment.ValueLayoutRenderer renderer) {\n+        requireNonNull(segment);\n+        requireNonNull(layout);\n+        requireNonNull(renderer);\n+\n+        final var sb = new StringBuilder();\n+        final Consumer<CharSequence> action = line -> {\n+            if (!sb.isEmpty()) {\n+                sb.append(System.lineSeparator());\n+            }\n+            sb.append(line);\n+        };\n+        toString0(segment, layout, renderer, action, new ViewState(), \"\");\n+        return sb.toString();\n+    }\n+\n+    public static void toString0(MemorySegment segment,\n+                                 MemoryLayout layout,\n+                                 MemorySegment.ValueLayoutRenderer renderer,\n+                                 Consumer<? super CharSequence> action,\n+                                 ViewState state,\n+                                 String suffix) {\n+\n+        \/\/ TODO: Replace with \"patterns in switch statement\" once this becomes available.\n+\n+        if (layout instanceof ValueLayout.OfBoolean ofBoolean) {\n+            action.accept(renderValueLayout(state, ofBoolean, renderer.render(ofBoolean, segment.get(ofBoolean, state.indexAndAdd(ofBoolean))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfByte ofByte) {\n+            action.accept(renderValueLayout(state, ofByte, renderer.render(ofByte, segment.get(ofByte, state.indexAndAdd(ofByte))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfShort ofShort) {\n+            action.accept(renderValueLayout(state, ofShort, renderer.render(ofShort, segment.get(ofShort, state.indexAndAdd(ofShort))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfInt ofInt) {\n+            action.accept(renderValueLayout(state, ofInt, renderer.render(ofInt, segment.get(ofInt, state.indexAndAdd(ofInt))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfLong ofLong) {\n+            action.accept(renderValueLayout(state, ofLong, renderer.render(ofLong, segment.get(ofLong, state.indexAndAdd(ofLong))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfFloat ofFloat) {\n+            action.accept(renderValueLayout(state, ofFloat, renderer.render(ofFloat, segment.get(ofFloat, state.indexAndAdd(ofFloat))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfDouble ofDouble) {\n+            action.accept(renderValueLayout(state, ofDouble, renderer.render(ofDouble, segment.get(ofDouble, state.indexAndAdd(ofDouble))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfChar ofChar) {\n+            action.accept(renderValueLayout(state, ofChar, renderer.render(ofChar, segment.get(ofChar, state.indexAndAdd(ofChar))), suffix));\n+            return;\n+        }\n+        if (layout instanceof ValueLayout.OfAddress ofAddress) {\n+            action.accept(renderValueLayout(state, ofAddress, renderer.render(ofAddress, segment.get(ofAddress, state.indexAndAdd(ofAddress))), suffix));\n+            return;\n+        }\n+        \/\/ PaddingLayout is package private.\n+        if (\"java.lang.foreign.PaddingLayout\".equals(layout.getClass().getName())) {\n+            action.accept(state.indentSpaces() + layout.bitSize() + \" padding bits\");\n+            state.indexAndAdd(layout);\n+            return;\n+        }\n+        if (layout instanceof GroupLayout groupLayout) {\n+\n+            \/* Strictly, we should provide all permutations of unions.\n+             * So, if we have a union U =  (A|B),(C|D) then we should present:\n+             * (A,C), (A,D), (B,C) and (B,D)\n+             *\/\n+\n+            final var separator = groupLayout.isStruct()\n+                    ? \",\"  \/\/ Struct separator\n+                    : \"|\"; \/\/ Union separator\n+\n+            action.accept(indentedLabel(state, groupLayout) + \" {\");\n+            state.incrementIndent();\n+            final var members = groupLayout.memberLayouts();\n+            final long initialIndex = state.index();\n+            long maxIndex = initialIndex;\n+            for (int i = 0; i < members.size(); i++) {\n+                if (groupLayout.isUnion()) {\n+                    \/\/ If it is a union, we need to reset the index for each member\n+                    state.index(initialIndex);\n+                    \/\/ We record the max index used for any union member so we can leave off from there\n+                    maxIndex = Math.max(maxIndex, state.index());\n+                }\n+                toString0(segment, members.get(i), renderer, action, state, (i != (members.size() - 1)) ? separator : \"\");\n+                if (groupLayout.isUnion()) {\n+                    \/\/ This is the best we can do.\n+                    state.index(maxIndex);\n+                }\n+            }\n+            state.decrementIndent();\n+            action.accept(state.indentSpaces() + \"}\" + suffix);\n+            return;\n+        }\n+        if (layout instanceof SequenceLayout sequenceLayout) {\n+            action.accept(indentedLabel(state, sequenceLayout) + \" [\");\n+            state.incrementIndent();\n+            final long elementCount = sequenceLayout.elementCount();\n+            for (long i = 0; i < elementCount; i++) {\n+                toString0(segment, sequenceLayout.elementLayout(), renderer, action, state, (i != (elementCount - 1L)) ? \",\" : \"\");\n+            }\n+            state.decrementIndent();\n+            action.accept(state.indentSpaces() + \"]\" + suffix);\n+            return;\n+        }\n+        action.accept(state.indentSpaces() + \"Unknown layout: \" + layout + \" at index \" + state.index());\n+        state.indexAndAdd(layout);\n+    }\n+\n+    static String renderValueLayout(ViewState state,\n+                                    ValueLayout layout,\n+                                    String value,\n+                                    String suffix) {\n+        return indentedLabel(state, layout) + \"=\" + value + suffix;\n+    }\n+\n+    static String indentedLabel(ViewState state,\n+                                MemoryLayout layout) {\n+        return state.indentSpaces() + layout.name()\n+                .orElseGet(layout::toString);\n+    }\n+\n+    static final class HexStreamState {\n+        private final StringBuilder line = new StringBuilder();\n+        private final StringBuilder chars = new StringBuilder();\n+\n+        boolean isEmpty() {\n+            return line.isEmpty();\n+        }\n+\n+        void appendIndex(long index) {\n+            appendHexTo(line, index);\n+            appendSpace();\n+        }\n+\n+        void appendValue(byte val) {\n+            appendHexTo(line, val);\n+            chars.append(viewByteAsAscii(val));\n+            appendSpace();\n+        }\n+\n+        String renderLineToStringAndReset() {\n+            while (line.length() < HEX_LINE_LENGTH_EXCLUDING_CHARS) {\n+                \/\/ Pad if necessary\n+                appendSpace();\n+            }\n+            line.append('|').append(chars).append('|');\n+\n+            final String result = line.toString();\n+            line.setLength(0);\n+            chars.setLength(0);\n+            return result;\n+        }\n+\n+        void appendSpace() {\n+            line.append(' ');\n+        }\n+    }\n+\n+    static final class ViewState {\n+\n+        private static final int SPACES_PER_INDENT = 4;\n+\n+        \/\/ Holding a non-static indents allows simple thread-safe use\n+        private final StringBuilder indents = new StringBuilder();\n+\n+        private int indent;\n+        private long index;\n+\n+        void incrementIndent() {\n+            indent++;\n+        }\n+\n+        void decrementIndent() {\n+            indent--;\n+        }\n+\n+        String indentSpaces() {\n+            final int spaces = indent * SPACES_PER_INDENT;\n+            while (indents.length() < spaces) {\n+                \/\/ Expand as needed\n+                indents.append(\" \");\n+            }\n+            return indents.substring(0, spaces);\n+        }\n+\n+        long index() {\n+            return index;\n+        }\n+\n+        void index(long index) {\n+            this.index = index;\n+        }\n+\n+        long indexAndAdd(long delta) {\n+            final long val = index;\n+            index += delta;\n+            return val;\n+        }\n+\n+        long indexAndAdd(MemoryLayout layout) {\n+            return indexAndAdd(layout.byteSize());\n+        }\n+    }\n+\n+    static void appendHexTo(StringBuilder sb,\n+                            long value) {\n+        long reversed = Long.reverseBytes(value);\n+        for (int i = 0; i < Long.BYTES; i++) {\n+            appendHexTo(sb, (byte) (reversed & 0xff));\n+            reversed >>>= Byte.SIZE;\n+        }\n+    }\n+\n+    static void appendHexTo(StringBuilder sb,\n+                            byte value) {\n+        sb.append((char) UPPERCASE_HEX_DIGITS[(value >>> 4) & 0x0f]);\n+        sb.append((char) UPPERCASE_HEX_DIGITS[(value & 0x0f)]);\n+    }\n+\n+    static char viewByteAsAscii(byte b) {\n+        final int value = Byte.toUnsignedInt(b);\n+        return (value >= 32 && value < 127)\n+                ? (char) value\n+                : '.';\n+    }\n+\n+    private static final class StandardValueLayoutRenderer implements MemorySegment.ValueLayoutRenderer {\n+        @Override\n+        public String toString() {\n+            return StandardValueLayoutRenderer.class.getSimpleName();\n+        }\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySegmentRenderUtil.java","additions":411,"deletions":0,"binary":false,"changes":411,"status":"added"},{"patch":"@@ -0,0 +1,375 @@\n+\/*\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.foreign\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED RenderTest\n+ *\/\n+\n+import java.lang.foreign.*;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import jdk.internal.foreign.MemorySegmentRenderUtil;\n+import org.testng.annotations.*;\n+\n+import static java.lang.foreign.ValueLayout.*;\n+import static java.util.stream.Collectors.joining;\n+import static org.testng.Assert.*;\n+import static jdk.internal.foreign.MemorySegmentRenderUtil.*;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test\n+public class RenderTest {\n+\n+    private static final int HEX_SEGMENT_SIZE = 64 + 4;\n+    private static final String THE_QUICK = \"The quick brown fox jumped over the lazy dog\\nSecond line\\t:here\";\n+\n+    private static final byte[] THE_QUICK_ARRAY = THE_QUICK.getBytes(StandardCharsets.UTF_8);\n+    private static final String EXPECTED_HEX = platformLineSeparated(\"\"\"\n+            0000000000000000  54 68 65 20 71 75 69 63  6B 20 62 72 6F 77 6E 20  |The quick brown |\n+            0000000000000010  66 6F 78 20 6A 75 6D 70  65 64 20 6F 76 65 72 20  |fox jumped over |\n+            0000000000000020  74 68 65 20 6C 61 7A 79  20 64 6F 67 0A 53 65 63  |the lazy dog.Sec|\n+            0000000000000030  6F 6E 64 20 6C 69 6E 65  09 3A 68 65 72 65 00 00  |ond line.:here..|\n+            0000000000000040  00 00 00 00                                       |....|\"\"\");\n+\n+    private static final String EXPECT_ADDRESS = \"0x\" + \"00\".repeat((int) ValueLayout.ADDRESS.byteSize());\n+\n+    @Test\n+    public void testHexStream() {\n+\n+        var actual = testWithFreshMemorySegment(HEX_SEGMENT_SIZE, segment -> {\n+            segment.setUtf8String(0, THE_QUICK);\n+            return hexDump(segment)\n+                    .collect(joining(System.lineSeparator()));\n+        });\n+        assertEquals(actual, EXPECTED_HEX);\n+    }\n+\n+    @Test\n+    public void testHexStreamByteArray() {\n+\n+        var array = new byte[HEX_SEGMENT_SIZE];\n+        System.arraycopy(THE_QUICK_ARRAY, 0, array, 0, THE_QUICK.length());\n+        var actual = hexDump(MemorySegment.ofArray(array))\n+                .collect(joining(System.lineSeparator()));\n+\n+        assertEquals(actual, EXPECTED_HEX);\n+    }\n+\n+    @Test\n+    public void testHexStreamByteBuffer() {\n+\n+        var array = new byte[HEX_SEGMENT_SIZE];\n+        System.arraycopy(THE_QUICK_ARRAY, 0, array, 0, THE_QUICK.length());\n+        var actual = hexDump(MemorySegment.ofBuffer(ByteBuffer.wrap(array)))\n+                .collect(joining(System.lineSeparator()));\n+\n+        assertEquals(actual, EXPECTED_HEX);\n+    }\n+\n+\n+    @Test\n+    public void valueLayouts() {\n+\n+\n+\n+        record TestInput(ValueLayout layout, String stringValue) {\n+        }\n+\n+        List.of(\n+                new TestInput(ValueLayout.JAVA_BYTE, \"0\"),\n+                new TestInput(ValueLayout.JAVA_SHORT, \"0\"),\n+                new TestInput(ValueLayout.JAVA_INT, \"0\"),\n+                new TestInput(ValueLayout.JAVA_LONG, \"0\"),\n+                new TestInput(ValueLayout.JAVA_FLOAT, \"0.0\"),\n+                new TestInput(ValueLayout.JAVA_DOUBLE, \"0.0\"),\n+                new TestInput(ValueLayout.JAVA_CHAR, \"\" + (char) 0),\n+                new TestInput(JAVA_BOOLEAN, \"false\"),\n+                new TestInput(ValueLayout.ADDRESS, EXPECT_ADDRESS)\n+        ).forEach(ti -> {\n+            var expect = ti.layout() + \"=\" + ti.stringValue();\n+            var actual = testWithFreshMemorySegment(ti.layout().byteSize(), s -> MemorySegmentRenderUtil.toString(s, ti.layout(), MemorySegment.ValueLayoutRenderer.standard()));\n+            assertEquals(actual, expect);\n+        });\n+    }\n+\n+    @Test\n+    public void test256HexDump() {\n+        var expect = platformLineSeparated(\"\"\"\n+                0000000000000000  00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F  |................|\n+                0000000000000010  10 11 12 13 14 15 16 17  18 19 1A 1B 1C 1D 1E 1F  |................|\n+                0000000000000020  20 21 22 23 24 25 26 27  28 29 2A 2B 2C 2D 2E 2F  | !\"#$%&'()*+,-.\/|\n+                0000000000000030  30 31 32 33 34 35 36 37  38 39 3A 3B 3C 3D 3E 3F  |0123456789:;<=>?|\n+                0000000000000040  40 41 42 43 44 45 46 47  48 49 4A 4B 4C 4D 4E 4F  |@ABCDEFGHIJKLMNO|\n+                0000000000000050  50 51 52 53 54 55 56 57  58 59 5A 5B 5C 5D 5E 5F  |PQRSTUVWXYZ[\\\\]^_|\n+                0000000000000060  60 61 62 63 64 65 66 67  68 69 6A 6B 6C 6D 6E 6F  |`abcdefghijklmno|\n+                0000000000000070  70 71 72 73 74 75 76 77  78 79 7A 7B 7C 7D 7E 7F  |pqrstuvwxyz{|}~.|\n+                0000000000000080  80 81 82 83 84 85 86 87  88 89 8A 8B 8C 8D 8E 8F  |................|\n+                0000000000000090  90 91 92 93 94 95 96 97  98 99 9A 9B 9C 9D 9E 9F  |................|\n+                00000000000000A0  A0 A1 A2 A3 A4 A5 A6 A7  A8 A9 AA AB AC AD AE AF  |................|\n+                00000000000000B0  B0 B1 B2 B3 B4 B5 B6 B7  B8 B9 BA BB BC BD BE BF  |................|\n+                00000000000000C0  C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  |................|\n+                00000000000000D0  D0 D1 D2 D3 D4 D5 D6 D7  D8 D9 DA DB DC DD DE DF  |................|\n+                00000000000000E0  E0 E1 E2 E3 E4 E5 E6 E7  E8 E9 EA EB EC ED EE EF  |................|\n+                00000000000000F0  F0 F1 F2 F3 F4 F5 F6 F7  F8 F9 FA FB FC FD FE FF  |................|\"\"\");\n+\n+        try (var session = MemorySession.openConfined()) {\n+            var segment = session.allocate(256);\n+            for (int i = 0; i < segment.byteSize(); i++) {\n+                segment.set(ValueLayout.JAVA_BYTE, i, (byte) i);\n+            }\n+            var actual = MemorySegmentRenderUtil.hexDump(segment)\n+                    .collect(joining(System.lineSeparator()));\n+            assertEquals(actual, expect);\n+        }\n+    }\n+\n+    @Test\n+    public void test4kHexDump() {\n+        try (var session = MemorySession.openConfined()) {\n+            var segment = session.allocate(2048);\n+            for (int i = 0; i < segment.byteSize(); i++) {\n+                segment.set(ValueLayout.JAVA_BYTE, i, (byte) i);\n+            }\n+            MemorySegmentRenderUtil.hexDump(segment)\n+                    .forEach(l -> assertEquals(l.length(), \"0000000000000000  00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F  |................|\".length()));\n+        }\n+    }\n+\n+    @Test\n+    public void point() {\n+\n+        var expect = platformLineSeparated(\"\"\"\n+                Point {\n+                    x=1,\n+                    y=2\n+                }\"\"\");\n+\n+        var actual = testWithFreshMemorySegment(Integer.BYTES * 2, segment -> {\n+            final Point point = new Point(segment);\n+            point.x(1);\n+            point.y(2);\n+            return MemorySegmentRenderUtil.toString(segment, Point.LAYOUT, MemorySegment.ValueLayoutRenderer.standard());\n+        });\n+\n+        assertEquals(actual, expect);\n+    }\n+\n+    @Test\n+    public void pointCustomRenderer() {\n+\n+        var expect = platformLineSeparated(\"\"\"\n+                Point {\n+                    x=0x0001,\n+                    y=0x0002\n+                }\"\"\");\n+\n+        var actual = testWithFreshMemorySegment(Integer.BYTES * 2, segment -> {\n+            final Point point = new Point(segment);\n+            point.x(1);\n+            point.y(2);\n+            return MemorySegmentRenderUtil.toString(segment, Point.LAYOUT, new MemorySegment.ValueLayoutRenderer() {\n+                @Override\n+                public String render(ValueLayout.OfInt layout, int value) {\n+                    return String.format(\"0x%04x\", value);\n+                }\n+            });\n+        });\n+\n+        assertEquals(actual, expect);\n+    }\n+\n+    @Test\n+    public void standardCustomRenderer() {\n+\n+        MemoryLayout layout = MemoryLayout.structLayout(\n+                \/\/ These are in bit alignment order (descending) for all platforms\n+                \/\/ in order to be naturally aligned.\n+                Stream.of(\n+                                JAVA_LONG,\n+                                JAVA_DOUBLE,\n+                                ADDRESS,\n+                                JAVA_INT,\n+                                JAVA_FLOAT,\n+                                JAVA_SHORT,\n+                                JAVA_CHAR,\n+                                JAVA_BOOLEAN,\n+                                JAVA_BYTE\n+                        )\n+                        .map(vl -> vl.withName(vl.carrier().getSimpleName()))\n+                        .toArray(MemoryLayout[]::new)\n+        ).withName(\"struct\");\n+\n+        System.out.println(\"layout = \" + layout);\n+        var expect = platformLineSeparated(\"\"\"\n+                struct {\n+                    long=0,\n+                    double=0.0,\n+                    MemorySegment=$1,\n+                    int=0,\n+                    float=0.0,\n+                    short=0,\n+                    char=\\u0000,\n+                    boolean=false,\n+                    byte=0\n+                }\"\"\").replace(\"$1\", EXPECT_ADDRESS);\n+\n+\n+        var actual = testWithFreshMemorySegment(layout.byteSize(), segment ->\n+                MemorySegmentRenderUtil.toString(segment, layout, MemorySegment.ValueLayoutRenderer.standard()));\n+\n+        assertEquals(actual, expect);\n+    }\n+\n+\n+    @Test\n+    public void sequence() {\n+        final int arraySize = 4;\n+        var sequenceLayout = MemoryLayout.sequenceLayout(arraySize,\n+                MemoryLayout.structLayout(\n+                        ValueLayout.JAVA_INT.withName(\"x\"),\n+                        ValueLayout.JAVA_INT.withName(\"y\")\n+                ).withName(\"Point\")\n+        ).withName(\"PointArrayOfElements\");\n+\n+        var expect = platformLineSeparated(\"\"\"\n+                PointArrayOfElements [\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    },\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    },\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    },\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    }\n+                ]\"\"\");\n+        var actual = testWithFreshMemorySegment(Integer.BYTES * 2 * arraySize, segment ->\n+                MemorySegmentRenderUtil.toString(segment, sequenceLayout, MemorySegment.ValueLayoutRenderer.standard()));\n+\n+        assertEquals(actual, expect);\n+    }\n+\n+\n+    @Test\n+    public void union() {\n+        var u0 = MemoryLayout.structLayout(\n+                ValueLayout.JAVA_INT.withName(\"x\"),\n+                ValueLayout.JAVA_INT.withName(\"y\"),\n+                MemoryLayout.paddingLayout(Integer.SIZE)\n+        ).withName(\"Point\");\n+\n+        var u1 = MemoryLayout.structLayout(\n+                ValueLayout.JAVA_INT.withName(\"x\"),\n+                ValueLayout.JAVA_INT.withName(\"y\"),\n+                ValueLayout.JAVA_INT.withName(\"z\")\n+        ).withName(\"3D-Point\");\n+\n+        var union = MemoryLayout.unionLayout(u0, u1).withName(\"Union\");\n+\n+        var expect = platformLineSeparated(\"\"\"\n+                Union {\n+                    Point {\n+                        x=0,\n+                        y=0,\n+                        32 padding bits\n+                    }|\n+                    3D-Point {\n+                        x=0,\n+                        y=0,\n+                        z=0\n+                    }\n+                }\"\"\");\n+        var actual = testWithFreshMemorySegment(Integer.BYTES * 3, segment ->\n+                MemorySegmentRenderUtil.toString(segment, union, MemorySegment.ValueLayoutRenderer.standard()));\n+\n+        assertEquals(actual, expect);\n+    }\n+\n+    static final class Point {\n+\n+        static final MemoryLayout LAYOUT = MemoryLayout.structLayout(\n+                ValueLayout.JAVA_INT.withName(\"x\"),\n+                ValueLayout.JAVA_INT.withName(\"y\")\n+        ).withName(\"Point\");\n+\n+        static final VarHandle xVH = LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"x\"));\n+        static final VarHandle yVH = LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"y\"));\n+\n+        private final MemorySegment memorySegment;\n+\n+        Point(MemorySegment memorySegment) {\n+            this.memorySegment = requireNonNull(memorySegment);\n+        }\n+\n+        int x() {\n+            return (int) xVH.get(memorySegment);\n+        }\n+\n+        int y() {\n+            return (int) yVH.get(memorySegment);\n+        }\n+\n+        void x(int x) {\n+            xVH.set(memorySegment, x);\n+        }\n+\n+        void y(int y) {\n+            yVH.set(memorySegment, y);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Point {x=\" + x() + \", y=\" + y() + \"}\";\n+        }\n+    }\n+\n+    private static String platformLineSeparated(String s) {\n+        return s.lines()\n+                .collect(joining(System.lineSeparator()));\n+    }\n+\n+    private static <T> T testWithFreshMemorySegment(long size,\n+                                                    Function<MemorySegment, T> mapper) {\n+        try (final MemorySession session = MemorySession.openConfined()) {\n+            var segment = session.allocate(size);\n+            return mapper.apply(segment);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/RenderTest.java","additions":375,"deletions":0,"binary":false,"changes":375,"status":"added"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.foreign.MemoryAddress;\n@@ -58,1 +57,1 @@\n-        VaList.ofAddress(MemoryAddress.NULL, MemorySession.openImplicit());\n+        VaList.ofAddress(0L, MemorySession.openImplicit());\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedLinker.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}