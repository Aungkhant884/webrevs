{"files":[{"patch":"@@ -42,4 +42,2 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n-import jdk.internal.foreign.HeapMemorySegmentImpl;\n-import jdk.internal.foreign.NativeMemorySegmentImpl;\n-import jdk.internal.foreign.Utils;\n+\n+import jdk.internal.foreign.*;\n@@ -1877,0 +1875,67 @@\n+    \/**\n+     * Returns a Stream of human-readable, lines with hexadecimal values for this memory segment.\n+     * <p>\n+     * The exact format of the stream elements is unspecified and should not\n+     * be acted upon programmatically. Loosely speaking, this method renders\n+     * a format similar to the *nix command \"hexdump -C\".\n+     * <p>\n+     * As an example, a memory segment created, initialized and used as follows\n+     * {@snippet lang = java:\n+     * MemorySegment memorySegment = memorySession.allocate(64 + 4);\n+     * memorySegment.setUtf8String(0, \"The quick brown fox jumped over the lazy dog\\nSecond line\\t:here\");\n+     * memorySegment.hexStream()\n+     *     .forEach(System.out::println);\n+     *}\n+     * might print to something like this:\n+     * {@snippet lang = text:\n+     * 0000000000000000  54 68 65 20 71 75 69 63  6B 20 62 72 6F 77 6E 20  |The quick brown |\n+     * 0000000000000010  66 6F 78 20 6A 75 6D 70  65 64 20 6F 76 65 72 20  |fox jumped over |\n+     * 0000000000000020  74 68 65 20 6C 61 7A 79  20 64 6F 67 0A 53 65 63  |the lazy dog.Sec|\n+     * 0000000000000030  6F 6E 64 20 6C 69 6E 65  09 3A 68 65 72 65 00 00  |ond line.:here..|\n+     * 0000000000000040  00 00 00 00                                       |....|\n+     *}\n+     * <p>\n+     * Use a {@linkplain MemorySegment#asSlice(long, long) slice} to inspect a specific region\n+     * of a memory segment.\n+     *\n+     * @return a Stream of human-readable, lines with hexadecimal values\n+     *\/\n+    default Stream<String> hexStream() {\n+        return MemorySegmentRenderUtil.hexStream(this);\n+    }\n+\n+    \/**\n+     * Returns a human-readable view of this memory segment viewed through\n+     * the provided memory layout {@code lens}.\n+     * <p>\n+     * Lines are separated with the system-dependent line separator {@link System#lineSeparator() }.\n+     * Otherwise, the exact format of the returned view is unspecified and should not\n+     * be acted upon programmatically.\n+     * <p>\n+     * As an example, a memory segment viewed though the following memory layout lens\n+     * {@snippet lang = java:\n+     * var lens = MemoryLayout.structLayout(\n+     *         ValueLayout.JAVA_INT.withName(\"x\"),\n+     *         ValueLayout.JAVA_INT.withName(\"y\")\n+     * ).withName(\"Point\");\n+     *}\n+     * might be rendered to something like this:\n+     * {@snippet lang = text:\n+     * Point {\n+     *   x=1,\n+     *   y=2\n+     * }\n+     *}\n+     * <p>\n+     * This method is intended to view memory segments through small and medium-sized memory layout\n+     * lenses and is, in all cases, restricted by the inherent String capacity limit.\n+     *\n+     * @param lens  to use as a lens when viewing the memory segment\n+     * @return a view of the memory segment viewed through a memory layout lens\n+     * @throws OutOfMemoryError if the view exceeds the array size VM limit\n+     *\/\n+    default String viewThrough(MemoryLayout lens) {\n+        Objects.requireNonNull(lens);\n+        return MemorySegmentRenderUtil.viewThrough(this, lens);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":69,"deletions":4,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-\/* package-private *\/ final class PaddingLayout extends AbstractLayout implements MemoryLayout {\n+public final class PaddingLayout extends AbstractLayout implements MemoryLayout {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/PaddingLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,367 @@\n+\/*\n+ *  Copyright (c) 2022, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+package jdk.internal.foreign;\n+\n+import java.lang.foreign.*;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+import java.util.stream.LongStream;\n+import java.util.stream.Stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * Internal class to support rendering of MemorySegments into various formats.\n+ *\/\n+public final class MemorySegmentRenderUtil {\n+\n+    private static final byte[] UPPERCASE_HEX_DIGITS = {\n+            '0', '1', '2', '3', '4', '5', '6', '7',\n+            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n+    };\n+\n+    private static final int HEX_STREAM_BYTES_PER_ROW = 1 << 4; \/\/ Should be a power of 2\n+    private static final int HEX_LINE_LENGTH_EXCLUDING_CHARS = Long.BYTES * 2 + HEX_STREAM_BYTES_PER_ROW * 3 + 4;\n+\n+    private MemorySegmentRenderUtil() {\n+    }\n+\n+    \/**\n+     * Returns a Stream of human-readable, lines with hexadecimal values for the provided {@code memorySegment}.\n+     * <p>\n+     * The exact format of the stream elements is unspecified and should not\n+     * be acted upon programmatically. Loosely speaking, this method renders\n+     * a format similar to the *nix command \"hexdump -C\".\n+     * <p>\n+     * As an example, a MemorySegment created and initialized as follows\n+     * {@snippet lang = java:\n+     * MemorySegment memorySegment = memorySession.allocate(64 + 4);\n+     * memorySegment.setUtf8String(0, \"The quick brown fox jumped over the lazy dog\\nSecond line\\t:here\");\n+     * hexStream(memorySegment)\n+     *     .forEach(System.out::println);\n+     *}\n+     * might print to something like this:\n+     * {@snippet lang = text:\n+     * 0000000000000000  54 68 65 20 71 75 69 63  6B 20 62 72 6F 77 6E 20  |The quick brown |\n+     * 0000000000000010  66 6F 78 20 6A 75 6D 70  65 64 20 6F 76 65 72 20  |fox jumped over |\n+     * 0000000000000020  74 68 65 20 6C 61 7A 79  20 64 6F 67 0A 53 65 63  |the lazy dog.Sec|\n+     * 0000000000000030  6F 6E 64 20 6C 69 6E 65  09 3A 68 65 72 65 00 00  |ond line.:here..|\n+     * 0000000000000040  00 00 00 00                                       |....|\n+     *}\n+     * <p>\n+     * Use a {@linkplain MemorySegment#asSlice(long, long) slice} to inspect a specific region\n+     * of a memory segment.\n+     *\n+     * @param memorySegment the memory segment to generate hexadecimal values from\n+     * @return a Stream of human-readable, lines with hexadecimal values\n+     *\/\n+    public static Stream<String> hexStream(MemorySegment memorySegment) {\n+        requireNonNull(memorySegment);\n+        \/\/ Todo: Investigate how to handle mapped sparse files\n+\n+        final var state = new HexStreamState();\n+        return LongStream.range(0, memorySegment.byteSize())\n+                .mapToObj(index -> {\n+                    if (state.isEmpty()) {\n+                        \/\/ We are on a new line: Append the index\n+                        state.appendIndex(index);\n+                    }\n+                    if (index % (HEX_STREAM_BYTES_PER_ROW >>> 1) == 0) {\n+                        \/\/ We are either at the beginning or halfway through: add an extra space for readability\n+                        state.appendSpace();\n+                    }\n+                    \/\/ Append the actual memory value\n+                    state.appendValue(memorySegment.get(ValueLayout.JAVA_BYTE, index));\n+                    final long nextCnt = index + 1;\n+                    if (nextCnt % HEX_STREAM_BYTES_PER_ROW == 0 || nextCnt == memorySegment.byteSize()) {\n+                        \/\/ We have a complete line (eiter a full line or the last line)\n+                        return state.renderLineToStringAndReset();\n+                    } else {\n+                        \/\/ For this count, there was no line break so pass null and filter it away later\n+                        return null;\n+                    }\n+                })\n+                .filter(Objects::nonNull);\n+    }\n+\n+    \/**\n+     * Returns a human-readable view of the provided {@code memorySegment} viewed through\n+     * the provided {@code lens}.\n+     * <p>\n+     * Lines are separated with the system-dependent line separator {@link System#lineSeparator() }.\n+     * Otherwise, the exact format of the returned view is unspecified and should not\n+     * be acted upon programmatically.\n+     * <p>\n+     * As an example, a MemorySegment viewed though the following memory layout\n+     * {@snippet lang = java:\n+     * var lens = MemoryLayout.structLayout(\n+     *         ValueLayout.JAVA_INT.withName(\"x\"),\n+     *         ValueLayout.JAVA_INT.withName(\"y\")\n+     * ).withName(\"Point\");\n+     *}\n+     * might be rendered to something like this:\n+     * {@snippet lang = text:\n+     * Point {\n+     *   x=1,\n+     *   y=2\n+     * }\n+     *}\n+     * <p>\n+     * This method is intended to view memory segments through small and medium-sized memory layouts\n+     * and is, in all cases, restricted by the inherent String capacity limit.\n+     *\n+     * @param memorySegment to be viewed\n+     * @param lens  to use as a lens when viewing the memory segment\n+     * @return a view of the memory segment viewed through the memory layout\n+     * @throws OutOfMemoryError if the view exceeds the array size VM limit\n+     *\/\n+    public static String viewThrough(MemorySegment memorySegment,\n+                                     MemoryLayout lens) {\n+        requireNonNull(memorySegment);\n+        requireNonNull(lens);\n+\n+        final var sb = new StringBuilder();\n+        final Consumer<CharSequence> action = line -> {\n+            if (!sb.isEmpty()) {\n+                sb.append(System.lineSeparator());\n+            }\n+            sb.append(line);\n+        };\n+        renderView(memorySegment, lens, action, new ViewState(), \"\");\n+        return sb.toString();\n+    }\n+\n+    public static void renderView(MemorySegment memorySegment,\n+                                  MemoryLayout memoryLayout,\n+                                  Consumer<? super CharSequence> action,\n+                                  ViewState state,\n+                                  String suffix) {\n+\n+        \/\/ TODO: Replace with \"patterns in switch statement\" once this becomes available.\n+\n+        if (memoryLayout instanceof ValueLayout.OfByte ofByte) {\n+            action.accept(renderValueLayout(state, ofByte, Byte.toString(memorySegment.get(ofByte, state.indexAndAdd(ofByte))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfShort ofShort) {\n+            action.accept(renderValueLayout(state, ofShort, Short.toString(memorySegment.get(ofShort, state.indexAndAdd(ofShort))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfInt ofInt) {\n+            action.accept(renderValueLayout(state, ofInt, Integer.toString(memorySegment.get(ofInt, state.indexAndAdd(ofInt))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfLong ofLong) {\n+            action.accept(renderValueLayout(state, ofLong, Long.toString(memorySegment.get(ofLong, state.indexAndAdd(ofLong))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfFloat ofFloat) {\n+            action.accept(renderValueLayout(state, ofFloat, Float.toString(memorySegment.get(ofFloat, state.indexAndAdd(ofFloat))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfDouble ofDouble) {\n+            action.accept(renderValueLayout(state, ofDouble, Double.toString(memorySegment.get(ofDouble, state.indexAndAdd(ofDouble))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfChar ofChar) {\n+            action.accept(renderValueLayout(state, ofChar, Character.toString(memorySegment.get(ofChar, state.indexAndAdd(ofChar))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfBoolean ofBoolean) {\n+            action.accept(renderValueLayout(state, ofBoolean, Boolean.toString(memorySegment.get(ofBoolean, state.indexAndAdd(ofBoolean))), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof ValueLayout.OfAddress ofAddress) {\n+            action.accept(renderValueLayout(state, ofAddress, memorySegment.get(ofAddress, state.indexAndAdd(ofAddress)).toString(), suffix));\n+            return;\n+        }\n+        if (memoryLayout instanceof PaddingLayout paddingLayout) {\n+            action.accept(state.indentSpaces() + paddingLayout.bitSize() + \" padding bits\");\n+            state.indexAndAdd(paddingLayout);\n+            return;\n+        }\n+        if (memoryLayout instanceof GroupLayout groupLayout) {\n+\n+            \/\/ Strictly, we should provide all permutations of nested unions.\n+\n+            final var separator = groupLayout.isStruct()\n+                    ? \",\"  \/\/ Struct separator\n+                    : \"|\"; \/\/ Union separator\n+\n+            action.accept(indentedLabel(state, groupLayout) + \" {\");\n+            state.incrementIndent();\n+            final var members = groupLayout.memberLayouts();\n+            final long initialIndex = state.index();\n+            long maxIndex = initialIndex;\n+            for (int i = 0; i < members.size(); i++) {\n+                if (groupLayout.isUnion()) {\n+                    \/\/ If it is a union, we need to reset the index for each member\n+                    state.index(initialIndex);\n+                    \/\/ We record the max index used for any union member so we can leave off from there\n+                    maxIndex = Math.max(maxIndex, state.index());\n+                }\n+                renderView(memorySegment, members.get(i), action, state, (i != (members.size() - 1)) ? separator : \"\");\n+                if (groupLayout.isUnion()) {\n+                    \/\/ This is the best we can do.\n+                    state.index(maxIndex);\n+                }\n+            }\n+            state.decrementIndent();\n+            action.accept(state.indentSpaces() + \"}\" + suffix);\n+            return;\n+        }\n+        if (memoryLayout instanceof SequenceLayout sequenceLayout) {\n+            action.accept(indentedLabel(state, sequenceLayout) + \" [\");\n+            state.incrementIndent();\n+            final long elementCount = sequenceLayout.elementCount();\n+            for (long i = 0; i < elementCount; i++) {\n+                renderView(memorySegment, sequenceLayout.elementLayout(), action, state, (i != (elementCount - 1L)) ? \",\" : \"\");\n+            }\n+            state.decrementIndent();\n+            action.accept(state.indentSpaces() + \"]\" + suffix);\n+            return;\n+        }\n+        action.accept(\"Unknown memoryLayout: \" + memoryLayout);\n+    }\n+\n+    static String renderValueLayout(ViewState state,\n+                                    ValueLayout layout,\n+                                    String value,\n+                                    String suffix) {\n+        return indentedLabel(state, layout) + \"=\" + value + suffix;\n+    }\n+\n+    static String indentedLabel(ViewState state,\n+                                MemoryLayout layout) {\n+        return state.indentSpaces() + layout.name()\n+                .orElseGet(layout::toString);\n+    }\n+\n+    static final class HexStreamState {\n+        private final StringBuilder line = new StringBuilder();\n+        private final StringBuilder chars = new StringBuilder();\n+\n+        boolean isEmpty() {\n+            return line.isEmpty();\n+        }\n+\n+        void appendIndex(long index) {\n+            appendHexTo(line, index);\n+            appendSpace();\n+        }\n+\n+        void appendValue(byte val) {\n+            appendHexTo(line, val);\n+            chars.append(viewByteAsAscii(val));\n+            appendSpace();\n+        }\n+\n+        String renderLineToStringAndReset() {\n+            while (line.length() < HEX_LINE_LENGTH_EXCLUDING_CHARS) {\n+                \/\/ Pad if necessary\n+                appendSpace();\n+            }\n+            line.append('|').append(chars).append('|');\n+\n+            final String result = line.toString();\n+            line.setLength(0);\n+            chars.setLength(0);\n+            return result;\n+        }\n+\n+        void appendSpace() {\n+            line.append(' ');\n+        }\n+    }\n+\n+    static final class ViewState {\n+\n+        private static final int SPACES_PER_INDENT = 4;\n+\n+        \/\/ Holding a non-static indents allows simple thread-safe use\n+        private final StringBuilder indents = new StringBuilder();\n+\n+        private int indent;\n+        private long index;\n+\n+        void incrementIndent() {\n+            indent++;\n+        }\n+\n+        void decrementIndent() {\n+            indent--;\n+        }\n+\n+        String indentSpaces() {\n+            final int spaces = indent * SPACES_PER_INDENT;\n+            while (indents.length() < spaces) {\n+                \/\/ Expand as needed\n+                indents.append(\" \");\n+            }\n+            return indents.substring(0, spaces);\n+        }\n+\n+        long index() {\n+            return index;\n+        }\n+\n+        void index(long index) {\n+            this.index = index;\n+        }\n+\n+        long indexAndAdd(long delta) {\n+            final long val = index;\n+            index += delta;\n+            return val;\n+        }\n+\n+        long indexAndAdd(MemoryLayout layout) {\n+            return indexAndAdd(layout.byteSize());\n+        }\n+    }\n+\n+    static void appendHexTo(StringBuilder sb,\n+                            long value) {\n+        long reversed = Long.reverseBytes(value);\n+        for (int i = 0; i < Long.BYTES; i++) {\n+            appendHexTo(sb, (byte) (reversed & 0xff));\n+            reversed >>>= Byte.SIZE;\n+        }\n+    }\n+\n+    static void appendHexTo(StringBuilder sb,\n+                            byte value) {\n+        sb.append((char) UPPERCASE_HEX_DIGITS[(value >>> 4)]);\n+        sb.append((char) UPPERCASE_HEX_DIGITS[(value & (byte) 0x0f)]);\n+    }\n+\n+    static char viewByteAsAscii(byte b) {\n+        final int value = Byte.toUnsignedInt(b);\n+        return (value >= 32 && value < 127)\n+                ? (char) value\n+                : '.';\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySegmentRenderUtil.java","additions":367,"deletions":0,"binary":false,"changes":367,"status":"added"},{"patch":"@@ -0,0 +1,227 @@\n+\/*\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.foreign\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED RenderTest\n+ *\/\n+\n+import java.lang.foreign.*;\n+import java.lang.invoke.VarHandle;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import java.lang.foreign.*;\n+\n+import org.testng.annotations.*;\n+\n+import static org.testng.Assert.*;\n+import static jdk.internal.foreign.MemorySegmentRenderUtil.*;\n+import static java.util.Objects.requireNonNull;\n+\n+@Test\n+public class RenderTest {\n+\n+    @Test\n+    public void testHexStream() {\n+        var expect = platformLineSeparated(\"\"\"\n+                0000000000000000  54 68 65 20 71 75 69 63  6B 20 62 72 6F 77 6E 20  |The quick brown |\n+                0000000000000010  66 6F 78 20 6A 75 6D 70  65 64 20 6F 76 65 72 20  |fox jumped over |\n+                0000000000000020  74 68 65 20 6C 61 7A 79  20 64 6F 67 0A 53 65 63  |the lazy dog.Sec|\n+                0000000000000030  6F 6E 64 20 6C 69 6E 65  09 3A 68 65 72 65 00 00  |ond line.:here..|\n+                0000000000000040  00 00 00 00                                       |....|\"\"\");\n+\n+        var actual = testWithFreshMemorySegment(64 + 4, segment -> {\n+            segment.setUtf8String(0, \"The quick brown fox jumped over the lazy dog\\nSecond line\\t:here\");\n+            return hexStream(segment)\n+                    .collect(Collectors.joining(System.lineSeparator()));\n+        });\n+        assertEquals(expect, actual);\n+    }\n+\n+    @Test\n+    public void valueLayouts() {\n+        record TestInput(ValueLayout layout, String stringValue){};\n+        List.of(\n+                new TestInput(ValueLayout.JAVA_BYTE, \"0\"),\n+                new TestInput(ValueLayout.JAVA_SHORT, \"0\"),\n+                new TestInput(ValueLayout.JAVA_INT, \"0\"),\n+                new TestInput(ValueLayout.JAVA_LONG, \"0\"),\n+                new TestInput(ValueLayout.JAVA_FLOAT, \"0.0\"),\n+                new TestInput(ValueLayout.JAVA_DOUBLE, \"0.0\"),\n+                new TestInput(ValueLayout.JAVA_CHAR, \"\"+(char)0),\n+                new TestInput(ValueLayout.JAVA_BOOLEAN, \"false\"),\n+                new TestInput(ValueLayout.ADDRESS, \"MemoryAddress{ offset=0x0 }\")\n+        ).forEach(ti -> {\n+            var expect = ti.layout() + \"=\" + ti.stringValue();\n+            var actual = testWithFreshMemorySegment(ti.layout().byteSize(), s -> viewThrough(s, ti.layout()));\n+            assertEquals(expect, actual);\n+        });\n+    }\n+\n+    @Test\n+    public void point() {\n+\n+        final class Point {\n+\n+            private static final MemoryLayout LAYOUT = MemoryLayout.structLayout(\n+                    ValueLayout.JAVA_INT.withName(\"x\"),\n+                    ValueLayout.JAVA_INT.withName(\"y\")\n+            ).withName(\"Point\");\n+\n+            private static final VarHandle xVH = LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"x\"));\n+            private static final VarHandle yVH = LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"y\"));\n+\n+            private final MemorySegment memorySegment;\n+\n+            public Point(MemorySegment memorySegment) {\n+                this.memorySegment = requireNonNull(memorySegment);\n+            }\n+\n+            int x() {\n+                return (int) xVH.get(memorySegment);\n+            }\n+\n+            int y() {\n+                return (int) yVH.get(memorySegment);\n+            }\n+\n+            void x(int x) {\n+                xVH.set(memorySegment, x);\n+            }\n+\n+            void y(int y) {\n+                yVH.set(memorySegment, y);\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return \"Point {x=\" + x() + \", y=\" + y() + \"}\";\n+            }\n+        }\n+\n+        var expect = platformLineSeparated(\"\"\"\n+                Point {\n+                    x=1,\n+                    y=2\n+                }\"\"\");\n+\n+        var actual = testWithFreshMemorySegment(Integer.BYTES * 2, segment -> {\n+            final Point point = new Point(segment);\n+            point.x(1);\n+            point.y(2);\n+            return viewThrough(segment, Point.LAYOUT);\n+        });\n+\n+        assertEquals(expect, actual);\n+    }\n+\n+    @Test\n+    public void sequence() {\n+        final int arraySize = 4;\n+        var sequenceLayout = MemoryLayout.sequenceLayout(arraySize,\n+                MemoryLayout.structLayout(\n+                        ValueLayout.JAVA_INT.withName(\"x\"),\n+                        ValueLayout.JAVA_INT.withName(\"y\")\n+                ).withName(\"Point\")\n+        ).withName(\"PointArrayOfElements\");\n+\n+        var expect = platformLineSeparated(\"\"\"\n+                PointArrayOfElements [\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    },\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    },\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    },\n+                    Point {\n+                        x=0,\n+                        y=0\n+                    }\n+                ]\"\"\");\n+        var actual = testWithFreshMemorySegment(Integer.BYTES * 2 * arraySize, segment ->\n+                viewThrough(segment, sequenceLayout));\n+\n+        assertEquals(expect, actual);\n+    }\n+\n+\n+    @Test\n+    public void union() {\n+        var u0 = MemoryLayout.structLayout(\n+                ValueLayout.JAVA_INT.withName(\"x\"),\n+                ValueLayout.JAVA_INT.withName(\"y\"),\n+                MemoryLayout.paddingLayout(Integer.SIZE)\n+        ).withName(\"Point\");\n+\n+        var u1 = MemoryLayout.structLayout(\n+                ValueLayout.JAVA_INT.withName(\"x\"),\n+                ValueLayout.JAVA_INT.withName(\"y\"),\n+                ValueLayout.JAVA_INT.withName(\"z\")\n+        ).withName(\"3D-Point\");\n+\n+        var union = MemoryLayout.unionLayout(u0, u1).withName(\"Union\");\n+\n+        var expect = platformLineSeparated(\"\"\"\n+                Union {\n+                    Point {\n+                        x=0,\n+                        y=0,\n+                        32 padding bits\n+                    }|\n+                    3D-Point {\n+                        x=0,\n+                        y=0,\n+                        z=0\n+                    }\n+                }\"\"\");\n+        var actual = testWithFreshMemorySegment(Integer.BYTES * 3, segment ->\n+                viewThrough(segment, union));\n+\n+        assertEquals(expect, actual);\n+    }\n+\n+    private static String platformLineSeparated(String s) {\n+        return s.lines()\n+                .collect(Collectors.joining(System.lineSeparator()));\n+    }\n+\n+    private static <T> T testWithFreshMemorySegment(long size,\n+                                                    Function<MemorySegment, T> mapper) {\n+        try (final MemorySession session = MemorySession.openConfined()) {\n+            var segment = session.allocate(size);\n+            return mapper.apply(segment);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/RenderTest.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"}]}