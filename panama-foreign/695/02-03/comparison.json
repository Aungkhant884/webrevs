{"files":[{"patch":"@@ -1877,1 +1877,1 @@\n-     * the provided {@code memoryLayout}.\n+     * the provided {@code layout}.\n@@ -1900,1 +1900,1 @@\n-     * As an example, a memory segment viewed though the following memory layout memoryLayout\n+     * As an example, a memory segment viewed though the following memory layout\n@@ -1905,1 +1905,1 @@\n-     *    var memoryLayout = MemoryLayout.structLayout(\n+     *    var layout = MemoryLayout.structLayout(\n@@ -1910,1 +1910,1 @@\n-     *   System.out.println(memorySegment.toString(memoryLayout));\n+     *   System.out.println(memorySegment.toString(layout));\n@@ -1920,2 +1920,2 @@\n-     * @param memoryLayout  to use as a memoryLayout when viewing the memory segment\n-     * @return a view of the memory segment viewed through a memory layout memoryLayout\n+     * @param layout  to use as a layout when viewing the memory segment\n+     * @return a view of the memory segment viewed through a memory layout layout\n@@ -1925,3 +1925,3 @@\n-    default String toString(MemoryLayout memoryLayout) {\n-        Objects.requireNonNull(memoryLayout);\n-        return MemorySegmentRenderUtil.viewThrough(this, memoryLayout);\n+    default String toString(MemoryLayout layout) {\n+        Objects.requireNonNull(layout);\n+        return MemorySegmentRenderUtil.viewThrough(this, layout);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -76,3 +76,3 @@\n-     *   MemorySegment memorySegment = memorySession.allocate(64 + 4);\n-     *   memorySegment.setUtf8String(0, \"The quick brown fox jumped over the lazy dog\\nSecond line\\t:here\");\n-     *   memorySegment.hexDump()\n+     *   MemorySegment segment = memorySession.allocate(64 + 4);\n+     *   segment.setUtf8String(0, \"The quick brown fox jumped over the lazy dog\\nSecond line\\t:here\");\n+     *   segment.hexDump()\n@@ -100,1 +100,1 @@\n-     * @param memorySegment to inspect\n+     * @param segment to inspect\n@@ -103,2 +103,2 @@\n-    public static Stream<String> hexDump(MemorySegment memorySegment) {\n-        requireNonNull(memorySegment);\n+    public static Stream<String> hexDump(MemorySegment segment) {\n+        requireNonNull(segment);\n@@ -108,1 +108,1 @@\n-        return LongStream.range(0, memorySegment.byteSize())\n+        return LongStream.range(0, segment.byteSize())\n@@ -119,1 +119,1 @@\n-                    state.appendValue(memorySegment.get(ValueLayout.JAVA_BYTE, index));\n+                    state.appendValue(segment.get(ValueLayout.JAVA_BYTE, index));\n@@ -121,1 +121,1 @@\n-                    if (nextCnt % HEX_STREAM_BYTES_PER_ROW == 0 || nextCnt == memorySegment.byteSize()) {\n+                    if (nextCnt % HEX_STREAM_BYTES_PER_ROW == 0 || nextCnt == segment.byteSize()) {\n@@ -133,2 +133,2 @@\n-     * Returns a human-readable view of the provided {@code memorySegment} viewed through\n-     * the provided {@code memoryLayout}.\n+     * Returns a human-readable view of the provided {@code segment} viewed through\n+     * the provided {@code layout}.\n@@ -142,1 +142,1 @@\n-     * var memoryLayout = MemoryLayout.structLayout(\n+     * var layout = MemoryLayout.structLayout(\n@@ -158,2 +158,2 @@\n-     * @param memorySegment to be viewed\n-     * @param memoryLayout  to use as a memoryLayout when viewing the memory segment\n+     * @param segment to be viewed\n+     * @param layout  to use as a layout when viewing the memory segment\n@@ -163,4 +163,4 @@\n-    public static String viewThrough(MemorySegment memorySegment,\n-                                     MemoryLayout memoryLayout) {\n-        requireNonNull(memorySegment);\n-        requireNonNull(memoryLayout);\n+    public static String viewThrough(MemorySegment segment,\n+                                     MemoryLayout layout) {\n+        requireNonNull(segment);\n+        requireNonNull(layout);\n@@ -175,1 +175,1 @@\n-        renderView(memorySegment, memoryLayout, action, new ViewState(), \"\");\n+        renderView(segment, layout, action, new ViewState(), \"\");\n@@ -179,2 +179,2 @@\n-    public static void renderView(MemorySegment memorySegment,\n-                                  MemoryLayout memoryLayout,\n+    public static void renderView(MemorySegment segment,\n+                                  MemoryLayout layout,\n@@ -187,2 +187,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfByte ofByte) {\n-            action.accept(renderValueLayout(state, ofByte, Byte.toString(memorySegment.get(ofByte, state.indexAndAdd(ofByte))), suffix));\n+        if (layout instanceof ValueLayout.OfByte ofByte) {\n+            action.accept(renderValueLayout(state, ofByte, Byte.toString(segment.get(ofByte, state.indexAndAdd(ofByte))), suffix));\n@@ -191,2 +191,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfShort ofShort) {\n-            action.accept(renderValueLayout(state, ofShort, Short.toString(memorySegment.get(ofShort, state.indexAndAdd(ofShort))), suffix));\n+        if (layout instanceof ValueLayout.OfShort ofShort) {\n+            action.accept(renderValueLayout(state, ofShort, Short.toString(segment.get(ofShort, state.indexAndAdd(ofShort))), suffix));\n@@ -195,2 +195,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfInt ofInt) {\n-            action.accept(renderValueLayout(state, ofInt, Integer.toString(memorySegment.get(ofInt, state.indexAndAdd(ofInt))), suffix));\n+        if (layout instanceof ValueLayout.OfInt ofInt) {\n+            action.accept(renderValueLayout(state, ofInt, Integer.toString(segment.get(ofInt, state.indexAndAdd(ofInt))), suffix));\n@@ -199,2 +199,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfLong ofLong) {\n-            action.accept(renderValueLayout(state, ofLong, Long.toString(memorySegment.get(ofLong, state.indexAndAdd(ofLong))), suffix));\n+        if (layout instanceof ValueLayout.OfLong ofLong) {\n+            action.accept(renderValueLayout(state, ofLong, Long.toString(segment.get(ofLong, state.indexAndAdd(ofLong))), suffix));\n@@ -203,2 +203,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfFloat ofFloat) {\n-            action.accept(renderValueLayout(state, ofFloat, Float.toString(memorySegment.get(ofFloat, state.indexAndAdd(ofFloat))), suffix));\n+        if (layout instanceof ValueLayout.OfFloat ofFloat) {\n+            action.accept(renderValueLayout(state, ofFloat, Float.toString(segment.get(ofFloat, state.indexAndAdd(ofFloat))), suffix));\n@@ -207,2 +207,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfDouble ofDouble) {\n-            action.accept(renderValueLayout(state, ofDouble, Double.toString(memorySegment.get(ofDouble, state.indexAndAdd(ofDouble))), suffix));\n+        if (layout instanceof ValueLayout.OfDouble ofDouble) {\n+            action.accept(renderValueLayout(state, ofDouble, Double.toString(segment.get(ofDouble, state.indexAndAdd(ofDouble))), suffix));\n@@ -211,2 +211,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfChar ofChar) {\n-            action.accept(renderValueLayout(state, ofChar, Character.toString(memorySegment.get(ofChar, state.indexAndAdd(ofChar))), suffix));\n+        if (layout instanceof ValueLayout.OfChar ofChar) {\n+            action.accept(renderValueLayout(state, ofChar, Character.toString(segment.get(ofChar, state.indexAndAdd(ofChar))), suffix));\n@@ -215,2 +215,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfBoolean ofBoolean) {\n-            action.accept(renderValueLayout(state, ofBoolean, Boolean.toString(memorySegment.get(ofBoolean, state.indexAndAdd(ofBoolean))), suffix));\n+        if (layout instanceof ValueLayout.OfBoolean ofBoolean) {\n+            action.accept(renderValueLayout(state, ofBoolean, Boolean.toString(segment.get(ofBoolean, state.indexAndAdd(ofBoolean))), suffix));\n@@ -219,2 +219,2 @@\n-        if (memoryLayout instanceof ValueLayout.OfAddress ofAddress) {\n-            action.accept(renderValueLayout(state, ofAddress, memorySegment.get(ofAddress, state.indexAndAdd(ofAddress)).toString(), suffix));\n+        if (layout instanceof ValueLayout.OfAddress ofAddress) {\n+            action.accept(renderValueLayout(state, ofAddress, segment.get(ofAddress, state.indexAndAdd(ofAddress)).toString(), suffix));\n@@ -224,3 +224,3 @@\n-        if (\"java.lang.foreign.PaddingLayout\".equals(memoryLayout.getClass().getName())) {\n-            action.accept(state.indentSpaces() + memoryLayout.bitSize() + \" padding bits\");\n-            state.indexAndAdd(memoryLayout);\n+        if (\"java.lang.foreign.PaddingLayout\".equals(layout.getClass().getName())) {\n+            action.accept(state.indentSpaces() + layout.bitSize() + \" padding bits\");\n+            state.indexAndAdd(layout);\n@@ -229,1 +229,1 @@\n-        if (memoryLayout instanceof GroupLayout groupLayout) {\n+        if (layout instanceof GroupLayout groupLayout) {\n@@ -231,1 +231,4 @@\n-            \/\/ Strictly, we should provide all permutations of nested unions.\n+            \/* Strictly, we should provide all permutations of unions.\n+             * So, if we have a union U =  (A|B),(C|D) then we should present:\n+             * (A,C), (A,D), (B,C) and (B,D)\n+             *\/\n@@ -249,1 +252,1 @@\n-                renderView(memorySegment, members.get(i), action, state, (i != (members.size() - 1)) ? separator : \"\");\n+                renderView(segment, members.get(i), action, state, (i != (members.size() - 1)) ? separator : \"\");\n@@ -259,1 +262,1 @@\n-        if (memoryLayout instanceof SequenceLayout sequenceLayout) {\n+        if (layout instanceof SequenceLayout sequenceLayout) {\n@@ -264,1 +267,1 @@\n-                renderView(memorySegment, sequenceLayout.elementLayout(), action, state, (i != (elementCount - 1L)) ? \",\" : \"\");\n+                renderView(segment, sequenceLayout.elementLayout(), action, state, (i != (elementCount - 1L)) ? \",\" : \"\");\n@@ -270,1 +273,1 @@\n-        action.accept(\"Unknown memoryLayout: \" + memoryLayout);\n+        action.accept(\"Unknown layout: \" + layout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySegmentRenderUtil.java","additions":51,"deletions":48,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.internal.foreign.MemorySegmentRenderUtil;\n@@ -75,2 +76,1 @@\n-        var actual = MemorySegment.ofArray(array)\n-                .hexDump()\n+        var actual = hexDump(MemorySegment.ofArray(array))\n@@ -87,2 +87,1 @@\n-        var actual = MemorySegment.ofBuffer(ByteBuffer.wrap(array))\n-                .hexDump()\n+        var actual = hexDump(MemorySegment.ofBuffer(ByteBuffer.wrap(array)))\n@@ -97,0 +96,5 @@\n+\n+        var addressStringValue = MemorySegment.allocateNative(Long.BYTES, ValueLayout.ADDRESS.byteAlignment(), MemorySession.openImplicit())\n+                .get(ValueLayout.ADDRESS, 0)\n+                .toString();\n+\n@@ -107,1 +111,1 @@\n-                new TestInput(ValueLayout.ADDRESS, \"MemoryAddress{ offset=0x0 }\")\n+                new TestInput(ValueLayout.ADDRESS, addressStringValue)\n","filename":"test\/jdk\/java\/foreign\/RenderTest.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}