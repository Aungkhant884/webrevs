{"files":[{"patch":"@@ -237,7 +237,2 @@\n- * The var handles returned by {@link #varHandle(PathElement...)} and {@link ValueLayout#varHandle()} feature certain\n- * <i>access mode restrictions<\/i>. A var handle is associated with an access size {@code S}, derived from the\n- * {@linkplain ValueLayout#byteSize() byte size} of the receiver layout, and an alignment constraint {@code B}, derived\n- * from the {@linkplain ValueLayout#byteAlignment() alignment constraint} of the receiver layout. We say that a memory\n- * access operation is <em>fully aligned<\/em> if it occurs at a memory address {@code A} which is compatible with both\n- * alignment constraints {@code S} and {@code B}. If access is fully aligned then following access modes are supported\n- * and are guaranteed to support atomic access:\n+ * A var handle returned by {@link #varHandle(PathElement...)} or {@link ValueLayout#varHandle()} features certain\n+ * access characteristics, which are derived from the selected layout {@code L}:\n@@ -245,3 +240,12 @@\n- * <li>read write access modes for all {@code T}, with the exception of\n- *     access modes {@code get} and {@code set} for {@code long} and\n- *     {@code double} on 32-bit platforms.\n+ * <li>A carrier type {@code T}, derived from {@code L.carrier()}<\/li>\n+ * <li>An alignment constraint {@code A}, derived from {@code L.byteAlignment()}<\/li>\n+ * <li>An access size {@code S}, derived from {@code L.byteSize()}<\/li>\n+ * <\/ul>\n+ * Depending on the above characteristics, the returned var handle might feature certain <i>access mode restrictions<\/i>.\n+ * We say that a var handle is <em>aligned<\/em> if its alignment constraint {@code A} is compatible with the access size\n+ * {@code S}, that is if {@code A >= S}. An aligned var handle is guaranteed to support the following access modes:\n+ * <ul>\n+ * <li>read write access modes for all {@code T}. On 32-bit platforms, access modes\n+ *     {@code get} and {@code set} for {@code long}, {@code double} and {@code MemorySegment}\n+ *     are supported but might lead to word tearing, as described in Section {@jls 17.7}.\n+ *     of <cite>The Java Language Specification<\/cite>.\n@@ -249,1 +253,1 @@\n- *     {@code float}, {@code double} or {@link MemorySegment}.\n+ *     {@code float}, {@code double} and {@link MemorySegment}.\n@@ -263,10 +267,4 @@\n- * Alternatively, a memory access operation is <em>partially aligned<\/em> if it occurs at a memory address {@code A}\n- * which is only compatible with the alignment constraint {@code B}; in such cases, access for anything other than the\n- * {@code get} and {@code set} access modes will result in an {@code IllegalArgumentException}. If access is partially aligned,\n- * atomic access is only guaranteed when {@code A} is aligned according to {@code S}.\n- * <p>\n- * In all other cases, we say that a memory access operation is <em>misaligned<\/em>; in such cases an\n- * {@code IllegalArgumentException} is thrown, irrespective of the access mode being used.\n- * <p>\n- * Finally, if {@code T} is {@code MemorySegment} all write access modes throw {@link IllegalArgumentException}\n- * unless the value to be written is a {@linkplain MemorySegment#isNative() native} memory segment.\n+ * Alternatively, a var handle is <em>unaligned<\/em> if its alignment constraint {@code A} is incompatible with the\n+ * access size {@code S}, that is, if {@code A < S}. An unaligned var handle only supports the {@code get} and {@code set}\n+ * access modes. All other access modes will result in {@link UnsupportedOperationException} being thrown. Moreover,\n+ * while supported, access modes {@code get} and {@code set} might lead to word tearing.\n@@ -474,0 +472,3 @@\n+     * Moreover, if the selected layout is an {@linkplain AddressLayout address layout}, calling {@link VarHandle#set(Object...)}\n+     * can throw {@link IllegalArgumentException} if the memory segment representing the address to be written is not a\n+     * {@linkplain MemorySegment#isNative() native} memory segment.\n@@ -505,1 +506,1 @@\n-     * which are common to all memory access var handles derived from memory layouts.\n+     * which are common to all var handles derived from memory layouts.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -59,0 +59,4 @@\n+\n+    static UnsupportedOperationException newUnsupportedAccessModeForAlignment(long alignment) {\n+        return new UnsupportedOperationException(\"Unsupported access mode for alignment: \" + alignment);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleSegmentViewBase.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    static final int VM_ALIGN = $BoxType$.BYTES - 1;\n+    static final int NON_PLAIN_ACCESS_MIN_ALIGN_MASK = $BoxType$.BYTES - 1;\n@@ -107,4 +107,3 @@\n-    static long offset(AbstractMemorySegmentImpl bb, long offset, long alignmentMask) {\n-        long address = offsetNoVMAlignCheck(bb, offset, alignmentMask);\n-        if ((address & VM_ALIGN) != 0) {\n-            throw VarHandleSegmentViewBase.newIllegalArgumentExceptionForMisalignedAccess(address);\n+    static long offsetNonPlain(AbstractMemorySegmentImpl bb, long offset, long alignmentMask) {\n+        if ((alignmentMask & NON_PLAIN_ACCESS_MIN_ALIGN_MASK) != NON_PLAIN_ACCESS_MIN_ALIGN_MASK) {\n+            throw VarHandleSegmentViewBase.newUnsupportedAccessModeForAlignment(alignmentMask + 1);\n@@ -112,1 +111,1 @@\n-        return address;\n+        return offsetPlain(bb, offset, alignmentMask);\n@@ -116,1 +115,1 @@\n-    static long offsetNoVMAlignCheck(AbstractMemorySegmentImpl bb, long offset, long alignmentMask) {\n+    static long offsetPlain(AbstractMemorySegmentImpl bb, long offset, long alignmentMask) {\n@@ -133,1 +132,1 @@\n-                offsetNoVMAlignCheck(bb, base, handle.alignmentMask),\n+                offsetPlain(bb, base, handle.alignmentMask),\n@@ -140,1 +139,1 @@\n-                offsetNoVMAlignCheck(bb, base, handle.alignmentMask));\n+                offsetPlain(bb, base, handle.alignmentMask));\n@@ -144,1 +143,1 @@\n-                offsetNoVMAlignCheck(bb, base, handle.alignmentMask),\n+                offsetPlain(bb, base, handle.alignmentMask),\n@@ -157,1 +156,1 @@\n-                offsetNoVMAlignCheck(bb, base, handle.alignmentMask),\n+                offsetPlain(bb, base, handle.alignmentMask),\n@@ -164,1 +163,1 @@\n-                offsetNoVMAlignCheck(bb, base, handle.alignmentMask),\n+                offsetPlain(bb, base, handle.alignmentMask),\n@@ -169,1 +168,1 @@\n-                offsetNoVMAlignCheck(bb, base, handle.alignmentMask),\n+                offsetPlain(bb, base, handle.alignmentMask),\n@@ -183,1 +182,1 @@\n-                                  offset(bb, base, handle.alignmentMask)));\n+                                  offsetNonPlain(bb, base, handle.alignmentMask)));\n@@ -192,1 +191,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -203,1 +202,1 @@\n-                                  offset(bb, base, handle.alignmentMask)));\n+                                  offsetNonPlain(bb, base, handle.alignmentMask)));\n@@ -212,1 +211,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -223,1 +222,1 @@\n-                                  offset(bb, base, handle.alignmentMask)));\n+                                  offsetNonPlain(bb, base, handle.alignmentMask)));\n@@ -232,1 +231,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -243,1 +242,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -254,1 +253,1 @@\n-                                  offset(bb, base, handle.alignmentMask),\n+                                  offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -265,1 +264,1 @@\n-                                  offset(bb, base, handle.alignmentMask),\n+                                  offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -276,1 +275,1 @@\n-                                  offset(bb, base, handle.alignmentMask),\n+                                  offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -286,1 +285,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -296,1 +295,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -306,1 +305,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -316,1 +315,1 @@\n-                offset(bb, base, handle.alignmentMask),\n+                offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -327,1 +326,1 @@\n-                                  offset(bb, base, handle.alignmentMask),\n+                                  offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -338,1 +337,1 @@\n-                                  offset(bb, base, handle.alignmentMask),\n+                                  offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -349,1 +348,1 @@\n-                                  offset(bb, base, handle.alignmentMask),\n+                                  offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -362,1 +361,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -365,1 +364,1 @@\n-            return getAndAddConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), delta);\n+            return getAndAddConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), delta);\n@@ -376,1 +375,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -379,1 +378,1 @@\n-            return getAndAddConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), delta);\n+            return getAndAddConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), delta);\n@@ -390,1 +389,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -393,1 +392,1 @@\n-            return getAndAddConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), delta);\n+            return getAndAddConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), delta);\n@@ -418,1 +417,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -421,1 +420,1 @@\n-            return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseOrConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -432,1 +431,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -435,1 +434,1 @@\n-            return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseOrConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -446,1 +445,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -449,1 +448,1 @@\n-            return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseOrConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -472,1 +471,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -475,1 +474,1 @@\n-            return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseAndConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -486,1 +485,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -489,1 +488,1 @@\n-            return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseAndConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -500,1 +499,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -503,1 +502,1 @@\n-            return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseAndConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -527,1 +526,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -530,1 +529,1 @@\n-            return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseXorConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -541,1 +540,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -544,1 +543,1 @@\n-            return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseXorConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n@@ -555,1 +554,1 @@\n-                    offset(bb, base, handle.alignmentMask),\n+                    offsetNonPlain(bb, base, handle.alignmentMask),\n@@ -558,1 +557,1 @@\n-            return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, handle.alignmentMask), value);\n+            return getAndBitwiseXorConvEndianWithCAS(bb, offsetNonPlain(bb, base, handle.alignmentMask), value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleSegmentView.java.template","additions":53,"deletions":54,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run testng\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false -Xverify:all TestAccessModes\n+ * @run testng\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true -Xverify:all TestAccessModes\n+ * @run testng\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false -Xverify:all TestAccessModes\n+ * @run testng\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true -Xverify:all TestAccessModes\n+ *\/\n+\n+import java.lang.foreign.AddressLayout;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.VarHandle;\n+import java.lang.invoke.VarHandle.AccessMode;\n+import java.util.ArrayList;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.testng.annotations.*;\n+\n+import static org.testng.Assert.*;\n+public class TestAccessModes {\n+\n+    @Test(dataProvider = \"segmentsAndLayoutsAndModes\")\n+    public void testAccessModes(MemorySegment segment, ValueLayout layout, AccessMode mode) throws Throwable {\n+        VarHandle varHandle = layout.varHandle();\n+        MethodHandle methodHandle = varHandle.toMethodHandle(mode);\n+        boolean compatible = AccessModeKind.supportedModes(layout).contains(AccessModeKind.of(mode));\n+        try {\n+            Object o = methodHandle.invokeWithArguments(makeArgs(segment, varHandle.accessModeType(mode)));\n+            assertTrue(compatible);\n+        } catch (UnsupportedOperationException ex) {\n+            assertFalse(compatible);\n+        } catch (IllegalArgumentException ex) {\n+            \/\/ access is unaligned, but access mode is supported\n+            assertTrue(compatible);\n+        }\n+    }\n+\n+    Object[] makeArgs(MemorySegment segment, MethodType type) throws Throwable {\n+        List<Object> args = new ArrayList<>();\n+        args.add(segment);\n+        for (Class argType : type.dropParameterTypes(0, 1).parameterList()) {\n+            args.add(defaultValue(argType));\n+        }\n+        return args.toArray();\n+    }\n+\n+    Object defaultValue(Class<?> clazz) throws Throwable {\n+        if (clazz == MemorySegment.class) {\n+            return MemorySegment.NULL;\n+        } else if (clazz.isPrimitive()) {\n+            return MethodHandles.zero(clazz).invoke();\n+        } else {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    \/*\n+     * See the javadoc of MemoryLayout::varHandle.\n+     *\/\n+    enum AccessModeKind {\n+        PLAIN,\n+        READ_WRITE,\n+        ATOMIC_UPDATE,\n+        ATOMIC_NUMERIC_UPDATE,\n+        ATOMIC_BITWISE_UPDATE;\n+\n+        static AccessModeKind of(AccessMode mode) {\n+            return switch (mode) {\n+                case GET, SET -> PLAIN;\n+                case GET_ACQUIRE, GET_OPAQUE, GET_VOLATILE, SET_VOLATILE,\n+                        SET_OPAQUE, SET_RELEASE -> READ_WRITE;\n+                case GET_AND_SET, GET_AND_SET_ACQUIRE, GET_AND_SET_RELEASE,\n+                        WEAK_COMPARE_AND_SET, WEAK_COMPARE_AND_SET_RELEASE,\n+                        WEAK_COMPARE_AND_SET_ACQUIRE, WEAK_COMPARE_AND_SET_PLAIN,\n+                        COMPARE_AND_EXCHANGE, COMPARE_AND_EXCHANGE_ACQUIRE,\n+                        COMPARE_AND_EXCHANGE_RELEASE, COMPARE_AND_SET -> ATOMIC_UPDATE;\n+                case GET_AND_ADD, GET_AND_ADD_ACQUIRE, GET_AND_ADD_RELEASE -> ATOMIC_NUMERIC_UPDATE;\n+                default -> ATOMIC_BITWISE_UPDATE;\n+            };\n+        }\n+\n+        static Set<AccessModeKind> supportedModes(ValueLayout layout) {\n+            Set<AccessModeKind> supportedModes = EnumSet.noneOf(AccessModeKind.class);\n+            supportedModes.add(PLAIN);\n+            if (layout.byteAlignment() >= layout.byteSize()) {\n+                supportedModes.add(READ_WRITE);\n+                if (layout instanceof ValueLayout.OfInt || layout instanceof ValueLayout.OfLong ||\n+                        layout instanceof ValueLayout.OfFloat || layout instanceof ValueLayout.OfDouble ||\n+                        layout instanceof AddressLayout) {\n+                    supportedModes.add(ATOMIC_UPDATE);\n+                }\n+                if (layout instanceof ValueLayout.OfInt || layout instanceof ValueLayout.OfLong ||\n+                        layout instanceof AddressLayout) {\n+                    supportedModes.add(ATOMIC_NUMERIC_UPDATE);\n+                    supportedModes.add(ATOMIC_BITWISE_UPDATE);\n+                }\n+            }\n+            return supportedModes;\n+        }\n+    }\n+\n+    static MemoryLayout[] layouts() {\n+        MemoryLayout[] valueLayouts = {\n+                ValueLayout.JAVA_BOOLEAN,\n+                ValueLayout.JAVA_CHAR,\n+                ValueLayout.JAVA_BYTE,\n+                ValueLayout.JAVA_SHORT,\n+                ValueLayout.JAVA_INT,\n+                ValueLayout.JAVA_FLOAT,\n+                ValueLayout.JAVA_LONG,\n+                ValueLayout.JAVA_DOUBLE,\n+                ValueLayout.ADDRESS\n+        };\n+        List<MemoryLayout> layouts = new ArrayList<>();\n+        for (MemoryLayout layout : valueLayouts) {\n+            for (int align : new int[] { 1, 2, 4, 8 }) {\n+                layouts.add(layout.withByteAlignment(align));\n+            }\n+        }\n+        return layouts.toArray(new MemoryLayout[0]);\n+    }\n+\n+    static MemorySegment[] segments() {\n+        return new MemorySegment[]{\n+                Arena.ofAuto().allocate(8),\n+                MemorySegment.ofArray(new byte[8]),\n+                MemorySegment.ofArray(new char[4]),\n+                MemorySegment.ofArray(new short[4]),\n+                MemorySegment.ofArray(new int[2]),\n+                MemorySegment.ofArray(new float[2]),\n+                MemorySegment.ofArray(new long[1]),\n+                MemorySegment.ofArray(new double[1])\n+        };\n+    }\n+\n+    @DataProvider(name = \"segmentsAndLayoutsAndModes\")\n+    static Object[][] segmentsAndLayoutsAndModes() {\n+        List<Object[]> segmentsAndLayouts = new ArrayList<>();\n+        for (MemorySegment segment : segments()) {\n+            for (MemoryLayout layout : layouts()) {\n+                for (AccessMode mode : AccessMode.values()) {\n+                    segmentsAndLayouts.add(new Object[]{segment, layout, mode});\n+                }\n+            }\n+        }\n+        return segmentsAndLayouts.toArray(new Object[0][]);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/TestAccessModes.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"}]}