{"files":[{"patch":"@@ -146,1 +146,7 @@\n-            throw new UnsupportedOperationException();\n+            \/*\n+             * \/\/ pointer to function declared as function like this\n+             *\n+             * typedef void CB(int);\n+             * void func(CB cb);\n+             *\/\n+            return C_POINTER;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/LayoutUtils.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -355,9 +355,9 @@\n-            switch (((Type.Delegated) type).kind()) {\n-                case POINTER: {\n-                    Type pointee = ((Type.Delegated) type).type();\n-                    return (pointee instanceof Type.Function) ?\n-                        (Type.Function)pointee : null;\n-                }\n-                default:\n-                    return getAsFunctionPointer(((Type.Delegated) type).type());\n-            }\n+            return getAsFunctionPointer(((Type.Delegated) type).type());\n+        } else if (type instanceof Type.Function) {\n+            \/*\n+             * \/\/ pointer to function declared as function like this\n+             *\n+             * typedef void CB(int);\n+             * void func(CB cb);\n+             *\/\n+            return (Type.Function)type;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.incubator.foreign.NativeScope;\n+import org.testng.annotations.Test;\n+import test.jextract.test8258605.*;\n+import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+import static test.jextract.test8258605.funcParam_h.*;\n+\n+\/*\n+ * @test id=classes\n+ * @bug 8258605\n+ * @summary regression: jextract can not handle function prototypes as function arguments\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run driver JtregJextract -l FuncParam -t test.jextract.test8258605 -- funcParam.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibTest8258605Test\n+ *\/\n+\/*\n+ * @test id=sources\n+ * @bug 8258605\n+ * @summary regression: jextract can not handle function prototypes as function arguments\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @run driver JtregJextractSources -l FuncParam -t test.jextract.test8258605 -- funcParam.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibTest8258605Test\n+ *\/\n+public class LibTest8258605Test {\n+    @Test\n+    public void testFunctionCallback() {\n+        try (var scope = NativeScope.unboundedScope()) {\n+             boolean[] callbackReached = new boolean[1];\n+             f(f$x.allocate(i -> {\n+                 assertTrue(i == 10);\n+                 callbackReached[0] = true;\n+             }, scope));\n+             assertTrue(callbackReached[0]);\n+        }\n+    }\n+\n+    @Test\n+    public void testStructFunctionPointerCallback() {\n+        try (var scope = NativeScope.unboundedScope()) {\n+             boolean[] callbackReached = new boolean[1];\n+\n+             \/\/ get struct Foo instance\n+             var foo = getFoo();\n+             \/\/ make sure that foo.bar is not NULL\n+             assertFalse(Foo.bar$get(foo).equals(NULL));\n+\n+             f2(foo, f2$cb.allocate(i -> {\n+                 assertTrue(i == 42);\n+                 callbackReached[0] = true;\n+             }, scope));\n+             assertTrue(callbackReached[0]);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8258605\/LibTest8258605Test.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+typedef void CB(int);\n+\n+EXPORT void f(CB x);\n+\n+struct Foo {\n+    void (*bar)(CB cb);\n+};\n+\n+\/* get initialised Foo struct instance *\/\n+EXPORT struct Foo getFoo();\n+\n+\/* first param should be initialized struct instance returned by getFoo *\/\n+EXPORT void f2(struct Foo foo, CB cb);\n","filename":"test\/jdk\/tools\/jextract\/test8258605\/funcParam.h","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"funcParam.h\"\n+\n+EXPORT void f(CB x) {\n+    x(10);\n+}\n+\n+static void barFunc(CB cb) {\n+    cb(42);\n+}\n+\n+static struct Foo theFoo;\n+\n+EXPORT struct Foo getFoo() {\n+    theFoo.bar = barFunc;\n+    return theFoo;\n+}\n+\n+EXPORT void f2(struct Foo foo, CB cb) {\n+    foo.bar(cb);\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8258605\/libFuncParam.c","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}