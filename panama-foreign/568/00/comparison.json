{"files":[{"patch":"@@ -35,1 +35,1 @@\n- * This class provides convenient methods for copying data between primitive arrays and memory segments.\n+ * This class provides convenient methods for copying data between to and from memory segments.\n@@ -46,1 +46,1 @@\n- * Additional overloads are provided (see {@link #copyFromArray(double[], int, int, MemorySegment, long)}),\n+ * Additional overloads are provided (see {@link #copy(double[], int, MemorySegment, long, int)}),\n@@ -53,1 +53,1 @@\n- * Finally, attempting to copy to\/from a segment (of {@linkplain MemorySegment#address() base address} {@code B} and\n+ * Moreover, attempting to copy to\/from a segment (of {@linkplain MemorySegment#address() base address} {@code B} and\n@@ -56,1 +56,3 @@\n- * (of length {@code L}) at indices that are {@code < 0}, or {@code >= L} causes an {@link IndexOutOfBoundsException} to be thrown.<\/p>\n+ * (of length {@code L}) at indices that are {@code < 0}, or {@code >= L} causes an {@link IndexOutOfBoundsException} to be thrown.\n+ * Finally, attempting to copy data into a see {@linkplain MemorySegment#isReadOnly() read-only} always causes an\n+ * {@link UnsupportedOperationException} to be thrown.\n@@ -78,2 +80,1 @@\n-     * @param srcIndexBytes the starting index of the source byte array.\n-     * @param srcCopyLengthBytes the number of byte elements to be copied.\n+     * @param srcIndex the starting index of the source byte array.\n@@ -81,1 +82,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of byte elements to be copied.\n@@ -84,3 +86,2 @@\n-    public static void copyFromArray(\n-            byte[] srcArray, int srcIndexBytes, int srcCopyLengthBytes,\n-            MemorySegment dstSegment, long dstOffsetBytes) {\n+    public static void copy(\n+            byte[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n@@ -89,1 +90,1 @@\n-        Objects.checkFromIndexSize(srcIndexBytes, srcCopyLengthBytes, srcArray.length);\n+        Objects.checkFromIndexSize(srcIndex, elementCount, srcArray.length);\n@@ -91,1 +92,1 @@\n-        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthBytes, false);\n+        destImpl.checkAccess(dstOffset, elementCount, false);\n@@ -93,2 +94,2 @@\n-                srcArray, BYTE_BASE + srcIndexBytes,\n-                destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthBytes);\n+                srcArray, BYTE_BASE + srcIndex,\n+                destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount);\n@@ -101,1 +102,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -103,2 +104,2 @@\n-     * @param dstIndexBytes the starting index of the destination byte array.\n-     * @param dstCopyLengthBytes the number of byte elements to be copied.\n+     * @param dstIndex the starting index of the destination byte array.\n+     * @param elementCount the number of byte elements to be copied.\n@@ -107,3 +108,3 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            byte[] dstArray, int dstIndexBytes, int dstCopyLengthBytes) {\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            byte[] dstArray, int dstIndex, int elementCount) {\n@@ -113,2 +114,2 @@\n-        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthBytes, true);\n-        Objects.checkFromIndexSize(dstIndexBytes, dstCopyLengthBytes, dstArray.length);\n+        srcImpl.checkAccess(srcOffset, elementCount, true);\n+        Objects.checkFromIndexSize(dstIndex, elementCount, dstArray.length);\n@@ -116,2 +117,2 @@\n-                srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                dstArray, BYTE_BASE + dstIndexBytes, dstCopyLengthBytes);\n+                srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                dstArray, BYTE_BASE + dstIndex, elementCount);\n@@ -125,2 +126,1 @@\n-     * @param srcIndexChars the starting index of the source char array.\n-     * @param srcCopyLengthChars the number of char elements to be copied.\n+     * @param srcIndex the starting index of the source char array.\n@@ -128,1 +128,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of char elements to be copied.\n@@ -131,4 +132,3 @@\n-    public static void copyFromArray(\n-            char[] srcArray, int srcIndexChars, int srcCopyLengthChars,\n-            MemorySegment dstSegment, long dstOffsetBytes) {\n-        copyFromArray(srcArray, srcIndexChars, srcCopyLengthChars, dstSegment,dstOffsetBytes, ByteOrder.nativeOrder());\n+    public static void copy(\n+            char[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -141,2 +141,1 @@\n-     * @param srcIndexChars the starting index of the source char array.\n-     * @param srcCopyLengthChars the number of char elements to be copied.\n+     * @param srcIndex the starting index of the source char array.\n@@ -144,1 +143,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of char elements to be copied.\n@@ -146,1 +146,0 @@\n-     * different from the native order, a byte swap operation will be performed on each array element.\n@@ -149,4 +148,2 @@\n-    public static void copyFromArray(\n-            char[] srcArray, int srcIndexChars, int srcCopyLengthChars,\n-            MemorySegment dstSegment, long dstOffsetBytes,\n-            ByteOrder order) {\n+    public static void copy(\n+            char[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount, ByteOrder order) {\n@@ -156,1 +153,1 @@\n-        Objects.checkFromIndexSize(srcIndexChars, srcCopyLengthChars, srcArray.length);\n+        Objects.checkFromIndexSize(srcIndex, elementCount, srcArray.length);\n@@ -158,1 +155,1 @@\n-        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthChars << 1, false);\n+        destImpl.checkAccess(dstOffset, elementCount << 1, false);\n@@ -161,2 +158,2 @@\n-                    srcArray, CHAR_BASE + (srcIndexChars << 1),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthChars << 1);\n+                    srcArray, CHAR_BASE + (srcIndex << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 1);\n@@ -165,2 +162,2 @@\n-                    srcArray, CHAR_BASE + (srcIndexChars << 1),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthChars << 1, 2);\n+                    srcArray, CHAR_BASE + (srcIndex << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 1, 2);\n@@ -174,1 +171,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -176,2 +173,2 @@\n-     * @param dstIndexChars the starting index of the destination char array.\n-     * @param dstCopyLengthChars the number of char elements to be copied.\n+     * @param dstIndex the starting index of the destination char array.\n+     * @param elementCount the number of char elements to be copied.\n@@ -180,4 +177,4 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            char[] dstArray, int dstIndexChars, int dstCopyLengthChars) {\n-        copyToArray(srcSegment, srcOffsetBytes, dstArray, dstIndexChars, dstCopyLengthChars, ByteOrder.nativeOrder());\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            char[] dstArray, int dstIndex, int elementCount) {\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -190,1 +187,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -192,2 +189,2 @@\n-     * @param dstIndexChars the starting index of the destination char array.\n-     * @param dstCopyLengthChars the number of char elements to be copied.\n+     * @param dstIndex the starting index of the destination char array.\n+     * @param elementCount the number of char elements to be copied.\n@@ -195,1 +192,0 @@\n-     * different from the native order, a byte swap operation will be performed on each array element.\n@@ -198,3 +194,3 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            char[] dstArray, int dstIndexChars, int dstCopyLengthChars,\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            char[] dstArray, int dstIndex, int elementCount,\n@@ -206,2 +202,2 @@\n-        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthChars << 1, true);\n-        Objects.checkFromIndexSize(dstIndexChars, dstCopyLengthChars, dstArray.length);\n+        srcImpl.checkAccess(srcOffset, elementCount << 1, true);\n+        Objects.checkFromIndexSize(dstIndex, elementCount, dstArray.length);\n@@ -210,2 +206,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, CHAR_BASE + (dstIndexChars << 1), dstCopyLengthChars << 1);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, CHAR_BASE + (dstIndex << 1), elementCount << 1);\n@@ -214,2 +210,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, CHAR_BASE + (dstIndexChars << 1), dstCopyLengthChars << 1, 2);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, CHAR_BASE + (dstIndex << 1), elementCount << 1, 2);\n@@ -224,2 +220,1 @@\n-     * @param srcIndexShorts the starting index of the source short array.\n-     * @param srcCopyLengthShorts the number of short elements to be copied.\n+     * @param srcIndex the starting index of the source short array.\n@@ -227,1 +222,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of short elements to be copied.\n@@ -230,4 +226,3 @@\n-    public static void copyFromArray(\n-            short[] srcArray, int srcIndexShorts, int srcCopyLengthShorts,\n-            MemorySegment dstSegment, long dstOffsetBytes) {\n-        copyFromArray(srcArray, srcIndexShorts, srcCopyLengthShorts, dstSegment,dstOffsetBytes, ByteOrder.nativeOrder());\n+    public static void copy(\n+            short[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -240,2 +235,1 @@\n-     * @param srcIndexShorts the starting index of the source short array.\n-     * @param srcCopyLengthShorts the number of short elements to be copied.\n+     * @param srcIndex the starting index of the source short array.\n@@ -243,1 +237,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of short elements to be copied.\n@@ -245,1 +240,0 @@\n-     * different from the native order, a byte swap operation will be performed on each array element.\n@@ -248,3 +242,2 @@\n-    public static void copyFromArray(\n-            short[] srcArray, int srcIndexShorts, int srcCopyLengthShorts,\n-            MemorySegment dstSegment, long dstOffsetBytes,\n+    public static void copy(\n+            short[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -255,1 +248,1 @@\n-        Objects.checkFromIndexSize(srcIndexShorts, srcCopyLengthShorts, srcArray.length);\n+        Objects.checkFromIndexSize(srcIndex, elementCount, srcArray.length);\n@@ -257,1 +250,1 @@\n-        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthShorts << 1, false);\n+        destImpl.checkAccess(dstOffset, elementCount << 1, false);\n@@ -260,2 +253,2 @@\n-                    srcArray, SHORT_BASE + (srcIndexShorts << 1),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthShorts << 1);\n+                    srcArray, SHORT_BASE + (srcIndex << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 1);\n@@ -264,2 +257,2 @@\n-                    srcArray, SHORT_BASE + (srcIndexShorts << 1),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthShorts << 1, 2);\n+                    srcArray, SHORT_BASE + (srcIndex << 1),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 1, 2);\n@@ -273,1 +266,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -275,2 +268,2 @@\n-     * @param dstIndexShorts the starting index of the destination short array.\n-     * @param dstCopyLengthShorts the number of short elements to be copied.\n+     * @param dstIndex the starting index of the destination short array.\n+     * @param elementCount the number of short elements to be copied.\n@@ -279,4 +272,4 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            short[] dstArray, int dstIndexShorts, int dstCopyLengthShorts) {\n-        copyToArray(srcSegment, srcOffsetBytes, dstArray, dstIndexShorts, dstCopyLengthShorts, ByteOrder.nativeOrder());\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            short[] dstArray, int dstIndex, int elementCount) {\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -289,1 +282,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -291,2 +284,2 @@\n-     * @param dstIndexShorts the starting index of the destination short array.\n-     * @param dstCopyLengthShorts the number of short elements to be copied.\n+     * @param dstIndex the starting index of the destination short array.\n+     * @param elementCount the number of short elements to be copied.\n@@ -297,3 +290,3 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            short[] dstArray, int dstIndexShorts, int dstCopyLengthShorts,\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            short[] dstArray, int dstIndex, int elementCount,\n@@ -305,2 +298,2 @@\n-        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthShorts << 1, true);\n-        Objects.checkFromIndexSize(dstIndexShorts, dstCopyLengthShorts, dstArray.length);\n+        srcImpl.checkAccess(srcOffset, elementCount << 1, true);\n+        Objects.checkFromIndexSize(dstIndex, elementCount, dstArray.length);\n@@ -309,2 +302,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, SHORT_BASE + (dstIndexShorts << 1), dstCopyLengthShorts << 1);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, SHORT_BASE + (dstIndex << 1), elementCount << 1);\n@@ -313,2 +306,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, SHORT_BASE + (dstIndexShorts << 1), dstCopyLengthShorts << 1, 2);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, SHORT_BASE + (dstIndex << 1), elementCount << 1, 2);\n@@ -323,2 +316,1 @@\n-     * @param srcIndexInts the starting index of the source int array.\n-     * @param srcCopyLengthInts the number of int elements to be copied.\n+     * @param srcIndex the starting index of the source int array.\n@@ -326,1 +318,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of int elements to be copied.\n@@ -329,4 +322,3 @@\n-    public static void copyFromArray(\n-            int[] srcArray, int srcIndexInts, int srcCopyLengthInts,\n-            MemorySegment dstSegment, long dstOffsetBytes) {\n-        copyFromArray(srcArray, srcIndexInts, srcCopyLengthInts, dstSegment,dstOffsetBytes, ByteOrder.nativeOrder());\n+    public static void copy(\n+            int[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -339,2 +331,1 @@\n-     * @param srcIndexInts the starting index of the source int array.\n-     * @param srcCopyLengthInts the number of int elements to be copied.\n+     * @param srcIndex the starting index of the source int array.\n@@ -342,1 +333,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of int elements to be copied.\n@@ -344,1 +336,0 @@\n-     * different from the native order, a byte swap operation will be performed on each array element.\n@@ -347,3 +338,2 @@\n-    public static void copyFromArray(\n-            int[] srcArray, int srcIndexInts, int srcCopyLengthInts,\n-            MemorySegment dstSegment, long dstOffsetBytes,\n+    public static void copy(\n+            int[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -354,1 +344,1 @@\n-        Objects.checkFromIndexSize(srcIndexInts, srcCopyLengthInts, srcArray.length);\n+        Objects.checkFromIndexSize(srcIndex, elementCount, srcArray.length);\n@@ -356,1 +346,1 @@\n-        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthInts << 2, false);\n+        destImpl.checkAccess(dstOffset, elementCount << 2, false);\n@@ -359,2 +349,2 @@\n-                    srcArray, INT_BASE + (srcIndexInts << 2),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthInts << 2);\n+                    srcArray, INT_BASE + (srcIndex << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 2);\n@@ -363,2 +353,2 @@\n-                    srcArray, INT_BASE + (srcIndexInts << 2),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthInts << 2, 4);\n+                    srcArray, INT_BASE + (srcIndex << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 2, 4);\n@@ -372,1 +362,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -374,2 +364,2 @@\n-     * @param dstIndexInts the starting index of the destination int array.\n-     * @param dstCopyLengthInts the number of int elements to be copied.\n+     * @param dstIndex the starting index of the destination int array.\n+     * @param elementCount the number of int elements to be copied.\n@@ -378,4 +368,4 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            int[] dstArray, int dstIndexInts, int dstCopyLengthInts) {\n-        copyToArray(srcSegment, srcOffsetBytes, dstArray, dstIndexInts, dstCopyLengthInts, ByteOrder.nativeOrder());\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            int[] dstArray, int dstIndex, int elementCount) {\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -388,1 +378,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -390,2 +380,2 @@\n-     * @param dstIndexInts the starting index of the destination int array.\n-     * @param dstCopyLengthInts the number of int elements to be copied.\n+     * @param dstIndex the starting index of the destination int array.\n+     * @param elementCount the number of int elements to be copied.\n@@ -396,3 +386,3 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            int[] dstArray, int dstIndexInts, int dstCopyLengthInts,\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            int[] dstArray, int dstIndex, int elementCount,\n@@ -404,2 +394,2 @@\n-        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthInts << 2, true);\n-        Objects.checkFromIndexSize(dstIndexInts, dstCopyLengthInts, dstArray.length);\n+        srcImpl.checkAccess(srcOffset, elementCount << 2, true);\n+        Objects.checkFromIndexSize(dstIndex, elementCount, dstArray.length);\n@@ -408,2 +398,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, INT_BASE + (dstIndexInts << 2), dstCopyLengthInts << 2);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, INT_BASE + (dstIndex << 2), elementCount << 2);\n@@ -412,2 +402,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, INT_BASE + (dstIndexInts << 2), dstCopyLengthInts << 2, 4);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, INT_BASE + (dstIndex << 2), elementCount << 2, 4);\n@@ -422,2 +412,1 @@\n-     * @param srcIndexFloats the starting index of the source float array.\n-     * @param srcCopyLengthFloats the number of float elements to be copied.\n+     * @param srcIndex the starting index of the source float array.\n@@ -425,1 +414,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of float elements to be copied.\n@@ -428,4 +418,3 @@\n-    public static void copyFromArray(\n-            float[] srcArray, int srcIndexFloats, int srcCopyLengthFloats,\n-            MemorySegment dstSegment, long dstOffsetBytes) {\n-        copyFromArray(srcArray, srcIndexFloats, srcCopyLengthFloats, dstSegment,dstOffsetBytes, ByteOrder.nativeOrder());\n+    public static void copy(\n+            float[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -438,2 +427,1 @@\n-     * @param srcIndexFloats the starting index of the source float array.\n-     * @param srcCopyLengthFloats the number of float elements to be copied.\n+     * @param srcIndex the starting index of the source float array.\n@@ -441,1 +429,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of float elements to be copied.\n@@ -443,1 +432,0 @@\n-     * different from the native order, a byte swap operation will be performed on each array element.\n@@ -446,3 +434,2 @@\n-    public static void copyFromArray(\n-            float[] srcArray, int srcIndexFloats, int srcCopyLengthFloats,\n-            MemorySegment dstSegment, long dstOffsetBytes,\n+    public static void copy(\n+            float[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -453,1 +440,1 @@\n-        Objects.checkFromIndexSize(srcIndexFloats, srcCopyLengthFloats, srcArray.length);\n+        Objects.checkFromIndexSize(srcIndex, elementCount, srcArray.length);\n@@ -455,1 +442,1 @@\n-        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthFloats << 2, false);\n+        destImpl.checkAccess(dstOffset, elementCount << 2, false);\n@@ -458,2 +445,2 @@\n-                    srcArray, FLOAT_BASE + (srcIndexFloats << 2),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthFloats << 2);\n+                    srcArray, FLOAT_BASE + (srcIndex << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 2);\n@@ -462,2 +449,2 @@\n-                    srcArray, FLOAT_BASE + (srcIndexFloats << 2),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthFloats << 2, 4);\n+                    srcArray, FLOAT_BASE + (srcIndex << 2),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 2, 4);\n@@ -471,1 +458,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -473,2 +460,2 @@\n-     * @param dstIndexFloats the starting index of the destination float array.\n-     * @param dstCopyLengthFloats the number of float elements to be copied.\n+     * @param dstIndex the starting index of the destination float array.\n+     * @param elementCount the number of float elements to be copied.\n@@ -477,4 +464,4 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            float[] dstArray, int dstIndexFloats, int dstCopyLengthFloats) {\n-        copyToArray(srcSegment, srcOffsetBytes, dstArray, dstIndexFloats, dstCopyLengthFloats, ByteOrder.nativeOrder());\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            float[] dstArray, int dstIndex, int elementCount) {\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -487,1 +474,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -489,2 +476,2 @@\n-     * @param dstIndexFloats the starting index of the destination float array.\n-     * @param dstCopyLengthFloats the number of float elements to be copied.\n+     * @param dstIndex the starting index of the destination float array.\n+     * @param elementCount the number of float elements to be copied.\n@@ -495,3 +482,3 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            float[] dstArray, int dstIndexFloats, int dstCopyLengthFloats,\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            float[] dstArray, int dstIndex, int elementCount,\n@@ -503,2 +490,2 @@\n-        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthFloats << 2, true);\n-        Objects.checkFromIndexSize(dstIndexFloats, dstCopyLengthFloats, dstArray.length);\n+        srcImpl.checkAccess(srcOffset, elementCount << 2, true);\n+        Objects.checkFromIndexSize(dstIndex, elementCount, dstArray.length);\n@@ -507,2 +494,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, FLOAT_BASE + (dstIndexFloats << 2), dstCopyLengthFloats << 2);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, FLOAT_BASE + (dstIndex << 2), elementCount << 2);\n@@ -511,2 +498,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, FLOAT_BASE + (dstIndexFloats << 2), dstCopyLengthFloats << 2, 4);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, FLOAT_BASE + (dstIndex << 2), elementCount << 2, 4);\n@@ -521,2 +508,1 @@\n-     * @param srcIndexLongs the starting index of the source long array.\n-     * @param srcCopyLengthLongs the number of long elements to be copied.\n+     * @param srcIndex the starting index of the source long array.\n@@ -524,1 +510,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of long elements to be copied.\n@@ -527,4 +514,3 @@\n-    public static void copyFromArray(\n-            long[] srcArray, int srcIndexLongs, int srcCopyLengthLongs,\n-            MemorySegment dstSegment, long dstOffsetBytes) {\n-        copyFromArray(srcArray, srcIndexLongs, srcCopyLengthLongs, dstSegment,dstOffsetBytes, ByteOrder.nativeOrder());\n+    public static void copy(\n+            long[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -537,2 +523,1 @@\n-     * @param srcIndexLongs the starting index of the source long array.\n-     * @param srcCopyLengthLongs the number of long elements to be copied.\n+     * @param srcIndex the starting index of the source long array.\n@@ -540,1 +525,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of long elements to be copied.\n@@ -542,1 +528,0 @@\n-     * different from the native order, a byte swap operation will be performed on each array element.\n@@ -545,3 +530,2 @@\n-    public static void copyFromArray(\n-            long[] srcArray, int srcIndexLongs, int srcCopyLengthLongs,\n-            MemorySegment dstSegment, long dstOffsetBytes,\n+    public static void copy(\n+            long[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -552,1 +536,1 @@\n-        Objects.checkFromIndexSize(srcIndexLongs, srcCopyLengthLongs, srcArray.length);\n+        Objects.checkFromIndexSize(srcIndex, elementCount, srcArray.length);\n@@ -554,1 +538,1 @@\n-        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthLongs << 3, false);\n+        destImpl.checkAccess(dstOffset, elementCount << 3, false);\n@@ -557,2 +541,2 @@\n-                    srcArray, LONG_BASE + (srcIndexLongs << 3),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthLongs << 3);\n+                    srcArray, LONG_BASE + (srcIndex << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 3);\n@@ -561,2 +545,2 @@\n-                    srcArray, LONG_BASE + (srcIndexLongs << 3),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthLongs << 3, 8);\n+                    srcArray, LONG_BASE + (srcIndex << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 3, 8);\n@@ -570,1 +554,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -572,2 +556,2 @@\n-     * @param dstIndexLongs the starting index of the destination long array.\n-     * @param dstCopyLengthLongs the number of long elements to be copied.\n+     * @param dstIndex the starting index of the destination long array.\n+     * @param elementCount the number of long elements to be copied.\n@@ -576,4 +560,4 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            long[] dstArray, int dstIndexLongs, int dstCopyLengthLongs) {\n-        copyToArray(srcSegment, srcOffsetBytes, dstArray, dstIndexLongs, dstCopyLengthLongs, ByteOrder.nativeOrder());\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            long[] dstArray, int dstIndex, int elementCount) {\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -586,1 +570,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -588,2 +572,2 @@\n-     * @param dstIndexLongs the starting index of the destination long array.\n-     * @param dstCopyLengthLongs the number of long elements to be copied.\n+     * @param dstIndex the starting index of the destination long array.\n+     * @param elementCount the number of long elements to be copied.\n@@ -594,3 +578,3 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            long[] dstArray, int dstIndexLongs, int dstCopyLengthLongs,\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            long[] dstArray, int dstIndex, int elementCount,\n@@ -602,2 +586,2 @@\n-        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthLongs << 3, true);\n-        Objects.checkFromIndexSize(dstIndexLongs, dstCopyLengthLongs, dstArray.length);\n+        srcImpl.checkAccess(srcOffset, elementCount << 3, true);\n+        Objects.checkFromIndexSize(dstIndex, elementCount, dstArray.length);\n@@ -606,2 +590,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, LONG_BASE + (dstIndexLongs << 3), dstCopyLengthLongs << 3);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, LONG_BASE + (dstIndex << 3), elementCount << 3);\n@@ -610,2 +594,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, LONG_BASE + (dstIndexLongs << 3), dstCopyLengthLongs << 3, 8);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, LONG_BASE + (dstIndex << 3), elementCount << 3, 8);\n@@ -620,2 +604,1 @@\n-     * @param srcIndexDoubles the starting index of the source double array.\n-     * @param srcCopyLengthDoubles the number of double elements to be copied.\n+     * @param srcIndex the starting index of the source double array.\n@@ -623,1 +606,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of double elements to be copied.\n@@ -626,4 +610,3 @@\n-    public static void copyFromArray(\n-            double[] srcArray, int srcIndexDoubles, int srcCopyLengthDoubles,\n-            MemorySegment dstSegment, long dstOffsetBytes) {\n-        copyFromArray(srcArray, srcIndexDoubles, srcCopyLengthDoubles, dstSegment,dstOffsetBytes, ByteOrder.nativeOrder());\n+    public static void copy(\n+            double[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -636,2 +619,1 @@\n-     * @param srcIndexDoubles the starting index of the source double array.\n-     * @param srcCopyLengthDoubles the number of double elements to be copied.\n+     * @param srcIndex the starting index of the source double array.\n@@ -639,1 +621,2 @@\n-     * @param dstOffsetBytes the starting offset, in bytes, of the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of double elements to be copied.\n@@ -641,1 +624,0 @@\n-     * different from the native order, a byte swap operation will be performed on each array element.\n@@ -644,3 +626,2 @@\n-    public static void copyFromArray(\n-            double[] srcArray, int srcIndexDoubles, int srcCopyLengthDoubles,\n-            MemorySegment dstSegment, long dstOffsetBytes,\n+    public static void copy(\n+            double[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -651,1 +632,1 @@\n-        Objects.checkFromIndexSize(srcIndexDoubles, srcCopyLengthDoubles, srcArray.length);\n+        Objects.checkFromIndexSize(srcIndex, elementCount, srcArray.length);\n@@ -653,1 +634,1 @@\n-        destImpl.checkAccess(dstOffsetBytes, srcCopyLengthDoubles << 3, false);\n+        destImpl.checkAccess(dstOffset, elementCount << 3, false);\n@@ -656,2 +637,2 @@\n-                    srcArray, DOUBLE_BASE + (srcIndexDoubles << 3),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthDoubles << 3);\n+                    srcArray, DOUBLE_BASE + (srcIndex << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 3);\n@@ -660,2 +641,2 @@\n-                    srcArray, DOUBLE_BASE + (srcIndexDoubles << 3),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffsetBytes, srcCopyLengthDoubles << 3, 8);\n+                    srcArray, DOUBLE_BASE + (srcIndex << 3),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount << 3, 8);\n@@ -669,1 +650,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -671,2 +652,2 @@\n-     * @param dstIndexDoubles the starting index of the destination double array.\n-     * @param dstCopyLengthDoubles the number of double elements to be copied.\n+     * @param dstIndex the starting index of the destination double array.\n+     * @param elementCount the number of double elements to be copied.\n@@ -675,4 +656,4 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            double[] dstArray, int dstIndexDoubles, int dstCopyLengthDoubles) {\n-        copyToArray(srcSegment, srcOffsetBytes, dstArray, dstIndexDoubles, dstCopyLengthDoubles, ByteOrder.nativeOrder());\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            double[] dstArray, int dstIndex, int elementCount) {\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -685,1 +666,1 @@\n-     * @param srcOffsetBytes the starting offset, in bytes, of the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n@@ -687,2 +668,2 @@\n-     * @param dstIndexDoubles the starting index of the destination double array.\n-     * @param dstCopyLengthDoubles the number of double elements to be copied.\n+     * @param dstIndex the starting index of the destination double array.\n+     * @param elementCount the number of double elements to be copied.\n@@ -693,3 +674,3 @@\n-    public static void copyToArray(\n-            MemorySegment srcSegment, long srcOffsetBytes,\n-            double[] dstArray, int dstIndexDoubles, int dstCopyLengthDoubles,\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            double[] dstArray, int dstIndex, int elementCount,\n@@ -701,2 +682,2 @@\n-        srcImpl.checkAccess(srcOffsetBytes, dstCopyLengthDoubles << 3, true);\n-        Objects.checkFromIndexSize(dstIndexDoubles, dstCopyLengthDoubles, dstArray.length);\n+        srcImpl.checkAccess(srcOffset, elementCount << 3, true);\n+        Objects.checkFromIndexSize(dstIndex, elementCount, dstArray.length);\n@@ -705,2 +686,2 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, DOUBLE_BASE + (dstIndexDoubles << 3), dstCopyLengthDoubles << 3);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, DOUBLE_BASE + (dstIndex << 3), elementCount << 3);\n@@ -709,2 +690,89 @@\n-                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffsetBytes,\n-                    dstArray, DOUBLE_BASE + (dstIndexDoubles << 3), dstCopyLengthDoubles << 3, 8);\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstArray, DOUBLE_BASE + (dstIndex << 3), elementCount << 3, 8);\n+        }\n+    }\n+\n+    \/**\n+     * Copies a number of bytes from a source segment to a destination segment.\n+     * starting at a given segment offset (expressed in bytes), and a given array index, using the given byte order.\n+     * <p>\n+     * The result of a bulk copy is unspecified if, in the uncommon case, the source segment and this segment\n+     * do not overlap, but refer to overlapping regions of the same backing storage using different addresses.\n+     * For example, this may occur if the same file is {@linkplain MemorySegment#mapFile mapped} to two segments.\n+     * @param srcSegment the source segment.\n+     * @param dstSegment  the destination segment.\n+     * @param bytes the number of bytes to be copied.\n+     *\/\n+    @ForceInline\n+    public static void copy(MemorySegment srcSegment, MemorySegment dstSegment, long bytes) {\n+        copy(srcSegment, 0, dstSegment, 0, bytes);\n+    }\n+\n+    \/**\n+     * Copies a number of bytes from a source segment to a destination segment.\n+     * starting at a given source and destination offsets (expressed in bytes).\n+     * <p>\n+     * The result of a bulk copy is unspecified if, in the uncommon case, the source segment and this segment\n+     * do not overlap, but refer to overlapping regions of the same backing storage using different addresses.\n+     * For example, this may occur if the same file is {@linkplain MemorySegment#mapFile mapped} to two segments.\n+     * @param srcSegment the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param bytes the number of bytes to be copied.\n+     *\/\n+    @ForceInline\n+    public static void copy(MemorySegment srcSegment, long srcOffset, MemorySegment dstSegment, long dstOffset, long bytes) {\n+        copy(srcSegment, MemoryLayouts.JAVA_BYTE, srcOffset, dstSegment, MemoryLayouts.JAVA_BYTE, dstOffset, bytes);\n+    }\n+\n+    \/**\n+     * Copies a number of elements (whose size is specified by the corresponding layout parameters) from a source segment\n+     * to a destination segment, starting at a given source and destination offsets (expressed in bytes).\n+     * <p>\n+     * The result of a bulk copy is unspecified if, in the uncommon case, the source segment and this segment\n+     * do not overlap, but refer to overlapping regions of the same backing storage using different addresses.\n+     * For example, this may occur if the same file is {@linkplain MemorySegment#mapFile mapped} to two segments.\n+     * @param srcSegment the source segment.\n+     * @param srcElementLayout the element layout associated with the source segment.\n+     * @param srcOffset the starting offset, in bytes, of the source segment.\n+     * @param dstSegment the destination segment.\n+     * @param dstElementLayout the element layout associated with the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n+     * @param elementCount the number of elements to be copied.\n+     * @throws IllegalArgumentException if the element layouts have different sizes, if the source offset is incompatible\n+     * with the alignment constraints in the source element layout, or if the destination offset is incompatible with the\n+     * alignment constraints in the destination element layout.\n+     *\/\n+    @ForceInline\n+    public static void copy(MemorySegment srcSegment, ValueLayout srcElementLayout, long srcOffset, MemorySegment dstSegment,\n+                                        ValueLayout dstElementLayout, long dstOffset, long elementCount) {\n+        Objects.requireNonNull(srcSegment);\n+        Objects.requireNonNull(srcElementLayout);\n+        Objects.requireNonNull(dstSegment);\n+        Objects.requireNonNull(dstElementLayout);\n+        AbstractMemorySegmentImpl srcImpl = (AbstractMemorySegmentImpl)srcSegment;\n+        AbstractMemorySegmentImpl dstImpl = (AbstractMemorySegmentImpl)dstSegment;\n+        if (srcElementLayout.byteSize() != dstElementLayout.byteSize()) {\n+            throw new IllegalArgumentException(\"Source and destination layouts must have same sizes\");\n+        }\n+        if (srcOffset % srcElementLayout.byteAlignment() != 0) {\n+            throw new IllegalArgumentException(\"Source segment incompatible with alignment constraints\");\n+        }\n+        if (dstOffset % dstElementLayout.byteAlignment() != 0) {\n+            throw new IllegalArgumentException(\"Target segment incompatible with alignment constraints\");\n+        }\n+        long size = elementCount * srcElementLayout.byteSize();\n+        if (size % srcElementLayout.byteSize() != 0) {\n+            throw new IllegalArgumentException(\"Segment size is not a multiple of layout size\");\n+        }\n+        srcImpl.checkAccess(srcOffset, size, true);\n+        dstImpl.checkAccess(dstOffset, size, false);\n+        if (srcElementLayout.byteSize() == 1 || srcElementLayout.order() == dstElementLayout.order()) {\n+            scopedMemoryAccess.copyMemory(srcImpl.scope(), dstImpl.scope(),\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstImpl.unsafeGetBase(), dstImpl.unsafeGetOffset() + dstOffset, size);\n+        } else {\n+            scopedMemoryAccess.copySwapMemory(srcImpl.scope(), dstImpl.scope(),\n+                    srcImpl.unsafeGetBase(), srcImpl.unsafeGetOffset() + srcOffset,\n+                    dstImpl.unsafeGetBase(), dstImpl.unsafeGetOffset() + dstOffset, size, srcElementLayout.byteSize());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryCopy.java","additions":328,"deletions":260,"binary":false,"changes":588,"status":"modified"},{"patch":"@@ -377,40 +377,0 @@\n-    \/**\n-     * Performs an element-wise bulk copy from given source segment to this segment. More specifically, the bytes at\n-     * offset {@code 0} through {@code src.byteSize() - 1} in the source segment are copied into this segment\n-     * at offset {@code 0} through {@code src.byteSize() - 1}.\n-     * <p>\n-     * The copy occurs in an element-wise fashion: the source bytes are interpreted as a sequence of elements\n-     * whose layout is {@code srcElementLayout}, whereas the bytes in this segment are interpreted as a sequence of\n-     * elements whose layout is {@code dstElementLayout}. Both element layouts must have same size {@code S} and\n-     * alignment {@code A}, and the size of the source segment must be a multiple of {@code S} for the copy operation\n-     * to be correctly specified. If the byte order of the two element layouts differ, the bytes corresponding to each\n-     * element to be copied are swapped accordingly during the copy operation.\n-     * <p>\n-     * If the source segment overlaps with this segment, then the copying is performed as if the bytes at\n-     * offset {@code 0} through {@code src.byteSize() - 1} in the source segment were first copied into a\n-     * temporary segment with size {@code bytes}, and then the contents of the temporary segment were copied into\n-     * this segment at offset {@code 0} through {@code src.byteSize() - 1}.\n-     * <p>\n-     * The result of a bulk copy is unspecified if, in the uncommon case, the source segment and this segment\n-     * do not overlap, but refer to overlapping regions of the same backing storage using different addresses.\n-     * For example, this may occur if the same file is {@linkplain MemorySegment#mapFile mapped} to two segments.\n-     *\n-     * @implSpec\n-     * If {@code srcElementLayout.byteSize() == 1}, or if {@code srcElementLayout.order() == dstElementLayout.order()}, calling\n-     * this method must be equivalent to calling {@link #copyFrom(MemorySegment)} with the same source segment.\n-     *\n-     * @param dstElementLayout the element layout associated with this segment.\n-     * @param src the source segment.\n-     * @param srcElementLayout the element layout associated with the source segment.\n-     * @throws IndexOutOfBoundsException if {@code src.byteSize() > this.byteSize()}.\n-     * @throws IllegalArgumentException if the element layouts have different sizes, if the source segment size is not\n-     * a multiple of the source element layout size, if the source segment is incompatible with the alignment constraints\n-     * in the source element layout, or if this segment is incompatible with the alignment constraints\n-     * in the destination element layout.\n-     * @throws IllegalStateException if either the scope associated with the source segment or the scope associated\n-     * with this segment have been already closed, or if access occurs from a thread other than the thread owning either\n-     * scopes.\n-     * @throws UnsupportedOperationException if this segment is read-only (see {@link #isReadOnly()}).\n-     *\/\n-    void copyFrom(ValueLayout dstElementLayout, MemorySegment src, ValueLayout srcElementLayout);\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -316,2 +316,3 @@\n-        MemorySegment addr = allocate(MemoryLayout.sequenceLayout(Array.getLength(array), elementLayout));\n-        addr.copyFrom(elementLayout, heapSegmentFactory.apply(array), elementLayout.withOrder(ByteOrder.nativeOrder()));\n+        int size = Array.getLength(array);\n+        MemorySegment addr = allocate(MemoryLayout.sequenceLayout(size, elementLayout));\n+        MemoryCopy.copy(heapSegmentFactory.apply(array), elementLayout.withOrder(ByteOrder.nativeOrder()), 0, addr, elementLayout, 0, size);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -144,33 +144,1 @@\n-        AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl)Objects.requireNonNull(src);\n-        long size = that.byteSize();\n-        checkAccess(0, size, false);\n-        that.checkAccess(0, size, true);\n-        SCOPED_MEMORY_ACCESS.copyMemory(scope, that.scope,\n-                that.base(), that.min(),\n-                base(), min(), size);\n-    }\n-\n-    public void copyFrom(ValueLayout dstElementLayout, MemorySegment src, ValueLayout srcElementLayout) {\n-        if (srcElementLayout.byteSize() != dstElementLayout.byteSize()) {\n-            throw new IllegalArgumentException(\"Source and destination layouts must have same sizes\");\n-        }\n-        if (((AbstractMemorySegmentImpl)src).min() % srcElementLayout.byteAlignment() != 0) {\n-            throw new IllegalArgumentException(\"Source segment incompatible with alignment constraints\");\n-        }\n-        if (min() % dstElementLayout.byteAlignment() != 0) {\n-            throw new IllegalArgumentException(\"Target segment incompatible with alignment constraints\");\n-        }\n-        long size = src.byteSize();\n-        if (size % srcElementLayout.byteSize() != 0) {\n-            throw new IllegalArgumentException(\"Segment size is not a multiple of layout size\");\n-        }\n-        if (srcElementLayout.byteSize() == 1 || srcElementLayout.order() == dstElementLayout.order()) {\n-            copyFrom(src);\n-        } else {\n-            AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl) src;\n-            checkAccess(0, size, false);\n-            that.checkAccess(0, size, true);\n-            SCOPED_MEMORY_ACCESS.copySwapMemory(scope, that.scope,\n-                    that.base(), that.min(),\n-                    base(), min(), size, srcElementLayout.byteSize());\n-        }\n+        MemoryCopy.copy(src, this, src.byteSize());\n@@ -347,1 +315,1 @@\n-        arrSegment.copyFrom(this);\n+        MemoryCopy.copy(this, arrSegment, byteSize());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":2,"deletions":34,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.foreign.MemoryCopy;\n@@ -744,1 +745,1 @@\n-            copy.copyFrom(operand.asSlice(0, size));\n+            MemoryCopy.copy(operand, copy, size);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.incubator.foreign.MemoryCopy;\n@@ -292,2 +293,1 @@\n-        MemorySegment.ofArray(bytes)\n-                .copyFrom(segment.asSlice(start, len));\n+        MemoryCopy.copy(segment, start, MemorySegment.ofArray(bytes), 0, len);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-                        slice.copyFrom(gpRegsArea.asSlice(currentGPOffset(), copy));\n+                        MemoryCopy.copy(gpRegsArea, currentGPOffset(), slice, 0, copy);\n@@ -300,1 +300,1 @@\n-                        slice.copyFrom(fpRegsArea.asSlice(currentFPOffset(), copy));\n+                        MemoryCopy.copy(fpRegsArea, currentFPOffset(), slice, 0, copy);\n@@ -462,1 +462,1 @@\n-                            gpRegs.asSlice(currentGPOffset, copy).copyFrom(slice);\n+                            MemoryCopy.copy(slice, 0, gpRegs, currentGPOffset, copy);\n@@ -477,1 +477,1 @@\n-                            fpRegs.asSlice(currentFPOffset, copy).copyFrom(slice);\n+                            MemoryCopy.copy(slice, 0, fpRegs, currentFPOffset, copy);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                    struct.copyFrom(segment.asSlice(0L, layout.byteSize()));\n+                    MemoryCopy.copy(segment, struct, layout.byteSize());\n@@ -241,1 +241,1 @@\n-                            cursor.copyFrom(msArg.asSlice(0, arg.layout.byteSize()));\n+                            MemoryCopy.copy(msArg, cursor, arg.layout.byteSize());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-                            slice.copyFrom(regSaveArea.asSlice(currentFPOffset(), copy));\n+                            MemoryCopy.copy(regSaveArea, currentFPOffset(), slice, 0, copy);\n@@ -264,1 +264,1 @@\n-                            slice.copyFrom(regSaveArea.asSlice(currentGPOffset(), copy));\n+                            MemoryCopy.copy(regSaveArea, currentGPOffset(), slice, 0, copy);\n@@ -400,1 +400,1 @@\n-                                reg_save_area.asSlice(currentFPOffset, copy).copyFrom(slice);\n+                                MemoryCopy.copy(slice, 0, reg_save_area, currentFPOffset, copy);\n@@ -403,1 +403,1 @@\n-                                reg_save_area.asSlice(currentGPOffset, copy).copyFrom(slice);\n+                                MemoryCopy.copy(slice, 0, reg_save_area, currentGPOffset, copy);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-                    struct.copyFrom(segment.asSlice(0L, layout.byteSize()));\n+                    MemoryCopy.copy(segment, struct, layout.byteSize());\n@@ -238,2 +238,1 @@\n-                            MemorySegment slice = cursor.asSlice(0, VA_SLOT_SIZE_BYTES);\n-                            slice.copyFrom(msArg);\n+                            MemoryCopy.copy(msArg, cursor, VA_SLOT_SIZE_BYTES);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.incubator.foreign.MemoryCopy;\n@@ -58,1 +59,1 @@\n-        s2.segment.copyFrom(s1.segment.asSlice(0, size));\n+        MemoryCopy.copy(s1.segment, 0, s2.segment, 0, size);\n@@ -77,1 +78,1 @@\n-        s2.segment.copyFrom(s2.type.layout, s1.segment.asSlice(0, size * s1.type.size()), s1.type.layout);\n+        MemoryCopy.copy(s1.segment, s1.type.layout, 0, s2.segment, s2.type.layout, 0, size);\n","filename":"test\/jdk\/java\/foreign\/TestCopyFrom.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        helper.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+        helper.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -85,1 +85,1 @@\n-        helper.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+        helper.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -102,1 +102,1 @@\n-        helper.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+        helper.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -109,1 +109,1 @@\n-        helper.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+        helper.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -120,1 +120,1 @@\n-            helper.copyFromArray(srcArr, 0, (SEG_LENGTH_BYTES \/ bytesPerElement) * 2, dstSeg, 0, ByteOrder.nativeOrder());\n+            helper.copy(srcArr, 0, dstSeg, 0, (SEG_LENGTH_BYTES \/ bytesPerElement) * 2, ByteOrder.nativeOrder());\n@@ -129,1 +129,1 @@\n-            helper.copyToArray(srcSeg, 0, dstArr, 0, (SEG_LENGTH_BYTES \/ bytesPerElement) * 2, ByteOrder.nativeOrder());\n+            helper.copy(srcSeg, 0, dstArr, 0, (SEG_LENGTH_BYTES \/ bytesPerElement) * 2, ByteOrder.nativeOrder());\n@@ -144,1 +144,1 @@\n-            helper.copyFromArray(srcArr, -1, SEG_LENGTH_BYTES \/ bytesPerElement, dstSeg, 0, ByteOrder.nativeOrder());\n+            helper.copy(srcArr, -1, dstSeg, 0, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -153,1 +153,1 @@\n-            helper.copyToArray(srcSeg, 0, dstArr, -1, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n+            helper.copy(srcSeg, 0, dstArr, -1, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -168,1 +168,1 @@\n-            helper.copyFromArray(srcArr, 0, SEG_LENGTH_BYTES \/ bytesPerElement, dstSeg, -1, ByteOrder.nativeOrder());\n+            helper.copy(srcArr, 0, dstSeg, -1, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -177,1 +177,1 @@\n-            helper.copyToArray(srcSeg, -1, dstArr, 0, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n+            helper.copy(srcSeg, -1, dstArr, 0, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -192,1 +192,1 @@\n-            helper.copyFromArray(srcArr, helper.length(srcArr) + 1, SEG_LENGTH_BYTES \/ bytesPerElement, dstSeg, 0, ByteOrder.nativeOrder());\n+            helper.copy(srcArr, helper.length(srcArr) + 1, dstSeg, 0, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -201,1 +201,1 @@\n-            helper.copyToArray(srcSeg, 0, dstArr, helper.length(dstArr) + 1, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n+            helper.copy(srcSeg, 0, dstArr, helper.length(dstArr) + 1, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -216,1 +216,1 @@\n-            helper.copyFromArray(srcArr, 0, SEG_LENGTH_BYTES \/ bytesPerElement, dstSeg, SEG_LENGTH_BYTES + 1, ByteOrder.nativeOrder());\n+            helper.copy(srcArr, 0, dstSeg, SEG_LENGTH_BYTES + 1, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -225,1 +225,1 @@\n-            helper.copyToArray(srcSeg, SEG_OFFSET_BYTES + 1, dstArr, 0, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n+            helper.copy(srcSeg, SEG_OFFSET_BYTES + 1, dstArr, 0, SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n@@ -302,2 +302,2 @@\n-        abstract void copyFromArray(X srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo);\n-        abstract void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, X dstArr, int dstIndex, int dstCopyLen, ByteOrder bo);\n+        abstract void copy(X srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo);\n+        abstract void copy(MemorySegment srcSeg, long srcOffsetBytes, X dstArr, int dstIndex, int dstCopyLen, ByteOrder bo);\n@@ -318,2 +318,2 @@\n-            void copyFromArray(byte[] srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo) {\n-                MemoryCopy.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes);\n+            void copy(byte[] srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen);\n@@ -323,2 +323,2 @@\n-            void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, byte[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n-                MemoryCopy.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen);\n+            void copy(MemorySegment srcSeg, long srcOffsetBytes, byte[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen);\n@@ -345,2 +345,2 @@\n-            void copyFromArray(char[] srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo) {\n-                MemoryCopy.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+            void copy(char[] srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -350,2 +350,2 @@\n-            void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, char[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n-                MemoryCopy.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+            void copy(MemorySegment srcSeg, long srcOffsetBytes, char[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -372,2 +372,2 @@\n-            void copyFromArray(short[] srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo) {\n-                MemoryCopy.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+            void copy(short[] srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -377,2 +377,2 @@\n-            void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, short[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n-                MemoryCopy.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+            void copy(MemorySegment srcSeg, long srcOffsetBytes, short[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -399,2 +399,2 @@\n-            void copyFromArray(int[] srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo) {\n-                MemoryCopy.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+            void copy(int[] srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -404,2 +404,2 @@\n-            void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, int[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n-                MemoryCopy.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+            void copy(MemorySegment srcSeg, long srcOffsetBytes, int[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -426,2 +426,2 @@\n-            void copyFromArray(float[] srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo) {\n-                MemoryCopy.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+            void copy(float[] srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -431,2 +431,2 @@\n-            void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, float[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n-                MemoryCopy.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+            void copy(MemorySegment srcSeg, long srcOffsetBytes, float[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -453,2 +453,2 @@\n-            void copyFromArray(long[] srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo) {\n-                MemoryCopy.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+            void copy(long[] srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -458,2 +458,2 @@\n-            void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, long[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n-                MemoryCopy.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+            void copy(MemorySegment srcSeg, long srcOffsetBytes, long[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -480,2 +480,2 @@\n-            void copyFromArray(double[] srcArr, int srcIndex, int srcCopyLen, MemorySegment dstSeg, long dstOffsetBytes, ByteOrder bo) {\n-                MemoryCopy.copyFromArray(srcArr, srcIndex, srcCopyLen, dstSeg, dstOffsetBytes, bo);\n+            void copy(double[] srcArr, int srcIndex, MemorySegment dstSeg, long dstOffsetBytes, int srcCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -485,2 +485,2 @@\n-            void copyToArray(MemorySegment srcSeg, long srcOffsetBytes, double[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n-                MemoryCopy.copyToArray(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+            void copy(MemorySegment srcSeg, long srcOffsetBytes, double[] dstArr, int dstIndex, int dstCopyLen, ByteOrder bo) {\n+                MemoryCopy.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n","filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"}]}