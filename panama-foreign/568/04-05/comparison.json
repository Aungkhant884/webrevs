{"files":[{"patch":"@@ -65,1 +65,0 @@\n-    private static final Unsafe unsafe = Unsafe.getUnsafe();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryCopy.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-    MemorySegment.copy(src, 0, this, 0, src.byteSize());\n+    MemorySegment.copy(src, this, src.byteSize());\n@@ -851,3 +851,0 @@\n-     * @throws IllegalArgumentException if the element layouts have different sizes, if the source offset is incompatible\n-     * with the alignment constraints in the source element layout, or if the destination offset is incompatible with the\n-     * alignment constraints in the destination element layout.\n@@ -858,1 +855,1 @@\n-     * {@code bytes > dstSegment.byteSize()}.\n+     * {@code bytes > dstSegment.byteSize()}, or if {@code bytes <= 0}.\n@@ -889,3 +886,0 @@\n-     * @throws IllegalArgumentException if the element layouts have different sizes, if the source offset is incompatible\n-     * with the alignment constraints in the source element layout, or if the destination offset is incompatible with the\n-     * alignment constraints in the destination element layout.\n@@ -896,1 +890,2 @@\n-     * {@code dstOffset + bytes > dstSegment.byteSize()}.\n+     * {@code dstOffset + bytes > dstSegment.byteSize()}, or if either {@code srcOffset}, {@code dstOffset}\n+     * or {@code bytes} are {@code < 0}.\n@@ -938,1 +933,1 @@\n-     * of the element layouts.\n+     * of the element layouts, or if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}.\n@@ -960,3 +955,0 @@\n-        if (size % srcElementLayout.byteSize() != 0) {\n-            throw new IllegalArgumentException(\"Segment size is not a multiple of layout size\");\n-        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -184,0 +184,24 @@\n+    @Test(dataProvider = \"copyModesAndHelpers\")\n+    public void testCopyNegativeLengths(CopyMode mode, CopyHelper<Object> helper, String helperDebugString) {\n+        int bytesPerElement = (int)helper.elementLayout.byteSize();\n+        MemorySegment base = srcSegment(SEG_LENGTH_BYTES);\n+        \/\/CopyFrom\n+        Object srcArr = helper.toArray(base);\n+        MemorySegment dstSeg = helper.fromArray(srcArr);\n+        try {\n+            helper.copy(srcArr, 0, dstSeg, -1, -SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {\n+            \/\/ok\n+        }\n+        \/\/CopyTo\n+        Object dstArr = helper.toArray(base);\n+        MemorySegment srcSeg = helper.fromArray(dstArr).asReadOnly();\n+        try {\n+            helper.copy(srcSeg, -1, dstArr, 0, -SEG_LENGTH_BYTES \/ bytesPerElement, ByteOrder.nativeOrder());\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {\n+            \/\/ok\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -109,5 +109,1 @@\n-            \"jdk.incubator.foreign.FunctionDescriptor\/withAttribute(java.lang.String,java.lang.constant.Constable)\/1\/0\",\n-            \"jdk.incubator.foreign.MemoryCopy\/copy(jdk.incubator.foreign.MemorySegment,jdk.incubator.foreign.ValueLayout,long,java.lang.Object,int,int)\/0\/0\",\n-            \"jdk.incubator.foreign.MemoryCopy\/copy(jdk.incubator.foreign.MemorySegment,jdk.incubator.foreign.ValueLayout,long,java.lang.Object,int,int)\/1\/0\",\n-            \"jdk.incubator.foreign.MemoryCopy\/copy(java.lang.Object,int,jdk.incubator.foreign.MemorySegment,jdk.incubator.foreign.ValueLayout,long,int)\/2\/0\",\n-            \"jdk.incubator.foreign.MemoryCopy\/copy(java.lang.Object,int,jdk.incubator.foreign.MemorySegment,jdk.incubator.foreign.ValueLayout,long,int)\/3\/0\"\n+            \"jdk.incubator.foreign.FunctionDescriptor\/withAttribute(java.lang.String,java.lang.constant.Constable)\/1\/0\"\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}