{"files":[{"patch":"@@ -374,1 +374,1 @@\n-        MemoryAccess.writeByte(addr, bytes.length, (byte)0);\n+        MemoryAccess.setByte(addr, bytes.length, (byte)0);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n- * Single values can be read and written using accessors like {@link #readInt(MemorySegment, long)}, and\n- * {@link #writeInt(MemorySegment, long, int)}. These accessors all accept the following parameters:\n+ * Single values can be read and written using accessors like {@link #getInt(MemorySegment, long)}, and\n+ * {@link #setInt(MemorySegment, long, int)}. These accessors all accept the following parameters:\n@@ -49,2 +49,3 @@\n- * Multiple values can be read and written in bulk from and to Java arrays, using accessors like {@link #writeInts(MemorySegment, long, int[], int, int)},\n- * and {@link #readInts(MemorySegment, long, int[], int, int)}. These accessors all accept the following parameters:\n+ * Multiple values can be read and written in bulk from and to Java arrays, using accessors like {@link #copy(int[], int, MemorySegment, long, int)},\n+ * and {@link #copy(MemorySegment, long, int[], int, int)}. These accessors all accept the following parameters\n+ * (source parameters are laid out before destination parameters, similarly to {@link System#arraycopy(Object, int, Object, int, int)}):\n@@ -117,1 +118,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -122,1 +123,1 @@\n-    public static byte readByte(MemorySegment segment, long offset) {\n+    public static byte getByte(MemorySegment segment, long offset) {\n@@ -130,1 +131,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -135,1 +136,1 @@\n-    public static void writeByte(MemorySegment segment, long offset, byte value) {\n+    public static void setByte(MemorySegment segment, long offset, byte value) {\n@@ -143,1 +144,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -148,1 +149,1 @@\n-    public static boolean readBoolean(MemorySegment segment, long offset) {\n+    public static boolean getBoolean(MemorySegment segment, long offset) {\n@@ -156,1 +157,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -161,1 +162,1 @@\n-    public static void writeBoolean(MemorySegment segment, long offset, boolean value) {\n+    public static void setBoolean(MemorySegment segment, long offset, boolean value) {\n@@ -173,1 +174,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -178,2 +179,2 @@\n-    public static char readChar(MemorySegment segment, long offset) {\n-        return readChar(segment, offset, ByteOrder.nativeOrder());\n+    public static char getChar(MemorySegment segment, long offset) {\n+        return getChar(segment, offset, ByteOrder.nativeOrder());\n@@ -189,1 +190,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -194,2 +195,2 @@\n-    public static void writeChar(MemorySegment segment, long offset, char value) {\n-        writeChar(segment, offset, ByteOrder.nativeOrder(), value);\n+    public static void setChar(MemorySegment segment, long offset, char value) {\n+        setChar(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -205,1 +206,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -210,2 +211,2 @@\n-    public static short readShort(MemorySegment segment, long offset) {\n-        return readShort(segment, offset, ByteOrder.nativeOrder());\n+    public static short getShort(MemorySegment segment, long offset) {\n+        return getShort(segment, offset, ByteOrder.nativeOrder());\n@@ -221,1 +222,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -226,2 +227,2 @@\n-    public static void writeShort(MemorySegment segment, long offset, short value) {\n-        writeShort(segment, offset, ByteOrder.nativeOrder(), value);\n+    public static void setShort(MemorySegment segment, long offset, short value) {\n+        setShort(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -237,1 +238,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -242,2 +243,2 @@\n-    public static int readInt(MemorySegment segment, long offset) {\n-        return readInt(segment, offset, ByteOrder.nativeOrder());\n+    public static int getInt(MemorySegment segment, long offset) {\n+        return getInt(segment, offset, ByteOrder.nativeOrder());\n@@ -253,1 +254,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -258,2 +259,2 @@\n-    public static void writeInt(MemorySegment segment, long offset, int value) {\n-        writeInt(segment, offset, ByteOrder.nativeOrder(), value);\n+    public static void setInt(MemorySegment segment, long offset, int value) {\n+        setInt(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -269,1 +270,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -274,2 +275,2 @@\n-    public static float readFloat(MemorySegment segment, long offset) {\n-        return readFloat(segment, offset, ByteOrder.nativeOrder());\n+    public static float getFloat(MemorySegment segment, long offset) {\n+        return getFloat(segment, offset, ByteOrder.nativeOrder());\n@@ -285,1 +286,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -290,2 +291,2 @@\n-    public static void writeFloat(MemorySegment segment, long offset, float value) {\n-        writeFloat(segment, offset, ByteOrder.nativeOrder(), value);\n+    public static void setFloat(MemorySegment segment, long offset, float value) {\n+        setFloat(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -301,1 +302,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -306,2 +307,2 @@\n-    public static long readLong(MemorySegment segment, long offset) {\n-        return readLong(segment, offset, ByteOrder.nativeOrder());\n+    public static long getLong(MemorySegment segment, long offset) {\n+        return getLong(segment, offset, ByteOrder.nativeOrder());\n@@ -317,1 +318,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -322,2 +323,2 @@\n-    public static void writeLong(MemorySegment segment, long offset, long value) {\n-        writeLong(segment, offset, ByteOrder.nativeOrder(), value);\n+    public static void setLong(MemorySegment segment, long offset, long value) {\n+        setLong(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -333,1 +334,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -338,2 +339,2 @@\n-    public static double readDouble(MemorySegment segment, long offset) {\n-        return readDouble(segment, offset, ByteOrder.nativeOrder());\n+    public static double getDouble(MemorySegment segment, long offset) {\n+        return getDouble(segment, offset, ByteOrder.nativeOrder());\n@@ -349,1 +350,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -354,2 +355,2 @@\n-    public static void writeDouble(MemorySegment segment, long offset, double value) {\n-        writeDouble(segment, offset, ByteOrder.nativeOrder(), value);\n+    public static void setDouble(MemorySegment segment, long offset, double value) {\n+        setDouble(segment, offset, ByteOrder.nativeOrder(), value);\n@@ -366,1 +367,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -371,1 +372,1 @@\n-    public static MemoryAddress readAddress(MemorySegment segment, long offset) {\n+    public static MemoryAddress getAddress(MemorySegment segment, long offset) {\n@@ -384,1 +385,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -389,1 +390,1 @@\n-    public static void writeAddress(MemorySegment segment, long offset, Addressable value) {\n+    public static void setAddress(MemorySegment segment, long offset, Addressable value) {\n@@ -403,1 +404,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -409,1 +410,1 @@\n-    public static char readChar(MemorySegment segment, long offset, ByteOrder order) {\n+    public static char getChar(MemorySegment segment, long offset, ByteOrder order) {\n@@ -423,1 +424,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -429,1 +430,1 @@\n-    public static void writeChar(MemorySegment segment, long offset, ByteOrder order, char value) {\n+    public static void setChar(MemorySegment segment, long offset, ByteOrder order, char value) {\n@@ -443,1 +444,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -449,1 +450,1 @@\n-    public static short readShort(MemorySegment segment, long offset, ByteOrder order) {\n+    public static short getShort(MemorySegment segment, long offset, ByteOrder order) {\n@@ -463,1 +464,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -469,1 +470,1 @@\n-    public static void writeShort(MemorySegment segment, long offset, ByteOrder order, short value) {\n+    public static void setShort(MemorySegment segment, long offset, ByteOrder order, short value) {\n@@ -483,1 +484,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -489,1 +490,1 @@\n-    public static int readInt(MemorySegment segment, long offset, ByteOrder order) {\n+    public static int getInt(MemorySegment segment, long offset, ByteOrder order) {\n@@ -503,1 +504,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -509,1 +510,1 @@\n-    public static void writeInt(MemorySegment segment, long offset, ByteOrder order, int value) {\n+    public static void setInt(MemorySegment segment, long offset, ByteOrder order, int value) {\n@@ -523,1 +524,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -529,1 +530,1 @@\n-    public static float readFloat(MemorySegment segment, long offset, ByteOrder order) {\n+    public static float getFloat(MemorySegment segment, long offset, ByteOrder order) {\n@@ -543,1 +544,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -549,1 +550,1 @@\n-    public static void writeFloat(MemorySegment segment, long offset, ByteOrder order, float value) {\n+    public static void setFloat(MemorySegment segment, long offset, ByteOrder order, float value) {\n@@ -563,1 +564,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -569,1 +570,1 @@\n-    public static long readLong(MemorySegment segment, long offset, ByteOrder order) {\n+    public static long getLong(MemorySegment segment, long offset, ByteOrder order) {\n@@ -583,1 +584,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -589,1 +590,1 @@\n-    public static void writeLong(MemorySegment segment, long offset, ByteOrder order, long value) {\n+    public static void setLong(MemorySegment segment, long offset, ByteOrder order, long value) {\n@@ -603,1 +604,1 @@\n-     * @param segment the segment to be read.\n+     * @param segment the segment to be dereferenced.\n@@ -609,1 +610,1 @@\n-    public static double readDouble(MemorySegment segment, long offset, ByteOrder order) {\n+    public static double getDouble(MemorySegment segment, long offset, ByteOrder order) {\n@@ -623,1 +624,1 @@\n-     * @param segment the segment to be written.\n+     * @param segment the segment to be dereferenced.\n@@ -629,1 +630,1 @@\n-    public static void writeDouble(MemorySegment segment, long offset, ByteOrder order, double value) {\n+    public static void setDouble(MemorySegment segment, long offset, ByteOrder order, double value) {\n@@ -644,2 +645,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -648,0 +647,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -651,2 +652,2 @@\n-    public static void writeBytes(\n-            MemorySegment dstSegment, long dstOffset, byte[] srcArray, int srcIndex, int elementCount) {\n+    public static void copy(\n+            byte[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n@@ -667,2 +668,3 @@\n-    public static void readBytes(\n-            MemorySegment srcSegment, long srcOffset, byte[] dstArray, int dstIndex, int elementCount) {\n+    public static void copy(\n+            MemorySegment srcSegment, long srcOffset,\n+            byte[] dstArray, int dstIndex, int elementCount) {\n@@ -676,2 +678,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -680,0 +680,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -683,3 +685,3 @@\n-    public static void writeChars(\n-            MemorySegment dstSegment, long dstOffset, char[] srcArray, int srcIndex, int elementCount) {\n-        writeChars(dstSegment, dstOffset, srcArray, srcIndex, elementCount, ByteOrder.nativeOrder());\n+    public static void copy(\n+            char[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -691,2 +693,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -695,0 +695,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -699,2 +701,2 @@\n-    public static void writeChars(\n-            MemorySegment dstSegment, long dstOffset, char[] srcArray, int srcIndex, int elementCount, ByteOrder order) {\n+    public static void copy(\n+            char[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount, ByteOrder order) {\n@@ -715,1 +717,1 @@\n-    public static void readChars(\n+    public static void copy(\n@@ -718,1 +720,1 @@\n-        readChars(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -732,1 +734,1 @@\n-    public static void readChars(\n+    public static void copy(\n@@ -743,2 +745,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -747,0 +747,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -750,3 +752,3 @@\n-    public static void writeShorts(\n-            MemorySegment dstSegment, long dstOffset, short[] srcArray, int srcIndex, int elementCount) {\n-        writeShorts(dstSegment, dstOffset, srcArray, srcIndex, elementCount, ByteOrder.nativeOrder());\n+    public static void copy(\n+            short[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -758,2 +760,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -762,0 +762,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -766,2 +768,2 @@\n-    public static void writeShorts(\n-            MemorySegment dstSegment, long dstOffset, short[] srcArray, int srcIndex, int elementCount,\n+    public static void copy(\n+            short[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -783,1 +785,1 @@\n-    public static void readShorts(\n+    public static void copy(\n@@ -786,1 +788,1 @@\n-        readShorts(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -801,1 +803,1 @@\n-    public static void readShorts(\n+    public static void copy(\n@@ -812,2 +814,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -816,0 +816,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -819,3 +821,3 @@\n-    public static void writeInts(\n-            MemorySegment dstSegment, long dstOffset, int[] srcArray, int srcIndex, int elementCount) {\n-        writeInts(dstSegment, dstOffset, srcArray, srcIndex, elementCount, ByteOrder.nativeOrder());\n+    public static void copy(\n+            int[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -827,2 +829,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -831,0 +831,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -835,2 +837,2 @@\n-    public static void writeInts(\n-            MemorySegment dstSegment, long dstOffset, int[] srcArray, int srcIndex, int elementCount,\n+    public static void copy(\n+            int[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -852,1 +854,1 @@\n-    public static void readInts(\n+    public static void copy(\n@@ -855,1 +857,1 @@\n-        readInts(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -870,1 +872,1 @@\n-    public static void readInts(\n+    public static void copy(\n@@ -881,2 +883,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -885,0 +885,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -888,3 +890,3 @@\n-    public static void writeFloats(\n-            MemorySegment dstSegment, long dstOffset, float[] srcArray, int srcIndex, int elementCount) {\n-        writeFloats(dstSegment, dstOffset, srcArray, srcIndex, elementCount, ByteOrder.nativeOrder());\n+    public static void copy(\n+            float[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -896,2 +898,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -900,0 +900,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -904,2 +906,2 @@\n-    public static void writeFloats(\n-            MemorySegment dstSegment, long dstOffset, float[] srcArray, int srcIndex, int elementCount,\n+    public static void copy(\n+            float[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -921,1 +923,1 @@\n-    public static void readFloats(\n+    public static void copy(\n@@ -924,1 +926,1 @@\n-        readFloats(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -939,1 +941,1 @@\n-    public static void readFloats(\n+    public static void copy(\n@@ -950,2 +952,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -954,0 +954,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -957,3 +959,3 @@\n-    public static void writeLongs(\n-            MemorySegment dstSegment, long dstOffset, long[] srcArray, int srcIndex, int elementCount) {\n-        writeLongs(dstSegment, dstOffset, srcArray, srcIndex, elementCount, ByteOrder.nativeOrder());\n+    public static void copy(\n+            long[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -965,2 +967,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -969,0 +969,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -973,2 +975,2 @@\n-    public static void writeLongs(\n-            MemorySegment dstSegment, long dstOffset, long[] srcArray, int srcIndex, int elementCount,\n+    public static void copy(\n+            long[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -990,1 +992,1 @@\n-    public static void readLongs(\n+    public static void copy(\n@@ -993,1 +995,1 @@\n-        readLongs(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -1008,1 +1010,1 @@\n-    public static void readLongs(\n+    public static void copy(\n@@ -1019,2 +1021,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -1023,0 +1023,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -1026,3 +1028,3 @@\n-    public static void writeDoubles(\n-            MemorySegment dstSegment, long dstOffset, double[] srcArray, int srcIndex, int elementCount) {\n-        writeDoubles(dstSegment, dstOffset, srcArray, srcIndex, elementCount, ByteOrder.nativeOrder());\n+    public static void copy(\n+            double[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount) {\n+        copy(srcArray, srcIndex, dstSegment, dstOffset, elementCount, ByteOrder.nativeOrder());\n@@ -1034,2 +1036,0 @@\n-     * @param dstSegment the destination segment.\n-     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -1038,0 +1038,2 @@\n+     * @param dstSegment the destination segment.\n+     * @param dstOffset the starting offset, in bytes, of the destination segment.\n@@ -1042,2 +1044,2 @@\n-    public static void writeDoubles(\n-            MemorySegment dstSegment, long dstOffset, double[] srcArray, int srcIndex, int elementCount,\n+    public static void copy(\n+            double[] srcArray, int srcIndex, MemorySegment dstSegment, long dstOffset, int elementCount,\n@@ -1059,1 +1061,1 @@\n-    public static void readDoubles(\n+    public static void copy(\n@@ -1062,1 +1064,1 @@\n-        readDoubles(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n+        copy(srcSegment, srcOffset, dstArray, dstIndex, elementCount, ByteOrder.nativeOrder());\n@@ -1077,1 +1079,1 @@\n-    public static void readDoubles(\n+    public static void copy(\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":156,"deletions":154,"binary":false,"changes":310,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * {@link jdk.incubator.foreign.MemoryAccess#writeInt(jdk.incubator.foreign.MemorySegment, long, int)} helper method;\n+ * {@link jdk.incubator.foreign.MemoryAccess#setInt(jdk.incubator.foreign.MemorySegment, long, int)} helper method;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-            if (MemoryAccess.readByte(this, 0) != MemoryAccess.readByte(that, 0)) {\n+            if (MemoryAccess.getByte(this, 0) != MemoryAccess.getByte(that, 0)) {\n@@ -173,1 +173,1 @@\n-            if (MemoryAccess.readByte(this, i) != MemoryAccess.readByte(that, i)) {\n+            if (MemoryAccess.getByte(this, i) != MemoryAccess.getByte(that, i)) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                .map(symbol -> MemoryAccess.readAddress(funcs, symbol.ordinal() * MemoryLayouts.ADDRESS.byteSize()));\n+                .map(symbol -> MemoryAccess.getAddress(funcs, symbol.ordinal() * MemoryLayouts.ADDRESS.byteSize()));\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-        MemoryAccess.readBytes(segment, start, bytes, 0, len);\n+        MemoryAccess.copy(segment, start, bytes, 0, len);\n@@ -296,1 +296,1 @@\n-            byte curr = MemoryAccess.readByte(segment, start + offset);\n+            byte curr = MemoryAccess.getByte(segment, start + offset);\n@@ -610,1 +610,1 @@\n-            MemoryAccess.writeLong(ptr, 0, (long) o);\n+            MemoryAccess.setLong(ptr, 0, (long) o);\n@@ -612,1 +612,1 @@\n-            MemoryAccess.writeLong(ptr, 0, (int) o);\n+            MemoryAccess.setLong(ptr, 0, (int) o);\n@@ -614,1 +614,1 @@\n-            MemoryAccess.writeLong(ptr, 0, (short) o);\n+            MemoryAccess.setLong(ptr, 0, (short) o);\n@@ -616,1 +616,1 @@\n-            MemoryAccess.writeLong(ptr, 0, (char) o);\n+            MemoryAccess.setLong(ptr, 0, (char) o);\n@@ -618,1 +618,1 @@\n-            MemoryAccess.writeLong(ptr, 0, (byte) o);\n+            MemoryAccess.setLong(ptr, 0, (byte) o);\n@@ -620,1 +620,1 @@\n-            MemoryAccess.writeFloat(ptr, 0, (float) o);\n+            MemoryAccess.setFloat(ptr, 0, (float) o);\n@@ -622,1 +622,1 @@\n-            MemoryAccess.writeDouble(ptr, 0, (double) o);\n+            MemoryAccess.setDouble(ptr, 0, (double) o);\n@@ -624,1 +624,1 @@\n-            MemoryAccess.writeBoolean(ptr, 0, (boolean) o);\n+            MemoryAccess.setBoolean(ptr, 0, (boolean) o);\n@@ -632,1 +632,1 @@\n-            MemoryAccess.writeLong(ptr, 0, (long) o);\n+            MemoryAccess.setLong(ptr, 0, (long) o);\n@@ -634,1 +634,1 @@\n-            MemoryAccess.writeInt(ptr, 0, (int) o);\n+            MemoryAccess.setInt(ptr, 0, (int) o);\n@@ -636,1 +636,1 @@\n-            MemoryAccess.writeShort(ptr, 0, (short) o);\n+            MemoryAccess.setShort(ptr, 0, (short) o);\n@@ -638,1 +638,1 @@\n-            MemoryAccess.writeChar(ptr, 0, (char) o);\n+            MemoryAccess.setChar(ptr, 0, (char) o);\n@@ -640,1 +640,1 @@\n-            MemoryAccess.writeByte(ptr, 0, (byte) o);\n+            MemoryAccess.setByte(ptr, 0, (byte) o);\n@@ -642,1 +642,1 @@\n-            MemoryAccess.writeFloat(ptr, 0, (float) o);\n+            MemoryAccess.setFloat(ptr, 0, (float) o);\n@@ -644,1 +644,1 @@\n-            MemoryAccess.writeDouble(ptr, 0, (double) o);\n+            MemoryAccess.setDouble(ptr, 0, (double) o);\n@@ -646,1 +646,1 @@\n-            MemoryAccess.writeBoolean(ptr, 0, (boolean) o);\n+            MemoryAccess.setBoolean(ptr, 0, (boolean) o);\n@@ -654,1 +654,1 @@\n-            return MemoryAccess.readLong(ptr, 0);\n+            return MemoryAccess.getLong(ptr, 0);\n@@ -656,1 +656,1 @@\n-            return MemoryAccess.readInt(ptr, 0);\n+            return MemoryAccess.getInt(ptr, 0);\n@@ -658,1 +658,1 @@\n-            return MemoryAccess.readShort(ptr, 0);\n+            return MemoryAccess.getShort(ptr, 0);\n@@ -660,1 +660,1 @@\n-            return MemoryAccess.readChar(ptr, 0);\n+            return MemoryAccess.getChar(ptr, 0);\n@@ -662,1 +662,1 @@\n-            return MemoryAccess.readByte(ptr, 0);\n+            return MemoryAccess.getByte(ptr, 0);\n@@ -664,1 +664,1 @@\n-            return MemoryAccess.readFloat(ptr, 0);\n+            return MemoryAccess.getFloat(ptr, 0);\n@@ -666,1 +666,1 @@\n-            return MemoryAccess.readDouble(ptr, 0);\n+            return MemoryAccess.getDouble(ptr, 0);\n@@ -668,1 +668,1 @@\n-            return MemoryAccess.readBoolean(ptr, 0);\n+            return MemoryAccess.getBoolean(ptr, 0);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-                    writeByte(buf, i, (byte)chars[(int)i]);\n+                    setByte(buf, i, (byte)chars[(int)i]);\n@@ -217,1 +217,1 @@\n-                writeByte(buf, chars.length, (byte)'\\0');\n+                setByte(buf, chars.length, (byte)'\\0');\n@@ -247,1 +247,1 @@\n-                writeLong(time, 0, arg);\n+                setLong(time, 0, arg);\n@@ -264,1 +264,1 @@\n-                return readInt(base, 0);\n+                return getInt(base, 0);\n@@ -267,1 +267,1 @@\n-                return readInt(base, 4);\n+                return getInt(base, 4);\n@@ -270,1 +270,1 @@\n-                return readInt(base, 8);\n+                return getInt(base, 8);\n@@ -273,1 +273,1 @@\n-                return readInt(base, 12);\n+                return getInt(base, 12);\n@@ -276,1 +276,1 @@\n-                return readInt(base, 16);\n+                return getInt(base, 16);\n@@ -279,1 +279,1 @@\n-                return readInt(base, 20);\n+                return getInt(base, 20);\n@@ -282,1 +282,1 @@\n-                return readInt(base, 24);\n+                return getInt(base, 24);\n@@ -285,1 +285,1 @@\n-                return readInt(base, 28);\n+                return getInt(base, 28);\n@@ -288,1 +288,1 @@\n-                byte b = readByte(base, 32);\n+                byte b = getByte(base, 32);\n@@ -310,2 +310,2 @@\n-            return readInt(base, addr1.segmentOffset(base)) -\n-                   readInt(base, addr2.segmentOffset(base));\n+            return getInt(base, addr1.segmentOffset(base)) -\n+                   getInt(base, addr2.segmentOffset(base));\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -517,1 +517,1 @@\n-                MemoryAccess.writeByte(segment, offset, offset);\n+                MemoryAccess.setByte(segment, offset, offset);\n@@ -525,1 +525,1 @@\n-                assertEquals(MemoryAccess.readByte(segment, 0), offset);\n+                assertEquals(MemoryAccess.getByte(segment, 0), offset);\n@@ -648,1 +648,1 @@\n-        MemoryAccess.writeInt(s2, 0, 10); \/\/ Dead access!\n+        MemoryAccess.setInt(s2, 0, 10); \/\/ Dead access!\n@@ -660,1 +660,1 @@\n-                MemoryAccess.writeByte(segment, i, (byte) i);\n+                MemoryAccess.setByte(segment, i, (byte) i);\n@@ -680,1 +680,1 @@\n-                MemoryAccess.writeByte(segment, i, (byte) i);\n+                MemoryAccess.setByte(segment, i, (byte) i);\n@@ -818,1 +818,1 @@\n-                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.writeByte(addr, pos, (byte)(long)pos));\n+                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByte(addr, pos, (byte)(long)pos));\n@@ -820,1 +820,1 @@\n-                (base) -> initBytes(base, chars, (addr, pos) -> MemoryAccess.writeChar(addr, pos << 1, ByteOrder.BIG_ENDIAN, (char)(long)pos));\n+                (base) -> initBytes(base, chars, (addr, pos) -> MemoryAccess.setChar(addr, pos << 1, ByteOrder.BIG_ENDIAN, (char)(long)pos));\n@@ -822,1 +822,1 @@\n-                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryAccess.writeShort(addr, pos << 1, ByteOrder.BIG_ENDIAN, (short)(long)pos));\n+                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryAccess.setShort(addr, pos << 1, ByteOrder.BIG_ENDIAN, (short)(long)pos));\n@@ -824,1 +824,1 @@\n-                (base) -> initBytes(base, ints, (addr, pos) -> MemoryAccess.writeInt(addr, pos << 2, ByteOrder.BIG_ENDIAN, (int)(long)pos));\n+                (base) -> initBytes(base, ints, (addr, pos) -> MemoryAccess.setInt(addr, pos << 2, ByteOrder.BIG_ENDIAN, (int)(long)pos));\n@@ -826,1 +826,1 @@\n-                (base) -> initBytes(base, floats, (addr, pos) -> MemoryAccess.writeFloat(addr, pos << 2, ByteOrder.BIG_ENDIAN, (float)(long)pos));\n+                (base) -> initBytes(base, floats, (addr, pos) -> MemoryAccess.setFloat(addr, pos << 2, ByteOrder.BIG_ENDIAN, (float)(long)pos));\n@@ -828,1 +828,1 @@\n-                (base) -> initBytes(base, longs, (addr, pos) -> MemoryAccess.writeLong(addr, pos << 3, ByteOrder.BIG_ENDIAN, (long)pos));\n+                (base) -> initBytes(base, longs, (addr, pos) -> MemoryAccess.setLong(addr, pos << 3, ByteOrder.BIG_ENDIAN, (long)pos));\n@@ -830,1 +830,1 @@\n-                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryAccess.writeDouble(addr, pos << 3, ByteOrder.BIG_ENDIAN, (double)(long)pos));\n+                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryAccess.setDouble(addr, pos << 3, ByteOrder.BIG_ENDIAN, (double)(long)pos));\n@@ -833,1 +833,1 @@\n-                (base) -> checkBytes(base, bytes, Function.identity(), (addr, pos) -> MemoryAccess.readByte(addr, pos), ByteBuffer::get);\n+                (base) -> checkBytes(base, bytes, Function.identity(), (addr, pos) -> MemoryAccess.getByte(addr, pos), ByteBuffer::get);\n@@ -835,1 +835,1 @@\n-                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> MemoryAccess.readChar(addr, pos << 1, ByteOrder.BIG_ENDIAN), CharBuffer::get);\n+                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> MemoryAccess.getChar(addr, pos << 1, ByteOrder.BIG_ENDIAN), CharBuffer::get);\n@@ -837,1 +837,1 @@\n-                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> MemoryAccess.readShort(addr, pos << 1, ByteOrder.BIG_ENDIAN), ShortBuffer::get);\n+                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> MemoryAccess.getShort(addr, pos << 1, ByteOrder.BIG_ENDIAN), ShortBuffer::get);\n@@ -839,1 +839,1 @@\n-                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> MemoryAccess.readInt(addr, pos << 2, ByteOrder.BIG_ENDIAN), IntBuffer::get);\n+                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> MemoryAccess.getInt(addr, pos << 2, ByteOrder.BIG_ENDIAN), IntBuffer::get);\n@@ -841,1 +841,1 @@\n-                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> MemoryAccess.readFloat(addr, pos << 2, ByteOrder.BIG_ENDIAN), FloatBuffer::get);\n+                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> MemoryAccess.getFloat(addr, pos << 2, ByteOrder.BIG_ENDIAN), FloatBuffer::get);\n@@ -843,1 +843,1 @@\n-                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> MemoryAccess.readLong(addr, pos << 3, ByteOrder.BIG_ENDIAN), LongBuffer::get);\n+                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> MemoryAccess.getLong(addr, pos << 3, ByteOrder.BIG_ENDIAN), LongBuffer::get);\n@@ -845,1 +845,1 @@\n-                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> MemoryAccess.readDouble(addr, pos << 3, ByteOrder.BIG_ENDIAN), DoubleBuffer::get);\n+                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> MemoryAccess.getDouble(addr, pos << 3, ByteOrder.BIG_ENDIAN), DoubleBuffer::get);\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        BYTE(byte.class, MemoryLayouts.JAVA_BYTE, (s, i, o) -> MemoryAccess.readByte(s, i), (s, i, o, v) -> MemoryAccess.writeByte(s, i, v), i -> (byte)i),\n+        BYTE(byte.class, MemoryLayouts.JAVA_BYTE, (s, i, o) -> MemoryAccess.getByte(s, i), (s, i, o, v) -> MemoryAccess.setByte(s, i, v), i -> (byte)i),\n@@ -96,6 +96,6 @@\n-        SHORT_LE(short.class, MemoryLayouts.BITS_16_LE, MemoryAccess::readShort, MemoryAccess::writeShort, i -> (short)i),\n-        CHAR_LE(char.class, MemoryLayouts.BITS_16_LE, MemoryAccess::readChar, MemoryAccess::writeChar, i -> (char)i),\n-        INT_LE(int.class, MemoryLayouts.BITS_32_LE, MemoryAccess::readInt, MemoryAccess::writeInt, i -> i),\n-        FLOAT_LE(float.class, MemoryLayouts.BITS_32_LE, MemoryAccess::readFloat, MemoryAccess::writeFloat, i -> (float)i),\n-        LONG_LE(long.class, MemoryLayouts.BITS_64_LE, MemoryAccess::readLong, MemoryAccess::writeLong, i -> (long)i),\n-        DOUBLE_LE(double.class, MemoryLayouts.BITS_64_LE, MemoryAccess::readDouble, MemoryAccess::writeDouble, i -> (double)i),\n+        SHORT_LE(short.class, MemoryLayouts.BITS_16_LE, MemoryAccess::getShort, MemoryAccess::setShort, i -> (short)i),\n+        CHAR_LE(char.class, MemoryLayouts.BITS_16_LE, MemoryAccess::getChar, MemoryAccess::setChar, i -> (char)i),\n+        INT_LE(int.class, MemoryLayouts.BITS_32_LE, MemoryAccess::getInt, MemoryAccess::setInt, i -> i),\n+        FLOAT_LE(float.class, MemoryLayouts.BITS_32_LE, MemoryAccess::getFloat, MemoryAccess::setFloat, i -> (float)i),\n+        LONG_LE(long.class, MemoryLayouts.BITS_64_LE, MemoryAccess::getLong, MemoryAccess::setLong, i -> (long)i),\n+        DOUBLE_LE(double.class, MemoryLayouts.BITS_64_LE, MemoryAccess::getDouble, MemoryAccess::setDouble, i -> (double)i),\n@@ -103,6 +103,6 @@\n-        SHORT_BE(short.class, MemoryLayouts.BITS_16_BE, MemoryAccess::readShort, MemoryAccess::writeShort, i -> (short)i),\n-        CHAR_BE(char.class, MemoryLayouts.BITS_16_BE, MemoryAccess::readChar, MemoryAccess::writeChar, i -> (char)i),\n-        INT_BE(int.class, MemoryLayouts.BITS_32_BE, MemoryAccess::readInt, MemoryAccess::writeInt, i -> i),\n-        FLOAT_BE(float.class, MemoryLayouts.BITS_32_BE, MemoryAccess::readFloat, MemoryAccess::writeFloat, i -> (float)i),\n-        LONG_BE(long.class, MemoryLayouts.BITS_64_BE, MemoryAccess::readLong, MemoryAccess::writeLong, i -> (long)i),\n-        DOUBLE_BE(double.class, MemoryLayouts.BITS_64_BE, MemoryAccess::readDouble, MemoryAccess::writeDouble, i -> (double)i);\n+        SHORT_BE(short.class, MemoryLayouts.BITS_16_BE, MemoryAccess::getShort, MemoryAccess::setShort, i -> (short)i),\n+        CHAR_BE(char.class, MemoryLayouts.BITS_16_BE, MemoryAccess::getChar, MemoryAccess::setChar, i -> (char)i),\n+        INT_BE(int.class, MemoryLayouts.BITS_32_BE, MemoryAccess::getInt, MemoryAccess::setInt, i -> i),\n+        FLOAT_BE(float.class, MemoryLayouts.BITS_32_BE, MemoryAccess::getFloat, MemoryAccess::setFloat, i -> (float)i),\n+        LONG_BE(long.class, MemoryLayouts.BITS_64_BE, MemoryAccess::getLong, MemoryAccess::setLong, i -> (long)i),\n+        DOUBLE_BE(double.class, MemoryLayouts.BITS_64_BE, MemoryAccess::getDouble, MemoryAccess::setDouble, i -> (double)i);\n","filename":"test\/jdk\/java\/foreign\/TestCopyFrom.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        MemoryAccess.writeByte(seg, str.length(), (byte)0);\n+        MemoryAccess.setByte(seg, str.length(), (byte)0);\n","filename":"test\/jdk\/java\/foreign\/TestFree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-                sum += MemoryAccess.readByte(segment, i);\n+                sum += MemoryAccess.getByte(segment, i);\n@@ -196,1 +196,1 @@\n-            MemoryAccess.writeByte(copy, ThreadLocalRandom.current().nextInt(SEGMENT_SIZE), (byte)42);\n+            MemoryAccess.setByte(copy, ThreadLocalRandom.current().nextInt(SEGMENT_SIZE), (byte)42);\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                        s -> MemoryAccess.readByte(s, 4), (s, x) -> MemoryAccess.writeByte(s, 4, x),\n+                        s -> MemoryAccess.getByte(s, 4), (s, x) -> MemoryAccess.setByte(s, 4, x),\n@@ -112,1 +112,1 @@\n-                        s -> MemoryAccess.readBoolean(s, 4), (s, x) -> MemoryAccess.writeBoolean(s, 4, x),\n+                        s -> MemoryAccess.getBoolean(s, 4), (s, x) -> MemoryAccess.setBoolean(s, 4, x),\n@@ -117,1 +117,1 @@\n-                        s -> MemoryAccess.readChar(s, 4), (s, x) -> MemoryAccess.writeChar(s, 4, x),\n+                        s -> MemoryAccess.getChar(s, 4), (s, x) -> MemoryAccess.setChar(s, 4, x),\n@@ -121,1 +121,1 @@\n-                        s -> MemoryAccess.readChar(s, 4, LE), (s, x) -> MemoryAccess.writeChar(s, 4, LE, x),\n+                        s -> MemoryAccess.getChar(s, 4, LE), (s, x) -> MemoryAccess.setChar(s, 4, LE, x),\n@@ -125,1 +125,1 @@\n-                        s -> MemoryAccess.readChar(s, 4, BE), (s, x) -> MemoryAccess.writeChar(s, 4, BE, x),\n+                        s -> MemoryAccess.getChar(s, 4, BE), (s, x) -> MemoryAccess.setChar(s, 4, BE, x),\n@@ -130,1 +130,1 @@\n-                        s -> MemoryAccess.readShort(s, 4), (s, x) -> MemoryAccess.writeShort(s, 4, x),\n+                        s -> MemoryAccess.getShort(s, 4), (s, x) -> MemoryAccess.setShort(s, 4, x),\n@@ -134,1 +134,1 @@\n-                        s -> MemoryAccess.readShort(s, 4, LE), (s, x) -> MemoryAccess.writeShort(s, 4, LE, x),\n+                        s -> MemoryAccess.getShort(s, 4, LE), (s, x) -> MemoryAccess.setShort(s, 4, LE, x),\n@@ -138,1 +138,1 @@\n-                        s -> MemoryAccess.readShort(s, 4, BE), (s, x) -> MemoryAccess.writeShort(s, 4, BE, x),\n+                        s -> MemoryAccess.getShort(s, 4, BE), (s, x) -> MemoryAccess.setShort(s, 4, BE, x),\n@@ -143,1 +143,1 @@\n-                        s -> MemoryAccess.readInt(s, 4), (s, x) -> MemoryAccess.writeInt(s, 4, x),\n+                        s -> MemoryAccess.getInt(s, 4), (s, x) -> MemoryAccess.setInt(s, 4, x),\n@@ -147,1 +147,1 @@\n-                        s -> MemoryAccess.readInt(s, 4, LE), (s, x) -> MemoryAccess.writeInt(s, 4, LE, x),\n+                        s -> MemoryAccess.getInt(s, 4, LE), (s, x) -> MemoryAccess.setInt(s, 4, LE, x),\n@@ -151,1 +151,1 @@\n-                        s -> MemoryAccess.readInt(s, 4, BE), (s, x) -> MemoryAccess.writeInt(s, 4, BE, x),\n+                        s -> MemoryAccess.getInt(s, 4, BE), (s, x) -> MemoryAccess.setInt(s, 4, BE, x),\n@@ -156,1 +156,1 @@\n-                        s -> MemoryAccess.readFloat(s, 4), (s, x) -> MemoryAccess.writeFloat(s, 4, x),\n+                        s -> MemoryAccess.getFloat(s, 4), (s, x) -> MemoryAccess.setFloat(s, 4, x),\n@@ -160,1 +160,1 @@\n-                        s -> MemoryAccess.readFloat(s, 4, LE), (s, x) -> MemoryAccess.writeFloat(s, 4, LE, x),\n+                        s -> MemoryAccess.getFloat(s, 4, LE), (s, x) -> MemoryAccess.setFloat(s, 4, LE, x),\n@@ -164,1 +164,1 @@\n-                        s -> MemoryAccess.readFloat(s, 4, BE), (s, x) -> MemoryAccess.writeFloat(s, 4, BE, x),\n+                        s -> MemoryAccess.getFloat(s, 4, BE), (s, x) -> MemoryAccess.setFloat(s, 4, BE, x),\n@@ -169,1 +169,1 @@\n-                        s -> MemoryAccess.readDouble(s, 4), (s, x) -> MemoryAccess.writeDouble(s, 4, x),\n+                        s -> MemoryAccess.getDouble(s, 4), (s, x) -> MemoryAccess.setDouble(s, 4, x),\n@@ -173,1 +173,1 @@\n-                        s -> MemoryAccess.readDouble(s, 4, LE), (s, x) -> MemoryAccess.writeDouble(s, 4, LE, x),\n+                        s -> MemoryAccess.getDouble(s, 4, LE), (s, x) -> MemoryAccess.setDouble(s, 4, LE, x),\n@@ -177,1 +177,1 @@\n-                        s -> MemoryAccess.readDouble(s, 4, BE), (s, x) -> MemoryAccess.writeDouble(s, 4, BE, x),\n+                        s -> MemoryAccess.getDouble(s, 4, BE), (s, x) -> MemoryAccess.setDouble(s, 4, BE, x),\n@@ -181,1 +181,1 @@\n-                        s -> MemoryAccess.readAddress(s, 4), (s, x) -> MemoryAccess.writeAddress(s, 4, x),\n+                        s -> MemoryAccess.getAddress(s, 4), (s, x) -> MemoryAccess.setAddress(s, 4, x),\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessStatics.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-                MemoryAccess.writeBytes(dstSeg, dstOffsetBytes, srcArr, srcIndex, srcCopyLen);\n+                MemoryAccess.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen);\n@@ -348,1 +348,1 @@\n-                MemoryAccess.readBytes(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen);\n+                MemoryAccess.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen);\n@@ -370,1 +370,1 @@\n-                MemoryAccess.writeChars(dstSeg, dstOffsetBytes, srcArr, srcIndex, srcCopyLen, bo);\n+                MemoryAccess.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -375,1 +375,1 @@\n-                MemoryAccess.readChars(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+                MemoryAccess.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -397,1 +397,1 @@\n-                MemoryAccess.writeShorts(dstSeg, dstOffsetBytes, srcArr, srcIndex, srcCopyLen, bo);\n+                MemoryAccess.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -402,1 +402,1 @@\n-                MemoryAccess.readShorts(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+                MemoryAccess.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -424,1 +424,1 @@\n-                MemoryAccess.writeInts(dstSeg, dstOffsetBytes, srcArr, srcIndex, srcCopyLen, bo);\n+                MemoryAccess.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -429,1 +429,1 @@\n-                MemoryAccess.readInts(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+                MemoryAccess.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -451,1 +451,1 @@\n-                MemoryAccess.writeFloats(dstSeg, dstOffsetBytes, srcArr, srcIndex, srcCopyLen, bo);\n+                MemoryAccess.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -456,1 +456,1 @@\n-                MemoryAccess.readFloats(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+                MemoryAccess.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -478,1 +478,1 @@\n-                MemoryAccess.writeLongs(dstSeg, dstOffsetBytes, srcArr, srcIndex, srcCopyLen, bo);\n+                MemoryAccess.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -483,1 +483,1 @@\n-                MemoryAccess.readLongs(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+                MemoryAccess.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n@@ -505,1 +505,1 @@\n-                MemoryAccess.writeDoubles(dstSeg, dstOffsetBytes, srcArr, srcIndex, srcCopyLen, bo);\n+                MemoryAccess.copy(srcArr, srcIndex, dstSeg, dstOffsetBytes, srcCopyLen, bo);\n@@ -510,1 +510,1 @@\n-                MemoryAccess.readDoubles(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n+                MemoryAccess.copy(srcSeg, srcOffsetBytes, dstArr, dstIndex, dstCopyLen, bo);\n","filename":"test\/jdk\/java\/foreign\/TestMemoryCopy.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -208,2 +208,2 @@\n-        MemoryAccess.writeInt(everything, addr.toRawLongValue(), 42);\n-        assertEquals(MemoryAccess.readInt(everything, addr.toRawLongValue()), 42);\n+        MemoryAccess.setInt(everything, addr.toRawLongValue(), 42);\n+        assertEquals(MemoryAccess.getInt(everything, addr.toRawLongValue()), 42);\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-                int expected = MemoryAccess.readByte(s2.segment, i);\n-                int found = (int) MemoryAccess.readByte(s1.segment, i + offset);\n+                int expected = MemoryAccess.getByte(s2.segment, i);\n+                int found = (int) MemoryAccess.getByte(s1.segment, i + offset);\n@@ -69,1 +69,1 @@\n-                MemoryAccess.readByte(s2.segment, i);\n+                MemoryAccess.getByte(s2.segment, i);\n@@ -71,1 +71,1 @@\n-                    MemoryAccess.readByte(s1.segment, i + offset);\n+                    MemoryAccess.getByte(s1.segment, i + offset);\n@@ -128,1 +128,1 @@\n-                MemoryAccess.writeByte(segment, i, (byte)i);\n+                MemoryAccess.setByte(segment, i, (byte)i);\n","filename":"test\/jdk\/java\/foreign\/TestRebase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        MemoryAccess.readInt(memorySegment, offset);\n+        MemoryAccess.getInt(memorySegment, offset);\n@@ -117,1 +117,1 @@\n-        MemoryAccess.readInt(memorySegment, offset);\n+        MemoryAccess.getInt(memorySegment, offset);\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        assertEquals(MemoryAccess.readInt(segment, 0), 42);\n+        assertEquals(MemoryAccess.getInt(segment, 0), 42);\n","filename":"test\/jdk\/java\/foreign\/TestSymbolLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            MemoryAccess.writeByte(segment, i, ((byte)RANDOM.nextInt()));\n+            MemoryAccess.setByte(segment, i, ((byte)RANDOM.nextInt()));\n","filename":"test\/jdk\/java\/foreign\/channels\/AbstractChannelsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-                MemoryAccess.writeByte(segment1, i, (byte) i);\n+                MemoryAccess.setByte(segment1, i, (byte) i);\n","filename":"test\/jdk\/java\/foreign\/channels\/TestAsyncSocketChannels.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-                MemoryAccess.writeByte(segment1, i, (byte) i);\n+                MemoryAccess.setByte(segment1, i, (byte) i);\n@@ -123,1 +123,1 @@\n-                MemoryAccess.writeByte(segment1, i, (byte) i);\n+                MemoryAccess.setByte(segment1, i, (byte) i);\n","filename":"test\/jdk\/java\/foreign\/channels\/TestSocketChannels.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-        MemoryAccess.writeInt(seg, 0, 42);\n-        assertEquals(MemoryAccess.readInt(seg, 0), 42);\n+        MemoryAccess.setInt(seg, 0, 42);\n+        assertEquals(MemoryAccess.getInt(seg, 0), 42);\n","filename":"test\/jdk\/java\/foreign\/malloc\/TestMixedMallocFree.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-                    return MemoryAccess.readInt(MemorySegment.globalNativeSegment(), ma.toRawLongValue());\n+                    return MemoryAccess.getInt(MemorySegment.globalNativeSegment(), ma.toRawLongValue());\n@@ -242,1 +242,1 @@\n-            MemoryAccess.writeInt(msInt, 0, 10);\n+            MemoryAccess.setInt(msInt, 0, 10);\n@@ -491,1 +491,1 @@\n-                    MemoryAccess.writeLong(longSum, 0, lSum);\n+                    MemoryAccess.setLong(longSum, 0, lSum);\n@@ -496,1 +496,1 @@\n-                    MemoryAccess.writeDouble(doubleSum, 0, dSum);\n+                    MemoryAccess.setDouble(doubleSum, 0, dSum);\n@@ -522,2 +522,2 @@\n-            MemoryAccess.writeLong(longSum, 0, 0L);\n-            MemoryAccess.writeDouble(doubleSum, 0, 0D);\n+            MemoryAccess.setLong(longSum, 0, 0L);\n+            MemoryAccess.setDouble(doubleSum, 0, 0D);\n@@ -540,2 +540,2 @@\n-            long lSum = MemoryAccess.readLong(longSum, 0);\n-            double dSum = MemoryAccess.readDouble(doubleSum, 0);\n+            long lSum = MemoryAccess.getLong(longSum, 0);\n+            double dSum = MemoryAccess.getDouble(doubleSum, 0);\n@@ -753,1 +753,1 @@\n-                    int x = MemoryAccess.readInt(ms, 0);\n+                    int x = MemoryAccess.getInt(ms, 0);\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-            res += MemoryAccess.readInt(segment, i * CARRIER_SIZE);\n+            res += MemoryAccess.getInt(segment, i * CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            MemoryAccess.writeDouble(segmentIn, i * CARRIER_SIZE, i);\n+            MemoryAccess.setDouble(segmentIn, i * CARRIER_SIZE, i);\n@@ -81,1 +81,1 @@\n-            MemoryAccess.writeDouble(segmentOut, i * CARRIER_SIZE, i);\n+            MemoryAccess.setDouble(segmentOut, i * CARRIER_SIZE, i);\n@@ -115,3 +115,3 @@\n-            MemoryAccess.writeDouble(segmentOut, i * CARRIER_SIZE,\n-                    MemoryAccess.readDouble(segmentIn, i * CARRIER_SIZE) +\n-                    MemoryAccess.readDouble(segmentOut, i * CARRIER_SIZE));\n+            MemoryAccess.setDouble(segmentOut, i * CARRIER_SIZE,\n+                    MemoryAccess.getDouble(segmentIn, i * CARRIER_SIZE) +\n+                    MemoryAccess.getDouble(segmentOut, i * CARRIER_SIZE));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantFP.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -84,5 +84,5 @@\n-                MemoryAccess.writeByte(intB, i, (byte)i);\n-                MemoryAccess.writeInt(intI, i * 4, i);\n-                MemoryAccess.writeDouble(intD, i * 8, i);\n-                MemoryAccess.writeFloat(intF, i * 4, i);\n-                MemoryAccess.writeByte(s, i, (byte) i);\n+                MemoryAccess.setByte(intB, i, (byte)i);\n+                MemoryAccess.setInt(intI, i * 4, i);\n+                MemoryAccess.setDouble(intD, i * 8, i);\n+                MemoryAccess.setFloat(intF, i * 4, i);\n+                MemoryAccess.setByte(s, i, (byte) i);\n@@ -140,1 +140,1 @@\n-            res += MemoryAccess.readInt(segment, i * CARRIER_SIZE);\n+            res += MemoryAccess.getInt(segment, i * CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-            res += MemoryAccess.readInt(segment, i * CARRIER_SIZE);\n+            res += MemoryAccess.getInt(segment, i * CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantMapped.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-            res += MemoryAccess.readInt(segment, i * CARRIER_SIZE);\n+            res += MemoryAccess.getInt(segment, i * CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantShared.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-                MemoryAccess.writeInt(nativeSegment, i * CARRIER_SIZE, i);\n-                MemoryAccess.writeFloat(nativeSegment, i * CARRIER_SIZE, i);\n+                MemoryAccess.setInt(nativeSegment, i * CARRIER_SIZE, i);\n+                MemoryAccess.setFloat(nativeSegment, i * CARRIER_SIZE, i);\n@@ -85,2 +85,2 @@\n-                MemoryAccess.writeInt(heapSegmentBytes, i * CARRIER_SIZE, i);\n-                MemoryAccess.writeFloat(heapSegmentBytes, i * CARRIER_SIZE, i);\n+                MemoryAccess.setInt(heapSegmentBytes, i * CARRIER_SIZE, i);\n+                MemoryAccess.setFloat(heapSegmentBytes, i * CARRIER_SIZE, i);\n@@ -88,2 +88,2 @@\n-                MemoryAccess.writeInt(heapSegmentFloats, i * CARRIER_SIZE, i);\n-                MemoryAccess.writeFloat(heapSegmentFloats, i * CARRIER_SIZE, i);\n+                MemoryAccess.setInt(heapSegmentFloats, i * CARRIER_SIZE, i);\n+                MemoryAccess.setFloat(heapSegmentFloats, i * CARRIER_SIZE, i);\n@@ -119,2 +119,2 @@\n-            MemoryAccess.writeInt(nativeSegment, k * CARRIER_SIZE, k + 1);\n-            int v = MemoryAccess.readInt(nativeSegment, k * CARRIER_SIZE);\n+            MemoryAccess.setInt(nativeSegment, k * CARRIER_SIZE, k + 1);\n+            int v = MemoryAccess.getInt(nativeSegment, k * CARRIER_SIZE);\n@@ -141,2 +141,2 @@\n-            MemoryAccess.writeInt(heapSegmentBytes, k * CARRIER_SIZE, k + 1);\n-            int v = MemoryAccess.readInt(heapSegmentBytes, k * CARRIER_SIZE);\n+            MemoryAccess.setInt(heapSegmentBytes, k * CARRIER_SIZE, k + 1);\n+            int v = MemoryAccess.getInt(heapSegmentBytes, k * CARRIER_SIZE);\n@@ -163,2 +163,2 @@\n-            MemoryAccess.writeInt(heapSegmentFloats, k * CARRIER_SIZE, k + 1);\n-            int v = MemoryAccess.readInt(heapSegmentFloats, k * CARRIER_SIZE);\n+            MemoryAccess.setInt(heapSegmentFloats, k * CARRIER_SIZE, k + 1);\n+            int v = MemoryAccess.getInt(heapSegmentFloats, k * CARRIER_SIZE);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverPollutedSegments.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        return MemoryAccess.readInt(MemorySegment.globalNativeSegment(), addr.toRawLongValue());\n+        return MemoryAccess.getInt(MemorySegment.globalNativeSegment(), addr.toRawLongValue());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/QSort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-        MemoryAccess.writeByte(str, len, (byte)0);\n+        MemoryAccess.setByte(str, len, (byte)0);\n@@ -162,1 +162,1 @@\n-        MemoryAccess.writeByte(str, len, (byte)0);\n+        MemoryAccess.setByte(str, len, (byte)0);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/StrLenTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-            var v = MemoryAccess.readByte(srcSegmentImplicit, i);\n+            var v = MemoryAccess.getByte(srcSegmentImplicit, i);\n@@ -126,1 +126,1 @@\n-            var v = MemoryAccess.readByte(srcSegmentImplicit, i);\n+            var v = MemoryAccess.getByte(srcSegmentImplicit, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestLoadBytes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -104,4 +104,4 @@\n-            writeLong(os, i * 8, readLong(is, i * 8) + readLong(os, i * 8));\n-            writeLong(os, (i+1) * 8, readLong(is, (i+1) * 8) + readLong(os, (i+1) * 8));\n-            writeLong(os, (i+2) * 8, readLong(is, (i+2) * 8) + readLong(os, (i+2) * 8));\n-            writeLong(os, (i+3) * 8, readLong(is, (i+3)* 8) + readLong(os, (i+3) * 8));\n+            setLong(os, i * 8, getLong(is, i * 8) + getLong(os, i * 8));\n+            setLong(os, (i+1) * 8, getLong(is, (i+1) * 8) + getLong(os, (i+1) * 8));\n+            setLong(os, (i+2) * 8, getLong(is, (i+2) * 8) + getLong(os, (i+2) * 8));\n+            setLong(os, (i+3) * 8, getLong(is, (i+3)* 8) + getLong(os, (i+3) * 8));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/UnrolledAccess.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -235,2 +235,2 @@\n-      var v = MemoryAccess.readByte(srcSegmentImplicit, i);\n-      MemoryAccess.writeByte(dstSegmentImplicit, i, v);\n+      var v = MemoryAccess.getByte(srcSegmentImplicit, i);\n+      MemoryAccess.setByte(dstSegmentImplicit, i, v);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}