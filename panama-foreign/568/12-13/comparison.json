{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.vm.annotation.DontInline;\n@@ -32,0 +33,2 @@\n+import jdk.internal.vm.annotation.Stable;\n+import sun.invoke.util.Wrapper;\n@@ -663,2 +666,3 @@\n-        int dstBase = UNSAFE.arrayBaseOffset(dstArray.getClass());\n-        int dstWidth = UNSAFE.arrayIndexScale(dstArray.getClass());\n+        long baseAndScale = getBaseAndScale(dstArray.getClass());\n+        int dstBase = (int)baseAndScale;\n+        int dstWidth = (int)(baseAndScale >> 32);\n@@ -717,2 +721,3 @@\n-        int srcBase = UNSAFE.arrayBaseOffset(srcArray.getClass());\n-        int srcWidth = UNSAFE.arrayIndexScale(srcArray.getClass());\n+        long baseAndScale = getBaseAndScale(srcArray.getClass());\n+        int srcBase = (int)baseAndScale;\n+        int srcWidth = (int)(baseAndScale >> 32);\n@@ -732,0 +737,20 @@\n+\n+    static long getBaseAndScale(Class<?> arrayType) {\n+        if (arrayType.equals(byte[].class)) {\n+            return (long)Unsafe.ARRAY_BYTE_BASE_OFFSET | ((long)Unsafe.ARRAY_BYTE_INDEX_SCALE << 32);\n+        } else if (arrayType.equals(char[].class)) {\n+            return (long)Unsafe.ARRAY_CHAR_BASE_OFFSET | ((long)Unsafe.ARRAY_CHAR_INDEX_SCALE << 32);\n+        } else if (arrayType.equals(short[].class)) {\n+            return (long)Unsafe.ARRAY_SHORT_BASE_OFFSET | ((long)Unsafe.ARRAY_SHORT_INDEX_SCALE << 32);\n+        } else if (arrayType.equals(int[].class)) {\n+            return (long)Unsafe.ARRAY_INT_BASE_OFFSET | ((long)Unsafe.ARRAY_INT_INDEX_SCALE << 32);\n+        } else if (arrayType.equals(float[].class)) {\n+            return (long)Unsafe.ARRAY_FLOAT_BASE_OFFSET | ((long)Unsafe.ARRAY_FLOAT_INDEX_SCALE << 32);\n+        } else if (arrayType.equals(long[].class)) {\n+            return (long)Unsafe.ARRAY_LONG_BASE_OFFSET | ((long)Unsafe.ARRAY_LONG_INDEX_SCALE << 32);\n+        } else if (arrayType.equals(double[].class)) {\n+            return (long)Unsafe.ARRAY_DOUBLE_BASE_OFFSET | ((long)Unsafe.ARRAY_DOUBLE_INDEX_SCALE << 32);\n+        } else {\n+            throw new IllegalStateException();\n+        }\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Setup;\n@@ -37,0 +38,1 @@\n+import org.openjdk.jmh.annotations.TearDown;\n@@ -42,1 +44,1 @@\n-import java.nio.ByteOrder;\n+import java.nio.IntBuffer;\n@@ -61,2 +63,1 @@\n-    static final long unsafe_addr = unsafe.allocateMemory(ALLOC_SIZE);\n-    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.newConfinedScope());\n+    final ResourceScope scope = ResourceScope.newConfinedScope();\n@@ -64,3 +65,7 @@\n-    static final int[] bytes = new int[ELEM_SIZE];\n-    static final MemorySegment bytesSegment = MemorySegment.ofArray(bytes);\n-    static final int UNSAFE_INT_OFFSET = unsafe.arrayBaseOffset(int[].class);\n+    final long unsafe_addr = unsafe.allocateMemory(ALLOC_SIZE);\n+    final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE, ResourceScope.newConfinedScope());\n+    final IntBuffer buffer = IntBuffer.allocate(ELEM_SIZE);\n+\n+    final int[] bytes = new int[ELEM_SIZE];\n+    final MemorySegment bytesSegment = MemorySegment.ofArray(bytes);\n+    final int UNSAFE_INT_OFFSET = unsafe.arrayBaseOffset(int[].class);\n@@ -70,4 +75,4 @@\n-    static final MemorySegment mismatchSegmentLarge1 = MemorySegment.allocateNative(SIZE_WITH_TAIL, ResourceScope.newConfinedScope());\n-    static final MemorySegment mismatchSegmentLarge2 = MemorySegment.allocateNative(SIZE_WITH_TAIL, ResourceScope.newConfinedScope());\n-    static final ByteBuffer mismatchBufferLarge1 = ByteBuffer.allocateDirect(SIZE_WITH_TAIL);\n-    static final ByteBuffer mismatchBufferLarge2 = ByteBuffer.allocateDirect(SIZE_WITH_TAIL);\n+    final MemorySegment mismatchSegmentLarge1 = MemorySegment.allocateNative(SIZE_WITH_TAIL, scope);\n+    final MemorySegment mismatchSegmentLarge2 = MemorySegment.allocateNative(SIZE_WITH_TAIL, scope);\n+    final ByteBuffer mismatchBufferLarge1 = ByteBuffer.allocateDirect(SIZE_WITH_TAIL);\n+    final ByteBuffer mismatchBufferLarge2 = ByteBuffer.allocateDirect(SIZE_WITH_TAIL);\n@@ -76,5 +81,7 @@\n-    static final MemorySegment mismatchSegmentSmall1 = MemorySegment.allocateNative(7, ResourceScope.newConfinedScope());\n-    static final MemorySegment mismatchSegmentSmall2 = MemorySegment.allocateNative(7, ResourceScope.newConfinedScope());\n-    static final ByteBuffer mismatchBufferSmall1 = ByteBuffer.allocateDirect(7);\n-    static final ByteBuffer mismatchBufferSmall2 = ByteBuffer.allocateDirect(7);\n-    static {\n+    final MemorySegment mismatchSegmentSmall1 = MemorySegment.allocateNative(7, scope);\n+    final MemorySegment mismatchSegmentSmall2 = MemorySegment.allocateNative(7, scope);\n+    final ByteBuffer mismatchBufferSmall1 = ByteBuffer.allocateDirect(7);\n+    final ByteBuffer mismatchBufferSmall2 = ByteBuffer.allocateDirect(7);\n+\n+    @Setup\n+    public void setup() {\n@@ -96,1 +103,0 @@\n-    }\n@@ -98,1 +104,0 @@\n-    static {\n@@ -104,0 +109,5 @@\n+    @TearDown\n+    public void tearDown() {\n+        scope.close();\n+    }\n+\n@@ -134,0 +144,31 @@\n+    @Benchmark\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public void segment_copy_static_small() {\n+        MemoryAccess.copy(bytes, 0, segment, 0, 10);\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public void segment_copy_static_small_dontinline() {\n+        MemoryAccess.copy(bytes, 0, segment, 0, 10);\n+    }\n+\n+    @Benchmark\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public void unsafe_copy_small() {\n+        unsafe.copyMemory(bytes, UNSAFE_INT_OFFSET, null, unsafe_addr, 10 * CARRIER_SIZE);\n+    }\n+\n+    @Benchmark\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public void buffer_copy_small() {\n+        buffer.put(0, bytes, 0, 10);\n+    }\n+\n+    @Benchmark\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public void buffer_copy() {\n+        buffer.put(0, bytes, 0, bytes.length);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/BulkOps.java","additions":58,"deletions":17,"binary":false,"changes":75,"status":"modified"}]}