{"files":[{"patch":"@@ -96,0 +96,5 @@\n+     * Calling {@link MemorySegment#close()} on the returned segment will <em>not<\/em> result in releasing any\n+     * memory resources which might implicitly be associated with the segment. If the client wants to specify\n+     * a cleanup action to be executed when the returned segment is closed, the {@link MemorySegment#withCleanupAction(Runnable)}\n+     * method should be used.\n+     * <p>\n@@ -108,0 +113,1 @@\n+        Utils.checkRestrictedAccess(\"MemoryAddress.asSegmentRestricted\");\n@@ -111,1 +117,0 @@\n-        Utils.checkRestrictedAccess(\"MemoryAddress.ofSegmentRestricted\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-     * this segment. Any exception thrown by the user-provided action will be discarded, and will not prevent the\n+     * this segment (if any). Any errors and\/or exceptions thrown by the user-provided action will be discarded, and will not prevent the\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}