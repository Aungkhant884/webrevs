{"files":[{"patch":"@@ -244,2 +244,2 @@\n-    StructBuilder newStructBuilder(String name, String parentLayoutFieldName, MemoryLayout parentLayout, Type type) {\n-        return new StructBuilder(this, name, parentLayoutFieldName, parentLayout, type);\n+    StructBuilder newStructBuilder(String name, MemoryLayout parentLayout, Type type) {\n+        return new StructBuilder(this, name, parentLayout, type);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/JavaSourceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    private final JavaSourceBuilder enclosing;\n+    protected final JavaSourceBuilder enclosing;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/NestedClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,3 +201,1 @@\n-                    String parentLayoutFieldName = className + \"$struct\";\n-                    currentBuilder = currentBuilder.newStructBuilder(className, parentLayoutFieldName,\n-                            parentLayout, Type.declared(d));\n+                    currentBuilder = currentBuilder.newStructBuilder(className, parentLayout, Type.declared(d));\n@@ -206,1 +204,1 @@\n-                    currentBuilder.addLayoutGetter(parentLayoutFieldName, d.layout().get());\n+                    currentBuilder.addLayoutGetter(((StructBuilder)currentBuilder).layoutField(), d.layout().get());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.incubator.foreign.GroupLayout;\n@@ -37,1 +38,0 @@\n-    private final String parentLayoutFieldName;\n@@ -44,2 +44,1 @@\n-    StructBuilder(JavaSourceBuilder enclosing, String className, String parentLayoutFieldName,\n-                  MemoryLayout parentLayout, Type structType) {\n+    StructBuilder(JavaSourceBuilder enclosing, String className, MemoryLayout parentLayout, Type structType) {\n@@ -47,1 +46,0 @@\n-        this.parentLayoutFieldName = parentLayoutFieldName;\n@@ -74,1 +72,1 @@\n-        return className + \"$\" + fieldName;\n+        return qualifiedName(this) + \"$\" + fieldName;\n@@ -79,1 +77,1 @@\n-        var desc = constantHelper.addFieldVarHandle(getQualifiedName(javaName), nativeName, layout, type, parentLayoutFieldName, parentLayout);\n+        var desc = constantHelper.addFieldVarHandle(getQualifiedName(javaName), nativeName, layout, type, layoutField(), parentLayout);\n@@ -280,1 +278,19 @@\n-        return getCallString(constantHelper.addFieldVarHandle(javaName, nativeName, layout, type, parentLayoutFieldName, parentLayout));\n+        return getCallString(constantHelper.addFieldVarHandle(javaName, nativeName, layout, type, layoutField(), parentLayout));\n+    }\n+\n+    private String qualifiedName(JavaSourceBuilder builder) {\n+        if (builder instanceof NestedClassBuilder) {\n+            NestedClassBuilder nestedClassBuilder = (NestedClassBuilder)builder;\n+            String prefix = qualifiedName(nestedClassBuilder.enclosing);\n+            return prefix.isEmpty() ?\n+                    nestedClassBuilder.className :\n+                    prefix + \"$\" + nestedClassBuilder.className;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    String layoutField() {\n+        GroupLayout groupLayout = (GroupLayout)parentLayout;\n+        String suffix = groupLayout.isUnion() ? \"union\" : \"struct\";\n+        return qualifiedName(this) + \"$\" + suffix;\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.incubator.foreign.MemorySegment;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+import static test.jextract.test8254983.test8254983_h.*;\n+\n+\/*\n+ * @test id=classes\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @bug 8254983\n+ * @summary jextract fails to hande layout paths nested structs\/union\n+ * @run driver JtregJextract -t test.jextract.test8254983 -- test8254983.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibTest8254983Test\n+ *\/\n+\/*\n+ * @test id=sources\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ * @bug 8254983\n+ * @summary jextract fails to hande layout paths nested structs\/union\n+ * @run driver JtregJextractSources -t test.jextract.test8254983 -- test8254983.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibTest8254983Test\n+ *\/\n+public class LibTest8254983Test {\n+    @Test\n+    public void testOuterStruct() {\n+        MemorySegment str = Foo._struct.allocate();\n+        Foo._struct.x$set(str, 42);\n+        assertEquals(Foo._struct.x$get(str), 42);\n+    }\n+\n+    @Test\n+    public void testInnerStruct() {\n+        MemorySegment str = Foo._union._struct.allocate();\n+        Foo._union._struct.x$set(str, 42);\n+        assertEquals(Foo._union._struct.x$get(str), 42);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/test8254983\/LibTest8254983Test.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+struct Foo {\n+   struct {\n+       int x;\n+   } _struct;\n+\n+   union {\n+       struct {\n+           int x;\n+       } _struct;\n+   } _union;\n+};\n","filename":"test\/jdk\/tools\/jextract\/test8254983\/test8254983.h","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"}]}