{"files":[{"patch":"@@ -97,0 +97,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -98,0 +99,1 @@\n+    @ForceInline\n@@ -109,0 +111,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -110,0 +113,1 @@\n+    @ForceInline\n@@ -125,0 +129,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -126,0 +131,1 @@\n+    @ForceInline\n@@ -140,0 +146,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -141,0 +148,1 @@\n+    @ForceInline\n@@ -155,0 +163,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -156,0 +165,1 @@\n+    @ForceInline\n@@ -170,0 +180,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -171,0 +182,1 @@\n+    @ForceInline\n@@ -185,0 +197,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -186,0 +199,1 @@\n+    @ForceInline\n@@ -200,0 +214,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -201,0 +216,1 @@\n+    @ForceInline\n@@ -215,0 +231,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -216,0 +233,1 @@\n+    @ForceInline\n@@ -230,0 +248,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -231,0 +250,1 @@\n+    @ForceInline\n@@ -245,0 +265,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -246,0 +267,1 @@\n+    @ForceInline\n@@ -260,0 +282,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -261,0 +284,1 @@\n+    @ForceInline\n@@ -275,0 +299,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -276,0 +301,1 @@\n+    @ForceInline\n@@ -290,0 +316,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -291,0 +318,1 @@\n+    @ForceInline\n@@ -306,0 +334,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -307,0 +336,1 @@\n+    @ForceInline\n@@ -323,0 +353,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code value == null}.\n@@ -324,0 +355,1 @@\n+    @ForceInline\n@@ -342,0 +374,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -343,0 +376,1 @@\n+    @ForceInline\n@@ -361,0 +395,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -362,0 +397,1 @@\n+    @ForceInline\n@@ -380,0 +416,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -381,0 +418,1 @@\n+    @ForceInline\n@@ -399,0 +437,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -400,0 +439,1 @@\n+    @ForceInline\n@@ -418,0 +458,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -419,0 +460,1 @@\n+    @ForceInline\n@@ -437,0 +479,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -438,0 +481,1 @@\n+    @ForceInline\n@@ -456,0 +500,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -457,0 +502,1 @@\n+    @ForceInline\n@@ -475,0 +521,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -476,0 +523,1 @@\n+    @ForceInline\n@@ -494,0 +542,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -495,0 +544,1 @@\n+    @ForceInline\n@@ -513,0 +563,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -514,0 +565,1 @@\n+    @ForceInline\n@@ -532,0 +584,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -533,0 +586,1 @@\n+    @ForceInline\n@@ -551,0 +605,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -552,0 +607,1 @@\n+    @ForceInline\n@@ -568,0 +624,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -569,0 +626,1 @@\n+    @ForceInline\n@@ -582,0 +640,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -583,0 +642,1 @@\n+    @ForceInline\n@@ -596,0 +656,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -597,0 +658,1 @@\n+    @ForceInline\n@@ -610,0 +672,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -611,0 +674,1 @@\n+    @ForceInline\n@@ -624,0 +688,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -625,0 +690,1 @@\n+    @ForceInline\n@@ -638,0 +704,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -639,0 +706,1 @@\n+    @ForceInline\n@@ -652,0 +720,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -653,0 +722,1 @@\n+    @ForceInline\n@@ -666,0 +736,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -667,0 +738,1 @@\n+    @ForceInline\n@@ -680,0 +752,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -681,0 +754,1 @@\n+    @ForceInline\n@@ -694,0 +768,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -695,0 +770,1 @@\n+    @ForceInline\n@@ -708,0 +784,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -709,0 +786,1 @@\n+    @ForceInline\n@@ -722,0 +800,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -723,0 +802,1 @@\n+    @ForceInline\n@@ -736,0 +816,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -737,0 +818,1 @@\n+    @ForceInline\n@@ -750,0 +832,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -751,0 +834,1 @@\n+    @ForceInline\n@@ -764,0 +848,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -765,0 +850,1 @@\n+    @ForceInline\n@@ -778,0 +864,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code value == null}.\n@@ -779,0 +866,1 @@\n+    @ForceInline\n@@ -793,0 +881,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -794,0 +883,1 @@\n+    @ForceInline\n@@ -808,0 +898,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -809,0 +900,1 @@\n+    @ForceInline\n@@ -823,0 +915,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -824,0 +917,1 @@\n+    @ForceInline\n@@ -838,0 +932,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -839,0 +934,1 @@\n+    @ForceInline\n@@ -853,0 +949,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -854,0 +951,1 @@\n+    @ForceInline\n@@ -868,0 +966,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -869,0 +968,1 @@\n+    @ForceInline\n@@ -883,0 +983,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -884,0 +985,1 @@\n+    @ForceInline\n@@ -898,0 +1000,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -899,0 +1002,1 @@\n+    @ForceInline\n@@ -913,0 +1017,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -914,0 +1019,1 @@\n+    @ForceInline\n@@ -928,0 +1034,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -929,0 +1036,1 @@\n+    @ForceInline\n@@ -943,0 +1051,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -944,0 +1053,1 @@\n+    @ForceInline\n@@ -958,0 +1068,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -959,0 +1070,1 @@\n+    @ForceInline\n@@ -973,0 +1085,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -974,0 +1087,1 @@\n+    @ForceInline\n@@ -988,0 +1102,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -989,0 +1104,1 @@\n+    @ForceInline\n@@ -1003,0 +1119,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1004,0 +1121,1 @@\n+    @ForceInline\n@@ -1018,0 +1136,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1019,0 +1138,1 @@\n+    @ForceInline\n@@ -1033,0 +1153,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1034,0 +1155,1 @@\n+    @ForceInline\n@@ -1048,0 +1170,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1049,0 +1172,1 @@\n+    @ForceInline\n@@ -1063,0 +1187,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1064,0 +1189,1 @@\n+    @ForceInline\n@@ -1078,0 +1204,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1079,0 +1206,1 @@\n+    @ForceInline\n@@ -1093,0 +1221,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1094,0 +1223,1 @@\n+    @ForceInline\n@@ -1108,0 +1238,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1109,0 +1240,1 @@\n+    @ForceInline\n@@ -1123,0 +1255,1 @@\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1124,0 +1257,1 @@\n+    @ForceInline\n@@ -1138,0 +1272,1 @@\n+<<<<<<< HEAD\n@@ -1139,0 +1274,5 @@\n+=======\n+     * @throws NullPointerException if {@code segment == null}.\n+     *\/\n+    @ForceInline\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -1153,0 +1293,4 @@\n+<<<<<<< HEAD\n+     *\/\n+=======\n+     * @throws NullPointerException if {@code segment == null}.\n@@ -1154,0 +1298,2 @@\n+    @ForceInline\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -1168,0 +1314,4 @@\n+<<<<<<< HEAD\n+     *\/\n+=======\n+     * @throws NullPointerException if {@code segment == null}, or if {@code value == null}.\n@@ -1169,0 +1319,2 @@\n+    @ForceInline\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -1184,0 +1336,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1185,0 +1338,1 @@\n+    @ForceInline\n@@ -1200,0 +1354,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1201,0 +1356,1 @@\n+    @ForceInline\n@@ -1216,0 +1372,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1217,0 +1374,1 @@\n+    @ForceInline\n@@ -1232,0 +1390,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1233,0 +1392,1 @@\n+    @ForceInline\n@@ -1248,0 +1408,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1249,0 +1410,1 @@\n+    @ForceInline\n@@ -1264,0 +1426,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1265,0 +1428,1 @@\n+    @ForceInline\n@@ -1280,0 +1444,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1281,0 +1446,1 @@\n+    @ForceInline\n@@ -1296,0 +1462,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1297,0 +1464,1 @@\n+    @ForceInline\n@@ -1312,0 +1480,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1313,0 +1482,1 @@\n+    @ForceInline\n@@ -1328,0 +1498,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1329,0 +1500,1 @@\n+    @ForceInline\n@@ -1344,0 +1516,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1345,0 +1518,1 @@\n+    @ForceInline\n@@ -1360,0 +1534,1 @@\n+     * @throws NullPointerException if {@code segment == null}, or if {@code order == null}.\n@@ -1361,0 +1536,1 @@\n+    @ForceInline\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+<<<<<<< HEAD\n@@ -30,0 +31,5 @@\n+=======\n+import jdk.incubator.foreign.MemoryHandles;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -56,0 +62,4 @@\n+    public static final MethodHandle MH_bitsToBytesOrThrowForOffset;\n+\n+    public static final Supplier<RuntimeException> bitsToBytesThrowOffset\n+        = () -> new UnsupportedOperationException(\"Cannot compute byte offset; bit offset is not a multiple of 8\");\n@@ -59,1 +69,2 @@\n-            SEGMENT_FILTER = MethodHandles.lookup().findStatic(Utils.class, \"filterSegment\",\n+            MethodHandles.Lookup lookup = MethodHandles.lookup();\n+            SEGMENT_FILTER = lookup.findStatic(Utils.class, \"filterSegment\",\n@@ -61,0 +72,5 @@\n+            MH_bitsToBytesOrThrowForOffset = MethodHandles.insertArguments(\n+                lookup.findStatic(Utils.class, \"bitsToBytesOrThrow\",\n+                    MethodType.methodType(long.class, long.class, Supplier.class)),\n+                1,\n+                bitsToBytesThrowOffset);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -38,0 +38,3 @@\n+import java.lang.invoke.MethodHandle;\n+import java.nio.ByteOrder;\n+import java.util.ArrayList;\n@@ -40,0 +43,3 @@\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.groupElement;\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.sequenceElement;\n+import static jdk.incubator.foreign.MemoryLayouts.JAVA_INT;\n@@ -46,1 +52,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n@@ -52,1 +58,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n@@ -58,2 +64,2 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT);\n-        g.bitOffset(PathElement.sequenceElement());\n+        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        g.bitOffset(sequenceElement());\n@@ -64,2 +70,2 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT);\n-        g.byteOffset(PathElement.sequenceElement());\n+        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        g.byteOffset(sequenceElement());\n@@ -70,2 +76,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);\n-        seq.bitOffset(PathElement.sequenceElement(), PathElement.sequenceElement());\n+        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n+        seq.bitOffset(sequenceElement(), sequenceElement());\n@@ -76,2 +82,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);\n-        seq.byteOffset(PathElement.sequenceElement(), PathElement.sequenceElement());\n+        SequenceLayout seq = MemoryLayout.ofSequence(JAVA_INT);\n+        seq.byteOffset(sequenceElement(), sequenceElement());\n@@ -82,1 +88,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT);\n+        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n@@ -88,1 +94,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT);\n+        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n@@ -92,0 +98,20 @@\n+<<<<<<< HEAD\n+=======\n+    @Test(expectedExceptions = NullPointerException.class)\n+    public void testNullGroupElementName() {\n+        PathElement.groupElement(null);\n+    }\n+\n+    @Test(expectedExceptions = NullPointerException.class)\n+    public void testBitNullGroupElementName() {\n+        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        g.bitOffset(PathElement.groupElement(null));\n+    }\n+\n+    @Test(expectedExceptions = NullPointerException.class)\n+    public void testByteNullGroupElementName() {\n+        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT);\n+        g.byteOffset(PathElement.groupElement(null));\n+    }\n+\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -94,2 +120,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT);\n-        seq.bitOffset(PathElement.sequenceElement(6));\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        seq.bitOffset(sequenceElement(6));\n@@ -100,2 +126,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT);\n-        seq.byteOffset(PathElement.sequenceElement(6));\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        seq.byteOffset(sequenceElement(6));\n@@ -106,1 +132,1 @@\n-       PathElement.sequenceElement(-2);\n+       sequenceElement(-2);\n@@ -111,2 +137,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT);\n-        seq.bitOffset(PathElement.sequenceElement(-2));\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        seq.bitOffset(sequenceElement(-2));\n@@ -117,2 +143,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT);\n-        seq.byteOffset(PathElement.sequenceElement(-2));\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        seq.byteOffset(sequenceElement(-2));\n@@ -123,2 +149,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT);\n-        seq.bitOffset(PathElement.sequenceElement(6, 2));\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        seq.bitOffset(sequenceElement(6, 2));\n@@ -129,1 +155,1 @@\n-        PathElement.sequenceElement(-2, 2);\n+        sequenceElement(-2, 2);\n@@ -134,2 +160,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT);\n-        seq.bitOffset(PathElement.sequenceElement(-2, 2));\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        seq.bitOffset(sequenceElement(-2, 2));\n@@ -140,2 +166,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayouts.JAVA_INT);\n-        seq.byteOffset(PathElement.sequenceElement(-2, 2));\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, JAVA_INT);\n+        seq.byteOffset(sequenceElement(-2, 2));\n@@ -146,2 +172,14 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT));\n-        seq.varHandle(int.class, PathElement.sequenceElement());\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayout.ofStruct(JAVA_INT));\n+        seq.varHandle(int.class, sequenceElement());\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBitOffsetHandleBadRange() {\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayout.ofStruct(JAVA_INT));\n+        seq.bitOffsetHandle(sequenceElement(0, 1)); \/\/ ranges not accepted\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testByteOffsetHandleBadRange() {\n+        SequenceLayout seq = MemoryLayout.ofSequence(5, MemoryLayout.ofStruct(JAVA_INT));\n+        seq.byteOffsetHandle(sequenceElement(0, 1)); \/\/ ranges not accepted\n@@ -152,1 +190,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(3), MemoryLayouts.JAVA_INT.withName(\"foo\"));\n+        GroupLayout g = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(3), JAVA_INT.withName(\"foo\"));\n@@ -156,0 +194,37 @@\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testBitOffsetBadUnboundedSequenceTraverse() {\n+        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        layout.bitOffset(sequenceElement(1), sequenceElement(0));\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testByteOffsetBadUnboundedSequenceTraverse() {\n+        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        layout.byteOffset(sequenceElement(1), sequenceElement(0));\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testBitOffsetHandleBadUnboundedSequenceTraverse() {\n+        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        layout.bitOffsetHandle(sequenceElement(1), sequenceElement(0));\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testByteOffsetHandleBadUnboundedSequenceTraverse() {\n+        MemoryLayout layout = MemoryLayout.ofSequence(MemoryLayout.ofSequence(JAVA_INT));\n+        layout.byteOffsetHandle(sequenceElement(1), sequenceElement(0));\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testBadByteOffsetNoMultipleOf8() {\n+        MemoryLayout layout = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(7), JAVA_INT.withName(\"x\"));\n+        layout.byteOffset(groupElement(\"x\"));\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testBadByteOffsetHandleNoMultipleOf8() throws Throwable {\n+        MemoryLayout layout = MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(7), JAVA_INT.withName(\"x\"));\n+        MethodHandle handle = layout.byteOffsetHandle(groupElement(\"x\"));\n+        handle.invoke();\n+    }\n+\n@@ -158,1 +233,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT.withBitAlignment(16).withName(\"foo\")).withBitAlignment(8);\n+        GroupLayout g = MemoryLayout.ofStruct(JAVA_INT.withBitAlignment(16).withName(\"foo\")).withBitAlignment(8);\n@@ -177,1 +252,1 @@\n-        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.PAD_8, MemoryLayouts.JAVA_INT.withBitAlignment(16).withName(\"foo\"));\n+        GroupLayout g = MemoryLayout.ofStruct(MemoryLayouts.PAD_8, JAVA_INT.withBitAlignment(16).withName(\"foo\"));\n@@ -196,1 +271,1 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, MemoryLayouts.JAVA_INT);\n+        SequenceLayout seq = MemoryLayout.ofSequence(10, JAVA_INT);\n@@ -198,1 +273,1 @@\n-        for (PathElement e : List.of( PathElement.sequenceElement(), PathElement.sequenceElement(0, 2) )) {\n+        for (PathElement e : List.of( sequenceElement(), sequenceElement(0, 2) )) {\n@@ -216,2 +291,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, MemoryLayouts.JAVA_INT);\n-        for (PathElement e : List.of( PathElement.sequenceElement(0), PathElement.sequenceElement(0, 2) )) {\n+        SequenceLayout seq = MemoryLayout.ofSequence(10, JAVA_INT);\n+        for (PathElement e : List.of( sequenceElement(0), sequenceElement(0, 2) )) {\n@@ -229,2 +304,2 @@\n-        SequenceLayout seq = MemoryLayout.ofSequence(10, MemoryLayouts.JAVA_INT);\n-        for (PathElement e : List.of( PathElement.sequenceElement(0), PathElement.sequenceElement(0, 2) )) {\n+        SequenceLayout seq = MemoryLayout.ofSequence(10, JAVA_INT);\n+        for (PathElement e : List.of( sequenceElement(0), sequenceElement(0, 2) )) {\n@@ -329,1 +404,1 @@\n-        MemoryLayout selected = g.select(PathElement.sequenceElement());\n+        MemoryLayout selected = g.select(sequenceElement());\n@@ -335,1 +410,1 @@\n-            long bitOffset = g.bitOffset(PathElement.sequenceElement(i));\n+            long bitOffset = g.bitOffset(sequenceElement(i));\n@@ -337,1 +412,1 @@\n-            long byteOffset = g.byteOffset(PathElement.sequenceElement(i));\n+            long byteOffset = g.byteOffset(sequenceElement(i));\n@@ -343,1 +418,1 @@\n-        SequenceLayout seq2 = (SequenceLayout)g.map(l -> MemoryLayouts.JAVA_DOUBLE, PathElement.sequenceElement());\n+        SequenceLayout seq2 = (SequenceLayout)g.map(l -> MemoryLayouts.JAVA_DOUBLE, sequenceElement());\n@@ -346,0 +421,92 @@\n+\n+    @Test(dataProvider =  \"offsetHandleCases\")\n+    public void testOffsetHandle(MemoryLayout layout, PathElement[] pathElements, long[] indexes,\n+                                 long expectedBitOffset) throws Throwable {\n+        MethodHandle bitOffsetHandle = layout.bitOffsetHandle(pathElements);\n+        bitOffsetHandle = bitOffsetHandle.asSpreader(long[].class, indexes.length);\n+        long actualBitOffset = (long) bitOffsetHandle.invokeExact(indexes);\n+        assertEquals(actualBitOffset, expectedBitOffset);\n+        if (expectedBitOffset % 8 == 0) {\n+            MethodHandle byteOffsetHandle = layout.byteOffsetHandle(pathElements);\n+            byteOffsetHandle = byteOffsetHandle.asSpreader(long[].class, indexes.length);\n+            long actualByteOffset = (long) byteOffsetHandle.invokeExact(indexes);\n+            assertEquals(actualByteOffset, expectedBitOffset \/ 8);\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] offsetHandleCases() {\n+        List<Object[]> testCases = new ArrayList<>();\n+\n+        testCases.add(new Object[] {\n+            MemoryLayout.ofSequence(10, JAVA_INT),\n+            new PathElement[] { sequenceElement() },\n+            new long[] { 4 },\n+            JAVA_INT.bitSize() * 4\n+        });\n+        testCases.add(new Object[] {\n+            MemoryLayout.ofSequence(10, MemoryLayout.ofStruct(JAVA_INT, JAVA_INT.withName(\"y\"))),\n+            new PathElement[] { sequenceElement(), groupElement(\"y\") },\n+            new long[] { 4 },\n+            (JAVA_INT.bitSize() * 2) * 4 + JAVA_INT.bitSize()\n+        });\n+        testCases.add(new Object[] {\n+            MemoryLayout.ofSequence(10, MemoryLayout.ofStruct(MemoryLayout.ofPaddingBits(5), JAVA_INT.withName(\"y\"))),\n+            new PathElement[] { sequenceElement(), groupElement(\"y\") },\n+            new long[] { 4 },\n+            (JAVA_INT.bitSize() + 5) * 4 + 5\n+        });\n+        testCases.add(new Object[] {\n+            MemoryLayout.ofSequence(10, JAVA_INT),\n+            new PathElement[] { sequenceElement() },\n+            new long[] { 4 },\n+            JAVA_INT.bitSize() * 4\n+        });\n+        testCases.add(new Object[] {\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofSequence(10, JAVA_INT).withName(\"data\")\n+            ),\n+            new PathElement[] { groupElement(\"data\"), sequenceElement() },\n+            new long[] { 4 },\n+            JAVA_INT.bitSize() * 4\n+        });\n+\n+        MemoryLayout complexLayout = MemoryLayout.ofStruct(\n+            MemoryLayout.ofSequence(10,\n+                MemoryLayout.ofSequence(10,\n+                    MemoryLayout.ofStruct(\n+                        JAVA_INT.withName(\"x\"),\n+                        JAVA_INT.withName(\"y\")\n+                    )\n+                )\n+            ).withName(\"data\")\n+        );\n+\n+        testCases.add(new Object[] {\n+            complexLayout,\n+            new PathElement[] { groupElement(\"data\"), sequenceElement(), sequenceElement(), groupElement(\"x\") },\n+            new long[] { 0, 1 },\n+            (JAVA_INT.bitSize() * 2)\n+        });\n+        testCases.add(new Object[] {\n+            complexLayout,\n+            new PathElement[] { groupElement(\"data\"), sequenceElement(), sequenceElement(), groupElement(\"x\") },\n+            new long[] { 1, 0 },\n+            (JAVA_INT.bitSize() * 2) * 10\n+        });\n+        testCases.add(new Object[] {\n+            complexLayout,\n+            new PathElement[] { groupElement(\"data\"), sequenceElement(), sequenceElement(), groupElement(\"y\") },\n+            new long[] { 0, 1 },\n+            (JAVA_INT.bitSize() * 2) + JAVA_INT.bitSize()\n+        });\n+        testCases.add(new Object[] {\n+            complexLayout,\n+            new PathElement[] { groupElement(\"data\"), sequenceElement(), sequenceElement(), groupElement(\"y\") },\n+            new long[] { 1, 0 },\n+            (JAVA_INT.bitSize() * 2) * 10 + JAVA_INT.bitSize()\n+        });\n+\n+        return testCases.toArray(Object[][]::new);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":210,"deletions":43,"binary":false,"changes":253,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+<<<<<<< HEAD\n@@ -27,0 +28,2 @@\n+=======\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -41,0 +44,1 @@\n+<<<<<<< HEAD\n@@ -42,0 +46,2 @@\n+=======\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -51,0 +57,1 @@\n+<<<<<<< HEAD\n@@ -56,0 +63,4 @@\n+=======\n+import java.nio.file.Path;\n+import java.util.*;\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -87,0 +98,1 @@\n+<<<<<<< HEAD\n@@ -94,0 +106,3 @@\n+=======\n+            MemoryHandles.class\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -103,0 +118,1 @@\n+<<<<<<< HEAD\n@@ -105,0 +121,3 @@\n+=======\n+            \"jdk.incubator.foreign.MemoryHandles\/insertCoordinates(java.lang.invoke.VarHandle,int,java.lang.Object[])\/2\/1\"\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -140,0 +159,1 @@\n+<<<<<<< HEAD\n@@ -143,0 +163,2 @@\n+=======\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n@@ -150,0 +172,1 @@\n+<<<<<<< HEAD\n@@ -170,0 +193,2 @@\n+=======\n+>>>>>>> c51cb7c6b166e22cd157f09ec4b9039f822a9070\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}