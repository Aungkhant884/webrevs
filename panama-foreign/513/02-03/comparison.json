{"files":[{"patch":"@@ -105,1 +105,1 @@\n-     Returns a new native memory segment with given size and resource scope (possibly overriding the scope already associated\n+     Returns a new native memory segment with given size and resource scope (replacing the scope already associated\n@@ -130,0 +130,3 @@\n+     * @throws IllegalStateException if either the scope associated with this address or the provided scope\n+     * have been already closed, or if access occurs from a thread other than the thread owning either\n+     * scopes.\n@@ -135,1 +138,1 @@\n-     * Returns a new native memory segment with given size and resource scope (possibly overriding the scope already associated\n+     * Returns a new native memory segment with given size and resource scope (replacing the scope already associated\n@@ -158,0 +161,3 @@\n+     * @throws IllegalStateException if either the scope associated with this address or the provided scope\n+     * have been already closed, or if access occurs from a thread other than the thread owning either\n+     * scopes.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -113,0 +113,1 @@\n+            ScopedOperation.ofAddress(a -> a.asSegment(100, ResourceScope.globalScope()), \"MemoryAddress::asSegment\");\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}