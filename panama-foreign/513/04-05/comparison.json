{"files":[{"patch":"@@ -102,3 +102,1 @@\n-     * when {@code segment} models an heap memory region, while this address models an off-heap memory address, or\n-     * if the resource scope associated with this memory address is not the {@link ResourceScope#globalScope() global scope}\n-     * and if that scope is not the same as the one associated with {@code segment}.\n+     * when {@code segment} models an heap memory region, while this address models an off-heap memory address.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,3 +76,2 @@\n-        if (segmentImpl.base() != base() ||\n-                (scope() != ResourceScope.globalScope() && segmentImpl.scope() != scope())) {\n-            throw new IllegalArgumentException(\"Invalid segment: \" + segment);\n+        if (segmentImpl.base() != base()) {\n+            throw new IllegalArgumentException(\"Incompatible segment: \" + segment);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}