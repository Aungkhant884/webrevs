{"files":[{"patch":"@@ -2370,1 +2370,1 @@\n-     * If two memory segments obtained from the same {@linkplain #ofBuffer(Buffer) buffer}\n+     * If two memory segments are obtained from the same {@linkplain #ofBuffer(Buffer) buffer}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import sun.nio.ch.DirectBuffer;\n@@ -539,1 +540,1 @@\n-            bufferScope = MemorySessionImpl.createHeap(bb);\n+            bufferScope = MemorySessionImpl.createHeap(bufferRef(bb));\n@@ -567,0 +568,11 @@\n+    private static Object bufferRef(Buffer buffer) {\n+        if (buffer instanceof DirectBuffer directBuffer) {\n+            \/\/ direct buffer, return either the buffer attachment (for slices and views), or the buffer itself\n+            return directBuffer.attachment() != null ?\n+                    directBuffer.attachment() : directBuffer;\n+        } else {\n+            \/\/ heap buffer, return the underlying array\n+            return NIO_ACCESS.getBufferBase(buffer);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -75,7 +75,3 @@\n-     * This is a global session that wraps an heap object. Possible objects are: Java arrays, buffers and\n-     * class loaders. When a heap session is constructed, the provided reference is analyzed to find the\n-     * object that determines this scope's identity (we call this object <em>base<\/em>). For instance, in the case\n-     * of a heap buffer, the base is just the heap array wrapped by the buffer instance.\n-     * <p>\n-     * Base objects of two heap sessions are compared by identity. That is, if the wrapped object is the same,\n-     * then the resulting heap sessions are also considered equals. We do not compare the base objects using\n+     * This is a global session that wraps a heap object. Possible objects are: Java arrays, buffers and\n+     * class loaders. Objects of two heap sessions are compared by identity. That is, if the wrapped object is the same,\n+     * then the resulting heap sessions are also considered equals. We do not compare the objects using\n@@ -87,2 +83,0 @@\n-        static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n-\n@@ -93,1 +87,1 @@\n-            this.ref = base(Objects.requireNonNull(ref));\n+            this.ref = Objects.requireNonNull(ref);\n@@ -98,5 +92,2 @@\n-            if (obj instanceof HeapSession session) {\n-                return ref == session.ref;\n-            } else {\n-                return false;\n-            }\n+            return obj instanceof HeapSession session &&\n+                    ref == session.ref;\n@@ -109,11 +100,0 @@\n-\n-        private static Object base(Object o) {\n-            if (o instanceof DirectBuffer directBuffer) {\n-                return directBuffer.attachment() != null ?\n-                        directBuffer.attachment() : directBuffer;\n-            } else if (o instanceof Buffer heapBuffer) {\n-                return NIO_ACCESS.getBufferBase(heapBuffer);\n-            } else {\n-                return o;\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/GlobalSession.java","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"}]}