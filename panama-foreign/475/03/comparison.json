{"files":[{"patch":"@@ -25,1 +25,1 @@\n-- **foreign-memaccess+abi**: Contains the developement of both the foreign memory access API ([JEP 393](https:\/\/openjdk.java.net\/jeps\/393)) and the foreign linker API ([JEP 389](https:\/\/openjdk.java.net\/jeps\/389)). The former can be used to interact with different kinds of memory resources, including so-called off-heap or native memory. The latter can be used to call native code in a .dll\/.so\/.dylib, or to create a native function pointer to a Java method which can be passed to code in a native library. More information on how to use the memory access API and foreign linker API can be found [here](doc\/panama_ffi.md) and [here](doc\/panama_memaccess.md), respectively.\n+- **foreign-memaccess+abi**: Contains the developement of both the foreign memory access API ([JEP 393](https:\/\/openjdk.java.net\/jeps\/393)) and the foreign linker API ([JEP 389](https:\/\/openjdk.java.net\/jeps\/389)). The former can be used to interact with different kinds of memory resources, including so-called off-heap or native memory. The latter can be used to call native code in a .dll\/.so\/.dylib, or to create a native function pointer to a Java method which can be passed to code in a native library. More information on how to use the memory access API and foreign linker API can be found [here](doc\/panama_memaccess.md) and [here](doc\/panama_ffi.md), respectively.\n","filename":"README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-<!DOCTYPE html>\n-<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<!doctype html>\n+<html>\n@@ -4,20 +4,22 @@\n-  <meta charset=\"utf-8\" \/>\n-  <meta name=\"generator\" content=\"pandoc\" \/>\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n-  <title>panama_ffi<\/title>\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n-  <\/style>\n-  <style type=\"text\/css\">\n-a.sourceLine { display: inline-block; line-height: 1.25; }\n-a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }\n-a.sourceLine:empty { height: 1.2em; }\n-.sourceCode { overflow: visible; }\n-code.sourceCode { white-space: pre; position: relative; }\n-div.sourceCode { margin: 1em 0; }\n-pre.sourceCode { margin: 0; }\n-@media screen {\n-div.sourceCode { overflow: auto; }\n+<meta charset='UTF-8'><meta name='viewport' content='width=device-width initial-scale=1'>\n+<title>ffi_v2<\/title><link href='https:\/\/fonts.loli.net\/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext' rel='stylesheet' type='text\/css' \/><style type='text\/css'>html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:\"Lucida Console\",Consolas,\"Courier\",monospace; --title-bar-height:20px; }\n+.mac-os-11 { --title-bar-height:28px; }\n+html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }\n+body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }\n+iframe { margin: auto; }\n+a.url { word-break: break-all; }\n+a:active, a:hover { outline: 0px; }\n+.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }\n+#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 36px; }\n+#write.first-line-indent p { text-indent: 2em; }\n+#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }\n+#write.first-line-indent li { margin-left: 2em; }\n+.for-image #write { padding-left: 8px; padding-right: 8px; }\n+body.typora-export { padding-left: 30px; padding-right: 30px; }\n+.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }\n+.typora-export .task-list-item input { pointer-events: none; }\n+@media screen and (max-width: 500px) {\n+  body.typora-export { padding-left: 0px; padding-right: 0px; }\n+  #write { padding-left: 20px; padding-right: 20px; }\n+  .CodeMirror-sizer { margin-left: 0px !important; }\n+  .CodeMirror-gutters { display: none !important; }\n@@ -25,0 +27,60 @@\n+#write li > figure:last-child { margin-bottom: 0.5rem; }\n+#write ol, #write ul { position: relative; }\n+img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }\n+button, input, select, textarea { color: inherit; font: inherit; }\n+input[type=\"checkbox\"], input[type=\"radio\"] { line-height: normal; padding: 0px; }\n+*, ::after, ::before { box-sizing: border-box; }\n+#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }\n+#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }\n+p { line-height: inherit; }\n+h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }\n+p { orphans: 4; }\n+h1 { font-size: 2rem; }\n+h2 { font-size: 1.8rem; }\n+h3 { font-size: 1.6rem; }\n+h4 { font-size: 1.4rem; }\n+h5 { font-size: 1.2rem; }\n+h6 { font-size: 1rem; }\n+.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }\n+.hidden { display: none; }\n+.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }\n+a { cursor: pointer; }\n+sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }\n+sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }\n+#write input[type=\"checkbox\"] { cursor: pointer; width: inherit; height: inherit; }\n+figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }\n+figure > table { margin: 0px; }\n+tr { break-inside: avoid; break-after: auto; }\n+thead { display: table-header-group; }\n+table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }\n+table.md-table td { min-width: 32px; }\n+.CodeMirror-gutters { border-right: 0px; background-color: inherit; }\n+.CodeMirror-linenumber { user-select: none; }\n+.CodeMirror { text-align: left; }\n+.CodeMirror-placeholder { opacity: 0.3; }\n+.CodeMirror pre { padding: 0px 4px; }\n+.CodeMirror-lines { padding: 0px; }\n+div.hr:focus { cursor: none; }\n+#write pre { white-space: pre-wrap; }\n+#write.fences-no-line-wrapping pre { white-space: pre; }\n+#write pre.ty-contain-cm { white-space: normal; }\n+.CodeMirror-gutters { margin-right: 4px; }\n+.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }\n+.md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }\n+#write .md-fences.mock-cm { white-space: pre-wrap; }\n+.md-fences.md-fences-with-lineno { padding-left: 0px; }\n+#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }\n+.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }\n+.CodeMirror-line, twitterwidget { break-inside: avoid; }\n+.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }\n+.footnotes + .footnotes { margin-top: 0px; }\n+.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }\n+li div { padding-top: 0px; }\n+blockquote { margin: 1rem 0px; }\n+li .mathjax-block, li p { margin: 0.5rem 0px; }\n+li blockquote { margin: 1rem 0px; }\n+li { margin: 0px; position: relative; }\n+blockquote > :last-child { margin-bottom: 0px; }\n+blockquote > :first-child, li > :first-child { margin-top: 0px; }\n+.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }\n+#write .footnote-line { white-space: pre-wrap; }\n@@ -26,52 +88,534 @@\n-code.sourceCode { white-space: pre-wrap; }\n-a.sourceLine { text-indent: -1em; padding-left: 1em; }\n-}\n-pre.numberSource a.sourceLine\n-  { position: relative; left: -4em; }\n-pre.numberSource a.sourceLine::before\n-  { content: attr(title);\n-    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n-    border: none; pointer-events: all; display: inline-block;\n-    -webkit-touch-callout: none; -webkit-user-select: none;\n-    -khtml-user-select: none; -moz-user-select: none;\n-    -ms-user-select: none; user-select: none;\n-    padding: 0 4px; width: 4em;\n-    color: #aaaaaa;\n-  }\n-pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n-div.sourceCode\n-  {  }\n-@media screen {\n-a.sourceLine::before { text-decoration: underline; }\n-}\n-code span.al { color: #ff0000; font-weight: bold; } \/* Alert *\/\n-code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Annotation *\/\n-code span.at { color: #7d9029; } \/* Attribute *\/\n-code span.bn { color: #40a070; } \/* BaseN *\/\n-code span.bu { } \/* BuiltIn *\/\n-code span.cf { color: #007020; font-weight: bold; } \/* ControlFlow *\/\n-code span.ch { color: #4070a0; } \/* Char *\/\n-code span.cn { color: #880000; } \/* Constant *\/\n-code span.co { color: #60a0b0; font-style: italic; } \/* Comment *\/\n-code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } \/* CommentVar *\/\n-code span.do { color: #ba2121; font-style: italic; } \/* Documentation *\/\n-code span.dt { color: #902000; } \/* DataType *\/\n-code span.dv { color: #40a070; } \/* DecVal *\/\n-code span.er { color: #ff0000; font-weight: bold; } \/* Error *\/\n-code span.ex { } \/* Extension *\/\n-code span.fl { color: #40a070; } \/* Float *\/\n-code span.fu { color: #06287e; } \/* Function *\/\n-code span.im { } \/* Import *\/\n-code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Information *\/\n-code span.kw { color: #007020; font-weight: bold; } \/* Keyword *\/\n-code span.op { color: #666666; } \/* Operator *\/\n-code span.ot { color: #007020; } \/* Other *\/\n-code span.pp { color: #bc7a00; } \/* Preprocessor *\/\n-code span.sc { color: #4070a0; } \/* SpecialChar *\/\n-code span.ss { color: #bb6688; } \/* SpecialString *\/\n-code span.st { color: #4070a0; } \/* String *\/\n-code span.va { color: #19177c; } \/* Variable *\/\n-code span.vs { color: #4070a0; } \/* VerbatimString *\/\n-code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Warning *\/\n-  <\/style>\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }\n+  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }\n+  .typora-export * { -webkit-print-color-adjust: exact; }\n+  .typora-export #write { break-after: avoid; }\n+  .typora-export #write::after { height: 0px; }\n+  .is-mac table { break-inside: avoid; }\n+}\n+.footnote-line { margin-top: 0.714em; font-size: 0.7em; }\n+a img, img a { cursor: pointer; }\n+pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }\n+p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }\n+#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }\n+p > .md-image:only-child { display: inline-block; width: 100%; }\n+#write .MathJax_Display { margin: 0.8em 0px 0px; }\n+.md-math-block { width: 100%; }\n+.md-math-block:not(:empty)::after { display: none; }\n+.MathJax_ref { fill: currentcolor; }\n+[contenteditable=\"true\"]:active, [contenteditable=\"true\"]:focus, [contenteditable=\"false\"]:active, [contenteditable=\"false\"]:focus { outline: 0px; box-shadow: none; }\n+.md-task-list-item { position: relative; list-style-type: none; }\n+.task-list-item.md-task-list-item { padding-left: 0px; }\n+.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }\n+.math { font-size: 1rem; }\n+.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }\n+.md-toc-content { position: relative; margin-left: 0px; }\n+.md-toc-content::after, .md-toc::after { display: none; }\n+.md-toc-item { display: block; color: rgb(65, 131, 196); }\n+.md-toc-item a { text-decoration: none; }\n+.md-toc-inner:hover { text-decoration: underline; }\n+.md-toc-inner { display: inline-block; cursor: pointer; }\n+.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }\n+.md-toc-h2 .md-toc-inner { margin-left: 2em; }\n+.md-toc-h3 .md-toc-inner { margin-left: 4em; }\n+.md-toc-h4 .md-toc-inner { margin-left: 6em; }\n+.md-toc-h5 .md-toc-inner { margin-left: 8em; }\n+.md-toc-h6 .md-toc-inner { margin-left: 10em; }\n+@media screen and (max-width: 48em) {\n+  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }\n+  .md-toc-h4 .md-toc-inner { margin-left: 5em; }\n+  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }\n+  .md-toc-h6 .md-toc-inner { margin-left: 8em; }\n+}\n+a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }\n+.footnote-line a:not(.reversefootnote) { color: inherit; }\n+.md-attr { display: none; }\n+.md-fn-count::after { content: \".\"; }\n+code, pre, samp, tt { font-family: var(--monospace); }\n+kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }\n+.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }\n+code { text-align: left; vertical-align: initial; }\n+a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }\n+.md-inline-math .MathJax_SVG .noError { display: none !important; }\n+.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }\n+.md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; }\n+.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }\n+.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }\n+.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }\n+.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }\n+.MathJax_SVG * { transition: none 0s ease 0s; }\n+.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; }\n+.os-windows.monocolor-emoji .md-emoji { font-family: \"Segoe UI Symbol\", sans-serif; }\n+.md-diagram-panel > svg { max-width: 100%; }\n+[lang=\"flow\"] svg, [lang=\"mermaid\"] svg { max-width: 100%; height: auto; }\n+[lang=\"mermaid\"] .node text { font-size: 1rem; }\n+table tr th { border-bottom: 0px; }\n+video { max-width: 100%; display: block; margin: 0px auto; }\n+iframe { max-width: 100%; width: 100%; border: none; }\n+.highlight td, .highlight tr { border: 0px; }\n+mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }\n+.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }\n+mark .md-meta { color: rgb(0, 0, 0); opacity: 0.3 !important; }\n+@media print {\n+  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }\n+}\n+.md-diagram-panel .messageText { stroke: none !important; }\n+.md-diagram-panel .start-state { fill: var(--node-fill); }\n+.md-diagram-panel .edgeLabel rect { opacity: 1 !important; }\n+.md-require-zoom-fix foreignobject { font-size: var(--mermaid-font-zoom); }\n+\n+\n+.CodeMirror { height: auto; }\n+.CodeMirror.cm-s-inner { background: inherit; }\n+.CodeMirror-scroll { overflow: auto hidden; z-index: 3; }\n+.CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); }\n+.CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; }\n+.CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); }\n+.cm-s-inner .cm-keyword { color: rgb(119, 0, 136); }\n+.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); }\n+.cm-s-inner .cm-number { color: rgb(17, 102, 68); }\n+.cm-s-inner .cm-def { color: rgb(0, 0, 255); }\n+.cm-s-inner .cm-variable { color: rgb(0, 0, 0); }\n+.cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); }\n+.cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); }\n+.cm-s-inner .cm-string { color: rgb(170, 17, 17); }\n+.cm-s-inner .cm-property { color: rgb(0, 0, 0); }\n+.cm-s-inner .cm-operator { color: rgb(152, 26, 26); }\n+.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); }\n+.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }\n+.cm-s-inner .cm-meta { color: rgb(85, 85, 85); }\n+.cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); }\n+.cm-s-inner .cm-builtin { color: rgb(51, 0, 170); }\n+.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }\n+.cm-s-inner .cm-tag { color: rgb(17, 119, 0); }\n+.cm-s-inner .cm-attribute { color: rgb(0, 0, 204); }\n+.cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); }\n+.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); }\n+.cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); }\n+.cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); }\n+.cm-negative { color: rgb(221, 68, 68); }\n+.cm-positive { color: rgb(34, 153, 34); }\n+.cm-header, .cm-strong { font-weight: 700; }\n+.cm-del { text-decoration: line-through; }\n+.cm-em { font-style: italic; }\n+.cm-link { text-decoration: underline; }\n+.cm-error { color: red; }\n+.cm-invalidchar { color: red; }\n+.cm-constant { color: rgb(38, 139, 210); }\n+.cm-defined { color: rgb(181, 137, 0); }\n+div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); }\n+div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); }\n+.cm-s-inner .CodeMirror-activeline-background { background: inherit; }\n+.CodeMirror { position: relative; overflow: hidden; }\n+.CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; }\n+.CodeMirror-sizer { position: relative; }\n+.CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; }\n+.CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; }\n+.CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: hidden; }\n+.CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; }\n+.CodeMirror-gutter-filler { left: 0px; bottom: 0px; }\n+.CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 30px; z-index: 3; }\n+.CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; }\n+.CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; }\n+.CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; }\n+.CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; }\n+.CodeMirror-lines { cursor: text; }\n+.CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; overflow-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; }\n+.CodeMirror-wrap pre { overflow-wrap: break-word; white-space: pre-wrap; word-break: normal; }\n+.CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; }\n+.CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; }\n+.CodeMirror-linebackground { position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; z-index: 0; }\n+.CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; }\n+.CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; }\n+.CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; }\n+.CodeMirror-measure pre { position: static; }\n+.CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; }\n+.CodeMirror div.CodeMirror-cursor { visibility: hidden; }\n+.CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; }\n+.cm-searching { background: rgba(255, 255, 0, 0.4); }\n+@media print {\n+  .CodeMirror div.CodeMirror-cursor { visibility: hidden; }\n+}\n+\n+\n+:root {\n+    --side-bar-bg-color: #fafafa;\n+    --control-text-color: #777;\n+}\n+\n+@include-when-export url(https:\/\/fonts.loli.net\/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext);\n+\n+\/* open-sans-regular - latin-ext_latin *\/\n+  \/* open-sans-italic - latin-ext_latin *\/\n+    \/* open-sans-700 - latin-ext_latin *\/\n+    \/* open-sans-700italic - latin-ext_latin *\/\n+  html {\n+    font-size: 16px;\n+}\n+\n+body {\n+    font-family: \"Open Sans\",\"Clear Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n+    color: rgb(51, 51, 51);\n+    line-height: 1.6;\n+}\n+\n+#write {\n+    max-width: 860px;\n+  \tmargin: 0 auto;\n+  \tpadding: 30px;\n+    padding-bottom: 100px;\n+}\n+\n+@media only screen and (min-width: 1400px) {\n+\t#write {\n+\t\tmax-width: 1024px;\n+\t}\n+}\n+\n+@media only screen and (min-width: 1800px) {\n+\t#write {\n+\t\tmax-width: 1200px;\n+\t}\n+}\n+\n+#write > ul:first-child,\n+#write > ol:first-child{\n+    margin-top: 30px;\n+}\n+\n+a {\n+    color: #4183C4;\n+}\n+h1,\n+h2,\n+h3,\n+h4,\n+h5,\n+h6 {\n+    position: relative;\n+    margin-top: 1rem;\n+    margin-bottom: 1rem;\n+    font-weight: bold;\n+    line-height: 1.4;\n+    cursor: text;\n+}\n+h1:hover a.anchor,\n+h2:hover a.anchor,\n+h3:hover a.anchor,\n+h4:hover a.anchor,\n+h5:hover a.anchor,\n+h6:hover a.anchor {\n+    text-decoration: none;\n+}\n+h1 tt,\n+h1 code {\n+    font-size: inherit;\n+}\n+h2 tt,\n+h2 code {\n+    font-size: inherit;\n+}\n+h3 tt,\n+h3 code {\n+    font-size: inherit;\n+}\n+h4 tt,\n+h4 code {\n+    font-size: inherit;\n+}\n+h5 tt,\n+h5 code {\n+    font-size: inherit;\n+}\n+h6 tt,\n+h6 code {\n+    font-size: inherit;\n+}\n+h1 {\n+    font-size: 2.25em;\n+    line-height: 1.2;\n+    border-bottom: 1px solid #eee;\n+}\n+h2 {\n+    font-size: 1.75em;\n+    line-height: 1.225;\n+    border-bottom: 1px solid #eee;\n+}\n+\n+\/*@media print {\n+    .typora-export h1,\n+    .typora-export h2 {\n+        border-bottom: none;\n+        padding-bottom: initial;\n+    }\n+\n+    .typora-export h1::after,\n+    .typora-export h2::after {\n+        content: \"\";\n+        display: block;\n+        height: 100px;\n+        margin-top: -96px;\n+        border-top: 1px solid #eee;\n+    }\n+}*\/\n+\n+h3 {\n+    font-size: 1.5em;\n+    line-height: 1.43;\n+}\n+h4 {\n+    font-size: 1.25em;\n+}\n+h5 {\n+    font-size: 1em;\n+}\n+h6 {\n+   font-size: 1em;\n+    color: #777;\n+}\n+p,\n+blockquote,\n+ul,\n+ol,\n+dl,\n+table{\n+    margin: 0.8em 0;\n+}\n+li>ol,\n+li>ul {\n+    margin: 0 0;\n+}\n+hr {\n+    height: 2px;\n+    padding: 0;\n+    margin: 16px 0;\n+    background-color: #e7e7e7;\n+    border: 0 none;\n+    overflow: hidden;\n+    box-sizing: content-box;\n+}\n+\n+li p.first {\n+    display: inline-block;\n+}\n+ul,\n+ol {\n+    padding-left: 30px;\n+}\n+ul:first-child,\n+ol:first-child {\n+    margin-top: 0;\n+}\n+ul:last-child,\n+ol:last-child {\n+    margin-bottom: 0;\n+}\n+blockquote {\n+    border-left: 4px solid #dfe2e5;\n+    padding: 0 15px;\n+    color: #777777;\n+}\n+blockquote blockquote {\n+    padding-right: 0;\n+}\n+table {\n+    padding: 0;\n+    word-break: initial;\n+}\n+table tr {\n+    border-top: 1px solid #dfe2e5;\n+    margin: 0;\n+    padding: 0;\n+}\n+table tr:nth-child(2n),\n+thead {\n+    background-color: #f8f8f8;\n+}\n+table th {\n+    font-weight: bold;\n+    border: 1px solid #dfe2e5;\n+    border-bottom: 0;\n+    margin: 0;\n+    padding: 6px 13px;\n+}\n+table td {\n+    border: 1px solid #dfe2e5;\n+    margin: 0;\n+    padding: 6px 13px;\n+}\n+table th:first-child,\n+table td:first-child {\n+    margin-top: 0;\n+}\n+table th:last-child,\n+table td:last-child {\n+    margin-bottom: 0;\n+}\n+\n+.CodeMirror-lines {\n+    padding-left: 4px;\n+}\n+\n+.code-tooltip {\n+    box-shadow: 0 1px 1px 0 rgba(0,28,36,.3);\n+    border-top: 1px solid #eef2f2;\n+}\n+\n+.md-fences,\n+code,\n+tt {\n+    border: 1px solid #e7eaed;\n+    background-color: #f8f8f8;\n+    border-radius: 3px;\n+    padding: 0;\n+    padding: 2px 4px 0px 4px;\n+    font-size: 0.9em;\n+}\n+\n+code {\n+    background-color: #f3f4f4;\n+    padding: 0 2px 0 2px;\n+}\n+\n+.md-fences {\n+    margin-bottom: 15px;\n+    margin-top: 15px;\n+    padding-top: 8px;\n+    padding-bottom: 6px;\n+}\n+\n+\n+.md-task-list-item > input {\n+  margin-left: -1.3em;\n+}\n+\n+@media print {\n+    html {\n+        font-size: 13px;\n+    }\n+    table,\n+    pre {\n+        page-break-inside: avoid;\n+    }\n+    pre {\n+        word-wrap: break-word;\n+    }\n+}\n+\n+.md-fences {\n+\tbackground-color: #f8f8f8;\n+}\n+#write pre.md-meta-block {\n+\tpadding: 1rem;\n+    font-size: 85%;\n+    line-height: 1.45;\n+    background-color: #f7f7f7;\n+    border: 0;\n+    border-radius: 3px;\n+    color: #777777;\n+    margin-top: 0 !important;\n+}\n+\n+.mathjax-block>.code-tooltip {\n+\tbottom: .375rem;\n+}\n+\n+.md-mathjax-midline {\n+    background: #fafafa;\n+}\n+\n+#write>h3.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .375rem;\n+}\n+#write>h4.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .285714286rem;\n+}\n+#write>h5.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .285714286rem;\n+}\n+#write>h6.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .285714286rem;\n+}\n+.md-image>.md-meta {\n+    \/*border: 1px solid #ddd;*\/\n+    border-radius: 3px;\n+    padding: 2px 0px 0px 4px;\n+    font-size: 0.9em;\n+    color: inherit;\n+}\n+\n+.md-tag {\n+    color: #a7a7a7;\n+    opacity: 1;\n+}\n+\n+.md-toc { \n+    margin-top:20px;\n+    padding-bottom:20px;\n+}\n+\n+.sidebar-tabs {\n+    border-bottom: none;\n+}\n+\n+#typora-quick-open {\n+    border: 1px solid #ddd;\n+    background-color: #f8f8f8;\n+}\n+\n+#typora-quick-open-item {\n+    background-color: #FAFAFA;\n+    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;\n+    border-style: solid;\n+    border-width: 1px;\n+}\n+\n+\/** focus mode *\/\n+.on-focus-mode blockquote {\n+    border-left-color: rgba(85, 85, 85, 0.12);\n+}\n+\n+header, .context-menu, .megamenu-content, footer{\n+    font-family: \"Segoe UI\", \"Arial\", sans-serif;\n+}\n+\n+.file-node-content:hover .file-node-icon,\n+.file-node-content:hover .file-node-open-state{\n+    visibility: visible;\n+}\n+\n+.mac-seamless-mode #typora-sidebar {\n+    background-color: #fafafa;\n+    background-color: var(--side-bar-bg-color);\n+}\n+\n+.md-lang {\n+    color: #b4654d;\n+}\n+\n+.html-for-mac .context-menu {\n+    --item-hover-bg-color: #E6F0FE;\n+}\n+\n+#md-notification .btn {\n+    border: 0;\n+}\n+\n+.dropdown-menu .divider {\n+    border-color: #e5e5e5;\n+}\n+\n+.ty-preferences .window-content {\n+    background-color: #fafafa;\n+}\n+\n+.ty-preferences .nav-group-item.active {\n+    color: white;\n+    background: #999;\n+}\n+\n+\n+<\/style>\n@@ -79,363 +623,3 @@\n-<body>\n-<nav id=\"TOC\">\n-<ul>\n-<li><a href=\"#state-of-foreign-function-support\">State of foreign function support<\/a><ul>\n-<li><a href=\"#native-addresses\">Native addresses<\/a><\/li>\n-<li><a href=\"#symbol-lookups\">Symbol lookups<\/a><\/li>\n-<li><a href=\"#c-linker\">C Linker<\/a><\/li>\n-<li><a href=\"#downcalls\">Downcalls<\/a><\/li>\n-<li><a href=\"#upcalls\">Upcalls<\/a><\/li>\n-<li><a href=\"#native-scope\">Native scope<\/a><\/li>\n-<li><a href=\"#varargs\">Varargs<\/a><\/li>\n-<li><a href=\"#appendix-full-source-code\">Appendix: full source code<\/a><\/li>\n-<\/ul><\/li>\n-<\/ul>\n-<\/nav>\n-<h2 id=\"state-of-foreign-function-support\">State of foreign function support<\/h2>\n-<p><strong>October 2020<\/strong><\/p>\n-<ul>\n-<li>Adjust reference to NativeScope handoff<\/li>\n-<li>Tweak references to restricted segments to use new API<\/li>\n-<li>Tweak signature of LibraryLookup::lookup<\/li>\n-<li>Replaced usages of ForeignLinker with CLinker, as per new API<\/li>\n-<\/ul>\n-<p><strong>Maurizio Cimadamore<\/strong><\/p>\n-<p>In this document we explore the main concepts behind Panama's foreign function support; as we shall see, the central abstraction in the foreign function support is the so called <em>foreign linker<\/em>, an abstraction that allows clients to construct <em>native<\/em> method handles — that is, method handles whose invocation targets a native function defined in some native library. As we shall see, Panama foreign function support is completely expressed in terms of Java code and no intermediate native code is required.<\/p>\n-<h3 id=\"native-addresses\">Native addresses<\/h3>\n-<p>Before we dive into the specifics of the foreign function support, it would be useful to briefly recap some of the main concepts we have learned when exploring the <a href=\"http:\/\/cr.openjdk.java.net\/~mcimadamore\/panama\/foreign-memaccess.html\">foreign memory access support<\/a>. The Foreign Memory Access API allows client to create and manipulate <em>memory segments<\/em>. A memory segment is a view over a memory source (either on- or off-heap) which is spatially bounded, temporally bounded and thread-confined. The guarantees ensure that dereferencing a segment that has been created by Java code is always <em>safe<\/em>, and can never result in a VM crash, or, worse, in silent memory corruption.<\/p>\n-<p>Now, in the case of memory segments, the above properties (spatial bounds, temporal bounds and confinement) can be known <em>in full<\/em> when the segment is created. But when we interact with native libraries we will often be receiving <em>raw<\/em> pointers; such pointers have no spatial bounds (does a <code>char*<\/code> in C refer to one <code>char<\/code>, or a <code>char<\/code> array of a given size?), no notion of temporal bounds, nor thread-confinement. Raw addresses in our interop support are modelled using the <code>MemoryAddress<\/code> abstraction.<\/p>\n-<p>A memory address is just what the name implies: it encapsulates a memory address (either on- or off-heap). Since, in order to dereference memory using a memory access var handle, we need a segment, it follows that it is <em>not<\/em> possible to directly dereference a memory address — to do that we need a segment first. So clients can proceed in three different ways here.<\/p>\n-<p>First, if the memory address is known to belong to a segment the client <em>already<\/em> owns, a <em>rebase<\/em> operation can be performed; in other words, the client can ask the address what is its offset relative to a given segment, and then proceed to dereference the original segment accordingly:<\/p>\n-<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">100<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\">...<\/a>\n-<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\">MemoryAddress addr = <span class=\"kw\">... <\/span><span class=\"co\">\/\/obtain address from native code<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb1-4\" title=\"4\"><span class=\"dt\">int<\/span> x = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(segment, addr.<span class=\"fu\">segmentOffset<\/span>(segment));    <\/a><\/code><\/pre><\/div>\n-<p>Secondly, if the client does <em>not<\/em> have a segment which contains a given memory address, it can create one <em>unsafely<\/em>, using the <code>MemoryAddress::asSegmentRestricted<\/code>; this can also be useful to inject extra knowledge about spatial bounds which might be available in the native library the client is interacting with:<\/p>\n-<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb2-1\" title=\"1\">MemoryAddress addr = <span class=\"kw\">... <\/span><span class=\"co\">\/\/obtain address from native code<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb2-2\" title=\"2\">MemorySegment segment = addr.<span class=\"fu\">asSegmentRestricted<\/span>(<span class=\"dv\">100<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb2-3\" title=\"3\"><span class=\"dt\">int<\/span> x = MemoryAccess.<span class=\"fu\">getInt<\/span>(segment);<\/a><\/code><\/pre><\/div>\n-<p>Alternatively, the client can fall back to use the so called <em>everything<\/em> segment - that is, a primordial segment which covers the entire native heap. Since this segment is available as a constant, dereference can happen without the need of creating any additional segment instances:<\/p>\n-<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb3-1\" title=\"1\">MemoryAddress addr = <span class=\"kw\">... <\/span><span class=\"co\">\/\/obtain address from native code<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb3-2\" title=\"2\"><span class=\"dt\">int<\/span> x = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr.<span class=\"fu\">toRawLongValue<\/span>());<\/a><\/code><\/pre><\/div>\n-<p>Of course, since accessing the entire native heap is inherently <em>unsafe<\/em>, accessing the <em>everything<\/em> segment is considered a <em>restricted<\/em> operation which is only allowed after explicit opt in by setting the <code>foreign.restricted=permit<\/code> runtime flag.<\/p>\n-<p><code>MemoryAddress<\/code>, like <code>MemorySegment<\/code> , implements the <code>Addressable<\/code> interface, which is a functional interface whose method projects an entity down to a <code>MemoryAddress<\/code> instance. In the case of <code>MemoryAddress<\/code> such a projection is the identity function; in the case of a memory segment, the projection returns the <code>MemoryAddres<\/code> instance for the segment's base address. This abstraction allows to pass either memory address or memory segments where an address is expected (this is especially useful when generating native bindings).<\/p>\n-<h3 id=\"symbol-lookups\">Symbol lookups<\/h3>\n-<p>The first ingredient of any foreign function support is a mechanism to lookup symbols in native libraries. In traditional Java\/JNI, this is done via the <code>System::loadLibrary<\/code> and <code>System::load<\/code> methods, which internally map into calls to <code>dlopen<\/code>. In Panama, library lookups are modeled more directly, using a class called<code>LibraryLookup<\/code> (similar to a method handle lookup), which provides capabilities to lookup named symbols in a given native library; we can obtain a library lookup in 3 different ways:<\/p>\n-<ul>\n-<li><code>LibraryLookup::ofDefault<\/code> — returns the library lookup which can <em>see<\/em> all the symbols that have been loaded with the VM<\/li>\n-<li><code>LibraryLookup::ofPath<\/code> — creates a library lookup associated with the library found at the given absolute path<\/li>\n-<li><code>LibraryLookup::ofLibrary<\/code> — creates a library lookup associated with the library with given name (this might require setting the <code>java.library.path<\/code> variable accordingly)<\/li>\n-<\/ul>\n-<p>Once a lookup has been obtained, a client can use it to retrieve handles to library symbols (either global variables or functions) using the <code>lookup(String)<\/code> method, which returns an <code>Optional&lt;LibraryLookup.Symbol&gt;<\/code>. A lookup symbol is just a proxy for a memory address (in fact, it implements <code>Addressable<\/code>) and a name.<\/p>\n-<p>For instance, the following code can be used to lookup the <code>clang_getClangVersion<\/code> function provided by the <code>clang<\/code> library:<\/p>\n-<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\">LibraryLookup libclang = LibraryLookup.<span class=\"fu\">ofLibrary<\/span>(<span class=\"st\">&quot;clang&quot;<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb4-2\" title=\"2\">LibraryLookup.<span class=\"fu\">Symbol<\/span> clangVersion = libclang.<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;clang_getClangVersion&quot;<\/span>).<span class=\"fu\">get<\/span>();<\/a><\/code><\/pre><\/div>\n-<p>One crucial distinction between the library loading support of the Foreign Linker API and of JNI is that JNI libraries are loaded into a class loader. Furthermore, to preserve <a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/guides\/jni\/jni-12.html#libmanage\">classloader integrity<\/a> integrity, the same JNI library cannot be loaded into more than one classloader. The foreign function support described here is more primitive — the Foreign Linker API allows clients to target native libraries directly, without any intervening JNI code. Crucially, Java objects are never passed to and from native code by the Foreign Linker API. Because of this, libraries loaded through the <code>LibraryLookup<\/code> hook are not tied to any class loader and can be (re)loaded as many times as needed.<\/p>\n-<h3 id=\"c-linker\">C Linker<\/h3>\n-<p>At the core of Panama foreign function support we find the <code>CLinker<\/code> abstraction. This abstraction plays a dual role: first, for downcalls, it allows to model native function calls as plain <code>MethodHandle<\/code> calls (see <code>ForeignLinker::downcallHandle<\/code>); second, for upcalls, it allows to convert an existing <code>MethodHandle<\/code> (which might point to some Java method) into a <code>MemorySegment<\/code> which could then be passed to native functions as a function pointer (see <code>ForeignLinker::upcallStub<\/code>):<\/p>\n-<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb5-1\" title=\"1\"><span class=\"kw\">interface<\/span> CLinker {<\/a>\n-<a class=\"sourceLine\" id=\"cb5-2\" title=\"2\">    MethodHandle <span class=\"fu\">downcallHandle<\/span>(Addressable func, MethodType type, FunctionDescriptor function);<\/a>\n-<a class=\"sourceLine\" id=\"cb5-3\" title=\"3\">    MemorySegment <span class=\"fu\">upcallStub<\/span>(MethodHandle target, FunctionDescriptor function);<\/a>\n-<a class=\"sourceLine\" id=\"cb5-4\" title=\"4\">    ...<\/a>\n-<a class=\"sourceLine\" id=\"cb5-5\" title=\"5\">    <span class=\"dt\">static<\/span> CLinker <span class=\"fu\">getInstance<\/span>() { <span class=\"kw\">... <\/span>}<\/a>\n-<a class=\"sourceLine\" id=\"cb5-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n-<p>In the following sections we will dive deeper into how downcall handles and upcall stubs are created; here we want to focus on the similarities between these two routines. First, both take a <code>FunctionDescriptor<\/code> instance — essentially an aggregate of memory layouts which is used to describe the signature of a foreign function in full. Speaking of C, the <code>CLinker<\/code> class defines many layout constants (one for each main C primitive type) — these layouts can be combined using a <code>FunctionDescriptor<\/code> to describe the signature of a C function. For instance, assuming we have a C function taking a <code>char*<\/code> and returning a <code>long<\/code> we can model such a function with the following descriptor:<\/p>\n-<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb6-1\" title=\"1\">FunctionDescriptor func = FunctionDescriptor.<span class=\"fu\">of<\/span>(CLinker.<span class=\"fu\">C_LONG<\/span>, CLinker.<span class=\"fu\">C_POINTER<\/span>);<\/a><\/code><\/pre><\/div>\n-<p>The layouts used above will be mapped to the right layout according to the platform we are executing on. This also means that these layouts will be platform dependent and that e.g. <code>C_LONG<\/code> will be a 32 bit value layout on Windows, while being a 64-bit value on Linux.<\/p>\n-<p>Layouts defined in the <code>CLinker<\/code> class are not only handy, as they already model the C types we want to work on; they also contain hidden pieces of information which the foreign linker support uses in order to compute the calling sequence associated with a given function descriptor. For instance, the two C types <code>int<\/code> and <code>float<\/code> might share a similar memory layout (they both are expressed as 32 bit values), but are typically passed using different machine registers. The layout attributes attached to the C-specific layouts in the <code>CLinker<\/code> class ensures that arguments and return values are interpreted in the correct way.<\/p>\n-<p>Another similarity between <code>downcallHandle<\/code> and <code>upcallStub<\/code> is that they both accept (either directly, or indirectly) a <code>MethodType<\/code> instance. The method type describes the Java signatures that clients will be using when interacting with said downcall handles, or upcall stubs. The C linker implementation adds constraints on which layouts can be used with which Java carrier — for instance by enforcing that the size of the Java carrier is equal to that of the corresponding layout, or by making sure that certain layouts are associated with specific carriers. The following table shows the Java carrier vs. layout mappings enforced by the Linux\/macOS foreign linker implementation:<\/p>\n-<table>\n-<thead>\n-<tr class=\"header\">\n-<th>C layout<\/th>\n-<th>Java carrier<\/th>\n-<\/tr>\n-<\/thead>\n-<tbody>\n-<tr class=\"odd\">\n-<td><code>C_BOOL<\/code><\/td>\n-<td><code>byte<\/code><\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td><code>C_CHAR<\/code><\/td>\n-<td><code>byte<\/code><\/td>\n-<\/tr>\n-<tr class=\"odd\">\n-<td><code>C_SHORT<\/code><\/td>\n-<td><code>short<\/code><\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td><code>C_INT<\/code><\/td>\n-<td><code>int<\/code><\/td>\n-<\/tr>\n-<tr class=\"odd\">\n-<td><code>C_LONG<\/code><\/td>\n-<td><code>long<\/code><\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td><code>C_LONGLONG<\/code><\/td>\n-<td><code>long<\/code><\/td>\n-<\/tr>\n-<tr class=\"odd\">\n-<td><code>C_FLOAT<\/code><\/td>\n-<td><code>float<\/code><\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td><code>C_DOUBLE<\/code><\/td>\n-<td><code>double<\/code><\/td>\n-<\/tr>\n-<tr class=\"odd\">\n-<td><code>C_POINTER<\/code><\/td>\n-<td><code>MemoryAddress<\/code><\/td>\n-<\/tr>\n-<tr class=\"even\">\n-<td><code>GroupLayout<\/code><\/td>\n-<td><code>MemorySegment<\/code><\/td>\n-<\/tr>\n-<\/tbody>\n-<\/table>\n-<p>Aside from the mapping between primitive layout and primitive Java carriers (which might vary across platforms), it is important to note how all pointer layouts must correspond to a <code>MemoryAddress<\/code> carrier, whereas structs (whose layout is defined by a <code>GroupLayout<\/code>) must be associated with a <code>MemorySegment<\/code> carrier.<\/p>\n-<h3 id=\"downcalls\">Downcalls<\/h3>\n-<p>We will now look at how foreign functions can be called from Java using the foreign linker abstraction. Assume we wanted to call the following function from the standard C library:<\/p>\n-<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb7-1\" title=\"1\"><span class=\"dt\">size_t<\/span> strlen(<span class=\"dt\">const<\/span> <span class=\"dt\">char<\/span> *s);<\/a><\/code><\/pre><\/div>\n-<p>In order to do that, we have to:<\/p>\n-<ul>\n-<li>lookup the <code>strlen<\/code> symbol<\/li>\n-<li><p>describe the signature of the C function using the layouts in the <code>CLinker<\/code> class<\/p><\/li>\n-<li>select a Java signature we want to <em>overlay<\/em> on the native function — this will be the signature that clients of the native method handles will interact with<\/li>\n-<li><p>create a <em>downcall<\/em> native method handle with the above information, using the standard C foreign linker<\/p><\/li>\n-<\/ul>\n-<p>Here's an example of how we might want to do that (a full listing of all the examples in this and subsequent sections will be provided in the <a href=\"#appendix:%20full-source-code\">appendix<\/a>):<\/p>\n-<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb8-1\" title=\"1\">MethodHandle strlen = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb8-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;strlen&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb8-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb8-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">of<\/span>(C_LONG, C_POINTER)<\/a>\n-<a class=\"sourceLine\" id=\"cb8-5\" title=\"5\">);<\/a><\/code><\/pre><\/div>\n-<p>Note that, since the function <code>strlen<\/code> is part of the standard C library, which is loaded with the VM, we can just use the default lookup to look it up. The rest is pretty straightforward — the only tricky detail is how to model <code>size_t<\/code>: typically this type has the size of a pointer, so we can use <code>C_LONG<\/code> on Linux, but we'd have to use <code>C_LONGLONG<\/code> on Windows. On the Java side, we model the <code>size_t<\/code> using a <code>long<\/code> and the pointer is modeled using a <code>MemoryAddress<\/code> parameter.<\/p>\n-<p>One we have obtained the downcall native method handle, we can just use it as any other method handle:<\/p>\n-<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb9-1\" title=\"1\"><span class=\"dt\">long<\/span> len = strlen.<span class=\"fu\">invokeExact<\/span>(CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;Hello&quot;<\/span>).<span class=\"fu\">address<\/span>()) <span class=\"co\">\/\/ 5<\/span><\/a><\/code><\/pre><\/div>\n-<p>Here we are using one of the helper methods in <code>CLinker<\/code> to convert a Java string into an off-heap memory segment which contains a <code>NULL<\/code> terminated C string. We then pass that segment to the method handle and retrieve our result in a Java <code>long<\/code>. Note how all this has been possible <em>without<\/em> any piece of intervening native code — all the interop code can be expressed in (low level) Java.<\/p>\n-<p>Now that we have seen the basics of how foreign function calls are supported in Panama, let's add some additional considerations. First, it is important to note that, albeit the interop code is written in Java, the above code can <em>not<\/em> be considered 100% safe. There are many arbitrary decisions to be made when setting up downcall method handles such as the one above, some of which might be obvious to us (e.g. how many parameters does the function take), but which cannot ultimately be verified by the Panama runtime. After all, a symbol in a dynamic library is, mostly a numeric offset and, unless we are using a shared library with debugging information, no type information is attached to a given library symbol. This means that, in this case, the Panama runtime has to <em>trust<\/em> our description of the <code>strlen<\/code> function. For this reason, access to the foreign linker is a restricted operation, which can only be performed if the runtime flag <code>foreign.restricted=permit<\/code> is passed on the command line of the Java launcher <a href=\"#1\"><sup>1<\/sup><\/a>.<\/p>\n-<p>Finally let's talk about the life-cycle of some of the entities involved here; first, as a downcall native handle wraps a lookup symbol, the library from which the symbol has been loaded will stay loaded until there are reachable downcall handles referring to one of its symbols; in the above example, this consideration is less important, given the use of the default lookup object, which can be assumed to stay alive for the entire duration of the application.<\/p>\n-<p>Certain functions might return pointers, or structs; it is important to realize that if a function returns a pointer (or a <code>MemoryAddress<\/code>), no life-cycle whatsoever is attached to that pointer. It is then up to the client to e.g. free the memory associated with that pointer, or do nothing (in case the library is responsible for the life-cycle of that pointer). If a library returns a struct by value, things are different, as a <em>fresh<\/em>, confined memory segment is allocated off-heap and returned to the callee. It is the responsibility of the callee to cleanup that struct's segment (using <code>MemorySegment::close<\/code>) <a href=\"#2\"><sup>2<\/sup><\/a>.<\/p>\n-<p>Performance-wise, the reader might ask how efficient calling a foreign function using a native method handle is; the answer is <em>very<\/em>. The JVM comes with some special support for native method handles, so that, if a give method handle is invoked many times (e.g, inside an <em>hot<\/em> loop), the JIT compiler might decide to just generate a snippet of assembly code required to call the native function, and execute that directly. In most cases, invoking native function this way is as efficient as doing so through JNI <a href=\"#3a\"><sup>3a<\/sup><\/a><a href=\"#3b\"><sup>3b<\/sup><\/a>.<\/p>\n-<h3 id=\"upcalls\">Upcalls<\/h3>\n-<p>Sometimes, it is useful to pass Java code as a function pointer to some native function; we can achieve that by using foreign linker support for upcalls. To demonstrate this, let's consider the following function from the C standard library:<\/p>\n-<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb10-1\" title=\"1\"><span class=\"dt\">void<\/span> qsort(<span class=\"dt\">void<\/span> *base, <span class=\"dt\">size_t<\/span> nmemb, <span class=\"dt\">size_t<\/span> size,<\/a>\n-<a class=\"sourceLine\" id=\"cb10-2\" title=\"2\">           <span class=\"dt\">int<\/span> (*compar)(<span class=\"dt\">const<\/span> <span class=\"dt\">void<\/span> *, <span class=\"dt\">const<\/span> <span class=\"dt\">void<\/span> *));<\/a><\/code><\/pre><\/div>\n-<p>This is a function that can be used to sort the contents of an array, using a custom comparator function — <code>compar<\/code> — which is passed as a function pointer. To be able to call the <code>qsort<\/code> function from Java we have first to create a downcall native method handle for it:<\/p>\n-<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\">MethodHandle qsort = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;qsort&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">void<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">ofVoid<\/span>(C_POINTER, C_LONG, C_LONG, C_POINTER)<\/a>\n-<a class=\"sourceLine\" id=\"cb11-5\" title=\"5\">);<\/a><\/code><\/pre><\/div>\n-<p>As before, we use <code>C_LONG<\/code> and <code>long.class<\/code> to map the C <code>size_t<\/code> type, and we use <code>MemoryAddess.class<\/code> both for the first pointer parameter (the array pointer) and the last parameter (the function pointer).<\/p>\n-<p>This time, in order to invoke the <code>qsort<\/code> downcall handle, we need a <em>function pointer<\/em> to be passed as the last parameter; this is where the upcall support in foreign linker comes in handy, as it allows us to create a function pointer out of an existing method handle. First, let's write a function that can compare two int elements (passed as pointers):<\/p>\n-<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb12-1\" title=\"1\"><span class=\"kw\">class<\/span> Qsort {<\/a>\n-<a class=\"sourceLine\" id=\"cb12-2\" title=\"2\">    <span class=\"dt\">static<\/span> <span class=\"dt\">int<\/span> <span class=\"fu\">qsortCompare<\/span>(MemoryAddress addr1, MemoryAddress addr2) {<\/a>\n-<a class=\"sourceLine\" id=\"cb12-3\" title=\"3\">        <span class=\"kw\">return<\/span> MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr1.<span class=\"fu\">toRawLongValue<\/span>()) - <\/a>\n-<a class=\"sourceLine\" id=\"cb12-4\" title=\"4\">               MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr2.<span class=\"fu\">toRawLongValue<\/span>());<\/a>\n-<a class=\"sourceLine\" id=\"cb12-5\" title=\"5\">    }<\/a>\n-<a class=\"sourceLine\" id=\"cb12-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n-<p>Here we can see that the function is performing some <em>unsafe<\/em> dereference of the pointer contents, by using the <em>everything<\/em> segment. Now let's create a method handle pointing to the comparator function above:<\/p>\n-<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb13-1\" title=\"1\">MethodHandle comparHandle = MethodHandles.<span class=\"fu\">lookup<\/span>()<\/a>\n-<a class=\"sourceLine\" id=\"cb13-2\" title=\"2\">                                         .<span class=\"fu\">findStatic<\/span>(Qsort.<span class=\"fu\">class<\/span>, <span class=\"st\">&quot;qsortCompare&quot;<\/span>,<\/a>\n-<a class=\"sourceLine\" id=\"cb13-3\" title=\"3\">                                                     MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>));<\/a><\/code><\/pre><\/div>\n-<p>Now that we have a method handle for our Java comparator function, we can create a function pointer, using the foreign linker upcall support — as for downcalls, we have to describe the signature of the foreign function pointer using the layouts in the <code>CLinker<\/code> class:<\/p>\n-<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\">MemorySegment comparFunc = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">upcallStub<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\">    comparHandle,<\/a>\n-<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\">    FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_POINTER)<\/a>\n-<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">);<\/a><\/code><\/pre><\/div>\n-<p>So, we finally have a memory segment — <code>comparFunc<\/code> — containing a stub that can be used to invoke our Java comparator function; this means we now have all we need to call the <code>qsort<\/code> downcall handle:<\/p>\n-<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb15-1\" title=\"1\">MemorySegment array = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">4<\/span> * <span class=\"dv\">10<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb15-2\" title=\"2\">array.<span class=\"fu\">copyFrom<\/span>(MemorySegment.<span class=\"fu\">ofArray<\/span>(<span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[] { <span class=\"dv\">0<\/span>, <span class=\"dv\">9<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">6<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">8<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">7<\/span> }));<\/a>\n-<a class=\"sourceLine\" id=\"cb15-3\" title=\"3\">qsort.<span class=\"fu\">invokeExact<\/span>(array.<span class=\"fu\">address<\/span>(), <span class=\"dv\">10L<\/span>, <span class=\"dv\">4L<\/span>, comparFunc.<span class=\"fu\">address<\/span>());<\/a>\n-<a class=\"sourceLine\" id=\"cb15-4\" title=\"4\"><span class=\"dt\">int<\/span>[] sorted = array.<span class=\"fu\">toIntArray<\/span>(); <span class=\"co\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/a><\/code><\/pre><\/div>\n-<p>The above code creates an off-heap array, then copies the contents of a Java array on it (we shall see in the next <a href=\"#native-scope\">section<\/a> ways to do that more succinctly), and then pass the array to the <code>qsort<\/code> handle, along with the comparator function we obtained from the foreign linker. As a side-effect, after the call, the contents of the off-heap array will be sorted (as instructed by our comparator function, written in Java). We can than extract a new Java array from the segment, which contains the sorted elements. This is a more advanced example, but one that shows how powerful the native interop support provided by the foreign linker abstraction is, allowing full bidirectional interop support between Java and native.<\/p>\n-<p>As before, we conclude with a quick note on life-cycle. First, the life-cycle of the upcall stub is tied to that of the segment returned by the foreign linker. When the segment is closed, the upcall is uninstalled from the VM and will no longer be a valid function pointer. Second, the life-cycle of structs (if any) passed by value to the Java upcall function is independent from that of the upcall <a href=\"#4\"><sup>4<\/sup><\/a>, so again the user will have to pay attention not to leak memory and to call <code>MemorySegment::close<\/code> on any segments obtained through an upcall.<\/p>\n-<h3 id=\"native-scope\">Native scope<\/h3>\n-<p>Idiomatic C code implicitly relies on stack allocation to allow for concise variable declarations; consider this example:<\/p>\n-<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb16-1\" title=\"1\"><span class=\"dt\">void<\/span> foo(<span class=\"dt\">int<\/span> i, <span class=\"dt\">int<\/span> *size);<\/a>\n-<a class=\"sourceLine\" id=\"cb16-2\" title=\"2\"><\/a>\n-<a class=\"sourceLine\" id=\"cb16-3\" title=\"3\"><span class=\"dt\">int<\/span> size = <span class=\"dv\">5<\/span>;<\/a>\n-<a class=\"sourceLine\" id=\"cb16-4\" title=\"4\">foo(<span class=\"dv\">42<\/span>, &amp;size);<\/a><\/code><\/pre><\/div>\n-<p>Here the function <code>foo<\/code> takes an output parameter, a pointer to an <code>int<\/code> variable. Unfortunately (and we have seen part of that pain in the <code>qsort<\/code> example above), implementing this idiom in Panama is not straightforward:<\/p>\n-<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb17-1\" title=\"1\">MethodHandle foo = ...<\/a>\n-<a class=\"sourceLine\" id=\"cb17-2\" title=\"2\">MemorySegment size = MemorySegment.<span class=\"fu\">allocateNative<\/span>(C_INT);<\/a>\n-<a class=\"sourceLine\" id=\"cb17-3\" title=\"3\">MemoryAccess.<span class=\"fu\">setInt<\/span>(size, <span class=\"dv\">5<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb17-4\" title=\"4\">foo.<span class=\"fu\">invokeExact<\/span>(<span class=\"dv\">42<\/span>, size);<\/a><\/code><\/pre><\/div>\n-<p>There are a number of issues with the above code snippet:<\/p>\n-<ul>\n-<li>compared to the C code, it is very verbose<\/li>\n-<li>allocation is very slow compared to C; allocating the <code>size<\/code> variable now takes a full <code>malloc<\/code>, while in C the variable was simply stack-allocated<\/li>\n-<li>we end up with a standalone segment with its own temporal bounds, which will have to be <em>closed<\/em> later, to avoid leaks<\/li>\n-<\/ul>\n-<p>To address these problems, Panama provides a <code>NativeScope<\/code> abstraction, which can be used to group allocation so as to achieve superior allocation performance, but also so that groups of logically-related segments can share the same temporal bounds, and can therefore be closed at once (e.g. by using a single <em>try-with-resources<\/em> statement). With the help of native scopes, the above code can be rewritten as follows:<\/p>\n-<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb18-1\" title=\"1\"><span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n-<a class=\"sourceLine\" id=\"cb18-2\" title=\"2\">    MemorySegment size = scope.<span class=\"fu\">allocate<\/span>(C_INT, <span class=\"dv\">5<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb18-3\" title=\"3\">    foo.<span class=\"fu\">invokeExact<\/span>(<span class=\"dv\">42<\/span>, size);<\/a>\n-<a class=\"sourceLine\" id=\"cb18-4\" title=\"4\">}<\/a><\/code><\/pre><\/div>\n-<p>It's easy to see how this code improves over the former in many ways; first, native scopes have primitives to allocate <em>and<\/em> initialize the contents of a segment; secondly, native scope use more efficient allocation underneath, so that not every allocation request is turned into a <code>malloc<\/code> — in fact, if the size of memory to be used is known before hand, clients can also use the bounded variant of native scope, using the <code>NativeScope::boundedScope(long size)<\/code> factory <a href=\"#5\"><sup>5<\/sup><\/a>. Third, a native scope can be used as a single temporal bound for all the segments allocated within it: that is, if the code needs to instantiate other variables, it can keep doing so using the same scope — when the <em>try-with-resource<\/em> statement completes, all resources associated with the scope will be freed.<\/p>\n-<p>There are at least two cases where allocation of native resources occurs <em>outside<\/em> a native scope:<\/p>\n-<ul>\n-<li>structs segments returned by native calls (or passed to upcalls Java methods)<\/li>\n-<li>upcall stubs segments returned by the foreign linker<\/li>\n-<\/ul>\n-<p>In these cases, the API gives us a segment which feature <em>its own<\/em> temporal bounds — this is handy, as we can use the segment to control the lifecycle of the resource allocated by the foreign linker support; but it is also a bit unfortunate: if the surrounding code happens to already have a native scope, these new segments won't be able to interoperate with it, and a separate <em>try-with-resource<\/em> segment should be used.<\/p>\n-<p>To alleviate this problem, and allow <em>all<\/em> segments to be managed using the <em>same<\/em> native scope, the native scope API not only supports the ability to allocate <em>new<\/em> segments, but it also allows to take ownership of <em>existing<\/em> ones. To see an example of this, let's go back to our <code>qsort<\/code> example, and see how we can make it better by using native scopes:<\/p>\n-<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb19-1\" title=\"1\"><span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n-<a class=\"sourceLine\" id=\"cb19-2\" title=\"2\">    comparFunc = comparFunc.<span class=\"fu\">handoff<\/span>(scope);<\/a>\n-<a class=\"sourceLine\" id=\"cb19-3\" title=\"3\">    MemorySegment array = scope.<span class=\"fu\">allocateArray<\/span>(C_INT, <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[] { <span class=\"dv\">0<\/span>, <span class=\"dv\">9<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">6<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">8<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">7<\/span> });<\/a>\n-<a class=\"sourceLine\" id=\"cb19-4\" title=\"4\">    qsort.<span class=\"fu\">invokeExact<\/span>(array, <span class=\"dv\">10L<\/span>, <span class=\"dv\">4L<\/span>, comparFunc);<\/a>\n-<a class=\"sourceLine\" id=\"cb19-5\" title=\"5\">    <span class=\"dt\">int<\/span>[] sorted = array.<span class=\"fu\">toIntArray<\/span>(); <span class=\"co\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb19-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n-<p>Not only native scope helps in making the allocation of the native array simpler (we no longer need to create an heap segment, and dump its contents onto the off-heap array); but we can also use the native scope as an <em>handoff target<\/em> for existing upcall stub segments. When we do that, we obtain a <em>new<\/em> segment, whose temporal bounds are the same as that of the native scope; the old segment will be killed and will no longer be usable. As with all segments returned by native scope, the new segment we get back will be non-closeable — the only way to close it is to close the native scope it belongs to.<\/p>\n-<p>In short, native scopes are a good way to manage the lifecycle of multiple, logically-related segments, and, despite their simplicity, they provide a fairly good usability and performance boost.<\/p>\n-<h3 id=\"varargs\">Varargs<\/h3>\n-<p>Some C functions are <em>variadic<\/em> and can take an arbitrary number of arguments. Perhaps the most common example of this is the <code>printf<\/code> function, defined in the C standard library:<\/p>\n-<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb20-1\" title=\"1\"><span class=\"dt\">int<\/span> printf(<span class=\"dt\">const<\/span> <span class=\"dt\">char<\/span> *format, ...);<\/a><\/code><\/pre><\/div>\n-<p>This function takes a format string, which features zero or more <em>holes<\/em>, and then can take a number of additional arguments that is identical to the number of holes in the format string.<\/p>\n-<p>The foreign function support can support variadic calls, but with a caveat: the client must provide a specialized Java signature, and a specialized description of the C signature. For instance, let's say we wanted to model the following C call:<\/p>\n-<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb21-1\" title=\"1\">printf(<span class=\"st\">&quot;%d plus %d equals %d&quot;<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>);<\/a><\/code><\/pre><\/div>\n-<p>To do this using the foreign function support provided by Panama we would have to build a <em>specialized<\/em> downcall handle for that call shape <a href=\"#6\"><sup>6<\/sup><\/a>:<\/p>\n-<div class=\"sourceCode\" id=\"cb22\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb22-1\" title=\"1\">MethodHandle printf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb22-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;printf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb22-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb22-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_INT, C_INT, C_INT)<\/a>\n-<a class=\"sourceLine\" id=\"cb22-5\" title=\"5\">);<\/a><\/code><\/pre><\/div>\n-<p>Then we can call the specialized downcall handle as usual:<\/p>\n-<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb23-1\" title=\"1\">printf.<span class=\"fu\">invoke<\/span>(CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d&quot;<\/span>).<span class=\"fu\">address<\/span>(), <span class=\"dv\">2<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>); <span class=\"co\">\/\/prints &quot;2 plus 2 equals 4&quot;<\/span><\/a><\/code><\/pre><\/div>\n-<p>While this works, it is easy to see how such an approach is not very desirable:<\/p>\n-<ul>\n-<li>If the variadic function needs to be called with many different shapes, we have to create many different downcall handles<\/li>\n-<li>while this approach works for downcalls (since the Java code is in charge of determining which and how many arguments should be passed) it fails to scale to upcalls; in that case, the call comes from native code, so we have no way to guarantee that the shape of the upcall stub we have created will match that required by the native function.<\/li>\n-<\/ul>\n-<p>To mitigate these issues, the standard C foreign linker comes equipped with support for C variable argument lists — or <code>va_list<\/code>. When a variadic function is called, C code has to unpack the variadic arguments by creating a <code>va_list<\/code> structure, and then accessing the variadic arguments through the <code>va_list<\/code> one by one (using the <code>va_arg<\/code> macro). To facilitate interop between standard variadic functions and <code>va_list<\/code> many C library functions in fact define <em>two<\/em> flavors of the same function, one using standard variadic signature, one using an extra <code>va_list<\/code> parameter. For instance, in the case of <code>printf<\/code> we can find that a <code>va_list<\/code>-accepting function performing the same task is also defined:<\/p>\n-<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb24-1\" title=\"1\"><span class=\"dt\">int<\/span> vprintf(<span class=\"dt\">const<\/span> <span class=\"dt\">char<\/span> *format, <span class=\"dt\">va_list<\/span> ap);<\/a><\/code><\/pre><\/div>\n-<p>The behavior of this function is the same as before — the only difference is that the ellipsis notation <code>...<\/code> has been replaced with a single <code>va_list<\/code> parameter; in other words, the function is no longer variadic.<\/p>\n-<p>It is indeed fairly easy to create a downcall for <code>vprintf<\/code>:<\/p>\n-<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb25-1\" title=\"1\">MethodHandle vprintf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb25-2\" title=\"2\">        LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;vprintf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb25-3\" title=\"3\">        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, VaList.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb25-4\" title=\"4\">        FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_VA_LIST));<\/a><\/code><\/pre><\/div>\n-<p>Here, the notable thing is that <code>CLinker<\/code> comes equipped with the special <code>C_VA_LIST<\/code> layout (the layout of a <code>va_list<\/code> parameter) as well as a <code>VaList<\/code> carrier, which can be used to construct and represent variable argument lists from Java code.<\/p>\n-<p>To call the <code>vprintf<\/code> handle we need to create an instance of <code>VaList<\/code> which contains the arguments we want to pass to the <code>vprintf<\/code> function — we can do so, as follows:<\/p>\n-<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb26-1\" title=\"1\">vprintf.<span class=\"fu\">invoke<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb26-2\" title=\"2\">        CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d&quot;<\/span>).<span class=\"fu\">address<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb26-3\" title=\"3\">        VaList.<span class=\"fu\">make<\/span>(builder -&gt;<\/a>\n-<a class=\"sourceLine\" id=\"cb26-4\" title=\"4\">                        builder.<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n-<a class=\"sourceLine\" id=\"cb26-5\" title=\"5\">                               .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n-<a class=\"sourceLine\" id=\"cb26-6\" title=\"6\">                               .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">4<\/span>))<\/a>\n-<a class=\"sourceLine\" id=\"cb26-7\" title=\"7\">); <span class=\"co\">\/\/prints &quot;2 plus 2 equals 4&quot;<\/span><\/a><\/code><\/pre><\/div>\n-<p>While the callee has to do more work to call the <code>vprintf<\/code> handle, note that that now we're back in a place where the downcall handle <code>vprintf<\/code> can be shared across multiple callees. A <code>VaList<\/code> object created this way has its own lifetime (<code>VaList<\/code> also supports a <code>close<\/code> operation), so it is up to the callee to make sure that the <code>VaList<\/code> instance is closed (or attached to some existing native scope) so as to avoid leaks.<\/p>\n-<p>Another advantage of using <code>VaList<\/code> is that this approach also scales to upcall stubs — it is therefore possible for clients to create upcalls stubs which take a <code>VaList<\/code> and then, from the Java upcall, read the arguments packed inside the <code>VaList<\/code> one by one using the methods provided by the <code>VaList<\/code> API (e.g. <code>VaList::vargAsInt(MemoryLayout)<\/code>), which mimic the behavior of the C <code>va_arg<\/code> macro.<\/p>\n-<h3 id=\"appendix-full-source-code\">Appendix: full source code<\/h3>\n-<p>The full source code containing most of the code shown throughout this document can be seen below:<\/p>\n-<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb27-1\" title=\"1\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.Addressable;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-2\" title=\"2\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-3\" title=\"3\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.FunctionDescriptor;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-4\" title=\"4\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.LibraryLookup;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-5\" title=\"5\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAccess;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-6\" title=\"6\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemoryAddress;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-7\" title=\"7\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.MemorySegment;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-8\" title=\"8\"><span class=\"kw\">import<\/span><span class=\"im\"> jdk.incubator.foreign.NativeScope;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-9\" title=\"9\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-10\" title=\"10\"><span class=\"kw\">import<\/span><span class=\"im\"> java.lang.invoke.MethodHandle;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-11\" title=\"11\"><span class=\"kw\">import<\/span><span class=\"im\"> java.lang.invoke.MethodHandles;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-12\" title=\"12\"><span class=\"kw\">import<\/span><span class=\"im\"> java.lang.invoke.MethodType;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-13\" title=\"13\"><span class=\"kw\">import<\/span><span class=\"im\"> java.util.Arrays;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-14\" title=\"14\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-15\" title=\"15\"><span class=\"kw\">import static<\/span><span class=\"im\"> jdk.incubator.foreign.CLinker.*;<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-16\" title=\"16\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-17\" title=\"17\"><span class=\"kw\">public<\/span> <span class=\"kw\">class<\/span> Examples {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-18\" title=\"18\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-19\" title=\"19\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">main<\/span>(<span class=\"bu\">String<\/span>[] args) <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-20\" title=\"20\">        <span class=\"fu\">strlen<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb27-21\" title=\"21\">        <span class=\"fu\">qsort<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb27-22\" title=\"22\">        <span class=\"fu\">printf<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb27-23\" title=\"23\">        <span class=\"fu\">vprintf<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb27-24\" title=\"24\">    }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-25\" title=\"25\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-26\" title=\"26\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">strlen<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-27\" title=\"27\">        MethodHandle strlen = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb27-28\" title=\"28\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;strlen&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-29\" title=\"29\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-30\" title=\"30\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_LONG, C_POINTER)<\/a>\n-<a class=\"sourceLine\" id=\"cb27-31\" title=\"31\">        );<\/a>\n-<a class=\"sourceLine\" id=\"cb27-32\" title=\"32\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-33\" title=\"33\">        <span class=\"kw\">try<\/span> (MemorySegment hello = CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;Hello&quot;<\/span>)) {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-34\" title=\"34\">            <span class=\"dt\">long<\/span> len = (<span class=\"dt\">long<\/span>) strlen.<span class=\"fu\">invokeExact<\/span>(hello.<span class=\"fu\">address<\/span>()); <span class=\"co\">\/\/ 5<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-35\" title=\"35\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(len);<\/a>\n-<a class=\"sourceLine\" id=\"cb27-36\" title=\"36\">        }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-37\" title=\"37\">    }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-38\" title=\"38\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-39\" title=\"39\">    <span class=\"dt\">static<\/span> <span class=\"kw\">class<\/span> Qsort {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-40\" title=\"40\">        <span class=\"dt\">static<\/span> <span class=\"dt\">int<\/span> <span class=\"fu\">qsortCompare<\/span>(MemoryAddress addr1, MemoryAddress addr2) {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-41\" title=\"41\">            <span class=\"dt\">int<\/span> v1 = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr1.<span class=\"fu\">toRawLongValue<\/span>());<\/a>\n-<a class=\"sourceLine\" id=\"cb27-42\" title=\"42\">            <span class=\"dt\">int<\/span> v2 = MemoryAccess.<span class=\"fu\">getIntAtOffset<\/span>(MemorySegment.<span class=\"fu\">ofNativeRestricted<\/span>(), addr2.<span class=\"fu\">toRawLongValue<\/span>());<\/a>\n-<a class=\"sourceLine\" id=\"cb27-43\" title=\"43\">            <span class=\"kw\">return<\/span> v1 - v2;<\/a>\n-<a class=\"sourceLine\" id=\"cb27-44\" title=\"44\">        }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-45\" title=\"45\">    }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-46\" title=\"46\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-47\" title=\"47\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">qsort<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-48\" title=\"48\">        MethodHandle qsort = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb27-49\" title=\"49\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;qsort&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-50\" title=\"50\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">void<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">long<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-51\" title=\"51\">                FunctionDescriptor.<span class=\"fu\">ofVoid<\/span>(C_POINTER, C_LONG, C_LONG, C_POINTER)<\/a>\n-<a class=\"sourceLine\" id=\"cb27-52\" title=\"52\">        );<\/a>\n-<a class=\"sourceLine\" id=\"cb27-53\" title=\"53\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-54\" title=\"54\">        MethodHandle comparHandle = MethodHandles.<span class=\"fu\">lookup<\/span>()<\/a>\n-<a class=\"sourceLine\" id=\"cb27-55\" title=\"55\">                .<span class=\"fu\">findStatic<\/span>(Qsort.<span class=\"fu\">class<\/span>, <span class=\"st\">&quot;qsortCompare&quot;<\/span>,<\/a>\n-<a class=\"sourceLine\" id=\"cb27-56\" title=\"56\">                        MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>));<\/a>\n-<a class=\"sourceLine\" id=\"cb27-57\" title=\"57\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-58\" title=\"58\">        MemorySegment comparFunc = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">upcallStub<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb27-59\" title=\"59\">                comparHandle,<\/a>\n-<a class=\"sourceLine\" id=\"cb27-60\" title=\"60\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_POINTER)<\/a>\n-<a class=\"sourceLine\" id=\"cb27-61\" title=\"61\">        );<\/a>\n-<a class=\"sourceLine\" id=\"cb27-62\" title=\"62\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-63\" title=\"63\">        <span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-64\" title=\"64\">            comparFunc = comparFunc.<span class=\"fu\">handoff<\/span>(scope);<\/a>\n-<a class=\"sourceLine\" id=\"cb27-65\" title=\"65\">            MemorySegment array = scope.<span class=\"fu\">allocateArray<\/span>(C_INT, <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[] { <span class=\"dv\">0<\/span>, <span class=\"dv\">9<\/span>, <span class=\"dv\">3<\/span>, <span class=\"dv\">4<\/span>, <span class=\"dv\">6<\/span>, <span class=\"dv\">5<\/span>, <span class=\"dv\">1<\/span>, <span class=\"dv\">8<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">7<\/span> });<\/a>\n-<a class=\"sourceLine\" id=\"cb27-66\" title=\"66\">            qsort.<span class=\"fu\">invokeExact<\/span>(array.<span class=\"fu\">address<\/span>(), <span class=\"dv\">10L<\/span>, <span class=\"dv\">4L<\/span>, comparFunc.<span class=\"fu\">address<\/span>());<\/a>\n-<a class=\"sourceLine\" id=\"cb27-67\" title=\"67\">            <span class=\"dt\">int<\/span>[] sorted = array.<span class=\"fu\">toIntArray<\/span>(); <span class=\"co\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb27-68\" title=\"68\">            <span class=\"bu\">System<\/span>.<span class=\"fu\">out<\/span>.<span class=\"fu\">println<\/span>(<span class=\"bu\">Arrays<\/span>.<span class=\"fu\">toString<\/span>(sorted));<\/a>\n-<a class=\"sourceLine\" id=\"cb27-69\" title=\"69\">        }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-70\" title=\"70\">    }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-71\" title=\"71\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-72\" title=\"72\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">printf<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-73\" title=\"73\">        MethodHandle printf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb27-74\" title=\"74\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;printf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-75\" title=\"75\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-76\" title=\"76\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_INT, C_INT, C_INT)<\/a>\n-<a class=\"sourceLine\" id=\"cb27-77\" title=\"77\">        );<\/a>\n-<a class=\"sourceLine\" id=\"cb27-78\" title=\"78\">        <span class=\"kw\">try<\/span> (MemorySegment s = CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>)) {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-79\" title=\"79\">            printf.<span class=\"fu\">invoke<\/span>(s.<span class=\"fu\">address<\/span>(), <span class=\"dv\">2<\/span>, <span class=\"dv\">2<\/span>, <span class=\"dv\">4<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb27-80\" title=\"80\">        }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-81\" title=\"81\">    }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-82\" title=\"82\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-83\" title=\"83\">    <span class=\"kw\">public<\/span> <span class=\"dt\">static<\/span> <span class=\"dt\">void<\/span> <span class=\"fu\">vprintf<\/span>() <span class=\"kw\">throws<\/span> <span class=\"bu\">Throwable<\/span> {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-84\" title=\"84\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-85\" title=\"85\">        MethodHandle vprintf = CLinker.<span class=\"fu\">getInstance<\/span>().<span class=\"fu\">downcallHandle<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb27-86\" title=\"86\">                LibraryLookup.<span class=\"fu\">ofDefault<\/span>().<span class=\"fu\">lookup<\/span>(<span class=\"st\">&quot;vprintf&quot;<\/span>).<span class=\"fu\">get<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-87\" title=\"87\">                MethodType.<span class=\"fu\">methodType<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, MemoryAddress.<span class=\"fu\">class<\/span>, CLinker.<span class=\"fu\">VaList<\/span>.<span class=\"fu\">class<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb27-88\" title=\"88\">                FunctionDescriptor.<span class=\"fu\">of<\/span>(C_INT, C_POINTER, C_VA_LIST));<\/a>\n-<a class=\"sourceLine\" id=\"cb27-89\" title=\"89\"><\/a>\n-<a class=\"sourceLine\" id=\"cb27-90\" title=\"90\">        <span class=\"kw\">try<\/span> (NativeScope scope = NativeScope.<span class=\"fu\">unboundedScope<\/span>()) {<\/a>\n-<a class=\"sourceLine\" id=\"cb27-91\" title=\"91\">            MemorySegment s = CLinker.<span class=\"fu\">toCString<\/span>(<span class=\"st\">&quot;%d plus %d equals %d<\/span><span class=\"sc\">\\n<\/span><span class=\"st\">&quot;<\/span>, scope);<\/a>\n-<a class=\"sourceLine\" id=\"cb27-92\" title=\"92\">            CLinker.<span class=\"fu\">VaList<\/span> vlist = CLinker.<span class=\"fu\">VaList<\/span>.<span class=\"fu\">make<\/span>(builder -&gt;<\/a>\n-<a class=\"sourceLine\" id=\"cb27-93\" title=\"93\">                     builder.<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n-<a class=\"sourceLine\" id=\"cb27-94\" title=\"94\">                            .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">2<\/span>)<\/a>\n-<a class=\"sourceLine\" id=\"cb27-95\" title=\"95\">                            .<span class=\"fu\">vargFromInt<\/span>(C_INT, <span class=\"dv\">4<\/span>), scope);<\/a>\n-<a class=\"sourceLine\" id=\"cb27-96\" title=\"96\">            vprintf.<span class=\"fu\">invoke<\/span>(s.<span class=\"fu\">address<\/span>(), vlist);<\/a>\n-<a class=\"sourceLine\" id=\"cb27-97\" title=\"97\">        }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-98\" title=\"98\">    }<\/a>\n-<a class=\"sourceLine\" id=\"cb27-99\" title=\"99\">}<\/a><\/code><\/pre><\/div>\n-<ul>\n-<li><a id=\"1\"\/>(<sup>1<\/sup>):<small> In reality this is not entirely new; even in JNI, when you call a <code>native<\/code> method the VM trusts that the corresponding implementing function in C will feature compatible parameter types and return values; if not a crash might occur.<\/small><\/li>\n-<li><a id=\"2\"\/>(<sup>2<\/sup>):<small> In the fututre we might consider knobs to allow structs returned by value to be allocated on-heap rather than off-heap. If these structs are always passed back and forth in an opaque manner, there could be a significant performance advantage in avoiding an off-heap allocation.<\/small><\/li>\n-<li><a id=\"3a\"\/>(<sup>3a<\/sup>):<small> At the time of writing, support for native method intrinsics has been disabled by default due to some spurious VM crash being detected when running <code>jextract<\/code> with the intrinsics support enabled. While we work to rectify this situation, the intrinsics support can still be enabled using the <code>-Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true<\/code> flag.<\/small><\/li>\n-<li><a id=\"3b\"\/>(<sup>3b<\/sup>):<small> As an advanced option, Panama allows the user to opt-in to remove Java to native thread transitions; while, in the general case it is unsafe doing so (removing thread transitions could have a negative impact on GC for long running native functions, and could crash the VM if the downcall needs to pop back out in Java, e.g. via an upcall), greater efficiency can be achieved; performance sensitive users should consider this option at least for the functions that are called more frquently, assuming that these functions are <em>leaf<\/em> functions (e.g. do not go back to Java via an upcall) and are relatively short-lived.<\/small><\/li>\n-<li><a id=\"4\"\/>(<sup>4<\/sup>):<small> This might change in the future, as we might want to tie the lifecycle of structs created for an upcall to the lifecycle of the upcall itself so that e.g. any segment that are created ahead of calling a Java upcall, are released immediately after the upcall returns<\/small><\/li>\n-<li><a id=\"5\"\/>(<sup>5<\/sup>):<small> We are currently investigating alternate allocation strategies to make allocation inside native scopes even faster<\/small><\/li>\n-<li><a id=\"6\"\/>(<sup>6<\/sup>):<small> On Windows, layouts for variadic arguments have to be adjusted using the <code>CLinker.Win64.asVarArg(ValueLayout)<\/code>; this is necessay because the Windows ABI passes variadic arguments using different rules than the ones used for ordinary arguments.<\/small><\/li>\n-<\/ul>\n+<body class='typora-export'>\n+<div id='write'  class=''><h2><a name=\"state-of-foreign-function-support\" class=\"md-header-anchor\"><\/a><span>State of foreign function support<\/span><\/h2><p><strong><span>March 2021<\/span><\/strong><\/p><ul><li><span>Rewrite section on NativeScope (now Segment allocators) and move it earlier in the doc<\/span><\/li><li><span>Discuss life-cycle options for downcalls (struct returned by value), upcalls and valist<\/span><\/li><li><span>Tweak examples<\/span><\/li><\/ul><p><strong><span>Maurizio Cimadamore<\/span><\/strong><\/p><p><span>In this document we explore the main concepts behind Panama&#39;s foreign function support; as we shall see, the central abstraction in the foreign function support is the so called <\/span><em><span>foreign linker<\/span><\/em><span>, an abstraction that allows clients to construct <\/span><em><span>native<\/span><\/em><span> method handles — that is, method handles whose invocation targets a native function defined in some native library. As we shall see, Panama foreign function support is completely expressed in terms of Java code and no intermediate native code is required.<\/span><\/p><h3><a name=\"native-addresses\" class=\"md-header-anchor\"><\/a><span>Native addresses<\/span><\/h3><p><span>Before we dive into the specifics of the foreign function support, it would be useful to briefly recap some of the main concepts we have learned when exploring the <\/span><a href='http:\/\/cr.openjdk.java.net\/~mcimadamore\/panama\/foreign-memaccess.html'><span>foreign memory access support<\/span><\/a><span>. The Foreign Memory Access API allows client to create and manipulate <\/span><em><span>memory segments<\/span><\/em><span>. A memory segment is a view over a memory source (either on- or off-heap) which is spatially bounded, temporally bounded and thread-confined. The guarantees ensure that dereferencing a segment that has been created by Java code is always <\/span><em><span>safe<\/span><\/em><span>, and can never result in a VM crash, or, worse, in silent memory corruption.<\/span><\/p><p><span>Now, in the case of memory segments, the above properties (spatial bounds, temporal bounds and confinement) can be known <\/span><em><span>in full<\/span><\/em><span> when the segment is created. But when we interact with native libraries we will often be receiving <\/span><em><span>raw<\/span><\/em><span> pointers; such pointers have no spatial bounds (does a <\/span><code>char*<\/code><span> in C refer to one <\/span><code>char<\/code><span>, or a <\/span><code>char<\/code><span> array of a given size?), no notion of temporal bounds, nor thread-confinement. Raw addresses in our interop support are modeled using the <\/span><code>MemoryAddress<\/code><span> abstraction.<\/span><\/p><p><span>A memory address is just what the name implies: it encapsulates a memory address (either on- or off-heap). Since, in order to dereference memory using a memory access var handle, we need a segment, it follows that it is <\/span><em><span>not<\/span><\/em><span> possible to directly dereference a memory address — to do that we need a segment first. So clients can proceed in three different ways here.<\/span><\/p><p><span>First, if the memory address is known to belong to a segment the client <\/span><em><span>already<\/span><\/em><span> owns, a <\/span><em><span>rebase<\/span><\/em><span> operation can be performed; in other words, the client can ask the address what is its offset relative to a given segment, and then proceed to dereference the original segment accordingly:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 680px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-number\">100<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">...<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr<\/span> <span class=\"cm-operator\">=<\/span> ... <span class=\"cm-comment\">\/\/obtain address from native code<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtOffset<\/span>(<span class=\"cm-variable\">segment<\/span>, <span class=\"cm-variable\">addr<\/span>.<span class=\"cm-variable\">segmentOffset<\/span>(<span class=\"cm-variable\">segment<\/span>));    <\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 92px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"><\/div><\/div><\/div><\/pre><p><span>Secondly, if the client does <\/span><em><span>not<\/span><\/em><span> have a segment which contains a given memory address, it can create one <\/span><em><span>unsafely<\/span><\/em><span>, using the <\/span><code>MemoryAddress::asSegmentRestricted<\/code><span>; this can also be useful to inject extra knowledge about spatial bounds which might be available in the native library the client is interacting with:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 507.797px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr<\/span> <span class=\"cm-operator\">=<\/span> ... <span class=\"cm-comment\">\/\/obtain address from native code<\/span><\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">addr<\/span>.<span class=\"cm-variable\">asSegmentRestricted<\/span>(<span class=\"cm-number\">100<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getInt<\/span>(<span class=\"cm-variable\">segment<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 69px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 69px;\"><\/div><\/div><\/div><\/pre><p><span>Alternatively, the client can fall back to use the so called <\/span><em><span>everything<\/span><\/em><span> segment - that is, a primordial segment which covers the entire native heap and whose scope is always alive (the so called <\/span><em><span>global scope<\/span><\/em><span>). Since this segment is available as a constant, dereference can happen without the need of creating any additional segment instances:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 827px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr<\/span> <span class=\"cm-operator\">=<\/span> ... <span class=\"cm-comment\">\/\/obtain address from native code<\/span><\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtOffset<\/span>(<span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">ofNativeRestricted<\/span>(), <span class=\"cm-variable\">addr<\/span>.<span class=\"cm-variable\">toRawLongValue<\/span>());<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 46px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 46px;\"><\/div><\/div><\/div><\/pre><p><span>Of course, since accessing the entire native heap is inherently <\/span><em><span>unsafe<\/span><\/em><span>, accessing the <\/span><em><span>everything<\/span><\/em><span> segment is considered a <\/span><em><span>restricted<\/span><\/em><span> operation which is only allowed after explicit opt in by setting the <\/span><code>foreign.restricted=permit<\/code><span> runtime flag.<\/span><\/p><p><code>MemoryAddress<\/code><span>, like <\/span><code>MemorySegment<\/code><span> , implements the <\/span><code>Addressable<\/code><span> interface, which is a functional interface whose method projects an entity down to a <\/span><code>MemoryAddress<\/code><span> instance. In the case of <\/span><code>MemoryAddress<\/code><span> such a projection is the identity function; in the case of a memory segment, the projection returns the <\/span><code>MemoryAddres<\/code><span> instance for the segment&#39;s base address. This abstraction allows to pass either memory address or memory segments where an address is expected (this is especially useful when generating native bindings).<\/span><\/p><h3><a name=\"segment-allocators\" class=\"md-header-anchor\"><\/a><span>Segment allocators<\/span><\/h3><p><span>Idiomatic C code implicitly relies on stack allocation to allow for concise variable declarations; consider this example:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"c\"><div class=\"CodeMirror cm-s-inner\" lang=\"c\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 240px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><span><span>​<\/span>x<\/span><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">void<\/span> <span class=\"cm-def\">foo<\/span>(<span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">i<\/span>, <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable-3\">*<\/span><span class=\"cm-variable\">size<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">size<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">5<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">foo<\/span>(<span class=\"cm-number\">42<\/span>, <span class=\"cm-operator\">&amp;<\/span><span class=\"cm-variable\">size<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 92px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"><\/div><\/div><\/div><\/pre><p><span>Here the function <\/span><code>foo<\/code><span> takes an output parameter, a pointer to an <\/span><code>int<\/code><span> variable. Unfortunately (and we have seen part of that pain in the <\/span><code>qsort<\/code><span> example above), implementing this idiom in Panama is not straightforward:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 499px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">foo<\/span> <span class=\"cm-operator\">=<\/span> ...<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">size<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-variable\">C_INT<\/span>);<\/span><\/pre><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">setInt<\/span>(<span class=\"cm-variable\">size<\/span>.<span class=\"cm-variable\">address<\/span>(), <span class=\"cm-number\">5<\/span>);<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">foo<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<span class=\"cm-number\">42<\/span>, <span class=\"cm-variable\">size<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 92px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"><\/div><\/div><\/div><\/pre><p><span>There are a number of issues with the above code snippet:<\/span><\/p><ul><li><span>compared to the C code, it is very verbose<\/span><\/li><li><span>allocation is very slow compared to C; allocating the <\/span><code>size<\/code><span> variable now takes a full <\/span><code>malloc<\/code><span>, while in C the variable was simply stack-allocated<\/span><\/li><li><span>we end up with a standalone segment with its own temporal bounds, which will have to be <\/span><em><span>closed<\/span><\/em><span> later, to avoid leaks<\/span><\/li><\/ul><p><span>To address these problems, Panama provides a <\/span><code>SegmentAllocator<\/code><span> abstraction, a functional interface which provides many useful operation to allocate commonly used values. For instance, the above code can be rewritten as follows:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 602.734px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><pre><span>xxxxxxxxxx<\/span><\/pre><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">size<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">SegmentAllocator<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">allocate<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">5<\/span>);<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">foo<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<span class=\"cm-number\">42<\/span>, <span class=\"cm-variable\">size<\/span>.<span class=\"cm-variable\">address<\/span>());<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 46px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 46px;\"><\/div><\/div><\/div><\/pre><p><span>The above code retrieves the <\/span><em><span>default allocator<\/span><\/em><span> (an allocator built on top of <\/span><code>MemorySegment::allocateNative<\/code><span>), and then uses this allocator to create a new memory segment holding the int value <\/span><code>5<\/code><span>. Memory associated with segments returned by the default allocator is released as soon as said segments become <\/span><em><span>unreachable<\/span><\/em><span>. To have better control over the lifetime of the segments returned by an allocator, clients can use the so called <\/span><em><span>scoped<\/span><\/em><span> allocator, which returns segments associated with a given scope:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 654.516px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><pre><span>xxxxxxxxxx<\/span><\/pre><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">size<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">SegmentAllocator<\/span>.<span class=\"cm-variable\">scoped<\/span>(<span class=\"cm-variable\">scope<\/span>).<span class=\"cm-variable\">allocate<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">5<\/span>);<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">foo<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<span class=\"cm-number\">42<\/span>, <span class=\"cm-variable\">size<\/span>.<span class=\"cm-variable\">address<\/span>());<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">} <span class=\"cm-comment\">\/\/ 'size' is released here<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 92px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"><\/div><\/div><\/div><\/pre><p><span>Scoped allocator make sure that all segments allocated with a scoped allocator are no longer usable after the scope associated with the allocator has been closed.<\/span><\/p><p><span>Custom segment allocators are critical to achieve optimal allocation performance; for this reason, a number of predefined allocators are available via factories in the <\/span><code>SegmentAllocator<\/code><span> interface. For instance, it is possible to create an arena-based allocator, as follows:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded md-focus\" lang=\"java\"><div class=\"CodeMirror cm-s-inner CodeMirror-focused\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 115px; left: 68px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 628.672px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">SegmentAllocator<\/span> <span class=\"cm-variable\">allocator<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">SegmentAllocator<\/span>.<span class=\"cm-variable\">arenaUnbounded<\/span>(<span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">for<\/span> (<span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">0<\/span> ; <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">&lt;<\/span> <span class=\"cm-number\">100<\/span> ; <span class=\"cm-variable\">i<\/span><span class=\"cm-operator\">++<\/span>) {<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">allocator<\/span>.<span class=\"cm-variable\">allocate<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">i<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    ...<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">} <span class=\"cm-comment\">\/\/ all memory allocated is released here<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 161px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 161px;\"><\/div><\/div><\/div><\/pre><p><span>The above code creates a confined scope; inside the <\/span><em><span>try-with-resources<\/span><\/em><span>, a new unbounded arena allocation is created, associated with the existing scope. The allocator will allocate slabs of memory, of a specific size, and respond to allocation request by returning different slices of the pre-allocated slab. If a slab does not have sufficient space to accommodate a new allocation request, a new one will be allocated. If the scope associated with the arena allocator is closed, all memory associated with the segments created by the allocator (see the body of the <\/span><code>for<\/code><span> loop) will be deallocated at once. This idiom combines the advantages of deterministic deallocation (provided by the Memory Access API) with a more flexible and scalable allocation scheme, and can be very useful when writing large applications.<\/span><\/p><h3><a name=\"symbol-lookups\" class=\"md-header-anchor\"><\/a><span>Symbol lookups<\/span><\/h3><p><span>The first ingredient of any foreign function support is a mechanism to lookup symbols in native libraries. In traditional Java\/JNI, this is done via the <\/span><code>System::loadLibrary<\/code><span> and <\/span><code>System::load<\/code><span> methods, which internally map into calls to <\/span><code>dlopen<\/code><span>. In Panama, library lookups are modeled more directly, using a  class called<\/span><code>LibraryLookup<\/code><span>  (similar to a method handle lookup),  which provides capabilities to lookup named symbols in a given native library; we can obtain a library lookup in 3 different ways:<\/span><\/p><ul><li><code>LibraryLookup::ofDefault<\/code><span>  — returns the library lookup which can <\/span><em><span>see<\/span><\/em><span> all the symbols that have been loaded with the VM<\/span><\/li><li><code>LibraryLookup::ofPath<\/code><span> — creates a library lookup associated with the library found at the given absolute path<\/span><\/li><li><code>LibraryLookup::ofLibrary<\/code><span> — creates a library lookup associated with the library with given name (this might require setting the <\/span><code>java.library.path<\/code><span> variable accordingly)<\/span><\/li><\/ul><p><span>Once a lookup has been obtained, a client can use it to retrieve handles to library symbols (either global variables or functions) using the <\/span><code>lookup(String)<\/code><span> method, which returns an  <\/span><code>Optional&lt;LibraryLookup.Symbol&gt;<\/code><span>. A lookup symbol is just a proxy for a memory address (in fact, it implements <\/span><code>Addressable<\/code><span>) and a name.<\/span><\/p><p><span>For instance, the following code can be used to lookup the <\/span><code>clang_getClangVersion<\/code><span> function provided by the <\/span><code>clang<\/code><span> library:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 723.641px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">LibraryLookup<\/span> <span class=\"cm-variable\">libclang<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofLibrary<\/span>(<span class=\"cm-string\">\"clang\"<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">Symbol<\/span> <span class=\"cm-variable\">clangVersion<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">libclang<\/span>.<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"clang_getClangVersion\"<\/span>).<span class=\"cm-variable\">get<\/span>();<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 46px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 46px;\"><\/div><\/div><\/div><\/pre><p><span>One crucial distinction between the library loading support of the  Foreign Linker API and of JNI is that JNI libraries are loaded into a  class loader. Furthermore, to preserve <\/span><a href='https:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/guides\/jni\/jni-12.html#libmanage'><span>classloader integrity<\/span><\/a><span> integrity, the same JNI library cannot be loaded into more than one  classloader.  The foreign function support described here is more  primitive — the Foreign Linker API allows clients to target native  libraries directly, without any intervening JNI code. Crucially, Java  objects are never passed to and from native code by the Foreign Linker API. Because of this, libraries loaded through the <\/span><code>LibraryLookup<\/code><span> hook are not tied to any class loader and can be (re)loaded as many times as needed.<\/span><\/p><h3><a name=\"c-linker\" class=\"md-header-anchor\"><\/a><span>C Linker<\/span><\/h3><p><span>At the core of Panama foreign function support we find the <\/span><code>CLinker<\/code><span> abstraction. This abstraction plays a dual role: first, for downcalls, it allows to model native function calls as plain <\/span><code>MethodHandle<\/code><span> calls (see <\/span><code>ForeignLinker::downcallHandle<\/code><span>); second, for upcalls, it allows to convert an existing <\/span><code>MethodHandle<\/code><span> (which might point to some Java method) into a <\/span><code>MemorySegment<\/code><span> which could then be passed to native functions as a function pointer (see <\/span><code>ForeignLinker::upcallStub<\/code><span>):<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 904.969px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">interface<\/span> <span class=\"cm-def\">CLinker<\/span> {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">downcallHandle<\/span>(<span class=\"cm-variable\">Addressable<\/span> <span class=\"cm-variable\">func<\/span>, <span class=\"cm-variable\">MethodType<\/span> <span class=\"cm-variable\">type<\/span>, <span class=\"cm-variable\">FunctionDescriptor<\/span> <span class=\"cm-variable\">function<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">upcallStub<\/span>(<span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">target<\/span>, <span class=\"cm-variable\">FunctionDescriptor<\/span> <span class=\"cm-variable\">function<\/span>, <span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span>);    <\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    ... <span class=\"cm-comment\">\/\/ some overloads omitted here<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable\">CLinker<\/span> <span class=\"cm-variable\">getInstance<\/span>() { ... }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 161px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 161px;\"><\/div><\/div><\/div><\/pre><p><span>In the following sections we will dive deeper into how downcall handles and upcall stubs are created; here we want to focus on the similarities between these two routines. First, both take a <\/span><code>FunctionDescriptor<\/code><span> instance — essentially an aggregate of memory layouts which is used to describe the signature of a foreign function in full. Speaking of C, the <\/span><code>CLinker<\/code><span> class defines many layout constants (one for each main C primitive type) — these layouts can be combined using a <\/span><code>FunctionDescriptor<\/code><span> to describe the signature of a C function. For instance, assuming we have a C function taking a <\/span><code>char*<\/code><span> and returning a <\/span><code>long<\/code><span> we can model such a function with the following descriptor:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 723.609px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">FunctionDescriptor<\/span> <span class=\"cm-variable\">func<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">C_POINTER<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>The layouts used above will be mapped to the right layout according to the platform we are executing on. This also means that these layouts will be platform dependent and that e.g. <\/span><code>C_LONG<\/code><span> will be a 32 bit value layout on Windows, while being a 64-bit value on Linux.<\/span><\/p><p><span>Layouts defined in the <\/span><code>CLinker<\/code><span> class are not only handy, as they already model the C types we want to work on; they also contain hidden pieces of information which the foreign linker support uses in order to compute the calling sequence associated with a given function descriptor. For instance, the two C types <\/span><code>int<\/code><span> and <\/span><code>float<\/code><span> might share a similar memory layout (they both are expressed as 32 bit values), but are typically passed using different machine registers. The layout attributes attached to the C-specific layouts in the <\/span><code>CLinker<\/code><span> class ensures that arguments and return values are interpreted in the correct way.<\/span><\/p><p><span>Another similarity between <\/span><code>downcallHandle<\/code><span> and <\/span><code>upcallStub<\/code><span> is that they both accept (either directly, or indirectly) a <\/span><code>MethodType<\/code><span> instance. The method type describes the Java signatures that clients will be using when interacting with said downcall handles, or upcall stubs. The C linker implementation adds constraints on which layouts can be used with which Java carrier — for instance by enforcing that the size of the Java carrier is equal to that of the corresponding layout, or by making sure that certain layouts are associated with specific carriers. The following table shows the Java carrier vs. layout mappings enforced by the Linux\/macOS foreign linker implementation:<\/span><\/p><figure><table><thead><tr><th><span>C layout<\/span><\/th><th><span>Java carrier<\/span><\/th><\/tr><\/thead><tbody><tr><td><code>C_BOOL<\/code><\/td><td><code>byte<\/code><\/td><\/tr><tr><td><code>C_CHAR<\/code><\/td><td><code>byte<\/code><\/td><\/tr><tr><td><code>C_SHORT<\/code><\/td><td><code>short<\/code><\/td><\/tr><tr><td><code>C_INT<\/code><\/td><td><code>int<\/code><\/td><\/tr><tr><td><code>C_LONG<\/code><\/td><td><code>long<\/code><\/td><\/tr><tr><td><code>C_LONGLONG<\/code><\/td><td><code>long<\/code><\/td><\/tr><tr><td><code>C_FLOAT<\/code><\/td><td><code>float<\/code><\/td><\/tr><tr><td><code>C_DOUBLE<\/code><\/td><td><code>double<\/code><\/td><\/tr><tr><td><code>C_POINTER<\/code><\/td><td><code>MemoryAddress<\/code><\/td><\/tr><tr><td><code>GroupLayout<\/code><\/td><td><code>MemorySegment<\/code><\/td><\/tr><tr><td><code>C_VALIST<\/code><\/td><td><code>CLinker.VaList<\/code><\/td><\/tr><\/tbody><\/table><\/figure><p><span>Aside from the mapping between primitive layout and primitive Java carriers (which might vary across platforms), it is important to note how all pointer layouts must correspond to a <\/span><code>MemoryAddress<\/code><span> carrier, whereas structs (whose layout is defined by a <\/span><code>GroupLayout<\/code><span>) must be associated with a <\/span><code>MemorySegment<\/code><span> carrier; there is also a layout\/carrier pair for native <\/span><code>va_list<\/code><span> (which are covered later in this document).<\/span><\/p><h3><a name=\"downcalls\" class=\"md-header-anchor\"><\/a><span>Downcalls<\/span><\/h3><p><span>We will now look at how foreign functions can be called from Java using the foreign linker abstraction. Assume we wanted to call the following function from the standard C library:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"c\"><div class=\"CodeMirror cm-s-inner\" lang=\"c\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 257px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">size_t<\/span> <span class=\"cm-def\">strlen<\/span>(<span class=\"cm-keyword\">const<\/span> <span class=\"cm-variable-3\">char<\/span> <span class=\"cm-variable-3\">*<\/span><span class=\"cm-variable\">s<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>In order to do that, we have to:<\/span><\/p><ul><li><span>lookup the <\/span><code>strlen<\/code><span> symbol<\/span><\/li><li><span>describe the signature of the C function using the layouts in the <\/span><code>CLinker<\/code><span> class<\/span><\/li><li><span>select a Java signature we want to <\/span><em><span>overlay<\/span><\/em><span> on the native function — this will be the signature that clients of the native method handles will interact with<\/span><\/li><li><span>create a <\/span><em><span>downcall<\/span><\/em><span> native method handle with the above information, using the standard C foreign linker<\/span><\/li><\/ul><p><span>Here&#39;s an example of how we might want to do that (a full listing of all the examples in this and subsequent sections will be provided in the <\/span><a href='#appendix-full-source-code'><span>appendix<\/span><\/a><span>):<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 550.922px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">strlen<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"strlen\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 115px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 115px;\"><\/div><\/div><\/div><\/pre><p><span>Note that, since the function <\/span><code>strlen<\/code><span> is part of the standard C library, which is loaded with the VM, we can just use the default lookup to look it up. The rest is pretty straightforward — the only tricky detail is how to model <\/span><code>size_t<\/code><span>: typically this type has the size of a pointer, so we can use <\/span><code>C_LONG<\/code><span> on Linux, but we&#39;d have to use <\/span><code>C_LONGLONG<\/code><span> on Windows. On the Java side, we model the <\/span><code>size_t<\/code><span> using a <\/span><code>long<\/code><span> and the pointer is modeled using a <\/span><code>MemoryAddress<\/code><span> parameter.<\/span><\/p><p><span>One we have obtained the downcall native method handle, we can just use it as any other method handle:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 732px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">long<\/span> <span class=\"cm-variable\">len<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">strlen<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"Hello\"<\/span>, <span class=\"cm-variable\">scope<\/span>).<span class=\"cm-variable\">address<\/span>()); <span class=\"cm-comment\">\/\/ 5<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 69px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 69px;\"><\/div><\/div><\/div><\/pre><p><span>Here we are using one of the helper methods in <\/span><code>CLinker<\/code><span> to convert a Java string into an off-heap memory segment which contains a <\/span><code>NULL<\/code><span> terminated C string. We then pass that segment to the method handle and retrieve our result in a Java <\/span><code>long<\/code><span>. Note how all this has been possible <\/span><em><span>without<\/span><\/em><span> any piece of intervening native code — all the interop code can be expressed in (low level) Java. Note also how we used an explicit resource scope to control the lifecycle of the allocated C string; while using the implicit <\/span><em><span>default scope<\/span><\/em><span> is an option, extra care must be taken when using segments featuring implicitly deallocation which are then converted into <\/span><code>MemoryAddress<\/code><span> instances: since the address is eventually converted (by the linker support) into a raw Java long, there is no guarantee that the memory segment would be kept <\/span><em><span>reachable<\/span><\/em><span> for the entire duration of the native call.<\/span><\/p><p><span>The <\/span><code>CLinker<\/code><span> interfaces also supports linking of native function without an address known at link time; when that happens, an address must be provided when the method handle returned by the linker is invoked - this is very useful to support <\/span><em><span>virtual calls<\/span><\/em><span>. For instance, the above code can be rewritten as follows:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 844.562px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">strlen_virtual<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>( <span class=\"cm-comment\">\/\/ address parameter missing!<\/span><\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">long<\/span> <span class=\"cm-variable\">len<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">strlen_virtual<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"strlen\"<\/span>).<span class=\"cm-variable\">get<\/span>() <span class=\"cm-comment\">\/\/ address provided here!<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"Hello\"<\/span>).<span class=\"cm-variable\">address<\/span>()<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    ); <span class=\"cm-comment\">\/\/ 5<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 253px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 253px;\"><\/div><\/div><\/div><\/pre><p><span>Now that we have seen the basics of how foreign function calls are supported in Panama, let&#39;s add some additional considerations. First, it is important to note that, albeit the interop code is written in Java, the above code can <\/span><em><span>not<\/span><\/em><span> be considered 100% safe. There are many arbitrary decisions to be made when setting up downcall method handles such as the one above, some of which might be obvious to us (e.g. how many parameters does the function take), but which cannot ultimately be verified by the Panama runtime. After all, a symbol in a dynamic library is, mostly a numeric offset and, unless we are using a shared library with debugging information, no type information is attached to a given library symbol. This means that, in this case, the Panama runtime has to <\/span><em><span>trust<\/span><\/em><span> our description of the <\/span><code>strlen<\/code><span> function. For this reason, access to the foreign linker is a restricted operation, which can only be performed if the runtime flag <\/span><code>foreign.restricted=permit<\/code><span> is passed on the command line of the Java launcher <\/span><sup class='md-footnote'><a href='#dfref-footnote-1' name='ref-footnote-1'>1<\/a><\/sup><span>.<\/span><\/p><p><span>Finally let&#39;s talk about the life-cycle of some of the entities involved here; first, as a downcall native handle wraps a lookup symbol, the library from which the symbol has been loaded will stay loaded until there are reachable downcall handles referring to one of its symbols; in the above example, this consideration is less important, given the use of the default lookup object, which can be assumed to stay alive for the entire duration of the application.<\/span><\/p><p><span>Certain functions might return pointers, or structs; it is important to realize that if a function returns a pointer (or a <\/span><code>MemoryAddress<\/code><span>), no life-cycle whatsoever is attached to that pointer. It is then up to the client to e.g. free the memory associated with that pointer, or do nothing (in case the library is responsible for the life-cycle of that pointer). If a library returns a struct by value, things are different, as a <\/span><em><span>fresh<\/span><\/em><span>, memory segment is allocated off-heap and returned to the callee. In such cases, the foreign linker API will request an additional prefix <\/span><code>SegmentAllocator<\/code><span> (see above) parameter which will be responsible for allocating the returned segment. The allocation will likely associate the segment with a <\/span><em><span>resource scope<\/span><\/em><span> that is known to the callee and which can then be used to release the memory associated with that segment. An additional overload of <\/span><code>downcallHandle<\/code><span> is also provided by <\/span><code>CLinker<\/code><span> where a client can specify which allocator should be used in such cases at <\/span><em><span>link-time<\/span><\/em><span>.<\/span><\/p><p><span>Performance-wise, the reader might ask how efficient calling a foreign function using a native method handle is; the answer is <\/span><em><span>very<\/span><\/em><span>. The JVM comes with some special support for native method handles, so that, if a give method handle is invoked many times (e.g, inside an <\/span><em><span>hot<\/span><\/em><span> loop), the JIT compiler might decide to just generate a snippet of assembly code required to call the native function, and execute that directly. In most cases, invoking native function this way is as efficient as doing so through JNI <\/span><span>[^3a]<\/span><span>[^3b]<\/span><span>.<\/span><\/p><h3><a name=\"upcalls\" class=\"md-header-anchor\"><\/a><span>Upcalls<\/span><\/h3><p><span>Sometimes, it is useful to pass Java code as a function pointer to some native function; we can achieve that by using foreign linker support for upcalls. To demonstrate this, let&#39;s consider the following function from the C standard library:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"c\"><div class=\"CodeMirror cm-s-inner\" lang=\"c\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 473px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">void<\/span> <span class=\"cm-def\">qsort<\/span>(<span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable-3\">*<\/span><span class=\"cm-variable\">base<\/span>, <span class=\"cm-variable-3\">size_t<\/span> <span class=\"cm-variable\">nmemb<\/span>, <span class=\"cm-variable-3\">size_t<\/span> <span class=\"cm-variable\">size<\/span>,<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">           <span class=\"cm-variable-3\">int<\/span> (<span class=\"cm-operator\">*<\/span><span class=\"cm-variable\">compar<\/span>)(<span class=\"cm-keyword\">const<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable-3\">*<\/span>, <span class=\"cm-keyword\">const<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable-3\">*<\/span>));<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 46px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 46px;\"><\/div><\/div><\/div><\/pre><p><span>This is a function that can be used to sort the contents of an array, using a custom comparator function — <\/span><code>compar<\/code><span> — which is passed as a function pointer. To be able to call the <\/span><code>qsort<\/code><span> function from Java we have first to create a downcall native method handle for it:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 939px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">qsort<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"qsort\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">void<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">ofVoid<\/span>(<span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 115px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 115px;\"><\/div><\/div><\/div><\/pre><p><span>As before, we use <\/span><code>C_LONG<\/code><span> and <\/span><code>long.class<\/code><span> to map the C <\/span><code>size_t<\/code><span> type, and we use <\/span><code>MemoryAddess.class<\/code><span> both for the first pointer parameter (the array pointer) and the last parameter (the function pointer).<\/span><\/p><p><span>This time, in order to invoke the <\/span><code>qsort<\/code><span> downcall handle, we need a <\/span><em><span>function pointer<\/span><\/em><span> to be passed as the last parameter; this is where the upcall support in foreign linker comes in handy, as it allows us to create a function pointer out of an existing method handle. First, let&#39;s write a function that can compare two int elements (passed as pointers):<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 913.609px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">class<\/span> <span class=\"cm-def\">Qsort<\/span> {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">qsortCompare<\/span>(<span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr1<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr2<\/span>) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-keyword\">return<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtOffset<\/span>(<span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">ofNativeRestricted<\/span>(), <span class=\"cm-variable\">addr1<\/span>.<span class=\"cm-variable\">toRawLongValue<\/span>()) <span class=\"cm-operator\">-<\/span> <\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span>    <span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span>   <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtOffset<\/span>(<span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">ofNativeRestricted<\/span>(), <span class=\"cm-variable\">addr2<\/span>.<span class=\"cm-variable\">toRawLongValue<\/span>());<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span>}<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 138px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 138px;\"><\/div><\/div><\/div><\/pre><p><span>Here we can see that the function is performing some <\/span><em><span>unsafe<\/span><\/em><span> dereference of the pointer contents, by using the <\/span><em><span>everything<\/span><\/em><span> segment.<\/span><\/p><p><span> Now let&#39;s create a method handle pointing to the comparator function above:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 1120.86px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">comparHandle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MethodHandles<\/span>.<span class=\"cm-variable\">lookup<\/span>()<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                                         .<span class=\"cm-variable\">findStatic<\/span>(<span class=\"cm-variable\">Qsort<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-string\">\"qsortCompare\"<\/span>,<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                                                     <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>));<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 69px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 69px;\"><\/div><\/div><\/div><\/pre><p><span>Now that we have a method handle for our Java comparator function, we can create a function pointer, using the foreign linker upcall support  — as for downcalls,  we have to describe the signature of the foreign function pointer using the layouts in the <\/span><code>CLinker<\/code><span> class:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 525.016px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">comparFunc<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">upcallStub<\/span>(<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">comparHandle<\/span>,<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 92px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"><\/div><\/div><\/div><\/pre><p><span>When no resource scope is specified (as in the above case), the upcall stub segment will be associated with the <\/span><em><span>default scope<\/span><\/em><span> - a non-closeable scope which does not support deterministic deallocation. This means that the upcall stub will be uninstalled when the upcall segment becomes <\/span><em><span>unreachable<\/span><\/em><span>. In cases where this is not desirable, the API also support associating a custom <\/span><code>ResourceScope<\/code><span> instance to the returned upcall segment.<\/span><\/p><p><span>So, we finally have all the ingredients to create an upcall segment, and pass it to the <\/span><code>qsort<\/code><span> downcall handle:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 1008px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">comparFunc<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">upcallStub<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">comparHandle<\/span>,<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">scope<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">array<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">SegmentAllocator<\/span>.<span class=\"cm-variable\">scoped<\/span>(<span class=\"cm-variable\">scope<\/span>).<span class=\"cm-variable\">allocateArray<\/span>(<span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable-3\">int<\/span>[] { <span class=\"cm-number\">0<\/span>, <span class=\"cm-number\">9<\/span>, <span class=\"cm-number\">3<\/span>, <span class=\"cm-number\">4<\/span>, <span class=\"cm-number\">6<\/span>, <span class=\"cm-number\">5<\/span>, <span class=\"cm-number\">1<\/span>, <span class=\"cm-number\">8<\/span>, <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">7<\/span> }));<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">qsort<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<span class=\"cm-variable\">array<\/span>.<span class=\"cm-variable\">address<\/span>(), <span class=\"cm-number\">10L<\/span>, <span class=\"cm-number\">4L<\/span>, <span class=\"cm-variable\">comparFunc<\/span>.<span class=\"cm-variable\">address<\/span>());<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">int<\/span>[] <span class=\"cm-variable\">sorted<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">array<\/span>.<span class=\"cm-variable\">toIntArray<\/span>(); <span class=\"cm-comment\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 230px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 230px;\"><\/div><\/div><\/div><\/pre><p><span>The above code creates  a memory segment — <\/span><code>comparFunc<\/code><span> — containing a stub that can be used to invoke our Java comparator function. The memory segment is associated with the provided resource scope instance; this means that the stub will be uninstalled when the resource scope is closed. It is also possible (not shown here) to create upcall stubs associated with the <\/span><em><span>default scope<\/span><\/em><span>, in which case the stub will be uninstalled when the upcall segment becomes <\/span><em><span>unreachable<\/span><\/em><span>.<\/span><\/p><p><span>The snippet then creates an off-heap array from a Java array (using a <\/span><code>SegmemntAllocator<\/code><span>), which is then passed to the <\/span><code>qsort<\/code><span> handle, along with the comparator function we obtained from the foreign linker.  As a side-effect, after the call, the contents of the off-heap array will be sorted (as instructed by our comparator function, written in Java). We can than extract a new Java array from the segment, which contains the sorted elements. This is a more advanced example, but one that shows how powerful the native interop support provided by the foreign linker abstraction is, allowing full bidirectional interop support between Java and native.<\/span><\/p><h3><a name=\"varargs\" class=\"md-header-anchor\"><\/a><span>Varargs<\/span><\/h3><p><span>Some C functions are <\/span><em><span>variadic<\/span><\/em><span> and can take an arbitrary number of arguments. Perhaps the most common example of this is the <\/span><code>printf<\/code><span> function, defined in the C standard library:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"c\"><div class=\"CodeMirror cm-s-inner\" lang=\"c\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 317.797px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">int<\/span> <span class=\"cm-def\">printf<\/span>(<span class=\"cm-keyword\">const<\/span> <span class=\"cm-variable-3\">char<\/span> <span class=\"cm-variable-3\">*<\/span><span class=\"cm-variable\">format<\/span>, ...);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>This function takes a format string, which features zero or more <\/span><em><span>holes<\/span><\/em><span>, and then can take a number of additional arguments that is identical to the number of holes in the format string.<\/span><\/p><p><span>The foreign function support can support variadic calls, but with a caveat: the client must provide a specialized Java signature, and a specialized description of the C signature. For instance, let&#39;s say we wanted to model the following C call:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"C\"><div class=\"CodeMirror cm-s-inner\" lang=\"c\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 352px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">printf<\/span>(<span class=\"cm-string\">\"%d plus %d equals %d\"<\/span>, <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">4<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>To do this using the foreign function support provided by Panama we would have to build a <\/span><em><span>specialized<\/span><\/em><span> downcall handle for that call shape <\/span><span>[^6]<\/span><span>:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 827px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">printf<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"printf\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_INT<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 115px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 115px;\"><\/div><\/div><\/div><\/pre><p><span>Then we can call the specialized downcall handle as usual:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 913.609px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">printf<\/span>.<span class=\"cm-variable\">invoke<\/span>(<span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"%d plus %d equals %d\"<\/span>).<span class=\"cm-variable\">address<\/span>(), <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">4<\/span>); <span class=\"cm-comment\">\/\/prints \"2 plus 2 equals 4\"<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>While this works, it is easy to see how such an approach is not very desirable:<\/span><\/p><ul><li><span>If the variadic function needs to be called with many different shapes, we have to create many different downcall handles<\/span><\/li><li><span>while this approach works for downcalls (since the Java code is in charge of determining which and how many arguments should be passed) it fails to scale to upcalls; in that case, the call comes from native code, so we have no way to guarantee that the shape of the upcall stub we have created will match that required by the native function.<\/span><\/li><\/ul><p><span>To mitigate these issues, the standard C foreign linker comes equipped with support for C variable argument lists — or <\/span><code>va_list<\/code><span>.  When a variadic function is called, C code has to unpack the variadic arguments by creating a <\/span><code>va_list<\/code><span> structure, and then accessing the variadic arguments through the <\/span><code>va_list<\/code><span> one by one (using the <\/span><code>va_arg<\/code><span> macro). To facilitate interop between standard variadic functions and <\/span><code>va_list<\/code><span> many C library functions in fact define <\/span><em><span>two<\/span><\/em><span> flavors of the same function, one using standard variadic signature, one using an extra <\/span><code>va_list<\/code><span> parameter. For instance, in the case of <\/span><code>printf<\/code><span> we can find that a <\/span><code>va_list<\/code><span>-accepting function performing the same task is also defined:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"c\"><div class=\"CodeMirror cm-s-inner\" lang=\"c\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 386.844px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">int<\/span> <span class=\"cm-def\">vprintf<\/span>(<span class=\"cm-keyword\">const<\/span> <span class=\"cm-variable-3\">char<\/span> <span class=\"cm-variable-3\">*<\/span><span class=\"cm-variable\">format<\/span>, <span class=\"cm-variable\">va_list<\/span> <span class=\"cm-variable\">ap<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>The behavior of this function is the same as before — the only difference is that the ellipsis notation <\/span><code>...<\/code><span> has been replaced with a single <\/span><code>va_list<\/code><span> parameter; in other words, the function is no longer variadic.<\/span><\/p><p><span>It is indeed fairly easy to create a downcall for <\/span><code>vprintf<\/code><span>:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 663px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">vprintf<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"vprintf\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">VaList<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_VA_LIST<\/span>));<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 92px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"><\/div><\/div><\/div><\/pre><p><span>Here, the notable thing is that <\/span><code>CLinker<\/code><span> comes equipped with the special <\/span><code>C_VA_LIST<\/code><span> layout (the layout of a <\/span><code>va_list<\/code><span> parameter) as well as a <\/span><code>VaList<\/code><span> carrier, which can be used to construct and represent variable argument lists from Java code.<\/span><\/p><p><span>To call the <\/span><code>vprintf<\/code><span> handle we need to create an instance of <\/span><code>VaList<\/code><span> which contains the arguments we want to pass to the <\/span><code>vprintf<\/code><span> function — we can do so, as follows:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 620px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">vprintf<\/span>.<span class=\"cm-variable\">invoke<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"%d plus %d equals %d\"<\/span>, <span class=\"cm-variable\">scope<\/span>).<span class=\"cm-variable\">address<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">VaList<\/span>.<span class=\"cm-variable\">make<\/span>(<span class=\"cm-variable\">builder<\/span> <span class=\"cm-operator\">-&gt;<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                            <span class=\"cm-variable\">builder<\/span>.<span class=\"cm-variable\">vargFromInt<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">2<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                                   .<span class=\"cm-variable\">vargFromInt<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">2<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                                   .<span class=\"cm-variable\">vargFromInt<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">4<\/span>), <span class=\"cm-variable\">scope<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">); <span class=\"cm-comment\">\/\/prints \"2 plus 2 equals 4\"<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 184px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 184px;\"><\/div><\/div><\/div><\/pre><p><span>While the callee has to do more work to call the <\/span><code>vprintf<\/code><span> handle, note that that now we&#39;re back in a place where the downcall handle  <\/span><code>vprintf<\/code><span> can be shared across multiple callees. Note that both the format string and the <\/span><code>VaList<\/code><span> are associated with the given resource scope — this means that both will remain valid throughout the native function call. As for other APIs, it is also possible (not shown here) to create a <\/span><code>VaList<\/code><span> associated with the <\/span><em><span>default scope<\/span><\/em><span> - meaning that the resources allocated by the <\/span><code>VaList<\/code><span> will remain available as long as the <\/span><code>VaList<\/code><span> remains <\/span><em><span>reachable<\/span><\/em><span>.<\/span><\/p><p><span>Another advantage of using <\/span><code>VaList<\/code><span> is that this approach also scales to upcall stubs — it is therefore possible for clients to create upcalls stubs which take a <\/span><code>VaList<\/code><span> and then, from the Java upcall, read the arguments packed inside the <\/span><code>VaList<\/code><span> one by one using the methods provided by the <\/span><code>VaList<\/code><span> API (e.g. <\/span><code>VaList::vargAsInt(MemoryLayout)<\/code><span>), which mimic the behavior of the C <\/span><code>va_arg<\/code><span> macro.<\/span><\/p><h3><a name=\"appendix-full-source-code\" class=\"md-header-anchor\"><\/a><span>Appendix: full source code<\/span><\/h3><p><span>The full source code containing most of the code shown throughout this document can be seen below:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\" style=\"break-inside: unset;\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 1008.52px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">Addressable<\/span>;<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">CLinker<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">FunctionDescriptor<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">LibraryLookup<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">MemoryAccess<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">MemoryAddress<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">MemorySegment<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">NativeScope<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">java<\/span>.<span class=\"cm-variable\">lang<\/span>.<span class=\"cm-variable\">invoke<\/span>.<span class=\"cm-variable\">MethodHandle<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">java<\/span>.<span class=\"cm-variable\">lang<\/span>.<span class=\"cm-variable\">invoke<\/span>.<span class=\"cm-variable\">MethodHandles<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">java<\/span>.<span class=\"cm-variable\">lang<\/span>.<span class=\"cm-variable\">invoke<\/span>.<span class=\"cm-variable\">MethodType<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-variable\">java<\/span>.<span class=\"cm-variable\">util<\/span>.<span class=\"cm-variable\">Arrays<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">import<\/span> <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable\">jdk<\/span>.<span class=\"cm-variable\">incubator<\/span>.<span class=\"cm-variable\">foreign<\/span>.<span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-operator\">*<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">public<\/span> <span class=\"cm-keyword\">class<\/span> <span class=\"cm-def\">Examples<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">public<\/span> <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable\">main<\/span>(<span class=\"cm-variable-3\">String<\/span>[] <span class=\"cm-variable\">args<\/span>) <span class=\"cm-keyword\">throws<\/span> <span class=\"cm-variable\">Throwable<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">strlen<\/span>();<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">qsort<\/span>();<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">printf<\/span>();<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">vprintf<\/span>();<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">public<\/span> <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable\">strlen<\/span>() <span class=\"cm-keyword\">throws<\/span> <span class=\"cm-variable\">Throwable<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">strlen<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"strlen\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        );<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">hello<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"Hello\"<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable-3\">long<\/span> <span class=\"cm-variable\">len<\/span> <span class=\"cm-operator\">=<\/span> (<span class=\"cm-variable-3\">long<\/span>) <span class=\"cm-variable\">strlen<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<span class=\"cm-variable\">hello<\/span>.<span class=\"cm-variable\">address<\/span>()); <span class=\"cm-comment\">\/\/ 5<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">System<\/span>.<span class=\"cm-variable\">out<\/span>.<span class=\"cm-variable\">println<\/span>(<span class=\"cm-variable\">len<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">public<\/span> <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable\">strlen_virtual<\/span>() <span class=\"cm-keyword\">throws<\/span> <span class=\"cm-variable\">Throwable<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">strlen_virtual<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        );<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">hello<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"Hello\"<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable-3\">long<\/span> <span class=\"cm-variable\">len<\/span> <span class=\"cm-operator\">=<\/span> (<span class=\"cm-variable-3\">long<\/span>) <span class=\"cm-variable\">strlen_virtual<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"strlen\"<\/span>).<span class=\"cm-variable\">get<\/span>(),                <\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">hello<\/span>.<span class=\"cm-variable\">address<\/span>()); <span class=\"cm-comment\">\/\/ 5<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">System<\/span>.<span class=\"cm-variable\">out<\/span>.<span class=\"cm-variable\">println<\/span>(<span class=\"cm-variable\">len<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">static<\/span> <span class=\"cm-keyword\">class<\/span> <span class=\"cm-def\">Qsort<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">qsortCompare<\/span>(<span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr1<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr2<\/span>) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">v1<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtOffset<\/span>(<span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">ofNativeRestricted<\/span>(), <span class=\"cm-variable\">addr1<\/span>.<span class=\"cm-variable\">toRawLongValue<\/span>());<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">v2<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtOffset<\/span>(<span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">ofNativeRestricted<\/span>(), <span class=\"cm-variable\">addr2<\/span>.<span class=\"cm-variable\">toRawLongValue<\/span>());<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-keyword\">return<\/span> <span class=\"cm-variable\">v1<\/span> <span class=\"cm-operator\">-<\/span> <span class=\"cm-variable\">v2<\/span>;<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">public<\/span> <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable\">qsort<\/span>() <span class=\"cm-keyword\">throws<\/span> <span class=\"cm-variable\">Throwable<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">qsort<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"qsort\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">void<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">long<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">ofVoid<\/span>(<span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_LONG<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        );<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">comparHandle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MethodHandles<\/span>.<span class=\"cm-variable\">lookup<\/span>()<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                .<span class=\"cm-variable\">findStatic<\/span>(<span class=\"cm-variable\">Qsort<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-string\">\"qsortCompare\"<\/span>,<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                        <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>));<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-tab\" role=\"presentation\" cm-text=\"\t\">    <\/span><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">comparFunc<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">upcallStub<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">comparHandle<\/span>,<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>), <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">array<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">SegmentAllocator<\/span>.<span class=\"cm-variable\">scoped<\/span>(<span class=\"cm-variable\">scope<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                                                  .<span class=\"cm-variable\">allocateArray<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable-3\">int<\/span>[] { <span class=\"cm-number\">0<\/span>, <span class=\"cm-number\">9<\/span>, <span class=\"cm-number\">3<\/span>, <span class=\"cm-number\">4<\/span>, <span class=\"cm-number\">6<\/span>, <span class=\"cm-number\">5<\/span>, <span class=\"cm-number\">1<\/span>, <span class=\"cm-number\">8<\/span>, <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">7<\/span> });<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">qsort<\/span>.<span class=\"cm-variable\">invokeExact<\/span>(<span class=\"cm-variable\">array<\/span>.<span class=\"cm-variable\">address<\/span>(), <span class=\"cm-number\">10L<\/span>, <span class=\"cm-number\">4L<\/span>, <span class=\"cm-variable\">comparFunc<\/span>.<span class=\"cm-variable\">address<\/span>());<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable-3\">int<\/span>[] <span class=\"cm-variable\">sorted<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">array<\/span>.<span class=\"cm-variable\">toIntArray<\/span>(); <span class=\"cm-comment\">\/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">System<\/span>.<span class=\"cm-variable\">out<\/span>.<span class=\"cm-variable\">println<\/span>(<span class=\"cm-variable\">Arrays<\/span>.<span class=\"cm-variable\">toString<\/span>(<span class=\"cm-variable\">sorted<\/span>));<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">public<\/span> <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable\">printf<\/span>() <span class=\"cm-keyword\">throws<\/span> <span class=\"cm-variable\">Throwable<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">printf<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"printf\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_INT<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        );<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">s<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"%d plus %d equals %d\\n\"<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">printf<\/span>.<span class=\"cm-variable\">invoke<\/span>(<span class=\"cm-variable\">s<\/span>.<span class=\"cm-variable\">address<\/span>(), <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">2<\/span>, <span class=\"cm-number\">4<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">public<\/span> <span class=\"cm-keyword\">static<\/span> <span class=\"cm-variable-3\">void<\/span> <span class=\"cm-variable\">vprintf<\/span>() <span class=\"cm-keyword\">throws<\/span> <span class=\"cm-variable\">Throwable<\/span> {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MethodHandle<\/span> <span class=\"cm-variable\">vprintf<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">getInstance<\/span>().<span class=\"cm-variable\">downcallHandle<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">LibraryLookup<\/span>.<span class=\"cm-variable\">ofDefault<\/span>().<span class=\"cm-variable\">lookup<\/span>(<span class=\"cm-string\">\"vprintf\"<\/span>).<span class=\"cm-variable\">get<\/span>(),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">MethodType<\/span>.<span class=\"cm-variable\">methodType<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">VaList<\/span>.<span class=\"cm-keyword\">class<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                <span class=\"cm-variable\">FunctionDescriptor<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-variable\">C_POINTER<\/span>, <span class=\"cm-variable\">C_VA_LIST<\/span>));<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">s<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">toCString<\/span>(<span class=\"cm-string\">\"%d plus %d equals %d\\n\"<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">VaList<\/span> <span class=\"cm-variable\">vlist<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">CLinker<\/span>.<span class=\"cm-variable\">VaList<\/span>.<span class=\"cm-variable\">make<\/span>(<span class=\"cm-variable\">builder<\/span> <span class=\"cm-operator\">-&gt;<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                     <span class=\"cm-variable\">builder<\/span>.<span class=\"cm-variable\">vargFromInt<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">2<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                            .<span class=\"cm-variable\">vargFromInt<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">2<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                            .<span class=\"cm-variable\">vargFromInt<\/span>(<span class=\"cm-variable\">C_INT<\/span>, <span class=\"cm-number\">4<\/span>), <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">            <span class=\"cm-variable\">vprintf<\/span>.<span class=\"cm-variable\">invoke<\/span>(<span class=\"cm-variable\">s<\/span>.<span class=\"cm-variable\">address<\/span>(), <span class=\"cm-variable\">vlist<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    }<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 2645px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 2645px;\"><\/div><\/div><\/div><\/pre><p>&nbsp;<\/p><p>&nbsp;<\/p><div class='footnotes-area'  ><hr\/>\n+<div class='footnote-line'><span class='md-fn-count'>1<\/span> <span>In reality this is not entirely new; even in JNI, when you call a <\/span><code>native<\/code><span> method the VM trusts that the corresponding implementing function in C will feature compatible parameter types and return values; if not a crash might occur.<\/span> <a name='dfref-footnote-1' href='#ref-footnote-1' title='back to document' class='reversefootnote' >↩<\/a><\/div><\/div><\/div>\n@@ -443,1 +627,1 @@\n-<\/html>\n+<\/html>\n\\ No newline at end of file\n","filename":"doc\/panama_ffi.html","additions":622,"deletions":438,"binary":false,"changes":1060,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-**October 2020**\n+**March 2021**\n@@ -5,4 +5,3 @@\n-* Adjust reference to NativeScope handoff\n-* Tweak references to restricted segments to use new API\n-* Tweak signature of LibraryLookup::lookup\n-* Replaced usages of ForeignLinker with CLinker, as per new API\n+* Rewrite section on NativeScope (now Segment allocators) and move it earlier in the doc\n+* Discuss life-cycle options for downcalls (struct returned by value), upcalls and valist\n+* Tweak examples\n@@ -18,1 +17,1 @@\n-Now, in the case of memory segments, the above properties (spatial bounds, temporal bounds and confinement) can be known *in full* when the segment is created. But when we interact with native libraries we will often be receiving *raw* pointers; such pointers have no spatial bounds (does a `char*` in C refer to one `char`, or a `char` array of a given size?), no notion of temporal bounds, nor thread-confinement. Raw addresses in our interop support are modelled using the `MemoryAddress` abstraction.\n+Now, in the case of memory segments, the above properties (spatial bounds, temporal bounds and confinement) can be known *in full* when the segment is created. But when we interact with native libraries we will often be receiving *raw* pointers; such pointers have no spatial bounds (does a `char*` in C refer to one `char`, or a `char` array of a given size?), no notion of temporal bounds, nor thread-confinement. Raw addresses in our interop support are modeled using the `MemoryAddress` abstraction.\n@@ -39,1 +38,1 @@\n-Alternatively, the client can fall back to use the so called *everything* segment - that is, a primordial segment which covers the entire native heap. Since this segment is available as a constant, dereference can happen without the need of creating any additional segment instances:\n+Alternatively, the client can fall back to use the so called *everything* segment - that is, a primordial segment which covers the entire native heap and whose scope is always alive (the so called *global scope*). Since this segment is available as a constant, dereference can happen without the need of creating any additional segment instances:\n@@ -50,0 +49,57 @@\n+### Segment allocators\n+\n+Idiomatic C code implicitly relies on stack allocation to allow for concise variable declarations; consider this example:\n+\n+```c\n+int arr[] = { 1, 2, 3, 4, 5 };\n+```\n+\n+Here the function `foo` takes an output parameter, a pointer to an `int` variable. This idiom can be implemented as follows, using the Foreign Memory Access API:\n+\n+```java\n+MemorySegment arr = MemorySegment.allocateNative(C_INT);\n+for (int i = 1 ; i <= 5 ; i++) {\n+    MemoryAccess.setInt(arr, i);\n+}\n+```\n+\n+There are a number of issues with the above code snippet:\n+\n+* compared to the C code, it is more verbose - the native array has to be initialized *element by element*\n+* allocation is very slow compared to C; allocating the `arr` variable now takes a full `malloc`, while in C the variable was simply stack-allocated\n+* when having multiple declarations like the one above, it might become increasingly harder to manage the lifecycle of the various segments\n+\n+To address these problems, Panama provides a `SegmentAllocator` abstraction, a functional interface which provides many useful operation to allocate commonly used values. For instance, the above code can be rewritten as follows:\n+\n+```java\n+MemorySegment arr = SegmentAllocator.ofDefault().allocateArray(C_INT, new int[] { 1, 2, 3, 4, 5 });\n+```\n+\n+The above code retrieves the *default allocator* (an allocator built on top of `MemorySegment::allocateNative`), and then uses this allocator to create a native array which is initialized to the values `{ 1, 2, 3, 4, 5}`.  The array initialization is more efficient, compared to the previous snippet, as the Java array is copied *in bulk* into the memory region associated with the newly allocated memory segment.\n+\n+Memory associated with segments returned by the default allocator is released as soon as said segments become *unreachable*. To have better control over the lifetime of the segments returned by an allocator, clients can use the so called *scoped* allocator, which returns segments associated with a given scope:\n+\n+```java\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    MemorySegment arr = SegmentAllocator.scoped(scope).allocateArray(C_INT, new int[] { 1, 2, 3, 4, 5 });\n+} \/\/ 'arr' is released here\n+```\n+\n+Scoped allocator make sure that all segments allocated with a scoped allocator are no longer usable after the scope associated with the allocator has been closed. This makes it easier to manage multiple resources which share the same lifecycle.\n+\n+Custom segment allocators are also critical to achieve optimal allocation performance; for this reason, a number of predefined allocators are available via factories in the `SegmentAllocator` interface. For instance, it is possible to create an arena-based allocator, as follows:\n+\n+```java\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n+    for (int i = 0 ; i < 100 ; i++) {\n+        allocator.allocateArray(C_INT, new int[] { 1, 2, 3, 4, 5 });\n+    }\n+    ...\n+} \/\/ all memory allocated is released here\n+```\n+\n+The above code creates a confined scope; inside the *try-with-resources*, a new unbounded arena allocation is created, associated with the existing scope. The allocator will allocate slabs of memory, of a specific size, and respond to allocation request by returning different slices of the pre-allocated slab. If a slab does not have sufficient space to accommodate a new allocation request, a new one will be allocated. If the scope associated with the arena allocator is closed, all memory associated with the segments created by the allocator (see the body of the `for` loop) will be deallocated at once. This idiom combines the advantages of deterministic deallocation (provided by the Memory Access API) with a more flexible and scalable allocation scheme, and can be very useful when writing large applications.\n+\n+For these reasons, all the methods in the Foreign Linker API which *produce* memory segments (see `CLinker::toCString`), allow an optional allocator to be provided by user code — this is key in ensuring that an application using the Foreign Linker API achieves optimal allocation performances, especially in non-trivial use cases.\n+\n@@ -76,2 +132,3 @@\n-    MemorySegment upcallStub(MethodHandle target, FunctionDescriptor function);\n-    ...\n+    MemorySegment upcallStub(MethodHandle target, FunctionDescriptor function, ResourceScope scope);    \n+    ... \/\/ some overloads omitted here\n+\n@@ -94,14 +151,15 @@\n-| C layout      | Java carrier    |\n-| ------------- | --------------- |\n-| `C_BOOL`      | `byte`          |\n-| `C_CHAR`      | `byte`          |\n-| `C_SHORT`     | `short`         |\n-| `C_INT`       | `int`           |\n-| `C_LONG`      | `long`          |\n-| `C_LONGLONG`  | `long`          |\n-| `C_FLOAT`     | `float`         |\n-| `C_DOUBLE`    | `double`        |\n-| `C_POINTER`   | `MemoryAddress` |\n-| `GroupLayout` | `MemorySegment` |\n-\n-Aside from the mapping between primitive layout and primitive Java carriers (which might vary across platforms), it is important to note how all pointer layouts must correspond to a `MemoryAddress` carrier, whereas structs (whose layout is defined by a `GroupLayout`) must be associated with a `MemorySegment` carrier.\n+| C layout      | Java carrier     |\n+| ------------- | ---------------- |\n+| `C_BOOL`      | `byte`           |\n+| `C_CHAR`      | `byte`           |\n+| `C_SHORT`     | `short`          |\n+| `C_INT`       | `int`            |\n+| `C_LONG`      | `long`           |\n+| `C_LONGLONG`  | `long`           |\n+| `C_FLOAT`     | `float`          |\n+| `C_DOUBLE`    | `double`         |\n+| `C_POINTER`   | `MemoryAddress`  |\n+| `GroupLayout` | `MemorySegment`  |\n+| `C_VALIST`    | `CLinker.VaList` |\n+\n+Aside from the mapping between primitive layout and primitive Java carriers (which might vary across platforms), it is important to note how all pointer layouts must correspond to a `MemoryAddress` carrier, whereas structs (whose layout is defined by a `GroupLayout`) must be associated with a `MemorySegment` carrier; there is also a layout\/carrier pair for native `va_list` (which are covered later in this document).\n@@ -140,1 +198,3 @@\n-long len = strlen.invokeExact(CLinker.toCString(\"Hello\").address()) \/\/ 5\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    long len = strlen.invokeExact(CLinker.toCString(\"Hello\", scope).address()); \/\/ 5\n+}\n@@ -143,1 +203,17 @@\n-Here we are using one of the helper methods in `CLinker` to convert a Java string into an off-heap memory segment which contains a `NULL` terminated C string. We then pass that segment to the method handle and retrieve our result in a Java `long`. Note how all this has been possible *without* any piece of intervening native code — all the interop code can be expressed in (low level) Java.\n+Here we are using one of the helper methods in `CLinker` to convert a Java string into an off-heap memory segment which contains a `NULL` terminated C string. We then pass that segment to the method handle and retrieve our result in a Java `long`. Note how all this has been possible *without* any piece of intervening native code — all the interop code can be expressed in (low level) Java. Note also how we used an explicit resource scope to control the lifecycle of the allocated C string; while using the implicit *default scope* is an option, extra care must be taken when using segments featuring implicitly deallocation which are then converted into `MemoryAddress` instances: since the address is eventually converted (by the linker support) into a raw Java long, there is no guarantee that the memory segment would be kept *reachable* for the entire duration of the native call.\n+\n+The `CLinker` interfaces also supports linking of native function without an address known at link time; when that happens, an address must be provided when the method handle returned by the linker is invoked - this is very useful to support *virtual calls*. For instance, the above code can be rewritten as follows:\n+\n+```java\n+MethodHandle strlen_virtual = CLinker.getInstance().downcallHandle( \/\/ address parameter missing!\n+\t\tMethodType.methodType(long.class, MemoryAddress.class),\n+        FunctionDescriptor.of(C_LONG, C_POINTER)\n+);\n+\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    long len = strlen_virtual.invokeExact(\n+        LibraryLookup.ofDefault().lookup(\"strlen\").get() \/\/ address provided here!\n+        CLinker.toCString(\"Hello\", scope).address()\n+    ); \/\/ 5\n+}\n+```\n@@ -149,1 +225,1 @@\n-Certain functions might return pointers, or structs; it is important to realize that if a function returns a pointer (or a `MemoryAddress`), no life-cycle whatsoever is attached to that pointer. It is then up to the client to e.g. free the memory associated with that pointer, or do nothing (in case the library is responsible for the life-cycle of that pointer). If a library returns a struct by value, things are different, as a *fresh*, confined memory segment is allocated off-heap and returned to the callee. It is the responsibility of the callee to cleanup that struct's segment (using `MemorySegment::close`) <a href=\"#2\"><sup>2<\/sup><\/a>.\n+Certain functions might return pointers, or structs; it is important to realize that if a function returns a pointer (or a `MemoryAddress`), no life-cycle whatsoever is attached to that pointer. It is then up to the client to e.g. free the memory associated with that pointer, or do nothing (in case the library is responsible for the life-cycle of that pointer). If a library returns a struct by value, things are different, as a *fresh*, memory segment is allocated off-heap and returned to the callee. In such cases, the foreign linker API will request an additional prefix `SegmentAllocator` (see above) parameter which will be responsible for allocating the returned segment. The allocation will likely associate the segment with a *resource scope* that is known to the callee and which can then be used to release the memory associated with that segment. An additional overload of `downcallHandle` is also provided by `CLinker` where a client can specify which allocator should be used in such cases at *link-time*.\n@@ -185,1 +261,3 @@\n-Here we can see that the function is performing some *unsafe* dereference of the pointer contents, by using the *everything* segment. Now let's create a method handle pointing to the comparator function above:\n+Here we can see that the function is performing some *unsafe* dereference of the pointer contents, by using the *everything* segment.\n+\n+ Now let's create a method handle pointing to the comparator function above:\n@@ -202,1 +280,1 @@\n-So, we finally have a memory segment — `comparFunc` — containing a stub that can be used to invoke our Java comparator function; this means we now have all we need to call the `qsort` downcall handle:\n+When no resource scope is specified (as in the above case), the upcall stub segment will be associated with the *default scope* - a non-closeable scope which does not support deterministic deallocation. This means that the upcall stub will be uninstalled when the upcall segment becomes *unreachable*. In cases where this is not desirable, the API also support associating a custom `ResourceScope` instance to the returned upcall segment.\n@@ -204,23 +282,1 @@\n-```java\n-MemorySegment array = MemorySegment.allocateNative(4 * 10);\n-array.copyFrom(MemorySegment.ofArray(new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 }));\n-qsort.invokeExact(array.address(), 10L, 4L, comparFunc.address());\n-int[] sorted = array.toIntArray(); \/\/ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n-```\n-\n-The above code creates an off-heap array, then copies the contents of a Java array on it (we shall see in the next [section](#native-scope) ways to do that more succinctly), and then pass the array to the `qsort` handle, along with the comparator function we obtained from the foreign linker.  As a side-effect, after the call, the contents of the off-heap array will be sorted (as instructed by our comparator function, written in Java). We can than extract a new Java array from the segment, which contains the sorted elements. This is a more advanced example, but one that shows how powerful the native interop support provided by the foreign linker abstraction is, allowing full bidirectional interop support between Java and native.\n-\n-As before, we conclude with a quick note on life-cycle. First, the life-cycle of the upcall stub is tied to that of the segment returned by the foreign linker. When the segment is closed, the upcall is uninstalled from the VM and will no longer be a valid function pointer. Second, the life-cycle of structs (if any) passed by value to the Java upcall function is independent from that of the upcall <a href=\"#4\"><sup>4<\/sup><\/a>, so again the user will have to pay attention not to leak memory and to call `MemorySegment::close` on any segments obtained through an upcall.\n-\n-### Native scope\n-\n-Idiomatic C code implicitly relies on stack allocation to allow for concise variable declarations; consider this example:\n-\n-```c\n-void foo(int i, int *size);\n-\n-int size = 5;\n-foo(42, &size);\n-```\n-\n-Here the function `foo` takes an output parameter, a pointer to an `int` variable. Unfortunately (and we have seen part of that pain in the `qsort` example above), implementing this idiom in Panama is not straightforward:\n+So, we finally have all the ingredients to create an upcall segment, and pass it to the `qsort` downcall handle:\n@@ -229,37 +285,8 @@\n-MethodHandle foo = ...\n-MemorySegment size = MemorySegment.allocateNative(C_INT);\n-MemoryAccess.setInt(size, 5);\n-foo.invokeExact(42, size);\n-```\n-\n-There are a number of issues with the above code snippet:\n-\n-* compared to the C code, it is very verbose\n-* allocation is very slow compared to C; allocating the `size` variable now takes a full `malloc`, while in C the variable was simply stack-allocated\n-* we end up with a standalone segment with its own temporal bounds, which will have to be *closed* later, to avoid leaks\n-\n-To address these problems, Panama provides a `NativeScope` abstraction, which can be used to group allocation so as to achieve superior allocation performance, but also so that groups of logically-related segments can share the same temporal bounds, and can therefore be closed at once (e.g. by using a single *try-with-resources* statement). With the help of native scopes, the above code can be rewritten as follows:\n-\n-```java\n-try (NativeScope scope = NativeScope.unboundedScope()) {\n-\tMemorySegment size = scope.allocate(C_INT, 5);\n-\tfoo.invokeExact(42, size);\n-}\n-```\n-\n-It's easy to see how this code improves over the former in many ways; first, native scopes have primitives to allocate *and* initialize the contents of a segment; secondly, native scope use more efficient allocation underneath, so that not every allocation request is turned into a `malloc` — in fact, if the size of memory to be used is known before hand, clients can also use the bounded variant of native scope, using the `NativeScope::boundedScope(long size)` factory <a href=\"#5\"><sup>5<\/sup><\/a>. Third, a native scope can be used as a single temporal bound for all the segments allocated within it: that is, if the code needs to instantiate other variables, it can keep doing so using the same scope — when the *try-with-resource* statement completes, all resources associated with the scope will be freed.\n-\n-There are at least two cases where allocation of native resources occurs *outside* a native scope:\n-\n-* structs segments returned by native calls (or passed to upcalls Java methods)\n-* upcall stubs segments returned by the foreign linker\n-\n-In these cases, the API gives us a segment which feature *its own* temporal bounds — this is handy, as we can use the segment to control the lifecycle of the resource allocated by the foreign linker support; but it is also a bit unfortunate: if the surrounding code happens to already have a native scope, these new segments won't be able to interoperate with it, and a separate *try-with-resource* segment should be used.\n-\n-To alleviate this problem, and allow *all* segments to be managed using the *same* native scope, the native scope API not only supports the ability to allocate *new* segments, but it also allows to take ownership of *existing* ones. To see an example of this, let's go back to our `qsort` example, and see how we can make it better by using native scopes:\n-\n-```java\n-try (NativeScope scope = NativeScope.unboundedScope()) {\n-    comparFunc = comparFunc.handoff(scope);\n-    MemorySegment array = scope.allocateArray(C_INT, new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 });\n-    qsort.invokeExact(array, 10L, 4L, comparFunc);\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    MemorySegment comparFunc = CLinker.getInstance().upcallStub(\n+        comparHandle,\n+    \tFunctionDescriptor.of(C_INT, C_POINTER, C_POINTER),\n+        scope\n+\t);\n+    MemorySegment array = SegmentAllocator.scoped(scope).allocateArray(new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 }));\n+    qsort.invokeExact(array.address(), 10L, 4L, comparFunc.address());\n@@ -270,1 +297,1 @@\n-Not only native scope helps in making the allocation of the native array simpler (we no longer need to create an heap segment, and dump its contents onto the off-heap array); but we can also use the native scope as an *handoff target* for existing upcall stub segments. When we do that, we obtain a *new* segment, whose temporal bounds are the same as that of the native scope; the old segment will be killed and will no longer be usable. As with all segments returned by native scope, the new segment we get back will be non-closeable — the only way to close it is to close the native scope it belongs to.\n+The above code creates  a memory segment — `comparFunc` — containing a stub that can be used to invoke our Java comparator function. The memory segment is associated with the provided resource scope instance; this means that the stub will be uninstalled when the resource scope is closed. It is also possible (not shown here) to create upcall stubs associated with the *default scope*, in which case the stub will be uninstalled when the upcall segment becomes *unreachable*.\n@@ -272,1 +299,1 @@\n-In short, native scopes are a good way to manage the lifecycle of multiple, logically-related segments, and, despite their simplicity, they provide a fairly good usability and performance boost.\n+The snippet then creates an off-heap array from a Java array (using a `SegmentAllocator`), which is then passed to the `qsort` handle, along with the comparator function we obtained from the foreign linker.  As a side-effect, after the call, the contents of the off-heap array will be sorted (as instructed by our comparator function, written in Java). We can than extract a new Java array from the segment, which contains the sorted elements. This is a more advanced example, but one that shows how powerful the native interop support provided by the foreign linker abstraction is, allowing full bidirectional interop support between Java and native.\n@@ -333,6 +360,7 @@\n-vprintf.invoke(\n-\t\tCLinker.toCString(\"%d plus %d equals %d\").address(),\n-        VaList.make(builder ->\n-                   \t\tbuilder.vargFromInt(C_INT, 2)\n-                               .vargFromInt(C_INT, 2)\n-                               .vargFromInt(C_INT, 4))\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    vprintf.invoke(\n+            CLinker.toCString(\"%d plus %d equals %d\", scope).address(),\n+            VaList.make(builder ->\n+                            builder.vargFromInt(C_INT, 2)\n+                                   .vargFromInt(C_INT, 2)\n+                                   .vargFromInt(C_INT, 4), scope)\n@@ -342,1 +370,1 @@\n-While the callee has to do more work to call the `vprintf` handle, note that that now we're back in a place where the downcall handle  `vprintf` can be shared across multiple callees. A `VaList` object created this way has its own lifetime (`VaList` also supports a `close` operation), so it is up to the callee to make sure that the `VaList` instance is closed (or attached to some existing native scope) so as to avoid leaks.\n+While the callee has to do more work to call the `vprintf` handle, note that that now we're back in a place where the downcall handle  `vprintf` can be shared across multiple callees. Note that both the format string and the `VaList` are associated with the given resource scope — this means that both will remain valid throughout the native function call. As for other APIs, it is also possible (not shown here) to create a `VaList` associated with the *default scope* - meaning that the resources allocated by the `VaList` will remain available as long as the `VaList` remains *reachable*.\n@@ -383,1 +411,2 @@\n-        try (MemorySegment hello = CLinker.toCString(\"Hello\")) {\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            MemorySegment hello = CLinker.toCString(\"Hello\", scope);\n@@ -389,0 +418,15 @@\n+    public static void strlen_virtual() throws Throwable {\n+        MethodHandle strlen_virtual = CLinker.getInstance().downcallHandle(\n+                MethodType.methodType(long.class, MemoryAddress.class),\n+                FunctionDescriptor.of(C_LONG, C_POINTER)\n+        );\n+\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            MemorySegment hello = CLinker.toCString(\"Hello\", scope);\n+            long len = (long) strlen_virtual.invokeExact(\n+                LibraryLookup.ofDefault().lookup(\"strlen\").get(),                \n+                hello.address()); \/\/ 5\n+            System.out.println(len);\n+        }\n+    }\n+\n@@ -408,1 +452,2 @@\n-        MemorySegment comparFunc = CLinker.getInstance().upcallStub(\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+\t\t\tMemorySegment comparFunc = CLinker.getInstance().upcallStub(\n@@ -410,6 +455,4 @@\n-                FunctionDescriptor.of(C_INT, C_POINTER, C_POINTER)\n-        );\n-\n-        try (NativeScope scope = NativeScope.unboundedScope()) {\n-            comparFunc = comparFunc.handoff(scope);\n-            MemorySegment array = scope.allocateArray(C_INT, new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 });\n+                FunctionDescriptor.of(C_INT, C_POINTER, C_POINTER), scope);\n+            \n+            MemorySegment array = SegmentAllocator.scoped(scope)\n+                                                  .allocateArray(C_INT, new int[] { 0, 9, 3, 4, 6, 5, 1, 8, 2, 7 });\n@@ -428,1 +471,2 @@\n-        try (MemorySegment s = CLinker.toCString(\"%d plus %d equals %d\\n\")) {\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n+            MemorySegment s = CLinker.toCString(\"%d plus %d equals %d\\n\", scope);\n@@ -440,1 +484,1 @@\n-        try (NativeScope scope = NativeScope.unboundedScope()) {\n+        try (ResourceScope scope = ResourceScope.ofConfined()) {\n@@ -454,4 +498,0 @@\n-\n-\n-\n-\n@@ -459,6 +499,2 @@\n-* <a id=\"2\"\/>(<sup>2<\/sup>):<small> In the fututre we might consider knobs to allow structs returned by value to be allocated on-heap rather than off-heap. If these structs are always passed back and forth in an opaque manner, there could be a significant performance advantage in avoiding an off-heap allocation.<\/small>\n-* <a id=\"3a\"\/>(<sup>3a<\/sup>):<small> At the time of writing, support for native method intrinsics has been disabled by default due to some spurious VM crash being detected when running `jextract` with the intrinsics support enabled. While we work to rectify this situation, the intrinsics support can still be enabled using the ` -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true` flag.<\/small>\n-* <a id=\"3b\"\/>(<sup>3b<\/sup>):<small> As an advanced option, Panama allows the user to opt-in to remove Java to native thread transitions; while, in the general case it is unsafe doing so (removing thread transitions could have a negative impact on GC for long running native functions, and could crash the VM if the downcall needs to pop back out in Java, e.g. via an upcall), greater efficiency can be achieved; performance sensitive users should consider this option at least for the functions that are called more frquently, assuming that these functions are *leaf* functions (e.g. do not go back to Java via an upcall) and are relatively short-lived.<\/small>\n-* <a id=\"4\"\/>(<sup>4<\/sup>):<small> This might change in the future, as we might want to tie the lifecycle of structs created for an upcall to the lifecycle of the upcall itself so that e.g. any segment that are created ahead of calling a Java upcall, are released immediately after the upcall returns<\/small>\n-* <a id=\"5\"\/>(<sup>5<\/sup>):<small> We are currently investigating alternate allocation strategies to make allocation inside native scopes even faster<\/small>\n-* <a id=\"6\"\/>(<sup>6<\/sup>):<small> On Windows, layouts for variadic arguments have to be adjusted using the `CLinker.Win64.asVarArg(ValueLayout)`; this is necessay because the Windows ABI passes variadic arguments using different rules than the ones used for ordinary arguments.<\/small>\n+* <a id=\"2\"\/>(<sup>2<\/sup>):<small> As an advanced option, Panama allows the user to opt-in to remove Java to native thread transitions; while, in the general case it is unsafe doing so (removing thread transitions could have a negative impact on GC for long running native functions, and could crash the VM if the downcall needs to pop back out in Java, e.g. via an upcall), greater efficiency can be achieved; performance sensitive users should consider this option at least for the functions that are called more frequently, assuming that these functions are *leaf* functions (e.g. do not go back to Java via an upcall) and are relatively short-lived.<\/small>\n+* <a id=\"3\"\/>(<sup>3<\/sup>):<small> On Windows, layouts for variadic arguments have to be adjusted using the `CLinker.Win64.asVarArg(ValueLayout)`; this is necessary because the Windows ABI passes variadic arguments using different rules than the ones used for ordinary arguments.<\/small>\n","filename":"doc\/panama_ffi.md","additions":153,"deletions":117,"binary":false,"changes":270,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-<!DOCTYPE html>\n-<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<!doctype html>\n+<html>\n@@ -4,20 +4,22 @@\n-  <meta charset=\"utf-8\" \/>\n-  <meta name=\"generator\" content=\"pandoc\" \/>\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n-  <title>panama_memaccess<\/title>\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n-  <\/style>\n-  <style type=\"text\/css\">\n-a.sourceLine { display: inline-block; line-height: 1.25; }\n-a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }\n-a.sourceLine:empty { height: 1.2em; }\n-.sourceCode { overflow: visible; }\n-code.sourceCode { white-space: pre; position: relative; }\n-div.sourceCode { margin: 1em 0; }\n-pre.sourceCode { margin: 0; }\n-@media screen {\n-div.sourceCode { overflow: auto; }\n+<meta charset='UTF-8'><meta name='viewport' content='width=device-width initial-scale=1'>\n+<title>foreign-memaccess_v2<\/title><link href='https:\/\/fonts.loli.net\/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext' rel='stylesheet' type='text\/css' \/><style type='text\/css'>html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:\"Lucida Console\",Consolas,\"Courier\",monospace; --title-bar-height:20px; }\n+.mac-os-11 { --title-bar-height:28px; }\n+html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }\n+body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }\n+iframe { margin: auto; }\n+a.url { word-break: break-all; }\n+a:active, a:hover { outline: 0px; }\n+.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }\n+#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 36px; }\n+#write.first-line-indent p { text-indent: 2em; }\n+#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }\n+#write.first-line-indent li { margin-left: 2em; }\n+.for-image #write { padding-left: 8px; padding-right: 8px; }\n+body.typora-export { padding-left: 30px; padding-right: 30px; }\n+.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }\n+.typora-export .task-list-item input { pointer-events: none; }\n+@media screen and (max-width: 500px) {\n+  body.typora-export { padding-left: 0px; padding-right: 0px; }\n+  #write { padding-left: 20px; padding-right: 20px; }\n+  .CodeMirror-sizer { margin-left: 0px !important; }\n+  .CodeMirror-gutters { display: none !important; }\n@@ -25,0 +27,60 @@\n+#write li > figure:last-child { margin-bottom: 0.5rem; }\n+#write ol, #write ul { position: relative; }\n+img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }\n+button, input, select, textarea { color: inherit; font: inherit; }\n+input[type=\"checkbox\"], input[type=\"radio\"] { line-height: normal; padding: 0px; }\n+*, ::after, ::before { box-sizing: border-box; }\n+#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }\n+#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }\n+p { line-height: inherit; }\n+h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }\n+p { orphans: 4; }\n+h1 { font-size: 2rem; }\n+h2 { font-size: 1.8rem; }\n+h3 { font-size: 1.6rem; }\n+h4 { font-size: 1.4rem; }\n+h5 { font-size: 1.2rem; }\n+h6 { font-size: 1rem; }\n+.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }\n+.hidden { display: none; }\n+.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }\n+a { cursor: pointer; }\n+sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }\n+sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }\n+#write input[type=\"checkbox\"] { cursor: pointer; width: inherit; height: inherit; }\n+figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }\n+figure > table { margin: 0px; }\n+tr { break-inside: avoid; break-after: auto; }\n+thead { display: table-header-group; }\n+table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }\n+table.md-table td { min-width: 32px; }\n+.CodeMirror-gutters { border-right: 0px; background-color: inherit; }\n+.CodeMirror-linenumber { user-select: none; }\n+.CodeMirror { text-align: left; }\n+.CodeMirror-placeholder { opacity: 0.3; }\n+.CodeMirror pre { padding: 0px 4px; }\n+.CodeMirror-lines { padding: 0px; }\n+div.hr:focus { cursor: none; }\n+#write pre { white-space: pre-wrap; }\n+#write.fences-no-line-wrapping pre { white-space: pre; }\n+#write pre.ty-contain-cm { white-space: normal; }\n+.CodeMirror-gutters { margin-right: 4px; }\n+.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }\n+.md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }\n+#write .md-fences.mock-cm { white-space: pre-wrap; }\n+.md-fences.md-fences-with-lineno { padding-left: 0px; }\n+#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }\n+.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }\n+.CodeMirror-line, twitterwidget { break-inside: avoid; }\n+.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }\n+.footnotes + .footnotes { margin-top: 0px; }\n+.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }\n+li div { padding-top: 0px; }\n+blockquote { margin: 1rem 0px; }\n+li .mathjax-block, li p { margin: 0.5rem 0px; }\n+li blockquote { margin: 1rem 0px; }\n+li { margin: 0px; position: relative; }\n+blockquote > :last-child { margin-bottom: 0px; }\n+blockquote > :first-child, li > :first-child { margin-top: 0px; }\n+.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }\n+#write .footnote-line { white-space: pre-wrap; }\n@@ -26,52 +88,534 @@\n-code.sourceCode { white-space: pre-wrap; }\n-a.sourceLine { text-indent: -1em; padding-left: 1em; }\n-}\n-pre.numberSource a.sourceLine\n-  { position: relative; left: -4em; }\n-pre.numberSource a.sourceLine::before\n-  { content: attr(title);\n-    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n-    border: none; pointer-events: all; display: inline-block;\n-    -webkit-touch-callout: none; -webkit-user-select: none;\n-    -khtml-user-select: none; -moz-user-select: none;\n-    -ms-user-select: none; user-select: none;\n-    padding: 0 4px; width: 4em;\n-    color: #aaaaaa;\n-  }\n-pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n-div.sourceCode\n-  {  }\n-@media screen {\n-a.sourceLine::before { text-decoration: underline; }\n-}\n-code span.al { color: #ff0000; font-weight: bold; } \/* Alert *\/\n-code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Annotation *\/\n-code span.at { color: #7d9029; } \/* Attribute *\/\n-code span.bn { color: #40a070; } \/* BaseN *\/\n-code span.bu { } \/* BuiltIn *\/\n-code span.cf { color: #007020; font-weight: bold; } \/* ControlFlow *\/\n-code span.ch { color: #4070a0; } \/* Char *\/\n-code span.cn { color: #880000; } \/* Constant *\/\n-code span.co { color: #60a0b0; font-style: italic; } \/* Comment *\/\n-code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } \/* CommentVar *\/\n-code span.do { color: #ba2121; font-style: italic; } \/* Documentation *\/\n-code span.dt { color: #902000; } \/* DataType *\/\n-code span.dv { color: #40a070; } \/* DecVal *\/\n-code span.er { color: #ff0000; font-weight: bold; } \/* Error *\/\n-code span.ex { } \/* Extension *\/\n-code span.fl { color: #40a070; } \/* Float *\/\n-code span.fu { color: #06287e; } \/* Function *\/\n-code span.im { } \/* Import *\/\n-code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Information *\/\n-code span.kw { color: #007020; font-weight: bold; } \/* Keyword *\/\n-code span.op { color: #666666; } \/* Operator *\/\n-code span.ot { color: #007020; } \/* Other *\/\n-code span.pp { color: #bc7a00; } \/* Preprocessor *\/\n-code span.sc { color: #4070a0; } \/* SpecialChar *\/\n-code span.ss { color: #bb6688; } \/* SpecialString *\/\n-code span.st { color: #4070a0; } \/* String *\/\n-code span.va { color: #19177c; } \/* Variable *\/\n-code span.vs { color: #4070a0; } \/* VerbatimString *\/\n-code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } \/* Warning *\/\n-  <\/style>\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }\n+  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }\n+  .typora-export * { -webkit-print-color-adjust: exact; }\n+  .typora-export #write { break-after: avoid; }\n+  .typora-export #write::after { height: 0px; }\n+  .is-mac table { break-inside: avoid; }\n+}\n+.footnote-line { margin-top: 0.714em; font-size: 0.7em; }\n+a img, img a { cursor: pointer; }\n+pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }\n+p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }\n+#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }\n+p > .md-image:only-child { display: inline-block; width: 100%; }\n+#write .MathJax_Display { margin: 0.8em 0px 0px; }\n+.md-math-block { width: 100%; }\n+.md-math-block:not(:empty)::after { display: none; }\n+.MathJax_ref { fill: currentcolor; }\n+[contenteditable=\"true\"]:active, [contenteditable=\"true\"]:focus, [contenteditable=\"false\"]:active, [contenteditable=\"false\"]:focus { outline: 0px; box-shadow: none; }\n+.md-task-list-item { position: relative; list-style-type: none; }\n+.task-list-item.md-task-list-item { padding-left: 0px; }\n+.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }\n+.math { font-size: 1rem; }\n+.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }\n+.md-toc-content { position: relative; margin-left: 0px; }\n+.md-toc-content::after, .md-toc::after { display: none; }\n+.md-toc-item { display: block; color: rgb(65, 131, 196); }\n+.md-toc-item a { text-decoration: none; }\n+.md-toc-inner:hover { text-decoration: underline; }\n+.md-toc-inner { display: inline-block; cursor: pointer; }\n+.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }\n+.md-toc-h2 .md-toc-inner { margin-left: 2em; }\n+.md-toc-h3 .md-toc-inner { margin-left: 4em; }\n+.md-toc-h4 .md-toc-inner { margin-left: 6em; }\n+.md-toc-h5 .md-toc-inner { margin-left: 8em; }\n+.md-toc-h6 .md-toc-inner { margin-left: 10em; }\n+@media screen and (max-width: 48em) {\n+  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }\n+  .md-toc-h4 .md-toc-inner { margin-left: 5em; }\n+  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }\n+  .md-toc-h6 .md-toc-inner { margin-left: 8em; }\n+}\n+a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }\n+.footnote-line a:not(.reversefootnote) { color: inherit; }\n+.md-attr { display: none; }\n+.md-fn-count::after { content: \".\"; }\n+code, pre, samp, tt { font-family: var(--monospace); }\n+kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }\n+.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }\n+code { text-align: left; vertical-align: initial; }\n+a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }\n+.md-inline-math .MathJax_SVG .noError { display: none !important; }\n+.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }\n+.md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; }\n+.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }\n+.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }\n+.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }\n+.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }\n+.MathJax_SVG * { transition: none 0s ease 0s; }\n+.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; }\n+.os-windows.monocolor-emoji .md-emoji { font-family: \"Segoe UI Symbol\", sans-serif; }\n+.md-diagram-panel > svg { max-width: 100%; }\n+[lang=\"flow\"] svg, [lang=\"mermaid\"] svg { max-width: 100%; height: auto; }\n+[lang=\"mermaid\"] .node text { font-size: 1rem; }\n+table tr th { border-bottom: 0px; }\n+video { max-width: 100%; display: block; margin: 0px auto; }\n+iframe { max-width: 100%; width: 100%; border: none; }\n+.highlight td, .highlight tr { border: 0px; }\n+mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }\n+.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }\n+mark .md-meta { color: rgb(0, 0, 0); opacity: 0.3 !important; }\n+@media print {\n+  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }\n+}\n+.md-diagram-panel .messageText { stroke: none !important; }\n+.md-diagram-panel .start-state { fill: var(--node-fill); }\n+.md-diagram-panel .edgeLabel rect { opacity: 1 !important; }\n+.md-require-zoom-fix foreignobject { font-size: var(--mermaid-font-zoom); }\n+\n+\n+.CodeMirror { height: auto; }\n+.CodeMirror.cm-s-inner { background: inherit; }\n+.CodeMirror-scroll { overflow: auto hidden; z-index: 3; }\n+.CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); }\n+.CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; }\n+.CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); }\n+.cm-s-inner .cm-keyword { color: rgb(119, 0, 136); }\n+.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); }\n+.cm-s-inner .cm-number { color: rgb(17, 102, 68); }\n+.cm-s-inner .cm-def { color: rgb(0, 0, 255); }\n+.cm-s-inner .cm-variable { color: rgb(0, 0, 0); }\n+.cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); }\n+.cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); }\n+.cm-s-inner .cm-string { color: rgb(170, 17, 17); }\n+.cm-s-inner .cm-property { color: rgb(0, 0, 0); }\n+.cm-s-inner .cm-operator { color: rgb(152, 26, 26); }\n+.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); }\n+.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }\n+.cm-s-inner .cm-meta { color: rgb(85, 85, 85); }\n+.cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); }\n+.cm-s-inner .cm-builtin { color: rgb(51, 0, 170); }\n+.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }\n+.cm-s-inner .cm-tag { color: rgb(17, 119, 0); }\n+.cm-s-inner .cm-attribute { color: rgb(0, 0, 204); }\n+.cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); }\n+.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); }\n+.cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); }\n+.cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); }\n+.cm-negative { color: rgb(221, 68, 68); }\n+.cm-positive { color: rgb(34, 153, 34); }\n+.cm-header, .cm-strong { font-weight: 700; }\n+.cm-del { text-decoration: line-through; }\n+.cm-em { font-style: italic; }\n+.cm-link { text-decoration: underline; }\n+.cm-error { color: red; }\n+.cm-invalidchar { color: red; }\n+.cm-constant { color: rgb(38, 139, 210); }\n+.cm-defined { color: rgb(181, 137, 0); }\n+div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); }\n+div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); }\n+.cm-s-inner .CodeMirror-activeline-background { background: inherit; }\n+.CodeMirror { position: relative; overflow: hidden; }\n+.CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; }\n+.CodeMirror-sizer { position: relative; }\n+.CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; }\n+.CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; }\n+.CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: hidden; }\n+.CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; }\n+.CodeMirror-gutter-filler { left: 0px; bottom: 0px; }\n+.CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 30px; z-index: 3; }\n+.CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; }\n+.CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; }\n+.CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; }\n+.CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; }\n+.CodeMirror-lines { cursor: text; }\n+.CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; overflow-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; }\n+.CodeMirror-wrap pre { overflow-wrap: break-word; white-space: pre-wrap; word-break: normal; }\n+.CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; }\n+.CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; }\n+.CodeMirror-linebackground { position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; z-index: 0; }\n+.CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; }\n+.CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; }\n+.CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; }\n+.CodeMirror-measure pre { position: static; }\n+.CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; }\n+.CodeMirror div.CodeMirror-cursor { visibility: hidden; }\n+.CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; }\n+.cm-searching { background: rgba(255, 255, 0, 0.4); }\n+@media print {\n+  .CodeMirror div.CodeMirror-cursor { visibility: hidden; }\n+}\n+\n+\n+:root {\n+    --side-bar-bg-color: #fafafa;\n+    --control-text-color: #777;\n+}\n+\n+@include-when-export url(https:\/\/fonts.loli.net\/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext);\n+\n+\/* open-sans-regular - latin-ext_latin *\/\n+  \/* open-sans-italic - latin-ext_latin *\/\n+    \/* open-sans-700 - latin-ext_latin *\/\n+    \/* open-sans-700italic - latin-ext_latin *\/\n+  html {\n+    font-size: 16px;\n+}\n+\n+body {\n+    font-family: \"Open Sans\",\"Clear Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n+    color: rgb(51, 51, 51);\n+    line-height: 1.6;\n+}\n+\n+#write {\n+    max-width: 860px;\n+  \tmargin: 0 auto;\n+  \tpadding: 30px;\n+    padding-bottom: 100px;\n+}\n+\n+@media only screen and (min-width: 1400px) {\n+\t#write {\n+\t\tmax-width: 1024px;\n+\t}\n+}\n+\n+@media only screen and (min-width: 1800px) {\n+\t#write {\n+\t\tmax-width: 1200px;\n+\t}\n+}\n+\n+#write > ul:first-child,\n+#write > ol:first-child{\n+    margin-top: 30px;\n+}\n+\n+a {\n+    color: #4183C4;\n+}\n+h1,\n+h2,\n+h3,\n+h4,\n+h5,\n+h6 {\n+    position: relative;\n+    margin-top: 1rem;\n+    margin-bottom: 1rem;\n+    font-weight: bold;\n+    line-height: 1.4;\n+    cursor: text;\n+}\n+h1:hover a.anchor,\n+h2:hover a.anchor,\n+h3:hover a.anchor,\n+h4:hover a.anchor,\n+h5:hover a.anchor,\n+h6:hover a.anchor {\n+    text-decoration: none;\n+}\n+h1 tt,\n+h1 code {\n+    font-size: inherit;\n+}\n+h2 tt,\n+h2 code {\n+    font-size: inherit;\n+}\n+h3 tt,\n+h3 code {\n+    font-size: inherit;\n+}\n+h4 tt,\n+h4 code {\n+    font-size: inherit;\n+}\n+h5 tt,\n+h5 code {\n+    font-size: inherit;\n+}\n+h6 tt,\n+h6 code {\n+    font-size: inherit;\n+}\n+h1 {\n+    font-size: 2.25em;\n+    line-height: 1.2;\n+    border-bottom: 1px solid #eee;\n+}\n+h2 {\n+    font-size: 1.75em;\n+    line-height: 1.225;\n+    border-bottom: 1px solid #eee;\n+}\n+\n+\/*@media print {\n+    .typora-export h1,\n+    .typora-export h2 {\n+        border-bottom: none;\n+        padding-bottom: initial;\n+    }\n+\n+    .typora-export h1::after,\n+    .typora-export h2::after {\n+        content: \"\";\n+        display: block;\n+        height: 100px;\n+        margin-top: -96px;\n+        border-top: 1px solid #eee;\n+    }\n+}*\/\n+\n+h3 {\n+    font-size: 1.5em;\n+    line-height: 1.43;\n+}\n+h4 {\n+    font-size: 1.25em;\n+}\n+h5 {\n+    font-size: 1em;\n+}\n+h6 {\n+   font-size: 1em;\n+    color: #777;\n+}\n+p,\n+blockquote,\n+ul,\n+ol,\n+dl,\n+table{\n+    margin: 0.8em 0;\n+}\n+li>ol,\n+li>ul {\n+    margin: 0 0;\n+}\n+hr {\n+    height: 2px;\n+    padding: 0;\n+    margin: 16px 0;\n+    background-color: #e7e7e7;\n+    border: 0 none;\n+    overflow: hidden;\n+    box-sizing: content-box;\n+}\n+\n+li p.first {\n+    display: inline-block;\n+}\n+ul,\n+ol {\n+    padding-left: 30px;\n+}\n+ul:first-child,\n+ol:first-child {\n+    margin-top: 0;\n+}\n+ul:last-child,\n+ol:last-child {\n+    margin-bottom: 0;\n+}\n+blockquote {\n+    border-left: 4px solid #dfe2e5;\n+    padding: 0 15px;\n+    color: #777777;\n+}\n+blockquote blockquote {\n+    padding-right: 0;\n+}\n+table {\n+    padding: 0;\n+    word-break: initial;\n+}\n+table tr {\n+    border-top: 1px solid #dfe2e5;\n+    margin: 0;\n+    padding: 0;\n+}\n+table tr:nth-child(2n),\n+thead {\n+    background-color: #f8f8f8;\n+}\n+table th {\n+    font-weight: bold;\n+    border: 1px solid #dfe2e5;\n+    border-bottom: 0;\n+    margin: 0;\n+    padding: 6px 13px;\n+}\n+table td {\n+    border: 1px solid #dfe2e5;\n+    margin: 0;\n+    padding: 6px 13px;\n+}\n+table th:first-child,\n+table td:first-child {\n+    margin-top: 0;\n+}\n+table th:last-child,\n+table td:last-child {\n+    margin-bottom: 0;\n+}\n+\n+.CodeMirror-lines {\n+    padding-left: 4px;\n+}\n+\n+.code-tooltip {\n+    box-shadow: 0 1px 1px 0 rgba(0,28,36,.3);\n+    border-top: 1px solid #eef2f2;\n+}\n+\n+.md-fences,\n+code,\n+tt {\n+    border: 1px solid #e7eaed;\n+    background-color: #f8f8f8;\n+    border-radius: 3px;\n+    padding: 0;\n+    padding: 2px 4px 0px 4px;\n+    font-size: 0.9em;\n+}\n+\n+code {\n+    background-color: #f3f4f4;\n+    padding: 0 2px 0 2px;\n+}\n+\n+.md-fences {\n+    margin-bottom: 15px;\n+    margin-top: 15px;\n+    padding-top: 8px;\n+    padding-bottom: 6px;\n+}\n+\n+\n+.md-task-list-item > input {\n+  margin-left: -1.3em;\n+}\n+\n+@media print {\n+    html {\n+        font-size: 13px;\n+    }\n+    table,\n+    pre {\n+        page-break-inside: avoid;\n+    }\n+    pre {\n+        word-wrap: break-word;\n+    }\n+}\n+\n+.md-fences {\n+\tbackground-color: #f8f8f8;\n+}\n+#write pre.md-meta-block {\n+\tpadding: 1rem;\n+    font-size: 85%;\n+    line-height: 1.45;\n+    background-color: #f7f7f7;\n+    border: 0;\n+    border-radius: 3px;\n+    color: #777777;\n+    margin-top: 0 !important;\n+}\n+\n+.mathjax-block>.code-tooltip {\n+\tbottom: .375rem;\n+}\n+\n+.md-mathjax-midline {\n+    background: #fafafa;\n+}\n+\n+#write>h3.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .375rem;\n+}\n+#write>h4.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .285714286rem;\n+}\n+#write>h5.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .285714286rem;\n+}\n+#write>h6.md-focus:before{\n+\tleft: -1.5625rem;\n+\ttop: .285714286rem;\n+}\n+.md-image>.md-meta {\n+    \/*border: 1px solid #ddd;*\/\n+    border-radius: 3px;\n+    padding: 2px 0px 0px 4px;\n+    font-size: 0.9em;\n+    color: inherit;\n+}\n+\n+.md-tag {\n+    color: #a7a7a7;\n+    opacity: 1;\n+}\n+\n+.md-toc { \n+    margin-top:20px;\n+    padding-bottom:20px;\n+}\n+\n+.sidebar-tabs {\n+    border-bottom: none;\n+}\n+\n+#typora-quick-open {\n+    border: 1px solid #ddd;\n+    background-color: #f8f8f8;\n+}\n+\n+#typora-quick-open-item {\n+    background-color: #FAFAFA;\n+    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;\n+    border-style: solid;\n+    border-width: 1px;\n+}\n+\n+\/** focus mode *\/\n+.on-focus-mode blockquote {\n+    border-left-color: rgba(85, 85, 85, 0.12);\n+}\n+\n+header, .context-menu, .megamenu-content, footer{\n+    font-family: \"Segoe UI\", \"Arial\", sans-serif;\n+}\n+\n+.file-node-content:hover .file-node-icon,\n+.file-node-content:hover .file-node-open-state{\n+    visibility: visible;\n+}\n+\n+.mac-seamless-mode #typora-sidebar {\n+    background-color: #fafafa;\n+    background-color: var(--side-bar-bg-color);\n+}\n+\n+.md-lang {\n+    color: #b4654d;\n+}\n+\n+.html-for-mac .context-menu {\n+    --item-hover-bg-color: #E6F0FE;\n+}\n+\n+#md-notification .btn {\n+    border: 0;\n+}\n+\n+.dropdown-menu .divider {\n+    border-color: #e5e5e5;\n+}\n+\n+.ty-preferences .window-content {\n+    background-color: #fafafa;\n+}\n+\n+.ty-preferences .nav-group-item.active {\n+    color: white;\n+    background: #999;\n+}\n+\n+\n+<\/style>\n@@ -79,204 +623,6 @@\n-<body>\n-<nav id=\"TOC\">\n-<ul>\n-<li><a href=\"#state-of-foreign-memory-support\">State of foreign memory support<\/a><ul>\n-<li><a href=\"#segments\">Segments<\/a><\/li>\n-<li><a href=\"#memory-access-handles\">Memory access handles<\/a><\/li>\n-<li><a href=\"#safety\">Safety<\/a><\/li>\n-<li><a href=\"#layouts\">Layouts<\/a><\/li>\n-<li><a href=\"#var-handle-combinators\">Var handle combinators<\/a><\/li>\n-<li><a href=\"#segment-accessors\">Segment accessors<\/a><\/li>\n-<li><a href=\"#interoperability\">Interoperability<\/a><\/li>\n-<li><a href=\"#unsafe-segments\">Unsafe segments<\/a><\/li>\n-<li><a href=\"#confinement\">Confinement<\/a><\/li>\n-<li><a href=\"#implicit-deallocation\">Implicit deallocation<\/a><\/li>\n-<\/ul><\/li>\n-<\/ul>\n-<\/nav>\n-<h2 id=\"state-of-foreign-memory-support\">State of foreign memory support<\/h2>\n-<p><strong>October 2020<\/strong><\/p>\n-<ul>\n-<li>Reflect latest API changes in handoff\/implicit deallocation<\/li>\n-<li>Updated section on restricted segments reflecting new, simpler API<\/li>\n-<li>Revamped section on confinement to add description of shared segments<\/li>\n-<li>Added section on implicit deallocation<\/li>\n-<\/ul>\n-<p><strong>Maurizio Cimadamore<\/strong><\/p>\n-<p>A crucial part of any native interop story lies in the ability of accessing off-heap memory in an efficient fashion. Panama achieves this goal through the so called Foreign Memory Access API. This API has been made available as an incubating API in Java <a href=\"https:\/\/openjdk.java.net\/jeps\/370\">14<\/a> ad <a href=\"https:\/\/openjdk.java.net\/jeps\/383\">15<\/a>, and is, to date, the most mature part of the Panama interop story.<\/p>\n-<h3 id=\"segments\">Segments<\/h3>\n-<p>Memory segments are abstractions which can be used to model memory regions, located either on- or off- the Java heap. Segments can be allocated from native memory (e.g. like a <code>malloc<\/code>), or can be wrapped around existing memory sources (e.g. a Java array or a <code>ByteBuffer<\/code>). Memory segments provide <em>strong<\/em> guarantees which make memory dereference operation <em>safe<\/em>. More specifically, each segment provides:<\/p>\n-<ul>\n-<li><em>spatial bounds<\/em> - that is, a segment has a base address and a size, and accessing a segment outside those boundaries is forbidden<\/li>\n-<li><em>temporal bounds<\/em> - that is, a segment has a <em>state<\/em> - meaning that it can be used and then <em>closed<\/em> when the memory backing the segment is no longer needed (note, this might trigger deallocation of said memory)<\/li>\n-<li><em>thread-confinement<\/em> - that is, a segment is a view over a memory region that is <em>owned<\/em> by the thread which created it. Attempting to dereference or close a segment outside the confinement thread is forbidden (this is crucial to avoid access vs. close races in multi-threaded scenario)<\/li>\n-<\/ul>\n-<p>For instance, the following snippet allocates 100 bytes off-heap:<\/p>\n-<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\"><span class=\"kw\">try<\/span> (MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">100<\/span>)) {<\/a>\n-<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\">    ...<\/a>\n-<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\">} <span class=\"co\">\/\/ frees memory<\/span><\/a><\/code><\/pre><\/div>\n-<p>Since segments are <code>AutoCloseable<\/code> they can be used inside a <em>try-with-resources<\/em> statement, which helps ensure that memory will be released when the segment is no longer needed.<\/p>\n-<p>Memory segments support <em>slicing<\/em> — that is, given a segment, it is possible to create a new segment whose spatial bounds are stricter than that of the original segment:<\/p>\n-<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb2-1\" title=\"1\">MemorySegment segment = MemorySement.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb2-2\" title=\"2\">MemorySegment slice = segment.<span class=\"fu\">asSlice<\/span>(<span class=\"dv\">4<\/span>, <span class=\"dv\">4<\/span>);<\/a><\/code><\/pre><\/div>\n-<p>The above code creates a slice that starts at offset 4 and has a length of 4 bytes. Slices have the <em>same<\/em> temporal bounds as the parent segment - this means that when the parent segment is closed, all the slices derived from it are also closed. The opposite is also true, closing a slice closes the parent segment (and all the other slices derived from it). If a library wants to share a slice, but prevent a client from closing it (could be useful e.g. when implementing a slab allocator), the library could prevent a client from closing the slice by creating a <em>non-closeable<\/em> view:<\/p>\n-<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb3-1\" title=\"1\">MemorySegment sharedSlice = slice.<span class=\"fu\">withAccessModes<\/span>(ALL_ACCESS &amp; ~CLOSE);<\/a><\/code><\/pre><\/div>\n-<p>Any attempt to call <code>close<\/code> on <code>sharedSlice<\/code> will be met with an exception. Memory segments support various access modes (including those for read\/write access) which can be used to constrain the set of operations available to clients.<\/p>\n-<h3 id=\"memory-access-handles\">Memory access handles<\/h3>\n-<p>Dereferencing memory associated with segments is made possible by using <em>memory access var handles<\/em>. A memory access var handle is a special kind of var handle which takes a memory segment access coordinate, together with a byte offset — the offset, relative to the segment's base address at which the dereference operation should occur. A memory access var handle can be obtained as follows:<\/p>\n-<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\">VarHandle intHandle = MemoryHandles.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"bu\">ByteOrder<\/span>.<span class=\"fu\">nativeOrder<\/span>())    <\/a><\/code><\/pre><\/div>\n-<p>To create a dereference handle we have to specify a carrier type — the type we want to use e.g. to extract values from memory, as well as to whether any byte swapping should be applied when contents are read from or stored to memory. Additionally, the user can supply an extra alignment parameter (not shown here) — this can be useful to impose additional constraints on how memory dereferences should occur; for instance, a client might want to prevent access to misaligned 32 bit values.<\/p>\n-<p>For instance, to read 10 int values from a segment, we can write the following code:<\/p>\n-<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb5-1\" title=\"1\">MemorySegment segment = ...<\/a>\n-<a class=\"sourceLine\" id=\"cb5-2\" title=\"2\"><span class=\"dt\">int<\/span>[] values = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">10<\/span>];<\/a>\n-<a class=\"sourceLine\" id=\"cb5-3\" title=\"3\"><span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span> ; i &lt; values.<span class=\"fu\">length<\/span> ; i++) {<\/a>\n-<a class=\"sourceLine\" id=\"cb5-4\" title=\"4\">    values[i] = (<span class=\"dt\">int<\/span>)intHandle.<span class=\"fu\">get<\/span>(segment, (<span class=\"dt\">long<\/span>)i * <span class=\"dv\">4<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb5-5\" title=\"5\">}<\/a><\/code><\/pre><\/div>\n-<p>Memory access var handles (as any other var handle) are <em>strongly<\/em> typed; and to get maximum efficiency, it is generally necessary to introduce casts to make sure that the access coordinates match the expected types — in this case we have to cast <code>i * 4<\/code> into a long; similarly, since the signature polymorphic method <code>VarHandle::get<\/code> notionally returns <code>Object<\/code> a cast is necessary to force the right return type the var handle operation.<\/p>\n-<p>Note that, since the offset of the dereference operation is expressed in bytes, we have to manually compute the starting offset, by multiplying the logical index <code>i<\/code> by <code>4<\/code> — the size (in bytes) of a Java int value; this is not dissimilar to what happens with the <code>ByteBuffer<\/code> absolute get\/put methods. We shall see later how memory layouts help us achieving higher level, structured access.<\/p>\n-<h3 id=\"safety\">Safety<\/h3>\n-<p>The memory access API provides basic safety guarantees for memory dereference operations. More specifically, dereferencing memory should either succeed, or result in a runtime exception - but, crucially, should never result in a VM crash, or, more subtly, in memory corruption occurring <em>outside<\/em> the region of memory associated with a memory segment.<\/p>\n-<p>To enforce this, strong spatial and temporal checks are enforced upon every access. Consider the following code:<\/p>\n-<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb6-1\" title=\"1\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb6-2\" title=\"2\">intHandle.<span class=\"fu\">get<\/span>(segment, <span class=\"dv\">8<\/span>); <span class=\"co\">\/\/throws ISE<\/span><\/a><\/code><\/pre><\/div>\n-<p>The above code leads to a runtime exception, as we trying to access memory outside the segment's bounds — the access operation starts at offset 8 (which is within bounds), but ends at offset 11 (which is outside bounds).<\/p>\n-<p>Similarly, attempting to access an already closed segment leads to a failure:<\/p>\n-<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb7-1\" title=\"1\">segment.<span class=\"fu\">close<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb7-2\" title=\"2\">intHandle.<span class=\"fu\">get<\/span>(segment, <span class=\"dv\">0<\/span>); <span class=\"co\">\/\/throws ISE<\/span><\/a><\/code><\/pre><\/div>\n-<p>This time, the access occurs within the spatial bounds implied by the segment, but when access occurs, the segment has already been <em>closed<\/em>, so the access operation fails. This is crucial to guarantee safety: since memory segments ensure <em>deterministic deallocation<\/em>, the above code might end up attempting to dereference already freed memory.<\/p>\n-<p>On top of basic spatial and temporal bound guarantees, memory segments also enforce thread-confinement guarantees, which will be discussed in a later <a href=\"#Confinement\">section<\/a>. Note that, while these checks might seem expensive when considered in isolation, the Foreign Memory Access API is designed and implemented such that the JIT compiler can hoist most, if not all, such checks outside hot loops. Hence, memory access efficiency is not negatively impacted by the safety requirements of the API.<\/p>\n-<h3 id=\"layouts\">Layouts<\/h3>\n-<p>Expressing byte offsets (as in the <a href=\"#memory-access-handles\">above<\/a> example) can lead to code that is hard to read, and very fragile — as memory layout invariants are captured, implicitly, in the constants used to scale offsets. To address this issue, we add a <em>memory layout<\/em> API which allows clients to define memory layouts <em>programmatically<\/em>. For instance, the layout of the array used in the above example can be expressed using the following code:<\/p>\n-<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb8-1\" title=\"1\">MemoryLayout intArray = MemoryLayout.<span class=\"fu\">ofSequence<\/span>(<span class=\"dv\">10<\/span>, MemoryLayout.<span class=\"fu\">ofValueBits<\/span>(<span class=\"dv\">32<\/span>));<\/a><\/code><\/pre><\/div>\n-<p>That is, our layout is a repetition of 10 elements whose size is 32 bit each. The advantage of defining a memory layout upfront, using an API, is that we can then query on the layout — for instance we can compute the offset of the 3rd element of the array:<\/p>\n-<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb9-1\" title=\"1\"><span class=\"dt\">long<\/span> element3 = intArray.<span class=\"fu\">byteOffset<\/span>(PathElement.<span class=\"fu\">sequenceElement<\/span>(<span class=\"dv\">3<\/span>)); <span class=\"co\">\/\/ 12<\/span><\/a><\/code><\/pre><\/div>\n-<p>To specify which nested layout element should be used for the offset calculation we use a so called <em>layout path<\/em> - that is, a selection expression that navigates the layout, from the <em>root<\/em> layout, down to the leaf layout we wish to select (in this case the 3rd layout element in the sequence).<\/p>\n-<p>Layouts can also be used to obtain memory access var handles; so we can rewrite the above example as follows:<\/p>\n-<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb10-1\" title=\"1\">MemorySegment segment = ...<\/a>\n-<a class=\"sourceLine\" id=\"cb10-2\" title=\"2\"><span class=\"dt\">int<\/span>[] values = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">10<\/span>];<\/a>\n-<a class=\"sourceLine\" id=\"cb10-3\" title=\"3\">VarHandle elemHandle = intArray.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, PathElement.<span class=\"fu\">sequenceElement<\/span>());<\/a>\n-<a class=\"sourceLine\" id=\"cb10-4\" title=\"4\"><span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span> ; i &lt; values.<span class=\"fu\">length<\/span> ; i++) {<\/a>\n-<a class=\"sourceLine\" id=\"cb10-5\" title=\"5\">    values[i] = (<span class=\"dt\">int<\/span>)elemHandle.<span class=\"fu\">get<\/span>(segment, (<span class=\"dt\">long<\/span>)i);<\/a>\n-<a class=\"sourceLine\" id=\"cb10-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n-<p>In the above, <code>elemHandle<\/code> is a var handle whose type is <code>int<\/code> , which takes two access coordinates:<\/p>\n-<ol type=\"1\">\n-<li>a <code>MemorySegment<\/code> instance; the segment whose memory should be dereferenced<\/li>\n-<li>a <em>logical<\/em> index, which is used to select the element of the sequence we want to access<\/li>\n-<\/ol>\n-<p>In other words, manual offset computation is no longer needed — offsets and strides can in fact be derived from the layout object.<\/p>\n-<p>Memory layouts shine when structured access is needed — consider the following C declaration:<\/p>\n-<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\"><span class=\"kw\">typedef<\/span> <span class=\"kw\">struct<\/span> {<\/a>\n-<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\">    <span class=\"dt\">char<\/span> kind;<\/a>\n-<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">    <span class=\"dt\">int<\/span> value;<\/a>\n-<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\">} TaggedValues[<span class=\"dv\">5<\/span>];<\/a><\/code><\/pre><\/div>\n-<p>The above C declaration can be modeled using the layout below:<\/p>\n-<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><a class=\"sourceLine\" id=\"cb12-1\" title=\"1\">SequenceLayout taggedValues <span class=\"op\">=<\/span> <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofSequence<\/span>(<span class=\"dv\">5<\/span><span class=\"op\">,<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb12-2\" title=\"2\">    <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofStruct<\/span>(<\/a>\n-<a class=\"sourceLine\" id=\"cb12-3\" title=\"3\">        <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofValueBits<\/span>(<span class=\"dv\">8<\/span><span class=\"op\">,<\/span> <span class=\"va\">ByteOrder<\/span>.<span class=\"at\">nativeOrder<\/span>()).<span class=\"at\">withName<\/span>(<span class=\"st\">&quot;kind&quot;<\/span>)<span class=\"op\">,<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb12-4\" title=\"4\">        <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofPaddingBits<\/span>(<span class=\"dv\">24<\/span>)<span class=\"op\">,<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb12-5\" title=\"5\">        <span class=\"va\">MemoryLayout<\/span>.<span class=\"at\">ofValueBits<\/span>(<span class=\"dv\">32<\/span><span class=\"op\">,<\/span> <span class=\"va\">ByteOrder<\/span>.<span class=\"at\">nativeOrder<\/span>()).<span class=\"at\">withName<\/span>(<span class=\"st\">&quot;value&quot;<\/span>)<\/a>\n-<a class=\"sourceLine\" id=\"cb12-6\" title=\"6\">    )<\/a>\n-<a class=\"sourceLine\" id=\"cb12-7\" title=\"7\">).<span class=\"at\">withName<\/span>(<span class=\"st\">&quot;TaggedValues&quot;<\/span>)<span class=\"op\">;<\/span><\/a><\/code><\/pre><\/div>\n-<p>Here we assume that we need to insert some padding after the <code>kind<\/code> field to honor the alignment requirements of the <code>value<\/code> field <a href=\"#1\"><sup>1<\/sup><\/a>. Now, if we had to access the <code>value<\/code> field of all the elements of the array using manual offset computation, the code would quickly become pretty hard to read — on each iteration we would have to remember that the stride of the array is 8 bytes and that the offset of the <code>value<\/code> field relative to the <code>TaggedValue<\/code> struct is 4 bytes. This gives us an access expression like <code>(i * 8) + 4<\/code>, where <code>i<\/code> is the index of the element whose <code>value<\/code> field needs to be accessed.<\/p>\n-<p>With memory layouts, we can simply compute, once and for all, the memory access var handle to access the <code>value<\/code> field inside the sequence, as follows:<\/p>\n-<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb13-1\" title=\"1\">VarHandle valuesHandle = taggedValues.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>,<\/a>\n-<a class=\"sourceLine\" id=\"cb13-2\" title=\"2\">                                               PathElement.<span class=\"fu\">sequenceElement<\/span>(),<\/a>\n-<a class=\"sourceLine\" id=\"cb13-3\" title=\"3\">                                               PathElement.<span class=\"fu\">groupElement<\/span>(<span class=\"st\">&quot;value&quot;<\/span>));<\/a><\/code><\/pre><\/div>\n-<p>When using this var handle, no manual offset computation will be required: the resulting <code>valuesHandle<\/code> will feature an additional <code>long<\/code> coordinate which can be used to select the desired <code>value<\/code> field from the sequence.<\/p>\n-<h3 id=\"var-handle-combinators\">Var handle combinators<\/h3>\n-<p>The attentive reader might have noted how rich the var handles returned by the layout API are, compared to the simple memory access var handle we have seen at play <a href=\"#memory-access-handles\">here<\/a>. How do we go from a simple access var handle that takes a byte offset to a var handle that can dereference a complex layout path? The answer is, by using var handle <em>combinators<\/em>. Developers familiar with the method handle API know how simpler method handles can be combined into more complex ones using the various combinator methods in the <code>MethodHandles<\/code> API. These methods allow, for instance, to insert (or bind) arguments into a target method handle, filter return values, permute arguments and much more.<\/p>\n-<p>Sadly, none of these features are available when working with var handles. The Foreign Memory Access API rectifies this, by adding a rich set of var handle combinators in the <code>MemoryHandles<\/code> class; with these tools, developers can express var handle transformations such as:<\/p>\n-<ul>\n-<li>mapping a var handle carrier type into a different one, using an embedding\/projection method handle pairs<\/li>\n-<li>filter one or more var handle access coordinates using unary filters<\/li>\n-<li>permute var handle access coordinates<\/li>\n-<li>bind concrete access coordinates to an existing var handle<\/li>\n-<\/ul>\n-<p>Without diving too deep, let's consider how we might want to take a basic memory access handle and turn it into a var handle which dereference a segment at a specific offset (again using the <code>taggedValues<\/code> layout defined previously):<\/p>\n-<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\">VarHandle intHandle = MemoryHandles.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"bu\">ByteOrder<\/span>.<span class=\"fu\">nativeOrder<\/span>()); <span class=\"co\">\/\/ (MS, J) -&gt; I<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\"><span class=\"dt\">long<\/span> offsetOfValue = taggedValues.<span class=\"fu\">byteOffset<\/span>(PathElement.<span class=\"fu\">sequenceElement<\/span>(<span class=\"dv\">0<\/span>),<\/a>\n-<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\">                                             PathElement.<span class=\"fu\">groupElement<\/span>(<span class=\"st\">&quot;value&quot;<\/span>));<\/a>\n-<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">VarHandle valueHandle = MemoryHandles.<span class=\"fu\">insertCoordinates<\/span>(intHandle, <span class=\"dv\">0<\/span>, offsetOfValue); <span class=\"co\">\/\/ (MS) -&gt; I<\/span><\/a><\/code><\/pre><\/div>\n-<p>We have been able to derive, from a basic memory access var handle, a new var handle that dereferences a segment at a given fixed offset. It is easy to see how other, richer, var handles obtained using the layout API can be constructed manually using the var handle combinator API.<\/p>\n-<h3 id=\"segment-accessors\">Segment accessors<\/h3>\n-<p>Building complex memory access var handles using layout paths and the combinator API is useful, especially for structured access. But in simple cases, creating a <code>VarHandle<\/code> just to be able to read an int value at a given segment offset can be perceived as overkill. For this reason, the foreign memory access API provides ready-made static accessors in the <code>MemoryAccess<\/code> class, which allows to dereference a segment in various ways. For instance, if a client wants to read an int value from a segment, one of the following methods can be used:<\/p>\n-<ul>\n-<li><code>MemoryAccess::getInt(MemorySegment)<\/code> — reads an int value (4 bytes) starting at the segment's base address<\/li>\n-<li><code>MemoryAccess::getIntAtOffset(MemorySegment, long)<\/code> — reads an int value (4 bytes) starting at the address <code>A = B + O<\/code> where <code>B<\/code> is the segment's base address, and <code>O<\/code> is an offset (in bytes) supplied by the client<\/li>\n-<li><code>MemoryAccess::getIntAtIndex(MemorySegment, long)<\/code> — reads an int value (4 bytes) starting at the address <code>A = B + (4 * I)<\/code> where <code>B<\/code> is the segment's base address, and <code>I<\/code> is a logical index supplied by the client; this accessor is useful for mimicking array access.<\/li>\n-<\/ul>\n-<p>In other words, at least in simple cases, memory dereference operations can be achieved without the need of going through the <code>VarHandle<\/code> API; of course in more complex cases (structured and\/or multidimensional access, fenced access) the full power of the <code>VarHandle<\/code> API might still come in handy.<\/p>\n-<h3 id=\"interoperability\">Interoperability<\/h3>\n-<p>Memory segments are pretty flexible when it comes to interacting with existing memory sources. For instance it is possible to:<\/p>\n-<ul>\n-<li>create segment from a Java array<\/li>\n-<li>convert a segment into a Java array<\/li>\n-<li>create a segment from a byte buffer<\/li>\n-<li>convert a segment into a byte buffer<\/li>\n-<\/ul>\n-<p>For instance, thanks to bi-directional integration with the byte buffer API, it is possible for users to create a memory segment, and then de-reference it using the byte buffer API, as follows:<\/p>\n-<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb15-1\" title=\"1\">MemorySegment segment = ...<\/a>\n-<a class=\"sourceLine\" id=\"cb15-2\" title=\"2\"><span class=\"dt\">int<\/span>[] values = <span class=\"kw\">new<\/span> <span class=\"dt\">int<\/span>[<span class=\"dv\">10<\/span>];<\/a>\n-<a class=\"sourceLine\" id=\"cb15-3\" title=\"3\"><span class=\"bu\">ByteBuffer<\/span> bb = segment.<span class=\"fu\">asByteBuffer<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb15-4\" title=\"4\"><span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span> ; i &lt; values.<span class=\"fu\">length<\/span> ; i++) {<\/a>\n-<a class=\"sourceLine\" id=\"cb15-5\" title=\"5\">    values[i] = bb.<span class=\"fu\">getInt<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb15-6\" title=\"6\">}<\/a><\/code><\/pre><\/div>\n-<p>The only thing to remember is that, when a byte buffer view is created out of a memory segment, the buffer has the same temporal bound and thread-confinement guarantees as those of the segment it originated from. This means that if the segment is closed, any subsequent attempt to dereference its memory via a (previously obtained) byte buffer view will fail with an exception.<\/p>\n-<h3 id=\"unsafe-segments\">Unsafe segments<\/h3>\n-<p>It is sometimes necessary to create a segment out of an existing memory source, which might be managed by native code. This is the case, for instance, if we want to create a segment out of memory managed by a custom allocator.<\/p>\n-<p>The ByteBuffer API allows such a move, through a JNI <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/jni\/spec\/functions.html#NewDirectByteBuffer\">method<\/a>, namely <code>NewDirectByteBuffer<\/code>. This native method can be used to wrap a long address in a fresh byte buffer instance which is then returned to unsuspecting Java code.<\/p>\n-<p>Memory segments provide a similar capability - that is, given an address (which might have been obtained through some native calls), it is possible to wrap a segment around it, with given spatial, temporal and confinement bounds; a cleanup action to be executed when the segment is closed might also be specified.<\/p>\n-<p>For instance, assuming we have an address pointing at some externally managed memory block, we can construct an <em>unsafe<\/em> segment, as follows:<\/p>\n-<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb16-1\" title=\"1\">MemoryAddress addr = MemoryAddress.<span class=\"fu\">ofLong<\/span>(someLongAddr);<\/a>\n-<a class=\"sourceLine\" id=\"cb16-2\" title=\"2\">var unsafeSegment = addr.<span class=\"fu\">asSegmentRestricted<\/span>(<span class=\"dv\">10<\/span>);<\/a><\/code><\/pre><\/div>\n-<p>The above code creates a new confined unsafe segment from a given address; the size of the segment is 10 bytes; the confinement thread is the current thread, and there's no cleanup action associated with the segment (that can be changed as needed by calling <code>MemorySegment::withCleanupAction<\/code>).<\/p>\n-<p>Of course, segments created this way are completely <em>unsafe<\/em>. There is no way for the runtime to verify that the provided address indeed points to a valid memory location, or that the size of the memory region pointed to by <code>addr<\/code> is indeed 10 bytes. Similarly, there are no guarantees that the underlying memory region associated with <code>addr<\/code> will not be deallocated <em>prior<\/em> to the call to <code>MemorySegment::close<\/code>.<\/p>\n-<p>For these reasons, creating unsafe segments is a <em>restricted<\/em> operation in the Foreign Memory Access API. Restricted operations can only be performed if the running application has set a read-only runtime property — <code>foreign.restricted=permit<\/code>. Any attempt to call restricted operations without said runtime property will fail with a runtime exception.<\/p>\n-<p>We plan, in the future, to make access to restricted operations more integrated with the module system; that is, certain modules might <em>require<\/em> restricted native access; when an application which depends on said modules is executed, the user might need to provide <em>permissions<\/em> to said modules to perform restricted native operations, or the runtime will refuse to build the application's module graph.<\/p>\n-<h3 id=\"confinement\">Confinement<\/h3>\n-<p>In addition to spatial and temporal bounds, segments also feature thread-confinement. That is, a segment is <em>owned<\/em> by the thread which created it, and no other thread can access the contents on the segment, or perform certain operations (such as <code>close<\/code>) on it. Thread confinement, while restrictive, is crucial to guarantee optimal memory access performance even in a multi-threaded environment.<\/p>\n-<p>The Foreign Memory Access API provides several ways to relax the thread confinement barriers. First, threads can cooperatively share segments by performing explicit <em>handoff<\/em> operations, where a thread releases its ownership on a given segment and transfers it onto another thread. Consider the following code:<\/p>\n-<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb17-1\" title=\"1\">MemorySegment segmentA = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>); <span class=\"co\">\/\/ confined by thread A<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb17-2\" title=\"2\">...<\/a>\n-<a class=\"sourceLine\" id=\"cb17-3\" title=\"3\">var segmentB = segmentA.<span class=\"fu\">handoff<\/span>(threadB); <span class=\"co\">\/\/ confined by thread B<\/span><\/a><\/code><\/pre><\/div>\n-<p>This pattern of access is also known as <em>serial confinement<\/em> and might be useful in producer\/consumer use cases where only one thread at a time needs to access a segment. Note that, to make the handoff operation safe, the API <em>kills<\/em> the original segment (as if <code>close<\/code> was called, but without releasing the underlying memory) and returns a <em>new<\/em> segment with the correct owner. That is, handoff operations are <em>terminal operations<\/em> (like <code>MemorySegment::close<\/code>). The implementation also makes sure that all writes by the first thread are flushed into memory by the time the second thread accesses the segment.<\/p>\n-<p>When serial confinement is not enough, clients can optionally remove thread ownership, that is, turn a confined segment into a <em>shared<\/em> one which can be accessed — and closed — concurrently, by multiple threads<a href=\"#2\"><sup>2<\/sup><\/a>. As before, sharing a segment kills the original segment and returns a new segment with no owner thread:<\/p>\n-<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb18-1\" title=\"1\">MemorySegment segmentA = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>); <span class=\"co\">\/\/ confined by thread A<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb18-2\" title=\"2\">...<\/a>\n-<a class=\"sourceLine\" id=\"cb18-3\" title=\"3\">var sharedSegment = segmentA.<span class=\"fu\">share<\/span>() <span class=\"co\">\/\/ shared segment<\/span><\/a><\/code><\/pre><\/div>\n-<p>A shared segments is especially useful when multiple threads need to operate on the segment's contents in <em>parallel<\/em> (e.g. using a framework such as Fork\/Join) — by obtaining a <code>Spliterator<\/code> instance out of a memory segment. For instance to sum all the 32 bit values of a memory segment in parallel, we can use the following code:<\/p>\n-<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb19-1\" title=\"1\">SequenceLayout seq = MemoryLayout.<span class=\"fu\">ofSequence<\/span>(<span class=\"dv\">1_000_000<\/span>, MemoryLayouts.<span class=\"fu\">JAVA_INT<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb19-2\" title=\"2\">SequenceLayout seq_bulk = seq.<span class=\"fu\">reshape<\/span>(-<span class=\"dv\">1<\/span>, <span class=\"dv\">100<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb19-3\" title=\"3\">VarHandle intHandle = seq.<span class=\"fu\">varHandle<\/span>(<span class=\"dt\">int<\/span>.<span class=\"fu\">class<\/span>, <span class=\"fu\">sequenceElement<\/span>());    <\/a>\n-<a class=\"sourceLine\" id=\"cb19-4\" title=\"4\"><\/a>\n-<a class=\"sourceLine\" id=\"cb19-5\" title=\"5\"><span class=\"dt\">int<\/span> sum = StreamSupport.<span class=\"fu\">stream<\/span>(MemorySegment.<span class=\"fu\">spliterator<\/span>(segment.<span class=\"fu\">share<\/span>(), seq_bulk), <span class=\"kw\">true<\/span>)<\/a>\n-<a class=\"sourceLine\" id=\"cb19-6\" title=\"6\">                .<span class=\"fu\">mapToInt<\/span>(slice -&gt; {<\/a>\n-<a class=\"sourceLine\" id=\"cb19-7\" title=\"7\">                    <span class=\"dt\">int<\/span> res = <span class=\"dv\">0<\/span>;<\/a>\n-<a class=\"sourceLine\" id=\"cb19-8\" title=\"8\">                    <span class=\"kw\">for<\/span> (<span class=\"dt\">int<\/span> i = <span class=\"dv\">0<\/span>; i &lt; <span class=\"dv\">100<\/span> ; i++) {<\/a>\n-<a class=\"sourceLine\" id=\"cb19-9\" title=\"9\">                        res += MemoryAccess.<span class=\"fu\">getIntAtIndex<\/span>(slice, i);<\/a>\n-<a class=\"sourceLine\" id=\"cb19-10\" title=\"10\">                    }<\/a>\n-<a class=\"sourceLine\" id=\"cb19-11\" title=\"11\">                    <span class=\"kw\">return<\/span> res;<\/a>\n-<a class=\"sourceLine\" id=\"cb19-12\" title=\"12\">                }).<span class=\"fu\">sum<\/span>();<\/a><\/code><\/pre><\/div>\n-<p>The <code>MemorySegment::spliterator<\/code> takes a segment, a <em>sequence<\/em> layout and returns a spliterator instance which splits the segment into chunks which corresponds to the elements in the provided sequence layout. Here, we want to sum elements in an array which contains a million of elements; now, doing a parallel sum where each computation processes <em>exactly<\/em> one element would be inefficient, so instead we use the layout API to derive a <em>bulk<\/em> sequence layout. The bulk layout is a sequence layout which has the same size of the original layouts, but where the elements are arranged into groups of 100 elements — which should make it more amenable to parallel processing.<\/p>\n-<p>Once we have the spliterator, we can use it to construct a parallel stream and sum the contents of the segment in parallel. Since the segment operated upon by the spliterator is shared, the segment can be accessed from multiple threads concurrently; the spliterator API ensures that the access occurs in a regular fashion: a slice is created from the original segment, and given to a thread to perform some computation — thus ensuring that no two threads can ever operate concurrently on the same memory region.<\/p>\n-<p>Shared segment can also be useful to perform serial confinement in cases where the thread handing off the segment does not know which other thread will continue the work on the segment, for instance:<\/p>\n-<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb20-1\" title=\"1\"><span class=\"co\">\/\/ thread A<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb20-2\" title=\"2\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">10<\/span>); <span class=\"co\">\/\/ confined by thread A<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb20-3\" title=\"3\"><span class=\"co\">\/\/do some work<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb20-4\" title=\"4\">segment = segment.<span class=\"fu\">share<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb20-5\" title=\"5\"><\/a>\n-<a class=\"sourceLine\" id=\"cb20-6\" title=\"6\"><span class=\"co\">\/\/ thread B<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb20-7\" title=\"7\">segment.<span class=\"fu\">handoff<\/span>(<span class=\"bu\">Thread<\/span>.<span class=\"fu\">currentThread<\/span>()); <span class=\"co\">\/\/ now confined by thread B<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb20-8\" title=\"8\"><span class=\"co\">\/\/ do some more work<\/span><\/a><\/code><\/pre><\/div>\n-<p>That is, multiple threads can <em>race<\/em> to acquire a given shared segment — the API ensures that only one of them will succeed in acquiring ownership of the shared segment.<\/p>\n-<h3 id=\"implicit-deallocation\">Implicit deallocation<\/h3>\n-<p>While memory segment feature <em>deterministic deallocation<\/em> they can also be registered against a <code>Cleaner<\/code>, to make sure that the memory resources associated with a segment are released when the GC determines that the segment is no longer <em>reachable<\/em>:<\/p>\n-<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><a class=\"sourceLine\" id=\"cb21-1\" title=\"1\">MemorySegment segment = MemorySegment.<span class=\"fu\">allocateNative<\/span>(<span class=\"dv\">100<\/span>);<\/a>\n-<a class=\"sourceLine\" id=\"cb21-2\" title=\"2\">Cleaner cleaner = Cleaner.<span class=\"fu\">create<\/span>();<\/a>\n-<a class=\"sourceLine\" id=\"cb21-3\" title=\"3\">segment = segment.<span class=\"fu\">registerCleaner<\/span>(cleaner);<\/a>\n-<a class=\"sourceLine\" id=\"cb21-4\" title=\"4\"><span class=\"co\">\/\/ do some work<\/span><\/a>\n-<a class=\"sourceLine\" id=\"cb21-5\" title=\"5\">segment = <span class=\"kw\">null<\/span>; <span class=\"co\">\/\/ Cleaner might reclaim the segment memory now<\/span><\/a><\/code><\/pre><\/div>\n-<p>As for handoff, registering a segment with a cleaner <em>kills<\/em> the current segment and returns a new one which features implicit deallocation; this is also a <em>terminal operation<\/em>. Note that registering a segment with a cleaner doesn't prevent clients from calling <code>MemorySegment::close<\/code> explicitly on the returned segment; the API will guarantee that the segment's cleanup action will be called at most once — either explicitly, or implicitly (by a cleaner). Moreover, since an unreachable segment cannot (by definition) be accessed by any thread, the cleaner can always release any memory resources associated with an unreachable segment, regardless of whether it is a confined, or a shared segment.<\/p>\n-<ul>\n-<li><a id=\"1\"\/>(<sup>1<\/sup>):<small> In general, deriving a complete layout from a C <code>struct<\/code> declaration is no trivial matter, and it's one of those areas where tooling can help greatly.<\/small><\/li>\n-<li><a id=\"2\"\/>(<sup>2<\/sup>):<small> Shared segments rely on VM thread-local handshakes (JEP <a href=\"https:\/\/openjdk.java.net\/jeps\/312\">312<\/a>) to implement lock-free, safe, shared memory access; that is, when it comes to memory access, there should no difference in performance between a shared segment and a confined segment. On the other hand, <code>MemorySegment::close<\/code> might be slower on shared segments than on confined ones.<\/small><\/li>\n-<\/ul>\n+<body class='typora-export'>\n+<div id='write'  class=''><h2><a name=\"state-of-foreign-memory-support\" class=\"md-header-anchor\"><\/a><span>State of foreign memory support<\/span><\/h2><p><strong><span>March 2021<\/span><\/strong><\/p><ul><li><span>Reorganize the document, starting from simpler use cases to more advanced ones<\/span><\/li><li><span>Reorganized section on shared segments and confinement into a brand new section on deterministic deallocation<\/span><\/li><\/ul><p><strong><span>Maurizio Cimadamore<\/span><\/strong><\/p><p><span>A crucial part of any native interop story lies in the ability of accessing off-heap memory in an efficient fashion. Panama achieves this goal through the so called Foreign Memory Access API. This API has been made available as an incubating API in Java <\/span><a href='https:\/\/openjdk.java.net\/jeps\/370'><span>14<\/span><\/a><span> , <\/span><a href='https:\/\/openjdk.java.net\/jeps\/383'><span>15<\/span><\/a><span> and <\/span><a href='https:\/\/openjdk.java.net\/jeps\/393'><span>16<\/span><\/a><span> and is, to date, the most mature part of the Panama interop story.<\/span><\/p><h3><a name=\"segments\" class=\"md-header-anchor\"><\/a><span>Segments<\/span><\/h3><p><span>Memory segments are abstractions which can be used to model contiguous memory regions, located either on- or off- the Java heap. Segments can be allocated from native memory (e.g. like a <\/span><code>malloc<\/code><span>), or can be wrapped around existing memory sources (e.g. a Java array or a <\/span><code>ByteBuffer<\/code><span>). Memory segments provide <\/span><em><span>strong<\/span><\/em><span> spatial, temporal and thread-confinement guarantees which make memory dereference operation <\/span><em><span>safe<\/span><\/em><span> (more on that later), although in most simple cases some of the properties of memory segments can safely be ignored.<\/span><\/p><p><span>For instance, the following snippet allocates 100 bytes off-heap:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 507.75px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-number\">100<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>The above code allocates a 100-bytes long memory segment. The segment memory will not be <\/span><em><span>freed<\/span><\/em><span> as long as the segment instance is deemed <\/span><em><span>reachable<\/span><\/em><span>. In other words, the above factory creates a segment whose behavior closely matches that of a <\/span><code>ByteBuffer<\/code><span> allocated with the <\/span><code>allocateDirect<\/code><span> factory. Of course, the memory access API also supports deterministic memory release; we will cover that in a later section of this document.<\/span><\/p><p><span>Memory segments support <\/span><em><span>slicing<\/span><\/em><span> — that is, given a segment, it is possible to create a new segment whose spatial bounds are stricter than that of the original segment:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 490px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySement<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-number\">10<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">slice<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">segment<\/span>.<span class=\"cm-variable\">asSlice<\/span>(<span class=\"cm-number\">4<\/span>, <span class=\"cm-number\">4<\/span>);<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 46px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 46px;\"><\/div><\/div><\/div><\/pre><p><span>The above code creates a slice that starts at offset 4 and has a length of 4 bytes. Generally speaking, slices have the <\/span><em><span>same<\/span><\/em><span> temporal bounds as the parent segment (we will refine this concept later in this document). In this example, the memory associated with the parent segment will not be released as long as there is at least one <\/span><em><span>reachable<\/span><\/em><span> slice derived from that segment.<\/span><\/p><p><span>The Foreign Memory Access API provides ready-made static accessors in the <\/span><code>MemoryAccess<\/code><span> class, which allows to dereference a segment in various ways. The following example reads pair of 32-bit values (as Java ints) and uses them to construct an array of points:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 559px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><pre>x<\/pre><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">record<\/span> <span class=\"cm-def\">Point<\/span>(<span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span>, <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">y<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySement<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-number\">10<\/span> <span class=\"cm-operator\">*<\/span> <span class=\"cm-number\">4<\/span> <span class=\"cm-operator\">*<\/span> <span class=\"cm-number\">2<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">Point<\/span>[] <span class=\"cm-variable\">values<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable\">Point<\/span>[<span class=\"cm-number\">10<\/span>];<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">for<\/span> (<span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">0<\/span> ; <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">&lt;<\/span> <span class=\"cm-variable\">values<\/span>.<span class=\"cm-variable\">length<\/span> ; <span class=\"cm-variable\">i<\/span><span class=\"cm-operator\">++<\/span>) {<\/span><\/pre><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtIndex<\/span>(<span class=\"cm-variable\">segment<\/span>, <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">*<\/span> <span class=\"cm-number\">2<\/span>);<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">y<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtIndex<\/span>(<span class=\"cm-variable\">segment<\/span>, (<span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">*<\/span> <span class=\"cm-number\">2<\/span>) <span class=\"cm-operator\">+<\/span> <span class=\"cm-number\">1<\/span>);<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">values<\/span>[<span class=\"cm-variable\">i<\/span>] <span class=\"cm-operator\">=<\/span> <span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable\">Point<\/span>(<span class=\"cm-variable\">x<\/span>, <span class=\"cm-variable\">y<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 184px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 184px;\"><\/div><\/div><\/div><\/pre><p><span>The above snippet allocates a flat array of 80 bytes using <\/span><code>MemorySegment::allocateNative<\/code><span>. Then, inside the loop, elements in the array are accessed using the <\/span><code>MemoryAccess.getIntAtIndex<\/code><span> method, which accesses <\/span><code>int<\/code><span> elements in a segment at a certain <\/span><em><span>logical<\/span><\/em><span> index (in other words, the segment offset being accessed is obtained by multiplying the index by 4, which is the stride of a Java <\/span><code>int<\/code><span> array). Thus, all coordinates <\/span><code>x<\/code><span> and <\/span><code>y<\/code><span> are collected into instances of a <\/span><code>Point<\/code><span> record.<\/span><\/p><p><span>Memory segments are pretty flexible when it comes to interacting with existing memory sources and APIs. For instance it is possible to create a <\/span><code>ByteBuffer<\/code><span> <\/span><em><span>view<\/span><\/em><span> out of an existing memory segment, as follows:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 516px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">IntBuffer<\/span> <span class=\"cm-variable\">intBuffer<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">segment<\/span>.<span class=\"cm-variable\">asByteBuffer<\/span>().<span class=\"cm-variable\">asIntBuffer<\/span>();<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">Point<\/span>[] <span class=\"cm-variable\">values<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable\">Point<\/span>[<span class=\"cm-number\">10<\/span>];<\/span><\/pre><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">for<\/span> (<span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">0<\/span> ; <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">&lt;<\/span> <span class=\"cm-variable\">values<\/span>.<span class=\"cm-variable\">length<\/span> ; <span class=\"cm-variable\">i<\/span><span class=\"cm-operator\">++<\/span>) {<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">intBuffer<\/span>.<span class=\"cm-variable\">get<\/span>(<span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">*<\/span> <span class=\"cm-number\">2<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">y<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">intBuffer<\/span>.<span class=\"cm-variable\">get<\/span>((<span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">*<\/span> <span class=\"cm-number\">2<\/span>) <span class=\"cm-operator\">+<\/span> <span class=\"cm-number\">1<\/span>);<\/span><\/pre><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">values<\/span>[<span class=\"cm-variable\">i<\/span>] <span class=\"cm-operator\">=<\/span> <span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable\">Point<\/span>(<span class=\"cm-variable\">x<\/span>, <span class=\"cm-variable\">y<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 161px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 161px;\"><\/div><\/div><\/div><\/pre><p><span>Creating buffer views out of existing segment is a crucial tool enabling interoperability with existing API (especially those dealing with I\/O) which might be expressed in terms of the ByteBuffer API.<\/span><\/p><h3><a name=\"layouts-and-structured-access\" class=\"md-header-anchor\"><\/a><span>Layouts and structured access<\/span><\/h3><p><span>Expressing byte offsets (as in the example above) can lead to code that is hard to read, and very fragile — as memory layout invariants are captured, implicitly, in the constants used to scale offsets. To address this issue, we add a <\/span><em><span>memory layout<\/span><\/em><span> API which allows clients to define memory layouts <\/span><em><span>programmatically<\/span><\/em><span>. For instance, the layout of the array used in the above example can be expressed using the following code <\/span><sup class='md-footnote'><a href='#dfref-footnote-1' name='ref-footnote-1'>1<\/a><\/sup><span>:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 430.047px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemoryLayout<\/span> <span class=\"cm-variable\">points<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryLayout<\/span>.<span class=\"cm-variable\">ofSequence<\/span>(<span class=\"cm-number\">10<\/span>,<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemoryLayout<\/span>.<span class=\"cm-variable\">ofStruct<\/span>(<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MemoryLayouts<\/span>.<span class=\"cm-variable\">JAVA_INT<\/span>.<span class=\"cm-variable\">withName<\/span>(<span class=\"cm-string\">\"x\"<\/span>),<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MemoryLayouts<\/span>.<span class=\"cm-variable\">JAVA_INT<\/span>.<span class=\"cm-variable\">withName<\/span>(<span class=\"cm-string\">\"y\"<\/span>)<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    )<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">);            <\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 138px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 138px;\"><\/div><\/div><\/div><\/pre><p><span>That is, our layout is a repetition of 10 <\/span><em><span>struct<\/span><\/em><span> elements, each struct element containing two 32-bit values each. The advantage of defining a memory layout upfront, using an API, is that we can then query the layout  — for instance we can compute the offset of the <\/span><code>y<\/code><span> coordinate in the 4th element of the points array:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 844px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">long<\/span> <span class=\"cm-variable\">y3<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">points<\/span>.<span class=\"cm-variable\">byteOffset<\/span>(<span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">sequenceElement<\/span>(<span class=\"cm-number\">3<\/span>), <span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">groupElement<\/span>(<span class=\"cm-string\">\"y\"<\/span>)); <span class=\"cm-comment\">\/\/ 28<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>To specify which nested layout element should be used for the offset calculation we use a so called <\/span><em><span>layout path<\/span><\/em><span> - that is, a selection expression that navigates the layout, from the <\/span><em><span>root<\/span><\/em><span> layout, down to the leaf layout we wish to select; in this case we need to select the 4th layout element in the sequence, and then select the layout named <\/span><code>y<\/code><span> inside the selected group layout.<\/span><\/p><p><span>One of the things that can be derived from a layout is a so called <\/span><em><span>memory access var handle<\/span><\/em><span>. A memory access var handle is a special kind of var handle which takes a memory segment access coordinate, together with a byte offset — the offset, relative to the segment&#39;s base address at which the dereference operation should occur. With memory access var handles we can rewrite our example above as follows:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 861.781px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-variable\">points<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">VarHandle<\/span> <span class=\"cm-variable\">xHandle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">points<\/span>.<span class=\"cm-variable\">varHandle<\/span>(<span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">sequenceElement<\/span>(), <span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">groupElement<\/span>(<span class=\"cm-string\">\"x\"<\/span>));<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">VarHandle<\/span> <span class=\"cm-variable\">yHandle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">points<\/span>.<span class=\"cm-variable\">varHandle<\/span>(<span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">sequenceElement<\/span>(), <span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">groupElement<\/span>(<span class=\"cm-string\">\"y\"<\/span>));<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">Point<\/span>[] <span class=\"cm-variable\">values<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-keyword\">new<\/span> <span class=\"cm-variable\">Point<\/span>[<span class=\"cm-number\">10<\/span>];<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">for<\/span> (<span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">0<\/span> ; <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">&lt;<\/span> <span class=\"cm-variable\">values<\/span>.<span class=\"cm-variable\">length<\/span> ; <span class=\"cm-variable\">i<\/span><span class=\"cm-operator\">++<\/span>) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span> <span class=\"cm-operator\">=<\/span> (<span class=\"cm-variable-3\">int<\/span>)<span class=\"cm-variable\">xHandle<\/span>.<span class=\"cm-variable\">get<\/span>(<span class=\"cm-variable\">segment<\/span>, (<span class=\"cm-variable-3\">long<\/span>)<span class=\"cm-variable\">i<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">y<\/span> <span class=\"cm-operator\">=<\/span> (<span class=\"cm-variable-3\">int<\/span>)<span class=\"cm-variable\">yHandle<\/span>.<span class=\"cm-variable\">get<\/span>(<span class=\"cm-variable\">segment<\/span>, (<span class=\"cm-variable-3\">long<\/span>)<span class=\"cm-variable\">i<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 184px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 184px;\"><\/div><\/div><\/div><\/pre><p><span>In the above,  <\/span><code>xHandle<\/code><span> and <\/span><code>yHandle<\/code><span> are two var handle instances whose type is <\/span><code>int<\/code><span>  and which takes two access coordinates:<\/span><\/p><ol start='' ><li><span>a <\/span><code>MemorySegment<\/code><span> instance; the segment whose memory should be dereferenced<\/span><\/li><li><span>a <\/span><em><span>logical<\/span><\/em><span> index, which is used to select the element of the sequence we want to access (as the layout path used to construct these var handles contains one free dimension)<\/span><\/li><\/ol><p><span>Note that memory access var handles (as any other var handle) are <\/span><em><span>strongly<\/span><\/em><span> typed; and to get maximum efficiency, it is generally necessary to introduce casts to make sure that the access coordinates match the expected types — in this case we have to cast <\/span><code>i<\/code><span> into a <\/span><code>long<\/code><span>; similarly, since the signature polymorphic method <\/span><code>VarHandle::get<\/code><span> notionally returns <\/span><code>Object<\/code><span> a cast is necessary to force the right return type the var handle operation <\/span><sup class='md-footnote'><a href='#dfref-footnote-2' name='ref-footnote-2'>2<\/a><\/sup><span>.<\/span><\/p><p><span>In other words, manual offset computation is no longer needed — offsets and strides can in fact be derived from the layout object; note how <\/span><code>yHandle<\/code><span> is able to compute the required offset of the <\/span><code>y<\/code><span> coordinate in the flat array without the need of any error-prone arithmetic computation.<\/span><\/p><h3><a name=\"deterministic-deallocation\" class=\"md-header-anchor\"><\/a><span>Deterministic deallocation<\/span><\/h3><p><span>In addition to spatial bounds, memory segments also feature temporal bounds as well as thread-confinement. In the examples shown so far, we have always used the API in its simpler form, leaving the runtime to handle details such as whether it was safe or not to reclaim memory associated with a given memory segment. But there are cases where this behavior is not desirable: consider the case where a large memory segment is mapped from a file (this is possible using <\/span><code>MemorySegment::map<\/code><span>); in this case, an application would probably prefer to deterministically release (e.g. unmap) the memory associated with this segment, to ensure that memory doesn&#39;t remain available for longer than in needs to (and therefore potentially impacting the performance of the application).<\/span><\/p><p><span>Memory segments support deterministic deallocation, through an abstraction called <\/span><code>ResourceScope<\/code><span>. A resource scope models the lifecycle associated with one or more resources (in this document, by resources we mean mostly memory segments); a resource scope has a state: it starts off in the <\/span><em><span>alive<\/span><\/em><span> state, which means that all the resources it manages can be safely accessed - and, at the user request, it can be <\/span><em><span>closed<\/span><\/em><span>. After a resource scope is closed, access to resources managed by that scope is no longer allowed. Resource scope support the <\/span><code>AutoCloseable<\/code><span> interface, which means that user can use resource scopes with the <\/span><em><span>try-with-resources<\/span><\/em><span> construct, as demonstrated in the following code:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 939px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">mapped<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">map<\/span>(<span class=\"cm-variable\">Path<\/span>.<span class=\"cm-variable\">of<\/span>(<span class=\"cm-string\">\"someFile\"<\/span>), <span class=\"cm-number\">0<\/span>, <span class=\"cm-number\">100000<\/span>, <span class=\"cm-variable\">MapMode<\/span>.<span class=\"cm-variable\">READ_WRITE<\/span>, <span class=\"cm-variable\">scope<\/span>);    <\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">} <span class=\"cm-comment\">\/\/ segment is unmapped here<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 69px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 69px;\"><\/div><\/div><\/div><\/pre><p><span>Here, we create a new <\/span><em><span>confined<\/span><\/em><span> resource scope, which is then used when creating a mapped segment; this means that the lifecycle of the <\/span><code>mapped<\/code><span> segment will be tied to that of the resource scope, and that accessing the segment (e.g. dereference) <\/span><em><span>after<\/span><\/em><span> <\/span><code>scope<\/code><span> has been closed will not be possible.<\/span><\/p><p><span>As this example alludes to, resource scopes can come in many flavors: they can be <\/span><em><span>confined<\/span><\/em><span> (where access is restricted to the thread which created the scope), <\/span><em><span>shared<\/span><\/em><span> <\/span><sup class='md-footnote'><a href='#dfref-footnote-3' name='ref-footnote-3'>3<\/a><\/sup><span> (where access can occur in any thread) and can be optionally associated with a <\/span><code>Cleaner<\/code><span> object, which would take care of performing implicit deallocation, in case the resource scope becomes <\/span><em><span>unreachable<\/span><\/em><span> and the <\/span><code>close<\/code><span> method has not been called by the user. In fact, all the memory segments we have seen previously were associated with the so called <\/span><em><span>default<\/span><\/em><span> scope: a shared scope which does not support deterministic deallocation (e.g. calling <\/span><code>close<\/code><span> will fail), and whose resources are managed by a <\/span><code>Cleaner<\/code><span>.<\/span><\/p><p><span>Resource scopes are very handy when managing the lifecycle of multiple resources:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 611px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofConfined<\/span>()) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment1<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-number\">100<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment2<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-number\">100<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    ...<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segmentN<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-number\">100<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">} <span class=\"cm-comment\">\/\/ all segments are deallocated here<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 138px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 138px;\"><\/div><\/div><\/div><\/pre><p><span>Here we create another confined scope, and then, inside the <\/span><em><span>try-with-resources<\/span><\/em><span> we use the scope to create many segments; all such segments share the <\/span><em><span>same<\/span><\/em><span> resource scope - meaning that when such scope is closed, the memory associated with all these segments will be reclaimed at once.<\/span><\/p><p><span>Dealing with shared access <\/span><em><span>and<\/span><\/em><span> deterministic deallocation at the same time is tricky, and poses new problems for the user code; consider the case where a method receives a segment and has to write two values in that segment (e.g. two point coordinates):<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 473px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">void<\/span> <span class=\"cm-def\">writePoint<\/span>(<span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span>, <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span>, <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">y<\/span>) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">setIntAtIndex<\/span>(<span class=\"cm-variable\">segment<\/span>, <span class=\"cm-number\">0<\/span>, <span class=\"cm-variable\">x<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">setIntAtIndex<\/span>(<span class=\"cm-variable\">segment<\/span>, <span class=\"cm-number\">1<\/span>, <span class=\"cm-variable\">y<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 92px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 92px;\"><\/div><\/div><\/div><\/pre><p><span>If the segment is associated with a confined scope, no problem arises: the thread that created the segment is the same thread that performs the dereference - as such, when <\/span><code>writePoint<\/code><span> is called, the segment&#39;s scope is either alive (and will remain so for the duration of the call), or already closed (in which case some exception will be thrown, and no value will be written).<\/span><\/p><p><span>But, if the segment is associated with a shared scope, there is a new problem we are faced with: the segment might be closed (concurrently) in between the two accesses! This means that, the method ends up writing only one value instead of two; in other words, the behavior of the method is no longer atomic. Note that this cannot happen in the case where the scope is shared but associated with the <\/span><em><span>default scope<\/span><\/em><span> - as that scope does not support explicit deallocation.<\/span><\/p><p><span>To avoid this problem, clients can acquire a so called resource scope <\/span><em><span>handle<\/span><\/em><span>. A resource scope handle effectively prevents a scope to be closed, until said handle is released by the application. Let&#39;s illustrate how that works in practice:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 507.734px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">void<\/span> <span class=\"cm-def\">writePointSafe<\/span>(<span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span>, <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">x<\/span>, <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">y<\/span>) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">var<\/span> <span class=\"cm-variable\">handle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">segment<\/span>.<span class=\"cm-variable\">scope<\/span>().<span class=\"cm-variable\">acquire<\/span>()) {<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">setIntAtIndex<\/span>(<span class=\"cm-variable\">segment<\/span>, <span class=\"cm-number\">0<\/span>, <span class=\"cm-variable\">x<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">        <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">setIntAtIndex<\/span>(<span class=\"cm-variable\">segment<\/span>, <span class=\"cm-number\">1<\/span>, <span class=\"cm-variable\">y<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    } <span class=\"cm-comment\">\/\/ handle released here<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 138px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 138px;\"><\/div><\/div><\/div><\/pre><p><span>A resource scope handle acts as a more restricted version <\/span><sup class='md-footnote'><a href='#dfref-footnote-4' name='ref-footnote-4'>4<\/a><\/sup><span> of an <\/span><em><span>atomic reference count<\/span><\/em><span>; each time a scope is acquired, its <\/span><em><span>acquired count<\/span><\/em><span> goes up; conversely the count goes down each time an handle associated with that scope is released. A scope can only be closed if its acquired count is exactly zero - meaning that no other client is attempting to access that (shared) segment. In our example above, the semantics of resource scope handles guarantees that the method will be able to either acquire the handle successfully, and write both values, or fail to acquire the handle, and write no value.<\/span><\/p><h3><a name=\"parallel-processing\" class=\"md-header-anchor\"><\/a><span>Parallel processing<\/span><\/h3><p><span>The contents of a memory segment can be processed in <\/span><em><span>parallel<\/span><\/em><span> (e.g. using a framework such as Fork\/Join) — by obtaining a <\/span><code>Spliterator<\/code><span> instance out of a memory segment. For instance to sum all the 32 bit values of a memory segment in parallel, we can use the following code:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded md-focus\" lang=\"java\"><div class=\"CodeMirror cm-s-inner CodeMirror-focused\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 115px; left: 207px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 714.953px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><pre>x<\/pre><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">SequenceLayout<\/span> <span class=\"cm-variable\">seq<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryLayout<\/span>.<span class=\"cm-variable\">ofSequence<\/span>(<span class=\"cm-number\">1_000_000<\/span>, <span class=\"cm-variable\">MemoryLayouts<\/span>.<span class=\"cm-variable\">JAVA_INT<\/span>);<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">MemorySegment<\/span> <span class=\"cm-variable\">segment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">allocateNative<\/span>(<span class=\"cm-variable\">seq<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">SequenceLayout<\/span> <span class=\"cm-variable\">seq_bulk<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">seq<\/span>.<span class=\"cm-variable\">reshape<\/span>(<span class=\"cm-operator\">-<\/span><span class=\"cm-number\">1<\/span>, <span class=\"cm-number\">100<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span cm-text=\"\">​<\/span><\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">sum<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">StreamSupport<\/span>.<span class=\"cm-variable\">stream<\/span>(<span class=\"cm-variable\">MemorySegment<\/span>.<span class=\"cm-variable\">spliterator<\/span>(<span class=\"cm-variable\">segment<\/span>, <span class=\"cm-variable\">seq_bulk<\/span>), <span class=\"cm-atom\">true<\/span>)<\/span><\/pre><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                       .<span class=\"cm-variable\">mapToInt<\/span>(<span class=\"cm-variable\">slice<\/span> <span class=\"cm-operator\">-&gt;<\/span> {<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                           <span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">res<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">0<\/span>;<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                           <span class=\"cm-keyword\">for<\/span> (<span class=\"cm-variable-3\">int<\/span> <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-number\">0<\/span>; <span class=\"cm-variable\">i<\/span> <span class=\"cm-operator\">&lt;<\/span> <span class=\"cm-number\">100<\/span> ; <span class=\"cm-variable\">i<\/span><span class=\"cm-operator\">++<\/span>) {<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                               <span class=\"cm-variable\">res<\/span> <span class=\"cm-operator\">+=<\/span> <span class=\"cm-variable\">MemoryAccess<\/span>.<span class=\"cm-variable\">getIntAtIndex<\/span>(<span class=\"cm-variable\">slice<\/span>, <span class=\"cm-variable\">i<\/span>);<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                           }<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                           <span class=\"cm-keyword\">return<\/span> <span class=\"cm-variable\">res<\/span>;<\/span><\/pre><\/div><div class=\"\" style=\"position: relative;\"><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">                       }).<span class=\"cm-variable\">sum<\/span>();<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 276px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 276px;\"><\/div><\/div><\/div><\/pre><p><span>The <\/span><code>MemorySegment::spliterator<\/code><span> takes a segment, a <\/span><em><span>sequence<\/span><\/em><span> layout and returns a spliterator instance which splits the segment into chunks which corresponds to the elements in the provided sequence layout. Here, we want to sum elements in an array which contains a million of elements; now, doing a parallel sum where each computation processes <\/span><em><span>exactly<\/span><\/em><span> one element would be inefficient, so instead we use the layout API to derive a <\/span><em><span>bulk<\/span><\/em><span> sequence layout. The bulk layout is a sequence layout which has the same size of the original layouts, but where the elements are arranged into groups of 100 elements — which should make it more amenable to parallel processing.<\/span><\/p><p><span>Once we have the spliterator, we can use it to construct a parallel stream and sum the contents of the segment in parallel. Since the segment operated upon by the spliterator is shared, the segment can be accessed from multiple threads concurrently; the spliterator API ensures that the access occurs in a regular fashion: a slice is created from the original segment, and given to a thread to perform some computation — thus ensuring that no two threads can ever operate concurrently on the same memory region.<\/span><\/p><h3><a name=\"combining-memory-access-handles\" class=\"md-header-anchor\"><\/a><span>Combining memory access handles<\/span><\/h3><p><span>We have seen in the previous sections how memory access var handle dramatically simplify user code when structured access is involved. While deriving memory access var handles from layout is the most convenient option, the Foreign Memory Access API also allows to create such memory access var handles in a standalone fashion, as demonstrated in the following code:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 740.891px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">VarHandle<\/span> <span class=\"cm-variable\">intHandle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryHandles<\/span>.<span class=\"cm-variable\">varHandle<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">ByteOrder<\/span>.<span class=\"cm-variable\">nativeOrder<\/span>())    <\/span><\/pre><\/div><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 23px;\"><\/div><\/div><\/div><\/pre><p><span>The above code creates a memory access var handle which reads\/writes <\/span><code>int<\/code><span> values at a certain byte offset in a segment. To create this var handle we have to specify a carrier type — the type we want to use e.g. to extract values from memory, as well as to whether any byte swapping should be applied when contents are read from or stored to memory. Additionally, the user can supply an extra alignment parameter (not shown here) — this can be useful to impose additional constraints on how memory dereferences should occur; for instance, a client might want to prevent access to misaligned 32 bit values. Of course, when deriving memory access var handles from layouts, all the above information can more simply inferred from the selected layout.<\/span><\/p><p><span>The attentive reader might have noted how rich the var handles returned by the layout API are, compared to the simple memory access var handle we have constructed above. How do we go from a simple access var handle that takes a byte offset to a var handle that can dereference a complex layout path? The answer is, by using var handle <\/span><em><span>combinators<\/span><\/em><span>. Developers familiar with the method handle API know how simpler method handles can be combined into more complex ones using the various combinator methods in the <\/span><code>MethodHandles<\/code><span> API. These methods allow, for instance, to insert (or bind) arguments into a target method handle, filter return values, permute arguments and much more.<\/span><\/p><p><span>Sadly, none of these features are available when working with var handles. The Foreign Memory Access API rectifies this, by adding a rich set of var handle combinators in the <\/span><code>MemoryHandles<\/code><span> class; with these tools, developers can express var handle transformations such as:<\/span><\/p><ul><li><span>mapping a var handle carrier type into a different one, using an embedding\/projection method handle pairs<\/span><\/li><li><span>filter one or more var handle access coordinates using unary filters<\/span><\/li><li><span>permute var handle access coordinates<\/span><\/li><li><span>bind concrete access coordinates to an existing var handle<\/span><\/li><\/ul><p><span>Without diving too deep, let&#39;s consider how we might want to take a basic memory access handle and turn it into a var handle which dereference a segment at a specific offset (again using the <\/span><code>points<\/code><span> layout defined previously):<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 853px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">VarHandle<\/span> <span class=\"cm-variable\">intHandle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryHandles<\/span>.<span class=\"cm-variable\">varHandle<\/span>(<span class=\"cm-variable-3\">int<\/span>.<span class=\"cm-keyword\">class<\/span>, <span class=\"cm-variable\">ByteOrder<\/span>.<span class=\"cm-variable\">nativeOrder<\/span>()); <span class=\"cm-comment\">\/\/ (MS, J) -&gt; I<\/span><\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable-3\">long<\/span> <span class=\"cm-variable\">offsetOfY<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">points<\/span>.<span class=\"cm-variable\">byteOffset<\/span>(<span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">sequenceElement<\/span>(<span class=\"cm-number\">3<\/span>), <span class=\"cm-variable\">PathElement<\/span>.<span class=\"cm-variable\">groupElement<\/span>(<span class=\"cm-string\">\"y\"<\/span>));<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-variable\">VarHandle<\/span> <span class=\"cm-variable\">valueHandle<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryHandles<\/span>.<span class=\"cm-variable\">insertCoordinates<\/span>(<span class=\"cm-variable\">intHandle<\/span>, <span class=\"cm-number\">1<\/span>, <span class=\"cm-variable\">offsetOfValue<\/span>); <span class=\"cm-comment\">\/\/ (MS) -&gt; I<\/span><\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 69px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 69px;\"><\/div><\/div><\/div><\/pre><p><span>We have been able to derive, from a basic memory access var handle, a new var handle that dereferences a segment at a given fixed offset. It is easy to see how other, richer, var handles obtained using the layout API can be constructed manually using the var handle combinator API.<\/span><\/p><h3><a name=\"unsafe-segments\" class=\"md-header-anchor\"><\/a><span>Unsafe segments<\/span><\/h3><p><span>The memory access API provides basic safety guarantees for all memory segments created using the API. More specifically, dereferencing memory should either succeed, or result in a runtime exception - but, crucially, should never result in a VM crash, or, more subtly, in memory corruption occurring <\/span><em><span>outside<\/span><\/em><span> the region of memory associated with a memory segment. This is possible, since all segments have immutable <\/span><em><span>spatial bounds<\/span><\/em><span>, and, as we have seen, are associated with a resource scope which make sure that the segment cannot be dereferenced after the scope has been closed, or, in case of a confined scope, that the segment is dereferenced from the very same thread which created the scope.<\/span><\/p><p><span>That said, it is sometimes necessary to create a segment out of an existing memory source, which might be managed by native code. This is the case, for instance, if we want to create a segment out of memory managed by a custom allocator.<\/span><\/p><p><span>The ByteBuffer API allows such a move, through a JNI <\/span><a href='https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/jni\/spec\/functions.html#NewDirectByteBuffer'><span>method<\/span><\/a><span>, namely <\/span><code>NewDirectByteBuffer<\/code><span>. This native method can be used to wrap a long address in a fresh byte buffer instance which is then returned to unsuspecting Java code.<\/span><\/p><p><span>Memory segments provide a similar capability - that is, given an address (which might have been obtained through some native calls), it is possible to wrap a segment around it, with given spatial bounds and resource scope; a cleanup action to be executed when the segment is closed might also be specified.<\/span><\/p><p><span>For instance, assuming we have an address pointing at some externally managed memory block, we can construct an <\/span><em><span>unsafe<\/span><\/em><span> segment, as follows:<\/span><\/p><pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"java\"><div class=\"CodeMirror cm-s-inner\" lang=\"java\"><div style=\"overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;\"><textarea autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" tabindex=\"0\" style=\"position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;\"><\/textarea><\/div><div class=\"CodeMirror-scrollbar-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-gutter-filler\" cm-not-content=\"true\"><\/div><div class=\"CodeMirror-scroll\" tabindex=\"-1\"><div class=\"CodeMirror-sizer\" style=\"margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; min-width: 525px; padding-right: 0px; padding-bottom: 0px;\"><div style=\"position: relative; top: 0px;\"><div class=\"CodeMirror-lines\" role=\"presentation\"><div role=\"presentation\" style=\"position: relative; outline: none;\"><div class=\"CodeMirror-measure\"><\/div><div class=\"CodeMirror-measure\"><\/div><div style=\"position: relative; z-index: 1;\"><\/div><div class=\"CodeMirror-code\" role=\"presentation\" style=\"\"><div class=\"CodeMirror-activeline\" style=\"position: relative;\"><div class=\"CodeMirror-activeline-background CodeMirror-linebackground\"><\/div><div class=\"CodeMirror-gutter-background CodeMirror-activeline-gutter\" style=\"left: 0px; width: 0px;\"><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\"><span class=\"cm-keyword\">try<\/span> (<span class=\"cm-variable\">ResourceScope<\/span> <span class=\"cm-variable\">scope<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">ResourceScope<\/span>.<span class=\"cm-variable\">ofShared<\/span>()) {<\/span><\/pre><\/div><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">MemoryAddress<\/span> <span class=\"cm-variable\">addr<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">MemoryAddress<\/span>.<span class=\"cm-variable\">ofLong<\/span>(<span class=\"cm-variable\">someLongAddr<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    <span class=\"cm-variable\">var<\/span> <span class=\"cm-variable\">unsafeSegment<\/span> <span class=\"cm-operator\">=<\/span> <span class=\"cm-variable\">addr<\/span>.<span class=\"cm-variable\">asSegmentRestricted<\/span>(<span class=\"cm-number\">10<\/span>, <span class=\"cm-variable\">scope<\/span>);<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">    ...<\/span><\/pre><pre class=\" CodeMirror-line \" role=\"presentation\"><span role=\"presentation\" style=\"padding-right: 0.1px;\">}<\/span><\/pre><\/div><\/div><\/div><\/div><\/div><div style=\"position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 115px;\"><\/div><div class=\"CodeMirror-gutters\" style=\"display: none; height: 115px;\"><\/div><\/div><\/div><\/pre><p><span>The above code creates a shared scope and then, inside the <\/span><em><span>try-with-resources<\/span><\/em><span> it creates a <\/span><em><span>new<\/span><\/em><span> unsafe segment from a given address; the size of the segment is 10 bytes, and the unsafe segment is associated with the current shared scope. This means that the unsafe segment cannot be dereferenced after the shared scope has been closed.<\/span><\/p><p><span>Of course, segments created this way are completely <\/span><em><span>unsafe<\/span><\/em><span>. There is no way for the runtime to verify that the provided address indeed points to a valid memory location, or that the size of the memory region pointed to by <\/span><code>addr<\/code><span> is indeed 10 bytes. Similarly, there are no guarantees that the underlying memory region associated with <\/span><code>addr<\/code><span> will not be deallocated <\/span><em><span>prior<\/span><\/em><span> to the call to <\/span><code>ResourceScope::close<\/code><span>.<\/span><\/p><p><span>For these reasons, creating unsafe segments is a <\/span><em><span>restricted<\/span><\/em><span> operation in the Foreign Memory Access API. Restricted operations can only be performed if the running application has set a read-only runtime property — <\/span><code>foreign.restricted=permit<\/code><span>. Any attempt to call restricted operations without said runtime property will fail with a runtime exception.<\/span><\/p><p><span>We plan, in the future, to make access to restricted operations more integrated with the module system; that is, certain modules might <\/span><em><span>require<\/span><\/em><span> restricted native access; when an application which depends on said modules is executed, the user might need to provide <\/span><em><span>permissions<\/span><\/em><span> to said modules to perform restricted native operations, or the runtime will refuse to build the application&#39;s module graph.<\/span><\/p><p>&nbsp;<\/p><div class='footnotes-area'  ><hr\/>\n+<div class='footnote-line'><span class='md-fn-count'>1<\/span> <span>In general, deriving a complete layout from a C <\/span><code>struct<\/code><span> declaration is no trivial matter, and it&#39;s one of those areas where tooling can help greatly.<\/span> <a name='dfref-footnote-1' href='#ref-footnote-1' title='back to document' class='reversefootnote' >↩<\/a><\/div>\n+<div class='footnote-line'><span class='md-fn-count'>2<\/span> <span>Clients can enforce stricter type checking when interacting with <\/span><code>VarHandle<\/code><span> instances, by obtaining an <\/span><em><span>exact<\/span><\/em><span> var handle, using the <\/span><code>VarHandle::withInvokeExactBehavior<\/code><span> method.<\/span> <a name='dfref-footnote-2' href='#ref-footnote-2' title='back to document' class='reversefootnote' >↩<\/a><\/div>\n+<div class='footnote-line'><span class='md-fn-count'>3<\/span> <span>Shared segments rely on VM thread-local handshakes (JEP <\/span><a href='https:\/\/openjdk.java.net\/jeps\/312'><span>312<\/span><\/a><span>) to implement lock-free, safe, shared memory access; that is, when it comes to memory access, there should no difference in performance between a shared segment and a confined segment. On the other hand, <\/span><code>MemorySegment::close<\/code><span> might be slower on shared segments than on confined ones.<\/span> <a name='dfref-footnote-3' href='#ref-footnote-3' title='back to document' class='reversefootnote' >↩<\/a><\/div>\n+<div class='footnote-line'><span class='md-fn-count'>4<\/span> <span>The main difference between reference counting and the mechanism proposed here is that reference counting is <\/span><em><span>symmetric<\/span><\/em><span> - meaning that any client is able to both increment and decrement the reference count at will. The resource scope handle mechanism is <\/span><em><span>asymmetric<\/span><\/em><span>, since only the client acquiring a handle has the capability to release that handle. This avoids situation where a client might be tempted to e.g. decrement the reference count multiple times in order to perform some task which would otherwise be forbidden. <\/span> <a name='dfref-footnote-4' href='#ref-footnote-4' title='back to document' class='reversefootnote' >↩<\/a><\/div><\/div><\/div>\n@@ -284,1 +630,1 @@\n-<\/html>\n+<\/html>\n\\ No newline at end of file\n","filename":"doc\/panama_memaccess.html","additions":625,"deletions":279,"binary":false,"changes":904,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-**October 2020**\n+**March 2021**\n@@ -5,4 +5,2 @@\n-* Reflect latest API changes in handoff\/implicit deallocation\n-* Updated section on restricted segments reflecting new, simpler API\n-* Revamped section on confinement to add description of shared segments\n-* Added section on implicit deallocation\n+* Reorganize the document, starting from simpler use cases to more advanced ones\n+* Reorganized section on shared segments and confinement into a brand new section on deterministic deallocation\n@@ -12,1 +10,1 @@\n-A crucial part of any native interop story lies in the ability of accessing off-heap memory in an efficient fashion. Panama achieves this goal through the so called Foreign Memory Access API. This API has been made available as an incubating API in Java [14](https:\/\/openjdk.java.net\/jeps\/370) ad [15](https:\/\/openjdk.java.net\/jeps\/383), and is, to date, the most mature part of the Panama interop story.\n+A crucial part of any native interop story lies in the ability of accessing off-heap memory in an efficient fashion. Panama achieves this goal through the so called Foreign Memory Access API. This API has been made available as an incubating API in Java [14](https:\/\/openjdk.java.net\/jeps\/370) , [15](https:\/\/openjdk.java.net\/jeps\/383) and [16](https:\/\/openjdk.java.net\/jeps\/393) and is, to date, the most mature part of the Panama interop story.\n@@ -16,5 +14,1 @@\n-Memory segments are abstractions which can be used to model memory regions, located either on- or off- the Java heap. Segments can be allocated from native memory (e.g. like a `malloc`), or can be wrapped around existing memory sources (e.g. a Java array or a `ByteBuffer`). Memory segments provide *strong* guarantees which make memory dereference operation *safe*. More specifically, each segment provides:\n-\n-* *spatial bounds* - that is, a segment has a base address and a size, and accessing a segment outside those boundaries is forbidden\n-* *temporal bounds* - that is, a segment has a _state_ - meaning that it can be used and then _closed_ when the memory backing the segment is no longer needed (note, this might trigger deallocation of said memory)\n-* *thread-confinement*  - that is, a segment is a view over a memory region that is *owned* by the thread which created it. Attempting to dereference  or close a segment outside the confinement thread is forbidden (this is crucial to avoid access vs. close races in multi-threaded scenario)\n+Memory segments are abstractions which can be used to model contiguous memory regions, located either on- or off- the Java heap. Segments can be allocated from native memory (e.g. like a `malloc`), or can be wrapped around existing memory sources (e.g. a Java array or a `ByteBuffer`). Memory segments provide *strong* spatial, temporal and thread-confinement guarantees which make memory dereference operation *safe* (more on that later), although in most simple cases some of the properties of memory segments can safely be ignored.\n@@ -25,3 +19,1 @@\n-try (MemorySegment segment = MemorySegment.allocateNative(100)) {\n-    ...\n-} \/\/ frees memory\n+MemorySegment segment = MemorySegment.allocateNative(100);\n@@ -30,1 +22,1 @@\n-Since segments are `AutoCloseable` they can be used inside a *try-with-resources* statement, which helps ensure that memory will be released when the segment is no longer needed.\n+The above code allocates a 100-bytes long memory segment. The segment memory will not be *freed* as long as the segment instance is deemed *reachable*. In other words, the above factory creates a segment whose behavior closely matches that of a `ByteBuffer` allocated with the `allocateDirect` factory. Of course, the memory access API also supports deterministic memory release; we will cover that in a later section of this document.\n@@ -39,1 +31,3 @@\n-The above code creates a slice that starts at offset 4 and has a length of 4 bytes. Slices have the *same* temporal bounds as the parent segment - this means that when the parent segment is closed, all the slices derived from it are also closed. The opposite is also true, closing a slice closes the parent segment (and all the other slices derived from it). If a library wants to share a slice, but prevent a client from closing it (could be useful e.g. when implementing a slab allocator), the library could prevent a client from closing the slice by creating a *non-closeable* view:\n+The above code creates a slice that starts at offset 4 and has a length of 4 bytes. Generally speaking, slices have the *same* temporal bounds as the parent segment (we will refine this concept later in this document). In this example, the memory associated with the parent segment will not be released as long as there is at least one *reachable* slice derived from that segment.\n+\n+The Foreign Memory Access API provides ready-made static accessors in the `MemoryAccess` class, which allows to dereference a segment in various ways. The following example reads pair of 32-bit values (as Java ints) and uses them to construct an array of points:\n@@ -42,1 +36,8 @@\n-MemorySegment sharedSlice = slice.withAccessModes(ALL_ACCESS & ~CLOSE);\n+record Point(int x, int y);\n+MemorySegment segment = MemorySement.allocateNative(10 * 4 * 2);\n+Point[] values = new Point[10];\n+for (int i = 0 ; i < values.length ; i++) {\n+    int x = MemoryAccess.getIntAtIndex(segment, i * 2);\n+    int y = MemoryAccess.getIntAtIndex(segment, (i * 2) + 1);\n+    values[i] = new Point(x, y);\n+}\n@@ -45,1 +46,13 @@\n-Any attempt to call `close` on `sharedSlice` will be met with an exception. Memory segments support various access modes (including those for read\/write access) which can be used to constrain the set of operations available to clients.\n+The above snippet allocates a flat array of 80 bytes using `MemorySegment::allocateNative`. Then, inside the loop, elements in the array are accessed using the `MemoryAccess.getIntAtIndex` method, which accesses `int` elements in a segment at a certain *logical* index (in other words, the segment offset being accessed is obtained by multiplying the index by 4, which is the stride of a Java `int` array). Thus, all coordinates `x` and `y` are collected into instances of a `Point` record.\n+\n+Memory segments are pretty flexible when it comes to interacting with existing memory sources and APIs. For instance it is possible to create a `ByteBuffer` *view* out of an existing memory segment, as follows:\n+\n+```java\n+IntBuffer intBuffer = segment.asByteBuffer().asIntBuffer();\n+Point[] values = new Point[10];\n+for (int i = 0 ; i < values.length ; i++) {\n+    int x = intBuffer.get(i * 2);\n+    int y = intBuffer.get((i * 2) + 1);\n+    values[i] = new Point(x, y);\n+}\n+```\n@@ -47,1 +60,1 @@\n-### Memory access handles\n+Creating buffer views out of existing segment is a crucial tool enabling interoperability with existing API (especially those dealing with I\/O) which might be expressed in terms of the ByteBuffer API.\n@@ -49,1 +62,3 @@\n-Dereferencing memory associated with segments is made possible by using *memory access var handles*. A memory access var handle is a special kind of var handle which takes a memory segment access coordinate, together with a byte offset — the offset, relative to the segment's base address at which the dereference operation should occur. A memory access var handle can be obtained as follows:\n+### Layouts and structured access\n+\n+Expressing byte offsets (as in the example above) can lead to code that is hard to read, and very fragile — as memory layout invariants are captured, implicitly, in the constants used to scale offsets. To address this issue, we add a *memory layout* API which allows clients to define memory layouts *programmatically*. For instance, the layout of the array used in the above example can be expressed using the following code <a href=\"#1\"><sup>1<\/sup><\/a>:\n@@ -52,1 +67,6 @@\n-VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder())    \n+MemoryLayout points = MemoryLayout.ofSequence(10,\n+    MemoryLayout.ofStruct(\n+        MemoryLayouts.JAVA_INT.withName(\"x\"),\n+        MemoryLayouts.JAVA_INT.withName(\"y\")\n+    )\n+);            \n@@ -55,1 +75,1 @@\n-To create a dereference handle we have to specify a carrier type — the type we want to use e.g. to extract values from memory, as well as to whether any byte swapping should be applied when contents are read from or stored to memory. Additionally, the user can supply an extra alignment parameter (not shown here) — this can be useful to impose additional constraints on how memory dereferences should occur; for instance, a client might want to prevent access to misaligned 32 bit values.\n+That is, our layout is a repetition of 10 *struct* elements, each struct element containing two 32-bit values each. The advantage of defining a memory layout upfront, using an API, is that we can then query the layout  — for instance we can compute the offset of the `y` coordinate in the 4th element of the points array:\n@@ -57,1 +77,7 @@\n-For instance, to read 10 int values from a segment, we can write the following code:\n+```java\n+long y3 = points.byteOffset(PathElement.sequenceElement(3), PathElement.groupElement(\"y\")); \/\/ 28\n+```\n+\n+To specify which nested layout element should be used for the offset calculation we use a so called *layout path* - that is, a selection expression that navigates the layout, from the *root* layout, down to the leaf layout we wish to select; in this case we need to select the 4th layout element in the sequence, and then select the layout named `y` inside the selected group layout.\n+\n+One of the things that can be derived from a layout is a so called *memory access var handle*. A memory access var handle is a special kind of var handle which takes a memory segment access coordinate, together with a byte offset — the offset, relative to the segment's base address at which the dereference operation should occur. With memory access var handles we can rewrite our example above as follows:\n@@ -60,2 +86,4 @@\n-MemorySegment segment = ...\n-int[] values = new int[10];\n+MemorySegment segment = MemorySegment.allocateNative(points);\n+VarHandle xHandle = points.varHandle(PathElement.sequenceElement(), PathElement.groupElement(\"x\"));\n+VarHandle yHandle = points.varHandle(PathElement.sequenceElement(), PathElement.groupElement(\"y\"));\n+Point[] values = new Point[10];\n@@ -63,1 +91,2 @@\n-    values[i] = (int)intHandle.get(segment, (long)i * 4);\n+    int x = (int)xHandle.get(segment, (long)i);\n+    int y = (int)yHandle.get(segment, (long)i);\n@@ -67,3 +96,1 @@\n-Memory access var handles (as any other var handle) are *strongly* typed; and to get maximum efficiency, it is generally necessary to introduce casts to make sure that the access coordinates match the expected types — in this case we have to cast `i * 4` into a long; similarly, since the signature polymorphic method `VarHandle::get` notionally returns `Object` a cast is necessary to force the right return type the var handle operation.\n-\n-Note that, since the offset of the dereference operation is expressed in bytes, we have to manually compute the starting offset, by multiplying the logical index `i` by `4` — the size (in bytes) of a Java int value; this is not dissimilar to what happens with the `ByteBuffer` absolute get\/put methods. We shall see later how memory layouts help us achieving higher level, structured access.\n+In the above,  `xHandle` and `yHandle` are two var handle instances whose type is `int`  and which takes two access coordinates:\n@@ -71,1 +98,2 @@\n-### Safety\n+1. a `MemorySegment` instance; the segment whose memory should be dereferenced\n+2. a *logical* index, which is used to select the element of the sequence we want to access (as the layout path used to construct these var handles contains one free dimension)\n@@ -73,1 +101,1 @@\n-The memory access API provides basic safety guarantees for memory dereference operations. More specifically, dereferencing memory should either succeed, or result in a runtime exception - but, crucially, should never result in a VM crash, or, more subtly, in memory corruption occurring *outside* the region of memory associated with a memory segment.\n+Note that memory access var handles (as any other var handle) are *strongly* typed; and to get maximum efficiency, it is generally necessary to introduce casts to make sure that the access coordinates match the expected types — in this case we have to cast `i` into a `long`; similarly, since the signature polymorphic method `VarHandle::get` notionally returns `Object` a cast is necessary to force the right return type the var handle operation <a href=\"#2\"><sup>2<\/sup><\/a>.\n@@ -75,1 +103,1 @@\n-To enforce this, strong spatial and temporal checks are enforced upon every access. Consider the following code:\n+In other words, manual offset computation is no longer needed — offsets and strides can in fact be derived from the layout object; note how `yHandle` is able to compute the required offset of the `y` coordinate in the flat array without the need of any error-prone arithmetic computation.\n@@ -77,4 +105,1 @@\n-```java\n-MemorySegment segment = MemorySegment.allocateNative(10);\n-intHandle.get(segment, 8); \/\/throws ISE\n-```\n+### Deterministic deallocation\n@@ -82,1 +107,1 @@\n-The above code leads to a runtime exception, as we trying to access memory outside the segment's bounds — the access operation starts at offset 8 (which is within bounds), but ends at offset 11 (which is outside bounds).\n+In addition to spatial bounds, memory segments also feature temporal bounds as well as thread-confinement. In the examples shown so far, we have always used the API in its simpler form, leaving the runtime to handle details such as whether it was safe or not to reclaim memory associated with a given memory segment. But there are cases where this behavior is not desirable: consider the case where a large memory segment is mapped from a file (this is possible using `MemorySegment::map`); in this case, an application would probably prefer to deterministically release (e.g. unmap) the memory associated with this segment, to ensure that memory doesn't remain available for longer than in needs to (and therefore potentially impacting the performance of the application).\n@@ -84,1 +109,1 @@\n-Similarly, attempting to access an already closed segment leads to a failure:\n+Memory segments support deterministic deallocation, through an abstraction called `ResourceScope`. A resource scope models the lifecycle associated with one or more resources (in this document, by resources we mean mostly memory segments); a resource scope has a state: it starts off in the *alive* state, which means that all the resources it manages can be safely accessed - and, at the user request, it can be *closed*. After a resource scope is closed, access to resources managed by that scope is no longer allowed. Resource scope support the `AutoCloseable` interface, which means that user can use resource scopes with the *try-with-resources* construct, as demonstrated in the following code:\n@@ -87,2 +112,3 @@\n-segment.close();\n-intHandle.get(segment, 0); \/\/throws ISE\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    MemorySegment mapped = MemorySegment.map(Path.of(\"someFile\"), 0, 100000, MapMode.READ_WRITE, scope);    \n+} \/\/ segment is unmapped here\n@@ -91,3 +117,1 @@\n-This time, the access occurs within the spatial bounds implied by the segment, but when access occurs, the segment has already been *closed*, so the access operation fails. This is crucial to guarantee safety: since memory segments ensure *deterministic deallocation*, the above code might end up attempting to dereference already freed memory.\n-\n-On top of basic spatial and temporal bound guarantees, memory segments also enforce thread-confinement guarantees, which will be discussed in a later [section](#Confinement). Note that, while these checks might seem expensive when considered in isolation, the Foreign Memory Access API is designed and implemented such that the JIT compiler can hoist most, if not all, such checks outside hot loops. Hence, memory access efficiency is not negatively impacted by the safety requirements of the API.\n+Here, we create a new *confined* resource scope, which is then used when creating a mapped segment; this means that the lifecycle of the `mapped` segment will be tied to that of the resource scope, and that accessing the segment (e.g. dereference) *after* `scope` has been closed will not be possible.\n@@ -95,1 +119,1 @@\n-### Layouts\n+As this example alludes to, resource scopes can come in many flavors: they can be *confined* (where access is restricted to the thread which created the scope), *shared* <a href=\"#3\"><sup>3<\/sup><\/a> (where access can occur in any thread) and can be optionally associated with a `Cleaner` object, which would take care of performing implicit deallocation, in case the resource scope becomes *unreachable* and the `close` method has not been called by the user. In fact, all the memory segments we have seen previously were associated with the so called *default* scope: a shared scope which does not support deterministic deallocation (e.g. calling `close` will fail), and whose resources are managed by a `Cleaner`.\n@@ -97,1 +121,1 @@\n-Expressing byte offsets (as in the [above](#memory-access-handles) example) can lead to code that is hard to read, and very fragile — as memory layout invariants are captured, implicitly, in the constants used to scale offsets. To address this issue, we add a *memory layout* API which allows clients to define memory layouts *programmatically*. For instance, the layout of the array used in the above example can be expressed using the following code:\n+Resource scopes are very handy when managing the lifecycle of multiple resources:\n@@ -100,1 +124,6 @@\n-MemoryLayout intArray = MemoryLayout.ofSequence(10, MemoryLayout.ofValueBits(32));\n+try (ResourceScope scope = ResourceScope.ofConfined()) {\n+    MemorySegment segment1 = MemorySegment.allocateNative(100, scope);\n+    MemorySegment segment2 = MemorySegment.allocateNative(100, scope);\n+    ...\n+    MemorySegment segmentN = MemorySegment.allocateNative(100, scope);\n+} \/\/ all segments are deallocated here\n@@ -103,1 +132,3 @@\n-That is, our layout is a repetition of 10 elements whose size is 32 bit each. The advantage of defining a memory layout upfront, using an API, is that we can then query on the layout — for instance we can compute the offset of the 3rd element of the array:\n+Here we create another confined scope, and then, inside the *try-with-resources* we use the scope to create many segments; all such segments share the *same* resource scope - meaning that when such scope is closed, the memory associated with all these segments will be reclaimed at once.\n+\n+Dealing with shared access *and* deterministic deallocation at the same time is tricky, and poses new problems for the user code; consider the case where a method receives a segment and has to write two values in that segment (e.g. two point coordinates):\n@@ -106,1 +137,4 @@\n-long element3 = intArray.byteOffset(PathElement.sequenceElement(3)); \/\/ 12\n+void writePoint(MemorySegment segment, int x, int y) {\n+    MemoryAccess.setIntAtIndex(segment, 0, x);\n+    MemoryAccess.setIntAtIndex(segment, 1, y);\n+}\n@@ -109,1 +143,3 @@\n-To specify which nested layout element should be used for the offset calculation we use a so called *layout path* - that is, a selection expression that navigates the layout, from the *root* layout, down to the leaf layout we wish to select (in this case the 3rd layout element in the sequence).\n+If the segment is associated with a confined scope, no problem arises: the thread that created the segment is the same thread that performs the dereference - as such, when `writePoint` is called, the segment's scope is either alive (and will remain so for the duration of the call), or already closed (in which case some exception will be thrown, and no value will be written).\n+\n+But, if the segment is associated with a shared scope, there is a new problem we are faced with: the segment might be closed (concurrently) in between the two accesses! This means that, the method ends up writing only one value instead of two; in other words, the behavior of the method is no longer atomic. Note that this cannot happen in the case where the scope is shared but associated with the *default scope* - as that scope does not support explicit deallocation.\n@@ -111,1 +147,1 @@\n-Layouts can also be used to obtain memory access var handles; so we can rewrite the above example as follows:\n+To avoid this problem, clients can acquire a so called resource scope *handle*. A resource scope handle effectively prevents a scope to be closed, until said handle is released by the application. Let's illustrate how that works in practice:\n@@ -114,5 +150,5 @@\n-MemorySegment segment = ...\n-int[] values = new int[10];\n-VarHandle elemHandle = intArray.varHandle(int.class, PathElement.sequenceElement());\n-for (int i = 0 ; i < values.length ; i++) {\n-    values[i] = (int)elemHandle.get(segment, (long)i);\n+void writePointSafe(MemorySegment segment, int x, int y) {\n+    try (var handle = segment.scope().acquire()) {\n+        MemoryAccess.setIntAtIndex(segment, 0, x);\n+        MemoryAccess.setIntAtIndex(segment, 1, y);\n+    } \/\/ handle released here\n@@ -122,1 +158,1 @@\n-In the above, `elemHandle` is a var handle whose type is `int` , which takes two access coordinates:\n+A resource scope handle acts as a more restricted version <a href=\"#4\"><sup>4<\/sup><\/a> of an *atomic reference count*; each time a scope is acquired, its *acquired count* goes up; conversely the count goes down each time an handle associated with that scope is released. A scope can only be closed if its acquired count is exactly zero - meaning that no other client is attempting to access that (shared) segment. In our example above, the semantics of resource scope handles guarantees that the method will be able to either acquire the handle successfully, and write both values, or fail to acquire the handle, and write no value.\n@@ -124,2 +160,1 @@\n-1. a `MemorySegment` instance; the segment whose memory should be dereferenced\n-2. a *logical* index, which is used to select the element of the sequence we want to access\n+### Parallel processing\n@@ -127,1 +162,1 @@\n-In other words, manual offset computation is no longer needed — offsets and strides can in fact be derived from the layout object.\n+The contents of a memory segment can be processed in *parallel* (e.g. using a framework such as Fork\/Join) — by obtaining a `Spliterator` instance out of a memory segment. For instance to sum all the 32 bit values of a memory segment in parallel, we can use the following code:\n@@ -129,1 +164,4 @@\n-Memory layouts shine when structured access is needed — consider the following C declaration:\n+```java\n+SequenceLayout seq = MemoryLayout.ofSequence(1_000_000, MemoryLayouts.JAVA_INT);\n+MemorySegment segment = MemorySegment.allocateNative(seq);\n+SequenceLayout seq_bulk = seq.reshape(-1, 100);\n@@ -131,5 +169,8 @@\n-```c\n-typedef struct {\n-\tchar kind;\n-    int value;\n-} TaggedValues[5];\n+int sum = StreamSupport.stream(MemorySegment.spliterator(segment, seq_bulk), true)\n+                       .mapToInt(slice -> {\n+                           int res = 0;\n+                           for (int i = 0; i < 100 ; i++) {\n+                               res += MemoryAccess.getIntAtIndex(slice, i);\n+                           }\n+                           return res;\n+                       }).sum();\n@@ -138,1 +179,1 @@\n-The above C declaration can be modeled using the layout below:\n+The `MemorySegment::spliterator` takes a segment, a *sequence* layout and returns a spliterator instance which splits the segment into chunks which corresponds to the elements in the provided sequence layout. Here, we want to sum elements in an array which contains a million of elements; now, doing a parallel sum where each computation processes *exactly* one element would be inefficient, so instead we use the layout API to derive a *bulk* sequence layout. The bulk layout is a sequence layout which has the same size of the original layouts, but where the elements are arranged into groups of 100 elements — which should make it more amenable to parallel processing.\n@@ -140,9 +181,1 @@\n-```javascript\n-SequenceLayout taggedValues = MemoryLayout.ofSequence(5,\n-    MemoryLayout.ofStruct(\n-        MemoryLayout.ofValueBits(8, ByteOrder.nativeOrder()).withName(\"kind\"),\n-        MemoryLayout.ofPaddingBits(24),\n-        MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()).withName(\"value\")\n-    )\n-).withName(\"TaggedValues\");\n-```\n+Once we have the spliterator, we can use it to construct a parallel stream and sum the contents of the segment in parallel. Since the segment operated upon by the spliterator is shared, the segment can be accessed from multiple threads concurrently; the spliterator API ensures that the access occurs in a regular fashion: a slice is created from the original segment, and given to a thread to perform some computation — thus ensuring that no two threads can ever operate concurrently on the same memory region.\n@@ -150,1 +183,1 @@\n-Here we assume that we need to insert some padding after the `kind` field to honor the alignment requirements of the `value` field <a href=\"#1\"><sup>1<\/sup><\/a>. Now, if we had to access the `value` field of all the elements of the array using manual offset computation, the code would quickly become pretty hard to read — on each iteration we would have to remember that the stride of the array is 8 bytes and that the offset of the `value` field relative to the `TaggedValue` struct is 4 bytes. This gives us an access expression like `(i * 8) + 4`, where `i` is the index of the element whose `value` field needs to be accessed.\n+### Combining memory access handles\n@@ -152,1 +185,1 @@\n-With memory layouts, we can simply compute, once and for all, the memory access var handle to access the `value` field inside the sequence, as follows:\n+We have seen in the previous sections how memory access var handle dramatically simplify user code when structured access is involved. While deriving memory access var handles from layout is the most convenient option, the Foreign Memory Access API also allows to create such memory access var handles in a standalone fashion, as demonstrated in the following code:\n@@ -155,3 +188,1 @@\n-VarHandle valuesHandle = taggedValues.varHandle(int.class,\n-                                               PathElement.sequenceElement(),\n-                                               PathElement.groupElement(\"value\"));\n+VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder())    \n@@ -160,3 +191,1 @@\n-When using this var handle, no manual offset computation will be required: the resulting `valuesHandle` will feature an additional `long` coordinate which can be used to select  the desired `value` field from the sequence.\n-\n-### Var handle combinators\n+The above code creates a memory access var handle which reads\/writes `int` values at a certain byte offset in a segment. To create this var handle we have to specify a carrier type — the type we want to use e.g. to extract values from memory, as well as to whether any byte swapping should be applied when contents are read from or stored to memory. Additionally, the user can supply an extra alignment parameter (not shown here) — this can be useful to impose additional constraints on how memory dereferences should occur; for instance, a client might want to prevent access to misaligned 32 bit values. Of course, when deriving memory access var handles from layouts, all the above information can more simply inferred from the selected layout.\n@@ -164,1 +193,1 @@\n-The attentive reader might have noted how rich the var handles returned by the layout API are, compared to the simple memory access var handle we have seen at play [here](#memory-access-handles). How do we go from a simple access var handle that takes a byte offset to a var handle that can dereference a complex layout path? The answer is, by using var handle *combinators*. Developers familiar with the method handle API know how simpler method handles can be combined into more complex ones using the various combinator methods in the `MethodHandles` API. These methods allow, for instance, to insert (or bind) arguments into a target method handle, filter return values, permute arguments and much more.\n+The attentive reader might have noted how rich the var handles returned by the layout API are, compared to the simple memory access var handle we have constructed above. How do we go from a simple access var handle that takes a byte offset to a var handle that can dereference a complex layout path? The answer is, by using var handle *combinators*. Developers familiar with the method handle API know how simpler method handles can be combined into more complex ones using the various combinator methods in the `MethodHandles` API. These methods allow, for instance, to insert (or bind) arguments into a target method handle, filter return values, permute arguments and much more.\n@@ -173,1 +202,1 @@\n-Without diving too deep, let's consider how we might want to take a basic memory access handle and turn it into a var handle which dereference a segment at a specific offset (again using the `taggedValues` layout defined previously):\n+Without diving too deep, let's consider how we might want to take a basic memory access handle and turn it into a var handle which dereference a segment at a specific offset (again using the `points` layout defined previously):\n@@ -177,3 +206,2 @@\n-long offsetOfValue = taggedValues.byteOffset(PathElement.sequenceElement(0),\n-                                             PathElement.groupElement(\"value\"));\n-VarHandle valueHandle = MemoryHandles.insertCoordinates(intHandle, 0, offsetOfValue); \/\/ (MS) -> I\n+long offsetOfY = points.byteOffset(PathElement.sequenceElement(3), PathElement.groupElement(\"y\"));\n+VarHandle valueHandle = MemoryHandles.insertCoordinates(intHandle, 1, offsetOfValue); \/\/ (MS) -> I\n@@ -184,32 +212,0 @@\n-### Segment accessors\n-\n-Building complex memory access var handles using layout paths and the combinator API is useful, especially for structured access. But in simple cases, creating a `VarHandle` just to be able to read an int value at a given segment offset can be perceived as overkill. For this reason, the foreign memory access API provides ready-made static accessors in the `MemoryAccess` class, which allows to dereference a segment in various ways. For instance, if a client wants to read an int value from a segment, one of the following methods can be used:\n-\n-* `MemoryAccess::getInt(MemorySegment)` — reads an int value (4 bytes) starting at the segment's base address\n-* `MemoryAccess::getIntAtOffset(MemorySegment, long)` — reads an int value (4 bytes) starting at the address `A = B + O` where `B` is the segment's base address, and `O` is an offset (in bytes) supplied by the client\n-* `MemoryAccess::getIntAtIndex(MemorySegment, long)` — reads an int value (4 bytes) starting at the address `A = B + (4 * I)` where `B` is the segment's base address, and `I` is a logical index supplied by the client; this accessor is useful for mimicking array access.\n-\n-In other words, at least in simple cases, memory dereference operations can be achieved without the need of going through the `VarHandle` API; of course in more complex cases (structured and\/or multidimensional access, fenced access) the full power of the `VarHandle` API might still come in handy.\n-\n-### Interoperability\n-\n-Memory segments are pretty flexible when it comes to interacting with existing memory sources. For instance it is possible to:\n-\n-* create segment from a Java array\n-* convert a segment into a Java array\n-* create a segment from a byte buffer\n-* convert a segment into a byte buffer\n-\n-For instance, thanks to bi-directional integration with the byte buffer API, it is possible for users to create a memory segment, and then de-reference it using the byte buffer API, as follows:\n-\n-```java\n-MemorySegment segment = ...\n-int[] values = new int[10];\n-ByteBuffer bb = segment.asByteBuffer();\n-for (int i = 0 ; i < values.length ; i++) {\n-    values[i] = bb.getInt();\n-}\n-```\n-\n-The only thing to remember is that, when a byte buffer view is created out of a memory segment, the buffer has the same temporal bound and thread-confinement guarantees as those of the segment it originated from. This means that if the segment is closed, any subsequent attempt to dereference its memory via a (previously obtained) byte buffer view will fail with an exception.\n-\n@@ -218,1 +214,3 @@\n-It is sometimes necessary to create a segment out of an existing memory source, which might be managed by native code. This is the case, for instance, if we want to create a segment out of memory managed by a custom allocator.\n+The memory access API provides basic safety guarantees for all memory segments created using the API. More specifically, dereferencing memory should either succeed, or result in a runtime exception - but, crucially, should never result in a VM crash, or, more subtly, in memory corruption occurring *outside* the region of memory associated with a memory segment. This is possible, since all segments have immutable *spatial bounds*, and, as we have seen, are associated with a resource scope which make sure that the segment cannot be dereferenced after the scope has been closed, or, in case of a confined scope, that the segment is dereferenced from the very same thread which created the scope.\n+\n+That said, it is sometimes necessary to create a segment out of an existing memory source, which might be managed by native code. This is the case, for instance, if we want to create a segment out of memory managed by a custom allocator.\n@@ -222,1 +220,1 @@\n-Memory segments provide a similar capability - that is, given an address (which might have been obtained through some native calls), it is possible to wrap a segment around it, with given spatial, temporal and confinement bounds; a cleanup action to be executed when the segment is closed might also be specified.\n+Memory segments provide a similar capability - that is, given an address (which might have been obtained through some native calls), it is possible to wrap a segment around it, with given spatial bounds and resource scope; a cleanup action to be executed when the segment is closed might also be specified.\n@@ -227,2 +225,5 @@\n-MemoryAddress addr = MemoryAddress.ofLong(someLongAddr);\n-var unsafeSegment = addr.asSegmentRestricted(10);\n+try (ResourceScope scope = ResourceScope.ofShared()) {\n+    MemoryAddress addr = MemoryAddress.ofLong(someLongAddr);\n+    var unsafeSegment = addr.asSegmentRestricted(10, scope);\n+    ...\n+}\n@@ -231,1 +232,1 @@\n-The above code creates a new confined unsafe segment from a given address; the size of the segment is 10 bytes; the confinement thread is the current thread, and there's no cleanup action associated with the segment (that can be changed as needed by calling `MemorySegment::withCleanupAction`).\n+The above code creates a shared scope and then, inside the *try-with-resources* it creates a *new* unsafe segment from a given address; the size of the segment is 10 bytes, and the unsafe segment is associated with the current shared scope. This means that the unsafe segment cannot be dereferenced after the shared scope has been closed.\n@@ -233,1 +234,1 @@\n-Of course, segments created this way are completely *unsafe*. There is no way for the runtime to verify that the provided address indeed points to a valid memory location, or that the size of the memory region pointed to by `addr` is indeed 10 bytes. Similarly, there are no guarantees that the underlying memory region associated with `addr` will not be deallocated *prior* to the call to `MemorySegment::close`.\n+Of course, segments created this way are completely *unsafe*. There is no way for the runtime to verify that the provided address indeed points to a valid memory location, or that the size of the memory region pointed to by `addr` is indeed 10 bytes. Similarly, there are no guarantees that the underlying memory region associated with `addr` will not be deallocated *prior* to the call to `ResourceScope::close`.\n@@ -239,72 +240,0 @@\n-### Confinement\n-\n-In addition to spatial and temporal bounds, segments also feature thread-confinement. That is, a segment is *owned* by the thread which created it, and no other thread can access the contents on the segment, or perform certain operations (such as `close`) on it. Thread confinement, while restrictive, is crucial to guarantee optimal memory access performance even in a multi-threaded environment.\n-\n-The Foreign Memory Access API provides several ways to relax the thread confinement barriers. First, threads can cooperatively share segments by performing explicit *handoff* operations, where a thread releases its ownership on a given segment and transfers it onto another thread. Consider the following code:\n-\n-```java\n-MemorySegment segmentA = MemorySegment.allocateNative(10); \/\/ confined by thread A\n-...\n-var segmentB = segmentA.handoff(threadB); \/\/ confined by thread B\n-```\n-\n-This pattern of access is also known as *serial confinement* and might be useful in producer\/consumer use cases where only one thread at a time needs to access a segment. Note that, to make the handoff operation safe, the API *kills* the original segment (as if `close` was called, but without releasing the underlying memory) and returns a *new* segment with the correct owner. That is, handoff operations are *terminal operations* (like `MemorySegment::close`). The implementation also makes sure that all writes by the first thread are flushed into memory by the time the second thread accesses the segment.\n-\n-When serial confinement is not enough, clients can optionally remove thread ownership, that is, turn a confined segment into a *shared* one which can be accessed — and closed — concurrently, by multiple threads<a href=\"#2\"><sup>2<\/sup><\/a>. As before, sharing a segment kills the original segment and returns a new segment with no owner thread:\n-\n-```java\n-MemorySegment segmentA = MemorySegment.allocateNative(10); \/\/ confined by thread A\n-...\n-var sharedSegment = segmentA.share() \/\/ shared segment\n-```\n-\n-A shared segments is especially useful when multiple threads need to operate on the segment's contents in *parallel* (e.g. using a framework such as Fork\/Join) — by obtaining a `Spliterator` instance out of a memory segment. For instance to sum all the 32 bit values of a memory segment in parallel, we can use the following code:\n-\n-```java\n-SequenceLayout seq = MemoryLayout.ofSequence(1_000_000, MemoryLayouts.JAVA_INT);\n-SequenceLayout seq_bulk = seq.reshape(-1, 100);\n-VarHandle intHandle = seq.varHandle(int.class, sequenceElement());    \n-\n-int sum = StreamSupport.stream(MemorySegment.spliterator(segment.share(), seq_bulk), true)\n-                .mapToInt(slice -> {\n-\t\t\t\t\tint res = 0;\n-        \t\t\tfor (int i = 0; i < 100 ; i++) {\n-            \t\t\tres += MemoryAccess.getIntAtIndex(slice, i);\n-        \t\t\t}\n-        \t\t\treturn res;\n-                }).sum();\n-```\n-\n-The `MemorySegment::spliterator` takes a segment, a *sequence* layout and returns a spliterator instance which splits the segment into chunks which corresponds to the elements in the provided sequence layout. Here, we want to sum elements in an array which contains a million of elements; now, doing a parallel sum where each computation processes *exactly* one element would be inefficient, so instead we use the layout API to derive a *bulk* sequence layout. The bulk layout is a sequence layout which has the same size of the original layouts, but where the elements are arranged into groups of 100 elements — which should make it more amenable to parallel processing.\n-\n-Once we have the spliterator, we can use it to construct a parallel stream and sum the contents of the segment in parallel. Since the segment operated upon by the spliterator is shared, the segment can be accessed from multiple threads concurrently; the spliterator API ensures that the access occurs in a regular fashion: a slice is created from the original segment, and given to a thread to perform some computation — thus ensuring that no two threads can ever operate concurrently on the same memory region.\n-\n-Shared segment can also be useful to perform serial confinement in cases where the thread handing off the segment does not know which other thread will continue the work on the segment, for instance:\n-\n-```java\n-\/\/ thread A\n-MemorySegment segment = MemorySegment.allocateNative(10); \/\/ confined by thread A\n-\/\/do some work\n-segment = segment.share();\n-\n-\/\/ thread B\n-segment.handoff(Thread.currentThread()); \/\/ now confined by thread B\n-\/\/ do some more work\n-```\n-\n-That is, multiple threads can *race* to acquire a given shared segment — the API ensures that only one of them will succeed in acquiring ownership of the shared segment.\n-\n-### Implicit deallocation\n-\n-While memory segment feature *deterministic deallocation* they can also be registered against a `Cleaner`, to make sure that the memory resources associated with a segment are released when the GC determines that the segment is no longer *reachable*:\n-\n-```java\n-MemorySegment segment = MemorySegment.allocateNative(100);\n-Cleaner cleaner = Cleaner.create();\n-segment = segment.registerCleaner(cleaner);\n-\/\/ do some work\n-segment = null; \/\/ Cleaner might reclaim the segment memory now\n-```\n-\n-As for handoff, registering a segment with a cleaner *kills* the current segment and returns a new one which features implicit deallocation; this is also a *terminal operation*. Note that registering a segment with a cleaner doesn't prevent clients from calling `MemorySegment::close` explicitly on the returned segment; the API will guarantee that the segment's cleanup action will be called at most once — either explicitly, or implicitly (by a cleaner). Moreover, since an unreachable segment cannot (by definition) be accessed by any thread, the cleaner can always release any memory resources associated with an unreachable segment, regardless of whether it is a confined, or a shared segment.\n-\n@@ -312,2 +241,3 @@\n-* <a id=\"2\"\/>(<sup>2<\/sup>):<small> Shared segments rely on VM thread-local handshakes (JEP [312](https:\/\/openjdk.java.net\/jeps\/312)) to implement lock-free, safe, shared memory access; that is, when it comes to memory access, there should no difference in performance between a shared segment and a confined segment. On the other hand, `MemorySegment::close` might be slower on shared segments than on confined ones.<\/small>\n-\n+* <a id=\"2\"\/>(<sup>2<\/sup>):<small> Clients can enforce stricter type checking when interacting with `VarHandle` instances, by obtaining an *exact* var handle, using the `VarHandle::withInvokeExactBehavior` method.<\/small>\n+* <a id=\"3\"\/>(<sup>3<\/sup>):<small> Shared segments rely on VM thread-local handshakes (JEP [312](https:\/\/openjdk.java.net\/jeps\/312)) to implement lock-free, safe, shared memory access; that is, when it comes to memory access, there should no difference in performance between a shared segment and a confined segment. On the other hand, `MemorySegment::close` might be slower on shared segments than on confined ones.<\/small>\n+* <a id=\"4\"\/>(<sup>4<\/sup>):<small> The main difference between reference counting and the mechanism proposed here is that reference counting is *symmetric* - meaning that any client is able to both increment and decrement the reference count at will. The resource scope handle mechanism is *asymmetric*, since only the client acquiring a handle has the capability to release that handle. This avoids situation where a client might be tempted to e.g. decrement the reference count multiple times in order to perform some task which would otherwise be forbidden. <\/small>\n","filename":"doc\/panama_memaccess.md","additions":130,"deletions":200,"binary":false,"changes":330,"status":"modified"}]}