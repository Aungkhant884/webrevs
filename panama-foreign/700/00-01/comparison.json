{"files":[{"patch":"@@ -69,0 +69,4 @@\n+    private static final long MAX_ALIGN_1 = 1;\n+    private static final long MAX_ALIGN_2 = 2;\n+    private static final long MAX_ALIGN_4 = 4;\n+    private static final long MAX_ALIGN_8 = 8;\n@@ -72,2 +76,0 @@\n-    private final long maxAlignMask;\n-\n@@ -81,1 +83,1 @@\n-    AbstractMemorySegmentImpl(long length, boolean readOnly, long maxAlignMask, MemorySession session) {\n+    AbstractMemorySegmentImpl(long length, boolean readOnly, MemorySession session) {\n@@ -84,1 +86,0 @@\n-        this.maxAlignMask = maxAlignMask;\n@@ -325,0 +326,1 @@\n+    @ForceInline\n@@ -326,1 +328,18 @@\n-        return maxAlignMask;\n+        if (this instanceof NativeMemorySegmentImpl) {\n+            return 0;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfByte) {\n+            return MAX_ALIGN_1;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfChar) {\n+            return MAX_ALIGN_2;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfShort) {\n+            return MAX_ALIGN_2;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfInt) {\n+            return MAX_ALIGN_4;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfLong) {\n+            return MAX_ALIGN_8;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfFloat) {\n+            return MAX_ALIGN_4;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfDouble) {\n+            return MAX_ALIGN_8;\n+        }\n+        throw new IllegalStateException(\"Unknown memory segment\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -56,5 +56,0 @@\n-    private static final long MAX_ALIGN_1 = 1;\n-    private static final long MAX_ALIGN_2 = 2;\n-    private static final long MAX_ALIGN_4 = 4;\n-    private static final long MAX_ALIGN_8 = 8;\n-\n@@ -70,2 +65,2 @@\n-    HeapMemorySegmentImpl(long offset, Object base, long length, boolean readOnly, long maxAlignMask) {\n-        super(length, readOnly, maxAlignMask, MemorySession.global());\n+    HeapMemorySegmentImpl(long offset, Object base, long length, boolean readOnly) {\n+        super(length, readOnly, MemorySession.global());\n@@ -98,1 +93,1 @@\n-            super(offset, base, length, readOnly, MAX_ALIGN_1);\n+            super(offset, base, length, readOnly);\n@@ -126,1 +121,1 @@\n-            super(offset, base, length, readOnly, MAX_ALIGN_2);\n+            super(offset, base, length, readOnly);\n@@ -154,1 +149,1 @@\n-            super(offset, base, length, readOnly, MAX_ALIGN_2);\n+            super(offset, base, length, readOnly);\n@@ -182,1 +177,1 @@\n-            super(offset, base, length, readOnly, MAX_ALIGN_4);\n+            super(offset, base, length, readOnly);\n@@ -210,1 +205,1 @@\n-            super(offset, base, length, readOnly, MAX_ALIGN_8);\n+            super(offset, base, length, readOnly);\n@@ -238,1 +233,1 @@\n-            super(offset, base, length, readOnly, MAX_ALIGN_4);\n+            super(offset, base, length, readOnly);\n@@ -266,1 +261,1 @@\n-            super(offset, base, length, readOnly, MAX_ALIGN_8);\n+            super(offset, base, length, readOnly);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        super(length, readOnly, 0, session);\n+        super(length, readOnly, session);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022, Rado Smogura\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MixedAccessBenchmarks.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}