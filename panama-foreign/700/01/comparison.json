{"files":[{"patch":"@@ -69,0 +69,4 @@\n+    private static final long MAX_ALIGN_1 = 1;\n+    private static final long MAX_ALIGN_2 = 2;\n+    private static final long MAX_ALIGN_4 = 4;\n+    private static final long MAX_ALIGN_8 = 8;\n@@ -322,1 +326,21 @@\n-    public abstract long maxAlignMask();\n+    @ForceInline\n+    public final long maxAlignMask() {\n+        if (this instanceof NativeMemorySegmentImpl) {\n+            return 0;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfByte) {\n+            return MAX_ALIGN_1;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfChar) {\n+            return MAX_ALIGN_2;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfShort) {\n+            return MAX_ALIGN_2;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfInt) {\n+            return MAX_ALIGN_4;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfLong) {\n+            return MAX_ALIGN_8;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfFloat) {\n+            return MAX_ALIGN_4;\n+        } else if (this instanceof HeapMemorySegmentImpl.OfDouble) {\n+            return MAX_ALIGN_8;\n+        }\n+        throw new IllegalStateException(\"Unknown memory segment\");\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -56,5 +56,0 @@\n-    private static final long MAX_ALIGN_1 = 1;\n-    private static final long MAX_ALIGN_2 = 2;\n-    private static final long MAX_ALIGN_4 = 4;\n-    private static final long MAX_ALIGN_8 = 8;\n-\n@@ -117,5 +112,0 @@\n-        @Override\n-        public long maxAlignMask() {\n-            return MAX_ALIGN_1;\n-        }\n-\n@@ -150,5 +140,0 @@\n-        @Override\n-        public long maxAlignMask() {\n-            return MAX_ALIGN_2;\n-        }\n-\n@@ -183,5 +168,0 @@\n-        @Override\n-        public long maxAlignMask() {\n-            return MAX_ALIGN_2;\n-        }\n-\n@@ -216,5 +196,0 @@\n-        @Override\n-        public long maxAlignMask() {\n-            return MAX_ALIGN_4;\n-        }\n-\n@@ -249,5 +224,0 @@\n-        @Override\n-        public long maxAlignMask() {\n-            return MAX_ALIGN_8;\n-        }\n-\n@@ -282,5 +252,0 @@\n-        @Override\n-        public long maxAlignMask() {\n-            return MAX_ALIGN_4;\n-        }\n-\n@@ -315,5 +280,0 @@\n-        @Override\n-        public long maxAlignMask() {\n-            return MAX_ALIGN_8;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -98,5 +98,0 @@\n-    @Override\n-    public long maxAlignMask() {\n-        return 0;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Rado Smogura\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.openjdk.jmh.annotations.CompilerControl.Mode.DONT_INLINE;\n+import static org.openjdk.jmh.annotations.Mode.AverageTime;\n+\n+@BenchmarkMode(AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\", \"--enable-preview\"})\n+public class MixedAccessBenchmarks {\n+    private static final VectorSpecies<Byte> SPECIES_BYTE = VectorSpecies.ofLargestShape(byte.class);\n+\n+    private MemorySegment heapIn, heapOu, directIn, directOu;\n+    @Param(\"1048576\")\n+    private int size;\n+\n+    @Setup\n+    public void setup() {\n+        var session = MemorySession.openConfined();\n+        heapIn = MemorySegment.ofArray(new byte[size]);\n+        heapOu = MemorySegment.ofArray(new byte[size]);\n+\n+        directIn = MemorySegment.allocateNative(size, session);\n+        directOu = MemorySegment.allocateNative(size, session);\n+    }\n+\n+    @Benchmark\n+    public void directCopy() {\n+        copyMemorySegments1(directIn, directOu);\n+    }\n+\n+    @Benchmark\n+    public void pollutedAccessCopy() {\n+        copyMemorySegments1(heapIn, heapOu);\n+        copyMemorySegments1(directIn, directOu);\n+    }\n+\n+    @CompilerControl(DONT_INLINE)\n+    private static void copyMemorySegments1(MemorySegment in, MemorySegment out) {\n+        long sz = in.byteSize();\n+        for (long i = 0; i < SPECIES_BYTE.loopBound(sz); i += SPECIES_BYTE.vectorByteSize()) {\n+            var v1 = ByteVector.fromMemorySegment(SPECIES_BYTE, in, i, ByteOrder.nativeOrder());\n+            v1.intoMemorySegment(out, i, ByteOrder.nativeOrder());\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MixedAccessBenchmarks.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}