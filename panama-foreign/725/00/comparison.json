{"files":[{"patch":"@@ -46,3 +46,8 @@\n-    public ABIDescriptor(Architecture arch, VMStorage[][] inputStorage, VMStorage[][] outputStorage,\n-                         VMStorage[][] volatileStorage, int stackAlignment, int shadowSpace,\n-                         VMStorage targetAddrStorage, VMStorage retBufAddrStorage) {\n+    public ABIDescriptor(Architecture arch,\n+                         VMStorage[][] inputStorage,\n+                         VMStorage[][] outputStorage,\n+                         VMStorage[][] volatileStorage,\n+                         int stackAlignment,\n+                         int shadowSpace,\n+                         VMStorage targetAddrStorage,\n+                         VMStorage retBufAddrStorage) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ABIDescriptor.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -139,1 +139,5 @@\n-    private BindingSpecializer(MethodVisitor mv, MethodType callerMethodType, CallingSequence callingSequence, ABIDescriptor abi, MethodType leafType) {\n+    private BindingSpecializer(MethodVisitor mv,\n+                               MethodType callerMethodType,\n+                               CallingSequence callingSequence,\n+                               ABIDescriptor abi,\n+                               MethodType leafType) {\n@@ -190,2 +194,4 @@\n-    private static byte[] specializeHelper(MethodType leafType, MethodType callerMethodType,\n-                                           CallingSequence callingSequence, ABIDescriptor abi) {\n+    private static byte[] specializeHelper(MethodType leafType,\n+                                           MethodType callerMethodType,\n+                                           CallingSequence callingSequence,\n+                                           ABIDescriptor abi) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,3 +45,9 @@\n-    public CallingSequence(boolean forUpcall, MethodType callerMethodType, MethodType calleeMethodType, FunctionDescriptor desc,\n-                           boolean needsReturnBuffer, long returnBufferSize, long allocationSize,\n-                           List<List<Binding>> argumentBindings, List<Binding> returnBindings) {\n+    public CallingSequence(boolean forUpcall,\n+                           MethodType callerMethodType,\n+                           MethodType calleeMethodType,\n+                           FunctionDescriptor desc,\n+                           boolean needsReturnBuffer,\n+                           long returnBufferSize,\n+                           long allocationSize,\n+                           List<List<Binding>> argumentBindings,\n+                           List<Binding> returnBindings) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -69,1 +69,4 @@\n-    private void addArgumentBinding(int index, Class<?> carrier, MemoryLayout layout, List<Binding> bindings) {\n+    private void addArgumentBinding(int index,\n+                                    Class<?> carrier,\n+                                    MemoryLayout layout,\n+                                    List<Binding> bindings) {\n@@ -76,1 +79,2 @@\n-    public CallingSequenceBuilder setReturnBindings(Class<?> carrier, MemoryLayout layout,\n+    public CallingSequenceBuilder setReturnBindings(Class<?> carrier,\n+                                                    MemoryLayout layout,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,2 +48,4 @@\n-    private record CacheKey(MethodType methodType, ABIDescriptor abi,\n-                            List<VMStorage> argMoves, List<VMStorage> retMoves,\n+    private record CacheKey(MethodType methodType,\n+                            ABIDescriptor abi,\n+                            List<VMStorage> argMoves,\n+                            List<VMStorage> retMoves,\n@@ -58,2 +60,4 @@\n-                                        VMStorage[] argMoves, VMStorage[] returnMoves,\n-                                        MethodType methodType, boolean needsReturnBuffer) {\n+                                        VMStorage[] argMoves,\n+                                        VMStorage[] returnMoves,\n+                                        MethodType methodType,\n+                                        boolean needsReturnBuffer) {\n@@ -76,2 +80,4 @@\n-    private static native long makeDowncallStub(MethodType methodType, ABIDescriptor abi,\n-                                                VMStorage[] encArgMoves, VMStorage[] encRetMoves,\n+    private static native long makeDowncallStub(MethodType methodType,\n+                                                ABIDescriptor abi,\n+                                                VMStorage[] encArgMoves,\n+                                                VMStorage[] encRetMoves,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        public Node() {\n+        private Node() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SoftReferenceCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,20 +29,13 @@\n-public class VMStorage {\n-    \/**\n-     * Type of storage. e.g. stack, or which register type (GP, FP, vector)\n-     *\/\n-    private final byte type;\n-\n-    \/**\n-     * The (on stack) size in bytes when type = stack, a register mask otherwise.\n-     * The register mask indicates which segments of a register are used.\n-     *\/\n-    private final short segmentMaskOrSize;\n-\n-    \/**\n-     * The index is either a register number within a type, or\n-     * a stack offset in bytes if type = stack.\n-     * (a particular platform might add a bias to this in generate code)\n-     *\/\n-    private final int indexOrOffset;\n-\n-    private final String debugName;\n+\/**\n+ * @param type              the type of storage. e.g. stack, or which register type (GP, FP, vector)\n+ * @param segmentMaskOrSize The (on stack) size in bytes when type = stack, a register mask, otherwise\n+ *                          the register mask indicates which segments of a register are used.\n+ * @param indexOrOffset     The index is either a register number within a type, or\n+ *                          a stack offset in bytes if type = stack.\n+ *                          (a particular platform might add a bias to this in generate code)\n+ * @param debugName         the debug name to use\n+ *\/\n+public record VMStorage(byte type,\n+                        short segmentMaskOrSize,\n+                        int indexOrOffset,\n+                        String debugName) {\n@@ -50,5 +43,2 @@\n-    private VMStorage(byte type, short segmentMaskOrSize, int indexOrOffset, String debugName) {\n-        this.type = type;\n-        this.segmentMaskOrSize = segmentMaskOrSize;\n-        this.indexOrOffset = indexOrOffset;\n-        this.debugName = debugName;\n+    public VMStorage {\n+        Objects.requireNonNull(debugName);\n@@ -65,40 +55,0 @@\n-    public byte type() {\n-        return type;\n-    }\n-\n-    public short segmentMaskOrSize() {\n-        return segmentMaskOrSize;\n-    }\n-\n-    public int indexOrOffset() {\n-        return indexOrOffset;\n-    }\n-\n-    public String name() {\n-        return debugName;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        return (o instanceof VMStorage vmStorage)\n-            && type == vmStorage.type\n-            && segmentMaskOrSize == vmStorage.segmentMaskOrSize\n-            && indexOrOffset == vmStorage.indexOrOffset\n-            && Objects.equals(debugName, vmStorage.debugName);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(type, segmentMaskOrSize, indexOrOffset, debugName);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"VMStorage{\" +\n-                \"type=\" + type +\n-                \", segmentMaskOrSize=\" + segmentMaskOrSize +\n-                \", indexOrOffset=\" + indexOrOffset +\n-                \", debugName='\" + debugName + '\\'' +\n-                '}';\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/VMStorage.java","additions":15,"deletions":65,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public class AArch64Architecture implements Architecture {\n+public final class AArch64Architecture implements Architecture {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,11 +95,0 @@\n-    \/\/ record\n-    public static class Bindings {\n-        public final CallingSequence callingSequence;\n-        public final boolean isInMemoryReturn;\n-\n-        Bindings(CallingSequence callingSequence, boolean isInMemoryReturn) {\n-            this.callingSequence = callingSequence;\n-            this.isInMemoryReturn = isInMemoryReturn;\n-        }\n-    }\n-\n@@ -109,0 +98,4 @@\n+    public record Bindings(\n+        CallingSequence callingSequence,\n+        boolean isInMemoryReturn) {}\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public class LinuxAArch64CallArranger extends CallArranger {\n+public final class LinuxAArch64CallArranger extends CallArranger {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-public non-sealed class LinuxAArch64VaList implements VaList {\n-    private static final Unsafe U = Unsafe.getUnsafe();\n+public final class LinuxAArch64VaList implements VaList {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -128,1 +128,1 @@\n-        long ptr = U.allocateMemory(LAYOUT.byteSize());\n+        long ptr = UNSAFE.allocateMemory(LAYOUT.byteSize());\n@@ -130,1 +130,1 @@\n-        ms.session().addCloseAction(() -> U.freeMemory(ptr));\n+        ms.session().addCloseAction(() -> UNSAFE.freeMemory(ptr));\n@@ -431,1 +431,1 @@\n-    public static non-sealed class Builder implements VaList.Builder {\n+    public static final class Builder implements VaList.Builder {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public class MacOsAArch64CallArranger extends CallArranger {\n+public final class MacOsAArch64CallArranger extends CallArranger {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64CallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * ABI implementation for macOS on Apple silicon. Based on AAPCS with\n+ * ABI implementation for macOS on Apple Silicon. Based on AAPCS with\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-public non-sealed class MacOsAArch64VaList implements VaList {\n+public final class MacOsAArch64VaList implements VaList {\n@@ -173,1 +173,1 @@\n-    public static non-sealed class Builder implements VaList.Builder {\n+    public static final class Builder implements VaList.Builder {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-public class X86_64Architecture implements Architecture {\n+public final class X86_64Architecture implements Architecture {\n@@ -75,1 +75,1 @@\n-    public static class Regs { \/\/ break circular dependency\n+    public static final class Regs { \/\/ break circular dependency\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,11 +81,4 @@\n-    public static class Bindings {\n-        public final CallingSequence callingSequence;\n-        public final boolean isInMemoryReturn;\n-        public final int nVectorArgs;\n-\n-        Bindings(CallingSequence callingSequence, boolean isInMemoryReturn, int nVectorArgs) {\n-            this.callingSequence = callingSequence;\n-            this.isInMemoryReturn = isInMemoryReturn;\n-            this.nVectorArgs = nVectorArgs;\n-        }\n-    }\n+    public record Bindings(\n+        CallingSequence callingSequence,\n+        boolean isInMemoryReturn,\n+        int nVectorArgs) {}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-public class CallArranger {\n+public final class CallArranger {\n@@ -76,10 +76,2 @@\n-    \/\/ record\n-    public static class Bindings {\n-        public final CallingSequence callingSequence;\n-        public final boolean isInMemoryReturn;\n-\n-        Bindings(CallingSequence callingSequence, boolean isInMemoryReturn) {\n-            this.callingSequence = callingSequence;\n-            this.isInMemoryReturn = isInMemoryReturn;\n-        }\n-    }\n+    public record Bindings(CallingSequence callingSequence,\n+                           boolean isInMemoryReturn) {}\n@@ -153,1 +145,1 @@\n-    static class StorageCalculator {\n+    static final class StorageCalculator {\n@@ -252,1 +244,1 @@\n-    static class BoxBindingCalculator implements BindingCalculator {\n+    static final class BoxBindingCalculator implements BindingCalculator {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        \/\/ No 128 bit integers in the Windows C ABI. There are __m128(i|d) intrinsic types but they act just\n+        \/\/ No 128-bit integers in the Windows C ABI. There are __m128(i|d) intrinsic types but they act just\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-public non-sealed class WinVaList implements VaList {\n+public final class WinVaList implements VaList {\n@@ -69,1 +69,1 @@\n-    public static final VaList empty() {\n+    public static VaList empty() {\n@@ -165,1 +165,1 @@\n-    public static non-sealed class Builder implements VaList.Builder {\n+    public static final class Builder implements VaList.Builder {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-    AbstractGroupLayout(Kind kind, List<MemoryLayout> elements) {\n+    AbstractGroupLayout(Kind kind,\n+                        List<MemoryLayout> elements) {\n@@ -57,1 +58,4 @@\n-    AbstractGroupLayout(Kind kind, List<MemoryLayout> elements, long bitAlignment, Optional<String> name) {\n+    AbstractGroupLayout(Kind kind,\n+                        List<MemoryLayout> elements,\n+                        long bitAlignment,\n+                        Optional<String> name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n-    AbstractLayout(long bitSize, long bitAlignment, Optional<String> name) {\n+    AbstractLayout(long bitSize,\n+                   long bitAlignment,\n+                   Optional<String> name) {\n@@ -86,4 +88,0 @@\n-    public boolean isPadding() {\n-        return false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -76,5 +76,0 @@\n-    @Override\n-    public boolean isPadding() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/PaddingLayoutImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-    private SequenceLayoutImpl(long elemCount, MemoryLayout elementLayout) {\n+    private SequenceLayoutImpl(long elemCount,\n+                               MemoryLayout elementLayout) {\n@@ -42,1 +43,4 @@\n-    private SequenceLayoutImpl(long elemCount, MemoryLayout elementLayout, long bitAlignment, Optional<String> name) {\n+    private SequenceLayoutImpl(long elemCount,\n+                               MemoryLayout elementLayout,\n+                               long bitAlignment,\n+                               Optional<String> name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/SequenceLayoutImpl.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n-    private StructLayoutImpl(List<MemoryLayout> elements, long bitAlignment, Optional<String> name) {\n+    private StructLayoutImpl(List<MemoryLayout> elements,\n+                             long bitAlignment,\n+                             Optional<String> name) {\n@@ -44,1 +46,2 @@\n-    StructLayoutImpl dup(long bitAlignment, Optional<String> name) {\n+    StructLayoutImpl dup(long bitAlignment,\n+                         Optional<String> name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/StructLayoutImpl.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n-    private UnionLayoutImpl(List<MemoryLayout> elements, long bitAlignment, Optional<String> name) {\n+    private UnionLayoutImpl(List<MemoryLayout> elements,\n+                            long bitAlignment,\n+                            Optional<String> name) {\n@@ -44,1 +46,2 @@\n-    UnionLayoutImpl dup(long bitAlignment, Optional<String> name) {\n+    UnionLayoutImpl dup(long bitAlignment,\n+                        Optional<String> name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/UnionLayoutImpl.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -74,1 +74,3 @@\n-        AbstractValueLayout(Class<?> carrier, ByteOrder order, long bitSize) {\n+        AbstractValueLayout(Class<?> carrier,\n+                            ByteOrder order,\n+                            long bitSize) {\n@@ -78,1 +80,5 @@\n-        AbstractValueLayout(Class<?> carrier, ByteOrder order, long bitSize, long bitAlignment, Optional<String> name) {\n+        AbstractValueLayout(Class<?> carrier,\n+                            ByteOrder order,\n+                            long bitSize,\n+                            long bitAlignment,\n+                            Optional<String> name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -89,2 +89,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -119,2 +119,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -141,2 +141,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -201,2 +201,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -232,2 +232,2 @@\n-        assertTrue(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertTrue(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -256,2 +256,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -285,2 +285,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -323,2 +323,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -377,2 +377,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -406,2 +406,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -429,2 +429,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -66,2 +66,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -78,1 +78,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -94,2 +94,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -108,1 +108,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -125,2 +125,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -139,1 +139,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -155,2 +155,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -169,1 +169,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -185,2 +185,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -199,1 +199,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -210,2 +210,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -228,1 +228,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -241,2 +241,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -261,1 +261,1 @@\n-        assertEquals(bindings.nVectorArgs, 8);\n+        assertEquals(bindings.nVectorArgs(), 8);\n@@ -276,2 +276,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -306,1 +306,1 @@\n-        assertEquals(bindings.nVectorArgs, 8);\n+        assertEquals(bindings.nVectorArgs(), 8);\n@@ -333,2 +333,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -359,1 +359,1 @@\n-        assertEquals(bindings.nVectorArgs, 3);\n+        assertEquals(bindings.nVectorArgs(), 3);\n@@ -376,2 +376,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -389,1 +389,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -398,2 +398,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -411,1 +411,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -457,2 +457,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -478,1 +478,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -489,2 +489,2 @@\n-        assertTrue(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertTrue(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -502,1 +502,1 @@\n-        assertEquals(bindings.nVectorArgs, 0);\n+        assertEquals(bindings.nVectorArgs(), 0);\n@@ -513,2 +513,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -526,1 +526,1 @@\n-        assertEquals(bindings.nVectorArgs, 1);\n+        assertEquals(bindings.nVectorArgs(), 1);\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":42,"deletions":42,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -81,2 +81,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -103,2 +103,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -127,2 +127,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -158,2 +158,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -195,2 +195,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -229,2 +229,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -259,2 +259,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -290,2 +290,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -311,2 +311,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -335,2 +335,2 @@\n-        assertTrue(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertTrue(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n@@ -364,2 +364,2 @@\n-        assertFalse(bindings.isInMemoryReturn);\n-        CallingSequence callingSequence = bindings.callingSequence;\n+        assertFalse(bindings.isInMemoryReturn());\n+        CallingSequence callingSequence = bindings.callingSequence();\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}