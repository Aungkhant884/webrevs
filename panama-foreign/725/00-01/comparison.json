{"files":[{"patch":"@@ -29,13 +29,18 @@\n-\/**\n- * @param type              the type of storage. e.g. stack, or which register type (GP, FP, vector)\n- * @param segmentMaskOrSize The (on stack) size in bytes when type = stack, a register mask, otherwise\n- *                          the register mask indicates which segments of a register are used.\n- * @param indexOrOffset     The index is either a register number within a type, or\n- *                          a stack offset in bytes if type = stack.\n- *                          (a particular platform might add a bias to this in generate code)\n- * @param debugName         the debug name to use\n- *\/\n-public record VMStorage(byte type,\n-                        short segmentMaskOrSize,\n-                        int indexOrOffset,\n-                        String debugName) {\n+public final class VMStorage {\n+    \/**\n+     * Type of storage. e.g. stack, or which register type (GP, FP, vector)\n+     *\/\n+    private final byte type;\n+\n+    \/**\n+     * The (on stack) size in bytes when type = stack, a register mask otherwise.\n+     * The register mask indicates which segments of a register are used.\n+     *\/\n+    private final short segmentMaskOrSize;\n+\n+    \/**\n+     * The index is either a register number within a type, or\n+     * a stack offset in bytes if type = stack.\n+     * (a particular platform might add a bias to this in generate code)\n+     *\/\n+    private final int indexOrOffset;\n@@ -43,2 +48,7 @@\n-    public VMStorage {\n-        Objects.requireNonNull(debugName);\n+    private final String debugName;\n+\n+    private VMStorage(byte type, short segmentMaskOrSize, int indexOrOffset, String debugName) {\n+        this.type = type;\n+        this.segmentMaskOrSize = segmentMaskOrSize;\n+        this.indexOrOffset = indexOrOffset;\n+        this.debugName = debugName;\n@@ -55,1 +65,41 @@\n-}\n+    public byte type() {\n+        return type;\n+    }\n+\n+    public short segmentMaskOrSize() {\n+        return segmentMaskOrSize;\n+    }\n+\n+    public int indexOrOffset() {\n+        return indexOrOffset;\n+    }\n+\n+    public String name() {\n+        return debugName;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        return (o instanceof VMStorage vmStorage)\n+                && type == vmStorage.type\n+                && segmentMaskOrSize == vmStorage.segmentMaskOrSize\n+                && indexOrOffset == vmStorage.indexOrOffset\n+                && Objects.equals(debugName, vmStorage.debugName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(type, segmentMaskOrSize, indexOrOffset, debugName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"VMStorage{\" +\n+                \"type=\" + type +\n+                \", segmentMaskOrSize=\" + segmentMaskOrSize +\n+                \", indexOrOffset=\" + indexOrOffset +\n+                \", debugName='\" + debugName + '\\'' +\n+                '}';\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/VMStorage.java","additions":66,"deletions":16,"binary":false,"changes":82,"status":"modified"}]}