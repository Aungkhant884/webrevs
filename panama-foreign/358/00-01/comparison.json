{"files":[{"patch":"@@ -95,1 +95,1 @@\n-        if (!super.equals(other)) {\n+        if (other == null || getClass() != other.getClass()) {\n@@ -98,1 +98,1 @@\n-        if (!(other instanceof ValueLayout)) {\n+        if (!super.equals(other)) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Objects;\n@@ -158,0 +159,20 @@\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (other == null || getClass() != other.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(other)) {\n+            return false;\n+        }\n+        CValueLayout that = (CValueLayout) other;\n+        return kind == that.kind;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), kind);\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/CValueLayout.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.foreign\/jdk.internal.foreign\n+ *\n+ * @run testng TestLayoutEquality\n+ *\/\n+\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.ValueLayout;\n+import jdk.internal.foreign.PlatformLayouts;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.*;\n+\n+public class TestLayoutEquality {\n+\n+    @Test(dataProvider = \"layoutConstants\")\n+    public void testReconstructedEquality(ValueLayout layout) {\n+        ValueLayout newLayout = MemoryLayout.ofValueBits(layout.bitSize(), layout.order());\n+\n+        \/\/ properties should be equal\n+        assertEquals(newLayout.bitSize(), layout.bitSize());\n+        assertEquals(newLayout.bitAlignment(), layout.bitAlignment());\n+        assertEquals(newLayout.name(), layout.name());\n+        assertEquals(newLayout.attributes().toArray().length, 0);\n+        assertEquals(layout.attributes().toArray().length, 0);\n+\n+        \/\/ but equals should return false, because one is a CValueLayout\n+        assertNotEquals(newLayout, layout);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] layoutConstants() throws ReflectiveOperationException {\n+        List<ValueLayout> testValues = new ArrayList<>();\n+\n+        addLayoutConstants(testValues, PlatformLayouts.SysV.class);\n+        addLayoutConstants(testValues, PlatformLayouts.Win64.class);\n+        addLayoutConstants(testValues, PlatformLayouts.AArch64.class);\n+\n+        return testValues.stream().map(e -> new Object[]{ e }).toArray(Object[][]::new);\n+    }\n+\n+    private static void addLayoutConstants(List<ValueLayout> testValues, Class<?> cls) throws ReflectiveOperationException {\n+        for (Field f : cls.getFields()) {\n+            if (f.getName().startsWith(\"C_\"))\n+                testValues.add((ValueLayout) f.get(null));\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/TestLayoutEquality.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}