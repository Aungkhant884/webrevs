{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Optional;\n@@ -53,1 +52,1 @@\n-    AbstractGroupLayout(Kind kind, List<MemoryLayout> elements, long byteSize, long byteAlignment, long minByteAlignment, Optional<String> name) {\n+    AbstractGroupLayout(Kind kind, List<MemoryLayout> elements, long byteSize, long byteAlignment, long minByteAlignment, String name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    private final Optional<String> name;\n+    private final String name; \/\/ Nullable\n@@ -46,1 +46,1 @@\n-    AbstractLayout(long byteSize, long byteAlignment, Optional<String> name) {\n+    AbstractLayout(long byteSize, long byteAlignment, String name) {\n@@ -49,1 +49,1 @@\n-        this.name = Objects.requireNonNull(name);\n+        this.name = name;\n@@ -53,1 +53,1 @@\n-        return dup(byteAlignment(), Optional.of(name));\n+        return dup(byteAlignment(), Objects.requireNonNull(name));\n@@ -58,1 +58,1 @@\n-        return name.isPresent() ? dup(byteAlignment(), Optional.empty()) : (L) this;\n+        return name != null ? dup(byteAlignment(), null) : (L) this;\n@@ -62,0 +62,4 @@\n+        return Optional.ofNullable(name);\n+    }\n+\n+    final String nameOrNull() {\n@@ -112,1 +116,0 @@\n-                name.equals(otherLayout.name) &&\n@@ -114,1 +117,2 @@\n-                byteAlignment == otherLayout.byteAlignment;\n+                byteAlignment == otherLayout.byteAlignment &&\n+                Objects.equals(name, otherLayout.name);\n@@ -123,1 +127,1 @@\n-    abstract L dup(long byteAlignment, Optional<String> name);\n+    abstract L dup(long byteAlignment, String name);\n@@ -126,2 +130,2 @@\n-        if (name().isPresent()) {\n-            s = String.format(\"%s(%s)\", s, name().get());\n+        if (name != null) {\n+            s = String.format(\"%s(%s)\", s, name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        this(byteSize, 1, Optional.empty());\n+        this(byteSize, 1, null);\n@@ -38,1 +38,1 @@\n-    private PaddingLayoutImpl(long byteSize, long byteAlignment, Optional<String> name) {\n+    private PaddingLayoutImpl(long byteSize, long byteAlignment, String name) {\n@@ -61,1 +61,1 @@\n-    PaddingLayoutImpl dup(long byteAlignment, Optional<String> name) {\n+    PaddingLayoutImpl dup(long byteAlignment, String name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/PaddingLayoutImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        this(elemCount, elementLayout, elementLayout.byteAlignment(), Optional.empty());\n+        this(elemCount, elementLayout, elementLayout.byteAlignment(), null);\n@@ -44,1 +44,1 @@\n-    private SequenceLayoutImpl(long elemCount, MemoryLayout elementLayout, long byteAlignment, Optional<String> name) {\n+    private SequenceLayoutImpl(long elemCount, MemoryLayout elementLayout, long byteAlignment, String name) {\n@@ -74,1 +74,1 @@\n-                new SequenceLayoutImpl(elementCount, elementLayout, byteAlignment(), name()));\n+                new SequenceLayoutImpl(elementCount, elementLayout, byteAlignment(), nameOrNull()));\n@@ -202,1 +202,1 @@\n-    SequenceLayoutImpl dup(long byteAlignment, Optional<String> name) {\n+    SequenceLayoutImpl dup(long byteAlignment, String name) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/SequenceLayoutImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    private StructLayoutImpl(List<MemoryLayout> elements, long byteSize, long byteAlignment, long minByteAlignment, Optional<String> name) {\n+    private StructLayoutImpl(List<MemoryLayout> elements, long byteSize, long byteAlignment, long minByteAlignment, String name) {\n@@ -40,1 +40,1 @@\n-    StructLayoutImpl dup(long byteAlignment, Optional<String> name) {\n+    StructLayoutImpl dup(long byteAlignment, String name) {\n@@ -54,1 +54,1 @@\n-        return new StructLayoutImpl(elements, size, align, align, Optional.empty());\n+        return new StructLayoutImpl(elements, size, align, align, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/StructLayoutImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    private UnionLayoutImpl(List<MemoryLayout> elements, long byteSize, long byteAlignment, long minByteAlignment, Optional<String> name) {\n+    private UnionLayoutImpl(List<MemoryLayout> elements, long byteSize, long byteAlignment, long minByteAlignment, String name) {\n@@ -40,1 +40,1 @@\n-    UnionLayoutImpl dup(long byteAlignment, Optional<String> name) {\n+    UnionLayoutImpl dup(long byteAlignment, String name) {\n@@ -51,1 +51,1 @@\n-        return new UnionLayoutImpl(elements, size, align, align, Optional.empty());\n+        return new UnionLayoutImpl(elements, size, align, align, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/UnionLayoutImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        AbstractValueLayout(Class<?> carrier, ByteOrder order, long byteSize, long byteAlignment, Optional<String> name) {\n+        AbstractValueLayout(Class<?> carrier, ByteOrder order, long byteSize, long byteAlignment, String name) {\n@@ -94,1 +94,1 @@\n-            return dup(order, byteAlignment(), name());\n+            return dup(order, byteAlignment(), nameOrNull());\n@@ -128,1 +128,1 @@\n-        final V dup(long byteAlignment, Optional<String> name) {\n+        final V dup(long byteAlignment, String name) {\n@@ -132,1 +132,1 @@\n-        abstract V dup(ByteOrder order, long byteAlignment, Optional<String> name);\n+        abstract V dup(ByteOrder order, long byteAlignment, String name);\n@@ -175,1 +175,1 @@\n-        private OfBooleanImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfBooleanImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -180,1 +180,1 @@\n-        OfBooleanImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfBooleanImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -185,1 +185,1 @@\n-            return new OfBooleanImpl(order, Byte.BYTES, Optional.empty());\n+            return new OfBooleanImpl(order, Byte.BYTES, null);\n@@ -191,1 +191,1 @@\n-        private OfByteImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfByteImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -196,1 +196,1 @@\n-        OfByteImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfByteImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -201,1 +201,1 @@\n-            return new OfByteImpl(order, Byte.BYTES, Optional.empty());\n+            return new OfByteImpl(order, Byte.BYTES, null);\n@@ -207,1 +207,1 @@\n-        private OfCharImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfCharImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -212,1 +212,1 @@\n-        OfCharImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfCharImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -217,1 +217,1 @@\n-            return new OfCharImpl(order, Character.BYTES, Optional.empty());\n+            return new OfCharImpl(order, Character.BYTES, null);\n@@ -223,1 +223,1 @@\n-        private OfShortImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfShortImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -228,1 +228,1 @@\n-        OfShortImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfShortImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -233,1 +233,1 @@\n-            return new OfShortImpl(order, Short.BYTES, Optional.empty());\n+            return new OfShortImpl(order, Short.BYTES, null);\n@@ -239,1 +239,1 @@\n-        private OfIntImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfIntImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -244,1 +244,1 @@\n-        OfIntImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfIntImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -249,1 +249,1 @@\n-            return new OfIntImpl(order, Integer.BYTES, Optional.empty());\n+            return new OfIntImpl(order, Integer.BYTES, null);\n@@ -255,1 +255,1 @@\n-        private OfFloatImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfFloatImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -260,1 +260,1 @@\n-        OfFloatImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfFloatImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -265,1 +265,1 @@\n-            return new OfFloatImpl(order, Float.BYTES, Optional.empty());\n+            return new OfFloatImpl(order, Float.BYTES, null);\n@@ -271,1 +271,1 @@\n-        private OfLongImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfLongImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -276,1 +276,1 @@\n-        OfLongImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfLongImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -281,1 +281,1 @@\n-            return new OfLongImpl(order, ADDRESS_SIZE_BYTES, Optional.empty());\n+            return new OfLongImpl(order, ADDRESS_SIZE_BYTES, null);\n@@ -287,1 +287,1 @@\n-        private OfDoubleImpl(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        private OfDoubleImpl(ByteOrder order, long byteAlignment, String name) {\n@@ -292,1 +292,1 @@\n-        OfDoubleImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfDoubleImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -297,1 +297,1 @@\n-            return new OfDoubleImpl(order, ADDRESS_SIZE_BYTES, Optional.empty());\n+            return new OfDoubleImpl(order, ADDRESS_SIZE_BYTES, null);\n@@ -306,1 +306,1 @@\n-        private OfAddressImpl(ByteOrder order, long byteSize, long byteAlignment, MemoryLayout targetLayout, Optional<String> name) {\n+        private OfAddressImpl(ByteOrder order, long byteSize, long byteAlignment, MemoryLayout targetLayout, String name) {\n@@ -312,1 +312,1 @@\n-        OfAddressImpl dup(ByteOrder order, long byteAlignment, Optional<String> name) {\n+        OfAddressImpl dup(ByteOrder order, long byteAlignment, String name) {\n@@ -332,1 +332,1 @@\n-            return new OfAddressImpl(order(), byteSize(), byteAlignment(), layout, name());\n+            return new OfAddressImpl(order(), byteSize(), byteAlignment(), layout, nameOrNull());\n@@ -337,1 +337,1 @@\n-            return new OfAddressImpl(order(), byteSize(), byteAlignment(), null, name());\n+            return new OfAddressImpl(order(), byteSize(), byteAlignment(), null, nameOrNull());\n@@ -346,1 +346,1 @@\n-            return new OfAddressImpl(order, ADDRESS_SIZE_BYTES, ADDRESS_SIZE_BYTES, null, Optional.empty());\n+            return new OfAddressImpl(order, ADDRESS_SIZE_BYTES, ADDRESS_SIZE_BYTES, null, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"}]}