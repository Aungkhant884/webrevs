{"files":[{"patch":"@@ -122,17 +122,10 @@\n-        try {\n-            if (start > 0) {\n-                segment = segment.asSlice(start);\n-            }\n-            long segmentSize = segment.byteSize();\n-            final long len;\n-            if (SIZE_T_IS_INT) {\n-                if (segmentSize < MAX_TRIVIAL_SIZE) {\n-                    len = (int)STRNLEN_TRIVIAL.invokeExact(segment, (int) segmentSize);\n-                } else if (segmentSize < Integer.MAX_VALUE) {\n-                    len = (int)STRNLEN.invokeExact(segment, (int) segmentSize);\n-                } else {\n-                    \/\/ There is no way to express the max size in the native method using an int so, revert\n-                    \/\/ to a Java method. It is possible to use a reduction of several STRNLEN invocations\n-                    \/\/ in a future optimization.\n-                    len = strlen_byte(segment);\n-                }\n+        if (start > 0) {\n+            segment = segment.asSlice(start);\n+        }\n+        long segmentSize = segment.byteSize();\n+        final long len;\n+        if (SIZE_T_IS_INT) {\n+            if (segmentSize < MAX_TRIVIAL_SIZE) {\n+                len = strnlen_int_trivial(segment, segmentSize);\n+            } else if (segmentSize < Integer.MAX_VALUE * 2L) { \/\/ size_t is unsigned\n+                len = strnlen_int(segment, segmentSize);\n@@ -140,3 +133,4 @@\n-                len = segmentSize < MAX_TRIVIAL_SIZE\n-                        ? (long)STRNLEN_TRIVIAL.invokeExact(segment, segmentSize)\n-                        : (long)STRNLEN.invokeExact(segment, segmentSize);\n+                \/\/ There is no way to express the max size in the native method using an int so, revert\n+                \/\/ to a Java method. It is possible to use a reduction of several STRNLEN invocations\n+                \/\/ in a future optimization.\n+                len = strlen_byte(segment);\n@@ -144,0 +138,10 @@\n+        } else {\n+            len = segmentSize < MAX_TRIVIAL_SIZE\n+                    ? strnlen_long_trivial(segment, segmentSize)\n+                    : strnlen_long(segment, segmentSize);\n+        }\n+        if (len > ArraysSupport.SOFT_MAX_ARRAY_LENGTH) {\n+            throw newIaeStringTooLarge();\n+        }\n+        return (int)len;\n+    }\n@@ -145,4 +149,33 @@\n-            if (len > ArraysSupport.SOFT_MAX_ARRAY_LENGTH) {\n-                throw new IllegalArgumentException(\"String too large\");\n-            }\n-            return (int)len;\n+    static long strnlen_int_trivial(MemorySegment segment, long size) {\n+        try {\n+            return Integer.toUnsignedLong((int)STRNLEN_TRIVIAL.invokeExact(segment, (int)size));\n+        } catch (RuntimeException | Error e) {\n+            throw e;\n+        } catch (Throwable e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    static long strnlen_int(MemorySegment segment, long size) {\n+        try {\n+            return Integer.toUnsignedLong((int)STRNLEN.invokeExact(segment, (int)size));\n+        } catch (RuntimeException | Error e) {\n+            throw e;\n+        } catch (Throwable e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    static long strnlen_long_trivial(MemorySegment segment, long size) {\n+        try {\n+            return (long)STRNLEN_TRIVIAL.invokeExact(segment, size);\n+        } catch (RuntimeException | Error e) {\n+            throw e;\n+        } catch (Throwable e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    static long strnlen_long(MemorySegment segment, long size) {\n+        try {\n+            return (long)STRNLEN.invokeExact(segment, size);\n@@ -164,1 +197,1 @@\n-        throw new IllegalArgumentException(\"String too large\");\n+        throw newIaeStringTooLarge();\n@@ -175,1 +208,1 @@\n-        throw new IllegalArgumentException(\"String too large\");\n+        throw newIaeStringTooLarge();\n@@ -186,1 +219,1 @@\n-        throw new IllegalArgumentException(\"String too large\");\n+        throw newIaeStringTooLarge();\n@@ -216,0 +249,5 @@\n+\n+    private static IllegalArgumentException newIaeStringTooLarge() {\n+        return new IllegalArgumentException(\"String too large\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":65,"deletions":27,"binary":false,"changes":92,"status":"modified"}]}