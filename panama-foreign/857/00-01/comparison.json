{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -40,1 +41,0 @@\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n@@ -50,2 +50,3 @@\n-    private static final MethodHandle STRLEN_TRIVIAL;\n-    private static final MethodHandle STRLEN;\n+    private static final MethodHandle STRNLEN_TRIVIAL;\n+    private static final MethodHandle STRNLEN;\n+    private static final boolean SIZE_T_IS_INT;\n@@ -54,0 +55,1 @@\n+        var size_t = Objects.requireNonNull(Linker.nativeLinker().canonicalLayouts().get(\"size_t\"));\n@@ -55,2 +57,2 @@\n-        var strlen = linker.defaultLookup().find(\"strlen\").orElseThrow();\n-        var description = FunctionDescriptor.of(JAVA_LONG, ADDRESS);\n+        var strnlen = linker.defaultLookup().find(\"strnlen\").orElseThrow();\n+        var description = FunctionDescriptor.of(size_t, ADDRESS, size_t);\n@@ -58,2 +60,3 @@\n-        STRLEN_TRIVIAL = linker.downcallHandle(strlen, description, Linker.Option.isTrivial());\n-        STRLEN = linker.downcallHandle(strlen, description);\n+        STRNLEN_TRIVIAL = linker.downcallHandle(strnlen, description, Linker.Option.isTrivial());\n+        STRNLEN = linker.downcallHandle(strnlen, description);\n+        SIZE_T_IS_INT = (size_t.byteSize() == Integer.BYTES);\n@@ -123,3 +126,18 @@\n-            long len = segment.byteSize() < MAX_TRIVIAL_SIZE\n-                    ? (long)STRLEN_TRIVIAL.invokeExact(segment)\n-                    : (long)STRLEN.invokeExact(segment);\n+            long segmentSize = segment.byteSize();\n+            final long len;\n+            if (SIZE_T_IS_INT) {\n+                if (segmentSize < MAX_TRIVIAL_SIZE) {\n+                    len = (int)STRNLEN_TRIVIAL.invokeExact(segment, (int) segmentSize);\n+                } else if (segmentSize < Integer.MAX_VALUE) {\n+                    len = (int)STRNLEN.invokeExact(segment, (int) segmentSize);\n+                } else {\n+                    \/\/ There is no way to express the max size in the native method using an int so, revert\n+                    \/\/ to a Java method. It is possible to use a reduction of several STRNLEN invocations\n+                    \/\/ in a future optimization.\n+                    len = strlen_byte(segment);\n+                }\n+            } else {\n+                len = segmentSize < MAX_TRIVIAL_SIZE\n+                        ? (long)STRNLEN_TRIVIAL.invokeExact(segment, segmentSize)\n+                        : (long)STRNLEN.invokeExact(segment, segmentSize);\n+            }\n@@ -127,2 +145,1 @@\n-            \/\/ On platforms where `size_t` maps to an `int`, we must check if `len < 0`\n-            if (len < 0 || len > ArraysSupport.SOFT_MAX_ARRAY_LENGTH) {\n+            if (len > ArraysSupport.SOFT_MAX_ARRAY_LENGTH) {\n@@ -132,0 +149,2 @@\n+        } catch (RuntimeException | Error e) {\n+            throw e;\n@@ -137,0 +156,11 @@\n+    private static int strlen_byte(MemorySegment segment) {\n+        \/\/ iterate until overflow (String can only hold a byte[], whose length can be expressed as an int)\n+        for (int offset = 0; offset >= 0; offset += 2) {\n+            short curr = segment.get(JAVA_SHORT, offset);\n+            if (curr == 0) {\n+                return offset;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"String too large\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":42,"deletions":12,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -252,0 +252,17 @@\n+    @Test\n+    public void segmentationFault() {\n+        for (int i = 1; i < 18; i++) {\n+            var size = 1 << i;\n+            try (var arena = Arena.ofConfined()) {\n+                var seg = arena.allocate(size, size);\n+                seg.fill((byte)1);\n+                try {\n+                    var s = seg.getString(0);\n+                    System.out.println(\"s.length() = \" + s.length());\n+                } catch (IndexOutOfBoundsException e) {\n+                    \/\/ we will end up here if strlen finds a zero outside the MS\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}