{"files":[{"patch":"@@ -92,16 +92,1 @@\n-                    .withOwnerThread(null)\n-                    .withCleanupAction(new SymbolHolder(s))\n-            )).orElse(null);\n-    }\n-\n-    static class SymbolHolder implements Runnable {\n-        LibraryLookup.Symbol symbol;\n-\n-        SymbolHolder(LibraryLookup.Symbol symbol) {\n-            this.symbol = symbol;\n-        }\n-\n-        @Override\n-        public void run() {\n-            \/\/ do nothing\n-        }\n+                    .withOwnerThread(null))).orElse(null);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -63,18 +63,3 @@\n-            return lookup(LIBRARIES, name).map(s ->\n-                nonCloseableNonTransferableSegment(s.address().asSegmentRestricted(layout.byteSize())\n-                        .withOwnerThread(null)\n-                        .withCleanupAction(new SymbolHolder(s))\n-                )).orElse(null);\n-    }\n-\n-    static class SymbolHolder implements Runnable {\n-        LibraryLookup.Symbol symbol;\n-\n-        SymbolHolder(LibraryLookup.Symbol symbol) {\n-            this.symbol = symbol;\n-        }\n-\n-        @Override\n-        public void run() {\n-            \/\/ do nothing\n-        }\n+        return lookup(LIBRARIES, name).map(s ->\n+            nonCloseableNonTransferableSegment(s.address().asSegmentRestricted(layout.byteSize())\n+                    .withOwnerThread(null))).orElse(null);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"}]}