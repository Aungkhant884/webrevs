{"files":[{"patch":"@@ -96,0 +96,1 @@\n+    @ForceInline\n@@ -109,0 +110,1 @@\n+    @ForceInline\n@@ -126,0 +128,1 @@\n+    @ForceInline\n@@ -142,0 +145,1 @@\n+    @ForceInline\n@@ -158,0 +162,1 @@\n+    @ForceInline\n@@ -174,0 +179,1 @@\n+    @ForceInline\n@@ -190,0 +196,1 @@\n+    @ForceInline\n@@ -206,0 +213,1 @@\n+    @ForceInline\n@@ -222,0 +230,1 @@\n+    @ForceInline\n@@ -238,0 +247,1 @@\n+    @ForceInline\n@@ -254,0 +264,1 @@\n+    @ForceInline\n@@ -270,0 +281,1 @@\n+    @ForceInline\n@@ -286,0 +298,1 @@\n+    @ForceInline\n@@ -302,0 +315,1 @@\n+    @ForceInline\n@@ -319,0 +333,1 @@\n+    @ForceInline\n@@ -337,0 +352,1 @@\n+    @ForceInline\n@@ -357,0 +373,1 @@\n+    @ForceInline\n@@ -377,0 +394,1 @@\n+    @ForceInline\n@@ -397,0 +415,1 @@\n+    @ForceInline\n@@ -417,0 +436,1 @@\n+    @ForceInline\n@@ -437,0 +457,1 @@\n+    @ForceInline\n@@ -457,0 +478,1 @@\n+    @ForceInline\n@@ -477,0 +499,1 @@\n+    @ForceInline\n@@ -497,0 +520,1 @@\n+    @ForceInline\n@@ -517,0 +541,1 @@\n+    @ForceInline\n@@ -537,0 +562,1 @@\n+    @ForceInline\n@@ -557,0 +583,1 @@\n+    @ForceInline\n@@ -577,0 +604,1 @@\n+    @ForceInline\n@@ -595,0 +623,1 @@\n+    @ForceInline\n@@ -610,0 +639,1 @@\n+    @ForceInline\n@@ -625,0 +655,1 @@\n+    @ForceInline\n@@ -640,0 +671,1 @@\n+    @ForceInline\n@@ -655,0 +687,1 @@\n+    @ForceInline\n@@ -670,0 +703,1 @@\n+    @ForceInline\n@@ -685,0 +719,1 @@\n+    @ForceInline\n@@ -700,0 +735,1 @@\n+    @ForceInline\n@@ -715,0 +751,1 @@\n+    @ForceInline\n@@ -730,0 +767,1 @@\n+    @ForceInline\n@@ -745,0 +783,1 @@\n+    @ForceInline\n@@ -760,0 +799,1 @@\n+    @ForceInline\n@@ -775,0 +815,1 @@\n+    @ForceInline\n@@ -790,0 +831,1 @@\n+    @ForceInline\n@@ -805,0 +847,1 @@\n+    @ForceInline\n@@ -820,0 +863,1 @@\n+    @ForceInline\n@@ -836,0 +880,1 @@\n+    @ForceInline\n@@ -852,0 +897,1 @@\n+    @ForceInline\n@@ -868,0 +914,1 @@\n+    @ForceInline\n@@ -884,0 +931,1 @@\n+    @ForceInline\n@@ -900,0 +948,1 @@\n+    @ForceInline\n@@ -916,0 +965,1 @@\n+    @ForceInline\n@@ -932,0 +982,1 @@\n+    @ForceInline\n@@ -948,0 +999,1 @@\n+    @ForceInline\n@@ -964,0 +1016,1 @@\n+    @ForceInline\n@@ -980,0 +1033,1 @@\n+    @ForceInline\n@@ -996,0 +1050,1 @@\n+    @ForceInline\n@@ -1012,0 +1067,1 @@\n+    @ForceInline\n@@ -1028,0 +1084,1 @@\n+    @ForceInline\n@@ -1044,0 +1101,1 @@\n+    @ForceInline\n@@ -1060,0 +1118,1 @@\n+    @ForceInline\n@@ -1076,0 +1135,1 @@\n+    @ForceInline\n@@ -1092,0 +1152,1 @@\n+    @ForceInline\n@@ -1108,0 +1169,1 @@\n+    @ForceInline\n@@ -1124,0 +1186,1 @@\n+    @ForceInline\n@@ -1140,0 +1203,1 @@\n+    @ForceInline\n@@ -1156,0 +1220,1 @@\n+    @ForceInline\n@@ -1172,0 +1237,1 @@\n+    @ForceInline\n@@ -1188,0 +1254,1 @@\n+    @ForceInline\n@@ -1204,0 +1271,1 @@\n+    @ForceInline\n@@ -1220,0 +1288,1 @@\n+    @ForceInline\n@@ -1236,0 +1305,1 @@\n+    @ForceInline\n@@ -1253,0 +1323,1 @@\n+    @ForceInline\n@@ -1270,0 +1341,1 @@\n+    @ForceInline\n@@ -1287,0 +1359,1 @@\n+    @ForceInline\n@@ -1304,0 +1377,1 @@\n+    @ForceInline\n@@ -1321,0 +1395,1 @@\n+    @ForceInline\n@@ -1338,0 +1413,1 @@\n+    @ForceInline\n@@ -1355,0 +1431,1 @@\n+    @ForceInline\n@@ -1372,0 +1449,1 @@\n+    @ForceInline\n@@ -1389,0 +1467,1 @@\n+    @ForceInline\n@@ -1406,0 +1485,1 @@\n+    @ForceInline\n@@ -1423,0 +1503,1 @@\n+    @ForceInline\n@@ -1440,0 +1521,1 @@\n+    @ForceInline\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+import static jdk.incubator.foreign.MemoryAccess.*;\n+import jdk.incubator.foreign.*;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import sun.misc.Unsafe;\n+import java.util.concurrent.TimeUnit;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.lang.reflect.Field;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(3)\n+public class UnrolledAccess {\n+\n+    static final Unsafe U = Utils.unsafe;\n+\n+    final static int SIZE = 1024;\n+\n+    static final VarHandle LONG_HANDLE = MemoryLayout.ofSequence(SIZE, MemoryLayouts.JAVA_LONG)\n+            .varHandle(long.class, MemoryLayout.PathElement.sequenceElement());\n+\n+    @State(Scope.Benchmark)\n+    public static class Data {\n+\n+        final double[] inputArray;\n+        final double[] outputArray;\n+        final long inputAddress;\n+        final long outputAddress;\n+        final MemorySegment inputSegment;\n+        final MemorySegment outputSegment;\n+\n+\n+        public Data() {\n+            this.inputArray = new double[SIZE];\n+            this.outputArray = new double[SIZE];\n+            this.inputAddress = U.allocateMemory(8 * SIZE);\n+            this.outputAddress = U.allocateMemory(8 * SIZE);\n+            this.inputSegment = MemoryAddress.ofLong(inputAddress).asSegmentRestricted(8*SIZE);\n+            this.outputSegment = MemoryAddress.ofLong(outputAddress).asSegmentRestricted(8*SIZE);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void unsafe_loop(Data state) {\n+        final long ia = state.inputAddress;\n+        final long oa = state.outputAddress;\n+        for(int i = 0; i < SIZE; i+=4) {\n+            U.putLong(oa + 8*i, U.getLong(ia + 8*i) + U.getLong(oa + 8*i));\n+            U.putLong(oa + 8*(i+1), U.getLong(ia + 8*(i+1)) + U.getLong(oa + 8*(i+1)));\n+            U.putLong(oa + 8*(i+2), U.getLong(ia + 8*(i+2)) + U.getLong(oa + 8*(i+2)));\n+            U.putLong(oa + 8*(i+3), U.getLong(ia + 8*(i+3)) + U.getLong(oa + 8*(i+3)));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void handle_loop(Data state) {\n+        final MemorySegment is = state.inputSegment;\n+        final MemorySegment os = state.outputSegment;\n+\n+        for(int i = 0; i < SIZE; i+=4) {\n+            LONG_HANDLE.set(os, (long) (i),   (long) LONG_HANDLE.get(is, (long) (i))   + (long) LONG_HANDLE.get(os, (long) (i)));\n+            LONG_HANDLE.set(os, (long) (i+1), (long) LONG_HANDLE.get(is, (long) (i+1)) + (long) LONG_HANDLE.get(os, (long) (i+1)));\n+            LONG_HANDLE.set(os, (long) (i+2), (long) LONG_HANDLE.get(is, (long) (i+2)) + (long) LONG_HANDLE.get(os, (long) (i+2)));\n+            LONG_HANDLE.set(os, (long) (i+3), (long) LONG_HANDLE.get(is, (long) (i+3)) + (long) LONG_HANDLE.get(os, (long) (i+3)));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void static_handle_loop(Data state) {\n+        final MemorySegment is = state.inputSegment;\n+        final MemorySegment os = state.outputSegment;\n+\n+        for(int i = 0; i < SIZE; i+=4) {\n+            setLongAtIndex(os, i,getLongAtIndex(is, i) + MemoryAccess.getLongAtIndex(os, i));\n+            setLongAtIndex(os, i+1,getLongAtIndex(is, i+1) + getLongAtIndex(os, i+1));\n+            setLongAtIndex(os, i+2,getLongAtIndex(is, i+2) + getLongAtIndex(os, i+2));\n+            setLongAtIndex(os, i+3,getLongAtIndex(is, i+3) + getLongAtIndex(os, i+3));\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/UnrolledAccess.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}