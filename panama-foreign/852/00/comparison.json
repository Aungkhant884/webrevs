{"files":[{"patch":"@@ -79,0 +79,6 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    AddressLayout withoutByteAlignment();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AddressLayout.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,0 +75,7 @@\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    GroupLayout withoutByteAlignment();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -336,0 +336,8 @@\n+    \/**\n+     * {@return a memory layout with the same characteristics as this layout, but with an alignment\n+     * constraint of 1 byte (unaligned)}\n+     *\n+     * @see MemoryLayout#byteAlignment()\n+     *\/\n+    MemoryLayout withoutByteAlignment();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,0 +60,6 @@\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    PaddingLayout withoutByteAlignment();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/PaddingLayout.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -157,0 +157,6 @@\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    SequenceLayout withoutByteAlignment();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,0 +60,7 @@\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    StructLayout withoutByteAlignment();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/StructLayout.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -60,0 +60,7 @@\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    UnionLayout withoutByteAlignment();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/UnionLayout.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -96,0 +96,6 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    ValueLayout withoutByteAlignment();\n+\n@@ -145,0 +151,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfBoolean withoutByteAlignment();\n+\n@@ -181,0 +193,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfByte withoutByteAlignment();\n+\n@@ -218,0 +236,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfChar withoutByteAlignment();\n+\n@@ -255,0 +279,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfShort withoutByteAlignment();\n+\n@@ -292,0 +322,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfInt withoutByteAlignment();\n+\n@@ -328,0 +364,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfFloat withoutByteAlignment();\n+\n@@ -365,0 +407,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfLong withoutByteAlignment();\n+\n@@ -402,0 +450,6 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        OfDouble withoutByteAlignment();\n+\n@@ -471,1 +525,1 @@\n-     * ADDRESS.withByteAlignment(1);\n+     * ADDRESS.withoutByteAlignment();\n@@ -476,1 +530,1 @@\n-    AddressLayout ADDRESS_UNALIGNED = ADDRESS.withByteAlignment(1);\n+    AddressLayout ADDRESS_UNALIGNED = ADDRESS.withoutByteAlignment();\n@@ -483,1 +537,1 @@\n-     * JAVA_CHAR.withByteAlignment(1);\n+     * JAVA_CHAR.withoutByteAlignment();\n@@ -488,1 +542,1 @@\n-    OfChar JAVA_CHAR_UNALIGNED = JAVA_CHAR.withByteAlignment(1);\n+    OfChar JAVA_CHAR_UNALIGNED = JAVA_CHAR.withoutByteAlignment();\n@@ -495,1 +549,1 @@\n-     * JAVA_SHORT.withByteAlignment(1);\n+     * JAVA_SHORT.withoutByteAlignment();\n@@ -500,1 +554,1 @@\n-    OfShort JAVA_SHORT_UNALIGNED = JAVA_SHORT.withByteAlignment(1);\n+    OfShort JAVA_SHORT_UNALIGNED = JAVA_SHORT.withoutByteAlignment();\n@@ -507,1 +561,1 @@\n-     * JAVA_INT.withByteAlignment(1);\n+     * JAVA_INT.withoutByteAlignment();\n@@ -512,1 +566,1 @@\n-    OfInt JAVA_INT_UNALIGNED = JAVA_INT.withByteAlignment(1);\n+    OfInt JAVA_INT_UNALIGNED = JAVA_INT.withoutByteAlignment();\n@@ -519,1 +573,1 @@\n-     * JAVA_LONG.withByteAlignment(1);\n+     * JAVA_LONG.withoutByteAlignment();\n@@ -524,1 +578,1 @@\n-    OfLong JAVA_LONG_UNALIGNED = JAVA_LONG.withByteAlignment(1);\n+    OfLong JAVA_LONG_UNALIGNED = JAVA_LONG.withoutByteAlignment();\n@@ -531,1 +585,1 @@\n-     * JAVA_FLOAT.withByteAlignment(1);\n+     * JAVA_FLOAT.withoutByteAlignment();\n@@ -536,1 +590,1 @@\n-    OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withByteAlignment(1);\n+    OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withoutByteAlignment();\n@@ -543,1 +597,1 @@\n-     * JAVA_DOUBLE.withByteAlignment(1);\n+     * JAVA_DOUBLE.withoutByteAlignment();\n@@ -548,1 +602,1 @@\n-    OfDouble JAVA_DOUBLE_UNALIGNED = JAVA_DOUBLE.withByteAlignment(1);\n+    OfDouble JAVA_DOUBLE_UNALIGNED = JAVA_DOUBLE.withoutByteAlignment();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":68,"deletions":14,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-        ValueLayout accessedLayout = enclosing != null ? valueLayout.withByteAlignment(1) : valueLayout;\n+        ValueLayout accessedLayout = enclosing != null ? valueLayout.withoutByteAlignment() : valueLayout;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,4 @@\n+    public final L withoutByteAlignment() {\n+        return withByteAlignment(1);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+                .withoutByteAlignment()\n@@ -62,0 +63,1 @@\n+                .withoutByteAlignment()\n@@ -72,0 +74,1 @@\n+                .withoutByteAlignment()\n@@ -82,0 +85,1 @@\n+                .withoutByteAlignment()\n@@ -92,0 +96,1 @@\n+                .withoutByteAlignment()\n@@ -102,0 +107,1 @@\n+                .withoutByteAlignment()\n@@ -112,0 +118,1 @@\n+                .withoutByteAlignment()\n@@ -122,0 +129,1 @@\n+                .withoutByteAlignment()\n@@ -132,0 +140,1 @@\n+                .withoutByteAlignment()\n@@ -142,0 +151,1 @@\n+                .withoutByteAlignment()\n@@ -160,0 +170,1 @@\n+                .withoutByteAlignment()\n@@ -171,0 +182,1 @@\n+                .withoutByteAlignment()\n@@ -182,0 +194,1 @@\n+                .withoutByteAlignment()\n@@ -193,0 +206,1 @@\n+                .withoutByteAlignment()\n","filename":"test\/jdk\/java\/foreign\/MemoryLayoutTypeRetentionTest.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -339,0 +339,11 @@\n+    @Test(dataProvider=\"layoutsAndAlignments\")\n+    public void testWithoutAlignment(MemoryLayout layout, long byteAlign) {\n+        if ((layout instanceof GroupLayout || layout instanceof SequenceLayout) && byteAlign != 1) {\n+            \/\/ Group and sequence layouts are not generally able to be unaligned\n+            return;\n+        }\n+        layout = layout.withoutByteAlignment();\n+        assertEquals(layout.byteAlignment(), 1);\n+\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}