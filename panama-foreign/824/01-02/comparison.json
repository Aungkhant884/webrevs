{"files":[{"patch":"@@ -52,0 +52,1 @@\n+    final long minBitAlignment;\n@@ -53,6 +54,2 @@\n-    AbstractGroupLayout(Kind kind, List<MemoryLayout> elements) {\n-        this(kind, elements, kind.alignof(elements), Optional.empty());\n-    }\n-\n-    AbstractGroupLayout(Kind kind, List<MemoryLayout> elements, long bitAlignment, Optional<String> name) {\n-        super(kind.sizeof(elements), bitAlignment, name); \/\/ Subclassing creates toctou problems here\n+    AbstractGroupLayout(Kind kind, List<MemoryLayout> elements, long bitSize, long bitAlignment, long minBitAlignment, Optional<String> name) {\n+        super(bitSize, bitAlignment, name); \/\/ Subclassing creates toctou problems here\n@@ -61,0 +58,1 @@\n+        this.minBitAlignment = minBitAlignment;\n@@ -88,1 +86,1 @@\n-        if (bitAlignment < kind.alignof(elements)) {\n+        if (bitAlignment < minBitAlignment) {\n@@ -116,1 +114,1 @@\n-        return bitAlignment() == kind.alignof(elements);\n+        return bitAlignment() == minBitAlignment;\n@@ -126,1 +124,1 @@\n-        STRUCT(\"\", Math::addExact),\n+        STRUCT(\"\"),\n@@ -130,1 +128,1 @@\n-        UNION(\"|\", Math::max);\n+        UNION(\"|\");\n@@ -133,1 +131,0 @@\n-        final LongBinaryOperator sizeOp;\n@@ -135,1 +132,1 @@\n-        Kind(String delimTag, LongBinaryOperator sizeOp) {\n+        Kind(String delimTag) {\n@@ -137,19 +134,0 @@\n-            this.sizeOp = sizeOp;\n-        }\n-\n-        long sizeof(List<MemoryLayout> elems) {\n-            long size = 0;\n-            for (MemoryLayout elem : elems) {\n-                if (this == STRUCT && (size % elem.bitAlignment() != 0)) {\n-                    throw new IllegalArgumentException(\"Invalid alignment constraint for member layout: \" + elem);\n-                }\n-                size = sizeOp.applyAsLong(size, elem.bitSize());\n-            }\n-            return size;\n-        }\n-\n-        long alignof(List<MemoryLayout> elems) {\n-            return elems.stream()\n-                    .mapToLong(MemoryLayout::bitAlignment)\n-                    .max() \/\/ max alignment in case we have member layouts\n-                    .orElse(8); \/\/ or minimal alignment if no member layout is given\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":9,"deletions":31,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -35,6 +35,2 @@\n-    private StructLayoutImpl(List<MemoryLayout> elements) {\n-        super(Kind.STRUCT, elements);\n-    }\n-\n-    private StructLayoutImpl(List<MemoryLayout> elements, long bitAlignment, Optional<String> name) {\n-        super(Kind.STRUCT, elements, bitAlignment, name);\n+    private StructLayoutImpl(List<MemoryLayout> elements, long bitSize, long bitAlignment, long minBitAlignment, Optional<String> name) {\n+        super(Kind.STRUCT, elements, bitSize, bitAlignment, minBitAlignment, name);\n@@ -45,1 +41,1 @@\n-        return new StructLayoutImpl(memberLayouts(), bitAlignment, name);\n+        return new StructLayoutImpl(memberLayouts(), bitSize(), bitAlignment, minBitAlignment, name);\n@@ -49,1 +45,10 @@\n-        return new StructLayoutImpl(elements);\n+        long size = 0;\n+        long align = 8;\n+        for (MemoryLayout elem : elements) {\n+            if (size % elem.bitAlignment() != 0) {\n+                throw new IllegalArgumentException(\"Invalid alignment constraint for member layout: \" + elem);\n+            }\n+            size = Math.addExact(size, elem.bitSize());\n+            align = Math.max(align, elem.bitAlignment());\n+        }\n+        return new StructLayoutImpl(elements, size, align, align, Optional.empty());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/StructLayoutImpl.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -35,6 +35,2 @@\n-    private UnionLayoutImpl(List<MemoryLayout> elements) {\n-        super(Kind.UNION, elements);\n-    }\n-\n-    private UnionLayoutImpl(List<MemoryLayout> elements, long bitAlignment, Optional<String> name) {\n-        super(Kind.UNION, elements, bitAlignment, name);\n+    private UnionLayoutImpl(List<MemoryLayout> elements, long bitSize, long bitAlignment, long minBitAlignment, Optional<String> name) {\n+        super(Kind.UNION, elements, bitSize, bitAlignment, minBitAlignment, name);\n@@ -45,1 +41,1 @@\n-        return new UnionLayoutImpl(memberLayouts(), bitAlignment, name);\n+        return new UnionLayoutImpl(memberLayouts(), bitSize(), bitAlignment, minBitAlignment, name);\n@@ -49,1 +45,7 @@\n-        return new UnionLayoutImpl(elements);\n+        long size = 0;\n+        long align = 8;\n+        for (MemoryLayout elem : elements) {\n+            size = Math.max(size, elem.bitSize());\n+            align = Math.max(align, elem.bitAlignment());\n+        }\n+        return new UnionLayoutImpl(elements, size, align, align, Optional.empty());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/UnionLayoutImpl.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}