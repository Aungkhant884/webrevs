{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include <psapi.h>\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -132,0 +132,13 @@\n+\n+    \/**\n+     * Looks up a symbol with the given name in the native libraries loaded by the caller's classloader.\n+     *\n+     * <p>\n+     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n+     * Restricted method are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n+     *\n+     * @param name the symbol name.\n+     * @return the memory address associated with the library symbol (if any).\n+     *\/\n@@ -136,4 +149,0 @@\n-         SecurityManager security = System.getSecurityManager();\n-         if (security != null) {\n-             security.checkPermission(new RuntimePermission(\"java.foreign.findNative\"));\n-         }\n@@ -159,1 +168,1 @@\n-     * @see LibraryLookup#lookup(String)\n+     * @see CLinker#findNative(String)\n@@ -181,1 +190,1 @@\n-     * @see LibraryLookup#lookup(String)\n+     * @see CLinker#findNative(String)\n@@ -207,1 +216,1 @@\n-     * @see LibraryLookup#lookup(String)\n+     * @see CLinker#findNative(String)\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -99,3 +99,2 @@\n- * The key abstractions introduced to support foreign function access are {@link jdk.incubator.foreign.LibraryLookup} and {@link jdk.incubator.foreign.CLinker}.\n- * The former is used to load foreign libraries, as well as to lookup symbols inside said libraries; the latter\n- * provides linking capabilities which allow to model foreign functions as {@link java.lang.invoke.MethodHandle} instances,\n+ * The key abstractions introduced to support foreign function access is {@link jdk.incubator.foreign.CLinker}.\n+ * CLinker provides linking capabilities which allow to model foreign functions as {@link java.lang.invoke.MethodHandle} instances,\n@@ -110,1 +109,1 @@\n-        LibraryLookup.ofDefault().lookup(\"strlen\").get(),\n+        CLinker.findNative(\"strlen\").get(),\n@@ -121,1 +120,1 @@\n- * Here, we lookup the {@code strlen} symbol in the <em>default<\/em> library lookup (see {@link jdk.incubator.foreign.LibraryLookup#ofDefault()}).\n+ * Here, we lookup the {@code strlen} symbol. C runtime library should have been loaded earlier using {@link System#loadLibrary(String)}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import java.nio.file.Path;\n@@ -418,0 +419,9 @@\n+        \/\/ FIXME: This should go away. This is temporary hack to get testing on Windows going.\n+        \/\/ After fix for 8266627, this whole section will be removed.\n+\n+        static {\n+             if (linker instanceof Windowsx64Linker) {\n+                 System.load(Path.of(System.getenv(\"SystemRoot\"), \"System32\", \"msvcrt.dll\").toAbsolutePath().toString());\n+             }\n+        }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/CallOverheadConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.incubator.foreign.LibraryLookup;\n@@ -94,1 +93,1 @@\n-        LibraryLookup ll = LibraryLookup.ofLibrary(\"CallOverhead\");\n+        System.loadLibrary(\"CallOverhead\");\n@@ -96,1 +95,1 @@\n-            func_addr = ll.lookup(\"func\").orElseThrow();\n+            func_addr = CLinker.findNative(\"func\").orElseThrow();\n@@ -105,1 +104,1 @@\n-            identity_addr = ll.lookup(\"identity\").orElseThrow();\n+            identity_addr = CLinker.findNative(\"identity\").orElseThrow();\n@@ -113,1 +112,1 @@\n-        identity_struct_addr = ll.lookup(\"identity_struct\").orElseThrow();\n+        identity_struct_addr = CLinker.findNative(\"identity_struct\").orElseThrow();\n@@ -119,1 +118,1 @@\n-        identity_memory_address_addr = ll.lookup(\"identity_memory_address\").orElseThrow();\n+        identity_memory_address_addr = CLinker.findNative(\"identity_memory_address\").orElseThrow();\n@@ -125,1 +124,1 @@\n-        args1_addr = ll.lookup(\"args1\").orElseThrow();\n+        args1_addr = CLinker.findNative(\"args1\").orElseThrow();\n@@ -131,1 +130,1 @@\n-        args2_addr = ll.lookup(\"args2\").orElseThrow();\n+        args2_addr = CLinker.findNative(\"args2\").orElseThrow();\n@@ -137,1 +136,1 @@\n-        args3_addr = ll.lookup(\"args3\").orElseThrow();\n+        args3_addr = CLinker.findNative(\"args3\").orElseThrow();\n@@ -143,1 +142,1 @@\n-        args4_addr = ll.lookup(\"args4\").orElseThrow();\n+        args4_addr = CLinker.findNative(\"args4\").orElseThrow();\n@@ -149,1 +148,1 @@\n-        args5_addr = ll.lookup(\"args5\").orElseThrow();\n+        args5_addr = CLinker.findNative(\"args5\").orElseThrow();\n@@ -155,1 +154,1 @@\n-        args10_addr = ll.lookup(\"args10\").orElseThrow();\n+        args10_addr = CLinker.findNative(\"args10\").orElseThrow();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/CallOverheadHelper.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/CallOverheadVirtual.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.foreign.LibraryLookup;\n@@ -59,1 +58,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n@@ -81,1 +80,0 @@\n-        LibraryLookup lookup = LibraryLookup.ofDefault();\n@@ -83,1 +81,1 @@\n-        STRLEN = abi.downcallHandle(lookup.lookup(\"strlen\").get(),\n+        STRLEN = abi.downcallHandle(CLinker.findNative(\"strlen_raw\").get(),\n@@ -86,1 +84,1 @@\n-        STRLEN_TRIVIAL = abi.downcallHandle(lookup.lookup(\"strlen\").get(),\n+        STRLEN_TRIVIAL = abi.downcallHandle(CLinker.findNative(\"strlen_raw\").get(),\n@@ -89,1 +87,1 @@\n-        MALLOC_TRIVIAL = abi.downcallHandle(lookup.lookup(\"malloc\").get(),\n+        MALLOC_TRIVIAL = abi.downcallHandle(CLinker.findNative(\"malloc_raw\").get(),\n@@ -93,1 +91,1 @@\n-        FREE_TRIVIAL = abi.downcallHandle(lookup.lookup(\"free\").get(),\n+        FREE_TRIVIAL = abi.downcallHandle(CLinker.findNative(\"free_raw\").get(),\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/StrLenTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.incubator.foreign.LibraryLookup;\n@@ -83,1 +82,1 @@\n-            LibraryLookup ll = LibraryLookup.ofLibrary(\"Upcalls\");\n+            System.loadLibrary(\"Upcalls\");\n@@ -89,1 +88,1 @@\n-                blank = linkFunc(ll, name, mt, fd);\n+                blank = linkFunc(name, mt, fd);\n@@ -97,1 +96,1 @@\n-                identity = linkFunc(ll, name, mt, fd);\n+                identity = linkFunc(name, mt, fd);\n@@ -107,1 +106,1 @@\n-                args5 = linkFunc(ll, name, mt, fd);\n+                args5 = linkFunc(name, mt, fd);\n@@ -119,1 +118,1 @@\n-                args10 = linkFunc(ll, name, mt, fd);\n+                args10 = linkFunc(name, mt, fd);\n@@ -127,1 +126,1 @@\n-    static MethodHandle linkFunc(LibraryLookup ll, String name, MethodType baseType, FunctionDescriptor baseDesc) {\n+    static MethodHandle linkFunc(String name, MethodType baseType, FunctionDescriptor baseDesc) {\n@@ -129,1 +128,1 @@\n-            ll.lookup(name).orElseThrow(),\n+            CLinker.findNative(name).orElseThrow(),\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.incubator.foreign.LibraryLookup;\n@@ -57,1 +56,3 @@\n-    static final LibraryLookup lookup = LibraryLookup.ofLibrary(\"VaList\");\n+    static {\n+        System.loadLibrary(\"VaList\");\n+    }\n@@ -63,1 +64,1 @@\n-        MH_ellipsis = linker.downcallHandle(lookup.lookup(\"ellipsis\").get(),\n+        MH_ellipsis = linker.downcallHandle(CLinker.findNative(\"ellipsis\").get(),\n@@ -66,1 +67,1 @@\n-        MH_vaList = linker.downcallHandle(lookup.lookup(\"vaList\").get(),\n+        MH_vaList = linker.downcallHandle(CLinker.findNative(\"vaList\").get(),\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,6 @@\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n@@ -36,0 +42,12 @@\n+\n+EXPORT int strlen_raw(const char *str) {\n+    return (int)strlen(str);\n+}\n+\n+EXPORT void* malloc_raw(size_t size) {\n+    return malloc(size);\n+}\n+\n+EXPORT void free_raw(void* ptr) {\n+    return free(ptr);\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libStrLen.c","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.incubator.foreign.LibraryLookup;\n@@ -54,1 +53,1 @@\n-        LibraryLookup lookup = LibraryLookup.ofLibrary(\"Point\");\n+        System.loadLibrary(\"Point\");\n@@ -56,1 +55,1 @@\n-            lookup.lookup(\"distance\").get(),\n+            CLinker.findNative(\"distance\").get(),\n@@ -61,1 +60,1 @@\n-            lookup.lookup(\"distance_ptrs\").get(),\n+                CLinker.findNative(\"distance_ptrs\").get(),\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}