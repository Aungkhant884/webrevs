{"files":[{"patch":"@@ -568,3 +568,1 @@\n-    default MemorySegment asSlice(long offset) {\n-        return asSlice(offset, byteSize() - offset);\n-    }\n+    MemorySegment asSlice(long offset);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -287,0 +287,19 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testSequenceElement() {\n+        SequenceLayout layout = MemoryLayout.sequenceLayout(10, JAVA_INT);\n+        \/\/ Step must be != 0\n+        PathElement.sequenceElement(3, 0);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void test() {\n+        \/\/ Strings have no value layout\n+        MemoryLayout.valueLayout(String.class, ByteOrder.LITTLE_ENDIAN);\n+    }\n+\n+    @Test(dataProvider = \"validCarriers\")\n+    public void testValueLayout(Class<?> carrier) {\n+        ValueLayout layout = MemoryLayout.valueLayout(carrier, ByteOrder.nativeOrder());\n+        assertEquals(layout.carrier(), carrier);\n+    }\n+\n@@ -397,0 +416,17 @@\n+    @DataProvider(name = \"valueCarriers\")\n+    public Object[][] validCarriers() {\n+        return Stream.of(\n+                        boolean.class,\n+                        byte.class,\n+                        char.class,\n+                        short.class,\n+                        int.class,\n+                        long.class,\n+                        float.class,\n+                        double.class,\n+                        MemorySegment.class\n+                )\n+                .map(l -> new Object[]{l})\n+                .toArray(Object[][]::new);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}