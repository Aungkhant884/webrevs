{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -42,1 +40,0 @@\n-import java.util.Optional;\n@@ -46,1 +43,0 @@\n-import static sun.security.action.GetIntegerAction.privilegedGetProperty;\n@@ -123,1 +119,1 @@\n-    int ERR_UNCAUGHT_EXCEPTION = privilegedGetProperty(\"jdk.incubator.foreign.uncaught_exception_code\", 1);\n+    int ERR_UNCAUGHT_EXCEPTION = 1;\n@@ -239,3 +235,3 @@\n-     * Any exceptions that occur during an upcall should be handled during the upcall. The target method handle\n-     * should not throw any exceptions. If the target method handle does throw an exception, it will be handle by\n-     * calling {@link System#exit System.exit(ERR_UNCAUGHT_EXCEPTION)}. (See {@link #ERR_UNCAUGHT_EXCEPTION})\n+     * The target method handle should not throw any exceptions. If the target method handle does throw an exception,\n+     * it will be handle by calling {@link System#exit System.exit(ERR_UNCAUGHT_EXCEPTION)}.\n+     * (See {@link #ERR_UNCAUGHT_EXCEPTION})\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.io.BufferedReader;\n@@ -40,0 +41,2 @@\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n@@ -41,1 +44,0 @@\n-import java.util.concurrent.ThreadLocalRandom;\n@@ -43,0 +45,1 @@\n+import static jdk.incubator.foreign.CLinker.ERR_UNCAUGHT_EXCEPTION;\n@@ -44,0 +47,1 @@\n+import static org.testng.Assert.fail;\n@@ -60,2 +64,0 @@\n-        int exitCode = ThreadLocalRandom.current().nextInt();\n-\n@@ -63,1 +65,0 @@\n-            .inheritIO()\n@@ -74,1 +75,0 @@\n-                \"-Djdk.incubator.foreign.uncaught_exception_code=\" + exitCode,\n@@ -80,1 +80,2 @@\n-        assertEquals(result, exitCode);\n+        assertEquals(result, ERR_UNCAUGHT_EXCEPTION);\n+        assertOutputContains(process.getErrorStream(), \"Testing upcall exceptions\");\n@@ -83,0 +84,11 @@\n+    private static void assertOutputContains(InputStream stream, String str) throws IOException {\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                if (line.contains(str)) {\n+                    return;\n+                }\n+            }\n+        }\n+        fail(\"Did not find '\" + str + \"' in stream\");\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-                    MethodType.methodType(void.class, Throwable.class));\n+                    MethodType.methodType(void.class));\n@@ -58,2 +58,2 @@\n-    public static void throwException(Throwable t) throws Throwable {\n-        throw t;\n+    public static void throwException() throws Throwable {\n+        throw new Throwable(\"Testing upcall exceptions\");\n@@ -63,1 +63,1 @@\n-        test(new Throwable());\n+        test();\n@@ -66,2 +66,1 @@\n-    public static void test(Throwable throwable) throws Throwable {\n-        MethodHandle target = MethodHandles.insertArguments(MH_throwException, 0, throwable);\n+    public static void test() throws Throwable {\n@@ -69,1 +68,1 @@\n-            MemoryAddress stub = CLinker.getInstance().upcallStub(target, FunctionDescriptor.ofVoid(), scope);\n+            MemoryAddress stub = CLinker.getInstance().upcallStub(MH_throwException, FunctionDescriptor.ofVoid(), scope);\n","filename":"test\/jdk\/java\/foreign\/ThrowingUpcall.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}