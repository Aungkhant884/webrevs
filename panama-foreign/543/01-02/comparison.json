{"files":[{"patch":"@@ -2355,0 +2355,5 @@\n+\n+            @Override\n+            public void exit(int statusCode) {\n+                Shutdown.exit(statusCode);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -387,0 +387,6 @@\n+\n+    \/**\n+     * Direct access to Shutdown.exit to avoid security manager checks\n+     * @param statusCode the status code\n+     *\/\n+    void exit(int statusCode);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,7 +114,0 @@\n-    \/**\n-     * The value returned by the process when the target of an upcall throws an exception.\n-     *\n-     * @see CLinker#upcallStub(MethodHandle, FunctionDescriptor, ResourceScope)\n-     *\/\n-    int ERR_UNCAUGHT_EXCEPTION = 1;\n-\n@@ -236,2 +229,1 @@\n-     * it will be handle by calling {@link System#exit System.exit(ERR_UNCAUGHT_EXCEPTION)}.\n-     * (See {@link #ERR_UNCAUGHT_EXCEPTION})\n+     * the VM will exit with a non-zero exit code.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.foreign.abi.SharedUtils;\n+import sun.security.action.GetPropertyAction;\n@@ -31,0 +31,1 @@\n+import static sun.security.action.GetPropertyAction.privilegedGetProperty;\n@@ -40,2 +41,2 @@\n-        String arch = System.getProperty(\"os.arch\");\n-        String os = System.getProperty(\"os.name\");\n+        String arch = privilegedGetProperty(\"os.arch\");\n+        String os = privilegedGetProperty(\"os.name\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -75,0 +77,2 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n@@ -368,1 +372,1 @@\n-            System.exit(ERR_UNCAUGHT_EXCEPTION);\n+            JLA.exit(1);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.List;\n@@ -45,3 +46,3 @@\n-import static jdk.incubator.foreign.CLinker.ERR_UNCAUGHT_EXCEPTION;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.fail;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertTrue;\n@@ -76,0 +77,2 @@\n+                \/\/ security manager to block normal System.exit\n+                \"-Djava.security.manager=allow\",\n@@ -80,2 +83,20 @@\n-        assertEquals(result, ERR_UNCAUGHT_EXCEPTION);\n-        assertOutputContains(process.getErrorStream(), \"Testing upcall exceptions\");\n+        assertNotEquals(result, 0);\n+\n+        List<String> outLines = linesFromStream(process.getInputStream());\n+        outLines.forEach(System.out::println);\n+        List<String> errLines = linesFromStream(process.getErrorStream());\n+        errLines.forEach(System.err::println);\n+\n+        \/\/ Exception message would be found in stack trace\n+        String shouldInclude = \"Testing upcall exceptions\";\n+        assertTrue(linesContain(errLines, shouldInclude), \"Did not find '\" + shouldInclude + \"' in stderr\");\n+\n+        \/\/ If the VM crashes with an uncaught IllegalStateException from the security manager\n+        \/\/ the crash log should include the exception message.\n+        \/\/ Make sure that is _not_ the case.\n+        String shouldNotInclude = \"Can not use exitVM\";\n+        assertFalse(linesContain(outLines, shouldNotInclude), \"Found '\" + shouldNotInclude + \"' in stdout\");\n+    }\n+\n+    private boolean linesContain(List<String> errLines, String shouldInclude) {\n+        return errLines.stream().anyMatch(line -> line.contains(shouldInclude));\n@@ -84,1 +105,1 @@\n-    private static void assertOutputContains(InputStream stream, String str) throws IOException {\n+    private static List<String> linesFromStream(InputStream stream) throws IOException {\n@@ -86,6 +107,1 @@\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                if (line.contains(str)) {\n-                    return;\n-                }\n-            }\n+            return reader.lines().toList();\n@@ -93,1 +109,0 @@\n-        fail(\"Did not find '\" + str + \"' in stream\");\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.security.Permission;\n@@ -42,0 +43,12 @@\n+        System.setSecurityManager(new SecurityManager() {\n+            @Override\n+            public void checkExit(int status) {\n+                throw new IllegalStateException(\"Can not use exitVM\");\n+            }\n+\n+            @Override\n+            public void checkPermission(Permission perm) {\n+                \/\/ do nothing\n+            }\n+        });\n+\n","filename":"test\/jdk\/java\/foreign\/ThrowingUpcall.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}