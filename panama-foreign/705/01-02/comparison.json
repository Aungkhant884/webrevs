{"files":[{"patch":"@@ -756,26 +756,0 @@\n-    \/**\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code byte},\n-     * and byte order set to {@link ByteOrder#nativeOrder()}.\n-     * Equivalent to the following code:\n-     * {@snippet lang=java :\n-     * MemoryLayout.valueLayout(byte.class, ByteOrder.nativeOrder())\n-     *             .withBitAlignment(8);\n-     * }\n-     * @apiNote Care should be taken when using unaligned value layouts as they may induce\n-     *          performance and portability issues.\n-     *\/\n-    public static final OfByte JAVA_BYTE_UNALIGNED = unaligned(JAVA_BYTE);\n-\n-    \/**\n-     * An unaligned value layout constant whose size is the same as that of a Java {@code boolean}\n-     * and byte order set to {@link ByteOrder#nativeOrder()}.\n-     * Equivalent to the following code:\n-     * {@snippet lang=java :\n-     * MemoryLayout.valueLayout(boolean.class, ByteOrder.nativeOrder())\n-     *             .withBitAlignment(8);\n-     * }\n-     * @apiNote Care should be taken when using unaligned value layouts as they may induce\n-     *          performance and portability issues.\n-     *\/\n-    public static final OfBoolean JAVA_BOOLEAN_UNALIGNED = unaligned(JAVA_BOOLEAN);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @run testng TestLayouts\n+ * @modules java.base\/jdk.internal.misc\n+ * @run testng TestValueLayouts\n@@ -43,6 +44,1 @@\n-        testAligned(JAVA_INT, int.class, Byte.SIZE);\n-    }\n-\n-    @Test\n-    public void testByteUnaligned() {\n-        testUnaligned(JAVA_INT_UNALIGNED, int.class, Byte.SIZE);\n+        testAligned(JAVA_BYTE, byte.class, Byte.SIZE);\n@@ -56,5 +52,0 @@\n-    @Test\n-    public void testBooleanUnaligned() {\n-        testUnaligned(JAVA_BOOLEAN_UNALIGNED, boolean.class, Byte.SIZE);\n-    }\n-\n@@ -87,1 +78,1 @@\n-    public void testIntUnaligned() {\n+    public void testLongUnaligned() {\n@@ -107,1 +98,1 @@\n-    public void testFloatUnaligned() {\n+    public void testDoubleUnaligned() {\n@@ -127,1 +118,1 @@\n-    public void testCharUnaligned() {\n+    public void testAddressUnaligned() {\n@@ -131,1 +122,0 @@\n-\n@@ -153,2 +143,2 @@\n-        assertEquals(layout.byteSize(), layout.bitSize() * 8);\n-        assertEquals(layout.byteAlignment(), layout.bitAlignment() * 8);\n+        assertEquals(layout.byteSize(), layout.bitSize() \/ 8);\n+        assertEquals(layout.byteAlignment(), layout.bitAlignment() \/ 8);\n","filename":"test\/jdk\/java\/foreign\/TestValueLayouts.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"}]}