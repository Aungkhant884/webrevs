{"files":[{"patch":"@@ -652,0 +652,120 @@\n+    \/**\n+     * This class contains a number of unaligned value layouts.\n+     * <p>\n+     * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+     *          performance and portability issues.\n+     *\/\n+    public static final class Unaligned {\n+        \/\/ These less frequently used constants are lazily initialized and not directly visible in ValueLayout\n+        private Unaligned() { }\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a machine address ({@code size_t}),\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(MemorySegment.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfAddress UNALIGNED_ADDRESS = new OfAddress(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code byte},\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(byte.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfByte UNALIGNED_JAVA_BYTE = new OfByte(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code boolean}\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(boolean.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfBoolean UNALIGNED_JAVA_BOOLEAN = new OfBoolean(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code char}\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfChar UNALIGNED_JAVA_CHAR = new OfChar(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code short}\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfShort UNALIGNED_JAVA_SHORT = new OfShort(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code int}\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfInt UNALIGNED_JAVA_INT = new OfInt(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code long}\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfLong UNALIGNED_JAVA_LONG = new OfLong(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code float}\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfFloat UNALIGNED_JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder());\n+\n+        \/**\n+         * An unaligned value layout constant whose size is the same as that of a Java {@code double}\n+         * and byte order set to {@link ByteOrder#nativeOrder()}.\n+         * Equivalent to the following code:\n+         * {@snippet lang=java :\n+         * MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder());\n+         * }\n+         * @apiNote Care should be taken when using unaligned value layouts as they may induce\n+         *          performance and portability issues.\n+         *\/\n+        public static final OfDouble UNALIGNED_JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder());\n+\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"modified"}]}