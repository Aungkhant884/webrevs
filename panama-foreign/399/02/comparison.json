{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.util.stream.Stream;\n@@ -130,0 +131,1 @@\n+     * @throws NullPointerException if either {@code symbol == null}, {@code type == null} or {@code function == null}.\n@@ -146,0 +148,1 @@\n+     * @throws NullPointerException if either {@code symbol == null} or {@code function == null}.\n@@ -191,1 +194,2 @@\n-     * Returns a memory layout that is suitable to use the layout for variadic arguments.\n+     * Returns a memory layout that is suitable to use as the layout for variadic arguments in a specialized\n+     * function descriptor.\n@@ -193,1 +197,1 @@\n-     * @param ml the layout the adapt\n+     * @param layout the layout the adapt\n@@ -195,0 +199,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -197,2 +202,3 @@\n-    static <T extends MemoryLayout> T asVarArg(T ml) {\n-        return (T) PlatformLayouts.asVarArg(ml);\n+    static <T extends MemoryLayout> T asVarArg(T layout) {\n+        Objects.requireNonNull(layout);\n+        return (T) PlatformLayouts.asVarArg(layout);\n@@ -201,1 +207,1 @@\n-        \/**\n+    \/**\n@@ -212,1 +218,1 @@\n-     * @throws NullPointerException if either {@code str == null}.\n+     * @throws NullPointerException if {@code str == null}.\n@@ -294,1 +300,1 @@\n-     * @throws NullPointerException if {@code addr == null}\n+     * @throws NullPointerException if {@code addr == null}.\n@@ -299,0 +305,1 @@\n+        Objects.requireNonNull(addr);\n@@ -316,1 +323,1 @@\n-     * @throws NullPointerException if {@code addr == null}\n+     * @throws NullPointerException if either {@code addr == null} or {@code charset == null}.\n@@ -321,0 +328,2 @@\n+        Objects.requireNonNull(addr);\n+        Objects.requireNonNull(charset);\n@@ -333,1 +342,1 @@\n-     * @throws NullPointerException if {@code addr == null}\n+     * @throws NullPointerException if {@code addr == null}.\n@@ -339,0 +348,1 @@\n+        Objects.requireNonNull(addr);\n@@ -352,1 +362,1 @@\n-     * @throws NullPointerException if {@code addr == null}\n+     * @throws NullPointerException if either {@code addr == null} or {@code charset == null}.\n@@ -358,0 +368,2 @@\n+        Objects.requireNonNull(addr);\n+        Objects.requireNonNull(charset);\n@@ -402,0 +414,1 @@\n+     * @throws NullPointerException if either {@code addr == null}.\n@@ -405,0 +418,1 @@\n+        Objects.requireNonNull(addr);\n@@ -436,0 +450,1 @@\n+         * @throws NullPointerException if {@code layout == null}.\n@@ -447,0 +462,1 @@\n+         * @throws NullPointerException if {@code layout == null}.\n@@ -458,0 +474,1 @@\n+         * @throws NullPointerException if {@code layout == null}.\n@@ -469,0 +486,1 @@\n+         * @throws NullPointerException if {@code layout == null}.\n@@ -483,0 +501,1 @@\n+         * @throws NullPointerException if {@code layout == null}.\n@@ -497,0 +516,1 @@\n+         * @throws NullPointerException if either {@code layout == null} or {@code scope == null}.\n@@ -506,0 +526,2 @@\n+         * @throws NullPointerException if either {@code layouts == null} or or if any of the elements\n+         * in {@code layouts} is {@code null}.\n@@ -566,0 +588,1 @@\n+         * @throws NullPointerException if {@code scope == null}.\n@@ -586,0 +609,1 @@\n+         * @throws NullPointerException if {@code address == null}.\n@@ -589,0 +613,1 @@\n+            Objects.requireNonNull(address);\n@@ -608,0 +633,1 @@\n+         * @throws NullPointerException if {@code actions == null}.\n@@ -610,0 +636,1 @@\n+            Objects.requireNonNull(actions);\n@@ -629,0 +656,1 @@\n+         * @throws NullPointerException if either {@code scope == null} or {@code actions == null}.\n@@ -631,0 +659,2 @@\n+            Objects.requireNonNull(actions);\n+            Objects.requireNonNull(scope);\n@@ -662,0 +692,1 @@\n+             * @throws NullPointerException if {@code layout == null}.\n@@ -672,0 +703,1 @@\n+             * @throws NullPointerException if {@code layout == null}.\n@@ -682,0 +714,1 @@\n+             * @throws NullPointerException if {@code layout == null}.\n@@ -692,0 +725,1 @@\n+             * @throws NullPointerException if either {@code layout == null} or {@code value == null}.\n@@ -702,0 +736,1 @@\n+             * @throws NullPointerException if either {@code layout == null} or {@code value == null}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":45,"deletions":10,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+     * @throws NullPointerException if {@code name == null}.\n@@ -69,0 +70,1 @@\n+        Objects.requireNonNull(name);\n@@ -89,0 +91,1 @@\n+     * @throws NullPointerException if {@code name == null}.\n@@ -91,0 +94,1 @@\n+        Objects.requireNonNull(name);\n@@ -117,1 +121,2 @@\n-     * @throws NullPointerException if any of the argument layouts, or the return layout is null.\n+     * @throws NullPointerException if either {@code resLayout == null}, {@code argLayouts == null}, or any of the\n+     * layouts in {@code argLayouts} is null.\n@@ -121,0 +126,1 @@\n+        Objects.requireNonNull(argLayouts);\n@@ -129,1 +135,2 @@\n-     * @throws NullPointerException if any of the argument layouts is null.\n+     * @throws NullPointerException if either {@code argLayouts == null}, or any of the\n+     * layouts in {@code argLayouts} is null.\n@@ -132,0 +139,1 @@\n+        Objects.requireNonNull(argLayouts);\n@@ -141,1 +149,2 @@\n-     * @throws NullPointerException if any of the new argument layouts is null.\n+     * @throws NullPointerException if either {@code addedLayouts == null}, or any of the\n+     * layouts in {@code addedLayouts} is null.\n@@ -144,0 +153,1 @@\n+        Objects.requireNonNull(addedLayouts);\n@@ -154,1 +164,1 @@\n-     * @throws NullPointerException if the new return layout is null.\n+     * @throws NullPointerException if {@code newReturn == null}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -87,0 +88,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -89,0 +91,1 @@\n+        Objects.requireNonNull(layout);\n@@ -105,0 +108,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -107,0 +111,1 @@\n+        Objects.requireNonNull(layout);\n@@ -123,0 +128,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -125,0 +131,1 @@\n+        Objects.requireNonNull(layout);\n@@ -141,0 +148,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -143,0 +151,1 @@\n+        Objects.requireNonNull(layout);\n@@ -159,0 +168,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -161,0 +171,1 @@\n+        Objects.requireNonNull(layout);\n@@ -177,0 +188,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -179,0 +191,1 @@\n+        Objects.requireNonNull(layout);\n@@ -197,0 +210,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code value == null}.\n@@ -199,0 +213,2 @@\n+        Objects.requireNonNull(value);\n+        Objects.requireNonNull(layout);\n@@ -219,0 +235,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}.\n@@ -234,0 +251,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}.\n@@ -249,0 +267,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}.\n@@ -264,0 +283,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}.\n@@ -279,0 +299,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}.\n@@ -294,0 +315,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}.\n@@ -309,0 +331,1 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}.\n@@ -325,0 +348,2 @@\n+     * @throws NullPointerException if either {@code layout == null}, or {@code array == null}, or if any of the elements\n+     * in {@code array} is {@code null}.\n@@ -327,0 +352,3 @@\n+        Objects.requireNonNull(elementLayout);\n+        Objects.requireNonNull(array);\n+        Stream.of(array).forEach(Objects::requireNonNull);\n@@ -343,0 +371,2 @@\n+        Objects.requireNonNull(array);\n+        Objects.requireNonNull(elementLayout);\n@@ -360,0 +390,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -362,0 +393,1 @@\n+        Objects.requireNonNull(layout);\n@@ -378,0 +410,1 @@\n+     * @throws NullPointerException if {@code layout == null}.\n@@ -380,0 +413,1 @@\n+        Objects.requireNonNull(elementLayout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/NativeScope.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Objects;\n@@ -77,0 +78,3 @@\n+        Objects.requireNonNull(symbol);\n+        Objects.requireNonNull(type);\n+        Objects.requireNonNull(function);\n@@ -85,0 +89,2 @@\n+        Objects.requireNonNull(target);\n+        Objects.requireNonNull(function);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Linker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Objects;\n@@ -242,0 +243,1 @@\n+        Objects.requireNonNull(scope);\n@@ -250,0 +252,1 @@\n+        Objects.requireNonNull(layout);\n@@ -339,0 +342,1 @@\n+        Objects.requireNonNull(layouts);\n@@ -340,0 +344,1 @@\n+            Objects.requireNonNull(layout);\n@@ -380,0 +385,1 @@\n+        Objects.requireNonNull(scope);\n@@ -461,0 +467,2 @@\n+            Objects.requireNonNull(layout);\n+            Objects.requireNonNull(value);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64VaList.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Objects;\n@@ -219,0 +220,1 @@\n+        Objects.requireNonNull(scope);\n@@ -227,0 +229,1 @@\n+        Objects.requireNonNull(layout);\n@@ -291,0 +294,1 @@\n+        Objects.requireNonNull(layouts);\n@@ -292,0 +296,1 @@\n+            Objects.requireNonNull(layout);\n@@ -329,0 +334,1 @@\n+        Objects.requireNonNull(scope);\n@@ -396,0 +402,2 @@\n+            Objects.requireNonNull(layout);\n+            Objects.requireNonNull(value);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Objects;\n@@ -88,0 +89,3 @@\n+        Objects.requireNonNull(symbol);\n+        Objects.requireNonNull(type);\n+        Objects.requireNonNull(function);\n@@ -96,0 +100,2 @@\n+        Objects.requireNonNull(target);\n+        Objects.requireNonNull(function);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import java.util.Objects;\n+import java.util.stream.Stream;\n@@ -103,0 +105,1 @@\n+        Objects.requireNonNull(scope);\n@@ -111,0 +114,1 @@\n+        Objects.requireNonNull(layout);\n@@ -142,0 +146,2 @@\n+        Objects.requireNonNull(layouts);\n+        Stream.of(layouts).forEach(Objects::requireNonNull);\n@@ -170,0 +176,1 @@\n+        Objects.requireNonNull(scope);\n@@ -198,0 +205,2 @@\n+            Objects.requireNonNull(layout);\n+            Objects.requireNonNull(value);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Objects;\n@@ -89,0 +90,3 @@\n+        Objects.requireNonNull(symbol);\n+        Objects.requireNonNull(type);\n+        Objects.requireNonNull(function);\n@@ -97,0 +101,2 @@\n+        Objects.requireNonNull(target);\n+        Objects.requireNonNull(function);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,6 +30,1 @@\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeScope;\n-import jdk.incubator.foreign.MemoryHandles;\n-import jdk.incubator.foreign.MemoryLayouts;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.*;\n@@ -37,1 +32,0 @@\n-import jdk.incubator.foreign.ValueLayout;\n@@ -41,0 +35,4 @@\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n@@ -49,0 +47,1 @@\n+import java.util.Arrays;\n@@ -52,0 +51,1 @@\n+import java.util.function.Predicate;\n","filename":"test\/jdk\/java\/foreign\/TestNativeScope.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.lang.invoke.MethodType;\n@@ -49,0 +50,1 @@\n+import java.nio.charset.Charset;\n@@ -51,0 +53,2 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n@@ -82,1 +86,6 @@\n-            MemoryHandles.class\n+            MemoryHandles.class,\n+            NativeScope.class,\n+            CLinker.class,\n+            CLinker.VaList.class,\n+            CLinker.VaList.Builder.class,\n+            FunctionDescriptor.class\n@@ -92,1 +101,2 @@\n-            \"jdk.incubator.foreign.MemoryHandles\/insertCoordinates(java.lang.invoke.VarHandle,int,java.lang.Object[])\/2\/1\"\n+            \"jdk.incubator.foreign.MemoryHandles\/insertCoordinates(java.lang.invoke.VarHandle,int,java.lang.Object[])\/2\/1\",\n+            \"jdk.incubator.foreign.FunctionDescriptor\/withAttribute(java.lang.String,java.lang.constant.Constable)\/1\/0\"\n@@ -128,0 +138,3 @@\n+        addDefaultMapping(Charset.class, Charset.defaultCharset());\n+        addDefaultMapping(Consumer.class, x -> {});\n+        addDefaultMapping(MethodType.class, MethodType.methodType(void.class));\n@@ -135,0 +148,19 @@\n+        addDefaultMapping(NativeScope.class, NativeScope.boundedScope(10));\n+        addDefaultMapping(FunctionDescriptor.class, FunctionDescriptor.ofVoid());\n+        addDefaultMapping(CLinker.class, CLinker.getInstance());\n+        addDefaultMapping(CLinker.VaList.class, VaListHelper.vaList);\n+        addDefaultMapping(CLinker.VaList.Builder.class, VaListHelper.vaListBuilder);\n+    }\n+\n+    static class VaListHelper {\n+        static final CLinker.VaList vaList;\n+        static final CLinker.VaList.Builder vaListBuilder;\n+\n+        static {\n+            AtomicReference<CLinker.VaList.Builder> builderRef = new AtomicReference<>();\n+            vaList = CLinker.VaList.make(b -> {\n+                builderRef.set(b);\n+                b.vargFromLong(CLinker.C_LONGLONG, 42L);\n+            });\n+            vaListBuilder = builderRef.get();\n+        }\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n@@ -64,3 +67,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.*;\n@@ -806,1 +807,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}