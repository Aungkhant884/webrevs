{"files":[{"patch":"@@ -2260,0 +2260,11 @@\n+WB_ENTRY(void, WB_VerifyFrames(JNIEnv* env, jobject wb))\n+  ttyLocker lock;\n+  tty->print_cr(\"[WhiteBox::VerifyFrames] Walking Frames\");\n+  for (StackFrameStream fst(JavaThread::current(), true); !fst.is_done(); fst.next()) {\n+    frame* current_frame = fst.current();\n+    current_frame->print_value();\n+    current_frame->verify(fst.register_map());\n+  }\n+  tty->print_cr(\"[WhiteBox::VerifyFrames] Done\");\n+WB_END\n+\n@@ -2489,0 +2500,1 @@\n+  {CC\"verifyFrames\",                CC\"()V\",            (void*)&WB_VerifyFrames },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ *  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm\n+ *   -Xbootclasspath\/a:.\n+ *   -XX:+UnlockDiagnosticVMOptions\n+ *   -XX:+WhiteBoxAPI\n+ *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n+ *   -Dforeign.restricted=permit\n+ *   -Xbatch\n+ *   TestStackWalk\n+ *\n+ * @run main\/othervm\n+ *   -Xbootclasspath\/a:.\n+ *   -XX:+UnlockDiagnosticVMOptions\n+ *   -XX:+WhiteBoxAPI\n+ *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n+ *   -Dforeign.restricted=permit\n+ *   -Xbatch\n+ *   TestStackWalk\n+ *\/\n+\n+import jdk.incubator.foreign.CSupport;\n+import jdk.incubator.foreign.ForeignLinker;\n+import jdk.incubator.foreign.FunctionDescriptor;\n+import jdk.incubator.foreign.LibraryLookup;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemorySegment;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+import java.lang.ref.Reference;\n+\n+import sun.hotspot.WhiteBox;\n+\n+import static java.lang.invoke.MethodHandles.lookup;\n+import static jdk.incubator.foreign.CSupport.C_POINTER;\n+\n+public class TestStackWalk {\n+    static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    static final ForeignLinker linker = CSupport.getSystemLinker();\n+\n+    static final MethodHandle MH_foo;\n+    static final MethodHandle MH_m;\n+\n+    static {\n+        try {\n+            LibraryLookup lookup = LibraryLookup.ofLibrary(\"StackWalk\");\n+            MH_foo = linker.downcallHandle(\n+                    lookup.lookup(\"foo\"),\n+                    MethodType.methodType(void.class, MemoryAddress.class),\n+                    FunctionDescriptor.ofVoid(C_POINTER));\n+            MH_m = lookup().findStatic(TestStackWalk.class, \"m\", MethodType.methodType(void.class));\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static boolean armed;\n+\n+    public static void main(String[] args) throws Throwable {\n+        try (MemorySegment stub = linker.upcallStub(MH_m, FunctionDescriptor.ofVoid())) {\n+            MemoryAddress stubAddress = stub.address();\n+            armed = false;\n+            for (int i = 0; i < 20_000; i++) {\n+                payload(stubAddress); \/\/ warmup\n+            }\n+\n+            armed = true;\n+            payload(stubAddress); \/\/ test\n+        }\n+    }\n+\n+    static void payload(MemoryAddress cb) throws Throwable {\n+        MH_foo.invokeExact(cb);\n+        Reference.reachabilityFence(cb); \/\/ keep oop alive across call\n+    }\n+\n+    static void m() {\n+        if (armed) {\n+            WB.verifyFrames();\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ *  Copyright (c) 2020 Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+EXPORT void foo(void (*cb)(void)) {\n+    cb();\n+}\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/libStackWalk.c","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -618,0 +618,3 @@\n+  \/\/ Walk stack frames of current thread\n+  public native void verifyFrames();\n+  \n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}