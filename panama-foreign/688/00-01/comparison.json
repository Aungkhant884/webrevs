{"files":[{"patch":"@@ -48,1 +48,1 @@\n-    for Memory(int i = 0 ; i < 5 ; i++) {\n+    for (int i = 0 ; i < 5 ; i++) {\n@@ -107,1 +107,1 @@\n-At the core of Panama foreign function support we find the `Linker` abstraction. This abstraction plays a dual role: first, for downcalls, it allows modelling foreign function calls as plain `MethodHandle` calls (see `Linker::downcallHandle`); second, for upcalls, it allows to convert an existing `MethodHandle` (which might point to some Java method) into a `NativeSymbol` which could then be passed to foreign functions as a function pointer (see `Linker::upcallStub`):\n+At the core of Panama foreign function support we find the `Linker` abstraction. This abstraction plays a dual role: first, for downcalls, it allows modelling foreign function calls as plain `MethodHandle` calls (see `Linker::downcallHandle`); second, for upcalls, it allows to convert an existing `MethodHandle` (which might point to some Java method) into a `MemorySegment` which could then be passed to foreign functions as a function pointer (see `Linker::upcallStub`):\n@@ -111,2 +111,2 @@\n-    MethodHandle downcallHandle(NativeSymbol func, FunctionDescriptor function);\n-    NativeSymbol upcallStub(MethodHandle target, FunctionDescriptor function, MemorySession session);    \n+    MethodHandle downcallHandle(Addressable symbol, FunctionDescriptor function);\n+    MemorySegment upcallStub(MethodHandle target, FunctionDescriptor function, MemorySession session);    \n@@ -244,1 +244,1 @@\n-    NativeSymbol comparFunc = linker.upcallStub(comparHandle, comparDesc, session);\n+    MemorySegment comparFunc = linker.upcallStub(comparHandle, comparDesc, session);\n@@ -251,1 +251,1 @@\n-The above code creates an upcall stub — `comparFunc` — a function pointer that can be used to invoke our Java comparator function, of type `NativeSymbol`. The upcall stub is associated with the provided memory session instance; this means that the stub will be uninstalled when the session is closed.\n+The above code creates an upcall stub — `comparFunc` — a function pointer that can be used to invoke our Java comparator function, of type `MemorySegment`. The upcall stub is associated with the provided memory session instance; this means that the stub will be uninstalled when the session is closed.\n","filename":"doc\/panama_ffi.md","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}