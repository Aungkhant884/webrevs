{"files":[{"patch":"@@ -149,3 +149,1 @@\n-        List<JavaFileObject> files = constantHelper.build();\n-        files.add(Utils.fileFromString(pkgName, className, res));\n-        return files;\n+        return List.of(Utils.fileFromString(pkgName, className, res));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 8244512\n+ * @summary jextract throws NPE for a nested struct declaration\n+ * @run testng\/othervm -Djextract.decls.per.header=1 -Dforeign.restricted=permit TestSplit\n+ *\/\n+public class TestSplit extends JextractToolRunner {\n+    @Test\n+    public void testSplit() {\n+        Path splitOutput = getOutputFilePath(\"split\");\n+        Path splitH = getInputFilePath(\"split.h\");\n+        run(\"-d\", splitOutput.toString(), splitH.toString()).checkSuccess();\n+        try(Loader loader = classLoader(splitOutput)) {\n+            checkPresent(loader, \"split_h\");\n+            checkPresent(loader, \"split_h_0\");\n+            checkPresent(loader, \"split_h_1\");\n+            checkPresent(loader, \"split_h_2\");\n+            checkPresent(loader, \"split_h_3\");\n+            checkMissing(loader, \"split_h_4\");\n+            checkPresent(loader, \"split_h_constants_0\");\n+            checkMissing(loader, \"split_h_constants_1\");\n+        } finally {\n+            deleteDir(splitOutput);\n+        }\n+    }\n+\n+    private static void checkPresent(Loader loader, String name) {\n+        assertNotNull(loader.loadClass(name));\n+    }\n+\n+    private static void checkMissing(Loader loader, String name) {\n+        assertNull(loader.loadClass(name));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/TestSplit.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+EXPORT int a();\n+EXPORT int b();\n+EXPORT int c();\n+EXPORT int d();\n+EXPORT int e();\n","filename":"test\/jdk\/tools\/jextract\/split.h","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"}]}