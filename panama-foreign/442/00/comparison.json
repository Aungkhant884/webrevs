{"files":[{"patch":"@@ -383,1 +383,5 @@\n-            return getAsFunctionPointer(((Type.Delegated) type).type());\n+            Type.Delegated delegated = (Type.Delegated)type;\n+            return switch (delegated.kind()) {\n+                case POINTER -> getAsFunctionPointer(delegated.type());\n+                default -> null;\n+            };\n@@ -439,0 +443,5 @@\n+        } else {\n+            Type.Function func = getAsFunctionPointer(type);\n+            if (func != null) {\n+                generateFunctionalInterface(func, type, tree.name());\n+            }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-             f(f$x.allocate(i -> {\n+             f(CB.allocate(i -> {\n@@ -73,1 +73,1 @@\n-             f2(foo, f2$cb.allocate(i -> {\n+             f2(foo, CB.allocate(i -> {\n","filename":"test\/jdk\/tools\/jextract\/test8258605\/LibTest8258605Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-            { \"func_cb$cb\", methodType(void.class, int.class) }\n+            { \"CB\", methodType(void.class, int.class) }\n","filename":"test\/jdk\/tools\/jextract\/testClassGen\/TestClassGeneration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}