{"files":[{"patch":"@@ -1,2 +0,0 @@\n-foreign-memaccess\n-\n","filename":"deps.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -2726,3 +2726,1 @@\n-  movslq(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n-  \/\/ must clear fp, so that compiled frames are not confused; it is\n-  \/\/ possible that we need it only for debugging\n+  movptr(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n@@ -2732,1 +2730,1 @@\n-    movslq(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n+    movptr(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -286,3 +286,0 @@\n-  address* _native_stubs;\n-  int _num_stubs;\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/pcDesc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1276,7 +1276,0 @@\n-      mach_call_native->_ret_regs = call_native->_ret_regs;\n-    }\n-    else if( mcall->is_MachCallNative() ) {\n-      MachCallNativeNode* mach_call_native = mcall->as_MachCallNative();\n-      CallNativeNode* call_native = call->as_CallNative();\n-      mach_call_native->_name = call_native->_name;\n-      mach_call_native->_arg_regs = call_native->_arg_regs;\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1997,8 +1997,0 @@\n-const TypeTuple *TypeTuple::make_func( uint arg_cnt, const Type **arg_fields ) {\n-  const Type** field_array = fields(arg_cnt);\n-  for (uint i = 0; i < arg_cnt; i++) {\n-    field_array[i + TypeFunc::Parms] = arg_fields[i];\n-  }\n-  return make(arg_cnt + TypeFunc::Parms, field_array);\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -702,1 +702,0 @@\n-  static const TypeTuple *make_func(uint arg_cnt, const Type **arg_fields);\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-JNI_END\n+JNI_END\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1568,1 +1568,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2054,0 +2054,1 @@\n+\n@@ -2070,3 +2071,5 @@\n-     * 1. set security manager\n-     * 2. set system class loader\n-     * 3. set TCCL\n+     * 1. eagerly initialize bootstrap method factories that might interact\n+     *    negatively with custom security managers and custom class loaders\n+     * 2. set security manager\n+     * 3. set system class loader\n+     * 4. set TCCL\n@@ -2079,0 +2082,6 @@\n+\n+        \/\/ Initialize the StringConcatFactory eagerly to avoid potential\n+        \/\/ bootstrap circularity issues that could be caused by a custom\n+        \/\/ SecurityManager\n+        Unsafe.getUnsafe().ensureClassInitialized(StringConcatFactory.class);\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import jdk.internal.loader.NativeLibrary;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.HashMap;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-     * @throws NullPointerException if {@code segment == null}.\n@@ -102,1 +101,0 @@\n-     * @throws NullPointerException if {@code segment == null}.\n@@ -122,1 +120,0 @@\n-     * @throws NullPointerException if {@code segment == null}.\n@@ -155,1 +152,0 @@\n-     * @throws NullPointerException if {@code segment == null}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegments.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-     * @throws NullPointerException if {@code segment == null}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -174,1 +174,0 @@\n-     * @throws NullPointerException if {@code carrier == null}, or {@code byteOrder == null}.\n@@ -202,1 +201,0 @@\n-     * @throws NullPointerException if {@code carrier == null}, or {@code byteOrder == null}.\n@@ -229,1 +227,0 @@\n-     * @throws NullPointerException if {@code target == null}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -258,1 +258,0 @@\n-     * @throws NullPointerException if {@code name == null}.\n@@ -317,1 +316,0 @@\n-     * @throws NullPointerException if {@code name == null}.\n@@ -329,1 +327,0 @@\n-     * @throws NullPointerException if {@code name == null}.\n@@ -483,2 +480,0 @@\n-     * @throws NullPointerException if either {@code carrier == null}, {@code elements == null}, or if any of the elements\n-     * in {@code elements} is {@code null}.\n@@ -500,2 +495,0 @@\n-     * @throws NullPointerException if either {@code elements == null}, or if any of the elements\n-     * in {@code elements} is {@code null}.\n@@ -519,2 +512,0 @@\n-     * @throws NullPointerException if either {@code op == null}, {@code elements == null}, or if any of the elements\n-     * in {@code elements} is {@code null}.\n@@ -698,1 +689,0 @@\n-     * @throws NullPointerException if {@code order == null}.\n@@ -713,1 +703,0 @@\n-     * @throws NullPointerException if {@code elementLayout == null}.\n@@ -726,1 +715,0 @@\n-     * @throws NullPointerException if {@code elementLayout == null}.\n@@ -737,1 +725,0 @@\n-     * @throws NullPointerException if {@code elements == null}, or if any of the layouts in {@code elements} is {@code null}.\n@@ -752,1 +739,0 @@\n-     * @throws NullPointerException if {@code elements == null}, or if any of the layouts in {@code elements} is {@code null}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-     * @throws NullPointerException if {@code order == null}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.function.Function;\n@@ -35,1 +34,0 @@\n-import java.util.function.UnaryOperator;\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-#include <math.h>\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/libJNIPoint.c","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}