{"files":[{"patch":"@@ -8,1 +8,1 @@\n-* Index_h_1.libName was manually added to handle platform dependency of\n+* Index_h.libName was manually added to handle platform dependency of\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/README","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,599 @@\n+#### Extracted from: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXErrorCode.h\n+\n+--include-macro CXError_ASTReadError        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXErrorCode.h\n+--include-macro CXError_Crashed             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXErrorCode.h\n+--include-macro CXError_Failure             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXErrorCode.h\n+--include-macro CXError_InvalidArguments    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXErrorCode.h\n+--include-macro CXError_Success             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXErrorCode.h\n+\n+#### Extracted from: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXString.h\n+\n+--include-function clang_disposeString    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXString.h\n+--include-function clang_getCString       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/CXString.h\n+\n+#### Extracted from: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+\n+--include-typedef CXCursorVisitor                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-typedef CXIndex                                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-typedef CXToken                                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-typedef CXTranslationUnit                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-typedef CXType                                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-struct CXUnsavedFile                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXChildVisit_Break                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXChildVisit_Continue                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXChildVisit_Recurse                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_AddrLabelExpr                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_AlignedAttr                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_AnnotateAttr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ArraySubscriptExpr                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_AsmLabelAttr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_AsmStmt                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_BinaryOperator                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_BlockExpr                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_BreakStmt                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_BuiltinBitCastExpr                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CStyleCastExpr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CUDAConstantAttr                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CUDADeviceAttr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CUDAGlobalAttr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CUDAHostAttr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CUDASharedAttr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXAccessSpecifier                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXBaseSpecifier                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXBoolLiteralExpr                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXCatchStmt                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXConstCastExpr                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXDeleteExpr                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXDynamicCastExpr                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXFinalAttr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXForRangeStmt                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXFunctionalCastExpr                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXMethod                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXNewExpr                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXNullPtrLiteralExpr                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXOverrideAttr                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXReinterpretCastExpr                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXStaticCastExpr                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXThisExpr                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXThrowExpr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXTryStmt                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CXXTypeidExpr                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CallExpr                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CaseStmt                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CharacterLiteral                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ClassDecl                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ClassTemplate                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ClassTemplatePartialSpecialization                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CompoundAssignOperator                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CompoundLiteralExpr                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_CompoundStmt                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ConditionalOperator                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ConstAttr                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_Constructor                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ContinueStmt                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ConvergentAttr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ConversionFunction                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_DLLExport                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_DLLImport                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_DeclRefExpr                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_DeclStmt                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_DefaultStmt                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_Destructor                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_DoStmt                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_EnumConstantDecl                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_EnumDecl                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_BasicNoexcept            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_ComputedNoexcept         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_Dynamic                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_DynamicNone              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_MSAny                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_NoThrow                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_None                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_Unevaluated              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_Uninstantiated           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ExceptionSpecificationKind_Unparsed                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FieldDecl                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstAttr                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstDecl                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstExpr                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstExtraDecl                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstInvalid                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstPreprocessing                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstRef                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FirstStmt                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FixedPointLiteral                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FlagEnum                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FloatingLiteral                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ForStmt                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FriendDecl                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FunctionDecl                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_FunctionTemplate                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_GCCAsmStmt                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_GNUNullExpr                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_GenericSelectionExpr                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_GotoStmt                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_IBActionAttr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_IBOutletAttr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_IBOutletCollectionAttr                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_IfStmt                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ImaginaryLiteral                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_InclusionDirective                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_IndirectGotoStmt                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_InitListExpr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_IntegerLiteral                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_InvalidCode                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_InvalidFile                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LabelRef                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LabelStmt                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LambdaExpr                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastAttr                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastDecl                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastExpr                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastExtraDecl                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastInvalid                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastPreprocessing                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastRef                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LastStmt                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_LinkageSpec                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_MSAsmStmt                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_MacroDefinition                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_MacroExpansion                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_MacroInstantiation                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_MemberRef                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_MemberRefExpr                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ModuleImportDecl                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NSConsumed                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NSConsumesSelf                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NSReturnsAutoreleased                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NSReturnsNotRetained                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NSReturnsRetained                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_Namespace                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NamespaceAlias                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NamespaceRef                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NoDeclFound                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NoDuplicateAttr                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NonTypeTemplateParameter                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NotImplemented                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_NullStmt                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPArraySectionExpr                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPAtomicDirective                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPBarrierDirective                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPCancelDirective                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPCancellationPointDirective                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPCriticalDirective                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPDistributeDirective                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPDistributeParallelForDirective                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPDistributeParallelForSimdDirective               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPDistributeSimdDirective                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPFlushDirective                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPForDirective                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPForSimdDirective                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPMasterDirective                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPMasterTaskLoopDirective                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPMasterTaskLoopSimdDirective                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPOrderedDirective                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPParallelDirective                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPParallelForDirective                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPParallelForSimdDirective                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPParallelMasterTaskLoopDirective                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPParallelMasterTaskLoopSimdDirective              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPParallelSectionsDirective                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPSectionDirective                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPSectionsDirective                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPSimdDirective                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPSingleDirective                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetDataDirective                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetDirective                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetEnterDataDirective                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetExitDataDirective                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetParallelDirective                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetParallelForDirective                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetParallelForSimdDirective                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetSimdDirective                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetTeamsDirective                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetTeamsDistributeDirective                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetTeamsDistributeParallelForDirective        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetTeamsDistributeSimdDirective               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTargetUpdateDirective                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTaskDirective                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTaskLoopDirective                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTaskLoopSimdDirective                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTaskgroupDirective                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTaskwaitDirective                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTaskyieldDirective                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTeamsDirective                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTeamsDistributeDirective                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTeamsDistributeParallelForDirective              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTeamsDistributeParallelForSimdDirective          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OMPTeamsDistributeSimdDirective                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCAtCatchStmt                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCAtFinallyStmt                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCAtSynchronizedStmt                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCAtThrowStmt                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCAtTryStmt                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCAutoreleasePoolStmt                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCAvailabilityCheckExpr                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCBoolLiteralExpr                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCBoxable                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCBridgedCastExpr                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCCategoryDecl                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCCategoryImplDecl                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCClassMethodDecl                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCClassRef                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCDesignatedInitializer                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCDynamicDecl                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCEncodeExpr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCException                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCExplicitProtocolImpl                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCForCollectionStmt                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCImplementationDecl                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCIndependentClass                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCInstanceMethodDecl                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCInterfaceDecl                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCIvarDecl                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCMessageExpr                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCNSObject                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCPreciseLifetime                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCPropertyDecl                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCProtocolDecl                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCProtocolExpr                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCProtocolRef                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCRequiresSuper                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCReturnsInnerPointer                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCRootClass                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCRuntimeVisible                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCSelectorExpr                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCSelfExpr                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCStringLiteral                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCSubclassingRestricted                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCSuperClassRef                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ObjCSynthesizeDecl                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OverloadCandidate                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_OverloadedDeclRef                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_PackExpansionExpr                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_PackedAttr                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ParenExpr                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ParmDecl                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_PreprocessingDirective                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_PureAttr                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_ReturnStmt                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_SEHExceptStmt                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_SEHFinallyStmt                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_SEHLeaveStmt                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_SEHTryStmt                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_SizeOfPackExpr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_StaticAssert                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_StmtExpr                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_StringLiteral                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_StructDecl                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_SwitchStmt                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TemplateRef                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TemplateTemplateParameter                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TemplateTypeParameter                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TranslationUnit                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TypeAliasDecl                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TypeAliasTemplateDecl                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TypeRef                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_TypedefDecl                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UnaryExpr                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UnaryOperator                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UnexposedAttr                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UnexposedDecl                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UnexposedExpr                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UnexposedStmt                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UnionDecl                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UsingDeclaration                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_UsingDirective                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_VarDecl                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_VariableRef                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_VisibilityAttr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_WarnUnusedAttr                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_WarnUnusedResultAttr                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXCursor_WhileStmt                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_DisplayCategoryId                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_DisplayCategoryName                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_DisplayColumn                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_DisplayOption                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_DisplaySourceLocation                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_DisplaySourceRanges                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_Error                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_Fatal                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_Ignored                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_Note                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXDiagnostic_Warning                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_Alignof                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_AnonymousTagLocations                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_Bool                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_ConstantArraySizeAsWritten                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_ConstantsAsWritten                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_FullyQualifiedName                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_Half                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_IncludeNewlines                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_IncludeTagDefinition                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_Indentation                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_LastProperty                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_MSVCFormatting                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_MSWChar                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_PolishForDeclaration                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_Restrict                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressImplicitBase                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressInitializers                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressLifetimeQualifiers                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressScope                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressSpecifiers                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressStrongLifetime                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressTagKeyword                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_SuppressUnwrittenScope                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_TerseOutput                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_UnderscoreAlignof                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXPrintingPolicy_UseVoidForZeroParams                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXReparse_None                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXResult_Invalid                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXResult_Success                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXResult_VisitBreak                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXSaveError_InvalidTU                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXSaveError_None                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXSaveError_TranslationErrors                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXSaveError_Unknown                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXSaveTranslationUnit_None                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXToken_Comment                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXToken_Identifier                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXToken_Keyword                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXToken_Literal                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXToken_Punctuation                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_CXXChainedPCH                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_CacheCompletionResults                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_CreatePreambleOnFirstParse                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_DetailedPreprocessingRecord                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_ForSerialization                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_IncludeAttributedTypes                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_IncludeBriefCommentsInCodeCompletion       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_Incomplete                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_KeepGoing                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_LimitSkipFunctionBodiesToPreamble          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_None                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_PrecompiledPreamble                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_RetainExcludedConditionalBlocks            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_SingleFileParse                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_SkipFunctionBodies                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTranslationUnit_VisitImplicitAttributes                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeLayoutError_Dependent                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeLayoutError_Incomplete                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeLayoutError_Invalid                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeLayoutError_InvalidFieldName                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeLayoutError_NotConstantSize                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeLayoutError_Undeduced                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeNullability_Invalid                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeNullability_NonNull                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeNullability_Nullable                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXTypeNullability_Unspecified                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Accum                                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Attributed                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Auto                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_BlockPointer                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Bool                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Char16                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Char32                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Char_S                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Char_U                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Complex                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ConstantArray                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Dependent                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_DependentSizedArray                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Double                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Elaborated                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Enum                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ExtVector                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_FirstBuiltin                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Float                                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Float128                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Float16                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_FunctionNoProto                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_FunctionProto                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Half                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_IncompleteArray                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Int                                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Int128                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Invalid                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_LValueReference                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_LastBuiltin                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Long                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_LongAccum                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_LongDouble                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_LongLong                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_MemberPointer                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_NullPtr                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLEvent                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dArrayRO                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dArrayRW                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dArrayWO                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dBufferRO                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dBufferRW                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dBufferWO                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dRO                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dRW                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage1dWO                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayDepthRO                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayDepthRW                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayDepthWO                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayMSAADepthRO                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayMSAADepthRW                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayMSAADepthWO                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayMSAARO                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayMSAARW                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayMSAAWO                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayRO                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayRW                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dArrayWO                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dDepthRO                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dDepthRW                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dDepthWO                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dMSAADepthRO                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dMSAADepthRW                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dMSAADepthWO                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dMSAARO                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dMSAARW                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dMSAAWO                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dRO                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dRW                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage2dWO                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage3dRO                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage3dRW                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLImage3dWO                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCImeDualRefStreamin                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCImePayload                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCImeResult                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCImeSingleRefStreamin               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCMcePayload                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCMceResult                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCRefPayload                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCRefResult                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCSicPayload                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLIntelSubgroupAVCSicResult                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLQueue                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLReserveID                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_OCLSampler                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ObjCClass                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ObjCId                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ObjCInterface                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ObjCObject                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ObjCObjectPointer                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ObjCSel                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ObjCTypeParam                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Overload                                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Pipe                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Pointer                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_RValueReference                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Record                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_SChar                                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Short                                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ShortAccum                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Typedef                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_UAccum                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_UChar                                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_UInt                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_UInt128                                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ULong                                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ULongAccum                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_ULongLong                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_UShort                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_UShortAccum                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Unexposed                                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_VariableArray                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Vector                                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_Void                                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-macro CXType_WChar                                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_Evaluate                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_getArgument                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_getMangling                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_getNumArguments                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_getTranslationUnit                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_isAnonymous                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_isAnonymousRecordDecl                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_isBitField                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_isMacroFunctionLike                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_isNull                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Cursor_isVariadic                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_dispose                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_getAsDouble                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_getAsInt                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_getAsLongLong                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_getAsStr                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_getAsUnsigned                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_getKind                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_EvalResult_isUnsignedInt                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Location_isFromMainFile                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Location_isInSystemHeader                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_PrintingPolicy_dispose                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_PrintingPolicy_getProperty                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_PrintingPolicy_setProperty                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Range_isNull                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Type_getOffsetOf                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_Type_getSizeOf                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_createIndex                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_defaultDiagnosticDisplayOptions                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_defaultReparseOptions                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_disposeDiagnostic                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_disposeIndex                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_disposeTokens                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_disposeTranslationUnit                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_equalCursors                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_equalLocations                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_equalTypes                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_formatDiagnostic                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getArgType                                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getArrayElementType                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getArraySize                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCanonicalType                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getChildDiagnostics                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getClangVersion                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorDefinition                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorDisplayName                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorExtent                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorKind                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorKindSpelling                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorLocation                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorPrettyPrinted                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorPrintingPolicy                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorReferenced                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorResultType                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorSpelling                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorType                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getCursorUSR                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getDiagnostic                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getDiagnosticLocation                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getDiagnosticSeverity                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getDiagnosticSpelling                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getElementType                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getEnumConstantDeclUnsignedValue                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getEnumConstantDeclValue                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getEnumDeclIntegerType                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getExpansionLocation                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getFieldDeclBitWidth                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getFileLocation                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getFileName                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getFunctionTypeCallingConv                          # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getLocation                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getLocationForOffset                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getNullCursor                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getNullLocation                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getNumArgTypes                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getNumDiagnostics                                   # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getNumElements                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getPointeeType                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getRangeStart                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getRangeEnd                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getResultType                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getSpellingLocation                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTokenExtent                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTokenKind                                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTokenLocation                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTokenSpelling                                    # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTranslationUnitCursor                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTypeDeclaration                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTypeKindSpelling                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTypePrettyPrinted                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTypePrintingPolicy                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTypeSpelling                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTypedefDeclUnderlyingType                        # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_getTypedefName                                      # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isAttribute                                         # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isConstQualifiedType                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isCursorDefinition                                  # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isDeclaration                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isFunctionTypeVariadic                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isInvalid                                           # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isPreprocessing                                     # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_isVolatileQualifiedType                             # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_parseTranslationUnit                                # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_parseTranslationUnit2                               # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_reparseTranslationUnit                              # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_saveTranslationUnit                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_toggleCrashRecovery                                 # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_tokenize                                            # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n+--include-function clang_visitChildren                                       # header: \/Users\/sundarajanathijegannathan\/bin\/llvm10\/include\/clang-c\/Index.h\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/clang.symbols","additions":599,"deletions":0,"binary":false,"changes":599,"status":"added"},{"patch":"@@ -5,3 +5,1 @@\n-  --filter ${LIBCLANG_HOME}\/include\/clang-c\/CXString.h \\\n-  --filter ${LIBCLANG_HOME}\/include\/clang-c\/CXErrorCode.h \\\n-  --filter ${LIBCLANG_HOME}\/include\/clang-c\/Index.h \\\n+  @clang.symbols \\\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/extract.sh","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.clang.libclang.CXCursorVisitor;\n@@ -119,4 +120,0 @@\n-    public boolean isEnumDeclScoped() {\n-        return Index_h.clang_EnumDecl_isScoped(cursor) != 0;\n-    }\n-\n@@ -153,25 +150,0 @@\n-    public int numberOfTemplateArgs() {\n-        return Index_h.clang_Cursor_getNumTemplateArguments(cursor);\n-    }\n-\n-    public TemplateArgumentKind getTemplateArgumentKind(int idx) {\n-        int kind = Index_h.clang_Cursor_getTemplateArgumentKind(cursor, idx);\n-        return TemplateArgumentKind.valueOf(kind);\n-    }\n-\n-    public Type getTemplateArgumentType(int idx) {\n-        return new Type(Index_h.clang_Cursor_getTemplateArgumentType(ResourceScope.newImplicitScope(), cursor, idx));\n-    }\n-\n-    public long getTemplateArgumentValue(int idx) {\n-        return Index_h.clang_Cursor_getTemplateArgumentValue(cursor, idx);\n-    }\n-\n-    public long getTemplateArgumentUnsignedValue(int idx) {\n-        return Index_h.clang_Cursor_getTemplateArgumentUnsignedValue(cursor, idx);\n-    }\n-\n-    public CursorKind getTemplateCursorKind() {\n-        return CursorKind.valueOf(Index_h.clang_getTemplateCursorKind(cursor));\n-    }\n-\n@@ -192,7 +164,0 @@\n-    \/**\n-     * Returns true if the base class specified by this cursor is virtual.\n-     *\/\n-    public boolean isVirtualBase() {\n-        return Index_h.clang_isVirtualBase(cursor) != 0;\n-    }\n-\n@@ -211,122 +176,0 @@\n-    \/**\n-     * Determine if a C++ constructor is a converting constructor.\n-     *\/\n-    public boolean isConvertingConstructor() {\n-        return Index_h.clang_CXXConstructor_isConvertingConstructor(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ constructor is a copy constructor.\n-     *\/\n-    public boolean isCopyConstructor() {\n-        return Index_h.clang_CXXConstructor_isCopyConstructor(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ constructor is the default constructor.\n-     *\/\n-    public boolean isDefaultConstructor() {\n-        return Index_h.clang_CXXConstructor_isDefaultConstructor(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ constructor is a move constructor.\n-     *\/\n-    public boolean isMoveConstructor() {\n-        return Index_h.clang_CXXConstructor_isMoveConstructor(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ field is declared 'mutable'.\n-     *\/\n-    public boolean isMutableField() {\n-        return Index_h.clang_CXXField_isMutable(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ method is declared '= default'.\n-     *\/\n-    public boolean isDefaultedMethod() {\n-        return Index_h.clang_CXXMethod_isDefaulted(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ member function is pure virtual.\n-     *\/\n-    public boolean isPureVirtualMethod() {\n-        return Index_h.clang_CXXMethod_isPureVirtual(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ member function or member function template is\n-     * declared 'static'.\n-     *\/\n-    public boolean isStaticMethod() {\n-        return Index_h.clang_CXXMethod_isStatic(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ member function is explicitly declared 'virtual'\n-     * or if it overrides a virtual method from one of the base classes.\n-     *\/\n-    public boolean isVirtualMethod() {\n-        return Index_h.clang_CXXMethod_isVirtual(cursor) != 0;\n-    }\n-\n-    public boolean isConstructor() {\n-        return kind() == CursorKind.Constructor;\n-    }\n-\n-    public boolean isDestructor() {\n-        return kind() == CursorKind.Destructor;\n-    }\n-\n-    \/**\n-     * Determine if a C++ record is abstract, i.e. whether a class or struct\n-     * has a pure virtual member function.\n-     *\/\n-    public boolean isAbstractClass() {\n-        return Index_h.clang_CXXRecord_isAbstract(cursor) != 0;\n-    }\n-\n-    \/**\n-     * Determine if a C++ member function or member function template is\n-     * declared 'const'.\n-     *\/\n-    public boolean isConstMethod() {\n-        return Index_h.clang_CXXMethod_isConst(cursor) != 0;\n-    }\n-\n-    public AccessSpecifier accessSpecifier() {\n-        int acc = Index_h.clang_getCXXAccessSpecifier(cursor);\n-        return AccessSpecifier.valueOf(acc);\n-    }\n-\n-    \/**\n-     * Determine the number of overloaded declarations referenced by a\n-     * \\c CursorKind.OverloadedDeclRef cursor.\n-     *\n-     * \\returns The number of overloaded declarations referenced by \\c cursor. If it\n-     * is not a \\c CursorKind.OverloadedDeclRef cursor, returns 0.\n-     *\/\n-    public int numberOfOverloadedDecls() {\n-        return Index_h.clang_getNumOverloadedDecls(cursor);\n-    }\n-\n-    \/**\n-     * Retrieve a cursor for one of the overloaded declarations referenced\n-     * by a \\c CXCursor_OverloadedDeclRef cursor.\n-     *\n-     *\n-     * \\param index The zero-based index into the set of overloaded declarations in\n-     * the cursor.\n-     *\n-     * \\returns A cursor representing the declaration referenced by the given\n-     * \\c cursor at the specified \\c index. If the cursor does not have an\n-     * associated set of overloaded declarations, or if the index is out of bounds,\n-     * returns \\c clang_getNullCursor();\n-     *\/\n-    public Cursor getOverloadedDecl(int index) {\n-        return new Cursor(Index_h.clang_getOverloadedDecl(ResourceScope.newImplicitScope(), cursor, index));\n-    }\n-\n@@ -340,9 +183,0 @@\n-    \/**\n-     * Given a cursor that may represent a specialization or instantiation of a template,\n-     * retrieve the cursor that represents the template that it specializes or from which\n-     * it was instantiated.\n-     *\/\n-    public Cursor getSpecializedCursorTemplate() {\n-        return new Cursor(Index_h.clang_getSpecializedCursorTemplate(ResourceScope.newImplicitScope(), cursor));\n-    }\n-\n@@ -351,1 +185,1 @@\n-        private static final MemoryAddress callback = Index_h.CXCursorVisitor.allocate((c, p, d) -> {\n+        private static final MemoryAddress callback = CXCursorVisitor.allocate((c, p, d) -> {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Cursor.java","additions":2,"deletions":168,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n+import jdk.incubator.foreign.ResourceScope;\n@@ -35,1 +37,0 @@\n-import jdk.internal.clang.libclang.NativeScope;\n@@ -86,1 +87,2 @@\n-        try (NativeScope scope = NativeScope.unboundedScope()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            SegmentAllocator allocator = SegmentAllocator.ofScope(scope);\n@@ -88,1 +90,1 @@\n-            MemorySegment cargs = scope.allocateArray(CLinker.C_POINTER, args.length);\n+            MemorySegment cargs = args.length == 0? null : allocator.allocateArray(CLinker.C_POINTER, args.length);\n@@ -92,1 +94,1 @@\n-            MemorySegment outAddress = scope.allocate(CLinker.C_POINTER);\n+            MemorySegment outAddress = allocator.allocate(CLinker.C_POINTER);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Index.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.clang.libclang.CXToken;\n@@ -37,1 +38,1 @@\n-import jdk.internal.clang.libclang.NativeScope;\n+import jdk.internal.clang.libclang.CXUnsavedFile;\n@@ -84,3 +85,3 @@\n-    static long FILENAME_OFFSET = Index_h.CXUnsavedFile.$LAYOUT().bitOffset(MemoryLayout.PathElement.groupElement(\"Filename\")) \/ 8;\n-    static long CONTENTS_OFFSET = Index_h.CXUnsavedFile.$LAYOUT().bitOffset(MemoryLayout.PathElement.groupElement(\"Contents\")) \/ 8;\n-    static long LENGTH_OFFSET = Index_h.CXUnsavedFile.$LAYOUT().bitOffset(MemoryLayout.PathElement.groupElement(\"Length\")) \/ 8;\n+    static long FILENAME_OFFSET = CXUnsavedFile.$LAYOUT().bitOffset(MemoryLayout.PathElement.groupElement(\"Filename\")) \/ 8;\n+    static long CONTENTS_OFFSET = CXUnsavedFile.$LAYOUT().bitOffset(MemoryLayout.PathElement.groupElement(\"Contents\")) \/ 8;\n+    static long LENGTH_OFFSET = CXUnsavedFile.$LAYOUT().bitOffset(MemoryLayout.PathElement.groupElement(\"Length\")) \/ 8;\n@@ -89,1 +90,2 @@\n-        try (NativeScope scope = NativeScope.unboundedScope()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            SegmentAllocator allocator = SegmentAllocator.ofScope(scope);\n@@ -92,1 +94,1 @@\n-                    scope.allocateArray(Index_h.CXUnsavedFile.$LAYOUT(), inMemoryFiles.length);\n+                    allocator.allocateArray(CXUnsavedFile.$LAYOUT(), inMemoryFiles.length);\n@@ -94,1 +96,1 @@\n-                MemorySegment start = files.asSlice(i * Index_h.CXUnsavedFile.$LAYOUT().byteSize());\n+                MemorySegment start = files.asSlice(i * CXUnsavedFile.$LAYOUT().byteSize());\n@@ -165,2 +167,2 @@\n-            MemoryAddress p = ar.addOffset(idx * Index_h.CXToken.$LAYOUT().byteSize());\n-            return p.asSegment(Index_h.CXToken.$LAYOUT().byteSize(), ResourceScope.newImplicitScope());\n+            MemoryAddress p = ar.addOffset(idx * CXToken.$LAYOUT().byteSize());\n+            return p.asSegment(CXToken.$LAYOUT().byteSize(), ResourceScope.newImplicitScope());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/TranslationUnit.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.clang.libclang.CXType;\n@@ -35,1 +36,0 @@\n-\n@@ -68,11 +68,0 @@\n-    \/**\n-     * Retrieve the ref-qualifier kind of a function or method.\n-     *\n-     * The ref-qualifier is returned for C++ functions or methods. For other types\n-     * or non-C++ declarations, CXRefQualifier_None is returned.\n-     *\/\n-    public RefQualifierKind getRefQualifier() {\n-        int refKind = Index_h.clang_Type_getCXXRefQualifier(type);\n-        return RefQualifierKind.valueOf(refKind);\n-    }\n-\n@@ -159,28 +148,0 @@\n-    \/**\n-     * Return true if the Type is a POD (plain old data) type, and false\n-     * otherwise.\n-     *\/\n-    public boolean isPODType() {\n-        return Index_h.clang_isPODType(type) != 0;\n-    }\n-\n-    \/\/ Template support\n-    \/**\n-     * Returns the number of template arguments for given template\n-     * specialization, or -1 if type \\c T is not a template specialization.\n-     *\/\n-    public int numberOfTemplateArgs() {\n-        return Index_h.clang_Type_getNumTemplateArguments(type);\n-    }\n-\n-    \/**\n-     * Returns the type template argument of a template class specialization\n-     * at given index.\n-     *\n-     * This function only returns template type arguments and does not handle\n-     * template template arguments or variadic packs.\n-     *\/\n-    public Type templateArgAsType(int idx) {\n-        return new Type(Index_h.clang_Type_getTemplateArgumentAsType(ResourceScope.newImplicitScope(), type, idx));\n-    }\n-\n@@ -194,1 +155,1 @@\n-        return Index_h.CXType.kind$get(type);\n+        return CXType.kind$get(type);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Type.java","additions":2,"deletions":41,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+public interface CXCursorVisitor {\n+\n+    int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2);\n+    static MemoryAddress allocate(CXCursorVisitor fi) {\n+        return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$12.CXCursorVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n+    }\n+    static MemoryAddress allocate(CXCursorVisitor fi, ResourceScope scope) {\n+        return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$12.CXCursorVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n+    }\n+    static CXCursorVisitor ofAddress(MemoryAddress addr) {\n+        return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n+            try {\n+                return (int)constants$13.CXCursorVisitor$MH.invokeExact((Addressable)addr, x0, x1, x2);\n+            } catch (Throwable ex$) {\n+                throw new AssertionError(\"should not reach here\", ex$);\n+            }\n+        };\n+    }\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXCursorVisitor.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+public class CXToken {\n+\n+    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n+        C_POINTER.withName(\"ptr_data\")\n+    );\n+    public static MemoryLayout $LAYOUT() {\n+        return CXToken.$struct$LAYOUT;\n+    }\n+    public static MemorySegment int_data$slice(MemorySegment seg) {\n+        return seg.asSlice(0, 16);\n+    }\n+    static final VarHandle ptr_data$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ptr_data\")));\n+    public static VarHandle ptr_data$VH() {\n+        return CXToken.ptr_data$VH;\n+    }\n+    public static MemoryAddress ptr_data$get(MemorySegment seg) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg);\n+    }\n+    public static void ptr_data$set( MemorySegment seg, MemoryAddress x) {\n+        CXToken.ptr_data$VH.set(seg, x);\n+    }\n+    public static MemoryAddress ptr_data$get(MemorySegment seg, long index) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg.asSlice(index*sizeof()));\n+    }\n+    public static void ptr_data$set(MemorySegment seg, long index, MemoryAddress x) {\n+        CXToken.ptr_data$VH.set(seg.asSlice(index*sizeof()), x);\n+    }\n+    public static long sizeof() { return $LAYOUT().byteSize(); }\n+    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    }\n+    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+        return allocateArray(len, SegmentAllocator.ofScope(scope));\n+    }\n+    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXToken.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+public class CXType {\n+\n+    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    );\n+    public static MemoryLayout $LAYOUT() {\n+        return CXType.$struct$LAYOUT;\n+    }\n+    static final VarHandle kind$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n+    public static VarHandle kind$VH() {\n+        return CXType.kind$VH;\n+    }\n+    public static int kind$get(MemorySegment seg) {\n+        return (int)CXType.kind$VH.get(seg);\n+    }\n+    public static void kind$set( MemorySegment seg, int x) {\n+        CXType.kind$VH.set(seg, x);\n+    }\n+    public static int kind$get(MemorySegment seg, long index) {\n+        return (int)CXType.kind$VH.get(seg.asSlice(index*sizeof()));\n+    }\n+    public static void kind$set(MemorySegment seg, long index, int x) {\n+        CXType.kind$VH.set(seg.asSlice(index*sizeof()), x);\n+    }\n+    public static MemorySegment data$slice(MemorySegment seg) {\n+        return seg.asSlice(8, 16);\n+    }\n+    public static long sizeof() { return $LAYOUT().byteSize(); }\n+    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    }\n+    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+        return allocateArray(len, SegmentAllocator.ofScope(scope));\n+    }\n+    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXType.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+public class CXUnsavedFile {\n+\n+    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+        C_POINTER.withName(\"Filename\"),\n+        C_POINTER.withName(\"Contents\"),\n+        C_LONG_LONG.withName(\"Length\")\n+    ).withName(\"CXUnsavedFile\");\n+    public static MemoryLayout $LAYOUT() {\n+        return CXUnsavedFile.$struct$LAYOUT;\n+    }\n+    static final VarHandle Filename$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Filename\")));\n+    public static VarHandle Filename$VH() {\n+        return CXUnsavedFile.Filename$VH;\n+    }\n+    public static MemoryAddress Filename$get(MemorySegment seg) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg);\n+    }\n+    public static void Filename$set( MemorySegment seg, MemoryAddress x) {\n+        CXUnsavedFile.Filename$VH.set(seg, x);\n+    }\n+    public static MemoryAddress Filename$get(MemorySegment seg, long index) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg.asSlice(index*sizeof()));\n+    }\n+    public static void Filename$set(MemorySegment seg, long index, MemoryAddress x) {\n+        CXUnsavedFile.Filename$VH.set(seg.asSlice(index*sizeof()), x);\n+    }\n+    static final VarHandle Contents$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Contents\")));\n+    public static VarHandle Contents$VH() {\n+        return CXUnsavedFile.Contents$VH;\n+    }\n+    public static MemoryAddress Contents$get(MemorySegment seg) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg);\n+    }\n+    public static void Contents$set( MemorySegment seg, MemoryAddress x) {\n+        CXUnsavedFile.Contents$VH.set(seg, x);\n+    }\n+    public static MemoryAddress Contents$get(MemorySegment seg, long index) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg.asSlice(index*sizeof()));\n+    }\n+    public static void Contents$set(MemorySegment seg, long index, MemoryAddress x) {\n+        CXUnsavedFile.Contents$VH.set(seg.asSlice(index*sizeof()), x);\n+    }\n+    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Length\"));\n+    public static VarHandle Length$VH() {\n+        return CXUnsavedFile.Length$VH;\n+    }\n+    public static long Length$get(MemorySegment seg) {\n+        return (long)CXUnsavedFile.Length$VH.get(seg);\n+    }\n+    public static void Length$set( MemorySegment seg, long x) {\n+        CXUnsavedFile.Length$VH.set(seg, x);\n+    }\n+    public static long Length$get(MemorySegment seg, long index) {\n+        return (long)CXUnsavedFile.Length$VH.get(seg.asSlice(index*sizeof()));\n+    }\n+    public static void Length$set(MemorySegment seg, long index, long x) {\n+        CXUnsavedFile.Length$VH.set(seg.asSlice(index*sizeof()), x);\n+    }\n+    public static long sizeof() { return $LAYOUT().byteSize(); }\n+    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n+    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    }\n+    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+        return allocateArray(len, SegmentAllocator.ofScope(scope));\n+    }\n+    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXUnsavedFile.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -24,1 +24,0 @@\n- *\n@@ -36,1 +35,1 @@\n-public class Index_h extends Index_h_1 {\n+public class Index_h  {\n@@ -38,3 +37,6 @@\n-    \/* package-private *\/ Index_h() {}\n-    public static int CINDEX_VERSION_MAJOR() {\n-        return (int)0L;\n+    \/\/ Manual change to handle platform specific library name difference\n+    private static String libName() {\n+        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+            return \"libclang\";\n+        }\n+        return \"clang\";\n@@ -42,2 +44,3 @@\n-    public static int CINDEX_VERSION_MINOR() {\n-        return (int)59L;\n+\n+    static {\n+        System.loadLibrary(libName());\n@@ -45,0 +48,2 @@\n+\n+    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    \/* package-private *\/ Index_h() {}\n@@ -60,108 +65,0 @@\n-    public static class CXString {\n-\n-        static final MemoryLayout CXString$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXString.CXString$struct$LAYOUT;\n-        }\n-        static final VarHandle data$VH = MemoryHandles.asAddressVarHandle(CXString$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"data\")));\n-        public static VarHandle data$VH() {\n-            return CXString.data$VH;\n-        }\n-        public static MemoryAddress data$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg);\n-        }\n-        public static void data$set( MemorySegment seg, MemoryAddress x) {\n-            CXString.data$VH.set(seg, x);\n-        }\n-        public static MemoryAddress data$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void data$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXString.data$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle private_flags$VH = CXString$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"private_flags\"));\n-        public static VarHandle private_flags$VH() {\n-            return CXString.private_flags$VH;\n-        }\n-        public static int private_flags$get(MemorySegment seg) {\n-            return (int)CXString.private_flags$VH.get(seg);\n-        }\n-        public static void private_flags$set( MemorySegment seg, int x) {\n-            CXString.private_flags$VH.set(seg, x);\n-        }\n-        public static int private_flags$get(MemorySegment seg, long index) {\n-            return (int)CXString.private_flags$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void private_flags$set(MemorySegment seg, long index, int x) {\n-            CXString.private_flags$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXStringSet {\n-\n-        static final MemoryLayout CXStringSet$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"Strings\"),\n-            C_INT.withName(\"Count\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXStringSet.CXStringSet$struct$LAYOUT;\n-        }\n-        static final VarHandle Strings$VH = MemoryHandles.asAddressVarHandle(CXStringSet$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Strings\")));\n-        public static VarHandle Strings$VH() {\n-            return CXStringSet.Strings$VH;\n-        }\n-        public static MemoryAddress Strings$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXStringSet.Strings$VH.get(seg);\n-        }\n-        public static void Strings$set( MemorySegment seg, MemoryAddress x) {\n-            CXStringSet.Strings$VH.set(seg, x);\n-        }\n-        public static MemoryAddress Strings$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXStringSet.Strings$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Strings$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXStringSet.Strings$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle Count$VH = CXStringSet$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Count\"));\n-        public static VarHandle Count$VH() {\n-            return CXStringSet.Count$VH;\n-        }\n-        public static int Count$get(MemorySegment seg) {\n-            return (int)CXStringSet.Count$VH.get(seg);\n-        }\n-        public static void Count$set( MemorySegment seg, int x) {\n-            CXStringSet.Count$VH.set(seg, x);\n-        }\n-        public static int Count$get(MemorySegment seg, long index) {\n-            return (int)CXStringSet.Count$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Count$set(MemorySegment seg, long index, int x) {\n-            CXStringSet.Count$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n@@ -190,163 +87,0 @@\n-    public static MethodHandle clang_disposeStringSet$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_disposeStringSet$MH,\"clang_disposeStringSet\");\n-    }\n-    public static void clang_disposeStringSet ( Addressable set) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_disposeStringSet$MH, \"clang_disposeStringSet\");\n-        try {\n-            mh$.invokeExact(set.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class CXUnsavedFile {\n-\n-        static final MemoryLayout CXUnsavedFile$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"Filename\"),\n-            C_POINTER.withName(\"Contents\"),\n-            C_LONG_LONG.withName(\"Length\")\n-        ).withName(\"CXUnsavedFile\");\n-        public static MemoryLayout $LAYOUT() {\n-            return CXUnsavedFile.CXUnsavedFile$struct$LAYOUT;\n-        }\n-        static final VarHandle Filename$VH = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Filename\")));\n-        public static VarHandle Filename$VH() {\n-            return CXUnsavedFile.Filename$VH;\n-        }\n-        public static MemoryAddress Filename$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg);\n-        }\n-        public static void Filename$set( MemorySegment seg, MemoryAddress x) {\n-            CXUnsavedFile.Filename$VH.set(seg, x);\n-        }\n-        public static MemoryAddress Filename$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Filename$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXUnsavedFile.Filename$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle Contents$VH = MemoryHandles.asAddressVarHandle(CXUnsavedFile$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Contents\")));\n-        public static VarHandle Contents$VH() {\n-            return CXUnsavedFile.Contents$VH;\n-        }\n-        public static MemoryAddress Contents$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg);\n-        }\n-        public static void Contents$set( MemorySegment seg, MemoryAddress x) {\n-            CXUnsavedFile.Contents$VH.set(seg, x);\n-        }\n-        public static MemoryAddress Contents$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Contents$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXUnsavedFile.Contents$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle Length$VH = CXUnsavedFile$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Length\"));\n-        public static VarHandle Length$VH() {\n-            return CXUnsavedFile.Length$VH;\n-        }\n-        public static long Length$get(MemorySegment seg) {\n-            return (long)CXUnsavedFile.Length$VH.get(seg);\n-        }\n-        public static void Length$set( MemorySegment seg, long x) {\n-            CXUnsavedFile.Length$VH.set(seg, x);\n-        }\n-        public static long Length$get(MemorySegment seg, long index) {\n-            return (long)CXUnsavedFile.Length$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Length$set(MemorySegment seg, long index, long x) {\n-            CXUnsavedFile.Length$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static int CXAvailability_Available() {\n-        return (int)0L;\n-    }\n-    public static int CXAvailability_Deprecated() {\n-        return (int)1L;\n-    }\n-    public static int CXAvailability_NotAvailable() {\n-        return (int)2L;\n-    }\n-    public static int CXAvailability_NotAccessible() {\n-        return (int)3L;\n-    }\n-    public static class CXVersion {\n-\n-        static final MemoryLayout CXVersion$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"Major\"),\n-            C_INT.withName(\"Minor\"),\n-            C_INT.withName(\"Subminor\")\n-        ).withName(\"CXVersion\");\n-        public static MemoryLayout $LAYOUT() {\n-            return CXVersion.CXVersion$struct$LAYOUT;\n-        }\n-        static final VarHandle Major$VH = CXVersion$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Major\"));\n-        public static VarHandle Major$VH() {\n-            return CXVersion.Major$VH;\n-        }\n-        public static int Major$get(MemorySegment seg) {\n-            return (int)CXVersion.Major$VH.get(seg);\n-        }\n-        public static void Major$set( MemorySegment seg, int x) {\n-            CXVersion.Major$VH.set(seg, x);\n-        }\n-        public static int Major$get(MemorySegment seg, long index) {\n-            return (int)CXVersion.Major$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Major$set(MemorySegment seg, long index, int x) {\n-            CXVersion.Major$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle Minor$VH = CXVersion$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Minor\"));\n-        public static VarHandle Minor$VH() {\n-            return CXVersion.Minor$VH;\n-        }\n-        public static int Minor$get(MemorySegment seg) {\n-            return (int)CXVersion.Minor$VH.get(seg);\n-        }\n-        public static void Minor$set( MemorySegment seg, int x) {\n-            CXVersion.Minor$VH.set(seg, x);\n-        }\n-        public static int Minor$get(MemorySegment seg, long index) {\n-            return (int)CXVersion.Minor$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Minor$set(MemorySegment seg, long index, int x) {\n-            CXVersion.Minor$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle Subminor$VH = CXVersion$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Subminor\"));\n-        public static VarHandle Subminor$VH() {\n-            return CXVersion.Subminor$VH;\n-        }\n-        public static int Subminor$get(MemorySegment seg) {\n-            return (int)CXVersion.Subminor$VH.get(seg);\n-        }\n-        public static void Subminor$set( MemorySegment seg, int x) {\n-            CXVersion.Subminor$VH.set(seg, x);\n-        }\n-        public static int Subminor$get(MemorySegment seg, long index) {\n-            return (int)CXVersion.Subminor$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Subminor$set(MemorySegment seg, long index, int x) {\n-            CXVersion.Subminor$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n@@ -405,107 +139,0 @@\n-    public static int CXGlobalOpt_None() {\n-        return (int)0L;\n-    }\n-    public static int CXGlobalOpt_ThreadBackgroundPriorityForIndexing() {\n-        return (int)1L;\n-    }\n-    public static int CXGlobalOpt_ThreadBackgroundPriorityForEditing() {\n-        return (int)2L;\n-    }\n-    public static int CXGlobalOpt_ThreadBackgroundPriorityForAll() {\n-        return (int)3L;\n-    }\n-    public static MethodHandle clang_CXIndex_setGlobalOptions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_CXIndex_setGlobalOptions$MH,\"clang_CXIndex_setGlobalOptions\");\n-    }\n-    public static void clang_CXIndex_setGlobalOptions ( Addressable x0,  int options) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_CXIndex_setGlobalOptions$MH, \"clang_CXIndex_setGlobalOptions\");\n-        try {\n-            mh$.invokeExact(x0.address(), options);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$0 {\n-\n-        static final FunctionDescriptor clang_getCString$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_getCString$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCString\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$0.clang_getCString$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeString$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_disposeString$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeString\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n-            constants$0.clang_disposeString$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeStringSet$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeStringSet$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeStringSet\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$0.clang_disposeStringSet$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_createIndex$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_createIndex$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_createIndex\",\n-            \"(II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$0.clang_createIndex$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeIndex$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeIndex$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeIndex\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$0.clang_disposeIndex$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXIndex_setGlobalOptions$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_CXIndex_setGlobalOptions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXIndex_setGlobalOptions\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-            constants$0.clang_CXIndex_setGlobalOptions$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_CXIndex_getGlobalOptions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_getGlobalOptions$MH,\"clang_CXIndex_getGlobalOptions\");\n-    }\n-    public static int clang_CXIndex_getGlobalOptions ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_getGlobalOptions$MH, \"clang_CXIndex_getGlobalOptions\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_setInvocationEmissionPathOption$MH,\"clang_CXIndex_setInvocationEmissionPathOption\");\n-    }\n-    public static void clang_CXIndex_setInvocationEmissionPathOption ( Addressable x0,  Addressable Path) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_CXIndex_setInvocationEmissionPathOption$MH, \"clang_CXIndex_setInvocationEmissionPathOption\");\n-        try {\n-            mh$.invokeExact(x0.address(), Path.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -513,1 +140,1 @@\n-        return RuntimeHelper.requireNonNull(constants$1.clang_getFileName$MH,\"clang_getFileName\");\n+        return RuntimeHelper.requireNonNull(constants$0.clang_getFileName$MH,\"clang_getFileName\");\n@@ -516,1 +143,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getFileName$MH, \"clang_getFileName\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_getFileName$MH, \"clang_getFileName\");\n@@ -526,260 +153,0 @@\n-    public static MethodHandle clang_getFileTime$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_getFileTime$MH,\"clang_getFileTime\");\n-    }\n-    public static long clang_getFileTime ( Addressable SFile) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getFileTime$MH, \"clang_getFileTime\");\n-        try {\n-            return (long)mh$.invokeExact(SFile.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class CXFileUniqueID {\n-\n-        static final MemoryLayout CXFileUniqueID$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(3, C_LONG_LONG).withName(\"data\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXFileUniqueID.CXFileUniqueID$struct$LAYOUT;\n-        }\n-        public static MemorySegment data$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 24);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static MethodHandle clang_getFileUniqueID$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_getFileUniqueID$MH,\"clang_getFileUniqueID\");\n-    }\n-    public static int clang_getFileUniqueID ( Addressable file,  Addressable outID) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getFileUniqueID$MH, \"clang_getFileUniqueID\");\n-        try {\n-            return (int)mh$.invokeExact(file.address(), outID.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isFileMultipleIncludeGuarded$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_isFileMultipleIncludeGuarded$MH,\"clang_isFileMultipleIncludeGuarded\");\n-    }\n-    public static int clang_isFileMultipleIncludeGuarded ( Addressable tu,  Addressable file) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_isFileMultipleIncludeGuarded$MH, \"clang_isFileMultipleIncludeGuarded\");\n-        try {\n-            return (int)mh$.invokeExact(tu.address(), file.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$1 {\n-\n-        static final FunctionDescriptor clang_CXIndex_getGlobalOptions$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_CXIndex_getGlobalOptions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXIndex_getGlobalOptions\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$1.clang_CXIndex_getGlobalOptions$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXIndex_setInvocationEmissionPathOption$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_CXIndex_setInvocationEmissionPathOption$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXIndex_setInvocationEmissionPathOption\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$1.clang_CXIndex_setInvocationEmissionPathOption$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getFileName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getFileName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFileName\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$1.clang_getFileName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getFileTime$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getFileTime$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFileTime\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-            constants$1.clang_getFileTime$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getFileUniqueID$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getFileUniqueID$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFileUniqueID\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$1.clang_getFileUniqueID$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isFileMultipleIncludeGuarded$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_isFileMultipleIncludeGuarded$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isFileMultipleIncludeGuarded\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$1.clang_isFileMultipleIncludeGuarded$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getFile$MH,\"clang_getFile\");\n-    }\n-    public static MemoryAddress clang_getFile ( Addressable tu,  Addressable file_name) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getFile$MH, \"clang_getFile\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address(), file_name.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getFileContents$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getFileContents$MH,\"clang_getFileContents\");\n-    }\n-    public static MemoryAddress clang_getFileContents ( Addressable tu,  Addressable file,  Addressable size) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getFileContents$MH, \"clang_getFileContents\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address(), file.address(), size.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_File_isEqual$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_File_isEqual$MH,\"clang_File_isEqual\");\n-    }\n-    public static int clang_File_isEqual ( Addressable file1,  Addressable file2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_File_isEqual$MH, \"clang_File_isEqual\");\n-        try {\n-            return (int)mh$.invokeExact(file1.address(), file2.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_File_tryGetRealPathName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_File_tryGetRealPathName$MH,\"clang_File_tryGetRealPathName\");\n-    }\n-    public static MemorySegment clang_File_tryGetRealPathName ( SegmentAllocator allocator,  Addressable file) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_File_tryGetRealPathName$MH, \"clang_File_tryGetRealPathName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, file.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_File_tryGetRealPathName ( ResourceScope scope,  Addressable file) {\n-        return clang_File_tryGetRealPathName(SegmentAllocator.ofScope(scope), file.address());\n-    }\n-    public static class CXSourceLocation {\n-\n-        static final MemoryLayout CXSourceLocation$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXSourceLocation.CXSourceLocation$struct$LAYOUT;\n-        }\n-        public static MemorySegment ptr_data$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 16);\n-        }\n-        static final VarHandle int_data$VH = CXSourceLocation$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"int_data\"));\n-        public static VarHandle int_data$VH() {\n-            return CXSourceLocation.int_data$VH;\n-        }\n-        public static int int_data$get(MemorySegment seg) {\n-            return (int)CXSourceLocation.int_data$VH.get(seg);\n-        }\n-        public static void int_data$set( MemorySegment seg, int x) {\n-            CXSourceLocation.int_data$VH.set(seg, x);\n-        }\n-        public static int int_data$get(MemorySegment seg, long index) {\n-            return (int)CXSourceLocation.int_data$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void int_data$set(MemorySegment seg, long index, int x) {\n-            CXSourceLocation.int_data$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXSourceRange {\n-\n-        static final MemoryLayout CXSourceRange$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXSourceRange.CXSourceRange$struct$LAYOUT;\n-        }\n-        public static MemorySegment ptr_data$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 16);\n-        }\n-        static final VarHandle begin_int_data$VH = CXSourceRange$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"begin_int_data\"));\n-        public static VarHandle begin_int_data$VH() {\n-            return CXSourceRange.begin_int_data$VH;\n-        }\n-        public static int begin_int_data$get(MemorySegment seg) {\n-            return (int)CXSourceRange.begin_int_data$VH.get(seg);\n-        }\n-        public static void begin_int_data$set( MemorySegment seg, int x) {\n-            CXSourceRange.begin_int_data$VH.set(seg, x);\n-        }\n-        public static int begin_int_data$get(MemorySegment seg, long index) {\n-            return (int)CXSourceRange.begin_int_data$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void begin_int_data$set(MemorySegment seg, long index, int x) {\n-            CXSourceRange.begin_int_data$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle end_int_data$VH = CXSourceRange$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"end_int_data\"));\n-        public static VarHandle end_int_data$VH() {\n-            return CXSourceRange.end_int_data$VH;\n-        }\n-        public static int end_int_data$get(MemorySegment seg) {\n-            return (int)CXSourceRange.end_int_data$VH.get(seg);\n-        }\n-        public static void end_int_data$set( MemorySegment seg, int x) {\n-            CXSourceRange.end_int_data$VH.set(seg, x);\n-        }\n-        public static int end_int_data$get(MemorySegment seg, long index) {\n-            return (int)CXSourceRange.end_int_data$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void end_int_data$set(MemorySegment seg, long index, int x) {\n-            CXSourceRange.end_int_data$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n@@ -787,1 +154,1 @@\n-        return RuntimeHelper.requireNonNull(constants$2.clang_getNullLocation$MH,\"clang_getNullLocation\");\n+        return RuntimeHelper.requireNonNull(constants$0.clang_getNullLocation$MH,\"clang_getNullLocation\");\n@@ -790,1 +157,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getNullLocation$MH, \"clang_getNullLocation\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_getNullLocation$MH, \"clang_getNullLocation\");\n@@ -801,1 +168,1 @@\n-        return RuntimeHelper.requireNonNull(constants$2.clang_equalLocations$MH,\"clang_equalLocations\");\n+        return RuntimeHelper.requireNonNull(constants$1.clang_equalLocations$MH,\"clang_equalLocations\");\n@@ -804,1 +171,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_equalLocations$MH, \"clang_equalLocations\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_equalLocations$MH, \"clang_equalLocations\");\n@@ -811,71 +178,0 @@\n-    public static class constants$2 {\n-\n-        static final FunctionDescriptor clang_getFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$2.clang_getFile$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getFileContents$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getFileContents$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFileContents\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$2.clang_getFileContents$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_File_isEqual$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_File_isEqual$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_File_isEqual\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$2.clang_File_isEqual$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_File_tryGetRealPathName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_File_tryGetRealPathName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_File_tryGetRealPathName\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$2.clang_File_tryGetRealPathName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNullLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ));\n-        static final MethodHandle clang_getNullLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNullLocation\",\n-            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$2.clang_getNullLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_equalLocations$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_equalLocations$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_equalLocations\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$2.clang_equalLocations$FUNC, false\n-        );\n-    }\n-\n@@ -883,1 +179,1 @@\n-        return RuntimeHelper.requireNonNull(constants$3.clang_getLocation$MH,\"clang_getLocation\");\n+        return RuntimeHelper.requireNonNull(constants$1.clang_getLocation$MH,\"clang_getLocation\");\n@@ -886,1 +182,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getLocation$MH, \"clang_getLocation\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getLocation$MH, \"clang_getLocation\");\n@@ -897,1 +193,1 @@\n-        return RuntimeHelper.requireNonNull(constants$3.clang_getLocationForOffset$MH,\"clang_getLocationForOffset\");\n+        return RuntimeHelper.requireNonNull(constants$1.clang_getLocationForOffset$MH,\"clang_getLocationForOffset\");\n@@ -900,1 +196,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getLocationForOffset$MH, \"clang_getLocationForOffset\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_getLocationForOffset$MH, \"clang_getLocationForOffset\");\n@@ -911,1 +207,1 @@\n-        return RuntimeHelper.requireNonNull(constants$3.clang_Location_isInSystemHeader$MH,\"clang_Location_isInSystemHeader\");\n+        return RuntimeHelper.requireNonNull(constants$1.clang_Location_isInSystemHeader$MH,\"clang_Location_isInSystemHeader\");\n@@ -914,1 +210,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_Location_isInSystemHeader$MH, \"clang_Location_isInSystemHeader\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_Location_isInSystemHeader$MH, \"clang_Location_isInSystemHeader\");\n@@ -922,1 +218,1 @@\n-        return RuntimeHelper.requireNonNull(constants$3.clang_Location_isFromMainFile$MH,\"clang_Location_isFromMainFile\");\n+        return RuntimeHelper.requireNonNull(constants$1.clang_Location_isFromMainFile$MH,\"clang_Location_isFromMainFile\");\n@@ -925,1 +221,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_Location_isFromMainFile$MH, \"clang_Location_isFromMainFile\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_Location_isFromMainFile$MH, \"clang_Location_isFromMainFile\");\n@@ -932,127 +228,0 @@\n-    public static MethodHandle clang_getNullRange$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_getNullRange$MH,\"clang_getNullRange\");\n-    }\n-    public static MemorySegment clang_getNullRange ( SegmentAllocator allocator) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getNullRange$MH, \"clang_getNullRange\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getNullRange ( ResourceScope scope) {\n-        return clang_getNullRange(SegmentAllocator.ofScope(scope));\n-    }\n-    public static MethodHandle clang_getRange$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_getRange$MH,\"clang_getRange\");\n-    }\n-    public static MemorySegment clang_getRange ( SegmentAllocator allocator,  MemorySegment begin,  MemorySegment end) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getRange$MH, \"clang_getRange\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, begin, end);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getRange ( ResourceScope scope,  MemorySegment begin,  MemorySegment end) {\n-        return clang_getRange(SegmentAllocator.ofScope(scope), begin, end);\n-    }\n-    public static class constants$3 {\n-\n-        static final FunctionDescriptor clang_getLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$3.clang_getLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getLocationForOffset$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getLocationForOffset$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getLocationForOffset\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$3.clang_getLocationForOffset$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Location_isInSystemHeader$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_Location_isInSystemHeader$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Location_isInSystemHeader\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$3.clang_Location_isInSystemHeader$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Location_isFromMainFile$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_Location_isFromMainFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Location_isFromMainFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$3.clang_Location_isFromMainFile$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNullRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ));\n-        static final MethodHandle clang_getNullRange$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNullRange\",\n-            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$3.clang_getNullRange$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_getRange$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getRange\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$3.clang_getRange$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_equalRanges$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_equalRanges$MH,\"clang_equalRanges\");\n-    }\n-    public static int clang_equalRanges ( MemorySegment range1,  MemorySegment range2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_equalRanges$MH, \"clang_equalRanges\");\n-        try {\n-            return (int)mh$.invokeExact(range1, range2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -1060,1 +229,1 @@\n-        return RuntimeHelper.requireNonNull(constants$4.clang_Range_isNull$MH,\"clang_Range_isNull\");\n+        return RuntimeHelper.requireNonNull(constants$1.clang_Range_isNull$MH,\"clang_Range_isNull\");\n@@ -1063,1 +232,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_Range_isNull$MH, \"clang_Range_isNull\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_Range_isNull$MH, \"clang_Range_isNull\");\n@@ -1071,1 +240,1 @@\n-        return RuntimeHelper.requireNonNull(constants$4.clang_getExpansionLocation$MH,\"clang_getExpansionLocation\");\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getExpansionLocation$MH,\"clang_getExpansionLocation\");\n@@ -1074,23 +243,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getExpansionLocation$MH, \"clang_getExpansionLocation\");\n-        try {\n-            mh$.invokeExact(location, file.address(), line.address(), column.address(), offset.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getPresumedLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_getPresumedLocation$MH,\"clang_getPresumedLocation\");\n-    }\n-    public static void clang_getPresumedLocation ( MemorySegment location,  Addressable filename,  Addressable line,  Addressable column) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getPresumedLocation$MH, \"clang_getPresumedLocation\");\n-        try {\n-            mh$.invokeExact(location, filename.address(), line.address(), column.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getInstantiationLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$4.clang_getInstantiationLocation$MH,\"clang_getInstantiationLocation\");\n-    }\n-    public static void clang_getInstantiationLocation ( MemorySegment location,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getInstantiationLocation$MH, \"clang_getInstantiationLocation\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getExpansionLocation$MH, \"clang_getExpansionLocation\");\n@@ -1104,1 +251,1 @@\n-        return RuntimeHelper.requireNonNull(constants$4.clang_getSpellingLocation$MH,\"clang_getSpellingLocation\");\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getSpellingLocation$MH,\"clang_getSpellingLocation\");\n@@ -1107,1 +254,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getSpellingLocation$MH, \"clang_getSpellingLocation\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getSpellingLocation$MH, \"clang_getSpellingLocation\");\n@@ -1114,96 +261,0 @@\n-    public static class constants$4 {\n-\n-        static final FunctionDescriptor clang_equalRanges$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n-        );\n-        static final MethodHandle clang_equalRanges$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_equalRanges\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$4.clang_equalRanges$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Range_isNull$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n-        );\n-        static final MethodHandle clang_Range_isNull$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Range_isNull\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$4.clang_Range_isNull$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getExpansionLocation$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getExpansionLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getExpansionLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$4.clang_getExpansionLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getPresumedLocation$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getPresumedLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getPresumedLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$4.clang_getPresumedLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getInstantiationLocation$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getInstantiationLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getInstantiationLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$4.clang_getInstantiationLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getSpellingLocation$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getSpellingLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getSpellingLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$4.clang_getSpellingLocation$FUNC, false\n-        );\n-    }\n-\n@@ -1211,1 +262,1 @@\n-        return RuntimeHelper.requireNonNull(constants$5.clang_getFileLocation$MH,\"clang_getFileLocation\");\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getFileLocation$MH,\"clang_getFileLocation\");\n@@ -1214,1 +265,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getFileLocation$MH, \"clang_getFileLocation\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getFileLocation$MH, \"clang_getFileLocation\");\n@@ -1222,1 +273,1 @@\n-        return RuntimeHelper.requireNonNull(constants$5.clang_getRangeStart$MH,\"clang_getRangeStart\");\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getRangeStart$MH,\"clang_getRangeStart\");\n@@ -1225,1 +276,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getRangeStart$MH, \"clang_getRangeStart\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getRangeStart$MH, \"clang_getRangeStart\");\n@@ -1236,1 +287,1 @@\n-        return RuntimeHelper.requireNonNull(constants$5.clang_getRangeEnd$MH,\"clang_getRangeEnd\");\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getRangeEnd$MH,\"clang_getRangeEnd\");\n@@ -1239,1 +290,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getRangeEnd$MH, \"clang_getRangeEnd\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getRangeEnd$MH, \"clang_getRangeEnd\");\n@@ -1249,87 +300,0 @@\n-    public static class CXSourceRangeList {\n-\n-        static final MemoryLayout CXSourceRangeList$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"count\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_POINTER.withName(\"ranges\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXSourceRangeList.CXSourceRangeList$struct$LAYOUT;\n-        }\n-        static final VarHandle count$VH = CXSourceRangeList$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"count\"));\n-        public static VarHandle count$VH() {\n-            return CXSourceRangeList.count$VH;\n-        }\n-        public static int count$get(MemorySegment seg) {\n-            return (int)CXSourceRangeList.count$VH.get(seg);\n-        }\n-        public static void count$set( MemorySegment seg, int x) {\n-            CXSourceRangeList.count$VH.set(seg, x);\n-        }\n-        public static int count$get(MemorySegment seg, long index) {\n-            return (int)CXSourceRangeList.count$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void count$set(MemorySegment seg, long index, int x) {\n-            CXSourceRangeList.count$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle ranges$VH = MemoryHandles.asAddressVarHandle(CXSourceRangeList$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ranges\")));\n-        public static VarHandle ranges$VH() {\n-            return CXSourceRangeList.ranges$VH;\n-        }\n-        public static MemoryAddress ranges$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXSourceRangeList.ranges$VH.get(seg);\n-        }\n-        public static void ranges$set( MemorySegment seg, MemoryAddress x) {\n-            CXSourceRangeList.ranges$VH.set(seg, x);\n-        }\n-        public static MemoryAddress ranges$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXSourceRangeList.ranges$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void ranges$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXSourceRangeList.ranges$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static MethodHandle clang_getSkippedRanges$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_getSkippedRanges$MH,\"clang_getSkippedRanges\");\n-    }\n-    public static MemoryAddress clang_getSkippedRanges ( Addressable tu,  Addressable file) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getSkippedRanges$MH, \"clang_getSkippedRanges\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address(), file.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getAllSkippedRanges$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_getAllSkippedRanges$MH,\"clang_getAllSkippedRanges\");\n-    }\n-    public static MemoryAddress clang_getAllSkippedRanges ( Addressable tu) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getAllSkippedRanges$MH, \"clang_getAllSkippedRanges\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tu.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeSourceRangeList$MH() {\n-        return RuntimeHelper.requireNonNull(constants$5.clang_disposeSourceRangeList$MH,\"clang_disposeSourceRangeList\");\n-    }\n-    public static void clang_disposeSourceRangeList ( Addressable ranges) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_disposeSourceRangeList$MH, \"clang_disposeSourceRangeList\");\n-        try {\n-            mh$.invokeExact(ranges.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -1351,133 +315,0 @@\n-    public static class constants$5 {\n-\n-        static final FunctionDescriptor clang_getFileLocation$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getFileLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFileLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$5.clang_getFileLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getRangeStart$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getRangeStart$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getRangeStart\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$5.clang_getRangeStart$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getRangeEnd$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getRangeEnd$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getRangeEnd\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$5.clang_getRangeEnd$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getSkippedRanges$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getSkippedRanges$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getSkippedRanges\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$5.clang_getSkippedRanges$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getAllSkippedRanges$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getAllSkippedRanges$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getAllSkippedRanges\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$5.clang_getAllSkippedRanges$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeSourceRangeList$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeSourceRangeList$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeSourceRangeList\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$5.clang_disposeSourceRangeList$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getNumDiagnosticsInSet$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnosticsInSet$MH,\"clang_getNumDiagnosticsInSet\");\n-    }\n-    public static int clang_getNumDiagnosticsInSet ( Addressable Diags) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnosticsInSet$MH, \"clang_getNumDiagnosticsInSet\");\n-        try {\n-            return (int)mh$.invokeExact(Diags.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getDiagnosticInSet$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_getDiagnosticInSet$MH,\"clang_getDiagnosticInSet\");\n-    }\n-    public static MemoryAddress clang_getDiagnosticInSet ( Addressable Diags,  int Index) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getDiagnosticInSet$MH, \"clang_getDiagnosticInSet\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Diags.address(), Index);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXLoadDiag_None() {\n-        return (int)0L;\n-    }\n-    public static int CXLoadDiag_Unknown() {\n-        return (int)1L;\n-    }\n-    public static int CXLoadDiag_CannotLoad() {\n-        return (int)2L;\n-    }\n-    public static int CXLoadDiag_InvalidFile() {\n-        return (int)3L;\n-    }\n-    public static MethodHandle clang_loadDiagnostics$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_loadDiagnostics$MH,\"clang_loadDiagnostics\");\n-    }\n-    public static MemoryAddress clang_loadDiagnostics ( Addressable file,  Addressable error,  Addressable errorString) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_loadDiagnostics$MH, \"clang_loadDiagnostics\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file.address(), error.address(), errorString.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeDiagnosticSet$MH() {\n-        return RuntimeHelper.requireNonNull(constants$6.clang_disposeDiagnosticSet$MH,\"clang_disposeDiagnosticSet\");\n-    }\n-    public static void clang_disposeDiagnosticSet ( Addressable Diags) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_disposeDiagnosticSet$MH, \"clang_disposeDiagnosticSet\");\n-        try {\n-            mh$.invokeExact(Diags.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -1485,1 +316,1 @@\n-        return RuntimeHelper.requireNonNull(constants$6.clang_getChildDiagnostics$MH,\"clang_getChildDiagnostics\");\n+        return RuntimeHelper.requireNonNull(constants$2.clang_getChildDiagnostics$MH,\"clang_getChildDiagnostics\");\n@@ -1488,1 +319,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getChildDiagnostics$MH, \"clang_getChildDiagnostics\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_getChildDiagnostics$MH, \"clang_getChildDiagnostics\");\n@@ -1496,1 +327,1 @@\n-        return RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnostics$MH,\"clang_getNumDiagnostics\");\n+        return RuntimeHelper.requireNonNull(constants$3.clang_getNumDiagnostics$MH,\"clang_getNumDiagnostics\");\n@@ -1499,1 +330,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getNumDiagnostics$MH, \"clang_getNumDiagnostics\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getNumDiagnostics$MH, \"clang_getNumDiagnostics\");\n@@ -1506,55 +337,0 @@\n-    public static class constants$6 {\n-\n-        static final FunctionDescriptor clang_getNumDiagnosticsInSet$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getNumDiagnosticsInSet$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNumDiagnosticsInSet\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$6.clang_getNumDiagnosticsInSet$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticInSet$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getDiagnosticInSet$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticInSet\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$6.clang_getDiagnosticInSet$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_loadDiagnostics$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_loadDiagnostics$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_loadDiagnostics\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$6.clang_loadDiagnostics$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeDiagnosticSet$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeDiagnosticSet$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeDiagnosticSet\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$6.clang_disposeDiagnosticSet$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getChildDiagnostics$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getChildDiagnostics$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getChildDiagnostics\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$6.clang_getChildDiagnostics$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getNumDiagnostics$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNumDiagnostics\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$6.clang_getNumDiagnostics$FUNC, false\n-        );\n-    }\n-\n@@ -1562,1 +338,1 @@\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getDiagnostic$MH,\"clang_getDiagnostic\");\n+        return RuntimeHelper.requireNonNull(constants$3.clang_getDiagnostic$MH,\"clang_getDiagnostic\");\n@@ -1565,1 +341,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getDiagnostic$MH, \"clang_getDiagnostic\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getDiagnostic$MH, \"clang_getDiagnostic\");\n@@ -1572,11 +348,0 @@\n-    public static MethodHandle clang_getDiagnosticSetFromTU$MH() {\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSetFromTU$MH,\"clang_getDiagnosticSetFromTU\");\n-    }\n-    public static MemoryAddress clang_getDiagnosticSetFromTU ( Addressable Unit) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSetFromTU$MH, \"clang_getDiagnosticSetFromTU\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Unit.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -1584,1 +349,1 @@\n-        return RuntimeHelper.requireNonNull(constants$7.clang_disposeDiagnostic$MH,\"clang_disposeDiagnostic\");\n+        return RuntimeHelper.requireNonNull(constants$3.clang_disposeDiagnostic$MH,\"clang_disposeDiagnostic\");\n@@ -1587,1 +352,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_disposeDiagnostic$MH, \"clang_disposeDiagnostic\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_disposeDiagnostic$MH, \"clang_disposeDiagnostic\");\n@@ -1613,1 +378,1 @@\n-        return RuntimeHelper.requireNonNull(constants$7.clang_formatDiagnostic$MH,\"clang_formatDiagnostic\");\n+        return RuntimeHelper.requireNonNull(constants$3.clang_formatDiagnostic$MH,\"clang_formatDiagnostic\");\n@@ -1616,1 +381,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_formatDiagnostic$MH, \"clang_formatDiagnostic\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_formatDiagnostic$MH, \"clang_formatDiagnostic\");\n@@ -1627,1 +392,1 @@\n-        return RuntimeHelper.requireNonNull(constants$7.clang_defaultDiagnosticDisplayOptions$MH,\"clang_defaultDiagnosticDisplayOptions\");\n+        return RuntimeHelper.requireNonNull(constants$3.clang_defaultDiagnosticDisplayOptions$MH,\"clang_defaultDiagnosticDisplayOptions\");\n@@ -1630,1 +395,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_defaultDiagnosticDisplayOptions$MH, \"clang_defaultDiagnosticDisplayOptions\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_defaultDiagnosticDisplayOptions$MH, \"clang_defaultDiagnosticDisplayOptions\");\n@@ -1638,1 +403,1 @@\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSeverity$MH,\"clang_getDiagnosticSeverity\");\n+        return RuntimeHelper.requireNonNull(constants$3.clang_getDiagnosticSeverity$MH,\"clang_getDiagnosticSeverity\");\n@@ -1641,1 +406,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getDiagnosticSeverity$MH, \"clang_getDiagnosticSeverity\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_getDiagnosticSeverity$MH, \"clang_getDiagnosticSeverity\");\n@@ -1648,56 +413,0 @@\n-    public static class constants$7 {\n-\n-        static final FunctionDescriptor clang_getDiagnostic$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getDiagnostic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnostic\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$7.clang_getDiagnostic$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticSetFromTU$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticSetFromTU$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticSetFromTU\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$7.clang_getDiagnosticSetFromTU$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeDiagnostic$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeDiagnostic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeDiagnostic\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$7.clang_disposeDiagnostic$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_formatDiagnostic$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_formatDiagnostic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_formatDiagnostic\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$7.clang_formatDiagnostic$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC = FunctionDescriptor.of(C_INT);\n-        static final MethodHandle clang_defaultDiagnosticDisplayOptions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_defaultDiagnosticDisplayOptions\",\n-            \"()I\",\n-            constants$7.clang_defaultDiagnosticDisplayOptions$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticSeverity$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticSeverity$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticSeverity\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$7.clang_getDiagnosticSeverity$FUNC, false\n-        );\n-    }\n-\n@@ -1705,1 +414,1 @@\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticLocation$MH,\"clang_getDiagnosticLocation\");\n+        return RuntimeHelper.requireNonNull(constants$4.clang_getDiagnosticLocation$MH,\"clang_getDiagnosticLocation\");\n@@ -1708,1 +417,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticLocation$MH, \"clang_getDiagnosticLocation\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getDiagnosticLocation$MH, \"clang_getDiagnosticLocation\");\n@@ -1719,1 +428,1 @@\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticSpelling$MH,\"clang_getDiagnosticSpelling\");\n+        return RuntimeHelper.requireNonNull(constants$4.clang_getDiagnosticSpelling$MH,\"clang_getDiagnosticSpelling\");\n@@ -1722,1 +431,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticSpelling$MH, \"clang_getDiagnosticSpelling\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_getDiagnosticSpelling$MH, \"clang_getDiagnosticSpelling\");\n@@ -1732,295 +441,0 @@\n-    public static MethodHandle clang_getDiagnosticOption$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticOption$MH,\"clang_getDiagnosticOption\");\n-    }\n-    public static MemorySegment clang_getDiagnosticOption ( SegmentAllocator allocator,  Addressable Diag,  Addressable Disable) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticOption$MH, \"clang_getDiagnosticOption\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diag.address(), Disable.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getDiagnosticOption ( ResourceScope scope,  Addressable Diag,  Addressable Disable) {\n-        return clang_getDiagnosticOption(SegmentAllocator.ofScope(scope), Diag.address(), Disable.address());\n-    }\n-    public static MethodHandle clang_getDiagnosticCategory$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategory$MH,\"clang_getDiagnosticCategory\");\n-    }\n-    public static int clang_getDiagnosticCategory ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategory$MH, \"clang_getDiagnosticCategory\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getDiagnosticCategoryName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryName$MH,\"clang_getDiagnosticCategoryName\");\n-    }\n-    public static MemorySegment clang_getDiagnosticCategoryName ( SegmentAllocator allocator,  int Category) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryName$MH, \"clang_getDiagnosticCategoryName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Category);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getDiagnosticCategoryName ( ResourceScope scope,  int Category) {\n-        return clang_getDiagnosticCategoryName(SegmentAllocator.ofScope(scope), Category);\n-    }\n-    public static MethodHandle clang_getDiagnosticCategoryText$MH() {\n-        return RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryText$MH,\"clang_getDiagnosticCategoryText\");\n-    }\n-    public static MemorySegment clang_getDiagnosticCategoryText ( SegmentAllocator allocator,  Addressable x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getDiagnosticCategoryText$MH, \"clang_getDiagnosticCategoryText\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getDiagnosticCategoryText ( ResourceScope scope,  Addressable x1) {\n-        return clang_getDiagnosticCategoryText(SegmentAllocator.ofScope(scope), x1.address());\n-    }\n-    public static class constants$8 {\n-\n-        static final FunctionDescriptor clang_getDiagnosticLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$8.clang_getDiagnosticLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticSpelling\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$8.clang_getDiagnosticSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticOption$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticOption$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticOption\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$8.clang_getDiagnosticOption$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticCategory$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticCategory$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticCategory\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$8.clang_getDiagnosticCategory$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticCategoryName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_getDiagnosticCategoryName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticCategoryName\",\n-            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$8.clang_getDiagnosticCategoryName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticCategoryText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticCategoryText$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticCategoryText\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$8.clang_getDiagnosticCategoryText$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getDiagnosticNumRanges$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumRanges$MH,\"clang_getDiagnosticNumRanges\");\n-    }\n-    public static int clang_getDiagnosticNumRanges ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumRanges$MH, \"clang_getDiagnosticNumRanges\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getDiagnosticRange$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticRange$MH,\"clang_getDiagnosticRange\");\n-    }\n-    public static MemorySegment clang_getDiagnosticRange ( SegmentAllocator allocator,  Addressable Diagnostic,  int Range) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticRange$MH, \"clang_getDiagnosticRange\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic.address(), Range);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getDiagnosticRange ( ResourceScope scope,  Addressable Diagnostic,  int Range) {\n-        return clang_getDiagnosticRange(SegmentAllocator.ofScope(scope), Diagnostic.address(), Range);\n-    }\n-    public static MethodHandle clang_getDiagnosticNumFixIts$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumFixIts$MH,\"clang_getDiagnosticNumFixIts\");\n-    }\n-    public static int clang_getDiagnosticNumFixIts ( Addressable Diagnostic) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticNumFixIts$MH, \"clang_getDiagnosticNumFixIts\");\n-        try {\n-            return (int)mh$.invokeExact(Diagnostic.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getDiagnosticFixIt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticFixIt$MH,\"clang_getDiagnosticFixIt\");\n-    }\n-    public static MemorySegment clang_getDiagnosticFixIt ( SegmentAllocator allocator,  Addressable Diagnostic,  int FixIt,  Addressable ReplacementRange) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getDiagnosticFixIt$MH, \"clang_getDiagnosticFixIt\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic.address(), FixIt, ReplacementRange.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getDiagnosticFixIt ( ResourceScope scope,  Addressable Diagnostic,  int FixIt,  Addressable ReplacementRange) {\n-        return clang_getDiagnosticFixIt(SegmentAllocator.ofScope(scope), Diagnostic.address(), FixIt, ReplacementRange.address());\n-    }\n-    public static MethodHandle clang_getTranslationUnitSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_getTranslationUnitSpelling$MH,\"clang_getTranslationUnitSpelling\");\n-    }\n-    public static MemorySegment clang_getTranslationUnitSpelling ( SegmentAllocator allocator,  Addressable CTUnit) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getTranslationUnitSpelling$MH, \"clang_getTranslationUnitSpelling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CTUnit.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getTranslationUnitSpelling ( ResourceScope scope,  Addressable CTUnit) {\n-        return clang_getTranslationUnitSpelling(SegmentAllocator.ofScope(scope), CTUnit.address());\n-    }\n-    public static MethodHandle clang_createTranslationUnitFromSourceFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$9.clang_createTranslationUnitFromSourceFile$MH,\"clang_createTranslationUnitFromSourceFile\");\n-    }\n-    public static MemoryAddress clang_createTranslationUnitFromSourceFile ( Addressable CIdx,  Addressable source_filename,  int num_clang_command_line_args,  Addressable clang_command_line_args,  int num_unsaved_files,  Addressable unsaved_files) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_createTranslationUnitFromSourceFile$MH, \"clang_createTranslationUnitFromSourceFile\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address(), source_filename.address(), num_clang_command_line_args, clang_command_line_args.address(), num_unsaved_files, unsaved_files.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$9 {\n-\n-        static final FunctionDescriptor clang_getDiagnosticNumRanges$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticNumRanges$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticNumRanges\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$9.clang_getDiagnosticNumRanges$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getDiagnosticRange$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticRange\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$9.clang_getDiagnosticRange$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticNumFixIts$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticNumFixIts$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticNumFixIts\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$9.clang_getDiagnosticNumFixIts$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDiagnosticFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDiagnosticFixIt$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDiagnosticFixIt\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$9.clang_getDiagnosticFixIt$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTranslationUnitSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getTranslationUnitSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTranslationUnitSpelling\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$9.clang_getTranslationUnitSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_createTranslationUnitFromSourceFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_createTranslationUnitFromSourceFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_createTranslationUnitFromSourceFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$9.clang_createTranslationUnitFromSourceFile$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_createTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit$MH,\"clang_createTranslationUnit\");\n-    }\n-    public static MemoryAddress clang_createTranslationUnit ( Addressable CIdx,  Addressable ast_filename) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit$MH, \"clang_createTranslationUnit\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address(), ast_filename.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_createTranslationUnit2$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit2$MH,\"clang_createTranslationUnit2\");\n-    }\n-    public static int clang_createTranslationUnit2 ( Addressable CIdx,  Addressable ast_filename,  Addressable out_TU) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_createTranslationUnit2$MH, \"clang_createTranslationUnit2\");\n-        try {\n-            return (int)mh$.invokeExact(CIdx.address(), ast_filename.address(), out_TU.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -2078,11 +492,0 @@\n-    public static MethodHandle clang_defaultEditingTranslationUnitOptions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_defaultEditingTranslationUnitOptions$MH,\"clang_defaultEditingTranslationUnitOptions\");\n-    }\n-    public static int clang_defaultEditingTranslationUnitOptions () {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_defaultEditingTranslationUnitOptions$MH, \"clang_defaultEditingTranslationUnitOptions\");\n-        try {\n-            return (int)mh$.invokeExact();\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -2090,1 +493,1 @@\n-        return RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit$MH,\"clang_parseTranslationUnit\");\n+        return RuntimeHelper.requireNonNull(constants$4.clang_parseTranslationUnit$MH,\"clang_parseTranslationUnit\");\n@@ -2093,1 +496,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit$MH, \"clang_parseTranslationUnit\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_parseTranslationUnit$MH, \"clang_parseTranslationUnit\");\n@@ -2101,1 +504,1 @@\n-        return RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2$MH,\"clang_parseTranslationUnit2\");\n+        return RuntimeHelper.requireNonNull(constants$4.clang_parseTranslationUnit2$MH,\"clang_parseTranslationUnit2\");\n@@ -2104,12 +507,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2$MH, \"clang_parseTranslationUnit2\");\n-        try {\n-            return (int)mh$.invokeExact(CIdx.address(), source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, options, out_TU.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_parseTranslationUnit2FullArgv$MH() {\n-        return RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2FullArgv$MH,\"clang_parseTranslationUnit2FullArgv\");\n-    }\n-    public static int clang_parseTranslationUnit2FullArgv ( Addressable CIdx,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  int options,  Addressable out_TU) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_parseTranslationUnit2FullArgv$MH, \"clang_parseTranslationUnit2FullArgv\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_parseTranslationUnit2$MH, \"clang_parseTranslationUnit2\");\n@@ -2125,84 +517,0 @@\n-    public static class constants$10 {\n-\n-        static final FunctionDescriptor clang_createTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_createTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_createTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$10.clang_createTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_createTranslationUnit2$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_createTranslationUnit2$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_createTranslationUnit2\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$10.clang_createTranslationUnit2$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_defaultEditingTranslationUnitOptions$FUNC = FunctionDescriptor.of(C_INT);\n-        static final MethodHandle clang_defaultEditingTranslationUnitOptions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_defaultEditingTranslationUnitOptions\",\n-            \"()I\",\n-            constants$10.clang_defaultEditingTranslationUnitOptions$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_parseTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_parseTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_parseTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$10.clang_parseTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_parseTranslationUnit2$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_parseTranslationUnit2$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_parseTranslationUnit2\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$10.clang_parseTranslationUnit2$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_parseTranslationUnit2FullArgv$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_parseTranslationUnit2FullArgv$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_parseTranslationUnit2FullArgv\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$10.clang_parseTranslationUnit2FullArgv$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_defaultSaveOptions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_defaultSaveOptions$MH,\"clang_defaultSaveOptions\");\n-    }\n-    public static int clang_defaultSaveOptions ( Addressable TU) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_defaultSaveOptions$MH, \"clang_defaultSaveOptions\");\n-        try {\n-            return (int)mh$.invokeExact(TU.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -2222,1 +530,1 @@\n-        return RuntimeHelper.requireNonNull(constants$11.clang_saveTranslationUnit$MH,\"clang_saveTranslationUnit\");\n+        return RuntimeHelper.requireNonNull(constants$4.clang_saveTranslationUnit$MH,\"clang_saveTranslationUnit\");\n@@ -2225,1 +533,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_saveTranslationUnit$MH, \"clang_saveTranslationUnit\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_saveTranslationUnit$MH, \"clang_saveTranslationUnit\");\n@@ -2232,11 +540,0 @@\n-    public static MethodHandle clang_suspendTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$11.clang_suspendTranslationUnit$MH,\"clang_suspendTranslationUnit\");\n-    }\n-    public static int clang_suspendTranslationUnit ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_suspendTranslationUnit$MH, \"clang_suspendTranslationUnit\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -2244,1 +541,1 @@\n-        return RuntimeHelper.requireNonNull(constants$11.clang_disposeTranslationUnit$MH,\"clang_disposeTranslationUnit\");\n+        return RuntimeHelper.requireNonNull(constants$4.clang_disposeTranslationUnit$MH,\"clang_disposeTranslationUnit\");\n@@ -2247,1 +544,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_disposeTranslationUnit$MH, \"clang_disposeTranslationUnit\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$4.clang_disposeTranslationUnit$MH, \"clang_disposeTranslationUnit\");\n@@ -2258,1 +555,1 @@\n-        return RuntimeHelper.requireNonNull(constants$11.clang_defaultReparseOptions$MH,\"clang_defaultReparseOptions\");\n+        return RuntimeHelper.requireNonNull(constants$5.clang_defaultReparseOptions$MH,\"clang_defaultReparseOptions\");\n@@ -2261,1 +558,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_defaultReparseOptions$MH, \"clang_defaultReparseOptions\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_defaultReparseOptions$MH, \"clang_defaultReparseOptions\");\n@@ -2269,1 +566,1 @@\n-        return RuntimeHelper.requireNonNull(constants$11.clang_reparseTranslationUnit$MH,\"clang_reparseTranslationUnit\");\n+        return RuntimeHelper.requireNonNull(constants$5.clang_reparseTranslationUnit$MH,\"clang_reparseTranslationUnit\");\n@@ -2272,1 +569,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_reparseTranslationUnit$MH, \"clang_reparseTranslationUnit\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_reparseTranslationUnit$MH, \"clang_reparseTranslationUnit\");\n@@ -2279,1 +576,1 @@\n-    public static int CXTUResourceUsage_AST() {\n+    public static int CXCursor_UnexposedDecl() {\n@@ -2282,1 +579,1 @@\n-    public static int CXTUResourceUsage_Identifiers() {\n+    public static int CXCursor_StructDecl() {\n@@ -2285,1 +582,1 @@\n-    public static int CXTUResourceUsage_Selectors() {\n+    public static int CXCursor_UnionDecl() {\n@@ -2288,1 +585,1 @@\n-    public static int CXTUResourceUsage_GlobalCompletionResults() {\n+    public static int CXCursor_ClassDecl() {\n@@ -2291,1 +588,1 @@\n-    public static int CXTUResourceUsage_SourceManagerContentCache() {\n+    public static int CXCursor_EnumDecl() {\n@@ -2294,1 +591,1 @@\n-    public static int CXTUResourceUsage_AST_SideTables() {\n+    public static int CXCursor_FieldDecl() {\n@@ -2297,1 +594,1 @@\n-    public static int CXTUResourceUsage_SourceManager_Membuffer_Malloc() {\n+    public static int CXCursor_EnumConstantDecl() {\n@@ -2300,1 +597,1 @@\n-    public static int CXTUResourceUsage_SourceManager_Membuffer_MMap() {\n+    public static int CXCursor_FunctionDecl() {\n@@ -2303,1 +600,1 @@\n-    public static int CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc() {\n+    public static int CXCursor_VarDecl() {\n@@ -2306,1 +603,1 @@\n-    public static int CXTUResourceUsage_ExternalASTSource_Membuffer_MMap() {\n+    public static int CXCursor_ParmDecl() {\n@@ -2309,1 +606,1 @@\n-    public static int CXTUResourceUsage_Preprocessor() {\n+    public static int CXCursor_ObjCInterfaceDecl() {\n@@ -2312,1 +609,1 @@\n-    public static int CXTUResourceUsage_PreprocessingRecord() {\n+    public static int CXCursor_ObjCCategoryDecl() {\n@@ -2315,1 +612,1 @@\n-    public static int CXTUResourceUsage_SourceManager_DataStructures() {\n+    public static int CXCursor_ObjCProtocolDecl() {\n@@ -2318,1 +615,1 @@\n-    public static int CXTUResourceUsage_Preprocessor_HeaderSearch() {\n+    public static int CXCursor_ObjCPropertyDecl() {\n@@ -2321,2 +618,2 @@\n-    public static int CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN() {\n-        return (int)1L;\n+    public static int CXCursor_ObjCIvarDecl() {\n+        return (int)15L;\n@@ -2324,2 +621,2 @@\n-    public static int CXTUResourceUsage_MEMORY_IN_BYTES_END() {\n-        return (int)14L;\n+    public static int CXCursor_ObjCInstanceMethodDecl() {\n+        return (int)16L;\n@@ -2327,2 +624,2 @@\n-    public static int CXTUResourceUsage_First() {\n-        return (int)1L;\n+    public static int CXCursor_ObjCClassMethodDecl() {\n+        return (int)17L;\n@@ -2330,2 +627,2 @@\n-    public static int CXTUResourceUsage_Last() {\n-        return (int)14L;\n+    public static int CXCursor_ObjCImplementationDecl() {\n+        return (int)18L;\n@@ -2333,55 +630,2 @@\n-    public static class constants$11 {\n-\n-        static final FunctionDescriptor clang_defaultSaveOptions$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_defaultSaveOptions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_defaultSaveOptions\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$11.clang_defaultSaveOptions$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_saveTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_saveTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_saveTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$11.clang_saveTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_suspendTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_suspendTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_suspendTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$11.clang_suspendTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeTranslationUnit$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$11.clang_disposeTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_defaultReparseOptions$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_defaultReparseOptions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_defaultReparseOptions\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$11.clang_defaultReparseOptions$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_reparseTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_reparseTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_reparseTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$11.clang_reparseTranslationUnit$FUNC, false\n-        );\n+    public static int CXCursor_ObjCCategoryImplDecl() {\n+        return (int)19L;\n@@ -2389,3 +633,2 @@\n-\n-    public static MethodHandle clang_getTUResourceUsageName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_getTUResourceUsageName$MH,\"clang_getTUResourceUsageName\");\n+    public static int CXCursor_TypedefDecl() {\n+        return (int)20L;\n@@ -2393,7 +636,2 @@\n-    public static MemoryAddress clang_getTUResourceUsageName ( int kind) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_getTUResourceUsageName$MH, \"clang_getTUResourceUsageName\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(kind);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXCursor_CXXMethod() {\n+        return (int)21L;\n@@ -2401,328 +639,2 @@\n-    public static class CXTUResourceUsageEntry {\n-\n-        static final MemoryLayout CXTUResourceUsageEntry$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_LONG_LONG.withName(\"amount\")\n-        ).withName(\"CXTUResourceUsageEntry\");\n-        public static MemoryLayout $LAYOUT() {\n-            return CXTUResourceUsageEntry.CXTUResourceUsageEntry$struct$LAYOUT;\n-        }\n-        static final VarHandle kind$VH = CXTUResourceUsageEntry$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-        public static VarHandle kind$VH() {\n-            return CXTUResourceUsageEntry.kind$VH;\n-        }\n-        public static int kind$get(MemorySegment seg) {\n-            return (int)CXTUResourceUsageEntry.kind$VH.get(seg);\n-        }\n-        public static void kind$set( MemorySegment seg, int x) {\n-            CXTUResourceUsageEntry.kind$VH.set(seg, x);\n-        }\n-        public static int kind$get(MemorySegment seg, long index) {\n-            return (int)CXTUResourceUsageEntry.kind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void kind$set(MemorySegment seg, long index, int x) {\n-            CXTUResourceUsageEntry.kind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle amount$VH = CXTUResourceUsageEntry$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"amount\"));\n-        public static VarHandle amount$VH() {\n-            return CXTUResourceUsageEntry.amount$VH;\n-        }\n-        public static long amount$get(MemorySegment seg) {\n-            return (long)CXTUResourceUsageEntry.amount$VH.get(seg);\n-        }\n-        public static void amount$set( MemorySegment seg, long x) {\n-            CXTUResourceUsageEntry.amount$VH.set(seg, x);\n-        }\n-        public static long amount$get(MemorySegment seg, long index) {\n-            return (long)CXTUResourceUsageEntry.amount$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void amount$set(MemorySegment seg, long index, long x) {\n-            CXTUResourceUsageEntry.amount$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXTUResourceUsage {\n-\n-        static final MemoryLayout CXTUResourceUsage$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"numEntries\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_POINTER.withName(\"entries\")\n-        ).withName(\"CXTUResourceUsage\");\n-        public static MemoryLayout $LAYOUT() {\n-            return CXTUResourceUsage.CXTUResourceUsage$struct$LAYOUT;\n-        }\n-        static final VarHandle data$VH = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"data\")));\n-        public static VarHandle data$VH() {\n-            return CXTUResourceUsage.data$VH;\n-        }\n-        public static MemoryAddress data$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.data$VH.get(seg);\n-        }\n-        public static void data$set( MemorySegment seg, MemoryAddress x) {\n-            CXTUResourceUsage.data$VH.set(seg, x);\n-        }\n-        public static MemoryAddress data$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.data$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void data$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXTUResourceUsage.data$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle numEntries$VH = CXTUResourceUsage$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numEntries\"));\n-        public static VarHandle numEntries$VH() {\n-            return CXTUResourceUsage.numEntries$VH;\n-        }\n-        public static int numEntries$get(MemorySegment seg) {\n-            return (int)CXTUResourceUsage.numEntries$VH.get(seg);\n-        }\n-        public static void numEntries$set( MemorySegment seg, int x) {\n-            CXTUResourceUsage.numEntries$VH.set(seg, x);\n-        }\n-        public static int numEntries$get(MemorySegment seg, long index) {\n-            return (int)CXTUResourceUsage.numEntries$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void numEntries$set(MemorySegment seg, long index, int x) {\n-            CXTUResourceUsage.numEntries$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle entries$VH = MemoryHandles.asAddressVarHandle(CXTUResourceUsage$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"entries\")));\n-        public static VarHandle entries$VH() {\n-            return CXTUResourceUsage.entries$VH;\n-        }\n-        public static MemoryAddress entries$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.entries$VH.get(seg);\n-        }\n-        public static void entries$set( MemorySegment seg, MemoryAddress x) {\n-            CXTUResourceUsage.entries$VH.set(seg, x);\n-        }\n-        public static MemoryAddress entries$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXTUResourceUsage.entries$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void entries$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXTUResourceUsage.entries$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static MethodHandle clang_getCXTUResourceUsage$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_getCXTUResourceUsage$MH,\"clang_getCXTUResourceUsage\");\n-    }\n-    public static MemorySegment clang_getCXTUResourceUsage ( SegmentAllocator allocator,  Addressable TU) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_getCXTUResourceUsage$MH, \"clang_getCXTUResourceUsage\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, TU.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCXTUResourceUsage ( ResourceScope scope,  Addressable TU) {\n-        return clang_getCXTUResourceUsage(SegmentAllocator.ofScope(scope), TU.address());\n-    }\n-    public static MethodHandle clang_disposeCXTUResourceUsage$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_disposeCXTUResourceUsage$MH,\"clang_disposeCXTUResourceUsage\");\n-    }\n-    public static void clang_disposeCXTUResourceUsage ( MemorySegment usage) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_disposeCXTUResourceUsage$MH, \"clang_disposeCXTUResourceUsage\");\n-        try {\n-            mh$.invokeExact(usage);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTranslationUnitTargetInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_getTranslationUnitTargetInfo$MH,\"clang_getTranslationUnitTargetInfo\");\n-    }\n-    public static MemoryAddress clang_getTranslationUnitTargetInfo ( Addressable CTUnit) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_getTranslationUnitTargetInfo$MH, \"clang_getTranslationUnitTargetInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CTUnit.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_TargetInfo_dispose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_dispose$MH,\"clang_TargetInfo_dispose\");\n-    }\n-    public static void clang_TargetInfo_dispose ( Addressable Info) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_dispose$MH, \"clang_TargetInfo_dispose\");\n-        try {\n-            mh$.invokeExact(Info.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_TargetInfo_getTriple$MH() {\n-        return RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_getTriple$MH,\"clang_TargetInfo_getTriple\");\n-    }\n-    public static MemorySegment clang_TargetInfo_getTriple ( SegmentAllocator allocator,  Addressable Info) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_TargetInfo_getTriple$MH, \"clang_TargetInfo_getTriple\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Info.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_TargetInfo_getTriple ( ResourceScope scope,  Addressable Info) {\n-        return clang_TargetInfo_getTriple(SegmentAllocator.ofScope(scope), Info.address());\n-    }\n-    public static class constants$12 {\n-\n-        static final FunctionDescriptor clang_getTUResourceUsageName$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getTUResourceUsageName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTUResourceUsageName\",\n-            \"(I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$12.clang_getTUResourceUsageName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCXTUResourceUsage$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"numEntries\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_POINTER.withName(\"entries\")\n-        ).withName(\"CXTUResourceUsage\"),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCXTUResourceUsage$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCXTUResourceUsage\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$12.clang_getCXTUResourceUsage$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeCXTUResourceUsage$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"numEntries\"),\n-                MemoryLayout.paddingLayout(32),\n-                C_POINTER.withName(\"entries\")\n-            ).withName(\"CXTUResourceUsage\")\n-        );\n-        static final MethodHandle clang_disposeCXTUResourceUsage$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeCXTUResourceUsage\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n-            constants$12.clang_disposeCXTUResourceUsage$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTranslationUnitTargetInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getTranslationUnitTargetInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTranslationUnitTargetInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$12.clang_getTranslationUnitTargetInfo$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_TargetInfo_dispose$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_TargetInfo_dispose$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_TargetInfo_dispose\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$12.clang_TargetInfo_dispose$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_TargetInfo_getTriple$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_TargetInfo_getTriple$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_TargetInfo_getTriple\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$12.clang_TargetInfo_getTriple$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_TargetInfo_getPointerWidth$MH() {\n-        return RuntimeHelper.requireNonNull(constants$13.clang_TargetInfo_getPointerWidth$MH,\"clang_TargetInfo_getPointerWidth\");\n-    }\n-    public static int clang_TargetInfo_getPointerWidth ( Addressable Info) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_TargetInfo_getPointerWidth$MH, \"clang_TargetInfo_getPointerWidth\");\n-        try {\n-            return (int)mh$.invokeExact(Info.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXCursor_UnexposedDecl() {\n-        return (int)1L;\n-    }\n-    public static int CXCursor_StructDecl() {\n-        return (int)2L;\n-    }\n-    public static int CXCursor_UnionDecl() {\n-        return (int)3L;\n-    }\n-    public static int CXCursor_ClassDecl() {\n-        return (int)4L;\n-    }\n-    public static int CXCursor_EnumDecl() {\n-        return (int)5L;\n-    }\n-    public static int CXCursor_FieldDecl() {\n-        return (int)6L;\n-    }\n-    public static int CXCursor_EnumConstantDecl() {\n-        return (int)7L;\n-    }\n-    public static int CXCursor_FunctionDecl() {\n-        return (int)8L;\n-    }\n-    public static int CXCursor_VarDecl() {\n-        return (int)9L;\n-    }\n-    public static int CXCursor_ParmDecl() {\n-        return (int)10L;\n-    }\n-    public static int CXCursor_ObjCInterfaceDecl() {\n-        return (int)11L;\n-    }\n-    public static int CXCursor_ObjCCategoryDecl() {\n-        return (int)12L;\n-    }\n-    public static int CXCursor_ObjCProtocolDecl() {\n-        return (int)13L;\n-    }\n-    public static int CXCursor_ObjCPropertyDecl() {\n-        return (int)14L;\n-    }\n-    public static int CXCursor_ObjCIvarDecl() {\n-        return (int)15L;\n-    }\n-    public static int CXCursor_ObjCInstanceMethodDecl() {\n-        return (int)16L;\n-    }\n-    public static int CXCursor_ObjCClassMethodDecl() {\n-        return (int)17L;\n-    }\n-    public static int CXCursor_ObjCImplementationDecl() {\n-        return (int)18L;\n-    }\n-    public static int CXCursor_ObjCCategoryImplDecl() {\n-        return (int)19L;\n-    }\n-    public static int CXCursor_TypedefDecl() {\n-        return (int)20L;\n-    }\n-    public static int CXCursor_CXXMethod() {\n-        return (int)21L;\n-    }\n-    public static int CXCursor_Namespace() {\n-        return (int)22L;\n+    public static int CXCursor_Namespace() {\n+        return (int)22L;\n@@ -3262,1 +1174,1 @@\n-        return (int)284L;\n+        return (int)285L;\n@@ -3441,72 +1353,0 @@\n-    public static int CXTSK_Undeclared() {\n-        return (int)0L;\n-    }\n-    public static int CXTSK_ImplicitInstantiation() {\n-        return (int)1L;\n-    }\n-    public static int CXTSK_ExplicitSpecialization() {\n-        return (int)2L;\n-    }\n-    public static int CXTSK_ExplicitInstantiationDeclaration() {\n-        return (int)3L;\n-    }\n-    public static int CXTSK_ExplicitInstantiationDefinition() {\n-        return (int)4L;\n-    }\n-    public static class CXCursor {\n-\n-        static final MemoryLayout CXCursor$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXCursor.CXCursor$struct$LAYOUT;\n-        }\n-        static final VarHandle kind$VH = CXCursor$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-        public static VarHandle kind$VH() {\n-            return CXCursor.kind$VH;\n-        }\n-        public static int kind$get(MemorySegment seg) {\n-            return (int)CXCursor.kind$VH.get(seg);\n-        }\n-        public static void kind$set( MemorySegment seg, int x) {\n-            CXCursor.kind$VH.set(seg, x);\n-        }\n-        public static int kind$get(MemorySegment seg, long index) {\n-            return (int)CXCursor.kind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void kind$set(MemorySegment seg, long index, int x) {\n-            CXCursor.kind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle xdata$VH = CXCursor$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"xdata\"));\n-        public static VarHandle xdata$VH() {\n-            return CXCursor.xdata$VH;\n-        }\n-        public static int xdata$get(MemorySegment seg) {\n-            return (int)CXCursor.xdata$VH.get(seg);\n-        }\n-        public static void xdata$set( MemorySegment seg, int x) {\n-            CXCursor.xdata$VH.set(seg, x);\n-        }\n-        public static int xdata$get(MemorySegment seg, long index) {\n-            return (int)CXCursor.xdata$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void xdata$set(MemorySegment seg, long index, int x) {\n-            CXCursor.xdata$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment data$slice(MemorySegment seg) {\n-            return seg.asSlice(8, 24);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n@@ -3514,1 +1354,1 @@\n-        return RuntimeHelper.requireNonNull(constants$13.clang_getNullCursor$MH,\"clang_getNullCursor\");\n+        return RuntimeHelper.requireNonNull(constants$5.clang_getNullCursor$MH,\"clang_getNullCursor\");\n@@ -3517,1 +1357,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_getNullCursor$MH, \"clang_getNullCursor\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getNullCursor$MH, \"clang_getNullCursor\");\n@@ -3528,1 +1368,1 @@\n-        return RuntimeHelper.requireNonNull(constants$13.clang_getTranslationUnitCursor$MH,\"clang_getTranslationUnitCursor\");\n+        return RuntimeHelper.requireNonNull(constants$5.clang_getTranslationUnitCursor$MH,\"clang_getTranslationUnitCursor\");\n@@ -3531,1 +1371,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_getTranslationUnitCursor$MH, \"clang_getTranslationUnitCursor\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_getTranslationUnitCursor$MH, \"clang_getTranslationUnitCursor\");\n@@ -3542,1 +1382,1 @@\n-        return RuntimeHelper.requireNonNull(constants$13.clang_equalCursors$MH,\"clang_equalCursors\");\n+        return RuntimeHelper.requireNonNull(constants$5.clang_equalCursors$MH,\"clang_equalCursors\");\n@@ -3545,1 +1385,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_equalCursors$MH, \"clang_equalCursors\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_equalCursors$MH, \"clang_equalCursors\");\n@@ -3553,1 +1393,1 @@\n-        return RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isNull$MH,\"clang_Cursor_isNull\");\n+        return RuntimeHelper.requireNonNull(constants$5.clang_Cursor_isNull$MH,\"clang_Cursor_isNull\");\n@@ -3556,1 +1396,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isNull$MH, \"clang_Cursor_isNull\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$5.clang_Cursor_isNull$MH, \"clang_Cursor_isNull\");\n@@ -3563,86 +1403,0 @@\n-    public static MethodHandle clang_hashCursor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$13.clang_hashCursor$MH,\"clang_hashCursor\");\n-    }\n-    public static int clang_hashCursor ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_hashCursor$MH, \"clang_hashCursor\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$13 {\n-\n-        static final FunctionDescriptor clang_TargetInfo_getPointerWidth$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_TargetInfo_getPointerWidth$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_TargetInfo_getPointerWidth\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$13.clang_TargetInfo_getPointerWidth$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNullCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ));\n-        static final MethodHandle clang_getNullCursor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNullCursor\",\n-            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$13.clang_getNullCursor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTranslationUnitCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getTranslationUnitCursor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTranslationUnitCursor\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$13.clang_getTranslationUnitCursor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_equalCursors$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_equalCursors$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_equalCursors\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$13.clang_equalCursors$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isNull$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isNull$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isNull\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$13.clang_Cursor_isNull$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_hashCursor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_hashCursor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_hashCursor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$13.clang_hashCursor$FUNC, false\n-        );\n-    }\n-\n@@ -3650,1 +1404,1 @@\n-        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorKind$MH,\"clang_getCursorKind\");\n+        return RuntimeHelper.requireNonNull(constants$6.clang_getCursorKind$MH,\"clang_getCursorKind\");\n@@ -3653,1 +1407,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_getCursorKind$MH, \"clang_getCursorKind\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_getCursorKind$MH, \"clang_getCursorKind\");\n@@ -3661,1 +1415,1 @@\n-        return RuntimeHelper.requireNonNull(constants$14.clang_isDeclaration$MH,\"clang_isDeclaration\");\n+        return RuntimeHelper.requireNonNull(constants$6.clang_isDeclaration$MH,\"clang_isDeclaration\");\n@@ -3664,23 +1418,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isDeclaration$MH, \"clang_isDeclaration\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isInvalidDeclaration$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_isInvalidDeclaration$MH,\"clang_isInvalidDeclaration\");\n-    }\n-    public static int clang_isInvalidDeclaration ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isInvalidDeclaration$MH, \"clang_isInvalidDeclaration\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_isReference$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_isReference$MH,\"clang_isReference\");\n-    }\n-    public static int clang_isReference ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isReference$MH, \"clang_isReference\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_isDeclaration$MH, \"clang_isDeclaration\");\n@@ -3693,2 +1425,2 @@\n-    public static MethodHandle clang_isExpression$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_isExpression$MH,\"clang_isExpression\");\n+    public static MethodHandle clang_isAttribute$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_isAttribute$MH,\"clang_isAttribute\");\n@@ -3696,2 +1428,2 @@\n-    public static int clang_isExpression ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isExpression$MH, \"clang_isExpression\");\n+    public static int clang_isAttribute ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_isAttribute$MH, \"clang_isAttribute\");\n@@ -3704,2 +1436,2 @@\n-    public static MethodHandle clang_isStatement$MH() {\n-        return RuntimeHelper.requireNonNull(constants$14.clang_isStatement$MH,\"clang_isStatement\");\n+    public static MethodHandle clang_isInvalid$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_isInvalid$MH,\"clang_isInvalid\");\n@@ -3707,2 +1439,2 @@\n-    public static int clang_isStatement ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_isStatement$MH, \"clang_isStatement\");\n+    public static int clang_isInvalid ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_isInvalid$MH, \"clang_isInvalid\");\n@@ -3715,62 +1447,2 @@\n-    public static class constants$14 {\n-\n-        static final FunctionDescriptor clang_getCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$14.clang_getCursorKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isDeclaration$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isDeclaration$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isDeclaration\",\n-            \"(I)I\",\n-            constants$14.clang_isDeclaration$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isInvalidDeclaration$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isInvalidDeclaration$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isInvalidDeclaration\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$14.clang_isInvalidDeclaration$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isReference$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isReference$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isReference\",\n-            \"(I)I\",\n-            constants$14.clang_isReference$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isExpression$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isExpression$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isExpression\",\n-            \"(I)I\",\n-            constants$14.clang_isExpression$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isStatement$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isStatement$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isStatement\",\n-            \"(I)I\",\n-            constants$14.clang_isStatement$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_isAttribute$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_isAttribute$MH,\"clang_isAttribute\");\n+    public static MethodHandle clang_isPreprocessing$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_isPreprocessing$MH,\"clang_isPreprocessing\");\n@@ -3778,2 +1450,2 @@\n-    public static int clang_isAttribute ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isAttribute$MH, \"clang_isAttribute\");\n+    public static int clang_isPreprocessing ( int x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_isPreprocessing$MH, \"clang_isPreprocessing\");\n@@ -3786,2 +1458,2 @@\n-    public static MethodHandle clang_Cursor_hasAttrs$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_Cursor_hasAttrs$MH,\"clang_Cursor_hasAttrs\");\n+    public static MethodHandle clang_Cursor_getTranslationUnit$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_Cursor_getTranslationUnit$MH,\"clang_Cursor_getTranslationUnit\");\n@@ -3789,2 +1461,2 @@\n-    public static int clang_Cursor_hasAttrs ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_Cursor_hasAttrs$MH, \"clang_Cursor_hasAttrs\");\n+    public static MemoryAddress clang_Cursor_getTranslationUnit ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$6.clang_Cursor_getTranslationUnit$MH, \"clang_Cursor_getTranslationUnit\");\n@@ -3792,1 +1464,1 @@\n-            return (int)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n@@ -3797,2 +1469,2 @@\n-    public static MethodHandle clang_isInvalid$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_isInvalid$MH,\"clang_isInvalid\");\n+    public static MethodHandle clang_getCursorLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorLocation$MH,\"clang_getCursorLocation\");\n@@ -3800,2 +1472,2 @@\n-    public static int clang_isInvalid ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isInvalid$MH, \"clang_isInvalid\");\n+    public static MemorySegment clang_getCursorLocation ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getCursorLocation$MH, \"clang_getCursorLocation\");\n@@ -3803,1 +1475,1 @@\n-            return (int)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -3808,10 +1480,2 @@\n-    public static MethodHandle clang_isTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_isTranslationUnit$MH,\"clang_isTranslationUnit\");\n-    }\n-    public static int clang_isTranslationUnit ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isTranslationUnit$MH, \"clang_isTranslationUnit\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_getCursorLocation ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorLocation(SegmentAllocator.ofScope(scope), x1);\n@@ -3819,2 +1483,2 @@\n-    public static MethodHandle clang_isPreprocessing$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_isPreprocessing$MH,\"clang_isPreprocessing\");\n+    public static MethodHandle clang_getCursorExtent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorExtent$MH,\"clang_getCursorExtent\");\n@@ -3822,2 +1486,2 @@\n-    public static int clang_isPreprocessing ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isPreprocessing$MH, \"clang_isPreprocessing\");\n+    public static MemorySegment clang_getCursorExtent ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getCursorExtent$MH, \"clang_getCursorExtent\");\n@@ -3825,1 +1489,1 @@\n-            return (int)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -3830,10 +1494,2 @@\n-    public static MethodHandle clang_isUnexposed$MH() {\n-        return RuntimeHelper.requireNonNull(constants$15.clang_isUnexposed$MH,\"clang_isUnexposed\");\n-    }\n-    public static int clang_isUnexposed ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isUnexposed$MH, \"clang_isUnexposed\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_getCursorExtent ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorExtent(SegmentAllocator.ofScope(scope), x1);\n@@ -3841,1 +1497,1 @@\n-    public static int CXLinkage_Invalid() {\n+    public static int CXType_Invalid() {\n@@ -3844,1 +1500,1 @@\n-    public static int CXLinkage_NoLinkage() {\n+    public static int CXType_Unexposed() {\n@@ -3847,1 +1503,1 @@\n-    public static int CXLinkage_Internal() {\n+    public static int CXType_Void() {\n@@ -3850,1 +1506,1 @@\n-    public static int CXLinkage_UniqueExternal() {\n+    public static int CXType_Bool() {\n@@ -3853,1 +1509,1 @@\n-    public static int CXLinkage_External() {\n+    public static int CXType_Char_U() {\n@@ -3856,54 +1512,2 @@\n-    public static class constants$15 {\n-\n-        static final FunctionDescriptor clang_isAttribute$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isAttribute$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isAttribute\",\n-            \"(I)I\",\n-            constants$15.clang_isAttribute$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_hasAttrs$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_hasAttrs$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_hasAttrs\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$15.clang_Cursor_hasAttrs$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isInvalid$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isInvalid$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isInvalid\",\n-            \"(I)I\",\n-            constants$15.clang_isInvalid$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isTranslationUnit\",\n-            \"(I)I\",\n-            constants$15.clang_isTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isPreprocessing$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isPreprocessing$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isPreprocessing\",\n-            \"(I)I\",\n-            constants$15.clang_isPreprocessing$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isUnexposed$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_isUnexposed$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isUnexposed\",\n-            \"(I)I\",\n-            constants$15.clang_isUnexposed$FUNC, false\n-        );\n+    public static int CXType_UChar() {\n+        return (int)5L;\n@@ -3911,3 +1515,2 @@\n-\n-    public static MethodHandle clang_getCursorLinkage$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorLinkage$MH,\"clang_getCursorLinkage\");\n+    public static int CXType_Char16() {\n+        return (int)6L;\n@@ -3915,7 +1518,2 @@\n-    public static int clang_getCursorLinkage ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorLinkage$MH, \"clang_getCursorLinkage\");\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXType_Char32() {\n+        return (int)7L;\n@@ -3923,2 +1521,2 @@\n-    public static int CXVisibility_Invalid() {\n-        return (int)0L;\n+    public static int CXType_UShort() {\n+        return (int)8L;\n@@ -3926,2 +1524,2 @@\n-    public static int CXVisibility_Hidden() {\n-        return (int)1L;\n+    public static int CXType_UInt() {\n+        return (int)9L;\n@@ -3929,2 +1527,2 @@\n-    public static int CXVisibility_Protected() {\n-        return (int)2L;\n+    public static int CXType_ULong() {\n+        return (int)10L;\n@@ -3932,2 +1530,2 @@\n-    public static int CXVisibility_Default() {\n-        return (int)3L;\n+    public static int CXType_ULongLong() {\n+        return (int)11L;\n@@ -3935,2 +1533,2 @@\n-    public static MethodHandle clang_getCursorVisibility$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorVisibility$MH,\"clang_getCursorVisibility\");\n+    public static int CXType_UInt128() {\n+        return (int)12L;\n@@ -3938,7 +1536,2 @@\n-    public static int clang_getCursorVisibility ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorVisibility$MH, \"clang_getCursorVisibility\");\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXType_Char_S() {\n+        return (int)13L;\n@@ -3946,587 +1539,2 @@\n-    public static MethodHandle clang_getCursorAvailability$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorAvailability$MH,\"clang_getCursorAvailability\");\n-    }\n-    public static int clang_getCursorAvailability ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorAvailability$MH, \"clang_getCursorAvailability\");\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class CXPlatformAvailability {\n-\n-        static final MemoryLayout CXPlatformAvailability$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"Platform\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"Major\"),\n-                C_INT.withName(\"Minor\"),\n-                C_INT.withName(\"Subminor\")\n-            ).withName(\"Introduced\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"Major\"),\n-                C_INT.withName(\"Minor\"),\n-                C_INT.withName(\"Subminor\")\n-            ).withName(\"Deprecated\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"Major\"),\n-                C_INT.withName(\"Minor\"),\n-                C_INT.withName(\"Subminor\")\n-            ).withName(\"Obsoleted\"),\n-            C_INT.withName(\"Unavailable\"),\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"Message\")\n-        ).withName(\"CXPlatformAvailability\");\n-        public static MemoryLayout $LAYOUT() {\n-            return CXPlatformAvailability.CXPlatformAvailability$struct$LAYOUT;\n-        }\n-        public static MemorySegment Platform$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 16);\n-        }\n-        public static MemorySegment Introduced$slice(MemorySegment seg) {\n-            return seg.asSlice(16, 12);\n-        }\n-        public static MemorySegment Deprecated$slice(MemorySegment seg) {\n-            return seg.asSlice(28, 12);\n-        }\n-        public static MemorySegment Obsoleted$slice(MemorySegment seg) {\n-            return seg.asSlice(40, 12);\n-        }\n-        static final VarHandle Unavailable$VH = CXPlatformAvailability$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"Unavailable\"));\n-        public static VarHandle Unavailable$VH() {\n-            return CXPlatformAvailability.Unavailable$VH;\n-        }\n-        public static int Unavailable$get(MemorySegment seg) {\n-            return (int)CXPlatformAvailability.Unavailable$VH.get(seg);\n-        }\n-        public static void Unavailable$set( MemorySegment seg, int x) {\n-            CXPlatformAvailability.Unavailable$VH.set(seg, x);\n-        }\n-        public static int Unavailable$get(MemorySegment seg, long index) {\n-            return (int)CXPlatformAvailability.Unavailable$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Unavailable$set(MemorySegment seg, long index, int x) {\n-            CXPlatformAvailability.Unavailable$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment Message$slice(MemorySegment seg) {\n-            return seg.asSlice(56, 16);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static MethodHandle clang_getCursorPlatformAvailability$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorPlatformAvailability$MH,\"clang_getCursorPlatformAvailability\");\n-    }\n-    public static int clang_getCursorPlatformAvailability ( MemorySegment cursor,  Addressable always_deprecated,  Addressable deprecated_message,  Addressable always_unavailable,  Addressable unavailable_message,  Addressable availability,  int availability_size) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorPlatformAvailability$MH, \"clang_getCursorPlatformAvailability\");\n-        try {\n-            return (int)mh$.invokeExact(cursor, always_deprecated.address(), deprecated_message.address(), always_unavailable.address(), unavailable_message.address(), availability.address(), availability_size);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeCXPlatformAvailability$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_disposeCXPlatformAvailability$MH,\"clang_disposeCXPlatformAvailability\");\n-    }\n-    public static void clang_disposeCXPlatformAvailability ( Addressable availability) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_disposeCXPlatformAvailability$MH, \"clang_disposeCXPlatformAvailability\");\n-        try {\n-            mh$.invokeExact(availability.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXLanguage_Invalid() {\n-        return (int)0L;\n-    }\n-    public static int CXLanguage_C() {\n-        return (int)1L;\n-    }\n-    public static int CXLanguage_ObjC() {\n-        return (int)2L;\n-    }\n-    public static int CXLanguage_CPlusPlus() {\n-        return (int)3L;\n-    }\n-    public static MethodHandle clang_getCursorLanguage$MH() {\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorLanguage$MH,\"clang_getCursorLanguage\");\n-    }\n-    public static int clang_getCursorLanguage ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorLanguage$MH, \"clang_getCursorLanguage\");\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXTLS_None() {\n-        return (int)0L;\n-    }\n-    public static int CXTLS_Dynamic() {\n-        return (int)1L;\n-    }\n-    public static int CXTLS_Static() {\n-        return (int)2L;\n-    }\n-    public static class constants$16 {\n-\n-        static final FunctionDescriptor clang_getCursorLinkage$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorLinkage$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorLinkage\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$16.clang_getCursorLinkage$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorVisibility$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorVisibility$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorVisibility\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$16.clang_getCursorVisibility$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorAvailability$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorAvailability$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorAvailability\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$16.clang_getCursorAvailability$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorPlatformAvailability$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCursorPlatformAvailability$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorPlatformAvailability\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$16.clang_getCursorPlatformAvailability$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeCXPlatformAvailability$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeCXPlatformAvailability$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeCXPlatformAvailability\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$16.clang_disposeCXPlatformAvailability$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorLanguage$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorLanguage$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorLanguage\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$16.clang_getCursorLanguage$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCursorTLSKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_getCursorTLSKind$MH,\"clang_getCursorTLSKind\");\n-    }\n-    public static int clang_getCursorTLSKind ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_getCursorTLSKind$MH, \"clang_getCursorTLSKind\");\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_Cursor_getTranslationUnit$MH,\"clang_Cursor_getTranslationUnit\");\n-    }\n-    public static MemoryAddress clang_Cursor_getTranslationUnit ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_Cursor_getTranslationUnit$MH, \"clang_Cursor_getTranslationUnit\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_createCXCursorSet$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_createCXCursorSet$MH,\"clang_createCXCursorSet\");\n-    }\n-    public static MemoryAddress clang_createCXCursorSet () {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_createCXCursorSet$MH, \"clang_createCXCursorSet\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeCXCursorSet$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_disposeCXCursorSet$MH,\"clang_disposeCXCursorSet\");\n-    }\n-    public static void clang_disposeCXCursorSet ( Addressable cset) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_disposeCXCursorSet$MH, \"clang_disposeCXCursorSet\");\n-        try {\n-            mh$.invokeExact(cset.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXCursorSet_contains$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_contains$MH,\"clang_CXCursorSet_contains\");\n-    }\n-    public static int clang_CXCursorSet_contains ( Addressable cset,  MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_contains$MH, \"clang_CXCursorSet_contains\");\n-        try {\n-            return (int)mh$.invokeExact(cset.address(), cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXCursorSet_insert$MH() {\n-        return RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_insert$MH,\"clang_CXCursorSet_insert\");\n-    }\n-    public static int clang_CXCursorSet_insert ( Addressable cset,  MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_CXCursorSet_insert$MH, \"clang_CXCursorSet_insert\");\n-        try {\n-            return (int)mh$.invokeExact(cset.address(), cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$17 {\n-\n-        static final FunctionDescriptor clang_getCursorTLSKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorTLSKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorTLSKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$17.clang_getCursorTLSKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$17.clang_Cursor_getTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_createCXCursorSet$FUNC = FunctionDescriptor.of(C_POINTER);\n-        static final MethodHandle clang_createCXCursorSet$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_createCXCursorSet\",\n-            \"()Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$17.clang_createCXCursorSet$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeCXCursorSet$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeCXCursorSet$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeCXCursorSet\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$17.clang_disposeCXCursorSet$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXCursorSet_contains$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXCursorSet_contains$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXCursorSet_contains\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$17.clang_CXCursorSet_contains$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXCursorSet_insert$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXCursorSet_insert$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXCursorSet_insert\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$17.clang_CXCursorSet_insert$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCursorSemanticParent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_getCursorSemanticParent$MH,\"clang_getCursorSemanticParent\");\n-    }\n-    public static MemorySegment clang_getCursorSemanticParent ( SegmentAllocator allocator,  MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getCursorSemanticParent$MH, \"clang_getCursorSemanticParent\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorSemanticParent ( ResourceScope scope,  MemorySegment cursor) {\n-        return clang_getCursorSemanticParent(SegmentAllocator.ofScope(scope), cursor);\n-    }\n-    public static MethodHandle clang_getCursorLexicalParent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_getCursorLexicalParent$MH,\"clang_getCursorLexicalParent\");\n-    }\n-    public static MemorySegment clang_getCursorLexicalParent ( SegmentAllocator allocator,  MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getCursorLexicalParent$MH, \"clang_getCursorLexicalParent\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorLexicalParent ( ResourceScope scope,  MemorySegment cursor) {\n-        return clang_getCursorLexicalParent(SegmentAllocator.ofScope(scope), cursor);\n-    }\n-    public static MethodHandle clang_getOverriddenCursors$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_getOverriddenCursors$MH,\"clang_getOverriddenCursors\");\n-    }\n-    public static void clang_getOverriddenCursors ( MemorySegment cursor,  Addressable overridden,  Addressable num_overridden) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getOverriddenCursors$MH, \"clang_getOverriddenCursors\");\n-        try {\n-            mh$.invokeExact(cursor, overridden.address(), num_overridden.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeOverriddenCursors$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_disposeOverriddenCursors$MH,\"clang_disposeOverriddenCursors\");\n-    }\n-    public static void clang_disposeOverriddenCursors ( Addressable overridden) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_disposeOverriddenCursors$MH, \"clang_disposeOverriddenCursors\");\n-        try {\n-            mh$.invokeExact(overridden.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getIncludedFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_getIncludedFile$MH,\"clang_getIncludedFile\");\n-    }\n-    public static MemoryAddress clang_getIncludedFile ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getIncludedFile$MH, \"clang_getIncludedFile\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCursor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$18.clang_getCursor$MH,\"clang_getCursor\");\n-    }\n-    public static MemorySegment clang_getCursor ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_getCursor$MH, \"clang_getCursor\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursor ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n-        return clang_getCursor(SegmentAllocator.ofScope(scope), x1.address(), x2);\n-    }\n-    public static class constants$18 {\n-\n-        static final FunctionDescriptor clang_getCursorSemanticParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorSemanticParent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorSemanticParent\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$18.clang_getCursorSemanticParent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorLexicalParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorLexicalParent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorLexicalParent\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$18.clang_getCursorLexicalParent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getOverriddenCursors$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getOverriddenCursors$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getOverriddenCursors\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$18.clang_getOverriddenCursors$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeOverriddenCursors$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeOverriddenCursors$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeOverriddenCursors\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$18.clang_disposeOverriddenCursors$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getIncludedFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getIncludedFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getIncludedFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$18.clang_getIncludedFile$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_getCursor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursor\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$18.clang_getCursor$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCursorLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$19.clang_getCursorLocation$MH,\"clang_getCursorLocation\");\n-    }\n-    public static MemorySegment clang_getCursorLocation ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getCursorLocation$MH, \"clang_getCursorLocation\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorLocation ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorLocation(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static MethodHandle clang_getCursorExtent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$19.clang_getCursorExtent$MH,\"clang_getCursorExtent\");\n-    }\n-    public static MemorySegment clang_getCursorExtent ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getCursorExtent$MH, \"clang_getCursorExtent\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorExtent ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorExtent(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static int CXType_Invalid() {\n-        return (int)0L;\n-    }\n-    public static int CXType_Unexposed() {\n-        return (int)1L;\n-    }\n-    public static int CXType_Void() {\n-        return (int)2L;\n-    }\n-    public static int CXType_Bool() {\n-        return (int)3L;\n-    }\n-    public static int CXType_Char_U() {\n-        return (int)4L;\n-    }\n-    public static int CXType_UChar() {\n-        return (int)5L;\n-    }\n-    public static int CXType_Char16() {\n-        return (int)6L;\n-    }\n-    public static int CXType_Char32() {\n-        return (int)7L;\n-    }\n-    public static int CXType_UShort() {\n-        return (int)8L;\n-    }\n-    public static int CXType_UInt() {\n-        return (int)9L;\n-    }\n-    public static int CXType_ULong() {\n-        return (int)10L;\n-    }\n-    public static int CXType_ULongLong() {\n-        return (int)11L;\n-    }\n-    public static int CXType_UInt128() {\n-        return (int)12L;\n-    }\n-    public static int CXType_Char_S() {\n-        return (int)13L;\n-    }\n-    public static int CXType_SChar() {\n-        return (int)14L;\n+    public static int CXType_SChar() {\n+        return (int)14L;\n@@ -4843,2 +1851,2 @@\n-    public static int CXCallingConv_Default() {\n-        return (int)0L;\n+    public static MethodHandle clang_getCursorType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorType$MH,\"clang_getCursorType\");\n@@ -4846,2 +1854,7 @@\n-    public static int CXCallingConv_C() {\n-        return (int)1L;\n+    public static MemorySegment clang_getCursorType ( SegmentAllocator allocator,  MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getCursorType$MH, \"clang_getCursorType\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -4849,2 +1862,2 @@\n-    public static int CXCallingConv_X86StdCall() {\n-        return (int)2L;\n+    public static MemorySegment clang_getCursorType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getCursorType(SegmentAllocator.ofScope(scope), C);\n@@ -4852,2 +1865,2 @@\n-    public static int CXCallingConv_X86FastCall() {\n-        return (int)3L;\n+    public static MethodHandle clang_getTypeSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getTypeSpelling$MH,\"clang_getTypeSpelling\");\n@@ -4855,2 +1868,7 @@\n-    public static int CXCallingConv_X86ThisCall() {\n-        return (int)4L;\n+    public static MemorySegment clang_getTypeSpelling ( SegmentAllocator allocator,  MemorySegment CT) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getTypeSpelling$MH, \"clang_getTypeSpelling\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -4858,2 +1876,2 @@\n-    public static int CXCallingConv_X86Pascal() {\n-        return (int)5L;\n+    public static MemorySegment clang_getTypeSpelling ( ResourceScope scope,  MemorySegment CT) {\n+        return clang_getTypeSpelling(SegmentAllocator.ofScope(scope), CT);\n@@ -4861,2 +1879,2 @@\n-    public static int CXCallingConv_AAPCS() {\n-        return (int)6L;\n+    public static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getTypedefDeclUnderlyingType$MH,\"clang_getTypedefDeclUnderlyingType\");\n@@ -4864,2 +1882,7 @@\n-    public static int CXCallingConv_AAPCS_VFP() {\n-        return (int)7L;\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType ( SegmentAllocator allocator,  MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getTypedefDeclUnderlyingType$MH, \"clang_getTypedefDeclUnderlyingType\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -4867,2 +1890,2 @@\n-    public static int CXCallingConv_X86RegCall() {\n-        return (int)8L;\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getTypedefDeclUnderlyingType(SegmentAllocator.ofScope(scope), C);\n@@ -4870,2 +1893,2 @@\n-    public static int CXCallingConv_IntelOclBicc() {\n-        return (int)9L;\n+    public static MethodHandle clang_getEnumDeclIntegerType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getEnumDeclIntegerType$MH,\"clang_getEnumDeclIntegerType\");\n@@ -4873,123 +1896,7 @@\n-    public static int CXCallingConv_Win64() {\n-        return (int)10L;\n-    }\n-    public static int CXCallingConv_X86_64Win64() {\n-        return (int)10L;\n-    }\n-    public static int CXCallingConv_X86_64SysV() {\n-        return (int)11L;\n-    }\n-    public static int CXCallingConv_X86VectorCall() {\n-        return (int)12L;\n-    }\n-    public static int CXCallingConv_Swift() {\n-        return (int)13L;\n-    }\n-    public static int CXCallingConv_PreserveMost() {\n-        return (int)14L;\n-    }\n-    public static int CXCallingConv_PreserveAll() {\n-        return (int)15L;\n-    }\n-    public static int CXCallingConv_AArch64VectorCall() {\n-        return (int)16L;\n-    }\n-    public static int CXCallingConv_Invalid() {\n-        return (int)100L;\n-    }\n-    public static int CXCallingConv_Unexposed() {\n-        return (int)200L;\n-    }\n-    public static class CXType {\n-\n-        static final MemoryLayout CXType$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXType.CXType$struct$LAYOUT;\n-        }\n-        static final VarHandle kind$VH = CXType$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-        public static VarHandle kind$VH() {\n-            return CXType.kind$VH;\n-        }\n-        public static int kind$get(MemorySegment seg) {\n-            return (int)CXType.kind$VH.get(seg);\n-        }\n-        public static void kind$set( MemorySegment seg, int x) {\n-            CXType.kind$VH.set(seg, x);\n-        }\n-        public static int kind$get(MemorySegment seg, long index) {\n-            return (int)CXType.kind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void kind$set(MemorySegment seg, long index, int x) {\n-            CXType.kind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment data$slice(MemorySegment seg) {\n-            return seg.asSlice(8, 16);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static MethodHandle clang_getCursorType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$19.clang_getCursorType$MH,\"clang_getCursorType\");\n-    }\n-    public static MemorySegment clang_getCursorType ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getCursorType$MH, \"clang_getCursorType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getCursorType(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static MethodHandle clang_getTypeSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$19.clang_getTypeSpelling$MH,\"clang_getTypeSpelling\");\n-    }\n-    public static MemorySegment clang_getTypeSpelling ( SegmentAllocator allocator,  MemorySegment CT) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getTypeSpelling$MH, \"clang_getTypeSpelling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getTypeSpelling ( ResourceScope scope,  MemorySegment CT) {\n-        return clang_getTypeSpelling(SegmentAllocator.ofScope(scope), CT);\n-    }\n-    public static MethodHandle clang_getTypedefDeclUnderlyingType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$19.clang_getTypedefDeclUnderlyingType$MH,\"clang_getTypedefDeclUnderlyingType\");\n-    }\n-    public static MemorySegment clang_getTypedefDeclUnderlyingType ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getTypedefDeclUnderlyingType$MH, \"clang_getTypedefDeclUnderlyingType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getTypedefDeclUnderlyingType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getTypedefDeclUnderlyingType(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static MethodHandle clang_getEnumDeclIntegerType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$19.clang_getEnumDeclIntegerType$MH,\"clang_getEnumDeclIntegerType\");\n-    }\n-    public static MemorySegment clang_getEnumDeclIntegerType ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$19.clang_getEnumDeclIntegerType$MH, \"clang_getEnumDeclIntegerType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_getEnumDeclIntegerType ( SegmentAllocator allocator,  MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$7.clang_getEnumDeclIntegerType$MH, \"clang_getEnumDeclIntegerType\");\n+        try {\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n@@ -5000,100 +1907,0 @@\n-    public static class constants$19 {\n-\n-        static final FunctionDescriptor clang_getCursorLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$19.clang_getCursorLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorExtent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorExtent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorExtent\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$19.clang_getCursorExtent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$19.clang_getCursorType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTypeSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTypeSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTypeSpelling\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$19.clang_getTypeSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTypedefDeclUnderlyingType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTypedefDeclUnderlyingType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$19.clang_getTypedefDeclUnderlyingType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getEnumDeclIntegerType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getEnumDeclIntegerType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$19.clang_getEnumDeclIntegerType$FUNC, false\n-        );\n-    }\n-\n@@ -5101,1 +1908,1 @@\n-        return RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclValue$MH,\"clang_getEnumConstantDeclValue\");\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getEnumConstantDeclValue$MH,\"clang_getEnumConstantDeclValue\");\n@@ -5104,1 +1911,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclValue$MH, \"clang_getEnumConstantDeclValue\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getEnumConstantDeclValue$MH, \"clang_getEnumConstantDeclValue\");\n@@ -5112,1 +1919,1 @@\n-        return RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclUnsignedValue$MH,\"clang_getEnumConstantDeclUnsignedValue\");\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getEnumConstantDeclUnsignedValue$MH,\"clang_getEnumConstantDeclUnsignedValue\");\n@@ -5115,1 +1922,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_getEnumConstantDeclUnsignedValue$MH, \"clang_getEnumConstantDeclUnsignedValue\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getEnumConstantDeclUnsignedValue$MH, \"clang_getEnumConstantDeclUnsignedValue\");\n@@ -5123,1 +1930,1 @@\n-        return RuntimeHelper.requireNonNull(constants$20.clang_getFieldDeclBitWidth$MH,\"clang_getFieldDeclBitWidth\");\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getFieldDeclBitWidth$MH,\"clang_getFieldDeclBitWidth\");\n@@ -5126,1 +1933,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_getFieldDeclBitWidth$MH, \"clang_getFieldDeclBitWidth\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_getFieldDeclBitWidth$MH, \"clang_getFieldDeclBitWidth\");\n@@ -5134,1 +1941,1 @@\n-        return RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumArguments$MH,\"clang_Cursor_getNumArguments\");\n+        return RuntimeHelper.requireNonNull(constants$8.clang_Cursor_getNumArguments$MH,\"clang_Cursor_getNumArguments\");\n@@ -5137,1 +1944,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumArguments$MH, \"clang_Cursor_getNumArguments\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_Cursor_getNumArguments$MH, \"clang_Cursor_getNumArguments\");\n@@ -5145,1 +1952,1 @@\n-        return RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getArgument$MH,\"clang_Cursor_getArgument\");\n+        return RuntimeHelper.requireNonNull(constants$8.clang_Cursor_getArgument$MH,\"clang_Cursor_getArgument\");\n@@ -5148,1 +1955,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getArgument$MH, \"clang_Cursor_getArgument\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_Cursor_getArgument$MH, \"clang_Cursor_getArgument\");\n@@ -5158,169 +1965,0 @@\n-    public static int CXTemplateArgumentKind_Null() {\n-        return (int)0L;\n-    }\n-    public static int CXTemplateArgumentKind_Type() {\n-        return (int)1L;\n-    }\n-    public static int CXTemplateArgumentKind_Declaration() {\n-        return (int)2L;\n-    }\n-    public static int CXTemplateArgumentKind_NullPtr() {\n-        return (int)3L;\n-    }\n-    public static int CXTemplateArgumentKind_Integral() {\n-        return (int)4L;\n-    }\n-    public static int CXTemplateArgumentKind_Template() {\n-        return (int)5L;\n-    }\n-    public static int CXTemplateArgumentKind_TemplateExpansion() {\n-        return (int)6L;\n-    }\n-    public static int CXTemplateArgumentKind_Expression() {\n-        return (int)7L;\n-    }\n-    public static int CXTemplateArgumentKind_Pack() {\n-        return (int)8L;\n-    }\n-    public static int CXTemplateArgumentKind_Invalid() {\n-        return (int)9L;\n-    }\n-    public static MethodHandle clang_Cursor_getNumTemplateArguments$MH() {\n-        return RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumTemplateArguments$MH,\"clang_Cursor_getNumTemplateArguments\");\n-    }\n-    public static int clang_Cursor_getNumTemplateArguments ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$20.clang_Cursor_getNumTemplateArguments$MH, \"clang_Cursor_getNumTemplateArguments\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$20 {\n-\n-        static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getEnumConstantDeclValue$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getEnumConstantDeclValue\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-            constants$20.clang_getEnumConstantDeclValue$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getEnumConstantDeclUnsignedValue$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getEnumConstantDeclUnsignedValue\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-            constants$20.clang_getEnumConstantDeclUnsignedValue$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getFieldDeclBitWidth$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFieldDeclBitWidth\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$20.clang_getFieldDeclBitWidth$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getNumArguments$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getNumArguments\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$20.clang_Cursor_getNumArguments$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getArgument$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Cursor_getArgument$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getArgument\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$20.clang_Cursor_getArgument$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getNumTemplateArguments$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getNumTemplateArguments$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getNumTemplateArguments\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$20.clang_Cursor_getNumTemplateArguments$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_Cursor_getTemplateArgumentKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentKind$MH,\"clang_Cursor_getTemplateArgumentKind\");\n-    }\n-    public static int clang_Cursor_getTemplateArgumentKind ( MemorySegment C,  int I) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentKind$MH, \"clang_Cursor_getTemplateArgumentKind\");\n-        try {\n-            return (int)mh$.invokeExact(C, I);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getTemplateArgumentType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentType$MH,\"clang_Cursor_getTemplateArgumentType\");\n-    }\n-    public static MemorySegment clang_Cursor_getTemplateArgumentType ( SegmentAllocator allocator,  MemorySegment C,  int I) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentType$MH, \"clang_Cursor_getTemplateArgumentType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C, I);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getTemplateArgumentType ( ResourceScope scope,  MemorySegment C,  int I) {\n-        return clang_Cursor_getTemplateArgumentType(SegmentAllocator.ofScope(scope), C, I);\n-    }\n-    public static MethodHandle clang_Cursor_getTemplateArgumentValue$MH() {\n-        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentValue$MH,\"clang_Cursor_getTemplateArgumentValue\");\n-    }\n-    public static long clang_Cursor_getTemplateArgumentValue ( MemorySegment C,  int I) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentValue$MH, \"clang_Cursor_getTemplateArgumentValue\");\n-        try {\n-            return (long)mh$.invokeExact(C, I);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH() {\n-        return RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentUnsignedValue$MH,\"clang_Cursor_getTemplateArgumentUnsignedValue\");\n-    }\n-    public static long clang_Cursor_getTemplateArgumentUnsignedValue ( MemorySegment C,  int I) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_Cursor_getTemplateArgumentUnsignedValue$MH, \"clang_Cursor_getTemplateArgumentUnsignedValue\");\n-        try {\n-            return (long)mh$.invokeExact(C, I);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -5328,1 +1966,1 @@\n-        return RuntimeHelper.requireNonNull(constants$21.clang_equalTypes$MH,\"clang_equalTypes\");\n+        return RuntimeHelper.requireNonNull(constants$8.clang_equalTypes$MH,\"clang_equalTypes\");\n@@ -5331,1 +1969,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_equalTypes$MH, \"clang_equalTypes\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$8.clang_equalTypes$MH, \"clang_equalTypes\");\n@@ -5339,1 +1977,1 @@\n-        return RuntimeHelper.requireNonNull(constants$21.clang_getCanonicalType$MH,\"clang_getCanonicalType\");\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getCanonicalType$MH,\"clang_getCanonicalType\");\n@@ -5342,1 +1980,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$21.clang_getCanonicalType$MH, \"clang_getCanonicalType\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getCanonicalType$MH, \"clang_getCanonicalType\");\n@@ -5352,107 +1990,0 @@\n-    public static class constants$21 {\n-\n-        static final FunctionDescriptor clang_Cursor_getTemplateArgumentKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Cursor_getTemplateArgumentKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getTemplateArgumentKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)I\",\n-            constants$21.clang_Cursor_getTemplateArgumentKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getTemplateArgumentType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Cursor_getTemplateArgumentType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getTemplateArgumentType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$21.clang_Cursor_getTemplateArgumentType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getTemplateArgumentValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Cursor_getTemplateArgumentValue$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getTemplateArgumentValue\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)J\",\n-            constants$21.clang_Cursor_getTemplateArgumentValue$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getTemplateArgumentUnsignedValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getTemplateArgumentUnsignedValue\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)J\",\n-            constants$21.clang_Cursor_getTemplateArgumentUnsignedValue$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_equalTypes$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_equalTypes$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_equalTypes\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$21.clang_equalTypes$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCanonicalType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCanonicalType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCanonicalType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$21.clang_getCanonicalType$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getLocalUnqualifiedType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$22.clang_getLocalUnqualifiedType$MH,\"clang_getLocalUnqualifiedType\");\n-    }\n-    public static MemorySegment clang_getLocalUnqualifiedType ( SegmentAllocator allocator,  MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_getLocalUnqualifiedType$MH, \"clang_getLocalUnqualifiedType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getLocalUnqualifiedType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getLocalUnqualifiedType(SegmentAllocator.ofScope(scope), T);\n-    }\n@@ -5460,1 +1991,1 @@\n-        return RuntimeHelper.requireNonNull(constants$22.clang_isConstQualifiedType$MH,\"clang_isConstQualifiedType\");\n+        return RuntimeHelper.requireNonNull(constants$9.clang_isConstQualifiedType$MH,\"clang_isConstQualifiedType\");\n@@ -5463,1 +1994,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_isConstQualifiedType$MH, \"clang_isConstQualifiedType\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_isConstQualifiedType$MH, \"clang_isConstQualifiedType\");\n@@ -5471,1 +2002,1 @@\n-        return RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroFunctionLike$MH,\"clang_Cursor_isMacroFunctionLike\");\n+        return RuntimeHelper.requireNonNull(constants$9.clang_Cursor_isMacroFunctionLike$MH,\"clang_Cursor_isMacroFunctionLike\");\n@@ -5474,23 +2005,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroFunctionLike$MH, \"clang_Cursor_isMacroFunctionLike\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_isMacroBuiltin$MH() {\n-        return RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroBuiltin$MH,\"clang_Cursor_isMacroBuiltin\");\n-    }\n-    public static int clang_Cursor_isMacroBuiltin ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isMacroBuiltin$MH, \"clang_Cursor_isMacroBuiltin\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_isFunctionInlined$MH() {\n-        return RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isFunctionInlined$MH,\"clang_Cursor_isFunctionInlined\");\n-    }\n-    public static int clang_Cursor_isFunctionInlined ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_Cursor_isFunctionInlined$MH, \"clang_Cursor_isFunctionInlined\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_Cursor_isMacroFunctionLike$MH, \"clang_Cursor_isMacroFunctionLike\");\n@@ -5504,1 +2013,1 @@\n-        return RuntimeHelper.requireNonNull(constants$22.clang_isVolatileQualifiedType$MH,\"clang_isVolatileQualifiedType\");\n+        return RuntimeHelper.requireNonNull(constants$9.clang_isVolatileQualifiedType$MH,\"clang_isVolatileQualifiedType\");\n@@ -5507,103 +2016,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$22.clang_isVolatileQualifiedType$MH, \"clang_isVolatileQualifiedType\");\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$22 {\n-\n-        static final FunctionDescriptor clang_getLocalUnqualifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getLocalUnqualifiedType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getLocalUnqualifiedType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$22.clang_getLocalUnqualifiedType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isConstQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isConstQualifiedType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isConstQualifiedType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$22.clang_isConstQualifiedType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isMacroFunctionLike$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isMacroFunctionLike\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$22.clang_Cursor_isMacroFunctionLike$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isMacroBuiltin$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isMacroBuiltin$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isMacroBuiltin\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$22.clang_Cursor_isMacroBuiltin$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isFunctionInlined$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isFunctionInlined\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$22.clang_Cursor_isFunctionInlined$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isVolatileQualifiedType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isVolatileQualifiedType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$22.clang_isVolatileQualifiedType$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_isRestrictQualifiedType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$23.clang_isRestrictQualifiedType$MH,\"clang_isRestrictQualifiedType\");\n-    }\n-    public static int clang_isRestrictQualifiedType ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_isRestrictQualifiedType$MH, \"clang_isRestrictQualifiedType\");\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getAddressSpace$MH() {\n-        return RuntimeHelper.requireNonNull(constants$23.clang_getAddressSpace$MH,\"clang_getAddressSpace\");\n-    }\n-    public static int clang_getAddressSpace ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getAddressSpace$MH, \"clang_getAddressSpace\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_isVolatileQualifiedType$MH, \"clang_isVolatileQualifiedType\");\n@@ -5617,1 +2024,1 @@\n-        return RuntimeHelper.requireNonNull(constants$23.clang_getTypedefName$MH,\"clang_getTypedefName\");\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getTypedefName$MH,\"clang_getTypedefName\");\n@@ -5620,1 +2027,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getTypedefName$MH, \"clang_getTypedefName\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getTypedefName$MH, \"clang_getTypedefName\");\n@@ -5631,1 +2038,1 @@\n-        return RuntimeHelper.requireNonNull(constants$23.clang_getPointeeType$MH,\"clang_getPointeeType\");\n+        return RuntimeHelper.requireNonNull(constants$9.clang_getPointeeType$MH,\"clang_getPointeeType\");\n@@ -5634,1 +2041,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getPointeeType$MH, \"clang_getPointeeType\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$9.clang_getPointeeType$MH, \"clang_getPointeeType\");\n@@ -5645,1 +2052,1 @@\n-        return RuntimeHelper.requireNonNull(constants$23.clang_getTypeDeclaration$MH,\"clang_getTypeDeclaration\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_getTypeDeclaration$MH,\"clang_getTypeDeclaration\");\n@@ -5648,1 +2055,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getTypeDeclaration$MH, \"clang_getTypeDeclaration\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_getTypeDeclaration$MH, \"clang_getTypeDeclaration\");\n@@ -5658,120 +2065,0 @@\n-    public static MethodHandle clang_getDeclObjCTypeEncoding$MH() {\n-        return RuntimeHelper.requireNonNull(constants$23.clang_getDeclObjCTypeEncoding$MH,\"clang_getDeclObjCTypeEncoding\");\n-    }\n-    public static MemorySegment clang_getDeclObjCTypeEncoding ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$23.clang_getDeclObjCTypeEncoding$MH, \"clang_getDeclObjCTypeEncoding\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getDeclObjCTypeEncoding ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getDeclObjCTypeEncoding(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static class constants$23 {\n-\n-        static final FunctionDescriptor clang_isRestrictQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isRestrictQualifiedType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isRestrictQualifiedType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$23.clang_isRestrictQualifiedType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getAddressSpace$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getAddressSpace$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getAddressSpace\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$23.clang_getAddressSpace$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTypedefName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTypedefName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTypedefName\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$23.clang_getTypedefName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getPointeeType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getPointeeType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getPointeeType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$23.clang_getPointeeType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTypeDeclaration$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTypeDeclaration$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTypeDeclaration\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$23.clang_getTypeDeclaration$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDeclObjCTypeEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getDeclObjCTypeEncoding$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDeclObjCTypeEncoding\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$23.clang_getDeclObjCTypeEncoding$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_Type_getObjCEncoding$MH() {\n-        return RuntimeHelper.requireNonNull(constants$24.clang_Type_getObjCEncoding$MH,\"clang_Type_getObjCEncoding\");\n-    }\n-    public static MemorySegment clang_Type_getObjCEncoding ( SegmentAllocator allocator,  MemorySegment type) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_Type_getObjCEncoding$MH, \"clang_Type_getObjCEncoding\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, type);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Type_getObjCEncoding ( ResourceScope scope,  MemorySegment type) {\n-        return clang_Type_getObjCEncoding(SegmentAllocator.ofScope(scope), type);\n-    }\n@@ -5779,1 +2066,1 @@\n-        return RuntimeHelper.requireNonNull(constants$24.clang_getTypeKindSpelling$MH,\"clang_getTypeKindSpelling\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_getTypeKindSpelling$MH,\"clang_getTypeKindSpelling\");\n@@ -5782,1 +2069,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getTypeKindSpelling$MH, \"clang_getTypeKindSpelling\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_getTypeKindSpelling$MH, \"clang_getTypeKindSpelling\");\n@@ -5793,1 +2080,1 @@\n-        return RuntimeHelper.requireNonNull(constants$24.clang_getFunctionTypeCallingConv$MH,\"clang_getFunctionTypeCallingConv\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_getFunctionTypeCallingConv$MH,\"clang_getFunctionTypeCallingConv\");\n@@ -5796,1 +2083,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getFunctionTypeCallingConv$MH, \"clang_getFunctionTypeCallingConv\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_getFunctionTypeCallingConv$MH, \"clang_getFunctionTypeCallingConv\");\n@@ -5804,1 +2091,1 @@\n-        return RuntimeHelper.requireNonNull(constants$24.clang_getResultType$MH,\"clang_getResultType\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_getResultType$MH,\"clang_getResultType\");\n@@ -5807,1 +2094,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getResultType$MH, \"clang_getResultType\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_getResultType$MH, \"clang_getResultType\");\n@@ -5817,11 +2104,0 @@\n-    public static MethodHandle clang_getExceptionSpecificationType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$24.clang_getExceptionSpecificationType$MH,\"clang_getExceptionSpecificationType\");\n-    }\n-    public static int clang_getExceptionSpecificationType ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getExceptionSpecificationType$MH, \"clang_getExceptionSpecificationType\");\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n@@ -5829,1 +2105,1 @@\n-        return RuntimeHelper.requireNonNull(constants$24.clang_getNumArgTypes$MH,\"clang_getNumArgTypes\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_getNumArgTypes$MH,\"clang_getNumArgTypes\");\n@@ -5832,1 +2108,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$24.clang_getNumArgTypes$MH, \"clang_getNumArgTypes\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_getNumArgTypes$MH, \"clang_getNumArgTypes\");\n@@ -5839,84 +2115,0 @@\n-    public static class constants$24 {\n-\n-        static final FunctionDescriptor clang_Type_getObjCEncoding$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getObjCEncoding$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getObjCEncoding\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$24.clang_Type_getObjCEncoding$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTypeKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_getTypeKindSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTypeKindSpelling\",\n-            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$24.clang_getTypeKindSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getFunctionTypeCallingConv$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getFunctionTypeCallingConv\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$24.clang_getFunctionTypeCallingConv$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getResultType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getResultType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$24.clang_getResultType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getExceptionSpecificationType$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getExceptionSpecificationType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getExceptionSpecificationType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$24.clang_getExceptionSpecificationType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNumArgTypes$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getNumArgTypes$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNumArgTypes\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$24.clang_getNumArgTypes$FUNC, false\n-        );\n-    }\n-\n@@ -5924,1 +2116,1 @@\n-        return RuntimeHelper.requireNonNull(constants$25.clang_getArgType$MH,\"clang_getArgType\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_getArgType$MH,\"clang_getArgType\");\n@@ -5927,1 +2119,1 @@\n-        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_getArgType$MH, \"clang_getArgType\");\n+        var mh$ = RuntimeHelper.requireNonNull(constants$10.clang_getArgType$MH, \"clang_getArgType\");\n@@ -5937,2 +2129,2 @@\n-    public static MethodHandle clang_Type_getObjCObjectBaseType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCObjectBaseType$MH,\"clang_Type_getObjCObjectBaseType\");\n+    public static MethodHandle clang_isFunctionTypeVariadic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_isFunctionTypeVariadic$MH,\"clang_isFunctionTypeVariadic\");\n@@ -5940,2 +2132,2 @@\n-    public static MemorySegment clang_Type_getObjCObjectBaseType ( SegmentAllocator allocator,  MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCObjectBaseType$MH, \"clang_Type_getObjCObjectBaseType\");\n+    public static int clang_isFunctionTypeVariadic ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_isFunctionTypeVariadic$MH, \"clang_isFunctionTypeVariadic\");\n@@ -5943,1 +2135,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (int)mh$.invokeExact(T);\n@@ -5948,5 +2140,2 @@\n-    public static MemorySegment clang_Type_getObjCObjectBaseType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_Type_getObjCObjectBaseType(SegmentAllocator.ofScope(scope), T);\n-    }\n-    public static MethodHandle clang_Type_getNumObjCProtocolRefs$MH() {\n-        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCProtocolRefs$MH,\"clang_Type_getNumObjCProtocolRefs\");\n+    public static MethodHandle clang_getCursorResultType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getCursorResultType$MH,\"clang_getCursorResultType\");\n@@ -5954,2 +2143,2 @@\n-    public static int clang_Type_getNumObjCProtocolRefs ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCProtocolRefs$MH, \"clang_Type_getNumObjCProtocolRefs\");\n+    public static MemorySegment clang_getCursorResultType ( SegmentAllocator allocator,  MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_getCursorResultType$MH, \"clang_getCursorResultType\");\n@@ -5957,1 +2146,1 @@\n-            return (int)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -5962,2 +2151,5 @@\n-    public static MethodHandle clang_Type_getObjCProtocolDecl$MH() {\n-        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCProtocolDecl$MH,\"clang_Type_getObjCProtocolDecl\");\n+    public static MemorySegment clang_getCursorResultType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getCursorResultType(SegmentAllocator.ofScope(scope), C);\n+    }\n+    public static MethodHandle clang_getElementType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getElementType$MH,\"clang_getElementType\");\n@@ -5965,2 +2157,2 @@\n-    public static MemorySegment clang_Type_getObjCProtocolDecl ( SegmentAllocator allocator,  MemorySegment T,  int i) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCProtocolDecl$MH, \"clang_Type_getObjCProtocolDecl\");\n+    public static MemorySegment clang_getElementType ( SegmentAllocator allocator,  MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_getElementType$MH, \"clang_getElementType\");\n@@ -5968,1 +2160,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5973,2 +2165,2 @@\n-    public static MemorySegment clang_Type_getObjCProtocolDecl ( ResourceScope scope,  MemorySegment T,  int i) {\n-        return clang_Type_getObjCProtocolDecl(SegmentAllocator.ofScope(scope), T, i);\n+    public static MemorySegment clang_getElementType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getElementType(SegmentAllocator.ofScope(scope), T);\n@@ -5976,2 +2168,2 @@\n-    public static MethodHandle clang_Type_getNumObjCTypeArgs$MH() {\n-        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCTypeArgs$MH,\"clang_Type_getNumObjCTypeArgs\");\n+    public static MethodHandle clang_getNumElements$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getNumElements$MH,\"clang_getNumElements\");\n@@ -5979,2 +2171,2 @@\n-    public static int clang_Type_getNumObjCTypeArgs ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getNumObjCTypeArgs$MH, \"clang_Type_getNumObjCTypeArgs\");\n+    public static long clang_getNumElements ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_getNumElements$MH, \"clang_getNumElements\");\n@@ -5982,1 +2174,1 @@\n-            return (int)mh$.invokeExact(T);\n+            return (long)mh$.invokeExact(T);\n@@ -5987,2 +2179,2 @@\n-    public static MethodHandle clang_Type_getObjCTypeArg$MH() {\n-        return RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCTypeArg$MH,\"clang_Type_getObjCTypeArg\");\n+    public static MethodHandle clang_getArrayElementType$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getArrayElementType$MH,\"clang_getArrayElementType\");\n@@ -5990,2 +2182,2 @@\n-    public static MemorySegment clang_Type_getObjCTypeArg ( SegmentAllocator allocator,  MemorySegment T,  int i) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$25.clang_Type_getObjCTypeArg$MH, \"clang_Type_getObjCTypeArg\");\n+    public static MemorySegment clang_getArrayElementType ( SegmentAllocator allocator,  MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_getArrayElementType$MH, \"clang_getArrayElementType\");\n@@ -5993,1 +2185,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -5998,96 +2190,2 @@\n-    public static MemorySegment clang_Type_getObjCTypeArg ( ResourceScope scope,  MemorySegment T,  int i) {\n-        return clang_Type_getObjCTypeArg(SegmentAllocator.ofScope(scope), T, i);\n-    }\n-    public static class constants$25 {\n-\n-        static final FunctionDescriptor clang_getArgType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_getArgType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getArgType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$25.clang_getArgType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getObjCObjectBaseType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getObjCObjectBaseType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getObjCObjectBaseType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$25.clang_Type_getObjCObjectBaseType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getNumObjCProtocolRefs$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getNumObjCProtocolRefs$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getNumObjCProtocolRefs\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$25.clang_Type_getNumObjCProtocolRefs$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getObjCProtocolDecl$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Type_getObjCProtocolDecl$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getObjCProtocolDecl\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$25.clang_Type_getObjCProtocolDecl$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getNumObjCTypeArgs$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getNumObjCTypeArgs$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getNumObjCTypeArgs\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$25.clang_Type_getNumObjCTypeArgs$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getObjCTypeArg$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Type_getObjCTypeArg$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getObjCTypeArg\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$25.clang_Type_getObjCTypeArg$FUNC, false\n-        );\n+    public static MemorySegment clang_getArrayElementType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getArrayElementType(SegmentAllocator.ofScope(scope), T);\n@@ -6095,3 +2193,2 @@\n-\n-    public static MethodHandle clang_isFunctionTypeVariadic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$26.clang_isFunctionTypeVariadic$MH,\"clang_isFunctionTypeVariadic\");\n+    public static MethodHandle clang_getArraySize$MH() {\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getArraySize$MH,\"clang_getArraySize\");\n@@ -6099,2 +2196,2 @@\n-    public static int clang_isFunctionTypeVariadic ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_isFunctionTypeVariadic$MH, \"clang_isFunctionTypeVariadic\");\n+    public static long clang_getArraySize ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$11.clang_getArraySize$MH, \"clang_getArraySize\");\n@@ -6102,1 +2199,1 @@\n-            return (int)mh$.invokeExact(T);\n+            return (long)mh$.invokeExact(T);\n@@ -6107,10 +2204,2 @@\n-    public static MethodHandle clang_getCursorResultType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$26.clang_getCursorResultType$MH,\"clang_getCursorResultType\");\n-    }\n-    public static MemorySegment clang_getCursorResultType ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getCursorResultType$MH, \"clang_getCursorResultType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXTypeNullability_NonNull() {\n+        return (int)0L;\n@@ -6118,2 +2207,2 @@\n-    public static MemorySegment clang_getCursorResultType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getCursorResultType(SegmentAllocator.ofScope(scope), C);\n+    public static int CXTypeNullability_Nullable() {\n+        return (int)1L;\n@@ -6121,2 +2210,2 @@\n-    public static MethodHandle clang_getCursorExceptionSpecificationType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$26.clang_getCursorExceptionSpecificationType$MH,\"clang_getCursorExceptionSpecificationType\");\n+    public static int CXTypeNullability_Unspecified() {\n+        return (int)2L;\n@@ -6124,2 +2213,26 @@\n-    public static int clang_getCursorExceptionSpecificationType ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getCursorExceptionSpecificationType$MH, \"clang_getCursorExceptionSpecificationType\");\n+    public static int CXTypeNullability_Invalid() {\n+        return (int)3L;\n+    }\n+    public static int CXTypeLayoutError_Invalid() {\n+        return (int)-1L;\n+    }\n+    public static int CXTypeLayoutError_Incomplete() {\n+        return (int)-2L;\n+    }\n+    public static int CXTypeLayoutError_Dependent() {\n+        return (int)-3L;\n+    }\n+    public static int CXTypeLayoutError_NotConstantSize() {\n+        return (int)-4L;\n+    }\n+    public static int CXTypeLayoutError_InvalidFieldName() {\n+        return (int)-5L;\n+    }\n+    public static int CXTypeLayoutError_Undeduced() {\n+        return (int)-6L;\n+    }\n+    public static MethodHandle clang_Type_getSizeOf$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_Type_getSizeOf$MH,\"clang_Type_getSizeOf\");\n+    }\n+    public static long clang_Type_getSizeOf ( MemorySegment T) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_Type_getSizeOf$MH, \"clang_Type_getSizeOf\");\n@@ -6127,1 +2240,1 @@\n-            return (int)mh$.invokeExact(C);\n+            return (long)mh$.invokeExact(T);\n@@ -6132,2 +2245,2 @@\n-    public static MethodHandle clang_isPODType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$26.clang_isPODType$MH,\"clang_isPODType\");\n+    public static MethodHandle clang_Type_getOffsetOf$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_Type_getOffsetOf$MH,\"clang_Type_getOffsetOf\");\n@@ -6135,2 +2248,2 @@\n-    public static int clang_isPODType ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_isPODType$MH, \"clang_isPODType\");\n+    public static long clang_Type_getOffsetOf ( MemorySegment T,  Addressable S) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_Type_getOffsetOf$MH, \"clang_Type_getOffsetOf\");\n@@ -6138,1 +2251,1 @@\n-            return (int)mh$.invokeExact(T);\n+            return (long)mh$.invokeExact(T, S.address());\n@@ -6143,2 +2256,2 @@\n-    public static MethodHandle clang_getElementType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$26.clang_getElementType$MH,\"clang_getElementType\");\n+    public static MethodHandle clang_Cursor_isAnonymous$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isAnonymous$MH,\"clang_Cursor_isAnonymous\");\n@@ -6146,2 +2259,2 @@\n-    public static MemorySegment clang_getElementType ( SegmentAllocator allocator,  MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getElementType$MH, \"clang_getElementType\");\n+    public static int clang_Cursor_isAnonymous ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isAnonymous$MH, \"clang_Cursor_isAnonymous\");\n@@ -6149,1 +2262,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (int)mh$.invokeExact(C);\n@@ -6154,5 +2267,2 @@\n-    public static MemorySegment clang_getElementType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getElementType(SegmentAllocator.ofScope(scope), T);\n-    }\n-    public static MethodHandle clang_getNumElements$MH() {\n-        return RuntimeHelper.requireNonNull(constants$26.clang_getNumElements$MH,\"clang_getNumElements\");\n+    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isAnonymousRecordDecl$MH,\"clang_Cursor_isAnonymousRecordDecl\");\n@@ -6160,2 +2270,2 @@\n-    public static long clang_getNumElements ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$26.clang_getNumElements$MH, \"clang_getNumElements\");\n+    public static int clang_Cursor_isAnonymousRecordDecl ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isAnonymousRecordDecl$MH, \"clang_Cursor_isAnonymousRecordDecl\");\n@@ -6163,1 +2273,1 @@\n-            return (long)mh$.invokeExact(T);\n+            return (int)mh$.invokeExact(C);\n@@ -6168,86 +2278,2 @@\n-    public static class constants$26 {\n-\n-        static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isFunctionTypeVariadic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isFunctionTypeVariadic\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$26.clang_isFunctionTypeVariadic$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorResultType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorResultType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$26.clang_getCursorResultType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorExceptionSpecificationType$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorExceptionSpecificationType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorExceptionSpecificationType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$26.clang_getCursorExceptionSpecificationType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isPODType$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isPODType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isPODType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$26.clang_isPODType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getElementType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getElementType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$26.clang_getElementType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNumElements$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getNumElements$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNumElements\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-            constants$26.clang_getNumElements$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getArrayElementType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$27.clang_getArrayElementType$MH,\"clang_getArrayElementType\");\n+    public static MethodHandle clang_Cursor_isBitField$MH() {\n+        return RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isBitField$MH,\"clang_Cursor_isBitField\");\n@@ -6255,2 +2281,2 @@\n-    public static MemorySegment clang_getArrayElementType ( SegmentAllocator allocator,  MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_getArrayElementType$MH, \"clang_getArrayElementType\");\n+    public static int clang_Cursor_isBitField ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isBitField$MH, \"clang_Cursor_isBitField\");\n@@ -6258,1 +2284,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (int)mh$.invokeExact(C);\n@@ -6263,2 +2289,2 @@\n-    public static MemorySegment clang_getArrayElementType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getArrayElementType(SegmentAllocator.ofScope(scope), T);\n+    public static int CXChildVisit_Break() {\n+        return (int)0L;\n@@ -6266,2 +2292,2 @@\n-    public static MethodHandle clang_getArraySize$MH() {\n-        return RuntimeHelper.requireNonNull(constants$27.clang_getArraySize$MH,\"clang_getArraySize\");\n+    public static int CXChildVisit_Continue() {\n+        return (int)1L;\n@@ -6269,2 +2295,8 @@\n-    public static long clang_getArraySize ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_getArraySize$MH, \"clang_getArraySize\");\n+    public static int CXChildVisit_Recurse() {\n+        return (int)2L;\n+    }\n+    public static MethodHandle clang_visitChildren$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_visitChildren$MH,\"clang_visitChildren\");\n+    }\n+    public static int clang_visitChildren ( MemorySegment parent,  Addressable visitor,  Addressable client_data) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_visitChildren$MH, \"clang_visitChildren\");\n@@ -6272,1 +2304,1 @@\n-            return (long)mh$.invokeExact(T);\n+            return (int)mh$.invokeExact(parent, visitor.address(), client_data.address());\n@@ -6277,2 +2309,2 @@\n-    public static MethodHandle clang_Type_getNamedType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$27.clang_Type_getNamedType$MH,\"clang_Type_getNamedType\");\n+    public static MethodHandle clang_getCursorUSR$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_getCursorUSR$MH,\"clang_getCursorUSR\");\n@@ -6280,2 +2312,2 @@\n-    public static MemorySegment clang_Type_getNamedType ( SegmentAllocator allocator,  MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_getNamedType$MH, \"clang_Type_getNamedType\");\n+    public static MemorySegment clang_getCursorUSR ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_getCursorUSR$MH, \"clang_getCursorUSR\");\n@@ -6283,1 +2315,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6288,2 +2320,2 @@\n-    public static MemorySegment clang_Type_getNamedType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_Type_getNamedType(SegmentAllocator.ofScope(scope), T);\n+    public static MemorySegment clang_getCursorUSR ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorUSR(SegmentAllocator.ofScope(scope), x1);\n@@ -6291,2 +2323,2 @@\n-    public static MethodHandle clang_Type_isTransparentTagTypedef$MH() {\n-        return RuntimeHelper.requireNonNull(constants$27.clang_Type_isTransparentTagTypedef$MH,\"clang_Type_isTransparentTagTypedef\");\n+    public static MethodHandle clang_getCursorSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_getCursorSpelling$MH,\"clang_getCursorSpelling\");\n@@ -6294,2 +2326,2 @@\n-    public static int clang_Type_isTransparentTagTypedef ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_isTransparentTagTypedef$MH, \"clang_Type_isTransparentTagTypedef\");\n+    public static MemorySegment clang_getCursorSpelling ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_getCursorSpelling$MH, \"clang_getCursorSpelling\");\n@@ -6297,1 +2329,1 @@\n-            return (int)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6302,1 +2334,4 @@\n-    public static int CXTypeNullability_NonNull() {\n+    public static MemorySegment clang_getCursorSpelling ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorSpelling(SegmentAllocator.ofScope(scope), x1);\n+    }\n+    public static int CXPrintingPolicy_Indentation() {\n@@ -6305,1 +2340,1 @@\n-    public static int CXTypeNullability_Nullable() {\n+    public static int CXPrintingPolicy_SuppressSpecifiers() {\n@@ -6308,1 +2343,1 @@\n-    public static int CXTypeNullability_Unspecified() {\n+    public static int CXPrintingPolicy_SuppressTagKeyword() {\n@@ -6311,1 +2346,1 @@\n-    public static int CXTypeNullability_Invalid() {\n+    public static int CXPrintingPolicy_IncludeTagDefinition() {\n@@ -6314,2 +2349,2 @@\n-    public static MethodHandle clang_Type_getNullability$MH() {\n-        return RuntimeHelper.requireNonNull(constants$27.clang_Type_getNullability$MH,\"clang_Type_getNullability\");\n+    public static int CXPrintingPolicy_SuppressScope() {\n+        return (int)4L;\n@@ -6317,7 +2352,2 @@\n-    public static int clang_Type_getNullability ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_getNullability$MH, \"clang_Type_getNullability\");\n-        try {\n-            return (int)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_SuppressUnwrittenScope() {\n+        return (int)5L;\n@@ -6325,2 +2355,2 @@\n-    public static int CXTypeLayoutError_Invalid() {\n-        return (int)-1L;\n+    public static int CXPrintingPolicy_SuppressInitializers() {\n+        return (int)6L;\n@@ -6328,2 +2358,2 @@\n-    public static int CXTypeLayoutError_Incomplete() {\n-        return (int)-2L;\n+    public static int CXPrintingPolicy_ConstantArraySizeAsWritten() {\n+        return (int)7L;\n@@ -6331,2 +2361,2 @@\n-    public static int CXTypeLayoutError_Dependent() {\n-        return (int)-3L;\n+    public static int CXPrintingPolicy_AnonymousTagLocations() {\n+        return (int)8L;\n@@ -6334,2 +2364,2 @@\n-    public static int CXTypeLayoutError_NotConstantSize() {\n-        return (int)-4L;\n+    public static int CXPrintingPolicy_SuppressStrongLifetime() {\n+        return (int)9L;\n@@ -6337,2 +2367,2 @@\n-    public static int CXTypeLayoutError_InvalidFieldName() {\n-        return (int)-5L;\n+    public static int CXPrintingPolicy_SuppressLifetimeQualifiers() {\n+        return (int)10L;\n@@ -6340,2 +2370,2 @@\n-    public static int CXTypeLayoutError_Undeduced() {\n-        return (int)-6L;\n+    public static int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() {\n+        return (int)11L;\n@@ -6343,2 +2373,2 @@\n-    public static MethodHandle clang_Type_getAlignOf$MH() {\n-        return RuntimeHelper.requireNonNull(constants$27.clang_Type_getAlignOf$MH,\"clang_Type_getAlignOf\");\n+    public static int CXPrintingPolicy_Bool() {\n+        return (int)12L;\n@@ -6346,7 +2376,2 @@\n-    public static long clang_Type_getAlignOf ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$27.clang_Type_getAlignOf$MH, \"clang_Type_getAlignOf\");\n-        try {\n-            return (long)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_Restrict() {\n+        return (int)13L;\n@@ -6354,82 +2379,2 @@\n-    public static class constants$27 {\n-\n-        static final FunctionDescriptor clang_getArrayElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getArrayElementType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getArrayElementType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$27.clang_getArrayElementType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getArraySize$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getArraySize$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getArraySize\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-            constants$27.clang_getArraySize$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getNamedType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getNamedType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getNamedType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$27.clang_Type_getNamedType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_isTransparentTagTypedef$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_isTransparentTagTypedef$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_isTransparentTagTypedef\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$27.clang_Type_isTransparentTagTypedef$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getNullability$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getNullability$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getNullability\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$27.clang_Type_getNullability$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getAlignOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getAlignOf$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getAlignOf\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-            constants$27.clang_Type_getAlignOf$FUNC, false\n-        );\n+    public static int CXPrintingPolicy_Alignof() {\n+        return (int)14L;\n@@ -6437,3 +2382,2 @@\n-\n-    public static MethodHandle clang_Type_getClassType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getClassType$MH,\"clang_Type_getClassType\");\n+    public static int CXPrintingPolicy_UnderscoreAlignof() {\n+        return (int)15L;\n@@ -6441,7 +2385,2 @@\n-    public static MemorySegment clang_Type_getClassType ( SegmentAllocator allocator,  MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getClassType$MH, \"clang_Type_getClassType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_UseVoidForZeroParams() {\n+        return (int)16L;\n@@ -6449,2 +2388,2 @@\n-    public static MemorySegment clang_Type_getClassType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_Type_getClassType(SegmentAllocator.ofScope(scope), T);\n+    public static int CXPrintingPolicy_TerseOutput() {\n+        return (int)17L;\n@@ -6452,2 +2391,2 @@\n-    public static MethodHandle clang_Type_getSizeOf$MH() {\n-        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getSizeOf$MH,\"clang_Type_getSizeOf\");\n+    public static int CXPrintingPolicy_PolishForDeclaration() {\n+        return (int)18L;\n@@ -6455,7 +2394,2 @@\n-    public static long clang_Type_getSizeOf ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getSizeOf$MH, \"clang_Type_getSizeOf\");\n-        try {\n-            return (long)mh$.invokeExact(T);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXPrintingPolicy_Half() {\n+        return (int)19L;\n@@ -6463,2 +2397,2 @@\n-    public static MethodHandle clang_Type_getOffsetOf$MH() {\n-        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getOffsetOf$MH,\"clang_Type_getOffsetOf\");\n+    public static int CXPrintingPolicy_MSWChar() {\n+        return (int)20L;\n@@ -6466,2 +2400,23 @@\n-    public static long clang_Type_getOffsetOf ( MemorySegment T,  Addressable S) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getOffsetOf$MH, \"clang_Type_getOffsetOf\");\n+    public static int CXPrintingPolicy_IncludeNewlines() {\n+        return (int)21L;\n+    }\n+    public static int CXPrintingPolicy_MSVCFormatting() {\n+        return (int)22L;\n+    }\n+    public static int CXPrintingPolicy_ConstantsAsWritten() {\n+        return (int)23L;\n+    }\n+    public static int CXPrintingPolicy_SuppressImplicitBase() {\n+        return (int)24L;\n+    }\n+    public static int CXPrintingPolicy_FullyQualifiedName() {\n+        return (int)25L;\n+    }\n+    public static int CXPrintingPolicy_LastProperty() {\n+        return (int)25L;\n+    }\n+    public static MethodHandle clang_PrintingPolicy_getProperty$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_PrintingPolicy_getProperty$MH,\"clang_PrintingPolicy_getProperty\");\n+    }\n+    public static int clang_PrintingPolicy_getProperty ( Addressable Policy,  int Property) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_PrintingPolicy_getProperty$MH, \"clang_PrintingPolicy_getProperty\");\n@@ -6469,1 +2424,1 @@\n-            return (long)mh$.invokeExact(T, S.address());\n+            return (int)mh$.invokeExact(Policy.address(), Property);\n@@ -6474,2 +2429,2 @@\n-    public static MethodHandle clang_Type_getModifiedType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$28.clang_Type_getModifiedType$MH,\"clang_Type_getModifiedType\");\n+    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n+        return RuntimeHelper.requireNonNull(constants$13.clang_PrintingPolicy_setProperty$MH,\"clang_PrintingPolicy_setProperty\");\n@@ -6477,2 +2432,2 @@\n-    public static MemorySegment clang_Type_getModifiedType ( SegmentAllocator allocator,  MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Type_getModifiedType$MH, \"clang_Type_getModifiedType\");\n+    public static void clang_PrintingPolicy_setProperty ( Addressable Policy,  int Property,  int Value) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$13.clang_PrintingPolicy_setProperty$MH, \"clang_PrintingPolicy_setProperty\");\n@@ -6480,1 +2435,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            mh$.invokeExact(Policy.address(), Property, Value);\n@@ -6485,5 +2440,2 @@\n-    public static MemorySegment clang_Type_getModifiedType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_Type_getModifiedType(SegmentAllocator.ofScope(scope), T);\n-    }\n-    public static MethodHandle clang_Cursor_getOffsetOfField$MH() {\n-        return RuntimeHelper.requireNonNull(constants$28.clang_Cursor_getOffsetOfField$MH,\"clang_Cursor_getOffsetOfField\");\n+    public static MethodHandle clang_getCursorPrintingPolicy$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorPrintingPolicy$MH,\"clang_getCursorPrintingPolicy\");\n@@ -6491,2 +2443,2 @@\n-    public static long clang_Cursor_getOffsetOfField ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Cursor_getOffsetOfField$MH, \"clang_Cursor_getOffsetOfField\");\n+    public static MemoryAddress clang_getCursorPrintingPolicy ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_getCursorPrintingPolicy$MH, \"clang_getCursorPrintingPolicy\");\n@@ -6494,1 +2446,1 @@\n-            return (long)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n@@ -6499,2 +2451,2 @@\n-    public static MethodHandle clang_Cursor_isAnonymous$MH() {\n-        return RuntimeHelper.requireNonNull(constants$28.clang_Cursor_isAnonymous$MH,\"clang_Cursor_isAnonymous\");\n+    public static MethodHandle clang_PrintingPolicy_dispose$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_PrintingPolicy_dispose$MH,\"clang_PrintingPolicy_dispose\");\n@@ -6502,2 +2454,2 @@\n-    public static int clang_Cursor_isAnonymous ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$28.clang_Cursor_isAnonymous$MH, \"clang_Cursor_isAnonymous\");\n+    public static void clang_PrintingPolicy_dispose ( Addressable Policy) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_PrintingPolicy_dispose$MH, \"clang_PrintingPolicy_dispose\");\n@@ -6505,1 +2457,1 @@\n-            return (int)mh$.invokeExact(C);\n+            mh$.invokeExact(Policy.address());\n@@ -6510,87 +2462,2 @@\n-    public static class constants$28 {\n-\n-        static final FunctionDescriptor clang_Type_getClassType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getClassType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getClassType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$28.clang_Type_getClassType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getSizeOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getSizeOf$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getSizeOf\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-            constants$28.clang_Type_getSizeOf$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getOffsetOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Type_getOffsetOf$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getOffsetOf\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-            constants$28.clang_Type_getOffsetOf$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getModifiedType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getModifiedType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getModifiedType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$28.clang_Type_getModifiedType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getOffsetOfField$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getOffsetOfField$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getOffsetOfField\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n-            constants$28.clang_Cursor_getOffsetOfField$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isAnonymous$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isAnonymous\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$28.clang_Cursor_isAnonymous$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_Cursor_isAnonymousRecordDecl$MH() {\n-        return RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isAnonymousRecordDecl$MH,\"clang_Cursor_isAnonymousRecordDecl\");\n+    public static MethodHandle clang_getCursorPrettyPrinted$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorPrettyPrinted$MH,\"clang_getCursorPrettyPrinted\");\n@@ -6598,2 +2465,2 @@\n-    public static int clang_Cursor_isAnonymousRecordDecl ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isAnonymousRecordDecl$MH, \"clang_Cursor_isAnonymousRecordDecl\");\n+    public static MemorySegment clang_getCursorPrettyPrinted ( SegmentAllocator allocator,  MemorySegment Cursor,  Addressable Policy) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_getCursorPrettyPrinted$MH, \"clang_getCursorPrettyPrinted\");\n@@ -6601,1 +2468,1 @@\n-            return (int)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Cursor, Policy.address());\n@@ -6606,2 +2473,5 @@\n-    public static MethodHandle clang_Cursor_isInlineNamespace$MH() {\n-        return RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isInlineNamespace$MH,\"clang_Cursor_isInlineNamespace\");\n+    public static MemorySegment clang_getCursorPrettyPrinted ( ResourceScope scope,  MemorySegment Cursor,  Addressable Policy) {\n+        return clang_getCursorPrettyPrinted(SegmentAllocator.ofScope(scope), Cursor, Policy.address());\n+    }\n+    public static MethodHandle clang_getCursorDisplayName$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n@@ -6609,2 +2479,2 @@\n-    public static int clang_Cursor_isInlineNamespace ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isInlineNamespace$MH, \"clang_Cursor_isInlineNamespace\");\n+    public static MemorySegment clang_getCursorDisplayName ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_getCursorDisplayName$MH, \"clang_getCursorDisplayName\");\n@@ -6612,1 +2482,1 @@\n-            return (int)mh$.invokeExact(C);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6617,8 +2487,2 @@\n-    public static int CXRefQualifier_None() {\n-        return (int)0L;\n-    }\n-    public static int CXRefQualifier_LValue() {\n-        return (int)1L;\n-    }\n-    public static int CXRefQualifier_RValue() {\n-        return (int)2L;\n+    public static MemorySegment clang_getCursorDisplayName ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorDisplayName(SegmentAllocator.ofScope(scope), x1);\n@@ -6626,2 +2490,2 @@\n-    public static MethodHandle clang_Type_getNumTemplateArguments$MH() {\n-        return RuntimeHelper.requireNonNull(constants$29.clang_Type_getNumTemplateArguments$MH,\"clang_Type_getNumTemplateArguments\");\n+    public static MethodHandle clang_getCursorReferenced$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n@@ -6629,2 +2493,2 @@\n-    public static int clang_Type_getNumTemplateArguments ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Type_getNumTemplateArguments$MH, \"clang_Type_getNumTemplateArguments\");\n+    public static MemorySegment clang_getCursorReferenced ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_getCursorReferenced$MH, \"clang_getCursorReferenced\");\n@@ -6632,1 +2496,1 @@\n-            return (int)mh$.invokeExact(T);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6637,2 +2501,5 @@\n-    public static MethodHandle clang_Type_getTemplateArgumentAsType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$29.clang_Type_getTemplateArgumentAsType$MH,\"clang_Type_getTemplateArgumentAsType\");\n+    public static MemorySegment clang_getCursorReferenced ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorReferenced(SegmentAllocator.ofScope(scope), x1);\n+    }\n+    public static MethodHandle clang_getCursorDefinition$MH() {\n+        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorDefinition$MH,\"clang_getCursorDefinition\");\n@@ -6640,2 +2507,2 @@\n-    public static MemorySegment clang_Type_getTemplateArgumentAsType ( SegmentAllocator allocator,  MemorySegment T,  int i) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Type_getTemplateArgumentAsType$MH, \"clang_Type_getTemplateArgumentAsType\");\n+    public static MemorySegment clang_getCursorDefinition ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$14.clang_getCursorDefinition$MH, \"clang_getCursorDefinition\");\n@@ -6643,1 +2510,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6648,2 +2515,2 @@\n-    public static MemorySegment clang_Type_getTemplateArgumentAsType ( ResourceScope scope,  MemorySegment T,  int i) {\n-        return clang_Type_getTemplateArgumentAsType(SegmentAllocator.ofScope(scope), T, i);\n+    public static MemorySegment clang_getCursorDefinition ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorDefinition(SegmentAllocator.ofScope(scope), x1);\n@@ -6651,2 +2518,2 @@\n-    public static MethodHandle clang_Type_getCXXRefQualifier$MH() {\n-        return RuntimeHelper.requireNonNull(constants$29.clang_Type_getCXXRefQualifier$MH,\"clang_Type_getCXXRefQualifier\");\n+    public static MethodHandle clang_isCursorDefinition$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_isCursorDefinition$MH,\"clang_isCursorDefinition\");\n@@ -6654,2 +2521,2 @@\n-    public static int clang_Type_getCXXRefQualifier ( MemorySegment T) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Type_getCXXRefQualifier$MH, \"clang_Type_getCXXRefQualifier\");\n+    public static int clang_isCursorDefinition ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_isCursorDefinition$MH, \"clang_isCursorDefinition\");\n@@ -6657,1 +2524,1 @@\n-            return (int)mh$.invokeExact(T);\n+            return (int)mh$.invokeExact(x0);\n@@ -6662,2 +2529,2 @@\n-    public static MethodHandle clang_Cursor_isBitField$MH() {\n-        return RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isBitField$MH,\"clang_Cursor_isBitField\");\n+    public static MethodHandle clang_Cursor_isVariadic$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_Cursor_isVariadic$MH,\"clang_Cursor_isVariadic\");\n@@ -6665,2 +2532,2 @@\n-    public static int clang_Cursor_isBitField ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$29.clang_Cursor_isBitField$MH, \"clang_Cursor_isBitField\");\n+    public static int clang_Cursor_isVariadic ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_Cursor_isVariadic$MH, \"clang_Cursor_isVariadic\");\n@@ -6673,83 +2540,2 @@\n-    public static class constants$29 {\n-\n-        static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isAnonymousRecordDecl\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$29.clang_Cursor_isAnonymousRecordDecl$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isInlineNamespace$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isInlineNamespace$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isInlineNamespace\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$29.clang_Cursor_isInlineNamespace$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getNumTemplateArguments$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getNumTemplateArguments$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getNumTemplateArguments\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$29.clang_Type_getNumTemplateArguments$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getTemplateArgumentAsType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Type_getTemplateArgumentAsType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getTemplateArgumentAsType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$29.clang_Type_getTemplateArgumentAsType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_getCXXRefQualifier$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Type_getCXXRefQualifier$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_getCXXRefQualifier\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$29.clang_Type_getCXXRefQualifier$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isBitField$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isBitField$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isBitField\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$29.clang_Cursor_isBitField$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_isVirtualBase$MH() {\n-        return RuntimeHelper.requireNonNull(constants$30.clang_isVirtualBase$MH,\"clang_isVirtualBase\");\n+    public static MethodHandle clang_Cursor_getMangling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_Cursor_getMangling$MH,\"clang_Cursor_getMangling\");\n@@ -6757,2 +2543,2 @@\n-    public static int clang_isVirtualBase ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_isVirtualBase$MH, \"clang_isVirtualBase\");\n+    public static MemorySegment clang_Cursor_getMangling ( SegmentAllocator allocator,  MemorySegment x1) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_Cursor_getMangling$MH, \"clang_Cursor_getMangling\");\n@@ -6760,1 +2546,1 @@\n-            return (int)mh$.invokeExact(x0);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -6765,1 +2551,4 @@\n-    public static int CX_CXXInvalidAccessSpecifier() {\n+    public static MemorySegment clang_Cursor_getMangling ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_Cursor_getMangling(SegmentAllocator.ofScope(scope), x1);\n+    }\n+    public static int CXToken_Punctuation() {\n@@ -6768,24 +2557,1 @@\n-    public static int CX_CXXPublic() {\n-        return (int)1L;\n-    }\n-    public static int CX_CXXProtected() {\n-        return (int)2L;\n-    }\n-    public static int CX_CXXPrivate() {\n-        return (int)3L;\n-    }\n-    public static MethodHandle clang_getCXXAccessSpecifier$MH() {\n-        return RuntimeHelper.requireNonNull(constants$30.clang_getCXXAccessSpecifier$MH,\"clang_getCXXAccessSpecifier\");\n-    }\n-    public static int clang_getCXXAccessSpecifier ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getCXXAccessSpecifier$MH, \"clang_getCXXAccessSpecifier\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CX_SC_Invalid() {\n-        return (int)0L;\n-    }\n-    public static int CX_SC_None() {\n+    public static int CXToken_Keyword() {\n@@ -6794,1 +2560,1 @@\n-    public static int CX_SC_Extern() {\n+    public static int CXToken_Identifier() {\n@@ -6797,1 +2563,1 @@\n-    public static int CX_SC_Static() {\n+    public static int CXToken_Literal() {\n@@ -6800,1 +2566,1 @@\n-    public static int CX_SC_PrivateExtern() {\n+    public static int CXToken_Comment() {\n@@ -6803,11 +2569,2 @@\n-    public static int CX_SC_OpenCLWorkGroupLocal() {\n-        return (int)5L;\n-    }\n-    public static int CX_SC_Auto() {\n-        return (int)6L;\n-    }\n-    public static int CX_SC_Register() {\n-        return (int)7L;\n-    }\n-    public static MethodHandle clang_Cursor_getStorageClass$MH() {\n-        return RuntimeHelper.requireNonNull(constants$30.clang_Cursor_getStorageClass$MH,\"clang_Cursor_getStorageClass\");\n+    public static MethodHandle clang_getTokenKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_getTokenKind$MH,\"clang_getTokenKind\");\n@@ -6815,2 +2572,2 @@\n-    public static int clang_Cursor_getStorageClass ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_Cursor_getStorageClass$MH, \"clang_Cursor_getStorageClass\");\n+    public static int clang_getTokenKind ( MemorySegment x0) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_getTokenKind$MH, \"clang_getTokenKind\");\n@@ -6823,13 +2580,2 @@\n-    public static MethodHandle clang_getNumOverloadedDecls$MH() {\n-        return RuntimeHelper.requireNonNull(constants$30.clang_getNumOverloadedDecls$MH,\"clang_getNumOverloadedDecls\");\n-    }\n-    public static int clang_getNumOverloadedDecls ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getNumOverloadedDecls$MH, \"clang_getNumOverloadedDecls\");\n-        try {\n-            return (int)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getOverloadedDecl$MH() {\n-        return RuntimeHelper.requireNonNull(constants$30.clang_getOverloadedDecl$MH,\"clang_getOverloadedDecl\");\n+    public static MethodHandle clang_getTokenSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n@@ -6837,2 +2583,2 @@\n-    public static MemorySegment clang_getOverloadedDecl ( SegmentAllocator allocator,  MemorySegment cursor,  int index) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getOverloadedDecl$MH, \"clang_getOverloadedDecl\");\n+    public static MemorySegment clang_getTokenSpelling ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_getTokenSpelling$MH, \"clang_getTokenSpelling\");\n@@ -6840,1 +2586,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, cursor, index);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n@@ -6845,2 +2591,2 @@\n-    public static MemorySegment clang_getOverloadedDecl ( ResourceScope scope,  MemorySegment cursor,  int index) {\n-        return clang_getOverloadedDecl(SegmentAllocator.ofScope(scope), cursor, index);\n+    public static MemorySegment clang_getTokenSpelling ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenSpelling(SegmentAllocator.ofScope(scope), x1.address(), x2);\n@@ -6848,2 +2594,2 @@\n-    public static MethodHandle clang_getIBOutletCollectionType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$30.clang_getIBOutletCollectionType$MH,\"clang_getIBOutletCollectionType\");\n+    public static MethodHandle clang_getTokenLocation$MH() {\n+        return RuntimeHelper.requireNonNull(constants$15.clang_getTokenLocation$MH,\"clang_getTokenLocation\");\n@@ -6851,2 +2597,2 @@\n-    public static MemorySegment clang_getIBOutletCollectionType ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$30.clang_getIBOutletCollectionType$MH, \"clang_getIBOutletCollectionType\");\n+    public static MemorySegment clang_getTokenLocation ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$15.clang_getTokenLocation$MH, \"clang_getTokenLocation\");\n@@ -6854,1 +2600,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n@@ -6859,115 +2605,2 @@\n-    public static MemorySegment clang_getIBOutletCollectionType ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getIBOutletCollectionType(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static int CXChildVisit_Break() {\n-        return (int)0L;\n-    }\n-    public static int CXChildVisit_Continue() {\n-        return (int)1L;\n-    }\n-    public static int CXChildVisit_Recurse() {\n-        return (int)2L;\n-    }\n-    public static class constants$30 {\n-\n-        static final FunctionDescriptor clang_isVirtualBase$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isVirtualBase$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isVirtualBase\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$30.clang_isVirtualBase$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCXXAccessSpecifier$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCXXAccessSpecifier$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCXXAccessSpecifier\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$30.clang_getCXXAccessSpecifier$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getStorageClass$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getStorageClass$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getStorageClass\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$30.clang_Cursor_getStorageClass$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNumOverloadedDecls$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getNumOverloadedDecls$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNumOverloadedDecls\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$30.clang_getNumOverloadedDecls$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getOverloadedDecl$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_getOverloadedDecl$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getOverloadedDecl\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$30.clang_getOverloadedDecl$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getIBOutletCollectionType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getIBOutletCollectionType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getIBOutletCollectionType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$30.clang_getIBOutletCollectionType$FUNC, false\n-        );\n-    }\n-\n-    public interface CXCursorVisitor {\n-\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2);\n-        static MemoryAddress allocate(CXCursorVisitor fi) {\n-            return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$31.CXCursorVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n-        }\n-        static MemoryAddress allocate(CXCursorVisitor fi, ResourceScope scope) {\n-            return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$31.CXCursorVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n-        }\n-        static CXCursorVisitor ofAddress(MemoryAddress addr) {\n-            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n-                try {\n-                    return (int)constants$31.CXCursorVisitor$MH.invokeExact((Addressable)addr, x0, x1, x2);\n-                } catch (Throwable ex$) {\n-                    throw new AssertionError(\"should not reach here\", ex$);\n-                }\n-            };\n-        }\n+    public static MemorySegment clang_getTokenLocation ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenLocation(SegmentAllocator.ofScope(scope), x1.address(), x2);\n@@ -6975,3 +2608,2 @@\n-\n-    public static MethodHandle clang_visitChildren$MH() {\n-        return RuntimeHelper.requireNonNull(constants$31.clang_visitChildren$MH,\"clang_visitChildren\");\n+    public static MethodHandle clang_getTokenExtent$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getTokenExtent$MH,\"clang_getTokenExtent\");\n@@ -6979,2 +2611,2 @@\n-    public static int clang_visitChildren ( MemorySegment parent,  Addressable visitor,  Addressable client_data) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitChildren$MH, \"clang_visitChildren\");\n+    public static MemorySegment clang_getTokenExtent ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getTokenExtent$MH, \"clang_getTokenExtent\");\n@@ -6982,1 +2614,1 @@\n-            return (int)mh$.invokeExact(parent, visitor.address(), client_data.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n@@ -6987,10 +2619,2 @@\n-    public static MethodHandle clang_visitTemplateSpecializations$MH() {\n-        return RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializations$MH,\"clang_visitTemplateSpecializations\");\n-    }\n-    public static int clang_visitTemplateSpecializations ( MemorySegment parent,  Addressable visitor,  Addressable client_data) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializations$MH, \"clang_visitTemplateSpecializations\");\n-        try {\n-            return (int)mh$.invokeExact(parent, visitor.address(), client_data.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static MemorySegment clang_getTokenExtent ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenExtent(SegmentAllocator.ofScope(scope), x1.address(), x2);\n@@ -6998,2 +2622,2 @@\n-    public static MethodHandle clang_visitTemplateSpecializationChildren$MH() {\n-        return RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializationChildren$MH,\"clang_visitTemplateSpecializationChildren\");\n+    public static MethodHandle clang_tokenize$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_tokenize$MH,\"clang_tokenize\");\n@@ -7001,2 +2625,2 @@\n-    public static int clang_visitTemplateSpecializationChildren ( MemorySegment classTemplate,  Addressable visitor,  Addressable client_data) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$31.clang_visitTemplateSpecializationChildren$MH, \"clang_visitTemplateSpecializationChildren\");\n+    public static void clang_tokenize ( Addressable TU,  MemorySegment Range,  Addressable Tokens,  Addressable NumTokens) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_tokenize$MH, \"clang_tokenize\");\n@@ -7004,1 +2628,1 @@\n-            return (int)mh$.invokeExact(classTemplate, visitor.address(), client_data.address());\n+            mh$.invokeExact(TU.address(), Range, Tokens.address(), NumTokens.address());\n@@ -7009,97 +2633,2 @@\n-    public static class constants$31 {\n-\n-        static final FunctionDescriptor CXCursorVisitor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER\n-        );\n-        static final MethodHandle CXCursorVisitor$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$31.CXCursorVisitor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_visitChildren$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_visitChildren$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_visitChildren\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$31.clang_visitChildren$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_visitTemplateSpecializations$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_visitTemplateSpecializations$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_visitTemplateSpecializations\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$31.clang_visitTemplateSpecializations$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_visitTemplateSpecializationChildren$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_visitTemplateSpecializationChildren$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_visitTemplateSpecializationChildren\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$31.clang_visitTemplateSpecializationChildren$FUNC, false\n-        );\n-        static final FunctionDescriptor CXCursorVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-    }\n-\n-    public interface CXCursorVisitorBlock {\n-\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n-        static MemoryAddress allocate(CXCursorVisitorBlock fi) {\n-            return RuntimeHelper.upcallStub(CXCursorVisitorBlock.class, fi, constants$31.CXCursorVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n-        }\n-        static MemoryAddress allocate(CXCursorVisitorBlock fi, ResourceScope scope) {\n-            return RuntimeHelper.upcallStub(CXCursorVisitorBlock.class, fi, constants$31.CXCursorVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n-        }\n-        static CXCursorVisitorBlock ofAddress(MemoryAddress addr) {\n-            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1) -> {\n-                try {\n-                    return (int)constants$32.CXCursorVisitorBlock$MH.invokeExact((Addressable)addr, x0, x1);\n-                } catch (Throwable ex$) {\n-                    throw new AssertionError(\"should not reach here\", ex$);\n-                }\n-            };\n-        }\n-    }\n-\n-    public static MethodHandle clang_visitChildrenWithBlock$MH() {\n-        return RuntimeHelper.requireNonNull(constants$32.clang_visitChildrenWithBlock$MH,\"clang_visitChildrenWithBlock\");\n+    public static MethodHandle clang_disposeTokens$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_disposeTokens$MH,\"clang_disposeTokens\");\n@@ -7107,2 +2636,2 @@\n-    public static int clang_visitChildrenWithBlock ( MemorySegment parent,  Addressable block) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_visitChildrenWithBlock$MH, \"clang_visitChildrenWithBlock\");\n+    public static void clang_disposeTokens ( Addressable TU,  Addressable Tokens,  int NumTokens) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_disposeTokens$MH, \"clang_disposeTokens\");\n@@ -7110,1 +2639,1 @@\n-            return (int)mh$.invokeExact(parent, block.address());\n+            mh$.invokeExact(TU.address(), Tokens.address(), NumTokens);\n@@ -7115,2 +2644,2 @@\n-    public static MethodHandle clang_getCursorUSR$MH() {\n-        return RuntimeHelper.requireNonNull(constants$32.clang_getCursorUSR$MH,\"clang_getCursorUSR\");\n+    public static MethodHandle clang_getCursorKindSpelling$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n@@ -7118,2 +2647,2 @@\n-    public static MemorySegment clang_getCursorUSR ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_getCursorUSR$MH, \"clang_getCursorUSR\");\n+    public static MemorySegment clang_getCursorKindSpelling ( SegmentAllocator allocator,  int Kind) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getCursorKindSpelling$MH, \"clang_getCursorKindSpelling\");\n@@ -7121,1 +2650,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Kind);\n@@ -7126,2 +2655,2 @@\n-    public static MemorySegment clang_getCursorUSR ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorUSR(SegmentAllocator.ofScope(scope), x1);\n+    public static MemorySegment clang_getCursorKindSpelling ( ResourceScope scope,  int Kind) {\n+        return clang_getCursorKindSpelling(SegmentAllocator.ofScope(scope), Kind);\n@@ -7129,2 +2658,2 @@\n-    public static MethodHandle clang_constructUSR_ObjCClass$MH() {\n-        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCClass$MH,\"clang_constructUSR_ObjCClass\");\n+    public static MethodHandle clang_getClangVersion$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getClangVersion$MH,\"clang_getClangVersion\");\n@@ -7132,2 +2661,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCClass ( SegmentAllocator allocator,  Addressable class_name) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCClass$MH, \"clang_constructUSR_ObjCClass\");\n+    public static MemorySegment clang_getClangVersion ( SegmentAllocator allocator) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_getClangVersion$MH, \"clang_getClangVersion\");\n@@ -7135,1 +2664,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, class_name.address());\n+            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -7140,2 +2669,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCClass ( ResourceScope scope,  Addressable class_name) {\n-        return clang_constructUSR_ObjCClass(SegmentAllocator.ofScope(scope), class_name.address());\n+    public static MemorySegment clang_getClangVersion ( ResourceScope scope) {\n+        return clang_getClangVersion(SegmentAllocator.ofScope(scope));\n@@ -7143,2 +2672,2 @@\n-    public static MethodHandle clang_constructUSR_ObjCCategory$MH() {\n-        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCCategory$MH,\"clang_constructUSR_ObjCCategory\");\n+    public static MethodHandle clang_toggleCrashRecovery$MH() {\n+        return RuntimeHelper.requireNonNull(constants$16.clang_toggleCrashRecovery$MH,\"clang_toggleCrashRecovery\");\n@@ -7146,2 +2675,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCCategory ( SegmentAllocator allocator,  Addressable class_name,  Addressable category_name) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCCategory$MH, \"clang_constructUSR_ObjCCategory\");\n+    public static void clang_toggleCrashRecovery ( int isEnabled) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$16.clang_toggleCrashRecovery$MH, \"clang_toggleCrashRecovery\");\n@@ -7149,1 +2678,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, class_name.address(), category_name.address());\n+            mh$.invokeExact(isEnabled);\n@@ -7154,5 +2683,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCCategory ( ResourceScope scope,  Addressable class_name,  Addressable category_name) {\n-        return clang_constructUSR_ObjCCategory(SegmentAllocator.ofScope(scope), class_name.address(), category_name.address());\n-    }\n-    public static MethodHandle clang_constructUSR_ObjCProtocol$MH() {\n-        return RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCProtocol$MH,\"clang_constructUSR_ObjCProtocol\");\n+    public static MethodHandle clang_Cursor_Evaluate$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_Cursor_Evaluate$MH,\"clang_Cursor_Evaluate\");\n@@ -7160,2 +2686,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCProtocol ( SegmentAllocator allocator,  Addressable protocol_name) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$32.clang_constructUSR_ObjCProtocol$MH, \"clang_constructUSR_ObjCProtocol\");\n+    public static MemoryAddress clang_Cursor_Evaluate ( MemorySegment C) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_Cursor_Evaluate$MH, \"clang_Cursor_Evaluate\");\n@@ -7163,1 +2689,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, protocol_name.address());\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n@@ -7168,91 +2694,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCProtocol ( ResourceScope scope,  Addressable protocol_name) {\n-        return clang_constructUSR_ObjCProtocol(SegmentAllocator.ofScope(scope), protocol_name.address());\n-    }\n-    public static class constants$32 {\n-\n-        static final FunctionDescriptor CXCursorVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle CXCursorVisitorBlock$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$32.CXCursorVisitorBlock$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_visitChildrenWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_visitChildrenWithBlock$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_visitChildrenWithBlock\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$32.clang_visitChildrenWithBlock$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorUSR$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorUSR$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorUSR\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$32.clang_getCursorUSR$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_constructUSR_ObjCClass$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCClass$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCClass\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$32.clang_constructUSR_ObjCClass$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_constructUSR_ObjCCategory$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCCategory$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCCategory\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$32.clang_constructUSR_ObjCCategory$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_constructUSR_ObjCProtocol$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCProtocol$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCProtocol\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$32.clang_constructUSR_ObjCProtocol$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_constructUSR_ObjCIvar$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCIvar$MH,\"clang_constructUSR_ObjCIvar\");\n+    public static MethodHandle clang_EvalResult_getKind$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getKind$MH,\"clang_EvalResult_getKind\");\n@@ -7260,2 +2697,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCIvar ( SegmentAllocator allocator,  Addressable name,  MemorySegment classUSR) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCIvar$MH, \"clang_constructUSR_ObjCIvar\");\n+    public static int clang_EvalResult_getKind ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getKind$MH, \"clang_EvalResult_getKind\");\n@@ -7263,1 +2700,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, name.address(), classUSR);\n+            return (int)mh$.invokeExact(E.address());\n@@ -7268,5 +2705,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCIvar ( ResourceScope scope,  Addressable name,  MemorySegment classUSR) {\n-        return clang_constructUSR_ObjCIvar(SegmentAllocator.ofScope(scope), name.address(), classUSR);\n-    }\n-    public static MethodHandle clang_constructUSR_ObjCMethod$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCMethod$MH,\"clang_constructUSR_ObjCMethod\");\n+    public static MethodHandle clang_EvalResult_getAsInt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsInt$MH,\"clang_EvalResult_getAsInt\");\n@@ -7274,2 +2708,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCMethod ( SegmentAllocator allocator,  Addressable name,  int isInstanceMethod,  MemorySegment classUSR) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCMethod$MH, \"clang_constructUSR_ObjCMethod\");\n+    public static int clang_EvalResult_getAsInt ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsInt$MH, \"clang_EvalResult_getAsInt\");\n@@ -7277,1 +2711,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, name.address(), isInstanceMethod, classUSR);\n+            return (int)mh$.invokeExact(E.address());\n@@ -7282,5 +2716,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCMethod ( ResourceScope scope,  Addressable name,  int isInstanceMethod,  MemorySegment classUSR) {\n-        return clang_constructUSR_ObjCMethod(SegmentAllocator.ofScope(scope), name.address(), isInstanceMethod, classUSR);\n-    }\n-    public static MethodHandle clang_constructUSR_ObjCProperty$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCProperty$MH,\"clang_constructUSR_ObjCProperty\");\n+    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n@@ -7288,2 +2719,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCProperty ( SegmentAllocator allocator,  Addressable property,  MemorySegment classUSR) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_constructUSR_ObjCProperty$MH, \"clang_constructUSR_ObjCProperty\");\n+    public static long clang_EvalResult_getAsLongLong ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsLongLong$MH, \"clang_EvalResult_getAsLongLong\");\n@@ -7291,1 +2722,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, property.address(), classUSR);\n+            return (long)mh$.invokeExact(E.address());\n@@ -7296,5 +2727,2 @@\n-    public static MemorySegment clang_constructUSR_ObjCProperty ( ResourceScope scope,  Addressable property,  MemorySegment classUSR) {\n-        return clang_constructUSR_ObjCProperty(SegmentAllocator.ofScope(scope), property.address(), classUSR);\n-    }\n-    public static MethodHandle clang_getCursorSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_getCursorSpelling$MH,\"clang_getCursorSpelling\");\n+    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n@@ -7302,2 +2730,2 @@\n-    public static MemorySegment clang_getCursorSpelling ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_getCursorSpelling$MH, \"clang_getCursorSpelling\");\n+    public static int clang_EvalResult_isUnsignedInt ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_isUnsignedInt$MH, \"clang_EvalResult_isUnsignedInt\");\n@@ -7305,1 +2733,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (int)mh$.invokeExact(E.address());\n@@ -7310,5 +2738,2 @@\n-    public static MemorySegment clang_getCursorSpelling ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorSpelling(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static MethodHandle clang_Cursor_getSpellingNameRange$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_Cursor_getSpellingNameRange$MH,\"clang_Cursor_getSpellingNameRange\");\n+    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n+        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsUnsigned$MH,\"clang_EvalResult_getAsUnsigned\");\n@@ -7316,2 +2741,2 @@\n-    public static MemorySegment clang_Cursor_getSpellingNameRange ( SegmentAllocator allocator,  MemorySegment x1,  int pieceIndex,  int options) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_Cursor_getSpellingNameRange$MH, \"clang_Cursor_getSpellingNameRange\");\n+    public static long clang_EvalResult_getAsUnsigned ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsUnsigned$MH, \"clang_EvalResult_getAsUnsigned\");\n@@ -7319,1 +2744,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, pieceIndex, options);\n+            return (long)mh$.invokeExact(E.address());\n@@ -7324,86 +2749,2 @@\n-    public static MemorySegment clang_Cursor_getSpellingNameRange ( ResourceScope scope,  MemorySegment x1,  int pieceIndex,  int options) {\n-        return clang_Cursor_getSpellingNameRange(SegmentAllocator.ofScope(scope), x1, pieceIndex, options);\n-    }\n-    public static int CXPrintingPolicy_Indentation() {\n-        return (int)0L;\n-    }\n-    public static int CXPrintingPolicy_SuppressSpecifiers() {\n-        return (int)1L;\n-    }\n-    public static int CXPrintingPolicy_SuppressTagKeyword() {\n-        return (int)2L;\n-    }\n-    public static int CXPrintingPolicy_IncludeTagDefinition() {\n-        return (int)3L;\n-    }\n-    public static int CXPrintingPolicy_SuppressScope() {\n-        return (int)4L;\n-    }\n-    public static int CXPrintingPolicy_SuppressUnwrittenScope() {\n-        return (int)5L;\n-    }\n-    public static int CXPrintingPolicy_SuppressInitializers() {\n-        return (int)6L;\n-    }\n-    public static int CXPrintingPolicy_ConstantArraySizeAsWritten() {\n-        return (int)7L;\n-    }\n-    public static int CXPrintingPolicy_AnonymousTagLocations() {\n-        return (int)8L;\n-    }\n-    public static int CXPrintingPolicy_SuppressStrongLifetime() {\n-        return (int)9L;\n-    }\n-    public static int CXPrintingPolicy_SuppressLifetimeQualifiers() {\n-        return (int)10L;\n-    }\n-    public static int CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors() {\n-        return (int)11L;\n-    }\n-    public static int CXPrintingPolicy_Bool() {\n-        return (int)12L;\n-    }\n-    public static int CXPrintingPolicy_Restrict() {\n-        return (int)13L;\n-    }\n-    public static int CXPrintingPolicy_Alignof() {\n-        return (int)14L;\n-    }\n-    public static int CXPrintingPolicy_UnderscoreAlignof() {\n-        return (int)15L;\n-    }\n-    public static int CXPrintingPolicy_UseVoidForZeroParams() {\n-        return (int)16L;\n-    }\n-    public static int CXPrintingPolicy_TerseOutput() {\n-        return (int)17L;\n-    }\n-    public static int CXPrintingPolicy_PolishForDeclaration() {\n-        return (int)18L;\n-    }\n-    public static int CXPrintingPolicy_Half() {\n-        return (int)19L;\n-    }\n-    public static int CXPrintingPolicy_MSWChar() {\n-        return (int)20L;\n-    }\n-    public static int CXPrintingPolicy_IncludeNewlines() {\n-        return (int)21L;\n-    }\n-    public static int CXPrintingPolicy_MSVCFormatting() {\n-        return (int)22L;\n-    }\n-    public static int CXPrintingPolicy_ConstantsAsWritten() {\n-        return (int)23L;\n-    }\n-    public static int CXPrintingPolicy_SuppressImplicitBase() {\n-        return (int)24L;\n-    }\n-    public static int CXPrintingPolicy_FullyQualifiedName() {\n-        return (int)25L;\n-    }\n-    public static int CXPrintingPolicy_LastProperty() {\n-        return (int)25L;\n-    }\n-    public static MethodHandle clang_PrintingPolicy_getProperty$MH() {\n-        return RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_getProperty$MH,\"clang_PrintingPolicy_getProperty\");\n+    public static MethodHandle clang_EvalResult_getAsDouble$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsDouble$MH,\"clang_EvalResult_getAsDouble\");\n@@ -7411,2 +2752,2 @@\n-    public static int clang_PrintingPolicy_getProperty ( Addressable Policy,  int Property) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$33.clang_PrintingPolicy_getProperty$MH, \"clang_PrintingPolicy_getProperty\");\n+    public static double clang_EvalResult_getAsDouble ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsDouble$MH, \"clang_EvalResult_getAsDouble\");\n@@ -7414,1 +2755,1 @@\n-            return (int)mh$.invokeExact(Policy.address(), Property);\n+            return (double)mh$.invokeExact(E.address());\n@@ -7419,101 +2760,2 @@\n-    public static class constants$33 {\n-\n-        static final FunctionDescriptor clang_constructUSR_ObjCIvar$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCIvar$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCIvar\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$33.clang_constructUSR_ObjCIvar$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_constructUSR_ObjCMethod$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCMethod$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCMethod\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$33.clang_constructUSR_ObjCMethod$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_constructUSR_ObjCProperty$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"data\"),\n-                C_INT.withName(\"private_flags\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_constructUSR_ObjCProperty$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_constructUSR_ObjCProperty\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$33.clang_constructUSR_ObjCProperty$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorSpelling\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$33.clang_getCursorSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getSpellingNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_Cursor_getSpellingNameRange$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getSpellingNameRange\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$33.clang_Cursor_getSpellingNameRange$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_PrintingPolicy_getProperty$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_PrintingPolicy_getProperty\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$33.clang_PrintingPolicy_getProperty$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_PrintingPolicy_setProperty$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_setProperty$MH,\"clang_PrintingPolicy_setProperty\");\n+    public static MethodHandle clang_EvalResult_getAsStr$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsStr$MH,\"clang_EvalResult_getAsStr\");\n@@ -7521,2 +2763,2 @@\n-    public static void clang_PrintingPolicy_setProperty ( Addressable Policy,  int Property,  int Value) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_setProperty$MH, \"clang_PrintingPolicy_setProperty\");\n+    public static MemoryAddress clang_EvalResult_getAsStr ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsStr$MH, \"clang_EvalResult_getAsStr\");\n@@ -7524,1 +2766,1 @@\n-            mh$.invokeExact(Policy.address(), Property, Value);\n+            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(E.address());\n@@ -7529,2 +2771,2 @@\n-    public static MethodHandle clang_getCursorPrintingPolicy$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrintingPolicy$MH,\"clang_getCursorPrintingPolicy\");\n+    public static MethodHandle clang_EvalResult_dispose$MH() {\n+        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_dispose$MH,\"clang_EvalResult_dispose\");\n@@ -7532,2 +2774,2 @@\n-    public static MemoryAddress clang_getCursorPrintingPolicy ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrintingPolicy$MH, \"clang_getCursorPrintingPolicy\");\n+    public static void clang_EvalResult_dispose ( Addressable E) {\n+        var mh$ = RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_dispose$MH, \"clang_EvalResult_dispose\");\n@@ -7535,1 +2777,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+            mh$.invokeExact(E.address());\n@@ -7540,2 +2782,2 @@\n-    public static MethodHandle clang_PrintingPolicy_dispose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_dispose$MH,\"clang_PrintingPolicy_dispose\");\n+    public static int CXResult_Success() {\n+        return (int)0L;\n@@ -7543,7 +2785,2 @@\n-    public static void clang_PrintingPolicy_dispose ( Addressable Policy) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_PrintingPolicy_dispose$MH, \"clang_PrintingPolicy_dispose\");\n-        try {\n-            mh$.invokeExact(Policy.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n+    public static int CXResult_Invalid() {\n+        return (int)1L;\n@@ -7551,402 +2788,1 @@\n-    public static MethodHandle clang_getCursorPrettyPrinted$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrettyPrinted$MH,\"clang_getCursorPrettyPrinted\");\n-    }\n-    public static MemorySegment clang_getCursorPrettyPrinted ( SegmentAllocator allocator,  MemorySegment Cursor,  Addressable Policy) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getCursorPrettyPrinted$MH, \"clang_getCursorPrettyPrinted\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Cursor, Policy.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorPrettyPrinted ( ResourceScope scope,  MemorySegment Cursor,  Addressable Policy) {\n-        return clang_getCursorPrettyPrinted(SegmentAllocator.ofScope(scope), Cursor, Policy.address());\n-    }\n-    public static MethodHandle clang_getTypePrintingPolicy$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_getTypePrintingPolicy$MH,\"clang_getTypePrintingPolicy\");\n-    }\n-    public static MemoryAddress clang_getTypePrintingPolicy ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getTypePrintingPolicy$MH, \"clang_getTypePrintingPolicy\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTypePrettyPrinted$MH() {\n-        return RuntimeHelper.requireNonNull(constants$34.clang_getTypePrettyPrinted$MH,\"clang_getTypePrettyPrinted\");\n-    }\n-    public static MemorySegment clang_getTypePrettyPrinted ( SegmentAllocator allocator,  MemorySegment CT,  Addressable Policy) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$34.clang_getTypePrettyPrinted$MH, \"clang_getTypePrettyPrinted\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT, Policy.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getTypePrettyPrinted ( ResourceScope scope,  MemorySegment CT,  Addressable Policy) {\n-        return clang_getTypePrettyPrinted(SegmentAllocator.ofScope(scope), CT, Policy.address());\n-    }\n-    public static class constants$34 {\n-\n-        static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_PrintingPolicy_setProperty$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_PrintingPolicy_setProperty\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;II)V\",\n-            constants$34.clang_PrintingPolicy_setProperty$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorPrintingPolicy$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorPrintingPolicy\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$34.clang_getCursorPrintingPolicy$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_PrintingPolicy_dispose$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_PrintingPolicy_dispose$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_PrintingPolicy_dispose\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$34.clang_PrintingPolicy_dispose$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCursorPrettyPrinted$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorPrettyPrinted\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$34.clang_getCursorPrettyPrinted$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTypePrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTypePrintingPolicy$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTypePrintingPolicy\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$34.clang_getTypePrintingPolicy$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTypePrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getTypePrettyPrinted$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTypePrettyPrinted\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$34.clang_getTypePrettyPrinted$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCursorDisplayName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n-    }\n-    public static MemorySegment clang_getCursorDisplayName ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCursorDisplayName$MH, \"clang_getCursorDisplayName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorDisplayName ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorDisplayName(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static MethodHandle clang_getCursorReferenced$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n-    }\n-    public static MemorySegment clang_getCursorReferenced ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCursorReferenced$MH, \"clang_getCursorReferenced\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorReferenced ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorReferenced(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static MethodHandle clang_getCursorDefinition$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_getCursorDefinition$MH,\"clang_getCursorDefinition\");\n-    }\n-    public static MemorySegment clang_getCursorDefinition ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCursorDefinition$MH, \"clang_getCursorDefinition\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorDefinition ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorDefinition(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static MethodHandle clang_isCursorDefinition$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_isCursorDefinition$MH,\"clang_isCursorDefinition\");\n-    }\n-    public static int clang_isCursorDefinition ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_isCursorDefinition$MH, \"clang_isCursorDefinition\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCanonicalCursor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_getCanonicalCursor$MH,\"clang_getCanonicalCursor\");\n-    }\n-    public static MemorySegment clang_getCanonicalCursor ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_getCanonicalCursor$MH, \"clang_getCanonicalCursor\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCanonicalCursor ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCanonicalCursor(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static MethodHandle clang_Cursor_getObjCSelectorIndex$MH() {\n-        return RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getObjCSelectorIndex$MH,\"clang_Cursor_getObjCSelectorIndex\");\n-    }\n-    public static int clang_Cursor_getObjCSelectorIndex ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$35.clang_Cursor_getObjCSelectorIndex$MH, \"clang_Cursor_getObjCSelectorIndex\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$35 {\n-\n-        static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorDisplayName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorDisplayName\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$35.clang_getCursorDisplayName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorReferenced$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorReferenced\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$35.clang_getCursorReferenced$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorDefinition$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorDefinition$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorDefinition\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$35.clang_getCursorDefinition$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_isCursorDefinition$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_isCursorDefinition$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_isCursorDefinition\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$35.clang_isCursorDefinition$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCanonicalCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCanonicalCursor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCanonicalCursor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$35.clang_getCanonicalCursor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getObjCSelectorIndex$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getObjCSelectorIndex$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getObjCSelectorIndex\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$35.clang_Cursor_getObjCSelectorIndex$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_Cursor_isDynamicCall$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isDynamicCall$MH,\"clang_Cursor_isDynamicCall\");\n-    }\n-    public static int clang_Cursor_isDynamicCall ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_isDynamicCall$MH, \"clang_Cursor_isDynamicCall\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getReceiverType$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getReceiverType$MH,\"clang_Cursor_getReceiverType\");\n-    }\n-    public static MemorySegment clang_Cursor_getReceiverType ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getReceiverType$MH, \"clang_Cursor_getReceiverType\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getReceiverType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_Cursor_getReceiverType(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static int CXObjCPropertyAttr_noattr() {\n-        return (int)0L;\n-    }\n-    public static int CXObjCPropertyAttr_readonly() {\n-        return (int)1L;\n-    }\n-    public static int CXObjCPropertyAttr_getter() {\n-        return (int)2L;\n-    }\n-    public static int CXObjCPropertyAttr_assign() {\n-        return (int)4L;\n-    }\n-    public static int CXObjCPropertyAttr_readwrite() {\n-        return (int)8L;\n-    }\n-    public static int CXObjCPropertyAttr_retain() {\n-        return (int)16L;\n-    }\n-    public static int CXObjCPropertyAttr_copy() {\n-        return (int)32L;\n-    }\n-    public static int CXObjCPropertyAttr_nonatomic() {\n-        return (int)64L;\n-    }\n-    public static int CXObjCPropertyAttr_setter() {\n-        return (int)128L;\n-    }\n-    public static int CXObjCPropertyAttr_atomic() {\n-        return (int)256L;\n-    }\n-    public static int CXObjCPropertyAttr_weak() {\n-        return (int)512L;\n-    }\n-    public static int CXObjCPropertyAttr_strong() {\n-        return (int)1024L;\n-    }\n-    public static int CXObjCPropertyAttr_unsafe_unretained() {\n-        return (int)2048L;\n-    }\n-    public static int CXObjCPropertyAttr_class() {\n-        return (int)4096L;\n-    }\n-    public static MethodHandle clang_Cursor_getObjCPropertyAttributes$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH,\"clang_Cursor_getObjCPropertyAttributes\");\n-    }\n-    public static int clang_Cursor_getObjCPropertyAttributes ( MemorySegment C,  int reserved) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyAttributes$MH, \"clang_Cursor_getObjCPropertyAttributes\");\n-        try {\n-            return (int)mh$.invokeExact(C, reserved);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getObjCPropertyGetterName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH,\"clang_Cursor_getObjCPropertyGetterName\");\n-    }\n-    public static MemorySegment clang_Cursor_getObjCPropertyGetterName ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertyGetterName$MH, \"clang_Cursor_getObjCPropertyGetterName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getObjCPropertyGetterName ( ResourceScope scope,  MemorySegment C) {\n-        return clang_Cursor_getObjCPropertyGetterName(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static MethodHandle clang_Cursor_getObjCPropertySetterName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH,\"clang_Cursor_getObjCPropertySetterName\");\n-    }\n-    public static MemorySegment clang_Cursor_getObjCPropertySetterName ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCPropertySetterName$MH, \"clang_Cursor_getObjCPropertySetterName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getObjCPropertySetterName ( ResourceScope scope,  MemorySegment C) {\n-        return clang_Cursor_getObjCPropertySetterName(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static int CXObjCDeclQualifier_None() {\n-        return (int)0L;\n-    }\n-    public static int CXObjCDeclQualifier_In() {\n-        return (int)1L;\n-    }\n-    public static int CXObjCDeclQualifier_Inout() {\n+    public static int CXResult_VisitBreak() {\n@@ -7955,4709 +2791,0 @@\n-    public static int CXObjCDeclQualifier_Out() {\n-        return (int)4L;\n-    }\n-    public static int CXObjCDeclQualifier_Bycopy() {\n-        return (int)8L;\n-    }\n-    public static int CXObjCDeclQualifier_Byref() {\n-        return (int)16L;\n-    }\n-    public static int CXObjCDeclQualifier_Oneway() {\n-        return (int)32L;\n-    }\n-    public static MethodHandle clang_Cursor_getObjCDeclQualifiers$MH() {\n-        return RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH,\"clang_Cursor_getObjCDeclQualifiers\");\n-    }\n-    public static int clang_Cursor_getObjCDeclQualifiers ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$36.clang_Cursor_getObjCDeclQualifiers$MH, \"clang_Cursor_getObjCDeclQualifiers\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$36 {\n-\n-        static final FunctionDescriptor clang_Cursor_isDynamicCall$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isDynamicCall$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isDynamicCall\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$36.clang_Cursor_isDynamicCall$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getReceiverType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getReceiverType$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getReceiverType\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$36.clang_Cursor_getReceiverType$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getObjCPropertyAttributes$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_Cursor_getObjCPropertyAttributes$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getObjCPropertyAttributes\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;I)I\",\n-            constants$36.clang_Cursor_getObjCPropertyAttributes$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getObjCPropertyGetterName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getObjCPropertyGetterName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getObjCPropertyGetterName\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$36.clang_Cursor_getObjCPropertyGetterName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getObjCPropertySetterName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getObjCPropertySetterName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getObjCPropertySetterName\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$36.clang_Cursor_getObjCPropertySetterName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getObjCDeclQualifiers$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getObjCDeclQualifiers$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getObjCDeclQualifiers\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$36.clang_Cursor_getObjCDeclQualifiers$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_Cursor_isObjCOptional$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isObjCOptional$MH,\"clang_Cursor_isObjCOptional\");\n-    }\n-    public static int clang_Cursor_isObjCOptional ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isObjCOptional$MH, \"clang_Cursor_isObjCOptional\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_isVariadic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isVariadic$MH,\"clang_Cursor_isVariadic\");\n-    }\n-    public static int clang_Cursor_isVariadic ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isVariadic$MH, \"clang_Cursor_isVariadic\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_isExternalSymbol$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isExternalSymbol$MH,\"clang_Cursor_isExternalSymbol\");\n-    }\n-    public static int clang_Cursor_isExternalSymbol ( MemorySegment C,  Addressable language,  Addressable definedIn,  Addressable isGenerated) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_isExternalSymbol$MH, \"clang_Cursor_isExternalSymbol\");\n-        try {\n-            return (int)mh$.invokeExact(C, language.address(), definedIn.address(), isGenerated.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getCommentRange$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCommentRange$MH,\"clang_Cursor_getCommentRange\");\n-    }\n-    public static MemorySegment clang_Cursor_getCommentRange ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getCommentRange$MH, \"clang_Cursor_getCommentRange\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getCommentRange ( ResourceScope scope,  MemorySegment C) {\n-        return clang_Cursor_getCommentRange(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static MethodHandle clang_Cursor_getRawCommentText$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getRawCommentText$MH,\"clang_Cursor_getRawCommentText\");\n-    }\n-    public static MemorySegment clang_Cursor_getRawCommentText ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getRawCommentText$MH, \"clang_Cursor_getRawCommentText\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getRawCommentText ( ResourceScope scope,  MemorySegment C) {\n-        return clang_Cursor_getRawCommentText(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static MethodHandle clang_Cursor_getBriefCommentText$MH() {\n-        return RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getBriefCommentText$MH,\"clang_Cursor_getBriefCommentText\");\n-    }\n-    public static MemorySegment clang_Cursor_getBriefCommentText ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$37.clang_Cursor_getBriefCommentText$MH, \"clang_Cursor_getBriefCommentText\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getBriefCommentText ( ResourceScope scope,  MemorySegment C) {\n-        return clang_Cursor_getBriefCommentText(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static class constants$37 {\n-\n-        static final FunctionDescriptor clang_Cursor_isObjCOptional$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isObjCOptional$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isObjCOptional\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$37.clang_Cursor_isObjCOptional$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isVariadic$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_isVariadic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isVariadic\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$37.clang_Cursor_isVariadic$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_isExternalSymbol$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Cursor_isExternalSymbol$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_isExternalSymbol\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$37.clang_Cursor_isExternalSymbol$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getCommentRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getCommentRange$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getCommentRange\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$37.clang_Cursor_getCommentRange$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getRawCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getRawCommentText$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getRawCommentText\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$37.clang_Cursor_getRawCommentText$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getBriefCommentText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getBriefCommentText$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getBriefCommentText\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$37.clang_Cursor_getBriefCommentText$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_Cursor_getMangling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getMangling$MH,\"clang_Cursor_getMangling\");\n-    }\n-    public static MemorySegment clang_Cursor_getMangling ( SegmentAllocator allocator,  MemorySegment x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getMangling$MH, \"clang_Cursor_getMangling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Cursor_getMangling ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_Cursor_getMangling(SegmentAllocator.ofScope(scope), x1);\n-    }\n-    public static MethodHandle clang_Cursor_getCXXManglings$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getCXXManglings$MH,\"clang_Cursor_getCXXManglings\");\n-    }\n-    public static MemoryAddress clang_Cursor_getCXXManglings ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getCXXManglings$MH, \"clang_Cursor_getCXXManglings\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getObjCManglings$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getObjCManglings$MH,\"clang_Cursor_getObjCManglings\");\n-    }\n-    public static MemoryAddress clang_Cursor_getObjCManglings ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getObjCManglings$MH, \"clang_Cursor_getObjCManglings\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Cursor_getModule$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getModule$MH,\"clang_Cursor_getModule\");\n-    }\n-    public static MemoryAddress clang_Cursor_getModule ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Cursor_getModule$MH, \"clang_Cursor_getModule\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getModuleForFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_getModuleForFile$MH,\"clang_getModuleForFile\");\n-    }\n-    public static MemoryAddress clang_getModuleForFile ( Addressable x0,  Addressable x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_getModuleForFile$MH, \"clang_getModuleForFile\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Module_getASTFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$38.clang_Module_getASTFile$MH,\"clang_Module_getASTFile\");\n-    }\n-    public static MemoryAddress clang_Module_getASTFile ( Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$38.clang_Module_getASTFile$MH, \"clang_Module_getASTFile\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$38 {\n-\n-        static final FunctionDescriptor clang_Cursor_getMangling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getMangling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getMangling\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$38.clang_Cursor_getMangling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getCXXManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getCXXManglings$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getCXXManglings\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$38.clang_Cursor_getCXXManglings$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getObjCManglings$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getObjCManglings$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getObjCManglings\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$38.clang_Cursor_getObjCManglings$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_getModule$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_getModule$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_getModule\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$38.clang_Cursor_getModule$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getModuleForFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getModuleForFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getModuleForFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$38.clang_getModuleForFile$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Module_getASTFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_getASTFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getASTFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$38.clang_Module_getASTFile$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_Module_getParent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getParent$MH,\"clang_Module_getParent\");\n-    }\n-    public static MemoryAddress clang_Module_getParent ( Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getParent$MH, \"clang_Module_getParent\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Module_getName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getName$MH,\"clang_Module_getName\");\n-    }\n-    public static MemorySegment clang_Module_getName ( SegmentAllocator allocator,  Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getName$MH, \"clang_Module_getName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Module_getName ( ResourceScope scope,  Addressable Module) {\n-        return clang_Module_getName(SegmentAllocator.ofScope(scope), Module.address());\n-    }\n-    public static MethodHandle clang_Module_getFullName$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getFullName$MH,\"clang_Module_getFullName\");\n-    }\n-    public static MemorySegment clang_Module_getFullName ( SegmentAllocator allocator,  Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getFullName$MH, \"clang_Module_getFullName\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_Module_getFullName ( ResourceScope scope,  Addressable Module) {\n-        return clang_Module_getFullName(SegmentAllocator.ofScope(scope), Module.address());\n-    }\n-    public static MethodHandle clang_Module_isSystem$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_Module_isSystem$MH,\"clang_Module_isSystem\");\n-    }\n-    public static int clang_Module_isSystem ( Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_isSystem$MH, \"clang_Module_isSystem\");\n-        try {\n-            return (int)mh$.invokeExact(Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Module_getNumTopLevelHeaders$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getNumTopLevelHeaders$MH,\"clang_Module_getNumTopLevelHeaders\");\n-    }\n-    public static int clang_Module_getNumTopLevelHeaders ( Addressable x0,  Addressable Module) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getNumTopLevelHeaders$MH, \"clang_Module_getNumTopLevelHeaders\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address(), Module.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_Module_getTopLevelHeader$MH() {\n-        return RuntimeHelper.requireNonNull(constants$39.clang_Module_getTopLevelHeader$MH,\"clang_Module_getTopLevelHeader\");\n-    }\n-    public static MemoryAddress clang_Module_getTopLevelHeader ( Addressable x0,  Addressable Module,  int Index) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$39.clang_Module_getTopLevelHeader$MH, \"clang_Module_getTopLevelHeader\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), Module.address(), Index);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$39 {\n-\n-        static final FunctionDescriptor clang_Module_getParent$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_getParent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getParent\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$39.clang_Module_getParent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Module_getName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_getName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getName\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$39.clang_Module_getName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Module_getFullName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_getFullName$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getFullName\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$39.clang_Module_getFullName$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Module_isSystem$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_isSystem$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_isSystem\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$39.clang_Module_isSystem$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Module_getNumTopLevelHeaders$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Module_getNumTopLevelHeaders$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getNumTopLevelHeaders\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$39.clang_Module_getNumTopLevelHeaders$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Module_getTopLevelHeader$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_Module_getTopLevelHeader$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Module_getTopLevelHeader\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$39.clang_Module_getTopLevelHeader$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_CXXConstructor_isConvertingConstructor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isConvertingConstructor$MH,\"clang_CXXConstructor_isConvertingConstructor\");\n-    }\n-    public static int clang_CXXConstructor_isConvertingConstructor ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isConvertingConstructor$MH, \"clang_CXXConstructor_isConvertingConstructor\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXConstructor_isCopyConstructor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isCopyConstructor$MH,\"clang_CXXConstructor_isCopyConstructor\");\n-    }\n-    public static int clang_CXXConstructor_isCopyConstructor ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isCopyConstructor$MH, \"clang_CXXConstructor_isCopyConstructor\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXConstructor_isDefaultConstructor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isDefaultConstructor$MH,\"clang_CXXConstructor_isDefaultConstructor\");\n-    }\n-    public static int clang_CXXConstructor_isDefaultConstructor ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isDefaultConstructor$MH, \"clang_CXXConstructor_isDefaultConstructor\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXConstructor_isMoveConstructor$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isMoveConstructor$MH,\"clang_CXXConstructor_isMoveConstructor\");\n-    }\n-    public static int clang_CXXConstructor_isMoveConstructor ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXConstructor_isMoveConstructor$MH, \"clang_CXXConstructor_isMoveConstructor\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXField_isMutable$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXField_isMutable$MH,\"clang_CXXField_isMutable\");\n-    }\n-    public static int clang_CXXField_isMutable ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXField_isMutable$MH, \"clang_CXXField_isMutable\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXMethod_isDefaulted$MH() {\n-        return RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isDefaulted$MH,\"clang_CXXMethod_isDefaulted\");\n-    }\n-    public static int clang_CXXMethod_isDefaulted ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$40.clang_CXXMethod_isDefaulted$MH, \"clang_CXXMethod_isDefaulted\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$40 {\n-\n-        static final FunctionDescriptor clang_CXXConstructor_isConvertingConstructor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXConstructor_isConvertingConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isConvertingConstructor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$40.clang_CXXConstructor_isConvertingConstructor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXConstructor_isCopyConstructor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXConstructor_isCopyConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isCopyConstructor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$40.clang_CXXConstructor_isCopyConstructor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXConstructor_isDefaultConstructor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXConstructor_isDefaultConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isDefaultConstructor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$40.clang_CXXConstructor_isDefaultConstructor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXConstructor_isMoveConstructor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXConstructor_isMoveConstructor$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXConstructor_isMoveConstructor\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$40.clang_CXXConstructor_isMoveConstructor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXField_isMutable$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXField_isMutable$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXField_isMutable\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$40.clang_CXXField_isMutable$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXMethod_isDefaulted$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXMethod_isDefaulted$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isDefaulted\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$40.clang_CXXMethod_isDefaulted$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_CXXMethod_isPureVirtual$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isPureVirtual$MH,\"clang_CXXMethod_isPureVirtual\");\n-    }\n-    public static int clang_CXXMethod_isPureVirtual ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isPureVirtual$MH, \"clang_CXXMethod_isPureVirtual\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXMethod_isStatic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isStatic$MH,\"clang_CXXMethod_isStatic\");\n-    }\n-    public static int clang_CXXMethod_isStatic ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isStatic$MH, \"clang_CXXMethod_isStatic\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXMethod_isVirtual$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isVirtual$MH,\"clang_CXXMethod_isVirtual\");\n-    }\n-    public static int clang_CXXMethod_isVirtual ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isVirtual$MH, \"clang_CXXMethod_isVirtual\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXRecord_isAbstract$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_CXXRecord_isAbstract$MH,\"clang_CXXRecord_isAbstract\");\n-    }\n-    public static int clang_CXXRecord_isAbstract ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXRecord_isAbstract$MH, \"clang_CXXRecord_isAbstract\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EnumDecl_isScoped$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_EnumDecl_isScoped$MH,\"clang_EnumDecl_isScoped\");\n-    }\n-    public static int clang_EnumDecl_isScoped ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_EnumDecl_isScoped$MH, \"clang_EnumDecl_isScoped\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_CXXMethod_isConst$MH() {\n-        return RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isConst$MH,\"clang_CXXMethod_isConst\");\n-    }\n-    public static int clang_CXXMethod_isConst ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$41.clang_CXXMethod_isConst$MH, \"clang_CXXMethod_isConst\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$41 {\n-\n-        static final FunctionDescriptor clang_CXXMethod_isPureVirtual$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXMethod_isPureVirtual$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isPureVirtual\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_CXXMethod_isPureVirtual$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXMethod_isStatic$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXMethod_isStatic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isStatic\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_CXXMethod_isStatic$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXMethod_isVirtual$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXMethod_isVirtual$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isVirtual\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_CXXMethod_isVirtual$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXRecord_isAbstract$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXRecord_isAbstract$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXRecord_isAbstract\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_CXXRecord_isAbstract$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EnumDecl_isScoped$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_EnumDecl_isScoped$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EnumDecl_isScoped\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_EnumDecl_isScoped$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_CXXMethod_isConst$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_CXXMethod_isConst$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_CXXMethod_isConst\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$41.clang_CXXMethod_isConst$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getTemplateCursorKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getTemplateCursorKind$MH,\"clang_getTemplateCursorKind\");\n-    }\n-    public static int clang_getTemplateCursorKind ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTemplateCursorKind$MH, \"clang_getTemplateCursorKind\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTemplateSpecializationKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getTemplateSpecializationKind$MH,\"clang_getTemplateSpecializationKind\");\n-    }\n-    public static int clang_getTemplateSpecializationKind ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTemplateSpecializationKind$MH, \"clang_getTemplateSpecializationKind\");\n-        try {\n-            return (int)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getSpecializedCursorTemplate$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getSpecializedCursorTemplate$MH,\"clang_getSpecializedCursorTemplate\");\n-    }\n-    public static MemorySegment clang_getSpecializedCursorTemplate ( SegmentAllocator allocator,  MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getSpecializedCursorTemplate$MH, \"clang_getSpecializedCursorTemplate\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getSpecializedCursorTemplate ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getSpecializedCursorTemplate(SegmentAllocator.ofScope(scope), C);\n-    }\n-    public static MethodHandle clang_getCursorReferenceNameRange$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getCursorReferenceNameRange$MH,\"clang_getCursorReferenceNameRange\");\n-    }\n-    public static MemorySegment clang_getCursorReferenceNameRange ( SegmentAllocator allocator,  MemorySegment C,  int NameFlags,  int PieceIndex) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getCursorReferenceNameRange$MH, \"clang_getCursorReferenceNameRange\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C, NameFlags, PieceIndex);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorReferenceNameRange ( ResourceScope scope,  MemorySegment C,  int NameFlags,  int PieceIndex) {\n-        return clang_getCursorReferenceNameRange(SegmentAllocator.ofScope(scope), C, NameFlags, PieceIndex);\n-    }\n-    public static int CXNameRange_WantQualifier() {\n-        return (int)1L;\n-    }\n-    public static int CXNameRange_WantTemplateArgs() {\n-        return (int)2L;\n-    }\n-    public static int CXNameRange_WantSinglePiece() {\n-        return (int)4L;\n-    }\n-    public static int CXToken_Punctuation() {\n-        return (int)0L;\n-    }\n-    public static int CXToken_Keyword() {\n-        return (int)1L;\n-    }\n-    public static int CXToken_Identifier() {\n-        return (int)2L;\n-    }\n-    public static int CXToken_Literal() {\n-        return (int)3L;\n-    }\n-    public static int CXToken_Comment() {\n-        return (int)4L;\n-    }\n-    public static class CXToken {\n-\n-        static final MemoryLayout CXToken$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-            C_POINTER.withName(\"ptr_data\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXToken.CXToken$struct$LAYOUT;\n-        }\n-        public static MemorySegment int_data$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 16);\n-        }\n-        static final VarHandle ptr_data$VH = MemoryHandles.asAddressVarHandle(CXToken$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ptr_data\")));\n-        public static VarHandle ptr_data$VH() {\n-            return CXToken.ptr_data$VH;\n-        }\n-        public static MemoryAddress ptr_data$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg);\n-        }\n-        public static void ptr_data$set( MemorySegment seg, MemoryAddress x) {\n-            CXToken.ptr_data$VH.set(seg, x);\n-        }\n-        public static MemoryAddress ptr_data$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void ptr_data$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXToken.ptr_data$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static MethodHandle clang_getToken$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getToken$MH,\"clang_getToken\");\n-    }\n-    public static MemoryAddress clang_getToken ( Addressable TU,  MemorySegment Location) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getToken$MH, \"clang_getToken\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(TU.address(), Location);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getTokenKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$42.clang_getTokenKind$MH,\"clang_getTokenKind\");\n-    }\n-    public static int clang_getTokenKind ( MemorySegment x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$42.clang_getTokenKind$MH, \"clang_getTokenKind\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$42 {\n-\n-        static final FunctionDescriptor clang_getTemplateCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTemplateCursorKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTemplateCursorKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$42.clang_getTemplateCursorKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTemplateSpecializationKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTemplateSpecializationKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTemplateSpecializationKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$42.clang_getTemplateSpecializationKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getSpecializedCursorTemplate$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getSpecializedCursorTemplate$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getSpecializedCursorTemplate\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$42.clang_getSpecializedCursorTemplate$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorReferenceNameRange$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCursorReferenceNameRange$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorReferenceNameRange\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$42.clang_getCursorReferenceNameRange$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getToken$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_getToken$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getToken\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$42.clang_getToken$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTokenKind$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-                C_POINTER.withName(\"ptr_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTokenKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTokenKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$42.clang_getTokenKind$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getTokenSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n-    }\n-    public static MemorySegment clang_getTokenSpelling ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getTokenSpelling$MH, \"clang_getTokenSpelling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getTokenSpelling ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n-        return clang_getTokenSpelling(SegmentAllocator.ofScope(scope), x1.address(), x2);\n-    }\n-    public static MethodHandle clang_getTokenLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_getTokenLocation$MH,\"clang_getTokenLocation\");\n-    }\n-    public static MemorySegment clang_getTokenLocation ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getTokenLocation$MH, \"clang_getTokenLocation\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getTokenLocation ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n-        return clang_getTokenLocation(SegmentAllocator.ofScope(scope), x1.address(), x2);\n-    }\n-    public static MethodHandle clang_getTokenExtent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_getTokenExtent$MH,\"clang_getTokenExtent\");\n-    }\n-    public static MemorySegment clang_getTokenExtent ( SegmentAllocator allocator,  Addressable x1,  MemorySegment x2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_getTokenExtent$MH, \"clang_getTokenExtent\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), x2);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getTokenExtent ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n-        return clang_getTokenExtent(SegmentAllocator.ofScope(scope), x1.address(), x2);\n-    }\n-    public static MethodHandle clang_tokenize$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_tokenize$MH,\"clang_tokenize\");\n-    }\n-    public static void clang_tokenize ( Addressable TU,  MemorySegment Range,  Addressable Tokens,  Addressable NumTokens) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_tokenize$MH, \"clang_tokenize\");\n-        try {\n-            mh$.invokeExact(TU.address(), Range, Tokens.address(), NumTokens.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_annotateTokens$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_annotateTokens$MH,\"clang_annotateTokens\");\n-    }\n-    public static void clang_annotateTokens ( Addressable TU,  Addressable Tokens,  int NumTokens,  Addressable Cursors) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_annotateTokens$MH, \"clang_annotateTokens\");\n-        try {\n-            mh$.invokeExact(TU.address(), Tokens.address(), NumTokens, Cursors.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeTokens$MH() {\n-        return RuntimeHelper.requireNonNull(constants$43.clang_disposeTokens$MH,\"clang_disposeTokens\");\n-    }\n-    public static void clang_disposeTokens ( Addressable TU,  Addressable Tokens,  int NumTokens) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$43.clang_disposeTokens$MH, \"clang_disposeTokens\");\n-        try {\n-            mh$.invokeExact(TU.address(), Tokens.address(), NumTokens);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$43 {\n-\n-        static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-                C_POINTER.withName(\"ptr_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTokenSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTokenSpelling\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$43.clang_getTokenSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTokenLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-                C_POINTER.withName(\"ptr_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTokenLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTokenLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$43.clang_getTokenLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getTokenExtent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"begin_int_data\"),\n-            C_INT.withName(\"end_int_data\")\n-        ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n-                C_POINTER.withName(\"ptr_data\")\n-            )\n-        );\n-        static final MethodHandle clang_getTokenExtent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getTokenExtent\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$43.clang_getTokenExtent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_tokenize$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_tokenize$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_tokenize\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$43.clang_tokenize$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_annotateTokens$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_annotateTokens$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_annotateTokens\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$43.clang_annotateTokens$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeTokens$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_disposeTokens$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeTokens\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-            constants$43.clang_disposeTokens$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCursorKindSpelling$MH() {\n-        return RuntimeHelper.requireNonNull(constants$44.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n-    }\n-    public static MemorySegment clang_getCursorKindSpelling ( SegmentAllocator allocator,  int Kind) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getCursorKindSpelling$MH, \"clang_getCursorKindSpelling\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Kind);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCursorKindSpelling ( ResourceScope scope,  int Kind) {\n-        return clang_getCursorKindSpelling(SegmentAllocator.ofScope(scope), Kind);\n-    }\n-    public static MethodHandle clang_getDefinitionSpellingAndExtent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$44.clang_getDefinitionSpellingAndExtent$MH,\"clang_getDefinitionSpellingAndExtent\");\n-    }\n-    public static void clang_getDefinitionSpellingAndExtent ( MemorySegment x0,  Addressable startBuf,  Addressable endBuf,  Addressable startLine,  Addressable startColumn,  Addressable endLine,  Addressable endColumn) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_getDefinitionSpellingAndExtent$MH, \"clang_getDefinitionSpellingAndExtent\");\n-        try {\n-            mh$.invokeExact(x0, startBuf.address(), endBuf.address(), startLine.address(), startColumn.address(), endLine.address(), endColumn.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_enableStackTraces$MH() {\n-        return RuntimeHelper.requireNonNull(constants$44.clang_enableStackTraces$MH,\"clang_enableStackTraces\");\n-    }\n-    public static void clang_enableStackTraces () {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_enableStackTraces$MH, \"clang_enableStackTraces\");\n-        try {\n-            mh$.invokeExact();\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public interface clang_executeOnThread$fn {\n-\n-        void apply(jdk.incubator.foreign.MemoryAddress x0);\n-        static MemoryAddress allocate(clang_executeOnThread$fn fi) {\n-            return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, constants$44.clang_executeOnThread$fn$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n-        }\n-        static MemoryAddress allocate(clang_executeOnThread$fn fi, ResourceScope scope) {\n-            return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, constants$44.clang_executeOnThread$fn$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n-        }\n-        static clang_executeOnThread$fn ofAddress(MemoryAddress addr) {\n-            return (jdk.incubator.foreign.MemoryAddress x0) -> {\n-                try {\n-                    constants$44.clang_executeOnThread$fn$MH.invokeExact((Addressable)addr, x0);\n-                } catch (Throwable ex$) {\n-                    throw new AssertionError(\"should not reach here\", ex$);\n-                }\n-            };\n-        }\n-    }\n-\n-    public static MethodHandle clang_executeOnThread$MH() {\n-        return RuntimeHelper.requireNonNull(constants$44.clang_executeOnThread$MH,\"clang_executeOnThread\");\n-    }\n-    public static void clang_executeOnThread ( Addressable fn,  Addressable user_data,  int stack_size) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$44.clang_executeOnThread$MH, \"clang_executeOnThread\");\n-        try {\n-            mh$.invokeExact(fn.address(), user_data.address(), stack_size);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class CXCompletionResult {\n-\n-        static final MemoryLayout CXCompletionResult$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"CursorKind\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_POINTER.withName(\"CompletionString\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXCompletionResult.CXCompletionResult$struct$LAYOUT;\n-        }\n-        static final VarHandle CursorKind$VH = CXCompletionResult$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"CursorKind\"));\n-        public static VarHandle CursorKind$VH() {\n-            return CXCompletionResult.CursorKind$VH;\n-        }\n-        public static int CursorKind$get(MemorySegment seg) {\n-            return (int)CXCompletionResult.CursorKind$VH.get(seg);\n-        }\n-        public static void CursorKind$set( MemorySegment seg, int x) {\n-            CXCompletionResult.CursorKind$VH.set(seg, x);\n-        }\n-        public static int CursorKind$get(MemorySegment seg, long index) {\n-            return (int)CXCompletionResult.CursorKind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void CursorKind$set(MemorySegment seg, long index, int x) {\n-            CXCompletionResult.CursorKind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle CompletionString$VH = MemoryHandles.asAddressVarHandle(CXCompletionResult$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"CompletionString\")));\n-        public static VarHandle CompletionString$VH() {\n-            return CXCompletionResult.CompletionString$VH;\n-        }\n-        public static MemoryAddress CompletionString$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCompletionResult.CompletionString$VH.get(seg);\n-        }\n-        public static void CompletionString$set( MemorySegment seg, MemoryAddress x) {\n-            CXCompletionResult.CompletionString$VH.set(seg, x);\n-        }\n-        public static MemoryAddress CompletionString$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCompletionResult.CompletionString$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void CompletionString$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXCompletionResult.CompletionString$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static int CXCompletionChunk_Optional() {\n-        return (int)0L;\n-    }\n-    public static int CXCompletionChunk_TypedText() {\n-        return (int)1L;\n-    }\n-    public static int CXCompletionChunk_Text() {\n-        return (int)2L;\n-    }\n-    public static int CXCompletionChunk_Placeholder() {\n-        return (int)3L;\n-    }\n-    public static int CXCompletionChunk_Informative() {\n-        return (int)4L;\n-    }\n-    public static int CXCompletionChunk_CurrentParameter() {\n-        return (int)5L;\n-    }\n-    public static int CXCompletionChunk_LeftParen() {\n-        return (int)6L;\n-    }\n-    public static int CXCompletionChunk_RightParen() {\n-        return (int)7L;\n-    }\n-    public static int CXCompletionChunk_LeftBracket() {\n-        return (int)8L;\n-    }\n-    public static int CXCompletionChunk_RightBracket() {\n-        return (int)9L;\n-    }\n-    public static int CXCompletionChunk_LeftBrace() {\n-        return (int)10L;\n-    }\n-    public static int CXCompletionChunk_RightBrace() {\n-        return (int)11L;\n-    }\n-    public static int CXCompletionChunk_LeftAngle() {\n-        return (int)12L;\n-    }\n-    public static int CXCompletionChunk_RightAngle() {\n-        return (int)13L;\n-    }\n-    public static int CXCompletionChunk_Comma() {\n-        return (int)14L;\n-    }\n-    public static int CXCompletionChunk_ResultType() {\n-        return (int)15L;\n-    }\n-    public static int CXCompletionChunk_Colon() {\n-        return (int)16L;\n-    }\n-    public static int CXCompletionChunk_SemiColon() {\n-        return (int)17L;\n-    }\n-    public static int CXCompletionChunk_Equal() {\n-        return (int)18L;\n-    }\n-    public static int CXCompletionChunk_HorizontalSpace() {\n-        return (int)19L;\n-    }\n-    public static int CXCompletionChunk_VerticalSpace() {\n-        return (int)20L;\n-    }\n-    public static class constants$44 {\n-\n-        static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCursorKindSpelling$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorKindSpelling\",\n-            \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$44.clang_getCursorKindSpelling$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getDefinitionSpellingAndExtent$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getDefinitionSpellingAndExtent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getDefinitionSpellingAndExtent\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$44.clang_getDefinitionSpellingAndExtent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_enableStackTraces$FUNC = FunctionDescriptor.ofVoid();\n-        static final MethodHandle clang_enableStackTraces$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_enableStackTraces\",\n-            \"()V\",\n-            constants$44.clang_enableStackTraces$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_executeOnThread$fn$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_executeOnThread$fn$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$44.clang_executeOnThread$fn$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_executeOnThread$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_executeOnThread$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_executeOnThread\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-            constants$44.clang_executeOnThread$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCompletionChunkKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkKind$MH,\"clang_getCompletionChunkKind\");\n-    }\n-    public static int clang_getCompletionChunkKind ( Addressable completion_string,  int chunk_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkKind$MH, \"clang_getCompletionChunkKind\");\n-        try {\n-            return (int)mh$.invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCompletionChunkText$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkText$MH,\"clang_getCompletionChunkText\");\n-    }\n-    public static MemorySegment clang_getCompletionChunkText ( SegmentAllocator allocator,  Addressable completion_string,  int chunk_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkText$MH, \"clang_getCompletionChunkText\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address(), chunk_number);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCompletionChunkText ( ResourceScope scope,  Addressable completion_string,  int chunk_number) {\n-        return clang_getCompletionChunkText(SegmentAllocator.ofScope(scope), completion_string.address(), chunk_number);\n-    }\n-    public static MethodHandle clang_getCompletionChunkCompletionString$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkCompletionString$MH,\"clang_getCompletionChunkCompletionString\");\n-    }\n-    public static MemoryAddress clang_getCompletionChunkCompletionString ( Addressable completion_string,  int chunk_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionChunkCompletionString$MH, \"clang_getCompletionChunkCompletionString\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(completion_string.address(), chunk_number);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getNumCompletionChunks$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH,\"clang_getNumCompletionChunks\");\n-    }\n-    public static int clang_getNumCompletionChunks ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getNumCompletionChunks$MH, \"clang_getNumCompletionChunks\");\n-        try {\n-            return (int)mh$.invokeExact(completion_string.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCompletionPriority$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH,\"clang_getCompletionPriority\");\n-    }\n-    public static int clang_getCompletionPriority ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionPriority$MH, \"clang_getCompletionPriority\");\n-        try {\n-            return (int)mh$.invokeExact(completion_string.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCompletionAvailability$MH() {\n-        return RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH,\"clang_getCompletionAvailability\");\n-    }\n-    public static int clang_getCompletionAvailability ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$45.clang_getCompletionAvailability$MH, \"clang_getCompletionAvailability\");\n-        try {\n-            return (int)mh$.invokeExact(completion_string.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$45 {\n-\n-        static final FunctionDescriptor clang_getCompletionChunkKind$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCompletionChunkKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionChunkKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$45.clang_getCompletionChunkKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionChunkText$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCompletionChunkText$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionChunkText\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$45.clang_getCompletionChunkText$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionChunkCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCompletionChunkCompletionString$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionChunkCompletionString\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$45.clang_getCompletionChunkCompletionString$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getNumCompletionChunks$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getNumCompletionChunks$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getNumCompletionChunks\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$45.clang_getNumCompletionChunks$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionPriority$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionPriority$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionPriority\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$45.clang_getCompletionPriority$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionAvailability$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionAvailability$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionAvailability\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$45.clang_getCompletionAvailability$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCompletionNumAnnotations$MH() {\n-        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumAnnotations$MH,\"clang_getCompletionNumAnnotations\");\n-    }\n-    public static int clang_getCompletionNumAnnotations ( Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumAnnotations$MH, \"clang_getCompletionNumAnnotations\");\n-        try {\n-            return (int)mh$.invokeExact(completion_string.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getCompletionAnnotation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionAnnotation$MH,\"clang_getCompletionAnnotation\");\n-    }\n-    public static MemorySegment clang_getCompletionAnnotation ( SegmentAllocator allocator,  Addressable completion_string,  int annotation_number) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionAnnotation$MH, \"clang_getCompletionAnnotation\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address(), annotation_number);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCompletionAnnotation ( ResourceScope scope,  Addressable completion_string,  int annotation_number) {\n-        return clang_getCompletionAnnotation(SegmentAllocator.ofScope(scope), completion_string.address(), annotation_number);\n-    }\n-    public static MethodHandle clang_getCompletionParent$MH() {\n-        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionParent$MH,\"clang_getCompletionParent\");\n-    }\n-    public static MemorySegment clang_getCompletionParent ( SegmentAllocator allocator,  Addressable completion_string,  Addressable kind) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionParent$MH, \"clang_getCompletionParent\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address(), kind.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCompletionParent ( ResourceScope scope,  Addressable completion_string,  Addressable kind) {\n-        return clang_getCompletionParent(SegmentAllocator.ofScope(scope), completion_string.address(), kind.address());\n-    }\n-    public static MethodHandle clang_getCompletionBriefComment$MH() {\n-        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionBriefComment$MH,\"clang_getCompletionBriefComment\");\n-    }\n-    public static MemorySegment clang_getCompletionBriefComment ( SegmentAllocator allocator,  Addressable completion_string) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionBriefComment$MH, \"clang_getCompletionBriefComment\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, completion_string.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCompletionBriefComment ( ResourceScope scope,  Addressable completion_string) {\n-        return clang_getCompletionBriefComment(SegmentAllocator.ofScope(scope), completion_string.address());\n-    }\n-    public static MethodHandle clang_getCursorCompletionString$MH() {\n-        return RuntimeHelper.requireNonNull(constants$46.clang_getCursorCompletionString$MH,\"clang_getCursorCompletionString\");\n-    }\n-    public static MemoryAddress clang_getCursorCompletionString ( MemorySegment cursor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCursorCompletionString$MH, \"clang_getCursorCompletionString\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cursor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class CXCodeCompleteResults {\n-\n-        static final MemoryLayout CXCodeCompleteResults$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"Results\"),\n-            C_INT.withName(\"NumResults\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXCodeCompleteResults.CXCodeCompleteResults$struct$LAYOUT;\n-        }\n-        static final VarHandle Results$VH = MemoryHandles.asAddressVarHandle(CXCodeCompleteResults$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"Results\")));\n-        public static VarHandle Results$VH() {\n-            return CXCodeCompleteResults.Results$VH;\n-        }\n-        public static MemoryAddress Results$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCodeCompleteResults.Results$VH.get(seg);\n-        }\n-        public static void Results$set( MemorySegment seg, MemoryAddress x) {\n-            CXCodeCompleteResults.Results$VH.set(seg, x);\n-        }\n-        public static MemoryAddress Results$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCodeCompleteResults.Results$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void Results$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXCodeCompleteResults.Results$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle NumResults$VH = CXCodeCompleteResults$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"NumResults\"));\n-        public static VarHandle NumResults$VH() {\n-            return CXCodeCompleteResults.NumResults$VH;\n-        }\n-        public static int NumResults$get(MemorySegment seg) {\n-            return (int)CXCodeCompleteResults.NumResults$VH.get(seg);\n-        }\n-        public static void NumResults$set( MemorySegment seg, int x) {\n-            CXCodeCompleteResults.NumResults$VH.set(seg, x);\n-        }\n-        public static int NumResults$get(MemorySegment seg, long index) {\n-            return (int)CXCodeCompleteResults.NumResults$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void NumResults$set(MemorySegment seg, long index, int x) {\n-            CXCodeCompleteResults.NumResults$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static MethodHandle clang_getCompletionNumFixIts$MH() {\n-        return RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumFixIts$MH,\"clang_getCompletionNumFixIts\");\n-    }\n-    public static int clang_getCompletionNumFixIts ( Addressable results,  int completion_index) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$46.clang_getCompletionNumFixIts$MH, \"clang_getCompletionNumFixIts\");\n-        try {\n-            return (int)mh$.invokeExact(results.address(), completion_index);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$46 {\n-\n-        static final FunctionDescriptor clang_getCompletionNumAnnotations$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionNumAnnotations$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionNumAnnotations\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$46.clang_getCompletionNumAnnotations$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionAnnotation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCompletionAnnotation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionAnnotation\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$46.clang_getCompletionAnnotation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionParent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionParent$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionParent\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$46.clang_getCompletionParent$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionBriefComment$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionBriefComment$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionBriefComment\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$46.clang_getCompletionBriefComment$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCursorCompletionString$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_getCursorCompletionString$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCursorCompletionString\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$46.clang_getCursorCompletionString$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getCompletionNumFixIts$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getCompletionNumFixIts$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionNumFixIts\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$46.clang_getCompletionNumFixIts$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_getCompletionFixIt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_getCompletionFixIt$MH,\"clang_getCompletionFixIt\");\n-    }\n-    public static MemorySegment clang_getCompletionFixIt ( SegmentAllocator allocator,  Addressable results,  int completion_index,  int fixit_index,  Addressable replacement_range) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_getCompletionFixIt$MH, \"clang_getCompletionFixIt\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, results.address(), completion_index, fixit_index, replacement_range.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getCompletionFixIt ( ResourceScope scope,  Addressable results,  int completion_index,  int fixit_index,  Addressable replacement_range) {\n-        return clang_getCompletionFixIt(SegmentAllocator.ofScope(scope), results.address(), completion_index, fixit_index, replacement_range.address());\n-    }\n-    public static int CXCodeComplete_IncludeMacros() {\n-        return (int)1L;\n-    }\n-    public static int CXCodeComplete_IncludeCodePatterns() {\n-        return (int)2L;\n-    }\n-    public static int CXCodeComplete_IncludeBriefComments() {\n-        return (int)4L;\n-    }\n-    public static int CXCodeComplete_SkipPreamble() {\n-        return (int)8L;\n-    }\n-    public static int CXCodeComplete_IncludeCompletionsWithFixIts() {\n-        return (int)16L;\n-    }\n-    public static int CXCompletionContext_Unexposed() {\n-        return (int)0L;\n-    }\n-    public static int CXCompletionContext_AnyType() {\n-        return (int)1L;\n-    }\n-    public static int CXCompletionContext_AnyValue() {\n-        return (int)2L;\n-    }\n-    public static int CXCompletionContext_ObjCObjectValue() {\n-        return (int)4L;\n-    }\n-    public static int CXCompletionContext_ObjCSelectorValue() {\n-        return (int)8L;\n-    }\n-    public static int CXCompletionContext_CXXClassTypeValue() {\n-        return (int)16L;\n-    }\n-    public static int CXCompletionContext_DotMemberAccess() {\n-        return (int)32L;\n-    }\n-    public static int CXCompletionContext_ArrowMemberAccess() {\n-        return (int)64L;\n-    }\n-    public static int CXCompletionContext_ObjCPropertyAccess() {\n-        return (int)128L;\n-    }\n-    public static int CXCompletionContext_EnumTag() {\n-        return (int)256L;\n-    }\n-    public static int CXCompletionContext_UnionTag() {\n-        return (int)512L;\n-    }\n-    public static int CXCompletionContext_StructTag() {\n-        return (int)1024L;\n-    }\n-    public static int CXCompletionContext_ClassTag() {\n-        return (int)2048L;\n-    }\n-    public static int CXCompletionContext_Namespace() {\n-        return (int)4096L;\n-    }\n-    public static int CXCompletionContext_NestedNameSpecifier() {\n-        return (int)8192L;\n-    }\n-    public static int CXCompletionContext_ObjCInterface() {\n-        return (int)16384L;\n-    }\n-    public static int CXCompletionContext_ObjCProtocol() {\n-        return (int)32768L;\n-    }\n-    public static int CXCompletionContext_ObjCCategory() {\n-        return (int)65536L;\n-    }\n-    public static int CXCompletionContext_ObjCInstanceMessage() {\n-        return (int)131072L;\n-    }\n-    public static int CXCompletionContext_ObjCClassMessage() {\n-        return (int)262144L;\n-    }\n-    public static int CXCompletionContext_ObjCSelectorName() {\n-        return (int)524288L;\n-    }\n-    public static int CXCompletionContext_MacroName() {\n-        return (int)1048576L;\n-    }\n-    public static int CXCompletionContext_NaturalLanguage() {\n-        return (int)2097152L;\n-    }\n-    public static int CXCompletionContext_IncludedFile() {\n-        return (int)4194304L;\n-    }\n-    public static int CXCompletionContext_Unknown() {\n-        return (int)8388607L;\n-    }\n-    public static MethodHandle clang_defaultCodeCompleteOptions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_defaultCodeCompleteOptions$MH,\"clang_defaultCodeCompleteOptions\");\n-    }\n-    public static int clang_defaultCodeCompleteOptions () {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_defaultCodeCompleteOptions$MH, \"clang_defaultCodeCompleteOptions\");\n-        try {\n-            return (int)mh$.invokeExact();\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_codeCompleteAt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteAt$MH,\"clang_codeCompleteAt\");\n-    }\n-    public static MemoryAddress clang_codeCompleteAt ( Addressable TU,  Addressable complete_filename,  int complete_line,  int complete_column,  Addressable unsaved_files,  int num_unsaved_files,  int options) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteAt$MH, \"clang_codeCompleteAt\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(TU.address(), complete_filename.address(), complete_line, complete_column, unsaved_files.address(), num_unsaved_files, options);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_sortCodeCompletionResults$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH,\"clang_sortCodeCompletionResults\");\n-    }\n-    public static void clang_sortCodeCompletionResults ( Addressable Results,  int NumResults) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_sortCodeCompletionResults$MH, \"clang_sortCodeCompletionResults\");\n-        try {\n-            mh$.invokeExact(Results.address(), NumResults);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_disposeCodeCompleteResults$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH,\"clang_disposeCodeCompleteResults\");\n-    }\n-    public static void clang_disposeCodeCompleteResults ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_disposeCodeCompleteResults$MH, \"clang_disposeCodeCompleteResults\");\n-        try {\n-            mh$.invokeExact(Results.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_codeCompleteGetNumDiagnostics$MH() {\n-        return RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH,\"clang_codeCompleteGetNumDiagnostics\");\n-    }\n-    public static int clang_codeCompleteGetNumDiagnostics ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$47.clang_codeCompleteGetNumDiagnostics$MH, \"clang_codeCompleteGetNumDiagnostics\");\n-        try {\n-            return (int)mh$.invokeExact(Results.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$47 {\n-\n-        static final FunctionDescriptor clang_getCompletionFixIt$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER,\n-            C_INT,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getCompletionFixIt$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getCompletionFixIt\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$47.clang_getCompletionFixIt$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_defaultCodeCompleteOptions$FUNC = FunctionDescriptor.of(C_INT);\n-        static final MethodHandle clang_defaultCodeCompleteOptions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_defaultCodeCompleteOptions\",\n-            \"()I\",\n-            constants$47.clang_defaultCodeCompleteOptions$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteAt$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_codeCompleteAt$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteAt\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$47.clang_codeCompleteAt$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_sortCodeCompletionResults$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_sortCodeCompletionResults$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_sortCodeCompletionResults\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n-            constants$47.clang_sortCodeCompletionResults$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_disposeCodeCompleteResults$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_disposeCodeCompleteResults$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_disposeCodeCompleteResults\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$47.clang_disposeCodeCompleteResults$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteGetNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetNumDiagnostics$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetNumDiagnostics\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$47.clang_codeCompleteGetNumDiagnostics$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_codeCompleteGetDiagnostic$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetDiagnostic$MH,\"clang_codeCompleteGetDiagnostic\");\n-    }\n-    public static MemoryAddress clang_codeCompleteGetDiagnostic ( Addressable Results,  int Index) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetDiagnostic$MH, \"clang_codeCompleteGetDiagnostic\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Results.address(), Index);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_codeCompleteGetContexts$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContexts$MH,\"clang_codeCompleteGetContexts\");\n-    }\n-    public static long clang_codeCompleteGetContexts ( Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContexts$MH, \"clang_codeCompleteGetContexts\");\n-        try {\n-            return (long)mh$.invokeExact(Results.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_codeCompleteGetContainerKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerKind$MH,\"clang_codeCompleteGetContainerKind\");\n-    }\n-    public static int clang_codeCompleteGetContainerKind ( Addressable Results,  Addressable IsIncomplete) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerKind$MH, \"clang_codeCompleteGetContainerKind\");\n-        try {\n-            return (int)mh$.invokeExact(Results.address(), IsIncomplete.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_codeCompleteGetContainerUSR$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH,\"clang_codeCompleteGetContainerUSR\");\n-    }\n-    public static MemorySegment clang_codeCompleteGetContainerUSR ( SegmentAllocator allocator,  Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetContainerUSR$MH, \"clang_codeCompleteGetContainerUSR\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Results.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_codeCompleteGetContainerUSR ( ResourceScope scope,  Addressable Results) {\n-        return clang_codeCompleteGetContainerUSR(SegmentAllocator.ofScope(scope), Results.address());\n-    }\n-    public static MethodHandle clang_codeCompleteGetObjCSelector$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH,\"clang_codeCompleteGetObjCSelector\");\n-    }\n-    public static MemorySegment clang_codeCompleteGetObjCSelector ( SegmentAllocator allocator,  Addressable Results) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_codeCompleteGetObjCSelector$MH, \"clang_codeCompleteGetObjCSelector\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Results.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_codeCompleteGetObjCSelector ( ResourceScope scope,  Addressable Results) {\n-        return clang_codeCompleteGetObjCSelector(SegmentAllocator.ofScope(scope), Results.address());\n-    }\n-    public static MethodHandle clang_getClangVersion$MH() {\n-        return RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH,\"clang_getClangVersion\");\n-    }\n-    public static MemorySegment clang_getClangVersion ( SegmentAllocator allocator) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$48.clang_getClangVersion$MH, \"clang_getClangVersion\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_getClangVersion ( ResourceScope scope) {\n-        return clang_getClangVersion(SegmentAllocator.ofScope(scope));\n-    }\n-    public static class constants$48 {\n-\n-        static final FunctionDescriptor clang_codeCompleteGetDiagnostic$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_codeCompleteGetDiagnostic$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetDiagnostic\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$48.clang_codeCompleteGetDiagnostic$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteGetContexts$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetContexts$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetContexts\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-            constants$48.clang_codeCompleteGetContexts$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteGetContainerKind$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetContainerKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetContainerKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$48.clang_codeCompleteGetContainerKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteGetContainerUSR$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetContainerUSR$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetContainerUSR\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$48.clang_codeCompleteGetContainerUSR$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_codeCompleteGetObjCSelector$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_codeCompleteGetObjCSelector$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_codeCompleteGetObjCSelector\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$48.clang_codeCompleteGetObjCSelector$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            C_POINTER.withName(\"data\"),\n-            C_INT.withName(\"private_flags\"),\n-            MemoryLayout.paddingLayout(32)\n-        ));\n-        static final MethodHandle clang_getClangVersion$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getClangVersion\",\n-            \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$48.clang_getClangVersion$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_toggleCrashRecovery$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_toggleCrashRecovery$MH,\"clang_toggleCrashRecovery\");\n-    }\n-    public static void clang_toggleCrashRecovery ( int isEnabled) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_toggleCrashRecovery$MH, \"clang_toggleCrashRecovery\");\n-        try {\n-            mh$.invokeExact(isEnabled);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public interface CXInclusionVisitor {\n-\n-        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);\n-        static MemoryAddress allocate(CXInclusionVisitor fi) {\n-            return RuntimeHelper.upcallStub(CXInclusionVisitor.class, fi, constants$49.CXInclusionVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\");\n-        }\n-        static MemoryAddress allocate(CXInclusionVisitor fi, ResourceScope scope) {\n-            return RuntimeHelper.upcallStub(CXInclusionVisitor.class, fi, constants$49.CXInclusionVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n-        }\n-        static CXInclusionVisitor ofAddress(MemoryAddress addr) {\n-            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {\n-                try {\n-                    constants$49.CXInclusionVisitor$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);\n-                } catch (Throwable ex$) {\n-                    throw new AssertionError(\"should not reach here\", ex$);\n-                }\n-            };\n-        }\n-    }\n-\n-    public static MethodHandle clang_getInclusions$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_getInclusions$MH,\"clang_getInclusions\");\n-    }\n-    public static void clang_getInclusions ( Addressable tu,  Addressable visitor,  Addressable client_data) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_getInclusions$MH, \"clang_getInclusions\");\n-        try {\n-            mh$.invokeExact(tu.address(), visitor.address(), client_data.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXEval_Int() {\n-        return (int)1L;\n-    }\n-    public static int CXEval_Float() {\n-        return (int)2L;\n-    }\n-    public static int CXEval_ObjCStrLiteral() {\n-        return (int)3L;\n-    }\n-    public static int CXEval_StrLiteral() {\n-        return (int)4L;\n-    }\n-    public static int CXEval_CFStr() {\n-        return (int)5L;\n-    }\n-    public static int CXEval_Other() {\n-        return (int)6L;\n-    }\n-    public static int CXEval_UnExposed() {\n-        return (int)0L;\n-    }\n-    public static MethodHandle clang_Cursor_Evaluate$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH,\"clang_Cursor_Evaluate\");\n-    }\n-    public static MemoryAddress clang_Cursor_Evaluate ( MemorySegment C) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_Cursor_Evaluate$MH, \"clang_Cursor_Evaluate\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH,\"clang_EvalResult_getKind\");\n-    }\n-    public static int clang_EvalResult_getKind ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$49.clang_EvalResult_getKind$MH, \"clang_EvalResult_getKind\");\n-        try {\n-            return (int)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$49 {\n-\n-        static final FunctionDescriptor clang_toggleCrashRecovery$FUNC = FunctionDescriptor.ofVoid(\n-            C_INT\n-        );\n-        static final MethodHandle clang_toggleCrashRecovery$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_toggleCrashRecovery\",\n-            \"(I)V\",\n-            constants$49.clang_toggleCrashRecovery$FUNC, false\n-        );\n-        static final FunctionDescriptor CXInclusionVisitor$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle CXInclusionVisitor$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$49.CXInclusionVisitor$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getInclusions$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getInclusions$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getInclusions\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$49.clang_getInclusions$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Cursor_Evaluate$FUNC = FunctionDescriptor.of(C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            )\n-        );\n-        static final MethodHandle clang_Cursor_Evaluate$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Cursor_Evaluate\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$49.clang_Cursor_Evaluate$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_getKind$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getKind\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$49.clang_EvalResult_getKind$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_EvalResult_getAsInt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsInt$MH,\"clang_EvalResult_getAsInt\");\n-    }\n-    public static int clang_EvalResult_getAsInt ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsInt$MH, \"clang_EvalResult_getAsInt\");\n-        try {\n-            return (int)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getAsLongLong$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n-    }\n-    public static long clang_EvalResult_getAsLongLong ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsLongLong$MH, \"clang_EvalResult_getAsLongLong\");\n-        try {\n-            return (long)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_isUnsignedInt$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n-    }\n-    public static int clang_EvalResult_isUnsignedInt ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_isUnsignedInt$MH, \"clang_EvalResult_isUnsignedInt\");\n-        try {\n-            return (int)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getAsUnsigned$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsUnsigned$MH,\"clang_EvalResult_getAsUnsigned\");\n-    }\n-    public static long clang_EvalResult_getAsUnsigned ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsUnsigned$MH, \"clang_EvalResult_getAsUnsigned\");\n-        try {\n-            return (long)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getAsDouble$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH,\"clang_EvalResult_getAsDouble\");\n-    }\n-    public static double clang_EvalResult_getAsDouble ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsDouble$MH, \"clang_EvalResult_getAsDouble\");\n-        try {\n-            return (double)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_EvalResult_getAsStr$MH() {\n-        return RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH,\"clang_EvalResult_getAsStr\");\n-    }\n-    public static MemoryAddress clang_EvalResult_getAsStr ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$50.clang_EvalResult_getAsStr$MH, \"clang_EvalResult_getAsStr\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$50 {\n-\n-        static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getAsInt$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getAsInt\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$50.clang_EvalResult_getAsInt$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getAsLongLong$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getAsLongLong\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-            constants$50.clang_EvalResult_getAsLongLong$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_isUnsignedInt$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_isUnsignedInt\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$50.clang_EvalResult_isUnsignedInt$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getAsUnsigned$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getAsUnsigned\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n-            constants$50.clang_EvalResult_getAsUnsigned$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC = FunctionDescriptor.of(C_DOUBLE,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getAsDouble$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getAsDouble\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)D\",\n-            constants$50.clang_EvalResult_getAsDouble$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_getAsStr$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_getAsStr\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$50.clang_EvalResult_getAsStr$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_EvalResult_dispose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_EvalResult_dispose$MH,\"clang_EvalResult_dispose\");\n-    }\n-    public static void clang_EvalResult_dispose ( Addressable E) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_EvalResult_dispose$MH, \"clang_EvalResult_dispose\");\n-        try {\n-            mh$.invokeExact(E.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getRemappings$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_getRemappings$MH,\"clang_getRemappings\");\n-    }\n-    public static MemoryAddress clang_getRemappings ( Addressable path) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_getRemappings$MH, \"clang_getRemappings\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(path.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_getRemappingsFromFileList$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_getRemappingsFromFileList$MH,\"clang_getRemappingsFromFileList\");\n-    }\n-    public static MemoryAddress clang_getRemappingsFromFileList ( Addressable filePaths,  int numFiles) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_getRemappingsFromFileList$MH, \"clang_getRemappingsFromFileList\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filePaths.address(), numFiles);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_remap_getNumFiles$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_remap_getNumFiles$MH,\"clang_remap_getNumFiles\");\n-    }\n-    public static int clang_remap_getNumFiles ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_remap_getNumFiles$MH, \"clang_remap_getNumFiles\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_remap_getFilenames$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_remap_getFilenames$MH,\"clang_remap_getFilenames\");\n-    }\n-    public static void clang_remap_getFilenames ( Addressable x0,  int index,  Addressable original,  Addressable transformed) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_remap_getFilenames$MH, \"clang_remap_getFilenames\");\n-        try {\n-            mh$.invokeExact(x0.address(), index, original.address(), transformed.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_remap_dispose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$51.clang_remap_dispose$MH,\"clang_remap_dispose\");\n-    }\n-    public static void clang_remap_dispose ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$51.clang_remap_dispose$MH, \"clang_remap_dispose\");\n-        try {\n-            mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXVisit_Break() {\n-        return (int)0L;\n-    }\n-    public static int CXVisit_Continue() {\n-        return (int)1L;\n-    }\n-    public static class CXCursorAndRangeVisitor {\n-\n-        static final MemoryLayout CXCursorAndRangeVisitor$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"context\"),\n-            C_POINTER.withName(\"visit\")\n-        ).withName(\"CXCursorAndRangeVisitor\");\n-        public static MemoryLayout $LAYOUT() {\n-            return CXCursorAndRangeVisitor.CXCursorAndRangeVisitor$struct$LAYOUT;\n-        }\n-        static final VarHandle context$VH = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"context\")));\n-        public static VarHandle context$VH() {\n-            return CXCursorAndRangeVisitor.context$VH;\n-        }\n-        public static MemoryAddress context$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.context$VH.get(seg);\n-        }\n-        public static void context$set( MemorySegment seg, MemoryAddress x) {\n-            CXCursorAndRangeVisitor.context$VH.set(seg, x);\n-        }\n-        public static MemoryAddress context$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.context$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void context$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXCursorAndRangeVisitor.context$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final FunctionDescriptor visit$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n-        );\n-        static final MethodHandle visit$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            CXCursorAndRangeVisitor.visit$FUNC, false\n-        );\n-        public interface visit {\n-\n-            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2);\n-            static MemoryAddress allocate(visit fi) {\n-                return RuntimeHelper.upcallStub(visit.class, fi, CXCursorAndRangeVisitor.visit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n-            }\n-            static MemoryAddress allocate(visit fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(visit.class, fi, CXCursorAndRangeVisitor.visit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n-            }\n-            static visit ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2) -> {\n-                    try {\n-                        return (int)CXCursorAndRangeVisitor.visit$MH.invokeExact((Addressable)addr, x0, x1, x2);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle visit$VH = MemoryHandles.asAddressVarHandle(CXCursorAndRangeVisitor$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"visit\")));\n-        public static VarHandle visit$VH() {\n-            return CXCursorAndRangeVisitor.visit$VH;\n-        }\n-        public static MemoryAddress visit$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.visit$VH.get(seg);\n-        }\n-        public static void visit$set( MemorySegment seg, MemoryAddress x) {\n-            CXCursorAndRangeVisitor.visit$VH.set(seg, x);\n-        }\n-        public static MemoryAddress visit$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXCursorAndRangeVisitor.visit$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void visit$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXCursorAndRangeVisitor.visit$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static CXCursorAndRangeVisitor.visit visit (MemorySegment segment) {\n-            return CXCursorAndRangeVisitor.visit.ofAddress(visit$get(segment));\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static int CXResult_Success() {\n-        return (int)0L;\n-    }\n-    public static int CXResult_Invalid() {\n-        return (int)1L;\n-    }\n-    public static int CXResult_VisitBreak() {\n-        return (int)2L;\n-    }\n-    public static class constants$51 {\n-\n-        static final FunctionDescriptor clang_EvalResult_dispose$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_EvalResult_dispose$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_EvalResult_dispose\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$51.clang_EvalResult_dispose$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getRemappings$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_getRemappings$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getRemappings\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$51.clang_getRemappings$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_getRemappingsFromFileList$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_getRemappingsFromFileList$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_getRemappingsFromFileList\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$51.clang_getRemappingsFromFileList$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_remap_getNumFiles$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_remap_getNumFiles$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_remap_getNumFiles\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$51.clang_remap_getNumFiles$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_remap_getFilenames$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_remap_getFilenames$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_remap_getFilenames\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$51.clang_remap_getFilenames$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_remap_dispose$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_remap_dispose$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_remap_dispose\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$51.clang_remap_dispose$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_findReferencesInFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFile$MH,\"clang_findReferencesInFile\");\n-    }\n-    public static int clang_findReferencesInFile ( MemorySegment cursor,  Addressable file,  MemorySegment visitor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFile$MH, \"clang_findReferencesInFile\");\n-        try {\n-            return (int)mh$.invokeExact(cursor, file.address(), visitor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_findIncludesInFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFile$MH,\"clang_findIncludesInFile\");\n-    }\n-    public static int clang_findIncludesInFile ( Addressable TU,  Addressable file,  MemorySegment visitor) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFile$MH, \"clang_findIncludesInFile\");\n-        try {\n-            return (int)mh$.invokeExact(TU.address(), file.address(), visitor);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public interface CXCursorAndRangeVisitorBlock {\n-\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1);\n-        static MemoryAddress allocate(CXCursorAndRangeVisitorBlock fi) {\n-            return RuntimeHelper.upcallStub(CXCursorAndRangeVisitorBlock.class, fi, constants$52.CXCursorAndRangeVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\");\n-        }\n-        static MemoryAddress allocate(CXCursorAndRangeVisitorBlock fi, ResourceScope scope) {\n-            return RuntimeHelper.upcallStub(CXCursorAndRangeVisitorBlock.class, fi, constants$52.CXCursorAndRangeVisitorBlock$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\", scope);\n-        }\n-        static CXCursorAndRangeVisitorBlock ofAddress(MemoryAddress addr) {\n-            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1) -> {\n-                try {\n-                    return (int)constants$52.CXCursorAndRangeVisitorBlock$MH.invokeExact((Addressable)addr, x0, x1);\n-                } catch (Throwable ex$) {\n-                    throw new AssertionError(\"should not reach here\", ex$);\n-                }\n-            };\n-        }\n-    }\n-\n-    public static MethodHandle clang_findReferencesInFileWithBlock$MH() {\n-        return RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFileWithBlock$MH,\"clang_findReferencesInFileWithBlock\");\n-    }\n-    public static int clang_findReferencesInFileWithBlock ( MemorySegment x0,  Addressable x1,  Addressable x2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findReferencesInFileWithBlock$MH, \"clang_findReferencesInFileWithBlock\");\n-        try {\n-            return (int)mh$.invokeExact(x0, x1.address(), x2.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_findIncludesInFileWithBlock$MH() {\n-        return RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFileWithBlock$MH,\"clang_findIncludesInFileWithBlock\");\n-    }\n-    public static int clang_findIncludesInFileWithBlock ( Addressable x0,  Addressable x1,  Addressable x2) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$52.clang_findIncludesInFileWithBlock$MH, \"clang_findIncludesInFileWithBlock\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class CXIdxLoc {\n-\n-        static final MemoryLayout CXIdxLoc$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxLoc.CXIdxLoc$struct$LAYOUT;\n-        }\n-        public static MemorySegment ptr_data$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 16);\n-        }\n-        static final VarHandle int_data$VH = CXIdxLoc$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"int_data\"));\n-        public static VarHandle int_data$VH() {\n-            return CXIdxLoc.int_data$VH;\n-        }\n-        public static int int_data$get(MemorySegment seg) {\n-            return (int)CXIdxLoc.int_data$VH.get(seg);\n-        }\n-        public static void int_data$set( MemorySegment seg, int x) {\n-            CXIdxLoc.int_data$VH.set(seg, x);\n-        }\n-        public static int int_data$get(MemorySegment seg, long index) {\n-            return (int)CXIdxLoc.int_data$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void int_data$set(MemorySegment seg, long index, int x) {\n-            CXIdxLoc.int_data$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxIncludedFileInfo {\n-\n-        static final MemoryLayout CXIdxIncludedFileInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"hashLoc\"),\n-            C_POINTER.withName(\"filename\"),\n-            C_POINTER.withName(\"file\"),\n-            C_INT.withName(\"isImport\"),\n-            C_INT.withName(\"isAngled\"),\n-            C_INT.withName(\"isModuleImport\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxIncludedFileInfo.CXIdxIncludedFileInfo$struct$LAYOUT;\n-        }\n-        public static MemorySegment hashLoc$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 24);\n-        }\n-        static final VarHandle filename$VH = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"filename\")));\n-        public static VarHandle filename$VH() {\n-            return CXIdxIncludedFileInfo.filename$VH;\n-        }\n-        public static MemoryAddress filename$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.filename$VH.get(seg);\n-        }\n-        public static void filename$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxIncludedFileInfo.filename$VH.set(seg, x);\n-        }\n-        public static MemoryAddress filename$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.filename$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void filename$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxIncludedFileInfo.filename$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle file$VH = MemoryHandles.asAddressVarHandle(CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"file\")));\n-        public static VarHandle file$VH() {\n-            return CXIdxIncludedFileInfo.file$VH;\n-        }\n-        public static MemoryAddress file$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.file$VH.get(seg);\n-        }\n-        public static void file$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxIncludedFileInfo.file$VH.set(seg, x);\n-        }\n-        public static MemoryAddress file$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIncludedFileInfo.file$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void file$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxIncludedFileInfo.file$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle isImport$VH = CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImport\"));\n-        public static VarHandle isImport$VH() {\n-            return CXIdxIncludedFileInfo.isImport$VH;\n-        }\n-        public static int isImport$get(MemorySegment seg) {\n-            return (int)CXIdxIncludedFileInfo.isImport$VH.get(seg);\n-        }\n-        public static void isImport$set( MemorySegment seg, int x) {\n-            CXIdxIncludedFileInfo.isImport$VH.set(seg, x);\n-        }\n-        public static int isImport$get(MemorySegment seg, long index) {\n-            return (int)CXIdxIncludedFileInfo.isImport$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isImport$set(MemorySegment seg, long index, int x) {\n-            CXIdxIncludedFileInfo.isImport$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle isAngled$VH = CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isAngled\"));\n-        public static VarHandle isAngled$VH() {\n-            return CXIdxIncludedFileInfo.isAngled$VH;\n-        }\n-        public static int isAngled$get(MemorySegment seg) {\n-            return (int)CXIdxIncludedFileInfo.isAngled$VH.get(seg);\n-        }\n-        public static void isAngled$set( MemorySegment seg, int x) {\n-            CXIdxIncludedFileInfo.isAngled$VH.set(seg, x);\n-        }\n-        public static int isAngled$get(MemorySegment seg, long index) {\n-            return (int)CXIdxIncludedFileInfo.isAngled$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isAngled$set(MemorySegment seg, long index, int x) {\n-            CXIdxIncludedFileInfo.isAngled$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle isModuleImport$VH = CXIdxIncludedFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isModuleImport\"));\n-        public static VarHandle isModuleImport$VH() {\n-            return CXIdxIncludedFileInfo.isModuleImport$VH;\n-        }\n-        public static int isModuleImport$get(MemorySegment seg) {\n-            return (int)CXIdxIncludedFileInfo.isModuleImport$VH.get(seg);\n-        }\n-        public static void isModuleImport$set( MemorySegment seg, int x) {\n-            CXIdxIncludedFileInfo.isModuleImport$VH.set(seg, x);\n-        }\n-        public static int isModuleImport$get(MemorySegment seg, long index) {\n-            return (int)CXIdxIncludedFileInfo.isModuleImport$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isModuleImport$set(MemorySegment seg, long index, int x) {\n-            CXIdxIncludedFileInfo.isModuleImport$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxImportedASTFileInfo {\n-\n-        static final MemoryLayout CXIdxImportedASTFileInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"file\"),\n-            C_POINTER.withName(\"module\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"loc\"),\n-            C_INT.withName(\"isImplicit\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxImportedASTFileInfo.CXIdxImportedASTFileInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle file$VH = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"file\")));\n-        public static VarHandle file$VH() {\n-            return CXIdxImportedASTFileInfo.file$VH;\n-        }\n-        public static MemoryAddress file$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.file$VH.get(seg);\n-        }\n-        public static void file$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxImportedASTFileInfo.file$VH.set(seg, x);\n-        }\n-        public static MemoryAddress file$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.file$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void file$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxImportedASTFileInfo.file$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle module$VH = MemoryHandles.asAddressVarHandle(CXIdxImportedASTFileInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"module\")));\n-        public static VarHandle module$VH() {\n-            return CXIdxImportedASTFileInfo.module$VH;\n-        }\n-        public static MemoryAddress module$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.module$VH.get(seg);\n-        }\n-        public static void module$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxImportedASTFileInfo.module$VH.set(seg, x);\n-        }\n-        public static MemoryAddress module$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxImportedASTFileInfo.module$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void module$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxImportedASTFileInfo.module$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment loc$slice(MemorySegment seg) {\n-            return seg.asSlice(16, 24);\n-        }\n-        static final VarHandle isImplicit$VH = CXIdxImportedASTFileInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImplicit\"));\n-        public static VarHandle isImplicit$VH() {\n-            return CXIdxImportedASTFileInfo.isImplicit$VH;\n-        }\n-        public static int isImplicit$get(MemorySegment seg) {\n-            return (int)CXIdxImportedASTFileInfo.isImplicit$VH.get(seg);\n-        }\n-        public static void isImplicit$set( MemorySegment seg, int x) {\n-            CXIdxImportedASTFileInfo.isImplicit$VH.set(seg, x);\n-        }\n-        public static int isImplicit$get(MemorySegment seg, long index) {\n-            return (int)CXIdxImportedASTFileInfo.isImplicit$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isImplicit$set(MemorySegment seg, long index, int x) {\n-            CXIdxImportedASTFileInfo.isImplicit$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static int CXIdxEntity_Unexposed() {\n-        return (int)0L;\n-    }\n-    public static int CXIdxEntity_Typedef() {\n-        return (int)1L;\n-    }\n-    public static int CXIdxEntity_Function() {\n-        return (int)2L;\n-    }\n-    public static int CXIdxEntity_Variable() {\n-        return (int)3L;\n-    }\n-    public static int CXIdxEntity_Field() {\n-        return (int)4L;\n-    }\n-    public static int CXIdxEntity_EnumConstant() {\n-        return (int)5L;\n-    }\n-    public static int CXIdxEntity_ObjCClass() {\n-        return (int)6L;\n-    }\n-    public static int CXIdxEntity_ObjCProtocol() {\n-        return (int)7L;\n-    }\n-    public static int CXIdxEntity_ObjCCategory() {\n-        return (int)8L;\n-    }\n-    public static int CXIdxEntity_ObjCInstanceMethod() {\n-        return (int)9L;\n-    }\n-    public static int CXIdxEntity_ObjCClassMethod() {\n-        return (int)10L;\n-    }\n-    public static int CXIdxEntity_ObjCProperty() {\n-        return (int)11L;\n-    }\n-    public static int CXIdxEntity_ObjCIvar() {\n-        return (int)12L;\n-    }\n-    public static int CXIdxEntity_Enum() {\n-        return (int)13L;\n-    }\n-    public static int CXIdxEntity_Struct() {\n-        return (int)14L;\n-    }\n-    public static int CXIdxEntity_Union() {\n-        return (int)15L;\n-    }\n-    public static int CXIdxEntity_CXXClass() {\n-        return (int)16L;\n-    }\n-    public static int CXIdxEntity_CXXNamespace() {\n-        return (int)17L;\n-    }\n-    public static int CXIdxEntity_CXXNamespaceAlias() {\n-        return (int)18L;\n-    }\n-    public static int CXIdxEntity_CXXStaticVariable() {\n-        return (int)19L;\n-    }\n-    public static int CXIdxEntity_CXXStaticMethod() {\n-        return (int)20L;\n-    }\n-    public static int CXIdxEntity_CXXInstanceMethod() {\n-        return (int)21L;\n-    }\n-    public static int CXIdxEntity_CXXConstructor() {\n-        return (int)22L;\n-    }\n-    public static int CXIdxEntity_CXXDestructor() {\n-        return (int)23L;\n-    }\n-    public static int CXIdxEntity_CXXConversionFunction() {\n-        return (int)24L;\n-    }\n-    public static int CXIdxEntity_CXXTypeAlias() {\n-        return (int)25L;\n-    }\n-    public static int CXIdxEntity_CXXInterface() {\n-        return (int)26L;\n-    }\n-    public static int CXIdxEntityLang_None() {\n-        return (int)0L;\n-    }\n-    public static int CXIdxEntityLang_C() {\n-        return (int)1L;\n-    }\n-    public static int CXIdxEntityLang_ObjC() {\n-        return (int)2L;\n-    }\n-    public static int CXIdxEntityLang_CXX() {\n-        return (int)3L;\n-    }\n-    public static int CXIdxEntityLang_Swift() {\n-        return (int)4L;\n-    }\n-    public static int CXIdxEntity_NonTemplate() {\n-        return (int)0L;\n-    }\n-    public static int CXIdxEntity_Template() {\n-        return (int)1L;\n-    }\n-    public static int CXIdxEntity_TemplatePartialSpecialization() {\n-        return (int)2L;\n-    }\n-    public static class CXIdxAttrInfo {\n-\n-        static final MemoryLayout CXIdxAttrInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"cursor\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"loc\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxAttrInfo.CXIdxAttrInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle kind$VH = CXIdxAttrInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-        public static VarHandle kind$VH() {\n-            return CXIdxAttrInfo.kind$VH;\n-        }\n-        public static int kind$get(MemorySegment seg) {\n-            return (int)CXIdxAttrInfo.kind$VH.get(seg);\n-        }\n-        public static void kind$set( MemorySegment seg, int x) {\n-            CXIdxAttrInfo.kind$VH.set(seg, x);\n-        }\n-        public static int kind$get(MemorySegment seg, long index) {\n-            return (int)CXIdxAttrInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void kind$set(MemorySegment seg, long index, int x) {\n-            CXIdxAttrInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment cursor$slice(MemorySegment seg) {\n-            return seg.asSlice(8, 32);\n-        }\n-        public static MemorySegment loc$slice(MemorySegment seg) {\n-            return seg.asSlice(40, 24);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxEntityInfo {\n-\n-        static final MemoryLayout CXIdxEntityInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            C_INT.withName(\"templateKind\"),\n-            C_INT.withName(\"lang\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_POINTER.withName(\"name\"),\n-            C_POINTER.withName(\"USR\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"cursor\"),\n-            C_POINTER.withName(\"attributes\"),\n-            C_INT.withName(\"numAttributes\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxEntityInfo.CXIdxEntityInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle kind$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-        public static VarHandle kind$VH() {\n-            return CXIdxEntityInfo.kind$VH;\n-        }\n-        public static int kind$get(MemorySegment seg) {\n-            return (int)CXIdxEntityInfo.kind$VH.get(seg);\n-        }\n-        public static void kind$set( MemorySegment seg, int x) {\n-            CXIdxEntityInfo.kind$VH.set(seg, x);\n-        }\n-        public static int kind$get(MemorySegment seg, long index) {\n-            return (int)CXIdxEntityInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void kind$set(MemorySegment seg, long index, int x) {\n-            CXIdxEntityInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle templateKind$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"templateKind\"));\n-        public static VarHandle templateKind$VH() {\n-            return CXIdxEntityInfo.templateKind$VH;\n-        }\n-        public static int templateKind$get(MemorySegment seg) {\n-            return (int)CXIdxEntityInfo.templateKind$VH.get(seg);\n-        }\n-        public static void templateKind$set( MemorySegment seg, int x) {\n-            CXIdxEntityInfo.templateKind$VH.set(seg, x);\n-        }\n-        public static int templateKind$get(MemorySegment seg, long index) {\n-            return (int)CXIdxEntityInfo.templateKind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void templateKind$set(MemorySegment seg, long index, int x) {\n-            CXIdxEntityInfo.templateKind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle lang$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"lang\"));\n-        public static VarHandle lang$VH() {\n-            return CXIdxEntityInfo.lang$VH;\n-        }\n-        public static int lang$get(MemorySegment seg) {\n-            return (int)CXIdxEntityInfo.lang$VH.get(seg);\n-        }\n-        public static void lang$set( MemorySegment seg, int x) {\n-            CXIdxEntityInfo.lang$VH.set(seg, x);\n-        }\n-        public static int lang$get(MemorySegment seg, long index) {\n-            return (int)CXIdxEntityInfo.lang$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void lang$set(MemorySegment seg, long index, int x) {\n-            CXIdxEntityInfo.lang$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle name$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"name\")));\n-        public static VarHandle name$VH() {\n-            return CXIdxEntityInfo.name$VH;\n-        }\n-        public static MemoryAddress name$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.name$VH.get(seg);\n-        }\n-        public static void name$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxEntityInfo.name$VH.set(seg, x);\n-        }\n-        public static MemoryAddress name$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.name$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void name$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxEntityInfo.name$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle USR$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"USR\")));\n-        public static VarHandle USR$VH() {\n-            return CXIdxEntityInfo.USR$VH;\n-        }\n-        public static MemoryAddress USR$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.USR$VH.get(seg);\n-        }\n-        public static void USR$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxEntityInfo.USR$VH.set(seg, x);\n-        }\n-        public static MemoryAddress USR$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.USR$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void USR$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxEntityInfo.USR$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment cursor$slice(MemorySegment seg) {\n-            return seg.asSlice(32, 32);\n-        }\n-        static final VarHandle attributes$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attributes\")));\n-        public static VarHandle attributes$VH() {\n-            return CXIdxEntityInfo.attributes$VH;\n-        }\n-        public static MemoryAddress attributes$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.attributes$VH.get(seg);\n-        }\n-        public static void attributes$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxEntityInfo.attributes$VH.set(seg, x);\n-        }\n-        public static MemoryAddress attributes$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityInfo.attributes$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void attributes$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxEntityInfo.attributes$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle numAttributes$VH = CXIdxEntityInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numAttributes\"));\n-        public static VarHandle numAttributes$VH() {\n-            return CXIdxEntityInfo.numAttributes$VH;\n-        }\n-        public static int numAttributes$get(MemorySegment seg) {\n-            return (int)CXIdxEntityInfo.numAttributes$VH.get(seg);\n-        }\n-        public static void numAttributes$set( MemorySegment seg, int x) {\n-            CXIdxEntityInfo.numAttributes$VH.set(seg, x);\n-        }\n-        public static int numAttributes$get(MemorySegment seg, long index) {\n-            return (int)CXIdxEntityInfo.numAttributes$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void numAttributes$set(MemorySegment seg, long index, int x) {\n-            CXIdxEntityInfo.numAttributes$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxContainerInfo {\n-\n-        static final MemoryLayout CXIdxContainerInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"cursor\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxContainerInfo.CXIdxContainerInfo$struct$LAYOUT;\n-        }\n-        public static MemorySegment cursor$slice(MemorySegment seg) {\n-            return seg.asSlice(0, 32);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxIBOutletCollectionAttrInfo {\n-\n-        static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"attrInfo\"),\n-            C_POINTER.withName(\"objcClass\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"classCursor\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"classLoc\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxIBOutletCollectionAttrInfo.CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle attrInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attrInfo\")));\n-        public static VarHandle attrInfo$VH() {\n-            return CXIdxIBOutletCollectionAttrInfo.attrInfo$VH;\n-        }\n-        public static MemoryAddress attrInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.get(seg);\n-        }\n-        public static void attrInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress attrInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void attrInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxIBOutletCollectionAttrInfo.attrInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle objcClass$VH = MemoryHandles.asAddressVarHandle(CXIdxIBOutletCollectionAttrInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"objcClass\")));\n-        public static VarHandle objcClass$VH() {\n-            return CXIdxIBOutletCollectionAttrInfo.objcClass$VH;\n-        }\n-        public static MemoryAddress objcClass$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.objcClass$VH.get(seg);\n-        }\n-        public static void objcClass$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxIBOutletCollectionAttrInfo.objcClass$VH.set(seg, x);\n-        }\n-        public static MemoryAddress objcClass$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxIBOutletCollectionAttrInfo.objcClass$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void objcClass$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxIBOutletCollectionAttrInfo.objcClass$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment classCursor$slice(MemorySegment seg) {\n-            return seg.asSlice(16, 32);\n-        }\n-        public static MemorySegment classLoc$slice(MemorySegment seg) {\n-            return seg.asSlice(48, 24);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxDeclInfo {\n-\n-        static final MemoryLayout CXIdxDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"entityInfo\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"cursor\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"loc\"),\n-            C_POINTER.withName(\"semanticContainer\"),\n-            C_POINTER.withName(\"lexicalContainer\"),\n-            C_INT.withName(\"isRedeclaration\"),\n-            C_INT.withName(\"isDefinition\"),\n-            C_INT.withName(\"isContainer\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_POINTER.withName(\"declAsContainer\"),\n-            C_INT.withName(\"isImplicit\"),\n-            MemoryLayout.paddingLayout(32),\n-            C_POINTER.withName(\"attributes\"),\n-            C_INT.withName(\"numAttributes\"),\n-            C_INT.withName(\"flags\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxDeclInfo.CXIdxDeclInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle entityInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"entityInfo\")));\n-        public static VarHandle entityInfo$VH() {\n-            return CXIdxDeclInfo.entityInfo$VH;\n-        }\n-        public static MemoryAddress entityInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.entityInfo$VH.get(seg);\n-        }\n-        public static void entityInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxDeclInfo.entityInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress entityInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.entityInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void entityInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxDeclInfo.entityInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment cursor$slice(MemorySegment seg) {\n-            return seg.asSlice(8, 32);\n-        }\n-        public static MemorySegment loc$slice(MemorySegment seg) {\n-            return seg.asSlice(40, 24);\n-        }\n-        static final VarHandle semanticContainer$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"semanticContainer\")));\n-        public static VarHandle semanticContainer$VH() {\n-            return CXIdxDeclInfo.semanticContainer$VH;\n-        }\n-        public static MemoryAddress semanticContainer$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.semanticContainer$VH.get(seg);\n-        }\n-        public static void semanticContainer$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxDeclInfo.semanticContainer$VH.set(seg, x);\n-        }\n-        public static MemoryAddress semanticContainer$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.semanticContainer$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void semanticContainer$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxDeclInfo.semanticContainer$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle lexicalContainer$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"lexicalContainer\")));\n-        public static VarHandle lexicalContainer$VH() {\n-            return CXIdxDeclInfo.lexicalContainer$VH;\n-        }\n-        public static MemoryAddress lexicalContainer$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.lexicalContainer$VH.get(seg);\n-        }\n-        public static void lexicalContainer$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxDeclInfo.lexicalContainer$VH.set(seg, x);\n-        }\n-        public static MemoryAddress lexicalContainer$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.lexicalContainer$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void lexicalContainer$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxDeclInfo.lexicalContainer$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle isRedeclaration$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isRedeclaration\"));\n-        public static VarHandle isRedeclaration$VH() {\n-            return CXIdxDeclInfo.isRedeclaration$VH;\n-        }\n-        public static int isRedeclaration$get(MemorySegment seg) {\n-            return (int)CXIdxDeclInfo.isRedeclaration$VH.get(seg);\n-        }\n-        public static void isRedeclaration$set( MemorySegment seg, int x) {\n-            CXIdxDeclInfo.isRedeclaration$VH.set(seg, x);\n-        }\n-        public static int isRedeclaration$get(MemorySegment seg, long index) {\n-            return (int)CXIdxDeclInfo.isRedeclaration$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isRedeclaration$set(MemorySegment seg, long index, int x) {\n-            CXIdxDeclInfo.isRedeclaration$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle isDefinition$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isDefinition\"));\n-        public static VarHandle isDefinition$VH() {\n-            return CXIdxDeclInfo.isDefinition$VH;\n-        }\n-        public static int isDefinition$get(MemorySegment seg) {\n-            return (int)CXIdxDeclInfo.isDefinition$VH.get(seg);\n-        }\n-        public static void isDefinition$set( MemorySegment seg, int x) {\n-            CXIdxDeclInfo.isDefinition$VH.set(seg, x);\n-        }\n-        public static int isDefinition$get(MemorySegment seg, long index) {\n-            return (int)CXIdxDeclInfo.isDefinition$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isDefinition$set(MemorySegment seg, long index, int x) {\n-            CXIdxDeclInfo.isDefinition$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle isContainer$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isContainer\"));\n-        public static VarHandle isContainer$VH() {\n-            return CXIdxDeclInfo.isContainer$VH;\n-        }\n-        public static int isContainer$get(MemorySegment seg) {\n-            return (int)CXIdxDeclInfo.isContainer$VH.get(seg);\n-        }\n-        public static void isContainer$set( MemorySegment seg, int x) {\n-            CXIdxDeclInfo.isContainer$VH.set(seg, x);\n-        }\n-        public static int isContainer$get(MemorySegment seg, long index) {\n-            return (int)CXIdxDeclInfo.isContainer$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isContainer$set(MemorySegment seg, long index, int x) {\n-            CXIdxDeclInfo.isContainer$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle declAsContainer$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declAsContainer\")));\n-        public static VarHandle declAsContainer$VH() {\n-            return CXIdxDeclInfo.declAsContainer$VH;\n-        }\n-        public static MemoryAddress declAsContainer$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.declAsContainer$VH.get(seg);\n-        }\n-        public static void declAsContainer$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxDeclInfo.declAsContainer$VH.set(seg, x);\n-        }\n-        public static MemoryAddress declAsContainer$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.declAsContainer$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void declAsContainer$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxDeclInfo.declAsContainer$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle isImplicit$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"isImplicit\"));\n-        public static VarHandle isImplicit$VH() {\n-            return CXIdxDeclInfo.isImplicit$VH;\n-        }\n-        public static int isImplicit$get(MemorySegment seg) {\n-            return (int)CXIdxDeclInfo.isImplicit$VH.get(seg);\n-        }\n-        public static void isImplicit$set( MemorySegment seg, int x) {\n-            CXIdxDeclInfo.isImplicit$VH.set(seg, x);\n-        }\n-        public static int isImplicit$get(MemorySegment seg, long index) {\n-            return (int)CXIdxDeclInfo.isImplicit$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void isImplicit$set(MemorySegment seg, long index, int x) {\n-            CXIdxDeclInfo.isImplicit$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle attributes$VH = MemoryHandles.asAddressVarHandle(CXIdxDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"attributes\")));\n-        public static VarHandle attributes$VH() {\n-            return CXIdxDeclInfo.attributes$VH;\n-        }\n-        public static MemoryAddress attributes$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.attributes$VH.get(seg);\n-        }\n-        public static void attributes$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxDeclInfo.attributes$VH.set(seg, x);\n-        }\n-        public static MemoryAddress attributes$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxDeclInfo.attributes$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void attributes$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxDeclInfo.attributes$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle numAttributes$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numAttributes\"));\n-        public static VarHandle numAttributes$VH() {\n-            return CXIdxDeclInfo.numAttributes$VH;\n-        }\n-        public static int numAttributes$get(MemorySegment seg) {\n-            return (int)CXIdxDeclInfo.numAttributes$VH.get(seg);\n-        }\n-        public static void numAttributes$set( MemorySegment seg, int x) {\n-            CXIdxDeclInfo.numAttributes$VH.set(seg, x);\n-        }\n-        public static int numAttributes$get(MemorySegment seg, long index) {\n-            return (int)CXIdxDeclInfo.numAttributes$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void numAttributes$set(MemorySegment seg, long index, int x) {\n-            CXIdxDeclInfo.numAttributes$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle flags$VH = CXIdxDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"flags\"));\n-        public static VarHandle flags$VH() {\n-            return CXIdxDeclInfo.flags$VH;\n-        }\n-        public static int flags$get(MemorySegment seg) {\n-            return (int)CXIdxDeclInfo.flags$VH.get(seg);\n-        }\n-        public static void flags$set( MemorySegment seg, int x) {\n-            CXIdxDeclInfo.flags$VH.set(seg, x);\n-        }\n-        public static int flags$get(MemorySegment seg, long index) {\n-            return (int)CXIdxDeclInfo.flags$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void flags$set(MemorySegment seg, long index, int x) {\n-            CXIdxDeclInfo.flags$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxObjCContainerDeclInfo {\n-\n-        static final MemoryLayout CXIdxObjCContainerDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"declInfo\"),\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxObjCContainerDeclInfo.CXIdxObjCContainerDeclInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle declInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCContainerDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n-        public static VarHandle declInfo$VH() {\n-            return CXIdxObjCContainerDeclInfo.declInfo$VH;\n-        }\n-        public static MemoryAddress declInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCContainerDeclInfo.declInfo$VH.get(seg);\n-        }\n-        public static void declInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCContainerDeclInfo.declInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress declInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCContainerDeclInfo.declInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void declInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCContainerDeclInfo.declInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle kind$VH = CXIdxObjCContainerDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-        public static VarHandle kind$VH() {\n-            return CXIdxObjCContainerDeclInfo.kind$VH;\n-        }\n-        public static int kind$get(MemorySegment seg) {\n-            return (int)CXIdxObjCContainerDeclInfo.kind$VH.get(seg);\n-        }\n-        public static void kind$set( MemorySegment seg, int x) {\n-            CXIdxObjCContainerDeclInfo.kind$VH.set(seg, x);\n-        }\n-        public static int kind$get(MemorySegment seg, long index) {\n-            return (int)CXIdxObjCContainerDeclInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void kind$set(MemorySegment seg, long index, int x) {\n-            CXIdxObjCContainerDeclInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxBaseClassInfo {\n-\n-        static final MemoryLayout CXIdxBaseClassInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"base\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"cursor\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"loc\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxBaseClassInfo.CXIdxBaseClassInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle base$VH = MemoryHandles.asAddressVarHandle(CXIdxBaseClassInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"base\")));\n-        public static VarHandle base$VH() {\n-            return CXIdxBaseClassInfo.base$VH;\n-        }\n-        public static MemoryAddress base$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxBaseClassInfo.base$VH.get(seg);\n-        }\n-        public static void base$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxBaseClassInfo.base$VH.set(seg, x);\n-        }\n-        public static MemoryAddress base$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxBaseClassInfo.base$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void base$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxBaseClassInfo.base$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment cursor$slice(MemorySegment seg) {\n-            return seg.asSlice(8, 32);\n-        }\n-        public static MemorySegment loc$slice(MemorySegment seg) {\n-            return seg.asSlice(40, 24);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxObjCProtocolRefInfo {\n-\n-        static final MemoryLayout CXIdxObjCProtocolRefInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"protocol\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"cursor\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"loc\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxObjCProtocolRefInfo.CXIdxObjCProtocolRefInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle protocol$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocol\")));\n-        public static VarHandle protocol$VH() {\n-            return CXIdxObjCProtocolRefInfo.protocol$VH;\n-        }\n-        public static MemoryAddress protocol$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefInfo.protocol$VH.get(seg);\n-        }\n-        public static void protocol$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCProtocolRefInfo.protocol$VH.set(seg, x);\n-        }\n-        public static MemoryAddress protocol$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefInfo.protocol$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void protocol$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCProtocolRefInfo.protocol$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment cursor$slice(MemorySegment seg) {\n-            return seg.asSlice(8, 32);\n-        }\n-        public static MemorySegment loc$slice(MemorySegment seg) {\n-            return seg.asSlice(40, 24);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxObjCProtocolRefListInfo {\n-\n-        static final MemoryLayout CXIdxObjCProtocolRefListInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"protocols\"),\n-            C_INT.withName(\"numProtocols\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxObjCProtocolRefListInfo.CXIdxObjCProtocolRefListInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle protocols$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCProtocolRefListInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n-        public static VarHandle protocols$VH() {\n-            return CXIdxObjCProtocolRefListInfo.protocols$VH;\n-        }\n-        public static MemoryAddress protocols$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefListInfo.protocols$VH.get(seg);\n-        }\n-        public static void protocols$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCProtocolRefListInfo.protocols$VH.set(seg, x);\n-        }\n-        public static MemoryAddress protocols$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCProtocolRefListInfo.protocols$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void protocols$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCProtocolRefListInfo.protocols$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle numProtocols$VH = CXIdxObjCProtocolRefListInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numProtocols\"));\n-        public static VarHandle numProtocols$VH() {\n-            return CXIdxObjCProtocolRefListInfo.numProtocols$VH;\n-        }\n-        public static int numProtocols$get(MemorySegment seg) {\n-            return (int)CXIdxObjCProtocolRefListInfo.numProtocols$VH.get(seg);\n-        }\n-        public static void numProtocols$set( MemorySegment seg, int x) {\n-            CXIdxObjCProtocolRefListInfo.numProtocols$VH.set(seg, x);\n-        }\n-        public static int numProtocols$get(MemorySegment seg, long index) {\n-            return (int)CXIdxObjCProtocolRefListInfo.numProtocols$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void numProtocols$set(MemorySegment seg, long index, int x) {\n-            CXIdxObjCProtocolRefListInfo.numProtocols$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxObjCInterfaceDeclInfo {\n-\n-        static final MemoryLayout CXIdxObjCInterfaceDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"containerInfo\"),\n-            C_POINTER.withName(\"superInfo\"),\n-            C_POINTER.withName(\"protocols\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxObjCInterfaceDeclInfo.CXIdxObjCInterfaceDeclInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle containerInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"containerInfo\")));\n-        public static VarHandle containerInfo$VH() {\n-            return CXIdxObjCInterfaceDeclInfo.containerInfo$VH;\n-        }\n-        public static MemoryAddress containerInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.containerInfo$VH.get(seg);\n-        }\n-        public static void containerInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCInterfaceDeclInfo.containerInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress containerInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.containerInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void containerInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCInterfaceDeclInfo.containerInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle superInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"superInfo\")));\n-        public static VarHandle superInfo$VH() {\n-            return CXIdxObjCInterfaceDeclInfo.superInfo$VH;\n-        }\n-        public static MemoryAddress superInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.superInfo$VH.get(seg);\n-        }\n-        public static void superInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCInterfaceDeclInfo.superInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress superInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.superInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void superInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCInterfaceDeclInfo.superInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle protocols$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCInterfaceDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n-        public static VarHandle protocols$VH() {\n-            return CXIdxObjCInterfaceDeclInfo.protocols$VH;\n-        }\n-        public static MemoryAddress protocols$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.protocols$VH.get(seg);\n-        }\n-        public static void protocols$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCInterfaceDeclInfo.protocols$VH.set(seg, x);\n-        }\n-        public static MemoryAddress protocols$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCInterfaceDeclInfo.protocols$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void protocols$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCInterfaceDeclInfo.protocols$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxObjCCategoryDeclInfo {\n-\n-        static final MemoryLayout CXIdxObjCCategoryDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"containerInfo\"),\n-            C_POINTER.withName(\"objcClass\"),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"classCursor\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"classLoc\"),\n-            C_POINTER.withName(\"protocols\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxObjCCategoryDeclInfo.CXIdxObjCCategoryDeclInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle containerInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"containerInfo\")));\n-        public static VarHandle containerInfo$VH() {\n-            return CXIdxObjCCategoryDeclInfo.containerInfo$VH;\n-        }\n-        public static MemoryAddress containerInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.containerInfo$VH.get(seg);\n-        }\n-        public static void containerInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCCategoryDeclInfo.containerInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress containerInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.containerInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void containerInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCCategoryDeclInfo.containerInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle objcClass$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"objcClass\")));\n-        public static VarHandle objcClass$VH() {\n-            return CXIdxObjCCategoryDeclInfo.objcClass$VH;\n-        }\n-        public static MemoryAddress objcClass$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.objcClass$VH.get(seg);\n-        }\n-        public static void objcClass$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCCategoryDeclInfo.objcClass$VH.set(seg, x);\n-        }\n-        public static MemoryAddress objcClass$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.objcClass$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void objcClass$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCCategoryDeclInfo.objcClass$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment classCursor$slice(MemorySegment seg) {\n-            return seg.asSlice(16, 32);\n-        }\n-        public static MemorySegment classLoc$slice(MemorySegment seg) {\n-            return seg.asSlice(48, 24);\n-        }\n-        static final VarHandle protocols$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCCategoryDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"protocols\")));\n-        public static VarHandle protocols$VH() {\n-            return CXIdxObjCCategoryDeclInfo.protocols$VH;\n-        }\n-        public static MemoryAddress protocols$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.protocols$VH.get(seg);\n-        }\n-        public static void protocols$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCCategoryDeclInfo.protocols$VH.set(seg, x);\n-        }\n-        public static MemoryAddress protocols$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCCategoryDeclInfo.protocols$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void protocols$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCCategoryDeclInfo.protocols$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxObjCPropertyDeclInfo {\n-\n-        static final MemoryLayout CXIdxObjCPropertyDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"declInfo\"),\n-            C_POINTER.withName(\"getter\"),\n-            C_POINTER.withName(\"setter\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxObjCPropertyDeclInfo.CXIdxObjCPropertyDeclInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle declInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n-        public static VarHandle declInfo$VH() {\n-            return CXIdxObjCPropertyDeclInfo.declInfo$VH;\n-        }\n-        public static MemoryAddress declInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.declInfo$VH.get(seg);\n-        }\n-        public static void declInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCPropertyDeclInfo.declInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress declInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.declInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void declInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCPropertyDeclInfo.declInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle getter$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"getter\")));\n-        public static VarHandle getter$VH() {\n-            return CXIdxObjCPropertyDeclInfo.getter$VH;\n-        }\n-        public static MemoryAddress getter$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.getter$VH.get(seg);\n-        }\n-        public static void getter$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCPropertyDeclInfo.getter$VH.set(seg, x);\n-        }\n-        public static MemoryAddress getter$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.getter$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void getter$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCPropertyDeclInfo.getter$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle setter$VH = MemoryHandles.asAddressVarHandle(CXIdxObjCPropertyDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"setter\")));\n-        public static VarHandle setter$VH() {\n-            return CXIdxObjCPropertyDeclInfo.setter$VH;\n-        }\n-        public static MemoryAddress setter$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.setter$VH.get(seg);\n-        }\n-        public static void setter$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxObjCPropertyDeclInfo.setter$VH.set(seg, x);\n-        }\n-        public static MemoryAddress setter$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxObjCPropertyDeclInfo.setter$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void setter$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxObjCPropertyDeclInfo.setter$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxCXXClassDeclInfo {\n-\n-        static final MemoryLayout CXIdxCXXClassDeclInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"declInfo\"),\n-            C_POINTER.withName(\"bases\"),\n-            C_INT.withName(\"numBases\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxCXXClassDeclInfo.CXIdxCXXClassDeclInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle declInfo$VH = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"declInfo\")));\n-        public static VarHandle declInfo$VH() {\n-            return CXIdxCXXClassDeclInfo.declInfo$VH;\n-        }\n-        public static MemoryAddress declInfo$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.declInfo$VH.get(seg);\n-        }\n-        public static void declInfo$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxCXXClassDeclInfo.declInfo$VH.set(seg, x);\n-        }\n-        public static MemoryAddress declInfo$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.declInfo$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void declInfo$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxCXXClassDeclInfo.declInfo$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle bases$VH = MemoryHandles.asAddressVarHandle(CXIdxCXXClassDeclInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"bases\")));\n-        public static VarHandle bases$VH() {\n-            return CXIdxCXXClassDeclInfo.bases$VH;\n-        }\n-        public static MemoryAddress bases$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.bases$VH.get(seg);\n-        }\n-        public static void bases$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxCXXClassDeclInfo.bases$VH.set(seg, x);\n-        }\n-        public static MemoryAddress bases$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxCXXClassDeclInfo.bases$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void bases$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxCXXClassDeclInfo.bases$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle numBases$VH = CXIdxCXXClassDeclInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"numBases\"));\n-        public static VarHandle numBases$VH() {\n-            return CXIdxCXXClassDeclInfo.numBases$VH;\n-        }\n-        public static int numBases$get(MemorySegment seg) {\n-            return (int)CXIdxCXXClassDeclInfo.numBases$VH.get(seg);\n-        }\n-        public static void numBases$set( MemorySegment seg, int x) {\n-            CXIdxCXXClassDeclInfo.numBases$VH.set(seg, x);\n-        }\n-        public static int numBases$get(MemorySegment seg, long index) {\n-            return (int)CXIdxCXXClassDeclInfo.numBases$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void numBases$set(MemorySegment seg, long index, int x) {\n-            CXIdxCXXClassDeclInfo.numBases$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class CXIdxEntityRefInfo {\n-\n-        static final MemoryLayout CXIdxEntityRefInfo$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_INT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ).withName(\"cursor\"),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ).withName(\"loc\"),\n-            C_POINTER.withName(\"referencedEntity\"),\n-            C_POINTER.withName(\"parentEntity\"),\n-            C_POINTER.withName(\"container\"),\n-            C_INT.withName(\"role\"),\n-            MemoryLayout.paddingLayout(32)\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return CXIdxEntityRefInfo.CXIdxEntityRefInfo$struct$LAYOUT;\n-        }\n-        static final VarHandle kind$VH = CXIdxEntityRefInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"kind\"));\n-        public static VarHandle kind$VH() {\n-            return CXIdxEntityRefInfo.kind$VH;\n-        }\n-        public static int kind$get(MemorySegment seg) {\n-            return (int)CXIdxEntityRefInfo.kind$VH.get(seg);\n-        }\n-        public static void kind$set( MemorySegment seg, int x) {\n-            CXIdxEntityRefInfo.kind$VH.set(seg, x);\n-        }\n-        public static int kind$get(MemorySegment seg, long index) {\n-            return (int)CXIdxEntityRefInfo.kind$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void kind$set(MemorySegment seg, long index, int x) {\n-            CXIdxEntityRefInfo.kind$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static MemorySegment cursor$slice(MemorySegment seg) {\n-            return seg.asSlice(8, 32);\n-        }\n-        public static MemorySegment loc$slice(MemorySegment seg) {\n-            return seg.asSlice(40, 24);\n-        }\n-        static final VarHandle referencedEntity$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"referencedEntity\")));\n-        public static VarHandle referencedEntity$VH() {\n-            return CXIdxEntityRefInfo.referencedEntity$VH;\n-        }\n-        public static MemoryAddress referencedEntity$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.referencedEntity$VH.get(seg);\n-        }\n-        public static void referencedEntity$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxEntityRefInfo.referencedEntity$VH.set(seg, x);\n-        }\n-        public static MemoryAddress referencedEntity$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.referencedEntity$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void referencedEntity$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxEntityRefInfo.referencedEntity$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle parentEntity$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"parentEntity\")));\n-        public static VarHandle parentEntity$VH() {\n-            return CXIdxEntityRefInfo.parentEntity$VH;\n-        }\n-        public static MemoryAddress parentEntity$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.parentEntity$VH.get(seg);\n-        }\n-        public static void parentEntity$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxEntityRefInfo.parentEntity$VH.set(seg, x);\n-        }\n-        public static MemoryAddress parentEntity$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.parentEntity$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void parentEntity$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxEntityRefInfo.parentEntity$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle container$VH = MemoryHandles.asAddressVarHandle(CXIdxEntityRefInfo$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"container\")));\n-        public static VarHandle container$VH() {\n-            return CXIdxEntityRefInfo.container$VH;\n-        }\n-        public static MemoryAddress container$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.container$VH.get(seg);\n-        }\n-        public static void container$set( MemorySegment seg, MemoryAddress x) {\n-            CXIdxEntityRefInfo.container$VH.set(seg, x);\n-        }\n-        public static MemoryAddress container$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)CXIdxEntityRefInfo.container$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void container$set(MemorySegment seg, long index, MemoryAddress x) {\n-            CXIdxEntityRefInfo.container$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        static final VarHandle role$VH = CXIdxEntityRefInfo$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement(\"role\"));\n-        public static VarHandle role$VH() {\n-            return CXIdxEntityRefInfo.role$VH;\n-        }\n-        public static int role$get(MemorySegment seg) {\n-            return (int)CXIdxEntityRefInfo.role$VH.get(seg);\n-        }\n-        public static void role$set( MemorySegment seg, int x) {\n-            CXIdxEntityRefInfo.role$VH.set(seg, x);\n-        }\n-        public static int role$get(MemorySegment seg, long index) {\n-            return (int)CXIdxEntityRefInfo.role$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void role$set(MemorySegment seg, long index, int x) {\n-            CXIdxEntityRefInfo.role$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class IndexerCallbacks {\n-\n-        static final MemoryLayout IndexerCallbacks$struct$LAYOUT = MemoryLayout.structLayout(\n-            C_POINTER.withName(\"abortQuery\"),\n-            C_POINTER.withName(\"diagnostic\"),\n-            C_POINTER.withName(\"enteredMainFile\"),\n-            C_POINTER.withName(\"ppIncludedFile\"),\n-            C_POINTER.withName(\"importedASTFile\"),\n-            C_POINTER.withName(\"startedTranslationUnit\"),\n-            C_POINTER.withName(\"indexDeclaration\"),\n-            C_POINTER.withName(\"indexEntityReference\")\n-        );\n-        public static MemoryLayout $LAYOUT() {\n-            return IndexerCallbacks.IndexerCallbacks$struct$LAYOUT;\n-        }\n-        static final FunctionDescriptor abortQuery$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle abortQuery$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            IndexerCallbacks.abortQuery$FUNC, false\n-        );\n-        public interface abortQuery {\n-\n-            int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-            static MemoryAddress allocate(abortQuery fi) {\n-                return RuntimeHelper.upcallStub(abortQuery.class, fi, IndexerCallbacks.abortQuery$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n-            }\n-            static MemoryAddress allocate(abortQuery fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(abortQuery.class, fi, IndexerCallbacks.abortQuery$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n-            }\n-            static abortQuery ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n-                    try {\n-                        return (int)IndexerCallbacks.abortQuery$MH.invokeExact((Addressable)addr, x0, x1);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle abortQuery$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"abortQuery\")));\n-        public static VarHandle abortQuery$VH() {\n-            return IndexerCallbacks.abortQuery$VH;\n-        }\n-        public static MemoryAddress abortQuery$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.abortQuery$VH.get(seg);\n-        }\n-        public static void abortQuery$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.abortQuery$VH.set(seg, x);\n-        }\n-        public static MemoryAddress abortQuery$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.abortQuery$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void abortQuery$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.abortQuery$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.abortQuery abortQuery (MemorySegment segment) {\n-            return IndexerCallbacks.abortQuery.ofAddress(abortQuery$get(segment));\n-        }\n-        static final FunctionDescriptor diagnostic$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle diagnostic$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            IndexerCallbacks.diagnostic$FUNC, false\n-        );\n-        public interface diagnostic {\n-\n-            void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);\n-            static MemoryAddress allocate(diagnostic fi) {\n-                return RuntimeHelper.upcallStub(diagnostic.class, fi, IndexerCallbacks.diagnostic$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n-            }\n-            static MemoryAddress allocate(diagnostic fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(diagnostic.class, fi, IndexerCallbacks.diagnostic$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n-            }\n-            static diagnostic ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n-                    try {\n-                        IndexerCallbacks.diagnostic$MH.invokeExact((Addressable)addr, x0, x1, x2);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle diagnostic$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"diagnostic\")));\n-        public static VarHandle diagnostic$VH() {\n-            return IndexerCallbacks.diagnostic$VH;\n-        }\n-        public static MemoryAddress diagnostic$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.diagnostic$VH.get(seg);\n-        }\n-        public static void diagnostic$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.diagnostic$VH.set(seg, x);\n-        }\n-        public static MemoryAddress diagnostic$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.diagnostic$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void diagnostic$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.diagnostic$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.diagnostic diagnostic (MemorySegment segment) {\n-            return IndexerCallbacks.diagnostic.ofAddress(diagnostic$get(segment));\n-        }\n-        static final FunctionDescriptor enteredMainFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle enteredMainFile$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            IndexerCallbacks.enteredMainFile$FUNC, false\n-        );\n-        public interface enteredMainFile {\n-\n-            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);\n-            static MemoryAddress allocate(enteredMainFile fi) {\n-                return RuntimeHelper.upcallStub(enteredMainFile.class, fi, IndexerCallbacks.enteredMainFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n-            }\n-            static MemoryAddress allocate(enteredMainFile fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(enteredMainFile.class, fi, IndexerCallbacks.enteredMainFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n-            }\n-            static enteredMainFile ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n-                    try {\n-                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.enteredMainFile$MH.invokeExact((Addressable)addr, x0, x1, x2);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle enteredMainFile$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"enteredMainFile\")));\n-        public static VarHandle enteredMainFile$VH() {\n-            return IndexerCallbacks.enteredMainFile$VH;\n-        }\n-        public static MemoryAddress enteredMainFile$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.enteredMainFile$VH.get(seg);\n-        }\n-        public static void enteredMainFile$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.enteredMainFile$VH.set(seg, x);\n-        }\n-        public static MemoryAddress enteredMainFile$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.enteredMainFile$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void enteredMainFile$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.enteredMainFile$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.enteredMainFile enteredMainFile (MemorySegment segment) {\n-            return IndexerCallbacks.enteredMainFile.ofAddress(enteredMainFile$get(segment));\n-        }\n-        static final FunctionDescriptor ppIncludedFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle ppIncludedFile$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            IndexerCallbacks.ppIncludedFile$FUNC, false\n-        );\n-        public interface ppIncludedFile {\n-\n-            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-            static MemoryAddress allocate(ppIncludedFile fi) {\n-                return RuntimeHelper.upcallStub(ppIncludedFile.class, fi, IndexerCallbacks.ppIncludedFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n-            }\n-            static MemoryAddress allocate(ppIncludedFile fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(ppIncludedFile.class, fi, IndexerCallbacks.ppIncludedFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n-            }\n-            static ppIncludedFile ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n-                    try {\n-                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.ppIncludedFile$MH.invokeExact((Addressable)addr, x0, x1);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle ppIncludedFile$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"ppIncludedFile\")));\n-        public static VarHandle ppIncludedFile$VH() {\n-            return IndexerCallbacks.ppIncludedFile$VH;\n-        }\n-        public static MemoryAddress ppIncludedFile$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.ppIncludedFile$VH.get(seg);\n-        }\n-        public static void ppIncludedFile$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.ppIncludedFile$VH.set(seg, x);\n-        }\n-        public static MemoryAddress ppIncludedFile$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.ppIncludedFile$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void ppIncludedFile$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.ppIncludedFile$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.ppIncludedFile ppIncludedFile (MemorySegment segment) {\n-            return IndexerCallbacks.ppIncludedFile.ofAddress(ppIncludedFile$get(segment));\n-        }\n-        static final FunctionDescriptor importedASTFile$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle importedASTFile$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            IndexerCallbacks.importedASTFile$FUNC, false\n-        );\n-        public interface importedASTFile {\n-\n-            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-            static MemoryAddress allocate(importedASTFile fi) {\n-                return RuntimeHelper.upcallStub(importedASTFile.class, fi, IndexerCallbacks.importedASTFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n-            }\n-            static MemoryAddress allocate(importedASTFile fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(importedASTFile.class, fi, IndexerCallbacks.importedASTFile$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n-            }\n-            static importedASTFile ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n-                    try {\n-                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.importedASTFile$MH.invokeExact((Addressable)addr, x0, x1);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle importedASTFile$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"importedASTFile\")));\n-        public static VarHandle importedASTFile$VH() {\n-            return IndexerCallbacks.importedASTFile$VH;\n-        }\n-        public static MemoryAddress importedASTFile$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.importedASTFile$VH.get(seg);\n-        }\n-        public static void importedASTFile$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.importedASTFile$VH.set(seg, x);\n-        }\n-        public static MemoryAddress importedASTFile$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.importedASTFile$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void importedASTFile$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.importedASTFile$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.importedASTFile importedASTFile (MemorySegment segment) {\n-            return IndexerCallbacks.importedASTFile.ofAddress(importedASTFile$get(segment));\n-        }\n-        static final FunctionDescriptor startedTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle startedTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            IndexerCallbacks.startedTranslationUnit$FUNC, false\n-        );\n-        public interface startedTranslationUnit {\n-\n-            jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-            static MemoryAddress allocate(startedTranslationUnit fi) {\n-                return RuntimeHelper.upcallStub(startedTranslationUnit.class, fi, IndexerCallbacks.startedTranslationUnit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\");\n-            }\n-            static MemoryAddress allocate(startedTranslationUnit fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(startedTranslationUnit.class, fi, IndexerCallbacks.startedTranslationUnit$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n-            }\n-            static startedTranslationUnit ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n-                    try {\n-                        return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.startedTranslationUnit$MH.invokeExact((Addressable)addr, x0, x1);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle startedTranslationUnit$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"startedTranslationUnit\")));\n-        public static VarHandle startedTranslationUnit$VH() {\n-            return IndexerCallbacks.startedTranslationUnit$VH;\n-        }\n-        public static MemoryAddress startedTranslationUnit$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.startedTranslationUnit$VH.get(seg);\n-        }\n-        public static void startedTranslationUnit$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.startedTranslationUnit$VH.set(seg, x);\n-        }\n-        public static MemoryAddress startedTranslationUnit$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.startedTranslationUnit$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void startedTranslationUnit$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.startedTranslationUnit$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.startedTranslationUnit startedTranslationUnit (MemorySegment segment) {\n-            return IndexerCallbacks.startedTranslationUnit.ofAddress(startedTranslationUnit$get(segment));\n-        }\n-        static final FunctionDescriptor indexDeclaration$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle indexDeclaration$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            IndexerCallbacks.indexDeclaration$FUNC, false\n-        );\n-        public interface indexDeclaration {\n-\n-            void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-            static MemoryAddress allocate(indexDeclaration fi) {\n-                return RuntimeHelper.upcallStub(indexDeclaration.class, fi, IndexerCallbacks.indexDeclaration$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n-            }\n-            static MemoryAddress allocate(indexDeclaration fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(indexDeclaration.class, fi, IndexerCallbacks.indexDeclaration$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n-            }\n-            static indexDeclaration ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n-                    try {\n-                        IndexerCallbacks.indexDeclaration$MH.invokeExact((Addressable)addr, x0, x1);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle indexDeclaration$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"indexDeclaration\")));\n-        public static VarHandle indexDeclaration$VH() {\n-            return IndexerCallbacks.indexDeclaration$VH;\n-        }\n-        public static MemoryAddress indexDeclaration$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexDeclaration$VH.get(seg);\n-        }\n-        public static void indexDeclaration$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.indexDeclaration$VH.set(seg, x);\n-        }\n-        public static MemoryAddress indexDeclaration$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexDeclaration$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void indexDeclaration$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.indexDeclaration$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.indexDeclaration indexDeclaration (MemorySegment segment) {\n-            return IndexerCallbacks.indexDeclaration.ofAddress(indexDeclaration$get(segment));\n-        }\n-        static final FunctionDescriptor indexEntityReference$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle indexEntityReference$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            IndexerCallbacks.indexEntityReference$FUNC, false\n-        );\n-        public interface indexEntityReference {\n-\n-            void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-            static MemoryAddress allocate(indexEntityReference fi) {\n-                return RuntimeHelper.upcallStub(indexEntityReference.class, fi, IndexerCallbacks.indexEntityReference$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\");\n-            }\n-            static MemoryAddress allocate(indexEntityReference fi, ResourceScope scope) {\n-                return RuntimeHelper.upcallStub(indexEntityReference.class, fi, IndexerCallbacks.indexEntityReference$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n-            }\n-            static indexEntityReference ofAddress(MemoryAddress addr) {\n-                return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n-                    try {\n-                        IndexerCallbacks.indexEntityReference$MH.invokeExact((Addressable)addr, x0, x1);\n-                    } catch (Throwable ex$) {\n-                        throw new AssertionError(\"should not reach here\", ex$);\n-                    }\n-                };\n-            }\n-        }\n-\n-        static final VarHandle indexEntityReference$VH = MemoryHandles.asAddressVarHandle(IndexerCallbacks$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement(\"indexEntityReference\")));\n-        public static VarHandle indexEntityReference$VH() {\n-            return IndexerCallbacks.indexEntityReference$VH;\n-        }\n-        public static MemoryAddress indexEntityReference$get(MemorySegment seg) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexEntityReference$VH.get(seg);\n-        }\n-        public static void indexEntityReference$set( MemorySegment seg, MemoryAddress x) {\n-            IndexerCallbacks.indexEntityReference$VH.set(seg, x);\n-        }\n-        public static MemoryAddress indexEntityReference$get(MemorySegment seg, long index) {\n-            return (jdk.incubator.foreign.MemoryAddress)IndexerCallbacks.indexEntityReference$VH.get(seg.asSlice(index*sizeof()));\n-        }\n-        public static void indexEntityReference$set(MemorySegment seg, long index, MemoryAddress x) {\n-            IndexerCallbacks.indexEntityReference$VH.set(seg.asSlice(index*sizeof()), x);\n-        }\n-        public static IndexerCallbacks.indexEntityReference indexEntityReference (MemorySegment segment) {\n-            return IndexerCallbacks.indexEntityReference.ofAddress(indexEntityReference$get(segment));\n-        }\n-        public static long sizeof() { return $LAYOUT().byteSize(); }\n-        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }\n-        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-        }\n-        public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-            return allocateArray(len, SegmentAllocator.ofScope(scope));\n-        }\n-        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-    }\n-\n-    public static class constants$52 {\n-\n-        static final FunctionDescriptor clang_findReferencesInFile$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"context\"),\n-                C_POINTER.withName(\"visit\")\n-            ).withName(\"CXCursorAndRangeVisitor\")\n-        );\n-        static final MethodHandle clang_findReferencesInFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findReferencesInFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$52.clang_findReferencesInFile$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_findIncludesInFile$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            MemoryLayout.structLayout(\n-                C_POINTER.withName(\"context\"),\n-                C_POINTER.withName(\"visit\")\n-            ).withName(\"CXCursorAndRangeVisitor\")\n-        );\n-        static final MethodHandle clang_findIncludesInFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findIncludesInFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$52.clang_findIncludesInFile$FUNC, false\n-        );\n-        static final FunctionDescriptor CXCursorAndRangeVisitorBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"begin_int_data\"),\n-                C_INT.withName(\"end_int_data\")\n-            )\n-        );\n-        static final MethodHandle CXCursorAndRangeVisitorBlock$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n-            constants$52.CXCursorAndRangeVisitorBlock$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_findReferencesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_findReferencesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findReferencesInFileWithBlock\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$52.clang_findReferencesInFileWithBlock$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_findIncludesInFileWithBlock$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_findIncludesInFileWithBlock$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_findIncludesInFileWithBlock\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$52.clang_findIncludesInFileWithBlock$FUNC, false\n-        );\n-    }\n-\n-    public interface CXFieldVisitor {\n-\n-        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemoryAddress x1);\n-        static MemoryAddress allocate(CXFieldVisitor fi) {\n-            return RuntimeHelper.upcallStub(CXFieldVisitor.class, fi, constants$53.CXFieldVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n-        }\n-        static MemoryAddress allocate(CXFieldVisitor fi, ResourceScope scope) {\n-            return RuntimeHelper.upcallStub(CXFieldVisitor.class, fi, constants$53.CXFieldVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n-        }\n-        static CXFieldVisitor ofAddress(MemoryAddress addr) {\n-            return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n-                try {\n-                    return (int)constants$53.CXFieldVisitor$MH.invokeExact((Addressable)addr, x0, x1);\n-                } catch (Throwable ex$) {\n-                    throw new AssertionError(\"should not reach here\", ex$);\n-                }\n-            };\n-        }\n-    }\n-\n-    public static class constants$53 {\n-\n-        static final FunctionDescriptor CXFieldVisitor$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                C_INT.withName(\"xdata\"),\n-                MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER\n-        );\n-        static final MethodHandle CXFieldVisitor$MH = RuntimeHelper.downcallHandle(\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$53.CXFieldVisitor$FUNC, false\n-        );\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":596,"deletions":10469,"binary":false,"changes":11065,"status":"modified"},{"patch":"@@ -1,594 +0,0 @@\n-\/*\n- *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.  Oracle designates this\n- *  particular file as subject to the \"Classpath\" exception as provided\n- *  by Oracle in the LICENSE file that accompanied this code.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-\/\/ Generated by jextract\n-\n-package jdk.internal.clang.libclang;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.CLinker.*;\n- class Index_h_1 {\n-\n-    public static int CXIdxEntity_TemplateSpecialization() {\n-        return (int)3L;\n-    }\n-    public static int CXIdxAttr_Unexposed() {\n-        return (int)0L;\n-    }\n-    public static int CXIdxAttr_IBAction() {\n-        return (int)1L;\n-    }\n-    public static int CXIdxAttr_IBOutlet() {\n-        return (int)2L;\n-    }\n-    public static int CXIdxAttr_IBOutletCollection() {\n-        return (int)3L;\n-    }\n-    public static int CXIdxDeclFlag_Skipped() {\n-        return (int)1L;\n-    }\n-    public static int CXIdxObjCContainer_ForwardRef() {\n-        return (int)0L;\n-    }\n-    public static int CXIdxObjCContainer_Interface() {\n-        return (int)1L;\n-    }\n-    public static int CXIdxObjCContainer_Implementation() {\n-        return (int)2L;\n-    }\n-    public static int CXIdxEntityRef_Direct() {\n-        return (int)1L;\n-    }\n-    public static int CXIdxEntityRef_Implicit() {\n-        return (int)2L;\n-    }\n-    public static int CXSymbolRole_None() {\n-        return (int)0L;\n-    }\n-    public static int CXSymbolRole_Declaration() {\n-        return (int)1L;\n-    }\n-    public static int CXSymbolRole_Definition() {\n-        return (int)2L;\n-    }\n-    public static int CXSymbolRole_Reference() {\n-        return (int)4L;\n-    }\n-    public static int CXSymbolRole_Read() {\n-        return (int)8L;\n-    }\n-    public static int CXSymbolRole_Write() {\n-        return (int)16L;\n-    }\n-    public static int CXSymbolRole_Call() {\n-        return (int)32L;\n-    }\n-    public static int CXSymbolRole_Dynamic() {\n-        return (int)64L;\n-    }\n-    public static int CXSymbolRole_AddressOf() {\n-        return (int)128L;\n-    }\n-    public static int CXSymbolRole_Implicit() {\n-        return (int)256L;\n-    }\n-    public static MethodHandle clang_index_isEntityObjCContainerKind$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_index_isEntityObjCContainerKind$MH,\"clang_index_isEntityObjCContainerKind\");\n-    }\n-    public static int clang_index_isEntityObjCContainerKind ( int x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_isEntityObjCContainerKind$MH, \"clang_index_isEntityObjCContainerKind\");\n-        try {\n-            return (int)mh$.invokeExact(x0);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getObjCContainerDeclInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCContainerDeclInfo$MH,\"clang_index_getObjCContainerDeclInfo\");\n-    }\n-    public static MemoryAddress clang_index_getObjCContainerDeclInfo ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCContainerDeclInfo$MH, \"clang_index_getObjCContainerDeclInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getObjCInterfaceDeclInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCInterfaceDeclInfo$MH,\"clang_index_getObjCInterfaceDeclInfo\");\n-    }\n-    public static MemoryAddress clang_index_getObjCInterfaceDeclInfo ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCInterfaceDeclInfo$MH, \"clang_index_getObjCInterfaceDeclInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getObjCCategoryDeclInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCCategoryDeclInfo$MH,\"clang_index_getObjCCategoryDeclInfo\");\n-    }\n-    public static MemoryAddress clang_index_getObjCCategoryDeclInfo ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCCategoryDeclInfo$MH, \"clang_index_getObjCCategoryDeclInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getObjCProtocolRefListInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCProtocolRefListInfo$MH,\"clang_index_getObjCProtocolRefListInfo\");\n-    }\n-    public static MemoryAddress clang_index_getObjCProtocolRefListInfo ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCProtocolRefListInfo$MH, \"clang_index_getObjCProtocolRefListInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getObjCPropertyDeclInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCPropertyDeclInfo$MH,\"clang_index_getObjCPropertyDeclInfo\");\n-    }\n-    public static MemoryAddress clang_index_getObjCPropertyDeclInfo ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.clang_index_getObjCPropertyDeclInfo$MH, \"clang_index_getObjCPropertyDeclInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$0 {\n-\n-        static final FunctionDescriptor clang_index_isEntityObjCContainerKind$FUNC = FunctionDescriptor.of(C_INT,\n-            C_INT\n-        );\n-        static final MethodHandle clang_index_isEntityObjCContainerKind$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_isEntityObjCContainerKind\",\n-            \"(I)I\",\n-            constants$0.clang_index_isEntityObjCContainerKind$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getObjCContainerDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getObjCContainerDeclInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getObjCContainerDeclInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$0.clang_index_getObjCContainerDeclInfo$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getObjCInterfaceDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getObjCInterfaceDeclInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getObjCInterfaceDeclInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$0.clang_index_getObjCInterfaceDeclInfo$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getObjCCategoryDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getObjCCategoryDeclInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getObjCCategoryDeclInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$0.clang_index_getObjCCategoryDeclInfo$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getObjCProtocolRefListInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getObjCProtocolRefListInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getObjCProtocolRefListInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$0.clang_index_getObjCProtocolRefListInfo$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getObjCPropertyDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getObjCPropertyDeclInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getObjCPropertyDeclInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$0.clang_index_getObjCPropertyDeclInfo$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_index_getIBOutletCollectionAttrInfo$MH,\"clang_index_getIBOutletCollectionAttrInfo\");\n-    }\n-    public static MemoryAddress clang_index_getIBOutletCollectionAttrInfo ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getIBOutletCollectionAttrInfo$MH, \"clang_index_getIBOutletCollectionAttrInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getCXXClassDeclInfo$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_index_getCXXClassDeclInfo$MH,\"clang_index_getCXXClassDeclInfo\");\n-    }\n-    public static MemoryAddress clang_index_getCXXClassDeclInfo ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getCXXClassDeclInfo$MH, \"clang_index_getCXXClassDeclInfo\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getClientContainer$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_index_getClientContainer$MH,\"clang_index_getClientContainer\");\n-    }\n-    public static MemoryAddress clang_index_getClientContainer ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getClientContainer$MH, \"clang_index_getClientContainer\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_setClientContainer$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_index_setClientContainer$MH,\"clang_index_setClientContainer\");\n-    }\n-    public static void clang_index_setClientContainer ( Addressable x0,  Addressable x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_setClientContainer$MH, \"clang_index_setClientContainer\");\n-        try {\n-            mh$.invokeExact(x0.address(), x1.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_getClientEntity$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_index_getClientEntity$MH,\"clang_index_getClientEntity\");\n-    }\n-    public static MemoryAddress clang_index_getClientEntity ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_getClientEntity$MH, \"clang_index_getClientEntity\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_index_setClientEntity$MH() {\n-        return RuntimeHelper.requireNonNull(constants$1.clang_index_setClientEntity$MH,\"clang_index_setClientEntity\");\n-    }\n-    public static void clang_index_setClientEntity ( Addressable x0,  Addressable x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$1.clang_index_setClientEntity$MH, \"clang_index_setClientEntity\");\n-        try {\n-            mh$.invokeExact(x0.address(), x1.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$1 {\n-\n-        static final FunctionDescriptor clang_index_getIBOutletCollectionAttrInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getIBOutletCollectionAttrInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getIBOutletCollectionAttrInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$1.clang_index_getIBOutletCollectionAttrInfo$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getCXXClassDeclInfo$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getCXXClassDeclInfo$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getCXXClassDeclInfo\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$1.clang_index_getCXXClassDeclInfo$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getClientContainer$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getClientContainer$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getClientContainer\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$1.clang_index_getClientContainer$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_setClientContainer$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_setClientContainer$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_setClientContainer\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$1.clang_index_setClientContainer$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_getClientEntity$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_getClientEntity$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_getClientEntity\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$1.clang_index_getClientEntity$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_index_setClientEntity$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_index_setClientEntity$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_index_setClientEntity\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$1.clang_index_setClientEntity$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_IndexAction_create$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_create$MH,\"clang_IndexAction_create\");\n-    }\n-    public static MemoryAddress clang_IndexAction_create ( Addressable CIdx) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_create$MH, \"clang_IndexAction_create\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_IndexAction_dispose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_dispose$MH,\"clang_IndexAction_dispose\");\n-    }\n-    public static void clang_IndexAction_dispose ( Addressable x0) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_IndexAction_dispose$MH, \"clang_IndexAction_dispose\");\n-        try {\n-            mh$.invokeExact(x0.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CXIndexOpt_None() {\n-        return (int)0L;\n-    }\n-    public static int CXIndexOpt_SuppressRedundantRefs() {\n-        return (int)1L;\n-    }\n-    public static int CXIndexOpt_IndexFunctionLocalSymbols() {\n-        return (int)2L;\n-    }\n-    public static int CXIndexOpt_IndexImplicitTemplateInstantiations() {\n-        return (int)4L;\n-    }\n-    public static int CXIndexOpt_SuppressWarnings() {\n-        return (int)8L;\n-    }\n-    public static int CXIndexOpt_SkipParsedBodiesInSession() {\n-        return (int)16L;\n-    }\n-    public static MethodHandle clang_indexSourceFile$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFile$MH,\"clang_indexSourceFile\");\n-    }\n-    public static int clang_indexSourceFile ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  Addressable out_TU,  int TU_options) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFile$MH, \"clang_indexSourceFile\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_indexSourceFileFullArgv$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFileFullArgv$MH,\"clang_indexSourceFileFullArgv\");\n-    }\n-    public static int clang_indexSourceFileFullArgv ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable source_filename,  Addressable command_line_args,  int num_command_line_args,  Addressable unsaved_files,  int num_unsaved_files,  Addressable out_TU,  int TU_options) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexSourceFileFullArgv$MH, \"clang_indexSourceFileFullArgv\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, source_filename.address(), command_line_args.address(), num_command_line_args, unsaved_files.address(), num_unsaved_files, out_TU.address(), TU_options);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_indexTranslationUnit$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_indexTranslationUnit$MH,\"clang_indexTranslationUnit\");\n-    }\n-    public static int clang_indexTranslationUnit ( Addressable x0,  Addressable client_data,  Addressable index_callbacks,  int index_callbacks_size,  int index_options,  Addressable x5) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexTranslationUnit$MH, \"clang_indexTranslationUnit\");\n-        try {\n-            return (int)mh$.invokeExact(x0.address(), client_data.address(), index_callbacks.address(), index_callbacks_size, index_options, x5.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle clang_indexLoc_getFileLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$2.clang_indexLoc_getFileLocation$MH,\"clang_indexLoc_getFileLocation\");\n-    }\n-    public static void clang_indexLoc_getFileLocation ( MemorySegment loc,  Addressable indexFile,  Addressable file,  Addressable line,  Addressable column,  Addressable offset) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$2.clang_indexLoc_getFileLocation$MH, \"clang_indexLoc_getFileLocation\");\n-        try {\n-            mh$.invokeExact(loc, indexFile.address(), file.address(), line.address(), column.address(), offset.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static class constants$2 {\n-\n-        static final FunctionDescriptor clang_IndexAction_create$FUNC = FunctionDescriptor.of(C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_IndexAction_create$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_IndexAction_create\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n-            constants$2.clang_IndexAction_create$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_IndexAction_dispose$FUNC = FunctionDescriptor.ofVoid(\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_IndexAction_dispose$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_IndexAction_dispose\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$2.clang_IndexAction_dispose$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_indexSourceFile$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_indexSourceFile$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_indexSourceFile\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$2.clang_indexSourceFile$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_indexSourceFileFullArgv$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT,\n-            C_POINTER,\n-            C_INT\n-        );\n-        static final MethodHandle clang_indexSourceFileFullArgv$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_indexSourceFileFullArgv\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n-            constants$2.clang_indexSourceFileFullArgv$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_indexTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_INT,\n-            C_INT,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_indexTranslationUnit$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_indexTranslationUnit\",\n-            \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$2.clang_indexTranslationUnit$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_indexLoc_getFileLocation$FUNC = FunctionDescriptor.ofVoid(\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            ),\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_indexLoc_getFileLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_indexLoc_getFileLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n-            constants$2.clang_indexLoc_getFileLocation$FUNC, false\n-        );\n-    }\n-\n-    public static MethodHandle clang_indexLoc_getCXSourceLocation$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_indexLoc_getCXSourceLocation$MH,\"clang_indexLoc_getCXSourceLocation\");\n-    }\n-    public static MemorySegment clang_indexLoc_getCXSourceLocation ( SegmentAllocator allocator,  MemorySegment loc) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_indexLoc_getCXSourceLocation$MH, \"clang_indexLoc_getCXSourceLocation\");\n-        try {\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, loc);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment clang_indexLoc_getCXSourceLocation ( ResourceScope scope,  MemorySegment loc) {\n-        return clang_indexLoc_getCXSourceLocation(SegmentAllocator.ofScope(scope), loc);\n-    }\n-    public static MethodHandle clang_Type_visitFields$MH() {\n-        return RuntimeHelper.requireNonNull(constants$3.clang_Type_visitFields$MH,\"clang_Type_visitFields\");\n-    }\n-    public static int clang_Type_visitFields ( MemorySegment T,  Addressable visitor,  Addressable client_data) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$3.clang_Type_visitFields$MH, \"clang_Type_visitFields\");\n-        try {\n-            return (int)mh$.invokeExact(T, visitor.address(), client_data.address());\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static int CINDEX_VERSION() {\n-        return (int)59L;\n-    }\n-    public static MemorySegment CINDEX_VERSION_STRING() {\n-        return constants$3.CINDEX_VERSION_STRING$SEGMENT;\n-    }\n-\n-    \/\/ Manual change to handle platform specific library name difference\n-    private static String libName() {\n-        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n-            return \"libclang\";\n-        }\n-        return \"clang\";\n-    }\n-\n-    static {\n-        System.loadLibrary(libName());\n-    }\n-\n-    static final SymbolLookup LIBRARIES = SymbolLookup.loaderLookup();\n-\n-    public static class constants$3 {\n-\n-        static final FunctionDescriptor clang_indexLoc_getCXSourceLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-            C_INT.withName(\"int_data\"),\n-            MemoryLayout.paddingLayout(32)\n-        ),\n-            MemoryLayout.structLayout(\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n-                C_INT.withName(\"int_data\"),\n-                MemoryLayout.paddingLayout(32)\n-            )\n-        );\n-        static final MethodHandle clang_indexLoc_getCXSourceLocation$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_indexLoc_getCXSourceLocation\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n-            constants$3.clang_indexLoc_getCXSourceLocation$FUNC, false\n-        );\n-        static final FunctionDescriptor clang_Type_visitFields$FUNC = FunctionDescriptor.of(C_INT,\n-            MemoryLayout.structLayout(\n-                C_INT.withName(\"kind\"),\n-                MemoryLayout.paddingLayout(32),\n-                MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n-            ),\n-            C_POINTER,\n-            C_POINTER\n-        );\n-        static final MethodHandle clang_Type_visitFields$MH = RuntimeHelper.downcallHandle(\n-            LIBRARIES, \"clang_Type_visitFields\",\n-            \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n-            constants$3.clang_Type_visitFields$FUNC, false\n-        );\n-        static final MemorySegment CINDEX_VERSION_STRING$SEGMENT = CLinker.toCString(\"0.59\", ResourceScope.newImplicitScope());\n-    }\n-\n-}\n-\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h_1.java","additions":0,"deletions":594,"binary":false,"changes":594,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.clang.libclang;\n-\/\/ Generated by jextract\n-\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-\n-public class NativeScope implements SegmentAllocator, AutoCloseable {\n-    final ResourceScope resourceScope;\n-    final ResourceScope.Handle scopeHandle;\n-    final SegmentAllocator allocator;\n-\n-    long allocatedBytes = 0;\n-\n-    private NativeScope() {\n-        this.resourceScope = ResourceScope.newConfinedScope();\n-        this.scopeHandle = resourceScope.acquire();\n-        this.allocator = SegmentAllocator.arenaAllocator(resourceScope);\n-    }\n-\n-    private NativeScope(long size) {\n-        this.resourceScope = ResourceScope.newConfinedScope();\n-        this.scopeHandle = resourceScope.acquire();\n-        this.allocator = SegmentAllocator.arenaAllocator(size, resourceScope);\n-    }\n-\n-    @Override\n-    public MemorySegment allocate(long bytesSize, long bytesAlignment) {\n-        allocatedBytes += bytesSize;\n-        return allocator.allocate(bytesSize, bytesAlignment);\n-    }\n-\n-    public ResourceScope scope() {\n-        return resourceScope;\n-    }\n-\n-    public long allocatedBytes() {\n-        return allocatedBytes;\n-    }\n-\n-    @Override\n-    public void close() {\n-        resourceScope.release(scopeHandle);\n-        resourceScope.close();\n-    }\n-\n-    public static NativeScope unboundedScope() {\n-        return new NativeScope();\n-    }\n-\n-    public static NativeScope boundedScope(long size) {\n-        return new NativeScope(size);\n-    }\n-}\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/NativeScope.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -24,1 +24,0 @@\n- *\n@@ -33,0 +32,1 @@\n+import jdk.incubator.foreign.SymbolLookup;\n@@ -38,2 +38,0 @@\n-import jdk.incubator.foreign.SymbolLookup;\n-\n@@ -58,0 +56,6 @@\n+    static SymbolLookup lookup() {\n+        SymbolLookup loaderLookup = SymbolLookup.loaderLookup();\n+        SymbolLookup systemLookup = CLinker.systemLookup();\n+        return name -> loaderLookup.lookup(name).or(() -> systemLookup.lookup(name));\n+    }\n+\n@@ -93,4 +97,0 @@\n-    static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, NativeScope scope) {\n-        return upcallStub(fi, z, fdesc, mtypeDesc, scope.scope());\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$0 {\n+\n+    static final FunctionDescriptor clang_getCString$FUNC = FunctionDescriptor.of(C_POINTER,\n+        MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        )\n+    );\n+    static final MethodHandle clang_getCString$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCString\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$0.clang_getCString$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_disposeString$FUNC = FunctionDescriptor.ofVoid(\n+        MemoryLayout.structLayout(\n+            C_POINTER.withName(\"data\"),\n+            C_INT.withName(\"private_flags\"),\n+            MemoryLayout.paddingLayout(32)\n+        )\n+    );\n+    static final MethodHandle clang_disposeString$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_disposeString\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)V\",\n+        constants$0.clang_disposeString$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_createIndex$FUNC = FunctionDescriptor.of(C_POINTER,\n+        C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_createIndex$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_createIndex\",\n+        \"(II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$0.clang_createIndex$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_disposeIndex$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_disposeIndex$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_disposeIndex\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$0.clang_disposeIndex$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getFileName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getFileName$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getFileName\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$0.clang_getFileName$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getNullLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ));\n+    static final MethodHandle clang_getNullLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getNullLocation\",\n+        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$0.clang_getNullLocation$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$0.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$1 {\n+\n+    static final FunctionDescriptor clang_equalLocations$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        )\n+    );\n+    static final MethodHandle clang_equalLocations$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_equalLocations\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$1.clang_equalLocations$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER,\n+        C_POINTER,\n+        C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_getLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getLocation\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$1.clang_getLocation$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getLocationForOffset$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER,\n+        C_POINTER,\n+        C_INT\n+    );\n+    static final MethodHandle clang_getLocationForOffset$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getLocationForOffset\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$1.clang_getLocationForOffset$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Location_isInSystemHeader$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        )\n+    );\n+    static final MethodHandle clang_Location_isInSystemHeader$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Location_isInSystemHeader\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$1.clang_Location_isInSystemHeader$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Location_isFromMainFile$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        )\n+    );\n+    static final MethodHandle clang_Location_isFromMainFile$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Location_isFromMainFile\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$1.clang_Location_isFromMainFile$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Range_isNull$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        )\n+    );\n+    static final MethodHandle clang_Range_isNull$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Range_isNull\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$1.clang_Range_isNull$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$1.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$10 {\n+\n+    static final FunctionDescriptor clang_getTypeDeclaration$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        C_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTypeDeclaration$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTypeDeclaration\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$10.clang_getTypeDeclaration$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTypeKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_INT\n+    );\n+    static final MethodHandle clang_getTypeKindSpelling$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTypeKindSpelling\",\n+        \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$10.clang_getTypeKindSpelling$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getFunctionTypeCallingConv$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getFunctionTypeCallingConv$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getFunctionTypeCallingConv\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$10.clang_getFunctionTypeCallingConv$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getResultType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getResultType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$10.clang_getResultType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getNumArgTypes$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getNumArgTypes$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getNumArgTypes\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$10.clang_getNumArgTypes$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getArgType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        ),\n+        C_INT\n+    );\n+    static final MethodHandle clang_getArgType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getArgType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$10.clang_getArgType$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$10.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$11 {\n+\n+    static final FunctionDescriptor clang_isFunctionTypeVariadic$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_isFunctionTypeVariadic$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isFunctionTypeVariadic\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$11.clang_isFunctionTypeVariadic$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorResultType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorResultType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$11.clang_getCursorResultType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getElementType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getElementType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$11.clang_getElementType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getNumElements$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getNumElements$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getNumElements\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        constants$11.clang_getNumElements$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getArrayElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getArrayElementType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getArrayElementType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$11.clang_getArrayElementType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getArraySize$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getArraySize$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getArraySize\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        constants$11.clang_getArraySize$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$11.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$12 {\n+\n+    static final FunctionDescriptor clang_Type_getSizeOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Type_getSizeOf$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Type_getSizeOf\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        constants$12.clang_Type_getSizeOf$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Type_getOffsetOf$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        ),\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_Type_getOffsetOf$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Type_getOffsetOf\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+        constants$12.clang_Type_getOffsetOf$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_isAnonymous$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isAnonymous$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_isAnonymous\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$12.clang_Cursor_isAnonymous$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_isAnonymousRecordDecl\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$12.clang_Cursor_isAnonymousRecordDecl$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_isBitField$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isBitField$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_isBitField\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$12.clang_Cursor_isBitField$FUNC, false\n+    );\n+    static final FunctionDescriptor CXCursorVisitor$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        C_POINTER\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$12.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$13 {\n+\n+    static final FunctionDescriptor CXCursorVisitor$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        C_POINTER\n+    );\n+    static final MethodHandle CXCursorVisitor$MH = RuntimeHelper.downcallHandle(\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$13.CXCursorVisitor$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_visitChildren$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        C_POINTER,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_visitChildren$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_visitChildren\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$13.clang_visitChildren$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorUSR$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorUSR$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorUSR\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$13.clang_getCursorUSR$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorSpelling$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorSpelling\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$13.clang_getCursorSpelling$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER,\n+        C_INT\n+    );\n+    static final MethodHandle clang_PrintingPolicy_getProperty$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_PrintingPolicy_getProperty\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+        constants$13.clang_PrintingPolicy_getProperty$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_PrintingPolicy_setProperty$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER,\n+        C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_PrintingPolicy_setProperty$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_PrintingPolicy_setProperty\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;II)V\",\n+        constants$13.clang_PrintingPolicy_setProperty$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$13.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$14 {\n+\n+    static final FunctionDescriptor clang_getCursorPrintingPolicy$FUNC = FunctionDescriptor.of(C_POINTER,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorPrintingPolicy$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorPrintingPolicy\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$14.clang_getCursorPrintingPolicy$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_PrintingPolicy_dispose$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_PrintingPolicy_dispose$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_PrintingPolicy_dispose\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$14.clang_PrintingPolicy_dispose$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorPrettyPrinted$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getCursorPrettyPrinted$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorPrettyPrinted\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$14.clang_getCursorPrettyPrinted$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorDisplayName$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorDisplayName\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$14.clang_getCursorDisplayName$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        C_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorReferenced$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorReferenced\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$14.clang_getCursorReferenced$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorDefinition$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        C_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorDefinition$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorDefinition\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$14.clang_getCursorDefinition$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$14.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$15 {\n+\n+    static final FunctionDescriptor clang_isCursorDefinition$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_isCursorDefinition$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isCursorDefinition\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$15.clang_isCursorDefinition$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_isVariadic$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isVariadic$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_isVariadic\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$15.clang_Cursor_isVariadic$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_getMangling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_getMangling$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_getMangling\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$15.clang_Cursor_getMangling$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTokenKind$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n+            C_POINTER.withName(\"ptr_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTokenKind$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTokenKind\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$15.clang_getTokenKind$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n+            C_POINTER.withName(\"ptr_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTokenSpelling$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTokenSpelling\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$15.clang_getTokenSpelling$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTokenLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n+            C_POINTER.withName(\"ptr_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTokenLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTokenLocation\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$15.clang_getTokenLocation$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$15.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$16 {\n+\n+    static final FunctionDescriptor clang_getTokenExtent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"begin_int_data\"),\n+        C_INT.withName(\"end_int_data\")\n+    ),\n+        C_POINTER,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(4, C_INT).withName(\"int_data\"),\n+            C_POINTER.withName(\"ptr_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTokenExtent$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTokenExtent\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$16.clang_getTokenExtent$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_tokenize$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        ),\n+        C_POINTER,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_tokenize$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_tokenize\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$16.clang_tokenize$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_disposeTokens$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER,\n+        C_POINTER,\n+        C_INT\n+    );\n+    static final MethodHandle clang_disposeTokens$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_disposeTokens\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)V\",\n+        constants$16.clang_disposeTokens$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_INT\n+    );\n+    static final MethodHandle clang_getCursorKindSpelling$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorKindSpelling\",\n+        \"(I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$16.clang_getCursorKindSpelling$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ));\n+    static final MethodHandle clang_getClangVersion$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getClangVersion\",\n+        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$16.clang_getClangVersion$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_toggleCrashRecovery$FUNC = FunctionDescriptor.ofVoid(\n+        C_INT\n+    );\n+    static final MethodHandle clang_toggleCrashRecovery$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_toggleCrashRecovery\",\n+        \"(I)V\",\n+        constants$16.clang_toggleCrashRecovery$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$16.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$17 {\n+\n+    static final FunctionDescriptor clang_Cursor_Evaluate$FUNC = FunctionDescriptor.of(C_POINTER,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_Evaluate$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_Evaluate\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$17.clang_Cursor_Evaluate$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_EvalResult_getKind$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_getKind$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_getKind\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$17.clang_EvalResult_getKind$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_EvalResult_getAsInt$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_getAsInt$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_getAsInt\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$17.clang_EvalResult_getAsInt$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_getAsLongLong$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_getAsLongLong\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+        constants$17.clang_EvalResult_getAsLongLong$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_isUnsignedInt$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_isUnsignedInt\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$17.clang_EvalResult_isUnsignedInt$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_EvalResult_getAsUnsigned$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_getAsUnsigned$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_getAsUnsigned\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)J\",\n+        constants$17.clang_EvalResult_getAsUnsigned$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$17.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$18 {\n+\n+    static final FunctionDescriptor clang_EvalResult_getAsDouble$FUNC = FunctionDescriptor.of(C_DOUBLE,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_getAsDouble$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_getAsDouble\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)D\",\n+        constants$18.clang_EvalResult_getAsDouble$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_EvalResult_getAsStr$FUNC = FunctionDescriptor.of(C_POINTER,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_getAsStr$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_getAsStr\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$18.clang_EvalResult_getAsStr$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_EvalResult_dispose$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_EvalResult_dispose$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_EvalResult_dispose\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$18.clang_EvalResult_dispose$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$18.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$2 {\n+\n+    static final FunctionDescriptor clang_getExpansionLocation$FUNC = FunctionDescriptor.ofVoid(\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getExpansionLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getExpansionLocation\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$2.clang_getExpansionLocation$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getSpellingLocation$FUNC = FunctionDescriptor.ofVoid(\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getSpellingLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getSpellingLocation\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$2.clang_getSpellingLocation$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getFileLocation$FUNC = FunctionDescriptor.ofVoid(\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"int_data\"),\n+            MemoryLayout.paddingLayout(32)\n+        ),\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getFileLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getFileLocation\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$2.clang_getFileLocation$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getRangeStart$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getRangeStart$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getRangeStart\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$2.clang_getRangeStart$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getRangeEnd$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+            C_INT.withName(\"begin_int_data\"),\n+            C_INT.withName(\"end_int_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getRangeEnd$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getRangeEnd\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$2.clang_getRangeEnd$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getChildDiagnostics$FUNC = FunctionDescriptor.of(C_POINTER,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getChildDiagnostics$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getChildDiagnostics\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$2.clang_getChildDiagnostics$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$2.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$3 {\n+\n+    static final FunctionDescriptor clang_getNumDiagnostics$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getNumDiagnostics$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getNumDiagnostics\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$3.clang_getNumDiagnostics$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getDiagnostic$FUNC = FunctionDescriptor.of(C_POINTER,\n+        C_POINTER,\n+        C_INT\n+    );\n+    static final MethodHandle clang_getDiagnostic$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getDiagnostic\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$3.clang_getDiagnostic$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_disposeDiagnostic$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_disposeDiagnostic$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_disposeDiagnostic\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$3.clang_disposeDiagnostic$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_formatDiagnostic$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER,\n+        C_INT\n+    );\n+    static final MethodHandle clang_formatDiagnostic$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_formatDiagnostic\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$3.clang_formatDiagnostic$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_defaultDiagnosticDisplayOptions$FUNC = FunctionDescriptor.of(C_INT);\n+    static final MethodHandle clang_defaultDiagnosticDisplayOptions$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_defaultDiagnosticDisplayOptions\",\n+        \"()I\",\n+        constants$3.clang_defaultDiagnosticDisplayOptions$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getDiagnosticSeverity$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getDiagnosticSeverity$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getDiagnosticSeverity\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$3.clang_getDiagnosticSeverity$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$3.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$4 {\n+\n+    static final FunctionDescriptor clang_getDiagnosticLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getDiagnosticLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getDiagnosticLocation\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$4.clang_getDiagnosticLocation$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getDiagnosticSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getDiagnosticSpelling$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getDiagnosticSpelling\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$4.clang_getDiagnosticSpelling$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_parseTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER,\n+        C_INT,\n+        C_POINTER,\n+        C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_parseTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_parseTranslationUnit\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;II)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$4.clang_parseTranslationUnit$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_parseTranslationUnit2$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER,\n+        C_POINTER,\n+        C_POINTER,\n+        C_INT,\n+        C_POINTER,\n+        C_INT,\n+        C_INT,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_parseTranslationUnit2$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_parseTranslationUnit2\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;IILjdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$4.clang_parseTranslationUnit2$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_saveTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER,\n+        C_POINTER,\n+        C_INT\n+    );\n+    static final MethodHandle clang_saveTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_saveTranslationUnit\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+        constants$4.clang_saveTranslationUnit$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_disposeTranslationUnit$FUNC = FunctionDescriptor.ofVoid(\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_disposeTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_disposeTranslationUnit\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\",\n+        constants$4.clang_disposeTranslationUnit$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$4.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$5 {\n+\n+    static final FunctionDescriptor clang_defaultReparseOptions$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_defaultReparseOptions$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_defaultReparseOptions\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)I\",\n+        constants$5.clang_defaultReparseOptions$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_reparseTranslationUnit$FUNC = FunctionDescriptor.of(C_INT,\n+        C_POINTER,\n+        C_INT,\n+        C_POINTER,\n+        C_INT\n+    );\n+    static final MethodHandle clang_reparseTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_reparseTranslationUnit\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;ILjdk\/incubator\/foreign\/MemoryAddress;I)I\",\n+        constants$5.clang_reparseTranslationUnit$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getNullCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        C_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+    ));\n+    static final MethodHandle clang_getNullCursor$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getNullCursor\",\n+        \"()Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$5.clang_getNullCursor$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTranslationUnitCursor$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        C_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+    ),\n+        C_POINTER\n+    );\n+    static final MethodHandle clang_getTranslationUnitCursor$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTranslationUnitCursor\",\n+        \"(Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$5.clang_getTranslationUnitCursor$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_equalCursors$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_equalCursors$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_equalCursors\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$5.clang_equalCursors$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_isNull$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isNull$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_isNull\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$5.clang_Cursor_isNull$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$5.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$6 {\n+\n+    static final FunctionDescriptor clang_getCursorKind$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorKind$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorKind\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$6.clang_getCursorKind$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_isDeclaration$FUNC = FunctionDescriptor.of(C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_isDeclaration$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isDeclaration\",\n+        \"(I)I\",\n+        constants$6.clang_isDeclaration$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_isAttribute$FUNC = FunctionDescriptor.of(C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_isAttribute$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isAttribute\",\n+        \"(I)I\",\n+        constants$6.clang_isAttribute$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_isInvalid$FUNC = FunctionDescriptor.of(C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_isInvalid$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isInvalid\",\n+        \"(I)I\",\n+        constants$6.clang_isInvalid$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_isPreprocessing$FUNC = FunctionDescriptor.of(C_INT,\n+        C_INT\n+    );\n+    static final MethodHandle clang_isPreprocessing$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isPreprocessing\",\n+        \"(I)I\",\n+        constants$6.clang_isPreprocessing$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_getTranslationUnit$FUNC = FunctionDescriptor.of(C_POINTER,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_getTranslationUnit$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_getTranslationUnit\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemoryAddress;\",\n+        constants$6.clang_Cursor_getTranslationUnit$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$6.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$7 {\n+\n+    static final FunctionDescriptor clang_getCursorLocation$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"int_data\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorLocation$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorLocation\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$7.clang_getCursorLocation$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorExtent$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"ptr_data\"),\n+        C_INT.withName(\"begin_int_data\"),\n+        C_INT.withName(\"end_int_data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorExtent$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorExtent\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$7.clang_getCursorExtent$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getCursorType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCursorType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$7.clang_getCursorType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTypeSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTypeSpelling$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTypeSpelling\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$7.clang_getTypeSpelling$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTypedefDeclUnderlyingType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTypedefDeclUnderlyingType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$7.clang_getTypedefDeclUnderlyingType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getEnumDeclIntegerType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getEnumDeclIntegerType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getEnumDeclIntegerType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$7.clang_getEnumDeclIntegerType$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$7.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$8 {\n+\n+    static final FunctionDescriptor clang_getEnumConstantDeclValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getEnumConstantDeclValue$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getEnumConstantDeclValue\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        constants$8.clang_getEnumConstantDeclValue$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getEnumConstantDeclUnsignedValue$FUNC = FunctionDescriptor.of(C_LONG_LONG,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getEnumConstantDeclUnsignedValue$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getEnumConstantDeclUnsignedValue\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)J\",\n+        constants$8.clang_getEnumConstantDeclUnsignedValue$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getFieldDeclBitWidth$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getFieldDeclBitWidth$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getFieldDeclBitWidth\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$8.clang_getFieldDeclBitWidth$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_getNumArguments$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_getNumArguments$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_getNumArguments\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$8.clang_Cursor_getNumArguments$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_getArgument$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        C_INT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        ),\n+        C_INT\n+    );\n+    static final MethodHandle clang_Cursor_getArgument$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_getArgument\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;I)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$8.clang_Cursor_getArgument$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_equalTypes$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_equalTypes$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_equalTypes\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$8.clang_equalTypes$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$8.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.CLinker.*;\n+class constants$9 {\n+\n+    static final FunctionDescriptor clang_getCanonicalType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCanonicalType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getCanonicalType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$9.clang_getCanonicalType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_isConstQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_isConstQualifiedType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isConstQualifiedType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$9.clang_isConstQualifiedType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_Cursor_isMacroFunctionLike$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            C_INT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isMacroFunctionLike$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_Cursor_isMacroFunctionLike\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$9.clang_Cursor_isMacroFunctionLike$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC = FunctionDescriptor.of(C_INT,\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_isVolatileQualifiedType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_isVolatileQualifiedType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)I\",\n+        constants$9.clang_isVolatileQualifiedType$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getTypedefName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_POINTER.withName(\"data\"),\n+        C_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTypedefName$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getTypedefName\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$9.clang_getTypedefName$FUNC, false\n+    );\n+    static final FunctionDescriptor clang_getPointeeType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        C_INT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            C_INT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, C_POINTER).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getPointeeType$MH = RuntimeHelper.downcallHandle(\n+        Index_h.LIBRARIES, \"clang_getPointeeType\",\n+        \"(Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment;\",\n+        constants$9.clang_getPointeeType$FUNC, false\n+    );\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/constants$9.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"}]}