{"files":[{"patch":"@@ -61,2 +61,2 @@\n-    \/\/ Suppresses default constructor, ensuring non-instantiability.\n-    private ValueLayouts() {}\n+    private ValueLayouts() {\n+    }\n@@ -73,0 +73,4 @@\n+        AbstractValueLayout(Class<?> carrier, ByteOrder order, long bitSize) {\n+            this(carrier, order, bitSize, bitSize, Optional.empty());\n+        }\n+\n@@ -187,0 +191,4 @@\n+        private OfBooleanImpl(ByteOrder order) {\n+            super(boolean.class, order, 8);\n+        }\n+\n@@ -188,1 +196,1 @@\n-            super(boolean.class, order, Byte.SIZE, bitAlignment, name);\n+            super(boolean.class, order, 8, bitAlignment, name);\n@@ -198,0 +206,1 @@\n+            Objects.requireNonNull(order);\n@@ -202,1 +211,1 @@\n-            return new OfBooleanImpl(order, Byte.SIZE, Optional.empty());\n+            return new OfBooleanImpl(order);\n@@ -208,0 +217,4 @@\n+        private OfByteImpl(ByteOrder order) {\n+            super(byte.class, order, 8);\n+        }\n+\n@@ -209,1 +222,1 @@\n-            super(byte.class, order, Byte.SIZE, bitAlignment, name);\n+            super(byte.class, order, 8, bitAlignment, name);\n@@ -219,0 +232,1 @@\n+            Objects.requireNonNull(order);\n@@ -223,1 +237,1 @@\n-            return new OfByteImpl(order, Byte.SIZE, Optional.empty());\n+            return new OfByteImpl(order);\n@@ -229,0 +243,4 @@\n+        private OfCharImpl(ByteOrder order) {\n+            super(char.class, order, 16);\n+        }\n+\n@@ -230,1 +248,1 @@\n-            super(char.class, order, Character.SIZE, bitAlignment, name);\n+            super(char.class, order, 16, bitAlignment, name);\n@@ -240,0 +258,1 @@\n+            Objects.requireNonNull(order);\n@@ -244,1 +263,1 @@\n-            return new OfCharImpl(order, Character.SIZE, Optional.empty());\n+            return new OfCharImpl(order);\n@@ -250,0 +269,4 @@\n+        private OfShortImpl(ByteOrder order) {\n+            super(short.class, order, 16);\n+        }\n+\n@@ -251,1 +274,1 @@\n-            super(short.class, order, Short.SIZE, bitAlignment, name);\n+            super(short.class, order, 16, bitAlignment, name);\n@@ -261,0 +284,1 @@\n+            Objects.requireNonNull(order);\n@@ -265,1 +289,1 @@\n-            return new OfShortImpl(order, Short.SIZE, Optional.empty());\n+            return new OfShortImpl(order);\n@@ -271,0 +295,4 @@\n+        private OfIntImpl(ByteOrder order) {\n+            super(int.class, order, 32);\n+        }\n+\n@@ -272,1 +300,1 @@\n-            super(int.class, order, Integer.SIZE, bitAlignment, name);\n+            super(int.class, order, 32, bitAlignment, name);\n@@ -282,0 +310,1 @@\n+            Objects.requireNonNull(order);\n@@ -286,1 +315,1 @@\n-            return new OfIntImpl(order, Integer.SIZE, Optional.empty());\n+            return new OfIntImpl(order);\n@@ -292,0 +321,4 @@\n+        private OfFloatImpl(ByteOrder order) {\n+            super(float.class, order, 32);\n+        }\n+\n@@ -293,1 +326,1 @@\n-            super(float.class, order, Float.SIZE, bitAlignment, name);\n+            super(float.class, order, 32, bitAlignment, name);\n@@ -303,0 +336,1 @@\n+            Objects.requireNonNull(order);\n@@ -307,1 +341,1 @@\n-            return new OfFloatImpl(order, Float.SIZE, Optional.empty());\n+            return new OfFloatImpl(order);\n@@ -313,0 +347,4 @@\n+        private OfLongImpl(ByteOrder order) {\n+            super(long.class, order, 64);\n+        }\n+\n@@ -314,1 +352,1 @@\n-            super(long.class, order, Long.SIZE, bitAlignment, name);\n+            super(long.class, order, 64, bitAlignment, name);\n@@ -324,0 +362,1 @@\n+            Objects.requireNonNull(order);\n@@ -328,1 +367,1 @@\n-            return new OfLongImpl(order, Long.SIZE, Optional.empty());\n+            return new OfLongImpl(order);\n@@ -334,0 +373,4 @@\n+        private OfDoubleImpl(ByteOrder order) {\n+            super(double.class, order, 64);\n+        }\n+\n@@ -335,1 +378,1 @@\n-            super(double.class, order, Double.SIZE, bitAlignment, name);\n+            super(double.class, order, 64, bitAlignment, name);\n@@ -345,0 +388,1 @@\n+            Objects.requireNonNull(order);\n@@ -349,1 +393,1 @@\n-            return new OfDoubleImpl(order, Double.SIZE, Optional.empty());\n+            return new OfDoubleImpl(order);\n@@ -358,0 +402,5 @@\n+        private OfAddressImpl(ByteOrder order) {\n+            super(MemorySegment.class, order, ADDRESS_SIZE_BITS);\n+            this.targetLayout = null;\n+        }\n+\n@@ -370,0 +419,1 @@\n+            Objects.requireNonNull(order);\n@@ -398,1 +448,1 @@\n-            return new OfAddressImpl(order, ADDRESS_SIZE_BITS, ADDRESS_SIZE_BITS, null, Optional.empty());\n+            return new OfAddressImpl(order);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":69,"deletions":19,"binary":false,"changes":88,"status":"modified"}]}