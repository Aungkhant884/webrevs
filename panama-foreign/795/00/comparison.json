{"files":[{"patch":"@@ -52,1 +52,3 @@\n-        return dup(bitAlignment(), Optional.of(name));\n+        return name().filter(name::equals).isPresent()\n+                ? self()\n+                : dup(bitAlignment(), Optional.of(name));\n@@ -60,1 +62,3 @@\n-        return dup(bitAlignment, name);\n+        return bitAlignment == bitAlignment()\n+                ? self()\n+                : dup(bitAlignment, name);\n@@ -145,0 +149,5 @@\n+    @SuppressWarnings(\"unchecked\")\n+    final L self() {\n+        return (L) this;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    private ValueLayouts() {\n-    }\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private ValueLayouts() {}\n@@ -73,4 +73,0 @@\n-        AbstractValueLayout(Class<?> carrier, ByteOrder order, long bitSize) {\n-            this(carrier, order, bitSize, bitSize, Optional.empty());\n-        }\n-\n@@ -98,1 +94,8 @@\n-        abstract V withOrder(ByteOrder order);\n+        public final V withOrder(ByteOrder order) {\n+            Objects.requireNonNull(order);\n+            return order == order()\n+                    ? self()\n+                    : withOrder0(order);\n+        }\n+\n+        protected abstract V withOrder0(ByteOrder order);\n@@ -180,4 +183,0 @@\n-        @SuppressWarnings(\"unchecked\")\n-        final V self() {\n-            return (V) this;\n-        }\n@@ -188,4 +187,0 @@\n-        private OfBooleanImpl(ByteOrder order) {\n-            super(boolean.class, order, 8);\n-        }\n-\n@@ -193,1 +188,1 @@\n-            super(boolean.class, order, 8, bitAlignment, name);\n+            super(boolean.class, order, Byte.SIZE, bitAlignment, name);\n@@ -202,2 +197,1 @@\n-        public OfBooleanImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfBooleanImpl withOrder0(ByteOrder order) {\n@@ -208,1 +202,1 @@\n-            return new OfBooleanImpl(order);\n+            return new OfBooleanImpl(order, Byte.SIZE, Optional.empty());\n@@ -214,4 +208,0 @@\n-        private OfByteImpl(ByteOrder order) {\n-            super(byte.class, order, 8);\n-        }\n-\n@@ -219,1 +209,1 @@\n-            super(byte.class, order, 8, bitAlignment, name);\n+            super(byte.class, order, Byte.SIZE, bitAlignment, name);\n@@ -228,2 +218,1 @@\n-        public OfByteImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfByteImpl withOrder0(ByteOrder order) {\n@@ -234,1 +223,1 @@\n-            return new OfByteImpl(order);\n+            return new OfByteImpl(order, Byte.SIZE, Optional.empty());\n@@ -240,4 +229,0 @@\n-        private OfCharImpl(ByteOrder order) {\n-            super(char.class, order, 16);\n-        }\n-\n@@ -245,1 +230,1 @@\n-            super(char.class, order, 16, bitAlignment, name);\n+            super(char.class, order, Character.SIZE, bitAlignment, name);\n@@ -254,2 +239,1 @@\n-        public OfCharImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfCharImpl withOrder0(ByteOrder order) {\n@@ -260,1 +244,1 @@\n-            return new OfCharImpl(order);\n+            return new OfCharImpl(order, Character.SIZE, Optional.empty());\n@@ -266,4 +250,0 @@\n-        private OfShortImpl(ByteOrder order) {\n-            super(short.class, order, 16);\n-        }\n-\n@@ -271,1 +251,1 @@\n-            super(short.class, order, 16, bitAlignment, name);\n+            super(short.class, order, Short.SIZE, bitAlignment, name);\n@@ -280,2 +260,1 @@\n-        public OfShortImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfShortImpl withOrder0(ByteOrder order) {\n@@ -286,1 +265,1 @@\n-            return new OfShortImpl(order);\n+            return new OfShortImpl(order, Short.SIZE, Optional.empty());\n@@ -292,4 +271,0 @@\n-        private OfIntImpl(ByteOrder order) {\n-            super(int.class, order, 32);\n-        }\n-\n@@ -297,1 +272,1 @@\n-            super(int.class, order, 32, bitAlignment, name);\n+            super(int.class, order, Integer.SIZE, bitAlignment, name);\n@@ -306,2 +281,1 @@\n-        public OfIntImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfIntImpl withOrder0(ByteOrder order) {\n@@ -312,1 +286,1 @@\n-            return new OfIntImpl(order);\n+            return new OfIntImpl(order, Integer.SIZE, Optional.empty());\n@@ -318,4 +292,0 @@\n-        private OfFloatImpl(ByteOrder order) {\n-            super(float.class, order, 32);\n-        }\n-\n@@ -323,1 +293,1 @@\n-            super(float.class, order, 32, bitAlignment, name);\n+            super(float.class, order, Float.SIZE, bitAlignment, name);\n@@ -332,2 +302,1 @@\n-        public OfFloatImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfFloatImpl withOrder0(ByteOrder order) {\n@@ -338,1 +307,1 @@\n-            return new OfFloatImpl(order);\n+            return new OfFloatImpl(order, Float.SIZE, Optional.empty());\n@@ -344,4 +313,0 @@\n-        private OfLongImpl(ByteOrder order) {\n-            super(long.class, order, 64);\n-        }\n-\n@@ -349,1 +314,1 @@\n-            super(long.class, order, 64, bitAlignment, name);\n+            super(long.class, order, Long.SIZE, bitAlignment, name);\n@@ -358,2 +323,1 @@\n-        public OfLongImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfLongImpl withOrder0(ByteOrder order) {\n@@ -364,1 +328,1 @@\n-            return new OfLongImpl(order);\n+            return new OfLongImpl(order, Long.SIZE, Optional.empty());\n@@ -370,4 +334,0 @@\n-        private OfDoubleImpl(ByteOrder order) {\n-            super(double.class, order, 64);\n-        }\n-\n@@ -375,1 +335,1 @@\n-            super(double.class, order, 64, bitAlignment, name);\n+            super(double.class, order, Double.SIZE, bitAlignment, name);\n@@ -384,2 +344,1 @@\n-        public OfDoubleImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfDoubleImpl withOrder0(ByteOrder order) {\n@@ -390,1 +349,1 @@\n-            return new OfDoubleImpl(order);\n+            return new OfDoubleImpl(order, Double.SIZE, Optional.empty());\n@@ -399,5 +358,0 @@\n-        private OfAddressImpl(ByteOrder order) {\n-            super(MemorySegment.class, order, ADDRESS_SIZE_BITS);\n-            this.targetLayout = null;\n-        }\n-\n@@ -415,2 +369,1 @@\n-        public OfAddressImpl withOrder(ByteOrder order) {\n-            Objects.requireNonNull(order);\n+        public OfAddressImpl withOrder0(ByteOrder order) {\n@@ -445,1 +398,1 @@\n-            return new OfAddressImpl(order);\n+            return new OfAddressImpl(order, ADDRESS_SIZE_BITS, ADDRESS_SIZE_BITS, null, Optional.empty());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":36,"deletions":83,"binary":false,"changes":119,"status":"modified"}]}