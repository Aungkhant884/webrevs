{"files":[{"patch":"@@ -352,2 +352,2 @@\n-     * The returned allocator allocates a memory segment {@code S} of a certain fixed size (using malloc) and then\n-     * responds to allocation requests in one of the following ways:\n+     * The returned allocator {@linkplain MemorySegment#allocateNative(long, ResourceScope) allocates} a memory segment\n+     * {@code S} of a certain (fixed) block size and then responds to allocation requests in one of the following ways:\n@@ -390,2 +390,2 @@\n-     * The returned allocator allocates a memory segment {@code S} of the specified block size (using malloc) and then\n-     * responds to allocation requests in one of the following ways:\n+     * The returned allocator {@linkplain MemorySegment#allocateNative(long, ResourceScope) allocates} a memory segment\n+     * {@code S} of the specified block size and then responds to allocation requests in one of the following ways:\n@@ -415,0 +415,1 @@\n+     * @throws IllegalArgumentException if {@code blockSize <= 0}.\n@@ -420,0 +421,3 @@\n+        if (blockSize <= 0) {\n+            throw new IllegalArgumentException(\"Invalid block size: \" + blockSize);\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -133,0 +133,5 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadUnboundedArenaSize() {\n+        SegmentAllocator.arenaUnbounded(-1, ResourceScope.globalScope());\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}