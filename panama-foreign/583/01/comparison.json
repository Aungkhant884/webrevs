{"files":[{"patch":"@@ -55,1 +55,1 @@\n- *     (see {@link MemorySegment#allocateNative(long, ResourceScope)}, or {@link SegmentAllocator#arenaAllocator(ResourceScope)})<\/li>\n+ *     (see {@link MemorySegment#allocateNative(long, ResourceScope)}, or {@link SegmentAllocator#arenaUnbounded(ResourceScope)})<\/li>\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n- * This interface also defines factories for commonly used allocators; for instance {@link #arenaAllocator(ResourceScope)}\n- * and {@link #arenaAllocator(long, ResourceScope)} are arena-style native allocators. Finally {@link #prefixAllocator(MemorySegment)}\n+ * This interface also defines factories for commonly used allocators; for instance {@link #arenaUnbounded(ResourceScope)}\n+ * and {@link #arenaBounded(long, ResourceScope)} are arena-style native allocators. Finally {@link #prefixAllocator(MemorySegment)}\n@@ -336,1 +336,1 @@\n-     * @param scope the scope associated with the segments returned by this allocator.\n+     * @param scope the scope associated with the segments returned by the arena-based allocator.\n@@ -342,1 +342,1 @@\n-    static SegmentAllocator arenaAllocator(long size, ResourceScope scope) {\n+    static SegmentAllocator arenaBounded(long size, ResourceScope scope) {\n@@ -350,1 +350,1 @@\n-     * Returns a native unbounded arena-based allocator.\n+     * Returns a native unbounded arena-based allocator, with predefined block size.\n@@ -352,2 +352,40 @@\n-     * The returned allocator allocates a memory segment {@code S} of a certain fixed size (using malloc) and then\n-     * responds to allocation requests in one of the following ways:\n+     * The returned allocator {@linkplain MemorySegment#allocateNative(long, ResourceScope) allocates} a memory segment\n+     * {@code S} of a certain (fixed) block size and then responds to allocation requests in one of the following ways:\n+     * <ul>\n+     *     <li>if the size of the allocation requests is smaller than the size of {@code S}, and {@code S} has a <em>free<\/em>\n+     *     slice {@code S'} which fits that allocation request, return that {@code S'}.\n+     *     <li>if the size of the allocation requests is smaller than the size of {@code S}, and {@code S} has no <em>free<\/em>\n+     *     slices which fits that allocation request, allocate a new segment {@code S'} (using malloc), which has same size as {@code S}\n+     *     and set {@code S = S'}; the allocator then tries to respond to the same allocation request again.\n+     *     <li>if the size of the allocation requests is bigger than the size of {@code S}, allocate a new segment {@code S'}\n+     *     (using malloc), which has a sufficient size to satisfy the allocation request, and return {@code S'}.\n+     * <\/ul>\n+     * <p>\n+     * The block size of the returned arena-based allocator is unspecified, can be platform-dependent, and should generally\n+     * not be relied upon. Clients can {@linkplain #arenaUnbounded(long, ResourceScope) obtain} an unbounded arena-based allocator\n+     * with specific block size, if they so wish.\n+     * <p>\n+     * This segment allocator can be useful when clients want to perform multiple allocation requests while avoiding the\n+     * cost associated with allocating a new off-heap memory region upon each allocation request.\n+     * <p>\n+     * An allocator associated with a <em>shared<\/em> resource scope is thread-safe and allocation requests may be\n+     * performed concurrently; conversely, if the arena allocator is associated with a <em>confined<\/em> resource scope,\n+     * allocation requests can only occur from the thread owning the allocator's resource scope.\n+     * <p>\n+     * The returned allocator might throw an {@link OutOfMemoryError} if an incoming allocation request exceeds\n+     * the system capacity.\n+     *\n+     * @param scope the scope associated with the segments returned by the arena-based allocator.\n+     * @return a new unbounded arena-based allocator\n+     * @throws IllegalStateException if {@code scope} has been already closed, or if access occurs from a thread other\n+     * than the thread owning {@code scope}.\n+     *\/\n+    static SegmentAllocator arenaUnbounded(ResourceScope scope) {\n+        return arenaUnbounded(ArenaAllocator.DEFAULT_BLOCK_SIZE, scope);\n+    }\n+\n+    \/**\n+     * Returns a native unbounded arena-based allocator, with given block size.\n+     * <p>\n+     * The returned allocator {@linkplain MemorySegment#allocateNative(long, ResourceScope) allocates} a memory segment\n+     * {@code S} of the specified block size and then responds to allocation requests in one of the following ways:\n@@ -374,1 +412,2 @@\n-     * @param scope the scope associated with the segments returned by this allocator.\n+     * @param blockSize the block size associated with the arena-based allocator.\n+     * @param scope the scope associated with the segments returned by the arena-based allocator.\n@@ -376,0 +415,1 @@\n+     * @throws IllegalArgumentException if {@code blockSize <= 0}.\n@@ -379,1 +419,1 @@\n-    static SegmentAllocator arenaAllocator(ResourceScope scope) {\n+    static SegmentAllocator arenaUnbounded(long blockSize, ResourceScope scope) {\n@@ -381,0 +421,3 @@\n+        if (blockSize <= 0) {\n+            throw new IllegalArgumentException(\"Invalid block size: \" + blockSize);\n+        }\n@@ -382,2 +425,2 @@\n-                new ArenaAllocator.UnboundedSharedArenaAllocator(scope) :\n-                new ArenaAllocator.UnboundedArenaAllocator(scope);\n+                new ArenaAllocator.UnboundedSharedArenaAllocator(blockSize, scope) :\n+                new ArenaAllocator.UnboundedArenaAllocator(blockSize, scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SegmentAllocator.java","additions":54,"deletions":11,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+    public static final long DEFAULT_BLOCK_SIZE = 4 * 1024;\n+\n@@ -67,1 +69,1 @@\n-        private static final long DEFAULT_BLOCK_SIZE = 4 * 1024;\n+        final long blockSize;\n@@ -69,2 +71,3 @@\n-        public UnboundedArenaAllocator(ResourceScope scope) {\n-            super(MemorySegment.allocateNative(DEFAULT_BLOCK_SIZE, 1, scope));\n+        public UnboundedArenaAllocator(long blockSize, ResourceScope scope) {\n+            super(MemorySegment.allocateNative(blockSize, 1, scope));\n+            this.blockSize = blockSize;\n@@ -86,1 +89,1 @@\n-                if (maxPossibleAllocationSize > DEFAULT_BLOCK_SIZE) {\n+                if (maxPossibleAllocationSize > blockSize) {\n@@ -92,1 +95,1 @@\n-                    segment = newSegment(DEFAULT_BLOCK_SIZE, 1L);\n+                    segment = newSegment(blockSize, 1L);\n@@ -132,0 +135,1 @@\n+        final long blockSize;\n@@ -136,1 +140,1 @@\n-                return new UnboundedArenaAllocator(scope);\n+                return new UnboundedArenaAllocator(blockSize, scope);\n@@ -140,1 +144,1 @@\n-        public UnboundedSharedArenaAllocator(ResourceScope scope) {\n+        public UnboundedSharedArenaAllocator(long blockSize, ResourceScope scope) {\n@@ -142,0 +146,1 @@\n+            this.blockSize = blockSize;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-            return new Context(SegmentAllocator.arenaAllocator(size, scope), scope);\n+            return new Context(SegmentAllocator.arenaBounded(size, scope), scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -497,1 +497,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            this.allocator = SegmentAllocator.arenaAllocator(resourceScope);\n+            this.allocator = SegmentAllocator.arenaUnbounded(resourceScope);\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-        ScopedOperation.ofScope(SegmentAllocator::arenaAllocator, \"SegmentAllocator::arenaAllocator\");\n+        ScopedOperation.ofScope(SegmentAllocator::arenaUnbounded, \"SegmentAllocator::arenaAllocator\");\n@@ -241,2 +241,2 @@\n-            ARENA_BOUNDED(scope -> SegmentAllocator.arenaAllocator(1000, scope)),\n-            ARENA_UNBOUNDED(SegmentAllocator::arenaAllocator),\n+            ARENA_BOUNDED(scope -> SegmentAllocator.arenaBounded(1000, scope)),\n+            ARENA_UNBOUNDED(SegmentAllocator::arenaUnbounded),\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaUnbounded(scope);\n@@ -120,1 +120,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(10, scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaBounded(10, scope);\n@@ -128,1 +128,1 @@\n-            SegmentAllocator allocator = SegmentAllocator.arenaAllocator(4 * 1024 * 2, scope);\n+            SegmentAllocator allocator = SegmentAllocator.arenaBounded(4 * 1024 * 2, scope);\n@@ -133,0 +133,5 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadUnboundedArenaSize() {\n+        SegmentAllocator.arenaUnbounded(-1, ResourceScope.globalScope());\n+    }\n+\n@@ -383,2 +388,2 @@\n-        static AllocationFactory BOUNDED = new AllocationFactory(true, SegmentAllocator::arenaAllocator);\n-        static AllocationFactory UNBOUNDED = new AllocationFactory(false, (size, scope) -> SegmentAllocator.arenaAllocator(scope));\n+        static AllocationFactory BOUNDED = new AllocationFactory(true, SegmentAllocator::arenaBounded);\n+        static AllocationFactory UNBOUNDED = new AllocationFactory(false, (size, scope) -> SegmentAllocator.arenaUnbounded(scope));\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    SegmentAllocator arenaAllocator = SegmentAllocator.arenaAllocator(scope);\n+    SegmentAllocator arenaAllocator = SegmentAllocator.arenaUnbounded(scope);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/StrLenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}