{"files":[{"patch":"@@ -32,0 +32,2 @@\n+import jdk.internal.misc.Unsafe;\n+\n@@ -34,0 +36,7 @@\n+    static {\n+        \/\/ initialize MemorySegment before touching NativeMemorySegmentImpl to avoid deadlock\n+        \/\/ if multiple threads try to initialize NativeMemorySegmentImpl and MS through allocateNoInit\n+        \/\/ and a method on MS at the same time\n+        Unsafe.getUnsafe().ensureClassInitialized(MemorySegment.class);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaImpl.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,7 @@\n+    static {\n+        \/\/ initialize MemorySegment before touching NativeMemorySegmentImpl to avoid deadlock\n+        \/\/ if multiple threads try to initialize NativeMemorySegmentImpl and MS through longToAddress\n+        \/\/ and a method on MS at the same time\n+        Unsafe.getUnsafe().ensureClassInitialized(MemorySegment.class);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -108,0 +108,3 @@\n+    \/\/ for ensureClassInitialized\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n@@ -1338,0 +1341,2 @@\n+        \/\/ enure MS is initialized before touching subclasses directly to avoid deadlock\n+        UNSAFE.ensureClassInitialized(MemorySegment.class);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=Arena_allocateFrom\n+ * @run main\/othervm\/timeout=5 --enable-native-access=ALL-UNNAMED -Xlog:class+init TestDeadlock Arena\n+ *\/\n+\n+\/*\n+ * @test id=FileChannel_map\n+ * @run main\/othervm\/timeout=5 --enable-native-access=ALL-UNNAMED -Xlog:class+init TestDeadlock FileChannel\n+ *\/\n+\n+import java.lang.foreign.*;\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class TestDeadlock {\n+    public static void main(String[] args) throws Throwable {\n+        CountDownLatch latch = new CountDownLatch(2);\n+\n+        Runnable tester = switch (args[0]) {\n+            case \"Arena\" -> () -> {\n+                Arena arena = Arena.global();\n+                arena.scope(); \/\/ init ArenaImpl\n+                ValueLayout.JAVA_INT.byteSize(); \/\/ init ValueLayout (and impls)\n+                latch.countDown();\n+                try {\n+                    latch.await();\n+                } catch(InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                \/\/ Access ArenaImpl -> NativeMemorySegmentImpl -> MemorySegment\n+                arena.allocateFrom(ValueLayout.JAVA_INT, 42);\n+            };\n+            case \"FileChannel\" -> () -> {\n+                try {\n+                    Arena arena = Arena.global();\n+                    Path p = Files.createFile(Path.of(\"test.out\"));\n+\n+                    try (FileChannel channel = FileChannel.open(p, StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                        channel.map(FileChannel.MapMode.READ_WRITE, 0, 4); \/\/ create MappedByteBuffer to initialize other things\n+                        latch.countDown();\n+                        latch.await();\n+\n+                        \/\/ Access MappedMemorySegmentImpl -> MemorySegment\n+                        channel.map(FileChannel.MapMode.READ_WRITE, 0, 4, arena);\n+                    }\n+                } catch(InterruptedException | IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            };\n+            default -> throw new IllegalArgumentException(\"Unknown test selection: \" + args[0]);\n+        };\n+\n+        Thread t1 = Thread.ofPlatform().start(tester);\n+        Thread t2 = Thread.ofPlatform().start(() -> {\n+            latch.countDown();\n+            try {\n+                latch.await();\n+            } catch(InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            \/\/ Access MemorySegment -> NativeMemorySegmentImpl\n+            MemorySegment.ofAddress(42);\n+        });\n+\n+        \/\/ wait for potential deadlock\n+\n+        t1.join();\n+        t2.join();\n+\n+        \/\/ all good\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestDeadlock.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}