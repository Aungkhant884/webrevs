{"files":[{"patch":"@@ -25,2 +25,7 @@\n- * @test\n- * @run main\/othervm\/timeout=5 --enable-native-access=ALL-UNNAMED -Xlog:class+init TestDeadlock\n+ * @test id=Arena_allocateFrom\n+ * @run main\/othervm\/timeout=5 --enable-native-access=ALL-UNNAMED -Xlog:class+init TestDeadlock Arena\n+ *\/\n+\n+\/*\n+ * @test id=FileChannel_map\n+ * @run main\/othervm\/timeout=5 --enable-native-access=ALL-UNNAMED -Xlog:class+init TestDeadlock FileChannel\n@@ -30,0 +35,5 @@\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n@@ -36,10 +46,11 @@\n-        Thread t1 = Thread.ofPlatform().start(() -> {\n-            Arena arena = Arena.global();\n-            arena.scope(); \/\/ init ArenaImpl\n-            ValueLayout.JAVA_INT.byteSize(); \/\/ init ValueLayout (and impls)\n-            latch.countDown();\n-            try {\n-                latch.await();\n-            } catch(InterruptedException e) {\n-                throw new RuntimeException(e);\n-            }\n+        Runnable tester = switch (args[0]) {\n+            case \"Arena\" -> () -> {\n+                Arena arena = Arena.global();\n+                arena.scope(); \/\/ init ArenaImpl\n+                ValueLayout.JAVA_INT.byteSize(); \/\/ init ValueLayout (and impls)\n+                latch.countDown();\n+                try {\n+                    latch.await();\n+                } catch(InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n@@ -47,3 +58,22 @@\n-            \/\/ Access ArenaImpl -> NativeMemorySegmentImpl -> MemorySegment\n-            arena.allocateFrom(ValueLayout.JAVA_INT, 42);\n-        });\n+                \/\/ Access ArenaImpl -> NativeMemorySegmentImpl -> MemorySegment\n+                arena.allocateFrom(ValueLayout.JAVA_INT, 42);\n+            };\n+            case \"FileChannel\" -> () -> {\n+                try {\n+                    Arena arena = Arena.global();\n+                    Path p = Files.createFile(Path.of(\"test.out\"));\n+\n+                    try (FileChannel channel = FileChannel.open(p, StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                        channel.map(FileChannel.MapMode.READ_WRITE, 0, 4); \/\/ create MappedByteBuffer to initialize other things\n+                        latch.countDown();\n+                        latch.await();\n+\n+                        \/\/ Access MappedMemorySegmentImpl -> MemorySegment\n+                        channel.map(FileChannel.MapMode.READ_WRITE, 0, 4, arena);\n+                    }\n+                } catch(InterruptedException | IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            };\n+            default -> throw new IllegalArgumentException(\"Unknown test selection: \" + args[0]);\n+        };\n@@ -51,0 +81,1 @@\n+        Thread t1 = Thread.ofPlatform().start(tester);\n","filename":"test\/jdk\/java\/foreign\/TestDeadlock.java","additions":46,"deletions":15,"binary":false,"changes":61,"status":"modified"}]}