{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import jdk.incubator.foreign.MemoryLayout;\n@@ -33,0 +34,7 @@\n+import java.lang.constant.Constable;\n+import java.lang.constant.ConstantDesc;\n+import java.lang.invoke.MethodHandles;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n@@ -36,0 +44,4 @@\n+import static jdk.incubator.foreign.CLinker.C_POINTER;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n@@ -39,0 +51,74 @@\n+    static final String DUMMY_ATTR = \"dummy\";\n+\n+    @Test\n+    public void testOf() {\n+        FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_DOUBLE, C_LONGLONG);\n+\n+        assertEquals(fd.argumentLayouts(), List.of(C_DOUBLE, C_LONGLONG));\n+        Optional<MemoryLayout> returnLayoutOp = fd.returnLayout();\n+        assertTrue(returnLayoutOp.isPresent());\n+        assertEquals(returnLayoutOp.get(), C_INT);\n+    }\n+\n+    @Test\n+    public void testOfVoid() {\n+        FunctionDescriptor fd = FunctionDescriptor.ofVoid(C_DOUBLE, C_LONGLONG);\n+\n+        assertEquals(fd.argumentLayouts(), List.of(C_DOUBLE, C_LONGLONG));\n+        Optional<MemoryLayout> returnLayoutOp = fd.returnLayout();\n+        assertFalse(returnLayoutOp.isPresent());\n+    }\n+\n+    @Test\n+    public void testAttribute() {\n+        FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_DOUBLE, C_LONGLONG);\n+        fd = fd.withAttribute(DUMMY_ATTR, true);\n+\n+        assertEquals(fd.argumentLayouts(), List.of(C_DOUBLE, C_LONGLONG));\n+        Optional<MemoryLayout> returnLayoutOp = fd.returnLayout();\n+        assertTrue(returnLayoutOp.isPresent());\n+        assertEquals(returnLayoutOp.get(), C_INT);\n+        assertEquals(fd.attributes().collect(Collectors.toList()), List.of(DUMMY_ATTR));\n+        Optional<Constable> attr = fd.attribute(DUMMY_ATTR);\n+        assertTrue(attr.isPresent());\n+        assertEquals(attr.get(), true);\n+    }\n+\n+    @Test\n+    public void testAppendArgumentLayouts() {\n+        FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_DOUBLE, C_LONGLONG)\n+                                                  .withAttribute(DUMMY_ATTR, true);\n+        fd = fd.appendArgumentLayouts(C_POINTER);\n+\n+        assertEquals(fd.argumentLayouts(), List.of(C_DOUBLE, C_LONGLONG, C_POINTER));\n+        Optional<MemoryLayout> returnLayoutOp = fd.returnLayout();\n+        assertTrue(returnLayoutOp.isPresent());\n+        assertEquals(returnLayoutOp.get(), C_INT);\n+        assertEquals(fd.attributes().collect(Collectors.toList()), List.of(DUMMY_ATTR));\n+    }\n+\n+    @Test\n+    public void testChangeReturnLayout() {\n+        FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_DOUBLE, C_LONGLONG)\n+                                                  .withAttribute(DUMMY_ATTR, true);\n+        fd = fd.changeReturnLayout(C_INT);\n+\n+        assertEquals(fd.argumentLayouts(), List.of(C_DOUBLE, C_LONGLONG));\n+        Optional<MemoryLayout> returnLayoutOp = fd.returnLayout();\n+        assertTrue(returnLayoutOp.isPresent());\n+        assertEquals(returnLayoutOp.get(), C_INT);\n+        assertEquals(fd.attributes().collect(Collectors.toList()), List.of(DUMMY_ATTR));\n+    }\n+\n+    @Test\n+    public void testDropReturnLayout() {\n+        FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_DOUBLE, C_LONGLONG)\n+                                                  .withAttribute(DUMMY_ATTR, true);\n+        fd = fd.dropReturnLayout();\n+\n+        assertEquals(fd.argumentLayouts(), List.of(C_DOUBLE, C_LONGLONG));\n+        Optional<MemoryLayout> returnLayoutOp = fd.returnLayout();\n+        assertFalse(returnLayoutOp.isPresent());\n+        assertEquals(fd.attributes().collect(Collectors.toList()), List.of(DUMMY_ATTR));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"modified"}]}