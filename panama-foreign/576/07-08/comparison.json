{"files":[{"patch":"@@ -222,3 +222,3 @@\n-     * An upcall stub, created by {@link #upcallStub(MethodHandle, FunctionDescriptor, ResourceScope)}, is a pointer to\n-     * a stub of code which can be passed to native functions to call a given <em>target<\/em> Java method handle.\n-     * An upcall stub can be passed by reference to other downcall method handles, as this interface extends {@link Addressable}.\n+     * An upcall stub is a pointer to a stub of code which can be passed to native functions to call a given <em>target<\/em> Java method handle.\n+     * Created by {@link #upcallStub(MethodHandle, FunctionDescriptor, ResourceScope)}, an upcall stub can be passed by\n+     * reference to other downcall method handles, as this interface extends {@link Addressable}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import jdk.internal.foreign.Utils;\n-import jdk.internal.foreign.abi.SharedUtils;\n@@ -33,1 +31,0 @@\n-import jdk.internal.reflect.Reflection;\n@@ -36,1 +33,0 @@\n-import java.nio.charset.StandardCharsets;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -181,1 +181,2 @@\n-     * @throws IllegalStateException if this scope has already been closed.\n+     * @throws IllegalStateException if this scope has been closed, or if access occurs from\n+     * a thread other than the thread owning this scope.\n@@ -189,0 +190,3 @@\n+     * @throws IllegalArgumentException if {@code target == this}.\n+     * @throws IllegalStateException if this scope has been closed, or if access occurs from\n+     * a thread other than the thread owning this scope.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -110,0 +110,3 @@\n+        if (target == this) {\n+            throw new IllegalArgumentException(\"Invalid target scope.\");\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -248,0 +248,6 @@\n+    @Test(dataProvider = \"scopes\", expectedExceptions = IllegalArgumentException.class)\n+    public void testAcquireSelf(Supplier<ResourceScope> scopeSupplier) {\n+        ResourceScope scope = scopeSupplier.get();\n+        scope.keepAlive(scope);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestResourceScope.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}