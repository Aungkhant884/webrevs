{"files":[{"patch":"@@ -233,6 +233,0 @@\n-\n-\n-    \/**\n-     * Attribute name used to specify the <em>name<\/em> property of a memory layout (see {@link #name()} and {@link #withName(String)}).\n-     *\/\n-    String LAYOUT_NAME = \"layout\/name\";\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/AbstractLayout.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n- * to <em>link<\/em> foreign functions into a so called <em>downcall method handle<\/em>; secondly, it allows to\n- * generate an <em>upcalls stub<\/em>  which can be used to call Java method handle from a native function.\n+ * to <em>link<\/em> foreign functions into a so called <em>downcall method handle<\/em>; secondly, it allows\n+ * native code to call Java method handles via the generation of <em>upcall stubs<\/em>.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-    final static class VariadicFunction extends FunctionDescriptor {\n+    static final class VariadicFunction extends FunctionDescriptor {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,5 +239,0 @@\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    attribute(LAYOUT_NAME).map(String.class::cast);\n-     * }<\/pre><\/blockquote>\n@@ -252,5 +247,0 @@\n-     * <p>\n-     * This is equivalent to the following code:\n-     * <blockquote><pre>{@code\n-    withAttribute(LAYOUT_NAME, name);\n-     * }<\/pre><\/blockquote>\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n- * these capabilities are suitable replacements for some functionalities in the {@link java.nio.MappedByteBuffer} class.\n+ * these capabilities are suitable replacements for some capabilities in the {@link java.nio.MappedByteBuffer} class.\n@@ -114,1 +114,1 @@\n- * caution: for instance, an incorrect segment size correctly could result in a VM crash when attempting to dereference\n+ * caution: for instance, an incorrect segment size could result in a VM crash when attempting to dereference\n@@ -135,1 +135,1 @@\n- * For more complex dereference operation (e.g. structured memory access), clients can obtain a <em>memory access var handle<\/em>,\n+ * For more complex dereference operations (e.g. structured memory access), clients can obtain a <em>memory access var handle<\/em>,\n@@ -387,1 +387,1 @@\n-     * If one segment is a proper prefix of the other than the returned offset is\n+     * If one segment is a proper prefix of the other, then the returned offset is\n@@ -591,22 +591,0 @@\n-    \/**\n-     * Reads a UTF-8 encoded, null-terminated string from this address and offset with given layout.\n-     * <p>\n-     * This method always replaces malformed-input and unmappable-character\n-     * sequences with this charset's default replacement string.  The {@link\n-     * java.nio.charset.CharsetDecoder} class should be used when more control\n-     * over the decoding process is required.\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n-     *\n-     * @param offset offset in bytes (relative to this address). The final address of this read operation can be expressed as {@code toRowLongValue() + offset}.\n-     * @return a Java UTF-8 string containing all the bytes read from the given starting address ({@code toRowLongValue() + offset})\n-     * up to (but not including) the first {@code '\\0'} terminator character (assuming one is found).\n-     * @throws IllegalArgumentException if the size of the native string is greater than the largest string supported by the platform.\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n-     *\/\n-\n@@ -625,2 +603,2 @@\n-     * @throws IllegalStateException if the size of the native string is greater than the size of the segment\n-     * associated with {@code addr}, or if {@code addr} is associated with a segment that is <em>not alive<\/em>.\n+     * @throws IllegalStateException if the size of the native string is greater than the size of this segment,\n+     * or if the scope associated with this segment has been closed, or if access occurs from a thread other than the thread owning that scope.\n@@ -644,2 +622,2 @@\n-     * @throws IllegalStateException if the size of the native string is greater than the size of the segment\n-     * associated with {@code addr}, or if {@code addr} is associated with a segment that is <em>not alive<\/em>.\n+     * @throws IllegalStateException if the size of the native string is greater than the size of this segment,\n+     * or if the scope associated with this segment has been closed, or if access occurs from a thread other than the thread owning that scope.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":8,"deletions":30,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n- * deterministic resource deallocation, while still prevent accidental native memory leaks. In case a managed resource scope\n+ * deterministic resource deallocation, while still preventing accidental native memory leaks. In case a managed resource scope\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n- * Since a resource scope act as a {@link jdk.incubator.foreign.SegmentAllocator segment allocators}, we can also\n+ * Since a resource scope acts as a {@link jdk.incubator.foreign.SegmentAllocator segment allocators}, we can also\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import jdk.incubator.foreign.ValueLayout;\n@@ -62,1 +61,1 @@\n-            ValueLayout.JAVA_CHAR\n+            JAVA_CHAR\n@@ -66,1 +65,1 @@\n-            ValueLayout.JAVA_SHORT\n+            JAVA_SHORT\n@@ -191,2 +190,2 @@\n-                { ValueLayout.JAVA_SHORT, (Function<MemorySegment, Object>) s -> s.toArray(JAVA_SHORT)},\n-                { ValueLayout.JAVA_CHAR, (Function<MemorySegment, Object>) s -> s.toArray(JAVA_CHAR)},\n+                { JAVA_SHORT, (Function<MemorySegment, Object>) s -> s.toArray(JAVA_SHORT)},\n+                { JAVA_CHAR, (Function<MemorySegment, Object>) s -> s.toArray(JAVA_CHAR)},\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-import jdk.incubator.foreign.ValueLayout;\n@@ -111,1 +110,1 @@\n-                    ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN).withName(\"index\"),\n+                    JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN).withName(\"index\"),\n@@ -128,1 +127,1 @@\n-            ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN)\n+            JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN)\n@@ -820,1 +819,1 @@\n-                (base) -> initBytes(base, ints, (addr, pos) -> addr.setAtIndex(ValueLayout.JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN), pos, (int)(long)pos));\n+                (base) -> initBytes(base, ints, (addr, pos) -> addr.setAtIndex(JAVA_INT.withOrder(ByteOrder.BIG_ENDIAN), pos, (int)(long)pos));\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.incubator.foreign.ValueLayout;\n@@ -42,1 +43,1 @@\n-        Function<MemorySegment, Byte> mapper = s -> s.getByte(0);\n+        Function<MemorySegment, Byte> mapper = s -> s.get(ValueLayout.JAVA_BYTE, 0);\n@@ -53,1 +54,1 @@\n-        Function<MemorySegment, Character> mapper = s -> s.getChar(0);\n+        Function<MemorySegment, Character> mapper = s -> s.get(ValueLayout.JAVA_CHAR, 0);\n@@ -64,1 +65,1 @@\n-        Function<MemorySegment, Short> mapper = s -> s.getShort(0);\n+        Function<MemorySegment, Short> mapper = s -> s.get(ValueLayout.JAVA_SHORT, 0);\n@@ -75,1 +76,1 @@\n-        Function<MemorySegment, Integer> mapper = s -> s.getInt(0);\n+        Function<MemorySegment, Integer> mapper = s -> s.get(ValueLayout.JAVA_INT, 0);\n@@ -86,1 +87,1 @@\n-        Function<MemorySegment, Long> mapper = s -> s.getLong(0);\n+        Function<MemorySegment, Long> mapper = s-> s.get(ValueLayout.JAVA_LONG, 0);\n@@ -97,1 +98,1 @@\n-        Function<MemorySegment, Float> mapper = s -> s.getFloat(0);\n+        Function<MemorySegment, Float> mapper = s -> s.get(ValueLayout.JAVA_FLOAT, 0);\n@@ -116,1 +117,1 @@\n-        Function<MemorySegment, Double> mapper = s -> s.getDouble(0);\n+        Function<MemorySegment, Double> mapper = s -> s.get(ValueLayout.JAVA_DOUBLE, 0);\n@@ -128,1 +129,1 @@\n-            segment.setByte(0, (byte)i);\n+            segment.set(ValueLayout.JAVA_BYTE, 0, (byte)i);\n@@ -133,7 +134,7 @@\n-            { \"bytes\", MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_BYTE), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsByte },\n-            { \"chars\", MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_CHAR), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsChar },\n-            { \"shorts\", MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_SHORT), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsShort },\n-            { \"ints\", MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_INT), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsInt },\n-            { \"longs\", MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_LONG), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsLong },\n-            { \"floats\", MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_FLOAT), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsFloat },\n-            { \"doubles\", MemoryLayout.sequenceLayout(1024, MemoryLayouts.JAVA_DOUBLE), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsDouble },\n+            { \"bytes\", MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_BYTE), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsByte },\n+            { \"chars\", MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_CHAR), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsChar },\n+            { \"shorts\", MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_SHORT), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsShort },\n+            { \"ints\", MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_INT), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsInt },\n+            { \"longs\", MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_LONG), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsLong },\n+            { \"floats\", MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_FLOAT), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsFloat },\n+            { \"doubles\", MemoryLayout.sequenceLayout(1024, ValueLayout.JAVA_DOUBLE), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsDouble },\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/SegmentTestDataProvider.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"}]}