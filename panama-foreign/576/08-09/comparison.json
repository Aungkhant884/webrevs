{"files":[{"patch":"@@ -189,0 +189,1 @@\n+     * @implNote A given scope can support up to {@link Integer#MAX_VALUE} pending keep alive requests.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,0 +70,3 @@\n+        if (lockCount == MAX_FORKS) {\n+            throw new IllegalStateException(\"Scope keep alive limit exceeded\");\n+        }\n@@ -84,1 +87,1 @@\n-            throw new IllegalStateException(\"Scope is acquired by \" + lockCount + \" locks\");\n+            throw new IllegalStateException(\"Scope is kept alive by \" + lockCount + \" scopes\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ConfinedScope.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+    static final int MAX_FORKS = Integer.MAX_VALUE;\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-    private static final int MAX_FORKS = Integer.MAX_VALUE;\n@@ -95,1 +94,1 @@\n-                throw new IllegalStateException(\"Segment acquire limit exceeded\");\n+                throw new IllegalStateException(\"Scope keep alive limit exceeded\");\n@@ -118,1 +117,1 @@\n-            throw new IllegalStateException(\"Scope is acquired by \" + prevState + \" locks\");\n+            throw new IllegalStateException(\"Scope is kept alive by \" + prevState + \" scopes\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SharedScope.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-                assertMessage(expectThrows(ISE, () -> scope.close()), \"Scope is acquired by\");\n+                assertMessage(expectThrows(ISE, () -> scope.close()), \"Scope is kept alive by\");\n@@ -274,1 +274,1 @@\n-            assertMessage(expectThrows(ISE, () -> scope.close()), \"Scope is acquired by\");\n+            assertMessage(expectThrows(ISE, () -> scope.close()), \"Scope is kept alive by\");\n","filename":"test\/jdk\/java\/foreign\/channels\/TestAsyncSocketChannels.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}