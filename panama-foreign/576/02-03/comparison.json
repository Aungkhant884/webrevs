{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n@@ -33,1 +32,0 @@\n-import java.lang.constant.Constable;\n@@ -35,1 +33,0 @@\n-import java.lang.constant.ConstantDescs;\n@@ -41,3 +38,0 @@\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n@@ -47,2 +41,0 @@\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n@@ -52,1 +44,0 @@\n-import static java.lang.constant.ConstantDescs.CD_Class;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/AbstractLayout.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-        if (!(other instanceof FunctionDescriptor)) {\n+        if (!(other instanceof FunctionDescriptor f)) {\n@@ -184,1 +184,0 @@\n-        FunctionDescriptor f = (FunctionDescriptor) other;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.constant.Constable;\n@@ -35,1 +34,0 @@\n-import java.util.Map;\n@@ -163,1 +161,1 @@\n-        if (!(other instanceof GroupLayout)) {\n+        if (!(other instanceof GroupLayout g)) {\n@@ -166,1 +164,0 @@\n-        GroupLayout g = (GroupLayout)other;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n@@ -40,1 +39,1 @@\n- *     <li>By calling {@link Addressable#address()} on an instance of type {@link Addressable} (e.g. a memory segmment);<\/li>\n+ *     <li>By calling {@link Addressable#address()} on an instance of type {@link Addressable} (e.g. a memory segment);<\/li>\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-     * adaptedType} is not one of {@code int}, or {@code long}; if the bitwidth\n+     * adaptedType} is not one of {@code int}, or {@code long}; if the bit width\n@@ -442,22 +442,0 @@\n-    private static void checkAddressFirstCoordinate(VarHandle handle) {\n-        if (handle.coordinateTypes().size() < 1 ||\n-                handle.coordinateTypes().get(0) != MemorySegment.class) {\n-            throw new IllegalArgumentException(\"Expected var handle with leading coordinate of type MemorySegment\");\n-        }\n-    }\n-\n-    private static void checkCarrier(Class<?> carrier) {\n-        if ((!carrier.isPrimitive() && carrier != MemoryAddress.class) || carrier == void.class) {\n-            throw new IllegalArgumentException(\"Illegal carrier: \" + carrier.getSimpleName());\n-        }\n-    }\n-\n-    private static long carrierSize(Class<?> carrier) {\n-        if (carrier == MemoryAddress.class) {\n-            return ValueLayout.ADDRESS.byteSize();\n-        } else {\n-            long bitsAlignment = Math.max(8, Wrapper.forPrimitiveType(carrier).bitWidth());\n-            return Utils.bitsToBytesOrThrow(bitsAlignment, IllegalStateException::new);\n-        }\n-    }\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-        return computePathOp(LayoutPath.rootPath(this, MemoryLayout::bitSize), path -> path.dereferenceHandle(),\n+        return computePathOp(LayoutPath.rootPath(this, MemoryLayout::bitSize), LayoutPath::dereferenceHandle,\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.internal.access.foreign.MemorySegmentProxy;\n@@ -607,1 +606,0 @@\n-        Objects.requireNonNull(this);\n@@ -626,1 +624,0 @@\n-        Objects.requireNonNull(this);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.constant.Constable;\n@@ -31,1 +30,0 @@\n-import java.util.Map;\n@@ -76,1 +74,1 @@\n-        if (!(other instanceof PaddingLayout)) {\n+        if (!(other instanceof PaddingLayout p)) {\n@@ -79,1 +77,0 @@\n-        PaddingLayout p = (PaddingLayout)other;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/PaddingLayout.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-     *     <li>one or more scopes which {@linkplain #keepAlive(ResourceScope) depend} on this resource scope have not been {@linkplain #close() closed}.\n+     *     <li>one or more scopes which {@linkplain #keepAlive(ResourceScope) depend} on this resource scope have not been closed.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.constant.Constable;\n@@ -31,1 +30,0 @@\n-import java.util.Map;\n@@ -154,1 +152,1 @@\n-        if (!elementCount().isPresent()) {\n+        if (elementCount().isEmpty()) {\n@@ -213,1 +211,1 @@\n-        if (!elementCount().isPresent()) {\n+        if (elementCount().isEmpty()) {\n@@ -218,2 +216,1 @@\n-        while (elemLayout instanceof SequenceLayout) {\n-            SequenceLayout elemSeq = (SequenceLayout)elemLayout;\n+        while (elemLayout instanceof SequenceLayout elemSeq) {\n@@ -244,1 +241,1 @@\n-        if (!(other instanceof SequenceLayout)) {\n+        if (!(other instanceof SequenceLayout s)) {\n@@ -247,1 +244,0 @@\n-        SequenceLayout s = (SequenceLayout)other;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.foreign.SystemLookup;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SymbolLookup.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-        if (!(other instanceof ValueLayout)) {\n+        if (!(other instanceof ValueLayout v)) {\n@@ -125,1 +125,0 @@\n-        ValueLayout v = (ValueLayout)other;\n@@ -229,2 +228,2 @@\n-        OfBoolean(ByteOrder order, long size) {\n-            super(boolean.class, order, size);\n+        OfBoolean(ByteOrder order) {\n+            super(boolean.class, order, 8);\n@@ -233,2 +232,2 @@\n-        OfBoolean(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(boolean.class, order, size, alignment, name);\n+        OfBoolean(ByteOrder order, long alignment, Optional<String> name) {\n+            super(boolean.class, order, 8, alignment, name);\n@@ -239,1 +238,1 @@\n-            return new OfBoolean(order(), bitSize(), alignment, name);\n+            return new OfBoolean(order(), alignment, name);\n@@ -255,1 +254,1 @@\n-            return new OfBoolean(order, bitSize(), alignment, name());\n+            return new OfBoolean(order, alignment, name());\n@@ -268,2 +267,2 @@\n-        OfByte(ByteOrder order, long size) {\n-            super(byte.class, order, size);\n+        OfByte(ByteOrder order) {\n+            super(byte.class, order, 8);\n@@ -272,2 +271,2 @@\n-        OfByte(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(byte.class, order, size, alignment, name);\n+        OfByte(ByteOrder order, long alignment, Optional<String> name) {\n+            super(byte.class, order, 8, alignment, name);\n@@ -278,1 +277,1 @@\n-            return new OfByte(order(), bitSize(), alignment, name);\n+            return new OfByte(order(), alignment, name);\n@@ -294,1 +293,1 @@\n-            return new OfByte(order, bitSize(), alignment, name());\n+            return new OfByte(order, alignment, name());\n@@ -307,2 +306,2 @@\n-        OfChar(ByteOrder order, long size) {\n-            super(char.class, order, size);\n+        OfChar(ByteOrder order) {\n+            super(char.class, order, 16);\n@@ -311,2 +310,2 @@\n-        OfChar(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(char.class, order, size, alignment, name);\n+        OfChar(ByteOrder order, long alignment, Optional<String> name) {\n+            super(char.class, order, 16, alignment, name);\n@@ -317,1 +316,1 @@\n-            return new OfChar(order(), bitSize(), alignment, name);\n+            return new OfChar(order(), alignment, name);\n@@ -333,1 +332,1 @@\n-            return new OfChar(order, bitSize(), alignment, name());\n+            return new OfChar(order, alignment, name());\n@@ -346,2 +345,2 @@\n-        OfShort(ByteOrder order, long size) {\n-            super(short.class, order, size);\n+        OfShort(ByteOrder order) {\n+            super(short.class, order, 16);\n@@ -350,2 +349,2 @@\n-        OfShort(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(short.class, order, size, alignment, name);\n+        OfShort(ByteOrder order, long alignment, Optional<String> name) {\n+            super(short.class, order, 16, alignment, name);\n@@ -356,1 +355,1 @@\n-            return new OfShort(order(), bitSize(), alignment, name);\n+            return new OfShort(order(), alignment, name);\n@@ -372,1 +371,1 @@\n-            return new OfShort(order, bitSize(), alignment, name());\n+            return new OfShort(order, alignment, name());\n@@ -385,2 +384,2 @@\n-        OfInt(ByteOrder order, long size) {\n-            super(int.class, order, size);\n+        OfInt(ByteOrder order) {\n+            super(int.class, order, 32);\n@@ -389,2 +388,2 @@\n-        OfInt(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(int.class, order, size, alignment, name);\n+        OfInt(ByteOrder order, long alignment, Optional<String> name) {\n+            super(int.class, order, 32, alignment, name);\n@@ -395,1 +394,1 @@\n-            return new OfInt(order(), bitSize(), alignment, name);\n+            return new OfInt(order(), alignment, name);\n@@ -411,1 +410,1 @@\n-            return new OfInt(order, bitSize(), alignment, name());\n+            return new OfInt(order, alignment, name());\n@@ -424,2 +423,2 @@\n-        OfFloat(ByteOrder order, long size) {\n-            super(float.class, order, size);\n+        OfFloat(ByteOrder order) {\n+            super(float.class, order, 32);\n@@ -428,2 +427,2 @@\n-        OfFloat(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(float.class, order, size, alignment, name);\n+        OfFloat(ByteOrder order, long alignment, Optional<String> name) {\n+            super(float.class, order, 32, alignment, name);\n@@ -434,1 +433,1 @@\n-            return new OfFloat(order(), bitSize(), alignment, name);\n+            return new OfFloat(order(), alignment, name);\n@@ -450,1 +449,1 @@\n-            return new OfFloat(order, bitSize(), alignment, name());\n+            return new OfFloat(order, alignment, name());\n@@ -463,2 +462,2 @@\n-        OfLong(ByteOrder order, long size) {\n-            super(long.class, order, size);\n+        OfLong(ByteOrder order) {\n+            super(long.class, order, 64);\n@@ -467,2 +466,2 @@\n-        OfLong(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(long.class, order, size, alignment, name);\n+        OfLong(ByteOrder order, long alignment, Optional<String> name) {\n+            super(long.class, order, 64, alignment, name);\n@@ -473,1 +472,1 @@\n-            return new OfLong(order(), bitSize(), alignment, name);\n+            return new OfLong(order(), alignment, name);\n@@ -489,1 +488,1 @@\n-            return new OfLong(order, bitSize(), alignment, name());\n+            return new OfLong(order, alignment, name());\n@@ -502,2 +501,2 @@\n-        OfDouble(ByteOrder order, long size) {\n-            super(double.class, order, size);\n+        OfDouble(ByteOrder order) {\n+            super(double.class, order, 64);\n@@ -506,2 +505,2 @@\n-        OfDouble(ByteOrder order, long size, long alignment, Optional<String> name) {\n-            super(double.class, order, size, alignment, name);\n+        OfDouble(ByteOrder order, long alignment, Optional<String> name) {\n+            super(double.class, order, 64, alignment, name);\n@@ -512,1 +511,1 @@\n-            return new OfDouble(order(), bitSize(), alignment, name);\n+            return new OfDouble(order(), alignment, name);\n@@ -528,1 +527,1 @@\n-            return new OfDouble(order, bitSize(), alignment, name());\n+            return new OfDouble(order, alignment, name());\n@@ -586,1 +585,1 @@\n-    public static final OfByte JAVA_BYTE = new OfByte(ByteOrder.nativeOrder(), 8).withBitAlignment(8);\n+    public static final OfByte JAVA_BYTE = new OfByte(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -592,1 +591,1 @@\n-    public static final OfBoolean JAVA_BOOLEAN = new OfBoolean(ByteOrder.nativeOrder(), 8).withBitAlignment(8);\n+    public static final OfBoolean JAVA_BOOLEAN = new OfBoolean(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -598,1 +597,1 @@\n-    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder(), 16).withBitAlignment(8);\n+    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -604,1 +603,1 @@\n-    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder(), 16).withBitAlignment(8);\n+    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -610,1 +609,1 @@\n-    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder(), 32).withBitAlignment(8);\n+    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -616,1 +615,1 @@\n-    public static final OfLong JAVA_LONG = new OfLong(ByteOrder.nativeOrder(), 64)\n+    public static final OfLong JAVA_LONG = new OfLong(ByteOrder.nativeOrder())\n@@ -623,1 +622,1 @@\n-    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder(), 32).withBitAlignment(8);\n+    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -629,1 +628,1 @@\n-    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder(), 64).withBitAlignment(8);\n+    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder()).withBitAlignment(8);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":57,"deletions":58,"binary":false,"changes":115,"status":"modified"}]}