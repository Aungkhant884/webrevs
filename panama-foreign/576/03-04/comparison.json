{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import jdk.internal.foreign.Utils;\n@@ -183,1 +182,1 @@\n-    VarHandle SHORT_VH = ValueLayout.JAVA_SHORT.varHandle(short.class);\n+    VarHandle SHORT_VH = ValueLayout.JAVA_SHORT.varHandle();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1527,0 +1527,1 @@\n+     * Supported array types are {@code byte[]}, {@code char[]},{@code short[]},{@code int[]},{@code float[]},{@code long[]} and {@code double[]}.\n@@ -1534,2 +1535,2 @@\n-     * @throws  IllegalArgumentException if {@code dstArray} is not an array, or if it is an array but whose type is not supported.\n-     * Supported array types are {@code byte[]}, {@code char[]},{@code short[]},{@code int[]},{@code float[]},{@code long[]} and {@code double[]}.\n+     * @throws  IllegalArgumentException if {@code dstArray} is not an array, or if it is an array but whose type is not supported,\n+     * or if the destination array component type does not match the carrier of the source element layout.\n@@ -1545,0 +1546,3 @@\n+        if (dstArray.getClass().componentType() != srcLayout.carrier()) {\n+            throw new IllegalArgumentException(\"Incompatible value layout: \" + srcLayout);\n+        }\n@@ -1564,0 +1568,1 @@\n+     * Supported array types are {@code byte[]}, {@code char[]},{@code short[]},{@code int[]},{@code float[]},{@code long[]} and {@code double[]}.\n@@ -1571,2 +1576,2 @@\n-     * @throws  IllegalArgumentException if {@code srcArray} is not an array, or if it is an array but whose type is not supported.\n-     * Supported array types are {@code byte[]}, {@code char[]},{@code short[]},{@code int[]},{@code float[]},{@code long[]} and {@code double[]}.\n+     * @throws  IllegalArgumentException if {@code srcArray} is not an array, or if it is an array but whose type is not supported,\n+     * or if the source array component type does not match the carrier of the destination element layout.\n@@ -1582,0 +1587,3 @@\n+        if (srcArray.getClass().componentType() != dstLayout.carrier()) {\n+            throw new IllegalArgumentException(\"Incompatible value layout: \" + dstLayout);\n+        }\n@@ -1614,1 +1622,1 @@\n-            throw new IllegalStateException();\n+            throw new IllegalArgumentException(\"Not a supported array class: \" + arrayType.getSimpleName());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import static jdk.incubator.foreign.ValueLayout.JAVA_INT;\n@@ -231,0 +232,24 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNotAnArraySrc() {\n+        MemorySegment segment = MemorySegment.ofArray(new int[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, JAVA_BYTE, 0, new String[] { \"hello\" }, 0, 4);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testNotAnArrayDst() {\n+        MemorySegment segment = MemorySegment.ofArray(new int[] {1, 2, 3, 4});\n+        MemorySegment.copy(new String[] { \"hello\" }, 0, segment, JAVA_BYTE, 0, 4);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testCarrierMismatchSrc() {\n+        MemorySegment segment = MemorySegment.ofArray(new int[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, JAVA_INT, 0, new byte[] { 1, 2, 3, 4 }, 0, 4);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testCarrierMismatchDst() {\n+        MemorySegment segment = MemorySegment.ofArray(new int[] {1, 2, 3, 4});\n+        MemorySegment.copy(new byte[] { 1, 2, 3, 4 }, 0, segment, JAVA_INT, 0, 4);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}