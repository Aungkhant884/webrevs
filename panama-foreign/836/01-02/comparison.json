{"files":[{"patch":"@@ -1061,1 +1061,1 @@\n-     * Reads a null-terminated string from this segment at the given offset, using the {@linkplain Charset#defaultCharset() default charset}.\n+     * Reads a null-terminated string from this segment at the given offset, using the {@linkplain StandardCharsets#UTF_8 UTF-8} charset.\n@@ -1065,1 +1065,1 @@\n-     * getString(Charset.defaultCharset(), offset);\n+     * getString(offset, StandardCharsets.UTF_8 );\n@@ -1078,1 +1078,0 @@\n-     * @throws UnsupportedOperationException if the default charset is not a {@linkplain StandardCharsets standard charset}.\n@@ -1082,1 +1081,1 @@\n-        return getString(Charset.defaultCharset(), offset);\n+        return getString(offset, StandardCharsets.UTF_8);\n@@ -1093,0 +1092,1 @@\n+     * @param offset  offset in bytes (relative to this segment address) at which this access operation will occur.\n@@ -1094,1 +1094,0 @@\n-     * @param offset offset in bytes (relative to this segment address) at which this access operation will occur.\n@@ -1097,7 +1096,7 @@\n-     * @throws IllegalArgumentException if the size of the string is greater than the largest string supported by the platform.\n-     * @throws IndexOutOfBoundsException if {@code offset < 0} or {@code S + offset > byteSize()}, where {@code S} is the size of the\n-     * string (including the terminator character).\n-     * @throws IllegalStateException if the {@linkplain #scope() scope} associated with this segment is not\n-     * {@linkplain Scope#isAlive() alive}.\n-     * @throws WrongThreadException if this method is called from a thread {@code T},\n-     * such that {@code isAccessibleBy(T) == false}.\n+     * @throws IllegalArgumentException      if the size of the string is greater than the largest string supported by the platform.\n+     * @throws IndexOutOfBoundsException     if {@code offset < 0} or {@code S + offset > byteSize()}, where {@code S} is the size of the\n+     *                                       string (including the terminator character).\n+     * @throws IllegalStateException         if the {@linkplain #scope() scope} associated with this segment is not\n+     *                                       {@linkplain Scope#isAlive() alive}.\n+     * @throws WrongThreadException          if this method is called from a thread {@code T},\n+     *                                       such that {@code isAccessibleBy(T) == false}.\n@@ -1107,1 +1106,1 @@\n-    default String getString(Charset charset, long offset) {\n+    default String getString(long offset, Charset charset) {\n@@ -1114,1 +1113,1 @@\n-     * the {@linkplain Charset#defaultCharset() default charset}.\n+     * the {@linkplain StandardCharsets#UTF_8 UTF-8} charset.\n@@ -1118,1 +1117,1 @@\n-     * setString(Charset.defaultCharset(), offset, str);\n+     * setString(offset, str, StandardCharsets.UTF_8  );\n@@ -1128,1 +1127,0 @@\n-     * @throws UnsupportedOperationException if the default charset is not a {@linkplain StandardCharsets standard charset}.\n@@ -1133,1 +1131,1 @@\n-        setString(Charset.defaultCharset(), offset, str);\n+        setString(offset, str, StandardCharsets.UTF_8);\n@@ -1150,0 +1148,3 @@\n+     * @param offset  offset in bytes (relative to this segment address) at which this access operation will occur.\n+     *                the final address of this write operation can be expressed as {@code address() + offset}.\n+     * @param str     the Java string to be written into this segment.\n@@ -1151,8 +1152,5 @@\n-     * @param offset offset in bytes (relative to this segment address) at which this access operation will occur.\n-     *               the final address of this write operation can be expressed as {@code address() + offset}.\n-     * @param str the Java string to be written into this segment.\n-     * @throws IndexOutOfBoundsException if {@code offset < 0} or {@code str.getBytes().length() + offset >= byteSize()}.\n-     * @throws IllegalStateException if the {@linkplain #scope() scope} associated with this segment is not\n-     * {@linkplain Scope#isAlive() alive}.\n-     * @throws WrongThreadException if this method is called from a thread {@code T},\n-     * such that {@code isAccessibleBy(T) == false}.\n+     * @throws IndexOutOfBoundsException     if {@code offset < 0} or {@code str.getBytes().length() + offset >= byteSize()}.\n+     * @throws IllegalStateException         if the {@linkplain #scope() scope} associated with this segment is not\n+     *                                       {@linkplain Scope#isAlive() alive}.\n+     * @throws WrongThreadException          if this method is called from a thread {@code T},\n+     *                                       such that {@code isAccessibleBy(T) == false}.\n@@ -1162,1 +1160,1 @@\n-    default void setString(Charset charset, long offset, String str) {\n+    default void setString(long offset, String str, Charset charset) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":24,"deletions":26,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-     * Converts a Java string into a null-terminated C string using the {@linkplain Charset#defaultCharset() default charset},\n+     * Converts a Java string into a null-terminated C string using the {@linkplain StandardCharsets#UTF_8 UTF-8} charset,\n@@ -72,1 +72,1 @@\n-     * allocateString(Charset.defaultCharset(), str);\n+     * allocateString(str, StandardCharsets.UTF_8 );\n@@ -77,1 +77,0 @@\n-     * @throws UnsupportedOperationException if the default charset is not a {@linkplain StandardCharsets standard charset}.\n@@ -82,1 +81,1 @@\n-        return allocateString(Charset.defaultCharset(), str);\n+        return allocateString(str, StandardCharsets.UTF_8);\n@@ -99,0 +98,4 @@\n+     * @param str     the Java string to be converted into a C string.\n+     * @param charset the charset used to {@linkplain Charset#newEncoder() encode} the string bytes.\n+     * @return a new native segment containing the converted C string.\n+     * @throws UnsupportedOperationException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n@@ -107,5 +110,0 @@\n-     *\n-     * @param charset the charset used to {@linkplain Charset#newEncoder() encode} the string bytes.\n-     * @param str the Java string to be converted into a C string.\n-     * @return a new native segment containing the converted C string.\n-     * @throws UnsupportedOperationException if {@code charset} is not a {@linkplain StandardCharsets standard charset}.\n@@ -114,1 +112,1 @@\n-    default MemorySegment allocateString(Charset charset, String str) {\n+    default MemorySegment allocateString(String str, Charset charset) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                    MemorySegment text = arena.allocateString(charset, testString);\n+                    MemorySegment text = arena.allocateString(testString, charset);\n@@ -61,1 +61,1 @@\n-                    String roundTrip = text.getString(charset, 0);\n+                    String roundTrip = text.getString(0, charset);\n@@ -67,1 +67,1 @@\n-                assertThrows(UnsupportedOperationException.class, () -> Arena.global().allocateString(charset, testString));\n+                assertThrows(UnsupportedOperationException.class, () -> Arena.global().allocateString(testString, charset));\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}