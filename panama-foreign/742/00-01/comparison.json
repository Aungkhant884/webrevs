{"files":[{"patch":"@@ -49,1 +49,1 @@\n-  int _preserved_value_mask;\n+  int _saved_value_mask;\n@@ -63,1 +63,1 @@\n-                         int preserved_value_mask)\n+                         int saved_value_mask)\n@@ -72,1 +72,1 @@\n-     _preserved_value_mask(preserved_value_mask),\n+     _saved_value_mask(saved_value_mask),\n@@ -102,1 +102,1 @@\n-                                                int preserved_value_mask) {\n+                                                int saved_value_mask) {\n@@ -107,1 +107,1 @@\n-                          needs_return_buffer, preserved_value_mask);\n+                          needs_return_buffer, saved_value_mask);\n@@ -170,2 +170,2 @@\n-  if (_preserved_value_mask != 0) {\n-    locs.set_frame_data(StubLocations::PRESERVED_VALUE_MASK, allocated_frame_size);\n+  if (_saved_value_mask != 0) {\n+    locs.set_frame_data(StubLocations::SAVED_VALUE_MASK, allocated_frame_size);\n@@ -236,1 +236,1 @@\n-  if (_preserved_value_mask != 0) {\n+  if (_saved_value_mask != 0) {\n@@ -243,3 +243,3 @@\n-    __ ldr(c_rarg0, Address(sp, locs.data_offset(StubLocations::PRESERVED_VALUE_MASK)));\n-    __ movw(c_rarg1, _preserved_value_mask);\n-    __ rt_call(CAST_FROM_FN_PTR(address, DowncallLinker::preserve_values), tmp1);\n+    __ ldr(c_rarg0, Address(sp, locs.data_offset(StubLocations::SAVED_VALUE_MASK)));\n+    __ movw(c_rarg1, _saved_value_mask);\n+    __ rt_call(CAST_FROM_FN_PTR(address, DowncallLinker::save_values), tmp1);\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  int _preserved_value_mask;\n+  int _saved_value_mask;\n@@ -62,1 +62,1 @@\n-                         int preserved_value_mask)\n+                         int saved_value_mask)\n@@ -71,1 +71,1 @@\n-     _preserved_value_mask(preserved_value_mask),\n+     _saved_value_mask(saved_value_mask),\n@@ -101,1 +101,1 @@\n-                                                int preserved_value_mask) {\n+                                                int saved_value_mask) {\n@@ -106,1 +106,1 @@\n-                          needs_return_buffer, preserved_value_mask);\n+                          needs_return_buffer, saved_value_mask);\n@@ -167,2 +167,2 @@\n-  if (_preserved_value_mask != 0) {\n-    locs.set_frame_data(StubLocations::PRESERVED_VALUE_MASK, allocated_frame_size);\n+  if (_saved_value_mask != 0) {\n+    locs.set_frame_data(StubLocations::SAVED_VALUE_MASK, allocated_frame_size);\n@@ -235,1 +235,1 @@\n-  if (_preserved_value_mask != 0) {\n+  if (_saved_value_mask != 0) {\n@@ -243,2 +243,2 @@\n-    __ movptr(c_rarg0, Address(rsp, locs.data_offset(StubLocations::PRESERVED_VALUE_MASK)));\n-    __ movl(c_rarg1, _preserved_value_mask);\n+    __ movptr(c_rarg0, Address(rsp, locs.data_offset(StubLocations::SAVED_VALUE_MASK)));\n+    __ movl(c_rarg1, _saved_value_mask);\n@@ -248,1 +248,1 @@\n-    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, DowncallLinker::preserve_values)));\n+    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, DowncallLinker::save_values)));\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-void DowncallLinker::preserve_values(int32_t* value_ptr, int preserved_value_mask) {\n+void DowncallLinker::save_values(int32_t* value_ptr, int saved_value_mask) {\n@@ -42,1 +42,1 @@\n-  if (preserved_value_mask & GET_LAST_ERROR) {\n+  if (saved_value_mask & GET_LAST_ERROR) {\n@@ -46,1 +46,1 @@\n-  if (preserved_value_mask & WSA_GET_LAST_ERROR) {\n+  if (saved_value_mask & WSA_GET_LAST_ERROR) {\n@@ -51,1 +51,1 @@\n-  if (preserved_value_mask & ERRNO) {\n+  if (saved_value_mask & ERRNO) {\n","filename":"src\/hotspot\/share\/prims\/downcallLinker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-                                         int preserved_value_mask);\n+                                         int saved_value_mask);\n@@ -42,1 +42,1 @@\n-  static void preserve_values(int32_t* value_ptr, int preserved_value_mask);\n+  static void save_values(int32_t* value_ptr, int saved_value_mask);\n","filename":"src\/hotspot\/share\/prims\/downcallLinker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    PRESERVED_VALUE_MASK,\n+    SAVED_VALUE_MASK,\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-                                      jboolean needs_return_buffer, jint preserved_value_mask))\n+                                      jboolean needs_return_buffer, jint saved_value_mask))\n@@ -80,1 +80,1 @@\n-                                                    needs_return_buffer, preserved_value_mask)->code_begin();\n+                                                    needs_return_buffer, saved_value_mask)->code_begin();\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.foreign.abi.PreservableValues;\n+import jdk.internal.foreign.abi.SavableValues;\n@@ -38,2 +38,0 @@\n-import java.util.Comparator;\n-import java.util.List;\n@@ -304,1 +302,1 @@\n-                    Option.PreserveValue {\n+                    Option.SaveValues {\n@@ -320,2 +318,2 @@\n-         * parameter directly following the target address parameter. This memory segment represents\n-         * the off-heap memory into which the preserved values are to be written.\n+         * parameter directly following the target address parameter. This memory segment must be a\n+         * native segment into which the preserved values are to be written.\n@@ -323,2 +321,2 @@\n-         * @param preservedValues the names of the values to preserve.\n-         * @see PreserveValue#supported()\n+         * @param savedValues the names of the values to preserve.\n+         * @see SaveValues#supported()\n@@ -326,3 +324,5 @@\n-        static PreserveValue preserveValue(String... preservedValues) {\n-            Set<String> set = Stream.of(preservedValues).collect(Collectors.toSet());\n-            return new LinkerOptions.PreserveValueImpl(set);\n+        static SaveValues saveValues(String... savedValues) {\n+            Set<SavableValues> set = Stream.of(savedValues)\n+                    .map(SavableValues::forName)\n+                    .collect(Collectors.toSet());\n+            return new LinkerOptions.SaveValuesImpl(set);\n@@ -338,2 +338,2 @@\n-         * The off-heap memory region should have the layout {@linkplain PreserveValue#layout associated}\n-         * with the particular {@code PreserveValue} instance used to link the downcall handle.\n+         * The off-heap memory region should have the layout {@linkplain SaveValues#layout associated}\n+         * with the particular {@code SaveValues} instance used to link the downcall handle.\n@@ -342,1 +342,1 @@\n-         * from the {@linkplain PreserveValue#layout layout} of the region.\n+         * from the {@linkplain SaveValues#layout layout} of the region.\n@@ -347,2 +347,2 @@\n-         * PreserveValue pv = Linker.Option.preserveValue(\"errno\");\n-         * MethodHandle handle = Linker.nativeLinker().downcallHandle(targetAddress, FunctionDescriptor.ofVoid(), pv);\n+         * SaveValues sv = Linker.Option.saveValues(\"errno\");\n+         * MethodHandle handle = Linker.nativeLinker().downcallHandle(targetAddress, FunctionDescriptor.ofVoid(), sv);\n@@ -350,1 +350,1 @@\n-         * VarHandle errnoHandle = pv.layout().varHandle(PathElement.groupElement(\"errno\"));\n+         * VarHandle errnoHandle = sv.layout().varHandle(PathElement.groupElement(\"errno\"));\n@@ -352,3 +352,3 @@\n-         *     MemorySegment preservedValues = session.allocate(pv.layout());\n-         *     handle.invoke(preservedValues);\n-         *     int errno = errnoHandle.get(preservedValues);\n+         *     MemorySegment savedValues = session.allocate(svlayout());\n+         *     handle.invoke(savedValues);\n+         *     int errno = errnoHandle.get(savedValues);\n@@ -359,2 +359,2 @@\n-        sealed interface PreserveValue extends Option\n-                                       permits LinkerOptions.PreserveValueImpl {\n+        sealed interface SaveValues extends Option\n+                                    permits LinkerOptions.SaveValuesImpl {\n@@ -362,2 +362,2 @@\n-             * {@return A struct layout that represents the layout of the memory region passed\n-             *          to a downcall handle linked with this {@code PreserveValue} instance}\n+             * {@return A struct layout that represents the layout of the native segment passed\n+             *          to a downcall handle linked with this {@code SaveValues} instance}\n@@ -371,2 +371,2 @@\n-                return Arrays.stream(PreservableValues.values())\n-                             .map(PreservableValues::valueName)\n+                return Arrays.stream(SavableValues.values())\n+                             .map(SavableValues::valueName)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    final VMStorage preservedValueStorage;\n+    final VMStorage savedValueStorage;\n@@ -54,1 +54,1 @@\n-                         VMStorage preservedValueStorage) {\n+                         VMStorage savedValueStorage) {\n@@ -65,1 +65,1 @@\n-        this.preservedValueStorage = preservedValueStorage;\n+        this.savedValueStorage = savedValueStorage;\n@@ -76,2 +76,2 @@\n-    public VMStorage preservedValueStorage() {\n-        return preservedValueStorage;\n+    public VMStorage savedValueStorage() {\n+        return savedValueStorage;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ABIDescriptor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-        LinkerOptions optionSet = LinkerOptions.of(options);\n-        optionSet.validateForDowncall(function);\n+        LinkerOptions optionSet = LinkerOptions.forDowncall(function, options);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -188,4 +188,3 @@\n-    public int preservedValueMask() {\n-        return linkerOptions.preservedValues()\n-                .map(PreservableValues::forName)\n-                .mapToInt(PreservableValues::mask)\n+    public int savedValueMask() {\n+        return linkerOptions.saveValues()\n+                .mapToInt(SavableValues::mask)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            if (linkerOptions.hasPreservedValues()) {\n+            if (linkerOptions.hasSavedValues()) {\n@@ -103,1 +103,1 @@\n-                        Binding.vmStore(abi.preservedValueStorage(), long.class)));\n+                        Binding.vmStore(abi.savedValueStorage(), long.class)));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-            callingSequence.preservedValueMask()\n+            callingSequence.savedValueMask()\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.stream.Collectors;\n@@ -41,1 +40,1 @@\n-    private static final LinkerOptions EMPTY = LinkerOptions.of();\n+    private static final LinkerOptions EMPTY = new LinkerOptions(Map.of());\n@@ -48,1 +47,1 @@\n-    public static LinkerOptions of(Linker.Option... options) {\n+    public static LinkerOptions forDowncall(FunctionDescriptor desc, Linker.Option... options) {\n@@ -55,1 +54,3 @@\n-            optionMap.put(option.getClass(), (LinkerOptionImpl) option);\n+            LinkerOptionImpl opImpl = (LinkerOptionImpl) option;\n+            opImpl.validateForDowncall(desc);\n+            optionMap.put(option.getClass(), opImpl);\n@@ -65,4 +66,0 @@\n-    public void validateForDowncall(FunctionDescriptor descriptor) {\n-        optionsMap.values().forEach(v -> v.validateForDowncall(descriptor));\n-    }\n-\n@@ -78,2 +75,2 @@\n-    public boolean hasPreservedValues() {\n-        return getOption(PreserveValueImpl.class) != null;\n+    public boolean hasSavedValues() {\n+        return getOption(SaveValuesImpl.class) != null;\n@@ -82,2 +79,2 @@\n-    public Stream<String> preservedValues() {\n-        PreserveValueImpl stl = getOption(PreserveValueImpl.class);\n+    public Stream<SavableValues> saveValues() {\n+        SaveValuesImpl stl = getOption(SaveValuesImpl.class);\n@@ -101,1 +98,1 @@\n-                                                     PreserveValueImpl {\n+                                                     SaveValuesImpl {\n@@ -116,1 +113,1 @@\n-    public record PreserveValueImpl(Set<String> saved) implements LinkerOptionImpl, Linker.Option.PreserveValue {\n+    public record SaveValuesImpl(Set<SavableValues> saved) implements LinkerOptionImpl, Linker.Option.SaveValues {\n@@ -120,9 +117,1 @@\n-            for (String save : saved) {\n-                if (!PreservableValues.isSupported(save)) {\n-                    throw new IllegalArgumentException(\"Unknown name: \" + save\n-                            + \", must be one of: \"\n-                            + Stream.of(PreservableValues.values())\n-                                    .map(PreservableValues::valueName)\n-                                    .collect(Collectors.joining(\",\")));\n-                }\n-            }\n+            \/\/ done during construction\n@@ -135,3 +124,2 @@\n-                      .map(PreservableValues::forName)\n-                      .sorted(Comparator.comparingInt(PreservableValues::ordinal))\n-                      .map(PreservableValues::layout)\n+                      .sorted(Comparator.comparingInt(SavableValues::ordinal))\n+                      .map(SavableValues::layout)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/LinkerOptions.java","additions":14,"deletions":26,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                            boolean needsReturnBuffer, int preservedValueMask) {}\n+                            boolean needsReturnBuffer, int savedValueMask) {}\n@@ -61,1 +61,1 @@\n-                                        int preservedValueMask) {\n+                                        int savedValueMask) {\n@@ -65,1 +65,1 @@\n-        checkType(methodType, needsReturnBuffer, preservedValueMask);\n+        checkType(methodType, needsReturnBuffer, savedValueMask);\n@@ -67,1 +67,1 @@\n-        CacheKey key = new CacheKey(methodType, abi, Arrays.asList(argMoves), Arrays.asList(returnMoves), needsReturnBuffer, preservedValueMask);\n+        CacheKey key = new CacheKey(methodType, abi, Arrays.asList(argMoves), Arrays.asList(returnMoves), needsReturnBuffer, savedValueMask);\n@@ -69,1 +69,1 @@\n-            long downcallStub = makeDowncallStub(methodType, abi, argMoves, returnMoves, needsReturnBuffer, preservedValueMask);\n+            long downcallStub = makeDowncallStub(methodType, abi, argMoves, returnMoves, needsReturnBuffer, savedValueMask);\n@@ -76,1 +76,1 @@\n-    private static void checkType(MethodType methodType, boolean needsReturnBuffer, int preservedValueMask) {\n+    private static void checkType(MethodType methodType, boolean needsReturnBuffer, int savedValueMask) {\n@@ -82,1 +82,1 @@\n-            || (preservedValueMask != 0 && methodType.parameterType(checkIdx) != long.class)) {\n+            || (savedValueMask != 0 && methodType.parameterType(checkIdx) != long.class)) {\n@@ -90,1 +90,1 @@\n-                                                int preservedValueMask);\n+                                                int savedValueMask);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.foreign.abi;\n-\n-import java.lang.foreign.ValueLayout;\n-import java.util.stream.Stream;\n-\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-\n-public enum PreservableValues {\n-    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0),\n-    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1),\n-    ERRNO             (\"errno\",           JAVA_INT, 1 << 2);\n-\n-    private final String valueName;\n-    private final ValueLayout layout;\n-    private final int mask;\n-\n-    PreservableValues(String valueName, ValueLayout layout, int mask) {\n-        this.valueName = valueName;\n-        this.layout = layout.withName(valueName);\n-        this.mask = mask;\n-    }\n-\n-    public static boolean isSupported(String name) {\n-        return Stream.of(values()).anyMatch(stl -> stl.valueName().equals(name));\n-    }\n-\n-    public static PreservableValues forName(String name) {\n-        return Stream.of(values())\n-                .filter(stl -> stl.valueName().equals(name))\n-                .findAny()\n-                .orElseThrow(() -> new IllegalArgumentException(\"Unknown name: \" + name));\n-    }\n-\n-    public String valueName() {\n-        return valueName;\n-    }\n-\n-    public ValueLayout layout() {\n-        return layout;\n-    }\n-\n-    public int mask() {\n-        return mask;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/PreservableValues.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi;\n+\n+import java.lang.foreign.ValueLayout;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+\n+public enum SavableValues {\n+    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0),\n+    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1),\n+    ERRNO             (\"errno\",           JAVA_INT, 1 << 2);\n+\n+    private final String valueName;\n+    private final ValueLayout layout;\n+    private final int mask;\n+\n+    SavableValues(String valueName, ValueLayout layout, int mask) {\n+        this.valueName = valueName;\n+        this.layout = layout.withName(valueName);\n+        this.mask = mask;\n+    }\n+\n+    public static SavableValues forName(String name) {\n+        return Stream.of(values())\n+                .filter(stl -> stl.valueName().equals(name))\n+                .findAny()\n+                .orElseThrow(() -> new IllegalArgumentException(\n+                        \"Unknown name: \" + name +\", must be one of: \"\n+                            + Stream.of(SavableValues.values())\n+                                    .map(SavableValues::valueName)\n+                                    .collect(Collectors.joining(\", \"))));\n+    }\n+\n+    public String valueName() {\n+        return valueName;\n+    }\n+\n+    public ValueLayout layout() {\n+        return layout;\n+    }\n+\n+    public int mask() {\n+        return mask;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SavableValues.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -31,1 +31,1 @@\n-    PRESERVED_VALUE_MASK;\n+    SAVED_VALUE_MASK;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/StubLocations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-            StubLocations.PRESERVED_VALUE_MASK.storage(StorageType.PLACEHOLDER));\n+            StubLocations.SAVED_VALUE_MASK.storage(StorageType.PLACEHOLDER));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-            StubLocations.PRESERVED_VALUE_MASK.storage(StorageType.PLACEHOLDER));\n+            StubLocations.SAVED_VALUE_MASK.storage(StorageType.PLACEHOLDER));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run junit TestLinker\n+ * @run testng TestLinker\n@@ -30,3 +30,2 @@\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n@@ -38,3 +37,1 @@\n-import static org.junit.jupiter.api.Assertions.assertNotSame;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.testng.Assert.assertNotSame;\n@@ -54,2 +51,11 @@\n-    @ParameterizedTest\n-    @ValueSource(ints={ -1, 42 })\n+    @DataProvider\n+    public static Object[][] invalidIndexCases() {\n+        return new Object[][]{\n+                { -1, },\n+                { 42, },\n+        };\n+    }\n+\n+    @Test(dataProvider = \"invalidIndexCases\",\n+          expectedExceptions = IllegalArgumentException.class,\n+          expectedExceptionsMessageRegExp = \".*not in bounds for descriptor.*\")\n@@ -59,4 +65,1 @@\n-        IllegalArgumentException thrown = assertThrows(\n-               IllegalArgumentException.class,\n-               () -> Linker.nativeLinker().downcallHandle(desc, option));\n-        assertTrue(thrown.getMessage().matches(\".*not in bounds for descriptor.*\"));\n+        Linker.nativeLinker().downcallHandle(desc, option); \/\/ throws\n@@ -65,1 +68,2 @@\n-    @Test\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+          expectedExceptionsMessageRegExp = \".*Unknown name.*\")\n@@ -67,6 +71,1 @@\n-        Linker.Option option = Linker.Option.preserveValue(\"foo\");\n-        FunctionDescriptor desc = FunctionDescriptor.ofVoid();\n-        IllegalArgumentException thrown = assertThrows(\n-                IllegalArgumentException.class,\n-                () -> Linker.nativeLinker().downcallHandle(desc, option));\n-        assertTrue(thrown.getMessage().matches(\".*Unknown name.*\"));\n+        Linker.Option option = Linker.Option.saveValues(\"foo\"); \/\/ throws\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -409,1 +409,1 @@\n-        CallArranger.Bindings bindings = CallArranger.LINUX.getBindings(mt, fd, false, LinkerOptions.of(firstVariadicArg(1)));\n+        CallArranger.Bindings bindings = CallArranger.LINUX.getBindings(mt, fd, false, LinkerOptions.forDowncall(fd, firstVariadicArg(1)));\n@@ -432,1 +432,1 @@\n-        CallArranger.Bindings bindings = CallArranger.MACOS.getBindings(mt, fd, false, LinkerOptions.of(firstVariadicArg(1)));\n+        CallArranger.Bindings bindings = CallArranger.MACOS.getBindings(mt, fd, false, LinkerOptions.forDowncall(fd, firstVariadicArg(1)));\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestAarch64CallArranger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-        CallArranger.Bindings bindings = CallArranger.getBindings(mt, fd, false, LinkerOptions.of(firstVariadicArg(2)));\n+        CallArranger.Bindings bindings = CallArranger.getBindings(mt, fd, false, LinkerOptions.forDowncall(fd, firstVariadicArg(2)));\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @enablePreview\n- * @library ..\/ \/test\/lib\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestPreserveValue\n- *\/\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.MemorySession;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static java.lang.foreign.MemoryLayout.PathElement.groupElement;\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static org.testng.Assert.assertEquals;\n-\n-public class TestPreserveValue extends NativeTestHelper {\n-\n-    static {\n-        System.loadLibrary(\"PreserveValue\");\n-        if (IS_WINDOWS) {\n-            String system32 = System.getenv(\"SystemRoot\") + \"\\\\system32\";\n-            System.load(system32 + \"\\\\Kernel32.dll\");\n-            System.load(system32 + \"\\\\Ws2_32.dll\");\n-        }\n-    }\n-\n-    private record SavedThreadLocalCase(String nativeTarget, String threadLocalName) {}\n-\n-    @Test(dataProvider = \"cases\")\n-    public void testSavedThreadLocal(SavedThreadLocalCase testCase) throws Throwable {\n-        Linker.Option.PreserveValue stl = Linker.Option.preserveValue(testCase.threadLocalName());\n-        MethodHandle handle = downcallHandle(testCase.nativeTarget(), FunctionDescriptor.ofVoid(JAVA_INT), stl);\n-\n-        VarHandle errnoHandle = stl.layout().varHandle(groupElement(testCase.threadLocalName()));\n-\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            MemorySegment saveSeg = session.allocate(stl.layout());\n-            int testValue = 42;\n-            handle.invoke(saveSeg, testValue);\n-            int savedErrno = (int) errnoHandle.get(saveSeg);\n-            assertEquals(savedErrno, testValue);\n-        }\n-    }\n-\n-    @DataProvider\n-    public static Object[][] cases() {\n-        List<SavedThreadLocalCase> cases = new ArrayList<>();\n-\n-        cases.add(new SavedThreadLocalCase(\"set_errno\", \"errno\"));\n-        if (IS_WINDOWS) {\n-            cases.add(new SavedThreadLocalCase(\"SetLastError\", \"GetLastError\"));\n-            cases.add(new SavedThreadLocalCase(\"WSASetLastError\", \"WSAGetLastError\"));\n-        }\n-\n-        return cases.stream().map(tc -> new Object[] {tc}).toArray(Object[][]::new);\n-    }\n-\n-}\n-\n","filename":"test\/jdk\/java\/foreign\/preservevalue\/TestPreserveValue.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @library ..\/ \/test\/lib\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestSaveValues\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.lang.foreign.MemoryLayout.PathElement.groupElement;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSaveValues extends NativeTestHelper {\n+\n+    static {\n+        System.loadLibrary(\"SaveValues\");\n+        if (IS_WINDOWS) {\n+            String system32 = System.getenv(\"SystemRoot\") + \"\\\\system32\";\n+            System.load(system32 + \"\\\\Kernel32.dll\");\n+            System.load(system32 + \"\\\\Ws2_32.dll\");\n+        }\n+    }\n+\n+    private record SaveValuesCase(String nativeTarget, String threadLocalName) {}\n+\n+    @Test(dataProvider = \"cases\")\n+    public void testSavedThreadLocal(SaveValuesCase testCase) throws Throwable {\n+        Linker.Option.SaveValues stl = Linker.Option.saveValues(testCase.threadLocalName());\n+        MethodHandle handle = downcallHandle(testCase.nativeTarget(), FunctionDescriptor.ofVoid(JAVA_INT), stl);\n+\n+        VarHandle errnoHandle = stl.layout().varHandle(groupElement(testCase.threadLocalName()));\n+\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment saveSeg = session.allocate(stl.layout());\n+            int testValue = 42;\n+            handle.invoke(saveSeg, testValue);\n+            int savedErrno = (int) errnoHandle.get(saveSeg);\n+            assertEquals(savedErrno, testValue);\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] cases() {\n+        List<SaveValuesCase> cases = new ArrayList<>();\n+\n+        cases.add(new SaveValuesCase(\"set_errno\", \"errno\"));\n+        if (IS_WINDOWS) {\n+            cases.add(new SaveValuesCase(\"SetLastError\", \"GetLastError\"));\n+            cases.add(new SaveValuesCase(\"WSASetLastError\", \"WSAGetLastError\"));\n+        }\n+\n+        return cases.stream().map(tc -> new Object[] {tc}).toArray(Object[][]::new);\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/java\/foreign\/savevalues\/TestSaveValues.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/foreign\/savevalues\/libSaveValues.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/foreign\/preservevalue\/libPreserveValue.c","status":"renamed"}]}