{"files":[{"patch":"@@ -49,1 +49,1 @@\n-  int _saved_value_mask;\n+  int _captured_state_mask;\n@@ -63,1 +63,1 @@\n-                         int saved_value_mask)\n+                         int captured_state_mask)\n@@ -72,1 +72,1 @@\n-     _saved_value_mask(saved_value_mask),\n+     _captured_state_mask(captured_state_mask),\n@@ -102,1 +102,1 @@\n-                                                int saved_value_mask) {\n+                                                int captured_state_mask) {\n@@ -107,1 +107,1 @@\n-                          needs_return_buffer, saved_value_mask);\n+                          needs_return_buffer, captured_state_mask);\n@@ -170,2 +170,2 @@\n-  if (_saved_value_mask != 0) {\n-    locs.set_frame_data(StubLocations::SAVED_VALUE_MASK, allocated_frame_size);\n+  if (_captured_state_mask != 0) {\n+    locs.set_frame_data(StubLocations::CAPTURED_STATE_MASK, allocated_frame_size);\n@@ -236,1 +236,1 @@\n-  if (_saved_value_mask != 0) {\n+  if (_captured_state_mask != 0) {\n@@ -243,3 +243,3 @@\n-    __ ldr(c_rarg0, Address(sp, locs.data_offset(StubLocations::SAVED_VALUE_MASK)));\n-    __ movw(c_rarg1, _saved_value_mask);\n-    __ rt_call(CAST_FROM_FN_PTR(address, DowncallLinker::save_values), tmp1);\n+    __ ldr(c_rarg0, Address(sp, locs.data_offset(StubLocations::CAPTURED_STATE_MASK)));\n+    __ movw(c_rarg1, _captured_state_mask);\n+    __ rt_call(CAST_FROM_FN_PTR(address, DowncallLinker::capture_state), tmp1);\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  int _saved_value_mask;\n+  int _captured_state_mask;\n@@ -62,1 +62,1 @@\n-                         int saved_value_mask)\n+                         int captured_state_mask)\n@@ -71,1 +71,1 @@\n-     _saved_value_mask(saved_value_mask),\n+     _captured_state_mask(captured_state_mask),\n@@ -101,1 +101,1 @@\n-                                                int saved_value_mask) {\n+                                                int captured_state_mask) {\n@@ -106,1 +106,1 @@\n-                          needs_return_buffer, saved_value_mask);\n+                          needs_return_buffer, captured_state_mask);\n@@ -167,2 +167,2 @@\n-  if (_saved_value_mask != 0) {\n-    locs.set_frame_data(StubLocations::SAVED_VALUE_MASK, allocated_frame_size);\n+  if (_captured_state_mask != 0) {\n+    locs.set_frame_data(StubLocations::CAPTURED_STATE_MASK, allocated_frame_size);\n@@ -235,1 +235,1 @@\n-  if (_saved_value_mask != 0) {\n+  if (_captured_state_mask != 0) {\n@@ -243,2 +243,2 @@\n-    __ movptr(c_rarg0, Address(rsp, locs.data_offset(StubLocations::SAVED_VALUE_MASK)));\n-    __ movl(c_rarg1, _saved_value_mask);\n+    __ movptr(c_rarg0, Address(rsp, locs.data_offset(StubLocations::CAPTURED_STATE_MASK)));\n+    __ movl(c_rarg1, _captured_state_mask);\n@@ -248,1 +248,1 @@\n-    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, DowncallLinker::save_values)));\n+    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, DowncallLinker::capture_state)));\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-void DowncallLinker::save_values(int32_t* value_ptr, int saved_value_mask) {\n+void DowncallLinker::capture_state(int32_t* value_ptr, int captured_state_mask) {\n@@ -42,1 +42,1 @@\n-  if (saved_value_mask & GET_LAST_ERROR) {\n+  if (captured_state_mask & GET_LAST_ERROR) {\n@@ -46,1 +46,1 @@\n-  if (saved_value_mask & WSA_GET_LAST_ERROR) {\n+  if (captured_state_mask & WSA_GET_LAST_ERROR) {\n@@ -51,1 +51,1 @@\n-  if (saved_value_mask & ERRNO) {\n+  if (captured_state_mask & ERRNO) {\n","filename":"src\/hotspot\/share\/prims\/downcallLinker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-                                         int saved_value_mask);\n+                                         int captured_state_mask);\n@@ -42,1 +42,1 @@\n-  static void save_values(int32_t* value_ptr, int saved_value_mask);\n+  static void capture_state(int32_t* value_ptr, int captured_state_mask);\n","filename":"src\/hotspot\/share\/prims\/downcallLinker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    SAVED_VALUE_MASK,\n+    CAPTURED_STATE_MASK,\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-                                      jboolean needs_return_buffer, jint saved_value_mask))\n+                                      jboolean needs_return_buffer, jint captured_state_mask))\n@@ -80,1 +80,1 @@\n-                                                    needs_return_buffer, saved_value_mask)->code_begin();\n+                                                    needs_return_buffer, captured_state_mask)->code_begin();\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.foreign.abi.SavableValues;\n+import jdk.internal.foreign.abi.CapturableState;\n@@ -302,1 +302,1 @@\n-                    Option.SaveValues {\n+                    Option.CaptureCallState {\n@@ -314,2 +314,3 @@\n-         * {@return A linker option used to save values that might be overwritten by the runtime\n-         *          before they can be read through conventional means}\n+         * {@return A linker option used to portions of the execution state immediately after\n+         *          calling a foreign function associated with a downcall method handle,\n+         *          before it can be overwritten by the runtime, or read through conventional means}\n@@ -319,1 +320,1 @@\n-         * native segment into which the saved values are to be written.\n+         * native segment into which the captured state is written.\n@@ -321,2 +322,2 @@\n-         * @param savedValues the names of the values to save.\n-         * @see SaveValues#supported()\n+         * @param capturedState the names of the values to save.\n+         * @see CaptureCallState#supported()\n@@ -324,3 +325,3 @@\n-        static SaveValues saveValues(String... savedValues) {\n-            Set<SavableValues> set = Stream.of(savedValues)\n-                    .map(SavableValues::forName)\n+        static CaptureCallState captureCallState(String... capturedState) {\n+            Set<CapturableState> set = Stream.of(capturedState)\n+                    .map(CapturableState::forName)\n@@ -328,1 +329,1 @@\n-            return new LinkerOptions.SaveValuesImpl(set);\n+            return new LinkerOptions.CaptureCallStateImpl(set);\n@@ -332,2 +333,3 @@\n-         * A linker option for saving values that might be overwritten by the runtime\n-         * before they can be read through conventional means.\n+         * A linker option for portions of the execution state immediately\n+         * calling a foreign function associated with a downcall method handle,\n+         * before it can be overwritten by the runtime, or read through conventional means.\n@@ -335,2 +337,2 @@\n-         * Values are saved by a downcall method handle on invocation, by writing them\n-         * to a region of off-heap memory provided by the user to the downcall method handle.\n+         * State is captured by a downcall method handle on invocation, by writing it\n+         * to a native segment provided by the user to the downcall method handle.\n@@ -338,2 +340,2 @@\n-         * The off-heap memory region should have the layout {@linkplain SaveValues#layout associated}\n-         * with the particular {@code SaveValues} instance used to link the downcall handle.\n+         * The native segment should have the layout {@linkplain CaptureCallState#layout associated}\n+         * with the particular {@code CaptureCallState} instance used to link the downcall handle.\n@@ -341,2 +343,2 @@\n-         * Saved values can be retrieved from this region by constructing var handles\n-         * from the {@linkplain SaveValues#layout layout} of the region.\n+         * Captured state can be retrieved from this native segment by constructing var handles\n+         * from the {@linkplain #layout layout} associated with the {@code CaptureCallState} instance.\n@@ -347,2 +349,2 @@\n-         * SaveValues sv = Linker.Option.saveValues(\"errno\");\n-         * MethodHandle handle = Linker.nativeLinker().downcallHandle(targetAddress, FunctionDescriptor.ofVoid(), sv);\n+         * CaptureCallState ccs = Linker.Option.captureCallState(\"errno\");\n+         * MethodHandle handle = Linker.nativeLinker().downcallHandle(targetAddress, FunctionDescriptor.ofVoid(), ccs);\n@@ -350,1 +352,1 @@\n-         * VarHandle errnoHandle = sv.layout().varHandle(PathElement.groupElement(\"errno\"));\n+         * VarHandle errnoHandle = ccs.layout().varHandle(PathElement.groupElement(\"errno\"));\n@@ -352,3 +354,3 @@\n-         *     MemorySegment savedValues = session.allocate(svlayout());\n-         *     handle.invoke(savedValues);\n-         *     int errno = errnoHandle.get(savedValues);\n+         *     MemorySegment capturedState = session.allocate(ccs.layout());\n+         *     handle.invoke(capturedState);\n+         *     int errno = errnoHandle.get(capturedState);\n@@ -359,2 +361,2 @@\n-        sealed interface SaveValues extends Option\n-                                    permits LinkerOptions.SaveValuesImpl {\n+        sealed interface CaptureCallState extends Option\n+                                          permits LinkerOptions.CaptureCallStateImpl {\n@@ -363,1 +365,1 @@\n-             *          to a downcall handle linked with this {@code SaveValues} instance}\n+             *          to a downcall handle linked with this {@code CapturedCallState} instance}\n@@ -368,1 +370,1 @@\n-             * {@return the names of the values that can be saved by this implementation}\n+             * {@return the names of the state that can be capture by this implementation}\n@@ -371,2 +373,2 @@\n-                return Arrays.stream(SavableValues.values())\n-                             .map(SavableValues::valueName)\n+                return Arrays.stream(CapturableState.values())\n+                             .map(CapturableState::stateName)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":33,"deletions":31,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    final VMStorage savedValueStorage;\n+    final VMStorage capturedStateStorage;\n@@ -54,1 +54,1 @@\n-                         VMStorage savedValueStorage) {\n+                         VMStorage capturedStateStorage) {\n@@ -65,1 +65,1 @@\n-        this.savedValueStorage = savedValueStorage;\n+        this.capturedStateStorage = capturedStateStorage;\n@@ -76,2 +76,2 @@\n-    public VMStorage savedValueStorage() {\n-        return savedValueStorage;\n+    public VMStorage capturedStateStorage() {\n+        return capturedStateStorage;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ABIDescriptor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -188,3 +188,3 @@\n-    public int savedValueMask() {\n-        return linkerOptions.saveValues()\n-                .mapToInt(SavableValues::mask)\n+    public int capturedStateMask() {\n+        return linkerOptions.capturedCallState()\n+                .mapToInt(CapturableState::mask)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            if (linkerOptions.hasSavedValues()) {\n+            if (linkerOptions.hasCapturedCallState()) {\n@@ -103,1 +103,1 @@\n-                        Binding.vmStore(abi.savedValueStorage(), long.class)));\n+                        Binding.vmStore(abi.capturedStateStorage(), long.class)));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi;\n+\n+import java.lang.foreign.ValueLayout;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+\n+public enum CapturableState {\n+    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0),\n+    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1),\n+    ERRNO             (\"errno\",           JAVA_INT, 1 << 2);\n+\n+    private final String stateName;\n+    private final ValueLayout layout;\n+    private final int mask;\n+\n+    CapturableState(String stateName, ValueLayout layout, int mask) {\n+        this.stateName = stateName;\n+        this.layout = layout.withName(stateName);\n+        this.mask = mask;\n+    }\n+\n+    public static CapturableState forName(String name) {\n+        return Stream.of(values())\n+                .filter(stl -> stl.stateName().equals(name))\n+                .findAny()\n+                .orElseThrow(() -> new IllegalArgumentException(\n+                        \"Unknown name: \" + name +\", must be one of: \"\n+                            + Stream.of(CapturableState.values())\n+                                    .map(CapturableState::stateName)\n+                                    .collect(Collectors.joining(\", \"))));\n+    }\n+\n+    public String stateName() {\n+        return stateName;\n+    }\n+\n+    public ValueLayout layout() {\n+        return layout;\n+    }\n+\n+    public int mask() {\n+        return mask;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CapturableState.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -89,1 +89,1 @@\n-            callingSequence.savedValueMask()\n+            callingSequence.capturedStateMask()\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-    public boolean hasSavedValues() {\n-        return getOption(SaveValuesImpl.class) != null;\n+    public boolean hasCapturedCallState() {\n+        return getOption(CaptureCallStateImpl.class) != null;\n@@ -79,2 +79,2 @@\n-    public Stream<SavableValues> saveValues() {\n-        SaveValuesImpl stl = getOption(SaveValuesImpl.class);\n+    public Stream<CapturableState> capturedCallState() {\n+        CaptureCallStateImpl stl = getOption(CaptureCallStateImpl.class);\n@@ -98,1 +98,1 @@\n-                                                     SaveValuesImpl {\n+                                                     CaptureCallStateImpl {\n@@ -113,1 +113,1 @@\n-    public record SaveValuesImpl(Set<SavableValues> saved) implements LinkerOptionImpl, Linker.Option.SaveValues {\n+    public record CaptureCallStateImpl(Set<CapturableState> saved) implements LinkerOptionImpl, Linker.Option.CaptureCallState {\n@@ -124,2 +124,2 @@\n-                      .sorted(Comparator.comparingInt(SavableValues::ordinal))\n-                      .map(SavableValues::layout)\n+                      .sorted(Comparator.comparingInt(CapturableState::ordinal))\n+                      .map(CapturableState::layout)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/LinkerOptions.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                            boolean needsReturnBuffer, int savedValueMask) {}\n+                            boolean needsReturnBuffer, int capturedStateMask) {}\n@@ -61,1 +61,1 @@\n-                                        int savedValueMask) {\n+                                        int capturedStateMask) {\n@@ -65,1 +65,1 @@\n-        checkType(methodType, needsReturnBuffer, savedValueMask);\n+        checkType(methodType, needsReturnBuffer, capturedStateMask);\n@@ -67,1 +67,1 @@\n-        CacheKey key = new CacheKey(methodType, abi, Arrays.asList(argMoves), Arrays.asList(returnMoves), needsReturnBuffer, savedValueMask);\n+        CacheKey key = new CacheKey(methodType, abi, Arrays.asList(argMoves), Arrays.asList(returnMoves), needsReturnBuffer, capturedStateMask);\n@@ -69,1 +69,1 @@\n-            long downcallStub = makeDowncallStub(methodType, abi, argMoves, returnMoves, needsReturnBuffer, savedValueMask);\n+            long downcallStub = makeDowncallStub(methodType, abi, argMoves, returnMoves, needsReturnBuffer, capturedStateMask);\n@@ -90,1 +90,1 @@\n-                                                int savedValueMask);\n+                                                int capturedStateMask);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/NativeEntryPoint.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.foreign.abi;\n-\n-import java.lang.foreign.ValueLayout;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-\n-public enum SavableValues {\n-    GET_LAST_ERROR    (\"GetLastError\",    JAVA_INT, 1 << 0),\n-    WSA_GET_LAST_ERROR(\"WSAGetLastError\", JAVA_INT, 1 << 1),\n-    ERRNO             (\"errno\",           JAVA_INT, 1 << 2);\n-\n-    private final String valueName;\n-    private final ValueLayout layout;\n-    private final int mask;\n-\n-    SavableValues(String valueName, ValueLayout layout, int mask) {\n-        this.valueName = valueName;\n-        this.layout = layout.withName(valueName);\n-        this.mask = mask;\n-    }\n-\n-    public static SavableValues forName(String name) {\n-        return Stream.of(values())\n-                .filter(stl -> stl.valueName().equals(name))\n-                .findAny()\n-                .orElseThrow(() -> new IllegalArgumentException(\n-                        \"Unknown name: \" + name +\", must be one of: \"\n-                            + Stream.of(SavableValues.values())\n-                                    .map(SavableValues::valueName)\n-                                    .collect(Collectors.joining(\", \"))));\n-    }\n-\n-    public String valueName() {\n-        return valueName;\n-    }\n-\n-    public ValueLayout layout() {\n-        return layout;\n-    }\n-\n-    public int mask() {\n-        return mask;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SavableValues.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -31,1 +31,1 @@\n-    SAVED_VALUE_MASK;\n+    CAPTURED_STATE_MASK;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/StubLocations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-            StubLocations.SAVED_VALUE_MASK.storage(StorageType.PLACEHOLDER));\n+            StubLocations.CAPTURED_STATE_MASK.storage(StorageType.PLACEHOLDER));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-            StubLocations.SAVED_VALUE_MASK.storage(StorageType.PLACEHOLDER));\n+            StubLocations.CAPTURED_STATE_MASK.storage(StorageType.PLACEHOLDER));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        Linker.Option option = Linker.Option.saveValues(\"foo\"); \/\/ throws\n+        Linker.Option.captureCallState(\"foo\"); \/\/ throws\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestSaveValues\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestCaptureCallState\n@@ -48,1 +48,1 @@\n-public class TestSaveValues extends NativeTestHelper {\n+public class TestCaptureCallState extends NativeTestHelper {\n@@ -51,1 +51,1 @@\n-        System.loadLibrary(\"SaveValues\");\n+        System.loadLibrary(\"CaptureCallState\");\n@@ -63,1 +63,1 @@\n-        Linker.Option.SaveValues stl = Linker.Option.saveValues(testCase.threadLocalName());\n+        Linker.Option.CaptureCallState stl = Linker.Option.captureCallState(testCase.threadLocalName());\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/jdk\/java\/foreign\/savevalues\/TestSaveValues.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/foreign\/capturecallstate\/libCaptureCallState.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/foreign\/savevalues\/libSaveValues.c","status":"renamed"}]}