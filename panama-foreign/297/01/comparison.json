{"files":[{"patch":"@@ -196,1 +196,10 @@\n-    public DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String ignored, MemoryLayout parentLayout) {\n+        return addVarHandle(javaName, nativeName, layout, type, parentLayout);\n+    }\n+\n+    @Override\n+    public DirectMethodHandleDesc addGlobalVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n+        return addVarHandle(javaName, nativeName, layout, type, null);\n+    }\n+\n+    private DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ClassConstantHelper.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-    DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout);\n+    DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout parentLayout);\n+    DirectMethodHandleDesc addGlobalVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/ConstantHelper.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-    void addVarHandleGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n-        emitForwardGetter(constantHelper.addVarHandle(javaName, nativeName, layout, type, parentLayout));\n+    void addVarHandleGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n+        emitForwardGetter(constantHelper.addGlobalVarHandle(javaName, nativeName, layout, type));\n@@ -117,1 +117,1 @@\n-    void addSegmentGetter(String javaName, String nativeName, MemoryLayout layout, MemoryLayout parentLayout) {\n+    void addSegmentGetter(String javaName, String nativeName, MemoryLayout layout) {\n@@ -125,1 +125,1 @@\n-    void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n@@ -133,1 +133,1 @@\n-                + varHandleGetCallString(javaName, nativeName, layout, type, null) + \".get(\" + vhParam + \");\\n\");\n+                + globalVarHandleGetCallString(javaName, nativeName, layout, type) + \".get(\" + vhParam + \");\\n\");\n@@ -140,1 +140,1 @@\n-    void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n@@ -147,1 +147,1 @@\n-        append(varHandleGetCallString(javaName, nativeName, layout, type, null) + \".set(\" + vhParam + \", x);\\n\");\n+        append(globalVarHandleGetCallString(javaName, nativeName, layout, type) + \".set(\" + vhParam + \", x);\\n\");\n@@ -205,2 +205,2 @@\n-    protected String varHandleGetCallString(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n-        return getCallString(constantHelper.addVarHandle(javaName, nativeName, layout, type, parentLayout));\n+    private String globalVarHandleGetCallString(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n+        return getCallString(constantHelper.addGlobalVarHandle(javaName, nativeName, layout, type));\n@@ -226,0 +226,1 @@\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/JavaSourceBuilder.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -208,1 +208,3 @@\n-                    currentBuilder = new StructBuilder(currentBuilder, className, pkgName, constantHelper);\n+                    MemoryLayout parentLayout = parentLayout(d);\n+                    String parentLayoutFieldName = className + \"$struct\";\n+                    currentBuilder = new StructBuilder(currentBuilder, className, parentLayoutFieldName, parentLayout, pkgName, constantHelper);\n@@ -212,1 +214,1 @@\n-                    currentBuilder.addLayoutGetter(className, d.layout().get());\n+                    currentBuilder.addLayoutGetter(parentLayoutFieldName, d.layout().get());\n@@ -420,1 +422,0 @@\n-            MemoryLayout parentLayout = parentLayout(parent);\n@@ -423,1 +424,1 @@\n-                    currentBuilder.addSegmentGetter(fieldName, tree.name(), treeLayout, parentLayout);\n+                    currentBuilder.addSegmentGetter(fieldName, tree.name(), treeLayout);\n@@ -428,3 +429,3 @@\n-                currentBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);\n-                currentBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);\n-                currentBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);\n+                currentBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz);\n+                currentBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz);\n+                currentBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz);\n@@ -435,1 +436,1 @@\n-                    toplevelBuilder.addSegmentGetter(fieldName, tree.name(), treeLayout, null);\n+                    toplevelBuilder.addSegmentGetter(fieldName, tree.name(), treeLayout);\n@@ -438,4 +439,4 @@\n-                    toplevelBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz,null);\n-                    toplevelBuilder.addSegmentGetter(fieldName, tree.name(), treeLayout, null);\n-                    toplevelBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, null);\n-                    toplevelBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, null);\n+                    toplevelBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz);\n+                    toplevelBuilder.addSegmentGetter(fieldName, tree.name(), treeLayout);\n+                    toplevelBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz);\n+                    toplevelBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -125,1 +125,10 @@\n-    public DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    public DirectMethodHandleDesc addFieldVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout ignored) {\n+        return addVarHandle(javaName, nativeName, layout, type, parentJavaName);\n+    }\n+\n+    @Override\n+    public DirectMethodHandleDesc addGlobalVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n+        return addVarHandle(javaName, nativeName, layout, type, null);\n+    }\n+\n+    private DirectMethodHandleDesc addVarHandle(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaFieldName) {\n@@ -132,1 +141,1 @@\n-            String fieldName = emitVarHandleField(javaName, type, layout);\n+            String fieldName = emitVarHandleField(javaName, nativeName, type, layout, parentJavaFieldName);\n@@ -372,1 +381,1 @@\n-    private String emitVarHandleField(String javaName, Class<?> type, MemoryLayout layout) {\n+    private String emitVarHandleField(String javaName, String nativeName, Class<?> type, MemoryLayout layout, String parentJavaName) {\n@@ -386,2 +395,6 @@\n-        append(getLayoutFieldName(javaName));\n-        append(\".varHandle(\" + typeName + \".class)\");\n+        append(getLayoutFieldName(parentJavaName != null ? parentJavaName : javaName));\n+        append(\".varHandle(\" + typeName + \".class\");\n+        if (parentJavaName != null) {\n+            append(\", MemoryLayout.PathElement.groupElement(\\\"\" + nativeName + \"\\\")\");\n+        }\n+        append(\")\");\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/SourceConstantHelper.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+    private final String parentLayoutFieldName;\n+    private final MemoryLayout parentLayout;\n@@ -37,1 +39,1 @@\n-    StructBuilder(JavaSourceBuilder prev, String className, String pkgName, ConstantHelper constantHelper) {\n+    StructBuilder(JavaSourceBuilder prev, String className, String parentLayoutFieldName, MemoryLayout layout, String pkgName, ConstantHelper constantHelper) {\n@@ -40,0 +42,3 @@\n+        this.parentLayoutFieldName = parentLayoutFieldName;\n+        this.parentLayout = layout;\n+\n@@ -106,2 +111,2 @@\n-    void addVarHandleGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n-        var desc = constantHelper.addVarHandle(getQualifiedName(javaName), nativeName, layout, type, parentLayout);\n+    void addVarHandleGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n+        var desc = constantHelper.addFieldVarHandle(getQualifiedName(javaName), nativeName, layout, type, parentLayoutFieldName, parentLayout);\n@@ -122,1 +127,1 @@\n-        var desc = constantHelper.addLayout(javaName + \"$struct\", layout);\n+        var desc = constantHelper.addLayout(javaName, layout);\n@@ -136,1 +141,1 @@\n-    void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n@@ -143,1 +148,1 @@\n-                + varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayout) + \".get(seg);\\n\");\n+                + fieldVarHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayoutFieldName, parentLayout) + \".get(seg);\\n\");\n@@ -149,1 +154,1 @@\n-        addIndexGetter(javaName, nativeName, layout, type, parentLayout);\n+        addIndexGetter(javaName, nativeName, layout, type, parentLayoutFieldName, parentLayout);\n@@ -153,1 +158,1 @@\n-    void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type) {\n@@ -160,1 +165,1 @@\n-        append(varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, null) + \".set(seg, x);\\n\");\n+        append(fieldVarHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayoutFieldName, parentLayout) + \".set(seg, x);\\n\");\n@@ -166,1 +171,1 @@\n-        addIndexSetter(javaName, nativeName, layout, type, parentLayout);\n+        addIndexSetter(javaName, nativeName, layout, type, parentLayoutFieldName, parentLayout);\n@@ -170,1 +175,1 @@\n-    void addSegmentGetter(String javaName, String nativeName, MemoryLayout layout, MemoryLayout parentLayout) {\n+    void addSegmentGetter(String javaName, String nativeName, MemoryLayout layout) {\n@@ -237,1 +242,1 @@\n-    private void addIndexGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    private void addIndexGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout parentLayout) {\n@@ -245,1 +250,1 @@\n-                + varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayout) +\n+                + fieldVarHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentJavaName, parentLayout) +\n@@ -253,1 +258,1 @@\n-    private void addIndexSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {\n+    private void addIndexSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout parentLayout) {\n@@ -260,1 +265,1 @@\n-        append(varHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentLayout) +\n+        append(fieldVarHandleGetCallString(getQualifiedName(javaName), nativeName, layout, type, parentJavaName, parentLayout) +\n@@ -267,0 +272,4 @@\n+\n+    private String fieldVarHandleGetCallString(String javaName, String nativeName, MemoryLayout layout, Class<?> type, String parentJavaName, MemoryLayout parentLayout) {\n+        return getCallString(constantHelper.addFieldVarHandle(javaName, nativeName, layout, type, parentJavaName, parentLayout));\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/StructBuilder.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Array;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class JtregJextractSources {\n+\n+    public static int main(String[] args) throws IOException {\n+        Path sourcePath = Path.of(\"sources\");\n+        JtregJextract jj =  new JtregJextract(null, sourcePath);\n+        String[] newArgs = new String[args.length + 1];\n+        newArgs[0] = \"--source\";\n+        System.arraycopy(args, 0, newArgs, 1, args.length);\n+        jj.jextract(newArgs);\n+\n+        Path outputDir = Paths.get(System.getProperty(\"test.classes\", \".\"));\n+\n+        List<String> files = Files.find(sourcePath.toAbsolutePath(), 999, (path, ignored) -> path.toString().endsWith(\".java\"))\n+                .map(p -> p.toAbsolutePath().toString())\n+                .collect(Collectors.toList());\n+\n+        List<String> commands = new ArrayList<>();\n+        commands.add(Paths.get(System.getProperty(\"test.jdk\"), \"bin\", \"javac\").toString());\n+        commands.add(\"--add-modules\");\n+        commands.add(\"jdk.incubator.foreign\");\n+        commands.add(\"-d\");\n+        commands.add(outputDir.toAbsolutePath().toString());\n+        commands.addAll(files);\n+\n+        try {\n+            Process proc = new ProcessBuilder(commands).inheritIO().start();\n+            int result = proc.waitFor();\n+            if (result != 0) {\n+                throw new RuntimeException(\"javac returns non-zero value: \" + result);\n+            }\n+            return result;\n+        } catch (IOException ioExp) {\n+            throw new UncheckedIOException(ioExp);\n+        } catch (InterruptedException intExp) {\n+            throw new RuntimeException(intExp);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/JtregJextractSources.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @test\n+ * @test id=classes\n@@ -40,0 +40,10 @@\n+\n+\/*\n+ * @test id=sources\n+ * @library ..\n+ * @modules jdk.incubator.jextract\n+ *\n+ * @run driver JtregJextractSources -l Struct -t test.jextract.struct -- struct.h\n+ * @run testng\/othervm -Dforeign.restricted=permit LibStructTest\n+ *\/\n+\n","filename":"test\/jdk\/tools\/jextract\/testStruct\/LibStructTest.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}