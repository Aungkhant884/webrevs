{"files":[{"patch":"@@ -42,1 +42,1 @@\n-    public AbstractLayout(long size, long alignment, Optional<String> name) {\n+    AbstractLayout(long size, long alignment, Optional<String> name) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AbstractLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-public sealed class FunctionDescriptor permits FunctionDescriptor.VariadicFunction {\n+public sealed class FunctionDescriptor {\n@@ -217,1 +217,1 @@\n-        public VariadicFunction(FunctionDescriptor descriptor, MemoryLayout... argLayouts) {\n+        VariadicFunction(FunctionDescriptor descriptor, MemoryLayout... argLayouts) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-sealed public interface VaList permits WinVaList, SysVVaList, LinuxAArch64VaList, MacOsAArch64VaList, SharedUtils.EmptyVaList {\n+public sealed interface VaList permits WinVaList, SysVVaList, LinuxAArch64VaList, MacOsAArch64VaList, SharedUtils.EmptyVaList {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class MappedMemorySegmentImpl extends NativeMemorySegmentImpl {\n+public sealed class MappedMemorySegmentImpl extends NativeMemorySegmentImpl {\n@@ -44,1 +44,1 @@\n-    static ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();\n+    static final ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();\n@@ -96,1 +96,1 @@\n-    public static class EmptyMappedMemorySegmentImpl extends MappedMemorySegmentImpl {\n+    public static final class EmptyMappedMemorySegmentImpl extends MappedMemorySegmentImpl {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-    public final static class NonCloseableView implements MemorySession {\n+    public static final class NonCloseableView implements MemorySession {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    private static final boolean skipZeroMemory = GetBooleanAction.privilegedGetProperty(\"jdk.internal.foreign.skipZeroMemory\");\n+    private static final boolean SKIP_ZERO_MEMORY = GetBooleanAction.privilegedGetProperty(\"jdk.internal.foreign.skipZeroMemory\");\n@@ -118,1 +118,1 @@\n-        if (!skipZeroMemory) {\n+        if (!SKIP_ZERO_MEMORY) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -31,1 +30,5 @@\n-public class PlatformLayouts {\n+public final class PlatformLayouts {\n+\n+    private PlatformLayouts() {\n+        \/\/just the one\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-import java.util.function.BiPredicate;\n@@ -132,1 +131,1 @@\n-    private int CONTEXT_IDX = -1;\n+    private int contextIdx = -1;\n@@ -302,2 +301,2 @@\n-        CONTEXT_IDX = newLocal(Object.class);\n-        emitStore(Object.class, CONTEXT_IDX);\n+        contextIdx = newLocal(Object.class);\n+        emitStore(Object.class, contextIdx);\n@@ -561,2 +560,2 @@\n-        assert CONTEXT_IDX != -1;\n-        emitLoad(Object.class, CONTEXT_IDX);\n+        assert contextIdx != -1;\n+        emitLoad(Object.class, contextIdx);\n@@ -567,2 +566,2 @@\n-        assert CONTEXT_IDX != -1;\n-        emitLoad(Object.class, CONTEXT_IDX);\n+        assert contextIdx != -1;\n+        emitLoad(Object.class, contextIdx);\n@@ -573,2 +572,2 @@\n-        assert CONTEXT_IDX != -1;\n-        emitLoad(Object.class, CONTEXT_IDX);\n+        assert contextIdx != -1;\n+        emitLoad(Object.class, contextIdx);\n@@ -923,1 +922,5 @@\n-    static class Runtime {\n+    static final class Runtime {\n+\n+        private Runtime() {\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -171,3 +171,1 @@\n-                        (storage, type, value) -> {\n-                            leafArgs[invData.argIndexMap.get(storage)] = value;\n-                        }, unboxContext);\n+                        (storage, type, value) -> leafArgs[invData.argIndexMap.get(storage)] = value, unboxContext);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    private class Node {\n+    private final class Node {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SoftReferenceCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,4 @@\n-public class UpcallStubs {\n+public final class UpcallStubs {\n+\n+    private UpcallStubs() {\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}