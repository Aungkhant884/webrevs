{"files":[{"patch":"@@ -98,1 +98,1 @@\n-     *         MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE));\n+     *         MemoryLayout.sequenceLayout(Long.MAX_VALUE, ValueLayout.JAVA_BYTE));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AddressLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -664,18 +664,0 @@\n-    \/**\n-     * Creates a sequence layout with the given element layout and the maximum element\n-     * count such that it does not overflow a {@code long}.\n-     *\n-     * This is equivalent to the following code:\n-     * {@snippet lang = java:\n-     * sequenceLayout(Long.MAX_VALUE \/ elementLayout.byteSize(), elementLayout);\n-     * }\n-     *\n-     * @param elementLayout the sequence element layout.\n-     * @return a new sequence layout with the given element layout and maximum element count.\n-     * @throws IllegalArgumentException if {@code elementLayout.byteSize() % elementLayout.byteAlignment() != 0}.\n-     *\/\n-    static SequenceLayout sequenceLayout(MemoryLayout elementLayout) {\n-        Objects.requireNonNull(elementLayout);\n-        return sequenceLayout(Long.MAX_VALUE \/ elementLayout.byteSize(), elementLayout);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -771,1 +771,1 @@\n-     *     byteHandle.set(ValueLayout.JAVA_BYTE, offset, value);\n+     *     segment.set(ValueLayout.JAVA_BYTE, offset, value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,2 +95,3 @@\n-     * SequenceLayout notionalLayout = MemoryLayout.sequenceLayout(\n- *                                         MemoryLayout.sequenceLayout(10, MemoryLayout.sequenceLayout(20, ValueLayout.JAVA_INT)));\n+     * MemoryLayout innerLayout = MemoryLayout.sequenceLayout(10,\n+     *         MemoryLayout.sequenceLayout(20, ValueLayout.JAVA_INT));\n+     * SequenceLayout notionalLayout = MemoryLayout.sequenceLayout(Long.MAX_VALUE \/ innerLayout.byteSize(), innerLayout);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-                    sequenceLayout(ValueLayout.JAVA_BYTE));\n+                    sequenceLayout(Long.MAX_VALUE, ValueLayout.JAVA_BYTE));\n@@ -526,2 +526,0 @@\n-            var byteHandle = MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE)\n-                    .varHandle(MemoryLayout.PathElement.sequenceElement());\n@@ -529,1 +527,1 @@\n-                byteHandle.set(segment.address(), l, value);\n+                segment.set(JAVA_BYTE, l, value);\n@@ -657,5 +655,6 @@\n-            VarHandle arrayHandle = ValueLayout.JAVA_INT.arrayElementVarHandle(10, 20);\n-\n-            SequenceLayout arrayLayout = MemoryLayout.sequenceLayout(\n-                    MemoryLayout.sequenceLayout(10,\n-                            MemoryLayout.sequenceLayout(20, ValueLayout.JAVA_INT)));\n+            MemoryLayout innerLayout = MemoryLayout.sequenceLayout(10,\n+                    MemoryLayout.sequenceLayout(20, ValueLayout.JAVA_INT));\n+            SequenceLayout notionalLayout = MemoryLayout.sequenceLayout(Long.MAX_VALUE \/ innerLayout.byteSize(), innerLayout);\n+            VarHandle arrayHandle = notionalLayout.varHandle(PathElement.sequenceElement(),\n+                                                             PathElement.sequenceElement(),\n+                                                             PathElement.sequenceElement());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/snippet-files\/Snippets.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-            .withTargetLayout(MemoryLayout.sequenceLayout(JAVA_BYTE));\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-            layout = MemoryLayout.sequenceLayout(layout);\n+            layout = MemoryLayout.sequenceLayout(Long.MAX_VALUE \/ layout.byteSize(), layout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-            .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, C_CHAR));\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-                            MemoryLayout.sequenceLayout(\n+                            MemoryLayout.sequenceLayout(1,\n@@ -184,1 +184,1 @@\n-                    FunctionDescriptor.of(MemoryLayout.structLayout(MemoryLayout.sequenceLayout(C_INT.withOrder(nonNativeOrder())))),\n+                    FunctionDescriptor.of(MemoryLayout.structLayout(MemoryLayout.sequenceLayout(1, C_INT.withOrder(nonNativeOrder())))),\n@@ -215,1 +215,1 @@\n-                            MemoryLayout.sequenceLayout(\n+                            MemoryLayout.sequenceLayout(Long.MAX_VALUE \/ C_INT.byteSize(),\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -204,6 +204,1 @@\n-    @Test(dataProvider = \"basicLayouts\")\n-    public void testSequenceInferredCount(MemoryLayout layout) {\n-        assertEquals(MemoryLayout.sequenceLayout(layout),\n-                     MemoryLayout.sequenceLayout(Long.MAX_VALUE \/ layout.byteSize(), layout));\n-    }\n-\n+    @Test\n@@ -300,1 +295,1 @@\n-        MemoryLayout.sequenceLayout(layout);\n+        MemoryLayout.sequenceLayout(1, layout);\n@@ -307,1 +302,1 @@\n-            MemoryLayout.sequenceLayout(layout);\n+            MemoryLayout.sequenceLayout(1, layout);\n@@ -496,1 +491,0 @@\n-                MemoryLayout.sequenceLayout(JAVA_INT),\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-            .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, C_CHAR));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CLayouts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-            .withTargetLayout(MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE));\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, ValueLayout.JAVA_BYTE));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/pointers\/NativeType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            .withTargetLayout(MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE));\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, ValueLayout.JAVA_BYTE));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/pointers\/PointerBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}