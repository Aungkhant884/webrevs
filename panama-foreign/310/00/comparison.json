{"files":[{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -45,1 +70,10 @@\n-    private static final VarHandle address_handle = MemoryHandles.asAddressVarHandle((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle);\n+    private static final VarHandle address_handle;\n+\n+    static {\n+        Class<?> carrier = switch ((int) MemoryLayouts.ADDRESS.byteSize()) {\n+            case 4 -> int.class;\n+            case 8 -> long.class;\n+            default -> throw new ExceptionInInitializerError(\"Unsupported pointer size: \" + MemoryLayouts.ADDRESS.byteSize());\n+        };\n+        address_handle = MemoryHandles.asAddressVarHandle(indexedHandle(MemoryLayouts.ADDRESS, carrier));\n+    }\n@@ -744,1 +778,1 @@\n-    handle.set(segment, offset, value);\n+    handle.set(segment, offset, value.address());\n@@ -748,1 +782,1 @@\n-     * @param value the memory address to be written.\n+     * @param value the memory address to be written (expressed as an {@link Addressable} instance).\n@@ -750,1 +784,1 @@\n-    public static void setAddressAtOffset(MemorySegment segment, long offset, MemoryAddress value) {\n+    public static void setAddressAtOffset(MemorySegment segment, long offset, Addressable value) {\n@@ -1371,1 +1405,1 @@\n-     * @param value the memory address to be written.\n+     * @param value the memory address to be written (expressed as an {@link Addressable} instance).\n@@ -1373,1 +1407,1 @@\n-    public static void setAddress(MemorySegment segment, MemoryAddress value) {\n+    public static void setAddress(MemorySegment segment, Addressable value) {\n@@ -2034,1 +2068,1 @@\n-     * @param value the memory address to be written.\n+     * @param value the memory address to be written (expressed as an {@link Addressable} instance).\n@@ -2036,1 +2070,1 @@\n-    public static void setAddressAtIndex(MemorySegment segment, long index, MemoryAddress value) {\n+    public static void setAddressAtIndex(MemorySegment segment, long index, Addressable value) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":42,"deletions":8,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import jdk.internal.misc.Unsafe;\n+\n@@ -138,0 +140,5 @@\n+\n+    \/**\n+     * A value layout constant whose size is the same as that of a machine address (e.g. {@code size_t}), and byte order set to {@link ByteOrder#nativeOrder()}.\n+     *\/\n+    public static final ValueLayout ADDRESS = MemoryLayout.ofValueBits(Unsafe.ADDRESS_SIZE * 8, ByteOrder.nativeOrder());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayouts.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}