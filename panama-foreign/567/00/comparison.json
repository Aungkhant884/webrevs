{"files":[{"patch":"@@ -90,1 +90,0 @@\n- *       <li>If {@code C} is {@code VaList.class}, then {@code L} must be {@link CLinker#C_VA_LIST}<\/li>\n@@ -271,4 +270,0 @@\n-    \/**\n-     * The layout for the {@code va_list} C type\n-     *\/\n-    MemoryLayout C_VA_LIST = pick(SysV.C_VA_LIST, Win64.C_VA_LIST, AArch64.C_VA_LIST);\n@@ -435,1 +430,2 @@\n-     * A va list is a stateful cursor used to iterate over a set of variadic arguments.\n+     * A va list is a stateful cursor used to iterate over a set of variadic arguments. A va list can be passed\n+     * {@linkplain #address() by reference} e.g. to a downcall method handle.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -534,19 +534,0 @@\n-    public static MethodHandle unboxVaLists(MethodType type, MethodHandle handle, MethodHandle unboxer) {\n-        for (int i = 0; i < type.parameterCount(); i++) {\n-            if (type.parameterType(i) == VaList.class) {\n-               handle = filterArguments(handle, i + 1, unboxer); \/\/ +1 for leading address\n-            }\n-        }\n-        return handle;\n-    }\n-\n-    public static MethodHandle boxVaLists(MethodHandle handle, MethodHandle boxer) {\n-        MethodType type = handle.type();\n-        for (int i = 0; i < type.parameterCount(); i++) {\n-            if (type.parameterType(i) == VaList.class) {\n-               handle = filterArguments(handle, i, boxer);\n-            }\n-        }\n-        return handle;\n-    }\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-        handle = SharedUtils.unboxVaLists(type, handle, MH_unboxVaList);\n@@ -95,1 +94,0 @@\n-        target = SharedUtils.boxVaLists(target, MH_boxVaList);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64Linker.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-        handle = SharedUtils.unboxVaLists(type, handle, MH_unboxVaList);\n@@ -98,1 +97,0 @@\n-        target = SharedUtils.boxVaLists(target, MH_boxVaList);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-        handle = SharedUtils.unboxVaLists(type, handle, MH_unboxVaList);\n@@ -105,1 +104,0 @@\n-        target = SharedUtils.boxVaLists(target, MH_boxVaList);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,0 @@\n-        handle = SharedUtils.unboxVaLists(type, handle, MH_unboxVaList);\n@@ -106,1 +105,0 @@\n-        target = SharedUtils.boxVaLists(target, MH_boxVaList);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-                FunctionDescriptor.of(C_INT, C_POINTER, C_VA_LIST));\n+                FunctionDescriptor.of(C_INT, C_POINTER, C_POINTER));\n@@ -331,1 +331,1 @@\n-                return (int)vprintf.invokeExact(formatStr.address(), vaList);\n+                return (int)vprintf.invokeExact(formatStr.address(), vaList.address());\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-import static jdk.incubator.foreign.CLinker.C_VA_LIST;\n+import static jdk.incubator.foreign.CLinker.C_POINTER;\n@@ -79,24 +79,37 @@\n-    private static final MethodHandle MH_sumInts = link(\"sumInts\",\n-            MethodType.methodType(int.class, int.class, VaList.class),\n-            FunctionDescriptor.of(C_INT, C_INT, C_VA_LIST));\n-    private static final MethodHandle MH_sumDoubles = link(\"sumDoubles\",\n-            MethodType.methodType(double.class, int.class, VaList.class),\n-            FunctionDescriptor.of(C_DOUBLE, C_INT, C_VA_LIST));\n-    private static final MethodHandle MH_getInt = link(\"getInt\",\n-            MethodType.methodType(int.class, VaList.class),\n-            FunctionDescriptor.of(C_INT, C_VA_LIST));\n-    private static final MethodHandle MH_sumStruct = link(\"sumStruct\",\n-            MethodType.methodType(int.class, VaList.class),\n-            FunctionDescriptor.of(C_INT, C_VA_LIST));\n-    private static final MethodHandle MH_sumBigStruct = link(\"sumBigStruct\",\n-            MethodType.methodType(long.class, VaList.class),\n-            FunctionDescriptor.of(C_LONG_LONG, C_VA_LIST));\n-    private static final MethodHandle MH_sumHugeStruct = link(\"sumHugeStruct\",\n-            MethodType.methodType(long.class, VaList.class),\n-            FunctionDescriptor.of(C_LONG_LONG, C_VA_LIST));\n-    private static final MethodHandle MH_sumFloatStruct = link(\"sumFloatStruct\",\n-            MethodType.methodType(float.class, VaList.class),\n-            FunctionDescriptor.of(C_FLOAT, C_VA_LIST));\n-    private static final MethodHandle MH_sumStack = link(\"sumStack\",\n-            MethodType.methodType(void.class, MemoryAddress.class, MemoryAddress.class, VaList.class),\n-            FunctionDescriptor.ofVoid(C_POINTER, C_POINTER, C_VA_LIST));\n+    private static final MethodHandle VALIST_TO_ADDRESS;\n+    private static final MethodHandle ADDRESS_TO_VALIST;\n+\n+    static {\n+        try {\n+            VALIST_TO_ADDRESS = MethodHandles.lookup().findVirtual(VaList.class, \"address\", MethodType.methodType(MemoryAddress.class));\n+            ADDRESS_TO_VALIST = MethodHandles.lookup().findStatic(VaList.class, \"ofAddress\", MethodType.methodType(VaList.class, MemoryAddress.class));\n+        } catch (Throwable ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+\n+    private static final MethodHandle MH_sumInts = linkVaList(\"sumInts\",\n+            MethodType.methodType(int.class, int.class, MemoryAddress.class),\n+            FunctionDescriptor.of(C_INT, C_INT, C_POINTER));\n+    private static final MethodHandle MH_sumDoubles = linkVaList(\"sumDoubles\",\n+            MethodType.methodType(double.class, int.class, MemoryAddress.class),\n+            FunctionDescriptor.of(C_DOUBLE, C_INT, C_POINTER));\n+    private static final MethodHandle MH_getInt = linkVaList(\"getInt\",\n+            MethodType.methodType(int.class, MemoryAddress.class),\n+            FunctionDescriptor.of(C_INT, C_POINTER));\n+    private static final MethodHandle MH_sumStruct = linkVaList(\"sumStruct\",\n+            MethodType.methodType(int.class, MemoryAddress.class),\n+            FunctionDescriptor.of(C_INT, C_POINTER));\n+    private static final MethodHandle MH_sumBigStruct = linkVaList(\"sumBigStruct\",\n+            MethodType.methodType(long.class, MemoryAddress.class),\n+            FunctionDescriptor.of(C_LONG_LONG, C_POINTER));\n+    private static final MethodHandle MH_sumHugeStruct = linkVaList(\"sumHugeStruct\",\n+            MethodType.methodType(long.class, MemoryAddress.class),\n+            FunctionDescriptor.of(C_LONG_LONG, C_POINTER));\n+    private static final MethodHandle MH_sumFloatStruct = linkVaList(\"sumFloatStruct\",\n+            MethodType.methodType(float.class, MemoryAddress.class),\n+            FunctionDescriptor.of(C_FLOAT, C_POINTER));\n+    private static final MethodHandle MH_sumStack = linkVaList(\"sumStack\",\n+            MethodType.methodType(void.class, MemoryAddress.class, MemoryAddress.class, MemoryAddress.class),\n+            FunctionDescriptor.ofVoid(C_POINTER, C_POINTER, C_POINTER));\n@@ -105,1 +118,13 @@\n-        return abi.downcallHandle(LOOKUP.lookup(symbol).get(), mt, fd);\n+        return linkInternal(symbol, mt, fd, false);\n+    }\n+\n+    private static MethodHandle linkVaList(String symbol, MethodType mt, FunctionDescriptor fd) {\n+        return linkInternal(symbol, mt, fd, true);\n+    }\n+\n+\n+    private static MethodHandle linkInternal(String symbol, MethodType mt, FunctionDescriptor fd, boolean hasVaListParam) {\n+        MethodHandle handle = abi.downcallHandle(LOOKUP.lookup(symbol).get(), mt, fd);\n+        return hasVaListParam ?\n+                MethodHandles.filterArguments(handle, handle.type().parameterCount() - 1, VALIST_TO_ADDRESS) :\n+                handle;\n@@ -527,1 +552,1 @@\n-        FunctionDescriptor desc = FunctionDescriptor.ofVoid(C_VA_LIST);\n+        FunctionDescriptor desc = FunctionDescriptor.ofVoid(C_POINTER);\n@@ -804,1 +829,1 @@\n-                return MethodHandles.lookup().findVirtual(VaListConsumer.class, \"accept\",\n+                MethodHandle handle = MethodHandles.lookup().findVirtual(VaListConsumer.class, \"accept\",\n@@ -806,0 +831,1 @@\n+                return MethodHandles.filterArguments(handle, 0, ADDRESS_TO_VALIST);\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":54,"deletions":28,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static jdk.incubator.foreign.CLinker.C_VA_LIST;\n+import static jdk.incubator.foreign.CLinker.C_POINTER;\n@@ -71,1 +71,1 @@\n-                FunctionDescriptor.ofVoid(C_INT, C_VA_LIST));\n+                FunctionDescriptor.ofVoid(C_INT, C_POINTER));\n@@ -88,1 +88,1 @@\n-                    vaList);\n+                    vaList.address());\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}