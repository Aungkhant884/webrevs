{"files":[{"patch":"@@ -385,2 +385,3 @@\n-     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} and {@code s_0}, {@code s_1}, ... {@code s_n} are\n-     * <em>static<\/em> stride constants which are derived from the layout path.\n+     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} are <em>static<\/em> offset constants\n+     * and {@code s_0}, {@code s_1}, ... {@code s_n} are <em>static<\/em> stride constants which are derived from\n+     * the layout path.\n@@ -436,2 +437,3 @@\n-     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} and {@code s_0}, {@code s_1}, ... {@code s_n} are\n-     * <em>static<\/em> stride constants which are derived from the layout path.\n+     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} are <em>static<\/em> offset constants\n+     * and {@code s_0}, {@code s_1}, ... {@code s_n} are <em>static<\/em> stride constants which are derived from\n+     * the layout path.\n@@ -473,3 +475,4 @@\n-     * where {@code x_1}, {@code x_2}, ... {@code x_n} are <em>dynamic<\/em> values provided as optional {@code long}\n-     * access coordinates, whereas {@code c_1}, {@code c_2}, ... {@code c_m} and {@code s_0}, {@code s_1}, ... {@code s_n} are\n-     * <em>static<\/em> stride constants which are derived from the layout path.\n+     * where {@code x_1}, {@code x_2}, ... {@code x_n} are <em>dynamic<\/em> values provided as {@code long}\n+     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} are <em>static<\/em> offset constants\n+     * and {@code s_0}, {@code s_1}, ... {@code s_n} are <em>static<\/em> stride constants which are derived from\n+     * the layout path.\n@@ -497,2 +500,2 @@\n-     * Creates a method handle which can be used to create a slice of the layout selected by a given layout path,\n-     * where the path is considered rooted in this layout.\n+     * Creates a method handle which, given a memory segment, returns a {@link MemorySegment#asSlice(long,long)}\n+     * corresponding to the layout selected by a given layout path, where the path is considered rooted in this layout.\n@@ -515,2 +518,3 @@\n-     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} and {@code s_0}, {@code s_1}, ... {@code s_n} are\n-     * <em>static<\/em> stride constants which are derived from the layout path.\n+     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} are <em>static<\/em> offset constants\n+     * and {@code s_0}, {@code s_1}, ... {@code s_n} are <em>static<\/em> stride constants which are derived from\n+     * the layout path.\n@@ -524,1 +528,1 @@\n-     * layout path.\n+     * layout path, as per {@link MemoryLayout#select(PathElement...)}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-            MH_SLICE = lookup.findStatic(LayoutPath.class, \"slice\",\n-                    MethodType.methodType(MemorySegment.class, MemorySegment.class, long.class, long.class));\n+            MH_SLICE = lookup.findVirtual(MemorySegment.class, \"asSlice\",\n+                    MethodType.methodType(MemorySegment.class, long.class, long.class));\n@@ -206,4 +206,0 @@\n-    private static MemorySegment slice(MemorySegment base, long offset, long length) {\n-        return base.asSlice(offset, length);\n-    }\n-\n@@ -211,0 +207,5 @@\n+        if (strides.length == 0) {\n+            \/\/ trigger checks eagerly\n+            Utils.bitsToBytesOrThrow(offset, Utils.bitsToBytesThrowOffset);\n+        }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -518,1 +518,1 @@\n-            MemoryLayout.ofValueBits(31, ByteOrder.nativeOrder()).withName(\"y\") \/\/ not a multiple of 8\n+            MemoryLayout.ofValueBits(31, ByteOrder.nativeOrder()).withName(\"y\") \/\/ size not a multiple of 8\n@@ -525,1 +525,1 @@\n-    public void testSliceHandleUOEInvalidOffset() throws Throwable {\n+    public void testSliceHandleUOEInvalidOffsetEager() throws Throwable {\n@@ -531,0 +531,12 @@\n+        layout.sliceHandle(groupElement(\"y\")); \/\/ should throw\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testSliceHandleUOEInvalidOffsetLate() throws Throwable {\n+        MemoryLayout layout = MemoryLayout.ofSequence(3,\n+            MemoryLayout.ofStruct(\n+                MemoryLayout.ofPaddingBits(4),\n+                MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()).withName(\"y\") \/\/ offset not a multiple of 8\n+            )\n+        );\n+\n@@ -533,1 +545,1 @@\n-            sliceHandle = layout.sliceHandle(groupElement(\"y\")); \/\/ should work\n+            sliceHandle = layout.sliceHandle(sequenceElement(), groupElement(\"y\")); \/\/ should work\n@@ -541,1 +553,9 @@\n-            sliceHandle.invokeExact(segment); \/\/ should throw\n+\n+            try {\n+                sliceHandle.invokeExact(segment, 1); \/\/ should work\n+            } catch (UnsupportedOperationException uoe) {\n+                fail(\"Unexpected exception\", uoe);\n+                return;\n+            }\n+\n+            sliceHandle.invokeExact(segment, 0); \/\/ should throw\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"}]}