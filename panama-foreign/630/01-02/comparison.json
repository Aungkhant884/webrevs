{"files":[{"patch":"@@ -118,1 +118,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -130,1 +130,2 @@\n-            var str = toCString(script, scope);\n+            var allocator = SegmentAllocator.nativeAllocator(scope);\n+            var str = allocator.allocateUtf8String(script);\n@@ -167,0 +168,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -168,1 +170,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -174,1 +175,2 @@\n-            var url = toCString(\"name? \", scope);\n+            var allocator = SegmentAllocator.nativeAllocator(scope);\n+            var url = allocator.allocateUtf8String(\"name? \");\n@@ -182,1 +184,1 @@\n-            System.out.println(\"Hello, \" + toJavaString(p));\n+            System.out.println(\"Hello, \" + p.getUtf8String(0));\n@@ -184,1 +186,2 @@\n-            freeMemory(p);\n+            \/\/ pointer returned by readline has to be 'free'd\n+            free(p);\n@@ -217,0 +220,1 @@\n+import jdk.incubator.foreign.SegmentAllocator;\n@@ -219,1 +223,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -229,1 +232,2 @@\n-               var url = toCString(urlStr, scope);\n+               var allocator = SegmentAllocator.nativeAllocator(scope);\n+               var url = allocator.allocateUtf8String(urlStr);\n@@ -233,1 +237,1 @@\n-                   String error = toJavaString(curl_easy_strerror(res));\n+                   String error = curl_easy_strerror(res).getUtf8String(0);\n@@ -292,2 +296,0 @@\n-import jdk.incubator.foreign.MemoryAccess;\n-import jdk.incubator.foreign.ResourceScope;\n@@ -295,0 +297,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -297,1 +300,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -306,1 +308,1 @@\n-\n+ \n@@ -317,1 +319,1 @@\n-\n+ \n@@ -319,1 +321,1 @@\n-            var allocator = SegmentAllocator.ofScope(scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -330,1 +332,1 @@\n-\n+        \n@@ -334,1 +336,1 @@\n-                System.out.print(String.format(\" y%d = %f\\n\", i, MemoryAccess.getDoubleAtIndex(y, i)));\n+                System.out.print(String.format(\" y%d = %f\\n\", i, y.getAtIndex(C_DOUBLE, i)));\n@@ -372,2 +374,0 @@\n-import jdk.incubator.foreign.MemoryAccess;\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -375,1 +375,0 @@\n-import jdk.incubator.foreign.ResourceScope;\n@@ -377,0 +376,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -379,1 +379,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -386,1 +385,1 @@\n-            var allocator = SegmentAllocator.ofScope(scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -407,1 +406,1 @@\n-\n+            \n@@ -412,1 +411,1 @@\n-\n+ \n@@ -417,3 +416,3 @@\n-        }\n-    }\n-\n+        }   \n+    }   \n+    \n@@ -425,1 +424,1 @@\n-            for( j = 0; j < n; j++ ) System.out.printf(\" %6.2f\", MemoryAccess.getDoubleAtIndex(mat, i+j*ldm));\n+            for( j = 0; j < n; j++ ) System.out.printf(\" %6.2f\", mat.getAtIndex(C_DOUBLE, i+j*ldm));\n@@ -460,1 +459,0 @@\n-import jdk.incubator.foreign.CLinker;\n@@ -473,1 +471,1 @@\n-            var allocator = SegmentAllocator.ofScope(scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -477,1 +475,1 @@\n-            var pids = allocator.allocateArray(CLinker.C_INT, numPids);\n+            var pids = allocator.allocateArray(C_INT, numPids);\n@@ -481,1 +479,1 @@\n-            int[] jpids = pids.toIntArray();\n+            int[] jpids = pids.toArray(C_INT);\n@@ -483,1 +481,1 @@\n-            var nameBuf = allocator.allocateArray(CLinker.C_CHAR, NAME_BUF_MAX);\n+            var nameBuf = allocator.allocateArray(C_CHAR, NAME_BUF_MAX);\n@@ -488,1 +486,1 @@\n-                String procName = CLinker.toJavaString(nameBuf);\n+                String procName = nameBuf.getUtf8String(0);\n@@ -535,1 +533,0 @@\n-import jdk.incubator.foreign.ResourceScope;\n@@ -537,0 +534,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -538,1 +536,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -550,1 +547,1 @@\n-              var allocator = SegmentAllocator.ofScope(scope);\n+              var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -552,2 +549,2 @@\n-              var url = toCString(args[0], scope);\n-              var path = toCString(args[1], scope);\n+              var url = allocator.allocateUtf8String(args[0]);\n+              var path = allocator.allocateUtf8String(args[1]);\n@@ -555,1 +552,1 @@\n-          }\n+          }          \n@@ -599,1 +596,1 @@\n-import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemorySegment;\n@@ -605,1 +602,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -610,1 +606,1 @@\n-            var allocator = SegmentAllocator.ofScope(scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -617,1 +613,1 @@\n-            int rc = sqlite3_open(toCString(\"employee.db\",scope), dbPtrPtr);\n+            int rc = sqlite3_open(allocator.allocateUtf8String(\"employee.db\"), dbPtrPtr);\n@@ -626,1 +622,1 @@\n-            var dbPtr = MemoryAccess.getAddress(dbPtrPtr);\n+            var dbPtr = dbPtrPtr.get(C_POINTER, 0);\n@@ -629,1 +625,1 @@\n-            var sql = toCString(\n+            var sql = allocator.allocateUtf8String(\n@@ -633,1 +629,1 @@\n-                \"  SALARY REAL NOT NULL )\", scope);\n+                \"  SALARY REAL NOT NULL )\");\n@@ -639,2 +635,2 @@\n-                System.err.println(\"SQL error: \" + toJavaString(MemoryAccess.getAddress(errMsgPtrPtr)));\n-                sqlite3_free(MemoryAccess.getAddress(errMsgPtrPtr));\n+                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getUtf8String(0));\n+                sqlite3_free(errMsgPtrPtr.get(C_POINTER, 0));\n@@ -646,1 +642,1 @@\n-            sql = toCString(\n+            sql = allocator.allocateUtf8String(\n@@ -650,1 +646,1 @@\n-                    \"VALUES (333, 'Abc', 100000.0);\", scope\n+                    \"VALUES (333, 'Abc', 100000.0);\"\n@@ -656,2 +652,2 @@\n-                System.err.println(\"SQL error: \" + toJavaString(MemoryAccess.getAddress(errMsgPtrPtr)));\n-                sqlite3_free(MemoryAccess.getAddress(errMsgPtrPtr));\n+                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getUtf8String(0));\n+                sqlite3_free(errMsgPtrPtr.get(C_POINTER, 0));\n@@ -667,2 +663,2 @@\n-                var argv_seg = argv.asSegment(C_POINTER.byteSize() * argc, scope);\n-                var columnNames_seg = columnNames.asSegment(C_POINTER.byteSize() * argc, scope);\n+                var argv_seg = MemorySegment.ofAddress(argv, C_POINTER.byteSize() * argc, scope);\n+                var columnNames_seg = MemorySegment.ofAddress(columnNames, C_POINTER.byteSize() * argc, scope);\n@@ -670,2 +666,3 @@\n-                     String name = toJavaString(MemoryAccess.getAddressAtIndex(columnNames_seg, i));\n-                     String value = toJavaString(MemoryAccess.getAddressAtIndex(argv_seg, i));\n+                     String name = columnNames_seg.getAtIndex(C_POINTER, i).getUtf8String(0);\n+                     String value = argv_seg.getAtIndex(C_POINTER, i).getUtf8String(0);\n+\n@@ -678,1 +675,1 @@\n-            sql = toCString(\"SELECT * FROM EMPLOYEE\", scope);\n+            sql = allocator.allocateUtf8String(\"SELECT * FROM EMPLOYEE\");\n@@ -683,2 +680,2 @@\n-                System.err.println(\"SQL error: \" + toJavaString(MemoryAccess.getAddress(errMsgPtrPtr)));\n-                sqlite3_free(MemoryAccess.getAddress(errMsgPtrPtr));\n+                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getUtf8String(0));\n+                sqlite3_free(errMsgPtrPtr.get(C_POINTER, 0));\n@@ -694,1 +691,0 @@\n-\n@@ -723,1 +719,0 @@\n-import jdk.incubator.foreign.CLinker;\n@@ -727,1 +722,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -768,1 +762,1 @@\n-            var allocator = SegmentAllocator.ofScope(scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -773,1 +767,1 @@\n-            glutCreateWindow(CLinker.toCString(\"Hello Panama!\", scope));\n+            glutCreateWindow(allocator.allocateUtf8String(\"Hello Panama!\"));\n@@ -868,2 +862,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.incubator.foreign.MemoryAccess.*;\n@@ -878,1 +870,1 @@\n-        System.out.println(\"TensorFlow C library version: \" + toJavaString(TF_Version()));\n+        System.out.println(\"TensorFlow C library version: \" + TF_Version().getUtf8String(0));\n@@ -886,1 +878,1 @@\n-            var allocator = SegmentAllocator.ofScope(scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -891,2 +883,2 @@\n-            var savedModelDir = toCString(args[0], scope);\n-            var tags = allocator.allocate(C_POINTER, toCString(\"serve\", scope));\n+            var savedModelDir = allocator.allocateUtf8String(args[0]);\n+            var tags = allocator.allocate(C_POINTER, allocator.allocateUtf8String(\"serve\"));\n@@ -897,1 +889,1 @@\n-                    toJavaString(TF_Message(status)));\n+                    TF_Message(status).getUtf8String(0));\n@@ -907,2 +899,2 @@\n-                    toJavaString(TF_OperationName(operation)),\n-                    toJavaString(TF_OperationOpType(operation)));\n+                    TF_OperationName(operation).getUtf8String(0),\n+                    TF_OperationOpType(operation).getUtf8String(0));\n@@ -955,1 +947,1 @@\n-            var allocator = SegmentAllocator.ofScope(scope);\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n@@ -997,1 +989,0 @@\n-import static jdk.incubator.foreign.CLinker.*;\n@@ -1004,1 +995,1 @@\n-        String str = toJavaString(clang_getCString(clangStr));\n+        String str = clang_getCString(clangStr).getUtf8String(0);\n@@ -1018,1 +1009,2 @@\n-            var tu = clang_parseTranslationUnit(index, toCString(args[0], scope),\n+            var allocator = SegmentAllocator.newNativeArena(scope);\n+            var tu = clang_parseTranslationUnit(index, allocator.allocateUtf8String(args[0]),\n@@ -1022,1 +1014,1 @@\n-            var visitor = new MemoryAddress[1];\n+            var visitor = new NativeSymbol[1];\n@@ -1043,1 +1035,1 @@\n-            });\n+            }, scope);\n","filename":"doc\/panama_jextract.md","additions":72,"deletions":80,"binary":false,"changes":152,"status":"modified"}]}