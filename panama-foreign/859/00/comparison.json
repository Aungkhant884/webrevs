{"files":[{"patch":"@@ -732,1 +732,1 @@\n-         * @apiNote This linker option can not be combined with {@link #isTrivial}.\n+         * @apiNote This linker option can not be combined with {@link #critical}.\n@@ -776,1 +776,1 @@\n-         * {@return a linker option used to mark a foreign function as <em>trivial<\/em>}\n+         * {@return a linker option used to mark a foreign function as <em>critical<\/em>}\n@@ -778,2 +778,2 @@\n-         * A trivial function is a function that has an extremely short running time\n-         * in all cases (similar to calling an empty function), and does not call back into Java (e.g. using an upcall stub).\n+         * A critical function is a function that has an extremely short running time in all cases\n+         * (similar to calling an empty function), and does not call back into Java (e.g. using an upcall stub).\n@@ -782,1 +782,1 @@\n-         * optimizations that are only valid for trivial functions.\n+         * optimizations that are only valid for critical functions.\n@@ -784,1 +784,1 @@\n-         * Using this linker option when linking non trivial functions is likely to have adverse effects,\n+         * Using this linker option when linking non-critical functions is likely to have adverse effects,\n@@ -787,2 +787,2 @@\n-        static Option isTrivial() {\n-            return LinkerOptions.IsTrivial.INSTANCE;\n+        static Option critical() {\n+            return LinkerOptions.Critical.INSTANCE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,3 +48,3 @@\n-    \/\/ Maximum segment byte size for which a trivial method will be invoked.\n-    private static final long MAX_TRIVIAL_SIZE = 1024L;\n-    private static final MethodHandle STRNLEN_TRIVIAL;\n+    \/\/ Maximum segment byte size for which a critical method will be invoked.\n+    private static final long MAX_CRITICAL_SIZE = 1024L;\n+    private static final MethodHandle STRNLEN_CRITICAL;\n@@ -60,1 +60,1 @@\n-        STRNLEN_TRIVIAL = linker.downcallHandle(strnlen, description, Linker.Option.isTrivial());\n+        STRNLEN_CRITICAL = linker.downcallHandle(strnlen, description, Linker.Option.critical());\n@@ -134,2 +134,2 @@\n-            if (segmentSize < MAX_TRIVIAL_SIZE) {\n-                len = strnlen_int_trivial(segment, segmentSize);\n+            if (segmentSize < MAX_CRITICAL_SIZE) {\n+                len = strnlen_int_critical(segment, segmentSize);\n@@ -145,2 +145,2 @@\n-            len = segmentSize < MAX_TRIVIAL_SIZE\n-                    ? strnlen_long_trivial(segment, segmentSize)\n+            len = segmentSize < MAX_CRITICAL_SIZE\n+                    ? strnlen_long_critical(segment, segmentSize)\n@@ -155,1 +155,1 @@\n-    static long strnlen_int_trivial(MemorySegment segment, long size) {\n+    static long strnlen_int_critical(MemorySegment segment, long size) {\n@@ -157,1 +157,1 @@\n-            return Integer.toUnsignedLong((int)STRNLEN_TRIVIAL.invokeExact(segment, (int)size));\n+            return Integer.toUnsignedLong((int)STRNLEN_CRITICAL.invokeExact(segment, (int)size));\n@@ -175,1 +175,1 @@\n-    static long strnlen_long_trivial(MemorySegment segment, long size) {\n+    static long strnlen_long_critical(MemorySegment segment, long size) {\n@@ -177,1 +177,1 @@\n-            return (long)STRNLEN_TRIVIAL.invokeExact(segment, size);\n+            return (long)STRNLEN_CRITICAL.invokeExact(segment, size);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-        return !linkerOptions.isTrivial();\n+        return !linkerOptions.isCritical();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequence.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-        if (linkerOptions.hasCapturedCallState() && linkerOptions.isTrivial()) {\n-            throw new IllegalArgumentException(\"Incompatible linker options: captureCallState, isTrivial\");\n+        if (linkerOptions.hasCapturedCallState() && linkerOptions.isCritical()) {\n+            throw new IllegalArgumentException(\"Incompatible linker options: captureCallState, critical\");\n@@ -104,3 +104,3 @@\n-    public boolean isTrivial() {\n-        IsTrivial it = getOption(IsTrivial.class);\n-        return it != null;\n+    public boolean isCritical() {\n+        Critical c = getOption(Critical.class);\n+        return c != null;\n@@ -122,1 +122,1 @@\n-            permits CaptureCallState, FirstVariadicArg, IsTrivial {\n+            permits CaptureCallState, FirstVariadicArg, Critical {\n@@ -148,2 +148,2 @@\n-    public record IsTrivial() implements LinkerOptionImpl {\n-        public static IsTrivial INSTANCE = new IsTrivial();\n+    public record Critical() implements LinkerOptionImpl {\n+        public static Critical INSTANCE = new Critical();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/LinkerOptions.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-            { Linker.Option.isTrivial() },\n+            { Linker.Option.critical() },\n@@ -197,2 +197,2 @@\n-                    new Linker.Option[]{Linker.Option.isTrivial(), Linker.Option.captureCallState(\"errno\")},\n-                    \"Incompatible linker options: captureCallState, isTrivial\"\n+                    new Linker.Option[]{Linker.Option.critical(), Linker.Option.captureCallState(\"errno\")},\n+                    \"Incompatible linker options: captureCallState, critical\"\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library ..\/ \/test\/lib\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestCritical\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.StructLayout;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestCritical extends NativeTestHelper {\n+\n+    static {\n+        System.loadLibrary(\"Critical\");\n+    }\n+\n+    @Test\n+    public void testEmpty() throws Throwable {\n+        MethodHandle handle = downcallHandle(\"empty\", FunctionDescriptor.ofVoid(), Linker.Option.critical());\n+        handle.invokeExact();\n+    }\n+\n+    @Test\n+    public void testIdentity() throws Throwable {\n+        MethodHandle handle = downcallHandle(\"identity\", FunctionDescriptor.of(C_INT, C_INT), Linker.Option.critical());\n+        int result = (int) handle.invokeExact(42);\n+        assertEquals(result, 42);\n+    }\n+\n+    @Test\n+    public void testWithReturnBuffer() throws Throwable {\n+        StructLayout bigLayout = MemoryLayout.structLayout(\n+                C_LONG_LONG.withName(\"x\"),\n+                C_LONG_LONG.withName(\"y\"));\n+\n+        MethodHandle handle = downcallHandle(\"with_return_buffer\", FunctionDescriptor.of(bigLayout), Linker.Option.critical());\n+        VarHandle vhX = bigLayout.varHandle(MemoryLayout.PathElement.groupElement(\"x\"));\n+        VarHandle vhY = bigLayout.varHandle(MemoryLayout.PathElement.groupElement(\"y\"));\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment result = (MemorySegment) handle.invokeExact((SegmentAllocator) arena);\n+            long x = (long) vhX.get(result, 0L);\n+            assertEquals(x, 10);\n+            long y = (long) vhY.get(result, 0L);\n+            assertEquals(y, 11);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestCritical.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library ..\/ \/test\/lib\n+ * @requires jdk.foreign.linker != \"FALLBACK\"\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestCriticalUpcall\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.invoke.MethodHandle;\n+\n+import static org.testng.Assert.fail;\n+\n+public class TestCriticalUpcall extends UpcallTestHelper {\n+\n+    @Test\n+    public void testUpcallFailure() throws IOException, InterruptedException {\n+        \/\/ test to see if we catch a trivial downcall doing an upcall\n+        runInNewProcess(Runner.class, true).assertStdOutContains(\"wrong thread state for upcall\");\n+    }\n+\n+    public static class Runner extends NativeTestHelper {\n+        public static void main(String[] args) throws Throwable {\n+            System.loadLibrary(\"Critical\");\n+\n+            MethodHandle mh = downcallHandle(\"do_upcall\", FunctionDescriptor.ofVoid(C_POINTER), Linker.Option.critical());\n+            MemorySegment stub = upcallStub(Runner.class, \"target\", FunctionDescriptor.ofVoid());\n+            mh.invokeExact(stub);\n+        }\n+\n+        public static void target() {\n+            fail(\"Should not get here\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestCriticalUpcall.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @library ..\/ \/test\/lib\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestTrivial\n- *\/\n-\n-import org.testng.annotations.Test;\n-\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.SegmentAllocator;\n-import java.lang.foreign.StructLayout;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-\n-import static org.testng.Assert.assertEquals;\n-\n-public class TestTrivial extends NativeTestHelper {\n-\n-    static {\n-        System.loadLibrary(\"Trivial\");\n-    }\n-\n-    @Test\n-    public void testEmpty() throws Throwable {\n-        MethodHandle handle = downcallHandle(\"empty\", FunctionDescriptor.ofVoid(), Linker.Option.isTrivial());\n-        handle.invokeExact();\n-    }\n-\n-    @Test\n-    public void testIdentity() throws Throwable {\n-        MethodHandle handle = downcallHandle(\"identity\", FunctionDescriptor.of(C_INT, C_INT), Linker.Option.isTrivial());\n-        int result = (int) handle.invokeExact(42);\n-        assertEquals(result, 42);\n-    }\n-\n-    @Test\n-    public void testWithReturnBuffer() throws Throwable {\n-        StructLayout bigLayout = MemoryLayout.structLayout(\n-                C_LONG_LONG.withName(\"x\"),\n-                C_LONG_LONG.withName(\"y\"));\n-\n-        MethodHandle handle = downcallHandle(\"with_return_buffer\", FunctionDescriptor.of(bigLayout), Linker.Option.isTrivial());\n-        VarHandle vhX = bigLayout.varHandle(MemoryLayout.PathElement.groupElement(\"x\"));\n-        VarHandle vhY = bigLayout.varHandle(MemoryLayout.PathElement.groupElement(\"y\"));\n-        try (Arena arena = Arena.ofConfined()) {\n-            MemorySegment result = (MemorySegment) handle.invokeExact((SegmentAllocator) arena);\n-            long x = (long) vhX.get(result, 0L);\n-            assertEquals(x, 10);\n-            long y = (long) vhY.get(result, 0L);\n-            assertEquals(y, 11);\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestTrivial.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @library ..\/ \/test\/lib\n- * @requires jdk.foreign.linker != \"FALLBACK\"\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestTrivialUpcall\n- *\/\n-\n-import org.testng.annotations.Test;\n-\n-import java.io.IOException;\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.invoke.MethodHandle;\n-\n-import static org.testng.Assert.fail;\n-\n-public class TestTrivialUpcall extends UpcallTestHelper {\n-\n-    @Test\n-    public void testUpcallFailure() throws IOException, InterruptedException {\n-        \/\/ test to see if we catch a trivial downcall doing an upcall\n-        runInNewProcess(Runner.class, true).assertStdOutContains(\"wrong thread state for upcall\");\n-    }\n-\n-    public static class Runner extends NativeTestHelper {\n-        public static void main(String[] args) throws Throwable {\n-            System.loadLibrary(\"Trivial\");\n-\n-            MethodHandle mh = downcallHandle(\"do_upcall\", FunctionDescriptor.ofVoid(C_POINTER), Linker.Option.isTrivial());\n-            MemorySegment stub = upcallStub(Runner.class, \"target\", FunctionDescriptor.ofVoid());\n-            mh.invokeExact(stub);\n-        }\n-\n-        public static void target() {\n-            fail(\"Should not get here\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestTrivialUpcall.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"","filename":"test\/jdk\/java\/foreign\/trivial\/libCritical.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/foreign\/trivial\/libTrivial.c","status":"renamed"},{"patch":"@@ -58,2 +58,2 @@\n-    public void panama_blank_trivial() throws Throwable {\n-        func_trivial.invokeExact();\n+    public void panama_blank_critical() throws Throwable {\n+        func_critical.invokeExact();\n@@ -73,2 +73,2 @@\n-    public int panama_identity_trivial() throws Throwable {\n-        return (int) identity_trivial.invokeExact(10);\n+    public int panama_identity_critical() throws Throwable {\n+        return (int) identity_critical.invokeExact(10);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadConstant.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static final MethodHandle func_trivial;\n+    static final MethodHandle func_critical;\n@@ -39,1 +39,1 @@\n-    static final MethodHandle func_trivial_v;\n+    static final MethodHandle func_critical_v;\n@@ -42,1 +42,1 @@\n-    static final MethodHandle identity_trivial;\n+    static final MethodHandle identity_critical;\n@@ -44,1 +44,1 @@\n-    static final MethodHandle identity_trivial_v;\n+    static final MethodHandle identity_critical_v;\n@@ -116,1 +116,1 @@\n-            func_trivial_v = abi.downcallHandle(fd, Linker.Option.isTrivial());\n+            func_critical_v = abi.downcallHandle(fd, Linker.Option.critical());\n@@ -118,1 +118,1 @@\n-            func_trivial = insertArguments(func_trivial_v, 0, func_addr);\n+            func_critical = insertArguments(func_critical_v, 0, func_addr);\n@@ -124,1 +124,1 @@\n-            identity_trivial_v = abi.downcallHandle(fd, Linker.Option.isTrivial());\n+            identity_critical_v = abi.downcallHandle(fd, Linker.Option.critical());\n@@ -126,1 +126,1 @@\n-            identity_trivial = insertArguments(identity_trivial_v, 0, identity_addr);\n+            identity_critical = insertArguments(identity_critical_v, 0, identity_addr);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadHelper.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-    public void panama_blank_trivial() throws Throwable {\n-        func_trivial_v.invokeExact(func_addr);\n+    public void panama_blank_critical() throws Throwable {\n+        func_critical_v.invokeExact(func_addr);\n@@ -112,2 +112,2 @@\n-    public int panama_identity_trivial() throws Throwable {\n-        return (int) identity_trivial_v.invokeExact(identity_addr, 10);\n+    public int panama_identity_critical() throws Throwable {\n+        return (int) identity_critical_v.invokeExact(identity_addr, 10);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadVirtual.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}