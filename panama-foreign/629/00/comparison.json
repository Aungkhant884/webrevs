{"files":[{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,70 +2,2 @@\n- * Note: to run this test manually, you need to build the tests first to get native\n- * libraries compiled, and then execute it with plain jtreg, like:\n- *\n- *  $ bin\/jtreg -jdk:<path-to-tested-jdk> \\\n- *              -nativepath:<path-to-build-dir>\/support\/test\/jdk\/jtreg\/native\/lib\/ \\\n- *              -concurrency:auto \\\n- *              .\/test\/jdk\/java\/foreign\/TestMatrix.java\n- *\/\n-\n-\/*\n- * @test id=UpcallHighArity-FFTT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n- *\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-TFTT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n- *\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-FTTT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n- *\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-TTTT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n- *\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-FFTF\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n@@ -73,13 +5,3 @@\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-TFTF\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n@@ -87,13 +9,5 @@\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-FTTF\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n@@ -101,13 +15,3 @@\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-TTTF\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n@@ -115,7 +19,3 @@\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n- *   TestUpcallHighArity\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n@@ -124,46 +24,3 @@\n-\/* @test id=UpcallHighArity-FFFT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n- *\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-TFFT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n- *\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-FTFT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n- *\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n- *\/\n-\n-\/* @test id=UpcallHighArity-TTFT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcallHighArity\n+\/*\n+ * Note: to run this test manually, you need to build the tests first to get native\n+ * libraries compiled, and then execute it with plain jtreg, like:\n@@ -171,7 +28,4 @@\n- * @run testng\/othervm\/native\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n- *   TestUpcallHighArity\n+ *  $ bin\/jtreg -jdk:<path-to-tested-jdk> \\\n+ *              -nativepath:<path-to-build-dir>\/support\/test\/jdk\/jtreg\/native\/manual\/lib\/ \\\n+ *              -concurrency:auto \\\n+ *              .\/test\/jdk\/java\/foreign\/TestMatrix.java\n@@ -180,1 +34,1 @@\n-\/* @test id=UpcallHighArity-FFFF\n+\/* @test id=UpcallHighArity-FF\n@@ -188,1 +42,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -190,1 +43,0 @@\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n@@ -194,1 +46,1 @@\n-\/* @test id=UpcallHighArity-TFFF\n+\/* @test id=UpcallHighArity-TF\n@@ -202,1 +54,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -204,1 +55,0 @@\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n@@ -208,1 +58,1 @@\n-\/* @test id=UpcallHighArity-FTFF\n+\/* @test id=UpcallHighArity-FT\n@@ -216,3 +66,1 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n@@ -222,1 +70,1 @@\n-\/* @test id=UpcallHighArity-TTFF\n+\/* @test id=UpcallHighArity-TT\n@@ -230,3 +78,1 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n@@ -236,1 +82,1 @@\n-\/* @test id=Downcall-FF\n+\/* @test id=Downcall-F\n@@ -244,1 +90,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -248,1 +93,1 @@\n-\/* @test id=Downcall-TF\n+\/* @test id=Downcall-T\n@@ -256,1 +101,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -260,1 +104,1 @@\n-\/* @test id=Downcall-FT\n+\/* @test id=Upcall-SCOPE-FF\n@@ -263,1 +107,1 @@\n- * @build NativeTestHelper CallGeneratorHelper TestDowncall\n+ * @build NativeTestHelper CallGeneratorHelper TestUpcall\n@@ -267,0 +111,1 @@\n+ *   -DUPCALL_TEST_TYPE=SCOPE\n@@ -268,14 +113,2 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   TestDowncall\n- *\/\n-\n-\/* @test id=Downcall-TT\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestDowncall\n- *\n- * @run testng\/othervm\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   TestDowncall\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n+ *   TestUpcall\n@@ -284,1 +117,1 @@\n-\/* @test id=Upcall-TFTT\n+\/* @test id=Upcall-SCOPE-TF\n@@ -291,0 +124,1 @@\n+ *   -DUPCALL_TEST_TYPE=SCOPE\n@@ -292,3 +126,1 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n@@ -298,1 +130,1 @@\n-\/* @test id=Upcall-FTTT\n+\/* @test id=Upcall-SCOPE-FT\n@@ -305,0 +137,1 @@\n+ *   -DUPCALL_TEST_TYPE=SCOPE\n@@ -306,1 +139,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n@@ -308,1 +140,0 @@\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n@@ -312,1 +143,1 @@\n-\/* @test id=Upcall-TTTT\n+\/* @test id=Upcall-SCOPE-TT\n@@ -319,0 +150,1 @@\n+ *   -DUPCALL_TEST_TYPE=SCOPE\n@@ -320,1 +152,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n@@ -322,1 +153,0 @@\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n@@ -326,1 +156,1 @@\n-\/* @test id=Upcall-TFTF\n+\/* @test id=Upcall-ASYNC-FF\n@@ -333,4 +163,3 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n+ *   -DUPCALL_TEST_TYPE=ASYNC\n+ *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n@@ -340,1 +169,1 @@\n-\/* @test id=Upcall-FTTF\n+\/* @test id=Upcall-ASYNC-TF\n@@ -347,4 +176,3 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n+ *   -DUPCALL_TEST_TYPE=ASYNC\n+ *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n@@ -354,1 +182,1 @@\n-\/* @test id=Upcall-TTTF\n+\/* @test id=Upcall-ASYNC-FT\n@@ -361,2 +189,2 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n+ *   -DUPCALL_TEST_TYPE=ASYNC\n+ *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=false\n@@ -364,1 +192,0 @@\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n@@ -368,1 +195,1 @@\n-\/* @test id=Upcall-TFFT\n+\/* @test id=Upcall-ASYNC-TT\n@@ -375,0 +202,1 @@\n+ *   -DUPCALL_TEST_TYPE=ASYNC\n@@ -376,3 +204,1 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n@@ -382,1 +208,1 @@\n-\/* @test id=Upcall-FTFT\n+\/* @test id=Upcall-STACK-FF\n@@ -389,0 +215,1 @@\n+ *   -DUPCALL_TEST_TYPE=STACK\n@@ -390,1 +217,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n@@ -392,1 +218,0 @@\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n@@ -396,1 +221,1 @@\n-\/* @test id=Upcall-TTFT\n+\/* @test id=Upcall-STACK-TF\n@@ -403,0 +228,1 @@\n+ *   -DUPCALL_TEST_TYPE=STACK\n@@ -404,1 +230,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n@@ -406,1 +231,0 @@\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=true\n@@ -410,15 +234,1 @@\n-\/* @test id=Upcall-TFFF\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @build NativeTestHelper CallGeneratorHelper TestUpcall\n- *\n- * @run testng\/othervm\/manual\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_SPEC=true\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n- *   TestUpcall\n- *\/\n-\n-\/* @test id=Upcall-FTFF\n+\/* @test id=Upcall-STACK-FT\n@@ -431,0 +241,1 @@\n+ *   -DUPCALL_TEST_TYPE=STACK\n@@ -432,3 +243,1 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n@@ -438,1 +247,1 @@\n-\/* @test id=Upcall-TTFF\n+\/* @test id=Upcall-STACK-TT\n@@ -445,0 +254,1 @@\n+ *   -DUPCALL_TEST_TYPE=STACK\n@@ -446,3 +256,1 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=false\n- *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_INTRINSICS=false\n+ *   -Djdk.internal.foreign.ProgrammableUpcallHandler.USE_SPEC=true\n@@ -451,0 +259,1 @@\n+\n","filename":"test\/jdk\/java\/foreign\/TestMatrix.java","additions":68,"deletions":259,"binary":false,"changes":327,"status":"modified"},{"patch":"@@ -36,10 +36,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Xbatch\n- *   TestAsyncStackWalk\n- *\n- * @run main\/othervm\n- *   -Xbootclasspath\/a:.\n- *   -XX:+UnlockDiagnosticVMOptions\n- *   -XX:+WhiteBoxAPI\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -64,11 +54,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Xbatch\n- *   -XX:+UseZGC\n- *   TestAsyncStackWalk\n- *\n- * @run main\/othervm\n- *   -Xbootclasspath\/a:.\n- *   -XX:+UnlockDiagnosticVMOptions\n- *   -XX:+WhiteBoxAPI\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -93,11 +72,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Xbatch\n- *   -XX:+UseShenandoahGC\n- *   TestAsyncStackWalk\n- *\n- * @run main\/othervm\n- *   -Xbootclasspath\/a:.\n- *   -XX:+UnlockDiagnosticVMOptions\n- *   -XX:+WhiteBoxAPI\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestAsyncStackWalk.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -36,10 +36,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Xbatch\n- *   TestStackWalk\n- *\n- * @run main\/othervm\n- *   -Xbootclasspath\/a:.\n- *   -XX:+UnlockDiagnosticVMOptions\n- *   -XX:+WhiteBoxAPI\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -64,11 +54,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Xbatch\n- *   -XX:+UseZGC\n- *   TestStackWalk\n- *\n- * @run main\/othervm\n- *   -Xbootclasspath\/a:.\n- *   -XX:+UnlockDiagnosticVMOptions\n- *   -XX:+WhiteBoxAPI\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n@@ -93,11 +72,0 @@\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=true\n- *   --enable-native-access=ALL-UNNAMED\n- *   -Xbatch\n- *   -XX:+UseShenandoahGC\n- *   TestStackWalk\n- *\n- * @run main\/othervm\n- *   -Xbootclasspath\/a:.\n- *   -XX:+UnlockDiagnosticVMOptions\n- *   -XX:+WhiteBoxAPI\n- *   -Djdk.internal.foreign.ProgrammableInvoker.USE_INTRINSICS=false\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"}]}