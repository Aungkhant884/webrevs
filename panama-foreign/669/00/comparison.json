{"files":[{"patch":"@@ -147,0 +147,3 @@\n+    \/**\n+     * {@return the hash code value for this layout}\n+     *\/\n@@ -152,0 +155,16 @@\n+    \/**\n+     * Compares the specified object with this layout for equality. Returns {@code true} if and only if the specified\n+     * object is also a layout, and it is equal to this layout. Two layouts are considered equal if they are of\n+     * the same kind, have the same size, name and alignment constraints. Furthermore, depending on the layout kind, additional\n+     * conditions must be satisfied:\n+     * <ul>\n+     *     <li>two value layouts are considered equal if they have the same byte order (see {@link ValueLayout#order()})<\/li>\n+     *     <li>two sequence layouts are considered equal if they have the same element count (see {@link SequenceLayout#elementCount()}), and\n+     *     if their element layouts (see {@link SequenceLayout#elementLayout()}) are also equal<\/li>\n+     *     <li>two group layouts are considered equal if they are of the same kind (see {@link GroupLayout#isStruct()},\n+     *     {@link GroupLayout#isUnion()}) and if their member layouts (see {@link GroupLayout#memberLayouts()}) are also equal<\/li>\n+     * <\/ul>\n+     *\n+     * @param that the object to be compared for equality with this layout.\n+     * @return {@code true} if the specified object is equal to this layout.\n+     *\/\n@@ -153,2 +172,2 @@\n-    public boolean equals(Object other) {\n-        if (this == other) {\n+    public boolean equals(Object that) {\n+        if (this == that) {\n@@ -158,1 +177,1 @@\n-        if (!(other instanceof AbstractLayout)) {\n+        if (!(that instanceof AbstractLayout)) {\n@@ -162,2 +181,2 @@\n-        return Objects.equals(name, ((AbstractLayout) other).name) &&\n-                Objects.equals(alignment, ((AbstractLayout) other).alignment);\n+        return Objects.equals(name, ((AbstractLayout) that).name) &&\n+                Objects.equals(alignment, ((AbstractLayout) that).alignment);\n@@ -166,0 +185,5 @@\n+    \/**\n+     * {@return the string representation of this layout}\n+     *\/\n+    public abstract String toString();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AbstractLayout.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -31,3 +31,2 @@\n- * Represents a type which is <em>addressable<\/em>. An addressable type is one which can be projected down to\n- * a {@linkplain #address() memory address}. Examples of addressable types are {@link MemorySegment},\n- * {@link MemoryAddress} and {@link VaList}.\n+ * An object that may be projected down to a {@linkplain #address() memory address}.\n+ * Examples of addressable types are {@link MemorySegment}, {@link MemoryAddress} and {@link VaList}.\n@@ -39,3 +38,0 @@\n- * @implSpec\n- * Implementations of this interface are <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n- *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Addressable.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n+ * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown.<\/p>\n@@ -110,1 +110,1 @@\n- * Obtaining downcall method handle is intrinsically unsafe. A symbol in a native library does not, in general,\n+ * Creating downcall method handle is intrinsically unsafe. A symbol in a native library does not, in general,\n@@ -161,2 +161,1 @@\n-     * Obtains a foreign method handle, with the given type and featuring the given function descriptor,\n-     * which can be used to call a target foreign function at the address in the given {@link Addressable} instance.\n+     * Creates a method handle which can be used to call a target foreign function with given signature and address.\n@@ -173,4 +172,4 @@\n-     * @param symbol   downcall symbol.\n-     * @param function the function descriptor.\n-     * @return the downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n-     * @throws IllegalArgumentException if the provided descriptor contains either a sequence or a padding layout,\n+     * @param symbol the address of the target function.\n+     * @param function the function descriptor of the target function.\n+     * @return a new downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n+     * @throws IllegalArgumentException if the provided function descriptor contains either a sequence or a padding layout,\n@@ -185,2 +184,1 @@\n-     * Obtains a foreign method handle, with the given type and featuring the given function descriptor, which can be\n-     * used to call a target foreign function at the address in a dynamically provided {@link Addressable} instance.\n+     * Creates a method handle which can be used to call a target foreign function with given signature.\n@@ -188,1 +186,2 @@\n-     * entry point, of type {@link Addressable}.\n+     * entry point, of type {@link Addressable}, which is used to specify the address of the target function\n+     * to be called.\n@@ -197,2 +196,2 @@\n-     * @param function the function descriptor.\n-     * @return the downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n+     * @param function the function descriptor of the target function.\n+     * @return a new downcall method handle. The method handle type is <a href=\"CLinker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n@@ -200,1 +199,1 @@\n-     * @throws IllegalArgumentException if the provided descriptor contains either a sequence or a padding layout.\n+     * @throws IllegalArgumentException if the provided function descriptor contains either a sequence or a padding layout.\n@@ -205,1 +204,1 @@\n-     * Allocates a native stub which can be passed to other foreign functions (as a function pointer), with given\n+     * Creates a native stub which can be passed to other foreign functions as a function pointer, with given\n@@ -218,2 +217,2 @@\n-     * @param target   the target method handle.\n-     * @param function the function descriptor.\n+     * @param target the target method handle.\n+     * @param function the upcall stub function descriptor.\n@@ -231,1 +230,1 @@\n-     * Obtains the downcall method handle {@linkplain MethodType type} associated with a given function descriptor.\n+     * {@return the downcall method handle {@linkplain MethodType type} associated with a given function descriptor}\n@@ -233,1 +232,0 @@\n-     * @return the downcall method handle {@linkplain MethodType type} associated with a given function descriptor.\n@@ -242,1 +240,1 @@\n-     * Obtains the method handle {@linkplain MethodType type} associated with an upcall stub with given function descriptor.\n+     * {@return the method handle {@linkplain MethodType type} associated with an upcall stub with given function descriptor}\n@@ -244,1 +242,0 @@\n-     * @return the method handle {@linkplain MethodType type} associated with an upcall stub with given function descriptor.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/CLinker.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -42,1 +43,3 @@\n- * is used to model the signature of foreign functions.\n+ * is used to model the signature of foreign functions when creating\n+ * {@linkplain CLinker#downcallHandle(Addressable, FunctionDescriptor) downcall method handles} or\n+ * {@linkplain CLinker#upcallStub(MethodHandle, FunctionDescriptor, MemorySession) upcall stubs}.\n@@ -44,2 +47,2 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n+ * @implSpec\n+ * This class is immutable and thread-safe and <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n@@ -75,1 +78,1 @@\n-     * Create a function descriptor with given return and argument layouts.\n+     * Creates a function descriptor with given return and argument layouts.\n@@ -88,1 +91,1 @@\n-     * Create a function descriptor with given argument layouts and no return layout.\n+     * Creates a function descriptor with given argument layouts and no return layout.\n@@ -99,1 +102,1 @@\n-     * Obtain a specialized variadic function descriptor, by appending given variadic layouts to this\n+     * Creates a specialized variadic function descriptor, by appending given variadic layouts to this\n@@ -105,1 +108,1 @@\n-     * @return a new variadic function descriptor, or this descriptor if {@code variadicLayouts.length == 0}.\n+     * @return a variadic function descriptor, or this descriptor if {@code variadicLayouts.length == 0}.\n@@ -123,1 +126,1 @@\n-     * Create a new function descriptor with the given argument layouts appended to the argument layout array\n+     * Returns a function descriptor with the given argument layouts appended to the argument layout array\n@@ -133,1 +136,1 @@\n-     * Create a new function descriptor with the given argument layouts inserted at the given index, into the argument\n+     * Returns a function descriptor with the given argument layouts inserted at the given index, into the argument\n@@ -152,1 +155,1 @@\n-     * Create a new function descriptor with the given memory layout as the new return layout.\n+     * Returns a function descriptor with the given memory layout as the new return layout.\n@@ -162,1 +165,1 @@\n-     * Create a new function descriptor with the return layout dropped. This is useful to model functions\n+     * Returns a function descriptor with the return layout dropped. This is useful to model functions\n@@ -213,7 +216,2 @@\n-    \/**\n-     * Returns an {@link Optional} containing the nominal descriptor for this\n-     * function descriptor, if one can be constructed, or an empty {@link Optional}\n-     * if one cannot be constructed.\n-     *\n-     * @return An {@link Optional} containing the resulting nominal descriptor,\n-     * or an empty {@link Optional} if one cannot be constructed.\n+     \/**\n+     * {@return the nominal descriptor for this function descriptor, if one can be constructed}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * A group layout is used to combine multiple <em>member layouts<\/em>. There are two ways in which member layouts\n+ * A compound layout that aggregates multiple <em>member layouts<\/em>. There are two ways in which member layouts\n@@ -53,3 +53,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n- *\n@@ -57,1 +54,1 @@\n- * This class is immutable and thread-safe.\n+ * This class is immutable and thread-safe and <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n@@ -127,0 +124,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n@@ -135,1 +135,1 @@\n-     * {@return {@code true}, if this group layout is a <em>struct<\/em>}\n+     * {@return {@code true}, if this group layout is a struct layout}\n@@ -142,1 +142,1 @@\n-     * {@return {@code true}, if this group layout is a <em>union<\/em>}\n+     * {@return {@code true}, if this group layout is a union layout}\n@@ -148,0 +148,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n@@ -162,0 +165,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+import jdk.internal.ValueBased;\n@@ -73,3 +75,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n- *\n@@ -90,1 +89,1 @@\n-     * Creates a new memory address with given offset (in bytes), which might be negative, from current one.\n+     * Returns a memory address at given offset from this address.\n@@ -92,1 +91,2 @@\n-     * @return a new memory address with given offset from current one.\n+     *               Might be negative.\n+     * @return a memory address with given offset from current one.\n@@ -158,1 +158,1 @@\n-     * The native memory address instance modelling the {@code NULL} address.\n+     * The memory address instance modelling the {@code NULL} address.\n@@ -163,3 +163,3 @@\n-     * Obtain a native memory address instance from given long address.\n-     * @param value the long address.\n-     * @return the new memory address instance.\n+     * Creates a memory address from a given long value.\n+     * @param value the long value representing a raw address.\n+     * @return a new memory address instance.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryAddress.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -81,8 +81,0 @@\n- * <p>\n- * All implementations of this interface must be <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>;\n- * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n- * use instances for synchronization, or unpredictable behavior may occur. For example, in a future release,\n- * synchronization may fail. The {@code equals} method should be used for comparisons.\n- *\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n@@ -181,3 +173,1 @@\n-     * {@return an {@link Optional} containing the nominal descriptor for this\n-     * layout, if one can be constructed, or an empty {@link Optional}\n-     * if one cannot be constructed}\n+     * {@return the nominal descriptor for this layout, if one can be constructed}\n@@ -200,1 +190,1 @@\n-     * {@return the <em>name<\/em> (if any) associated with this layout}\n+     * {@return the name (if any) associated with this layout}\n@@ -206,1 +196,2 @@\n-     * Creates a new layout which features the desired layout <em>name<\/em>.\n+     * Returns a memory layout with same size and alignment constraints as this layout,\n+     * but with the specified name.\n@@ -209,1 +200,1 @@\n-     * @return a new layout which is the same as this layout, except for the <em>name<\/em> associated with it.\n+     * @return a memory layout with given name.\n@@ -255,1 +246,2 @@\n-     * Creates a new layout which features the desired alignment constraint.\n+     * Returns a memory layout with same size and name as this layout,\n+     * but with the specified alignment constraints (in bits).\n@@ -258,1 +250,1 @@\n-     * @return a new layout which is the same as this layout, except for the alignment constraint associated with it.\n+     * @return a memory layout with given alignment constraints.\n@@ -505,1 +497,1 @@\n-     * Instances of this class are used to form <a href=\"MemoryLayout.html#layout-paths\"><em>layout paths<\/em><\/a>. There\n+     * An element in a <a href=\"MemoryLayout.html#layout-paths\"><em>layout path<\/em><\/a>. There\n@@ -514,1 +506,1 @@\n-     * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n+     * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown.<\/p>\n@@ -517,1 +509,1 @@\n-     * Implementations of this interface are immutable and thread-safe.\n+     * Implementations of this interface are immutable, thread-safe and <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n@@ -559,2 +551,2 @@\n-         * Returns a path element which selects the element layout in a <em>range<\/em> of positions in a given the sequence layout,\n-         * where the range is expressed as a pair of starting index (inclusive) {@code S} and step factor (which can also be negative)\n+         * Returns a path element which selects the element layout in a <em>range<\/em> of positions in a given the sequence layout.\n+         * The range is expressed as a pair of starting index (inclusive) {@code S} and step factor (which can also be negative)\n@@ -632,1 +624,1 @@\n-     * Create a new padding layout with given size.\n+     * Creates a padding layout with given size.\n@@ -659,1 +651,1 @@\n-     * @return a new value layout.\n+     * @return a value layout with given Java carrier and byte-order.\n@@ -689,1 +681,1 @@\n-     * Create a new sequence layout with given element layout and element count.\n+     * Creates a sequence layout with given element layout and element count.\n@@ -702,1 +694,1 @@\n-     * Create a new <em>struct<\/em> group layout with given member layouts.\n+     * Creates a struct layout with given member layouts.\n@@ -704,2 +696,2 @@\n-     * @param elements The member layouts of the <em>struct<\/em> group layout.\n-     * @return a new <em>struct<\/em> group layout with given member layouts.\n+     * @param elements The member layouts of the struct layout.\n+     * @return a struct layout with given member layouts.\n@@ -716,1 +708,1 @@\n-     * Create a new <em>union<\/em> group layout with given member layouts.\n+     * Creates a union layout with given member layouts.\n@@ -718,2 +710,2 @@\n-     * @param elements The member layouts of the <em>union<\/em> layout.\n-     * @return a new <em>union<\/em> group layout with given member layouts.\n+     * @param elements The member layouts of the union layout.\n+     * @return a union layout with given member layouts.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":22,"deletions":30,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n- *\n@@ -328,2 +325,2 @@\n-     * Obtains a new memory segment view whose base address is the same as the base address of this segment plus a given offset,\n-     * and whose new size is specified by the given argument.\n+     * Returns a slice of this memory segment, at given offset. The returned segment's base address is the base address\n+     * of this segment plus a given offset; its size is specified by the given argument.\n@@ -335,1 +332,1 @@\n-     * @return a new memory segment view with updated base\/limit addresses.\n+     * @return a slice of this memory segment.\n@@ -341,2 +338,2 @@\n-     * Obtains a new memory segment view whose base address is the same as the base address of this segment plus a given offset,\n-     * and whose new size is computed by subtracting the specified offset from this segment size.\n+     * Returns a slice of this memory segment, at given offset. The returned segment's base address is the base address\n+     * of this segment plus a given offset; its size is computed by subtracting the specified offset from this segment size.\n@@ -352,1 +349,1 @@\n-     * @return a new memory segment view with updated base\/limit addresses.\n+     * @return a slice of this memory segment.\n@@ -366,1 +363,1 @@\n-     * Obtains a read-only view of this segment. The resulting segment will be identical to this one, but\n+     * Returns a read-only view of this segment. The resulting segment will be identical to this one, but\n@@ -739,1 +736,1 @@\n-     * Creates a new buffer memory segment that models the memory associated with the given byte\n+     * Creates a buffer memory segment that models the memory associated with the given byte\n@@ -751,1 +748,1 @@\n-     * @return a new buffer memory segment.\n+     * @return a buffer memory segment.\n@@ -758,1 +755,1 @@\n-     * Creates a new array memory segment that models the memory associated with a given heap-allocated byte array.\n+     * Creates an array memory segment that models the memory associated with a given heap-allocated byte array.\n@@ -762,1 +759,1 @@\n-     * @return a new array memory segment.\n+     * @return an array memory segment.\n@@ -769,1 +766,1 @@\n-     * Creates a new array memory segment that models the memory associated with a given heap-allocated char array.\n+     * Creates an array memory segment that models the memory associated with a given heap-allocated char array.\n@@ -773,1 +770,1 @@\n-     * @return a new array memory segment.\n+     * @return an array memory segment.\n@@ -780,1 +777,1 @@\n-     * Creates a new array memory segment that models the memory associated with a given heap-allocated short array.\n+     * Creates an array memory segment that models the memory associated with a given heap-allocated short array.\n@@ -784,1 +781,1 @@\n-     * @return a new array memory segment.\n+     * @return an array memory segment.\n@@ -791,1 +788,1 @@\n-     * Creates a new array memory segment that models the memory associated with a given heap-allocated int array.\n+     * Creates an array memory segment that models the memory associated with a given heap-allocated int array.\n@@ -795,1 +792,1 @@\n-     * @return a new array memory segment.\n+     * @return an array memory segment.\n@@ -802,1 +799,1 @@\n-     * Creates a new array memory segment that models the memory associated with a given heap-allocated float array.\n+     * Creates an array memory segment that models the memory associated with a given heap-allocated float array.\n@@ -806,1 +803,1 @@\n-     * @return a new array memory segment.\n+     * @return an array memory segment.\n@@ -813,1 +810,1 @@\n-     * Creates a new array memory segment that models the memory associated with a given heap-allocated long array.\n+     * Creates an array memory segment that models the memory associated with a given heap-allocated long array.\n@@ -817,1 +814,1 @@\n-     * @return a new array memory segment.\n+     * @return an array memory segment.\n@@ -824,1 +821,1 @@\n-     * Creates a new array memory segment that models the memory associated with a given heap-allocated double array.\n+     * Creates an array memory segment that models the memory associated with a given heap-allocated double array.\n@@ -828,1 +825,1 @@\n-     * @return a new array memory segment.\n+     * @return an array memory segment.\n@@ -836,1 +833,1 @@\n-     * Creates a new native memory segment with given size, base address, and memory session.\n+     * Creates a native memory segment with given size, base address, and memory session.\n@@ -856,1 +853,1 @@\n-     * @return a new native memory segment with given base address, size and memory session.\n+     * @return a native memory segment with given base address, size and memory session.\n@@ -876,2 +873,2 @@\n-     * Creates a new native memory segment that models a newly allocated block of off-heap memory with given layout\n-     * and memory session. A client is responsible make sure that the memory session associated with the returned segment is closed\n+     * Creates a native memory segment with given layout and memory session.\n+     * A client is responsible make sure that the memory session associated with the returned segment is closed\n@@ -900,2 +897,2 @@\n-     * Creates a new native memory segment that models a newly allocated block of off-heap memory with given size (in bytes)\n-     * and memory session. A client is responsible make sure that the memory session associated with the returned segment is closed\n+     * Creates a native memory segment with given size (in bytes) and memory session.\n+     * A client is responsible make sure that the memory session associated with the returned segment is closed\n@@ -923,4 +920,3 @@\n-     * Creates a new native memory segment that models a newly allocated block of off-heap memory with given size\n-     * (in bytes), alignment constraint (in bytes) and memory session. A client is responsible make sure that the memory\n-     * session associated with the returned segment is closed when the segment is no longer in use.\n-     * Failure to do so will result in off-heap memory leaks.\n+     * Creates a native memory segment with given size (in bytes), alignment constraint (in bytes) and memory session.\n+     * A client is responsible make sure that the memory session associated with the returned segment is closed when the\n+     * segment is no longer in use. Failure to do so will result in off-heap memory leaks.\n@@ -1730,2 +1726,3 @@\n-     * Copies a number of elements from a source segment to a destination array,\n-     * starting at a given segment offset (expressed in bytes), and a given array index, using the given source element layout.\n+     * Copies a number of elements from a source memory segment to a destination array. The elements, whose size and alignment\n+     * constraints are specified by the given layout, are read from the source segment, starting at a given offset\n+     * (expressed in bytes), and are copied into the destination array, at a given index.\n@@ -1779,2 +1776,3 @@\n-     * Copies a number of elements from a source array to a destination segment,\n-     * starting at a given array index, and a given segment offset (expressed in bytes), using the given destination element layout.\n+     * Copies a number of elements from a source array to a destination memory segment. The elements, whose size and alignment\n+     * constraints are specified by the given layout, are read from the source array, starting at a given index,\n+     * and are copied into the destination segment, at a given offset (expressed in bytes).\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":38,"deletions":40,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n- * Implementations of this interface are immutable, thread-safe and <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n+ * Implementations of this interface are thread-safe.\n@@ -155,1 +155,1 @@\n-     * Run a critical action while this memory session is kept alive.\n+     * Runs a critical action while this memory session is kept alive.\n@@ -161,1 +161,1 @@\n-     * Add a custom cleanup action which will be executed when the memory session is closed.\n+     * Adds a custom cleanup action which will be executed when the memory session is closed.\n@@ -192,1 +192,1 @@\n-     * this session is returned. Otherwise, this method returns a new non-closeable view of this memory session.\n+     * this session is returned. Otherwise, this method returns a non-closeable view of this memory session.\n@@ -218,1 +218,1 @@\n-     * Allocates a new native segment, using this session. Equivalent to the following code:\n+     * Allocates a native segment, using this session. Equivalent to the following code:\n@@ -233,1 +233,1 @@\n-     * Creates a new closeable confined memory session.\n+     * Creates a closeable confined memory session.\n@@ -241,1 +241,1 @@\n-     * Creates a new closeable confined memory session, managed by the provided cleaner instance.\n+     * Creates a closeable confined memory session, managed by the provided cleaner instance.\n@@ -251,1 +251,1 @@\n-     * Creates a new closeable shared memory session.\n+     * Creates a closeable shared memory session.\n@@ -259,1 +259,1 @@\n-     * Creates a new closeable shared memory session, managed by the provided cleaner instance.\n+     * Creates a closeable shared memory session, managed by the provided cleaner instance.\n@@ -269,1 +269,1 @@\n-     * Creates a new non-closeable shared memory session, managed by a private {@link Cleaner} instance.\n+     * Creates a non-closeable shared memory session, managed by a private {@link Cleaner} instance.\n@@ -281,2 +281,2 @@\n-     * Returns the <em>global memory session<\/em>.\n-     * @return the <em>global memory session<\/em>.\n+     * Returns the global memory session.\n+     * @return the global memory session.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -44,3 +44,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n- *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/PaddingLayout.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * This interface models a memory allocator. Clients implementing this interface\n+ * An object that may be used to allocate {@linkplain MemorySegment memory segments}. Clients implementing this interface\n@@ -86,1 +86,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given byte value.\n+     * Allocates a memory segment with given layout and initialize it with given byte value.\n@@ -101,1 +101,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given char value.\n+     * Allocates a memory segment with given layout and initialize it with given char value.\n@@ -116,1 +116,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given short value.\n+     * Allocates a memory segment with given layout and initialize it with given short value.\n@@ -131,1 +131,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given int value.\n+     * Allocates a memory segment with given layout and initialize it with given int value.\n@@ -146,1 +146,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given float value.\n+     * Allocates a memory segment with given layout and initialize it with given float value.\n@@ -161,1 +161,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given long value.\n+     * Allocates a memory segment with given layout and initialize it with given long value.\n@@ -176,1 +176,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given double value.\n+     * Allocates a memory segment with given layout and initialize it with given double value.\n@@ -191,2 +191,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given address value\n-     * (expressed as an {@link Addressable} instance).\n+     * Allocates a memory segment with given layout and initialize it with given address value.\n@@ -208,1 +207,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given byte array.\n+     * Allocates a memory segment with given layout and initialize it with given byte array.\n@@ -219,1 +218,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given short array.\n+     * Allocates a memory segment with given layout and initialize it with given short array.\n@@ -230,1 +229,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given char array.\n+     * Allocates a memory segment with given layout and initialize it with given char array.\n@@ -241,1 +240,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given int array.\n+     * Allocates a memory segment with given layout and initialize it with given int array.\n@@ -252,1 +251,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given float array.\n+     * Allocates a memory segment with given layout and initialize it with given float array.\n@@ -263,1 +262,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given long array.\n+     * Allocates a memory segment with given layout and initialize it with given long array.\n@@ -274,1 +273,1 @@\n-     * Allocate a memory segment with given layout and initialize it with given double array.\n+     * Allocates a memory segment with given layout and initialize it with given double array.\n@@ -296,1 +295,1 @@\n-     * Allocate a memory segment with given layout.\n+     * Allocates a memory segment with given layout.\n@@ -307,1 +306,1 @@\n-     * Allocate a memory segment with given element layout and size.\n+     * Allocates a memory segment with given element layout and size.\n@@ -320,2 +319,1 @@\n-     * Allocate a memory segment with given size\n-     * and default alignment constraints (1-byte aligned).\n+     * Allocates a memory segment with given size.\n@@ -332,1 +330,1 @@\n-     * Allocate a memory segment with given size and alignment constraints.\n+     * Allocates a memory segment with given size and alignment constraints.\n@@ -342,1 +340,1 @@\n-     * Returns a native unbounded arena-based allocator, with predefined block size and maximum arena size,\n+     * Creates a native unbounded arena-based allocator, with predefined block size and maximum arena size,\n@@ -358,1 +356,1 @@\n-     * Returns a native unbounded arena-based allocator, with block size set to the specified arena size, associated with\n+     * Creates a native unbounded arena-based allocator, with block size set to the specified arena size, associated with\n@@ -376,1 +374,1 @@\n-     * Returns a native arena-based allocator, associated with the provided memory session,\n+     * Creates a native arena-based allocator, associated with the provided memory session,\n@@ -418,2 +416,2 @@\n-     * Returns a segment allocator which responds to allocation requests by recycling a single segment; that is,\n-     * each new allocation request will return a new slice starting at the segment offset {@code 0} (alignment\n+     * Returns a segment allocator which responds to allocation requests by recycling a single segment. Each\n+     * new allocation request will return a new slice starting at the segment offset {@code 0} (alignment\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * A sequence layout. A sequence layout is used to denote a repetition of a given layout, also called the sequence layout's <em>element layout<\/em>.\n+ * A compound layout that denotes a repetition of a given <em>element layout<\/em>.\n@@ -62,3 +62,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n- *\n@@ -66,1 +63,1 @@\n- * This class is immutable and thread-safe.\n+ * This class is immutable and thread-safe and <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n@@ -101,2 +98,2 @@\n-     * Obtains a new sequence layout with same element layout, alignment constraints and name as this sequence layout\n-     * but with the new specified element count.\n+     * Returns a sequence layout with same element layout, alignment constraints and name as this sequence layout,\n+     * but with the specified element count.\n@@ -104,1 +101,1 @@\n-     * @return a new sequence with given element count.\n+     * @return a sequence layout with given element count.\n@@ -113,1 +110,2 @@\n-     * Returns a new sequence layout where element layouts in the flattened projection of this\n+     * Re-arrange the elements in this sequence layout into a multi-dimensional sequence layout.\n+     * The resulting layout is a sequence layout where element layouts in the flattened projection of this\n@@ -137,1 +135,1 @@\n-     * @return a new sequence layout where element layouts in the flattened projection of this\n+     * @return a sequence layout where element layouts in the flattened projection of this\n@@ -188,2 +186,2 @@\n-     * Returns a new, flattened sequence layout whose element layout is the first non-sequence\n-     * element layout found by recursively traversing the element layouts of this sequence layout.\n+     * Returns a flattened sequence layout. The element layout of the returned sequence layout\n+     * is the first non-sequence element layout found by recursively traversing the element layouts of this sequence layout.\n@@ -200,1 +198,1 @@\n-     * @return a new sequence layout with the same size as this layout (but, possibly, with different\n+     * @return a sequence layout with the same size as this layout (but, possibly, with different\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * A symbol lookup can be used to look up a symbol in one or more loaded libraries. A symbol lookup allows for searching\n+ * An object that may be used to look up symbols in one or more loaded libraries. A symbol lookup allows for searching\n@@ -61,2 +61,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n@@ -77,1 +75,1 @@\n-     * Obtains a symbol lookup suitable to find symbols in native libraries associated with the caller's classloader.\n+     * Returns a symbol lookup suitable to find symbols in native libraries associated with the caller's classloader.\n@@ -101,1 +99,1 @@\n-     * Obtains a system lookup suitable to find symbols in the standard C libraries. The set of symbols\n+     * Returns a system lookup suitable to find symbols in the standard C libraries. The set of symbols\n@@ -110,1 +108,1 @@\n-     * Loads a library with given name and obtains a symbol lookup suitable to find symbols in that library.\n+     * Loads a library with given name and creates a symbol lookup suitable to find symbols in that library.\n@@ -121,1 +119,1 @@\n-     * @return a symbol lookup suitable to find symbols in a library with given name.\n+     * @return a new symbol lookup suitable to find symbols in a library with given name.\n@@ -141,1 +139,1 @@\n-     * Loads a library with given path and obtains a symbol lookup suitable to find symbols in that library.\n+     * Loads a library with given path and creates a symbol lookup suitable to find symbols in that library.\n@@ -150,1 +148,1 @@\n-     * @return a symbol lookup suitable to find symbols in a library with given path.\n+     * @return a new symbol lookup suitable to find symbols in a library with given path.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * An interface that models a variable argument list, similar in functionality to a C {@code va_list}.\n+ * A variable argument list, similar in functionality to a C {@code va_list}.\n@@ -57,3 +57,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n- *\n@@ -167,1 +164,1 @@\n-     * Constructs a new variable argument list from a memory address pointing to an existing variable argument list,\n+     * Creates a variable argument list from a memory address pointing to an existing variable argument list,\n@@ -193,1 +190,1 @@\n-     * Constructs a new variable argument list using a builder (see {@link Builder}), with given\n+     * Creates a variable argument list using a builder (see {@link Builder}), with given\n@@ -226,4 +223,1 @@\n-     * A builder interface used to construct a variable argument list.\n-     *\n-     * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n-     * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n+     * A builder used to construct a {@linkplain VaList variable argument list}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,3 +60,0 @@\n- * <p> Unless otherwise specified, passing a {@code null} argument, or an array argument containing one or more {@code null}\n- * elements to a method in this class causes a {@link NullPointerException NullPointerException} to be thrown. <\/p>\n- *\n@@ -64,1 +61,1 @@\n- * This class is immutable and thread-safe.\n+ * This class and its subclasses are immutable and thread-safe and <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>.\n@@ -95,1 +92,2 @@\n-     * Returns a new value layout with given byte order.\n+     * Returns a value layout with same carrier, alignment constraints and name as this value layout,\n+     * but with the specified byte order.\n@@ -98,1 +96,1 @@\n-     * @return a new value layout with given byte order.\n+     * @return a value layout with given byte order.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * <p> Classes to support low-level and efficient foreign memory\/function access, directly from Java.\n+ * <p>Provides low-level access to memory and functions outside the Java runtime.\n@@ -232,0 +232,4 @@\n+ * <p>\n+ * For every class in this package, unless specified otherwise, any method arguments of reference\n+ * type must not be null, and any null argument will elicit a {@code NullPointerException}.  This fact is not individually\n+ * documented for methods of this API.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}