{"files":[{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.ResourceScope;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\" })\n+public class ResourceScopeClose {\n+\n+    static final int ALLOC_SIZE = 1024;\n+\n+    public enum StressMode {\n+        NONE,\n+        MEMORY,\n+        THREADS\n+    }\n+\n+    @Param({\"NONE\", \"MEMORY\", \"THREADS\"})\n+    StressMode mode;\n+\n+    List<byte[]> arrays;\n+    volatile boolean stop = false;\n+    List<Thread> threads;\n+\n+    @Setup\n+    public void setup() throws Throwable {\n+        if (mode == StressMode.MEMORY) {\n+            arrays = new ArrayList<>();\n+            for (int i = 0; i < 100_000_000; i++) {\n+                arrays.add(new byte[2]);\n+            }\n+        } else if (mode == StressMode.THREADS) {\n+            threads = new ArrayList<>();\n+            for (int i = 0 ; i < 4 ; i++) {\n+                threads.add(new Thread(() -> {\n+                    while (true) {\n+                        if (stop) break;\n+                        \/\/ busy wait\n+                    }\n+                }));\n+            }\n+            threads.forEach(Thread::start);\n+        }\n+\n+    }\n+\n+    @TearDown\n+    public void tearDown() throws Throwable {\n+        arrays = null;\n+        if (threads != null) {\n+            stop = true;\n+            threads.forEach(t -> {\n+                try {\n+                    t.join();\n+                } catch (InterruptedException ex) {\n+                    throw new IllegalStateException(ex);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Benchmark\n+    public MemorySegment confined_close() {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+            return MemorySegment.allocateNative(ALLOC_SIZE, 4, scope);\n+        }\n+    }\n+\n+    @Benchmark\n+    public MemorySegment shared_close() {\n+        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n+            return MemorySegment.allocateNative(ALLOC_SIZE, 4, scope);\n+        }\n+    }\n+\n+    @Benchmark\n+    public MemorySegment implicit_close() {\n+        return MemorySegment.allocateNative(ALLOC_SIZE, 4, ResourceScope.newImplicitScope());\n+    }\n+\n+    @Benchmark\n+    public MemorySegment implicit_close_systemgc() {\n+        if (gcCount++ == 0) System.gc(); \/\/ GC when we overflow\n+        return MemorySegment.allocateNative(ALLOC_SIZE, 4, ResourceScope.newImplicitScope());\n+    }\n+\n+    \/\/ keep\n+    static byte gcCount = 0;\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ResourceScopeClose.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}