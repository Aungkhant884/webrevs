{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.abi.aarch64.macos.MacOsAArch64Linker;\n@@ -44,1 +45,3 @@\n-    private static LinuxAArch64Linker instance;\n+    private static final class Holder {\n+        private static final LinuxAArch64Linker INSTANCE = new LinuxAArch64Linker();\n+    }\n@@ -47,4 +50,5 @@\n-        if (instance == null) {\n-            instance = new LinuxAArch64Linker();\n-        }\n-        return instance;\n+        return Holder.INSTANCE;\n+    }\n+\n+    private LinuxAArch64Linker() {\n+        \/\/ Ensure there is only one instance\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64Linker.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -122,2 +123,2 @@\n-        MemorySegment gpRegsArea = grTop(segment).asSlice(-MAX_GP_OFFSET, MAX_GP_OFFSET);\n-        MemorySegment fpRegsArea = vrTop(segment).asSlice(-MAX_FP_OFFSET, MAX_FP_OFFSET);\n+        MemorySegment gpRegsArea = MemorySegment.ofAddress(grTop(segment).address() - MAX_GP_OFFSET, MAX_GP_OFFSET, session);\n+        MemorySegment fpRegsArea = MemorySegment.ofAddress(vrTop(segment).address() - MAX_FP_OFFSET, MAX_FP_OFFSET, session);\n@@ -250,1 +251,1 @@\n-        return (MemorySegment) read( layout, allocator);\n+        return (MemorySegment) read(layout, allocator);\n@@ -299,1 +300,1 @@\n-                    GroupLayout group = (GroupLayout)layout;\n+                    GroupLayout group = (GroupLayout) layout;\n@@ -315,1 +316,1 @@\n-                        gpRegsArea.asSlice(currentGPOffset()));\n+                            gpRegsArea.asSlice(currentGPOffset()));\n@@ -423,6 +424,6 @@\n-            + \"__stack=\" + stackPtr()\n-            + \", __gr_top=\" + grTop()\n-            + \", __vr_top=\" + vrTop()\n-            + \", __gr_offs=\" + grOffs()\n-            + \", __vr_offs=\" + vrOffs()\n-            + '}';\n+                + \"__stack=\" + stackPtr()\n+                + \", __gr_top=\" + grTop()\n+                + \", __vr_top=\" + vrTop()\n+                + \", __gr_offs=\" + grOffs()\n+                + \", __vr_offs=\" + vrOffs()\n+                + '}';\n@@ -494,1 +495,1 @@\n-                        GroupLayout group = (GroupLayout)layout;\n+                        GroupLayout group = (GroupLayout) layout;\n@@ -509,1 +510,1 @@\n-                                   valueSegment);\n+                                valueSegment);\n@@ -540,1 +541,1 @@\n-                    .reduce(0L, (acc, e) -> acc + Utils.alignUp(e.layout.byteSize(), STACK_SLOT_SIZE), Long::sum);\n+                        .reduce(0L, (acc, e) -> acc + Utils.alignUp(e.layout.byteSize(), STACK_SLOT_SIZE), Long::sum);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.foreign.abi.x64.windows.Windowsx64Linker;\n@@ -44,1 +45,3 @@\n-    private static MacOsAArch64Linker instance;\n+    private static final class Holder {\n+        private static final MacOsAArch64Linker INSTANCE = new MacOsAArch64Linker();\n+    }\n@@ -47,4 +50,5 @@\n-        if (instance == null) {\n-            instance = new MacOsAArch64Linker();\n-        }\n-        return instance;\n+        return Holder.INSTANCE;\n+    }\n+\n+    private MacOsAArch64Linker() {\n+        \/\/ Ensure there is only one instance\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.foreign.abi.x64.windows.Windowsx64Linker;\n@@ -42,1 +43,3 @@\n-    private static SysVx64Linker instance;\n+    private static final class Holder {\n+        private static final SysVx64Linker INSTANCE = new SysVx64Linker();\n+    }\n@@ -45,4 +48,1 @@\n-        if (instance == null) {\n-            instance = new SysVx64Linker();\n-        }\n-        return instance;\n+        return SysVx64Linker.Holder.INSTANCE;\n@@ -51,0 +51,3 @@\n+    private SysVx64Linker() {\n+        \/\/ Ensure there is only one instance\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,1 +41,4 @@\n-    private static Windowsx64Linker instance;\n+\n+    private static final class Holder {\n+        private static final Windowsx64Linker INSTANCE = new Windowsx64Linker();\n+    }\n@@ -44,4 +47,5 @@\n-        if (instance == null) {\n-            instance = new Windowsx64Linker();\n-        }\n-        return instance;\n+        return Holder.INSTANCE;\n+    }\n+\n+    private Windowsx64Linker() {\n+        \/\/ Ensure there is only one instance\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}