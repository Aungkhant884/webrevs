{"files":[{"patch":"@@ -44,1 +44,0 @@\n-    private static LinuxAArch64Linker instance;\n@@ -47,2 +46,2 @@\n-        if (instance == null) {\n-            instance = new LinuxAArch64Linker();\n+        final class Holder {\n+            private static final LinuxAArch64Linker INSTANCE = new LinuxAArch64Linker();\n@@ -50,1 +49,6 @@\n-        return instance;\n+\n+        return Holder.INSTANCE;\n+    }\n+\n+    private LinuxAArch64Linker() {\n+        \/\/ Ensure there is only one instance\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64Linker.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -122,2 +122,2 @@\n-        MemorySegment gpRegsArea = grTop(segment).asSlice(-MAX_GP_OFFSET, MAX_GP_OFFSET);\n-        MemorySegment fpRegsArea = vrTop(segment).asSlice(-MAX_FP_OFFSET, MAX_FP_OFFSET);\n+        MemorySegment gpRegsArea = MemorySegment.ofAddress(grTop(segment).address() - MAX_GP_OFFSET, MAX_GP_OFFSET, session);\n+        MemorySegment fpRegsArea = MemorySegment.ofAddress(vrTop(segment).address() - MAX_FP_OFFSET, MAX_FP_OFFSET, session);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-    private static MacOsAArch64Linker instance;\n@@ -47,2 +46,2 @@\n-        if (instance == null) {\n-            instance = new MacOsAArch64Linker();\n+        final class Holder {\n+            private static final MacOsAArch64Linker INSTANCE = new MacOsAArch64Linker();\n@@ -50,1 +49,6 @@\n-        return instance;\n+\n+        return Holder.INSTANCE;\n+    }\n+\n+    private MacOsAArch64Linker() {\n+        \/\/ Ensure there is only one instance\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-    private static SysVx64Linker instance;\n@@ -45,2 +44,2 @@\n-        if (instance == null) {\n-            instance = new SysVx64Linker();\n+        final class Holder {\n+            private static final SysVx64Linker INSTANCE = new SysVx64Linker();\n@@ -48,1 +47,2 @@\n-        return instance;\n+\n+        return Holder.INSTANCE;\n@@ -51,0 +51,3 @@\n+    private SysVx64Linker() {\n+        \/\/ Ensure there is only one instance\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-    private static Windowsx64Linker instance;\n@@ -44,2 +43,2 @@\n-        if (instance == null) {\n-            instance = new Windowsx64Linker();\n+        final class Holder {\n+            private static final Windowsx64Linker INSTANCE = new Windowsx64Linker();\n@@ -47,1 +46,6 @@\n-        return instance;\n+\n+        return Holder.INSTANCE;\n+    }\n+\n+    private Windowsx64Linker() {\n+        \/\/ Ensure there is only one instance\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}