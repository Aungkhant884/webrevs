{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n@@ -31,0 +30,1 @@\n+import jdk.incubator.foreign.CLinker;\n@@ -144,2 +144,7 @@\n-    public static native long allocate(int size);\n-    public static native void free(long address);\n+    public static MemoryAddress allocate(int size) {\n+        return CLinker.allocateMemoryRestricted(size);\n+    }\n+\n+    public static void free(MemoryAddress addr) {\n+        CLinker.freeMemoryRestricted(addr);\n+    }\n@@ -169,0 +174,1 @@\n+<<<<<<< HEAD\n@@ -172,0 +178,5 @@\n+=======\n+        MemoryAddress addr = allocate(12);\n+        MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,\n+                () -> free(addr), null);\n+>>>>>>> dbc7901e6fa3fea11ca8388af0593d9f128fdde7\n@@ -187,0 +198,1 @@\n+<<<<<<< HEAD\n@@ -190,0 +202,5 @@\n+=======\n+        MemoryAddress addr = allocate(12);\n+        MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,\n+                () -> free(addr), null);\n+>>>>>>> dbc7901e6fa3fea11ca8388af0593d9f128fdde7\n@@ -197,1 +214,1 @@\n-        MemoryAddress addr = MemoryAddress.ofLong(allocate(4));\n+        MemoryAddress addr = allocate(4);\n@@ -201,1 +218,1 @@\n-        free(addr.toRawLongValue());\n+        free(addr);\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"}]}