{"files":[{"patch":"@@ -1963,0 +1963,1 @@\n+unsigned int enable_native_access_count = 0;\n@@ -2406,0 +2407,4 @@\n+    } else if (match_option(option, \"--enable-native-access=\", &tail)) {\n+      if (!create_numbered_module_property(\"jdk.module.enable.native.access\", tail, enable_native_access_count++)) {\n+        return JNI_ENOMEM;\n+      }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -799,1 +799,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-import jdk.internal.misc.VM;\n@@ -61,0 +60,1 @@\n+import jdk.internal.module.IllegalNativeAccessChecker;\n@@ -114,0 +114,2 @@\n+    \/\/ is this module a native module\n+    private volatile boolean enableNativeAccess = false;\n@@ -138,0 +140,4 @@\n+        if (loader == null || loader == ClassLoaders.platformClassLoader()) {\n+            \/\/ boot\/builtin modules are always native\n+            addEnableNativeAccess();\n+        }\n@@ -140,1 +146,0 @@\n-\n@@ -153,1 +158,0 @@\n-\n@@ -249,0 +253,14 @@\n+    boolean isEnableNativeAccess() {\n+        if (enableNativeAccess) {\n+            return true;\n+        }\n+\n+        \/\/ lazy init for unnamed modules\n+        if (!isNamed() && IllegalNativeAccessChecker.enableNativeAccessAllUnnamedModules()) {\n+            enableNativeAccess = true;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n@@ -412,0 +430,5 @@\n+    }\n+\n+    Module addEnableNativeAccess() {\n+        enableNativeAccess = true;\n+        return this;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-\n@@ -2314,0 +2313,10 @@\n+\n+            @Override\n+            public Module addEnableNativeAccess(Module m) {\n+                return m.addEnableNativeAccess();\n+            }\n+\n+            @Override\n+            public boolean isEnableNativeAccess(Module m) {\n+                return m.isEnableNativeAccess();\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.vm.annotation.Stable;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -376,0 +376,4 @@\n+\n+    Module addEnableNativeAccess(Module m);\n+\n+    boolean isEnableNativeAccess(Module m);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,3 @@\n-        UNNAMED_MODULE = SharedSecrets.getJavaLangAccess().defineUnnamedModule(null);\n+        JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n+        UNNAMED_MODULE = jla.defineUnnamedModule(null);\n+        jla.addEnableNativeAccess(UNNAMED_MODULE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BootLoader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+package jdk.internal.module;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public final class IllegalNativeAccessChecker {\n+\n+    private final Collection<String> allowedModuleNames;\n+    private final boolean allowAllUnnamedModules;\n+\n+    private IllegalNativeAccessChecker(Set<String> allowedModuleNames, boolean allowAllUnnamedModules) {\n+        this.allowedModuleNames = Collections.unmodifiableSet(allowedModuleNames);\n+        this.allowAllUnnamedModules = allowAllUnnamedModules;\n+    }\n+\n+    \/\/ system-wide IllegalNativeAccessChecker\n+    private static volatile IllegalNativeAccessChecker checker;\n+\n+    static Collection<String> enableNativeAccessModules() {\n+        return checker().allowedModuleNames;\n+    }\n+\n+    public static boolean enableNativeAccessAllUnnamedModules() {\n+        return checker().allowAllUnnamedModules;\n+    }\n+\n+    private static IllegalNativeAccessChecker checker() {\n+        if (checker == null) {\n+            Set<String> allowedModuleNames = new HashSet<>();\n+            boolean allowAllUnnamedModules = false;\n+            for (String str : decode()) {\n+                if (str.equals(\"ALL-UNNAMED\")) {\n+                    allowAllUnnamedModules = true;\n+                } else {\n+                    allowedModuleNames.add(str);\n+                }\n+            }\n+            checker = new IllegalNativeAccessChecker(allowedModuleNames, allowAllUnnamedModules);\n+        }\n+        return checker;\n+    }\n+\n+    \/**\n+     * Returns the set of module names specified by --enable-native-access options.\n+     *\/\n+    private static Set<String> decode() {\n+        String prefix = \"jdk.module.enable.native.access.\";\n+        int index = 0;\n+        \/\/ the system property is removed after decoding\n+        String value = getAndRemoveProperty(prefix + index);\n+        Set<String> modules = new HashSet<>();\n+        if (value == null) {\n+            return modules;\n+        }\n+        while (value != null) {\n+            for (String s : value.split(\",\")) {\n+                if (!s.isEmpty())\n+                    modules.add(s);\n+            }\n+            index++;\n+            value = getAndRemoveProperty(prefix + index);\n+        }\n+        return modules;\n+    }\n+\n+    \/**\n+     * Gets and remove the named system property\n+     *\/\n+    private static String getAndRemoveProperty(String key) {\n+        return (String)System.getProperties().remove(key);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/IllegalNativeAccessChecker.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -271,1 +271,2 @@\n-        Modules.defineModule(null, base.descriptor(), baseUri);\n+        SharedSecrets.getJavaLangAccess()\n+                .addEnableNativeAccess(Modules.defineModule(null, base.descriptor(), baseUri));\n@@ -471,0 +472,3 @@\n+        \/\/ add enable native access\n+        addEnableNativeAccess(bootLayer);\n+\n@@ -872,0 +876,15 @@\n+    private static void addEnableNativeAccess(ModuleLayer layer) {\n+        \/\/ add native modules explicitly provided on the command line\n+\n+        JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n+        for (String name : IllegalNativeAccessChecker.enableNativeAccessModules()) {\n+            Optional<Module> module = layer.findModule(name);\n+            if (module.isPresent()) {\n+                jla.addEnableNativeAccess(module.get());\n+            } else {\n+                \/\/ silently skip.\n+                \/\/ warnUnknownModule(ENABLE_NATIVE_ACCESS, name);\n+            }\n+        }\n+    }\n+\n@@ -995,1 +1014,1 @@\n-\n+    private static final String ENABLE_NATIVE_ACCESS = \"--enable-native-access\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -109,0 +109,8 @@\n+    public static void ensureNativeAccess(Class<?> currentClass) {\n+        Module module = currentClass.getModule();\n+        if (!SharedSecrets.getJavaLangAccess().isEnableNativeAccess(module)) {\n+            String moduleName = module.isNamed()?  module.getName() : \"UNNAMED\";\n+            throw new IllegalCallerException(\"Illegal native access from module: \" + moduleName);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/Reflection.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/**\n+ * Documents that the method is a native access method.\n+ *\/\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface NativeAccess {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/NativeAccess.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -214,1 +214,2 @@\n-        jdk.jpackage;\n+        jdk.jpackage,\n+        jdk.incubator.foreign;\n@@ -230,1 +231,2 @@\n-        jdk.unsupported;\n+        jdk.unsupported,\n+        jdk.incubator.foreign;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,0 +63,3 @@\n+\\    --enable-native-access <module name>[,<module name>...]\\n\\\n+\\                  modules that are permitted to perform restricted native operations.\\n\\\n+\\                  <module name> can also be ALL-UNNAMED.\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -602,0 +602,1 @@\n+           JLI_StrCmp(name, \"--enable-native-access\") == 0 ||\n@@ -614,0 +615,1 @@\n+           JLI_StrCCmp(name, \"--enable-native-access=\") == 0 ||\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.foreign.Utils;\n@@ -33,0 +32,3 @@\n+import jdk.internal.vm.annotation.NativeAccess;\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -124,0 +126,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -125,1 +129,1 @@\n-        Utils.checkRestrictedAccess(\"CLinker.getInstance\");\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -405,0 +409,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -406,1 +412,1 @@\n-        Utils.checkRestrictedAccess(\"CLinker.toJavaStringRestricted\");\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -427,0 +433,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -428,1 +436,1 @@\n-        Utils.checkRestrictedAccess(\"CLinker.toJavaStringRestricted\");\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -501,0 +509,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -502,1 +512,1 @@\n-        Utils.checkRestrictedAccess(\"CLinker.allocateMemoryRestricted\");\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -520,0 +530,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -521,1 +533,1 @@\n-        Utils.checkRestrictedAccess(\"CLinker.freeMemoryRestricted\");\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -687,0 +699,2 @@\n+        @CallerSensitive\n+        @NativeAccess\n@@ -688,0 +702,1 @@\n+            Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -703,0 +718,2 @@\n+        @CallerSensitive\n+        @NativeAccess\n@@ -704,1 +721,1 @@\n-            Utils.checkRestrictedAccess(\"VaList.ofAddressRestricted\");\n+            Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import jdk.internal.vm.annotation.NativeAccess;\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -104,0 +107,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -105,0 +110,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -119,0 +125,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -120,0 +128,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -140,0 +149,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -141,0 +152,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n@@ -33,0 +32,3 @@\n+import jdk.internal.vm.annotation.NativeAccess;\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -116,0 +118,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -117,0 +121,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -177,0 +182,1 @@\n+    @NativeAccess\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,3 @@\n-import jdk.internal.foreign.Utils;\n+import jdk.internal.vm.annotation.NativeAccess;\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -780,0 +782,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -781,1 +785,1 @@\n-        Utils.checkRestrictedAccess(\"MemorySegment.ofNativeRestricted\");\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n-import jdk.incubator.foreign.ResourceScope;\n+import jdk.internal.vm.annotation.NativeAccess;\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -32,0 +34,1 @@\n+import jdk.incubator.foreign.ResourceScope;\n@@ -97,0 +100,2 @@\n+    @CallerSensitive\n+    @NativeAccess\n@@ -98,0 +103,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -99,1 +105,0 @@\n-        Utils.checkRestrictedAccess(\"MemoryAddress.asSegmentRestricted\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-\n@@ -110,16 +109,0 @@\n-    public static void checkRestrictedAccess(String method) {\n-        switch (foreignRestrictedAccess) {\n-            case \"deny\" -> throwIllegalAccessError(foreignRestrictedAccess, method);\n-            case \"warn\" -> System.err.println(\"WARNING: Accessing restricted foreign method: \" + method);\n-            case \"debug\" -> {\n-                StringBuilder sb = new StringBuilder(\"DEBUG: restricted foreign method: \\\" + method\");\n-                StackWalker.getInstance().forEach(f -> sb.append(System.lineSeparator())\n-                        .append(\"\\tat \")\n-                        .append(f));\n-                System.err.println(sb.toString());\n-            }\n-            case \"permit\" -> {}\n-            default -> throwIllegalAccessError(foreignRestrictedAccess, method);\n-        }\n-    }\n-\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit StdLibTest\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED StdLibTest\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestArrays\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestArrays\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestByteBuffer\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestByteBuffer\n@@ -31,1 +31,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestFree\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestFree\n","filename":"test\/jdk\/java\/foreign\/TestFree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestIllegalLink\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestIllegalLink\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestLibraryLookup\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestLibraryLookup\n","filename":"test\/jdk\/java\/foreign\/TestLibraryLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestNative\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestNative\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,9 +24,1 @@\n-\/*\n- * @test\n- * @run testng TestNoForeignUnsafeOverride\n- *\/\n-\n-import jdk.incubator.foreign.MemoryAddress;\n-\n-import jdk.incubator.foreign.MemorySegment;\n-import org.testng.annotations.Test;\n+package org.openjdk.foreigntest;\n@@ -34,4 +26,1 @@\n-public class TestNoForeignUnsafeOverride {\n-    static {\n-        System.setProperty(\"foreign.restricted\", \"permit\");\n-    }\n+import jdk.incubator.foreign.*;\n@@ -39,4 +28,6 @@\n-    @Test(expectedExceptions = IllegalAccessError.class)\n-    public void testUnsafeAccess() {\n-        MemorySegment.ofNativeRestricted();\n-    }\n+public class PanamaMain {\n+   public static void main(String[] args) {\n+       System.out.println(\"Trying to get CLinker\");\n+       CLinker.getInstance();\n+       System.out.println(\"Got CLinker\");\n+   }\n","filename":"test\/jdk\/java\/foreign\/TestNoForeignUnsafeOverride.java","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,3 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestNulls\n+ * @run testng\/othervm\n+ *     --enable-native-access=ALL-UNNAMED\n+ *     TestNulls\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemorySegment;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @run testng TestRestricted\n+ *\/\n+public class TestRestricted {\n+    @Test(expectedExceptions = InvocationTargetException.class)\n+    public void testReflection() throws Throwable {\n+        Method method = MemorySegment.class.getDeclaredMethod(\"ofNativeRestricted\");\n+        method.invoke(null);\n+    }\n+\n+    @Test(expectedExceptions = IllegalCallerException.class)\n+    public void testInvoke() throws Throwable {\n+        var mh = MethodHandles.lookup().findStatic(MemorySegment.class,\n+            \"ofNativeRestricted\", MethodType.methodType(MemorySegment.class));\n+        var seg = (MemorySegment)mh.invokeExact();\n+    }\n+\n+    @Test(expectedExceptions = IllegalCallerException.class)\n+    public void testDirectAccess() throws Throwable {\n+        MemorySegment.ofNativeRestricted();\n+    }\n+\n+    @Test(expectedExceptions = InvocationTargetException.class)\n+    public void testReflection2() throws Throwable {\n+        Method method = MemoryAddress.class.getDeclaredMethod(\"asSegmentRestricted\", long.class);\n+        method.invoke(MemoryAddress.NULL, 4000L);\n+    }\n+\n+    @Test(expectedExceptions = IllegalCallerException.class)\n+    public void testInvoke2() throws Throwable {\n+        var mh = MethodHandles.lookup().findVirtual(MemoryAddress.class, \"asSegmentRestricted\",\n+            MethodType.methodType(MemorySegment.class, long.class));\n+        var seg = (MemorySegment)mh.invokeExact(MemoryAddress.NULL, 4000L);\n+    }\n+\n+    @Test(expectedExceptions = IllegalCallerException.class)\n+    public void testDirectAccess2() throws Throwable {\n+        MemoryAddress.NULL.asSegmentRestricted(4000L);\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestSharedAccess\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestSharedAccess\n","filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n@@ -34,1 +34,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStructScope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestUpcallStubs\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestUpcallStubs\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStubs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestVarArgs\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestVarArgs\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test id=panama_enable_native_access\n+ * @build panama_module\/*\n+ * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMain\n+ * @summary with --enable-native-access access to specific module Panama unsafe API succeeds\n+ *\/\n+\n+\/**\n+ * @test id=panama_enable_native_access_reflection\n+ * @build panama_module\/*\n+ * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMainReflection\n+ * @summary with --enable-native-access access to specific module Panama unsafe API succeeds\n+ *\/\n+\n+\/**\n+ * @test id=panama_enable_native_access_invoke\n+ * @build panama_module\/*\n+ * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n+ * @summary with --enable-native-access access to specific module Panama unsafe API succeeds\n+ *\/\n+\n+\/**\n+ * @test id=panama_comma_separated_enable\n+ * @build panama_module\/*\n+ * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMain\n+ * @summary with --enable-native-access access to comma separated list of modules\n+ *\/\n+\n+\/**\n+ * @test id=panama_comma_separated_enable_reflection\n+ * @build panama_module\/*\n+ * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMainReflection\n+ * @summary with --enable-native-access access to comma separated list of modules\n+ *\/\n+\n+\/**\n+ * @test id=panama_comma_separated_enable_invoke\n+ * @build panama_module\/*\n+ * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n+ * @summary with --enable-native-access access to comma separated list of modules\n+ *\/\n+\n+\/**\n+ * @test id=panama_no_enable_native_access_fail\n+ * @build panama_module\/*\n+ * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMain\n+ * @summary without --enable-native-access access to Panama unsafe API fails\n+ *\/\n+\n+\/**\n+ * @test id=panama_no_enable_native_access_fail_reflection\n+ * @build panama_module\/*\n+ * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMainReflection\n+ * @summary without --enable-native-access access to Panama unsafe API fails\n+ *\/\n+\n+\/**\n+ * @test id=panama_no_enable_native_access_fail_invoke\n+ * @build panama_module\/*\n+ * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n+ * @summary without --enable-native-access access to Panama unsafe API fails\n+ *\/\n+\n+\/**\n+ * @test id=panama_no_all_module_path_blanket_native_access\n+ * @build panama_module\/*\n+ * @run main\/othervm\/fail --enable-native-access=ALL-MODULE-PATH panama_module\/org.openjdk.foreigntest.PanamaMain\n+ * @summary --enable-native-access does not work with ALL-MODULE-PATH\n+ *\/\n+\n+\/**\n+ * @test id=panama_no_unnamed_module_native_access\n+ * @build org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ * @run testng\/othervm\/fail org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ * @summary --enable-native-access does not work without ALL-UNNAMED\n+ *\/\n+\n+\/**\n+ * @test id=panama_all_unnamed_module_native_access\n+ * @build org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED org.openjdk.foreigntest.PanamaMainUnnamedModule\n+ * @summary --enable-native-access ALL-UNNAMED works\n+ *\/\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestDriver.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.foreigntest;\n+\n+import jdk.incubator.foreign.*;\n+import org.testng.annotations.Test;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Method;\n+\n+public class PanamaMainUnnamedModule {\n+   @Test\n+   public void testReflection() throws Throwable {\n+       Method method = CLinker.class.getDeclaredMethod(\"getInstance\");\n+       method.invoke(null);\n+   }\n+\n+   @Test\n+   public void testSetAccessible() throws Throwable {\n+       Method method = CLinker.class.getDeclaredMethod(\"getInstance\");\n+       method.setAccessible(true);\n+       method.invoke(null);\n+   }\n+\n+   @Test\n+   public void testInvoke() throws Throwable {\n+       var mh = MethodHandles.lookup().findStatic(CLinker.class, \"getInstance\",\n+           MethodType.methodType(CLinker.class));\n+       var linker = (CLinker)mh.invokeExact();\n+   }\n+\n+   @Test\n+   public void testDirectAccess() throws Throwable {\n+       CLinker.getInstance();\n+   }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module panama_module {\n+    requires jdk.incubator.foreign;\n+    exports org.openjdk.foreigntest;\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/module-info.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.foreigntest;\n+\n+import jdk.incubator.foreign.*;\n+\n+public class PanamaMain {\n+   public static void main(String[] args) {\n+       System.out.println(\"Trying to get CLinker\");\n+       CLinker.getInstance();\n+       System.out.println(\"Got CLinker\");\n+   }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMain.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.foreigntest;\n+\n+import java.lang.invoke.*;\n+import jdk.incubator.foreign.*;\n+\n+public class PanamaMainInvoke {\n+   public static void main(String[] args) throws Throwable {\n+       var mh = MethodHandles.lookup().findStatic(CLinker.class, \"getInstance\",\n+           MethodType.methodType(CLinker.class));\n+       var linker = (CLinker)mh.invokeExact();\n+   }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainInvoke.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.foreigntest;\n+\n+import jdk.incubator.foreign.*;\n+import java.lang.reflect.Method;\n+\n+public class PanamaMainReflection {\n+   public static void main(String[] args) throws Throwable {\n+       Method method = CLinker.class.getDeclaredMethod(\"getInstance\");\n+       method.invoke(null);\n+   }\n+}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainReflection.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -36,1 +36,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n@@ -45,1 +45,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit VaListTest\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED VaListTest\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *   -Dforeign.restricted=permit\n+ *   --enable-native-access=ALL-UNNAMED\n","filename":"test\/jdk\/java\/foreign\/virtual\/TestVirtualCalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/LargeEntriesTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -173,0 +173,2 @@\n+                    } else if (line.contains(\"WARNING: JNI access from module not specified in --enable-native-access:\")) {\n+                        continue;\n","filename":"test\/jdk\/tools\/jar\/modularJar\/Basic.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsAlloc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsDistance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"-Dforeign.restricted=permit\" })\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\", \"--enable-native-access=ALL-UNNAMED\" })\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/PointsFree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}