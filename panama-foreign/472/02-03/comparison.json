{"files":[{"patch":"@@ -1093,1 +1093,0 @@\n-    _method_NativeAccess,\n@@ -2132,4 +2131,0 @@\n-    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_NativeAccess_signature): {\n-      if (_location != _in_method)  break;  \/\/ only allow for methods\n-      return _method_NativeAccess;\n-    }\n@@ -2198,2 +2193,0 @@\n-  if (has_annotation(_method_NativeAccess))\n-    m->set_native_access(true);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2920,1 +2920,1 @@\n-\/\/ java_lang_reflect_AccessibleObject\n+\/\/ java_lang_AccessibleObject\n@@ -2948,3 +2948,0 @@\n-const int java_lang_reflect_Method::NATIVE_ACCESS = 0x1;\n-\n-int java_lang_reflect_Method::_flags_offset;\n@@ -2964,1 +2961,0 @@\n-  macro(_flags_offset,          k, vmSymbols::flags_name(),          int_signature,         false); \\\n@@ -2997,8 +2993,0 @@\n-int java_lang_reflect_Method::flags(oop reflect) {\n-  return reflect->int_field(_flags_offset);\n-}\n-\n-void java_lang_reflect_Method::set_flags(oop reflect, int value) {\n-  reflect->int_field_put(_flags_offset, value);\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -577,1 +577,0 @@\n-  static int _flags_offset;\n@@ -592,3 +591,0 @@\n-  \/\/ value should be in-sync with static field of java.lang.reflect.Method\n-  static const int NATIVE_ACCESS;\n-\n@@ -601,3 +597,0 @@\n-  static int flags(oop reflect);\n-  static void set_flags(oop reflect, int value);\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -130,1 +130,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -309,1 +309,0 @@\n-  template(jdk_internal_vm_annotation_NativeAccess_signature,    \"Ljdk\/internal\/vm\/annotation\/NativeAccess;\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -95,2 +95,1 @@\n-    _scoped                = 1 << 8,\n-    _native_access         = 1 << 9\n+    _scoped                = 1 << 8\n@@ -883,8 +882,0 @@\n-  bool is_native_access() const {\n-    return (_flags & _native_access) != 0;\n-  }\n-\n-  void set_native_access(bool x) {\n-    _flags = x ? (_flags | _native_access) : (_flags & ~_native_access);\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -827,4 +827,0 @@\n-  if (method->is_native_access()) {\n-    java_lang_reflect_Method::set_flags(mh(), java_lang_reflect_Method::NATIVE_ACCESS);\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-import jdk.internal.module.IllegalNativeAccessChecker;\n@@ -1996,1 +1995,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -489,1 +489,1 @@\n-        if (checkAccess) {\n+        if (checkAccess)\n@@ -491,1 +491,0 @@\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.misc.VM;\n-import jdk.internal.module.IllegalNativeAccessChecker;\n@@ -73,3 +70,0 @@\n-    private static final int NATIVE_ACCESS = 0x1;\n-    \/\/ Method internal flags needed here. For now, only NATIVE_ACCESS.\n-    private final int           flags;\n@@ -127,2 +121,1 @@\n-    Method(int flags,\n-           Class<?> declaringClass,\n+    Method(Class<?> declaringClass,\n@@ -139,1 +132,0 @@\n-        this.flags = flags;\n@@ -169,1 +161,1 @@\n-        Method res = new Method(flags, clazz, name, parameterTypes, returnType,\n+        Method res = new Method(clazz, name, parameterTypes, returnType,\n@@ -185,1 +177,1 @@\n-        Method res = new Method(flags, clazz, name, parameterTypes, returnType,\n+        Method res = new Method(clazz, name, parameterTypes, returnType,\n@@ -502,19 +494,0 @@\n-    private boolean isNativeAccess() {\n-        return (flags & NATIVE_ACCESS) != 0;\n-    }\n-\n-    private final void checkNativeAccess(Class<?> caller) {\n-        Module module = caller.getModule();\n-        if (VM.isBooted()) {\n-            JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n-            if (!jla.isEnableNativeAccess(module)) {\n-                String moduleName = module.isNamed() ?\n-                        module.getName() : \"<UNNAMED>\";\n-                if (module.isNamed() ||\n-                        !IllegalNativeAccessChecker.enableNativeAccessAllUnnamedModules()) {\n-                    throw new IllegalCallerException(\"Illegal native access from module: \" + moduleName);\n-                }\n-            }\n-        }\n-    }\n-\n@@ -591,4 +564,0 @@\n-        if (isNativeAccess()) {\n-            Class<?> caller = Reflection.getCallerClass();\n-            checkNativeAccess(caller);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":34,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -37,1 +38,1 @@\n-    @Test(expectedExceptions = IllegalCallerException.class)\n+    @Test(expectedExceptions = InvocationTargetException.class)\n@@ -55,1 +56,1 @@\n-    @Test(expectedExceptions = IllegalCallerException.class)\n+    @Test(expectedExceptions = InvocationTargetException.class)\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}