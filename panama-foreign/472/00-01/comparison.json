{"files":[{"patch":"@@ -208,2 +208,0 @@\n-JVM_AddModuleEnableNativeAccess\n-JVM_EnableNativeAccessAllUnnamed\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1619,1 +1619,0 @@\n-      jb_module->set_is_native_access(true);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-#include \"classfile\/modules.hpp\"\n-#include \"classfile\/symbolTable.hpp\"\n-#include \"classfile\/vmSymbols.hpp\"\n@@ -44,1 +41,0 @@\n-#include \"runtime\/jniHandles.inline.hpp\"\n@@ -209,4 +205,0 @@\n-bool ModuleEntry::is_native_access() const {\n-  return _is_native_access || (name() == NULL && Modules::is_all_unnamed_native_access());\n-}\n-\n@@ -219,6 +211,0 @@\n-\/\/ Set whether the module is native, i.e. native operations are allowed by clients in this module\n-void ModuleEntry::set_is_native_access(bool is_native_access) {\n-  assert_lock_strong(Module_lock);\n-  _is_native_access = is_native_access;\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-  bool _is_native_access;              \/\/ whether the module is native via --enable-native-access\n@@ -84,2 +83,0 @@\n-  void enable_native_access_all_unnamed_impl(TRAPS);\n-\n@@ -99,1 +96,0 @@\n-    _is_native_access = false;\n@@ -134,1 +130,0 @@\n-  bool             is_native_access() const;\n@@ -137,1 +132,0 @@\n-  void             set_is_native_access(bool is_native_access);\n@@ -190,2 +184,0 @@\n-  void check_native_module(Symbol* exception_symbol, TRAPS);\n-\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -783,29 +783,0 @@\n-\n-\/\/ Mark module as native\n-void Modules::add_module_enable_native_access(Handle module, TRAPS) {\n-  if (module == NULL) {\n-    THROW_MSG(vmSymbols::java_lang_NullPointerException(),\n-              \"module is null\");\n-  }\n-  ModuleEntry* module_entry = get_module_entry(module, CHECK);\n-  if (module_entry == NULL) {\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(),\n-              \"module is invalid\");\n-  }\n-\n-  module_entry->set_is_native_access(true);\n-\n-  if (log_is_enabled(Debug, module)) {\n-    ResourceMark rm(THREAD);\n-    Symbol* name = module_entry->name();\n-    log_debug(module)(\"add_module_enable_native_access(): module\"\n-                      \" %s is marked as a native module\",\n-                       name == NULL ? UNNAMED_MODULE : name->as_C_string());\n-  }\n-}\n-\n-volatile bool Modules::_native_access_all_unnamed = false;\n-\n-void Modules::enable_native_access_all_unnamed() {\n-  _native_access_all_unnamed = true;\n-}\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -37,3 +37,0 @@\n-private:\n-  static volatile bool _native_access_all_unnamed;\n-\n@@ -120,7 +117,0 @@\n-  \/\/ Mark the module as native\n-  static void add_module_enable_native_access(Handle module, TRAPS);\n-  static void enable_native_access_all_unnamed();\n-  static bool is_all_unnamed_native_access() {\n-      return _native_access_all_unnamed;\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -483,12 +483,0 @@\n-\/*\n- * Mark the module as native, so that access to restricted native operations is allowed.\n- *\/\n-JNIEXPORT void JNICALL\n-JVM_AddModuleEnableNativeAccess(JNIEnv *env, jobject from_module);\n-\n-\/*\n- * Enable native access for all unnamed modules\n- *\/\n-JNIEXPORT void JNICALL\n-JVM_EnableNativeAccessAllUnnamed(JNIEnv *env);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/moduleEntry.hpp\"\n@@ -668,16 +667,0 @@\n-void LinkResolver::check_native_access_method(const LinkInfo& link_info,\n-                                          const methodHandle& resolved_method, TRAPS) {\n-  if (link_info.current_klass() != NULL) {\n-    if (resolved_method->is_native_access()) {\n-      ModuleEntry* module = link_info.current_klass()->module();\n-      if (!module->is_native_access()) {\n-        ResourceMark rm(THREAD);\n-        stringStream ss;\n-        ss.print(\"Illegal native access from module: %s\",\n-            module->name() == NULL ? UNNAMED_MODULE : module->name()->as_C_string());\n-        THROW_MSG(vmSymbols::java_lang_IllegalAccessException(), ss.as_string());\n-      }\n-    }\n-  }\n-}\n-\n@@ -827,1 +810,0 @@\n-  check_native_access_method(link_info, resolved_method, CHECK_NULL);\n@@ -924,1 +906,0 @@\n-  check_native_access_method(link_info, resolved_method, CHECK_NULL);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/packageEntry.hpp\"\n@@ -226,2 +225,0 @@\n-  static void check_native_access_method(const LinkInfo& link_info,\n-                                      const methodHandle& resolved_method, TRAPS);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1102,9 +1102,0 @@\n-JVM_ENTRY(void, JVM_AddModuleEnableNativeAccess(JNIEnv *env, jobject from_module))\n-  Handle h_module (THREAD, JNIHandles::resolve(from_module));\n-  Modules::add_module_enable_native_access(h_module, CHECK);\n-JVM_END\n-\n-JVM_ENTRY(void, JVM_EnableNativeAccessAllUnnamed(JNIEnv *env))\n-  Modules::enable_native_access_all_unnamed();\n-JVM_END\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1997,1 +1997,0 @@\n-        Module.enableNativeAccessAllUnnamed();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -115,2 +115,1 @@\n-    private boolean enableNativeAccess = false;\n-\n+    private volatile boolean enableNativeAccess = false;\n@@ -147,1 +146,0 @@\n-\n@@ -160,1 +158,0 @@\n-\n@@ -257,1 +254,11 @@\n-        return enableNativeAccess;\n+        if (enableNativeAccess) {\n+            return true;\n+        }\n+\n+        \/\/ lazy init for unnamed modules\n+        if (!isNamed() && IllegalNativeAccessChecker.enableNativeAccessAllUnnamedModules()) {\n+            enableNativeAccess = true;\n+            return true;\n+        }\n+\n+        return false;\n@@ -427,1 +434,0 @@\n-        addEnableNativeAccess0(this);\n@@ -431,6 +437,0 @@\n-    static void enableNativeAccessAllUnnamed() {\n-        if (IllegalNativeAccessChecker.enableNativeAccessAllUnnamedModules()) {\n-            enableNativeAccessAllUnnamed0();\n-        }\n-    }\n-\n@@ -1747,5 +1747,0 @@\n-\n-    \/\/ JVM_AddPermitsNative\n-    private static native void addEnableNativeAccess0(Module from);\n-\n-    private static native void enableNativeAccessAllUnnamed0();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2320,1 +2320,1 @@\n-            public boolean isNative(Module m) {\n+            public boolean isEnableNativeAccess(Module m) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-    private final void checkNativeAccess(Class<?> caller) throws IllegalAccessException {\n+    private final void checkNativeAccess(Class<?> caller) {\n@@ -510,1 +510,1 @@\n-            if (!jla.isNative(module)) {\n+            if (!jla.isEnableNativeAccess(module)) {\n@@ -515,1 +515,1 @@\n-                    throw new IllegalAccessException(\"Illegal native access from module: \" + moduleName);\n+                    throw new IllegalCallerException(\"Illegal native access from module: \" + moduleName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -379,1 +379,1 @@\n-    boolean isNative(Module m);\n+    boolean isEnableNativeAccess(Module m);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,0 +109,8 @@\n+    public static void ensureNativeAccess(Class<?> currentClass) {\n+        Module module = currentClass.getModule();\n+        if (!SharedSecrets.getJavaLangAccess().isEnableNativeAccess(module)) {\n+            String moduleName = module.isNamed()?  module.getName() : \"UNNAMED\";\n+            throw new IllegalCallerException(\"Illegal native access from module: \" + moduleName);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/Reflection.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,11 +68,0 @@\n-\n-JNIEXPORT void JNICALL\n-Java_java_lang_Module_addEnableNativeAccess0(JNIEnv *env, jclass cls, jobject fromModule)\n-{\n-    JVM_AddModuleEnableNativeAccess(env, fromModule);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_java_lang_Module_enableNativeAccessAllUnnamed0(JNIEnv *env, jclass cls) {\n-    JVM_EnableNativeAccessAllUnnamed(env);\n-}\n","filename":"src\/java.base\/share\/native\/libjava\/Module.c","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -124,0 +126,1 @@\n+    @CallerSensitive\n@@ -126,0 +129,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -405,0 +409,1 @@\n+    @CallerSensitive\n@@ -407,0 +412,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -427,0 +433,1 @@\n+    @CallerSensitive\n@@ -429,0 +436,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -501,0 +509,1 @@\n+    @CallerSensitive\n@@ -503,0 +512,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -520,0 +530,1 @@\n+    @CallerSensitive\n@@ -522,0 +533,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -687,0 +699,1 @@\n+        @CallerSensitive\n@@ -689,0 +702,1 @@\n+            Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -704,0 +718,1 @@\n+        @CallerSensitive\n@@ -706,0 +721,1 @@\n+            Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -105,0 +107,1 @@\n+    @CallerSensitive\n@@ -107,0 +110,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -121,0 +125,1 @@\n+    @CallerSensitive\n@@ -123,0 +128,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n@@ -143,0 +149,1 @@\n+    @CallerSensitive\n@@ -145,0 +152,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/LibraryLookup.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -116,0 +118,1 @@\n+    @CallerSensitive\n@@ -118,0 +121,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -780,0 +782,1 @@\n+    @CallerSensitive\n@@ -782,0 +785,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n+\n@@ -97,6 +100,1 @@\n-    @NativeAccess\n-    public MemorySegment asSegmentRestricted(long bytesSize) {\n-        return MemoryAddress.super.asSegmentRestricted(bytesSize);\n-    }\n-\n-    @Override\n+    @CallerSensitive\n@@ -105,0 +103,1 @@\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    @Test(expectedExceptions = IllegalAccessException.class)\n+    @Test(expectedExceptions = IllegalCallerException.class)\n@@ -43,3 +43,5 @@\n-    @Test(expectedExceptions = IllegalAccessException.class)\n-    public void testLookup() throws Throwable {\n-        MethodHandles.lookup().findStatic(MemorySegment.class, \"ofNativeRestricted\", MethodType.methodType(MemorySegment.class));\n+    @Test(expectedExceptions = IllegalCallerException.class)\n+    public void testInvoke() throws Throwable {\n+        var mh = MethodHandles.lookup().findStatic(MemorySegment.class,\n+            \"ofNativeRestricted\", MethodType.methodType(MemorySegment.class));\n+        var seg = (MemorySegment)mh.invokeExact();\n@@ -48,1 +50,1 @@\n-    @Test(expectedExceptions = IllegalAccessException.class)\n+    @Test(expectedExceptions = IllegalCallerException.class)\n@@ -53,1 +55,1 @@\n-    @Test(expectedExceptions = IllegalAccessException.class)\n+    @Test(expectedExceptions = IllegalCallerException.class)\n@@ -59,3 +61,3 @@\n-    @Test(expectedExceptions = IllegalAccessException.class)\n-    public void testLookup2() throws Throwable {\n-        MethodHandles.lookup().findVirtual(MemoryAddress.class, \"asSegmentRestricted\",\n+    @Test(expectedExceptions = IllegalCallerException.class)\n+    public void testInvoke2() throws Throwable {\n+        var mh = MethodHandles.lookup().findVirtual(MemoryAddress.class, \"asSegmentRestricted\",\n@@ -63,0 +65,1 @@\n+        var seg = (MemorySegment)mh.invokeExact(MemoryAddress.NULL, 4000L);\n@@ -65,1 +68,1 @@\n-    @Test(expectedExceptions = IllegalAccessException.class)\n+    @Test(expectedExceptions = IllegalCallerException.class)\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @test id=panama_enable_native_access_lookup\n+ * @test id=panama_enable_native_access_invoke\n@@ -42,1 +42,1 @@\n- * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMainLookup\n+ * @run main\/othervm --enable-native-access=panama_module panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n@@ -61,1 +61,1 @@\n- * @test id=panama_comma_separated_enable_lookup\n+ * @test id=panama_comma_separated_enable_invoke\n@@ -63,1 +63,1 @@\n- * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMainLookup\n+ * @run main\/othervm --enable-native-access=com.acme,panama_module panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n@@ -82,1 +82,1 @@\n- * @test id=panama_no_enable_native_access_fail_lookup\n+ * @test id=panama_no_enable_native_access_fail_invoke\n@@ -84,1 +84,1 @@\n- * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMainLookup\n+ * @run main\/othervm\/fail panama_module\/org.openjdk.foreigntest.PanamaMainInvoke\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestDriver.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,2 +47,4 @@\n-   public void testLookup() throws Throwable {\n-       MethodHandles.lookup().findStatic(CLinker.class, \"getInstance\", MethodType.methodType(CLinker.class));\n+   public void testInvoke() throws Throwable {\n+       var mh = MethodHandles.lookup().findStatic(CLinker.class, \"getInstance\",\n+           MethodType.methodType(CLinker.class));\n+       var linker = (CLinker)mh.invokeExact();\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainInvoke.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.foreigntest;\n-\n-import jdk.incubator.foreign.*;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-\n-public class PanamaMainLookup {\n-   public static void main(String[] args) throws Throwable {\n-       MethodHandles.lookup().findStatic(CLinker.class, \"getInstance\", MethodType.methodType(CLinker.class));\n-   }\n-}\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainLookup.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"}]}