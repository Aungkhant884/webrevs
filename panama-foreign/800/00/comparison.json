{"files":[{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,6 @@\n+        FunctionDescriptor fdReturnSomethingElse = FunctionDescriptor.of(C_LONG_LONG, C_INT, C_INT);\n+        FunctionDescriptor fdOtherArguments = FunctionDescriptor.of(C_INT, C_INT);\n+        assertFalse(fd.equals(fdReturnSomethingElse));\n+        assertFalse(fd.equals(fdOtherArguments));\n+        assertFalse(fd.equals(null));\n+        assertFalse(fd.equals(\"A\"));\n@@ -124,0 +130,13 @@\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testIllegalInsertArgNegIndex() {\n+        FunctionDescriptor fd = FunctionDescriptor.of(C_INT);\n+        fd.insertArgumentLayouts(-1, C_INT);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testIllegalInsertArgOutOfBounds() {\n+        FunctionDescriptor fd = FunctionDescriptor.of(C_INT);\n+        fd.insertArgumentLayouts(2, C_INT);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.lang.reflect.Method;\n@@ -64,1 +65,1 @@\n-    public void testSharedSingleThread(SessionSupplier sessionSupplier) {\n+    public void testSharedSingleThread(ArenaSupplier arenaSupplier) {\n@@ -66,1 +67,1 @@\n-        Arena session = sessionSupplier.get();\n+        Arena session = arenaSupplier.get();\n@@ -73,2 +74,2 @@\n-        if (!SessionSupplier.isImplicit(session)) {\n-            SessionSupplier.close(session);\n+        if (!TestMemorySession.ArenaSupplier.isImplicit(session)) {\n+            TestMemorySession.ArenaSupplier.close(session);\n@@ -86,1 +87,1 @@\n-    public void testSharedMultiThread(SessionSupplier sessionSupplier) {\n+    public void testSharedMultiThread(ArenaSupplier arenaSupplier) {\n@@ -89,1 +90,1 @@\n-        Arena session = sessionSupplier.get();\n+        Arena session = arenaSupplier.get();\n@@ -110,1 +111,1 @@\n-        if (!SessionSupplier.isImplicit(session)) {\n+        if (!TestMemorySession.ArenaSupplier.isImplicit(session)) {\n@@ -113,1 +114,1 @@\n-                    SessionSupplier.close(session);\n+                    TestMemorySession.ArenaSupplier.close(session);\n@@ -129,1 +130,1 @@\n-        if (!SessionSupplier.isImplicit(session)) {\n+        if (!TestMemorySession.ArenaSupplier.isImplicit(session)) {\n@@ -226,2 +227,2 @@\n-    public void testSessionAcquires(SessionSupplier sessionSupplier) {\n-        Arena session = sessionSupplier.get();\n+    public void testSessionAcquires(ArenaSupplier ArenaSupplier) {\n+        Arena session = ArenaSupplier.get();\n@@ -229,2 +230,2 @@\n-        if (!SessionSupplier.isImplicit(session))\n-            SessionSupplier.close(session);\n+        if (!TestMemorySession.ArenaSupplier.isImplicit(session))\n+            TestMemorySession.ArenaSupplier.close(session);\n@@ -240,2 +241,2 @@\n-            if (!SessionSupplier.isImplicit(session)) {\n-                assertThrows(IllegalStateException.class, () -> SessionSupplier.close(session));\n+            if (!ArenaSupplier.isImplicit(session)) {\n+                assertThrows(IllegalStateException.class, () -> ArenaSupplier.close(session));\n@@ -303,0 +304,19 @@\n+    @Test(dataProvider = \"nonCloseableSessions\")\n+    public void testNonCloseableSessions(ArenaSupplier arenaSupplier) {\n+        var arena = arenaSupplier.get();\n+        var sessionImpl = ((MemorySessionImpl) arena.scope());\n+        assertFalse(sessionImpl.isCloseable());\n+        assertThrows(UnsupportedOperationException.class, () ->\n+                sessionImpl.close());\n+    }\n+\n+    @Test(dataProvider = \"allSessionsAndGlobal\")\n+    public void testIsCloseableBy(ArenaSupplier arenaSupplier) {\n+        var arena = arenaSupplier.get();\n+        var sessionImpl = ((MemorySessionImpl) arena.scope());\n+        assertEquals(sessionImpl.isCloseableBy(Thread.currentThread()), sessionImpl.isCloseable());\n+        Thread otherThread = new Thread();\n+        boolean isCloseableByOther = sessionImpl.isCloseable() && !\"ConfinedSession\".equals(sessionImpl.getClass().getSimpleName());\n+        assertEquals(sessionImpl.isCloseableBy(otherThread), isCloseableByOther);\n+    }\n+\n@@ -338,1 +358,1 @@\n-    interface SessionSupplier extends Supplier<Arena> {\n+    interface ArenaSupplier extends Supplier<Arena> {\n@@ -340,2 +360,2 @@\n-        static void close(Arena session) {\n-            MemorySessionImpl.toMemorySession(session).close();\n+        static void close(Arena arena) {\n+            MemorySessionImpl.toMemorySession(arena).close();\n@@ -344,2 +364,2 @@\n-        static boolean isImplicit(Arena session) {\n-            return !MemorySessionImpl.toMemorySession(session).isCloseable();\n+        static boolean isImplicit(Arena arena) {\n+            return !MemorySessionImpl.toMemorySession(arena).isCloseable();\n@@ -348,1 +368,1 @@\n-        static SessionSupplier ofImplicit() {\n+        static ArenaSupplier ofAuto() {\n@@ -352,2 +372,6 @@\n-        static SessionSupplier ofArena(Supplier<Arena> arenaSupplier) {\n-            return () -> arenaSupplier.get();\n+        static ArenaSupplier ofGlobal() {\n+            return Arena::global;\n+        }\n+\n+        static ArenaSupplier ofArena(Supplier<Arena> arenaSupplier) {\n+            return arenaSupplier::get;\n@@ -360,2 +384,2 @@\n-                { SessionSupplier.ofArena(Arena::ofShared) },\n-                { SessionSupplier.ofImplicit() },\n+                { ArenaSupplier.ofArena(Arena::ofShared) },\n+                { ArenaSupplier.ofAuto() },\n@@ -368,3 +392,3 @@\n-                { SessionSupplier.ofArena(Arena::ofConfined) },\n-                { SessionSupplier.ofArena(Arena::ofShared) },\n-                { SessionSupplier.ofImplicit() },\n+                { ArenaSupplier.ofArena(Arena::ofConfined) },\n+                { ArenaSupplier.ofArena(Arena::ofShared) },\n+                { ArenaSupplier.ofAuto() },\n@@ -373,0 +397,19 @@\n+\n+    @DataProvider(name = \"nonCloseableSessions\")\n+    static Object[][] nonCloseableSessions() {\n+        return new Object[][] {\n+                { ArenaSupplier.ofGlobal() },\n+                { ArenaSupplier.ofAuto() }\n+        };\n+    }\n+\n+    @DataProvider(name = \"allSessionsAndGlobal\")\n+    static Object[][] allSessionsAndGlobal() {\n+        return new Object[][] {\n+                { ArenaSupplier.ofArena(Arena::ofConfined) },\n+                { ArenaSupplier.ofArena(Arena::ofShared) },\n+                { ArenaSupplier.ofAuto() },\n+                { ArenaSupplier.ofGlobal() },\n+        };\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestMemorySession.java","additions":72,"deletions":29,"binary":false,"changes":101,"status":"modified"}]}