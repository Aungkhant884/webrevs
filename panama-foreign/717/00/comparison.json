{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.invoke.MethodType;\n@@ -97,0 +98,16 @@\n+    \/**\n+     * Returns the method type consisting of the carrier types of the layouts in this function descriptor.\n+     * <p>\n+     * The carrier type of a layout is determined as follows:\n+     * <ul>\n+     * <li>If the layout is a {@link ValueLayout} the carrier type is determined through {@link ValueLayout#carrier()}.<\/li>\n+     * <li>If the layout is a {@link GroupLayout}, or {@link SequenceLayout} the carrier type is {@link MemorySegment}.<\/li>\n+     * <li>If the layout is a {@link PaddingLayout} an {@link IllegalArgumentException} is thrown.<\/li>\n+     * <\/ul>\n+     *\n+     * @return the method type consisting of the carrier types of the layouts in this function descriptor\n+     * @throws IllegalArgumentException if one or more layouts in the function descriptor are not supported\n+     * (e.g. if they are sequence layouts or padding layouts).\n+     *\/\n+    MethodType carrierMethodType();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n- * {@linkplain #methodType(FunctionDescriptor) derived} from the argument and return layouts in the function descriptor.\n+ * {@linkplain FunctionDescriptor#carrierMethodType() derived} from the argument and return layouts in the function descriptor.\n@@ -95,1 +95,1 @@\n- * The type of the provided method handle has to {@linkplain #methodType(FunctionDescriptor) match} the Java\n+ * The type of the provided method handle has to {@linkplain FunctionDescriptor#carrierMethodType() match} the Java\n@@ -286,10 +286,0 @@\n-\n-    \/**\n-     * {@return the linker method handle {@linkplain MethodType type} associated with the given function descriptor}\n-     * @param functionDescriptor a function descriptor.\n-     * @throws IllegalArgumentException if one or more layouts in the function descriptor are not supported\n-     * (e.g. if they are sequence layouts or padding layouts).\n-     *\/\n-    static MethodType methodType(FunctionDescriptor functionDescriptor) {\n-        return SharedUtils.inferMethodType(functionDescriptor);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n- * {@linkplain java.lang.foreign.Linker#methodType(java.lang.foreign.FunctionDescriptor) derive} a method type\n+ * {@linkplain java.lang.foreign.FunctionDescriptor#carrierMethodType() derive} a method type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.invoke.MethodType;\n@@ -139,0 +140,20 @@\n+    private static Class<?> carrierTypeFor(MemoryLayout layout) {\n+        if (layout instanceof ValueLayout valueLayout) {\n+            return valueLayout.carrier();\n+        } else if (layout instanceof GroupLayout || layout instanceof SequenceLayout) {\n+            return MemorySegment.class;\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + layout);\n+        }\n+    }\n+\n+    @Override\n+    public MethodType carrierMethodType() {\n+        Class<?> returnValue = resLayout != null ? carrierTypeFor(resLayout) : void.class;\n+        Class<?>[] argCarriers = new Class<?>[argLayouts.size()];\n+        for (int i = 0; i < argCarriers.length; i++) {\n+            argCarriers[i] = carrierTypeFor(argLayouts.get(i));\n+        }\n+        return MethodType.methodType(returnValue, argCarriers);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/FunctionDescriptorImpl.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            MethodType type = SharedUtils.inferMethodType(fd);\n+            MethodType type = fd.carrierMethodType();\n@@ -66,1 +66,1 @@\n-        MethodType type = SharedUtils.inferMethodType(function);\n+        MethodType type = function.carrierMethodType();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -512,19 +512,0 @@\n-\n-    public static MethodType inferMethodType(FunctionDescriptor descriptor) {\n-        MethodType type = MethodType.methodType(descriptor.returnLayout().isPresent() ?\n-                carrierFor(descriptor.returnLayout().get()) : void.class);\n-        for (MemoryLayout argLayout : descriptor.argumentLayouts()) {\n-            type = type.appendParameterTypes(carrierFor(argLayout));\n-        }\n-        return type;\n-    }\n-\n-    static Class<?> carrierFor(MemoryLayout layout) {\n-        if (layout instanceof ValueLayout valueLayout) {\n-            return valueLayout.carrier();\n-        } else if (layout instanceof GroupLayout) {\n-            return MemorySegment.class;\n-        } else {\n-            throw new IllegalArgumentException(\"Unsupported layout: \" + layout);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -108,2 +108,0 @@\n-        } else if (type instanceof SequenceLayout) {\n-            return TypeClass.INTEGER;\n@@ -111,1 +109,1 @@\n-            throw new IllegalArgumentException(\"Unhandled type \" + type);\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/TypeClass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-                throw new IllegalArgumentException(\"Unhandled type \" + type);\n+                throw new IllegalArgumentException(\"Unsupported layout: \" + type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            throw new IllegalArgumentException(\"Unhandled type \" + type);\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-                        Linker.methodType(qsortComparFunction));\n+                        qsortComparFunction.carrierMethodType());\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-                FunctionDescriptor.of(MemoryLayout.paddingLayout(64)),\n-                \"Unsupported layout: x64\"\n+                    FunctionDescriptor.of(MemoryLayout.paddingLayout(64)),\n+                    \"Unsupported layout: x64\"\n@@ -65,2 +65,2 @@\n-                FunctionDescriptor.ofVoid(MemoryLayout.paddingLayout(64)),\n-                \"Unsupported layout: x64\"\n+                    FunctionDescriptor.ofVoid(MemoryLayout.paddingLayout(64)),\n+                    \"Unsupported layout: x64\"\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}