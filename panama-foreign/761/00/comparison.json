{"files":[{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.foreign.ValueLayout.*;\n+import static java.nio.ByteOrder.BIG_ENDIAN;\n+import static java.nio.ByteOrder.LITTLE_ENDIAN;\n+\n+\/**\n+ * This benchmark creates an array of longs with random contents. The array\n+ * is then copied into a byte array (using little endian) using different\n+ * methods.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"--enable-native-access=ALL-UNNAMED\", \"--enable-preview\"})\n+public class MemorySegmentVsBits {\n+\n+    Arena arena = Arena.openConfined();\n+\n+    @Param({\"16\", \"64\", \"256\"})\n+    public int size;\n+    private long[] longs;\n+    private byte[] bytes;\n+    private MemorySegment segment;\n+    private MemorySegment nativeSegment;\n+\n+    private static final ValueLayout.OfLong OF_LONG = (JAVA_LONG.order() == BIG_ENDIAN)\n+            ? JAVA_LONG.withOrder(LITTLE_ENDIAN)\n+            : JAVA_LONG;\n+\n+    @Setup\n+    public void setup() {\n+        longs = ThreadLocalRandom.current().longs(size).toArray();\n+        bytes = new byte[size * Long.BYTES];\n+        segment = MemorySegment.ofArray(bytes);\n+        nativeSegment = arena.allocate(size * Long.BYTES);\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        arena.close();\n+    }\n+\n+    @Benchmark\n+    public void bitsEquivalent() {\n+        for (int i = 0; i < size; i++) {\n+            putLong(bytes, i * Long.BYTES, longs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void panamaHeap() {\n+        \/\/         for (int i = 0, o = 0; i < size; i++, o += 8) {\n+        for (int i = 0; i < size; i++) {\n+            segment.set(JAVA_LONG_UNALIGNED, i * Long.BYTES, longs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void panamaNative() {\n+        for (int i = 0; i < size; i++) {\n+            nativeSegment.set(OF_LONG, i * Long.BYTES, longs[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void panamaNativeUnaligned() {\n+        for (int i = 0; i < size; i++) {\n+            nativeSegment.set(JAVA_LONG_UNALIGNED, i * Long.BYTES, longs[i]);\n+        }\n+    }\n+\n+    \/\/ java.nio.Bits is package private\n+    static void putLong(byte[] b, int off, long val) {\n+        b[off + 7] = (byte) (val);\n+        b[off + 6] = (byte) (val >>> 8);\n+        b[off + 5] = (byte) (val >>> 16);\n+        b[off + 4] = (byte) (val >>> 24);\n+        b[off + 3] = (byte) (val >>> 32);\n+        b[off + 2] = (byte) (val >>> 40);\n+        b[off + 1] = (byte) (val >>> 48);\n+        b[off] = (byte) (val >>> 56);\n+    }\n+\n+    static long getLong(byte[] b, int off) {\n+        return ((b[off + 7] & 0xFFL)) +\n+                ((b[off + 6] & 0xFFL) << 8) +\n+                ((b[off + 5] & 0xFFL) << 16) +\n+                ((b[off + 4] & 0xFFL) << 24) +\n+                ((b[off + 3] & 0xFFL) << 32) +\n+                ((b[off + 2] & 0xFFL) << 40) +\n+                ((b[off + 1] & 0xFFL) << 48) +\n+                (((long) b[off]) << 56);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentVsBits.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}