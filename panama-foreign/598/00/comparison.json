{"files":[{"patch":"@@ -13,0 +13,1 @@\n+--include-typedef CXString\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/clang.symbols","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-        });\n+        }, ResourceScope.newImplicitScope());\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/Cursor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.clang.libclang.CXString;\n@@ -95,1 +96,1 @@\n-            MemorySegment.allocateNative(256, 8, ResourceScope.newImplicitScope()));\n+            MemorySegment.allocateNative(CXString.sizeof(), 8, ResourceScope.newImplicitScope()));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/LibClang.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n@@ -31,0 +34,1 @@\n+import static jdk.incubator.foreign.ValueLayout.*;\n@@ -34,3 +38,0 @@\n-    static NativeSymbol allocate(CXCursorVisitor fi) {\n-        return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$13.CXCursorVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\");\n-    }\n@@ -41,2 +42,1 @@\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"CXCursorVisitor::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);\n-        return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n+        NativeSymbol symbol = NativeSymbol.ofAddress(\"CXCursorVisitor::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXCursorVisitor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/\/ Generated by jextract\n+\n+package jdk.internal.clang.libclang;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import jdk.incubator.foreign.*;\n+import static jdk.incubator.foreign.ValueLayout.*;\n+public class CXString {\n+\n+    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+        ADDRESS.withName(\"data\"),\n+        JAVA_INT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    );\n+    public static MemoryLayout $LAYOUT() {\n+        return CXString.$struct$LAYOUT;\n+    }\n+    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"data\"));\n+    public static VarHandle data$VH() {\n+        return CXString.data$VH;\n+    }\n+    public static MemoryAddress data$get(MemorySegment seg) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg);\n+    }\n+    public static void data$set( MemorySegment seg, MemoryAddress x) {\n+        CXString.data$VH.set(seg, x);\n+    }\n+    public static MemoryAddress data$get(MemorySegment seg, long index) {\n+        return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg.asSlice(index*sizeof()));\n+    }\n+    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {\n+        CXString.data$VH.set(seg.asSlice(index*sizeof()), x);\n+    }\n+    static final VarHandle private_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"private_flags\"));\n+    public static VarHandle private_flags$VH() {\n+        return CXString.private_flags$VH;\n+    }\n+    public static int private_flags$get(MemorySegment seg) {\n+        return (int)CXString.private_flags$VH.get(seg);\n+    }\n+    public static void private_flags$set( MemorySegment seg, int x) {\n+        CXString.private_flags$VH.set(seg, x);\n+    }\n+    public static int private_flags$get(MemorySegment seg, long index) {\n+        return (int)CXString.private_flags$VH.get(seg.asSlice(index*sizeof()));\n+    }\n+    public static void private_flags$set(MemorySegment seg, long index, int x) {\n+        CXString.private_flags$VH.set(seg.asSlice(index*sizeof()), x);\n+    }\n+    public static long sizeof() { return $LAYOUT().byteSize(); }\n+    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n+    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n+        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n+    }\n+    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n+    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n+    }\n+    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+}\n+\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXString.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -68,0 +68,4 @@\n+    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n+    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXToken.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,0 +69,4 @@\n+    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n+    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXType.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -98,0 +98,4 @@\n+    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n+    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n+        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/CXUnsavedFile.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,0 +148,3 @@\n+    public static MemorySegment clang_getFileName ( ResourceScope scope,  Addressable SFile) {\n+        return clang_getFileName(SegmentAllocator.nativeAllocator(scope), SFile);\n+    }\n@@ -159,0 +162,3 @@\n+    public static MemorySegment clang_getNullLocation ( ResourceScope scope) {\n+        return clang_getNullLocation(SegmentAllocator.nativeAllocator(scope));\n+    }\n@@ -181,0 +187,3 @@\n+    public static MemorySegment clang_getLocation ( ResourceScope scope,  Addressable tu,  Addressable file,  int line,  int column) {\n+        return clang_getLocation(SegmentAllocator.nativeAllocator(scope), tu, file, line, column);\n+    }\n@@ -192,0 +201,3 @@\n+    public static MemorySegment clang_getLocationForOffset ( ResourceScope scope,  Addressable tu,  Addressable file,  int offset) {\n+        return clang_getLocationForOffset(SegmentAllocator.nativeAllocator(scope), tu, file, offset);\n+    }\n@@ -269,0 +281,3 @@\n+    public static MemorySegment clang_getRangeStart ( ResourceScope scope,  MemorySegment range) {\n+        return clang_getRangeStart(SegmentAllocator.nativeAllocator(scope), range);\n+    }\n@@ -280,0 +295,3 @@\n+    public static MemorySegment clang_getRangeEnd ( ResourceScope scope,  MemorySegment range) {\n+        return clang_getRangeEnd(SegmentAllocator.nativeAllocator(scope), range);\n+    }\n@@ -368,0 +386,3 @@\n+    public static MemorySegment clang_formatDiagnostic ( ResourceScope scope,  Addressable Diagnostic,  int Options) {\n+        return clang_formatDiagnostic(SegmentAllocator.nativeAllocator(scope), Diagnostic, Options);\n+    }\n@@ -401,0 +422,3 @@\n+    public static MemorySegment clang_getDiagnosticLocation ( ResourceScope scope,  Addressable x1) {\n+        return clang_getDiagnosticLocation(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -412,0 +436,3 @@\n+    public static MemorySegment clang_getDiagnosticSpelling ( ResourceScope scope,  Addressable x1) {\n+        return clang_getDiagnosticSpelling(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -1335,0 +1362,3 @@\n+    public static MemorySegment clang_getNullCursor ( ResourceScope scope) {\n+        return clang_getNullCursor(SegmentAllocator.nativeAllocator(scope));\n+    }\n@@ -1346,0 +1376,3 @@\n+    public static MemorySegment clang_getTranslationUnitCursor ( ResourceScope scope,  Addressable x1) {\n+        return clang_getTranslationUnitCursor(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -1468,0 +1501,3 @@\n+    public static MemorySegment clang_getCursorLocation ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorLocation(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -1479,0 +1515,3 @@\n+    public static MemorySegment clang_getCursorExtent ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorExtent(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -1904,0 +1943,3 @@\n+    public static MemorySegment clang_getCursorType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getCursorType(SegmentAllocator.nativeAllocator(scope), C);\n+    }\n@@ -1915,0 +1957,3 @@\n+    public static MemorySegment clang_getTypeSpelling ( ResourceScope scope,  MemorySegment CT) {\n+        return clang_getTypeSpelling(SegmentAllocator.nativeAllocator(scope), CT);\n+    }\n@@ -1926,0 +1971,3 @@\n+    public static MemorySegment clang_getTypedefDeclUnderlyingType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getTypedefDeclUnderlyingType(SegmentAllocator.nativeAllocator(scope), C);\n+    }\n@@ -1937,0 +1985,3 @@\n+    public static MemorySegment clang_getEnumDeclIntegerType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getEnumDeclIntegerType(SegmentAllocator.nativeAllocator(scope), C);\n+    }\n@@ -1992,0 +2043,3 @@\n+    public static MemorySegment clang_Cursor_getArgument ( ResourceScope scope,  MemorySegment C,  int i) {\n+        return clang_Cursor_getArgument(SegmentAllocator.nativeAllocator(scope), C, i);\n+    }\n@@ -2014,0 +2068,3 @@\n+    public static MemorySegment clang_getCanonicalType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getCanonicalType(SegmentAllocator.nativeAllocator(scope), T);\n+    }\n@@ -2058,0 +2115,3 @@\n+    public static MemorySegment clang_getTypedefName ( ResourceScope scope,  MemorySegment CT) {\n+        return clang_getTypedefName(SegmentAllocator.nativeAllocator(scope), CT);\n+    }\n@@ -2069,0 +2129,3 @@\n+    public static MemorySegment clang_getPointeeType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getPointeeType(SegmentAllocator.nativeAllocator(scope), T);\n+    }\n@@ -2080,0 +2143,3 @@\n+    public static MemorySegment clang_getTypeDeclaration ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getTypeDeclaration(SegmentAllocator.nativeAllocator(scope), T);\n+    }\n@@ -2091,0 +2157,3 @@\n+    public static MemorySegment clang_getTypeKindSpelling ( ResourceScope scope,  int K) {\n+        return clang_getTypeKindSpelling(SegmentAllocator.nativeAllocator(scope), K);\n+    }\n@@ -2113,0 +2182,3 @@\n+    public static MemorySegment clang_getResultType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getResultType(SegmentAllocator.nativeAllocator(scope), T);\n+    }\n@@ -2135,0 +2207,3 @@\n+    public static MemorySegment clang_getArgType ( ResourceScope scope,  MemorySegment T,  int i) {\n+        return clang_getArgType(SegmentAllocator.nativeAllocator(scope), T, i);\n+    }\n@@ -2157,0 +2232,3 @@\n+    public static MemorySegment clang_getCursorResultType ( ResourceScope scope,  MemorySegment C) {\n+        return clang_getCursorResultType(SegmentAllocator.nativeAllocator(scope), C);\n+    }\n@@ -2168,0 +2246,3 @@\n+    public static MemorySegment clang_getElementType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getElementType(SegmentAllocator.nativeAllocator(scope), T);\n+    }\n@@ -2190,0 +2271,3 @@\n+    public static MemorySegment clang_getArrayElementType ( ResourceScope scope,  MemorySegment T) {\n+        return clang_getArrayElementType(SegmentAllocator.nativeAllocator(scope), T);\n+    }\n@@ -2317,0 +2401,3 @@\n+    public static MemorySegment clang_getCursorUSR ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorUSR(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -2328,0 +2415,3 @@\n+    public static MemorySegment clang_getCursorSpelling ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorSpelling(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -2464,0 +2554,3 @@\n+    public static MemorySegment clang_getCursorPrettyPrinted ( ResourceScope scope,  MemorySegment Cursor,  Addressable Policy) {\n+        return clang_getCursorPrettyPrinted(SegmentAllocator.nativeAllocator(scope), Cursor, Policy);\n+    }\n@@ -2475,0 +2568,3 @@\n+    public static MemorySegment clang_getCursorDisplayName ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorDisplayName(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -2486,0 +2582,3 @@\n+    public static MemorySegment clang_getCursorReferenced ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorReferenced(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -2497,0 +2596,3 @@\n+    public static MemorySegment clang_getCursorDefinition ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_getCursorDefinition(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -2530,0 +2632,3 @@\n+    public static MemorySegment clang_Cursor_getMangling ( ResourceScope scope,  MemorySegment x1) {\n+        return clang_Cursor_getMangling(SegmentAllocator.nativeAllocator(scope), x1);\n+    }\n@@ -2567,0 +2672,3 @@\n+    public static MemorySegment clang_getTokenSpelling ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenSpelling(SegmentAllocator.nativeAllocator(scope), x1, x2);\n+    }\n@@ -2578,0 +2686,3 @@\n+    public static MemorySegment clang_getTokenLocation ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenLocation(SegmentAllocator.nativeAllocator(scope), x1, x2);\n+    }\n@@ -2589,0 +2700,3 @@\n+    public static MemorySegment clang_getTokenExtent ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n+        return clang_getTokenExtent(SegmentAllocator.nativeAllocator(scope), x1, x2);\n+    }\n@@ -2622,0 +2736,3 @@\n+    public static MemorySegment clang_getCursorKindSpelling ( ResourceScope scope,  int Kind) {\n+        return clang_getCursorKindSpelling(SegmentAllocator.nativeAllocator(scope), Kind);\n+    }\n@@ -2633,0 +2750,3 @@\n+    public static MemorySegment clang_getClangVersion ( ResourceScope scope) {\n+        return clang_getClangVersion(SegmentAllocator.nativeAllocator(scope));\n+    }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/Index_h.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -62,0 +62,3 @@\n+    final static SegmentAllocator CONSTANT_ALLOCATOR =\n+            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+\n@@ -100,4 +103,0 @@\n-    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n-        return upcallStub(fi, z, fdesc, mtypeDesc, ResourceScope.newConfinedScope());\n-    }\n-\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}