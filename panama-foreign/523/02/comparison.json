{"files":[{"patch":"@@ -204,4 +204,0 @@\n-     * <p>\n-     * If this scope is an {@link #isImplicit()} implicit} scope, calling this method will always return the\n-     * <em>implicit<\/em> resource scope handle. The implicit resource scope handle is associated with the\n-     * {@link ResourceScope#globalScope() global scope}.\n@@ -216,2 +212,1 @@\n-     * @throws IllegalArgumentException if this resource scope is explicit and the provided handle is not associated\n-     * with this scope.\n+     * @throws IllegalArgumentException if the provided handle is not associated with this scope.\n@@ -230,4 +225,2 @@\n-         * Returns the resource scope associated with this handle, or the {@link ResourceScope#globalScope()}\n-         * if this handle is the implicit resource scope handle.\n-         * @return the resource scope associated with this handle, or the {@link ResourceScope#globalScope()}\n-         * if this handle is the implicit resource scope handle.\n+         * Returns the resource scope associated with this handle.\n+         * @return the resource scope associated with this handle.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-        public void close() {\n+        public void release() {\n@@ -119,1 +119,0 @@\n-                Reference.reachabilityFence(ConfinedScope.this);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ConfinedScope.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-            if (!checkHandle(handle)) {\n+            if (handle.scope() != this) {\n@@ -133,1 +133,1 @@\n-            handle.close();\n+            handle.release();\n@@ -152,4 +152,0 @@\n-    boolean checkHandle(ResourceScope.Handle handle) {\n-        return handle.scope() == this;\n-    }\n-\n@@ -164,1 +160,1 @@\n-        void close();\n+        void release();\n@@ -233,2 +229,1 @@\n-     * the same per-scope handle is shared across multiple calls to {@link #acquire()}. In fact, for non-closeable\n-     * scopes, it is sufficient for resource scope handles to keep a strong reference to their scopes, to prevent closure.\n+     * the scope itself also acts as a resource scope handle and is returned by {@link #acquire()}.\n@@ -236,1 +231,1 @@\n-    static class ImplicitScopeImpl extends SharedScope {\n+    static class ImplicitScopeImpl extends SharedScope implements HandleImpl {\n@@ -244,1 +239,1 @@\n-            return implicitHandle;\n+            return this;\n@@ -258,2 +253,2 @@\n-        boolean checkHandle(ResourceScope.Handle handle) {\n-            return handle == implicitHandle;\n+        public void release() {\n+            \/\/ do nothing\n@@ -262,11 +257,4 @@\n-        private final static HandleImpl implicitHandle = new HandleImpl() {\n-            @Override\n-            public void close() {\n-                \/\/ do nothing\n-            }\n-\n-            @Override\n-            public ResourceScopeImpl scope() {\n-                return GLOBAL;\n-            }\n-        };\n+        @Override\n+        public ResourceScopeImpl scope() {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/ResourceScopeImpl.java","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-        public void close() {\n+        public void release() {\n@@ -170,1 +170,0 @@\n-                Reference.reachabilityFence(SharedScope.this);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SharedScope.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -192,0 +192,1 @@\n+        AtomicInteger lockCount = new AtomicInteger();\n@@ -194,0 +195,1 @@\n+                lockCount.incrementAndGet();\n@@ -202,0 +204,2 @@\n+                } finally {\n+                    lockCount.decrementAndGet();\n@@ -206,1 +210,1 @@\n-        while (true) {\n+        while (lockCount.get() > 0) {\n@@ -209,0 +213,1 @@\n+                assertEquals(lockCount.get(), 0);\n@@ -261,0 +266,1 @@\n+        assertEquals(handle.scope(), scope);\n","filename":"test\/jdk\/java\/foreign\/TestResourceScope.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}