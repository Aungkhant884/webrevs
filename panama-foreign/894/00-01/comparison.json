{"files":[{"patch":"@@ -617,1 +617,1 @@\n-        long baseAndScale = getBaseAndScale(dstArray.getClass());\n+        var dstInfo = baseAndScale(dstArray);\n@@ -621,2 +621,0 @@\n-        int dstBase = (int)baseAndScale;\n-        long dstWidth = (int)(baseAndScale >> 32); \/\/ Use long arithmetics below\n@@ -628,1 +626,1 @@\n-        srcImpl.checkAccess(srcOffset, elementCount * dstWidth, true);\n+        srcImpl.checkAccess(srcOffset, elementCount * dstInfo.scale(), true);\n@@ -630,1 +628,1 @@\n-        if (dstWidth == 1 || srcLayout.order() == ByteOrder.nativeOrder()) {\n+        if (dstInfo.scale() == 1 || srcLayout.order() == ByteOrder.nativeOrder()) {\n@@ -633,1 +631,1 @@\n-                    dstArray, dstBase + (dstIndex * dstWidth), elementCount * dstWidth);\n+                    dstArray, dstInfo.base() + (dstIndex * dstInfo.scale()), elementCount * dstInfo.scale());\n@@ -637,1 +635,1 @@\n-                    dstArray, dstBase + (dstIndex * dstWidth), elementCount * dstWidth, dstWidth);\n+                    dstArray, dstInfo.base() + (dstIndex * dstInfo.scale()), elementCount * dstInfo.scale(), dstInfo.scale());\n@@ -646,1 +644,1 @@\n-        long baseAndScale = getBaseAndScale(srcArray.getClass());\n+        var srcInfo = baseAndScale(srcArray);\n@@ -650,2 +648,0 @@\n-        int srcBase = (int)baseAndScale;\n-        long srcWidth = (int)(baseAndScale >> 32); \/\/ Use long arithmetics below\n@@ -658,2 +654,2 @@\n-        destImpl.checkAccess(dstOffset, elementCount * srcWidth, false);\n-        if (srcWidth == 1 || dstLayout.order() == ByteOrder.nativeOrder()) {\n+        destImpl.checkAccess(dstOffset, elementCount * srcInfo.scale(), false);\n+        if (srcInfo.scale() == 1 || dstLayout.order() == ByteOrder.nativeOrder()) {\n@@ -661,2 +657,2 @@\n-                    srcArray, srcBase + (srcIndex * srcWidth),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount * srcWidth);\n+                    srcArray, srcInfo.base() + (srcIndex * srcInfo.scale()),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount * srcInfo.scale());\n@@ -665,2 +661,2 @@\n-                    srcArray, srcBase + (srcIndex * srcWidth),\n-                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount * srcWidth, srcWidth);\n+                    srcArray, srcInfo.base() + (srcIndex * srcInfo.scale()),\n+                    destImpl.unsafeGetBase(), destImpl.unsafeGetOffset() + dstOffset, elementCount * srcInfo.scale(), srcInfo.scale());\n@@ -708,17 +704,10 @@\n-    private static long getBaseAndScale(Class<?> arrayType) {\n-        return switch (arrayType) {\n-            case Class<?> c when c.equals(byte[].class) ->\n-                    make(Unsafe.ARRAY_BYTE_BASE_OFFSET, Unsafe.ARRAY_BYTE_INDEX_SCALE);\n-            case Class<?> c when c.equals(char[].class) ->\n-                    make(Unsafe.ARRAY_CHAR_BASE_OFFSET, Unsafe.ARRAY_CHAR_INDEX_SCALE);\n-            case Class<?> c when c.equals(short[].class) ->\n-                    make(Unsafe.ARRAY_SHORT_BASE_OFFSET, Unsafe.ARRAY_SHORT_INDEX_SCALE);\n-            case Class<?> c when c.equals(int[].class) ->\n-                    make(Unsafe.ARRAY_INT_BASE_OFFSET, Unsafe.ARRAY_INT_INDEX_SCALE);\n-            case Class<?> c when c.equals(float[].class) ->\n-                    make(Unsafe.ARRAY_FLOAT_BASE_OFFSET, Unsafe.ARRAY_FLOAT_INDEX_SCALE);\n-            case Class<?> c when c.equals(long[].class) ->\n-                    make(Unsafe.ARRAY_LONG_BASE_OFFSET,  Unsafe.ARRAY_LONG_INDEX_SCALE);\n-            case Class<?> c when c.equals(double[].class) ->\n-                    make(Unsafe.ARRAY_DOUBLE_BASE_OFFSET, Unsafe.ARRAY_DOUBLE_INDEX_SCALE);\n-            default -> throw new IllegalArgumentException(\"Not a supported array class: \" + arrayType.getSimpleName());\n+    private static BaseAndScale baseAndScale(Object array) {\n+        return switch (array) {\n+            case byte[]   __ -> new BaseAndScale(Unsafe.ARRAY_BYTE_BASE_OFFSET, Unsafe.ARRAY_BYTE_INDEX_SCALE);\n+            case char[]   __ -> new BaseAndScale(Unsafe.ARRAY_CHAR_BASE_OFFSET, Unsafe.ARRAY_CHAR_INDEX_SCALE);\n+            case short[]  __ -> new BaseAndScale(Unsafe.ARRAY_SHORT_BASE_OFFSET, Unsafe.ARRAY_SHORT_INDEX_SCALE);\n+            case int[]    __ -> new BaseAndScale(Unsafe.ARRAY_INT_BASE_OFFSET, Unsafe.ARRAY_INT_INDEX_SCALE);\n+            case float[]  __ -> new BaseAndScale(Unsafe.ARRAY_FLOAT_BASE_OFFSET, Unsafe.ARRAY_FLOAT_INDEX_SCALE);\n+            case long[]   __ -> new BaseAndScale(Unsafe.ARRAY_LONG_BASE_OFFSET,  Unsafe.ARRAY_LONG_INDEX_SCALE);\n+            case double[] __ -> new BaseAndScale(Unsafe.ARRAY_DOUBLE_BASE_OFFSET, Unsafe.ARRAY_DOUBLE_INDEX_SCALE);\n+            default -> throw new IllegalArgumentException(\"Not a supported array class: \" + array.getClass().getSimpleName());\n@@ -728,3 +717,1 @@\n-    static long make(int offset, int scale) {\n-        return (long) offset | ((long) scale << 32);\n-    }\n+    record BaseAndScale(int base, long scale){ }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":23,"deletions":36,"binary":false,"changes":59,"status":"modified"}]}