{"files":[{"patch":"@@ -568,12 +568,0 @@\n-    private static int getScaleFactor(Buffer buffer) {\n-        return switch (buffer) {\n-            case ByteBuffer   __ -> 0;\n-            case CharBuffer   __ -> 1;\n-            case ShortBuffer  __ -> 1;\n-            case IntBuffer    __ -> 2;\n-            case FloatBuffer  __ -> 2;\n-            case LongBuffer   __ -> 3;\n-            case DoubleBuffer __ -> 3;\n-        };\n-    }\n-\n@@ -617,1 +605,1 @@\n-        var dstInfo = BaseAndScale.of(dstArray);\n+        var dstInfo = Utils.BaseAndScale.of(dstArray);\n@@ -644,1 +632,1 @@\n-        var srcInfo = BaseAndScale.of(srcArray);\n+        var srcInfo = Utils.BaseAndScale.of(srcArray);\n@@ -704,29 +692,10 @@\n-    record BaseAndScale(int base, long scale) {\n-        private static final BaseAndScale BYTE =\n-                new BaseAndScale(Unsafe.ARRAY_BYTE_BASE_OFFSET, Unsafe.ARRAY_BYTE_INDEX_SCALE);\n-        private static final BaseAndScale CHAR =\n-                new BaseAndScale(Unsafe.ARRAY_CHAR_BASE_OFFSET, Unsafe.ARRAY_CHAR_INDEX_SCALE);\n-        private static final BaseAndScale SHORT =\n-                new BaseAndScale(Unsafe.ARRAY_SHORT_BASE_OFFSET, Unsafe.ARRAY_SHORT_INDEX_SCALE);\n-        private static final BaseAndScale INT =\n-                new BaseAndScale(Unsafe.ARRAY_INT_BASE_OFFSET, Unsafe.ARRAY_INT_INDEX_SCALE);\n-        private static final BaseAndScale FLOAT =\n-                new BaseAndScale(Unsafe.ARRAY_FLOAT_BASE_OFFSET, Unsafe.ARRAY_FLOAT_INDEX_SCALE);\n-        private static final BaseAndScale LONG =\n-                new BaseAndScale(Unsafe.ARRAY_LONG_BASE_OFFSET, Unsafe.ARRAY_LONG_INDEX_SCALE);\n-        private static final BaseAndScale DOUBLE =\n-                new BaseAndScale(Unsafe.ARRAY_DOUBLE_BASE_OFFSET, Unsafe.ARRAY_DOUBLE_INDEX_SCALE);\n-\n-        static BaseAndScale of(Object array) {\n-            return switch (array) {\n-                case byte[]   __ -> BaseAndScale.BYTE;\n-                case char[]   __ -> BaseAndScale.CHAR;\n-                case short[]  __ -> BaseAndScale.SHORT;\n-                case int[]    __ -> BaseAndScale.INT;\n-                case float[]  __ -> BaseAndScale.FLOAT;\n-                case long[]   __ -> BaseAndScale.LONG;\n-                case double[] __ -> BaseAndScale.DOUBLE;\n-                default -> throw new IllegalArgumentException(\"Not a supported array class: \" + array.getClass().getSimpleName());\n-            };\n-        }\n-\n+    private static int getScaleFactor(Buffer buffer) {\n+        return switch (buffer) {\n+            case ByteBuffer   __ -> 0;\n+            case CharBuffer   __ -> 1;\n+            case ShortBuffer  __ -> 1;\n+            case IntBuffer    __ -> 2;\n+            case FloatBuffer  __ -> 2;\n+            case LongBuffer   __ -> 3;\n+            case DoubleBuffer __ -> 3;\n+        };\n@@ -734,1 +703,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":12,"deletions":44,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -53,3 +53,0 @@\n-    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n-    private static final int BYTE_ARR_BASE = UNSAFE.arrayBaseOffset(byte[].class);\n-\n@@ -92,1 +89,1 @@\n-        return nioAccess.newHeapByteBuffer(baseByte, (int)offset - BYTE_ARR_BASE, (int) byteSize(), null);\n+        return nioAccess.newHeapByteBuffer(baseByte, (int)offset - Utils.BaseAndScale.BYTE.base(), (int) byteSize(), null);\n@@ -115,2 +112,2 @@\n-            long byteSize = (long)arr.length * Unsafe.ARRAY_BYTE_INDEX_SCALE;\n-            return new OfByte(Unsafe.ARRAY_BYTE_BASE_OFFSET, arr, byteSize, false,\n+            long byteSize = (long)arr.length * Utils.BaseAndScale.BYTE.scale();\n+            return new OfByte(Utils.BaseAndScale.BYTE.base(), arr, byteSize, false,\n@@ -127,1 +124,1 @@\n-            return offset - Unsafe.ARRAY_BYTE_BASE_OFFSET;\n+            return offset - Utils.BaseAndScale.BYTE.base();\n@@ -149,2 +146,2 @@\n-            long byteSize = (long)arr.length * Unsafe.ARRAY_CHAR_INDEX_SCALE;\n-            return new OfChar(Unsafe.ARRAY_CHAR_BASE_OFFSET, arr, byteSize, false,\n+            long byteSize = (long)arr.length * Utils.BaseAndScale.CHAR.scale();\n+            return new OfChar(Utils.BaseAndScale.CHAR.base(), arr, byteSize, false,\n@@ -161,1 +158,1 @@\n-            return offset - Unsafe.ARRAY_CHAR_BASE_OFFSET;\n+            return offset - Utils.BaseAndScale.CHAR.base();\n@@ -183,2 +180,2 @@\n-            long byteSize = (long)arr.length * Unsafe.ARRAY_SHORT_INDEX_SCALE;\n-            return new OfShort(Unsafe.ARRAY_SHORT_BASE_OFFSET, arr, byteSize, false,\n+            long byteSize = (long)arr.length * Utils.BaseAndScale.SHORT.scale();\n+            return new OfShort(Utils.BaseAndScale.SHORT.base(), arr, byteSize, false,\n@@ -195,1 +192,1 @@\n-            return offset - Unsafe.ARRAY_SHORT_BASE_OFFSET;\n+            return offset - Utils.BaseAndScale.SHORT.base();\n@@ -217,2 +214,2 @@\n-            long byteSize = (long)arr.length * Unsafe.ARRAY_INT_INDEX_SCALE;\n-            return new OfInt(Unsafe.ARRAY_INT_BASE_OFFSET, arr, byteSize, false,\n+            long byteSize = (long)arr.length * Utils.BaseAndScale.INT.scale();\n+            return new OfInt(Utils.BaseAndScale.INT.base(), arr, byteSize, false,\n@@ -229,1 +226,1 @@\n-            return offset - Unsafe.ARRAY_INT_BASE_OFFSET;\n+            return offset - Utils.BaseAndScale.INT.base();\n@@ -251,2 +248,2 @@\n-            long byteSize = (long)arr.length * Unsafe.ARRAY_LONG_INDEX_SCALE;\n-            return new OfLong(Unsafe.ARRAY_LONG_BASE_OFFSET, arr, byteSize, false,\n+            long byteSize = (long)arr.length * Utils.BaseAndScale.LONG.scale();\n+            return new OfLong(Utils.BaseAndScale.LONG.base(), arr, byteSize, false,\n@@ -263,1 +260,1 @@\n-            return offset - Unsafe.ARRAY_LONG_BASE_OFFSET;\n+            return offset - Utils.BaseAndScale.LONG.base();\n@@ -285,2 +282,2 @@\n-            long byteSize = (long)arr.length * Unsafe.ARRAY_FLOAT_INDEX_SCALE;\n-            return new OfFloat(Unsafe.ARRAY_FLOAT_BASE_OFFSET, arr, byteSize, false,\n+            long byteSize = (long)arr.length * Utils.BaseAndScale.FLOAT.scale();\n+            return new OfFloat(Utils.BaseAndScale.FLOAT.base(), arr, byteSize, false,\n@@ -297,1 +294,1 @@\n-            return offset - Unsafe.ARRAY_FLOAT_BASE_OFFSET;\n+            return offset - Utils.BaseAndScale.FLOAT.base();\n@@ -319,2 +316,2 @@\n-            long byteSize = (long)arr.length * Unsafe.ARRAY_DOUBLE_INDEX_SCALE;\n-            return new OfDouble(Unsafe.ARRAY_DOUBLE_BASE_OFFSET, arr, byteSize, false,\n+            long byteSize = (long)arr.length * Utils.BaseAndScale.DOUBLE.scale();\n+            return new OfDouble(Utils.BaseAndScale.DOUBLE.base(), arr, byteSize, false,\n@@ -331,1 +328,1 @@\n-            return offset - Unsafe.ARRAY_DOUBLE_BASE_OFFSET;\n+            return offset - Utils.BaseAndScale.DOUBLE.base();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":22,"deletions":25,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -279,0 +280,32 @@\n+    public record BaseAndScale(int base, long scale) {\n+\n+        public static final BaseAndScale BYTE =\n+                new BaseAndScale(Unsafe.ARRAY_BYTE_BASE_OFFSET, Unsafe.ARRAY_BYTE_INDEX_SCALE);\n+        public static final BaseAndScale CHAR =\n+                new BaseAndScale(Unsafe.ARRAY_CHAR_BASE_OFFSET, Unsafe.ARRAY_CHAR_INDEX_SCALE);\n+        public static final BaseAndScale SHORT =\n+                new BaseAndScale(Unsafe.ARRAY_SHORT_BASE_OFFSET, Unsafe.ARRAY_SHORT_INDEX_SCALE);\n+        public static final BaseAndScale INT =\n+                new BaseAndScale(Unsafe.ARRAY_INT_BASE_OFFSET, Unsafe.ARRAY_INT_INDEX_SCALE);\n+        public static final BaseAndScale FLOAT =\n+                new BaseAndScale(Unsafe.ARRAY_FLOAT_BASE_OFFSET, Unsafe.ARRAY_FLOAT_INDEX_SCALE);\n+        public static final BaseAndScale LONG =\n+                new BaseAndScale(Unsafe.ARRAY_LONG_BASE_OFFSET, Unsafe.ARRAY_LONG_INDEX_SCALE);\n+        public static final BaseAndScale DOUBLE =\n+                new BaseAndScale(Unsafe.ARRAY_DOUBLE_BASE_OFFSET, Unsafe.ARRAY_DOUBLE_INDEX_SCALE);\n+\n+        public static BaseAndScale of(Object array) {\n+            return switch (array) {\n+                case byte[]   __ -> BaseAndScale.BYTE;\n+                case char[]   __ -> BaseAndScale.CHAR;\n+                case short[]  __ -> BaseAndScale.SHORT;\n+                case int[]    __ -> BaseAndScale.INT;\n+                case float[]  __ -> BaseAndScale.FLOAT;\n+                case long[]   __ -> BaseAndScale.LONG;\n+                case double[] __ -> BaseAndScale.DOUBLE;\n+                default -> throw new IllegalArgumentException(\"Not a supported array class: \" + array.getClass().getSimpleName());\n+            };\n+        }\n+\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"}]}