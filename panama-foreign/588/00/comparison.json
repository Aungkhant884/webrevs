{"files":[{"patch":"@@ -264,1 +264,1 @@\n-            ResourceScope scope = ResourceScope.newConfinedScope();\n+            ResourceScope scope = ResourceScope.newConfinedScope(null);\n@@ -286,1 +286,1 @@\n-            ResourceScope scope = ResourceScope.newConfinedScope();\n+            ResourceScope scope = ResourceScope.newConfinedScope(null);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope(null)) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/ProgrammableInvoker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-                    try (ResourceScope localScope = ResourceScope.newConfinedScope()) {\n+                    try (ResourceScope localScope = ResourceScope.newConfinedScope(null)) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope(null)) {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/BulkMismatchAcquire.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    static final MemoryAddress native_compar;\n+    static final Addressable native_compar;\n@@ -66,0 +66,2 @@\n+    static Addressable qsort_addr = abi.lookup(\"qsort\").get();\n+\n@@ -75,1 +77,1 @@\n-                    abi.lookup(\"qsort\").orElseThrow(),\n+                    qsort_addr,\n@@ -104,1 +106,1 @@\n-         clib_qsort.invokeExact(INPUT_SEGMENT.address(), (long) INPUT.length, JAVA_INT.byteSize(), native_compar);\n+         clib_qsort.invokeExact((Addressable)INPUT_SEGMENT, (long) INPUT.length, JAVA_INT.byteSize(), native_compar);\n@@ -119,1 +121,1 @@\n-        clib_qsort.invokeExact(INPUT_SEGMENT.address(), (long) INPUT.length, JAVA_INT.byteSize(), panama_upcall_compar);\n+        clib_qsort.invokeExact((Addressable)INPUT_SEGMENT, (long) INPUT.length, JAVA_INT.byteSize(), panama_upcall_compar);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/QSort.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope(null)) {\n@@ -114,1 +114,1 @@\n-        try (ResourceScope scope = ResourceScope.newSharedScope()) {\n+        try (ResourceScope scope = ResourceScope.newSharedScope(null)) {\n@@ -120,1 +120,1 @@\n-    public MemorySegment implicit_close() {\n+    public MemorySegment confined_implicit() {\n@@ -125,1 +125,6 @@\n-    public MemorySegment implicit_close_systemgc() {\n+    public MemorySegment shared_implicit() {\n+        return MemorySegment.allocateNative(ALLOC_SIZE, 4, ResourceScope.newSharedScope());\n+    }\n+\n+    @Benchmark\n+    public MemorySegment confined_implicit_systemgc() {\n@@ -130,0 +135,6 @@\n+    @Benchmark\n+    public MemorySegment shared_implicit_systemgc() {\n+        if (gcCount++ == 0) System.gc(); \/\/ GC when we overflow\n+        return MemorySegment.allocateNative(ALLOC_SIZE, 4, ResourceScope.newSharedScope());\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/ResourceScopeClose.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (ResourceScope scope = ResourceScope.newConfinedScope(null)) {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VaList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        this(MemorySegment.allocateNative(LAYOUT, ResourceScope.newConfinedScope()), x, y);\n+        this(MemorySegment.allocateNative(LAYOUT, ResourceScope.newConfinedScope(null)), x, y);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/points\/support\/PanamaPoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-    try (final var scope = ResourceScope.newConfinedScope()) {\n+    try (final var scope = ResourceScope.newConfinedScope(null)) {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreBytes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-    try (final var scope = ResourceScope.newConfinedScope()) {\n+    try (final var scope = ResourceScope.newConfinedScope(null)) {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadStoreShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}