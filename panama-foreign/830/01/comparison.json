{"files":[{"patch":"@@ -99,2 +99,2 @@\n-     * <li>If the layout is a {@link GroupLayout} the carrier type is {@link MemorySegment}.<\/li>\n-     * <li>If the layout is a {@link PaddingLayout}, or {@link SequenceLayout} an {@link IllegalArgumentException} is thrown.<\/li>\n+     * <li>If the layout is a {@link GroupLayout} or a {@link SequenceLayout}, the carrier type is {@link MemorySegment}.<\/li>\n+     * <li>If the layout is a {@link PaddingLayout}, an {@link IllegalArgumentException} is thrown.<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.SequenceLayout;\n@@ -123,1 +124,1 @@\n-        } else if (layout instanceof GroupLayout) {\n+        } else if (layout instanceof GroupLayout || layout instanceof SequenceLayout) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/FunctionDescriptorImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.lang.foreign.PaddingLayout;\n@@ -65,1 +66,1 @@\n-        checkHasNaturalAlignment(function);\n+        checkIsSupportedDescriptor(function);\n@@ -83,1 +84,1 @@\n-        checkHasNaturalAlignment(function);\n+        checkIsSupportedDescriptor(function);\n@@ -104,6 +105,13 @@\n-    \/\/ Current limitation of the implementation:\n-    \/\/ We don't support packed structs on some platforms,\n-    \/\/ so reject them here explicitly\n-    private static void checkHasNaturalAlignment(FunctionDescriptor descriptor) {\n-        descriptor.returnLayout().ifPresent(AbstractLinker::checkHasNaturalAlignmentRecursive);\n-        descriptor.argumentLayouts().forEach(AbstractLinker::checkHasNaturalAlignmentRecursive);\n+    \/\/ Native linkers do not support sequence or padding layouts. They also do not support \"packed\" struct layouts, or\n+    \/\/ struct layouts containing additional padding. Such illegal layouts are ruled out here.\n+    private static void checkIsSupportedDescriptor(FunctionDescriptor descriptor) {\n+        descriptor.returnLayout().ifPresent(AbstractLinker::checkIsSupportedLayout);\n+        descriptor.argumentLayouts().forEach(AbstractLinker::checkIsSupportedLayout);\n+    }\n+\n+    private static void checkIsSupportedLayout(MemoryLayout layout) {\n+        if (layout instanceof SequenceLayout || layout instanceof PaddingLayout) {\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + layout);\n+        } else {\n+            checkHasNaturalAlignmentRecursive(layout);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -116,1 +116,2 @@\n-                MemoryLayout.structLayout(C_INT, C_INT));\n+                MemoryLayout.structLayout(C_INT, C_INT),\n+                MemoryLayout.sequenceLayout(3, C_INT));\n@@ -118,1 +119,1 @@\n-        assertEquals(cmt, MethodType.methodType(int.class, int.class, MemorySegment.class));\n+        assertEquals(cmt, MethodType.methodType(int.class, int.class, MemorySegment.class, MemorySegment.class));\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}