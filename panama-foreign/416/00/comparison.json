{"files":[{"patch":"@@ -232,1 +232,1 @@\n-    private static boolean isUnsupported(MemoryLayout layout) {\n+    private static MemoryLayout isUnsupported(MemoryLayout layout) {\n@@ -234,1 +234,3 @@\n-            return UnsupportedLayouts.isUnsupported((ValueLayout)layout);\n+            if (UnsupportedLayouts.isUnsupported((ValueLayout)layout)) {\n+                return layout;\n+            }\n@@ -238,2 +240,3 @@\n-                if (isUnsupported(ml)) {\n-                    return true;\n+                MemoryLayout ul = isUnsupported(ml);\n+                if (ul != null) {\n+                    return ul;\n@@ -244,1 +247,1 @@\n-        return false;\n+        return null;\n@@ -249,2 +252,5 @@\n-        if (resultLayout != null && isUnsupported(resultLayout)) {\n-            return resultLayout;\n+        if (resultLayout != null) {\n+            MemoryLayout ul = isUnsupported(resultLayout);\n+            if (ul != null) {\n+                return ul;\n+            }\n@@ -254,2 +260,3 @@\n-            if (isUnsupported(argLayout)) {\n-                return argLayout;\n+            MemoryLayout ul = isUnsupported(argLayout);\n+            if (ul != null) {\n+                return ul;\n@@ -276,1 +283,2 @@\n-            warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage: \" + unsupportedLayout.name().get());\n+            warn(\"skipping \" + funcTree.name() + \" because of unsupported type usage: \" +\n+                    UnsupportedLayouts.getUnsupportedTypeName(unsupportedLayout));\n@@ -323,1 +331,1 @@\n-                            unsupportedLayout.name().get() + \" in \" + param.name());\n+                            UnsupportedLayouts.getUnsupportedTypeName(unsupportedLayout) + \" in \" + param.name());\n@@ -423,1 +431,2 @@\n-        if (isUnsupported(layout)) {\n+        MemoryLayout ul = isUnsupported(layout);\n+        if (ul != null) {\n@@ -426,1 +435,2 @@\n-            warn(\"skipping \" + name + \" because of unsupported type usage: \" + layout.name().get());\n+            warn(\"skipping \" + name + \" because of unsupported type usage: \" +\n+                    UnsupportedLayouts.getUnsupportedTypeName(ul));\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/OutputFactory.java","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -37,2 +37,1 @@\n-    private static final String ATTR_UNSUPPORTED = \"jextract.abi.unsupported.types\";\n-    private static final String ATTR_SOURCE_FORM = \"jextract.abi.unsupported.types.source.form\";\n+    private static final String ATTR_LAYOUT_KIND = \"jextract.abi.unsupported.layout.kind\";\n@@ -41,1 +40,1 @@\n-            withName(\"__int128\").withAttribute(ATTR_UNSUPPORTED, true);\n+            withAttribute(ATTR_LAYOUT_KIND, \"__int128\");\n@@ -44,1 +43,1 @@\n-            withName(\"long double\").withAttribute(ATTR_UNSUPPORTED, true);\n+            withAttribute(ATTR_LAYOUT_KIND, \"long double\");\n@@ -47,1 +46,1 @@\n-            withName(\"_float128\").withAttribute(ATTR_UNSUPPORTED, true);\n+            withAttribute(ATTR_LAYOUT_KIND, \"_float128\");\n@@ -50,1 +49,1 @@\n-            withName(\"__fp16\").withAttribute(ATTR_UNSUPPORTED, true);\n+            withAttribute(ATTR_LAYOUT_KIND, \"__fp16\");\n@@ -53,1 +52,1 @@\n-            withName(\"char16\").withAttribute(ATTR_UNSUPPORTED, true);\n+            withAttribute(ATTR_LAYOUT_KIND, \"char16\");\n@@ -56,1 +55,1 @@\n-            withName(\"wchar_t\").withAttribute(ATTR_UNSUPPORTED, true);\n+            withAttribute(ATTR_LAYOUT_KIND, \"wchar_t\");\n@@ -58,2 +57,7 @@\n-    static boolean isUnsupported(ValueLayout vl) {\n-        return vl.attribute(ATTR_UNSUPPORTED).isPresent();\n+    static boolean isUnsupported(MemoryLayout vl) {\n+        return vl.attribute(ATTR_LAYOUT_KIND).isPresent();\n+    }\n+\n+    static String getUnsupportedTypeName(MemoryLayout vl) {\n+        return (String)\n+                vl.attribute(ATTR_LAYOUT_KIND).orElseThrow(IllegalArgumentException::new);\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/UnsupportedLayouts.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertNotNull;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.jextract\n+ * @library \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 8258223\n+ * @summary jextract throws exception when unsupport type is used in anonymous struct\n+ * @run testng\/othervm -Dforeign.restricted=permit Test8258223\n+ *\/\n+public class Test8258223 extends JextractToolRunner {\n+    @Test\n+    public void test() {\n+        Path test8258223Output = getOutputFilePath(\"test8258223_gen\");\n+        Path test8258223H = getInputFilePath(\"test8258223.h\");\n+        run(\"-d\", test8258223Output.toString(), test8258223H.toString()).checkSuccess();\n+        try(Loader loader = classLoader(test8258223Output)) {\n+            Class<?> cls = loader.loadClass(\"test8258223_h\");\n+            assertNotNull(cls);\n+        } finally {\n+            deleteDir(test8258223Output);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jextract\/Test8258223.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -25,5 +25,3 @@\n-    float x;\n-};\n-\n-struct Bar {\n-    int x;\n+  struct {\n+   long double dl;\n+  } x;\n","filename":"test\/jdk\/tools\/jextract\/test8258223.h","additions":3,"deletions":5,"binary":false,"changes":8,"previous_filename":"test\/jdk\/tools\/jextract\/test8252465\/test8252465.h","status":"copied"}]}