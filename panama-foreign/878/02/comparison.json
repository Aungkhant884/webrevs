{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.Array;\n+import java.nio.ByteOrder;\n@@ -260,0 +260,34 @@\n+    \/**\n+     * Allocates a memory segment with the given layout and initializes it with the bytes in the provided\n+     * source memory segment.\n+     * @implSpec the default implementation for this method calls {@code this.allocate(elementLayout, elementCount)}.\n+     * @param elementLayout the element layout of the allocated array.\n+     * @param source the source segment.\n+     * @param sourceElementLayout the element layout of the source segment.\n+     * @param sourceOffset the starting offset, in bytes, of the source segment.\n+     * @param elementCount the number of elements in the source segment to be copied.\n+     * @return a segment for the newly allocated memory block.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() != sourceElementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if the source segment\/offset are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a>\n+     * in the source element layout.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n+     * @throws IllegalArgumentException if {@code sourceElementLayout.byteAlignment() > sourceElementLayout.byteSize()}.\n+     * @throws IllegalStateException if the {@linkplain MemorySegment#scope() scope} associated with {@code source} is not\n+     * {@linkplain MemorySegment.Scope#isAlive() alive}.\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     * such that {@code source.isAccessibleBy(T) == false}.\n+     * @throws IndexOutOfBoundsException if {@code elementCount * sourceElementLayout.byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code sourceOffset > source.byteSize() - (elementCount * sourceElementLayout.byteSize())}.\n+     * @throws IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}.\n+     *\/\n+    @ForceInline\n+    default MemorySegment allocateFrom(ValueLayout elementLayout, MemorySegment source,\n+                                       ValueLayout sourceElementLayout, long sourceOffset, long elementCount) {\n+        Objects.requireNonNull(source);\n+        Objects.requireNonNull(sourceElementLayout);\n+        Objects.requireNonNull(elementLayout);\n+        MemorySegment dest = allocateNoInit(elementLayout, elementCount);\n+        MemorySegment.copy(source, sourceElementLayout, sourceOffset, dest, elementLayout, 0, elementCount);\n+        return dest;\n+    }\n+\n@@ -262,1 +296,6 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * this.allocateFrom(layout, MemorySegment.ofArray(array),\n+     *                   layout.withOrder(ByteOrder.nativeOrder()),\n+     *                   0, array.length)\n+     *}\n@@ -266,0 +305,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n@@ -267,0 +307,1 @@\n+    @ForceInline\n@@ -268,1 +309,2 @@\n-        return copyArrayWithSwapIfNeeded(elements, elementLayout);\n+        return allocateFrom(elementLayout, MemorySegment.ofArray(elements),\n+                elementLayout.withOrder(ByteOrder.nativeOrder()), 0, elements.length);\n@@ -273,1 +315,6 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * this.allocateFrom(layout, MemorySegment.ofArray(array),\n+     *                   layout.withOrder(ByteOrder.nativeOrder()),\n+     *                   0, array.length)\n+     *}\n@@ -277,0 +324,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n@@ -278,0 +326,1 @@\n+    @ForceInline\n@@ -279,1 +328,2 @@\n-        return copyArrayWithSwapIfNeeded(elements, elementLayout);\n+        return allocateFrom(elementLayout, MemorySegment.ofArray(elements),\n+                elementLayout.withOrder(ByteOrder.nativeOrder()), 0, elements.length);\n@@ -284,1 +334,6 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * this.allocateFrom(layout, MemorySegment.ofArray(array),\n+     *                   layout.withOrder(ByteOrder.nativeOrder()),\n+     *                   0, array.length)\n+     *}\n@@ -288,0 +343,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n@@ -289,0 +345,1 @@\n+    @ForceInline\n@@ -290,1 +347,2 @@\n-        return copyArrayWithSwapIfNeeded(elements, elementLayout);\n+        return allocateFrom(elementLayout, MemorySegment.ofArray(elements),\n+                elementLayout.withOrder(ByteOrder.nativeOrder()), 0, elements.length);\n@@ -295,1 +353,6 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * this.allocateFrom(layout, MemorySegment.ofArray(array),\n+     *                   layout.withOrder(ByteOrder.nativeOrder()),\n+     *                   0, array.length)\n+     *}\n@@ -299,0 +362,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n@@ -300,0 +364,1 @@\n+    @ForceInline\n@@ -301,1 +366,2 @@\n-        return copyArrayWithSwapIfNeeded(elements, elementLayout);\n+        return allocateFrom(elementLayout, MemorySegment.ofArray(elements),\n+                elementLayout.withOrder(ByteOrder.nativeOrder()), 0, elements.length);\n@@ -306,1 +372,6 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * this.allocateFrom(layout, MemorySegment.ofArray(array),\n+     *                   layout.withOrder(ByteOrder.nativeOrder()),\n+     *                   0, array.length)\n+     *}\n@@ -310,0 +381,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n@@ -311,0 +383,1 @@\n+    @ForceInline\n@@ -312,1 +385,2 @@\n-        return copyArrayWithSwapIfNeeded(elements, elementLayout);\n+        return allocateFrom(elementLayout, MemorySegment.ofArray(elements),\n+                elementLayout.withOrder(ByteOrder.nativeOrder()), 0, elements.length);\n@@ -317,1 +391,6 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * this.allocateFrom(layout, MemorySegment.ofArray(array),\n+     *                   layout.withOrder(ByteOrder.nativeOrder()),\n+     *                   0, array.length)\n+     *}\n@@ -321,0 +400,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n@@ -322,0 +402,1 @@\n+    @ForceInline\n@@ -323,1 +404,2 @@\n-        return copyArrayWithSwapIfNeeded(elements, elementLayout);\n+        return allocateFrom(elementLayout, MemorySegment.ofArray(elements),\n+                elementLayout.withOrder(ByteOrder.nativeOrder()), 0, elements.length);\n@@ -328,1 +410,6 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout, array.length)}.\n+     * @implSpec the default implementation for this method is equivalent to the following code:\n+     * {@snippet lang = java:\n+     * this.allocateFrom(layout, MemorySegment.ofArray(array),\n+     *                   layout.withOrder(ByteOrder.nativeOrder()),\n+     *                   0, array.length)\n+     *}\n@@ -332,0 +419,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}.\n@@ -333,4 +421,0 @@\n-    default MemorySegment allocateFrom(ValueLayout.OfDouble elementLayout, double... elements) {\n-        return copyArrayWithSwapIfNeeded(elements, elementLayout);\n-    }\n-\n@@ -338,5 +422,3 @@\n-    private MemorySegment copyArrayWithSwapIfNeeded(Object array, ValueLayout elementLayout) {\n-        int size = Array.getLength(Objects.requireNonNull(array));\n-        MemorySegment segment = allocateNoInit(Objects.requireNonNull(elementLayout), size);\n-        MemorySegment.copy(array, 0, segment, elementLayout, 0, size);\n-        return segment;\n+    default MemorySegment allocateFrom(ValueLayout.OfDouble elementLayout, double... elements) {\n+        return allocateFrom(elementLayout, MemorySegment.ofArray(elements),\n+                elementLayout.withOrder(ByteOrder.nativeOrder()), 0, elements.length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":105,"deletions":23,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-            public MemorySegment allocate(MemoryLayout elementLayout, long count) {\n+            public MemorySegment allocateFrom(ValueLayout elementLayout, MemorySegment source, ValueLayout sourceElementLayout, long sourceOffset, long elementCount) {\n@@ -177,1 +177,1 @@\n-            };\n+            }\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"--enable-native-access=ALL-UNNAMED\" })\n+public class AllocFromSliceTest extends CLayouts {\n+\n+    @Param({\"5\", \"20\", \"100\", \"500\", \"1000\"})\n+    public int size;\n+    public int start;\n+    public byte[] arr;\n+\n+    @Setup\n+    public void setup() {\n+        arr = new byte[1024];\n+        Random random = new Random(0);\n+        random.nextBytes(arr);\n+        start = random.nextInt(1024 - size);\n+    }\n+\n+    @Benchmark\n+    public MemorySegment alloc_confined() {\n+        Arena arena = Arena.ofConfined();\n+        MemorySegment segment = arena.allocate(size);\n+        MemorySegment.copy(arr, start, segment, C_CHAR, 0, size);\n+        arena.close();\n+        return segment;\n+    }\n+\n+    @Benchmark\n+    public MemorySegment alloc_confined_slice() {\n+        Arena arena = Arena.ofConfined();\n+        MemorySegment segment = arena.allocateFrom(C_CHAR, MemorySegment.ofArray(arr), C_CHAR, start, size);\n+        arena.close();\n+        return segment;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocFromSliceTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}