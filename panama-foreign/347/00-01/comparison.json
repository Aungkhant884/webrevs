{"files":[{"patch":"@@ -51,2 +51,2 @@\n-public class RuntimeHelper {\n-\n+final class RuntimeHelper {\n+    private RuntimeHelper() {}\n@@ -54,1 +54,0 @@\n-\n@@ -56,1 +55,0 @@\n-\n@@ -75,15 +73,1 @@\n-    private static final Optional<LibraryLookup.Symbol> lookup(LibraryLookup[] LIBRARIES, String sym) {\n-        for (LibraryLookup l : LIBRARIES) {\n-            try {\n-                return Optional.of(l.lookup(sym));\n-            } catch (Throwable t) {\n-            }\n-        }\n-        try {\n-            return Optional.of(LibraryLookup.ofDefault().lookup(sym));\n-        } catch (Throwable t) {\n-            return Optional.empty();\n-        }\n-    }\n-\n-    public static final MemorySegment lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name, MemoryLayout layout) {\n+    static final MemorySegment lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name, MemoryLayout layout) {\n@@ -95,1 +79,1 @@\n-    public static final MemorySegment nonCloseableNonTransferableSegment(MemorySegment seg) {\n+    static final MemorySegment nonCloseableNonTransferableSegment(MemorySegment seg) {\n@@ -99,1 +83,1 @@\n-    public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {\n+    static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {\n@@ -109,5 +93,1 @@\n-    public static final MemorySegment upcallStub(MethodHandle handle, FunctionDescriptor fdesc) {\n-        return LINKER.upcallStub(handle, fdesc);\n-    }\n-\n-    public static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {\n@@ -118,1 +98,1 @@\n-            return upcallStub(handle, fdesc);\n+            return LINKER.upcallStub(handle, fdesc);\n@@ -124,1 +104,1 @@\n-    public static MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {\n+    static final MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {\n@@ -128,3 +108,13 @@\n-    public static MemorySegment asArray(MemorySegment seg, MemoryLayout layout, int numElements) {\n-        Objects.requireNonNull(seg);\n-        return seg.asSlice(0L, numElements * layout.byteSize());\n+    \/\/ Internals below this point\n+    private static final Optional<LibraryLookup.Symbol> lookup(LibraryLookup[] LIBRARIES, String sym) {\n+        for (LibraryLookup l : LIBRARIES) {\n+            try {\n+                return Optional.of(l.lookup(sym));\n+            } catch (Throwable t) {\n+            }\n+        }\n+        try {\n+            return Optional.of(LibraryLookup.ofDefault().lookup(sym));\n+        } catch (Throwable t) {\n+            return Optional.empty();\n+        }\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/clang\/libclang\/RuntimeHelper.java","additions":21,"deletions":31,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -75,4 +75,0 @@\n-    static final MemorySegment nonCloseableSegment(MemorySegment seg) {\n-        return seg.withAccessModes(seg.accessModes() &  ~MemorySegment.CLOSE);\n-    }\n-\n@@ -84,0 +80,4 @@\n+    private static final MemorySegment nonCloseableSegment(MemorySegment seg) {\n+        return seg.withAccessModes(seg.accessModes() &  ~MemorySegment.CLOSE);\n+    }\n+\n","filename":"src\/jdk.incubator.jextract\/share\/classes\/jdk\/internal\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}