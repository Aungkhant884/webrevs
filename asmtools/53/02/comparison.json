{"files":[{"patch":"@@ -26,0 +26,3 @@\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -49,1 +52,1 @@\n-    public CompilerLogger(String programName, Class<?> cls, ToolOutput.DualStreamToolOutput outerLog) {\n+    public CompilerLogger(String programName, Class<?> cls, DualStreamToolOutput outerLog) {\n@@ -161,1 +164,1 @@\n-        ToolOutput.DualStreamToolOutput totalOutput = (printTotals) ? getOutputs() : null;\n+        DualStreamToolOutput totalOutput = (printTotals) ? getOutputs() : null;\n","filename":"src\/org\/openjdk\/asmtools\/common\/CompilerLogger.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+\n@@ -34,1 +36,1 @@\n-    public DecompilerLogger(String programName, Class cls, ToolOutput.DualStreamToolOutput outerLog) {\n+    public DecompilerLogger(String programName, Class cls, DualStreamToolOutput outerLog) {\n","filename":"src\/org\/openjdk\/asmtools\/common\/DecompilerLogger.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,4 @@\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+\n@@ -118,1 +122,1 @@\n-    public ToolOutput.DualStreamToolOutput getOutputs() {\n+    public DualStreamToolOutput getOutputs() {\n@@ -123,1 +127,1 @@\n-    public void setOutputs(ToolOutput.DualStreamToolOutput nw) {\n+    public void setOutputs(DualStreamToolOutput nw) {\n","filename":"src\/org\/openjdk\/asmtools\/common\/Environment.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,2 +3,0 @@\n-import java.io.PrintWriter;\n-\n@@ -7,0 +5,3 @@\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+\n@@ -65,1 +66,1 @@\n-    ToolOutput.DualStreamToolOutput getOutputs();\n+    DualStreamToolOutput getOutputs();\n@@ -67,1 +68,1 @@\n-    void setOutputs(ToolOutput.DualStreamToolOutput nwoutput);\n+    void setOutputs(DualStreamToolOutput nwoutput);\n","filename":"src\/org\/openjdk\/asmtools\/common\/ILogger.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,6 @@\n+import org.openjdk.asmtools.common.inputs.StdinInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.DirOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+\n@@ -34,1 +40,1 @@\n-    protected Tool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+    protected Tool(ToolOutput toolOutput, DualStreamToolOutput outerLog) {\n@@ -53,1 +59,1 @@\n-    public T getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+    public T getEnvironment(ToolOutput toolOutput, DualStreamToolOutput outerLog) {\n@@ -75,1 +81,1 @@\n-        environment.setToolOutput(new ToolOutput.DirOutput(destDir));\n+        environment.setToolOutput(new DirOutput(destDir));\n@@ -80,1 +86,1 @@\n-            if (toolInput instanceof ToolInput.StdinInput) {\n+            if (toolInput instanceof StdinInput) {\n@@ -85,1 +91,1 @@\n-        fileList.add(new ToolInput.StdinInput());\n+        fileList.add(new StdinInput());\n","filename":"src\/org\/openjdk\/asmtools\/common\/Tool.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,179 +0,0 @@\n-package org.openjdk.asmtools.common;\n-\n-import java.io.BufferedReader;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.DataInputStream;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Optional;\n-\n-public interface ToolInput {\n-\n-    String getFileName();\n-\n-    DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException;\n-\n-    Collection<String> readAllLines() throws IOException;\n-\n-    public static class FileInput implements  ToolInput {\n-        private final String file;\n-\n-        public FileInput(String file) {\n-            this.file = file;\n-        }\n-\n-        @Override\n-        public String getFileName() {\n-            return file;\n-        }\n-\n-        public Collection<String> readAllLines() throws IOException {\n-            return Files.readAllLines(Paths.get(getFileName()));\n-        }\n-\n-        @Override\n-        public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n-            try {\n-                return new DataInputStream(new FileInputStream(this.getFileName()));\n-            } catch (IOException ex) {\n-                if (this.getFileName().matches(\"^[A-Za-z]+:.*\")) {\n-                    try {\n-                        final URI uri = new URI(this.getFileName());\n-                        final URL url = uri.toURL();\n-                        final URLConnection conn = url.openConnection();\n-                        conn.setUseCaches(false);\n-                        return new DataInputStream(conn.getInputStream());\n-                    } catch (URISyntaxException | IOException exception) {\n-                        if (logger.isPresent()){\n-                            logger.get().error(\"err.cannot.read\", this.getFileName());\n-                        }\n-                        throw exception;\n-                    }\n-                } else {\n-                    throw ex;\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return getFileName();\n-        }\n-    }\n-\n-    public static class ByteInput implements  ToolInput {\n-\n-        \/\/compilers passes input more then one times, so saving it for reuse;\n-        protected byte[] bytes;\n-\n-        public ByteInput(final byte[] bytes) {\n-            this.bytes = bytes;\n-        }\n-\n-        protected ByteInput() {\n-\n-        }\n-\n-        public ByteInput(final String bytes) {\n-            this.bytes = bytes.getBytes(StandardCharsets.UTF_8);\n-        }\n-\n-        @Override\n-        public String getFileName() {\n-            \/\/get parent is used\n-            return \"bytes\/bytes\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return getFileName();\n-        }\n-\n-        protected void init() {\n-\n-        }\n-\n-        @Override\n-        public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n-            init();\n-            return new DataInputStream(new ByteArrayInputStream(bytes));\n-        }\n-\n-        @Override\n-        public Collection<String> readAllLines() throws IOException {\n-            init();\n-            ArrayList r = new ArrayList();\n-            try(BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes), \"utf-8\"))){\n-                while(true){\n-                    String l = br.readLine();\n-                    if (l==null){\n-                        break;\n-                    }\n-                    r.add(l);\n-                }\n-            };\n-            return r;\n-        }\n-    }\n-\n-    public static class StreamInput extends ByteInput {\n-\n-        private final InputStream originalStream;\n-\n-        public StreamInput(InputStream is) {\n-            originalStream = is;\n-        }\n-\n-        @Override\n-        protected void init() {\n-            if (bytes == null){\n-                bytes=drainIs(originalStream);\n-            }\n-        }\n-\n-        public static byte[] drainIs(InputStream is) {\n-            try {\n-                byte[] buffer = new byte[32 * 1024];\n-                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                int bytesRead;\n-                while ((bytesRead = is.read(buffer)) > 0) {\n-                    baos.write(buffer, 0, bytesRead);\n-                }\n-                return baos.toByteArray();\n-            } catch (Exception ex) {\n-                throw new RuntimeException(ex);\n-            }\n-        }\n-\n-        @Override\n-        public String getFileName() {\n-            \/\/get parent is used\n-            return \"stream\/stream\";\n-        }\n-    }\n-\n-    public static class StdinInput extends StreamInput {\n-\n-        public StdinInput() {\n-            super(System.in);\n-        }\n-\n-        @Override\n-        public String getFileName() {\n-            \/\/get parent is used\n-            return \"stdin\/stdin\";\n-        }\n-    }\n-}\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolInput.java","additions":0,"deletions":179,"binary":false,"changes":179,"status":"deleted"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n@@ -65,1 +67,1 @@\n-    ToolOutput.DualStreamToolOutput outerLog;\n+    DualStreamToolOutput outerLog;\n@@ -79,1 +81,1 @@\n-    public ToolLogger(String programName, Class cls, ToolOutput.DualStreamToolOutput outerLog) {\n+    public ToolLogger(String programName, Class cls, DualStreamToolOutput outerLog) {\n@@ -124,1 +126,1 @@\n-    public ToolOutput.DualStreamToolOutput getOutputs() {\n+    public DualStreamToolOutput getOutputs() {\n@@ -129,1 +131,1 @@\n-    public void setOutputs(ToolOutput.DualStreamToolOutput nwoutput) {\n+    public void setOutputs(DualStreamToolOutput nwoutput) {\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolLogger.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,594 +0,0 @@\n-package org.openjdk.asmtools.common;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.DataOutputStream;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-import java.io.Writer;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.FileSystems;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n-\n-public interface ToolOutput {\n-\n-    DataOutputStream getDataOutputStream() throws FileNotFoundException;\n-\n-    String getCurrentClassName();\n-\n-    void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException;\n-\n-    void finishClass(String fqn) throws IOException;\n-\n-    void printlns(String line);\n-\n-    void prints(String line);\n-\n-    void prints(char line);\n-\n-    void flush();\n-\n-    public static interface DualStreamToolOutput extends ToolOutput {\n-        void printlne(String line);\n-\n-        void printe(String line);\n-\n-        void printe(char line);\n-\n-        void stacktrace(Throwable ex);\n-\n-        ToolOutput getSToolObject();\n-        ToolOutput getEToolObject();\n-\n-        @Override\n-        default DataOutputStream getDataOutputStream() throws FileNotFoundException {\n-            throw new NotImplementedException(\"Not going to happen\");\n-        }\n-    }\n-\n-    \/**\n-     * Historically, the output loggers for compilers had two stderrs, one to sdout and secon to stderr.\n-     * That should be removed, in favour of just dualstream tool output, printing output to stdout and log into stderr\n-     *\/\n-    public abstract class NamedToolOutput implements ToolOutput {\n-        private String fqn;\n-        private Optional<String> suffix;\n-        private Environment environment;\n-\n-        @Override\n-        public String getCurrentClassName() {\n-            return fqn;\n-        }\n-\n-        @Override\n-        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n-            this.fqn = fqn;\n-            this.suffix = suffix;\n-            this.environment = logger;\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            this.fqn = null;\n-        }\n-    }\n-\n-\n-    public abstract class NamedDualStreamToolOutput implements DualStreamToolOutput {\n-        private String fqn;\n-        private Optional<String> suffix;\n-        private Environment environment;\n-\n-        @Override\n-        public String getCurrentClassName() {\n-            return fqn;\n-        }\n-\n-        @Override\n-        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n-            this.fqn = fqn;\n-            this.suffix = suffix;\n-            this.environment = logger;\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            this.fqn = null;\n-        }\n-    }\n-\n-\n-    public static class DirOutput extends NamedToolOutput {\n-\n-        private final File dir;\n-        private File outfile;\n-        private FileOutputStream fos;\n-        private PrintWriter pw;\n-\n-        public DirOutput(File dir) {\n-            this.dir = dir;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return super.toString() + \" to \" + dir;\n-        }\n-\n-        @Override\n-        public void printlns(String line) {\n-            pw.println(line);\n-        }\n-\n-        @Override\n-        public void prints(String line) {\n-            pw.print(line);\n-        }\n-\n-        @Override\n-        public void prints(char line) {\n-            pw.print(line);\n-        }\n-\n-        @Override\n-        public void startClass(String fqn, Optional<String> fileExtension, Environment environment) throws IOException {\n-            super.startClass(fqn, fileExtension, environment);\n-            final String fileSeparator = FileSystems.getDefault().getSeparator();\n-            if (dir == null) {\n-                int startOfName = fqn.lastIndexOf(fileSeparator);\n-                if (startOfName != -1) {\n-                    fqn = fqn.substring(startOfName + 1);\n-                }\n-                outfile = new File(fqn + fileExtension.orElseGet(() -> \"\"));\n-            } else {\n-                environment.traceln(\"writing -d \" + dir.getPath());\n-                if (!fileSeparator.equals(\"\/\")) {\n-                    fqn = fqn.replace(\"\/\", fileSeparator);\n-                }\n-                outfile = new File(dir, fqn + fileExtension.orElseGet(() -> \"\"));\n-                File outDir = new File(outfile.getParent());\n-                if (!outDir.exists() && !outDir.mkdirs()) {\n-                    environment.error(\"err.cannot.write\", outDir.getPath());\n-                    return;\n-                }\n-            }\n-            fos = new FileOutputStream(outfile);\n-            pw = new PrintWriter(new OutputStreamWriter(fos));\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            super.finishClass(fqn);\n-            flush();\n-            try {\n-                pw.close();\n-            } finally {\n-                fos.close();\n-            }\n-\n-        }\n-\n-        @Override\n-        public void flush() {\n-            try {\n-                fos.flush();\n-            }catch (IOException ex) {\n-                throw new RuntimeException(ex);\n-            }\n-        }\n-\n-        @Override\n-        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n-            return new DataOutputStream(new BufferedOutputStream(fos));\n-        }\n-    }\n-\n-    public static class PrintWriterOutput extends NamedToolOutput {\n-\n-        protected PrintWriter os;\n-\n-        public PrintWriterOutput(OutputStream os) {\n-            \/\/although it is usually System.out, it is set from Environment, or custom\n-            this.os = new PrintWriter(os, true);\n-        }\n-        public PrintWriterOutput(Writer os) {\n-            \/\/although it is usually System.out, it is set from Environment, or custom\n-            this.os = new PrintWriter(os, true);\n-        }\n-\n-        @Override\n-        public void printlns(String line) {\n-            os.println(line);\n-        }\n-\n-        @Override\n-        public void prints(String line) {\n-            os.print(line);\n-        }\n-\n-        @Override\n-        public void prints(char line) {\n-            os.print(line);\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            super.finishClass(fqn);\n-            os.flush();\n-        }\n-\n-        @Override\n-        public void flush() {\n-            os.flush();\n-        }\n-\n-        @Override\n-        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n-            throw  new  NotImplementedException(\"Use EscapedPrintStreamOutput\");\n-        }\n-\n-\n-    }\n-\n-    public static class EscapedPrintStreamOutput extends PrintWriterOutput {\n-\n-        private final OutputStream originalStream;\n-\n-        public EscapedPrintStreamOutput(OutputStream os) {\n-            super(new uEscWriter(os));\n-            this.originalStream = os;\n-        }\n-\n-        @Override\n-        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n-            return new DataOutputStream(new BufferedOutputStream(originalStream));\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            super.finishClass(fqn);\n-            originalStream.flush();\n-        }\n-    }\n-\n-    public static class DualOutputStreamOutput extends NamedDualStreamToolOutput {\n-\n-        protected PrintWriter os;\n-        protected PrintWriter es;\n-\n-\n-        public DualOutputStreamOutput() {\n-            this(System.out, System.err);\n-        }\n-\n-        \/\/todo, remove once tests asdapts\n-        public DualOutputStreamOutput(PrintWriter os, PrintWriter er) {\n-            this.os = os;\n-            this.es = er;\n-        }\n-        public DualOutputStreamOutput(PrintStream os, PrintStream er) {\n-            \/\/although it is usually System.out, it is set from Environment, or custom\n-            this.os = new PrintWriter(os, true);\n-            \/\/although it is usually System.err, it is set from Environment, or custom\n-            this.es = new PrintWriter(er, true);\n-        }\n-\n-        @Override\n-        public void printlns(String line) {\n-            os.println(line);\n-        }\n-\n-        @Override\n-        public void prints(String line) {\n-            os.print(line);\n-        }\n-\n-        @Override\n-        public void prints(char line) {\n-            os.print(line);\n-        }\n-\n-        @Override\n-        public void printlne(String line) {\n-            es.println(line);\n-        }\n-\n-        @Override\n-        public void printe(String line) {\n-            es.print(line);\n-        }\n-\n-        @Override\n-        public void printe(char line) {\n-            es.print(line);\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            super.finishClass(fqn);\n-            try {\n-                os.flush();\n-            } finally {\n-                es.flush();\n-            }\n-        }\n-\n-        @Override\n-        public void stacktrace(Throwable ex) {\n-            ex.printStackTrace(es);\n-        }\n-\n-        @Override\n-        public ToolOutput getSToolObject() {\n-            return new PrintWriterOutput(os);\n-        }\n-\n-        @Override\n-        public ToolOutput getEToolObject() {\n-            return new PrintWriterOutput(es);\n-        }\n-\n-        @Override\n-        public void flush() {\n-            this.os.flush();\n-            this.es.flush();\n-        }\n-    }\n-\n-    public static class SingleDualOutputStreamOutput extends DualOutputStreamOutput {\n-        public SingleDualOutputStreamOutput() {\n-            this(System.err);\n-        }\n-\n-        public SingleDualOutputStreamOutput(PrintWriter er) {\n-            super(er, er);\n-        }\n-\n-        public SingleDualOutputStreamOutput(PrintStream er) {\n-            super(er, er);\n-        }\n-    }\n-\n-    public static class ByteOutput extends NamedToolOutput {\n-        private final ArrayList<NamedBinary> outputs = new ArrayList<>();\n-        private ByteArrayOutputStream currentClass;\n-\n-        public ArrayList<NamedBinary> getOutputs() {\n-            return outputs;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return  outputs.stream().map(a->a.toString()).collect(Collectors.joining(\"\\n\"));\n-        }\n-\n-        @Override\n-        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n-            return new DataOutputStream(currentClass);\n-        }\n-\n-\n-        @Override\n-        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n-            super.startClass(fqn, suffix, logger);\n-            currentClass = new ByteArrayOutputStream(1024);\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            if (!getCurrentClassName().equals(fqn)) {\n-                throw new RuntimeException(\"Ended different class - \" + fqn + \" - then started - \" + super.fqn);\n-            }\n-            outputs.add(new NamedBinary(fqn, currentClass.toByteArray()));\n-            super.fqn = null;\n-            currentClass = null;\n-\n-        }\n-\n-        @Override\n-        public void printlns(String line) {\n-            try {\n-                currentClass.write((line + \"\\n\").getBytes(StandardCharsets.UTF_8));\n-            } catch (IOException ex) {\n-                throw new RuntimeException(ex);\n-            }\n-        }\n-\n-        @Override\n-        public void prints(String line) {\n-            try {\n-                currentClass.write(line.getBytes(StandardCharsets.UTF_8));\n-            } catch (IOException ex) {\n-                throw new RuntimeException(ex);\n-            }\n-        }\n-\n-        @Override\n-        public void prints(char line) {\n-            currentClass.write(line);\n-        }\n-\n-        @Override\n-        public void flush() {\n-\n-        }\n-\n-        public class NamedBinary {\n-            private final String fqn;\n-            private final byte[] body;\n-\n-            public NamedBinary(String fqn, byte[] body) {\n-                this.fqn = fqn;\n-                this.body = body;\n-            }\n-\n-            public String getFqn() {\n-                return fqn;\n-            }\n-\n-            public byte[] getBody() {\n-                return body;\n-            }\n-\n-            @Override\n-            public String toString() {\n-                return fqn + \": \" + body.length + \"b\";\n-            }\n-        }\n-    }\n-\n-    public static class TextOutput extends NamedToolOutput {\n-        private final ArrayList<NamedSource> outputs = new ArrayList<>();\n-        private StringBuilder currentClass;\n-\n-        public ArrayList<NamedSource> getOutputs() {\n-            return outputs;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return  outputs.stream().map(a->a.toString()).collect(Collectors.joining(\"\\n\"));\n-        }\n-\n-        @Override\n-        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n-            return null; \/\/If you are here, you probbaly wanted ToolOutput.ByteOutput for assmbled binary output\n-        }\n-\n-        @Override\n-        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n-            super.startClass(fqn, suffix, logger);\n-            currentClass = new StringBuilder();\n-        }\n-\n-        @Override\n-        public void finishClass(String fqn) throws IOException {\n-            if (!getCurrentClassName().equals(fqn)) {\n-                throw new RuntimeException(\"Ended different class - \" + fqn + \" - then started - \" + super.fqn);\n-            }\n-            outputs.add(new NamedSource(fqn, currentClass.toString()));\n-            super.fqn = null;\n-            currentClass = null;\n-\n-        }\n-\n-        @Override\n-        public void printlns(String line) {\n-            currentClass.append(line).append(\"\\n\");\n-        }\n-\n-        @Override\n-        public void prints(String line) {\n-            currentClass.append(line);\n-        }\n-\n-        @Override\n-        public void prints(char line) {\n-            currentClass.append(line);\n-        }\n-\n-        @Override\n-        public void flush() {\n-\n-        }\n-\n-        public class NamedSource {\n-            private final String fqn;\n-            private final String body;\n-\n-            public NamedSource(String fqn, String body) {\n-                this.fqn = fqn;\n-                this.body = body;\n-            }\n-\n-            public String getFqn() {\n-                return fqn;\n-            }\n-\n-            public String getBody() {\n-                return body;\n-            }\n-\n-            @Override\n-            public String toString() {\n-                return \"\/**********\\n\" + fqn + \"\\n**********\/\\n\" + body + \"\\n\/*end of \" + fqn + \"*\/\";\n-            }\n-        }\n-    }\n-\n-    public static class StringLog extends NamedDualStreamToolOutput {\n-\n-        private final StringBuilder log = new StringBuilder();\n-\n-        @Override\n-        public String toString() {\n-            return log.toString();\n-        }\n-\n-        @Override\n-        public void printlns(String line) {\n-            log.append(line).append(\"\\n\");\n-        }\n-\n-        @Override\n-        public void prints(String line) {\n-            log.append(line);\n-        }\n-\n-        @Override\n-        public void prints(char line) {\n-            log.append(line);\n-        }\n-\n-        @Override\n-        public void flush() {\n-\n-        }\n-\n-        @Override\n-        public void printlne(String line) {\n-            log.append(line).append(\"\\n\");\n-        }\n-\n-        @Override\n-        public void printe(String line) {\n-            log.append(line);\n-        }\n-\n-        @Override\n-        public void printe(char line) {\n-            log.append(line);\n-        }\n-\n-        @Override\n-        public void stacktrace(Throwable ex) {\n-            log.append(exToString(ex));\n-        }\n-\n-        @Override\n-        public ToolOutput getSToolObject() {\n-            return this;\n-        }\n-\n-        @Override\n-        public ToolOutput getEToolObject() {\n-            return this;\n-        }\n-    }\n-\n-    public static String exToString(Throwable e) {\n-        ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        e.printStackTrace(new PrintStream(out, true, StandardCharsets.UTF_8));\n-        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n-    }\n-}\n-\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolOutput.java","additions":0,"deletions":594,"binary":false,"changes":594,"status":"deleted"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.inputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class ByteInput implements ToolInput {\n+\n+    \/\/compilers passes input more then one times, so saving it for reuse;\n+    protected byte[] bytes;\n+\n+    public ByteInput(final byte[] bytes) {\n+        this.bytes = bytes;\n+    }\n+\n+    protected ByteInput() {\n+\n+    }\n+\n+    @Override\n+    public String getFileName() {\n+        \/\/get parent is used\n+        return \"bytes\/bytes\";\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return getFileName();\n+    }\n+\n+    protected void init() {\n+\n+    }\n+\n+    @Override\n+    public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n+        init();\n+        return new DataInputStream(new ByteArrayInputStream(bytes));\n+    }\n+\n+    @Override\n+    public Collection<String> readAllLines() throws IOException {\n+        init();\n+        ArrayList r = new ArrayList();\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes), \"utf-8\"))) {\n+            while (true) {\n+                String l = br.readLine();\n+                if (l == null) {\n+                    break;\n+                }\n+                r.add(l);\n+            }\n+        }\n+        ;\n+        return r;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/ByteInput.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.inputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class FileInput implements ToolInput {\n+    private final String file;\n+\n+    public FileInput(String file) {\n+        this.file = file;\n+    }\n+\n+    @Override\n+    public String getFileName() {\n+        return file;\n+    }\n+\n+    public Collection<String> readAllLines() throws IOException {\n+        return Files.readAllLines(Paths.get(getFileName()));\n+    }\n+\n+    @Override\n+    public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n+        try {\n+            return new DataInputStream(new FileInputStream(this.getFileName()));\n+        } catch (IOException ex) {\n+            if (this.getFileName().matches(\"^[A-Za-z]+:.*\")) {\n+                try {\n+                    final URI uri = new URI(this.getFileName());\n+                    final URL url = uri.toURL();\n+                    final URLConnection conn = url.openConnection();\n+                    conn.setUseCaches(false);\n+                    return new DataInputStream(conn.getInputStream());\n+                } catch (URISyntaxException | IOException exception) {\n+                    if (logger.isPresent()) {\n+                        logger.get().error(\"err.cannot.read\", this.getFileName());\n+                    }\n+                    throw exception;\n+                }\n+            } else {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return getFileName();\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/FileInput.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.inputs;\n+\n+public class StdinInput extends StreamInput {\n+\n+    public StdinInput() {\n+        super(System.in);\n+    }\n+\n+    @Override\n+    public String getFileName() {\n+        \/\/get parent is used\n+        return \"stdin\/stdin\";\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/StdinInput.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.inputs;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+public class StreamInput extends ByteInput {\n+\n+    private final InputStream originalStream;\n+\n+    public StreamInput(InputStream is) {\n+        originalStream = is;\n+    }\n+\n+    @Override\n+    protected void init() {\n+        if (bytes == null) {\n+            bytes = drainIs(originalStream);\n+        }\n+    }\n+\n+    public static byte[] drainIs(InputStream is) {\n+        try {\n+            byte[] buffer = new byte[32 * 1024];\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            int bytesRead;\n+            while ((bytesRead = is.read(buffer)) > 0) {\n+                baos.write(buffer, 0, bytesRead);\n+            }\n+            return baos.toByteArray();\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public String getFileName() {\n+        \/\/get parent is used\n+        return \"stream\/stream\";\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/StreamInput.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.inputs;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+public class StringInput extends ByteInput {\n+\n+    public StringInput(final String bytes) {\n+        super(bytes.getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    @Override\n+    public String getFileName() {\n+        \/\/get parent is used\n+        return \"string\/string\";\n+    }\n+\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/StringInput.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.inputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public interface ToolInput {\n+\n+    String getFileName();\n+\n+    DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException;\n+\n+    Collection<String> readAllLines() throws IOException;\n+\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/ToolInput.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public class ByteOutput extends NamedToolOutput {\n+    private final ArrayList<NamedBinary> outputs = new ArrayList<>();\n+    private ByteArrayOutputStream currentClass;\n+\n+    public ArrayList<NamedBinary> getOutputs() {\n+        return outputs;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return outputs.stream().map(a -> a.toString()).collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    @Override\n+    public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+        return new DataOutputStream(currentClass);\n+    }\n+\n+\n+    @Override\n+    public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+        super.startClass(fqn, suffix, logger);\n+        currentClass = new ByteArrayOutputStream(1024);\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        if (!getCurrentClassName().equals(fqn)) {\n+            throw new RuntimeException(\"Ended different class - \" + fqn + \" - then started - \" + super.fqn);\n+        }\n+        outputs.add(new NamedBinary(fqn, currentClass.toByteArray()));\n+        super.fqn = null;\n+        currentClass = null;\n+\n+    }\n+\n+    @Override\n+    public void printlns(String line) {\n+        try {\n+            currentClass.write((line + \"\\n\").getBytes(StandardCharsets.UTF_8));\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public void prints(String line) {\n+        try {\n+            currentClass.write(line.getBytes(StandardCharsets.UTF_8));\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public void prints(char line) {\n+        currentClass.write(line);\n+    }\n+\n+    @Override\n+    public void flush() {\n+\n+    }\n+\n+    public class NamedBinary {\n+        private final String fqn;\n+        private final byte[] body;\n+\n+        public NamedBinary(String fqn, byte[] body) {\n+            this.fqn = fqn;\n+            this.body = body;\n+        }\n+\n+        public String getFqn() {\n+            return fqn;\n+        }\n+\n+        public byte[] getBody() {\n+            return body;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return fqn + \": \" + body.length + \"b\";\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/ByteOutput.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.file.FileSystems;\n+import java.util.Optional;\n+\n+public class DirOutput extends NamedToolOutput {\n+\n+    private final File dir;\n+    private File outfile;\n+    private FileOutputStream fos;\n+    private PrintWriter pw;\n+\n+    public DirOutput(File dir) {\n+        this.dir = dir;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return super.toString() + \" to \" + dir;\n+    }\n+\n+    @Override\n+    public void printlns(String line) {\n+        pw.println(line);\n+    }\n+\n+    @Override\n+    public void prints(String line) {\n+        pw.print(line);\n+    }\n+\n+    @Override\n+    public void prints(char line) {\n+        pw.print(line);\n+    }\n+\n+    @Override\n+    public void startClass(String fqn, Optional<String> fileExtension, Environment environment) throws IOException {\n+        super.startClass(fqn, fileExtension, environment);\n+        final String fileSeparator = FileSystems.getDefault().getSeparator();\n+        if (dir == null) {\n+            int startOfName = fqn.lastIndexOf(fileSeparator);\n+            if (startOfName != -1) {\n+                fqn = fqn.substring(startOfName + 1);\n+            }\n+            outfile = new File(fqn + fileExtension.orElseGet(() -> \"\"));\n+        } else {\n+            environment.traceln(\"writing -d \" + dir.getPath());\n+            if (!fileSeparator.equals(\"\/\")) {\n+                fqn = fqn.replace(\"\/\", fileSeparator);\n+            }\n+            outfile = new File(dir, fqn + fileExtension.orElseGet(() -> \"\"));\n+            File outDir = new File(outfile.getParent());\n+            if (!outDir.exists() && !outDir.mkdirs()) {\n+                environment.error(\"err.cannot.write\", outDir.getPath());\n+                return;\n+            }\n+        }\n+        fos = new FileOutputStream(outfile);\n+        pw = new PrintWriter(new OutputStreamWriter(fos));\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        super.finishClass(fqn);\n+        flush();\n+        try {\n+            pw.close();\n+        } finally {\n+            fos.close();\n+        }\n+\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            fos.flush();\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+        return new DataOutputStream(new BufferedOutputStream(fos));\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/DirOutput.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.uEscWriter;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+public class EscapedPrintStreamOutput extends PrintWriterOutput {\n+\n+    private final OutputStream originalStream;\n+\n+    public EscapedPrintStreamOutput(OutputStream os) {\n+        super(new uEscWriter(os));\n+        this.originalStream = os;\n+    }\n+\n+    @Override\n+    public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+        return new DataOutputStream(new BufferedOutputStream(originalStream));\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        super.finishClass(fqn);\n+        originalStream.flush();\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/EscapedPrintStreamOutput.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+\/**\n+ * Historically, the output loggers for compilers had two stderrs, one to sdout and secon to stderr.\n+ * That should be removed, in favour of just dualstream tool output, printing output to stdout and log into stderr\n+ *\/\n+public abstract class NamedToolOutput implements ToolOutput {\n+    protected String fqn;\n+    private Optional<String> suffix;\n+    private Environment environment;\n+\n+    @Override\n+    public String getCurrentClassName() {\n+        return fqn;\n+    }\n+\n+    @Override\n+    public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+        this.fqn = fqn;\n+        this.suffix = suffix;\n+        this.environment = logger;\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        this.fqn = null;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/NamedToolOutput.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.NotImplementedException;\n+\n+import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+\n+public class PrintWriterOutput extends NamedToolOutput {\n+\n+    protected PrintWriter os;\n+\n+    public PrintWriterOutput(OutputStream os) {\n+        \/\/although it is usually System.out, it is set from Environment, or custom\n+        this.os = new PrintWriter(os, true);\n+    }\n+\n+    public PrintWriterOutput(Writer os) {\n+        \/\/although it is usually System.out, it is set from Environment, or custom\n+        this.os = new PrintWriter(os, true);\n+    }\n+\n+    @Override\n+    public void printlns(String line) {\n+        os.println(line);\n+    }\n+\n+    @Override\n+    public void prints(String line) {\n+        os.print(line);\n+    }\n+\n+    @Override\n+    public void prints(char line) {\n+        os.print(line);\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        super.finishClass(fqn);\n+        os.flush();\n+    }\n+\n+    @Override\n+    public void flush() {\n+        os.flush();\n+    }\n+\n+    @Override\n+    public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+        throw new NotImplementedException(\"Use EscapedPrintStreamOutput\");\n+    }\n+\n+\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/PrintWriterOutput.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public class TextOutput extends NamedToolOutput {\n+    private final ArrayList<NamedSource> outputs = new ArrayList<>();\n+    private StringBuilder currentClass;\n+\n+    public ArrayList<NamedSource> getOutputs() {\n+        return outputs;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return outputs.stream().map(a -> a.toString()).collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    @Override\n+    public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+        return null; \/\/If you are here, you probbaly wanted ToolOutput.ByteOutput for assmbled binary output\n+    }\n+\n+    @Override\n+    public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+        super.startClass(fqn, suffix, logger);\n+        currentClass = new StringBuilder();\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        if (!getCurrentClassName().equals(fqn)) {\n+            throw new RuntimeException(\"Ended different class - \" + fqn + \" - then started - \" + super.fqn);\n+        }\n+        outputs.add(new NamedSource(fqn, currentClass.toString()));\n+        super.fqn = null;\n+        currentClass = null;\n+\n+    }\n+\n+    @Override\n+    public void printlns(String line) {\n+        currentClass.append(line).append(\"\\n\");\n+    }\n+\n+    @Override\n+    public void prints(String line) {\n+        currentClass.append(line);\n+    }\n+\n+    @Override\n+    public void prints(char line) {\n+        currentClass.append(line);\n+    }\n+\n+    @Override\n+    public void flush() {\n+\n+    }\n+\n+    public class NamedSource {\n+        private final String fqn;\n+        private final String body;\n+\n+        public NamedSource(String fqn, String body) {\n+            this.fqn = fqn;\n+            this.body = body;\n+        }\n+\n+        public String getFqn() {\n+            return fqn;\n+        }\n+\n+        public String getBody() {\n+            return body;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"\/**********\\n\" + fqn + \"\\n**********\/\\n\" + body + \"\\n\/*end of \" + fqn + \"*\/\";\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/TextOutput.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.asmtools.common.outputs;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+\n+\n+public interface ToolOutput {\n+\n+    DataOutputStream getDataOutputStream() throws FileNotFoundException;\n+\n+    String getCurrentClassName();\n+\n+    void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException;\n+\n+    void finishClass(String fqn) throws IOException;\n+\n+    void printlns(String line);\n+\n+    void prints(String line);\n+\n+    void prints(char line);\n+\n+    void flush();\n+\n+\n+    public static String exToString(Throwable e) {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        e.printStackTrace(new PrintStream(out, true, StandardCharsets.UTF_8));\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/ToolOutput.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs.log;\n+\n+import org.openjdk.asmtools.common.outputs.PrintWriterOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+public class DualOutputStreamOutput extends NamedDualStreamToolOutput {\n+\n+    protected PrintWriter os;\n+    protected PrintWriter es;\n+\n+\n+    public DualOutputStreamOutput() {\n+        this(System.out, System.err);\n+    }\n+\n+    \/\/todo, remove once tests asdapts\n+    public DualOutputStreamOutput(PrintWriter os, PrintWriter er) {\n+        this.os = os;\n+        this.es = er;\n+    }\n+\n+    public DualOutputStreamOutput(PrintStream os, PrintStream er) {\n+        \/\/although it is usually System.out, it is set from Environment, or custom\n+        this.os = new PrintWriter(os, true);\n+        \/\/although it is usually System.err, it is set from Environment, or custom\n+        this.es = new PrintWriter(er, true);\n+    }\n+\n+    @Override\n+    public void printlns(String line) {\n+        os.println(line);\n+    }\n+\n+    @Override\n+    public void prints(String line) {\n+        os.print(line);\n+    }\n+\n+    @Override\n+    public void prints(char line) {\n+        os.print(line);\n+    }\n+\n+    @Override\n+    public void printlne(String line) {\n+        es.println(line);\n+    }\n+\n+    @Override\n+    public void printe(String line) {\n+        es.print(line);\n+    }\n+\n+    @Override\n+    public void printe(char line) {\n+        es.print(line);\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        super.finishClass(fqn);\n+        try {\n+            os.flush();\n+        } finally {\n+            es.flush();\n+        }\n+    }\n+\n+    @Override\n+    public void stacktrace(Throwable ex) {\n+        ex.printStackTrace(es);\n+    }\n+\n+    @Override\n+    public ToolOutput getSToolObject() {\n+        return new PrintWriterOutput(os);\n+    }\n+\n+    @Override\n+    public ToolOutput getEToolObject() {\n+        return new PrintWriterOutput(es);\n+    }\n+\n+    @Override\n+    public void flush() {\n+        this.os.flush();\n+        this.es.flush();\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/log\/DualOutputStreamOutput.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs.log;\n+\n+import org.openjdk.asmtools.common.NotImplementedException;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+\n+import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n+\n+public interface DualStreamToolOutput extends ToolOutput {\n+    void printlne(String line);\n+\n+    void printe(String line);\n+\n+    void printe(char line);\n+\n+    void stacktrace(Throwable ex);\n+\n+    ToolOutput getSToolObject();\n+\n+    ToolOutput getEToolObject();\n+\n+    @Override\n+    default DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+        throw new NotImplementedException(\"Not going to happen\");\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/log\/DualStreamToolOutput.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs.log;\n+\n+import org.openjdk.asmtools.common.Environment;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+public abstract class NamedDualStreamToolOutput implements DualStreamToolOutput {\n+    private String fqn;\n+    private Optional<String> suffix;\n+    private Environment environment;\n+\n+    @Override\n+    public String getCurrentClassName() {\n+        return fqn;\n+    }\n+\n+    @Override\n+    public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+        this.fqn = fqn;\n+        this.suffix = suffix;\n+        this.environment = logger;\n+    }\n+\n+    @Override\n+    public void finishClass(String fqn) throws IOException {\n+        this.fqn = null;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/log\/NamedDualStreamToolOutput.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs.log;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+public class SingleDualOutputStreamOutput extends DualOutputStreamOutput {\n+    public SingleDualOutputStreamOutput() {\n+        this(System.err);\n+    }\n+\n+    public SingleDualOutputStreamOutput(PrintWriter er) {\n+        super(er, er);\n+    }\n+\n+    public SingleDualOutputStreamOutput(PrintStream er) {\n+        super(er, er);\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/log\/SingleDualOutputStreamOutput.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.common.outputs.log;\n+\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+\n+public class StringLog extends NamedDualStreamToolOutput {\n+\n+    private final StringBuilder log = new StringBuilder();\n+\n+    @Override\n+    public String toString() {\n+        return log.toString();\n+    }\n+\n+    @Override\n+    public void printlns(String line) {\n+        log.append(line).append(\"\\n\");\n+    }\n+\n+    @Override\n+    public void prints(String line) {\n+        log.append(line);\n+    }\n+\n+    @Override\n+    public void prints(char line) {\n+        log.append(line);\n+    }\n+\n+    @Override\n+    public void flush() {\n+\n+    }\n+\n+    @Override\n+    public void printlne(String line) {\n+        log.append(line).append(\"\\n\");\n+    }\n+\n+    @Override\n+    public void printe(String line) {\n+        log.append(line);\n+    }\n+\n+    @Override\n+    public void printe(char line) {\n+        log.append(line);\n+    }\n+\n+    @Override\n+    public void stacktrace(Throwable ex) {\n+        log.append(ToolOutput.exToString(ex));\n+    }\n+\n+    @Override\n+    public ToolOutput getSToolObject() {\n+        return this;\n+    }\n+\n+    @Override\n+    public ToolOutput getEToolObject() {\n+        return this;\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/log\/StringLog.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ClassData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -144,1 +147,1 @@\n-        public JasmBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+        public JasmBuilder(ToolOutput toolOutput, DualStreamToolOutput logger) {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmEnvironment.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -29,2 +31,0 @@\n-import java.io.PrintWriter;\n-\n@@ -34,1 +34,1 @@\n-        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n+        super(toolOutput, new SingleDualOutputStreamOutput());\n@@ -37,1 +37,1 @@\n-    protected JasmTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+    protected JasmTool(ToolOutput toolOutput, DualStreamToolOutput logger) {\n@@ -42,1 +42,1 @@\n-    public JasmEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+    public JasmEnvironment getEnvironment(ToolOutput toolOutput, DualStreamToolOutput logger) {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmTool.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,7 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.inputs.FileInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.EscapedPrintStreamOutput;\n+import org.openjdk.asmtools.common.outputs.PrintWriterOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -27,1 +33,1 @@\n-import org.openjdk.asmtools.common.ToolInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n@@ -71,1 +77,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, String... argv) {\n@@ -76,1 +82,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n@@ -84,1 +90,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput... toolInputs) {\n@@ -98,1 +104,1 @@\n-        super(new ToolOutput.PrintWriterOutput(ref));\n+        super(new PrintWriterOutput(ref));\n@@ -114,1 +120,1 @@\n-        Main compiler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), new ToolOutput.SingleDualOutputStreamOutput(), argv);\n+        Main compiler = new Main(new EscapedPrintStreamOutput(System.out), new SingleDualOutputStreamOutput(), argv);\n@@ -198,1 +204,1 @@\n-                            this.environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n+                            this.environment.setOutputs(new DualOutputStreamOutput());\n@@ -260,1 +266,1 @@\n-                            fileList.add(new ToolInput.FileInput(argv[i]));\n+                            fileList.add(new FileInput(argv[i]));\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Main.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -114,1 +117,1 @@\n-        public JcoderBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+        public JcoderBuilder(ToolOutput toolOutput, DualStreamToolOutput log) {\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderEnvironment.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -31,1 +33,1 @@\n-        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n+        super(toolOutput, new SingleDualOutputStreamOutput());\n@@ -34,1 +36,1 @@\n-    protected JcoderTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+    protected JcoderTool(ToolOutput toolOutput, DualStreamToolOutput logger) {\n@@ -39,1 +41,1 @@\n-    public JcoderEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+    public JcoderEnvironment getEnvironment(ToolOutput toolOutput, DualStreamToolOutput log) {\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderTool.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,2 +25,7 @@\n-import org.openjdk.asmtools.common.ToolInput;\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.inputs.FileInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.EscapedPrintStreamOutput;\n+import org.openjdk.asmtools.common.outputs.PrintWriterOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -58,1 +63,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, String... argv) {\n@@ -62,1 +67,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n@@ -70,1 +75,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput... toolInputs) {\n@@ -84,1 +89,1 @@\n-        super(new ToolOutput.PrintWriterOutput(ref));\n+        super(new PrintWriterOutput(ref));\n@@ -100,1 +105,1 @@\n-        Main compiler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), argv);\n+        Main compiler = new Main(new EscapedPrintStreamOutput(System.out), argv);\n@@ -163,1 +168,1 @@\n-                    case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH -> environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n+                    case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH -> environment.setOutputs(new DualOutputStreamOutput());\n@@ -203,1 +208,1 @@\n-                            fileList.add(new ToolInput.FileInput(argv[i]));\n+                            fileList.add(new FileInput(argv[i]));\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -78,1 +79,1 @@\n-        public JDecBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+        public JDecBuilder(ToolOutput toolOutput, DualStreamToolOutput log) {\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/JdecEnvironment.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,4 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.EscapedPrintStreamOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -32,1 +35,1 @@\n-    protected JdecTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+    protected JdecTool(ToolOutput toolOutput, DualStreamToolOutput log) {\n@@ -37,1 +40,1 @@\n-        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n+        super(toolOutput, new SingleDualOutputStreamOutput());\n@@ -41,1 +44,1 @@\n-        this(new ToolOutput.EscapedPrintStreamOutput(toolOutput));\n+        this(new EscapedPrintStreamOutput(toolOutput));\n@@ -45,1 +48,1 @@\n-    public JdecEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+    public JdecEnvironment getEnvironment(ToolOutput toolOutput, DualStreamToolOutput log) {\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/JdecTool.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,2 +25,7 @@\n-import org.openjdk.asmtools.common.ToolInput;\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.inputs.FileInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.EscapedPrintStreamOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -43,1 +48,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput... toolInputs) {\n@@ -49,1 +54,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n@@ -57,1 +62,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, String... argv) {\n@@ -61,2 +66,2 @@\n-    public Main(ToolOutput.EscapedPrintStreamOutput toolOutput, String[] argv) {\n-        this(toolOutput, new ToolOutput.SingleDualOutputStreamOutput(), argv);\n+    public Main(EscapedPrintStreamOutput toolOutput, String[] argv) {\n+        this(toolOutput, new SingleDualOutputStreamOutput(), argv);\n@@ -67,1 +72,1 @@\n-        Main decoder = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), argv);\n+        Main decoder = new Main(new EscapedPrintStreamOutput(System.out), argv);\n@@ -100,1 +105,1 @@\n-                    this.environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n+                    this.environment.setOutputs(new DualOutputStreamOutput());\n@@ -117,1 +122,1 @@\n-                        fileList.add(new ToolInput.FileInput(arg));\n+                        fileList.add(new FileInput(arg));\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -32,1 +32,0 @@\n-import java.io.PrintWriter;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ConstantPool.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -28,1 +28,0 @@\n-import java.io.PrintWriter;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Indenter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -45,1 +46,1 @@\n-        public JdisBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+        public JdisBuilder(ToolOutput toolOutput, DualStreamToolOutput outerLog) {\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/JdisEnvironment.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -31,1 +33,1 @@\n-    protected JdisTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+    protected JdisTool(ToolOutput toolOutput, DualStreamToolOutput outerLog) {\n@@ -36,1 +38,1 @@\n-        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n+        super(toolOutput, new SingleDualOutputStreamOutput());\n@@ -40,1 +42,1 @@\n-    public JdisEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+    public JdisEnvironment getEnvironment(ToolOutput toolOutput, DualStreamToolOutput outerLog) {\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/JdisTool.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,2 +25,6 @@\n-import org.openjdk.asmtools.common.ToolInput;\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.inputs.FileInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.EscapedPrintStreamOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -46,1 +50,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput... toolInputs) {\n@@ -54,1 +58,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n@@ -67,1 +71,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger, String... argv) {\n+    public Main(ToolOutput toolOutput, DualStreamToolOutput logger, String... argv) {\n@@ -74,1 +78,1 @@\n-        Main disassembler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), argv);\n+        Main disassembler = new Main(new EscapedPrintStreamOutput(System.out), argv);\n@@ -161,1 +165,1 @@\n-                    this.environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n+                    this.environment.setOutputs(new DualOutputStreamOutput());\n@@ -178,1 +182,1 @@\n-                        fileList.add(new ToolInput.FileInput(arg));\n+                        fileList.add(new FileInput(arg));\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -5,2 +5,6 @@\n-import org.openjdk.asmtools.common.ToolInput;\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.inputs.StringInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.common.outputs.TextOutput;\n@@ -16,1 +20,1 @@\n-        final ToolOutput.StringLog log;\n+        final StringLog log;\n@@ -19,1 +23,1 @@\n-        public LogAndReturn(ToolOutput.StringLog log, int result) {\n+        public LogAndReturn(StringLog log, int result) {\n@@ -26,1 +30,1 @@\n-        final ToolOutput.TextOutput output;\n+        final TextOutput output;\n@@ -28,1 +32,1 @@\n-        public LogAndTextResults(ToolOutput.TextOutput output, ToolOutput.StringLog log, int result) {\n+        public LogAndTextResults(TextOutput output, StringLog log, int result) {\n@@ -35,1 +39,1 @@\n-        final ToolOutput.ByteOutput output;\n+        final ByteOutput output;\n@@ -37,1 +41,1 @@\n-        public LogAndBinResults(ToolOutput.ByteOutput output, ToolOutput.StringLog log, int result) {\n+        public LogAndBinResults(ByteOutput output, StringLog log, int result) {\n@@ -46,1 +50,1 @@\n-            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new ByteInput(clazz[i]);\n@@ -48,2 +52,2 @@\n-        ToolOutput.TextOutput decodedFiles = new ToolOutput.TextOutput();\n-        ToolOutput.StringLog decodeLog = new ToolOutput.StringLog();\n+        TextOutput decodedFiles = new TextOutput();\n+        StringLog decodeLog = new StringLog();\n@@ -63,1 +67,1 @@\n-            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new StringInput(clazz[i]);\n@@ -65,2 +69,2 @@\n-        ToolOutput.ByteOutput encodedFiles = new ToolOutput.ByteOutput();\n-        ToolOutput.StringLog encodeLog = new ToolOutput.StringLog();\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n@@ -77,1 +81,1 @@\n-            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new ByteInput(clazz[i]);\n@@ -79,2 +83,2 @@\n-        ToolOutput.TextOutput decodedFiles = new ToolOutput.TextOutput();\n-        ToolOutput.StringLog decodeLog = new ToolOutput.StringLog();\n+        TextOutput decodedFiles = new TextOutput();\n+        StringLog decodeLog = new StringLog();\n@@ -94,1 +98,1 @@\n-            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new StringInput(clazz[i]);\n@@ -96,2 +100,2 @@\n-        ToolOutput.ByteOutput encodedFiles = new ToolOutput.ByteOutput();\n-        ToolOutput.StringLog encodeLog = new ToolOutput.StringLog();\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n","filename":"test\/java\/org\/openjdk\/asmtools\/InputOutputTests.java","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -3,1 +3,4 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.PrintWriterOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n@@ -23,1 +26,1 @@\n-        return new ToolOutput.PrintWriterOutput(toolOutput);\n+        return new PrintWriterOutput(toolOutput);\n@@ -49,2 +52,2 @@\n-    public ToolOutput.DualStreamToolOutput getLoggers() {\n-        return new ToolOutput.SingleDualOutputStreamOutput(getErrorOutput());\n+    public DualStreamToolOutput getLoggers() {\n+        return new SingleDualOutputStreamOutput(getErrorOutput());\n","filename":"test\/java\/org\/openjdk\/asmtools\/ThreeStringWriters.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -5,2 +5,5 @@\n-import org.openjdk.asmtools.common.ToolInput;\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n@@ -17,3 +20,3 @@\n-        ToolInput file = new ToolInput.ByteInput(jasmFile);\n-        ToolOutput.ByteOutput output = new ToolOutput.ByteOutput();\n-        ToolOutput.DualStreamToolOutput log = new ToolOutput.SingleDualOutputStreamOutput(); \/\/todo hide to ToolOutput.StringLog once done\n+        ToolInput file = new ByteInput(jasmFile);\n+        ByteOutput output = new ByteOutput();\n+        DualStreamToolOutput log = new SingleDualOutputStreamOutput(); \/\/todo hide to ToolOutput.StringLog once done\n@@ -41,3 +44,3 @@\n-        ToolInput file = new ToolInput.ByteInput(jasmFile);\n-        ToolOutput.ByteOutput output = new ToolOutput.ByteOutput();\n-        ToolOutput.DualStreamToolOutput log = new ToolOutput.SingleDualOutputStreamOutput(); \/\/todo hide to ToolOutput.StringLog once done\n+        ToolInput file = new ByteInput(jasmFile);\n+        ByteOutput output = new ByteOutput();\n+        DualStreamToolOutput log = new SingleDualOutputStreamOutput(); \/\/todo hide to ToolOutput.StringLog once done\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/MultipleFilesInSingleJasmTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -5,2 +5,5 @@\n-import org.openjdk.asmtools.common.ToolInput;\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n@@ -17,3 +20,3 @@\n-        ToolInput file = new ToolInput.ByteInput(jcodFile);\n-        ToolOutput.ByteOutput output = new ToolOutput.ByteOutput();\n-        ToolOutput.DualStreamToolOutput log = new ToolOutput.SingleDualOutputStreamOutput(); \/\/todo hide to ToolOutput.StringLog once done\n+        ToolInput file = new ByteInput(jcodFile);\n+        ByteOutput output = new ByteOutput();\n+        DualStreamToolOutput log = new SingleDualOutputStreamOutput(); \/\/todo hide to ToolOutput.StringLog once done\n","filename":"test\/java\/org\/openjdk\/asmtools\/jcoder\/MultipleFilesInSingleJcoderTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -8,1 +8,2 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.EscapedPrintStreamOutput;\n+import org.openjdk.asmtools.common.outputs.log.SingleDualOutputStreamOutput;\n@@ -110,1 +111,1 @@\n-        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(new ToolOutput.EscapedPrintStreamOutput(System.out), new ToolOutput.SingleDualOutputStreamOutput(), sourceWithoutSuper.getAbsolutePath(), \"-d\", dir.getAbsolutePath());\n+        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(new EscapedPrintStreamOutput(System.out), new SingleDualOutputStreamOutput(), sourceWithoutSuper.getAbsolutePath(), \"-d\", dir.getAbsolutePath());\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/MainTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}