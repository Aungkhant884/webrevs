{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n@@ -89,1 +90,1 @@\n-    public void setInputFileName(String inputFileName) throws IOException {\n+    public void setInputFileName(ToolInput inputFileName) throws IOException {\n@@ -92,1 +93,1 @@\n-        fileContent.addAll(Files.readAllLines(Paths.get(inputFileName)));\n+        fileContent.addAll(inputFileName.readAllLines());\n","filename":"src\/org\/openjdk\/asmtools\/common\/CompilerLogger.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n@@ -36,0 +37,1 @@\n+import java.util.Optional;\n@@ -48,2 +50,2 @@\n-    \/\/ processed input file\n-    private String inputFileName;\n+    \/\/ processed input file or stdin\n+    private ToolInput inputFileName;\n@@ -63,1 +65,1 @@\n-    public void setInputFile(String inputFileName) throws IOException, URISyntaxException {\n+    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n@@ -82,1 +84,1 @@\n-    public String getInputFileName() { return inputFileName; }\n+    public ToolInput getInputFile() { return inputFileName; }\n@@ -89,18 +91,1 @@\n-        try {\n-            return new DataInputStream(new FileInputStream(this.inputFileName));\n-        } catch (IOException ex) {\n-            if (this.inputFileName.matches(\"^[A-Za-z]+:.*\")) {\n-                try {\n-                    final URI uri = new URI(this.inputFileName);\n-                    final URL url = uri.toURL();\n-                    final URLConnection conn = url.openConnection();\n-                    conn.setUseCaches(false);\n-                    return new DataInputStream(conn.getInputStream());\n-                } catch (URISyntaxException | IOException exception) {\n-                    error(\"err.cannot.read\", this.inputFileName);\n-                    throw exception;\n-                }\n-            } else {\n-                throw ex;\n-            }\n-        }\n+        return inputFileName.getDataInputStream(Optional.of(this));\n","filename":"src\/org\/openjdk\/asmtools\/common\/Environment.java","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n@@ -70,3 +71,3 @@\n-    public void setInputFileName(String inputFileName) throws IOException {\n-        this.inputFileName = inputFileName;\n-        this.simpleInputFileName = Paths.get(inputFileName).getFileName().toString();\n+    public void setInputFileName(ToolInput inputFileName) throws IOException {\n+        this.inputFileName = inputFileName.getFileName();\n+        this.simpleInputFileName = Paths.get(inputFileName.getFileName()).getFileName().toString();\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolLogger.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import org.openjdk.asmtools.common.Environment;\n@@ -5,0 +6,3 @@\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n@@ -6,0 +10,1 @@\n+import java.io.FileInputStream;\n@@ -7,0 +12,6 @@\n+import java.io.InputStreamReader;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Files;\n@@ -8,0 +19,3 @@\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Optional;\n@@ -15,0 +29,4 @@\n+    DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException;\n+\n+    Collection<String> readAllLines() throws IOException;\n+\n@@ -32,0 +50,28 @@\n+        public Collection<String> readAllLines() throws IOException {\n+            return Files.readAllLines(Paths.get(getFileName()));\n+        }\n+\n+        @Override\n+        public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n+            try {\n+                return new DataInputStream(new FileInputStream(this.getFileName()));\n+            } catch (IOException ex) {\n+                if (this.getFileName().matches(\"^[A-Za-z]+:.*\")) {\n+                    try {\n+                        final URI uri = new URI(this.getFileName());\n+                        final URL url = uri.toURL();\n+                        final URLConnection conn = url.openConnection();\n+                        conn.setUseCaches(false);\n+                        return new DataInputStream(conn.getInputStream());\n+                    } catch (URISyntaxException | IOException exception) {\n+                        if (logger.isPresent()){\n+                            logger.get().error(\"err.cannot.read\", this.getFileName());\n+                        }\n+                        throw exception;\n+                    }\n+                } else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+\n@@ -40,0 +86,17 @@\n+        \/\/compilers passes input more then one times, so saving it for reuse;\n+        private final byte[] bytes;\n+\n+        public StdinInput() {\n+            try {\n+                byte[] buffer = new byte[32 * 1024];\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                int bytesRead;\n+                while ((bytesRead = System.in.read(buffer)) > 0) {\n+                    baos.write(buffer, 0, bytesRead);\n+                }\n+                bytes = baos.toByteArray();\n+            }catch (Exception ex){\n+                throw new RuntimeException(ex);\n+            }\n+        }\n+\n@@ -48,1 +111,1 @@\n-            try (DataInputStream dis = new DataInputStream(System.in)) {\n+            try (DataInputStream dis = new DataInputStream(new ByteArrayInputStream(bytes))) {\n@@ -57,0 +120,20 @@\n+\n+        @Override\n+        public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n+            return new DataInputStream(new ByteArrayInputStream(bytes));\n+        }\n+\n+        @Override\n+        public Collection<String> readAllLines() throws IOException {\n+            ArrayList r = new ArrayList();\n+            try(BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes), \"utf-8\"))){\n+                while(true){\n+                    String l = br.readLine();\n+                    if (l==null){\n+                        break;\n+                    }\n+                    r.add(l);\n+                }\n+            };\n+            return r;\n+        }\n","filename":"src\/org\/openjdk\/asmtools\/common\/structure\/ToolInput.java","additions":84,"deletions":1,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n@@ -47,1 +48,1 @@\n-    public void setInputFile(String inputFileName) throws IOException, URISyntaxException {\n+    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmEnvironment.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n@@ -50,1 +51,1 @@\n-    private final ArrayList<String> fileList = new ArrayList<>();\n+    private final ArrayList<ToolInput> fileList = new ArrayList<>();\n@@ -88,1 +89,1 @@\n-            for (String inputFileName : fileList) {\n+            for (ToolInput inputFileName : fileList) {\n@@ -150,0 +151,4 @@\n+                    case \"-h\", \"-help\" -> {\n+                        usage();\n+                        System.exit(OK);\n+                    }\n@@ -206,1 +211,1 @@\n-                            fileList.add(argv[i]);\n+                            fileList.add(new ToolInput.FileInput(argv[i]));\n@@ -212,2 +217,1 @@\n-                usage();\n-                throw new IllegalArgumentException();\n+                fileList.add(new ToolInput.StdinInput());\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Main.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -23,1 +23,2 @@\n-where possible options include:\n+if no file.jasm is provided, stdin is used\\n\\\n+possible options include:\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n@@ -44,1 +45,1 @@\n-    public void setInputFile(String inputFileName) throws IOException, URISyntaxException {\n+    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderEnvironment.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n+\n@@ -45,1 +47,1 @@\n-    private final ArrayList<String> fileList = new ArrayList<>(1);\n+    private final ArrayList<ToolInput> fileList = new ArrayList<>(1);\n@@ -86,1 +88,1 @@\n-            for (String inputFileName : fileList) {\n+            for (ToolInput inputFileName : fileList) {\n@@ -143,0 +145,4 @@\n+                    case \"-h\", \"-help\" -> {\n+                        usage();\n+                        System.exit((OK));\n+                    }\n@@ -149,1 +155,1 @@\n-                            fileList.add(argv[i]);\n+                            fileList.add(new ToolInput.FileInput(argv[i]));\n@@ -155,2 +161,1 @@\n-                usage();\n-                throw new IllegalArgumentException();\n+                fileList.add(new ToolInput.StdinInput());\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -23,1 +23,2 @@\n-where possible options include:\n+if no file.jcod is provided, stdin is used\\n\\\n+possible options include:\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.net.URISyntaxException;\n@@ -71,1 +72,1 @@\n-    ClassData(JdecEnvironment environment) throws IOException {\n+    ClassData(JdecEnvironment environment) throws IOException, URISyntaxException {\n@@ -74,1 +75,1 @@\n-        try (DataInputStream dis = new DataInputStream(new FileInputStream(environment.getInputFileName()))) {\n+        try (DataInputStream dis = environment.getInputFile().getDataInputStream(Optional.empty())) {\n@@ -1135,1 +1136,1 @@\n-                entityName = environment.getInputFileName();\n+                entityName = environment.getInputFile().getFileName();\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.structure.ToolInput;\n@@ -42,1 +43,1 @@\n-    private ArrayList<String> fileList = new ArrayList<>();\n+    private ArrayList<ToolInput> fileList = new ArrayList<>();\n@@ -113,0 +114,3 @@\n+                case \"-h\", \"-help\":\n+                    usage();\n+                    System.exit(OK);\n@@ -119,1 +123,1 @@\n-                        fileList.add(arg);\n+                        fileList.add(new ToolInput.FileInput(arg));\n@@ -124,2 +128,1 @@\n-            usage();\n-            System.exit(FAILED);\n+            fileList.add(new ToolInput.StdinInput());\n@@ -133,1 +136,1 @@\n-        for (String inputFileName : fileList) {\n+        for (ToolInput inputFileName : fileList) {\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -23,1 +23,2 @@\n-where possible options include:\n+if no FILE.class is provided, stdin is used\\n\\\n+possible options include:\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                environment.setInputFile(inputFileName.getFileName());\n+                environment.setInputFile(inputFileName);\n@@ -147,4 +147,1 @@\n-                case \"-h\":\n-                    usage();\n-                    System.exit(OK);\n-                case \"-help\":\n+                case \"-h\", \"-help\":\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}