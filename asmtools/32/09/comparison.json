{"files":[{"patch":"@@ -29,2 +29,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n@@ -89,1 +87,1 @@\n-    public void setInputFileName(String inputFileName) throws IOException {\n+    public void setInputFileName(ToolInput inputFileName) throws IOException {\n@@ -92,1 +90,1 @@\n-        fileContent.addAll(Files.readAllLines(Paths.get(inputFileName)));\n+        fileContent.addAll(inputFileName.readAllLines());\n","filename":"src\/org\/openjdk\/asmtools\/common\/CompilerLogger.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.FileInputStream;\n@@ -31,1 +30,0 @@\n-import java.net.URI;\n@@ -33,2 +31,0 @@\n-import java.net.URL;\n-import java.net.URLConnection;\n@@ -36,0 +32,1 @@\n+import java.util.Optional;\n@@ -48,2 +45,2 @@\n-    \/\/ processed input file\n-    private String inputFileName;\n+    \/\/ processed input file or stdin\n+    private ToolInput inputFileName;\n@@ -63,1 +60,1 @@\n-    public void setInputFile(String inputFileName) throws IOException, URISyntaxException {\n+    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n@@ -82,1 +79,1 @@\n-    public String getInputFileName() { return inputFileName; }\n+    public ToolInput getInputFile() { return inputFileName; }\n@@ -88,19 +85,2 @@\n-        Objects.requireNonNull(this.inputFileName, \"Input file name should be defined.\");\n-        try {\n-            return new DataInputStream(new FileInputStream(this.inputFileName));\n-        } catch (IOException ex) {\n-            if (this.inputFileName.matches(\"^[A-Za-z]+:.*\")) {\n-                try {\n-                    final URI uri = new URI(this.inputFileName);\n-                    final URL url = uri.toURL();\n-                    final URLConnection conn = url.openConnection();\n-                    conn.setUseCaches(false);\n-                    return new DataInputStream(conn.getInputStream());\n-                } catch (URISyntaxException | IOException exception) {\n-                    error(\"err.cannot.read\", this.inputFileName);\n-                    throw exception;\n-                }\n-            } else {\n-                throw ex;\n-            }\n-        }\n+        Objects.requireNonNull(this.inputFileName, \"Input must be defined.\");\n+        return inputFileName.getDataInputStream(Optional.of(this));\n","filename":"src\/org\/openjdk\/asmtools\/common\/Environment.java","additions":7,"deletions":27,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -33,0 +34,1 @@\n+    protected final ArrayList<ToolInput> fileList = new ArrayList<>();\n","filename":"src\/org\/openjdk\/asmtools\/common\/Tool.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+package org.openjdk.asmtools.common;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public interface ToolInput {\n+\n+    String getFileName();\n+\n+    DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException;\n+\n+    Collection<String> readAllLines() throws IOException;\n+\n+    public static class FileInput implements  ToolInput {\n+        private final String file;\n+\n+        public FileInput(String file) {\n+            this.file = file;\n+        }\n+\n+        @Override\n+        public String getFileName() {\n+            return file;\n+        }\n+\n+        public Collection<String> readAllLines() throws IOException {\n+            return Files.readAllLines(Paths.get(getFileName()));\n+        }\n+\n+        @Override\n+        public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n+            try {\n+                return new DataInputStream(new FileInputStream(this.getFileName()));\n+            } catch (IOException ex) {\n+                if (this.getFileName().matches(\"^[A-Za-z]+:.*\")) {\n+                    try {\n+                        final URI uri = new URI(this.getFileName());\n+                        final URL url = uri.toURL();\n+                        final URLConnection conn = url.openConnection();\n+                        conn.setUseCaches(false);\n+                        return new DataInputStream(conn.getInputStream());\n+                    } catch (URISyntaxException | IOException exception) {\n+                        if (logger.isPresent()){\n+                            logger.get().error(\"err.cannot.read\", this.getFileName());\n+                        }\n+                        throw exception;\n+                    }\n+                } else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return getFileName();\n+        }\n+    }\n+\n+    public static class ByteInput implements  ToolInput {\n+\n+        \/\/compilers passes input more then one times, so saving it for reuse;\n+        private final byte[] bytes;\n+\n+        public ByteInput(final byte[] bytes) {\n+            this.bytes = bytes;\n+        }\n+\n+        public ByteInput(final String bytes) {\n+            this.bytes = bytes.getBytes(StandardCharsets.UTF_8);\n+        }\n+\n+        @Override\n+        public String getFileName() {\n+            \/\/get parent is used\n+            return \"bytes\/bytes\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return getFileName();\n+        }\n+\n+        @Override\n+        public DataInputStream getDataInputStream(Optional<Environment> logger) throws URISyntaxException, IOException {\n+            return new DataInputStream(new ByteArrayInputStream(bytes));\n+        }\n+\n+        @Override\n+        public Collection<String> readAllLines() throws IOException {\n+            ArrayList r = new ArrayList();\n+            try(BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes), \"utf-8\"))){\n+                while(true){\n+                    String l = br.readLine();\n+                    if (l==null){\n+                        break;\n+                    }\n+                    r.add(l);\n+                }\n+            };\n+            return r;\n+        }\n+    }\n+\n+    public static class StdinInput extends   ByteInput {\n+\n+        public StdinInput() {\n+            super(drainStdIn());\n+        }\n+\n+        private static byte[] drainStdIn() {\n+            try {\n+                byte[] buffer = new byte[32 * 1024];\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                int bytesRead;\n+                while ((bytesRead = System.in.read(buffer)) > 0) {\n+                    baos.write(buffer, 0, bytesRead);\n+                }\n+                return baos.toByteArray();\n+            } catch (Exception ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        }\n+\n+        @Override\n+        public String getFileName() {\n+            \/\/get parent is used\n+            return \"stdin\/in\";\n+        }\n+    }\n+}\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolInput.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -70,3 +70,3 @@\n-    public void setInputFileName(String inputFileName) throws IOException {\n-        this.inputFileName = inputFileName;\n-        this.simpleInputFileName = Paths.get(inputFileName).getFileName().toString();\n+    public void setInputFileName(ToolInput inputFileName) throws IOException {\n+        this.inputFileName = inputFileName.getFileName();\n+        this.simpleInputFileName = Paths.get(inputFileName.getFileName()).getFileName().toString();\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolLogger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.ToolInput;\n@@ -47,1 +48,1 @@\n-    public void setInputFile(String inputFileName) throws IOException, URISyntaxException {\n+    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmEnvironment.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.ToolInput;\n@@ -50,1 +51,0 @@\n-    private final ArrayList<String> fileList = new ArrayList<>();\n@@ -88,1 +88,1 @@\n-            for (String inputFileName : fileList) {\n+            for (ToolInput inputFileName : fileList) {\n@@ -150,0 +150,4 @@\n+                    case \"-h\", \"-help\" -> {\n+                        usage();\n+                        System.exit(OK);\n+                    }\n@@ -206,1 +210,1 @@\n-                            fileList.add(argv[i]);\n+                            fileList.add(new ToolInput.FileInput(argv[i]));\n@@ -212,2 +216,1 @@\n-                usage();\n-                throw new IllegalArgumentException();\n+                fileList.add(new ToolInput.StdinInput());\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Main.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -23,1 +23,2 @@\n-where possible options include:\n+if no file.jasm is provided, stdin is used\\n\\\n+possible options include:\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.ToolInput;\n@@ -44,1 +45,1 @@\n-    public void setInputFile(String inputFileName) throws IOException, URISyntaxException {\n+    public void setInputFile(ToolInput inputFileName) throws IOException, URISyntaxException {\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderEnvironment.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.asmtools.common.ToolInput;\n+\n@@ -45,1 +47,0 @@\n-    private final ArrayList<String> fileList = new ArrayList<>(1);\n@@ -86,1 +87,1 @@\n-            for (String inputFileName : fileList) {\n+            for (ToolInput inputFileName : fileList) {\n@@ -143,0 +144,4 @@\n+                    case \"-h\", \"-help\" -> {\n+                        usage();\n+                        System.exit((OK));\n+                    }\n@@ -149,1 +154,1 @@\n-                            fileList.add(argv[i]);\n+                            fileList.add(new ToolInput.FileInput(argv[i]));\n@@ -155,2 +160,1 @@\n-                usage();\n-                throw new IllegalArgumentException();\n+                fileList.add(new ToolInput.StdinInput());\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -23,1 +23,2 @@\n-where possible options include:\n+if no file.jcod is provided, stdin is used\\n\\\n+possible options include:\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.net.URISyntaxException;\n@@ -71,1 +72,1 @@\n-    ClassData(JdecEnvironment environment) throws IOException {\n+    ClassData(JdecEnvironment environment) throws IOException, URISyntaxException {\n@@ -74,1 +75,1 @@\n-        try (DataInputStream dis = new DataInputStream(new FileInputStream(environment.getInputFileName()))) {\n+        try (DataInputStream dis = environment.getInputFile().getDataInputStream(Optional.empty())) {\n@@ -1135,1 +1136,1 @@\n-                entityName = environment.getInputFileName();\n+                entityName = environment.getInputFile().getFileName();\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.ToolInput;\n@@ -42,2 +43,0 @@\n-    private ArrayList<String> fileList = new ArrayList<>();\n-\n@@ -113,0 +112,3 @@\n+                case \"-h\", \"-help\":\n+                    usage();\n+                    System.exit(OK);\n@@ -119,1 +121,1 @@\n-                        fileList.add(arg);\n+                        fileList.add(new ToolInput.FileInput(arg));\n@@ -124,2 +126,1 @@\n-            usage();\n-            System.exit(FAILED);\n+            fileList.add(new ToolInput.StdinInput());\n@@ -133,1 +134,1 @@\n-        for (String inputFileName : fileList) {\n+        for (ToolInput inputFileName : fileList) {\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -23,1 +23,2 @@\n-where possible options include:\n+if no FILE.class is provided, stdin is used\\n\\\n+possible options include:\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-            read(dis);\n+            read(dis, inputFile.toPath());\n@@ -125,1 +125,0 @@\n-        classFile = inputFile.toPath();\n@@ -130,1 +129,1 @@\n-            read(dis);\n+            read(dis, Paths.get(inputFileName));\n@@ -132,1 +131,0 @@\n-        classFile = Paths.get(inputFileName);\n@@ -253,1 +251,2 @@\n-    private void read(DataInputStream in) throws IOException {\n+    public void read(final DataInputStream in, final Path src) throws IOException {\n+        classFile = src;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ClassData.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.asmtools.common.ToolInput;\n@@ -29,0 +30,1 @@\n+import java.io.DataInputStream;\n@@ -33,0 +35,1 @@\n+import java.nio.file.Paths;\n@@ -34,0 +37,1 @@\n+import java.util.Optional;\n@@ -47,2 +51,0 @@\n-    private ArrayList<String> fileList = new ArrayList<>();\n-\n@@ -72,1 +74,1 @@\n-        for (String inputFileName : fileList) {\n+        for (ToolInput inputFileName : fileList) {\n@@ -76,1 +78,3 @@\n-                classData.read(inputFileName);\n+                try(DataInputStream dis=inputFileName.getDataInputStream(Optional.of(environment))) {\n+                    classData.read(dis, Paths.get(inputFileName.getFileName()));\n+                }\n@@ -145,1 +149,4 @@\n-                    break;\n+                    System.exit(OK);\n+                case \"-h\", \"-help\":\n+                    usage();\n+                    System.exit(OK);\n@@ -152,1 +159,1 @@\n-                        fileList.add(arg);\n+                        fileList.add(new ToolInput.FileInput(arg));\n@@ -157,2 +164,1 @@\n-            usage();\n-            System.exit(FAILED);\n+            fileList.add(new ToolInput.StdinInput());\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-where possible options include:\n+If no FILE.class is provided, stdin is awaited\\n\\\n+possible options include:\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -8,0 +8,2 @@\n+import java.io.File;\n+import java.io.FileInputStream;\n@@ -9,0 +11,1 @@\n+import java.io.InputStream;\n@@ -17,1 +20,0 @@\n-        \/\/for 0 file args, there is hardcoded System.exit\n@@ -38,0 +40,21 @@\n+        Assertions.assertTrue(outs.getToolBos().contains(\"0xCAFEBABE;\"));\n+    }\n+\n+    @Test\n+    public void main3StreamsStdinCorrectStream() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        File in =  new File(\".\/target\/classes\/org\/openjdk\/asmtools\/jdec\/Main.class\");\n+        InputStream is = System.in;\n+        try {\n+            System.setIn(new FileInputStream(in));\n+            Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput());\n+            int i = decoder.decode();\n+            outs.flush();\n+            Assertions.assertEquals(0, i);\n+            Assertions.assertFalse(outs.getToolBos().isEmpty());\n+            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+            Assertions.assertTrue(outs.getToolBos().contains(\"0xCAFEBABE\"));\n+        }finally {\n+            System.setIn(is);\n+        }\n","filename":"test\/org\/openjdk\/asmtools\/jdec\/MainTest.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+import java.io.FileInputStream;\n@@ -9,0 +10,1 @@\n+import java.io.InputStream;\n@@ -18,1 +20,0 @@\n-        \/\/for 0 file args, there is hardcoded System.exit\n@@ -39,0 +40,21 @@\n+        Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n+    }\n+\n+    @Test\n+    public void main3StreamsStdinCorrectStream() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        File in =  new File(\".\/target\/classes\/org\/openjdk\/asmtools\/jdis\/Main.class\");\n+        InputStream is = System.in;\n+        try {\n+            System.setIn(new FileInputStream(in));\n+            Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput());\n+            int i = decoder.disasm();\n+            outs.flush();\n+            Assertions.assertEquals(0, i);\n+            Assertions.assertFalse(outs.getToolBos().isEmpty());\n+            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+            Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n+        }finally {\n+            System.setIn(is);\n+        }\n","filename":"test\/org\/openjdk\/asmtools\/jdis\/MainTest.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"}]}