{"files":[{"patch":"@@ -36,1 +36,1 @@\n- * UnitTests for asmtools uses mainly StringInput for assemblers  and ByteInput for disasemblers.\n+ * UnitTests for asmtools uses mainly StringInput for assemblers  and ByteInput for disassemblers.\n@@ -38,1 +38,1 @@\n- * String\/Byte\/Stream inputs can be used as any 3rd part code which do not need files, aka IDE, instrumetations or similar.\n+ * String\/Byte\/Stream inputs can be used as any 3rd part code which do not need files, aka IDE, instrumentation or similar.\n","filename":"src\/org\/openjdk\/asmtools\/common\/inputs\/ToolInput.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        return null; \/\/If you are here, you probbaly wanted ToolOutput.ByteOutput for assmbled binary output\n+        return null; \/\/If you are here, you probably wanted ToolOutput.ByteOutput for assmbled binary output\n","filename":"src\/org\/openjdk\/asmtools\/common\/outputs\/TextOutput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,0 +142,6 @@\n+    \/\/ Runs the decoder with args\n+    public synchronized boolean decode(String... argv) {\n+        parseArgs(argv);\n+        return this.decode() == OK;\n+    }\n+\n@@ -143,1 +149,1 @@\n-     * Run the decoder\n+     * Runs the decoder\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,1 +85,7 @@\n-    \/\/ Run disassembler when args already parsed\n+    \/\/ Runs disassembler with args\n+    public synchronized boolean disasm(String... argv) {\n+        parseArgs(argv);\n+        return this.disasm() == OK;\n+    }\n+\n+    \/\/ Runs disassembler when args already parsed\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -6,2 +6,0 @@\n-import org.openjdk.asmtools.common.StringUtils;\n-\n@@ -15,0 +13,2 @@\n+import org.openjdk.asmtools.lib.LogAndBinResults;\n+import org.openjdk.asmtools.lib.LogAndTextResults;\n@@ -19,1 +19,0 @@\n-import java.util.List;\n@@ -23,34 +22,0 @@\n-    public static class LogAndReturn {\n-\n-        public final StringLog log;\n-        public final int result;\n-\n-\n-        public LogAndReturn(StringLog log, int result) {\n-            this.log = log;\n-            this.result = result;\n-        }\n-\n-        public List<String> getStringsByPrefix(String prefix) {\n-            return StringUtils.substrBetween(log.toString(), prefix, System.lineSeparator());\n-        }\n-    }\n-\n-    public static class LogAndTextResults extends LogAndReturn {\n-        final TextOutput output;\n-\n-        public LogAndTextResults(TextOutput output, StringLog log, int result) {\n-            super(log, result);\n-            this.output = output;\n-        }\n-    }\n-\n-    public static class LogAndBinResults extends LogAndReturn {\n-        final ByteOutput output;\n-\n-        public LogAndBinResults(ByteOutput output, StringLog log, int result) {\n-            super(log, result);\n-            this.output = output;\n-        }\n-    }\n-\n","filename":"test\/java\/org\/openjdk\/asmtools\/InputOutputTests.java","additions":2,"deletions":37,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.asmtools.common.CompileAction;\n+import org.openjdk.asmtools.lib.action.CompileAction;\n","filename":"test\/java\/org\/openjdk\/asmtools\/SequenceCallsTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,160 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.common;\n-\n-import org.openjdk.asmtools.InputOutputTests;\n-import org.openjdk.asmtools.common.outputs.ByteOutput;\n-import org.openjdk.asmtools.common.outputs.log.StringLog;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n-import java.nio.file.Files;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public class CompileAction {\n-    private static CompileAction entry;\n-    private final File destDir;\n-    private List<String> toolArgs = new ArrayList<>();\n-\n-    public CompileAction() throws IOException {\n-        destDir = Files.createTempDirectory(\"compile\").toFile();\n-        destDir.deleteOnExit();\n-    }\n-\n-    public static InputOutputTests.LogAndReturn JAsm(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jasm(files);\n-    }\n-\n-    public static InputOutputTests.LogAndReturn JCoder(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jcoder(files);\n-    }\n-\n-    public CompileAction(File destDir) {\n-        this.destDir = destDir;\n-    }\n-\n-    public void reflectionJasm(List<String> files) {\n-        reflectionAction(\"jasm\", files);\n-    }\n-\n-    public void reflectionJcoder(List<String> files) {\n-        reflectionAction(\"jcoder\", files);\n-    }\n-\n-    public InputOutputTests.LogAndReturn jasm(List<String> files) {\n-        return action(\"jasm\", files);\n-    }\n-\n-    public InputOutputTests.LogAndReturn jcoder(List<String> files) {\n-        return action(\"jcoder\", files);\n-    }\n-\n-    \/**\n-     * Moderator method based on reflection API to call tools\n-     *\/\n-    public void reflectionAction(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        try {\n-            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n-            Class<?> toolClass = Class.forName(toolClassName);\n-            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n-            PrintStream ps = new PrintStream(System.out);\n-            Object tool = constr.newInstance(ps, toolName);\n-            Method m = toolClass.getMethod(\"compile\", String[].class);\n-            Object r = m.invoke(tool, new Object[]{args.toArray(new String[0])});\n-            if (r instanceof Boolean) {\n-                boolean ok = (Boolean) r;\n-                if (!ok) {\n-                    fail(toolName + \" failed\");\n-                }\n-                System.out.println(toolName + \" OK\");\n-            } else\n-                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n-        } catch (ClassNotFoundException e) {\n-            fail(\"can't find \" + toolName);\n-        } catch (ReflectiveOperationException t) {\n-            fail(\"error invoking \" + toolName + \": \" + t);\n-        }\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n-     *\/\n-    public InputOutputTests.LogAndReturn action(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jcoder\")) {\n-            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog,\n-                    args.toArray(new String[0]));\n-            rc = jcod.compile();\n-        } else if (toolName.equals(\"jasm\")) {\n-            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog,\n-                    args.toArray(new String[0]));\n-            rc = jasm.compile();\n-        } else {\n-            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n-        }\n-        return new InputOutputTests.LogAndReturn(encodeLog, rc);\n-    }\n-\n-    public CompileAction setToolArgs(String... args) {\n-        if (args != null && args.length > 0) {\n-            Collections.addAll(this.toolArgs, args);\n-        } else {\n-            this.toolArgs.clear();\n-        }\n-        return this;\n-    }\n-\n-    private static CompileAction getEntry() {\n-        if (CompileAction.entry == null) {\n-            try {\n-                entry = new CompileAction();\n-            } catch (IOException e) {\n-                fail(e.toString());\n-                throw new RuntimeException(e); \/\/ \/\/ appeasing the compiler: this line will never be executed.\n-            }\n-        }\n-        return entry;\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/CompileAction.java","additions":0,"deletions":160,"binary":false,"changes":160,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.common;\n-\n-import org.openjdk.asmtools.InputOutputTests;\n-\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public enum EAsmTools {\n-    JASM(\".jasm\", (files, args) -> CompileAction.JAsm(files, args)),\n-    JCODER(\".jcod\", (files, args) -> CompileAction.JCoder(files, args)),\n-    JDEC(\".class\", (files, args) -> GenerateAction.JDec(files, args)),\n-    JDIS(\".class\", (files, args) -> GenerateAction.JDis(files, args));\n-    private final String fileExtension;\n-    private final Tool tool;\n-\n-    EAsmTools(String fileExtension, Tool tool) {\n-        this.fileExtension = fileExtension;\n-        this.tool = tool;\n-    }\n-\n-    public String getFileExtension() {\n-        return fileExtension;\n-    }\n-\n-    public static Tool getTool(String toolName) {\n-        for (EAsmTools t : values()) {\n-            if (toolName.compareToIgnoreCase(t.name()) == 0)\n-                return t.tool;\n-        }\n-        fail(\"The tool \" + toolName + \" isn't yet implemented.\");\n-        return null;\n-    }\n-\n-    @FunctionalInterface\n-    public interface Tool {\n-        InputOutputTests.LogAndReturn call(List<String> files, String... args);\n-    }\n-\n-\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/EAsmTools.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,156 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.common;\n-\n-import org.openjdk.asmtools.InputOutputTests;\n-import org.openjdk.asmtools.common.outputs.ByteOutput;\n-import org.openjdk.asmtools.common.outputs.log.StringLog;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n-import java.nio.file.Files;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public class GenerateAction {\n-    private static GenerateAction entry;\n-    private final File destDir;\n-    private final List<String> toolArgs = new ArrayList<>();\n-\n-    public GenerateAction() throws IOException {\n-        destDir = Files.createTempDirectory(\"generate\").toFile();\n-        destDir.deleteOnExit();\n-    }\n-\n-    public static InputOutputTests.LogAndReturn JDis(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jdis(files);\n-    }\n-\n-    public static InputOutputTests.LogAndReturn JDec(List<String> files, String... args) {\n-        return getEntry().setToolArgs().setToolArgs(args).jdec(files);\n-    }\n-\n-    public void reflectionJdis(List<String> files) {\n-        reflectionAction(\"jdis\", files);\n-    }\n-\n-    public void reflectionJdec(List<String> files) {\n-        reflectionAction(\"jdec\", files);\n-    }\n-\n-    public InputOutputTests.LogAndReturn jdis(List<String> files) {\n-        return action(\"jdis\", files);\n-    }\n-\n-    public InputOutputTests.LogAndReturn jdec(List<String> files) {\n-        return action(\"jdec\", files);\n-    }\n-\n-    \/**\n-     * Moderator method based on reflection API to call tools\n-     *\/\n-    private void reflectionAction(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        try {\n-            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n-            Class<?> toolClass = Class.forName(toolClassName);\n-            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n-            PrintStream ps = new PrintStream(System.out);\n-            Object tool = constr.newInstance(ps, toolName);\n-            Method m = toolClass.getMethod(\"compile\", String[].class);\n-            Object r = m.invoke(tool, new Object[]{args.toArray(new String[0])});\n-            if (r instanceof Boolean) {\n-                boolean ok = (Boolean) r;\n-                if (!ok) {\n-                    fail(toolName + \" failed\");\n-                }\n-                System.out.println(toolName + \" OK\");\n-            } else\n-                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n-        } catch (ClassNotFoundException e) {\n-            fail(\"can't find \" + toolName);\n-        } catch (ReflectiveOperationException t) {\n-            fail(\"error invoking \" + toolName + \": \" + t);\n-        }\n-    }\n-\n-    \/**\n-     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n-     *\/\n-    private InputOutputTests.LogAndReturn action(String toolName, List<String> files) {\n-        if (files.isEmpty())\n-            fail(toolName + \": no files\");\n-        List<String> args = toolArgs.stream().collect(Collectors.toList());\n-        args.add(\"-d\");\n-        args.add(destDir.getPath());\n-        args.addAll(files);\n-        int rc = 0;\n-        ByteOutput encodedFiles = new ByteOutput();\n-        StringLog encodeLog = new StringLog();\n-        if (toolName.equals(\"jdec\")) {\n-            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles, encodeLog,\n-                    args.toArray(new String[0]));\n-            rc = jdec.decode();\n-        } else if (toolName.equals(\"jdis\")) {\n-            org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(encodedFiles, encodeLog,\n-                    args.toArray(new String[0]));\n-            rc = jdis.disasm();\n-        } else {\n-            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n-        }\n-        return new InputOutputTests.LogAndReturn(encodeLog, rc);\n-    }\n-\n-    public GenerateAction setToolArgs(String... args) {\n-        if (args != null && args.length > 0) {\n-            Collections.addAll(this.toolArgs, args);\n-        } else {\n-            this.toolArgs.clear();\n-        }\n-        return this;\n-    }\n-\n-    private static GenerateAction getEntry() {\n-        if (GenerateAction.entry == null) {\n-            try {\n-                entry = new GenerateAction();\n-            } catch (IOException e) {\n-                fail(e.toString());\n-                throw new RuntimeException(e); \/\/ \/\/ appeasing the compiler: this line will never be executed.\n-            }\n-        }\n-        return entry;\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/common\/GenerateAction.java","additions":0,"deletions":156,"binary":false,"changes":156,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/MultipleFilesInSingleJasmTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.asmtools.jasm;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInstance;\n-import org.openjdk.asmtools.InputOutputTests;\n-import org.openjdk.asmtools.common.CompileAction;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n-public class NegativeJasmTests {\n-    final String NEGATIVE_JASM_TEST_RESOURCE_FOLDER = \"negative\" + File.separator;\n-    final int TOOL_PASSED = 0;\n-    CompileAction compiler;\n-    File resourceDir;\n-\n-    @BeforeAll\n-    public void init() throws IOException {\n-        String resName = NEGATIVE_JASM_TEST_RESOURCE_FOLDER + \"ifge_overflow.jasm\";\n-        File file = new File(this.getClass().getResource(resName).getFile());\n-        resourceDir = file.getParentFile();\n-        compiler = new CompileAction();\n-    }\n-\n-    \/**\n-     * This is the test for the issue: CODETOOLS-7903405 (https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903405)\n-     * \"compiler does not warn about instruction arguments that exceed allowed limits\"\n-     *\n-     * The attached jasm source has a set of nop instructions between the jfqe instruction and the \"SKIP\" label that is used by it.\n-     * The length of the set is 0x8FFF which exceeds allowed by JVMS - signed 16-bit value 0x8000.\n-     * The jasm silently produces a class file that is declined by JVM:\n-     *\n-     * >java Test\n-     * Error: Unable to initialize main class Test\n-     * Caused by: java.lang.VerifyError: (class: Test, method: test_1 signature: ()V) Illegal target of jump or branch\n-     *\n-     * Since jasm allows to generate a \"defect\" binaries, it would be nice if the jasm assembler warns that already,\n-     * and not just the class file verifier.\n-     *\n-     * Expected warning should be like:\n-     *\n-     * jasm   -  WARN: test_1()V - The argument 0x8000 of the 'ifge' instruction is written.\n-     * It is larger than the allowed signed 16-bit value 0x7FFF\n-     * 1 warning(s)\n-     *\/\n-    @Test\n-    public void testIfgeOverflow_7903405() {\n-        final InputOutputTests.LogAndReturn logAndReturn = compiler.jasm(\n-                List.of(resourceDir + File.separator + \"ifge_overflow.jasm\"));\n-        final List<String> warns = logAndReturn.getStringsByPrefix(\"WARN:\");\n-        Assertions.assertEquals( logAndReturn.result,TOOL_PASSED);\n-        Assertions.assertEquals( warns.size(),1);\n-        String warn = warns.get(0);\n-        \/\/ expected substrings\n-        Assertions.assertTrue(warn.contains(\"test_1()V\"),\n-                \"Expected method name \\'test_1()V\\' not found\");\n-        Assertions.assertTrue(warn.contains(\"signed 16-bit value 0x7FFF\"),\n-                \"Expected argument length \\'signed 16-bit value 0x7FFF\\' not found\");\n-        Assertions.assertTrue(warn.contains(\"0x8000\"),\n-        \"Expected length of written argument \\'0x8000\\' not found\");\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/NegativeJasmTests.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm.case7903031;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.openjdk.asmtools.lib.LogAndBinResults;\n+import org.openjdk.asmtools.lib.LogAndTextResults;\n+import org.openjdk.asmtools.lib.action.CompileAction;\n+import org.openjdk.asmtools.lib.action.GenerateAction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+\/**\n+ * This is the test for the issue CODETOOLS-7903031 (https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903031)\n+ * \"jasm: Asmtools does not support CP table when it's processing modules\"\n+ * Files module-info.class.g.jasm has Constant Pool.\n+ * The test is intended to check that the module-info file with Constant Pool can be compiled without issues.\n+ *\/\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class TransformationTest {\n+\n+    private final String[] jasmFiles = new String[]{\"module-info.class.g.jasm\", \"module-info.class.jasm\"};\n+    private CompileAction compiler;\n+    private GenerateAction generator;\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        for (int i = 0; i < jasmFiles.length; i++) {\n+            String fileName = jasmFiles[i];\n+            File resourceDir = new File(this.getClass().getResource(fileName).getFile()).getParentFile();\n+            jasmFiles[i] = resourceDir + File.separator + fileName;\n+        }\n+        compiler = new CompileAction();\n+        generator = new GenerateAction();\n+    }\n+\n+    @Test\n+    public void moduleInfoTest() {\n+        for (int i = 0; i < jasmFiles.length; i++) {\n+            \/\/jasm to class\n+            LogAndBinResults binResult = compiler.getJasmResult(List.of(jasmFiles[i]));\n+            \/\/ class to jasm\n+            LogAndTextResults textResult = generator.setToolArgs(\"-g\").getJdisResult(binResult.getAsByteInput());\n+            \/\/ Check that it is a module-info.jasm with removed spaces, tabs and new lines\n+            String jasmOutput = textResult.getResultAsString(s -> s.replaceAll(\"[ \\t\\n]*\", \"\"));\n+            assertThat(jasmOutput, Matchers.allOf(Matchers.startsWith(\"module#6\/*java.base*\/version65:0\"),\n+                    Matchers.matchesRegex(\".*const#.*=class#.*;..module-info.*\"),\n+                    Matchers.matchesRegex(\".*exports#.*java.util.spi..;.*\"),\n+                    Matchers.matchesRegex(\".*provides#.*java.util.random.RandomGenerator..with.*\")));\n+        }\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903031\/TransformationTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm.case7903405;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.openjdk.asmtools.lib.LogAndReturn;\n+import org.openjdk.asmtools.lib.action.CompileAction;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class NegativeJasmTests {\n+    final int TOOL_PASSED = 0;\n+    CompileAction compiler;\n+    File resourceDir;\n+    String resName = \"ifge_overflow.jasm\";\n+\n+    @BeforeAll\n+    public void init() throws IOException {\n+        File file = new File(this.getClass().getResource(resName).getFile());\n+        resourceDir = file.getParentFile();\n+        compiler = new CompileAction();\n+    }\n+\n+    \/**\n+     * This is the test for the issue: CODETOOLS-7903405 (https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903405)\n+     * \"compiler does not warn about instruction arguments that exceed allowed limits\"\n+     * <p>\n+     * The attached jasm source has a set of nop instructions between the jfqe instruction and the \"SKIP\" label that is used by it.\n+     * The length of the set is 0x8FFF which exceeds allowed by JVMS - signed 16-bit value 0x8000.\n+     * The jasm silently produces a class file that is declined by JVM:\n+     * <p>\n+     * >java Test\n+     * Error: Unable to initialize main class Test\n+     * Caused by: java.lang.VerifyError: (class: Test, method: test_1 signature: ()V) Illegal target of jump or branch\n+     * <p>\n+     * Since jasm allows to generate a \"defect\" binaries, it would be nice if the jasm assembler warns that already,\n+     * and not just the class file verifier.\n+     * <p>\n+     * Expected warning should be like:\n+     * <p>\n+     * jasm   -  WARN: test_1()V - The argument 0x8000 of the 'ifge' instruction is written.\n+     * It is larger than the allowed signed 16-bit value 0x7FFF\n+     * 1 warning(s)\n+     *\/\n+    @Test\n+    public void testIfgeOverflow_7903405() {\n+        final LogAndReturn logAndReturn = compiler.jasm(\n+                List.of(resourceDir + File.separator + resName));\n+        final List<String> warns = logAndReturn.getLogStringsByPrefix(\"WARN:\");\n+        Assertions.assertEquals(logAndReturn.result, TOOL_PASSED);\n+        Assertions.assertEquals(warns.size(), 1);\n+        String warn = warns.get(0);\n+        \/\/ expected substrings\n+        Assertions.assertTrue(warn.contains(\"test_1()V\"),\n+                \"Expected method name \\'test_1()V\\' not found\");\n+        Assertions.assertTrue(warn.contains(\"signed 16-bit value 0x7FFF\"),\n+                \"Expected argument length \\'signed 16-bit value 0x7FFF\\' not found\");\n+        Assertions.assertTrue(warn.contains(\"0x8000\"),\n+                \"Expected length of written argument \\'0x8000\\' not found\");\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/case7903405\/NegativeJasmTests.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -23,5 +23,4 @@\n-package org.openjdk.asmtools.transform.lib;\n-\n-public interface ITestRunner {\n-    void run();\n-}\n+\/**\n+ * jasm oriented tests\n+ *\/\n+package org.openjdk.asmtools.jasm;\n","filename":"test\/java\/org\/openjdk\/asmtools\/jasm\/package-info.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/transform\/lib\/ITestRunner.java","status":"copied"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib;\n+\n+import org.openjdk.asmtools.common.inputs.ByteInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+\n+public class LogAndBinResults extends LogAndReturn {\n+\n+    public final ByteOutput output;\n+\n+    public ByteInput[] getAsByteInput() {\n+       return output.getOutputs().stream().map(out->new ByteInput(out.getBody())).toArray(ByteInput[]::new);\n+    }\n+\n+    public LogAndBinResults(ByteOutput output, StringLog log, int result) {\n+        super(log, result);\n+        this.output = output;\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/LogAndBinResults.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib;\n+\n+import org.openjdk.asmtools.common.StringUtils;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+\n+import java.util.List;\n+\n+public class LogAndReturn {\n+\n+    public final StringLog log;\n+    public final int result;\n+\n+\n+    public LogAndReturn(StringLog log, int result) {\n+        this.log = log;\n+        this.result = result;\n+    }\n+\n+    public List<String> getLogStringsByPrefix(String prefix) {\n+        return StringUtils.substrBetween(log.toString(), prefix, System.lineSeparator());\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/LogAndReturn.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib;\n+\n+import org.openjdk.asmtools.common.outputs.TextOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class LogAndTextResults extends LogAndReturn {\n+\n+    public final TextOutput output;\n+\n+    public LogAndTextResults(TextOutput output, StringLog log, int result) {\n+        super(log, result);\n+        this.output = output;\n+    }\n+\n+    public String getResultAsString(Function<String,String> stringTransform) {\n+        return stringTransform.apply(this.output.getOutputs().stream().map(out->out.getBody()).collect(Collectors.joining()));\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/LogAndTextResults.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,272 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.common.Environment;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.lib.LogAndBinResults;\n+import org.openjdk.asmtools.lib.LogAndReturn;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class CompileAction {\n+    private static CompileAction entry;\n+    private final File destDir;\n+    private List<String> toolArgs = new ArrayList<>();\n+\n+    public CompileAction() throws IOException {\n+        destDir = Files.createTempDirectory(\"compile\").toFile();\n+        destDir.deleteOnExit();\n+    }\n+\n+    public static LogAndReturn JAsm(List<String> files, String... args) {\n+        return getEntry().setToolArgs().setToolArgs(args).jasm(files);\n+    }\n+\n+    public static LogAndReturn JCoder(List<String> files, String... args) {\n+        return getEntry().setToolArgs().setToolArgs(args).jcoder(files);\n+    }\n+\n+    public static LogAndReturn JAsm(ToolInput[] inputs, String... args) {\n+        return getEntry().setToolArgs().setToolArgs(args).jasm(inputs);\n+    }\n+\n+    public static LogAndReturn JCoder(ToolInput[] inputs, String... args) {\n+        return getEntry().setToolArgs().setToolArgs(args).jcoder(inputs);\n+    }\n+\n+    public CompileAction(File destDir) {\n+        this.destDir = destDir;\n+    }\n+\n+    public void reflectionJasm(List<String> files) {\n+        reflectionAction(\"jasm\", files);\n+    }\n+\n+    public void reflectionJcoder(List<String> files) {\n+        reflectionAction(\"jcoder\", files);\n+    }\n+\n+    public LogAndReturn jasm(List<String> files) {\n+        return getLogAndReturn(\"jasm\", files);\n+    }\n+\n+    public LogAndReturn jcoder(List<String> files) {\n+        return getLogAndReturn(\"jcoder\", files);\n+    }\n+\n+    public LogAndReturn jasm(ToolInput... toolInputs) {\n+        return getLogAndReturn(\"jasm\", toolInputs);\n+    }\n+\n+    public LogAndReturn jcoder(ToolInput... toolInputs) {\n+        return getLogAndReturn(\"jcoder\", toolInputs);\n+    }\n+\n+\n+    public LogAndBinResults getJasmResult(List<String> files) {\n+        return getLogAndBinResults(\"jasm\", files);\n+    }\n+\n+    public LogAndBinResults getJcoderResult(List<String> files) {\n+        return getLogAndBinResults(\"jcoder\", files);\n+    }\n+\n+    public LogAndBinResults getJasmResult(ToolInput... toolInputs) {\n+        return getLogAndBinResults(\"jasm\", toolInputs);\n+    }\n+\n+    public LogAndBinResults getJcoderResult(ToolInput... toolInputs) {\n+        return getLogAndBinResults(\"jcoder\", toolInputs);\n+    }\n+\n+    \/**\n+     * Moderator method based on reflection API to call tools\n+     *\/\n+    public void reflectionAction(String toolName, List<String> files) {\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+        args.add(\"-d\");\n+        args.add(destDir.getPath());\n+        args.addAll(files);\n+        try {\n+            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n+            Class<?> toolClass = Class.forName(toolClassName);\n+            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n+            PrintStream ps = new PrintStream(System.out);\n+            Object tool = constr.newInstance(ps, toolName);\n+            Method m = toolClass.getMethod(\"compile\", String[].class);\n+            Object r = m.invoke(tool, new Object[]{args.toArray(String[]::new)});\n+            if (r instanceof Boolean) {\n+                boolean ok = (Boolean) r;\n+                if (!ok) {\n+                    fail(toolName + \" failed\");\n+                }\n+                System.out.println(toolName + \" OK\");\n+            } else\n+                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n+        } catch (ClassNotFoundException e) {\n+            fail(\"can't find \" + toolName);\n+        } catch (ReflectiveOperationException t) {\n+            fail(\"error invoking \" + toolName + \": \" + t);\n+        }\n+    }\n+\n+    \/**\n+     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n+     *\/\n+    public LogAndReturn getLogAndReturn(String toolName, List<String> files) {\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+        args.add(\"-d\");\n+        args.add(destDir.getPath());\n+        args.addAll(files);\n+        int rc = 0;\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jcoder\")) {\n+            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog,\n+                    args.toArray(String[]::new));\n+            rc = jcod.compile();\n+        } else if (toolName.equals(\"jasm\")) {\n+            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog,\n+                    args.toArray(String[]::new));\n+            rc = jasm.compile();\n+        } else {\n+            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n+        }\n+        return new LogAndReturn(encodeLog, rc);\n+    }\n+\n+    \/**\n+     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n+     *\/\n+    public LogAndReturn getLogAndReturn(String toolName, ToolInput... toolInputs) {\n+        if (toolInputs.length == 0)\n+            fail(\"no tool input\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+        args.add(\"-d\");\n+        args.add(destDir.getPath());\n+        int rc = 0;\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jcoder\")) {\n+            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog, toolInputs);\n+            rc = jcod.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else if (toolName.equals(\"jasm\")) {\n+            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog, toolInputs);\n+            rc = jasm.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else {\n+            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n+        }\n+        return new LogAndReturn(encodeLog, rc);\n+    }\n+\n+    \/**\n+     * @return InputOutputTests.LogAndBinResults wrapping the binary result, a log stream as a string and return code\n+     *\/\n+    private LogAndBinResults getLogAndBinResults(String toolName, ToolInput... toolInputs) {\n+        if (toolInputs.length == 0)\n+            fail(\"no tool input\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+\/\/        args.add(\"-d\");\n+\/\/        args.add(destDir.getPath());\n+        int rc = 0;\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jcoder\")) {\n+            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog, toolInputs);\n+            rc = jcod.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else if (toolName.equals(\"jasm\")) {\n+            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog, toolInputs);\n+            rc = jasm.compile(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else {\n+            fail(new IllegalArgumentException(\"Either unknown tools name or tool doesn't return a binary result: \" + toolName));\n+        }\n+        return new LogAndBinResults(encodedFiles, encodeLog, rc);\n+    }\n+\n+\n+    \/**\n+     * @return InputOutputTests.LogAndBinResults wrapping the binary result, a log stream as a string and return code\n+     *\/\n+    private LogAndBinResults getLogAndBinResults(String toolName, List<String> files) {\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+\/\/        args.add(\"-d\");\n+\/\/        args.add(destDir.getPath());\n+        args.addAll(files);\n+        int rc = 0;\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jcoder\")) {\n+            org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog,\n+                    args.toArray(String[]::new));\n+            rc = jcod.compile();\n+        } else if (toolName.equals(\"jasm\")) {\n+            org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog,\n+                    args.toArray(String[]::new));\n+            rc = jasm.compile();\n+        } else {\n+            fail(new IllegalArgumentException(\"Either unknown tools name or tool doesn't return a binary result: \" + toolName));\n+        }\n+        return new LogAndBinResults(encodedFiles, encodeLog, rc);\n+    }\n+\n+    public CompileAction setToolArgs(String... args) {\n+        if (args != null && args.length > 0) {\n+            Collections.addAll(this.toolArgs, args);\n+        } else {\n+            this.toolArgs.clear();\n+        }\n+        return this;\n+    }\n+\n+    private static CompileAction getEntry() {\n+        if (CompileAction.entry == null) {\n+            try {\n+                entry = new CompileAction();\n+            } catch (IOException e) {\n+                fail(e.toString());\n+                throw new RuntimeException(e); \/\/ \/\/ appeasing the compiler: this line will never be executed.\n+            }\n+        }\n+        return entry;\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/CompileAction.java","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2023, Oracle, Red Hat  and\/or theirs affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.lib.LogAndBinResults;\n+import org.openjdk.asmtools.lib.LogAndReturn;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public enum EAsmTools {\n+    JASM(\".jasm\",\n+            (files, args) -> CompileAction.JAsm(files, args),\n+            (inputs, args) ->  CompileAction.JAsm(inputs, args)),\n+    JCODER(\".jcod\",\n+            (files, args) -> CompileAction.JCoder(files, args),\n+            (inputs, args) ->  CompileAction.JCoder(inputs, args)),\n+    JDEC(\".class\", (files, args) -> GenerateAction.JDec(files, args),\n+            (inputs, args) ->  CompileAction.JAsm(inputs, args)),\n+    JDIS(\".class\", (files, args) -> GenerateAction.JDis(files, args),\n+            (inputs, args) ->  CompileAction.JAsm(inputs, args));\n+    private final String fileExtension;\n+    private final Tool tool;\n+    private final ToolResult toolResult;\n+\n+    EAsmTools(String fileExtension, Tool tool, ToolResult toolResult) {\n+        this.fileExtension = fileExtension;\n+        this.toolResult = toolResult;\n+        this.tool = tool;\n+    }\n+\n+    public String getFileExtension() {\n+        return fileExtension;\n+    }\n+\n+    public static Tool getTool(String toolName) {\n+        for (EAsmTools t : values()) {\n+            if (toolName.compareToIgnoreCase(t.name()) == 0)\n+                return t.tool;\n+        }\n+        fail(\"The tool \" + toolName + \" isn't yet implemented.\");\n+        return null;\n+    }\n+\n+    @FunctionalInterface\n+    public interface Tool {\n+        LogAndReturn call(List<String> files, String... args);\n+    }\n+\n+    @FunctionalInterface\n+    public interface ToolResult<T extends LogAndReturn> {\n+        T call(ToolInput[] toolInputs, String... args);\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/EAsmTools.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,263 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.lib.action;\n+\n+import org.openjdk.asmtools.common.Environment;\n+import org.openjdk.asmtools.common.inputs.ToolInput;\n+import org.openjdk.asmtools.common.outputs.ByteOutput;\n+import org.openjdk.asmtools.common.outputs.TextOutput;\n+import org.openjdk.asmtools.common.outputs.ToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.DualStreamToolOutput;\n+import org.openjdk.asmtools.common.outputs.log.StringLog;\n+import org.openjdk.asmtools.lib.LogAndReturn;\n+import org.openjdk.asmtools.lib.LogAndTextResults;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class GenerateAction {\n+    private static GenerateAction entry;\n+    private final File destDir;\n+    private final List<String> toolArgs = new ArrayList<>();\n+\n+    public GenerateAction() throws IOException {\n+        destDir = Files.createTempDirectory(\"generate\").toFile();\n+        destDir.deleteOnExit();\n+    }\n+\n+    public static LogAndReturn JDis(List<String> files, String... args) {\n+        return getEntry().setToolArgs().setToolArgs(args).jdis(files);\n+    }\n+\n+    public static LogAndReturn JDec(List<String> files, String... args) {\n+        return getEntry().setToolArgs().setToolArgs(args).jdec(files);\n+    }\n+\n+    public void reflectionJdis(List<String> files) {\n+        reflectionAction(\"jdis\", files);\n+    }\n+\n+    public void reflectionJdec(List<String> files) {\n+        reflectionAction(\"jdec\", files);\n+    }\n+\n+    public LogAndReturn jdis(List<String> files) {\n+        return getLogAndReturn(\"jdis\", files);\n+    }\n+\n+    public LogAndReturn jdis(ToolInput... toolInputs) {\n+        return getLogAndReturn(\"jdis\", toolInputs);\n+    }\n+\n+    public LogAndReturn jdec(List<String> files) {\n+        return getLogAndReturn(\"jdec\", files);\n+    }\n+\n+    public LogAndReturn jdec(ToolInput... toolInputs) {\n+        return getLogAndReturn(\"jdec\", toolInputs);\n+    }\n+\n+    public LogAndTextResults getJdecResult(List<String> files) {\n+        return getLogAndTextResult(\"jdec\", files);\n+    }\n+\n+    public LogAndTextResults getJdisResult(List<String> files) {\n+        return getLogAndTextResult(\"jdis\", files);\n+    }\n+\n+    public LogAndTextResults getJdecResult(ToolInput... toolInputs) {\n+        return getLogAndTextResult(\"jdec\", toolInputs);\n+    }\n+\n+    public LogAndTextResults getJdisResult(ToolInput... toolInputs) {\n+        return getLogAndTextResult(\"jdis\", toolInputs);\n+    }\n+\n+    \/**\n+     * Moderator method based on reflection API to call tools\n+     *\/\n+    private void reflectionAction(String toolName, List<String> files) {\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+        args.add(\"-d\");\n+        args.add(destDir.getPath());\n+        args.addAll(files);\n+        try {\n+            String toolClassName = \"org.openjdk.asmtools.\" + toolName + \".Main\";\n+            Class<?> toolClass = Class.forName(toolClassName);\n+            Constructor<?> constr = toolClass.getConstructor(PrintStream.class, String.class);\n+            PrintStream ps = new PrintStream(System.out);\n+            Object tool = constr.newInstance(ps, toolName);\n+            Method m = toolClass.getMethod(\"compile\", String[].class);\n+            Object r = m.invoke(tool, new Object[]{args.toArray(new String[0])});\n+            if (r instanceof Boolean) {\n+                boolean ok = (Boolean) r;\n+                if (!ok) {\n+                    fail(toolName + \" failed\");\n+                }\n+                System.out.println(toolName + \" OK\");\n+            } else\n+                fail(\"unexpected result from \" + toolName + \": \" + r.toString());\n+        } catch (ClassNotFoundException e) {\n+            fail(\"can't find \" + toolName);\n+        } catch (ReflectiveOperationException t) {\n+            fail(\"error invoking \" + toolName + \": \" + t);\n+        }\n+    }\n+\n+    \/**\n+     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n+     *\/\n+    private LogAndReturn getLogAndReturn(String toolName, List<String> files) {\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+        args.add(\"-d\");\n+        args.add(destDir.getPath());\n+        args.addAll(files);\n+        int rc = 0;\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jdec\")) {\n+            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles, encodeLog,\n+                    args.toArray(new String[0]));\n+            rc = jdec.decode();\n+        } else if (toolName.equals(\"jdis\")) {\n+            org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(encodedFiles, encodeLog,\n+                    args.toArray(new String[0]));\n+            rc = jdis.disasm();\n+        } else {\n+            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n+        }\n+        return new LogAndReturn(encodeLog, rc);\n+    }\n+\n+    \/**\n+     * @return InputOutputTests.LogAndReturn wrapping both a log stream as a string and return code\n+     *\/\n+    private LogAndReturn getLogAndReturn(String toolName, ToolInput... toolInputs) {\n+        if (toolInputs.length == 0)\n+            fail(\"no tool input\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+        args.add(\"-d\");\n+        args.add(destDir.getPath());\n+        int rc = 0;\n+        ByteOutput encodedFiles = new ByteOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jdec\")) {\n+            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles,encodeLog, toolInputs);\n+            rc = jdec.decode(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else if (toolName.equals(\"jdis\")) {\n+            org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(encodedFiles,encodeLog, toolInputs);\n+            rc = jdis.disasm(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else {\n+            fail(new IllegalArgumentException(\"Unknown tools name: \" + toolName));\n+        }\n+        return new LogAndReturn(encodeLog, rc);\n+    }\n+\n+    \/**\n+     * @return InputOutputTests.LogAndBinResults wrapping the text result, a log stream as a string and return code\n+     *\/\n+    private LogAndTextResults getLogAndTextResult(String toolName, List<String> files) {\n+        if (files.isEmpty())\n+            fail(toolName + \": no files\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+\/\/        args.add(\"-d\");\n+\/\/        args.add(destDir.getPath());\n+        args.addAll(files);\n+        int rc = 0;\n+        TextOutput encodedFiles = new TextOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jdec\")) {\n+            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles,encodeLog,\n+                    args.toArray(String[]::new));\n+            rc = jdec.decode();\n+        } else if (toolName.equals(\"jdis\")) {\n+            org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(encodedFiles,encodeLog,\n+                    args.toArray(String[]::new));\n+            rc = jdis.disasm();\n+        } else {\n+            fail(new IllegalArgumentException(\"Either unknown tools name or the tool doesn't return a text result: \" + toolName));\n+        }\n+        return new LogAndTextResults(encodedFiles, encodeLog, rc);\n+    }\n+\n+    \/**\n+     * @return InputOutputTests.LogAndBinResults wrapping the text result, a log stream as a string and return code\n+     *\/\n+    public LogAndTextResults getLogAndTextResult(String toolName, ToolInput... toolInputs) {\n+        if (toolInputs.length == 0)\n+            fail(\"no tool input\");\n+        List<String> args = toolArgs.stream().collect(Collectors.toList());\n+\/\/        args.add(\"-d\");\n+\/\/        args.add(destDir.getPath());\n+        int rc = 0;\n+        TextOutput encodedFiles = new TextOutput();\n+        StringLog encodeLog = new StringLog();\n+        if (toolName.equals(\"jdec\")) {\n+            org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(encodedFiles,encodeLog, toolInputs);\n+            rc = jdec.decode(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else if (toolName.equals(\"jdis\")) {\n+            org.openjdk.asmtools.jdis.Main jdis =\n+                    new org.openjdk.asmtools.jdis.Main(encodedFiles, encodeLog, toolInputs);\n+            rc = jdis.disasm(args.toArray(String[]::new)) ? Environment.OK : Environment.FAILED;\n+        } else {\n+            fail(new IllegalArgumentException(\"Either unknown tools name or the tool doesn't return a text result: \" + toolName));\n+        }\n+        return new LogAndTextResults(encodedFiles, encodeLog, rc);\n+    }\n+\n+\n+    public GenerateAction setToolArgs(String... args) {\n+        if (args != null && args.length > 0) {\n+            Collections.addAll(this.toolArgs, args);\n+        } else {\n+            this.toolArgs.clear();\n+        }\n+        return this;\n+    }\n+\n+    private static GenerateAction getEntry() {\n+        if (GenerateAction.entry == null) {\n+            try {\n+                entry = new GenerateAction();\n+            } catch (IOException e) {\n+                fail(e.toString());\n+                throw new RuntimeException(e); \/\/ \/\/ appeasing the compiler: this line will never be executed.\n+            }\n+        }\n+        return entry;\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/action\/GenerateAction.java","additions":263,"deletions":0,"binary":false,"changes":263,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.transform.lib;\n+package org.openjdk.asmtools.lib.transform;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/ITestRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/transform\/lib\/ITestRunner.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.transform.lib;\n+package org.openjdk.asmtools.lib.transform;\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/ResultChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/transform\/lib\/ResultChecker.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.asmtools.transform.lib;\n+package org.openjdk.asmtools.lib.transform;\n@@ -26,1 +26,1 @@\n-import org.openjdk.asmtools.common.EAsmTools;\n+import org.openjdk.asmtools.lib.action.EAsmTools;\n@@ -44,1 +44,1 @@\n-import static org.openjdk.asmtools.common.EAsmTools.*;\n+import static org.openjdk.asmtools.lib.action.EAsmTools.*;\n@@ -46,1 +46,0 @@\n-import static org.openjdk.asmtools.transform.lib.ResultChecker.OUT_LINE_PREFIXES_TO_IGNORE;\n@@ -77,1 +76,1 @@\n-    static String MSG_PREFIX = OUT_LINE_PREFIXES_TO_IGNORE[0];\n+    static String MSG_PREFIX = ResultChecker.OUT_LINE_PREFIXES_TO_IGNORE[0];\n","filename":"test\/java\/org\/openjdk\/asmtools\/lib\/transform\/TransformLoader.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"test\/java\/org\/openjdk\/asmtools\/transform\/lib\/TransformLoader.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.asmtools.transform.lib.ITestRunner;\n+import org.openjdk.asmtools.lib.transform.ITestRunner;\n@@ -27,1 +27,0 @@\n-import java.lang.reflect.InvocationTargetException;\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7902820\/TestRunnerNegative.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.asmtools.transform.lib.ITestRunner;\n+import org.openjdk.asmtools.lib.transform.ITestRunner;\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7902820\/TestRunnerPositive.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.openjdk.asmtools.transform.lib.ResultChecker;\n-import org.openjdk.asmtools.transform.lib.TransformLoader;\n+import org.openjdk.asmtools.lib.transform.ResultChecker;\n+import org.openjdk.asmtools.lib.transform.TransformLoader;\n@@ -35,1 +35,1 @@\n-import static org.openjdk.asmtools.transform.lib.TransformLoader.TransformRules.JCOD_TO_CLASS_LOAD;\n+import static org.openjdk.asmtools.lib.transform.TransformLoader.TransformRules.JCOD_TO_CLASS_LOAD;\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7902820Tests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.openjdk.asmtools.InputOutputTests;\n-import org.openjdk.asmtools.common.EAsmTools;\n+import org.openjdk.asmtools.lib.LogAndReturn;\n+import org.openjdk.asmtools.lib.action.EAsmTools;\n@@ -63,1 +63,1 @@\n-                InputOutputTests.LogAndReturn ret = tool.call(List.of(resourceDir + File.separator + fileName));\n+                LogAndReturn ret = tool.call(List.of(resourceDir + File.separator + fileName));\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7903259Tests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.asmtools.transform.lib.ITestRunner;\n+import org.openjdk.asmtools.lib.transform.ITestRunner;\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7903454\/TestRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.openjdk.asmtools.transform.lib.ResultChecker;\n-import org.openjdk.asmtools.transform.lib.TransformLoader;\n+import org.openjdk.asmtools.lib.transform.ResultChecker;\n+import org.openjdk.asmtools.lib.transform.TransformLoader;\n@@ -35,2 +35,2 @@\n-import static org.openjdk.asmtools.transform.lib.TransformLoader.TransformRules.JASM_TO_CLASS_LOAD;\n-import static org.openjdk.asmtools.transform.lib.TransformLoader.TransformRules.JCOD_TO_CLASS_LOAD;\n+import static org.openjdk.asmtools.lib.transform.TransformLoader.TransformRules.JASM_TO_CLASS_LOAD;\n+import static org.openjdk.asmtools.lib.transform.TransformLoader.TransformRules.JCOD_TO_CLASS_LOAD;\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case7903454Tests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.asmtools.transform.lib.ITestRunner;\n+import org.openjdk.asmtools.lib.transform.ITestRunner;\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case8302260\/TestRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.openjdk.asmtools.transform.lib.ResultChecker;\n-import org.openjdk.asmtools.transform.lib.TransformLoader;\n+import org.openjdk.asmtools.lib.transform.ResultChecker;\n+import org.openjdk.asmtools.lib.transform.TransformLoader;\n@@ -37,2 +37,2 @@\n-import static org.openjdk.asmtools.common.EAsmTools.JDEC;\n-import static org.openjdk.asmtools.common.EAsmTools.JDIS;\n+import static org.openjdk.asmtools.lib.action.EAsmTools.JDEC;\n+import static org.openjdk.asmtools.lib.action.EAsmTools.JDIS;\n@@ -40,1 +40,1 @@\n-import static org.openjdk.asmtools.transform.lib.TransformLoader.TransformRules.*;\n+import static org.openjdk.asmtools.lib.transform.TransformLoader.TransformRules.*;\n","filename":"test\/java\/org\/openjdk\/asmtools\/transform\/case8302260Tests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,926 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+module #6 \/* java.base *\/ version 65:0\n+{\n+  const #1   = class   #2;             \/\/ module-info\n+  const #2   = Utf8    \"module-info\";\n+  const #3   = Utf8    \"SourceFile\";\n+  const #4   = Utf8    \"module-info.java\";\n+  const #5   = Utf8    \"Module\";\n+  const #6   = Module  #7;             \/\/ java.base\n+  const #7   = Utf8    \"java.base\";\n+  const #8   = Package #9;             \/\/ java\/io\n+  const #9   = Utf8    \"java\/io\";\n+  const #10  = Package #11;            \/\/ java\/lang\n+  const #11  = Utf8    \"java\/lang\";\n+  const #12  = Package #13;            \/\/ java\/lang\/annotation\n+  const #13  = Utf8    \"java\/lang\/annotation\";\n+  const #14  = Package #15;            \/\/ java\/lang\/constant\n+  const #15  = Utf8    \"java\/lang\/constant\";\n+  const #16  = Package #17;            \/\/ java\/lang\/foreign\n+  const #17  = Utf8    \"java\/lang\/foreign\";\n+  const #18  = Package #19;            \/\/ java\/lang\/invoke\n+  const #19  = Utf8    \"java\/lang\/invoke\";\n+  const #20  = Package #21;            \/\/ java\/lang\/module\n+  const #21  = Utf8    \"java\/lang\/module\";\n+  const #22  = Package #23;            \/\/ java\/lang\/ref\n+  const #23  = Utf8    \"java\/lang\/ref\";\n+  const #24  = Package #25;            \/\/ java\/lang\/reflect\n+  const #25  = Utf8    \"java\/lang\/reflect\";\n+  const #26  = Package #27;            \/\/ java\/lang\/runtime\n+  const #27  = Utf8    \"java\/lang\/runtime\";\n+  const #28  = Package #29;            \/\/ java\/math\n+  const #29  = Utf8    \"java\/math\";\n+  const #30  = Package #31;            \/\/ java\/net\n+  const #31  = Utf8    \"java\/net\";\n+  const #32  = Package #33;            \/\/ java\/net\/spi\n+  const #33  = Utf8    \"java\/net\/spi\";\n+  const #34  = Package #35;            \/\/ java\/nio\n+  const #35  = Utf8    \"java\/nio\";\n+  const #36  = Package #37;            \/\/ java\/nio\/channels\n+  const #37  = Utf8    \"java\/nio\/channels\";\n+  const #38  = Package #39;            \/\/ java\/nio\/channels\/spi\n+  const #39  = Utf8    \"java\/nio\/channels\/spi\";\n+  const #40  = Package #41;            \/\/ java\/nio\/charset\n+  const #41  = Utf8    \"java\/nio\/charset\";\n+  const #42  = Package #43;            \/\/ java\/nio\/charset\/spi\n+  const #43  = Utf8    \"java\/nio\/charset\/spi\";\n+  const #44  = Package #45;            \/\/ java\/nio\/file\n+  const #45  = Utf8    \"java\/nio\/file\";\n+  const #46  = Package #47;            \/\/ java\/nio\/file\/attribute\n+  const #47  = Utf8    \"java\/nio\/file\/attribute\";\n+  const #48  = Package #49;            \/\/ java\/nio\/file\/spi\n+  const #49  = Utf8    \"java\/nio\/file\/spi\";\n+  const #50  = Package #51;            \/\/ java\/security\n+  const #51  = Utf8    \"java\/security\";\n+  const #52  = Package #53;            \/\/ java\/security\/cert\n+  const #53  = Utf8    \"java\/security\/cert\";\n+  const #54  = Package #55;            \/\/ java\/security\/interfaces\n+  const #55  = Utf8    \"java\/security\/interfaces\";\n+  const #56  = Package #57;            \/\/ java\/security\/spec\n+  const #57  = Utf8    \"java\/security\/spec\";\n+  const #58  = Package #59;            \/\/ java\/text\n+  const #59  = Utf8    \"java\/text\";\n+  const #60  = Package #61;            \/\/ java\/text\/spi\n+  const #61  = Utf8    \"java\/text\/spi\";\n+  const #62  = Package #63;            \/\/ java\/time\n+  const #63  = Utf8    \"java\/time\";\n+  const #64  = Package #65;            \/\/ java\/time\/chrono\n+  const #65  = Utf8    \"java\/time\/chrono\";\n+  const #66  = Package #67;            \/\/ java\/time\/format\n+  const #67  = Utf8    \"java\/time\/format\";\n+  const #68  = Package #69;            \/\/ java\/time\/temporal\n+  const #69  = Utf8    \"java\/time\/temporal\";\n+  const #70  = Package #71;            \/\/ java\/time\/zone\n+  const #71  = Utf8    \"java\/time\/zone\";\n+  const #72  = Package #73;            \/\/ java\/util\n+  const #73  = Utf8    \"java\/util\";\n+  const #74  = Package #75;            \/\/ java\/util\/concurrent\n+  const #75  = Utf8    \"java\/util\/concurrent\";\n+  const #76  = Package #77;            \/\/ java\/util\/concurrent\/atomic\n+  const #77  = Utf8    \"java\/util\/concurrent\/atomic\";\n+  const #78  = Package #79;            \/\/ java\/util\/concurrent\/locks\n+  const #79  = Utf8    \"java\/util\/concurrent\/locks\";\n+  const #80  = Package #81;            \/\/ java\/util\/function\n+  const #81  = Utf8    \"java\/util\/function\";\n+  const #82  = Package #83;            \/\/ java\/util\/jar\n+  const #83  = Utf8    \"java\/util\/jar\";\n+  const #84  = Package #85;            \/\/ java\/util\/random\n+  const #85  = Utf8    \"java\/util\/random\";\n+  const #86  = Package #87;            \/\/ java\/util\/regex\n+  const #87  = Utf8    \"java\/util\/regex\";\n+  const #88  = Package #89;            \/\/ java\/util\/spi\n+  const #89  = Utf8    \"java\/util\/spi\";\n+  const #90  = Package #91;            \/\/ java\/util\/stream\n+  const #91  = Utf8    \"java\/util\/stream\";\n+  const #92  = Package #93;            \/\/ java\/util\/zip\n+  const #93  = Utf8    \"java\/util\/zip\";\n+  const #94  = Package #95;            \/\/ javax\/crypto\n+  const #95  = Utf8    \"javax\/crypto\";\n+  const #96  = Package #97;            \/\/ javax\/crypto\/interfaces\n+  const #97  = Utf8    \"javax\/crypto\/interfaces\";\n+  const #98  = Package #99;            \/\/ javax\/crypto\/spec\n+  const #99  = Utf8    \"javax\/crypto\/spec\";\n+  const #100 = Package #101;           \/\/ javax\/net\n+  const #101 = Utf8    \"javax\/net\";\n+  const #102 = Package #103;           \/\/ javax\/net\/ssl\n+  const #103 = Utf8    \"javax\/net\/ssl\";\n+  const #104 = Package #105;           \/\/ javax\/security\/auth\n+  const #105 = Utf8    \"javax\/security\/auth\";\n+  const #106 = Package #107;           \/\/ javax\/security\/auth\/callback\n+  const #107 = Utf8    \"javax\/security\/auth\/callback\";\n+  const #108 = Package #109;           \/\/ javax\/security\/auth\/login\n+  const #109 = Utf8    \"javax\/security\/auth\/login\";\n+  const #110 = Package #111;           \/\/ javax\/security\/auth\/spi\n+  const #111 = Utf8    \"javax\/security\/auth\/spi\";\n+  const #112 = Package #113;           \/\/ javax\/security\/auth\/x500\n+  const #113 = Utf8    \"javax\/security\/auth\/x500\";\n+  const #114 = Package #115;           \/\/ javax\/security\/cert\n+  const #115 = Utf8    \"javax\/security\/cert\";\n+  const #116 = Package #117;           \/\/ com\/sun\/crypto\/provider\n+  const #117 = Utf8    \"com\/sun\/crypto\/provider\";\n+  const #118 = Module  #119;           \/\/ jdk.crypto.cryptoki\n+  const #119 = Utf8    \"jdk.crypto.cryptoki\";\n+  const #120 = Package #121;           \/\/ com\/sun\/security\/ntlm\n+  const #121 = Utf8    \"com\/sun\/security\/ntlm\";\n+  const #122 = Module  #123;           \/\/ java.security.sasl\n+  const #123 = Utf8    \"java.security.sasl\";\n+  const #124 = Package #125;           \/\/ jdk\/internal\/access\n+  const #125 = Utf8    \"jdk\/internal\/access\";\n+  const #126 = Module  #127;           \/\/ java.desktop\n+  const #127 = Utf8    \"java.desktop\";\n+  const #128 = Module  #129;           \/\/ java.logging\n+  const #129 = Utf8    \"java.logging\";\n+  const #130 = Module  #131;           \/\/ java.management\n+  const #131 = Utf8    \"java.management\";\n+  const #132 = Module  #133;           \/\/ java.naming\n+  const #133 = Utf8    \"java.naming\";\n+  const #134 = Module  #135;           \/\/ java.rmi\n+  const #135 = Utf8    \"java.rmi\";\n+  const #136 = Module  #137;           \/\/ jdk.charsets\n+  const #137 = Utf8    \"jdk.charsets\";\n+  const #138 = Module  #139;           \/\/ jdk.incubator.concurrent\n+  const #139 = Utf8    \"jdk.incubator.concurrent\";\n+  const #140 = Module  #141;           \/\/ jdk.jartool\n+  const #141 = Utf8    \"jdk.jartool\";\n+  const #142 = Module  #143;           \/\/ jdk.jfr\n+  const #143 = Utf8    \"jdk.jfr\";\n+  const #144 = Module  #145;           \/\/ jdk.jlink\n+  const #145 = Utf8    \"jdk.jlink\";\n+  const #146 = Module  #147;           \/\/ jdk.net\n+  const #147 = Utf8    \"jdk.net\";\n+  const #148 = Module  #149;           \/\/ jdk.sctp\n+  const #149 = Utf8    \"jdk.sctp\";\n+  const #150 = Package #151;           \/\/ jdk\/internal\/classfile\n+  const #151 = Utf8    \"jdk\/internal\/classfile\";\n+  const #152 = Module  #153;           \/\/ jdk.jshell\n+  const #153 = Utf8    \"jdk.jshell\";\n+  const #154 = Package #155;           \/\/ jdk\/internal\/classfile\/attribute\n+  const #155 = Utf8    \"jdk\/internal\/classfile\/attribute\";\n+  const #156 = Package #157;           \/\/ jdk\/internal\/classfile\/constantpool\n+  const #157 = Utf8    \"jdk\/internal\/classfile\/constantpool\";\n+  const #158 = Package #159;           \/\/ jdk\/internal\/classfile\/instruction\n+  const #159 = Utf8    \"jdk\/internal\/classfile\/instruction\";\n+  const #160 = Package #161;           \/\/ jdk\/internal\/event\n+  const #161 = Utf8    \"jdk\/internal\/event\";\n+  const #162 = Package #163;           \/\/ jdk\/internal\/foreign\n+  const #163 = Utf8    \"jdk\/internal\/foreign\";\n+  const #164 = Module  #165;           \/\/ jdk.incubator.vector\n+  const #165 = Utf8    \"jdk.incubator.vector\";\n+  const #166 = Package #167;           \/\/ jdk\/internal\/io\n+  const #167 = Utf8    \"jdk\/internal\/io\";\n+  const #168 = Module  #169;           \/\/ jdk.internal.le\n+  const #169 = Utf8    \"jdk.internal.le\";\n+  const #170 = Package #171;           \/\/ jdk\/internal\/javac\n+  const #171 = Utf8    \"jdk\/internal\/javac\";\n+  const #172 = Module  #173;           \/\/ java.compiler\n+  const #173 = Utf8    \"java.compiler\";\n+  const #174 = Module  #175;           \/\/ jdk.compiler\n+  const #175 = Utf8    \"jdk.compiler\";\n+  const #176 = Module  #177;           \/\/ jdk.jdi\n+  const #177 = Utf8    \"jdk.jdi\";\n+  const #178 = Module  #179;           \/\/ jdk.management\n+  const #179 = Utf8    \"jdk.management\";\n+  const #180 = Package #181;           \/\/ jdk\/internal\/jimage\n+  const #181 = Utf8    \"jdk\/internal\/jimage\";\n+  const #182 = Package #183;           \/\/ jdk\/internal\/jimage\/decompressor\n+  const #183 = Utf8    \"jdk\/internal\/jimage\/decompressor\";\n+  const #184 = Package #185;           \/\/ jdk\/internal\/jmod\n+  const #185 = Utf8    \"jdk\/internal\/jmod\";\n+  const #186 = Package #187;           \/\/ jdk\/internal\/loader\n+  const #187 = Utf8    \"jdk\/internal\/loader\";\n+  const #188 = Module  #189;           \/\/ java.instrument\n+  const #189 = Utf8    \"java.instrument\";\n+  const #190 = Package #191;           \/\/ jdk\/internal\/logger\n+  const #191 = Utf8    \"jdk\/internal\/logger\";\n+  const #192 = Package #193;           \/\/ jdk\/internal\/misc\n+  const #193 = Utf8    \"jdk\/internal\/misc\";\n+  const #194 = Module  #195;           \/\/ java.net.http\n+  const #195 = Utf8    \"java.net.http\";\n+  const #196 = Module  #197;           \/\/ java.security.jgss\n+  const #197 = Utf8    \"java.security.jgss\";\n+  const #198 = Module  #199;           \/\/ jdk.attach\n+  const #199 = Utf8    \"jdk.attach\";\n+  const #200 = Module  #201;           \/\/ jdk.internal.vm.ci\n+  const #201 = Utf8    \"jdk.internal.vm.ci\";\n+  const #202 = Module  #203;           \/\/ jdk.nio.mapmode\n+  const #203 = Utf8    \"jdk.nio.mapmode\";\n+  const #204 = Module  #205;           \/\/ jdk.unsupported\n+  const #205 = Utf8    \"jdk.unsupported\";\n+  const #206 = Package #207;           \/\/ jdk\/internal\/module\n+  const #207 = Utf8    \"jdk\/internal\/module\";\n+  const #208 = Module  #209;           \/\/ java.management.rmi\n+  const #209 = Utf8    \"java.management.rmi\";\n+  const #210 = Module  #211;           \/\/ jdk.jpackage\n+  const #211 = Utf8    \"jdk.jpackage\";\n+  const #212 = Package #213;           \/\/ jdk\/internal\/org\/objectweb\/asm\n+  const #213 = Utf8    \"jdk\/internal\/org\/objectweb\/asm\";\n+  const #214 = Package #215;           \/\/ jdk\/internal\/org\/objectweb\/asm\/commons\n+  const #215 = Utf8    \"jdk\/internal\/org\/objectweb\/asm\/commons\";\n+  const #216 = Package #217;           \/\/ jdk\/internal\/org\/objectweb\/asm\/tree\n+  const #217 = Utf8    \"jdk\/internal\/org\/objectweb\/asm\/tree\";\n+  const #218 = Package #219;           \/\/ jdk\/internal\/org\/objectweb\/asm\/util\n+  const #219 = Utf8    \"jdk\/internal\/org\/objectweb\/asm\/util\";\n+  const #220 = Package #221;           \/\/ jdk\/internal\/org\/xml\/sax\n+  const #221 = Utf8    \"jdk\/internal\/org\/xml\/sax\";\n+  const #222 = Package #223;           \/\/ jdk\/internal\/org\/xml\/sax\/helpers\n+  const #223 = Utf8    \"jdk\/internal\/org\/xml\/sax\/helpers\";\n+  const #224 = Package #225;           \/\/ jdk\/internal\/perf\n+  const #225 = Utf8    \"jdk\/internal\/perf\";\n+  const #226 = Module  #227;           \/\/ jdk.internal.jvmstat\n+  const #227 = Utf8    \"jdk.internal.jvmstat\";\n+  const #228 = Module  #229;           \/\/ jdk.management.agent\n+  const #229 = Utf8    \"jdk.management.agent\";\n+  const #230 = Package #231;           \/\/ jdk\/internal\/platform\n+  const #231 = Utf8    \"jdk\/internal\/platform\";\n+  const #232 = Package #233;           \/\/ jdk\/internal\/ref\n+  const #233 = Utf8    \"jdk\/internal\/ref\";\n+  const #234 = Package #235;           \/\/ jdk\/internal\/reflect\n+  const #235 = Utf8    \"jdk\/internal\/reflect\";\n+  const #236 = Module  #237;           \/\/ java.sql\n+  const #237 = Utf8    \"java.sql\";\n+  const #238 = Module  #239;           \/\/ java.sql.rowset\n+  const #239 = Utf8    \"java.sql.rowset\";\n+  const #240 = Module  #241;           \/\/ jdk.dynalink\n+  const #241 = Utf8    \"jdk.dynalink\";\n+  const #242 = Package #243;           \/\/ jdk\/internal\/util\n+  const #243 = Utf8    \"jdk\/internal\/util\";\n+  const #244 = Package #245;           \/\/ jdk\/internal\/util\/jar\n+  const #245 = Utf8    \"jdk\/internal\/util\/jar\";\n+  const #246 = Package #247;           \/\/ jdk\/internal\/util\/random\n+  const #247 = Utf8    \"jdk\/internal\/util\/random\";\n+  const #248 = Module  #249;           \/\/ jdk.random\n+  const #249 = Utf8    \"jdk.random\";\n+  const #250 = Package #251;           \/\/ jdk\/internal\/util\/xml\n+  const #251 = Utf8    \"jdk\/internal\/util\/xml\";\n+  const #252 = Package #253;           \/\/ jdk\/internal\/util\/xml\/impl\n+  const #253 = Utf8    \"jdk\/internal\/util\/xml\/impl\";\n+  const #254 = Package #255;           \/\/ jdk\/internal\/vm\n+  const #255 = Utf8    \"jdk\/internal\/vm\";\n+  const #256 = Package #257;           \/\/ jdk\/internal\/vm\/annotation\n+  const #257 = Utf8    \"jdk\/internal\/vm\/annotation\";\n+  const #258 = Package #259;           \/\/ jdk\/internal\/vm\/vector\n+  const #259 = Utf8    \"jdk\/internal\/vm\/vector\";\n+  const #260 = Package #261;           \/\/ sun\/invoke\/util\n+  const #261 = Utf8    \"sun\/invoke\/util\";\n+  const #262 = Package #263;           \/\/ sun\/net\n+  const #263 = Utf8    \"sun\/net\";\n+  const #264 = Module  #265;           \/\/ jdk.naming.dns\n+  const #265 = Utf8    \"jdk.naming.dns\";\n+  const #266 = Package #267;           \/\/ sun\/net\/dns\n+  const #267 = Utf8    \"sun\/net\/dns\";\n+  const #268 = Package #269;           \/\/ sun\/net\/ext\n+  const #269 = Utf8    \"sun\/net\/ext\";\n+  const #270 = Package #271;           \/\/ sun\/net\/util\n+  const #271 = Utf8    \"sun\/net\/util\";\n+  const #272 = Module  #273;           \/\/ jdk.jconsole\n+  const #273 = Utf8    \"jdk.jconsole\";\n+  const #274 = Package #275;           \/\/ sun\/net\/www\n+  const #275 = Utf8    \"sun\/net\/www\";\n+  const #276 = Package #277;           \/\/ sun\/net\/www\/protocol\/http\n+  const #277 = Utf8    \"sun\/net\/www\/protocol\/http\";\n+  const #278 = Package #279;           \/\/ sun\/nio\/ch\n+  const #279 = Utf8    \"sun\/nio\/ch\";\n+  const #280 = Package #281;           \/\/ sun\/nio\/cs\n+  const #281 = Utf8    \"sun\/nio\/cs\";\n+  const #282 = Package #283;           \/\/ sun\/nio\/fs\n+  const #283 = Utf8    \"sun\/nio\/fs\";\n+  const #284 = Package #285;           \/\/ sun\/reflect\/annotation\n+  const #285 = Utf8    \"sun\/reflect\/annotation\";\n+  const #286 = Package #287;           \/\/ sun\/reflect\/generics\/reflectiveObjects\n+  const #287 = Utf8    \"sun\/reflect\/generics\/reflectiveObjects\";\n+  const #288 = Package #289;           \/\/ sun\/reflect\/misc\n+  const #289 = Utf8    \"sun\/reflect\/misc\";\n+  const #290 = Module  #291;           \/\/ java.datatransfer\n+  const #291 = Utf8    \"java.datatransfer\";\n+  const #292 = Package #293;           \/\/ sun\/security\/action\n+  const #293 = Utf8    \"sun\/security\/action\";\n+  const #294 = Module  #295;           \/\/ jdk.crypto.ec\n+  const #295 = Utf8    \"jdk.crypto.ec\";\n+  const #296 = Package #297;           \/\/ sun\/security\/internal\/interfaces\n+  const #297 = Utf8    \"sun\/security\/internal\/interfaces\";\n+  const #298 = Package #299;           \/\/ sun\/security\/internal\/spec\n+  const #299 = Utf8    \"sun\/security\/internal\/spec\";\n+  const #300 = Package #301;           \/\/ sun\/security\/jca\n+  const #301 = Utf8    \"sun\/security\/jca\";\n+  const #302 = Module  #303;           \/\/ java.smartcardio\n+  const #303 = Utf8    \"java.smartcardio\";\n+  const #304 = Package #305;           \/\/ sun\/security\/pkcs\n+  const #305 = Utf8    \"sun\/security\/pkcs\";\n+  const #306 = Package #307;           \/\/ sun\/security\/provider\n+  const #307 = Utf8    \"sun\/security\/provider\";\n+  const #308 = Module  #309;           \/\/ jdk.security.auth\n+  const #309 = Utf8    \"jdk.security.auth\";\n+  const #310 = Package #311;           \/\/ sun\/security\/provider\/certpath\n+  const #311 = Utf8    \"sun\/security\/provider\/certpath\";\n+  const #312 = Package #313;           \/\/ sun\/security\/rsa\n+  const #313 = Utf8    \"sun\/security\/rsa\";\n+  const #314 = Package #315;           \/\/ sun\/security\/timestamp\n+  const #315 = Utf8    \"sun\/security\/timestamp\";\n+  const #316 = Package #317;           \/\/ sun\/security\/tools\n+  const #317 = Utf8    \"sun\/security\/tools\";\n+  const #318 = Package #319;           \/\/ sun\/security\/util\n+  const #319 = Utf8    \"sun\/security\/util\";\n+  const #320 = Module  #321;           \/\/ java.xml.crypto\n+  const #321 = Utf8    \"java.xml.crypto\";\n+  const #322 = Module  #323;           \/\/ jdk.security.jgss\n+  const #323 = Utf8    \"jdk.security.jgss\";\n+  const #324 = Package #325;           \/\/ sun\/security\/util\/math\n+  const #325 = Utf8    \"sun\/security\/util\/math\";\n+  const #326 = Package #327;           \/\/ sun\/security\/util\/math\/intpoly\n+  const #327 = Utf8    \"sun\/security\/util\/math\/intpoly\";\n+  const #328 = Package #329;           \/\/ sun\/security\/validator\n+  const #329 = Utf8    \"sun\/security\/validator\";\n+  const #330 = Package #331;           \/\/ sun\/security\/x509\n+  const #331 = Utf8    \"sun\/security\/x509\";\n+  const #332 = Package #333;           \/\/ sun\/util\/cldr\n+  const #333 = Utf8    \"sun\/util\/cldr\";\n+  const #334 = Package #335;           \/\/ sun\/util\/locale\/provider\n+  const #335 = Utf8    \"sun\/util\/locale\/provider\";\n+  const #336 = Module  #337;           \/\/ jdk.localedata\n+  const #337 = Utf8    \"jdk.localedata\";\n+  const #338 = Package #339;           \/\/ sun\/util\/logging\n+  const #339 = Utf8    \"sun\/util\/logging\";\n+  const #340 = Module  #341;           \/\/ java.prefs\n+  const #341 = Utf8    \"java.prefs\";\n+  const #342 = Package #343;           \/\/ sun\/util\/resources\n+  const #343 = Utf8    \"sun\/util\/resources\";\n+  const #344 = class   #345;           \/\/ java\/lang\/System$LoggerFinder\n+  const #345 = Utf8    \"java\/lang\/System$LoggerFinder\";\n+  const #346 = class   #347;           \/\/ java\/net\/ContentHandlerFactory\n+  const #347 = Utf8    \"java\/net\/ContentHandlerFactory\";\n+  const #348 = class   #349;           \/\/ java\/net\/spi\/InetAddressResolverProvider\n+  const #349 = Utf8    \"java\/net\/spi\/InetAddressResolverProvider\";\n+  const #350 = class   #351;           \/\/ java\/net\/spi\/URLStreamHandlerProvider\n+  const #351 = Utf8    \"java\/net\/spi\/URLStreamHandlerProvider\";\n+  const #352 = class   #353;           \/\/ java\/nio\/channels\/spi\/AsynchronousChannelProvider\n+  const #353 = Utf8    \"java\/nio\/channels\/spi\/AsynchronousChannelProvider\";\n+  const #354 = class   #355;           \/\/ java\/nio\/channels\/spi\/SelectorProvider\n+  const #355 = Utf8    \"java\/nio\/channels\/spi\/SelectorProvider\";\n+  const #356 = class   #357;           \/\/ java\/nio\/charset\/spi\/CharsetProvider\n+  const #357 = Utf8    \"java\/nio\/charset\/spi\/CharsetProvider\";\n+  const #358 = class   #359;           \/\/ java\/nio\/file\/spi\/FileSystemProvider\n+  const #359 = Utf8    \"java\/nio\/file\/spi\/FileSystemProvider\";\n+  const #360 = class   #361;           \/\/ java\/nio\/file\/spi\/FileTypeDetector\n+  const #361 = Utf8    \"java\/nio\/file\/spi\/FileTypeDetector\";\n+  const #362 = class   #363;           \/\/ java\/security\/Provider\n+  const #363 = Utf8    \"java\/security\/Provider\";\n+  const #364 = class   #365;           \/\/ java\/text\/spi\/BreakIteratorProvider\n+  const #365 = Utf8    \"java\/text\/spi\/BreakIteratorProvider\";\n+  const #366 = class   #367;           \/\/ java\/text\/spi\/CollatorProvider\n+  const #367 = Utf8    \"java\/text\/spi\/CollatorProvider\";\n+  const #368 = class   #369;           \/\/ java\/text\/spi\/DateFormatProvider\n+  const #369 = Utf8    \"java\/text\/spi\/DateFormatProvider\";\n+  const #370 = class   #371;           \/\/ java\/text\/spi\/DateFormatSymbolsProvider\n+  const #371 = Utf8    \"java\/text\/spi\/DateFormatSymbolsProvider\";\n+  const #372 = class   #373;           \/\/ java\/text\/spi\/DecimalFormatSymbolsProvider\n+  const #373 = Utf8    \"java\/text\/spi\/DecimalFormatSymbolsProvider\";\n+  const #374 = class   #375;           \/\/ java\/text\/spi\/NumberFormatProvider\n+  const #375 = Utf8    \"java\/text\/spi\/NumberFormatProvider\";\n+  const #376 = class   #377;           \/\/ java\/time\/chrono\/AbstractChronology\n+  const #377 = Utf8    \"java\/time\/chrono\/AbstractChronology\";\n+  const #378 = class   #379;           \/\/ java\/time\/chrono\/Chronology\n+  const #379 = Utf8    \"java\/time\/chrono\/Chronology\";\n+  const #380 = class   #381;           \/\/ java\/time\/zone\/ZoneRulesProvider\n+  const #381 = Utf8    \"java\/time\/zone\/ZoneRulesProvider\";\n+  const #382 = class   #383;           \/\/ java\/util\/random\/RandomGenerator\n+  const #383 = Utf8    \"java\/util\/random\/RandomGenerator\";\n+  const #384 = class   #385;           \/\/ java\/util\/spi\/CalendarDataProvider\n+  const #385 = Utf8    \"java\/util\/spi\/CalendarDataProvider\";\n+  const #386 = class   #387;           \/\/ java\/util\/spi\/CalendarNameProvider\n+  const #387 = Utf8    \"java\/util\/spi\/CalendarNameProvider\";\n+  const #388 = class   #389;           \/\/ java\/util\/spi\/CurrencyNameProvider\n+  const #389 = Utf8    \"java\/util\/spi\/CurrencyNameProvider\";\n+  const #390 = class   #391;           \/\/ java\/util\/spi\/LocaleNameProvider\n+  const #391 = Utf8    \"java\/util\/spi\/LocaleNameProvider\";\n+  const #392 = class   #393;           \/\/ java\/util\/spi\/ResourceBundleControlProvider\n+  const #393 = Utf8    \"java\/util\/spi\/ResourceBundleControlProvider\";\n+  const #394 = class   #395;           \/\/ java\/util\/spi\/ResourceBundleProvider\n+  const #395 = Utf8    \"java\/util\/spi\/ResourceBundleProvider\";\n+  const #396 = class   #397;           \/\/ java\/util\/spi\/TimeZoneNameProvider\n+  const #397 = Utf8    \"java\/util\/spi\/TimeZoneNameProvider\";\n+  const #398 = class   #399;           \/\/ java\/util\/spi\/ToolProvider\n+  const #399 = Utf8    \"java\/util\/spi\/ToolProvider\";\n+  const #400 = class   #401;           \/\/ javax\/security\/auth\/spi\/LoginModule\n+  const #401 = Utf8    \"javax\/security\/auth\/spi\/LoginModule\";\n+  const #402 = class   #403;           \/\/ jdk\/internal\/io\/JdkConsoleProvider\n+  const #403 = Utf8    \"jdk\/internal\/io\/JdkConsoleProvider\";\n+  const #404 = class   #405;           \/\/ jdk\/internal\/logger\/DefaultLoggerFinder\n+  const #405 = Utf8    \"jdk\/internal\/logger\/DefaultLoggerFinder\";\n+  const #406 = class   #407;           \/\/ sun\/text\/spi\/JavaTimeDateTimePatternProvider\n+  const #407 = Utf8    \"sun\/text\/spi\/JavaTimeDateTimePatternProvider\";\n+  const #408 = class   #409;           \/\/ sun\/util\/locale\/provider\/LocaleDataMetaInfo\n+  const #409 = Utf8    \"sun\/util\/locale\/provider\/LocaleDataMetaInfo\";\n+  const #410 = class   #411;           \/\/ sun\/util\/resources\/LocaleData$CommonResourceBundleProvider\n+  const #411 = Utf8    \"sun\/util\/resources\/LocaleData$CommonResourceBundleProvider\";\n+  const #412 = class   #413;           \/\/ sun\/util\/resources\/LocaleData$SupplementaryResourceBundleProvider\n+  const #413 = Utf8    \"sun\/util\/resources\/LocaleData$SupplementaryResourceBundleProvider\";\n+  const #414 = class   #415;           \/\/ sun\/util\/spi\/CalendarProvider\n+  const #415 = Utf8    \"sun\/util\/spi\/CalendarProvider\";\n+  const #416 = class   #417;           \/\/ jdk\/internal\/jrtfs\/JrtFileSystemProvider\n+  const #417 = Utf8    \"jdk\/internal\/jrtfs\/JrtFileSystemProvider\";\n+  const #418 = class   #419;           \/\/ java\/security\/SecureRandom\n+  const #419 = Utf8    \"java\/security\/SecureRandom\";\n+  const #420 = class   #421;           \/\/ java\/util\/Random\n+  const #421 = Utf8    \"java\/util\/Random\";\n+  const #422 = class   #423;           \/\/ java\/util\/SplittableRandom\n+  const #423 = Utf8    \"java\/util\/SplittableRandom\";\n+  const #424 = Utf8    \"InnerClasses\";\n+  const #425 = class   #426;           \/\/ java\/lang\/System\n+  const #426 = Utf8    \"java\/lang\/System\";\n+  const #427 = Utf8    \"LoggerFinder\";\n+  const #428 = class   #429;           \/\/ sun\/util\/resources\/LocaleData\n+  const #429 = Utf8    \"sun\/util\/resources\/LocaleData\";\n+  const #430 = Utf8    \"CommonResourceBundleProvider\";\n+  const #431 = Utf8    \"SupplementaryResourceBundleProvider\";\n+  const #432 = Utf8    \"ModulePackages\";\n+  const #433 = Utf8    \"apple\/security\";\n+  const #434 = Package #433;           \/\/ apple\/security\n+  const #435 = Utf8    \"jdk\/internal\";\n+  const #436 = Package #435;           \/\/ jdk\/internal\n+  const #437 = Utf8    \"jdk\/internal\/access\/foreign\";\n+  const #438 = Package #437;           \/\/ jdk\/internal\/access\/foreign\n+  const #439 = Utf8    \"jdk\/internal\/classfile\/components\";\n+  const #440 = Package #439;           \/\/ jdk\/internal\/classfile\/components\n+  const #441 = Utf8    \"jdk\/internal\/classfile\/impl\";\n+  const #442 = Package #441;           \/\/ jdk\/internal\/classfile\/impl\n+  const #443 = Utf8    \"jdk\/internal\/classfile\/impl\/verifier\";\n+  const #444 = Package #443;           \/\/ jdk\/internal\/classfile\/impl\/verifier\n+  const #445 = Utf8    \"jdk\/internal\/classfile\/java\/lang\/constant\";\n+  const #446 = Package #445;           \/\/ jdk\/internal\/classfile\/java\/lang\/constant\n+  const #447 = Utf8    \"jdk\/internal\/foreign\/abi\";\n+  const #448 = Package #447;           \/\/ jdk\/internal\/foreign\/abi\n+  const #449 = Utf8    \"jdk\/internal\/foreign\/abi\/aarch64\";\n+  const #450 = Package #449;           \/\/ jdk\/internal\/foreign\/abi\/aarch64\n+  const #451 = Utf8    \"jdk\/internal\/foreign\/abi\/aarch64\/linux\";\n+  const #452 = Package #451;           \/\/ jdk\/internal\/foreign\/abi\/aarch64\/linux\n+  const #453 = Utf8    \"jdk\/internal\/foreign\/abi\/aarch64\/macos\";\n+  const #454 = Package #453;           \/\/ jdk\/internal\/foreign\/abi\/aarch64\/macos\n+  const #455 = Utf8    \"jdk\/internal\/foreign\/abi\/aarch64\/windows\";\n+  const #456 = Package #455;           \/\/ jdk\/internal\/foreign\/abi\/aarch64\/windows\n+  const #457 = Utf8    \"jdk\/internal\/foreign\/abi\/fallback\";\n+  const #458 = Package #457;           \/\/ jdk\/internal\/foreign\/abi\/fallback\n+  const #459 = Utf8    \"jdk\/internal\/foreign\/abi\/riscv64\";\n+  const #460 = Package #459;           \/\/ jdk\/internal\/foreign\/abi\/riscv64\n+  const #461 = Utf8    \"jdk\/internal\/foreign\/abi\/riscv64\/linux\";\n+  const #462 = Package #461;           \/\/ jdk\/internal\/foreign\/abi\/riscv64\/linux\n+  const #463 = Utf8    \"jdk\/internal\/foreign\/abi\/x64\";\n+  const #464 = Package #463;           \/\/ jdk\/internal\/foreign\/abi\/x64\n+  const #465 = Utf8    \"jdk\/internal\/foreign\/abi\/x64\/sysv\";\n+  const #466 = Package #465;           \/\/ jdk\/internal\/foreign\/abi\/x64\/sysv\n+  const #467 = Utf8    \"jdk\/internal\/foreign\/abi\/x64\/windows\";\n+  const #468 = Package #467;           \/\/ jdk\/internal\/foreign\/abi\/x64\/windows\n+  const #469 = Utf8    \"jdk\/internal\/foreign\/layout\";\n+  const #470 = Package #469;           \/\/ jdk\/internal\/foreign\/layout\n+  const #471 = Utf8    \"jdk\/internal\/icu\/impl\";\n+  const #472 = Package #471;           \/\/ jdk\/internal\/icu\/impl\n+  const #473 = Utf8    \"jdk\/internal\/icu\/impl\/data\/icudt72b\";\n+  const #474 = Package #473;           \/\/ jdk\/internal\/icu\/impl\/data\/icudt72b\n+  const #475 = Utf8    \"jdk\/internal\/icu\/lang\";\n+  const #476 = Package #475;           \/\/ jdk\/internal\/icu\/lang\n+  const #477 = Utf8    \"jdk\/internal\/icu\/text\";\n+  const #478 = Package #477;           \/\/ jdk\/internal\/icu\/text\n+  const #479 = Utf8    \"jdk\/internal\/icu\/util\";\n+  const #480 = Package #479;           \/\/ jdk\/internal\/icu\/util\n+  const #481 = Utf8    \"jdk\/internal\/jrtfs\";\n+  const #482 = Package #481;           \/\/ jdk\/internal\/jrtfs\n+  const #483 = Utf8    \"jdk\/internal\/math\";\n+  const #484 = Package #483;           \/\/ jdk\/internal\/math\n+  const #485 = Utf8    \"jdk\/internal\/org\/objectweb\/asm\/signature\";\n+  const #486 = Package #485;           \/\/ jdk\/internal\/org\/objectweb\/asm\/signature\n+  const #487 = Utf8    \"jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\";\n+  const #488 = Package #487;           \/\/ jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\n+  const #489 = Utf8    \"jdk\/internal\/util\/regex\";\n+  const #490 = Package #489;           \/\/ jdk\/internal\/util\/regex\n+  const #491 = Utf8    \"sun\/invoke\";\n+  const #492 = Package #491;           \/\/ sun\/invoke\n+  const #493 = Utf8    \"sun\/invoke\/empty\";\n+  const #494 = Package #493;           \/\/ sun\/invoke\/empty\n+  const #495 = Utf8    \"sun\/launcher\";\n+  const #496 = Package #495;           \/\/ sun\/launcher\n+  const #497 = Utf8    \"sun\/launcher\/resources\";\n+  const #498 = Package #497;           \/\/ sun\/launcher\/resources\n+  const #499 = Utf8    \"sun\/net\/ftp\";\n+  const #500 = Package #499;           \/\/ sun\/net\/ftp\n+  const #501 = Utf8    \"sun\/net\/ftp\/impl\";\n+  const #502 = Package #501;           \/\/ sun\/net\/ftp\/impl\n+  const #503 = Utf8    \"sun\/net\/idn\";\n+  const #504 = Package #503;           \/\/ sun\/net\/idn\n+  const #505 = Utf8    \"sun\/net\/sdp\";\n+  const #506 = Package #505;           \/\/ sun\/net\/sdp\n+  const #507 = Utf8    \"sun\/net\/smtp\";\n+  const #508 = Package #507;           \/\/ sun\/net\/smtp\n+  const #509 = Utf8    \"sun\/net\/spi\";\n+  const #510 = Package #509;           \/\/ sun\/net\/spi\n+  const #511 = Utf8    \"sun\/net\/www\/content\/text\";\n+  const #512 = Package #511;           \/\/ sun\/net\/www\/content\/text\n+  const #513 = Utf8    \"sun\/net\/www\/http\";\n+  const #514 = Package #513;           \/\/ sun\/net\/www\/http\n+  const #515 = Utf8    \"sun\/net\/www\/protocol\/file\";\n+  const #516 = Package #515;           \/\/ sun\/net\/www\/protocol\/file\n+  const #517 = Utf8    \"sun\/net\/www\/protocol\/ftp\";\n+  const #518 = Package #517;           \/\/ sun\/net\/www\/protocol\/ftp\n+  const #519 = Utf8    \"sun\/net\/www\/protocol\/http\/ntlm\";\n+  const #520 = Package #519;           \/\/ sun\/net\/www\/protocol\/http\/ntlm\n+  const #521 = Utf8    \"sun\/net\/www\/protocol\/https\";\n+  const #522 = Package #521;           \/\/ sun\/net\/www\/protocol\/https\n+  const #523 = Utf8    \"sun\/net\/www\/protocol\/jar\";\n+  const #524 = Package #523;           \/\/ sun\/net\/www\/protocol\/jar\n+  const #525 = Utf8    \"sun\/net\/www\/protocol\/jmod\";\n+  const #526 = Package #525;           \/\/ sun\/net\/www\/protocol\/jmod\n+  const #527 = Utf8    \"sun\/net\/www\/protocol\/jrt\";\n+  const #528 = Package #527;           \/\/ sun\/net\/www\/protocol\/jrt\n+  const #529 = Utf8    \"sun\/net\/www\/protocol\/mailto\";\n+  const #530 = Package #529;           \/\/ sun\/net\/www\/protocol\/mailto\n+  const #531 = Utf8    \"sun\/nio\";\n+  const #532 = Package #531;           \/\/ sun\/nio\n+  const #533 = Utf8    \"sun\/reflect\/generics\/factory\";\n+  const #534 = Package #533;           \/\/ sun\/reflect\/generics\/factory\n+  const #535 = Utf8    \"sun\/reflect\/generics\/parser\";\n+  const #536 = Package #535;           \/\/ sun\/reflect\/generics\/parser\n+  const #537 = Utf8    \"sun\/reflect\/generics\/repository\";\n+  const #538 = Package #537;           \/\/ sun\/reflect\/generics\/repository\n+  const #539 = Utf8    \"sun\/reflect\/generics\/scope\";\n+  const #540 = Package #539;           \/\/ sun\/reflect\/generics\/scope\n+  const #541 = Utf8    \"sun\/reflect\/generics\/tree\";\n+  const #542 = Package #541;           \/\/ sun\/reflect\/generics\/tree\n+  const #543 = Utf8    \"sun\/reflect\/generics\/visitor\";\n+  const #544 = Package #543;           \/\/ sun\/reflect\/generics\/visitor\n+  const #545 = Utf8    \"sun\/security\/pkcs10\";\n+  const #546 = Package #545;           \/\/ sun\/security\/pkcs10\n+  const #547 = Utf8    \"sun\/security\/pkcs12\";\n+  const #548 = Package #547;           \/\/ sun\/security\/pkcs12\n+  const #549 = Utf8    \"sun\/security\/provider\/certpath\/ssl\";\n+  const #550 = Package #549;           \/\/ sun\/security\/provider\/certpath\/ssl\n+  const #551 = Utf8    \"sun\/security\/ssl\";\n+  const #552 = Package #551;           \/\/ sun\/security\/ssl\n+  const #553 = Utf8    \"sun\/security\/tools\/keytool\";\n+  const #554 = Package #553;           \/\/ sun\/security\/tools\/keytool\n+  const #555 = Utf8    \"sun\/text\";\n+  const #556 = Package #555;           \/\/ sun\/text\n+  const #557 = Utf8    \"sun\/text\/resources\";\n+  const #558 = Package #557;           \/\/ sun\/text\/resources\n+  const #559 = Utf8    \"sun\/text\/resources\/cldr\";\n+  const #560 = Package #559;           \/\/ sun\/text\/resources\/cldr\n+  const #561 = Utf8    \"sun\/text\/spi\";\n+  const #562 = Package #561;           \/\/ sun\/text\/spi\n+  const #563 = Utf8    \"sun\/util\";\n+  const #564 = Package #563;           \/\/ sun\/util\n+  const #565 = Utf8    \"sun\/util\/calendar\";\n+  const #566 = Package #565;           \/\/ sun\/util\/calendar\n+  const #567 = Utf8    \"sun\/util\/locale\";\n+  const #568 = Package #567;           \/\/ sun\/util\/locale\n+  const #569 = Utf8    \"sun\/util\/resources\/cldr\";\n+  const #570 = Package #569;           \/\/ sun\/util\/resources\/cldr\n+  const #571 = Utf8    \"sun\/util\/spi\";\n+  const #572 = Package #571;           \/\/ sun\/util\/spi\n+\n+  exports  #88   \/* java\/util\/spi *\/;\n+  exports  #104  \/* javax\/security\/auth *\/;\n+  exports  #72   \/* java\/util *\/;\n+  exports  #22   \/* java\/lang\/ref *\/;\n+  exports  #48   \/* java\/nio\/file\/spi *\/;\n+  exports  #102  \/* javax\/net\/ssl *\/;\n+  exports  #50   \/* java\/security *\/;\n+  exports  #20   \/* java\/lang\/module *\/;\n+  exports  #98   \/* javax\/crypto\/spec *\/;\n+  exports  #82   \/* java\/util\/jar *\/;\n+  exports  #112  \/* javax\/security\/auth\/x500 *\/;\n+  exports  #68   \/* java\/time\/temporal *\/;\n+  exports  #38   \/* java\/nio\/channels\/spi *\/;\n+  exports  #110  \/* javax\/security\/auth\/spi *\/;\n+  exports  #60   \/* java\/text\/spi *\/;\n+  exports  #54   \/* java\/security\/interfaces *\/;\n+  exports  #90   \/* java\/util\/stream *\/;\n+  exports  #46   \/* java\/nio\/file\/attribute *\/;\n+  exports  #24   \/* java\/lang\/reflect *\/;\n+  exports  #100  \/* javax\/net *\/;\n+  exports  #94   \/* javax\/crypto *\/;\n+  exports  #96   \/* javax\/crypto\/interfaces *\/;\n+  exports  #74   \/* java\/util\/concurrent *\/;\n+  exports  #34   \/* java\/nio *\/;\n+  exports  #32   \/* java\/net\/spi *\/;\n+  exports  #108  \/* javax\/security\/auth\/login *\/;\n+  exports  #16   \/* java\/lang\/foreign *\/;\n+  exports  #66   \/* java\/time\/format *\/;\n+  exports  #40   \/* java\/nio\/charset *\/;\n+  exports  #56   \/* java\/security\/spec *\/;\n+  exports  #76   \/* java\/util\/concurrent\/atomic *\/;\n+  exports  #114  \/* javax\/security\/cert *\/;\n+  exports  #26   \/* java\/lang\/runtime *\/;\n+  exports  #28   \/* java\/math *\/;\n+  exports  #80   \/* java\/util\/function *\/;\n+  exports  #62   \/* java\/time *\/;\n+  exports  #78   \/* java\/util\/concurrent\/locks *\/;\n+  exports  #52   \/* java\/security\/cert *\/;\n+  exports  #106  \/* javax\/security\/auth\/callback *\/;\n+  exports  #44   \/* java\/nio\/file *\/;\n+  exports  #18   \/* java\/lang\/invoke *\/;\n+  exports  #42   \/* java\/nio\/charset\/spi *\/;\n+  exports  #70   \/* java\/time\/zone *\/;\n+  exports  #12   \/* java\/lang\/annotation *\/;\n+  exports  #14   \/* java\/lang\/constant *\/;\n+  exports  #84   \/* java\/util\/random *\/;\n+  exports  #58   \/* java\/text *\/;\n+  exports  #10   \/* java\/lang *\/;\n+  exports  #30   \/* java\/net *\/;\n+  exports  #92   \/* java\/util\/zip *\/;\n+  exports  #86   \/* java\/util\/regex *\/;\n+  exports  #8    \/* java\/io *\/;\n+  exports  #36   \/* java\/nio\/channels *\/;\n+  exports  #64   \/* java\/time\/chrono *\/;\n+  exports  #310  \/* sun\/security\/provider\/certpath *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #132  \/* java.naming *\/;\n+  exports  #326  \/* sun\/security\/util\/math\/intpoly *\/ to\n+           #294  \/* jdk.crypto.ec *\/;\n+  exports  #316  \/* sun\/security\/tools *\/ to\n+           #140  \/* jdk.jartool *\/;\n+  exports  #218  \/* jdk\/internal\/org\/objectweb\/asm\/util *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #270  \/* sun\/net\/util *\/ to\n+           #126  \/* java.desktop *\/,\n+           #194  \/* java.net.http *\/,\n+           #148  \/* jdk.sctp *\/,\n+           #272  \/* jdk.jconsole *\/;\n+  exports  #246  \/* jdk\/internal\/util\/random *\/ to\n+           #248  \/* jdk.random *\/;\n+  exports  #280  \/* sun\/nio\/cs *\/ to\n+           #126  \/* java.desktop *\/,\n+           #136  \/* jdk.charsets *\/;\n+  exports  #282  \/* sun\/nio\/fs *\/ to\n+           #146  \/* jdk.net *\/;\n+  exports  #328  \/* sun\/security\/validator *\/ to\n+           #140  \/* jdk.jartool *\/;\n+  exports  #244  \/* jdk\/internal\/util\/jar *\/ to\n+           #140  \/* jdk.jartool *\/;\n+  exports  #156  \/* jdk\/internal\/classfile\/constantpool *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #144  \/* jdk.jlink *\/;\n+  exports  #158  \/* jdk\/internal\/classfile\/instruction *\/ to\n+           #144  \/* jdk.jlink *\/,\n+           #152  \/* jdk.jshell *\/;\n+  exports  #220  \/* jdk\/internal\/org\/xml\/sax *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #212  \/* jdk\/internal\/org\/objectweb\/asm *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #296  \/* sun\/security\/internal\/interfaces *\/ to\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #338  \/* sun\/util\/logging *\/ to\n+           #126  \/* java.desktop *\/,\n+           #128  \/* java.logging *\/,\n+           #340  \/* java.prefs *\/;\n+  exports  #182  \/* jdk\/internal\/jimage\/decompressor *\/ to\n+           #144  \/* jdk.jlink *\/;\n+  exports  #162  \/* jdk\/internal\/foreign *\/ to\n+           #164  \/* jdk.incubator.vector *\/;\n+  exports  #242  \/* jdk\/internal\/util *\/ to\n+           #126  \/* java.desktop *\/;\n+  exports  #266  \/* sun\/net\/dns *\/ to\n+           #264  \/* jdk.naming.dns *\/,\n+           #196  \/* java.security.jgss *\/;\n+  exports  #306  \/* sun\/security\/provider *\/ to\n+           #294  \/* jdk.crypto.ec *\/,\n+           #134  \/* java.rmi *\/,\n+           #196  \/* java.security.jgss *\/,\n+           #118  \/* jdk.crypto.cryptoki *\/,\n+           #308  \/* jdk.security.auth *\/;\n+  exports  #334  \/* sun\/util\/locale\/provider *\/ to\n+           #126  \/* java.desktop *\/,\n+           #336  \/* jdk.localedata *\/,\n+           #144  \/* jdk.jlink *\/;\n+  exports  #300  \/* sun\/security\/jca *\/ to\n+           #294  \/* jdk.crypto.ec *\/,\n+           #264  \/* jdk.naming.dns *\/,\n+           #302  \/* java.smartcardio *\/,\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #214  \/* jdk\/internal\/org\/objectweb\/asm\/commons *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #154  \/* jdk\/internal\/classfile\/attribute *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #144  \/* jdk.jlink *\/;\n+  exports  #288  \/* sun\/reflect\/misc *\/ to\n+           #290  \/* java.datatransfer *\/,\n+           #126  \/* java.desktop *\/,\n+           #238  \/* java.sql.rowset *\/,\n+           #134  \/* java.rmi *\/,\n+           #208  \/* java.management.rmi *\/,\n+           #130  \/* java.management *\/;\n+  exports  #216  \/* jdk\/internal\/org\/objectweb\/asm\/tree *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #252  \/* jdk\/internal\/util\/xml\/impl *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #298  \/* sun\/security\/internal\/spec *\/ to\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #232  \/* jdk\/internal\/ref *\/ to\n+           #126  \/* java.desktop *\/,\n+           #194  \/* java.net.http *\/;\n+  exports  #234  \/* jdk\/internal\/reflect *\/ to\n+           #238  \/* java.sql.rowset *\/,\n+           #240  \/* jdk.dynalink *\/,\n+           #200  \/* jdk.internal.vm.ci *\/,\n+           #236  \/* java.sql *\/,\n+           #128  \/* java.logging *\/,\n+           #204  \/* jdk.unsupported *\/;\n+  exports  #254  \/* jdk\/internal\/vm *\/ to\n+           #228  \/* jdk.management.agent *\/,\n+           #226  \/* jdk.internal.jvmstat *\/,\n+           #138  \/* jdk.incubator.concurrent *\/,\n+           #178  \/* jdk.management *\/,\n+           #130  \/* java.management *\/;\n+  exports  #184  \/* jdk\/internal\/jmod *\/ to\n+           #174  \/* jdk.compiler *\/,\n+           #144  \/* jdk.jlink *\/;\n+  exports  #206  \/* jdk\/internal\/module *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #142  \/* jdk.jfr *\/,\n+           #188  \/* java.instrument *\/,\n+           #144  \/* jdk.jlink *\/,\n+           #208  \/* java.management.rmi *\/,\n+           #210  \/* jdk.jpackage *\/;\n+  exports  #120  \/* com\/sun\/security\/ntlm *\/ to\n+           #122  \/* java.security.sasl *\/;\n+  exports  #314  \/* sun\/security\/timestamp *\/ to\n+           #140  \/* jdk.jartool *\/;\n+  exports  #304  \/* sun\/security\/pkcs *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #294  \/* jdk.crypto.ec *\/;\n+  exports  #276  \/* sun\/net\/www\/protocol\/http *\/ to\n+           #196  \/* java.security.jgss *\/;\n+  exports  #274  \/* sun\/net\/www *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #194  \/* java.net.http *\/;\n+  exports  #150  \/* jdk\/internal\/classfile *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #144  \/* jdk.jlink *\/,\n+           #152  \/* jdk.jshell *\/;\n+  exports  #318  \/* sun\/security\/util *\/ to\n+           #122  \/* java.security.sasl *\/,\n+           #140  \/* jdk.jartool *\/,\n+           #126  \/* java.desktop *\/,\n+           #320  \/* java.xml.crypto *\/,\n+           #294  \/* jdk.crypto.ec *\/,\n+           #134  \/* java.rmi *\/,\n+           #196  \/* java.security.jgss *\/,\n+           #302  \/* java.smartcardio *\/,\n+           #132  \/* java.naming *\/,\n+           #118  \/* jdk.crypto.cryptoki *\/,\n+           #322  \/* jdk.security.jgss *\/,\n+           #308  \/* jdk.security.auth *\/;\n+  exports  #256  \/* jdk\/internal\/vm\/annotation *\/ to\n+           #200  \/* jdk.internal.vm.ci *\/,\n+           #142  \/* jdk.jfr *\/,\n+           #188  \/* java.instrument *\/,\n+           #138  \/* jdk.incubator.concurrent *\/,\n+           #164  \/* jdk.incubator.vector *\/,\n+           #204  \/* jdk.unsupported *\/;\n+  exports  #332  \/* sun\/util\/cldr *\/ to\n+           #144  \/* jdk.jlink *\/;\n+  exports  #278  \/* sun\/nio\/ch *\/ to\n+           #148  \/* jdk.sctp *\/,\n+           #146  \/* jdk.net *\/,\n+           #130  \/* java.management *\/,\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #262  \/* sun\/net *\/ to\n+           #194  \/* java.net.http *\/,\n+           #264  \/* jdk.naming.dns *\/;\n+  exports  #222  \/* jdk\/internal\/org\/xml\/sax\/helpers *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #284  \/* sun\/reflect\/annotation *\/ to\n+           #174  \/* jdk.compiler *\/;\n+  exports  #190  \/* jdk\/internal\/logger *\/ to\n+           #128  \/* java.logging *\/;\n+  exports  #312  \/* sun\/security\/rsa *\/ to\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #186  \/* jdk\/internal\/loader *\/ to\n+           #188  \/* java.instrument *\/,\n+           #132  \/* java.naming *\/,\n+           #128  \/* java.logging *\/;\n+  exports  #160  \/* jdk\/internal\/event *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #124  \/* jdk\/internal\/access *\/ to\n+           #126  \/* java.desktop *\/,\n+           #146  \/* jdk.net *\/,\n+           #134  \/* java.rmi *\/,\n+           #144  \/* jdk.jlink *\/,\n+           #132  \/* java.naming *\/,\n+           #130  \/* java.management *\/,\n+           #140  \/* jdk.jartool *\/,\n+           #148  \/* jdk.sctp *\/,\n+           #142  \/* jdk.jfr *\/,\n+           #138  \/* jdk.incubator.concurrent *\/,\n+           #128  \/* java.logging *\/,\n+           #136  \/* jdk.charsets *\/,\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #170  \/* jdk\/internal\/javac *\/ to\n+           #176  \/* jdk.jdi *\/,\n+           #140  \/* jdk.jartool *\/,\n+           #174  \/* jdk.compiler *\/,\n+           #142  \/* jdk.jfr *\/,\n+           #138  \/* jdk.incubator.concurrent *\/,\n+           #172  \/* java.compiler *\/,\n+           #164  \/* jdk.incubator.vector *\/,\n+           #178  \/* jdk.management *\/,\n+           #152  \/* jdk.jshell *\/,\n+           #130  \/* java.management *\/;\n+  exports  #230  \/* jdk\/internal\/platform *\/ to\n+           #142  \/* jdk.jfr *\/,\n+           #178  \/* jdk.management *\/;\n+  exports  #192  \/* jdk\/internal\/misc *\/ to\n+           #202  \/* jdk.nio.mapmode *\/,\n+           #126  \/* java.desktop *\/,\n+           #194  \/* java.net.http *\/,\n+           #174  \/* jdk.compiler *\/,\n+           #200  \/* jdk.internal.vm.ci *\/,\n+           #134  \/* java.rmi *\/,\n+           #196  \/* java.security.jgss *\/,\n+           #198  \/* jdk.attach *\/,\n+           #132  \/* java.naming *\/,\n+           #164  \/* jdk.incubator.vector *\/,\n+           #152  \/* jdk.jshell *\/,\n+           #130  \/* java.management *\/,\n+           #142  \/* jdk.jfr *\/,\n+           #138  \/* jdk.incubator.concurrent *\/,\n+           #128  \/* java.logging *\/,\n+           #136  \/* jdk.charsets *\/,\n+           #204  \/* jdk.unsupported *\/,\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #250  \/* jdk\/internal\/util\/xml *\/ to\n+           #142  \/* jdk.jfr *\/;\n+  exports  #330  \/* sun\/security\/x509 *\/ to\n+           #140  \/* jdk.jartool *\/,\n+           #294  \/* jdk.crypto.ec *\/,\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #286  \/* sun\/reflect\/generics\/reflectiveObjects *\/ to\n+           #126  \/* java.desktop *\/;\n+  exports  #116  \/* com\/sun\/crypto\/provider *\/ to\n+           #118  \/* jdk.crypto.cryptoki *\/;\n+  exports  #258  \/* jdk\/internal\/vm\/vector *\/ to\n+           #164  \/* jdk.incubator.vector *\/;\n+  exports  #292  \/* sun\/security\/action *\/ to\n+           #126  \/* java.desktop *\/,\n+           #294  \/* jdk.crypto.ec *\/,\n+           #196  \/* java.security.jgss *\/,\n+           #138  \/* jdk.incubator.concurrent *\/;\n+  exports  #224  \/* jdk\/internal\/perf *\/ to\n+           #228  \/* jdk.management.agent *\/,\n+           #226  \/* jdk.internal.jvmstat *\/,\n+           #130  \/* java.management *\/;\n+  exports  #180  \/* jdk\/internal\/jimage *\/ to\n+           #144  \/* jdk.jlink *\/;\n+  exports  #260  \/* sun\/invoke\/util *\/ to\n+           #174  \/* jdk.compiler *\/;\n+  exports  #166  \/* jdk\/internal\/io *\/ to\n+           #168  \/* jdk.internal.le *\/,\n+           #152  \/* jdk.jshell *\/;\n+  exports  #268  \/* sun\/net\/ext *\/ to\n+           #146  \/* jdk.net *\/;\n+  exports  #324  \/* sun\/security\/util\/math *\/ to\n+           #294  \/* jdk.crypto.ec *\/;\n+  exports  #342  \/* sun\/util\/resources *\/ to\n+           #336  \/* jdk.localedata *\/;\n+  uses     #346  \/* java\/net\/ContentHandlerFactory *\/;\n+  uses     #372  \/* java\/text\/spi\/DecimalFormatSymbolsProvider *\/;\n+  uses     #392  \/* java\/util\/spi\/ResourceBundleControlProvider *\/;\n+  uses     #410  \/* sun\/util\/resources\/LocaleData$CommonResourceBundleProvider *\/;\n+  uses     #362  \/* java\/security\/Provider *\/;\n+  uses     #396  \/* java\/util\/spi\/TimeZoneNameProvider *\/;\n+  uses     #344  \/* java\/lang\/System$LoggerFinder *\/;\n+  uses     #350  \/* java\/net\/spi\/URLStreamHandlerProvider *\/;\n+  uses     #414  \/* sun\/util\/spi\/CalendarProvider *\/;\n+  uses     #364  \/* java\/text\/spi\/BreakIteratorProvider *\/;\n+  uses     #358  \/* java\/nio\/file\/spi\/FileSystemProvider *\/;\n+  uses     #394  \/* java\/util\/spi\/ResourceBundleProvider *\/;\n+  uses     #370  \/* java\/text\/spi\/DateFormatSymbolsProvider *\/;\n+  uses     #400  \/* javax\/security\/auth\/spi\/LoginModule *\/;\n+  uses     #360  \/* java\/nio\/file\/spi\/FileTypeDetector *\/;\n+  uses     #374  \/* java\/text\/spi\/NumberFormatProvider *\/;\n+  uses     #412  \/* sun\/util\/resources\/LocaleData$SupplementaryResourceBundleProvider *\/;\n+  uses     #352  \/* java\/nio\/channels\/spi\/AsynchronousChannelProvider *\/;\n+  uses     #402  \/* jdk\/internal\/io\/JdkConsoleProvider *\/;\n+  uses     #354  \/* java\/nio\/channels\/spi\/SelectorProvider *\/;\n+  uses     #386  \/* java\/util\/spi\/CalendarNameProvider *\/;\n+  uses     #368  \/* java\/text\/spi\/DateFormatProvider *\/;\n+  uses     #366  \/* java\/text\/spi\/CollatorProvider *\/;\n+  uses     #380  \/* java\/time\/zone\/ZoneRulesProvider *\/;\n+  uses     #408  \/* sun\/util\/locale\/provider\/LocaleDataMetaInfo *\/;\n+  uses     #348  \/* java\/net\/spi\/InetAddressResolverProvider *\/;\n+  uses     #376  \/* java\/time\/chrono\/AbstractChronology *\/;\n+  uses     #390  \/* java\/util\/spi\/LocaleNameProvider *\/;\n+  uses     #398  \/* java\/util\/spi\/ToolProvider *\/;\n+  uses     #406  \/* sun\/text\/spi\/JavaTimeDateTimePatternProvider *\/;\n+  uses     #378  \/* java\/time\/chrono\/Chronology *\/;\n+  uses     #388  \/* java\/util\/spi\/CurrencyNameProvider *\/;\n+  uses     #404  \/* jdk\/internal\/logger\/DefaultLoggerFinder *\/;\n+  uses     #382  \/* java\/util\/random\/RandomGenerator *\/;\n+  uses     #384  \/* java\/util\/spi\/CalendarDataProvider *\/;\n+  uses     #356  \/* java\/nio\/charset\/spi\/CharsetProvider *\/;\n+  provides #358  \/* java\/nio\/file\/spi\/FileSystemProvider *\/ with\n+           #416  \/* jdk\/internal\/jrtfs\/JrtFileSystemProvider *\/;\n+  provides #382  \/* java\/util\/random\/RandomGenerator *\/ with\n+           #418  \/* java\/security\/SecureRandom *\/,\n+           #422  \/* java\/util\/SplittableRandom *\/,\n+           #420  \/* java\/util\/Random *\/;\n+} \/\/ end of module java.base\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903031\/module-info.class.g.jasm","additions":926,"deletions":0,"binary":false,"changes":926,"status":"added"},{"patch":"@@ -0,0 +1,361 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * ORACLE PROPRIETARY\/CONFIDENTIAL. Use is subject to license terms.\n+ *\/\n+\/\/ Partial ConstantPool\n+module #6 \/* java.base *\/ version 65:0\n+{\n+  const #1   = class   #2;             \/\/ module-info\n+  const #2   = Utf8    \"module-info\";\n+  const #3   = Utf8    \"SourceFile\";\n+  const #4   = Utf8    \"module-info.java\";\n+  const #5   = Utf8    \"Module\";\n+  const #6   = Module  #7;             \/\/ java.base\n+  const #7   = Utf8    \"java.base\";\n+  exports  java\/util\/spi;\n+  exports  javax\/security\/auth;\n+  exports  java\/util;\n+  exports  java\/lang\/ref;\n+  exports  java\/nio\/file\/spi;\n+  exports  javax\/net\/ssl;\n+  exports  java\/security;\n+  exports  java\/lang\/module;\n+  exports  javax\/crypto\/spec;\n+  exports  java\/util\/jar;\n+  exports  javax\/security\/auth\/x500;\n+  exports  java\/time\/temporal;\n+  exports  java\/nio\/channels\/spi;\n+  exports  javax\/security\/auth\/spi;\n+  exports  java\/text\/spi;\n+  exports  java\/security\/interfaces;\n+  exports  java\/util\/stream;\n+  exports  java\/nio\/file\/attribute;\n+  exports  java\/lang\/reflect;\n+  exports  javax\/net;\n+  exports  javax\/crypto;\n+  exports  javax\/crypto\/interfaces;\n+  exports  java\/util\/concurrent;\n+  exports  java\/nio;\n+  exports  java\/net\/spi;\n+  exports  javax\/security\/auth\/login;\n+  exports  java\/lang\/foreign;\n+  exports  java\/time\/format;\n+  exports  java\/nio\/charset;\n+  exports  java\/security\/spec;\n+  exports  java\/util\/concurrent\/atomic;\n+  exports  javax\/security\/cert;\n+  exports  java\/lang\/runtime;\n+  exports  java\/math;\n+  exports  java\/util\/function;\n+  exports  java\/time;\n+  exports  java\/util\/concurrent\/locks;\n+  exports  java\/security\/cert;\n+  exports  javax\/security\/auth\/callback;\n+  exports  java\/nio\/file;\n+  exports  java\/lang\/invoke;\n+  exports  java\/nio\/charset\/spi;\n+  exports  java\/time\/zone;\n+  exports  java\/lang\/annotation;\n+  exports  java\/lang\/constant;\n+  exports  java\/util\/random;\n+  exports  java\/text;\n+  exports  java\/lang;\n+  exports  java\/net;\n+  exports  java\/util\/zip;\n+  exports  java\/util\/regex;\n+  exports  java\/io;\n+  exports  java\/nio\/channels;\n+  exports  java\/time\/chrono;\n+  exports  sun\/security\/provider\/certpath to\n+           jdk.jartool,\n+           java.naming;\n+  exports  sun\/security\/util\/math\/intpoly to\n+           jdk.crypto.ec;\n+  exports  sun\/security\/tools to\n+           jdk.jartool;\n+  exports  jdk\/internal\/org\/objectweb\/asm\/util to\n+           jdk.jfr;\n+  exports  sun\/net\/util to\n+           java.desktop,\n+           java.net.http,\n+           jdk.sctp,\n+           jdk.jconsole;\n+  exports  jdk\/internal\/util\/random to\n+           jdk.random;\n+  exports  sun\/nio\/cs to\n+           java.desktop,\n+           jdk.charsets;\n+  exports  sun\/nio\/fs to\n+           jdk.net;\n+  exports  sun\/security\/validator to\n+           jdk.jartool;\n+  exports  jdk\/internal\/util\/jar to\n+           jdk.jartool;\n+  exports  jdk\/internal\/classfile\/constantpool to\n+           jdk.jartool,\n+           jdk.jlink;\n+  exports  jdk\/internal\/classfile\/instruction to\n+           jdk.jlink,\n+           jdk.jshell;\n+  exports  jdk\/internal\/org\/xml\/sax to\n+           jdk.jfr;\n+  exports  jdk\/internal\/org\/objectweb\/asm to\n+           jdk.jfr;\n+  exports  sun\/security\/internal\/interfaces to\n+           jdk.crypto.cryptoki;\n+  exports  sun\/util\/logging to\n+           java.desktop,\n+           java.logging,\n+           java.prefs;\n+  exports  jdk\/internal\/jimage\/decompressor to\n+           jdk.jlink;\n+  exports  jdk\/internal\/foreign to\n+           jdk.incubator.vector;\n+  exports  jdk\/internal\/util to\n+           java.desktop;\n+  exports  sun\/net\/dns to\n+           jdk.naming.dns,\n+           java.security.jgss;\n+  exports  sun\/security\/provider to\n+           jdk.crypto.ec,\n+           java.rmi,\n+           java.security.jgss,\n+           jdk.crypto.cryptoki,\n+           jdk.security.auth;\n+  exports  sun\/util\/locale\/provider to\n+           java.desktop,\n+           jdk.localedata,\n+           jdk.jlink;\n+  exports  sun\/security\/jca to\n+           jdk.crypto.ec,\n+           jdk.naming.dns,\n+           java.smartcardio,\n+           jdk.crypto.cryptoki;\n+  exports  jdk\/internal\/org\/objectweb\/asm\/commons to\n+           jdk.jfr;\n+  exports  jdk\/internal\/classfile\/attribute to\n+           jdk.jartool,\n+           jdk.jlink;\n+  exports  sun\/reflect\/misc to\n+           java.datatransfer,\n+           java.desktop,\n+           java.sql.rowset,\n+           java.rmi,\n+           java.management.rmi,\n+           java.management;\n+  exports  jdk\/internal\/org\/objectweb\/asm\/tree to\n+           jdk.jfr;\n+  exports  jdk\/internal\/util\/xml\/impl to\n+           jdk.jfr;\n+  exports  sun\/security\/internal\/spec to\n+           jdk.crypto.cryptoki;\n+  exports  jdk\/internal\/ref to\n+           java.desktop,\n+           java.net.http;\n+  exports  jdk\/internal\/reflect to\n+           java.sql.rowset,\n+           jdk.dynalink,\n+           jdk.internal.vm.ci,\n+           java.sql,\n+           java.logging,\n+           jdk.unsupported;\n+  exports  jdk\/internal\/vm to\n+           jdk.management.agent,\n+           jdk.internal.jvmstat,\n+           jdk.incubator.concurrent,\n+           jdk.management,\n+           java.management;\n+  exports  jdk\/internal\/jmod to\n+           jdk.compiler,\n+           jdk.jlink;\n+  exports  jdk\/internal\/module to\n+           jdk.jartool,\n+           jdk.jfr,\n+           java.instrument,\n+           jdk.jlink,\n+           java.management.rmi,\n+           jdk.jpackage;\n+  exports  com\/sun\/security\/ntlm to\n+           java.security.sasl;\n+  exports  sun\/security\/timestamp to\n+           jdk.jartool;\n+  exports  sun\/security\/pkcs to\n+           jdk.jartool,\n+           jdk.crypto.ec;\n+  exports  sun\/net\/www\/protocol\/http to\n+           java.security.jgss;\n+  exports  sun\/net\/www to\n+           jdk.jartool,\n+           java.net.http;\n+  exports  jdk\/internal\/classfile to\n+           jdk.jartool,\n+           jdk.jlink,\n+           jdk.jshell;\n+  exports  sun\/security\/util to\n+           java.security.sasl,\n+           jdk.jartool,\n+           java.desktop,\n+           java.xml.crypto,\n+           jdk.crypto.ec,\n+           java.rmi,\n+           java.security.jgss,\n+           java.smartcardio,\n+           java.naming,\n+           jdk.crypto.cryptoki,\n+           jdk.security.jgss,\n+           jdk.security.auth;\n+  exports  jdk\/internal\/vm\/annotation to\n+           jdk.internal.vm.ci,\n+           jdk.jfr,\n+           java.instrument,\n+           jdk.incubator.concurrent,\n+           jdk.incubator.vector,\n+           jdk.unsupported;\n+  exports  sun\/util\/cldr to\n+           jdk.jlink;\n+  exports  sun\/nio\/ch to\n+           jdk.sctp,\n+           jdk.net,\n+           java.management,\n+           jdk.crypto.cryptoki;\n+  exports  sun\/net to\n+           java.net.http,\n+           jdk.naming.dns;\n+  exports  jdk\/internal\/org\/xml\/sax\/helpers to\n+           jdk.jfr;\n+  exports  sun\/reflect\/annotation to\n+           jdk.compiler;\n+  exports  jdk\/internal\/logger to\n+           java.logging;\n+  exports  sun\/security\/rsa to\n+           jdk.crypto.cryptoki;\n+  exports  jdk\/internal\/loader to\n+           java.instrument,\n+           java.naming,\n+           java.logging;\n+  exports  jdk\/internal\/event to\n+           jdk.jfr;\n+  exports  jdk\/internal\/access to\n+           java.desktop,\n+           jdk.net,\n+           java.rmi,\n+           jdk.jlink,\n+           java.naming,\n+           java.management,\n+           jdk.jartool,\n+           jdk.sctp,\n+           jdk.jfr,\n+           jdk.incubator.concurrent,\n+           java.logging,\n+           jdk.charsets,\n+           jdk.crypto.cryptoki;\n+  exports  jdk\/internal\/javac to\n+           jdk.jdi,\n+           jdk.jartool,\n+           jdk.compiler,\n+           jdk.jfr,\n+           jdk.incubator.concurrent,\n+           java.compiler,\n+           jdk.incubator.vector,\n+           jdk.management,\n+           jdk.jshell,\n+           java.management;\n+  exports  jdk\/internal\/platform to\n+           jdk.jfr,\n+           jdk.management;\n+  exports  jdk\/internal\/misc to\n+           jdk.nio.mapmode,\n+           java.desktop,\n+           java.net.http,\n+           jdk.compiler,\n+           jdk.internal.vm.ci,\n+           java.rmi,\n+           java.security.jgss,\n+           jdk.attach,\n+           java.naming,\n+           jdk.incubator.vector,\n+           jdk.jshell,\n+           java.management,\n+           jdk.jfr,\n+           jdk.incubator.concurrent,\n+           java.logging,\n+           jdk.charsets,\n+           jdk.unsupported,\n+           jdk.crypto.cryptoki;\n+  exports  jdk\/internal\/util\/xml to\n+           jdk.jfr;\n+  exports  sun\/security\/x509 to\n+           jdk.jartool,\n+           jdk.crypto.ec,\n+           jdk.crypto.cryptoki;\n+  exports  sun\/reflect\/generics\/reflectiveObjects to\n+           java.desktop;\n+  exports  com\/sun\/crypto\/provider to\n+           jdk.crypto.cryptoki;\n+  exports  jdk\/internal\/vm\/vector to\n+           jdk.incubator.vector;\n+  exports  sun\/security\/action to\n+           java.desktop,\n+           jdk.crypto.ec,\n+           java.security.jgss,\n+           jdk.incubator.concurrent;\n+  exports  jdk\/internal\/perf to\n+           jdk.management.agent,\n+           jdk.internal.jvmstat,\n+           java.management;\n+  exports  jdk\/internal\/jimage to\n+           jdk.jlink;\n+  exports  sun\/invoke\/util to\n+           jdk.compiler;\n+  exports  jdk\/internal\/io to\n+           jdk.internal.le,\n+           jdk.jshell;\n+  exports  sun\/net\/ext to\n+           jdk.net;\n+  exports  sun\/security\/util\/math to\n+           jdk.crypto.ec;\n+  exports  sun\/util\/resources to\n+           jdk.localedata;\n+  uses     java\/net\/ContentHandlerFactory;\n+  uses     java\/text\/spi\/DecimalFormatSymbolsProvider;\n+  uses     java\/util\/spi\/ResourceBundleControlProvider;\n+  uses     sun\/util\/resources\/LocaleData$CommonResourceBundleProvider;\n+  uses     java\/security\/Provider;\n+  uses     java\/util\/spi\/TimeZoneNameProvider;\n+  uses     java\/lang\/System$LoggerFinder;\n+  uses     java\/net\/spi\/URLStreamHandlerProvider;\n+  uses     sun\/util\/spi\/CalendarProvider;\n+  uses     java\/text\/spi\/BreakIteratorProvider;\n+  uses     java\/nio\/file\/spi\/FileSystemProvider;\n+  uses     java\/util\/spi\/ResourceBundleProvider;\n+  uses     java\/text\/spi\/DateFormatSymbolsProvider;\n+  uses     javax\/security\/auth\/spi\/LoginModule;\n+  uses     java\/nio\/file\/spi\/FileTypeDetector;\n+  uses     java\/text\/spi\/NumberFormatProvider;\n+  uses     sun\/util\/resources\/LocaleData$SupplementaryResourceBundleProvider;\n+  uses     java\/nio\/channels\/spi\/AsynchronousChannelProvider;\n+  uses     jdk\/internal\/io\/JdkConsoleProvider;\n+  uses     java\/nio\/channels\/spi\/SelectorProvider;\n+  uses     java\/util\/spi\/CalendarNameProvider;\n+  uses     java\/text\/spi\/DateFormatProvider;\n+  uses     java\/text\/spi\/CollatorProvider;\n+  uses     java\/time\/zone\/ZoneRulesProvider;\n+  uses     sun\/util\/locale\/provider\/LocaleDataMetaInfo;\n+  uses     java\/net\/spi\/InetAddressResolverProvider;\n+  uses     java\/time\/chrono\/AbstractChronology;\n+  uses     java\/util\/spi\/LocaleNameProvider;\n+  uses     java\/util\/spi\/ToolProvider;\n+  uses     sun\/text\/spi\/JavaTimeDateTimePatternProvider;\n+  uses     java\/time\/chrono\/Chronology;\n+  uses     java\/util\/spi\/CurrencyNameProvider;\n+  uses     jdk\/internal\/logger\/DefaultLoggerFinder;\n+  uses     java\/util\/random\/RandomGenerator;\n+  uses     java\/util\/spi\/CalendarDataProvider;\n+  uses     java\/nio\/charset\/spi\/CharsetProvider;\n+  provides java\/nio\/file\/spi\/FileSystemProvider with\n+           jdk\/internal\/jrtfs\/JrtFileSystemProvider;\n+  provides java\/util\/random\/RandomGenerator with\n+           java\/security\/SecureRandom,\n+           java\/util\/SplittableRandom,\n+           java\/util\/Random;\n+} \/\/ end of module java.base\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903031\/module-info.class.jasm","additions":361,"deletions":0,"binary":false,"changes":361,"status":"added"},{"patch":"","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/case7903405\/ifge_overflow.jasm","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/negative\/ifge_overflow.jasm","status":"renamed"},{"patch":"@@ -2,2 +2,0 @@\n- * Ident: @(#)clfacc00610m10p.jasm generated from:%Z%%M% %I% %E%\n- *\n@@ -24,1 +22,1 @@\n-} \n+}\n","filename":"test\/resources\/org\/openjdk\/asmtools\/jasm\/clfacc00610m10p.jasm","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public super class #7 \/* TestRunner *\/ implements #157 \/* org\/openjdk\/asmtools\/transform\/lib\/ITestRunner *\/ version 60:0\n+public super class #7 \/* TestRunner *\/ implements #157 \/* org\/openjdk\/asmtools\/lib\/transform\/ITestRunner *\/ version 60:0\n@@ -183,2 +183,2 @@\n-  const #157 = class           #158;           \/\/ org\/openjdk\/asmtools\/transform\/lib\/ITestRunner\n-  const #158 = Asciz           \"org\/openjdk\/asmtools\/transform\/lib\/ITestRunner\";\n+  const #157 = class           #158;           \/\/ org\/openjdk\/asmtools\/lib\/transform\/ITestRunner\n+  const #158 = Asciz           \"org\/openjdk\/asmtools\/lib\/transform\/ITestRunner\";\n","filename":"test\/resources\/org\/openjdk\/asmtools\/transform\/case8302260\/TestRunner.class.jasm","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-    Utf8 \"org\/openjdk\/asmtools\/transform\/lib\/ITestRunner\"; \/\/ #158     at 0x08F5\n+    Utf8 \"org\/openjdk\/asmtools\/lib\/transform\/ITestRunner\"; \/\/ #158     at 0x08F5\n@@ -245,1 +245,1 @@\n-    #157;                        \/\/ org\/openjdk\/asmtools\/transform\/lib\/ITestRunner at 0x0C94\n+    #157;                        \/\/ org\/openjdk\/asmtools\/lib\/transform\/ITestRunner at 0x0C94\n","filename":"test\/resources\/org\/openjdk\/asmtools\/transform\/case8302260\/TestRunner.class.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}