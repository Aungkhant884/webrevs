{"files":[{"patch":"@@ -55,0 +55,1 @@\n+src\/test\/resources\/com=..\/..\/..\/..\/test-resources\/com\/\n","filename":"maven\/mvngen.sh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"filename":"test-resources\/com\/google\/gson\/GsonOrig.class","binary":true,"status":"added"},{"filename":"test-resources\/com\/google\/gson\/GsonWeird.class","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,213 @@\n+package org.openjdk.asmtools;\n+\n+import org.junit.jupiter.api.Assertions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class BruteForceHelper {\n+\n+    public static final String FRESHLY_BUILT_ASMTOOLS = \"target\/classes\";\n+    public static final String FRESHLY_BUILT_TESTS = \"target\/test-classes\";\n+\n+    private final ClassProvider classProvider;\n+\n+    private final Map<File, ThreeStringWriters> failedJdis = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> passedJdis = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> failedJasm = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> passedJasm = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> failedLoad = new HashMap<>();\n+    private final Map<File, ThreeStringWriters> passedLoad = new HashMap<>();\n+    private final File compileDir;\n+\n+    public BruteForceHelper() throws IOException {\n+        this(FRESHLY_BUILT_ASMTOOLS);\n+    }\n+\n+    public BruteForceHelper(String dir) throws IOException {\n+        this(new SearchingClassProvider(new File(dir)));\n+    }\n+\n+    public BruteForceHelper(ClassProvider cp) throws IOException {\n+        compileDir = Files.createTempDirectory(\"JdisJasmWorks\").toFile();\n+        compileDir.deleteOnExit();\n+        classProvider = cp;\n+    }\n+\n+    public void work(AsmToolsExecutable diasm, AsmToolsExecutable asm) throws IOException {\n+        List<File> classes = classProvider.getClasses();\n+        Assertions.assertNotEquals(0, classes.size(), \"There must be more then 0 class compiled in \" + classProvider.getClassesRoot() + \" before running this tests!\");\n+        tryAll(classes, failedJdis, passedJdis, diasm);\n+        diasm.ensure(classes, failedJdis);\n+\n+        tryAll(classes, failedJasm, passedJasm, asm);\n+        asm.ensure(classes, failedJasm);\n+\n+        AsmToolsExecutable loadClass = new AsmToolsExecutable() {\n+            @Override\n+            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+                try {\n+                    URL url = compileDir.toURI().toURL();\n+                    URL[] urls = new URL[]{url};\n+                    URLClassLoader cl = new URLClassLoader(urls);\n+                    String[] metadata = passedJasm.get(clazz).getToolBos().split(\"\\n\"); \/\/npe on this get means, that passedJasm dont contains all so  the missing peace is in failedJasm, which's assert is commented out?\n+                    String origFile = metadata[0].replaceFirst(\".*: \", \"\");\n+                    String baseDir = metadata[2].replaceFirst(\".*: \", \"\");\n+                    String fqn = origFile.replaceFirst(baseDir + \"\/\", \"\").replaceFirst(\"\\\\.class$\", \"\").replaceAll(\"\/\", \".\");\n+                    Class cls = cl.loadClass(fqn);\n+                    return 0;\n+                } catch (Exception e) {\n+                    e.printStackTrace(outs.getToolOutput());\n+                    return 1;\n+                }\n+            }\n+\n+            @Override\n+            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+                Assertions.assertEquals(0, failedLoad.size(), \"from \" + classes.size() + \" failed to produce valid bytecode \" + failedLoad.size() + \": \" + keySetToString(failedLoad, getClassesRoot()));\n+            }\n+        };\n+        tryAll(classes, failedLoad, passedLoad, loadClass);\n+    }\n+\n+    public static String keySetToString(Map<File, ThreeStringWriters> failedJdis, File classesRoot) {\n+        return failedJdis.keySet().stream().map(f -> f.getAbsolutePath().replaceFirst(classesRoot.getAbsolutePath(), \"\")).collect(Collectors.joining(\", \"));\n+    }\n+\n+    private void tryAll(List<File> classes, Map<File, ThreeStringWriters> failed, Map<File, ThreeStringWriters> passed, AsmToolsExecutable ex) throws IOException {\n+        for (File clazz : classes) {\n+            ThreeStringWriters outs = new ThreeStringWriters();\n+            int i = ex.run(outs, clazz);\n+            outs.flush();\n+            if (i != 0) {\n+                Object o = failed.put(clazz, outs);\n+                Assertions.assertNull(o, \" duplicated class - \" + o);\n+                continue;\n+            }\n+            Object o = passed.put(clazz, outs);\n+            Assertions.assertNull(o, \" duplicated class - \" + o);\n+        }\n+        for (Map.Entry<File, ThreeStringWriters> failure : failed.entrySet().stream().sorted(new Comparator<Map.Entry<File, ThreeStringWriters>>() {\n+            @Override\n+            public int compare(Map.Entry<File, ThreeStringWriters> t0, Map.Entry<File, ThreeStringWriters> t1) {\n+                return t0.getKey().compareTo(t1.getKey());\n+            }\n+        }).collect(Collectors.toList())) {\n+            System.err.println(failure.getKey());\n+            System.err.println(failure.getValue().getErrorBos());\n+            System.err.println(failure.getValue().getLoggerBos());\n+            System.err.println(failure.getValue().getToolBos());\n+        }\n+    }\n+\n+    private static List<File> findClasses(File classesRoot) throws IOException {\n+        List<File> classes = new ArrayList<>();\n+        Files.walkFileTree(classesRoot.toPath(), new SimpleFileVisitor<>() {\n+            @Override\n+            public FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {\n+                if (path.toString().endsWith(\".class\")) {\n+                    classes.add(path.toFile().getAbsoluteFile());\n+                }\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+        Collections.sort(classes);\n+        return classes;\n+    }\n+\n+    public String getDecompiledClass(File clazz) {\n+        return passedJdis.get(clazz).getToolBos();\n+    }\n+\n+    public File getCompileDir() {\n+        return compileDir;\n+    }\n+\n+    public File getClassesRoot() {\n+        return classProvider.getClassesRoot();\n+    }\n+\n+    public static void createMetadata(ThreeStringWriters outs, File clazz, File savedAsm, File compileDir, File classesRoot) {\n+        outs.getToolOutput().println(\"Orig: \" + clazz.getAbsolutePath());\n+        outs.getToolOutput().println(\"To: \" + compileDir.getAbsolutePath());\n+        outs.getToolOutput().println(\"Base: \" + classesRoot.getAbsolutePath());\n+        outs.getToolOutput().println(\"From: \" + savedAsm.getAbsolutePath());\n+    }\n+\n+    public static File saveDecompiledCode(String body, String tmpPRefix) throws IOException {\n+        File savedFresh = File.createTempFile(tmpPRefix, \".java\");\n+        Files.writeString(savedFresh.toPath(), body);\n+        savedFresh.deleteOnExit();\n+        return savedFresh;\n+    }\n+\n+    public static class SearchingClassProvider implements ClassProvider {\n+        private final File root;\n+\n+        public SearchingClassProvider(File root) {\n+            this.root = root.getAbsoluteFile();\n+        }\n+\n+        @Override\n+        public File getClassesRoot() {\n+            return root;\n+        }\n+\n+        @Override\n+        public List<File> getClasses() throws IOException {\n+            return findClasses(root);\n+        }\n+    }\n+\n+    public static class SingleTestClassProvider implements ClassProvider {\n+\n+        private final String clazz;\n+\n+        public SingleTestClassProvider(String clazz, String origName) throws IOException {\n+            this.clazz = clazz;\n+            if (origName!=null) {\n+                Files.copy(new File(FRESHLY_BUILT_TESTS + origName).toPath(), new File(FRESHLY_BUILT_TESTS+clazz).toPath());\n+            }\n+        }\n+\n+        @Override\n+        public File getClassesRoot() {\n+            return new File(FRESHLY_BUILT_TESTS).getAbsoluteFile();\n+        }\n+\n+        @Override\n+        public List<File> getClasses() throws IOException {\n+            return Arrays.asList(new File(FRESHLY_BUILT_TESTS+clazz));\n+        }\n+    }\n+\n+    public interface ClassProvider {\n+\n+        File getClassesRoot();\n+\n+        List<File> getClasses() throws IOException;\n+    }\n+\n+    public interface AsmToolsExecutable {\n+\n+        int run(ThreeStringWriters out, File clazz) throws IOException;\n+\n+        void ensure(List<File> all, Map<File, ThreeStringWriters> failures);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/org\/openjdk\/asmtools\/BruteForceHelper.java","additions":213,"deletions":0,"binary":false,"changes":213,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+package org.openjdk.asmtools.jdec;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.openjdk.asmtools.BruteForceHelper;\n+import org.openjdk.asmtools.ThreeStringWriters;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+class JdecJcod {\n+\n+    private final boolean g;\n+    private final BruteForceHelper worker;\n+\n+    public JdecJcod(boolean g, BruteForceHelper worker) {\n+        this.g = g;\n+        this.worker = worker;\n+    }\n+\n+    public void run() throws IOException {\n+        BruteForceHelper.AsmToolsExecutable jdec = new BruteForceHelper.AsmToolsExecutable() {\n+            @Override\n+            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+                Main decoder;\n+                if (g) {\n+                    decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), \"-g\", clazz.getAbsolutePath());\n+                } else {\n+                    decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), clazz.getAbsolutePath());\n+                }\n+                return decoder.decode();\n+            }\n+\n+            @Override\n+            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+                String gs = \"\";\n+                if (g) {\n+                    gs = \"with -g \";\n+                }\n+                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() + \") failed to decode \" + gs + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+            }\n+        };\n+        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, g);\n+        worker.work(jdec, jasm);\n+    }\n+\n+    private static class JasmToolExecutable implements BruteForceHelper.AsmToolsExecutable {\n+        private final BruteForceHelper worker;\n+        private final String g;\n+\n+        public JasmToolExecutable(BruteForceHelper worker, boolean g) {\n+            this.worker = worker;\n+            if (g) {\n+                this.g = \" (from -g decode) \";\n+            } else {\n+                this.g = \"\";\n+            }\n+        }\n+\n+        @Override\n+        public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+            File savedCode = BruteForceHelper.saveDecompiledCode(worker.getDecompiledClass(clazz), \"JdecJcodWorks\");\n+            org.openjdk.asmtools.jcoder.Main coder = new org.openjdk.asmtools.jcoder.Main(outs.getErrorOutput(), outs.getLoggerOutput(), savedCode.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath());\n+            BruteForceHelper.createMetadata(outs, clazz, savedCode, worker.getCompileDir(), worker.getClassesRoot());\n+            return coder.compile();\n+        }\n+\n+        @Override\n+        public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+            Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \" failed to encode \" + g + \" to (\" + worker.getCompileDir() + \") \" + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+        }\n+    }\n+}\n+\n","filename":"test\/org\/openjdk\/asmtools\/jdec\/JdecJcod.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+package org.openjdk.asmtools.jdec;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.asmtools.BruteForceHelper;\n+\n+import java.io.IOException;\n+\n+\n+class JdecJcodTest {\n+\n+    @Test\n+    public void jdecJcodAllDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper worker = new BruteForceHelper();\n+        new JdecJcod(false, worker).run();\n+    }\n+\n+    @Test\n+    public void jdecGJcodAllDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper worker = new BruteForceHelper();\n+        new JdecJcod(true, worker).run();\n+\n+    }\n+}\n+\n","filename":"test\/org\/openjdk\/asmtools\/jdec\/JdecJcodTest.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+package org.openjdk.asmtools.jdis;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.openjdk.asmtools.BruteForceHelper;\n+import org.openjdk.asmtools.ThreeStringWriters;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+class JdisJasm {\n+\n+    private final boolean g;\n+    private final BruteForceHelper worker;\n+\n+    public JdisJasm(boolean g, BruteForceHelper worker) {\n+        this.g = g;\n+        this.worker = worker;\n+    }\n+\n+    public void run() throws IOException {\n+        BruteForceHelper.AsmToolsExecutable jdis = new BruteForceHelper.AsmToolsExecutable() {\n+            @Override\n+            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+                Main disassem;\n+                if (g) {\n+                    disassem = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), \"-g\", clazz.getAbsolutePath());\n+                } else {\n+                    disassem = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), clazz.getAbsolutePath());\n+                }\n+                return disassem.disasm();\n+            }\n+\n+            @Override\n+            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+                String gs = \"\";\n+                if (g) {\n+                    gs = \"with -g \";\n+                }\n+                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() + \") failed to disassemble \" + gs + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+            }\n+        };\n+        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, g);\n+        worker.work(jdis, jasm);\n+    }\n+\n+    private static class JasmToolExecutable implements BruteForceHelper.AsmToolsExecutable {\n+        private final BruteForceHelper worker;\n+        private final String g;\n+\n+        public JasmToolExecutable(BruteForceHelper worker, boolean g) {\n+            this.worker = worker;\n+            if (g) {\n+                this.g = \" (from -g disasm) \";\n+            } else {\n+                this.g = \"\";\n+            }\n+        }\n+\n+        @Override\n+        public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+            File savedAsm = BruteForceHelper.saveDecompiledCode(worker.getDecompiledClass(clazz), \"JdisJasmWorks\");\n+            org.openjdk.asmtools.jasm.Main asm = new org.openjdk.asmtools.jasm.Main(outs.getErrorOutput(), outs.getLoggerOutput(), savedAsm.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath());\n+            BruteForceHelper.createMetadata(outs, clazz, savedAsm, worker.getCompileDir(), worker.getClassesRoot());\n+            return asm.compile();\n+        }\n+\n+        @Override\n+        public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+            \/\/three classes now fails, they will fail again in attempt to be loaded on NPE\n+            Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \" failed to assemble \" + g + \" to (\" + worker.getCompileDir() + \") \" + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+        }\n+    }\n+}\n+\n","filename":"test\/org\/openjdk\/asmtools\/jdis\/JdisJasm.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+package org.openjdk.asmtools.jdis;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.asmtools.BruteForceHelper;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+class JdisJasmTest {\n+\n+    @Test\n+    public void jdisJasmAllDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper worker = new BruteForceHelper();\n+        new JdisJasm(false, worker).run();\n+    }\n+\n+    @Test\n+    public void jdisGJasmAllDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper worker = new BruteForceHelper();\n+        new JdisJasm(true, worker).run();\n+\n+    }\n+\n+    @Test\n+    public void jdisGJasmGsonWeirdDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper.SingleTestClassProvider cp = new BruteForceHelper.SingleTestClassProvider(\"\/com\/google\/gson\/Gson.class\", \"\/com\/google\/gson\/GsonWeird.class\");\n+        BruteForceHelper worker = new BruteForceHelper(cp);\n+        try {\n+            new JdisJasm(true, worker).run();\n+        } finally {\n+            cp.getClasses().get(0).delete();\n+        }\n+    }\n+\n+    @Test\n+    public void jdisJasmGsonWeirdDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper.SingleTestClassProvider cp = new BruteForceHelper.SingleTestClassProvider(\"\/com\/google\/gson\/Gson.class\", \"\/com\/google\/gson\/GsonWeird.class\");\n+        BruteForceHelper worker = new BruteForceHelper(cp);\n+        try {\n+            new JdisJasm(false, worker).run();\n+        } finally {\n+            cp.getClasses().get(0).delete();\n+        }\n+    }\n+\n+\n+    @Test\n+    public void jdisGJasmGsonOrigDecompileCompileAndLoad() throws IOException {\n+        BruteForceHelper.SingleTestClassProvider cp = new BruteForceHelper.SingleTestClassProvider(\"\/com\/google\/gson\/Gson.class\", \"\/com\/google\/gson\/GsonOrig.class\");\n+        BruteForceHelper worker = new BruteForceHelper(cp);\n+        try {\n+            new JdisJasm(true, worker).run();\n+        } finally {\n+            cp.getClasses().get(0).delete();\n+        }\n+    }\n+}\n+\n","filename":"test\/org\/openjdk\/asmtools\/jdis\/JdisJasmTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}