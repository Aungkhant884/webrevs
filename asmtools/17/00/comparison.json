{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n-import static org.openjdk.asmtools.jasm.JasmTokens.Token.COMMA;\n-import static org.openjdk.asmtools.jasm.JasmTokens.Token.SEMICOLON;\n+import static org.openjdk.asmtools.jasm.JasmTokens.Token.*;\n@@ -367,0 +366,1 @@\n+        final int pos = parser.env.pos;\n@@ -385,1 +385,4 @@\n-                refCell = pool.FindCell(cpParser.parseConstValue(ConstType.CONSTANT_METHOD));\n+                cpParser.setExitImmediately(true);\n+                refCell = cpParser.parseConstRef(ConstType.CONSTANT_METHOD, ConstType.CONSTANT_INTERFACEMETHOD);\n+                cpParser.setExitImmediately(false);\n+                checkReferenceIndex(pos, ConstType.CONSTANT_METHOD, null);\n@@ -406,0 +409,1 @@\n+                cpParser.setExitImmediately(true);\n@@ -407,0 +411,2 @@\n+                cpParser.setExitImmediately(false);\n+                checkReferenceIndex(pos, ctype01, ctype02);\n@@ -408,0 +414,1 @@\n+\n@@ -409,1 +416,4 @@\n-                refCell = pool.FindCell(cpParser.parseConstValue(ConstType.CONSTANT_INTERFACEMETHOD));\n+                cpParser.setExitImmediately(true);\n+                refCell = cpParser.parseConstRef(ConstType.CONSTANT_INTERFACEMETHOD, ConstType.CONSTANT_METHOD);\n+                cpParser.setExitImmediately(false);\n+                checkReferenceIndex(pos, ConstType.CONSTANT_INTERFACEMETHOD, null);\n@@ -418,0 +428,24 @@\n+    \/**\n+     * Check the pair reference_kind:reference_index where reference_kind is any from:\n+     * REF_invokeVirtual, REF_newInvokeSpecial, REF_invokeStatic, REF_invokeSpecial, REF_invokeInterface\n+     * and reference_index is one of [Empty], Method or InterfaceMethod\n+     * There are possible entries:\n+     * ldc Dynamic REF_newInvokeSpecial:InterfaceMethod  LdcConDyTwice.\"<init>\":\n+     * ldc Dynamic REF_invokeInterface:LdcConDyTwice.\"<init>\":\n+     * ldc Dynamic REF_newInvokeSpecial:Method LdcConDyTwice.\"<init>\":\n+     * ....\n+     * @param position   the position in a source file\n+     * @param defaultTag expected reference_index tag (Method or InterfaceMethod)\n+     * @param defaultTag 2nd expected reference_index tag (Method or InterfaceMethod)\n+     *\/\n+    private void checkReferenceIndex(int position, ConstType defaultTag, ConstType default2Tag) {\n+        if (scanner.token != COLON) {\n+            if (default2Tag != null) {\n+                env.error(position, \"wrong.tag2\", defaultTag.parseKey(), default2Tag.parseKey());\n+            } else {\n+                env.error(position, \"wrong.tag\", defaultTag.parseKey());\n+            }\n+            throw new Scanner.SyntaxError().Fatal();\n+        }\n+    }\n+\n@@ -1304,2 +1338,1 @@\n-                    throw new Scanner.SyntaxError();\n-\n+                    throw new Scanner.SyntaxError().Fatal();\n@@ -1851,1 +1884,1 @@\n-        return ((ClassData[]) clsDataList.toArray(new ClassData[0]));\n+        return clsDataList.toArray(new ClassData[0]);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Parser.java","additions":41,"deletions":8,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,5 @@\n+    \/**\n+     * Stop parsing a source file immediately and interpret any issue as an error\n+     *\/\n+    private boolean exitImmediately = false;\n+\n@@ -65,0 +70,15 @@\n+    \/**\n+     * In particular cases it's necessary to interpret a warning issue as an error and\n+     * stop parsing a source file immediately\n+     * cpParser.setExitImmediately(true);\n+     * Ã§parseConstRef(...);\n+     * cpParser.setExitImmediately(false);\n+     *\/\n+    public void setExitImmediately(boolean exitImmediately) {\n+        this.exitImmediately = exitImmediately;\n+    }\n+\n+    public boolean isExitImmediately() {\n+        return exitImmediately;\n+    }\n+\n@@ -579,0 +599,4 @@\n+                    if( exitImmediately ) {\n+                        env.error(\"wrong.tag\", defaultTag.parseKey());\n+                        throw new Scanner.SyntaxError().Fatal();\n+                    }\n@@ -581,0 +605,4 @@\n+                    if( exitImmediately ) {\n+                        env.error(\"wrong.tag2\", defaultTag.parseKey(), default2Tag.parseKey());\n+                        throw new Scanner.SyntaxError().Fatal();\n+                    }\n@@ -632,2 +660,1 @@\n-            ConstantPool.ConstValue ref = null;\n-            ref = parseTagConstValue(defaultTag, default2Tag, ignoreKeywords);\n+            ConstantPool.ConstValue ref = parseTagConstValue(defaultTag, default2Tag, ignoreKeywords);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ParserCP.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-                env.traceln(\"expect:\" + t + \" instead of \" + token);\n+                env.traceln(\"expect: \" + t + \" instead of \" + token);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Scanner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,3 @@\n-warn.wrong.tag2=Wrong tags: {0} or {1} expected.\n+err.wrong.tag=Wrong tag: {0} expected.\n+warn.wrong.tag2=Wrong tag: Either {0} or {1} expected.\n+err.wrong.tag2=Wrong tag: Either {0} or {1} expected.\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}