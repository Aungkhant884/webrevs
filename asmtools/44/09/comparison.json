{"files":[{"patch":"@@ -54,1 +54,1 @@\n-src\/test\/java\/org=..\/..\/..\/..\/test\/org\/\n+src\/test=..\/..\/test\n","filename":"maven\/mvngen.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+    public static final String DIR_SWITCH=\"-d\";\n+    public static final String DUAL_LOG_SWITCH =\"-dls\";\n","filename":"src\/org\/openjdk\/asmtools\/Main.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.PrintWriter;\n@@ -45,2 +44,2 @@\n-    public CompilerLogger(PrintWriter errLog, PrintWriter outLog) {\n-        super(errLog, outLog);\n+    public CompilerLogger(ToolOutput.DualStreamToolOutput oser) {\n+        super(oser);\n@@ -135,1 +134,1 @@\n-                PrintWriter output = msg.kind() == ERROR ? getErrLog() : getOutLog();\n+                ToolOutput output = msg.kind() == ERROR ? getOutputs().getEToolObject() : getOutputs().getSToolObject();\n@@ -140,1 +139,1 @@\n-                    output.println(msg.text());\n+                    output.printlns(msg.text());\n@@ -142,1 +141,1 @@\n-                    output.println(format(\"%s (%d:%d) %s\", getSimpleInputFileName(),\n+                    output.printlns(format(\"%s (%d:%d) %s\", getSimpleInputFileName(),\n@@ -156,1 +155,1 @@\n-                getOutLog().print(format(\"%d warning(s)%s\", nWarnings, nErrors != 0 ? \", \" : \"\"));\n+                getOutputs().printe(format(\"%d warning(s)%s\", nWarnings, nErrors != 0 ? \", \" : \"\"));\n@@ -158,2 +157,2 @@\n-                getOutLog().println(format(\"%d error(s)\", nErrors));\n-            getOutLog().flush();\n+                getOutputs().printlne(format(\"%d error(s)\", nErrors));\n+            getOutputs().flush();\n@@ -166,1 +165,1 @@\n-    private void printAffectedSourceLine(PrintWriter output, Pair<Integer, Integer> filePosition) {\n+    private void printAffectedSourceLine(ToolOutput output, Pair<Integer, Integer> filePosition) {\n@@ -171,2 +170,2 @@\n-        output.println(line);\n-        output.println(repeat(\" \", (int) linePosition) + \"^\");\n+        output.printlns(line);\n+        output.printlns(repeat(\" \", (int) linePosition) + \"^\");\n","filename":"src\/org\/openjdk\/asmtools\/common\/CompilerLogger.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.io.PrintWriter;\n-\n@@ -31,2 +29,2 @@\n-    public DecompilerLogger(PrintWriter errLog, PrintWriter outLog) {\n-        super(errLog, outLog);\n+    public DecompilerLogger(ToolOutput.DualStreamToolOutput oser) {\n+        super(oser);\n","filename":"src\/org\/openjdk\/asmtools\/common\/DecompilerLogger.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.PrintWriter;\n@@ -47,0 +46,1 @@\n+    private ToolOutput toolOutput;\n@@ -57,0 +57,1 @@\n+        this.toolOutput = builder.toolOutput;\n@@ -118,2 +119,2 @@\n-    public PrintWriter getErrLog() {\n-        return toolLogger.getErrLog();\n+    public ToolOutput.DualStreamToolOutput getOutputs() {\n+        return getLogger().getOutputs();\n@@ -123,2 +124,13 @@\n-    public PrintWriter getOutLog() {\n-        return toolLogger.getOutLog();\n+    public void setOutputs(ToolOutput.DualStreamToolOutput nw) {\n+        getLogger().setOutputs(nw);\n+    }\n+\n+\n+    @Override\n+    public ToolOutput getToolOutput() {\n+        return toolOutput;\n+    }\n+\n+    @Override\n+    public void setToolOutput(ToolOutput toolOutput) {\n+        this.toolOutput = toolOutput;\n@@ -145,1 +157,1 @@\n-        public PrintWriter toolOutput;\n+        public ToolOutput toolOutput;\n@@ -148,1 +160,1 @@\n-        public Builder(String programName, PrintWriter toolOutput, T toolLogger) {\n+        public Builder(String programName, ToolOutput toolOutput, T toolLogger) {\n@@ -154,5 +166,0 @@\n-        public  Builder(String programName, T toolLogger) {\n-            this.programName = programName;\n-            this.toolLogger = toolLogger;\n-        }\n-\n","filename":"src\/org\/openjdk\/asmtools\/common\/Environment.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        getOutLog().print(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().prints(( args == null || args.length == 0) ? format : format(format, args));\n@@ -45,1 +45,1 @@\n-        getErrLog().println(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().printlne(( args == null || args.length == 0) ? format : format(format, args));\n@@ -49,1 +49,1 @@\n-        getOutLog().println(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().printlns(( args == null || args.length == 0) ? format : format(format, args));\n@@ -53,1 +53,1 @@\n-        getOutLog().println();\n+        getOutputs().printlns(\"\");\n@@ -57,1 +57,1 @@\n-        getOutLog().print(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().prints(( args == null || args.length == 0) ? format : format(format, args));\n@@ -61,1 +61,1 @@\n-        getOutLog().print(ch);\n+        getOutputs().prints(ch);\n@@ -64,1 +64,2 @@\n-    PrintWriter getErrLog();\n+    ToolOutput.DualStreamToolOutput getOutputs();\n+    void setOutputs(ToolOutput.DualStreamToolOutput nwoutput);\n@@ -66,1 +67,7 @@\n-    PrintWriter getOutLog();\n+    default ToolOutput getToolOutput() {\n+        throw new NotImplementedException(\"implement wisely!\");\n+    }\n+\n+    default void setToolOutput(ToolOutput toolOutput) {\n+        throw new NotImplementedException(\"implement wisely!\");\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/common\/ILogger.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -8,0 +8,3 @@\n+    public NotImplementedException(String reason) {\n+        super(reason);\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/common\/NotImplementedException.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.io.PrintWriter;\n@@ -37,6 +36,2 @@\n-    protected Tool(PrintWriter toolOutput, PrintWriter errorLogger, PrintWriter outputLogger) {\n-        this.environment = getEnvironment(toolOutput, errorLogger, outputLogger);\n-    }\n-\n-    protected Tool(PrintWriter errorLogger, PrintWriter outputLogger) {\n-        this.environment = getEnvironment(errorLogger, outputLogger);\n+    protected Tool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+        this.environment = getEnvironment(toolOutput, outerLog);\n@@ -60,5 +55,1 @@\n-    public T getEnvironment(PrintWriter toolOutput, PrintWriter errorLogger, PrintWriter outputLogger) {\n-        throw new NotImplementedException();\n-    }\n-\n-    public T getEnvironment(PrintWriter errorLogger, PrintWriter outputLogger) {\n+    public T getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n@@ -74,1 +65,1 @@\n-    protected File setDestDir(int index, String... argv) {\n+    protected void setDestDir(int index, String... argv) {\n@@ -86,1 +77,1 @@\n-        return destDir;\n+        environment.setToolOutput(new ToolOutput.DirOutput(destDir));\n","filename":"src\/org\/openjdk\/asmtools\/common\/Tool.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.PrintWriter;\n@@ -41,3 +40,2 @@\n-    \/\/ Logger's streams\n-    final private PrintWriter errLog;\n-    final private PrintWriter outLog;\n+    private static I18NResourceBundle sharedI18n = I18NResourceBundle.getBundleForClass(org.openjdk.asmtools.Main.class);\n+    ToolOutput.DualStreamToolOutput outerLog;\n@@ -48,3 +46,5 @@\n-    protected ToolLogger(PrintWriter errLog, PrintWriter outLog) {\n-        this.errLog = errLog;\n-        this.outLog = outLog;\n+    static {\n+        sharedI18n.setWarn(false);\n+    }\n+    protected ToolLogger(ToolOutput.DualStreamToolOutput outerLog) {\n+        this.outerLog = outerLog;\n@@ -58,4 +58,0 @@\n-    public static I18NResourceBundle getI18n() {\n-        return i18n;\n-    }\n-\n@@ -67,1 +63,15 @@\n-        return i18n.getString(id, args);\n+        String r = null;\n+        i18n.setWarn(false);\n+        try {\n+            r = i18n.getString(id, args);\n+        } finally {\n+            i18n.setWarn(true);\n+        }\n+        if (r == null || r.equals(id)) {\n+            r = sharedI18n.getString(id, args);\n+        }\n+        if (r == null || r.equals(id)) {\n+            \/\/to get proper error message\n+            r = i18n.getString(id, args);\n+        }\n+        return r;\n@@ -79,1 +89,1 @@\n-            if (ToolLogger.i18n.containsKey(prefix + id)) {\n+            if (ToolLogger.i18n.containsKey(prefix + id) || ToolLogger.sharedI18n.containsKey(prefix + id)) {\n@@ -90,2 +100,2 @@\n-    public PrintWriter getErrLog() {\n-        return errLog;\n+    public ToolOutput.DualStreamToolOutput getOutputs() {\n+        return outerLog;\n@@ -95,2 +105,2 @@\n-    public PrintWriter getOutLog() {\n-        return outLog;\n+    public void setOutputs(ToolOutput.DualStreamToolOutput nwoutput) {\n+        this.outerLog = nwoutput;\n@@ -105,1 +115,1 @@\n-        throwable.printStackTrace(errLog);\n+        getOutputs().stacktrace(throwable);\n@@ -108,0 +118,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolLogger.java","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,352 @@\n+package org.openjdk.asmtools.common;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.nio.file.FileSystems;\n+import java.util.Optional;\n+\n+\n+public interface ToolOutput {\n+\n+    DataOutputStream getDataOutputStream() throws FileNotFoundException;\n+\n+    String getCurrentClassName();\n+\n+    void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException;\n+\n+    void finishClass(String fqn) throws IOException;\n+\n+    void printlns(String line);\n+\n+    void prints(String line);\n+\n+    void prints(char line);\n+\n+    void flush();\n+\n+    public static interface DualStreamToolOutput extends ToolOutput {\n+        void printlne(String line);\n+\n+        void printe(String line);\n+\n+        void printe(char line);\n+\n+        void stacktrace(Throwable ex);\n+\n+        ToolOutput getSToolObject();\n+        ToolOutput getEToolObject();\n+\n+        @Override\n+        default DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            throw new NotImplementedException(\"Not going to happen\");\n+        }\n+    }\n+\n+    \/**\n+     * Historically, the output loggers for compilers had two stderrs, one to sdout and secon to stderr.\n+     * That should be removed, in favour of just dualstream tool output, printing output to stdout and log into stderr\n+     *\/\n+    public abstract class NamedToolOutput implements ToolOutput {\n+        private String fqn;\n+        private Optional<String> suffix;\n+        private Environment environment;\n+\n+        @Override\n+        public String getCurrentClassName() {\n+            return fqn;\n+        }\n+\n+        @Override\n+        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+            this.fqn = fqn;\n+            this.suffix = suffix;\n+            this.environment = logger;\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            this.fqn = null;\n+        }\n+    }\n+\n+\n+    public abstract class NamedDualStreamToolOutput implements DualStreamToolOutput {\n+        private String fqn;\n+        private Optional<String> suffix;\n+        private Environment environment;\n+\n+        @Override\n+        public String getCurrentClassName() {\n+            return fqn;\n+        }\n+\n+        @Override\n+        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+            this.fqn = fqn;\n+            this.suffix = suffix;\n+            this.environment = logger;\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            this.fqn = null;\n+        }\n+    }\n+\n+\n+    public static class DirOutput extends NamedToolOutput {\n+\n+        private final File dir;\n+        private File outfile;\n+        private FileOutputStream fos;\n+        private PrintWriter pw;\n+\n+        public DirOutput(File dir) {\n+            this.dir = dir;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return super.toString() + \" to \" + dir;\n+        }\n+\n+        @Override\n+        public void printlns(String line) {\n+            pw.println(line);\n+        }\n+\n+        @Override\n+        public void prints(String line) {\n+            pw.print(line);\n+        }\n+\n+        @Override\n+        public void prints(char line) {\n+            pw.print(line);\n+        }\n+\n+        @Override\n+        public void startClass(String fqn, Optional<String> fileExtension, Environment environment) throws IOException {\n+            super.startClass(fqn, fileExtension, environment);\n+            final String fileSeparator = FileSystems.getDefault().getSeparator();\n+            if (dir == null) {\n+                int startOfName = fqn.lastIndexOf(fileSeparator);\n+                if (startOfName != -1) {\n+                    fqn = fqn.substring(startOfName + 1);\n+                }\n+                outfile = new File(fqn + fileExtension.orElseGet(() -> \"\"));\n+            } else {\n+                environment.traceln(\"writing -d \" + dir.getPath());\n+                if (!fileSeparator.equals(\"\/\")) {\n+                    fqn = fqn.replace(\"\/\", fileSeparator);\n+                }\n+                outfile = new File(dir, fqn + fileExtension.orElseGet(() -> \"\"));\n+                File outDir = new File(outfile.getParent());\n+                if (!outDir.exists() && !outDir.mkdirs()) {\n+                    environment.error(\"err.cannot.write\", outDir.getPath());\n+                    return;\n+                }\n+            }\n+            fos = new FileOutputStream(outfile);\n+            pw = new PrintWriter(new OutputStreamWriter(fos));\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            super.finishClass(fqn);\n+            flush();\n+            try {\n+                pw.close();\n+            } finally {\n+                fos.close();\n+            }\n+\n+        }\n+\n+        @Override\n+        public void flush() {\n+            \/\/todo flush to file\n+        }\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            return new DataOutputStream(new BufferedOutputStream(fos));\n+        }\n+    }\n+\n+    public static class PrintWriterOutput extends NamedToolOutput {\n+\n+        protected PrintWriter os;\n+\n+        public PrintWriterOutput(OutputStream os) {\n+            \/\/although it is usually System.out, it is set from Environment, or custom\n+            this.os = new PrintWriter(os, true);\n+        }\n+        public PrintWriterOutput(Writer os) {\n+            \/\/although it is usually System.out, it is set from Environment, or custom\n+            this.os = new PrintWriter(os, true);\n+        }\n+\n+        @Override\n+        public void printlns(String line) {\n+            os.println(line);\n+        }\n+\n+        @Override\n+        public void prints(String line) {\n+            os.print(line);\n+        }\n+\n+        @Override\n+        public void prints(char line) {\n+            os.print(line);\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            super.finishClass(fqn);\n+            os.flush();\n+        }\n+\n+        @Override\n+        public void flush() {\n+            os.flush();\n+        }\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            throw  new  NotImplementedException(\"Use EscapedPrintStreamOutput\");\n+        }\n+\n+\n+    }\n+\n+    public static class EscapedPrintStreamOutput extends PrintWriterOutput {\n+\n+        private final OutputStream originalStream;\n+\n+        public EscapedPrintStreamOutput(OutputStream os) {\n+            super(new uEscWriter(os));\n+            this.originalStream = os;\n+        }\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            return new DataOutputStream(new BufferedOutputStream(originalStream));\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            super.finishClass(fqn);\n+            originalStream.flush();\n+        }\n+    }\n+\n+    public static class DualOutputStreamOutput extends NamedDualStreamToolOutput {\n+\n+        protected PrintWriter os;\n+        protected PrintWriter es;\n+\n+\n+        public DualOutputStreamOutput() {\n+            this(System.out, System.err);\n+        }\n+\n+        \/\/todo, remove once tests asdapts\n+        public DualOutputStreamOutput(PrintWriter os, PrintWriter er) {\n+            this.os = os;\n+            this.es = er;\n+        }\n+        public DualOutputStreamOutput(PrintStream os, PrintStream er) {\n+            \/\/although it is usually System.out, it is set from Environment, or custom\n+            this.os = new PrintWriter(os, true);\n+            \/\/although it is usually System.err, it is set from Environment, or custom\n+            this.es = new PrintWriter(er, true);\n+        }\n+\n+        @Override\n+        public void printlns(String line) {\n+            os.println(line);\n+        }\n+\n+        @Override\n+        public void prints(String line) {\n+            os.print(line);\n+        }\n+\n+        @Override\n+        public void prints(char line) {\n+            os.print(line);\n+        }\n+\n+        @Override\n+        public void printlne(String line) {\n+            es.println(line);\n+        }\n+\n+        @Override\n+        public void printe(String line) {\n+            es.print(line);\n+        }\n+\n+        @Override\n+        public void printe(char line) {\n+            es.print(line);\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            super.finishClass(fqn);\n+            try {\n+                os.flush();\n+            } finally {\n+                es.flush();\n+            }\n+        }\n+\n+        @Override\n+        public void stacktrace(Throwable ex) {\n+            ex.printStackTrace(es);\n+        }\n+\n+        @Override\n+        public ToolOutput getSToolObject() {\n+            return new PrintWriterOutput(os);\n+        }\n+\n+        @Override\n+        public ToolOutput getEToolObject() {\n+            return new PrintWriterOutput(es);\n+        }\n+\n+        @Override\n+        public void flush() {\n+            this.os.flush();\n+            this.es.flush();\n+        }\n+    }\n+\n+    public static class SingleDualOutputStreamOutput extends DualOutputStreamOutput {\n+        public SingleDualOutputStreamOutput() {\n+            this(System.err);\n+        }\n+\n+        public SingleDualOutputStreamOutput(PrintWriter er) {\n+            super(er, er);\n+        }\n+\n+        public SingleDualOutputStreamOutput(PrintStream er) {\n+            super(er, er);\n+        }\n+    }\n+}\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolOutput.java","additions":352,"deletions":0,"binary":false,"changes":352,"status":"added"},{"patch":"@@ -30,1 +30,2 @@\n-\\   $ java -jar {0} -?|-h|-help\\n\n+\\   $ java -jar {0} -?|-h|-help\\n\\\n+\\   use -dls switch to return the ancient dual stream logging\\n\n@@ -33,1 +34,13 @@\n-main.error.unknown_tool=Tool name ''{0}'' unrecognized.  See usage above for possible tool choices.\n\\ No newline at end of file\n+main.error.unknown_tool=Tool name ''{0}'' unrecognized.  See usage above for possible tool choices.\n+\n+# shared strings\n+err.does_not_exist=The output directory {0} does not exist\n+err.d_requires_argument=-d requires argument <directory>\n+info.opt.d=\\\n+\\     -d <directory>  Specify where to place generated class files\n+info.opt.v=\\\n+\\     -v       Print additional information\n+info.opt.t=\\\n+\\     -t       Print debug, trace information\n+info.opt.version=\\\n+\\     -version Print the program version\n\\ No newline at end of file\n","filename":"src\/org\/openjdk\/asmtools\/i18n.properties","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -506,22 +507,2 @@\n-    public void write(File destDir) throws IOException {\n-        final String fileSeparator = FileSystems.getDefault().getSeparator();\n-        File outfile;\n-        if (destDir == null) {\n-            int startOfName = myClassName.lastIndexOf(fileSeparator);\n-            if (startOfName != -1) {\n-                myClassName = myClassName.substring(startOfName + 1);\n-            }\n-            outfile = new File(myClassName + fileExtension);\n-        } else {\n-            environment.traceln(\"writing -d \" + destDir.getPath());\n-            if (!fileSeparator.equals(\"\/\")) {\n-                myClassName = myClassName.replace(\"\/\", fileSeparator);\n-            }\n-            outfile = new File(destDir, myClassName + fileExtension);\n-            File outDir = new File(outfile.getParent());\n-            if (!outDir.exists() && !outDir.mkdirs()) {\n-                environment.error(\"err.cannot.write\", outDir.getPath());\n-                return;\n-            }\n-        }\n-        try (DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(outfile)))) {\n+    public void write(ToolOutput toolOutput) throws IOException {\n+        try (DataOutputStream dos = toolOutput.getDataOutputStream()) {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ClassData.java","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -134,2 +135,2 @@\n-        public JasmBuilder(PrintWriter errorLogger, PrintWriter outputLogger) {\n-            super(\"jasm\", new CompilerLogger(errorLogger, outputLogger));\n+        public JasmBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+            super(\"jasm\", toolOutput, new CompilerLogger(logger));\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmEnvironment.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -33,2 +34,2 @@\n-    protected JasmTool() {\n-        super(new PrintWriter(System.err, true), new PrintWriter(System.out, true));\n+    protected JasmTool(ToolOutput toolOutput) {\n+        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n@@ -37,2 +38,2 @@\n-    protected JasmTool(PrintWriter errorLogger, PrintWriter outputLogger) {\n-        super(errorLogger, outputLogger);\n+    protected JasmTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+        super(toolOutput, logger);\n@@ -42,2 +43,2 @@\n-    public JasmEnvironment getEnvironment(PrintWriter errorLogger, PrintWriter outputLogger) {\n-        JasmBuilder builder = new JasmBuilder(errorLogger, outputLogger);\n+    public JasmEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+        JasmBuilder builder = new JasmBuilder(toolOutput, logger);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmTool.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -28,1 +29,0 @@\n-import java.io.File;\n@@ -30,1 +30,0 @@\n-import java.io.PrintWriter;\n@@ -32,0 +31,1 @@\n+import java.util.Optional;\n@@ -50,2 +50,0 @@\n-    private File destDir;\n-\n@@ -65,2 +63,2 @@\n-    public Main(String... argv) {\n-        super();\n+    public Main(ToolOutput toolOutput, String... argv) {\n+        super(toolOutput);\n@@ -70,2 +68,2 @@\n-    public Main(PrintWriter errorLogger, PrintWriter outputLogger, String... argv) {\n-        super(errorLogger, outputLogger);\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+        super(toolOutput, log);\n@@ -77,2 +75,1 @@\n-        Main compiler = new Main(new PrintWriter(System.err, true),\n-                new PrintWriter(System.out, true), argv);\n+        Main compiler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), new ToolOutput.SingleDualOutputStreamOutput(), argv);\n@@ -95,0 +92,2 @@\n+                String fqn = parser.getClassesData()[0].myClassName;\n+                environment.getToolOutput().startClass(fqn, Optional.of(parser.getClassesData()[0].fileExtension), environment);\n@@ -100,1 +99,1 @@\n-                    cd.write(destDir);\n+                    cd.write(environment.getToolOutput());\n@@ -102,0 +101,1 @@\n+                environment.getToolOutput().finishClass(fqn);\n@@ -121,1 +121,1 @@\n-        environment.info(\"info.opt.g\");\n+        environment.info(\"info.opt.t\");\n@@ -151,1 +151,4 @@\n-                    case \"-d\" -> destDir = setDestDir(++i, argv);\n+                    case org.openjdk.asmtools.Main.DIR_SWITCH -> setDestDir(++i, argv);\n+                    case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH -> {\n+                        this.environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n+                    }\n@@ -231,0 +234,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Main.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,8 +25,1 @@\n-info.opt.d=\\\n-\\     -d <directory>        Specify where to place generated class files\n-info.opt.v=\\\n-\\     -v                    Print additional information\n-info.opt.g=\\\n-\\     -t                    Print debug, trace information\n-info.opt.version=\\\n-\\     -version              Print the program version\n+# see also shared section in asmtools\/i18\n@@ -44,2 +37,0 @@\n-err.d_requires_argument=-d requires argument <directory>\n-err.does_not_exist=The output directory {0} does not exist\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import org.openjdk.asmtools.common.uEscWriter;\n+\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -34,1 +35,0 @@\n-import java.io.PrintWriter;\n@@ -55,1 +55,1 @@\n-    PrintWriter out;\n+    ToolOutput out;\n@@ -83,3 +83,3 @@\n-    void printByteHex(PrintWriter out, int b) {\n-        out.print(hexTable[(b >> 4) & 0xF]);\n-        out.print(hexTable[b & 0xF]);\n+    void printByteHex(ToolOutput out, int b) {\n+        out.prints(hexTable[(b >> 4) & 0xF]);\n+        out.prints(hexTable[b & 0xF]);\n@@ -91,1 +91,1 @@\n-            out.print(\"  \");\n+            out.prints(\"  \");\n@@ -93,1 +93,1 @@\n-        out.println(s);\n+        out.printlns(s);\n@@ -99,1 +99,1 @@\n-            out.print(\"  \");\n+            out.prints(\"  \");\n@@ -101,1 +101,1 @@\n-        out.print(s);\n+        out.prints(s);\n@@ -106,1 +106,1 @@\n-            out.print(\"  \");\n+            out.prints(\"  \");\n@@ -108,1 +108,1 @@\n-        out.println(s);\n+        out.printlns(s);\n@@ -114,1 +114,1 @@\n-            out.print(\"  \");\n+            out.prints(\"  \");\n@@ -116,1 +116,1 @@\n-        out.println(s);\n+        out.printlns(s);\n@@ -131,1 +131,1 @@\n-                    out.println(\";\");\n+                    out.printlns(\";\");\n@@ -136,1 +136,1 @@\n-                out.println(\";\");\n+                out.printlns(\";\");\n@@ -203,1 +203,1 @@\n-            out.print(\"wrong magic: 0x\" + Integer.toString(EXPORT_MAGIC, 16) + \" expected\");\n+            out.prints(\"wrong magic: 0x\" + Integer.toString(EXPORT_MAGIC, 16) + \" expected\");\n@@ -207,1 +207,1 @@\n-        out.println();\n+        out.printlns(\"\");\n@@ -243,1 +243,1 @@\n-                    out.println(sb.append(\"\\\"; \/\/ #\").append(i).toString());\n+                    out.printlns(sb.append(\"\\\"; \/\/ #\").append(i).toString());\n@@ -285,1 +285,1 @@\n-            out.println(\"; \/\/ flags\");\n+            out.printlns(\"; \/\/ flags\");\n@@ -313,1 +313,1 @@\n-                out.println(\"; \/\/ flags\");\n+                out.printlns(\"; \/\/ flags\");\n@@ -338,1 +338,1 @@\n-                out.println(\"; \/\/ flags\");\n+                out.printlns(\"; \/\/ flags\");\n@@ -359,1 +359,1 @@\n-            out.print(\", \" + size);\n+            out.prints(\", \" + size);\n@@ -369,1 +369,1 @@\n-            out.println(\"=========== extra bytes:\");\n+            out.printlns(\"=========== extra bytes:\");\n@@ -378,1 +378,1 @@\n-                out.println(\"  there is also \" + avail + \" bytes available\");\n+                out.printlns(\"  there is also \" + avail + \" bytes available\");\n@@ -393,1 +393,1 @@\n-            out.print(\"wrong magic: 0x\" + Integer.toString(HEADER_MAGIC, 16) + \" expected\");\n+            out.prints(\"wrong magic: 0x\" + Integer.toString(HEADER_MAGIC, 16) + \" expected\");\n@@ -397,1 +397,1 @@\n-        out.println();\n+        out.printlns(\"\");\n@@ -516,1 +516,1 @@\n-                    out.print(\" \/\/ internal \");\n+                    out.prints(\" \/\/ internal \");\n@@ -518,2 +518,2 @@\n-                    out.print(info1 + \"b \" + info2 + \"b \" + info3 + \"b;\");\n-                    out.print(\" \/\/ external \");\n+                    out.prints(info1 + \"b \" + info2 + \"b \" + info3 + \"b;\");\n+                    out.prints(\" \/\/ external \");\n@@ -521,1 +521,1 @@\n-                out.println(refNames[tag - 1]);\n+                out.printlns(refNames[tag - 1]);\n@@ -523,2 +523,2 @@\n-                out.print(info1 + \"b \" + info2 + \"b \" + info3 + \"b;\");\n-                out.println(\" \/\/ unknown tag \");\n+                out.prints(info1 + \"b \" + info2 + \"b \" + info3 + \"b;\");\n+                out.printlns(\" \/\/ unknown tag \");\n@@ -553,1 +553,1 @@\n-            out.println(\"; \/\/ bitfield\");\n+            out.printlns(\"; \/\/ bitfield\");\n@@ -610,1 +610,1 @@\n-            out.println(\"; \/\/ flags\");\n+            out.printlns(\"; \/\/ flags\");\n@@ -631,1 +631,1 @@\n-                out.println(\"; \/\/ flags\");\n+                out.printlns(\"; \/\/ flags\");\n@@ -641,1 +641,1 @@\n-                        out.println(\" \/\/ internal field\");\n+                        out.printlns(\" \/\/ internal field\");\n@@ -643,2 +643,2 @@\n-                        out.print(info1 + \"b \" + info2 + \"b \" + info3 + \"b;\");\n-                        out.println(\" \/\/ external field\");\n+                        out.prints(info1 + \"b \" + info2 + \"b \" + info3 + \"b;\");\n+                        out.printlns(\" \/\/ external field\");\n@@ -654,1 +654,1 @@\n-                    out.println(\"; \/\/ primitive type\");\n+                    out.printlns(\"; \/\/ primitive type\");\n@@ -674,1 +674,1 @@\n-                out.println(\"; \/\/ flags\");\n+                out.printlns(\"; \/\/ flags\");\n@@ -716,1 +716,1 @@\n-            out.print(\"0x\");\n+            out.prints(\"0x\");\n@@ -719,2 +719,2 @@\n-            out.print(\", \" + in.readUnsignedShort() + \", \");\n-            out.println(in.readUnsignedShort() + \"; \/\/ handler \" + i);\n+            out.prints(\", \" + in.readUnsignedShort() + \", \");\n+            out.printlns(in.readUnsignedShort() + \"; \/\/ handler \" + i);\n@@ -725,1 +725,1 @@\n-            out.println(\"\/\/ Descriptor.cap absent - methods not printed\");\n+            out.printlns(\"\/\/ Descriptor.cap absent - methods not printed\");\n@@ -732,1 +732,1 @@\n-                    out.println(\"file offset=\" + f_offset + \" but m_offset=\" + m_offset);\n+                    out.printlns(\"file offset=\" + f_offset + \" but m_offset=\" + m_offset);\n@@ -739,1 +739,1 @@\n-                    out.println(\"; \/\/ flags, max_stack\");\n+                    out.printlns(\"; \/\/ flags, max_stack\");\n@@ -742,1 +742,1 @@\n-                    out.println(\"; \/\/ nargs, max_locals\");\n+                    out.printlns(\"; \/\/ nargs, max_locals\");\n@@ -747,1 +747,1 @@\n-                    out.println(\"; \/\/ flags, padding\");\n+                    out.printlns(\"; \/\/ flags, padding\");\n@@ -839,1 +839,1 @@\n-    public Main(PrintWriter out, String program) {\n+    public Main(ToolOutput out, String program) {\n@@ -845,1 +845,1 @@\n-        out.println(program + \": \" + msg);\n+        out.printlns(program + \": \" + msg);\n@@ -852,3 +852,3 @@\n-        out.println(i18n.getString(\"jcdec.usage\"));\n-        out.println(i18n.getString(\"jcdec.opt.g\"));\n-        out.println(i18n.getString(\"jcdec.opt.version\"));\n+        out.printlns(i18n.getString(\"jcdec.usage\"));\n+        out.printlns(i18n.getString(\"jcdec.opt.g\"));\n+        out.printlns(i18n.getString(\"jcdec.opt.version\"));\n@@ -877,1 +877,1 @@\n-                out.println(\"arg[\" + i + \"]=\" + argv[i] + \"\/verbose\");\n+                out.printlns(\"arg[\" + i + \"]=\" + argv[i] + \"\/verbose\");\n@@ -879,1 +879,1 @@\n-                out.println(ProductInfo.FULL_VERSION);\n+                out.printlns(ProductInfo.FULL_VERSION);\n@@ -882,1 +882,1 @@\n-\/\/out.println(\"arg[\"+i+\"]=\"+argv[i]+\"\/invalid flag\");\n+\/\/out.printlns(\"arg[\"+i+\"]=\"+argv[i]+\"\/invalid flag\");\n@@ -932,1 +932,1 @@\n-                    out.println(\"\");\n+                    out.printlns(\"\");\n@@ -935,1 +935,1 @@\n-                    out.println(\"\");\n+                    out.printlns(\"\");\n@@ -945,1 +945,1 @@\n-                error(i18n.getString(\"jcdec.error.fatal_exception\"));\n+                error(i18n.getString(\"jcdec.error.fatal_exceptPrintWriter ion\"));\n@@ -956,1 +956,1 @@\n-        Main decoder = new Main(new PrintWriter(new uEscWriter(System.out)), \"jcdec\");\n+        Main decoder = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), \"jcdec\");\n","filename":"src\/org\/openjdk\/asmtools\/jcdec\/Main.java","additions":61,"deletions":61,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+# jcdec currently do not support shared resources\n","filename":"src\/org\/openjdk\/asmtools\/jcdec\/i18n.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Optional;\n@@ -697,1 +698,1 @@\n-    public void write(ByteBuffer cls, File destDir) throws IOException {\n+    public void write(ByteBuffer cls) throws IOException {\n@@ -705,22 +706,0 @@\n-        File outfile;\n-        if (destDir == null) {\n-            int startofname = myname.lastIndexOf('\/');\n-            if (startofname != -1) {\n-                myname = myname.substring(startofname + 1);\n-            }\n-            outfile = new File(myname);\n-        } else {\n-            environment.traceln(\"writing -d \" + destDir.getPath());\n-            if (fileSeparator == 0) {\n-                fileSeparator = System.getProperty(\"file.separator\").charAt(0);\n-            }\n-            if (fileSeparator != '\/') {\n-                myname = myname.replace('\/', fileSeparator);\n-            }\n-            outfile = new File(destDir, myname);\n-            File outdir = new File(outfile.getParent());\n-            if (!outdir.exists() && !outdir.mkdirs()) {\n-                environment.error(\"cannot.write\", outdir.getPath());\n-                return;\n-            }\n-        }\n@@ -728,1 +707,1 @@\n-        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outfile));\n+        BufferedOutputStream out = new BufferedOutputStream(environment.getToolOutput().getDataOutputStream());\n@@ -738,1 +717,1 @@\n-    public void write(File destdir) throws IOException {\n+    public void write() throws IOException {\n@@ -740,1 +719,3 @@\n-            write(cls, destdir);\n+            environment.getToolOutput().startClass(cls.myname, Optional.empty(), environment);\n+            write(cls);\n+            environment.getToolOutput().finishClass(cls.myname);\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Jcoder.java","additions":7,"deletions":26,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.NotImplementedException;\n@@ -29,0 +30,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -112,2 +114,2 @@\n-        public JcoderBuilder(PrintWriter errorLogger, PrintWriter outputLogger) {\n-            super(\"jcoder\", new CompilerLogger(errorLogger, outputLogger));\n+        public JcoderBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+            super(\"jcoder\", toolOutput, new CompilerLogger(log));\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderEnvironment.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -32,2 +33,2 @@\n-    protected JcoderTool() {\n-        super(new PrintWriter(System.err, true), new PrintWriter(System.out, true));\n+    protected JcoderTool(ToolOutput toolOutput) {\n+        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n@@ -36,2 +37,2 @@\n-    protected JcoderTool(PrintWriter errorLogger, PrintWriter outputLogger) {\n-        super(errorLogger, outputLogger);\n+    protected JcoderTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+        super(toolOutput, logger);\n@@ -41,2 +42,2 @@\n-    public JcoderEnvironment getEnvironment(PrintWriter errorLogger, PrintWriter outputLogger) {\n-        JcoderEnvironment.JcoderBuilder builder = new JcoderEnvironment.JcoderBuilder(errorLogger, outputLogger);\n+    public JcoderEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+        JcoderEnvironment.JcoderBuilder builder = new JcoderEnvironment.JcoderBuilder(toolOutput, log);\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderTool.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -27,1 +28,0 @@\n-import java.io.File;\n@@ -29,1 +29,0 @@\n-import java.io.PrintWriter;\n@@ -31,1 +30,0 @@\n-import java.util.ArrayList;\n@@ -48,1 +46,0 @@\n-    private File destDir;\n@@ -53,2 +50,2 @@\n-    public Main(String... argv) {\n-        super();\n+    public Main(ToolOutput toolOutput, String... argv) {\n+        super(toolOutput);\n@@ -58,2 +55,2 @@\n-    public Main(PrintWriter errorLogger, PrintWriter outputLogger, String... argv) {\n-        super(errorLogger, outputLogger);\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+        super(toolOutput, log);\n@@ -65,1 +62,1 @@\n-        Main compiler = new Main(argv);\n+        Main compiler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), argv);\n@@ -77,1 +74,1 @@\n-        environment.info(\"info.opt.g\");\n+        environment.info(\"info.opt.t\");\n@@ -94,1 +91,1 @@\n-                parser.write(destDir);\n+                parser.write();\n@@ -121,1 +118,2 @@\n-                    case \"-d\" -> destDir = setDestDir(++i, argv);\n+                    case org.openjdk.asmtools.Main.DIR_SWITCH -> setDestDir(++i, argv);\n+                    case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH -> environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+# see also shared section in asmtools\/i18\n@@ -29,8 +30,0 @@\n-info.opt.d=\\\n-\\     -d <directory>  Specify where to place generated class files\n-info.opt.v=\\\n-\\     -v              Print additional information\n-info.opt.g=\\\n-\\     -t              Print debug, trace information\n-info.opt.version=\\\n-\\     -version        Print the program version\n@@ -39,2 +32,0 @@\n-err.d_requires_argument=-d requires argument <directory>\n-err.does_not_exist=The output directory {0} does not exist\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/i18n.properties","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -452,1 +453,1 @@\n-    private void decodeElementValue(DataInputStream in, PrintWriter out) throws IOException {\n+    private void decodeElementValue(DataInputStream in, ToolOutput out) throws IOException {\n@@ -505,1 +506,1 @@\n-    private void decodeAnnotation(DataInputStream in, PrintWriter out) throws IOException {\n+    private void decodeAnnotation(DataInputStream in, ToolOutput out) throws IOException {\n@@ -516,1 +517,1 @@\n-    private void decodeElementValuePairs(int count, DataInputStream in, PrintWriter out) throws IOException {\n+    private void decodeElementValuePairs(int count, DataInputStream in, ToolOutput out) throws IOException {\n@@ -561,1 +562,1 @@\n-    private void decodeInfo(DataInputStream in, PrintWriter out, String elementName, boolean hasAccessFlag) throws IOException {\n+    private void decodeInfo(DataInputStream in, ToolOutput out, String elementName, boolean hasAccessFlag) throws IOException {\n@@ -580,1 +581,1 @@\n-    private void decodeTypeAnnotation(DataInputStream in, PrintWriter out) throws IOException {\n+    private void decodeTypeAnnotation(DataInputStream in, ToolOutput out) throws IOException {\n@@ -610,1 +611,1 @@\n-    private void decodeAttr(DataInputStream in, PrintWriter out) throws IOException {\n+    private void decodeAttr(DataInputStream in, ToolOutput out) throws IOException {\n@@ -1075,1 +1076,1 @@\n-    private void decodeAttrs(DataInputStream in, PrintWriter out) throws IOException {\n+    private void decodeAttrs(DataInputStream in, ToolOutput out) throws IOException {\n@@ -1091,1 +1092,1 @@\n-    private void decodeMembers(DataInputStream in, PrintWriter out, String groupName, String elementName) throws IOException {\n+    private void decodeMembers(DataInputStream in, ToolOutput out, String groupName, String elementName) throws IOException {\n@@ -1122,0 +1123,1 @@\n+                environment.getToolOutput().startClass(entityName, Optional.of(\".jcod\"), environment);\n@@ -1185,1 +1187,1 @@\n-            if (environment.printDetailsFlag)\n+            if (environment.printDetailsFlag) {\n@@ -1187,1 +1189,1 @@\n-            else\n+            } else {\n@@ -1189,0 +1191,2 @@\n+            }\n+            environment.getToolOutput().finishClass(entityName);\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -37,2 +38,2 @@\n-    \/\/ Output stream\n-    private final PrintWriter toolOutput;\n+    \/\/ Output stream or files or custom Strings\n+    private final ToolOutput toolOutput;\n@@ -50,4 +51,0 @@\n-    public PrintWriter getToolOutput() {\n-        return toolOutput;\n-    }\n-\n@@ -61,1 +58,1 @@\n-        getToolOutput().println(( args == null || args.length == 0) ? format : format(format, args));\n+        getToolOutput().printlns(( args == null || args.length == 0) ? format : format(format, args));\n@@ -66,1 +63,1 @@\n-        getToolOutput().println();\n+        getToolOutput().printlns(\"\");\n@@ -71,1 +68,1 @@\n-        getToolOutput().print(( args == null || args.length == 0) ? format : format(format, args));\n+        getToolOutput().prints(( args == null || args.length == 0) ? format : format(format, args));\n@@ -76,1 +73,1 @@\n-        getToolOutput().print(ch);\n+        getToolOutput().prints(ch);\n@@ -82,2 +79,2 @@\n-        public JDecBuilder(PrintWriter toolOutput, PrintWriter errorLogger, PrintWriter outputLogger) {\n-            super(\"jdec\", toolOutput, new DecompilerLogger(errorLogger, outputLogger));\n+        public JDecBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+            super(\"jdec\", toolOutput, new DecompilerLogger(log));\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/JdecEnvironment.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -33,2 +34,2 @@\n-    protected JdecTool(PrintWriter toolOutput, PrintWriter errorOutput, PrintWriter loggerOutput) {\n-        super(toolOutput, errorOutput, loggerOutput);\n+    protected JdecTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+        super(toolOutput, log);\n@@ -37,2 +38,2 @@\n-    protected JdecTool(PrintWriter toolOutput) {\n-        super(toolOutput, new PrintWriter(System.err, true), new PrintWriter(System.out, true));\n+    protected JdecTool(ToolOutput toolOutput) {\n+        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n@@ -42,1 +43,1 @@\n-        this(new PrintWriter(new uEscWriter(toolOutput)));\n+        this(new ToolOutput.EscapedPrintStreamOutput(toolOutput));\n@@ -46,2 +47,2 @@\n-    public JdecEnvironment getEnvironment(PrintWriter toolOutput, PrintWriter errorLogger, PrintWriter outputLogger) {\n-        JdecEnvironment.JDecBuilder builder = new JdecEnvironment.JDecBuilder(toolOutput, errorLogger, outputLogger);\n+    public JdecEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+        JdecEnvironment.JDecBuilder builder = new JdecEnvironment.JDecBuilder(toolOutput, log);\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/JdecTool.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.asmtools.common.uEscWriter;\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -42,4 +42,0 @@\n-    public Main(PrintStream toolOutput, String... argv) {\n-        super(toolOutput);\n-        parseArgs(argv);\n-    }\n@@ -47,2 +43,2 @@\n-    public Main(PrintWriter toolOutput, String... argv) {\n-        super(toolOutput);\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+        super(toolOutput, log);\n@@ -52,3 +48,2 @@\n-    public Main(PrintWriter toolOutput, PrintWriter errorOutput, PrintWriter loggerOutput, String... argv) {\n-        super(toolOutput, errorOutput, loggerOutput);\n-        parseArgs(argv);\n+    public Main(ToolOutput.EscapedPrintStreamOutput toolOutput, String[] argv) {\n+        this(toolOutput, new ToolOutput.SingleDualOutputStreamOutput(), argv);\n@@ -59,1 +54,1 @@\n-        Main decoder = new Main(new PrintWriter(new uEscWriter(System.out)), argv);\n+        Main decoder = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), argv);\n@@ -89,0 +84,1 @@\n+        environment.info(\"info.opt.d\");\n@@ -96,1 +92,2 @@\n-        for (String arg : argv) {\n+        for (int i = 0; i < argv.length; i++) {\n+            String arg = argv[i];\n@@ -108,0 +105,6 @@\n+                case org.openjdk.asmtools.Main.DIR_SWITCH:\n+                    setDestDir(++i, argv);\n+                    break;\n+                case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH:\n+                    this.environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n+                    break;\n@@ -150,1 +153,0 @@\n-                environment.getToolOutput().flush();\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+# see also shared section in asmtools\/i18\n@@ -27,6 +28,0 @@\n-info.opt.t=\\\n-\\     -t       Print debug, trace information\n-info.opt.v=\\\n-\\     -v       Print additional information\n-info.opt.version=\\\n-\\     -version Print the program version\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/i18n.properties","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -566,2 +567,2 @@\n-        public void print(PrintWriter out, int spacePadding) {\n-            out.print(PadRight(tag.tagName(), spacePadding));\n+        public void print(ToolOutput out, int spacePadding) {\n+            out.prints(PadRight(tag.tagName(), spacePadding));\n@@ -627,1 +628,1 @@\n-        public void print(PrintWriter out, int spacePadding) {\n+        public void print(ToolOutput out, int spacePadding) {\n@@ -629,1 +630,1 @@\n-            out.println(stringVal() + \";\");\n+            out.printlns(stringVal() + \";\");\n@@ -651,1 +652,1 @@\n-        public void print(PrintWriter out, int spacePadding) {\n+        public void print(ToolOutput out, int spacePadding) {\n@@ -653,1 +654,1 @@\n-            out.println(stringVal() + \";\");\n+            out.printlns(stringVal() + \";\");\n@@ -676,1 +677,1 @@\n-        public void print(PrintWriter out, int spacePadding) {\n+        public void print(ToolOutput out, int spacePadding) {\n@@ -678,1 +679,1 @@\n-            out.println(stringVal() + \";\");\n+            out.printlns(stringVal() + \";\");\n@@ -709,1 +710,1 @@\n-        public void print(PrintWriter out, int spacePadding) {\n+        public void print(ToolOutput out, int spacePadding) {\n@@ -711,1 +712,1 @@\n-            out.println(stringVal() + \";\");\n+            out.printlns(stringVal() + \";\");\n@@ -738,1 +739,1 @@\n-        public void print(PrintWriter out, int spacePadding) {\n+        public void print(ToolOutput out, int spacePadding) {\n@@ -740,1 +741,1 @@\n-            out.println(stringVal() + \";\");\n+            out.printlns(stringVal() + \";\");\n@@ -774,1 +775,1 @@\n-        public void print(PrintWriter out, int spacePadding) {\n+        public void print(ToolOutput out, int spacePadding) {\n@@ -895,1 +896,1 @@\n-        public void print(PrintWriter out, int spacePadding) {\n+        public void print(ToolOutput out, int spacePadding) {\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/ConstantPool.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n+\n@@ -62,1 +64,1 @@\n-    protected PrintWriter toolOutput;\n+    protected ToolOutput toolOutput;\n@@ -72,1 +74,1 @@\n-    public Indenter(PrintWriter toolOutput) {\n+    public Indenter(ToolOutput toolOutput) {\n@@ -85,1 +87,1 @@\n-        toolOutput.println(Indent(s));\n+        toolOutput.printlns(Indent(s));\n@@ -90,1 +92,1 @@\n-        toolOutput.println();\n+        toolOutput.printlns(\"\");\n@@ -99,1 +101,1 @@\n-        toolOutput.println(Indent(new Formatter().format(format, args).toString()));\n+        toolOutput.printlns(Indent(new Formatter().format(format, args).toString()));\n@@ -104,1 +106,1 @@\n-        toolOutput.print(Indent(new Formatter().format(format, args).toString()));\n+        toolOutput.prints(Indent(new Formatter().format(format, args).toString()));\n@@ -109,1 +111,1 @@\n-        toolOutput.print(Indent(s));\n+        toolOutput.prints(Indent(s));\n@@ -114,1 +116,1 @@\n-        toolOutput.print(getIndentString());\n+        toolOutput.prints(getIndentString());\n@@ -119,1 +121,1 @@\n-        toolOutput.print(PadRight(s, totalWidth));\n+        toolOutput.prints(PadRight(s, totalWidth));\n@@ -124,1 +126,1 @@\n-        toolOutput.print(PadLeft(s, totalWidth));\n+        toolOutput.prints(PadLeft(s, totalWidth));\n@@ -129,1 +131,1 @@\n-        toolOutput.print(IndentPadRight(str, totalWidth));\n+        toolOutput.prints(IndentPadRight(str, totalWidth));\n@@ -134,1 +136,1 @@\n-        toolOutput.print(s);\n+        toolOutput.prints(s);\n@@ -139,1 +141,1 @@\n-        toolOutput.print(new Formatter().format(format, args));\n+        toolOutput.prints(new Formatter().format(format, args).toString());\n@@ -144,1 +146,1 @@\n-        toolOutput.println(s);\n+        toolOutput.printlns(s);\n@@ -149,1 +151,1 @@\n-        toolOutput.println();\n+        toolOutput.printlns(\"\");\n@@ -155,1 +157,1 @@\n-            toolOutput.println();\n+            toolOutput.printlns(\"\");\n@@ -162,1 +164,1 @@\n-        toolOutput.println(new Formatter().format(format, args));\n+        toolOutput.printlns(new Formatter().format(format, args).toString());\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Indenter.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -35,2 +36,0 @@\n-    \/\/ Output stream\n-    private final PrintWriter toolOutput;\n@@ -40,1 +39,0 @@\n-        this.toolOutput = builder.toolOutput;\n@@ -54,3 +52,0 @@\n-    public PrintWriter getToolOutput() {\n-        return toolOutput;\n-    }\n@@ -60,2 +55,2 @@\n-        public JDecBuilder(PrintWriter toolOutput, PrintWriter errorLogger, PrintWriter outputLogger) {\n-            super(\"jdis\", toolOutput, new DecompilerLogger(errorLogger, outputLogger));\n+        public JDecBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+            super(\"jdis\", toolOutput, new DecompilerLogger(outerLog));\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/JdisEnvironment.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.asmtools.common.uEscWriter;\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -29,3 +29,0 @@\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n@@ -34,6 +31,2 @@\n-    protected JdisTool(PrintWriter toolOutput, PrintWriter errorOutput, PrintWriter loggerOutput) {\n-        super(toolOutput, errorOutput, loggerOutput);\n-    }\n-\n-    protected JdisTool(PrintWriter toolOutput) {\n-        super(toolOutput, new PrintWriter(System.err, true), new PrintWriter(System.out, true));\n+    protected JdisTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+        super(toolOutput, outerLog);\n@@ -42,2 +35,2 @@\n-    protected JdisTool(PrintStream toolOutput) {\n-        this(new PrintWriter(new uEscWriter(toolOutput)));\n+    protected JdisTool(ToolOutput toolOutput) {\n+        super(toolOutput, new ToolOutput.SingleDualOutputStreamOutput());\n@@ -47,2 +40,2 @@\n-    public JdisEnvironment getEnvironment(PrintWriter toolOutput, PrintWriter errorLogger, PrintWriter outputLogger) {\n-        JDecBuilder builder = new JDecBuilder(toolOutput, errorLogger, outputLogger);\n+    public JdisEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput outerLog) {\n+        JDecBuilder builder = new JDecBuilder(toolOutput, outerLog);\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/JdisTool.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-\/\/ import org.openjdk.asmtools.common.Tool;\n-\n@@ -28,1 +26,1 @@\n-import org.openjdk.asmtools.common.uEscWriter;\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -33,2 +31,0 @@\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n@@ -36,1 +32,0 @@\n-import java.util.ArrayList;\n@@ -51,1 +46,1 @@\n-    public Main(PrintStream toolOutput, String... argv) {\n+    public Main(ToolOutput toolOutput, String... argv) {\n@@ -56,7 +51,2 @@\n-    public Main(PrintWriter toolOutput, String... argv) {\n-        super(toolOutput);\n-        parseArgs(argv);\n-    }\n-\n-    public Main(PrintWriter toolOutput, PrintWriter errorOutput, PrintWriter loggerOutput, String... argv) {\n-        super(toolOutput, errorOutput, loggerOutput);\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger, String... argv) {\n+        super(toolOutput, logger);\n@@ -68,1 +58,1 @@\n-        Main disassembler = new Main(new PrintWriter(new uEscWriter(System.out)), argv);\n+        Main disassembler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), argv);\n@@ -81,0 +71,1 @@\n+                environment.getToolOutput().startClass(classData.className, Optional.of(\".jasm\"), environment);\n@@ -82,1 +73,2 @@\n-                environment.getToolOutput().flush();\n+                environment.getToolOutput().finishClass(classData.className);\n+                environment.getOutputs().flush();\n@@ -112,0 +104,1 @@\n+        environment.info(\"info.opt.d\");\n@@ -120,1 +113,2 @@\n-        for (String arg : argv) {\n+        for (int i = 0; i < argv.length; i++) {\n+            String arg = argv[i];\n@@ -147,0 +141,6 @@\n+                case org.openjdk.asmtools.Main.DIR_SWITCH:\n+                    setDestDir(++i, argv);\n+                    break;\n+                case org.openjdk.asmtools.Main.DUAL_LOG_SWITCH:\n+                    this.environment.setOutputs(new ToolOutput.DualOutputStreamOutput());\n+                    break;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-                    cn.toolOutput.println();\n+                    cn.toolOutput.printlns(\"\");\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/RecordData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-\n+# see also shared section in asmtools\/i18\n@@ -35,4 +35,0 @@\n-info.opt.v=\\\n-\\     -v       Print additional information\n-info.opt.t=\\\n-\\     -t       Print debug, trace information\n@@ -41,2 +37,0 @@\n-info.opt.version=\\\n-\\     -version Print the program version\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/i18n.properties","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+    private boolean warn = true;\n+\n@@ -118,0 +120,4 @@\n+    public void setWarn(boolean warn) {\n+        this.warn = warn;\n+    }\n+\n@@ -131,1 +137,3 @@\n-            System.err.println(\"WARNING: missing resource: \\\"\" + key + \" for \\\"\" + name);\n+            if (warn) {\n+                System.err.println(\"WARNING: missing resource: \\\"\" + key + \" for \\\"\" + name);\n+            }\n","filename":"src\/org\/openjdk\/asmtools\/util\/I18NResourceBundle.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"","filename":"test\/java\/org\/openjdk\/asmtools\/BruteForceHelper.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/org\/openjdk\/asmtools\/BruteForceHelper.java","status":"renamed"},{"patch":"","filename":"test\/java\/org\/openjdk\/asmtools\/ClassPathClassWork.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/org\/openjdk\/asmtools\/ClassPathClassWork.java","status":"renamed"},{"patch":"@@ -0,0 +1,52 @@\n+package org.openjdk.asmtools;\n+\n+import org.openjdk.asmtools.common.ToolOutput;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n+\n+public class ThreeStringWriters {\n+    private final ByteArrayOutputStream toolBos = new ByteArrayOutputStream();\n+    private final ByteArrayOutputStream errorBos = new ByteArrayOutputStream();\n+    private final ByteArrayOutputStream loggerBos = new ByteArrayOutputStream();\n+    private final PrintWriter toolOutput = new PrintWriter(toolBos);\n+    private final PrintWriter errorOutput = new PrintWriter(errorBos);\n+    private final PrintWriter loggerOutput = new PrintWriter(loggerBos);\n+\n+    public void flush(){\n+        toolOutput.flush();\n+        errorOutput.flush();\n+        loggerOutput.flush();\n+    }\n+\n+    public ToolOutput getToolOutputWrapper() {\n+        return new ToolOutput.PrintWriterOutput(toolOutput);\n+    }\n+    public PrintWriter getToolOutput() {\n+        return toolOutput;\n+    }\n+\n+    public PrintWriter getErrorOutput() {\n+        return errorOutput;\n+    }\n+\n+    public PrintWriter getLoggerOutput() {\n+        return loggerOutput;\n+    }\n+\n+    public String getLoggerBos() {\n+        return loggerBos.toString();\n+    }\n+\n+    public String getErrorBos() {\n+        return errorBos.toString();\n+    }\n+\n+    public String getToolBos() {\n+        return toolBos.toString();\n+    }\n+\n+    public ToolOutput.DualStreamToolOutput getLoggers() {\n+        return new ToolOutput.SingleDualOutputStreamOutput(getErrorOutput());\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/ThreeStringWriters.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+package org.openjdk.asmtools.jdec;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.openjdk.asmtools.BruteForceHelper;\n+import org.openjdk.asmtools.ThreeStringWriters;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+class JdecJcod {\n+\n+    private final boolean g;\n+    private final BruteForceHelper worker;\n+\n+    public JdecJcod(boolean g, BruteForceHelper worker) {\n+        this.g = g;\n+        this.worker = worker;\n+    }\n+\n+    public void run() throws IOException {\n+        BruteForceHelper.AsmToolsExecutable jdec = new BruteForceHelper.AsmToolsExecutable() {\n+            @Override\n+            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+                Main decoder;\n+                if (g) {\n+                    decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), \"-g\", clazz.getAbsolutePath());\n+                } else {\n+                    decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), clazz.getAbsolutePath());\n+                }\n+                return decoder.decode();\n+            }\n+\n+            @Override\n+            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+                String gs = \"\";\n+                if (g) {\n+                    gs = \"with -g \";\n+                }\n+                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() + \") failed to decode \" + gs + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+            }\n+        };\n+        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, g);\n+        worker.work(jdec, jasm);\n+    }\n+\n+    private static class JasmToolExecutable implements BruteForceHelper.AsmToolsExecutable {\n+        private final BruteForceHelper worker;\n+        private final String g;\n+\n+        public JasmToolExecutable(BruteForceHelper worker, boolean g) {\n+            this.worker = worker;\n+            if (g) {\n+                this.g = \" (from -g decode) \";\n+            } else {\n+                this.g = \"\";\n+            }\n+        }\n+\n+        @Override\n+        public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+            File savedCode = BruteForceHelper.saveDecompiledCode(worker.getDecompiledClass(clazz), \"JdecJcodWorks\");\n+            org.openjdk.asmtools.jcoder.Main coder = new org.openjdk.asmtools.jcoder.Main(outs.getLoggers(), savedCode.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath());\n+            BruteForceHelper.createMetadata(outs, clazz, savedCode, worker.getCompileDir(), worker.getClassesRoot());\n+            return coder.compile();\n+        }\n+\n+        @Override\n+        public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+            Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \" failed to encode \" + g + \" to (\" + worker.getCompileDir() + \") \" + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+        }\n+    }\n+}\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/JdecJcod.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/JdecJcodTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/org\/openjdk\/asmtools\/jdec\/JdecJcodTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,69 @@\n+package org.openjdk.asmtools.jdec;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.asmtools.ClassPathClassWork;\n+import org.openjdk.asmtools.ThreeStringWriters;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.regex.Pattern;\n+\n+class MainTest extends ClassPathClassWork {\n+\n+    @BeforeAll\n+    public static void prepareClass() {\n+        initClassData(org.openjdk.asmtools.jdec.Main.class);\n+    }\n+\n+    @Test\n+    public void main3StreamsNoSuchFileError() {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        String nonExisitngFile = \"someNonExiostingFile\";\n+        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), nonExisitngFile);\n+        int i = decoder.decode();\n+        outs.flush();\n+        Assertions.assertEquals(1, i);\n+        Assertions.assertTrue(outs.getToolBos().isEmpty());\n+        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+        Assertions.assertTrue(outs.getErrorBos().contains(\"No such file\"));\n+        Assertions.assertTrue(outs.getErrorBos().contains(nonExisitngFile));\n+    }\n+\n+    @Test\n+    public void main3StreamsFileInCorrectStream() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), classFile);\n+        int i = decoder.decode();\n+        outs.flush();\n+        Assertions.assertEquals(0, i);\n+        Assertions.assertFalse(outs.getToolBos().isEmpty());\n+        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+        Assertions.assertTrue(outs.getToolBos().contains(\"0xCAFEBABE;\"));\n+    }\n+\n+    @Test\n+    public void main3StreamsStdinCorrectStream() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        File in =  new File(classFile);\n+        InputStream is = System.in;\n+        try {\n+            System.setIn(new FileInputStream(in));\n+            Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), org.openjdk.asmtools.Main.STDIN_SWITCH);\n+            int i = decoder.decode();\n+            outs.flush();\n+            Assertions.assertEquals(0, i);\n+            Assertions.assertFalse(outs.getToolBos().isEmpty());\n+            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+            Assertions.assertTrue(outs.getToolBos().contains(\"0xCAFEBABE\"));\n+        }finally {\n+            System.setIn(is);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/MainTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+package org.openjdk.asmtools.jdis;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.openjdk.asmtools.BruteForceHelper;\n+import org.openjdk.asmtools.ThreeStringWriters;\n+import org.openjdk.asmtools.common.ToolOutput;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+class JdisJasm {\n+\n+    private final boolean g;\n+    private final BruteForceHelper worker;\n+\n+    public JdisJasm(boolean g, BruteForceHelper worker) {\n+        this.g = g;\n+        this.worker = worker;\n+    }\n+\n+    public void run() throws IOException {\n+        BruteForceHelper.AsmToolsExecutable jdis = new BruteForceHelper.AsmToolsExecutable() {\n+            @Override\n+            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+                Main disassem;\n+                if (g) {\n+                    disassem = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), \"-g\", clazz.getAbsolutePath());\n+                } else {\n+                    disassem = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), clazz.getAbsolutePath());\n+                }\n+                return disassem.disasm();\n+            }\n+\n+            @Override\n+            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+                String gs = \"\";\n+                if (g) {\n+                    gs = \"with -g \";\n+                }\n+                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() + \") failed to disassemble \" + gs + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+            }\n+        };\n+        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, g);\n+        worker.work(jdis, jasm);\n+    }\n+\n+    private static class JasmToolExecutable implements BruteForceHelper.AsmToolsExecutable {\n+        private final BruteForceHelper worker;\n+        private final String g;\n+\n+        public JasmToolExecutable(BruteForceHelper worker, boolean g) {\n+            this.worker = worker;\n+            if (g) {\n+                this.g = \" (from -g disasm) \";\n+            } else {\n+                this.g = \"\";\n+            }\n+        }\n+\n+        @Override\n+        public int run(ThreeStringWriters outs, File clazz) throws IOException {\n+            File savedAsm = BruteForceHelper.saveDecompiledCode(worker.getDecompiledClass(clazz), \"JdisJasmWorks\");\n+            org.openjdk.asmtools.jasm.Main asm = new org.openjdk.asmtools.jasm.Main(outs.getLoggers(), savedAsm.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath());\n+            BruteForceHelper.createMetadata(outs, clazz, savedAsm, worker.getCompileDir(), worker.getClassesRoot());\n+            return asm.compile();\n+        }\n+\n+        @Override\n+        public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n+            \/\/three classes now fails, they will fail again in attempt to be loaded on NPE\n+            Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \" failed to assemble \" + g + \" to (\" + worker.getCompileDir() + \") \" + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n+        }\n+    }\n+}\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/JdisJasm.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/JdisJasmTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/org\/openjdk\/asmtools\/jdis\/JdisJasmTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,153 @@\n+package org.openjdk.asmtools.jdis;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.asmtools.ClassPathClassWork;\n+import org.openjdk.asmtools.ThreeStringWriters;\n+import org.openjdk.asmtools.common.ToolOutput;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+class MainTest extends ClassPathClassWork {\n+\n+    @BeforeAll\n+    public static void prepareClass() {\n+        initClassData(org.openjdk.asmtools.jdis.Main.class);\n+    }\n+\n+    @Test\n+    public void main3StreamsNoSuchFileError() {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        String nonExisitngFile = \"someNonExiostingFile\";\n+        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), nonExisitngFile);\n+        int i = decoder.disasm();\n+        outs.flush();\n+        Assertions.assertEquals(1, i);\n+        Assertions.assertTrue(outs.getToolBos().isEmpty());\n+        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+        Assertions.assertTrue(outs.getErrorBos().contains(\"No such file\"));\n+        Assertions.assertTrue(outs.getErrorBos().contains(nonExisitngFile));\n+    }\n+\n+    @Test\n+    public void main3StreamsFileInCorrectStream() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), classFile);\n+        int i = decoder.disasm();\n+        outs.flush();\n+        Assertions.assertEquals(0, i);\n+        Assertions.assertFalse(outs.getToolBos().isEmpty());\n+        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+        Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n+        Assertions.assertEquals(1, packageName.matcher(outs.getToolBos()).results().count());\n+        Assertions.assertEquals(1, className.matcher(outs.getToolBos()).results().count());\n+    }\n+\n+    @Test\n+    public void main3StreamsStdinCorrectStream() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        File in = new File(classFile);\n+        InputStream is = System.in;\n+        try {\n+            System.setIn(new FileInputStream(in));\n+            Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), org.openjdk.asmtools.Main.STDIN_SWITCH);\n+            int i = decoder.disasm();\n+            outs.flush();\n+            Assertions.assertEquals(0, i);\n+            \/\/pise to do stder:-\/\n+            Assertions.assertFalse(outs.getToolBos().isEmpty());\n+            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+            Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n+            Assertions.assertEquals(1, packageName.matcher(outs.getToolBos()).results().count());\n+            Assertions.assertEquals(1, className.matcher(outs.getToolBos()).results().count());\n+        } finally {\n+            System.setIn(is);\n+        }\n+    }\n+\n+    @Test\n+    public void superIsNotOmited() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        String testClazz = clazz.getName().replace('.', '\/');\n+        String name = testClazz.replaceAll(\".*\/\", \"\");\n+        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), classFile);\n+        int i = decoder.disasm();\n+        outs.flush();\n+        Assertions.assertEquals(0, i);\n+        Assertions.assertFalse(outs.getToolBos().isEmpty());\n+        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+        String clazz = outs.getToolBos();\n+        for (String line : clazz.split(\"\\n\")) {\n+            if (line.contains(\"class \" + name + \" extends JdisTool\")) {\n+                Assertions.assertTrue(line.contains(\"super\"), \"class declaration had super omitted - \" + line);\n+                checkSupperIsOmitedIfNotPresent(clazz, testClazz);\n+                return;\n+            }\n+        }\n+        Assertions.assertTrue(false, \"class Main was not found in disassembled output\");\n+    }\n+\n+    private void checkSupperIsOmitedIfNotPresent(String clazzWithSuper, String fqn) throws IOException {\n+        String name = fqn.replaceAll(\".*\/\", \"\");\n+        String classWithoutSuper = clazzWithSuper.replaceFirst(\" super \", \" \");\n+        File sourceWithoutSuper = File.createTempFile(\"jasmTest\", name + \".java\");\n+        sourceWithoutSuper.deleteOnExit();\n+        Files.write(sourceWithoutSuper.toPath(), classWithoutSuper.getBytes(StandardCharsets.UTF_8));\n+        File dir = File.createTempFile(\"asmtools-jasmtest\", \"tmp.dir\");\n+        dir.delete();\n+        dir.mkdir();\n+        dir.deleteOnExit();\n+        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(new ToolOutput.EscapedPrintStreamOutput(System.out), new ToolOutput.SingleDualOutputStreamOutput(), sourceWithoutSuper.getAbsolutePath(), \"-d\", dir.getAbsolutePath());\n+        int ii = jasmTool.compile();\n+        Assertions.assertEquals(0, ii);\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), dir.getAbsolutePath() + \"\/\" + fqn + \".class\");\n+        int i = decoder.disasm();\n+        outs.flush();\n+        Assertions.assertEquals(0, i);\n+        Assertions.assertFalse(outs.getToolBos().isEmpty());\n+        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+        String clazz = outs.getToolBos();\n+        for (String line : clazz.split(\"\\n\")) {\n+            if (line.contains(\"class \" + name + \" extends JdisTool\")) {\n+                Assertions.assertFalse(line.contains(\"super\"), \"class declaration had NOT super omitted - \" + line);\n+                return;\n+            }\n+        }\n+        Assertions.assertTrue(false, \"class Main was not found in disassembled output\");\n+    }\n+\n+    @Test\n+    public void mainBothFileAndStreamIsRead() throws IOException {\n+        ThreeStringWriters outs = new ThreeStringWriters();\n+        File in = new File(classFile);\n+        InputStream is = System.in;\n+        try {\n+            System.setIn(new FileInputStream(in));\n+            Main decoder = new Main(outs.getToolOutputWrapper(), outs.getLoggers(), classFile, org.openjdk.asmtools.Main.STDIN_SWITCH, classFile, org.openjdk.asmtools.Main.STDIN_SWITCH);\n+            int i = decoder.disasm();\n+            outs.flush();\n+            Assertions.assertEquals(0, i);\n+            Assertions.assertFalse(outs.getToolBos().isEmpty());\n+            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n+            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n+            Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n+            \/\/3, both files, but stream only once, despite two are sets\n+            Assertions.assertEquals(3, packageName.matcher(outs.getToolBos()).results().count());\n+            Assertions.assertEquals(3, className.matcher(outs.getToolBos()).results().count());\n+        } finally {\n+            System.setIn(is);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/MainTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-package org.openjdk.asmtools;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintWriter;\n-\n-public class ThreeStringWriters {\n-    private final ByteArrayOutputStream toolBos = new ByteArrayOutputStream();\n-    private final ByteArrayOutputStream errorBos = new ByteArrayOutputStream();\n-    private final ByteArrayOutputStream loggerBos = new ByteArrayOutputStream();\n-    private final PrintWriter toolOutput = new PrintWriter(toolBos);\n-    private final PrintWriter errorOutput = new PrintWriter(errorBos);\n-    private final PrintWriter loggerOutput = new PrintWriter(loggerBos);\n-\n-    public void flush(){\n-        toolOutput.flush();\n-        errorOutput.flush();\n-        loggerOutput.flush();\n-    }\n-\n-    public PrintWriter getToolOutput() {\n-        return toolOutput;\n-    }\n-\n-    public PrintWriter getErrorOutput() {\n-        return errorOutput;\n-    }\n-\n-    public PrintWriter getLoggerOutput() {\n-        return loggerOutput;\n-    }\n-\n-    public String getLoggerBos() {\n-        return loggerBos.toString();\n-    }\n-\n-    public String getErrorBos() {\n-        return errorBos.toString();\n-    }\n-\n-    public String getToolBos() {\n-        return toolBos.toString();\n-    }\n-}\n","filename":"test\/org\/openjdk\/asmtools\/ThreeStringWriters.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-package org.openjdk.asmtools.jdec;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.openjdk.asmtools.BruteForceHelper;\n-import org.openjdk.asmtools.ThreeStringWriters;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Map;\n-\n-class JdecJcod {\n-\n-    private final boolean g;\n-    private final BruteForceHelper worker;\n-\n-    public JdecJcod(boolean g, BruteForceHelper worker) {\n-        this.g = g;\n-        this.worker = worker;\n-    }\n-\n-    public void run() throws IOException {\n-        BruteForceHelper.AsmToolsExecutable jdec = new BruteForceHelper.AsmToolsExecutable() {\n-            @Override\n-            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n-                Main decoder;\n-                if (g) {\n-                    decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), \"-g\", clazz.getAbsolutePath());\n-                } else {\n-                    decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), clazz.getAbsolutePath());\n-                }\n-                return decoder.decode();\n-            }\n-\n-            @Override\n-            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n-                String gs = \"\";\n-                if (g) {\n-                    gs = \"with -g \";\n-                }\n-                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() + \") failed to decode \" + gs + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n-            }\n-        };\n-        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, g);\n-        worker.work(jdec, jasm);\n-    }\n-\n-    private static class JasmToolExecutable implements BruteForceHelper.AsmToolsExecutable {\n-        private final BruteForceHelper worker;\n-        private final String g;\n-\n-        public JasmToolExecutable(BruteForceHelper worker, boolean g) {\n-            this.worker = worker;\n-            if (g) {\n-                this.g = \" (from -g decode) \";\n-            } else {\n-                this.g = \"\";\n-            }\n-        }\n-\n-        @Override\n-        public int run(ThreeStringWriters outs, File clazz) throws IOException {\n-            File savedCode = BruteForceHelper.saveDecompiledCode(worker.getDecompiledClass(clazz), \"JdecJcodWorks\");\n-            org.openjdk.asmtools.jcoder.Main coder = new org.openjdk.asmtools.jcoder.Main(outs.getErrorOutput(), outs.getLoggerOutput(), savedCode.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath());\n-            BruteForceHelper.createMetadata(outs, clazz, savedCode, worker.getCompileDir(), worker.getClassesRoot());\n-            return coder.compile();\n-        }\n-\n-        @Override\n-        public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n-            Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \" failed to encode \" + g + \" to (\" + worker.getCompileDir() + \") \" + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n-        }\n-    }\n-}\n-\n","filename":"test\/org\/openjdk\/asmtools\/jdec\/JdecJcod.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-package org.openjdk.asmtools.jdec;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.asmtools.ClassPathClassWork;\n-import org.openjdk.asmtools.ThreeStringWriters;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.regex.Pattern;\n-\n-class MainTest extends ClassPathClassWork {\n-\n-    @BeforeAll\n-    public static void prepareClass() {\n-        initClassData(org.openjdk.asmtools.jdec.Main.class);\n-    }\n-\n-    @Test\n-    public void main3StreamsNoSuchFileError() {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        String nonExisitngFile = \"someNonExiostingFile\";\n-        Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), nonExisitngFile);\n-        int i = decoder.decode();\n-        outs.flush();\n-        Assertions.assertEquals(1, i);\n-        Assertions.assertTrue(outs.getToolBos().isEmpty());\n-        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-        Assertions.assertTrue(outs.getErrorBos().contains(\"No such file\"));\n-        Assertions.assertTrue(outs.getErrorBos().contains(nonExisitngFile));\n-    }\n-\n-    @Test\n-    public void main3StreamsFileInCorrectStream() throws IOException {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), classFile);\n-        int i = decoder.decode();\n-        outs.flush();\n-        Assertions.assertEquals(0, i);\n-        Assertions.assertFalse(outs.getToolBos().isEmpty());\n-        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n-        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-        Assertions.assertTrue(outs.getToolBos().contains(\"0xCAFEBABE;\"));\n-    }\n-\n-    @Test\n-    public void main3StreamsStdinCorrectStream() throws IOException {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        File in =  new File(classFile);\n-        InputStream is = System.in;\n-        try {\n-            System.setIn(new FileInputStream(in));\n-            Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), org.openjdk.asmtools.Main.STDIN_SWITCH);\n-            int i = decoder.decode();\n-            outs.flush();\n-            Assertions.assertEquals(0, i);\n-            Assertions.assertFalse(outs.getToolBos().isEmpty());\n-            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n-            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-            Assertions.assertTrue(outs.getToolBos().contains(\"0xCAFEBABE\"));\n-        }finally {\n-            System.setIn(is);\n-        }\n-    }\n-\n-}\n\\ No newline at end of file\n","filename":"test\/org\/openjdk\/asmtools\/jdec\/MainTest.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-package org.openjdk.asmtools.jdis;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.openjdk.asmtools.BruteForceHelper;\n-import org.openjdk.asmtools.ThreeStringWriters;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Map;\n-\n-class JdisJasm {\n-\n-    private final boolean g;\n-    private final BruteForceHelper worker;\n-\n-    public JdisJasm(boolean g, BruteForceHelper worker) {\n-        this.g = g;\n-        this.worker = worker;\n-    }\n-\n-    public void run() throws IOException {\n-        BruteForceHelper.AsmToolsExecutable jdis = new BruteForceHelper.AsmToolsExecutable() {\n-            @Override\n-            public int run(ThreeStringWriters outs, File clazz) throws IOException {\n-                Main disassem;\n-                if (g) {\n-                    disassem = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), \"-g\", clazz.getAbsolutePath());\n-                } else {\n-                    disassem = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), clazz.getAbsolutePath());\n-                }\n-                return disassem.disasm();\n-            }\n-\n-            @Override\n-            public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n-                String gs = \"\";\n-                if (g) {\n-                    gs = \"with -g \";\n-                }\n-                Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \"(\" + worker.getClassesRoot() + \") failed to disassemble \" + gs + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n-            }\n-        };\n-        BruteForceHelper.AsmToolsExecutable jasm = new JasmToolExecutable(worker, g);\n-        worker.work(jdis, jasm);\n-    }\n-\n-    private static class JasmToolExecutable implements BruteForceHelper.AsmToolsExecutable {\n-        private final BruteForceHelper worker;\n-        private final String g;\n-\n-        public JasmToolExecutable(BruteForceHelper worker, boolean g) {\n-            this.worker = worker;\n-            if (g) {\n-                this.g = \" (from -g disasm) \";\n-            } else {\n-                this.g = \"\";\n-            }\n-        }\n-\n-        @Override\n-        public int run(ThreeStringWriters outs, File clazz) throws IOException {\n-            File savedAsm = BruteForceHelper.saveDecompiledCode(worker.getDecompiledClass(clazz), \"JdisJasmWorks\");\n-            org.openjdk.asmtools.jasm.Main asm = new org.openjdk.asmtools.jasm.Main(outs.getErrorOutput(), outs.getLoggerOutput(), savedAsm.getAbsolutePath(), \"-d\", worker.getCompileDir().getAbsolutePath());\n-            BruteForceHelper.createMetadata(outs, clazz, savedAsm, worker.getCompileDir(), worker.getClassesRoot());\n-            return asm.compile();\n-        }\n-\n-        @Override\n-        public void ensure(List<File> all, Map<File, ThreeStringWriters> failures) {\n-            \/\/three classes now fails, they will fail again in attempt to be loaded on NPE\n-            Assertions.assertEquals(0, failures.size(), \"from \" + all.size() + \" failed to assemble \" + g + \" to (\" + worker.getCompileDir() + \") \" + failures.size() + \": \" + BruteForceHelper.keySetToString(failures, worker.getClassesRoot()));\n-        }\n-    }\n-}\n-\n","filename":"test\/org\/openjdk\/asmtools\/jdis\/JdisJasm.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,150 +0,0 @@\n-package org.openjdk.asmtools.jdis;\n-\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.asmtools.ClassPathClassWork;\n-import org.openjdk.asmtools.ThreeStringWriters;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-\n-class MainTest extends ClassPathClassWork {\n-\n-    @BeforeAll\n-    public static void prepareClass() {\n-        initClassData(org.openjdk.asmtools.jdis.Main.class);\n-    }\n-\n-    @Test\n-    public void main3StreamsNoSuchFileError() {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        String nonExisitngFile = \"someNonExiostingFile\";\n-        Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), nonExisitngFile);\n-        int i = decoder.disasm();\n-        outs.flush();\n-        Assertions.assertEquals(1, i);\n-        Assertions.assertTrue(outs.getToolBos().isEmpty());\n-        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-        Assertions.assertTrue(outs.getErrorBos().contains(\"No such file\"));\n-        Assertions.assertTrue(outs.getErrorBos().contains(nonExisitngFile));\n-    }\n-\n-    @Test\n-    public void main3StreamsFileInCorrectStream() throws IOException {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), classFile);\n-        int i = decoder.disasm();\n-        outs.flush();\n-        Assertions.assertEquals(0, i);\n-        Assertions.assertFalse(outs.getToolBos().isEmpty());\n-        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n-        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-        Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n-        Assertions.assertEquals(1, packageName.matcher(outs.getToolBos()).results().count());\n-        Assertions.assertEquals(1, className.matcher(outs.getToolBos()).results().count());\n-    }\n-\n-    @Test\n-    public void main3StreamsStdinCorrectStream() throws IOException {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        File in = new File(classFile);\n-        InputStream is = System.in;\n-        try {\n-            System.setIn(new FileInputStream(in));\n-            Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), org.openjdk.asmtools.Main.STDIN_SWITCH);\n-            int i = decoder.disasm();\n-            outs.flush();\n-            Assertions.assertEquals(0, i);\n-            Assertions.assertFalse(outs.getToolBos().isEmpty());\n-            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n-            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-            Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n-            Assertions.assertEquals(1, packageName.matcher(outs.getToolBos()).results().count());\n-            Assertions.assertEquals(1, className.matcher(outs.getToolBos()).results().count());\n-        } finally {\n-            System.setIn(is);\n-        }\n-    }\n-\n-    @Test\n-    public void superIsNotOmited() throws IOException {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        String testClazz = clazz.getName().replace('.', '\/');\n-        String name = testClazz.replaceAll(\".*\/\", \"\");\n-        Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), classFile);\n-        int i = decoder.disasm();\n-        outs.flush();\n-        Assertions.assertEquals(0, i);\n-        Assertions.assertFalse(outs.getToolBos().isEmpty());\n-        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n-        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-        String clazz = outs.getToolBos();\n-        for (String line : clazz.split(\"\\n\")) {\n-            if (line.contains(\"class \" + name + \" extends JdisTool\")) {\n-                Assertions.assertTrue(line.contains(\"super\"), \"class declaration had super omitted - \" + line);\n-                checkSupperIsOmitedIfNotPresent(clazz, testClazz);\n-                return;\n-            }\n-        }\n-        Assertions.assertTrue(false, \"class Main was not found in disassembled output\");\n-    }\n-\n-    private void checkSupperIsOmitedIfNotPresent(String clazzWithSuper, String fqn) throws IOException {\n-        String name = fqn.replaceAll(\".*\/\", \"\");\n-        String classWithoutSuper = clazzWithSuper.replaceFirst(\" super \", \" \");\n-        File sourceWithoutSuper = File.createTempFile(\"jasmTest\", name + \".java\");\n-        sourceWithoutSuper.deleteOnExit();\n-        Files.write(sourceWithoutSuper.toPath(), classWithoutSuper.getBytes(StandardCharsets.UTF_8));\n-        File dir = File.createTempFile(\"asmtools-jasmtest\", \"tmp.dir\");\n-        dir.delete();\n-        dir.mkdir();\n-        dir.deleteOnExit();\n-        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(sourceWithoutSuper.getAbsolutePath(), \"-d\", dir.getAbsolutePath());\n-        jasmTool.compile();\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), dir.getAbsolutePath() + \"\/\" + fqn + \".class\");\n-        int i = decoder.disasm();\n-        outs.flush();\n-        Assertions.assertEquals(0, i);\n-        Assertions.assertFalse(outs.getToolBos().isEmpty());\n-        Assertions.assertTrue(outs.getErrorBos().isEmpty());\n-        Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-        String clazz = outs.getToolBos();\n-        for (String line : clazz.split(\"\\n\")) {\n-            if (line.contains(\"class \" + name + \" extends JdisTool\")) {\n-                Assertions.assertFalse(line.contains(\"super\"), \"class declaration had NOT super omitted - \" + line);\n-                return;\n-            }\n-        }\n-        Assertions.assertTrue(false, \"class Main was not found in disassembled output\");\n-    }\n-\n-    @Test\n-    public void mainBothFileAndStreamIsRead() throws IOException {\n-        ThreeStringWriters outs = new ThreeStringWriters();\n-        File in = new File(classFile);\n-        InputStream is = System.in;\n-        try {\n-            System.setIn(new FileInputStream(in));\n-            Main decoder = new Main(outs.getToolOutput(), outs.getErrorOutput(), outs.getLoggerOutput(), classFile, org.openjdk.asmtools.Main.STDIN_SWITCH, classFile, org.openjdk.asmtools.Main.STDIN_SWITCH);\n-            int i = decoder.disasm();\n-            outs.flush();\n-            Assertions.assertEquals(0, i);\n-            Assertions.assertFalse(outs.getToolBos().isEmpty());\n-            Assertions.assertTrue(outs.getErrorBos().isEmpty());\n-            Assertions.assertTrue(outs.getLoggerBos().isEmpty());\n-            Assertions.assertTrue(outs.getToolBos().contains(\"invoke\"));\n-            \/\/3, both files, but stream only once, despite two are sets\n-            Assertions.assertEquals(3, packageName.matcher(outs.getToolBos()).results().count());\n-            Assertions.assertEquals(3, className.matcher(outs.getToolBos()).results().count());\n-        } finally {\n-            System.setIn(is);\n-        }\n-    }\n-\n-}\n\\ No newline at end of file\n","filename":"test\/org\/openjdk\/asmtools\/jdis\/MainTest.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -0,0 +1,1 @@\n+Place for test-only resources; eg binary blobs or  jasm\/jdis sources\n","filename":"test\/resources\/placeholder","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"}]}