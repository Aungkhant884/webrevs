{"files":[{"patch":"@@ -37,1 +37,1 @@\n-        println(format, args);\n+        getOutputs().printlne(( args == null || args.length == 0) ? format : format(format, args));;\n@@ -41,1 +41,1 @@\n-        getOutputs().prints(( args == null || args.length == 0) ? format : format(format, args));\n+        getOutputs().printe(( args == null || args.length == 0) ? format : format(format, args));\n","filename":"src\/org\/openjdk\/asmtools\/common\/ILogger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -14,0 +15,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -15,0 +17,1 @@\n+import java.util.ArrayList;\n@@ -177,1 +180,5 @@\n-            \/\/todo flush to file\n+            try {\n+                fos.flush();\n+            }catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n@@ -351,0 +358,213 @@\n+\n+    public static class ByteOutput extends NamedToolOutput {\n+        private final ArrayList<NamedBinary> outputs = new ArrayList<>();\n+        private ByteArrayOutputStream currentClass;\n+\n+        public ArrayList<NamedBinary> getOutputs() {\n+            return outputs;\n+        }\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            return new DataOutputStream(currentClass);\n+        }\n+\n+\n+        @Override\n+        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+            super.startClass(fqn, suffix, logger);\n+            currentClass = new ByteArrayOutputStream(1024);\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            if (!getCurrentClassName().equals(fqn)) {\n+                throw new RuntimeException(\"Ended different class - \" + fqn + \" - then started - \" + super.fqn);\n+            }\n+            outputs.add(new NamedBinary(fqn, currentClass.toByteArray()));\n+            super.fqn = null;\n+            currentClass = null;\n+\n+        }\n+\n+        @Override\n+        public void printlns(String line) {\n+            try {\n+                currentClass.write((line + \"\\n\").getBytes(StandardCharsets.UTF_8));\n+            } catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        }\n+\n+        @Override\n+        public void prints(String line) {\n+            try {\n+                currentClass.write(line.getBytes(StandardCharsets.UTF_8));\n+            } catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+        }\n+\n+        @Override\n+        public void prints(char line) {\n+            currentClass.write(line);\n+        }\n+\n+        @Override\n+        public void flush() {\n+\n+        }\n+\n+        public class NamedBinary {\n+            private final String fqn;\n+            private final byte[] body;\n+\n+            public NamedBinary(String fqn, byte[] body) {\n+                this.fqn = fqn;\n+                this.body = body;\n+            }\n+\n+            public String getFqn() {\n+                return fqn;\n+            }\n+\n+            public byte[] getBody() {\n+                return body;\n+            }\n+        }\n+    }\n+\n+    public static class TextOutput extends NamedToolOutput {\n+        private final ArrayList<NamedSource> outputs = new ArrayList<>();\n+        private StringBuilder currentClass;\n+\n+        public ArrayList<NamedSource> getOutputs() {\n+            return outputs;\n+        }\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n+            super.startClass(fqn, suffix, logger);\n+            currentClass = new StringBuilder();\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            if (!getCurrentClassName().equals(fqn)) {\n+                throw new RuntimeException(\"Ended different class - \" + fqn + \" - then started - \" + super.fqn);\n+            }\n+            outputs.add(new NamedSource(fqn, currentClass.toString()));\n+            super.fqn = null;\n+            currentClass = null;\n+\n+        }\n+\n+        @Override\n+        public void printlns(String line) {\n+            currentClass.append(line).append(\"\\n\");\n+        }\n+\n+        @Override\n+        public void prints(String line) {\n+            currentClass.append(line);\n+        }\n+\n+        @Override\n+        public void prints(char line) {\n+            currentClass.append(line);\n+        }\n+\n+        @Override\n+        public void flush() {\n+\n+        }\n+\n+        public class NamedSource {\n+            private final String fqn;\n+            private final String body;\n+\n+            public NamedSource(String fqn, String body) {\n+                this.fqn = fqn;\n+                this.body = body;\n+            }\n+\n+            public String getFqn() {\n+                return fqn;\n+            }\n+\n+            public String getBody() {\n+                return body;\n+            }\n+        }\n+    }\n+\n+    public static class StringLog extends NamedDualStreamToolOutput {\n+\n+        private final StringBuilder log = new StringBuilder();\n+\n+        @Override\n+        public String toString() {\n+            return log.toString();\n+        }\n+\n+        @Override\n+        public void printlns(String line) {\n+            log.append(line).append(\"\\n\");\n+        }\n+\n+        @Override\n+        public void prints(String line) {\n+            log.append(line);\n+        }\n+\n+        @Override\n+        public void prints(char line) {\n+            log.append(line);\n+        }\n+\n+        @Override\n+        public void flush() {\n+\n+        }\n+\n+        @Override\n+        public void printlne(String line) {\n+            log.append(line).append(\"\\n\");\n+        }\n+\n+        @Override\n+        public void printe(String line) {\n+            log.append(line);\n+        }\n+\n+        @Override\n+        public void printe(char line) {\n+            log.append(line);\n+        }\n+\n+        @Override\n+        public void stacktrace(Throwable ex) {\n+            log.append(exToString(ex));\n+        }\n+\n+        @Override\n+        public ToolOutput getSToolObject() {\n+            return this;\n+        }\n+\n+        @Override\n+        public ToolOutput getEToolObject() {\n+            return this;\n+        }\n+    }\n+\n+    public static String exToString(Throwable e) {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        e.printStackTrace(new PrintStream(out, true, StandardCharsets.UTF_8));\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolOutput.java","additions":221,"deletions":1,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -73,0 +73,16 @@\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n+        super(toolOutput, log);\n+        if (toolInput!=null){\n+            fileList.add(toolInput);\n+        }\n+        parseArgs(argv);\n+    }\n+\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+        super(toolOutput, log);\n+        for(ToolInput toolInput: toolInputs){\n+            fileList.add(toolInput);\n+        }\n+        parseArgs(new String[0]);\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Main.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -56,0 +56,4 @@\n+        this(toolOutput, log, null, argv);\n+    }\n+\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n@@ -57,0 +61,3 @@\n+        if (toolInput!=null){\n+            fileList.add(toolInput);\n+        }\n@@ -60,0 +67,8 @@\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+        super(toolOutput, log);\n+        for(ToolInput toolInput: toolInputs){\n+            fileList.add(toolInput);\n+        }\n+        parseArgs(new String[0]);\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -42,0 +42,7 @@\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+        super(toolOutput, log);\n+        for(ToolInput toolInput: toolInputs){\n+            fileList.add(toolInput);\n+        }\n+        parseArgs(new String[0]);\n+    }\n@@ -43,1 +50,1 @@\n-    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n@@ -45,0 +52,3 @@\n+        if (toolInput != null) {\n+            fileList.add(toolInput);\n+        }\n@@ -48,0 +58,4 @@\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+        this(toolOutput, log, null, argv);\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,0 +46,16 @@\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput... toolInputs) {\n+        super(toolOutput, log);\n+        for(ToolInput toolInput: toolInputs){\n+            fileList.add(toolInput);\n+        }\n+        parseArgs(new String[0]);\n+    }\n+\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, ToolInput toolInput, String... argv) {\n+        super(toolOutput, log);\n+        if (toolInput != null) {\n+            fileList.add(toolInput);\n+        }\n+        parseArgs(argv);\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -15,1 +15,9 @@\n-    public static void initClassData(Class testsClass) {\n+    public static void initMainClassData(Class testsClass) {\n+        initGenericClassData(testsClass,\"classes\");\n+    }\n+\n+    public static void initTestClassData(Class testsClass) {\n+        initGenericClassData(testsClass,\"test-classes\");\n+    }\n+\n+    private static void initGenericClassData(Class testsClass, String subdir) {\n@@ -17,1 +25,1 @@\n-        classFile = \".\/target\/classes\/\" + clazz.getName().replace('.', '\/') + \".class\";\n+        classFile = \".\/target\/\"+subdir+\"\/\" + clazz.getName().replace('.', '\/') + \".class\";\n@@ -23,0 +31,2 @@\n+\n+\n","filename":"test\/java\/org\/openjdk\/asmtools\/ClassPathClassWork.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+package org.openjdk.asmtools;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.asmtools.common.ToolInput;\n+import org.openjdk.asmtools.common.ToolOutput;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+public class InputOutputTests extends ClassPathClassWork{\n+\n+    public static class LogAndReturn {\n+        final ToolOutput.StringLog log;\n+        final int result;\n+\n+        public LogAndReturn(ToolOutput.StringLog log, int result) {\n+            this.log = log;\n+            this.result = result;\n+        }\n+    }\n+    public static class LogAndTextResults extends LogAndReturn {\n+        final ToolOutput.TextOutput output;\n+\n+        public LogAndTextResults(ToolOutput.TextOutput output, ToolOutput.StringLog log, int result) {\n+            super(log, result);\n+            this.output = output;\n+        }\n+    }\n+    public static class LogAndBinResults extends  LogAndReturn{\n+        final ToolOutput.ByteOutput output;\n+\n+        public LogAndBinResults(ToolOutput.ByteOutput output, ToolOutput.StringLog log, int result) {\n+            super(log, result);\n+            this.output = output;\n+        }\n+    }\n+\n+    public LogAndTextResults jdec(byte[]... clazz) {\n+        ToolInput[] originalFiles = new ToolInput[clazz.length];\n+        for (int i = 0; i < clazz.length; i++) {\n+                originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+        }\n+        ToolOutput.TextOutput decodedFiles = new ToolOutput.TextOutput();\n+        ToolOutput.StringLog decodeLog = new ToolOutput.StringLog();\n+        org.openjdk.asmtools.jdec.Main jdec = new org.openjdk.asmtools.jdec.Main(decodedFiles, decodeLog, originalFiles);\n+        jdec.setVerboseFlag(true);\n+        jdec.setTraceFlag(true);\n+        int r = jdec.decode();\n+        return new LogAndTextResults(decodedFiles, decodeLog, r);\n+    }\n+    public LogAndBinResults jcod(String... clazz) {\n+        ToolInput[] originalFiles = new ToolInput[clazz.length];\n+        for (int i = 0; i < clazz.length; i++) {\n+            originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+        }\n+        ToolOutput.ByteOutput encodedFiles = new ToolOutput.ByteOutput();\n+        ToolOutput.StringLog encodeLog = new ToolOutput.StringLog();\n+        org.openjdk.asmtools.jcoder.Main jcod = new org.openjdk.asmtools.jcoder.Main(encodedFiles, encodeLog, originalFiles);\n+        jcod.setVerboseFlag(true);\n+        jcod.setTraceFlag(true);\n+        int r = jcod.compile();\n+        return new LogAndBinResults(encodedFiles, encodeLog, r);\n+    }\n+\n+    public LogAndTextResults jdis(byte[]... clazz) {\n+        ToolInput[] originalFiles = new ToolInput[clazz.length];\n+        for (int i = 0; i < clazz.length; i++) {\n+            originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+        }\n+        ToolOutput.TextOutput decodedFiles = new ToolOutput.TextOutput();\n+        ToolOutput.StringLog decodeLog = new ToolOutput.StringLog();\n+        org.openjdk.asmtools.jdis.Main jdis = new org.openjdk.asmtools.jdis.Main(decodedFiles, decodeLog, originalFiles);\n+        jdis.setVerboseFlag(true);\n+        jdis.setTraceFlag(true);\n+        int r = jdis.disasm();\n+        return new LogAndTextResults(decodedFiles, decodeLog, r);\n+    }\n+    public LogAndBinResults jasm(String... clazz) {\n+        ToolInput[] originalFiles = new ToolInput[clazz.length];\n+        for (int i = 0; i < clazz.length; i++) {\n+            originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+        }\n+        ToolOutput.ByteOutput encodedFiles = new ToolOutput.ByteOutput();\n+        ToolOutput.StringLog encodeLog = new ToolOutput.StringLog();\n+        org.openjdk.asmtools.jasm.Main jasm = new org.openjdk.asmtools.jasm.Main(encodedFiles, encodeLog, originalFiles);\n+        jasm.setVerboseFlag(true);\n+        jasm.setTraceFlag(true);\n+        int r = jasm.compile();\n+        return new LogAndBinResults(encodedFiles, encodeLog, r);\n+    }\n+\n+    @Test\n+    public void inMemoryDecCodDecCod() throws IOException {\n+        initTestClassData(TestedHelloWorld.class);\n+        byte[] data = Files.readAllBytes(new File(classFile).toPath());\n+        LogAndTextResults o1 = jdec(data);\n+        LogAndBinResults o2 = jcod(o1.output.getOutputs().get(0).getBody());\n+        LogAndTextResults o3 = jdec(o2.output.getOutputs().get(0).getBody());\n+        LogAndBinResults o4 = jcod(o3.output.getOutputs().get(0).getBody());\n+        Assertions.assertArrayEquals(new int[]{0,0,0,0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n+    }\n+\n+    @Test\n+    public void inMemoryDisasmAsmDisasmAsm() throws IOException {\n+        initTestClassData(TestedHelloWorld.class);\n+        byte[] data = Files.readAllBytes(new File(classFile).toPath());\n+        LogAndTextResults o1 = jdis(data);\n+        LogAndBinResults o2 = jasm(o1.output.getOutputs().get(0).getBody());\n+        LogAndTextResults o3 = jdis(o2.output.getOutputs().get(0).getBody());\n+        LogAndBinResults o4 = jasm(o3.output.getOutputs().get(0).getBody());\n+        Assertions.assertArrayEquals(new int[]{0,0,0,0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/InputOutputTests.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+package org.openjdk.asmtools;\n+\n+public class TestedHelloWorld {\n+\n+    private static final int SOME_PRIMTIVE_CONSTANT=666;\n+    private static int somePrimtiveField = 999;\n+\n+    private static final TestedHelloWorld SOME_OBJECT_CONSTANT=new TestedHelloWorld();\n+    private static TestedHelloWorld someObjectField = new TestedHelloWorld();\n+\n+    private String privateMethod() {\n+        return \"hello1\";\n+    }\n+\n+    protected String protectedMethod() {\n+        return \"hello2\";\n+    }\n+\n+    public String publicMethod() {\n+        return \"hello3\";\n+    }\n+\n+    private static String privateUtilityMethod() {\n+        return \"hello4\";\n+    }\n+\n+    public static String publicUtilityMethod() {\n+        return \"hello5\";\n+    }\n+\n+}\n","filename":"test\/java\/org\/openjdk\/asmtools\/TestedHelloWorld.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -13,1 +13,0 @@\n-import java.util.regex.Pattern;\n@@ -19,1 +18,1 @@\n-        initClassData(org.openjdk.asmtools.jdec.Main.class);\n+        initMainClassData(org.openjdk.asmtools.jdec.Main.class);\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdec\/MainTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n-import org.openjdk.asmtools.common.ToolOutput;\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/JdisJasm.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-        initClassData(org.openjdk.asmtools.jdis.Main.class);\n+        initMainClassData(org.openjdk.asmtools.jdis.Main.class);\n","filename":"test\/java\/org\/openjdk\/asmtools\/jdis\/MainTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}