{"files":[{"patch":"@@ -38,0 +38,1 @@\n+    public static final String DIR_SWITCH=\"-d\";\n","filename":"src\/org\/openjdk\/asmtools\/Main.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -129,0 +129,5 @@\n+    @Override\n+    public void setToolOutput(ToolOutput toolOutput) {\n+        this.toolOutput = toolOutput;\n+    }\n+\n@@ -156,5 +161,0 @@\n-        public  Builder(String programName, T toolLogger) {\n-            this.programName = programName;\n-            this.toolLogger = toolLogger;\n-        }\n-\n","filename":"src\/org\/openjdk\/asmtools\/common\/Environment.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    default void setToolOutput(ToolOutput toolOutput) {\n+        throw new NotImplementedException(\"implement wisely!\");\n+    }\n+\n","filename":"src\/org\/openjdk\/asmtools\/common\/ILogger.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-    protected Tool(ToolOutput.DualStreamToolOutput logger) {\n-        this.environment = getEnvironment(logger);\n-    }\n-\n@@ -63,4 +59,0 @@\n-    public T getEnvironment(ToolOutput.DualStreamToolOutput log) {\n-        throw new NotImplementedException();\n-    }\n-\n@@ -73,1 +65,1 @@\n-    protected File setDestDir(int index, String... argv) {\n+    protected void setDestDir(int index, String... argv) {\n@@ -85,1 +77,1 @@\n-        return destDir;\n+        environment.setToolOutput(new ToolOutput.DirOutput(destDir));\n","filename":"src\/org\/openjdk\/asmtools\/common\/Tool.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3,0 +3,6 @@\n+import java.io.BufferedOutputStream;\n+import java.io.BufferedWriter;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n@@ -5,0 +11,1 @@\n+import java.io.OutputStreamWriter;\n@@ -8,0 +15,3 @@\n+import java.nio.file.FileSystems;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n@@ -12,0 +22,2 @@\n+    DataOutputStream getDataOutputStream() throws FileNotFoundException;\n+\n@@ -14,1 +26,1 @@\n-    void startClass(String fqn) throws IOException;\n+    void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException;\n@@ -37,0 +49,5 @@\n+\n+        @Override\n+        default DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            throw new NotImplementedException(\"Not going to happen\");\n+        }\n@@ -45,0 +62,2 @@\n+        private Optional<String> suffix;\n+        private Environment environment;\n@@ -52,1 +71,1 @@\n-        public void startClass(String fqn) throws IOException {\n+        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n@@ -54,0 +73,2 @@\n+            this.suffix = suffix;\n+            this.environment = logger;\n@@ -65,0 +86,2 @@\n+        private Optional<String> suffix;\n+        private Environment environment;\n@@ -72,1 +95,1 @@\n-        public void startClass(String fqn) throws IOException {\n+        public void startClass(String fqn, Optional<String> suffix, Environment logger) throws IOException {\n@@ -74,0 +97,2 @@\n+            this.suffix = suffix;\n+            this.environment = logger;\n@@ -85,1 +110,4 @@\n-        private final String dir;\n+        private final File dir;\n+        private File outfile;\n+        private FileOutputStream fos;\n+        private PrintWriter pw;\n@@ -87,1 +115,1 @@\n-        public DirOutput(String dir) {\n+        public DirOutput(File dir) {\n@@ -98,1 +126,1 @@\n-            throw new RuntimeException(\"Not yet implemented\");\n+            pw.println(line);\n@@ -103,1 +131,1 @@\n-            throw new RuntimeException(\"Not yet implemented\");\n+            pw.print(line);\n@@ -108,1 +136,1 @@\n-            throw new RuntimeException(\"Not yet implemented\");\n+            pw.print(line);\n@@ -112,5 +140,23 @@\n-        public void startClass(String fqn) throws IOException {\n-            super.startClass(fqn);\n-            \/\/mkdir\n-            \/\/open file?\n-\n+        public void startClass(String fqn, Optional<String> fileExtension, Environment environment) throws IOException {\n+            super.startClass(fqn, fileExtension, environment);\n+            final String fileSeparator = FileSystems.getDefault().getSeparator();\n+            if (dir == null) {\n+                int startOfName = fqn.lastIndexOf(fileSeparator);\n+                if (startOfName != -1) {\n+                    fqn = fqn.substring(startOfName + 1);\n+                }\n+                outfile = new File(fqn + fileExtension.orElseGet(() -> \"\"));\n+            } else {\n+                environment.traceln(\"writing -d \" + dir.getPath());\n+                if (!fileSeparator.equals(\"\/\")) {\n+                    fqn = fqn.replace(\"\/\", fileSeparator);\n+                }\n+                outfile = new File(dir, fqn + fileExtension.orElseGet(() -> \"\"));\n+                File outDir = new File(outfile.getParent());\n+                if (!outDir.exists() && !outDir.mkdirs()) {\n+                    environment.error(\"err.cannot.write\", outDir.getPath());\n+                    return;\n+                }\n+            }\n+            fos = new FileOutputStream(outfile);\n+            pw = new PrintWriter(new OutputStreamWriter(fos));\n@@ -122,0 +168,7 @@\n+            flush();\n+            try {\n+                pw.close();\n+            } finally {\n+                fos.close();\n+            }\n+\n@@ -128,0 +181,5 @@\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            return new DataOutputStream(new BufferedOutputStream(fos));\n+        }\n@@ -168,0 +226,7 @@\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            throw  new  NotImplementedException(\"Use EscapedPrintStreamOutput\");\n+        }\n+\n+\n@@ -172,0 +237,2 @@\n+        private final OutputStream originalStream;\n+\n@@ -174,0 +241,12 @@\n+            this.originalStream = os;\n+        }\n+\n+        @Override\n+        public DataOutputStream getDataOutputStream() throws FileNotFoundException {\n+            return new DataOutputStream(new BufferedOutputStream(originalStream));\n+        }\n+\n+        @Override\n+        public void finishClass(String fqn) throws IOException {\n+            super.finishClass(fqn);\n+            originalStream.flush();\n","filename":"src\/org\/openjdk\/asmtools\/common\/ToolOutput.java","additions":92,"deletions":13,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -506,22 +507,2 @@\n-    public void write(File destDir) throws IOException {\n-        final String fileSeparator = FileSystems.getDefault().getSeparator();\n-        File outfile;\n-        if (destDir == null) {\n-            int startOfName = myClassName.lastIndexOf(fileSeparator);\n-            if (startOfName != -1) {\n-                myClassName = myClassName.substring(startOfName + 1);\n-            }\n-            outfile = new File(myClassName + fileExtension);\n-        } else {\n-            environment.traceln(\"writing -d \" + destDir.getPath());\n-            if (!fileSeparator.equals(\"\/\")) {\n-                myClassName = myClassName.replace(\"\/\", fileSeparator);\n-            }\n-            outfile = new File(destDir, myClassName + fileExtension);\n-            File outDir = new File(outfile.getParent());\n-            if (!outDir.exists() && !outDir.mkdirs()) {\n-                environment.error(\"err.cannot.write\", outDir.getPath());\n-                return;\n-            }\n-        }\n-        try (DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(outfile)))) {\n+    public void write(ToolOutput toolOutput) throws IOException {\n+        try (DataOutputStream dos = toolOutput.getDataOutputStream()) {\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/ClassData.java","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -135,2 +135,2 @@\n-        public JasmBuilder(ToolOutput.DualStreamToolOutput logger) {\n-            super(\"jasm\", new CompilerLogger(logger));\n+        public JasmBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+            super(\"jasm\", toolOutput, new CompilerLogger(logger));\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmEnvironment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-    protected JasmTool() {\n-        super(new ToolOutput.DualOutputStreamOutput());\n+    protected JasmTool(ToolOutput toolOutput) {\n+        super(toolOutput, new ToolOutput.DualOutputStreamOutput());\n@@ -38,2 +38,2 @@\n-    protected JasmTool(ToolOutput.DualStreamToolOutput logger) {\n-        super(logger);\n+    protected JasmTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+        super(toolOutput, logger);\n@@ -43,2 +43,2 @@\n-    public JasmEnvironment getEnvironment(ToolOutput.DualStreamToolOutput logger) {\n-        JasmBuilder builder = new JasmBuilder(logger);\n+    public JasmEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+        JasmBuilder builder = new JasmBuilder(toolOutput, logger);\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/JasmTool.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Optional;\n@@ -51,2 +52,0 @@\n-    private File destDir;\n-\n@@ -66,2 +65,2 @@\n-    public Main(String... argv) {\n-        super();\n+    public Main(ToolOutput toolOutput, String... argv) {\n+        super(toolOutput);\n@@ -71,2 +70,2 @@\n-    public Main(ToolOutput.DualStreamToolOutput log, String... argv) {\n-        super(log);\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+        super(toolOutput, log);\n@@ -78,1 +77,1 @@\n-        Main compiler = new Main(new ToolOutput.DualOutputStreamOutput(), argv);\n+        Main compiler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), new ToolOutput.DualOutputStreamOutput(), argv);\n@@ -95,0 +94,2 @@\n+                String fqn = parser.getClassesData()[0].myClassName;\n+                environment.getToolOutput().startClass(fqn, Optional.of(parser.getClassesData()[0].fileExtension), environment);\n@@ -100,1 +101,1 @@\n-                    cd.write(destDir);\n+                    cd.write(environment.getToolOutput());\n@@ -102,0 +103,1 @@\n+                environment.getToolOutput().finishClass(fqn);\n@@ -151,1 +153,1 @@\n-                    case \"-d\" -> destDir = setDestDir(++i, argv);\n+                    case org.openjdk.asmtools.Main.DIR_SWITCH -> setDestDir(++i, argv);\n@@ -231,0 +233,1 @@\n+\n","filename":"src\/org\/openjdk\/asmtools\/jasm\/Main.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Optional;\n@@ -697,1 +698,1 @@\n-    public void write(ByteBuffer cls, File destDir) throws IOException {\n+    public void write(ByteBuffer cls) throws IOException {\n@@ -705,22 +706,0 @@\n-        File outfile;\n-        if (destDir == null) {\n-            int startofname = myname.lastIndexOf('\/');\n-            if (startofname != -1) {\n-                myname = myname.substring(startofname + 1);\n-            }\n-            outfile = new File(myname);\n-        } else {\n-            environment.traceln(\"writing -d \" + destDir.getPath());\n-            if (fileSeparator == 0) {\n-                fileSeparator = System.getProperty(\"file.separator\").charAt(0);\n-            }\n-            if (fileSeparator != '\/') {\n-                myname = myname.replace('\/', fileSeparator);\n-            }\n-            outfile = new File(destDir, myname);\n-            File outdir = new File(outfile.getParent());\n-            if (!outdir.exists() && !outdir.mkdirs()) {\n-                environment.error(\"cannot.write\", outdir.getPath());\n-                return;\n-            }\n-        }\n@@ -728,1 +707,1 @@\n-        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outfile));\n+        BufferedOutputStream out = new BufferedOutputStream(environment.getToolOutput().getDataOutputStream());\n@@ -738,1 +717,1 @@\n-    public void write(File destdir) throws IOException {\n+    public void write() throws IOException {\n@@ -740,1 +719,3 @@\n-            write(cls, destdir);\n+            environment.getToolOutput().startClass(cls.myname, Optional.empty(), environment);\n+            write(cls);\n+            environment.getToolOutput().finishClass(cls.myname);\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Jcoder.java","additions":7,"deletions":26,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -114,2 +114,2 @@\n-        public JcoderBuilder(ToolOutput.DualStreamToolOutput log) {\n-            super(\"jcoder\", new CompilerLogger(log));\n+        public JcoderBuilder(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+            super(\"jcoder\", toolOutput, new CompilerLogger(log));\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderEnvironment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-    protected JcoderTool() {\n-        super(new ToolOutput.DualOutputStreamOutput());\n+    protected JcoderTool(ToolOutput toolOutput) {\n+        super(toolOutput, new ToolOutput.DualOutputStreamOutput());\n@@ -37,2 +37,2 @@\n-    protected JcoderTool(ToolOutput.DualStreamToolOutput logger) {\n-        super(logger);\n+    protected JcoderTool(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput logger) {\n+        super(toolOutput, logger);\n@@ -42,2 +42,2 @@\n-    public JcoderEnvironment getEnvironment(ToolOutput.DualStreamToolOutput log) {\n-        JcoderEnvironment.JcoderBuilder builder = new JcoderEnvironment.JcoderBuilder(log);\n+    public JcoderEnvironment getEnvironment(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log) {\n+        JcoderEnvironment.JcoderBuilder builder = new JcoderEnvironment.JcoderBuilder(toolOutput, log);\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/JcoderTool.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-    private File destDir;\n@@ -54,2 +53,2 @@\n-    public Main(String... argv) {\n-        super();\n+    public Main(ToolOutput toolOutput, String... argv) {\n+        super(toolOutput);\n@@ -59,2 +58,2 @@\n-    public Main(ToolOutput.DualStreamToolOutput log, String... argv) {\n-        super(log);\n+    public Main(ToolOutput toolOutput, ToolOutput.DualStreamToolOutput log, String... argv) {\n+        super(toolOutput, log);\n@@ -66,1 +65,1 @@\n-        Main compiler = new Main(argv);\n+        Main compiler = new Main(new ToolOutput.EscapedPrintStreamOutput(System.out), argv);\n@@ -95,1 +94,1 @@\n-                parser.write(destDir);\n+                parser.write();\n@@ -122,1 +121,1 @@\n-                    case \"-d\" -> destDir = setDestDir(++i, argv);\n+                    case org.openjdk.asmtools.Main.DIR_SWITCH -> setDestDir(++i, argv);\n","filename":"src\/org\/openjdk\/asmtools\/jcoder\/Main.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1123,0 +1123,1 @@\n+                environment.getToolOutput().startClass(entityName, Optional.of(\".jcod\"), environment);\n@@ -1186,1 +1187,1 @@\n-            if (environment.printDetailsFlag)\n+            if (environment.printDetailsFlag) {\n@@ -1188,1 +1189,1 @@\n-            else\n+            } else {\n@@ -1190,0 +1191,2 @@\n+            }\n+            environment.getToolOutput().finishClass(entityName);\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,4 +51,0 @@\n-    public ToolOutput getToolOutput() {\n-        return toolOutput;\n-    }\n-\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/JdecEnvironment.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+        environment.info(\"info.opt.d\");\n@@ -92,1 +93,2 @@\n-        for (String arg : argv) {\n+        for (int i = 0; i < argv.length; i++) {\n+            String arg = argv[i];\n@@ -104,0 +106,3 @@\n+                case org.openjdk.asmtools.Main.DIR_SWITCH:\n+                    setDestDir(++i, argv);\n+                    break;\n@@ -146,1 +151,0 @@\n-                environment.getToolOutput().finishClass(inputFileName.getFileName()\/*TODO replace by proper pkg.name?*\/);\n","filename":"src\/org\/openjdk\/asmtools\/jdec\/Main.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+                environment.getToolOutput().startClass(classData.className, Optional.of(\".jasm\"), environment);\n@@ -72,0 +73,1 @@\n+                environment.getToolOutput().finishClass(classData.className);\n@@ -102,0 +104,1 @@\n+        environment.info(\"info.opt.d\");\n@@ -110,1 +113,2 @@\n-        for (String arg : argv) {\n+        for (int i = 0; i < argv.length; i++) {\n+            String arg = argv[i];\n@@ -137,0 +141,3 @@\n+                case org.openjdk.asmtools.Main.DIR_SWITCH:\n+                    setDestDir(++i, argv);\n+                    break;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/Main.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+import org.openjdk.asmtools.common.ToolOutput;\n@@ -108,2 +109,3 @@\n-        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(sourceWithoutSuper.getAbsolutePath(), \"-d\", dir.getAbsolutePath());\n-        jasmTool.compile();\n+        org.openjdk.asmtools.jasm.Main jasmTool = new org.openjdk.asmtools.jasm.Main(new ToolOutput.EscapedPrintStreamOutput(System.out), new ToolOutput.DualOutputStreamOutput(), sourceWithoutSuper.getAbsolutePath(), \"-d\", dir.getAbsolutePath());\n+        int ii = jasmTool.compile();\n+        Assertions.assertEquals(0, ii);\n","filename":"test\/org\/openjdk\/asmtools\/jdis\/MainTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}