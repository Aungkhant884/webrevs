{"files":[{"patch":"@@ -7,0 +7,1 @@\n+import org.openjdk.asmtools.jdis.Options;\n@@ -12,1 +13,1 @@\n-public class InputOutputTests extends ClassPathClassWork{\n+public class InputOutputTests extends ClassPathClassWork {\n@@ -23,0 +24,1 @@\n+\n@@ -31,1 +33,2 @@\n-    public static class LogAndBinResults extends  LogAndReturn{\n+\n+    public static class LogAndBinResults extends LogAndReturn {\n@@ -40,1 +43,1 @@\n-    public LogAndTextResults jdec(byte[]... clazz) {\n+    public LogAndTextResults jdec(boolean g, byte[]... clazz) {\n@@ -43,1 +46,1 @@\n-                originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n@@ -50,0 +53,3 @@\n+        if (g) {\n+            jdec.setPrintDetails();\n+        }\n@@ -53,0 +59,1 @@\n+\n@@ -56,1 +63,1 @@\n-            originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n@@ -67,1 +74,1 @@\n-    public LogAndTextResults jdis(byte[]... clazz) {\n+    public LogAndTextResults jdis(boolean g, byte[]... clazz) {\n@@ -70,1 +77,1 @@\n-            originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n@@ -77,0 +84,3 @@\n+        if (g) {\n+            Options.setDetailedOutputOptions();\n+        }\n@@ -80,0 +90,1 @@\n+\n@@ -83,1 +94,1 @@\n-            originalFiles[i]=new ToolInput.ByteInput(clazz[i]);\n+            originalFiles[i] = new ToolInput.ByteInput(clazz[i]);\n@@ -98,1 +109,1 @@\n-        LogAndTextResults o1 = jdec(data);\n+        LogAndTextResults o1 = jdec(false, data);\n@@ -100,1 +111,1 @@\n-        LogAndTextResults o3 = jdec(o2.output.getOutputs().get(0).getBody());\n+        LogAndTextResults o3 = jdec(false, o2.output.getOutputs().get(0).getBody());\n@@ -102,1 +113,1 @@\n-        Assertions.assertArrayEquals(new int[]{0,0,0,0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n+        Assertions.assertArrayEquals(new int[]{0, 0, 0, 0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n@@ -109,1 +120,24 @@\n-        LogAndTextResults o1 = jdis(data);\n+        LogAndTextResults o1 = jdis(false, data);\n+        LogAndBinResults o2 = jasm(o1.output.getOutputs().get(0).getBody());\n+        LogAndTextResults o3 = jdis(false, o2.output.getOutputs().get(0).getBody());\n+        LogAndBinResults o4 = jasm(o3.output.getOutputs().get(0).getBody());\n+        Assertions.assertArrayEquals(new int[]{0, 0, 0, 0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n+    }\n+\n+\n+    @Test\n+    public void inMemoryDecCodDecCodG() throws IOException {\n+        initTestClassData(TestedHelloWorld.class);\n+        byte[] data = Files.readAllBytes(new File(classFile).toPath());\n+        LogAndTextResults o1 = jdec(true, data);\n+        LogAndBinResults o2 = jcod(o1.output.getOutputs().get(0).getBody());\n+        LogAndTextResults o3 = jdec(true, o2.output.getOutputs().get(0).getBody());\n+        LogAndBinResults o4 = jcod(o3.output.getOutputs().get(0).getBody());\n+        Assertions.assertArrayEquals(new int[]{0, 0, 0, 0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n+    }\n+\n+    @Test\n+    public void inMemoryDisasmAsmDisasmAsmG() throws IOException {\n+        initTestClassData(TestedHelloWorld.class);\n+        byte[] data = Files.readAllBytes(new File(classFile).toPath());\n+        LogAndTextResults o1 = jdis(true, data);\n@@ -111,1 +145,1 @@\n-        LogAndTextResults o3 = jdis(o2.output.getOutputs().get(0).getBody());\n+        LogAndTextResults o3 = jdis(true, o2.output.getOutputs().get(0).getBody());\n@@ -113,1 +147,1 @@\n-        Assertions.assertArrayEquals(new int[]{0,0,0,0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n+        Assertions.assertArrayEquals(new int[]{0, 0, 0, 0}, new int[]{o1.result, o2.result, o3.result, o4.result});\n","filename":"test\/java\/org\/openjdk\/asmtools\/InputOutputTests.java","additions":48,"deletions":14,"binary":false,"changes":62,"status":"modified"}]}