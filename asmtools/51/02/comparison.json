{"files":[{"patch":"@@ -37,1 +37,1 @@\n-err.does_not_exist=The output directory {0} does not exist\n+err.does_not_exist=The output directory ''{0}'' does not exist\n","filename":"src\/org\/openjdk\/asmtools\/i18n.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    private void readStackMap(DataInputStream in) throws IOException {\n+    private void readStackMapEntity(StackMapData.EAttributeType type, DataInputStream in) throws IOException {\n@@ -158,1 +158,0 @@\n-        environment.traceln(\"CodeAttr:  Stack_Map: attrLength=%d num=%d\", len, stack_map_len);\n@@ -160,1 +159,2 @@\n-        StackMapData.prevFramePC = 0;\n+        environment.traceln(\"CodeAttr:  %s: attrLength=%d num=%d\", type.getName(), len, stack_map_len);\n+        int prevFrame_pc = 0;\n@@ -162,12 +162,3 @@\n-            stack_map.add(new StackMapData(StackMapData.EDataType.STACKMAP, this, in));\n-        }\n-    }\n-\n-    private void readStackMapTable(DataInputStream in) throws IOException {\n-        int len = in.readInt(); \/\/ attr_length\n-        int stack_map_len = in.readUnsignedShort();\n-        environment.traceln(\"CodeAttr:  Stack_Map_Table: attrLength=%d num=%d\", len, stack_map_len);\n-        stack_map = new ArrayList<>(stack_map_len);\n-        StackMapData.prevFramePC = 0;\n-        for (int k = 0; k < stack_map_len; k++) {\n-            stack_map.add(new StackMapData(StackMapData.EDataType.STACKMAPTABLE, this, in));\n+            StackMapData stackMapData =  new StackMapData(type, k == 0, prevFrame_pc, this, in);\n+            prevFrame_pc = stackMapData.getFramePC();\n+            stack_map.add(stackMapData);\n@@ -230,2 +221,2 @@\n-                    case ATT_StackMap -> readStackMap(in);\n-                    case ATT_StackMapTable -> readStackMapTable(in);\n+                    case ATT_StackMap -> readStackMapEntity(StackMapData.EAttributeType.STACKMAP, in);\n+                    case ATT_StackMapTable -> readStackMapEntity(StackMapData.EAttributeType.STACKMAPTABLE, in);\n@@ -311,1 +302,1 @@\n-            getInstructionAttribute(entry.start_pc).stackMapEntry = entry;\n+            getInstructionAttribute(entry.frame_pc).stackMapEntry = entry;\n@@ -455,1 +446,1 @@\n-                    breakPositions.addAll(Set.of(3));\n+                    breakPositions.add(3);\n@@ -463,1 +454,1 @@\n-                    breakPositions.addAll(Set.of(3));\n+                    breakPositions.add(3);\n@@ -745,1 +736,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/CodeData.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import static org.openjdk.asmtools.jdis.StackMapData.EDataType.STACKMAPTABLE;\n+import static org.openjdk.asmtools.jdis.StackMapData.EAttributeType.STACKMAPTABLE;\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/InstructionAttr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,4 +38,1 @@\n-\n-    static int prevFramePC = 0;\n-\n-    EDataType type;\n+    EAttributeType type;\n@@ -43,1 +40,2 @@\n-    int start_pc;\n+    int frame_pc;\n+    int offset;\n@@ -47,1 +45,10 @@\n-    public StackMapData(EDataType type, CodeData code, DataInputStream in) throws IOException {\n+    \/**\n+     * @param type          either Implicit stack map attribute or the StackMapTable attribute\n+     * @param firstStackMap is it an entries[0] in the stack_map_frame structure? i.e. Does the StackMapData describe\n+     *                      the second stack map frame of the method?\n+     * @param prevFrame_pc  the bytecode offset of the previous entry (entries[current_index-1])\n+     * @param code          the code attribute where this attribute is located\n+     * @param in            the input stream\n+     * @throws IOException  the exception if something went wrong\n+     *\/\n+    public StackMapData(EAttributeType type, boolean firstStackMap, int prevFrame_pc, CodeData code, DataInputStream in) throws IOException {\n@@ -50,2 +57,2 @@\n-        if (type == EDataType.STACKMAP) {\n-            start_pc = in.readUnsignedShort();\n+        if (type == EAttributeType.STACKMAP) {\n+            frame_pc = in.readUnsignedShort();\n@@ -55,1 +62,1 @@\n-                    start_pc, mapToHexString(lockMap), mapToHexString(stackMap));\n+                    frame_pc, mapToHexString(lockMap), mapToHexString(stackMap));\n@@ -59,1 +66,0 @@\n-            int offset = 0;\n@@ -108,2 +114,5 @@\n-            start_pc = prevFramePC == 0 ? offset : prevFramePC + offset + 1;\n-            prevFramePC = start_pc;\n+            if( prevFrame_pc == 0 && firstStackMap) {\n+                frame_pc = offset;\n+            } else {\n+                frame_pc = prevFrame_pc + offset + 1;\n+            }\n@@ -113,0 +122,7 @@\n+    \/**\n+     * @return the bytecode offset at which a stack map frame applies\n+     *\/\n+    public int getFramePC() {\n+        return frame_pc;\n+    }\n+\n@@ -140,1 +156,19 @@\n-    enum EDataType {STACKMAP, STACKMAPTABLE}\n+    \/*\n+     *  In a class file whose version number is 50.0 or above, if a method's Code attribute does not have a StackMapTable attribute,\n+     *  it has an implicit stack map attribute (chapter 4.10.1). This implicit stack map attribute is equivalent to a StackMapTable\n+     *  attribute with number_of_entries equal to zero.\n+     *\/\n+    enum EAttributeType {\n+        \/\/ Implicit stack map attribute\n+        \/\/ This implicit stack map attribute is equivalent to a StackMapTable attribute with number_of_entries equal to zero.\n+        STACKMAP(\"ImplicitStackMap\"),\n+        \/\/ The StackMapTable attribute\n+        STACKMAPTABLE(\"StackMapTable\");\n+        private final String name;\n+        EAttributeType(String name) {\n+            this.name = name;\n+        }\n+        public String getName() {\n+            return name;\n+        }\n+    }\n","filename":"src\/org\/openjdk\/asmtools\/jdis\/StackMapData.java","additions":47,"deletions":13,"binary":false,"changes":60,"status":"modified"}]}