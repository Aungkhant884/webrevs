{"files":[{"patch":"@@ -86,0 +86,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -1546,0 +1547,2 @@\n+  _forwarding = new SlidingForwarding<5>(heap_rs.region(), HeapRegion::LogOfHRGrainBytes - LogHeapWordSize);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -101,0 +101,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -240,0 +242,2 @@\n+  SlidingForwarding<5>* _forwarding;\n+\n@@ -269,0 +273,4 @@\n+  SlidingForwarding<5>* forwarding() const {\n+    return _forwarding;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -285,0 +285,1 @@\n+  _heap->forwarding()->clear();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,1 +99,2 @@\n-  marker->preserved_stack()->adjust_during_full_gc();\n+  const SlidingForwarding<5>* const forwarding = G1CollectedHeap::heap()->forwarding();\n+  marker->preserved_stack()->adjust_during_full_gc(forwarding);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -67,1 +68,1 @@\n-  HeapWord* destination = cast_from_oop<HeapWord*>(obj->forwardee());\n+  HeapWord* destination = cast_from_oop<HeapWord*>(_forwarding->forwardee(obj));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -54,1 +56,1 @@\n-\n+    const SlidingForwarding<5>* const _forwarding;\n@@ -56,1 +58,3 @@\n-    G1CompactRegionClosure(G1CMBitMap* bitmap) : _bitmap(bitmap) { }\n+    G1CompactRegionClosure(G1CMBitMap* bitmap) :\n+      _bitmap(bitmap),\n+      _forwarding(G1CollectedHeap::heap()->forwarding()) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -96,1 +97,1 @@\n-void G1FullGCCompactionPoint::forward(oop object, size_t size) {\n+void G1FullGCCompactionPoint::forward(SlidingForwarding<5>* const forwarding, oop object, size_t size) {\n@@ -106,1 +107,1 @@\n-    object->forward_to(cast_to_oop(_compaction_top));\n+    forwarding->forward_to(object, cast_to_oop(_compaction_top));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -54,1 +56,1 @@\n-  void forward(oop object, size_t size);\n+  void forward(SlidingForwarding<5>* const forwarding, oop object, size_t size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -82,1 +84,1 @@\n-\n+  const SlidingForwarding<5>* const _forwarding;\n@@ -85,1 +87,3 @@\n-  G1AdjustClosure(G1FullCollector* collector) : _collector(collector) { }\n+  G1AdjustClosure(G1FullCollector* collector) :\n+    _collector(collector),\n+    _forwarding(G1CollectedHeap::heap()->forwarding()) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -90,2 +91,2 @@\n-  oop forwardee = obj->forwardee();\n-  assert(G1CollectedHeap::heap()->is_in_reserved(forwardee), \"should be in object space\");\n+  oop forwardee = _forwarding->forwardee(obj);\n+  assert(G1CollectedHeap::heap()->is_in_reserved(forwardee), \"should be in object space: \" PTR_FORMAT \"(\" PTR_FORMAT \", \" PTR_FORMAT \") \" INTPTR_FORMAT, p2i(forwardee), p2i(G1CollectedHeap::heap()->reserved().start()), p2i(G1CollectedHeap::heap()->reserved().end()), obj->mark().value());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -176,1 +177,1 @@\n-    _cp(cp) { }\n+    _cp(cp), _forwarding(G1CollectedHeap::heap()->forwarding()) { }\n@@ -180,1 +181,1 @@\n-  _cp->forward(object, size);\n+  _cp->forward(_forwarding, object, size);\n@@ -187,3 +188,5 @@\n-  oop forwarded_to = obj->forwardee();\n-  if (obj->is_forwarded() && !_current->is_in(forwarded_to)) {\n-    return obj->size();\n+  if (obj->is_forwarded()) {\n+    oop forwarded_to = _forwarding->forwardee(obj);\n+    if (!_current->is_in(forwarded_to)) {\n+      return obj->size();\n+    }\n@@ -194,1 +197,1 @@\n-  _cp->forward(obj, size);\n+  _cp->forward(_forwarding, obj, size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -81,1 +83,1 @@\n-\n+    SlidingForwarding<5>* const _forwarding;\n@@ -90,1 +92,1 @@\n-\n+    SlidingForwarding<5>* const _forwarding;\n@@ -95,1 +97,2 @@\n-        _current(hr) { }\n+        _current(hr),\n+        _forwarding(G1CollectedHeap::heap()->forwarding()) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -274,0 +274,2 @@\n+  AdjustPointerClosure adjust_pointer_closure(gch->forwarding());\n+  CLDToOopClosure adjust_cld_closure(&adjust_pointer_closure, ClassLoaderData::_claim_strong);\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/genCollectedHeap.hpp\"\n@@ -65,1 +66,0 @@\n-CLDToOopClosure    MarkSweep::adjust_cld_closure(&adjust_pointer_closure, ClassLoaderData::_claim_strong);\n@@ -147,2 +147,2 @@\n-void PreservedMark::adjust_pointer() {\n-  MarkSweep::adjust_pointer(&_obj);\n+void PreservedMark::adjust_pointer(const SlidingForwarding<1>* const forwarding) {\n+  MarkSweep::adjust_pointer(forwarding, &_obj);\n@@ -176,2 +176,0 @@\n-AdjustPointerClosure MarkSweep::adjust_pointer_closure;\n-\n@@ -182,0 +180,2 @@\n+  const SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n+\n@@ -184,1 +184,1 @@\n-    _preserved_marks[i].adjust_pointer();\n+    _preserved_marks[i].adjust_pointer(forwarding);\n@@ -191,1 +191,1 @@\n-    adjust_pointer(p);\n+    adjust_pointer(forwarding, p);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -127,2 +129,0 @@\n-  static AdjustPointerClosure adjust_pointer_closure;\n-  static CLDToOopClosure      adjust_cld_closure;\n@@ -145,1 +145,1 @@\n-  static int adjust_pointers(oop obj);\n+  static int adjust_pointers(const SlidingForwarding<1>* const forwarding, oop obj);\n@@ -153,1 +153,1 @@\n-  template <class T> static inline void adjust_pointer(T* p);\n+  template <class T> static inline void adjust_pointer(const SlidingForwarding<1>* const forwarding, T* p);\n@@ -189,0 +189,2 @@\n+private:\n+  const SlidingForwarding<1>* const _forwarding;\n@@ -190,0 +192,1 @@\n+  AdjustPointerClosure(const SlidingForwarding<1>* forwarding) : _forwarding(forwarding) {}\n@@ -207,1 +210,1 @@\n-  void adjust_pointer();\n+  void adjust_pointer(const SlidingForwarding<1>* const forwarding);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -76,1 +77,1 @@\n-template <class T> inline void MarkSweep::adjust_pointer(T* p) {\n+template <class T> inline void MarkSweep::adjust_pointer(const SlidingForwarding<1>* const forwarding, T* p) {\n@@ -84,1 +85,1 @@\n-      oop new_obj = cast_to_oop(header.decode_pointer());\n+      oop new_obj = forwarding->forwardee(obj);\n@@ -93,1 +94,1 @@\n-void AdjustPointerClosure::do_oop_work(T* p)           { MarkSweep::adjust_pointer(p); }\n+void AdjustPointerClosure::do_oop_work(T* p)           { MarkSweep::adjust_pointer(_forwarding, p); }\n@@ -98,2 +99,3 @@\n-inline int MarkSweep::adjust_pointers(oop obj) {\n-  return obj->oop_iterate_size(&MarkSweep::adjust_pointer_closure);\n+inline int MarkSweep::adjust_pointers(const SlidingForwarding<1>* const forwarding, oop obj) {\n+  AdjustPointerClosure cl(forwarding);\n+  return obj->oop_iterate_size(&cl);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.inline.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -125,0 +126,1 @@\n+  _forwarding = new SlidingForwarding<1>(_reserved);\n@@ -1116,0 +1118,1 @@\n+  _forwarding->clear();\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -91,0 +93,2 @@\n+  SlidingForwarding<1>* _forwarding;\n+\n@@ -334,0 +338,4 @@\n+  SlidingForwarding<1>* forwarding() const {\n+    return _forwarding;\n+  }\n+\n@@ -436,0 +444,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+  SlidingForwarding(MemRegion heap);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,13 @@\n+template <int NUM_REGION_BITS>\n+SlidingForwarding<NUM_REGION_BITS>::SlidingForwarding(MemRegion heap)\n+#ifdef _LP64\n+: _heap_start(heap.start()),\n+  _num_regions(((heap.end() - heap.start()) >> NUM_COMPRESSED_BITS) + 1),\n+  _region_size_words_shift(NUM_COMPRESSED_BITS),\n+  _target_base_table(NEW_C_HEAP_ARRAY(HeapWord*, _num_regions * 2, mtGC)) {\n+  assert(_region_size_words_shift <= NUM_COMPRESSED_BITS, \"regions must not be larger than maximum addressing bits allow\");\n+#else\n+{\n+#endif\n+}\n+\n@@ -97,1 +110,10 @@\n-  assert(region_contains(encode_base, target), \"region must contain target\");\n+  if (region_idx >= (ONE << NUM_REGION_BITS)) {\n+    tty->print_cr(\"target: \" PTR_FORMAT, p2i(target));\n+    for (region_idx = 0; region_idx < (ONE << NUM_REGION_BITS); region_idx++) {\n+      tty->print_cr(\"region_idx: \" INTPTR_FORMAT \", encode_base: \" PTR_FORMAT, region_idx, p2i(_target_base_table[base_table_idx + region_idx]));\n+    }\n+  }\n+  assert(region_idx < (ONE << NUM_REGION_BITS), \"need to have found an encoding base\");\n+  assert(target >= encode_base, \"target must be above encode base, target:\" PTR_FORMAT \", encoded_base: \" PTR_FORMAT \",  target_idx: \" SIZE_FORMAT \", heap start: \" PTR_FORMAT \", region_idx: \" INTPTR_FORMAT,\n+         p2i(target), p2i(encode_base), target_idx, p2i(_heap_start), region_idx);\n+  assert(region_contains(encode_base, target), \"region must contain target: original: \" PTR_FORMAT \", target: \" PTR_FORMAT \", encode_base: \" PTR_FORMAT \", region_idx: \" INTPTR_FORMAT, p2i(original), p2i(target), p2i(encode_base), region_idx);\n@@ -111,0 +133,1 @@\n+  assert(decoded >= _heap_start, \"must be above heap start, encoded: \" INTPTR_FORMAT \", region_idx: \" SIZE_FORMAT \", base: \" PTR_FORMAT, encoded, region_idx, p2i(_target_base_table[base_table_idx]));\n@@ -120,1 +143,1 @@\n-  assert((encoded & markWord::klass_mask_in_place) == 0, \"encoded forwardee must not overlap with Klass*\");\n+  assert((encoded & markWord::klass_mask_in_place) == 0, \"encoded forwardee must not overlap with Klass*: \" PTR_FORMAT, encoded);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -350,1 +351,1 @@\n-                                    CompactPoint* cp, HeapWord* compact_top) {\n+                                    CompactPoint* cp, HeapWord* compact_top, SlidingForwarding<1>* const forwarding) {\n@@ -373,1 +374,1 @@\n-    q->forward_to(cast_to_oop(compact_top));\n+    forwarding->forward_to(q, cast_to_oop(compact_top));\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,0 +53,2 @@\n+template <int N>\n+class SlidingForwarding;\n@@ -435,1 +437,1 @@\n-                    HeapWord* compact_top);\n+                    HeapWord* compact_top, SlidingForwarding<1>* const forwarding);\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shared\/genCollectedHeap.hpp\"\n@@ -165,0 +166,1 @@\n+  SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n@@ -170,1 +172,1 @@\n-      compact_top = cp->space->forward(cast_to_oop(cur_obj), size, cp, compact_top);\n+      compact_top = cp->space->forward(cast_to_oop(cur_obj), size, cp, compact_top, forwarding);\n@@ -186,1 +188,1 @@\n-        compact_top = cp->space->forward(obj, obj->size(), cp, compact_top);\n+        compact_top = cp->space->forward(obj, obj->size(), cp, compact_top, forwarding);\n@@ -225,0 +227,1 @@\n+  const SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n@@ -236,1 +239,1 @@\n-      size_t size = MarkSweep::adjust_pointers(cast_to_oop(cur_obj));\n+      size_t size = MarkSweep::adjust_pointers(forwarding, cast_to_oop(cur_obj));\n@@ -318,0 +321,2 @@\n+  const SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n+\n@@ -331,1 +336,1 @@\n-      HeapWord* compaction_top = cast_from_oop<HeapWord*>(cast_to_oop(cur_obj)->forwardee());\n+      HeapWord* compaction_top = cast_from_oop<HeapWord*>(forwarding->forwardee(cast_to_oop(cur_obj)));\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}