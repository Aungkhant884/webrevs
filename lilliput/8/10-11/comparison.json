{"files":[{"patch":"@@ -1610,1 +1610,1 @@\n-  _forwarding = new SlidingForwarding<5>(heap_rs.region(), HeapRegion::LogOfHRGrainBytes - LogHeapWordSize);\n+  _forwarding = new SlidingForwarding(heap_rs.region(), HeapRegion::LogOfHRGrainBytes - LogHeapWordSize);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-template <int N>\n@@ -252,1 +251,1 @@\n-  SlidingForwarding<5>* _forwarding;\n+  SlidingForwarding* _forwarding;\n@@ -286,1 +285,1 @@\n-  SlidingForwarding<5>* forwarding() const {\n+  SlidingForwarding* forwarding() const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -309,3 +309,4 @@\n-  if (!task.has_freed_regions()) {\n-    task.prepare_serial_compaction();\n-  }\n+  \/\/ NOTE: Disabled for now because it violates sliding-forwarding assumption.\n+\/\/  if (!task.has_freed_regions()) {\n+\/\/    task.prepare_serial_compaction();\n+\/\/  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  const SlidingForwarding<5>* const forwarding = G1CollectedHeap::heap()->forwarding();\n+  const SlidingForwarding* const forwarding = G1CollectedHeap::heap()->forwarding();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-template <int N>\n@@ -55,1 +54,1 @@\n-    const SlidingForwarding<5>* const _forwarding;\n+    const SlidingForwarding* const _forwarding;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-void G1FullGCCompactionPoint::forward(SlidingForwarding<5>* const forwarding, oop object, size_t size) {\n+void G1FullGCCompactionPoint::forward(SlidingForwarding* const forwarding, oop object, size_t size) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-template <int N>\n@@ -56,1 +55,1 @@\n-  void forward(SlidingForwarding<5>* const forwarding, oop object, size_t size);\n+  void forward(SlidingForwarding* const forwarding, oop object, size_t size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-template <int N>\n@@ -84,1 +83,1 @@\n-  const SlidingForwarding<5>* const _forwarding;\n+  const SlidingForwarding* const _forwarding;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-template <int N>\n@@ -81,1 +80,1 @@\n-    SlidingForwarding<5>* const _forwarding;\n+    SlidingForwarding* const _forwarding;\n@@ -90,1 +89,1 @@\n-    SlidingForwarding<5>* const _forwarding;\n+    SlidingForwarding* const _forwarding;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-void PreservedMark::adjust_pointer(const SlidingForwarding<1>* const forwarding) {\n+void PreservedMark::adjust_pointer(const SlidingForwarding* const forwarding) {\n@@ -180,1 +180,1 @@\n-  const SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n+  const SlidingForwarding* const forwarding = GenCollectedHeap::heap()->forwarding();\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-template <int N>\n@@ -145,1 +144,1 @@\n-  static int adjust_pointers(const SlidingForwarding<1>* const forwarding, oop obj);\n+  static int adjust_pointers(const SlidingForwarding* const forwarding, oop obj);\n@@ -153,1 +152,1 @@\n-  template <class T> static inline void adjust_pointer(const SlidingForwarding<1>* const forwarding, T* p);\n+  template <class T> static inline void adjust_pointer(const SlidingForwarding* const forwarding, T* p);\n@@ -190,1 +189,1 @@\n-  const SlidingForwarding<1>* const _forwarding;\n+  const SlidingForwarding* const _forwarding;\n@@ -192,1 +191,1 @@\n-  AdjustPointerClosure(const SlidingForwarding<1>* forwarding) : _forwarding(forwarding) {}\n+  AdjustPointerClosure(const SlidingForwarding* forwarding) : _forwarding(forwarding) {}\n@@ -210,1 +209,1 @@\n-  void adjust_pointer(const SlidingForwarding<1>* const forwarding);\n+  void adjust_pointer(const SlidingForwarding* const forwarding);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-template <class T> inline void MarkSweep::adjust_pointer(const SlidingForwarding<1>* const forwarding, T* p) {\n+template <class T> inline void MarkSweep::adjust_pointer(const SlidingForwarding* const forwarding, T* p) {\n@@ -100,1 +100,1 @@\n-inline int MarkSweep::adjust_pointers(const SlidingForwarding<1>* const forwarding, oop obj) {\n+inline int MarkSweep::adjust_pointers(const SlidingForwarding* const forwarding, oop obj) {\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  _forwarding = new SlidingForwarding<1>(_reserved);\n+  _forwarding = new SlidingForwarding(_reserved);\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-template <int N>\n@@ -93,1 +92,1 @@\n-  SlidingForwarding<1>* _forwarding;\n+  SlidingForwarding* _forwarding;\n@@ -337,1 +336,1 @@\n-  SlidingForwarding<1>* forwarding() const {\n+  SlidingForwarding* forwarding() const {\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,0 +55,12 @@\n+void PreservedMarks::adjust_during_full_gc(const SlidingForwarding* const forwarding) {\n+  StackIterator<OopAndMarkWord, mtGC> iter(_stack);\n+  while (!iter.is_empty()) {\n+    OopAndMarkWord* elem = iter.next_addr();\n+\n+    oop obj = elem->get_oop();\n+    if (obj->is_forwarded()) {\n+      elem->set_oop(forwarding->forwardee(obj));\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-template <int N>\n@@ -70,2 +69,1 @@\n-  template<int NUM_REGION_BITS>\n-  void adjust_during_full_gc(const SlidingForwarding<NUM_REGION_BITS>* const forwarding);\n+  void adjust_during_full_gc(const SlidingForwarding* const forwarding);\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -66,13 +67,0 @@\n-template <int NUM_REGION_BITS>\n-void PreservedMarks::adjust_during_full_gc(const SlidingForwarding<NUM_REGION_BITS>* const forwarding) {\n-  StackIterator<OopAndMarkWord, mtGC> iter(_stack);\n-  while (!iter.is_empty()) {\n-    OopAndMarkWord* elem = iter.next_addr();\n-\n-    oop obj = elem->get_oop();\n-    if (obj->is_forwarded()) {\n-      elem->set_oop(forwarding->forwardee(obj));\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.inline.hpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shared\/slidingForwarding.hpp\"\n+\n+#ifdef _LP64\n+HeapWord* const SlidingForwarding::UNUSED_BASE = reinterpret_cast<HeapWord*>(0x1);\n+#endif\n+\n+SlidingForwarding::SlidingForwarding(MemRegion heap)\n+#ifdef _LP64\n+        : _heap_start(heap.start()),\n+          _num_regions(((heap.end() - heap.start()) >> NUM_COMPRESSED_BITS) + 1),\n+          _region_size_words_shift(NUM_COMPRESSED_BITS),\n+          _target_base_table(NEW_C_HEAP_ARRAY(HeapWord*, _num_regions * 2, mtGC)) {\n+  assert(_region_size_words_shift <= NUM_COMPRESSED_BITS, \"regions must not be larger than maximum addressing bits allow\");\n+#else\n+  {\n+#endif\n+}\n+\n+SlidingForwarding::SlidingForwarding(MemRegion heap, size_t region_size_words_shift)\n+#ifdef _LP64\n+        : _heap_start(heap.start()),\n+          _num_regions(((heap.end() - heap.start()) >> region_size_words_shift) + 1),\n+          _region_size_words_shift(region_size_words_shift),\n+          _target_base_table(NEW_C_HEAP_ARRAY(HeapWord*, _num_regions * (ONE << NUM_REGION_BITS), mtGC)) {\n+  assert(region_size_words_shift <= NUM_COMPRESSED_BITS, \"regions must not be larger than maximum addressing bits allow\");\n+#else\n+  {\n+#endif\n+}\n+\n+SlidingForwarding::~SlidingForwarding() {\n+#ifdef _LP64\n+  FREE_C_HEAP_ARRAY(HeapWord*, _target_base_table);\n+#endif\n+}\n+\n+void SlidingForwarding::clear() {\n+#ifdef _LP64\n+  size_t max = _num_regions * (ONE << NUM_REGION_BITS);\n+  for (size_t i = 0; i < max; i++) {\n+    _target_base_table[i] = UNUSED_BASE;\n+  }\n+#endif\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.cpp","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -66,1 +66,0 @@\n-template <int NUM_REGION_BITS>\n@@ -70,0 +69,1 @@\n+  static const int NUM_REGION_BITS = 1;\n@@ -92,2 +92,2 @@\n-  size_t region_index_containing(HeapWord* addr) const;\n-  bool region_contains(HeapWord* region_base, HeapWord* addr) const;\n+  inline size_t region_index_containing(HeapWord* addr) const;\n+  inline bool region_contains(HeapWord* region_base, HeapWord* addr) const;\n@@ -95,2 +95,2 @@\n-  uintptr_t encode_forwarding(HeapWord* original, HeapWord* target);\n-  HeapWord* decode_forwarding(HeapWord* original, uintptr_t encoded) const;\n+  inline uintptr_t encode_forwarding(HeapWord* original, HeapWord* target);\n+  inline HeapWord* decode_forwarding(HeapWord* original, uintptr_t encoded) const;\n@@ -106,2 +106,2 @@\n-  void forward_to(oop original, oop target);\n-  oop forwardee(oop original) const;\n+  inline void forward_to(oop original, oop target);\n+  inline oop forwardee(oop original) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,50 +32,1 @@\n-template <int NUM_REGION_BITS>\n-HeapWord* const SlidingForwarding<NUM_REGION_BITS>::UNUSED_BASE = reinterpret_cast<HeapWord*>(0x1);\n-#endif\n-\n-template <int NUM_REGION_BITS>\n-SlidingForwarding<NUM_REGION_BITS>::SlidingForwarding(MemRegion heap)\n-#ifdef _LP64\n-: _heap_start(heap.start()),\n-  _num_regions(((heap.end() - heap.start()) >> NUM_COMPRESSED_BITS) + 1),\n-  _region_size_words_shift(NUM_COMPRESSED_BITS),\n-  _target_base_table(NEW_C_HEAP_ARRAY(HeapWord*, _num_regions * 2, mtGC)) {\n-  assert(_region_size_words_shift <= NUM_COMPRESSED_BITS, \"regions must not be larger than maximum addressing bits allow\");\n-#else\n-{\n-#endif\n-}\n-\n-template <int NUM_REGION_BITS>\n-SlidingForwarding<NUM_REGION_BITS>::SlidingForwarding(MemRegion heap, size_t region_size_words_shift)\n-#ifdef _LP64\n-: _heap_start(heap.start()),\n-  _num_regions(((heap.end() - heap.start()) >> region_size_words_shift) + 1),\n-  _region_size_words_shift(region_size_words_shift),\n-  _target_base_table(NEW_C_HEAP_ARRAY(HeapWord*, _num_regions * (ONE << NUM_REGION_BITS), mtGC)) {\n-  assert(region_size_words_shift <= NUM_COMPRESSED_BITS, \"regions must not be larger than maximum addressing bits allow\");\n-#else\n-{\n-#endif\n-}\n-\n-template <int NUM_REGION_BITS>\n-SlidingForwarding<NUM_REGION_BITS>::~SlidingForwarding() {\n-#ifdef _LP64\n-  FREE_C_HEAP_ARRAY(HeapWord*, _target_base_table);\n-#endif\n-}\n-\n-template <int NUM_REGION_BITS>\n-void SlidingForwarding<NUM_REGION_BITS>::clear() {\n-#ifdef _LP64\n-  size_t max = _num_regions * (ONE << NUM_REGION_BITS);\n-  for (size_t i = 0; i < max; i++) {\n-    _target_base_table[i] = UNUSED_BASE;\n-  }\n-#endif\n-}\n-\n-#ifdef _LP64\n-template <int NUM_REGION_BITS>\n-size_t SlidingForwarding<NUM_REGION_BITS>::region_index_containing(HeapWord* addr) const {\n+size_t SlidingForwarding::region_index_containing(HeapWord* addr) const {\n@@ -88,2 +39,1 @@\n-template <int NUM_REGION_BITS>\n-bool SlidingForwarding<NUM_REGION_BITS>::region_contains(HeapWord* region_base, HeapWord* addr) const {\n+bool SlidingForwarding::region_contains(HeapWord* region_base, HeapWord* addr) const {\n@@ -93,2 +43,2 @@\n-template <int NUM_REGION_BITS>\n-uintptr_t SlidingForwarding<NUM_REGION_BITS>::encode_forwarding(HeapWord* original, HeapWord* target) {\n+\n+uintptr_t SlidingForwarding::encode_forwarding(HeapWord* original, HeapWord* target) {\n@@ -126,2 +76,1 @@\n-template <int NUM_REGION_BITS>\n-HeapWord* SlidingForwarding<NUM_REGION_BITS>::decode_forwarding(HeapWord* original, uintptr_t encoded) const {\n+HeapWord* SlidingForwarding::decode_forwarding(HeapWord* original, uintptr_t encoded) const {\n@@ -138,2 +87,1 @@\n-template <int NUM_REGION_BITS>\n-void SlidingForwarding<NUM_REGION_BITS>::forward_to(oop original, oop target) {\n+void SlidingForwarding::forward_to(oop original, oop target) {\n@@ -151,2 +99,1 @@\n-template <int NUM_REGION_BITS>\n-oop SlidingForwarding<NUM_REGION_BITS>::forwardee(oop original) const {\n+oop SlidingForwarding::forwardee(oop original) const {\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":7,"deletions":60,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -351,1 +351,1 @@\n-                                    CompactPoint* cp, HeapWord* compact_top, SlidingForwarding<1>* const forwarding) {\n+                                    CompactPoint* cp, HeapWord* compact_top, SlidingForwarding* const forwarding) {\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-template <int N>\n@@ -437,1 +436,1 @@\n-                    HeapWord* compact_top, SlidingForwarding<1>* const forwarding);\n+                    HeapWord* compact_top, SlidingForwarding* const forwarding);\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-  SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n+  SlidingForwarding* const forwarding = GenCollectedHeap::heap()->forwarding();\n@@ -228,1 +228,1 @@\n-  const SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n+  const SlidingForwarding* const forwarding = GenCollectedHeap::heap()->forwarding();\n@@ -322,1 +322,1 @@\n-  const SlidingForwarding<1>* const forwarding = GenCollectedHeap::heap()->forwarding();\n+  const SlidingForwarding* const forwarding = GenCollectedHeap::heap()->forwarding();\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -297,3 +297,3 @@\n-  PreservedMarks*          const _preserved_marks;\n-  SlidingForwarding<1>*    const _forwarding;\n-  ShenandoahHeap*          const _heap;\n+  PreservedMarks*    const _preserved_marks;\n+  SlidingForwarding* const _forwarding;\n+  ShenandoahHeap*    const _heap;\n@@ -439,1 +439,1 @@\n-  SlidingForwarding<1>* forwarding = heap->forwarding();\n+  SlidingForwarding* forwarding = heap->forwarding();\n@@ -725,3 +725,3 @@\n-  ShenandoahHeap*             const _heap;\n-  const SlidingForwarding<1>* const _forwarding;\n-  ShenandoahMarkingContext*   const _ctx;\n+  ShenandoahHeap*           const _heap;\n+  const SlidingForwarding*  const _forwarding;\n+  ShenandoahMarkingContext* const _ctx;\n@@ -805,1 +805,1 @@\n-    const SlidingForwarding<1>* const forwarding = ShenandoahHeap::heap()->forwarding();\n+    const SlidingForwarding* const forwarding = ShenandoahHeap::heap()->forwarding();\n@@ -836,3 +836,3 @@\n-  ShenandoahHeap*             const _heap;\n-  const SlidingForwarding<1>* const _forwarding;\n-  uint                        const _worker_id;\n+  ShenandoahHeap*          const _heap;\n+  const SlidingForwarding* const _forwarding;\n+  uint                     const _worker_id;\n@@ -944,1 +944,1 @@\n-  const SlidingForwarding<1>* const forwarding = heap->forwarding();\n+  const SlidingForwarding* const forwarding = heap->forwarding();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-  _forwarding = new SlidingForwarding<1>(_heap_region, ShenandoahHeapRegion::region_size_words_shift());\n+  _forwarding = new SlidingForwarding(_heap_region, ShenandoahHeapRegion::region_size_words_shift());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-template<int N>\n@@ -232,1 +231,1 @@\n-  SlidingForwarding<1>* _forwarding;\n+  SlidingForwarding* _forwarding;\n@@ -249,1 +248,1 @@\n-  SlidingForwarding<1>* forwarding() const { return _forwarding; }\n+  SlidingForwarding* forwarding() const { return _forwarding; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- *   -Xmx1G -XX:G1HeapRegionSize=8m -XX:MaxGCPauseMillis=1000 gc.stress.TestMultiThreadStressRSet 60 16\n+ *   -Xmx1100M -XX:G1HeapRegionSize=8m -XX:MaxGCPauseMillis=1000 gc.stress.TestMultiThreadStressRSet 60 16\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestMultiThreadStressRSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}