{"files":[{"patch":"@@ -2368,4 +2368,2 @@\n-      __ load_klass(tmp, src);\n-      __ mov(src, tmp);\n-      __ load_klass(tmp, dst);\n-      __ mov(dst, tmp);\n+      __ load_klass(src, src);\n+      __ load_klass(dst, dst);\n@@ -2642,2 +2640,1 @@\n-      __ load_klass(rscratch1, recv);\n-      __ mov(recv, rscratch1);\n+      __ load_klass(recv, recv);\n@@ -2737,2 +2734,1 @@\n-      __ load_klass(rscratch1, tmp);\n-      __ mov(tmp, rscratch1);\n+      __ load_klass(tmp, tmp);\n@@ -2751,2 +2747,1 @@\n-          __ load_klass(rscratch1, tmp);\n-          __ mov(tmp, rscratch1);\n+          __ load_klass(tmp, tmp);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -276,2 +276,2 @@\n-static void save_live_registers_no_oop_map(StubAssembler* sasm,\n-                                              bool save_fpu_registers = true) {\n+static OopMap* save_live_registers(StubAssembler* sasm,\n+                                   bool save_fpu_registers = true) {\n@@ -291,5 +291,0 @@\n-}\n-\n-static OopMap* save_live_registers(StubAssembler* sasm,\n-                                   bool save_fpu_registers = true) {\n-  save_live_registers_no_oop_map(sasm, save_fpu_registers);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1659,2 +1659,1 @@\n-  load_klass(rscratch1, obj);\n-  mov(obj, rscratch1);\n+  load_klass(obj, obj);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,1 +109,0 @@\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3665,2 +3665,1 @@\n-  __ load_klass(rscratch1, r3);\n-  __ mov(r3, rscratch1);\n+  __ load_klass(r3, r3);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-  const ptrdiff_t estimate = 168;\n+  const ptrdiff_t estimate = 124;\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3535,2 +3535,3 @@\n-  if (op->info() != NULL) {\n-    add_debug_info_for_null_check_here(op->info());\n+  CodeEmitInfo* info = op->info();\n+  if (info != NULL) {\n+    add_debug_info_for_null_check_here(info);\n@@ -3661,0 +3662,4 @@\n+#ifndef ASSERT\n+      __ jmpb(next);\n+    }\n+#else\n@@ -3663,1 +3668,0 @@\n-#ifdef ASSERT\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1043,0 +1043,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -624,1 +624,1 @@\n-      \/\/ registers (for thread ptr). Therefor we have to emit the lock-stack-check in\n+      \/\/ registers (for thread ptr). Therefore we have to emit the lock-stack-check in\n@@ -815,1 +815,1 @@\n-      testptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), (int32_t) (intptr_t) ANONYMOUS_OWNER);\n+      testb(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), (int32_t) (intptr_t) ANONYMOUS_OWNER);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  jmp(next);\n+  jmpb(next);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9824,1 +9824,1 @@\n-  andptr(hdr, ~(int32_t )markWord::lock_mask_in_place);\n+  andptr(hdr, ~(int32_t)markWord::lock_mask_in_place);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-\n@@ -878,1 +877,0 @@\n-  void testptr(Address  src, int32_t imm32) {  LP64_ONLY(testq(src, imm32)) NOT_LP64(testl(src, imm32)); }\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -507,3 +507,0 @@\n-#ifdef _LP64\n-  address generate_load_nklass();\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4153,1 +4153,1 @@\n-  __ jmp(resolved);\n+  __ jmpb(resolved);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -220,2 +220,1 @@\n-  \/\/ Lilliput: expanded since load_klass is significantly and decode_klass somewhat larger.\n-  const ptrdiff_t estimate = 155;\n+  const ptrdiff_t estimate = 137;\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -176,0 +176,9 @@\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#x64-area-beyond-encoding-range-use-xor 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#x64-area-partly-within-encoding-range-use-add 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#x64-area-within-encoding-range-use-zero 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#x64-area-far-out-no-low-bits-use-xor 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#x64-area-far-out-with-low-bits-use-add 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#aarch64-xor 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#aarch64-movk-1 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#aarch64-movk-2 8302094 windows-all,macosx-all\n+runtime\/CompressedOops\/CompressedClassPointerEncoding.java#aarch64-movk-3 8302094 windows-all,macosx-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}