{"files":[{"patch":"@@ -3933,3 +3933,2 @@\n-      \/\/ We cannot use tbnz here: tbnz would leave the condition flags untouched,\n-      \/\/ but we want to carry-over the NE condition to the exit at the cont label,\n-      \/\/ in order to take the slow-path.\n+      \/\/ We cannot use tbnz here, the target might be too far away and cannot\n+      \/\/ be encoded.\n@@ -3937,1 +3936,4 @@\n-      __ br(Assembler::NE, no_count);\n+      C2FixAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2FixAnonOMOwnerStub(tmp, disp_hdr);\n+      Compile::current()->output()->add_stub(stub);\n+      __ br(Assembler::NE, stub->entry());\n+      __ bind(stub->continuation());\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,0 +78,20 @@\n+int C2FixAnonOMOwnerStub::max_size() const {\n+  return 20;\n+}\n+\n+void C2FixAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n+  __ bind(entry());\n+  Register mon = monitor();\n+  Register t = tmp();\n+\n+  \/\/ Fix owner to be the current thread.\n+  __ str(rthread, Address(mon, ObjectMonitor::owner_offset_in_bytes()));\n+\n+  \/\/ Pop owner object from lock-stack.\n+  __ ldr(t, Address(rthread, JavaThread::lock_stack_current_offset()));\n+  __ sub(t, t, oopSize);\n+  __ str(t, Address(rthread, JavaThread::lock_stack_current_offset()));\n+\n+  __ b(continuation());\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -88,0 +88,12 @@\n+int C2FixAnonOMOwnerStub::max_size() const {\n+  return 17;\n+}\n+\n+void C2FixAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n+  __ bind(entry());\n+  Register mon = monitor();\n+  __ movptr(Address(mon, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), r15_thread);\n+  __ subptr(Address(r15_thread, JavaThread::lock_stack_current_offset()), oopSize);\n+  __ jmp(continuation());\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -814,1 +814,1 @@\n-      \/\/ If the owner is ANONYMOUS, we need to fix it - in the slow-path.\n+      \/\/ If the owner is ANONYMOUS, we need to fix it.\n@@ -816,0 +816,6 @@\n+#ifdef _LP64\n+      C2FixAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2FixAnonOMOwnerStub(tmpReg);\n+      Compile::current()->output()->add_stub(stub);\n+      jcc(Assembler::notEqual, stub->entry());\n+      bind(stub->continuation());\n+#else\n@@ -817,0 +823,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -98,0 +98,13 @@\n+class C2FixAnonOMOwnerStub : public C2CodeStub {\n+private:\n+  Register _monitor;\n+  Register _tmp;\n+public:\n+  C2FixAnonOMOwnerStub(Register monitor, Register tmp = noreg) : C2CodeStub(),\n+    _monitor(monitor), _tmp(tmp) {}\n+  Register monitor() { return _monitor; }\n+  Register tmp() { return _tmp; }\n+  int max_size() const;\n+  void emit(C2_MacroAssembler& masm);\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}