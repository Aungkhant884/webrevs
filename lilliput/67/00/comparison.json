{"files":[{"patch":"@@ -2614,0 +2614,1 @@\n+  LP64_ONLY(declare_constant(markWord::klass_shift))                      \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import sun.jvm.hotspot.oops.Mark;\n+\n@@ -397,1 +399,5 @@\n-    long value = readCInteger(address, getKlassPtrSize(), true);\n+    \/\/ On 64 bit systems, the compressed Klass* is currently read from the mark\n+    \/\/ word. We need to load the whole mark, and shift the upper parts.\n+    long value = readCInteger(address, getJLongSize(), true);\n+    value = value >>> Mark.getKlassShift();\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/DebuggerBase.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,6 +64,1 @@\n-    if (VM.getVM().isCompressedKlassPointersEnabled()) {\n-      headerSize = typeSize;\n-    } else {\n-      headerSize = VM.getVM().alignUp(typeSize + VM.getVM().getIntSize(),\n-                                      VM.getVM().getHeapWordSize());\n-    }\n+    headerSize = lengthOffsetInBytes() + VM.getVM().getIntSize();\n@@ -73,9 +68,1 @@\n-  private static long headerSize(BasicType type) {\n-    if (Universe.elementTypeShouldBeAligned(type)) {\n-       return alignObjectSize(headerSizeInBytes())\/VM.getVM().getHeapWordSize();\n-    } else {\n-      return headerSizeInBytes()\/VM.getVM().getHeapWordSize();\n-    }\n-  }\n-\n-  private long lengthOffsetInBytes() {\n+  private static long lengthOffsetInBytes() {\n@@ -85,5 +72,1 @@\n-    if (VM.getVM().isCompressedKlassPointersEnabled()) {\n-      lengthOffsetInBytes = typeSize - VM.getVM().getIntSize();\n-    } else {\n-      lengthOffsetInBytes = typeSize;\n-    }\n+    lengthOffsetInBytes = typeSize;\n@@ -111,1 +94,7 @@\n-    return headerSize(type) * VM.getVM().getHeapWordSize();\n+    long typeSizeInBytes = headerSizeInBytes();\n+    if (Universe.elementTypeShouldBeAligned(type)) {\n+      VM vm = VM.getVM();\n+      return vm.alignUp(typeSizeInBytes, vm.getVM().getHeapWordSize());\n+    } else {\n+      return typeSizeInBytes;\n+    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Array.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+    if (VM.getVM().isLP64()) {\n+      klassShift          = db.lookupLongConstant(\"markWord::klass_shift\").longValue();\n+    }\n@@ -85,0 +88,1 @@\n+  private static long klassShift;\n@@ -110,0 +114,4 @@\n+  public static long getKlassShift() {\n+    return klassShift;\n+  }\n+\n@@ -189,0 +197,5 @@\n+  public Klass getKlass() {\n+    assert(!hasMonitor());\n+    return (Klass)Metadata.instantiateWrapperFor(addr.getCompKlassAddressAt(0));\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Mark.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,2 +49,3 @@\n-    klass      = new MetadataField(type.getAddressField(\"_metadata._klass\"), 0);\n-    compressedKlass  = new NarrowKlassField(type.getAddressField(\"_metadata._compressed_klass\"), 0);\n+    if (!VM.getVM().isLP64()) {\n+      klass      = new MetadataField(type.getAddressField(\"_klass\"), 0);\n+    }\n@@ -78,0 +79,9 @@\n+\n+  private static Klass getKlass(Mark mark) {\n+    if (mark.hasMonitor()) {\n+      ObjectMonitor mon = mark.monitor();\n+      mark = mon.header();\n+    }\n+    return mark.getKlass();\n+  }\n+\n@@ -79,2 +89,3 @@\n-    if (VM.getVM().isCompressedKlassPointersEnabled()) {\n-      return (Klass)compressedKlass.getValue(getHandle());\n+    if (VM.getVM().isLP64()) {\n+      assert(VM.getVM().isCompressedKlassPointersEnabled());\n+      return getKlass(getMark());\n@@ -150,3 +161,1 @@\n-      if (VM.getVM().isCompressedKlassPointersEnabled()) {\n-        visitor.doMetadata(compressedKlass, true);\n-      } else {\n+      if (!VM.getVM().isLP64()) {\n@@ -209,2 +218,3 @@\n-    if (VM.getVM().isCompressedKlassPointersEnabled()) {\n-      return (Klass)Metadata.instantiateWrapperFor(handle.getCompKlassAddressAt(compressedKlass.getOffset()));\n+    if (VM.getVM().isLP64()) {\n+      Mark mark = new Mark(handle);\n+      return getKlass(mark);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Oop.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import sun.jvm.hotspot.oops.Oop;\n@@ -40,20 +41,0 @@\n-  private static AddressField klassField;\n-\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"oopDesc\");\n-\n-    if (VM.getVM().isCompressedKlassPointersEnabled()) {\n-      klassField = type.getAddressField(\"_metadata._compressed_klass\");\n-    } else {\n-      klassField = type.getAddressField(\"_metadata._klass\");\n-    }\n-  }\n-\n@@ -69,5 +50,1 @@\n-      if (VM.getVM().isCompressedKlassPointersEnabled()) {\n-        Metadata.instantiateWrapperFor(oop.getCompKlassAddressAt(klassField.getOffset()));\n-      } else {\n-        Metadata.instantiateWrapperFor(klassField.getValue(oop));\n-      }\n+      Oop.getKlassForOopHandle(oop);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/RobustOopDeterminator.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -126,34 +126,0 @@\n-# Missing Lilliput support to load Klass*\n-serviceability\/sa\/CDSJMapClstats.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbCDSCore.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbCDSJstackPrintAll.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbDumpheap.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbFindPC.java#no-xcomp-core\n-serviceability\/sa\/ClhsdbFindPC.java#no-xcomp-process\n-serviceability\/sa\/ClhsdbFindPC.java#xcomp-core\n-serviceability\/sa\/ClhsdbFindPC.java#xcomp-process\n-serviceability\/sa\/ClhsdbInspect.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbJdis.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbJhisto.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbJstack.java#id0 1234567 generic-all\n-serviceability\/sa\/ClhsdbJstack.java#id1 1234567 generic-all\n-serviceability\/sa\/ClhsdbPrintAs.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbPstack.java#core 1234567 generic-all\n-serviceability\/sa\/ClhsdbPstack.java#process 1234567 generic-all\n-serviceability\/sa\/ClhsdbSource.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbThread.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbThreadContext.java 1234567 generic-all\n-serviceability\/sa\/ClhsdbWhere.java 1234567 generic-all\n-serviceability\/sa\/DeadlockDetectionTest.java 1234567 generic-all\n-serviceability\/sa\/JhsdbThreadInfoTest.java 1234567 generic-all\n-serviceability\/sa\/TestClhsdbJstackLock.java 1234567 generic-all\n-serviceability\/sa\/TestHeapDumpForInvokeDynamic.java 1234567 generic-all\n-serviceability\/sa\/TestJhsdbJstackLineNumbers.java 1234567 generic-all\n-serviceability\/sa\/TestJhsdbJstackLock.java 1234567 generic-all\n-serviceability\/sa\/TestJhsdbJstackMixed.java 1234567 generic-all\n-serviceability\/sa\/TestObjectMonitorIterate.java 1234567 generic-all\n-serviceability\/sa\/TestSysProps.java 1234567 generic-all\n-serviceability\/sa\/jmap-hprof\/JMapHProfLargeHeapTest.java 1234567 generic-all\n-serviceability\/sa\/sadebugd\/DebugdConnectTest.java 1234567 generic-all\n-serviceability\/sa\/sadebugd\/DisableRegistryTest.java 1234567 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"}]}