{"files":[{"patch":"@@ -1765,1 +1765,1 @@\n-      __ load_klass(Rtmp1, obj, tmp_load_klass);\n+      __ load_klass(Rtmp1, obj, tmp_load_klass, false);\n@@ -1782,1 +1782,1 @@\n-    __ load_klass(klass_RInfo, obj, tmp_load_klass);\n+    __ load_klass(klass_RInfo, obj, tmp_load_klass, false);\n@@ -1837,1 +1837,1 @@\n-    __ load_klass(recv, obj, tmp_load_klass);\n+    __ load_klass(recv, obj, tmp_load_klass, false);\n@@ -1898,2 +1898,2 @@\n-    __ load_klass(k_RInfo, array, tmp_load_klass);\n-    __ load_klass(klass_RInfo, value, tmp_load_klass);\n+    __ load_klass(k_RInfo, array, tmp_load_klass, false);\n+    __ load_klass(klass_RInfo, value, tmp_load_klass, false);\n@@ -1920,1 +1920,1 @@\n-      __ load_klass(recv, value, tmp_load_klass);\n+      __ load_klass(recv, value, tmp_load_klass, false);\n@@ -3226,1 +3226,1 @@\n-      __ load_klass(tmp, dst, tmp_load_klass);\n+      __ load_klass(tmp, dst, tmp_load_klass, false);\n@@ -3232,1 +3232,1 @@\n-      __ load_klass(tmp, src, tmp_load_klass);\n+      __ load_klass(tmp, src, tmp_load_klass, false);\n@@ -3289,2 +3289,2 @@\n-      __ load_klass(src, src, tmp_load_klass);\n-      __ load_klass(dst, dst, tmp_load_klass);\n+      __ load_klass(src, src, tmp_load_klass, false);\n+      __ load_klass(dst, dst, tmp_load_klass, false);\n@@ -3318,1 +3318,1 @@\n-            __ load_klass(tmp, src, tmp_load_klass);\n+            __ load_klass(tmp, src, tmp_load_klass, false);\n@@ -3320,1 +3320,1 @@\n-            __ load_klass(tmp, dst, tmp_load_klass);\n+            __ load_klass(tmp, dst, tmp_load_klass, false);\n@@ -3371,1 +3371,1 @@\n-        __ load_klass(c_rarg4, dst, tmp_load_klass);\n+        __ load_klass(c_rarg4, dst, tmp_load_klass, false);\n@@ -3589,1 +3589,1 @@\n-      __ load_klass(recv, recv, tmp_load_klass);\n+      __ load_klass(recv, recv, tmp_load_klass, false);\n@@ -3654,1 +3654,1 @@\n-      __ load_klass(tmp, tmp, tmp_load_klass);\n+      __ load_klass(tmp, tmp, tmp_load_klass, false);\n@@ -3669,1 +3669,1 @@\n-          __ load_klass(tmp, tmp, tmp_load_klass);\n+          __ load_klass(tmp, tmp, tmp_load_klass, false);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    load_klass(hdr, obj, rklass_decode_tmp);\n+    load_klass(hdr, obj, rklass_decode_tmp, false);\n@@ -288,1 +288,1 @@\n-    load_klass(rscratch1, receiver, tmp_load_klass);\n+    load_klass(rscratch1, receiver, tmp_load_klass, false);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1264,1 +1264,1 @@\n-        __ load_klass(t, rax, tmp_load_klass);\n+        __ load_klass(t, rax, tmp_load_klass, false);\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-    load_klass(tmpReg, objReg, cx1Reg);\n+    load_klass(tmpReg, objReg, cx1Reg, false);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  jmpb(next);\n+  jmp(next);\n@@ -63,1 +63,1 @@\n-  load_klass(obj, obj, tmp_load_klass);\n+  load_klass(obj, obj, tmp_load_klass, false);\n@@ -1222,1 +1222,1 @@\n-      load_klass(tmp_reg, obj_reg, rklass_decode_tmp);\n+      load_klass(tmp_reg, obj_reg, rklass_decode_tmp, false);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4528,1 +4528,1 @@\n-void MacroAssembler::load_klass(Register dst, Register src, Register tmp) {\n+void MacroAssembler::load_klass(Register dst, Register src, Register tmp, bool null_check_src) {\n@@ -4532,4 +4532,53 @@\n-  if (UseCompressedClassPointers) {\n-    movl(dst, Address(src, oopDesc::klass_offset_in_bytes()));\n-    decode_klass_not_null(dst, tmp);\n-  } else\n+  assert(UseCompressedClassPointers, \"expect compressed class pointers\");\n+\n+  Label slow, done;\n+  if (null_check_src) {\n+    null_check(src, oopDesc::mark_offset_in_bytes());\n+  }\n+  movq(tmp, Address(src, oopDesc::mark_offset_in_bytes()));\n+  \/\/ NOTE: While it would seem nice to use xorb instead (for which we don't have an encoding in our assembler),\n+  \/\/ the encoding for xorq uses the signed version (0x81\/6) of xor, which encodes as compact as xorb would,\n+  \/\/ and does't make a difference performance-wise.\n+  xorq(tmp, markWord::unlocked_value);\n+  testb(tmp, markWord::lock_mask_in_place);\n+  jccb(Assembler::notZero, slow);\n+\n+  movq(dst, tmp);\n+  shrq(dst, markWord::klass_shift);\n+  decode_klass_not_null(dst, tmp);\n+  jmpb(done);\n+  bind(slow);\n+\n+  if (dst != rax) {\n+    push(rax);\n+  }\n+  push(rdi);\n+  push(rsi);\n+  push(rdx);\n+  push(rcx);\n+  push(r8);\n+  push(r9);\n+  push(r10);\n+  push(r11);\n+\n+  MacroAssembler::call_VM_leaf(CAST_FROM_FN_PTR(address, oopDesc::load_klass_runtime), src);\n+\n+  pop(r11);\n+  pop(r10);\n+  pop(r9);\n+  pop(r8);\n+  pop(rcx);\n+  pop(rdx);\n+  pop(rsi);\n+  pop(rdi);\n+  if (dst != rax) {\n+    mov(dst, rax);\n+    pop(rax);\n+  }\n+\n+  bind(done);\n+#else\n+  if (null_check_src) {\n+    null_check(src, oopDesc::klass_offset_in_bytes());\n+  }\n+  movptr(dst, Address(src, oopDesc::klass_offset_in_bytes()));\n@@ -4537,1 +4586,0 @@\n-    movptr(dst, Address(src, oopDesc::klass_offset_in_bytes()));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":54,"deletions":6,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-  void load_klass(Register dst, Register src, Register tmp);\n+  void load_klass(Register dst, Register src, Register tmp, bool null_check_src);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  __ load_klass(temp, obj, temp2);\n+  __ load_klass(temp, obj, temp2, false);\n@@ -367,2 +367,1 @@\n-        __ null_check(receiver_reg, oopDesc::klass_offset_in_bytes());\n-        __ load_klass(temp1_recv_klass, receiver_reg, temp2);\n+        __ load_klass(temp1_recv_klass, receiver_reg, temp2, true);\n@@ -376,1 +375,1 @@\n-        __ load_klass(temp1_recv_klass, receiver_reg, temp2);\n+        __ load_klass(temp1_recv_klass, receiver_reg, temp2, false);\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -993,1 +993,1 @@\n-    __ load_klass(temp, receiver, rscratch1);\n+    __ load_klass(temp, receiver, rscratch1, false);\n@@ -1768,1 +1768,1 @@\n-  __ load_klass(rscratch1, receiver, rscratch2);\n+  __ load_klass(rscratch1, receiver, rscratch2, false);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -986,1 +986,1 @@\n-    __ load_klass(rax, rax, rscratch1);  \/\/ get klass\n+    __ load_klass(rax, rax, rscratch1, false);  \/\/ get klass\n@@ -2854,1 +2854,1 @@\n-    __ load_klass(r11_klass, rax_oop, rscratch1);\/\/ query the object klass\n+    __ load_klass(r11_klass, rax_oop, rscratch1, false);\/\/ query the object klass\n@@ -3098,1 +3098,1 @@\n-    __ load_klass(r10_src_klass, src, rklass_tmp);\n+    __ load_klass(r10_src_klass, src, rklass_tmp, false);\n@@ -3109,1 +3109,1 @@\n-      __ load_klass(rax, dst, rklass_tmp);\n+      __ load_klass(rax, dst, rklass_tmp, false);\n@@ -3132,1 +3132,1 @@\n-    __ load_klass(rax, dst, rklass_tmp);\n+    __ load_klass(rax, dst, rklass_tmp, false);\n@@ -3234,1 +3234,1 @@\n-    __ load_klass(rax, dst, rklass_tmp);\n+    __ load_klass(rax, dst, rklass_tmp, false);\n@@ -3265,1 +3265,1 @@\n-      __ load_klass(r11_dst_klass, dst, rklass_tmp); \/\/ reload\n+      __ load_klass(r11_dst_klass, dst, rklass_tmp, false); \/\/ reload\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1132,1 +1132,1 @@\n-  __ load_klass(rbx, rax, tmp_load_klass);\n+  __ load_klass(rbx, rax, tmp_load_klass, false);\n@@ -1134,1 +1134,1 @@\n-  __ load_klass(rax, rdx, tmp_load_klass);\n+  __ load_klass(rax, rdx, tmp_load_klass, false);\n@@ -1178,1 +1178,1 @@\n-  __ load_klass(rcx, rdx, tmp_load_klass);\n+  __ load_klass(rcx, rdx, tmp_load_klass, false);\n@@ -2573,1 +2573,1 @@\n-    __ load_klass(rdi, robj, tmp_load_klass);\n+    __ load_klass(rdi, robj, tmp_load_klass, false);\n@@ -3660,1 +3660,0 @@\n-  __ null_check(recv, oopDesc::klass_offset_in_bytes());\n@@ -3662,1 +3661,1 @@\n-  __ load_klass(rax, recv, tmp_load_klass);\n+  __ load_klass(rax, recv, tmp_load_klass, true);\n@@ -3753,1 +3752,0 @@\n-  __ null_check(rcx, oopDesc::klass_offset_in_bytes());\n@@ -3755,1 +3753,1 @@\n-  __ load_klass(rlocals, rcx, tmp_load_klass);\n+  __ load_klass(rlocals, rcx, tmp_load_klass, true);\n@@ -3777,2 +3775,1 @@\n-  __ null_check(rcx, oopDesc::klass_offset_in_bytes());\n-  __ load_klass(rdx, rcx, tmp_load_klass);\n+  __ load_klass(rdx, rcx, tmp_load_klass, true);\n@@ -4129,1 +4126,1 @@\n-  __ load_klass(rbx, rdx, tmp_load_klass);\n+  __ load_klass(rbx, rdx, tmp_load_klass, false);\n@@ -4187,2 +4184,2 @@\n-  __ load_klass(rdx, rdx, tmp_load_klass);\n-  __ jmpb(resolved);\n+  __ load_klass(rdx, rdx, tmp_load_klass, false);\n+  __ jmp(resolved);\n@@ -4192,1 +4189,1 @@\n-  __ load_klass(rdx, rax, tmp_load_klass);\n+  __ load_klass(rdx, rax, tmp_load_klass, false);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-  __ load_klass(recv_klass_reg, rcx, noreg);\n+  __ load_klass(recv_klass_reg, rcx, noreg, false);\n@@ -216,1 +216,1 @@\n-  __ load_klass(recv_klass_reg, rcx, noreg); \/\/ restore recv_klass_reg\n+  __ load_klass(recv_klass_reg, rcx, noreg, false); \/\/ restore recv_klass_reg\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_32.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  __ load_klass(rax, j_rarg0, tmp_load_klass);\n+  __ load_klass(rax, j_rarg0, tmp_load_klass, false);\n@@ -191,1 +191,1 @@\n-  __ load_klass(recv_klass_reg, j_rarg0, temp_reg);\n+  __ load_klass(recv_klass_reg, j_rarg0, temp_reg, false);\n@@ -209,1 +209,1 @@\n-  __ load_klass(recv_klass_reg, j_rarg0, temp_reg);   \/\/ restore recv_klass_reg\n+  __ load_klass(recv_klass_reg, j_rarg0, temp_reg, false);   \/\/ restore recv_klass_reg\n@@ -221,1 +221,1 @@\n-  const ptrdiff_t estimate = 136;\n+  const ptrdiff_t estimate = 199;\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1674,1 +1674,1 @@\n-    masm.load_klass(rscratch1, j_rarg0, rscratch2);\n+    masm.load_klass(rscratch1, j_rarg0, rscratch2, false);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -176,0 +177,5 @@\n+JRT_LEAF(Klass*, oopDesc::load_klass_runtime(oopDesc* o))\n+  assert(o != NULL, \"null-check\");\n+  return oop(o)->klass();\n+JRT_END\n+\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -313,0 +313,3 @@\n+  \/\/ Runtime entry\n+  static Klass* load_klass_runtime(oopDesc* o);\n+\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}