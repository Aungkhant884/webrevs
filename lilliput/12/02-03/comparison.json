{"files":[{"patch":"@@ -58,0 +58,1 @@\n+  assert(UseCompressedClassPointers, \"assume +UseCompressedClassPointers\");\n@@ -59,1 +60,1 @@\n-  assert(nklass == obj->narrow_klass(), \"narrow klass must match: header: \" PTR_FORMAT \", nklass: \" PTR_FORMAT, forwardee->mark().value(), uintptr_t(nklass));\n+  assert(nklass == obj->narrow_klass_legacy(), \"narrow klass must match: header: \" PTR_FORMAT \", nklass: \" PTR_FORMAT, forwardee->mark().value(), uintptr_t(nklass));\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,3 +51,3 @@\n-  markWord mrk = *this;\n-  if (mrk.has_displaced_mark_helper()) {\n-    mrk = mrk.displaced_mark_helper();\n+  markWord m = *this;\n+  if (m.has_displaced_mark_helper()) {\n+    m = m.displaced_mark_helper();\n@@ -55,1 +55,1 @@\n-  return CompressedKlassPointers::decode_not_null(mrk.narrow_klass());\n+  return CompressedKlassPointers::decode_not_null(m.narrow_klass());\n","filename":"src\/hotspot\/share\/oops\/markWord.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  narrowKlass narrow_klass() const { return _metadata._compressed_klass; }\n+  narrowKlass narrow_klass_legacy() const { return _metadata._compressed_klass; }\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    header =ObjectSynchronizer::stable_mark(cast_to_oop(this));\n+    header = ObjectSynchronizer::stable_mark(cast_to_oop(this));\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,19 +745,17 @@\n-  if (mark.is_neutral() || mark.is_marked()) {\n-    return mark;\n-  } else if (mark.has_monitor()) {\n-    ObjectMonitor* monitor = mark.monitor();\n-    mark = monitor->header();\n-    assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-    return mark;\n-  } else if (SafepointSynchronize::is_at_safepoint() || Thread::current()->is_lock_owned((address) mark.locker())) {\n-    \/\/ This is a stack lock owned by the calling thread so fetch the\n-    \/\/ displaced markWord from the BasicLock on the stack.\n-    mark = mark.displaced_mark_helper();\n-    assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-    return mark;\n-  } else {\n-    ObjectMonitor* monitor = inflate(Thread::current(), obj, inflate_cause_vm_internal);\n-    mark = monitor->header();\n-    assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-    assert(!mark.is_marked(), \"no forwarded objects here\");\n-    return mark;\n+  if (!mark.is_neutral() && !mark.is_marked()) {\n+    if (mark.has_monitor()) {\n+      ObjectMonitor* monitor = mark.monitor();\n+      mark = monitor->header();\n+      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n+    } else if (SafepointSynchronize::is_at_safepoint() || Thread::current()->is_lock_owned((address) mark.locker())) {\n+      \/\/ This is a stack lock owned by the calling thread so fetch the\n+      \/\/ displaced markWord from the BasicLock on the stack.\n+      assert(mark.has_displaced_mark_helper(), \"must be displaced header here\");\n+      mark = mark.displaced_mark_helper();\n+      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n+    } else {\n+      ObjectMonitor* monitor = inflate(Thread::current(), obj, inflate_cause_vm_internal);\n+      mark = monitor->header();\n+      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n+      assert(!mark.is_marked(), \"no forwarded objects here\");\n+    }\n@@ -765,0 +763,1 @@\n+  return mark;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"}]}