{"files":[{"patch":"@@ -108,1 +108,1 @@\n-    assert(!GCForwarding::is_forwarded(object), \"must not be forwarded\");\n+    assert(GCForwarding::is_not_forwarded(object), \"must not be forwarded\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -59,0 +58,1 @@\n+  assert(idx < _max_regions, \"region index must be within bounds\");\n","filename":"src\/hotspot\/share\/gc\/shared\/forwardingTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\/\/ - N bits to encode number of words from start of from region\n+\/\/ - N bits to encode number of words from start of from-region\n@@ -37,1 +37,1 @@\n-\/\/ from-region index is known implicitely.\n+\/\/ from-region index is known implicitly.\n@@ -107,1 +107,1 @@\n- * - When forwaring is finished, call end(). This will dispose all internal data structures.\n+ * - When forwarding is finished, call end(). This will dispose all internal data structures.\n@@ -127,1 +127,1 @@\n-#endif \/\/ SHARE_GC_SHARED_FORWARDINGABLE_HPP\n+#endif \/\/ SHARE_GC_SHARED_FORWARDINGTABLE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/forwardingTable.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-\/\/ When found, returns theindex into _table\n+\/\/ When found, returns the index into _table\n","filename":"src\/hotspot\/share\/gc\/shared\/forwardingTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-public:\n@@ -40,0 +39,1 @@\n+public:\n@@ -46,0 +46,1 @@\n+  static inline bool is_not_forwarded(oop obj);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,9 @@\n+inline bool GCForwarding::is_not_forwarded(oop obj) {\n+  if (UseCompactObjectHeaders) {\n+    assert(_forwarding_table != nullptr, \"expect forwarding table initialized\");\n+    return _forwarding_table->forwardee(obj) == nullptr;\n+  } else {\n+    return !obj->is_forwarded();\n+  }\n+}\n+\n@@ -54,1 +63,0 @@\n-    assert(is_forwarded(obj), \"must be forwarded\");\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.inline.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -107,2 +107,5 @@\n-    if (GenCollectedHeap::heap()->is_in_young(addr)) return (size_t)0;\n-    else return (size_t)1;\n+    if (GenCollectedHeap::heap()->is_in_young(addr)) {\n+      return (size_t)0;\n+    } else {\n+      return (size_t)1;\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-    assert(!GCForwarding::is_forwarded(q), \"should not be forwarded\");\n+    assert(GCForwarding::is_not_forwarded(q), \"should not be forwarded\");\n@@ -445,1 +445,1 @@\n-    if (!GCForwarding::is_forwarded(cast_to_oop(cur_obj))) {\n+    if (GCForwarding::is_not_forwarded(cast_to_oop(cur_obj))) {\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -955,1 +955,1 @@\n-      if (!GCForwarding::is_forwarded(old_obj)) {\n+      if (GCForwarding::is_not_forwarded(old_obj)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-  bool old_compact_headers = UseCompactObjectHeaders;\n-  UseCompactObjectHeaders = false;\n+  FlagSetting fs(UseCompactObjectHeaders, false);\n@@ -91,2 +90,0 @@\n-\n-  UseCompactObjectHeaders = old_compact_headers;\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_preservedMarks.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}