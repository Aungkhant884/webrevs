{"files":[{"patch":"@@ -80,4 +80,1 @@\n-\n-  markWord old_mark = ObjectSynchronizer::read_stable_mark(obj);\n-  assert(!old_mark.is_being_inflated(), \"must not see INFLATING marker here\");\n-\n+  markWord old_mark = obj->mark();\n@@ -88,4 +85,0 @@\n-  \/\/ Ensure that the copy has the correct mark-word, in case it happened to copy with\n-  \/\/ INFLATING marker.\n-  update->set_mark(old_mark);\n-\n@@ -93,12 +86,6 @@\n-  while (true) {\n-    markWord prev_mark = obj->cas_set_mark(new_mark, old_mark, memory_order_conservative);\n-    if (prev_mark == old_mark) {\n-      return update;\n-    } else if (prev_mark == markWord::INFLATING()) {\n-      \/\/ This happens when we encounter a stack-locked object in from-space.\n-      \/\/ Busy-wait for completion.\n-      SpinPause();\n-    } else {\n-      assert(prev_mark.is_marked(), \"must be forwarded\");\n-      return cast_to_oop(prev_mark.clear_lock_bits().to_pointer());\n-    }\n+  markWord prev_mark = obj->cas_set_mark(new_mark, old_mark, memory_order_conservative);\n+  if (prev_mark == old_mark) {\n+    return update;\n+  } else {\n+    assert(prev_mark.is_marked(), \"must be forwarded\");\n+    return cast_to_oop(prev_mark.clear_lock_bits().to_pointer());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahForwarding.inline.hpp","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"}]}