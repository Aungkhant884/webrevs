{"files":[{"patch":"@@ -658,5 +658,1 @@\n-  if (UseBitmapObjectMarker) {\n-    return new BitmapObjectMarker(_reserved);\n-  } else {\n-    return new HeaderObjectMarker();\n-  }\n+  return new HeaderObjectMarker();\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -696,5 +696,1 @@\n-          constraint(GCCardSizeInBytesConstraintFunc,AtParse)               \\\n-                                                                            \\\n-  develop(bool, UseBitmapObjectMarker, false,                               \\\n-          \"Use bitmap based ObjectMarker\")                                  \\\n-\n+          constraint(GCCardSizeInBytesConstraintFunc,AtParse)\n@@ -703,0 +699,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/markBitMap.inline.hpp\"\n@@ -28,2 +27,0 @@\n-#include \"logging\/log.hpp\"\n-#include \"memory\/virtualspace.hpp\"\n@@ -34,1 +31,0 @@\n-#include \"runtime\/os.hpp\"\n@@ -130,30 +126,0 @@\n-\n-BitmapObjectMarker::BitmapObjectMarker(MemRegion heap_region) :\n-  _mark_bit_map(),\n-  _bitmap_region() {\n-  size_t bitmap_size = MarkBitMap::compute_size(heap_region.byte_size());\n-  ReservedSpace bitmap(bitmap_size);\n-  _bitmap_region = MemRegion((HeapWord*) bitmap.base(), bitmap.size() \/ HeapWordSize);\n-  _mark_bit_map.initialize(heap_region, _bitmap_region);\n-\n-  os::commit_memory_or_exit((char*)_bitmap_region.start(), _bitmap_region.byte_size(), false,\n-                          \"Could not commit native memory for auxiliary marking bitmap for JVMTI object marking\");\n-  _mark_bit_map.clear();\n-}\n-\n-BitmapObjectMarker::~BitmapObjectMarker() {\n-  if (!os::uncommit_memory((char*)_bitmap_region.start(), _bitmap_region.byte_size())) {\n-    log_warning(gc)(\"Could not uncommit native memory for auxiliary marking bitmap for JVMTI object marking\");\n-  }\n-}\n-\n-void BitmapObjectMarker::mark(oop o) {\n-  assert(Universe::heap()->is_in(o), \"sanity check\");\n-  assert(!is_marked(o), \"should only mark an object once\");\n-  _mark_bit_map.mark(o);\n-}\n-\n-bool BitmapObjectMarker::is_marked(oop o) {\n-  assert(Universe::heap()->is_in(o), \"sanity check\");\n-  return _mark_bit_map.is_marked(o);\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/objectMarker.cpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shared\/markBitMap.hpp\"\n@@ -87,13 +86,0 @@\n-\/\/ Implementation that uses a bitmap.\n-class BitmapObjectMarker : public ObjectMarker {\n-private:\n-  MarkBitMap _mark_bit_map;\n-  MemRegion  _bitmap_region;\n-public:\n-  BitmapObjectMarker(MemRegion heap_region);\n-  ~BitmapObjectMarker();\n-\n-  void mark(oop o) override;\n-  bool is_marked(oop o) override;\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/objectMarker.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shared\/markBitMap.inline.hpp\"\n+#include \"gc\/shenandoah\/bitmapObjectMarker.hpp\"\n+#include \"logging\/log.hpp\"\n+#include \"memory\/virtualspace.hpp\"\n+#include \"runtime\/os.hpp\"\n+\n+BitmapObjectMarker::BitmapObjectMarker(MemRegion heap_region) :\n+        _mark_bit_map(),\n+        _bitmap_region() {\n+  size_t bitmap_size = MarkBitMap::compute_size(heap_region.byte_size());\n+  ReservedSpace bitmap(bitmap_size);\n+  _bitmap_region = MemRegion((HeapWord*) bitmap.base(), bitmap.size() \/ HeapWordSize);\n+  _mark_bit_map.initialize(heap_region, _bitmap_region);\n+\n+  os::commit_memory_or_exit((char*)_bitmap_region.start(), _bitmap_region.byte_size(), false,\n+                            \"Could not commit native memory for auxiliary marking bitmap for JVMTI object marking\");\n+  _mark_bit_map.clear();\n+}\n+\n+BitmapObjectMarker::~BitmapObjectMarker() {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start(), _bitmap_region.byte_size())) {\n+    log_warning(gc)(\"Could not uncommit native memory for auxiliary marking bitmap for JVMTI object marking\");\n+  }\n+}\n+\n+void BitmapObjectMarker::mark(oop o) {\n+  assert(Universe::heap()->is_in(o), \"sanity check\");\n+  assert(!is_marked(o), \"should only mark an object once\");\n+  _mark_bit_map.mark(o);\n+}\n+\n+bool BitmapObjectMarker::is_marked(oop o) {\n+  assert(Universe::heap()->is_in(o), \"sanity check\");\n+  return _mark_bit_map.is_marked(o);\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/bitmapObjectMarker.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_BITMAPOBJECTMARKER_HPP\n+#define SHARE_GC_SHENANDOAH_BITMAPOBJECTMARKER_HPP\n+\n+#include \"gc\/shared\/markBitMap.hpp\"\n+#include \"gc\/shared\/objectMarker.hpp\"\n+#include \"memory\/memRegion.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+\n+\/\/ Implementation that uses a bitmap.\n+class BitmapObjectMarker : public ObjectMarker {\n+private:\n+  MarkBitMap _mark_bit_map;\n+  MemRegion  _bitmap_region;\n+public:\n+  BitmapObjectMarker(MemRegion heap_region);\n+  ~BitmapObjectMarker();\n+\n+  void mark(oop o) override;\n+  bool is_marked(oop o) override;\n+};\n+\n+#endif \/\/ SHARE_GC_SHENANDOAH_BITMAPOBJECTMARKER_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/bitmapObjectMarker.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shared\/objectMarker.hpp\"\n@@ -39,0 +38,1 @@\n+#include \"gc\/shenandoah\/bitmapObjectMarker.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}