{"files":[{"patch":"@@ -148,5 +148,0 @@\n-  \/\/ When safely accessing the object header, deal with concurrently-forwarded\n-  \/\/ objects. This may change the obj argument to the forwarded object.\n-  \/\/ Returns true, if caller should retry (e.g. with forwarded object), false otherwise.\n-  virtual bool load_header_handle_forwarding(oop& obj, markWord header) const { return false; }\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahObjectUtils.inline.hpp\"\n@@ -34,0 +35,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -200,13 +202,0 @@\n-  Klass* obj_klass = obj->klass_or_null();\n-  if (obj_klass == NULL) {\n-    print_failure(_safe_unknown, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n-                  \"Object klass pointer should not be NULL\",\n-                  file,line);\n-  }\n-\n-  if (!Metaspace::contains(obj_klass)) {\n-    print_failure(_safe_unknown, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n-                  \"Object klass pointer must go to metaspace\",\n-                  file,line);\n-  }\n-\n@@ -232,6 +221,0 @@\n-    if (obj_klass != fwd->klass()) {\n-      print_failure(_safe_oop, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n-                    \"Forwardee klass disagrees with object class\",\n-                    file, line);\n-    }\n-\n@@ -253,0 +236,7 @@\n+\n+  Klass* obj_klass = ShenandoahObjectUtils::klass(fwd);\n+  if (!Metaspace::contains(obj_klass)) {\n+    print_failure(_safe_unknown, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n+                  \"Object klass pointer must go to metaspace\",\n+                  file,line);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -139,12 +139,0 @@\n-\n-bool ShenandoahBarrierSet::load_header_handle_forwarding(oop& obj, markWord header) const {\n-  assert(header.is_marked(), \"only forwarded objects here\");\n-  if (!_heap->is_full_gc_move_in_progress()) {\n-    oop fwd = cast_to_oop(header.decode_pointer());\n-    if (_heap->is_in(fwd)) {\n-      obj = fwd;\n-      return true;\n-    }\n-  }\n-  return false;\n- }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -84,2 +84,0 @@\n-  bool load_header_handle_forwarding(oop& obj, markWord header) const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,8 +35,0 @@\n-static inline markWord stable_mark(oop obj) {\n-  markWord mark = obj->mark();\n-  if (mark.is_neutral()) {\n-    return mark;\n-  }\n-  return ObjectSynchronizer::read_stable_mark(obj);\n-}\n-\n@@ -53,1 +45,1 @@\n-  markWord mark = stable_mark(obj);\n+  markWord mark = obj->mark();\n@@ -68,1 +60,1 @@\n-  markWord mark = stable_mark(obj);\n+  markWord mark = obj->mark();\n@@ -84,1 +76,1 @@\n-  return stable_mark(obj).is_marked();\n+  return obj->mark().is_marked();\n@@ -88,1 +80,1 @@\n-  markWord old_mark = stable_mark(obj);\n+  markWord old_mark = obj->mark();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahForwarding.inline.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1284,0 +1284,1 @@\n+  assert(SafepointSynchronize::is_at_safepoint(), \"can only safely iterate objects at safepoint\");\n@@ -1293,0 +1294,2 @@\n+  ShenandoahBarrierSet* const bs = ShenandoahBarrierSet::barrier_set();\n+\n@@ -1297,0 +1300,3 @@\n+    \/\/ We must not expose from-space oops to the rest of runtime, or else it\n+    \/\/ will call klass() on it, which might fail because of unexpected header.\n+    obj = bs->load_reference_barrier(obj);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"gc\/shenandoah\/shenandoahObjectUtils.inline.hpp\"\n@@ -48,0 +49,1 @@\n+#include \"runtime\/objectMonitor.inline.hpp\"\n@@ -299,1 +301,1 @@\n-  size_t size = p->size();\n+  size_t size = ShenandoahObjectUtils::size(p);\n@@ -516,1 +518,1 @@\n-    size_t size = obj->size();\n+    size_t size = ShenandoahObjectUtils::size(obj);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahObjectUtils.inline.hpp\"\n@@ -100,1 +101,1 @@\n-      if (is_instance_ref_klass(obj->klass())) {\n+      if (is_instance_ref_klass(ShenandoahObjectUtils::klass(obj))) {\n@@ -127,1 +128,1 @@\n-    Klass* obj_klass = obj->klass_or_null();\n+    Klass* obj_klass = ShenandoahObjectUtils::klass(obj);\n@@ -142,1 +143,1 @@\n-        check(ShenandoahAsserts::_safe_unknown, obj, (obj_addr + obj->size()) <= obj_reg->top(),\n+        check(ShenandoahAsserts::_safe_unknown, obj, (obj_addr + ShenandoahObjectUtils::size(obj)) <= obj_reg->top(),\n@@ -146,1 +147,1 @@\n-        size_t humongous_end = humongous_start + (obj->size() >> ShenandoahHeapRegion::region_size_words_shift());\n+        size_t humongous_end = humongous_start + (ShenandoahObjectUtils::size(obj) >> ShenandoahHeapRegion::region_size_words_shift());\n@@ -163,1 +164,1 @@\n-          Atomic::add(&_ld[obj_reg->index()], (uint) obj->size(), memory_order_relaxed);\n+          Atomic::add(&_ld[obj_reg->index()], (uint) ShenandoahObjectUtils::size(obj), memory_order_relaxed);\n@@ -204,1 +205,1 @@\n-      check(ShenandoahAsserts::_safe_oop, obj, (fwd_addr + fwd->size()) <= fwd_reg->top(),\n+      check(ShenandoahAsserts::_safe_oop, obj, (fwd_addr + ShenandoahObjectUtils::size(fwd)) <= fwd_reg->top(),\n@@ -307,1 +308,2 @@\n-    obj->oop_iterate(this);\n+    Klass* klass = ShenandoahObjectUtils::klass(obj);\n+    obj->oop_iterate(this, klass);\n@@ -587,1 +589,1 @@\n-    if (!is_instance_ref_klass(obj->klass())) {\n+    if (!is_instance_ref_klass(ShenandoahObjectUtils::klass(obj))) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -271,0 +271,3 @@\n+  template <typename OopClosureType>\n+  inline void oop_iterate(OopClosureType* cl, Klass* klass);\n+\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -384,0 +384,5 @@\n+template <typename OopClosureType>\n+void oopDesc::oop_iterate(OopClosureType* cl, Klass* klass) {\n+  OopIteratorClosureDispatch::oop_oop_iterate(cl, this, klass);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n@@ -736,1 +737,1 @@\n-markWord ObjectSynchronizer::read_stable_mark(const oop obj) {\n+static markWord read_stable_mark(const oop obj) {\n@@ -803,2 +804,0 @@\n-    assert(object != nullptr, \"null object\");\n-    assert(Universe::heap()->is_in(object), \"object not in heap: \" PTR_FORMAT, p2i(object));\n@@ -812,12 +811,2 @@\n-    \/\/ *  Marked       - object is forwarded, try again on forwardee (GC specific)\n-\n-    \/\/ CASE: Forwarded\n-    if (mark.is_marked()) {\n-      DEBUG_ONLY(oop orig = object;)\n-      if (BarrierSet::barrier_set()->load_header_handle_forwarding(object, mark)) {\n-        assert(orig != object, \"need to see forwarded object\");\n-        assert(object != nullptr, \"null object\");\n-        assert(Universe::heap()->is_in(object), \"object not in heap: \" PTR_FORMAT \", orig: \" PTR_FORMAT \", header: \" INTPTR_FORMAT, p2i(object), p2i(orig), mark.value());\n-        continue;\n-      }\n-    }\n+\n+    assert(!mark.is_marked() || !UseShenandoahGC || ShenandoahHeap::heap()->is_full_gc_in_progress(), \"should not see marked header here\");\n@@ -840,1 +829,0 @@\n-      read_stable_mark(object);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -187,1 +187,0 @@\n-  static markWord read_stable_mark(const oop obj);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}