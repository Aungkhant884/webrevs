{"files":[{"patch":"@@ -2,1 +2,0 @@\n-\n@@ -205,1 +204,0 @@\n-          --with-jvm-features=-shenandoahgc\n@@ -561,1 +559,0 @@\n-          --with-jvm-features=-shenandoahgc\n@@ -660,1 +657,0 @@\n-          --with-jvm-features=-shenandoahgc\n@@ -937,1 +933,0 @@\n-          --with-jvm-features=-shenandoahgc\n@@ -1050,1 +1045,0 @@\n-          --with-jvm-features=-shenandoahgc\n@@ -1358,1 +1352,0 @@\n-          --with-jvm-features=-shenandoahgc\n@@ -1460,1 +1453,0 @@\n-          --with-jvm-features=-shenandoahgc\n","filename":".github\/workflows\/submit.yml","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"oops\/markWord.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahObjectUtils.inline.hpp\"\n@@ -34,0 +35,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -200,13 +202,0 @@\n-  Klass* obj_klass = obj->klass_or_null();\n-  if (obj_klass == NULL) {\n-    print_failure(_safe_unknown, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n-                  \"Object klass pointer should not be NULL\",\n-                  file,line);\n-  }\n-\n-  if (!Metaspace::contains(obj_klass)) {\n-    print_failure(_safe_unknown, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n-                  \"Object klass pointer must go to metaspace\",\n-                  file,line);\n-  }\n-\n@@ -232,6 +221,0 @@\n-    if (obj_klass != fwd->klass()) {\n-      print_failure(_safe_oop, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n-                    \"Forwardee klass disagrees with object class\",\n-                    file, line);\n-    }\n-\n@@ -253,0 +236,7 @@\n+\n+  Klass* obj_klass = ShenandoahObjectUtils::klass(fwd);\n+  if (!Metaspace::contains(obj_klass)) {\n+    print_failure(_safe_unknown, obj, interior_loc, NULL, \"Shenandoah assert_correct failed\",\n+                  \"Object klass pointer must go to metaspace\",\n+                  file,line);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -46,3 +47,3 @@\n-    HeapWord* fwdptr = (HeapWord*) mark.clear_lock_bits().to_pointer();\n-    if (fwdptr != NULL) {\n-      return cast_to_oop(fwdptr);\n+    oop fwd = cast_to_oop(mark.decode_pointer());\n+    if (ShenandoahHeap::heap()->is_in(fwd)) {\n+      return fwd;\n@@ -84,6 +85,11 @@\n-  markWord new_mark = markWord::encode_pointer_as_mark(update);\n-  markWord prev_mark = obj->cas_set_mark(new_mark, old_mark, memory_order_conservative);\n-  if (prev_mark == old_mark) {\n-    return update;\n-  } else {\n-    return cast_to_oop(prev_mark.clear_lock_bits().to_pointer());\n+  while (true) {\n+    markWord new_mark = markWord::encode_pointer_as_mark(update);\n+    markWord prev_mark = obj->cas_set_mark(new_mark, old_mark, memory_order_conservative);\n+    if (prev_mark == old_mark) {\n+      return update;\n+    } else if (prev_mark == markWord::INFLATING()) {\n+      \/\/ This happens when we encounter a stack-locked object in from-space. Busy for completion.\n+      continue;\n+    } else {\n+      return cast_to_oop(prev_mark.clear_lock_bits().to_pointer());\n+    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahForwarding.inline.hpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -953,1 +953,1 @@\n-    if (!p->is_forwarded()) {\n+    if (!ShenandoahForwarding::is_forwarded(p)) {\n@@ -1284,0 +1284,1 @@\n+  assert(SafepointSynchronize::is_at_safepoint(), \"can only safely iterate objects at safepoint\");\n@@ -1293,0 +1294,2 @@\n+  ShenandoahBarrierSet* const bs = ShenandoahBarrierSet::barrier_set();\n+\n@@ -1297,0 +1300,3 @@\n+    \/\/ We must not expose from-space oops to the rest of runtime, or else it\n+    \/\/ will call klass() on it, which might fail because of unexpected header.\n+    obj = bs->load_reference_barrier(obj);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"gc\/shenandoah\/shenandoahObjectUtils.inline.hpp\"\n@@ -48,0 +49,1 @@\n+#include \"runtime\/objectMonitor.inline.hpp\"\n@@ -299,1 +301,1 @@\n-  size_t size = p->size();\n+  size_t size = ShenandoahObjectUtils::size(p);\n@@ -516,1 +518,1 @@\n-    size_t size = obj->size();\n+    size_t size = ShenandoahObjectUtils::size(obj);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahObjectUtils.inline.hpp\"\n@@ -100,1 +101,1 @@\n-      if (is_instance_ref_klass(obj->klass())) {\n+      if (is_instance_ref_klass(ShenandoahObjectUtils::klass(obj))) {\n@@ -127,1 +128,1 @@\n-    Klass* obj_klass = obj->klass_or_null();\n+    Klass* obj_klass = ShenandoahObjectUtils::klass(obj);\n@@ -142,1 +143,1 @@\n-        check(ShenandoahAsserts::_safe_unknown, obj, (obj_addr + obj->size()) <= obj_reg->top(),\n+        check(ShenandoahAsserts::_safe_unknown, obj, (obj_addr + ShenandoahObjectUtils::size(obj)) <= obj_reg->top(),\n@@ -146,1 +147,1 @@\n-        size_t humongous_end = humongous_start + (obj->size() >> ShenandoahHeapRegion::region_size_words_shift());\n+        size_t humongous_end = humongous_start + (ShenandoahObjectUtils::size(obj) >> ShenandoahHeapRegion::region_size_words_shift());\n@@ -163,1 +164,1 @@\n-          Atomic::add(&_ld[obj_reg->index()], (uint) obj->size(), memory_order_relaxed);\n+          Atomic::add(&_ld[obj_reg->index()], (uint) ShenandoahObjectUtils::size(obj), memory_order_relaxed);\n@@ -204,1 +205,1 @@\n-      check(ShenandoahAsserts::_safe_oop, obj, (fwd_addr + fwd->size()) <= fwd_reg->top(),\n+      check(ShenandoahAsserts::_safe_oop, obj, (fwd_addr + ShenandoahObjectUtils::size(fwd)) <= fwd_reg->top(),\n@@ -307,1 +308,2 @@\n-    obj->oop_iterate(this);\n+    Klass* klass = ShenandoahObjectUtils::klass(obj);\n+    obj->oop_iterate(this, klass);\n@@ -587,1 +589,1 @@\n-    if (!is_instance_ref_klass(obj->klass())) {\n+    if (!is_instance_ref_klass(ShenandoahObjectUtils::klass(obj))) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -337,1 +337,1 @@\n-  product(bool, ShenandoahSuspendibleWorkers, false, EXPERIMENTAL,          \\\n+  product(bool, ShenandoahSuspendibleWorkers, true, EXPERIMENTAL,           \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-    return ((value() & monitor_value) != 0);\n+    return ((value() & lock_mask_in_place) == monitor_value);\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,0 +271,3 @@\n+  template <typename OopClosureType>\n+  inline void oop_iterate(OopClosureType* cl, Klass* klass);\n+\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -384,0 +384,5 @@\n+template <typename OopClosureType>\n+void oopDesc::oop_iterate(OopClosureType* cl, Klass* klass) {\n+  OopIteratorClosureDispatch::oop_oop_iterate(cl, this, klass);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -60,0 +61,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n@@ -735,1 +737,1 @@\n-static markWord read_stable_mark(oop obj) {\n+static markWord read_stable_mark(const oop obj) {\n@@ -800,1 +802,1 @@\n-markWord ObjectSynchronizer::safe_load_mark(oop object) {\n+markWord ObjectSynchronizer::stable_mark(oop object) {\n@@ -810,0 +812,2 @@\n+    assert(!mark.is_marked() || !UseShenandoahGC || ShenandoahHeap::heap()->is_full_gc_in_progress(), \"should not see marked header here\");\n+\n@@ -814,1 +818,1 @@\n-      assert(dmw.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, dmw.value());\n+      assert(dmw.is_neutral(), \"invariant: header=\" INTPTR_FORMAT \", original mark: \" INTPTR_FORMAT, dmw.value(), mark.value());\n@@ -825,1 +829,0 @@\n-      read_stable_mark(object);\n@@ -863,1 +866,1 @@\n-    assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n+    assert(mark.is_neutral() || mark.is_marked(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n@@ -868,22 +871,0 @@\n-markWord ObjectSynchronizer::stable_mark(const oop obj) {\n-  markWord mark = read_stable_mark(obj);\n-  if (!mark.is_neutral() && !mark.is_marked()) {\n-    if (mark.has_monitor()) {\n-      ObjectMonitor* monitor = mark.monitor();\n-      mark = monitor->header();\n-      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-    } else if (SafepointSynchronize::is_at_safepoint() || Thread::current()->is_lock_owned((address) mark.locker())) {\n-      \/\/ This is a stack lock owned by the calling thread so fetch the\n-      \/\/ displaced markWord from the BasicLock on the stack.\n-      assert(mark.has_displaced_mark_helper(), \"must be displaced header here\");\n-      mark = mark.displaced_mark_helper();\n-      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-    } else {\n-      mark = safe_load_mark(obj);\n-      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-      assert(!mark.is_marked(), \"no forwarded objects here\");\n-    }\n-  }\n-  return mark;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":8,"deletions":27,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -182,2 +182,0 @@\n-  static markWord safe_load_mark(oop obj);\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}