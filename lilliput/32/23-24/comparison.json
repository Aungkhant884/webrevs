{"files":[{"patch":"@@ -80,0 +80,11 @@\n+  markWord old_mark = ObjectSynchronizer::read_stable_mark(obj);\n+  assert(!old_mark.is_being_inflated(), \"must not see INFLATING marker here\");\n+\n+  if (old_mark.is_marked()) {\n+    return cast_to_oop(old_mark.clear_lock_bits().to_pointer());\n+  }\n+\n+  \/\/ Ensure that the copy has the correct mark-word, in case it happened to copy with\n+  \/\/ INFLATING marker.\n+  update->set_mark(old_mark);\n+\n@@ -81,1 +92,0 @@\n-  markWord old_mark = obj->mark();\n@@ -83,9 +93,0 @@\n-    if (old_mark.is_marked()) {\n-      return cast_to_oop(old_mark.clear_lock_bits().to_pointer());\n-    }\n-    if (old_mark.is_being_inflated()) {\n-      \/\/ Inflating - this can only happen when concurrent evacuating thread tries to read\n-      \/\/ the header for fetching the object Klass*\/size. Retry.\n-      old_mark = obj->mark();\n-      continue;\n-    }\n@@ -98,0 +99,1 @@\n+      SpinPause();\n@@ -100,0 +102,1 @@\n+      assert(prev_mark.is_marked(), \"must be forwarded\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahForwarding.inline.hpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -735,1 +735,1 @@\n-static markWord read_stable_mark(oop obj) {\n+markWord ObjectSynchronizer::read_stable_mark(oop obj) {\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,0 +187,3 @@\n+  \/\/ Read mark-word and spin-wait as long as INFLATING is observed.\n+  static markWord read_stable_mark(oop obj);\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}