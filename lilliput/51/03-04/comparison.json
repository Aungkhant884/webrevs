{"files":[{"patch":"@@ -719,1 +719,1 @@\n-  product(intx, hashCode, 5, EXPERIMENTAL,                                  \\\n+  product(intx, hashCode, 6, EXPERIMENTAL,                                  \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -732,0 +732,37 @@\n+static inline uint32_t rotl32(uint32_t x, int8_t r) {\n+    return (x << r) | (x >> (32 - r));\n+}\n+\n+static uint32_t mix32(uint32_t k, uint32_t h) {\n+    const uint32_t c1 = 0xcc9e2d51;\n+    const uint32_t c2 = 0x1b873593;\n+    k *= c1;\n+    k = rotl32(k, 15);\n+    k *= c2;\n+    h ^= k;\n+    return rotl32(h, 13) * 5 + 0xe6546b64;\n+}\n+\n+static uint32_t fmix32(uint32_t h) {\n+    h ^= (h >> 16);\n+    h *= 0x85ebca6b;\n+    h ^= (h >> 13);\n+    h *= 0xc2b2ae35;\n+    h ^= (h >> 16);\n+    return h;\n+}\n+\n+#define DEFAULT_SEED 104729\n+\n+static inline uint32_t murmur3_32(uintptr_t r0) {\n+    uint32_t h1 = DEFAULT_SEED;\n+    h1 = mix32((uint32_t) r0, h1);\n+#ifdef _LP64\n+    h1 = mix32((uint32_t)(r0 >> 32), h1);\n+#endif\n+\n+    h1 ^= sizeof(r0);\n+    h1 = fmix32(h1);\n+    return h1;\n+}\n+\n@@ -751,0 +788,7 @@\n+  \/\/ NOTE: The hash-code produced here must be idempotent. Otherwise we may get a race\n+  \/\/ when two threads try to generate and install a hash-code: One may install a hashCode\n+  \/\/ into the object's header, while the other thread is inflating a monitor, which could\n+  \/\/ then grab the not-yet-hashed header. Subsequent attempts to get a hash-code would\n+  \/\/ generate a new hash-code, which would be incorrect if the hash-code is not idempotent\n+  \/\/ between safepoints.\n+  \/\/ TODO: Eliminate non-idempotent hashCodes, or the hashCode flag altogether.\n@@ -755,0 +799,1 @@\n+    warning(\"hashCode=1 (RNG) may produce incorrect identity hashCode\");\n@@ -765,0 +810,1 @@\n+    warning(\"hashCode=3 (sequence) may produce incorrect identity hashCode\");\n@@ -768,1 +814,2 @@\n-  } else {\n+  } else if (hashCode == 5) {\n+    warning(\"hashCode=5 (thread-local RNG) may produce incorrect identity hashCode\");\n@@ -781,0 +828,2 @@\n+  } else {\n+    value = murmur3_32(cast_from_oop<uintptr_t>(obj));\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"}]}