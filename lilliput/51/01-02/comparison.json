{"files":[{"patch":"@@ -1498,11 +1498,0 @@\n-void Assembler::andb(Register dst, int imm8) {\n-  NOT_LP64(assert(dst->has_byte_register(), \"must have byte register\"));\n-  if (dst == rax) {\n-    emit_int8((unsigned char)0x24);\n-    emit_int8(imm8);\n-  } else {\n-    (void) prefix_and_encode(dst->encoding(), true);\n-    emit_arith_b(0x80, 0xC0, dst, imm8);\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1012,1 +1012,0 @@\n-  void andb(Register dst, int imm8);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  andb(disp_hdr, ~0x3); \/\/ Clear lowest two bits. 8-bit AND preserves upper bits.\n+  andptr(disp_hdr, ~(int32_t)markWord::lock_mask_in_place);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1283,1 +1283,1 @@\n-    andb(swap_reg, ~0x3); \/\/ Clear lowest two bits. 8-bit AND preserves upper bits.\n+    andptr(swap_reg, ~(int32_t)markWord::lock_mask_in_place);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9455,2 +9455,2 @@\n-  \/\/ hdr lowest two bits are either 00 or 01 here. Make it 01.\n-  orptr(hdr, markWord::unlocked_value);\n+  \/\/ Clear lowest two header bits (locked state).\n+  andptr(hdr, ~(int32_t )markWord::lock_mask_in_place);\n@@ -9458,2 +9458,2 @@\n-  \/\/ Clear lowest two bits: we have 01 (see above), now flip the lowest to get 00.\n-  xorptr(locked_hdr, markWord::unlocked_value);\n+  \/\/ Set lowest bit (unlocked state).\n+  orptr(hdr, markWord::unlocked_value);\n@@ -9483,1 +9483,1 @@\n-  jcc(Assembler::notZero, slow); \/\/ ZF = 0 also indicates failure at DONE_LABEL\n+  jcc(Assembler::notZero, slow);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1825,1 +1825,1 @@\n-      __ andb(swap_reg, ~0x3); \/\/ Clear lowest two bits. 8-bit AND preserves upper bits.\n+      __ andptr(swap_reg, ~(int32_t)markWord::lock_mask_in_place);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2023,1 +2023,1 @@\n-      __ andb(swap_reg, ~0x3); \/\/ Clear lowest two bits. 8-bit AND preserves upper bits.\n+      __ andptr(swap_reg, ~(int32_t)markWord::lock_mask_in_place);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}