{"files":[{"patch":"@@ -3075,0 +3075,1 @@\n+  Register tmp2 = LP64_ONLY(rscratch2) NOT_LP64(noreg);\n@@ -3199,0 +3200,1 @@\n+#ifndef _LP64\n@@ -3201,1 +3203,1 @@\n-\n+#endif\n@@ -3266,7 +3268,8 @@\n-      if (UseCompressedClassPointers) {\n-        __ movl(tmp, src_klass_addr);\n-        __ cmpl(tmp, dst_klass_addr);\n-      } else {\n-        __ movptr(tmp, src_klass_addr);\n-        __ cmpptr(tmp, dst_klass_addr);\n-      }\n+#ifdef _LP64\n+      __ load_nklass(tmp, src);\n+      __ load_nklass(tmp2, dst);\n+      __ cmpl(tmp, tmp2);\n+#else\n+      __ movptr(tmp, src_klass_addr);\n+      __ cmpptr(tmp, dst_klass_addr);\n+#endif\n@@ -3428,5 +3431,2 @@\n-    if (UseCompressedClassPointers) {\n-      __ encode_klass_not_null(tmp, rscratch1);\n-    }\n-#endif\n-\n+    assert(UseCompressedClassPointers, \"Lilliput\");\n+    __ encode_klass_not_null(tmp, rscratch1);\n@@ -3434,3 +3434,2 @@\n-\n-      if (UseCompressedClassPointers)          __ cmpl(tmp, dst_klass_addr);\n-      else                   __ cmpptr(tmp, dst_klass_addr);\n+      __ load_nklass(tmp2, dst);\n+      __ cmpl(tmp, tmp2);\n@@ -3438,2 +3437,2 @@\n-      if (UseCompressedClassPointers)          __ cmpl(tmp, src_klass_addr);\n-      else                   __ cmpptr(tmp, src_klass_addr);\n+      __ load_nklass(tmp2, src);\n+      __ cmpl(tmp, tmp2);\n@@ -3442,2 +3441,11 @@\n-      if (UseCompressedClassPointers)          __ cmpl(tmp, dst_klass_addr);\n-      else                   __ cmpptr(tmp, dst_klass_addr);\n+      __ load_nklass(tmp2, dst);\n+      __ cmpl(tmp, tmp2);\n+#else\n+    if (basic_type != T_OBJECT) {\n+      __ cmpptr(tmp, dst_klass_addr);\n+      __ jcc(Assembler::notEqual, halt);\n+      __ cmpptr(tmp, src_klass_addr);\n+      __ jcc(Assembler::equal, known_ok);\n+    } else {\n+      __ cmpptr(tmp, dst_klass_addr);\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":28,"deletions":20,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -4553,3 +4553,0 @@\n-void MacroAssembler::load_klass(Register dst, Register src, Register tmp, bool null_check_src) {\n-  assert_different_registers(src, tmp);\n-  assert_different_registers(dst, tmp);\n@@ -4557,0 +4554,2 @@\n+void MacroAssembler::load_nklass(Register dst, Register src) {\n+  assert_different_registers(src, dst);\n@@ -4560,4 +4559,1 @@\n-  if (null_check_src) {\n-    null_check(src, oopDesc::mark_offset_in_bytes());\n-  }\n-  movq(tmp, Address(src, oopDesc::mark_offset_in_bytes()));\n+  movq(dst, Address(src, oopDesc::mark_offset_in_bytes()));\n@@ -4567,2 +4563,2 @@\n-  xorq(tmp, markWord::unlocked_value);\n-  testb(tmp, markWord::lock_mask_in_place);\n+  xorq(dst, markWord::unlocked_value);\n+  testb(dst, markWord::lock_mask_in_place);\n@@ -4571,1 +4567,0 @@\n-  movq(dst, tmp);\n@@ -4579,19 +4574,4 @@\n-  push(rdi);\n-  push(rsi);\n-  push(rdx);\n-  push(rcx);\n-  push(r8);\n-  push(r9);\n-  push(r10);\n-  push(r11);\n-\n-  MacroAssembler::call_VM_leaf(CAST_FROM_FN_PTR(address, oopDesc::load_nklass_runtime), src);\n-\n-  pop(r11);\n-  pop(r10);\n-  pop(r9);\n-  pop(r8);\n-  pop(rcx);\n-  pop(rdx);\n-  pop(rsi);\n-  pop(rdi);\n+  if (src != rax) {\n+    mov(rax, src);\n+  }\n+  call(RuntimeAddress(StubRoutines::load_nklass()));\n@@ -4604,0 +4584,19 @@\n+}\n+#endif\n+\n+void MacroAssembler::load_klass(Register dst, Register src, Register tmp, bool null_check_src) {\n+  assert_different_registers(src, tmp);\n+  assert_different_registers(dst, tmp);\n+#ifdef _LP64\n+  assert(UseCompressedClassPointers, \"expect compressed class pointers\");\n+  Register d = dst;\n+  if (src == dst) {\n+    d = tmp;\n+  }\n+  if (null_check_src) {\n+    null_check(src, oopDesc::mark_offset_in_bytes());\n+  }\n+  load_nklass(d, src);\n+  if (src == dst) {\n+    mov(dst, d);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":28,"deletions":29,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -366,0 +366,3 @@\n+#ifdef _LP64\n+  void load_nklass(Register dst, Register src);\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7438,0 +7438,40 @@\n+  \/\/ Call stub to call runtime oopDesc::load_nklass_runtime().\n+  \/\/ rax: call argument (object)\n+  \/\/ rax: return object's narrowKlass\n+  \/\/ Preserves all caller-saved registers, except rax\n+#ifdef _LP64\n+  address generate_load_nklass() {\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark(this, \"StubRoutines\", \"load_nklass\");\n+    address start = __ pc();\n+    __ enter(); \/\/ save rbp\n+\n+    __ andptr(rsp, -(StackAlignmentInBytes));    \/\/ Align stack\n+    __ push_FPU_state();\n+\n+    __ push(rdi);\n+    __ push(rsi);\n+    __ push(rdx);\n+    __ push(rcx);\n+    __ push(r8);\n+    __ push(r9);\n+    __ push(r10);\n+    __ push(r11);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, oopDesc::load_nklass_runtime), rax);\n+    __ pop(r11);\n+    __ pop(r10);\n+    __ pop(r9);\n+    __ pop(r8);\n+    __ pop(rcx);\n+    __ pop(rdx);\n+    __ pop(rsi);\n+    __ pop(rdi);\n+\n+    __ pop_FPU_state();\n+\n+    __ leave();\n+    __ ret(0);\n+    return start;\n+  }\n+#endif \/\/ _LP64\n+\n@@ -7664,0 +7704,4 @@\n+\n+#ifdef _LP64\n+    StubRoutines::_load_nklass = generate_load_nklass();\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-  const ptrdiff_t estimate = 230;\n+  const ptrdiff_t estimate = 149;\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}