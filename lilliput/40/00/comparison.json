{"files":[{"patch":"@@ -406,2 +406,0 @@\n-          - hs s390x build only\n-          - hs ppc64le build only\n@@ -426,8 +424,0 @@\n-          - flavor: hs s390x build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: s390x\n-            gnu-arch: s390x\n-          - flavor: hs ppc64le build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: ppc64el\n-            gnu-arch: powerpc64le\n","filename":".github\/workflows\/submit.yml","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -7609,1 +7609,1 @@\n-    assert($mem$$disp == oopDesc::nklass_offset_in_bytes(), \"expect correct offset\");\n+    assert($mem$$disp == oopDesc::klass_offset_in_bytes(), \"expect correct offset\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,7 +167,0 @@\n-  if (UseCompressedClassPointers) { \/\/ Take care not to kill klass\n-    encode_klass_not_null(t1, klass);\n-    strw(t1, Address(obj, oopDesc::klass_offset_in_bytes()));\n-  } else {\n-    str(klass, Address(obj, oopDesc::klass_offset_in_bytes()));\n-  }\n-\n@@ -176,2 +169,0 @@\n-  } else if (UseCompressedClassPointers) {\n-    store_klass_gap(obj, zr);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3788,18 +3788,0 @@\n-void MacroAssembler::store_klass(Register dst, Register src) {\n-  \/\/ FIXME: Should this be a store release?  concurrent gcs assumes\n-  \/\/ klass length is valid if klass field is not null.\n-  if (UseCompressedClassPointers) {\n-    encode_klass_not_null(src);\n-    strw(src, Address(dst, oopDesc::klass_offset_in_bytes()));\n-  } else {\n-    str(src, Address(dst, oopDesc::klass_offset_in_bytes()));\n-  }\n-}\n-\n-void MacroAssembler::store_klass_gap(Register dst, Register src) {\n-  if (UseCompressedClassPointers) {\n-    \/\/ Store to klass gap in destination\n-    strw(src, Address(dst, oopDesc::klass_gap_offset_in_bytes()));\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -827,1 +827,0 @@\n-  void store_klass(Register dst, Register src);\n@@ -853,2 +852,0 @@\n-  void store_klass_gap(Register dst, Register src);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -596,2 +596,2 @@\n-    assert(oopDesc::nklass_offset_in_bytes() % 4 == 0, \"must be 4 byte aligned\");\n-    __ ldrw(r0, Address(r0, oopDesc::nklass_offset_in_bytes()));  \/\/ get klass\n+    assert(oopDesc::klass_offset_in_bytes() % 4 == 0, \"must be 4 byte aligned\");\n+    __ ldrw(r0, Address(r0, oopDesc::klass_offset_in_bytes()));  \/\/ get klass\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3558,2 +3558,0 @@\n-    __ store_klass_gap(r0, zr);  \/\/ zero klass gap for compressed oops\n-    __ store_klass(r0, r4);      \/\/ store klass last\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,6 +147,2 @@\n-#ifdef _LP64\n-  if (UseCompressedClassPointers) { \/\/ Take care not to kill klass\n-    movptr(t1, klass);\n-    encode_klass_not_null(t1, tmp_encode_klass);\n-    movl(Address(obj, oopDesc::klass_offset_in_bytes()), t1);\n-  } else\n+#ifndef _LP64\n+  movptr(Address(obj, oopDesc::klass_offset_in_bytes()), klass);\n@@ -154,3 +150,0 @@\n-  {\n-    movptr(Address(obj, oopDesc::klass_offset_in_bytes()), klass);\n-  }\n@@ -161,6 +154,0 @@\n-#ifdef _LP64\n-  else if (UseCompressedClassPointers) {\n-    xorptr(t1, t1);\n-    store_klass_gap(obj, t1);\n-  }\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4633,10 +4633,3 @@\n-void MacroAssembler::store_klass(Register dst, Register src, Register tmp) {\n-  assert_different_registers(src, tmp);\n-  assert_different_registers(dst, tmp);\n-#ifdef _LP64\n-  if (UseCompressedClassPointers) {\n-    encode_klass_not_null(src, tmp);\n-    movl(Address(dst, oopDesc::klass_offset_in_bytes()), src);\n-  } else\n-#endif\n-    movptr(Address(dst, oopDesc::klass_offset_in_bytes()), src);\n+#ifndef _LP64\n+void MacroAssembler::store_klass(Register dst, Register src) {\n+  movptr(Address(dst, oopDesc::klass_offset_in_bytes()), src);\n@@ -4644,0 +4637,1 @@\n+#endif\n@@ -4691,7 +4685,0 @@\n-void MacroAssembler::store_klass_gap(Register dst, Register src) {\n-  if (UseCompressedClassPointers) {\n-    \/\/ Store to klass gap in destination\n-    movl(Address(dst, oopDesc::klass_gap_offset_in_bytes()), src);\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -368,0 +368,2 @@\n+#else\n+  void store_klass(Register dst, Register src);\n@@ -369,1 +371,0 @@\n-  void store_klass(Register dst, Register src, Register tmp);\n@@ -388,2 +389,0 @@\n-  void store_klass_gap(Register dst, Register src);\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4026,3 +4026,2 @@\n-#ifdef _LP64\n-    __ xorl(rsi, rsi); \/\/ use zero reg to clear memory (shorter code)\n-    __ store_klass_gap(rax, rsi);  \/\/ zero klass gap for compressed oops\n+#ifndef _LP64\n+    __ store_klass(rax, rcx);  \/\/ klass\n@@ -4030,2 +4029,0 @@\n-    Register tmp_store_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-    __ store_klass(rax, rcx, tmp_store_klass);  \/\/ klass\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5299,1 +5299,1 @@\n-    assert($mem$$disp == oopDesc::nklass_offset_in_bytes(), \"expect correct offset 4, but got: %d\", $mem$$disp);\n+    assert($mem$$disp == oopDesc::klass_offset_in_bytes(), \"expect correct offset 4, but got: %d\", $mem$$disp);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -835,1 +835,0 @@\n-  o->set_narrow_klass(nk);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -449,0 +449,1 @@\n+#ifndef _LP64\n@@ -450,0 +451,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -390,1 +390,1 @@\n-    HeapWord* test_addr = cast_from_oop<HeapWord*>(obj) + 1;\n+    HeapWord* test_addr = cast_from_oop<HeapWord*>(obj);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -688,1 +688,0 @@\n-        assert(nklass == obj->narrow_klass_legacy(), \"narrow klass must match: header: \" PTR_FORMAT \", nklass: \" PTR_FORMAT, forwardee->mark().value(), uintptr_t(nklass));\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -379,1 +379,0 @@\n-  oopDesc::set_klass_gap(mem, 0);\n@@ -385,1 +384,0 @@\n-  oopDesc::set_mark(mem, _klass->prototype_header());\n@@ -389,0 +387,4 @@\n+#ifdef _LP64\n+  oopDesc::release_set_mark(mem, _klass->prototype_header());\n+#else\n+  oopDesc::set_mark(mem, _klass->prototype_header());\n@@ -390,0 +392,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1947,0 +1947,3 @@\n+#ifdef _LP64\n+              oopDesc::release_set_mark(result, ik->prototype_header());\n+#else\n@@ -1948,1 +1951,0 @@\n-              oopDesc::set_klass_gap(result, 0);\n@@ -1950,1 +1952,1 @@\n-\n+#endif\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -267,1 +267,0 @@\n-  volatile_nonstatic_field(oopDesc,            _metadata._klass,                              Klass*)                                \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,2 +82,1 @@\n-    return UseCompressedClassPointers ? klass_gap_offset_in_bytes() :\n-                               sizeof(arrayOopDesc);\n+    return sizeof(arrayOopDesc);\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,4 +41,1 @@\n-    return (UseCompressedClassPointers) ?\n-            klass_gap_offset_in_bytes() :\n-            sizeof(instanceOopDesc);\n-\n+    return sizeof(instanceOopDesc);\n","filename":"src\/hotspot\/share\/oops\/instanceOop.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -144,13 +144,0 @@\n-bool oopDesc::has_klass_gap() {\n-  \/\/ Only has a klass gap when compressed class pointers are used.\n-  return UseCompressedClassPointers;\n-}\n-\n-#if INCLUDE_CDS_JAVA_HEAP\n-void oopDesc::set_narrow_klass(narrowKlass nk) {\n-  assert(DumpSharedSpaces, \"Used by CDS only. Do not abuse!\");\n-  assert(UseCompressedClassPointers, \"must be\");\n-  _metadata._compressed_klass = nk;\n-}\n-#endif\n-\n@@ -158,7 +145,8 @@\n-  if (UseCompressedClassPointers) {\n-    narrowKlass narrow_klass = obj->_metadata._compressed_klass;\n-    if (narrow_klass == 0) return NULL;\n-    return (void*)CompressedKlassPointers::decode_raw(narrow_klass);\n-  } else {\n-    return obj->_metadata._klass;\n-  }\n+  \/\/ TODO: Remove method altogether and replace with calls to obj->klass() ?\n+  \/\/ OTOH, we may eventually get rid of locking in header, and then no\n+  \/\/ longer have to deal with that anymore.\n+#ifdef _LP64\n+  return obj->klass();\n+#else\n+  return obj->_klass;\n+#endif\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":8,"deletions":20,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -58,4 +58,3 @@\n-  union _metadata {\n-    Klass*      _klass;\n-    narrowKlass _compressed_klass;\n-  } _metadata;\n+#ifndef _LP64\n+  Klass*            _klass;\n+#endif\n@@ -79,0 +78,1 @@\n+  static inline void release_set_mark(HeapWord* mem, markWord m);\n@@ -90,2 +90,1 @@\n-  narrowKlass narrow_klass_legacy() const { return _metadata._compressed_klass; }\n-  void set_narrow_klass(narrowKlass nk) NOT_CDS_JAVA_HEAP_RETURN;\n+#ifndef _LP64\n@@ -94,3 +93,1 @@\n-\n-  \/\/ For klass field compression\n-  static inline void set_klass_gap(HeapWord* mem, int z);\n+#endif\n@@ -304,2 +301,0 @@\n-  static bool has_klass_gap();\n-\n@@ -308,1 +303,1 @@\n-  static int nklass_offset_in_bytes()    {\n+  static int klass_offset_in_bytes()     {\n@@ -313,1 +308,1 @@\n-    return klass_offset_in_bytes();\n+    return offset_of(oopDesc, _klass);\n@@ -316,5 +311,0 @@\n-  static int klass_offset_in_bytes()     { return offset_of(oopDesc, _metadata._klass); }\n-  static int klass_gap_offset_in_bytes() {\n-    assert(has_klass_gap(), \"only applicable to compressed klass pointers\");\n-    return klass_offset_in_bytes() + sizeof(narrowKlass);\n-  }\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -74,0 +74,4 @@\n+void oopDesc::release_set_mark(HeapWord* mem, markWord m) {\n+  Atomic::release_store((markWord*)(((char*)mem) + mark_offset_in_bytes()), m);\n+}\n+\n@@ -85,1 +89,0 @@\n-  assert(_metadata._compressed_klass == header.narrow_klass(), \"klass must match: \" PTR_FORMAT, header.value());\n@@ -101,4 +104,1 @@\n-  assert(_metadata._compressed_klass == header.narrow_klass(), \"narrow klass must be equal, header: \" INTPTR_FORMAT \", nklass: \" INTPTR_FORMAT, header.value(), intptr_t(_metadata._compressed_klass));\n-  Klass* klass = header.klass();\n-  assert(klass == CompressedKlassPointers::decode_not_null(_metadata._compressed_klass), \"klass must match: header: \" INTPTR_FORMAT \", nklass: \" INTPTR_FORMAT, header.value(), intptr_t(_metadata._compressed_klass));\n-  return klass;\n+  return header.klass();\n@@ -106,1 +106,1 @@\n-  return _metadata._klass;\n+  return _klass;\n@@ -117,4 +117,1 @@\n-  assert(_metadata._compressed_klass == header.narrow_klass(), \"narrow klass must be equal, header: \" INTPTR_FORMAT \", nklass: \" INTPTR_FORMAT, header.value(), intptr_t(_metadata._compressed_klass));\n-  Klass* klass = header.klass_or_null();\n-  assert(klass == CompressedKlassPointers::decode(_metadata._compressed_klass), \"klass must match: header: \" INTPTR_FORMAT \", nklass: \" INTPTR_FORMAT, header.value(), intptr_t(_metadata._compressed_klass));\n-  return klass;\n+  return header.klass_or_null();\n@@ -122,1 +119,1 @@\n-  return _metadata._klass;\n+  return _klass;\n@@ -133,4 +130,1 @@\n-  assert(_metadata._compressed_klass == header.narrow_klass(), \"narrow klass must be equal, header: \" INTPTR_FORMAT \", nklass: \" INTPTR_FORMAT, header.value(), intptr_t(_metadata._compressed_klass));\n-  Klass* klass = header.klass_or_null();\n-  assert(klass == CompressedKlassPointers::decode(_metadata._compressed_klass), \"klass must match: header: \" INTPTR_FORMAT \", nklass: \" INTPTR_FORMAT, header.value(), intptr_t(_metadata._compressed_klass));\n-  return klass;\n+  return header.klass_or_null();\n@@ -138,1 +132,1 @@\n-  return Atomic::load_acquire(&_metadata._klass);\n+  return Atomic::load_acquire(&_klass);\n@@ -142,0 +136,1 @@\n+#ifndef _LP64\n@@ -144,5 +139,1 @@\n-  if (UseCompressedClassPointers) {\n-    _metadata._compressed_klass = CompressedKlassPointers::encode_not_null(k);\n-  } else {\n-    _metadata._klass = k;\n-  }\n+  _klass = k;\n@@ -161,6 +152,1 @@\n-\n-void oopDesc::set_klass_gap(HeapWord* mem, int v) {\n-  if (UseCompressedClassPointers) {\n-    *(int*)(((char*)mem) + klass_gap_offset_in_bytes()) = v;\n-  }\n-}\n+#endif\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":13,"deletions":27,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1319,1 +1319,1 @@\n-      } else if( offset == oopDesc::nklass_offset_in_bytes() ) {\n+      } else if( offset == oopDesc::klass_offset_in_bytes() ) {\n@@ -1491,1 +1491,1 @@\n-          (offset == oopDesc::nklass_offset_in_bytes() && tj->base() == Type::AryPtr) ||\n+          (offset == oopDesc::klass_offset_in_bytes() && tj->base() == Type::AryPtr) ||\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -924,1 +924,1 @@\n-    Node* p = basic_plus_adr( ex_node, ex_node, oopDesc::nklass_offset_in_bytes());\n+    Node* p = basic_plus_adr( ex_node, ex_node, oopDesc::klass_offset_in_bytes());\n@@ -942,1 +942,1 @@\n-        Node* p = basic_plus_adr(ex_in, ex_in, oopDesc::nklass_offset_in_bytes());\n+        Node* p = basic_plus_adr(ex_in, ex_in, oopDesc::klass_offset_in_bytes());\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2187,1 +2187,1 @@\n-  } else if (offset != oopDesc::nklass_offset_in_bytes()) {\n+  } else if (offset != oopDesc::klass_offset_in_bytes()) {\n@@ -3170,1 +3170,1 @@\n-      _compile->get_alias_index(tinst->add_offset(oopDesc::nklass_offset_in_bytes()));\n+      _compile->get_alias_index(tinst->add_offset(oopDesc::klass_offset_in_bytes()));\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1179,1 +1179,1 @@\n-  Node* k_adr = basic_plus_adr(obj, oopDesc::nklass_offset_in_bytes());\n+  Node* k_adr = basic_plus_adr(obj, oopDesc::klass_offset_in_bytes());\n@@ -3693,1 +3693,1 @@\n-    set_memory(minit_out, C->get_alias_index(oop_type->add_offset(oopDesc::nklass_offset_in_bytes())));\n+    set_memory(minit_out, C->get_alias_index(oop_type->add_offset(oopDesc::klass_offset_in_bytes())));\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1683,0 +1683,1 @@\n+#ifndef _LP64\n@@ -1684,0 +1685,1 @@\n+#endif\n@@ -2294,1 +2296,1 @@\n-      Node* k_adr = basic_plus_adr(obj_or_subklass, oopDesc::nklass_offset_in_bytes());\n+      Node* k_adr = basic_plus_adr(obj_or_subklass, oopDesc::klass_offset_in_bytes());\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-          adr_check->offset() == oopDesc::nklass_offset_in_bytes() ||\n+          adr_check->offset() == oopDesc::klass_offset_in_bytes() ||\n@@ -870,1 +870,1 @@\n-           adr_type->offset() == oopDesc::nklass_offset_in_bytes()),\n+           adr_type->offset() == oopDesc::klass_offset_in_bytes()),\n@@ -2323,1 +2323,1 @@\n-    if (offset == oopDesc::nklass_offset_in_bytes()) {\n+    if (offset == oopDesc::klass_offset_in_bytes()) {\n@@ -2349,1 +2349,1 @@\n-        && tary->offset() == oopDesc::nklass_offset_in_bytes()) {\n+        && tary->offset() == oopDesc::klass_offset_in_bytes()) {\n@@ -2437,1 +2437,1 @@\n-  if (offset == oopDesc::nklass_offset_in_bytes()) {\n+  if (offset == oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2076,1 +2076,1 @@\n-  Node* klass_addr = basic_plus_adr( receiver, receiver, oopDesc::nklass_offset_in_bytes() );\n+  Node* klass_addr = basic_plus_adr( receiver, receiver, oopDesc::klass_offset_in_bytes() );\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1642,1 +1642,1 @@\n-  if (obj == NULL || off != oopDesc::nklass_offset_in_bytes()) \/\/ loading oopDesc::_klass?\n+  if (obj == NULL || off != oopDesc::klass_offset_in_bytes()) \/\/ loading oopDesc::_klass?\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-  int klass_offset = oopDesc::nklass_offset_in_bytes();\n+  int klass_offset = oopDesc::klass_offset_in_bytes();\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1165,1 +1165,1 @@\n-  if (con2 == oopDesc::nklass_offset_in_bytes()) {\n+  if (con2 == oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-    if (con == oopDesc::nklass_offset_in_bytes() && obj != NULL) {\n+    if (con == oopDesc::klass_offset_in_bytes() && obj != NULL) {\n@@ -212,1 +212,1 @@\n-      Node* adr = phase->transform(new AddPNode(obj_or_subklass, obj_or_subklass, phase->MakeConX(oopDesc::nklass_offset_in_bytes())));\n+      Node* adr = phase->transform(new AddPNode(obj_or_subklass, obj_or_subklass, phase->MakeConX(oopDesc::klass_offset_in_bytes())));\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -549,1 +549,1 @@\n-                                           false, 0, oopDesc::nklass_offset_in_bytes());\n+                                           false, 0, oopDesc::klass_offset_in_bytes());\n@@ -3160,1 +3160,1 @@\n-    if (_offset == oopDesc::nklass_offset_in_bytes()) {\n+    if (_offset == oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -202,2 +202,1 @@\n-  volatile_nonstatic_field(oopDesc,            _metadata._klass,                              Klass*)                                \\\n-  volatile_nonstatic_field(oopDesc,            _metadata._compressed_klass,                   narrowKlass)                           \\\n+  NOT_LP64(volatile_nonstatic_field(oopDesc,   _klass,                                        Klass*))                               \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,1 +76,2 @@\n-    final int hubOffset = getFieldOffset(\"oopDesc::_metadata._klass\", Integer.class, \"Klass*\");\n+    \/\/ TODO: Lilliput. Probably ok.\n+    final int hubOffset = 4; \/\/ getFieldOffset(\"oopDesc::_metadata._klass\", Integer.class, \"Klass*\");\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#ifndef _LP64\n@@ -40,0 +41,1 @@\n+#endif\n","filename":"test\/hotspot\/gtest\/oops\/test_typeArrayOop.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,0 +129,34 @@\n+# Missing Lilliput support to load Klass*\n+serviceability\/sa\/CDSJMapClstats.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbCDSCore.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbCDSJstackPrintAll.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbDumpheap.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbFindPC.java#no-xcomp-core\n+serviceability\/sa\/ClhsdbFindPC.java#no-xcomp-process\n+serviceability\/sa\/ClhsdbFindPC.java#xcomp-core\n+serviceability\/sa\/ClhsdbFindPC.java#xcomp-process\n+serviceability\/sa\/ClhsdbInspect.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbJdis.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbJhisto.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbJstack.java#id0 1234567 generic-all\n+serviceability\/sa\/ClhsdbJstack.java#id1 1234567 generic-all\n+serviceability\/sa\/ClhsdbPrintAs.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbPstack.java#core 1234567 generic-all\n+serviceability\/sa\/ClhsdbPstack.java#process 1234567 generic-all\n+serviceability\/sa\/ClhsdbSource.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbThread.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbThreadContext.java 1234567 generic-all\n+serviceability\/sa\/ClhsdbWhere.java 1234567 generic-all\n+serviceability\/sa\/DeadlockDetectionTest.java 1234567 generic-all\n+serviceability\/sa\/JhsdbThreadInfoTest.java 1234567 generic-all\n+serviceability\/sa\/TestClhsdbJstackLock.java 1234567 generic-all\n+serviceability\/sa\/TestHeapDumpForInvokeDynamic.java 1234567 generic-all\n+serviceability\/sa\/TestJhsdbJstackLineNumbers.java 1234567 generic-all\n+serviceability\/sa\/TestJhsdbJstackLock.java 1234567 generic-all\n+serviceability\/sa\/TestJhsdbJstackMixed.java 1234567 generic-all\n+serviceability\/sa\/TestObjectMonitorIterate.java 1234567 generic-all\n+serviceability\/sa\/TestSysProps.java 1234567 generic-all\n+serviceability\/sa\/jmap-hprof\/JMapHProfLargeHeapTest.java 1234567 generic-all\n+serviceability\/sa\/sadebugd\/DebugdConnectTest.java 1234567 generic-all\n+serviceability\/sa\/sadebugd\/DisableRegistryTest.java 1234567 generic-all\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    private static final int OBJECT_SIZE_HIGH = 3250;\n+    private static final int OBJECT_SIZE_HIGH = 3258;\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABPromotion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    static final long INT_OFFSET  = Platform.is64bit() ? 12L : 16L;\n-    static final long LONG_OFFSET = Platform.is64bit() ? 16L :  8L;\n+    static final long INT_OFFSET  = 16L;\n+    static final long LONG_OFFSET = 8L;\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/OldLayoutCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+\n+\n+jdk\/jshell\/ToolTabSnippetTest.java 1234567 generic-all\n","filename":"test\/langtools\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}