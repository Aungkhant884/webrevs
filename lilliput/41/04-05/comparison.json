{"files":[{"patch":"@@ -1246,1 +1246,1 @@\n-                      arrayOopDesc::header_size_in_bytes(op->type()),\n+                      arrayOopDesc::base_offset_in_bytes(op->type()),\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-  \/\/ Zero first 4 bytes, if start offset is not 64bit aligned.\n-  if ((hdr_size_in_bytes & (BytesPerWord - 1)) != 0) {\n+  \/\/ Zero first 4 bytes, if start offset is not word aligned.\n+  if (!is_aligned(hdr_size_in_bytes, BytesPerWord)) {\n@@ -241,1 +241,1 @@\n-void C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int header_size_in_bytes, int f, Register klass, Label& slow_case) {\n+void C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int base_offset_in_bytes, int f, Register klass, Label& slow_case) {\n@@ -254,1 +254,1 @@\n-  mov(arr_size, (int32_t)header_size_in_bytes + MinObjAlignmentInBytesMask);\n+  mov(arr_size, (int32_t)base_offset_in_bytes + MinObjAlignmentInBytesMask);\n@@ -263,1 +263,1 @@\n-  initialize_body(obj, arr_size, header_size_in_bytes, t1, t2);\n+  initialize_body(obj, arr_size, base_offset_in_bytes, t1, t2);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -977,1 +977,1 @@\n-                      arrayOopDesc::header_size_in_bytes(op->type()),\n+                      arrayOopDesc::base_offset_in_bytes(op->type()),\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1650,1 +1650,1 @@\n-                      arrayOopDesc::header_size_in_bytes(op->type()),\n+                      arrayOopDesc::base_offset_in_bytes(op->type()),\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-void C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int header_size_in_bytes, Address::ScaleFactor f, Register klass, Label& slow_case) {\n+void C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int base_offset_in_bytes, Address::ScaleFactor f, Register klass, Label& slow_case) {\n@@ -244,1 +244,1 @@\n-  movptr(arr_size, (int32_t)header_size_in_bytes + MinObjAlignmentInBytesMask);\n+  movptr(arr_size, (int32_t)base_offset_in_bytes + MinObjAlignmentInBytesMask);\n@@ -254,1 +254,1 @@\n-  initialize_body(obj, arr_size, header_size_in_bytes, len_zero);\n+  initialize_body(obj, arr_size, base_offset_in_bytes, len_zero);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3791,1 +3791,1 @@\n-  if ((offset_in_bytes & (BytesPerWord - 1)) != 0) {\n+  if (!is_aligned(offset_in_bytes, BytesPerWord)) {\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  int header_size_in_bytes = arrayOopDesc::header_size_in_bytes(T_INT);\n+  int header_size_in_bytes = arrayOopDesc::base_offset_in_bytes(T_INT);\n@@ -404,1 +404,1 @@\n-  int header_size_in_bytes = typeArrayOopDesc::header_size_in_bytes(T_INT);\n+  int header_size_in_bytes = typeArrayOopDesc::base_offset_in_bytes(T_INT);\n@@ -413,1 +413,1 @@\n-  int aligned_header_size_words = align_up(arrayOopDesc::header_size_in_bytes(T_INT), HeapWordSize) \/ HeapWordSize;\n+  int aligned_header_size_words = align_up(arrayOopDesc::base_offset_in_bytes(T_INT), HeapWordSize) \/ HeapWordSize;\n@@ -418,1 +418,1 @@\n-  int payload_start = align_up(arrayOopDesc::header_size_in_bytes(T_INT), HeapWordSize) \/ HeapWordSize;\n+  int payload_start = align_up(arrayOopDesc::base_offset_in_bytes(T_INT), HeapWordSize) \/ HeapWordSize;\n@@ -444,1 +444,1 @@\n-  const size_t payload_size_bytes = words * HeapWordSize - arrayOopDesc::header_size_in_bytes(T_INT);\n+  const size_t payload_size_bytes = words * HeapWordSize - arrayOopDesc::base_offset_in_bytes(T_INT);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -406,1 +406,1 @@\n-  const size_t hs = align_up(arrayOopDesc::header_size_in_bytes(array_klass->element_type()), HeapWordSize) \/ HeapWordSize;\n+  const size_t hs = align_up(arrayOopDesc::base_offset_in_bytes(array_klass->element_type()), HeapWordSize) \/ HeapWordSize;\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  const size_t skip = align_up(arrayOopDesc::header_size_in_bytes(ArrayKlass::cast(_klass)->element_type()), HeapWordSize) \/ HeapWordSize;\n+  const size_t skip = align_up(arrayOopDesc::base_offset_in_bytes(ArrayKlass::cast(_klass)->element_type()), HeapWordSize) \/ HeapWordSize;\n","filename":"src\/hotspot\/share\/gc\/z\/zObjArrayAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2145,1 +2145,1 @@\n-  return arrayOopDesc::header_size_in_bytes(type);\n+  return arrayOopDesc::base_offset_in_bytes(type);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,4 @@\n-    return header_size_in_bytes(type);\n+    size_t typesize_in_bytes = header_size_in_bytes();\n+    return (int)(element_type_should_be_aligned(type)\n+                 ? align_up(typesize_in_bytes, BytesPerLong)\n+                 : typesize_in_bytes);\n@@ -128,11 +131,0 @@\n-  \/\/ Should only be called with constants as argument\n-  \/\/ (will not constant fold otherwise)\n-  \/\/ Returns the header size in bytes aligned to the requirements of the\n-  \/\/ array object type.\n-  static int header_size_in_bytes(BasicType type) {\n-    size_t typesize_in_bytes = header_size_in_bytes();\n-    return (int)(element_type_should_be_aligned(type)\n-      ? align_up(typesize_in_bytes, BytesPerLong)\n-      : typesize_in_bytes);\n-  }\n-\n@@ -147,1 +139,1 @@\n-    const size_t max_size_bytes = align_down(SIZE_MAX - header_size_in_bytes(type), MinObjAlignmentInBytes);\n+    const size_t max_size_bytes = align_down(SIZE_MAX - base_offset_in_bytes(type), MinObjAlignmentInBytes);\n@@ -154,1 +146,1 @@\n-      int header_size_words = align_up(header_size_in_bytes(type), HeapWordSize) \/ HeapWordSize;\n+      int header_size_words = align_up(base_offset_in_bytes(type), HeapWordSize) \/ HeapWordSize;\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  \/\/ Give size of objArrayOop in HeapWords minus the header\n+  \/\/ Give size of objArrayOop in bytes minus the header\n@@ -73,1 +73,0 @@\n-  static int header_size_in_bytes() { return arrayOopDesc::header_size_in_bytes(T_OBJECT); }\n@@ -79,1 +78,1 @@\n-    size_t size_words = align_up(header_size_in_bytes() + asz, HeapWordSize) \/ HeapWordSize;\n+    size_t size_words = align_up(base_offset_in_bytes() + asz, HeapWordSize) \/ HeapWordSize;\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-    const size_t hs_bytes = arrayOopDesc::header_size_in_bytes(elem_type);\n+    const size_t hs_bytes = arrayOopDesc::base_offset_in_bytes(elem_type);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4688,1 +4688,1 @@\n-    int header_size = arrayOopDesc::header_size_in_bytes(basic_elem_type);\n+    int header_size = arrayOopDesc::base_offset_in_bytes(basic_elem_type);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  ( arrayOopDesc::header_size_in_bytes(T_DOUBLE) \\\n+  ( arrayOopDesc::base_offset_in_bytes(T_DOUBLE) \\\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}