{"files":[{"patch":"@@ -5336,1 +5336,1 @@\n-    assert($mem$$disp == TypeOopPtr::klass_offset_in_bytes(), \"expect correct offset 4, but got: %d\", $mem$$disp);\n+    assert($mem$$disp == oopDesc::klass_offset_in_bytes(), \"expect correct offset 4, but got: %d\", $mem$$disp);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -445,2 +445,1 @@\n-  \/\/ the header to figure out if compiler code is accessing the class. See\n-  \/\/ more discussion in C2, TypeOopPtr::klass_offset_in_bytes().\n+  \/\/ the header to figure out if compiler code is accessing the class.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -343,2 +343,9 @@\n-    assert(!UseCompactObjectHeaders, \"don't use klass_offset_in_bytes() with compact headers\");\n-    return (int)offset_of(oopDesc, _metadata._klass);\n+#ifdef _LP64\n+    if (UseCompactObjectHeaders) {\n+      STATIC_ASSERT(markWord::klass_shift % 8 == 0);\n+      return mark_offset_in_bytes() + markWord::klass_shift \/ 8;\n+    } else\n+#endif\n+    {\n+      return (int)offset_of(oopDesc, _metadata._klass);\n+    }\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1363,1 +1363,1 @@\n-      } else if( offset == TypeOopPtr::klass_offset_in_bytes() ) {\n+      } else if( offset == oopDesc::klass_offset_in_bytes() ) {\n@@ -1530,1 +1530,1 @@\n-          (offset == TypeOopPtr::klass_offset_in_bytes() && tj->base() == Type::AryPtr) ||\n+          (offset == oopDesc::klass_offset_in_bytes() && tj->base() == Type::AryPtr) ||\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -945,1 +945,1 @@\n-    Node* p = basic_plus_adr( ex_node, ex_node, TypeOopPtr::klass_offset_in_bytes());\n+    Node* p = basic_plus_adr( ex_node, ex_node, oopDesc::klass_offset_in_bytes());\n@@ -963,1 +963,1 @@\n-        Node* p = basic_plus_adr(ex_in, ex_in, TypeOopPtr::klass_offset_in_bytes());\n+        Node* p = basic_plus_adr(ex_in, ex_in, oopDesc::klass_offset_in_bytes());\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2728,1 +2728,1 @@\n-  } else if (offset != TypeOopPtr::klass_offset_in_bytes()) {\n+  } else if (offset != oopDesc::klass_offset_in_bytes()) {\n@@ -3711,1 +3711,1 @@\n-      _compile->get_alias_index(tinst->add_offset(TypeOopPtr::klass_offset_in_bytes()));\n+      _compile->get_alias_index(tinst->add_offset(oopDesc::klass_offset_in_bytes()));\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1201,1 +1201,1 @@\n-  Node* k_adr = basic_plus_adr(obj, TypeOopPtr::klass_offset_in_bytes());\n+  Node* k_adr = basic_plus_adr(obj, oopDesc::klass_offset_in_bytes());\n@@ -3602,1 +3602,1 @@\n-    set_memory(minit_out, C->get_alias_index(oop_type->add_offset(TypeOopPtr::klass_offset_in_bytes())));\n+    set_memory(minit_out, C->get_alias_index(oop_type->add_offset(oopDesc::klass_offset_in_bytes())));\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1697,1 +1697,1 @@\n-    rawmem = make_store(control, rawmem, object, TypeOopPtr::klass_offset_in_bytes(), klass_node, T_METADATA);\n+    rawmem = make_store(control, rawmem, object, oopDesc::klass_offset_in_bytes(), klass_node, T_METADATA);\n@@ -2318,1 +2318,1 @@\n-      Node* k_adr = basic_plus_adr(obj_or_subklass, TypeOopPtr::klass_offset_in_bytes());\n+      Node* k_adr = basic_plus_adr(obj_or_subklass, oopDesc::klass_offset_in_bytes());\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -263,1 +263,1 @@\n-          adr_check->offset() == TypeOopPtr::klass_offset_in_bytes() ||\n+          adr_check->offset() == oopDesc::klass_offset_in_bytes() ||\n@@ -907,1 +907,1 @@\n-           adr_type->offset() == TypeOopPtr::klass_offset_in_bytes()),\n+           adr_type->offset() == oopDesc::klass_offset_in_bytes()),\n@@ -2404,1 +2404,1 @@\n-    if (offset == TypeOopPtr::klass_offset_in_bytes()) {\n+    if (offset == oopDesc::klass_offset_in_bytes()) {\n@@ -2412,1 +2412,1 @@\n-      tary->offset() == TypeOopPtr::klass_offset_in_bytes()) {\n+      tary->offset() == oopDesc::klass_offset_in_bytes()) {\n@@ -2472,1 +2472,1 @@\n-  if (offset == TypeOopPtr::klass_offset_in_bytes()) {\n+  if (offset == oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2099,1 +2099,1 @@\n-  Node* klass_addr = basic_plus_adr( receiver, receiver, TypeOopPtr::klass_offset_in_bytes() );\n+  Node* klass_addr = basic_plus_adr( receiver, receiver, oopDesc::klass_offset_in_bytes() );\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1668,1 +1668,1 @@\n-  if (obj == nullptr || off != TypeOopPtr::klass_offset_in_bytes()) \/\/ loading oopDesc::_klass?\n+  if (obj == nullptr || off != oopDesc::klass_offset_in_bytes()) \/\/ loading oopDesc::_klass?\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-  int klass_offset = TypeOopPtr::klass_offset_in_bytes();\n+  int klass_offset = oopDesc::klass_offset_in_bytes();\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1146,1 +1146,1 @@\n-  if (con2 == TypeOopPtr::klass_offset_in_bytes()) {\n+  if (con2 == oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    if (con == TypeOopPtr::klass_offset_in_bytes() && obj != nullptr) {\n+    if (con == oopDesc::klass_offset_in_bytes() && obj != nullptr) {\n@@ -221,1 +221,1 @@\n-    Node* adr = phase->transform(new AddPNode(obj_or_subklass, obj_or_subklass, phase->MakeConX(TypeOopPtr::klass_offset_in_bytes())));\n+    Node* adr = phase->transform(new AddPNode(obj_or_subklass, obj_or_subklass, phase->MakeConX(oopDesc::klass_offset_in_bytes())));\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-                                           false, 0, TypeOopPtr::klass_offset_in_bytes());\n+                                           false, 0, oopDesc::klass_offset_in_bytes());\n@@ -3509,1 +3509,1 @@\n-    if (_offset == TypeOopPtr::klass_offset_in_bytes()) {\n+    if (_offset == oopDesc::klass_offset_in_bytes()) {\n@@ -3570,34 +3570,0 @@\n-int TypeOopPtr::klass_offset_in_bytes() {\n-  if (UseCompactObjectHeaders) {\n-    \/\/ With compact headers, we don't directly load the Klass* (or actually narrow Klass*)\n-    \/\/ from the offset that we return here. This offset only serves to distinguish\n-    \/\/ loads of the Klass* from other memory operations by effectively creating\n-    \/\/ a memory slice just for the Klass*.\n-    \/\/ What the implementation of LoadNKlass actually does is:\n-    \/\/ - Load the mark-word (from offset 0)\n-    \/\/ - Check if the monitor bit is set\n-    \/\/   - if it is, load the displaced mark-word from the monitor\n-    \/\/ - Extract the compressed Klass* from the mark-word bits\n-    \/\/\n-    \/\/ One could argue that therefore, loading of the Klass* should really be at\n-    \/\/ the same slice as offset 0 (other mark-word accesses), but because all of the\n-    \/\/ above is happening in the backend, the Klass* is effectively immutable\n-    \/\/ as far as C2 ideal graph is concerned.\n-    \/\/ It might be an interesting future improvement to not expand LoadNKlass in\n-    \/\/ the backend, but instead expand it as a macro node. If we did this, we'd\n-    \/\/ really have to wire it to the memory slice of offset 0 (the mark-word). This may\n-    \/\/ be faster because instructions could be scheduled better, or it may be\n-    \/\/ slower because the memory slice at offset 0 is quite busy (because of locking,\n-    \/\/ hash-code, allocations, etc).\n-    \/\/\n-    \/\/ The exact value of offset 4 has been chosen because it points into the middle\n-    \/\/ of the mark-word and that is an offset that is guaranteed to not be used\n-    \/\/ otherwise. (And also because the original implementation put the compressed\n-    \/\/ Klass* at offset 4, but this may no longer be the case, and is not actually\n-    \/\/ relevant. See above discussion.)\n-    return 4;\n-  } else {\n-    return oopDesc::klass_offset_in_bytes();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1150,1 +1150,0 @@\n-  static int klass_offset_in_bytes();\n@@ -1403,1 +1402,1 @@\n-        _offset != TypeOopPtr::klass_offset_in_bytes()) {\n+        _offset != oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}