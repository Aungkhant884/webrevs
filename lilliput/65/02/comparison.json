{"files":[{"patch":"@@ -61,3 +61,0 @@\n-          - s390x\n-          - ppc64le\n-          - riscv64\n@@ -76,16 +73,0 @@\n-          - target-cpu: s390x\n-            gnu-arch: s390x\n-            debian-arch: s390x\n-            debian-repository: https:\/\/httpredir.debian.org\/debian\/\n-            debian-version: bullseye\n-          - target-cpu: ppc64le\n-            gnu-arch: powerpc64le\n-            debian-arch: ppc64el\n-            debian-repository: https:\/\/httpredir.debian.org\/debian\/\n-            debian-version: bullseye\n-          - target-cpu: riscv64\n-            gnu-arch: riscv64\n-            debian-arch: riscv64\n-            debian-repository: https:\/\/deb.debian.org\/debian-ports\n-            debian-keyring: \/usr\/share\/keyrings\/debian-ports-archive-keyring.gpg\n-            debian-version: sid\n","filename":".github\/workflows\/build-cross-compile.yml","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,1763 +0,0 @@\n-name: Pre-submit tests\n-\n-on:\n-  push:\n-    branches-ignore:\n-      - master\n-      - pr\/*\n-  workflow_dispatch:\n-    inputs:\n-      platforms:\n-        description: \"Platform(s) to execute on\"\n-        required: true\n-        default: \"Linux additional (hotspot only), Linux x64, Linux x86, Windows aarch64, Windows x64, macOS x64\"\n-\n-concurrency:\n-  group: ${{ github.workflow }}-${{ github.ref }}\n-  cancel-in-progress: true\n-\n-jobs:\n-  prerequisites:\n-    name: Prerequisites\n-    runs-on: \"ubuntu-20.04\"\n-    outputs:\n-      should_run: ${{ steps.check_submit.outputs.should_run }}\n-      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}\n-      jdk_version: ${{ steps.check_jdk_versions.outputs.jdk_version }}\n-      platform_linux_additional: ${{ steps.check_platforms.outputs.platform_linux_additional }}\n-      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}\n-      platform_linux_x86: ${{ steps.check_platforms.outputs.platform_linux_x86 }}\n-      platform_windows_aarch64: ${{ steps.check_platforms.outputs.platform_windows_aarch64 }}\n-      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64 }}\n-      platform_macos_x64: ${{ steps.check_platforms.outputs.platform_macos_x64 }}\n-      platform_macos_aarch64: ${{ steps.check_platforms.outputs.platform_macos_aarch64 }}\n-      dependencies: ${{ steps.check_deps.outputs.dependencies }}\n-\n-    steps:\n-      - name: Check if submit tests should actually run depending on secrets and manual triggering\n-        id: check_submit\n-        run: echo \"::set-output name=should_run::${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs\/heads\/submit\/')) }}\"\n-\n-      - name: Check which platforms should be included\n-        id: check_platforms\n-        run: |\n-          echo \"::set-output name=platform_linux_additional::${{ contains(github.event.inputs.platforms, 'linux additional (hotspot only)') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux additional (hotspot only)'))) }}\"\n-          echo \"::set-output name=platform_linux_x64::${{ contains(github.event.inputs.platforms, 'linux x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x64'))) }}\"\n-          echo \"::set-output name=platform_linux_x86::${{ contains(github.event.inputs.platforms, 'linux x86') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x86'))) }}\"\n-          echo \"::set-output name=platform_windows_aarch64::${{ contains(github.event.inputs.platforms, 'windows aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows aarch64'))) }}\"\n-          echo \"::set-output name=platform_windows_x64::${{ contains(github.event.inputs.platforms, 'windows x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows x64'))) }}\"\n-          echo \"::set-output name=platform_macos_x64::${{ contains(github.event.inputs.platforms, 'macos x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos x64'))) }}\"\n-          echo \"::set-output name=platform_macos_aarch64::${{ contains(github.event.inputs.platforms, 'macos aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos aarch64'))) }}\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine unique bundle identifier\n-        id: check_bundle_id\n-        run: echo \"::set-output name=bundle_id::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine versions and locations to be used for dependencies\n-        id: check_deps\n-        run: \"echo ::set-output name=dependencies::`cat make\/conf\/version-numbers.conf make\/conf\/test-dependencies | sed -e '1i {' -e 's\/#.*\/\/g' -e 's\/\\\"\/\/g' -e 's\/\\\\(.*\\\\)=\\\\(.*\\\\)\/\\\"\\\\1\\\": \\\"\\\\2\\\",\/g' -e '$s\/,\\\\s\\\\{0,\\\\}$\/\\\\}\/'`\"\n-        working-directory: jdk\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Print extracted dependencies to the log\n-        run: \"echo '${{ steps.check_deps.outputs.dependencies }}'\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine full JDK versions\n-        id: check_jdk_versions\n-        shell: bash\n-        run: |\n-          FEATURE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\n-          INTERIM=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_INTERIM }}\n-          UPDATE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\n-          if [ \"x${UPDATE}\" != \"x0\" ]; then\n-             V=${FEATURE}.${INTERIM}.${UPDATE}\n-          elif [ \"x${INTERIM}\" != \"x0\" ]; then\n-             V={FEATURE}.${INTERIM}\n-          else\n-             V=${FEATURE}\n-          fi\n-          echo \"::set-output name=jdk_version::${V}\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine the jtreg ref to checkout\n-        run: \"echo JTREG_REF=jtreg-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}+${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Check if a jtreg image is present in the cache\n-        id: jtreg\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/jtreg\/\n-          key: jtreg-${{ env.JTREG_REF }}-v1\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Checkout the jtreg source\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"openjdk\/jtreg\"\n-          ref: ${{ env.JTREG_REF }}\n-          path: jtreg\n-        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n-\n-      - name: Build jtreg\n-        run: bash make\/build.sh --jdk ${JAVA_HOME_8_X64}\n-        working-directory: jtreg\n-        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n-\n-      - name: Move jtreg image to destination folder\n-        run: mv build\/images\/jtreg ~\/\n-        working-directory: jtreg\n-        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n-\n-      - name: Store jtreg for use by later steps\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ steps.check_bundle_id.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-  linux_x64_build:\n-    name: Linux x64\n-    runs-on: \"ubuntu-20.04\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && (needs.prerequisites.outputs.platform_linux_x64 != 'false' || needs.prerequisites.outputs.platform_linux_additional == 'true')\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Install dependencies\n-        run: |\n-          sudo apt-get update\n-          sudo apt-get install gcc-10=10.3.0-1ubuntu1~20.04 g++-10=10.3.0-1ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n-          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=linux-x64\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-x64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/linux-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/linux-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-  linux_x64_test:\n-    name: Linux x64\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x64_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Find root of jdk image dir\n-        run: |\n-          imageroot=`find ${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }} -name release -type f`\n-          echo \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          JDK_IMAGE_DIR=${{ env.imageroot }}\n-          TEST_IMAGE_DIR=${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}\n-          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          JT_HOME=${HOME}\/jtreg\n-          make test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=\"${{ matrix.suites }}\"\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ! grep --include=test-summary.txt -lqr build\/*\/test-results -e \"TEST SUCCESS\" ; then\n-            cat build\/*\/test-results\/*\/text\/newfailures.txt ;\n-            cat build\/*\/test-results\/*\/text\/other_errors.txt ;\n-            exit 1 ;\n-          fi\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  linux_additional_build:\n-    name: Linux additional\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x64_build\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_additional != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - hs x64 build only\n-          - hs x64 zero build only\n-          - hs x64 minimal build only\n-          - hs x64 optimized build only\n-          - hs aarch64 build only\n-          - hs arm build only\n-        include:\n-          - flavor: hs x64 build only\n-            flags: --enable-debug --disable-precompiled-headers\n-          - flavor: hs x64 zero build only\n-            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero\n-          - flavor: hs x64 minimal build only\n-            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=minimal\n-          - flavor: hs x64 optimized build only\n-            flags: --with-debug-level=optimized --disable-precompiled-headers\n-          - flavor: hs aarch64 build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: arm64\n-            gnu-arch: aarch64\n-          - flavor: hs arm build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: armhf\n-            gnu-arch: arm\n-            gnu-flavor: eabihf\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore build JDK\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64\n-        continue-on-error: true\n-\n-      - name: Restore build JDK (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack build JDK\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin\"\n-          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin\"\n-\n-      - name: Find root of build JDK image dir\n-        run: |\n-          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin -name release -type f`\n-          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n-\n-      - name: Update apt\n-        run: sudo apt-get update\n-\n-      - name: Install native host dependencies\n-        run: |\n-          sudo apt-get install gcc-10=10.3.0-1ubuntu1~20.04 g++-10=10.3.0-1ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n-          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n-        if: matrix.debian-arch == ''\n-\n-      - name: Install cross-compilation host dependencies\n-        run: sudo apt-get install gcc-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.3.0-1ubuntu1~20.04cross1 g++-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.3.0-1ubuntu1~20.04cross1\n-        if: matrix.debian-arch != ''\n-\n-      - name: Cache sysroot\n-        id: cache-sysroot\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/sysroot-${{ matrix.debian-arch }}\/\n-          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n-        if: matrix.debian-arch != ''\n-\n-      - name: Install sysroot host dependencies\n-        run: sudo apt-get install debootstrap qemu-user-static\n-        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Create sysroot\n-        run: >\n-          sudo qemu-debootstrap\n-          --arch=${{ matrix.debian-arch }}\n-          --verbose\n-          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n-          --resolve-deps\n-          buster\n-          ~\/sysroot-${{ matrix.debian-arch }}\n-          http:\/\/httpredir.debian.org\/debian\/\n-        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Prepare sysroot for caching\n-        run: |\n-          sudo chroot ~\/sysroot-${{ matrix.debian-arch }} symlinks -cr .\n-          sudo chown ${USER} -R ~\/sysroot-${{ matrix.debian-arch }}\n-          rm -rf ~\/sysroot-${{ matrix.debian-arch }}\/{dev,proc,run,sys}\n-        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Configure cross compiler\n-        run: |\n-          echo \"CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-gcc-10\" >> $GITHUB_ENV\n-          echo \"CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-g++-10\" >> $GITHUB_ENV\n-        if: matrix.debian-arch != ''\n-\n-      - name: Configure cross specific flags\n-        run: >\n-          echo \"cross_flags=\n-          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}\n-          --with-sysroot=${HOME}\/sysroot-${{ matrix.debian-arch }}\/\n-          \" >> $GITHUB_ENV\n-        if: matrix.debian-arch != ''\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=linux-${{ matrix.gnu-arch }}-hotspot\n-          ${{ matrix.flags }}\n-          ${{ env.cross_flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-build-jdk=${{ env.build_jdk_root }}\n-          --with-default-make-target=\"hotspot\"\n-          --with-zlib=system\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-${{ matrix.gnu-arch }}-hotspot\n-        working-directory: jdk\n-\n-  linux_x86_build:\n-    name: Linux x86\n-    runs-on: \"ubuntu-20.04\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x86 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    # Reduced 32-bit build uses the same boot JDK as 64-bit build\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      # Roll in the multilib environment and its dependencies.\n-      # Some multilib libraries do not have proper inter-dependencies, so we have to\n-      # install their dependencies manually. Additionally, upgrading apt solves\n-      # the libc6 installation bugs until base image catches up, see JDK-8260460.\n-      - name: Install dependencies\n-        run: |\n-          sudo dpkg --add-architecture i386\n-          sudo apt-get update\n-          sudo apt-get install --only-upgrade apt\n-          sudo apt-get install gcc-10-multilib g++-10-multilib libfreetype6-dev:i386 libxrandr-dev:i386 libxtst-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libcups2-dev:i386 libasound2-dev:i386\n-          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=linux-x86\n-          --with-target-bits=32\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-x86\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/linux-x86\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/linux-x86\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-  linux_x86_test:\n-    name: Linux x86\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x86_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    # Reduced 32-bit build uses the same boot JDK as 64-bit build\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x86${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x86${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Find root of jdk image dir\n-        run: |\n-          imageroot=`find ${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }} -name release -type f`\n-          echo \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          JDK_IMAGE_DIR=${{ env.imageroot }}\n-          TEST_IMAGE_DIR=${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}\n-          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          JT_HOME=${HOME}\/jtreg\n-          make test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=\"${{ matrix.suites }}\"\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ! grep --include=test-summary.txt -lqr build\/*\/test-results -e \"TEST SUCCESS\" ; then\n-            cat build\/*\/test-results\/*\/text\/newfailures.txt ;\n-            cat build\/*\/test-results\/*\/text\/other_errors.txt ;\n-            exit 1 ;\n-          fi\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x86${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x86${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  windows_aarch64_build:\n-    name: Windows aarch64\n-    runs-on: \"windows-2019\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_aarch64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Restore cygwin installer from cache\n-        id: cygwin-installer\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/setup-x86_64.exe\n-          key: cygwin-installer\n-\n-      - name: Download cygwin installer\n-        run: |\n-          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n-          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n-        if: steps.cygwin-installer.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin packages from cache\n-        id: cygwin\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/packages\n-          key: cygwin-packages-${{ runner.os }}-v1\n-\n-      - name: Install cygwin\n-        run: |\n-          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages cygwin=3.2.0-1,autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n-\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n-          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n-          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Ensure a specific version of MSVC is installed\n-        run: >\n-          Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList\n-          'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet\n-          --add Microsoft.VisualStudio.Component.VC.14.29.arm64'\n-\n-      - name: Configure\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n-          & bash configure\n-          --with-conf-name=windows-aarch64\n-          --with-msvc-toolset-version=14.29\n-          --openjdk-target=aarch64-unknown-cygwin\n-          ${{ matrix.flags }}\n-          --with-version-opt=\"$env:GITHUB_ACTOR-$env:GITHUB_SHA\"\n-          --with-boot-jdk=\"$env:BOOT_JDK\"\n-          --with-default-make-target=\"hotspot\"\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: |\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          & make CONF_NAME=windows-aarch64\n-        working-directory: jdk\n-\n-  windows_x64_build:\n-    name: Windows x64\n-    runs-on: \"windows-2019\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Restore cygwin installer from cache\n-        id: cygwin-installer\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/setup-x86_64.exe\n-          key: cygwin-installer\n-\n-      - name: Download cygwin installer\n-        run: |\n-          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n-          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n-        if: steps.cygwin-installer.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin packages from cache\n-        id: cygwin\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/packages\n-          key: cygwin-packages-${{ runner.os }}-v1\n-\n-      - name: Install cygwin\n-        run: |\n-          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages cygwin=3.2.0-1,autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n-\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n-          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n-          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Ensure a specific version of MSVC is installed\n-        run: >\n-          Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList\n-          'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet\n-          --add Microsoft.VisualStudio.Component.VC.14.28.x86.x64'\n-\n-      - name: Configure\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n-          $env:JT_HOME = cygpath \"$HOME\/jtreg\" ;\n-          $env:GTEST = cygpath \"$env:GITHUB_WORKSPACE\/gtest\" ;\n-          & bash configure\n-          --with-conf-name=windows-x64\n-          --with-msvc-toolset-version=14.28\n-          ${{ matrix.flags }}\n-          --with-version-opt=\"$env:GITHUB_ACTOR-$env:GITHUB_SHA\"\n-          --with-boot-jdk=\"$env:BOOT_JDK\"\n-          --with-jtreg=\"$env:JT_HOME\"\n-          --with-gtest=\"$env:GTEST\"\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: |\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          & make CONF_NAME=windows-x64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}.zip\n-            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz\n-\n-  windows_x64_test:\n-    name: Windows x64\n-    runs-on: \"windows-2019\"\n-    needs:\n-      - prerequisites\n-      - windows_x64_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n-          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n-          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin installer from cache\n-        id: cygwin-installer\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/setup-x86_64.exe\n-          key: cygwin-installer\n-\n-      - name: Download cygwin installer\n-        run: |\n-          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n-          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n-        if: steps.cygwin-installer.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin packages from cache\n-        id: cygwin\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/packages\n-          key: cygwin-packages-${{ runner.os }}-v1\n-\n-      - name: Install cygwin\n-        run: |\n-          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages cygwin=3.2.0-1,autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-windows-x64${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-windows-x64${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}.zip\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack symbols\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols\"\n-          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Find root of jdk image dir\n-        run: echo (\"imageroot=\" + (Get-ChildItem -Path $HOME\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }} -Filter release -Recurse -ErrorAction SilentlyContinue -Force).DirectoryName) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          $env:JDK_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ;\n-          $env:SYMBOLS_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ;\n-          $env:TEST_IMAGE_DIR = cygpath \"$HOME\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}\" ;\n-          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n-          $env:JT_HOME = cygpath \"$HOME\/jtreg\" ;\n-          & make test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=${{ matrix.suites }}\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ((Get-ChildItem -Path build\\*\\test-results\\test-summary.txt -Recurse | Select-String -Pattern \"TEST SUCCESS\" ).Count -eq 0) {\n-            Get-Content -Path build\\*\\test-results\\*\\*\\newfailures.txt ;\n-            Get-Content -Path build\\*\\test-results\\*\\*\\other_errors.txt ;\n-            exit 1\n-          }\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo (\"logsuffix=\" + (\"${{ matrix.test }}\" -replace \"\/\", \"_\" -replace \" \", \"_\")) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          zip -r9\n-          \"$HOME\/windows-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          zip -r9\n-          \"$HOME\/windows-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/windows-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/windows-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  macos_x64_build:\n-    name: macOS x64\n-    runs-on: \"macos-10.15\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_macos_x64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build release\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Install dependencies\n-        run: brew install make\n-\n-      - name: Select Xcode version\n-        run: sudo xcode-select --switch \/Applications\/Xcode_11.3.1.app\/Contents\/Developer\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=macos-x64\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=macos-x64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/macos-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/macos-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-  macos_aarch64_build:\n-    name: macOS aarch64\n-    runs-on: \"macos-10.15\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_macos_aarch64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build release\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Install dependencies\n-        run: brew install make\n-\n-      - name: Select Xcode version\n-        run: sudo xcode-select --switch \/Applications\/Xcode_12.4.app\/Contents\/Developer\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=macos-aarch64\n-          --openjdk-target=aarch64-apple-darwin\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=macos-aarch64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-macos-aarch64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/macos-aarch64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-aarch64_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/macos-aarch64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-aarch64_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-\n-  macos_x64_test:\n-    name: macOS x64\n-    runs-on: \"macos-10.15\"\n-    needs:\n-      - prerequisites\n-      - macos_x64_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-macos-x64${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-macos-x64${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Install dependencies\n-        run: brew install make\n-\n-      - name: Select Xcode version\n-        run: sudo xcode-select --switch \/Applications\/Xcode_11.3.1.app\/Contents\/Developer\n-\n-      - name: Find root of jdk image dir\n-        run: |\n-          imageroot=`find ${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }} -name release -type f`\n-          echo \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          JDK_IMAGE_DIR=${{ env.imageroot }}\n-          TEST_IMAGE_DIR=${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}\n-          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n-          JT_HOME=${HOME}\/jtreg\n-          gmake test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=${{ matrix.suites }}\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ! grep --include=test-summary.txt -lqr build\/*\/test-results -e \"TEST SUCCESS\" ; then\n-            cat build\/*\/test-results\/*\/text\/newfailures.txt ;\n-            cat build\/*\/test-results\/*\/text\/other_errors.txt ;\n-            exit 1 ;\n-          fi\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/macos-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/macos-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/macos-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/macos-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  artifacts:\n-    name: Post-process artifacts\n-    runs-on: \"ubuntu-20.04\"\n-    if: always()\n-    continue-on-error: true\n-    needs:\n-      - prerequisites\n-      - linux_additional_build\n-      - windows_aarch64_build\n-      - linux_x64_test\n-      - linux_x86_test\n-      - windows_x64_test\n-      - macos_x64_test\n-      - macos_aarch64_build\n-\n-    steps:\n-      - name: Determine current artifacts endpoint\n-        id: actions_runtime\n-        uses: actions\/github-script@v6\n-        with:\n-          script: \"return { url: process.env['ACTIONS_RUNTIME_URL'], token: process.env['ACTIONS_RUNTIME_TOKEN'] }\"\n-\n-      - name: Display current artifacts\n-        run: >\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview'\n-\n-      - name: Delete transient artifacts\n-        run: >\n-          for url in `\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview' |\n-          jq -r -c '.value | map(select(.name|startswith(\"transient_\"))) | .[].url'`; do\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          -X DELETE \"${url}\";\n-          done\n-\n-      - name: Fetch remaining artifacts (test results)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          path: test-results\n-\n-      - name: Delete remaining artifacts\n-        run: >\n-          for url in `\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview' |\n-          jq -r -c '.value | .[].url'`; do\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          -X DELETE \"${url}\";\n-          done\n-\n-      - name: Upload a combined test results artifact\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: test-results_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: test-results\n","filename":".github\/workflows\/submit.yml","additions":0,"deletions":1763,"binary":false,"changes":1763,"status":"deleted"},{"patch":"@@ -7,1 +7,1 @@\n-error=author,committer,reviewers,executable,symlink,message,hg-tag,whitespace,problemlists\n+error=author,committer,reviewers,issues,executable,symlink,message,hg-tag,whitespace,problemlists\n@@ -28,0 +28,3 @@\n+[checks \"issues\"]\n+pattern=^([124-8][0-9]{6}): (\\S.*)$\n+\n","filename":".jcheck\/conf","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}