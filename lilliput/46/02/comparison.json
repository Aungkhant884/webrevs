{"files":[{"patch":"@@ -192,1 +192,1 @@\n-    return ((value() & monitor_value) != 0);\n+    return ((value() & lock_mask_in_place) == monitor_value);\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -800,1 +800,1 @@\n-markWord ObjectSynchronizer::safe_load_mark(oop object) {\n+markWord ObjectSynchronizer::stable_mark(oop object) {\n@@ -802,1 +802,2 @@\n-    const markWord mark = object->mark_acquire();\n+    const markWord mark = read_stable_mark(object);\n+    assert(!mark.is_being_inflated(), \"read_stable_mark must prevent inflating mark\");\n@@ -807,1 +808,0 @@\n-    \/\/ *  INFLATING    - busy wait for conversion to complete\n@@ -809,0 +809,1 @@\n+    \/\/ *  Marked       - return mark\n@@ -818,11 +819,0 @@\n-    \/\/ CASE: inflation in progress - inflating over a stack-lock.\n-    \/\/ Some other thread is converting from stack-locked to inflated.\n-    \/\/ Only that thread can complete inflation -- other threads must wait.\n-    \/\/ The INFLATING value is transient.\n-    \/\/ Currently, we spin\/yield\/park and poll the markword, waiting for inflation to finish.\n-    \/\/ We could always eliminate polling by parking the thread on some auxiliary list.\n-    if (mark == markWord::INFLATING()) {\n-      read_stable_mark(object);\n-      continue;\n-    }\n-\n@@ -832,0 +822,10 @@\n+      BasicLock* lock = mark.locker();\n+      if (Thread::current()->is_lock_owned((address)lock)) {\n+        \/\/ If locked by this thread, it is safe to access the displaced header.\n+        markWord dmw = lock->displaced_header();\n+        assert(dmw.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, dmw.value());\n+        return dmw;\n+      }\n+\n+      \/\/ Otherwise, attempt to temporarily install INFLATING into the mark-word,\n+      \/\/ to prevent inflation or unlocking by competing thread.\n@@ -837,5 +837,0 @@\n-      \/\/ We've successfully installed INFLATING (0) into the mark-word.\n-      \/\/ This is the only case where 0 will appear in a mark-word.\n-      \/\/ Only the singular thread that successfully swings the mark-word\n-      \/\/ to 0 can perform (or more precisely, complete) inflation.\n-\n@@ -853,1 +848,1 @@\n-      guarantee(object->mark() == markWord::INFLATING(), \"invariant\");\n+      assert(object->mark() == markWord::INFLATING(), \"invariant\");\n@@ -860,4 +855,3 @@\n-    \/\/ CASE: neutral\n-    \/\/ Catch if the object's header is not neutral (not locked and\n-    \/\/ not marked is what we care about here).\n-    assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n+    \/\/ CASE: neutral or marked (for GC)\n+    \/\/ Catch if the object's header is not neutral or marked (it must not be locked).\n+    assert(mark.is_neutral() || mark.is_marked(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n@@ -868,22 +862,0 @@\n-markWord ObjectSynchronizer::stable_mark(const oop obj) {\n-  markWord mark = read_stable_mark(obj);\n-  if (!mark.is_neutral() && !mark.is_marked()) {\n-    if (mark.has_monitor()) {\n-      ObjectMonitor* monitor = mark.monitor();\n-      mark = monitor->header();\n-      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-    } else if (SafepointSynchronize::is_at_safepoint() || Thread::current()->is_lock_owned((address) mark.locker())) {\n-      \/\/ This is a stack lock owned by the calling thread so fetch the\n-      \/\/ displaced markWord from the BasicLock on the stack.\n-      assert(mark.has_displaced_mark_helper(), \"must be displaced header here\");\n-      mark = mark.displaced_mark_helper();\n-      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-    } else {\n-      mark = safe_load_mark(obj);\n-      assert(mark.is_neutral(), \"invariant: header=\" INTPTR_FORMAT, mark.value());\n-      assert(!mark.is_marked(), \"no forwarded objects here\");\n-    }\n-  }\n-  return mark;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":18,"deletions":46,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -182,2 +182,0 @@\n-  static markWord safe_load_mark(oop obj);\n-\n@@ -189,1 +187,1 @@\n-  static markWord stable_mark(const oop obj);\n+  static markWord stable_mark(oop obj);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}