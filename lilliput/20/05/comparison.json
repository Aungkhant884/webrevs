{"files":[{"patch":"@@ -256,0 +256,3 @@\n+void LoadKlassStub::emit_code(LIR_Assembler* ce) {\n+  \/\/ Currently not needed.\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -989,8 +989,1 @@\n-      \/\/ FIXME: OMG this is a horrible kludge.  Any offset from an\n-      \/\/ address that matches klass_offset_in_bytes() will be loaded\n-      \/\/ as a word, not a long.\n-      if (UseCompressedClassPointers && addr->disp() == oopDesc::klass_offset_in_bytes()) {\n-        __ ldrw(dest->as_register(), as_Address(from_addr));\n-      } else {\n-        __ ldr(dest->as_register(), as_Address(from_addr));\n-      }\n+      __ ldr(dest->as_register(), as_Address(from_addr));\n@@ -1035,4 +1028,0 @@\n-  } else if (type == T_ADDRESS && addr->disp() == oopDesc::klass_offset_in_bytes()) {\n-    if (UseCompressedClassPointers) {\n-      __ decode_klass_not_null(dest->as_register());\n-    }\n@@ -2596,0 +2585,11 @@\n+void LIR_Assembler::emit_load_klass(LIR_OpLoadKlass* op) {\n+  Register obj = op->obj()->as_pointer_register();\n+  Register result = op->result_opr()->as_pointer_register();\n+  Address from_addr(obj, oopDesc::klass_offset_in_bytes());\n+  if (UseCompressedClassPointers) {\n+    __ ldrw(result, from_addr);\n+    __ decode_klass_not_null(result);\n+  } else {\n+    __ ldr(result, from_addr);\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -246,0 +246,3 @@\n+void LoadKlassStub::emit_code(LIR_Assembler* ce) {\n+  \/\/ Currently not needed.\n+}\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -723,5 +723,1 @@\n-      if (UseCompressedClassPointers && addr->disp() == oopDesc::klass_offset_in_bytes()) {\n-        __ ldr_u32(dest->as_pointer_register(), as_Address(addr));\n-      } else {\n-        __ ldr(dest->as_pointer_register(), as_Address(addr));\n-      }\n+      __ ldr(dest->as_pointer_register(), as_Address(addr));\n@@ -2448,0 +2444,9 @@\n+void LIR_Assembler::emit_load_klass(LIR_OpLoadKlass* op) {\n+  Register obj = op->obj()->as_pointer_register();\n+  Register result = op->result_opr()->as_pointer_register();\n+  if (UseCompressedClassPointers) { \/\/ On 32 bit arm??\n+    __ ldr_u32(result, Address(obj, oopDesc::klass_offset_in_bytes()));\n+  } else {\n+    __ ldr(result, Address(obj, oopDesc::klass_offset_in_bytes()));\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -322,0 +322,3 @@\n+void LoadKlassStub::emit_code(LIR_Assembler* ce) {\n+  \/\/ Currently not needed.\n+}\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -815,6 +815,1 @@\n-        if (offset == oopDesc::klass_offset_in_bytes() && UseCompressedClassPointers) {\n-          __ lwz(to_reg->as_register(), offset, base);\n-          __ decode_klass_not_null(to_reg->as_register());\n-        } else {\n-          __ ld(to_reg->as_register(), offset, base);\n-        }\n+        __ ld(to_reg->as_register(), offset, base);\n@@ -2735,0 +2730,10 @@\n+void LIR_Assembler::emit_load_klass(LIR_OpLoadKlass* op) {\n+  Register obj = op->obj()->as_pointer_register();\n+  Register result = op->result_opr()->as_pointer_register();\n+  if (UseCompressedClassPointers) {\n+    __ lwz(result, oopDesc::klass_offset_in_bytes(), obj);\n+    __ decode_klass_not_null(result);\n+  } else {\n+    __ ld(result, oopDesc::klass_offset_in_bytes(), obj);\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -273,0 +273,4 @@\n+void LoadKlassStub::emit_code(LIR_Assembler* ce) {\n+  \/\/ Currently not needed.\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/c1_CodeStubs_s390.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -953,6 +953,1 @@\n-      if (UseCompressedClassPointers && addr->disp() == oopDesc::klass_offset_in_bytes()) {\n-        __ z_llgf(dest->as_register(), disp_value, disp_reg, src);\n-        __ decode_klass_not_null(dest->as_register());\n-      } else {\n-        __ z_lg(dest->as_register(), disp_value, disp_reg, src);\n-      }\n+      __ z_lg(dest->as_register(), disp_value, disp_reg, src);\n@@ -2757,0 +2752,10 @@\n+void LIR_Assembler::emit_load_klass(LIR_OpLoadKlass* op) {\n+  Register obj = op->obj()->as_pointer_register();\n+  Register result = op->result_opr()->as_pointer_register();\n+  if (UseCompressedClassPointers) {\n+    __ z_llgf(result, Address(obj, oopDesc::klass_offset_in_bytes()));\n+    __ decode_klass_not_null(result);\n+  } else {\n+    __ z_lg(result, Address(obj, oopDesc::klass_offset_in_bytes()));\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -303,0 +303,16 @@\n+void LoadKlassStub::emit_code(LIR_Assembler* ce) {\n+  __ bind(_entry);\n+  Register res = _result->as_register();\n+  ce->store_parameter(_obj->as_register(), 0);\n+  if (res != rax) {\n+    \/\/ This preserves rax and allows it to be used as return-register,\n+    \/\/ without messing with the stack.\n+    __ xchgptr(rax, res);\n+  }\n+  __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::load_klass_id)));\n+  if (res != rax) {\n+    \/\/ Swap back rax, and move result to correct register.\n+    __ xchgptr(rax, res);\n+  }\n+  __ jmp(_continuation);\n+}\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1260,5 +1260,1 @@\n-      if (UseCompressedClassPointers && addr->disp() == oopDesc::klass_offset_in_bytes()) {\n-        __ movl(dest->as_register(), from_addr);\n-      } else {\n-        __ movptr(dest->as_register(), from_addr);\n-      }\n+      __ movptr(dest->as_register(), from_addr);\n@@ -1370,6 +1366,0 @@\n-  } else if (type == T_ADDRESS && addr->disp() == oopDesc::klass_offset_in_bytes()) {\n-#ifdef _LP64\n-    if (UseCompressedClassPointers) {\n-      __ decode_klass_not_null(dest->as_register(), tmp_load_klass);\n-    }\n-#endif\n@@ -3531,0 +3521,26 @@\n+void LIR_Assembler::emit_load_klass(LIR_OpLoadKlass* op) {\n+  Register obj = op->obj()->as_pointer_register();\n+  Register result = op->result_opr()->as_pointer_register();\n+\n+#ifdef _LP64\n+  Register tmp = rscratch1;\n+  assert_different_registers(tmp, obj);\n+  assert_different_registers(tmp, result);\n+\n+  if (op->info() != NULL) {\n+    add_debug_info_for_null_check_here(op->info());\n+  }\n+  \/\/ Check if we can take the (common) fast path, if obj is unlocked.\n+  __ movq(tmp, Address(obj, oopDesc::mark_offset_in_bytes()));\n+  __ xorq(tmp, markWord::unlocked_value);\n+  __ testb(tmp, markWord::lock_mask_in_place);\n+  __ jcc(Assembler::notZero, *op->stub()->entry());\n+\n+  \/\/ Fast-path: shift and decode Klass*.\n+  __ movq(result, tmp);\n+  __ shrq(result, markWord::klass_shift);\n+  __ decode_klass_not_null(result, tmp);\n+#else\n+  __ load_klass(result, obj, noreg \/*not needed*\/);\n+#endif\n+}\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1114,1 +1114,11 @@\n-\n+#ifdef _LP64\n+    case load_klass_id:\n+      {\n+        StubFrame f(sasm, \"load_klass\", dont_gc_arguments);\n+        sasm->save_live_registers_no_oop_map(true);\n+        f.load_argument(0, c_rarg0); \/\/ obj\n+        __ call_VM_leaf(CAST_FROM_FN_PTR(address, oopDesc::load_klass_runtime), c_rarg0);\n+        sasm->restore_live_registers_except_rax(true);\n+      }\n+      break;\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -552,0 +552,19 @@\n+class LoadKlassStub: public CodeStub {\n+private:\n+  LIR_Opr          _obj;\n+  LIR_Opr          _result;\n+\n+public:\n+  LoadKlassStub(LIR_Opr obj, LIR_Opr result) :\n+    CodeStub(), _obj(obj), _result(result) {};\n+\n+  virtual void emit_code(LIR_Assembler* e);\n+  virtual void visit(LIR_OpVisitState* visitor) {\n+    visitor->do_input(_obj);\n+    visitor->do_output(_result);\n+  }\n+#ifndef PRODUCT\n+virtual void print_name(outputStream* out) const { out->print(\"LoadKlassStub\"); }\n+#endif \/\/ PRODUCT\n+};\n+\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -882,0 +882,14 @@\n+\/\/ LIR_OpLoadKlass\n+    case lir_load_klass:\n+    {\n+      LIR_OpLoadKlass* opLoadKlass = op->as_OpLoadKlass();\n+      assert(opLoadKlass != NULL, \"must be\");\n+\n+      do_input(opLoadKlass->_obj);\n+      do_output(opLoadKlass->_result);\n+      do_stub(opLoadKlass->_stub);\n+      if (opLoadKlass->_info) do_info(opLoadKlass->_info);\n+      break;\n+    }\n+\n+\n@@ -1051,0 +1065,5 @@\n+void LIR_OpLoadKlass::emit_code(LIR_Assembler* masm) {\n+  masm->emit_load_klass(this);\n+  masm->append_code_stub(stub());\n+}\n+\n@@ -1972,0 +1991,6 @@\n+void LIR_OpLoadKlass::print_instr(outputStream* out) const {\n+  obj()->print(out);        out->print(\" \");\n+  result_opr()->print(out); out->print(\" \");\n+  out->print(\"[lbl:\" INTPTR_FORMAT \"]\", p2i(stub()->entry()));\n+}\n+\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -879,0 +879,1 @@\n+class    LIR_OpLoadKlass;\n@@ -923,0 +924,1 @@\n+      , lir_load_klass\n@@ -1132,0 +1134,1 @@\n+  virtual LIR_OpLoadKlass* as_OpLoadKlass() { return NULL; }\n@@ -1804,0 +1807,22 @@\n+class LIR_OpLoadKlass: public LIR_Op {\n+  friend class LIR_OpVisitState;\n+\n+ private:\n+  LIR_Opr _obj;\n+  CodeStub* _stub;\n+  CodeEmitInfo* _info;\n+ public:\n+  LIR_OpLoadKlass(LIR_Opr obj, LIR_Opr result, CodeStub* stub, CodeEmitInfo* info)\n+    : LIR_Op(lir_load_klass, result, NULL)\n+    , _obj(obj)\n+    , _stub(stub)\n+    , _info(info) {}\n+\n+  LIR_Opr obj()        const { return _obj;  }\n+  CodeStub* stub()     const { return _stub; }\n+  CodeEmitInfo* info() const { return _info; }\n+\n+  virtual LIR_OpLoadKlass* as_OpLoadKlass() { return this; }\n+  virtual void emit_code(LIR_Assembler* masm);\n+  void print_instr(outputStream* out) const PRODUCT_RETURN;\n+};\n@@ -2246,0 +2271,3 @@\n+\n+  void load_klass(LIR_Opr obj, LIR_Opr result, CodeStub* stub, CodeEmitInfo* info) { append(new LIR_OpLoadKlass(obj, result, stub, info)); }\n+\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -200,0 +200,1 @@\n+  void emit_load_klass(LIR_OpLoadKlass* op);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1234,0 +1234,6 @@\n+void LIRGenerator::load_klass(LIR_Opr obj, LIR_Opr klass, CodeEmitInfo* null_check_info) {\n+  CodeStub* slow_path = new LoadKlassStub(obj, klass);\n+  __ load_klass(obj, klass, slow_path, null_check_info);\n+  __ branch_destination(slow_path->continuation());\n+}\n+\n@@ -1240,1 +1246,1 @@\n-  LIR_Opr temp = new_register(T_METADATA);\n+  LIR_Opr temp = new_register(T_ADDRESS);\n@@ -1249,4 +1255,3 @@\n-  \/\/ FIXME T_ADDRESS should actually be T_METADATA but it can't because the\n-  \/\/ meaning of these two is mixed up (see JDK-8026837).\n-  __ move(new LIR_Address(rcvr.result(), oopDesc::klass_offset_in_bytes(), T_ADDRESS), temp, info);\n-  __ move_wide(new LIR_Address(temp, in_bytes(Klass::java_mirror_offset()), T_ADDRESS), temp);\n+  LIR_Opr klass = new_register(T_METADATA);\n+  load_klass(rcvr.result(), klass, info);\n+  __ move_wide(new LIR_Address(klass, in_bytes(Klass::java_mirror_offset()), T_ADDRESS), temp);\n@@ -1325,1 +1330,1 @@\n-  __ move(new LIR_Address(value.result(), oopDesc::klass_offset_in_bytes(), T_ADDRESS), klass, NULL);\n+  load_klass(value.result(), klass, NULL);\n@@ -3571,1 +3576,1 @@\n-  __ move(new LIR_Address(array, oopDesc::klass_offset_in_bytes(), T_ADDRESS), klass, null_check_info);\n+  load_klass(array, klass, null_check_info);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -242,0 +242,2 @@\n+  void load_klass(LIR_Opr obj, LIR_Opr klass, CodeEmitInfo* null_check_info);\n+\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -241,0 +241,1 @@\n+  case load_klass_id:\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+  stub(load_klass)                   \\\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -337,1 +337,1 @@\n-      __ move(new LIR_Address(base_reg, oopDesc::klass_offset_in_bytes(), T_ADDRESS), src_klass);\n+      gen->load_klass(base_reg, src_klass, NULL);\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,4 @@\n-  return oop(o)->klass();\n+  oop obj = oop(o);\n+  assert(oopDesc::is_oop(obj), \"need a valid oop here: \" PTR_FORMAT, p2i(o));\n+  Klass* klass = obj->klass();\n+  return klass;\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}