{"files":[{"patch":"@@ -4593,1 +4593,0 @@\n-  assert(CompressedKlassPointers::shift() != 0, \"not lilliput?\");\n@@ -4606,1 +4605,1 @@\n-  const uint64_t shifted_base = base_u64 >> CompressedKlassPointers::shift();\n+  const uint64_t shifted_base = base_u64 >> LogKlassAlignmentInBytes;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5459,1 +5459,0 @@\n-  assert(CompressedKlassPointers::shift() != 0, \"not lilliput?\");\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +29,1 @@\n-#include \"oops\/compressedKlass.hpp\"\n+#include \"oops\/compressedKlass.inline.hpp\"\n@@ -33,1 +34,2 @@\n-address CompressedKlassPointers::_base = nullptr;\n+uintptr_t CompressedKlassPointers::_value = 0;\n+address CompressedKlassPointers::_base_copy = nullptr;\n@@ -57,0 +59,2 @@\n+  address thebase = nullptr;\n+\n@@ -74,1 +78,1 @@\n-    _base = addr;\n+    thebase = addr;\n@@ -80,1 +84,1 @@\n-      _base = 0;\n+      thebase = nullptr;\n@@ -82,1 +86,1 @@\n-      _base = addr;\n+      thebase = addr;\n@@ -86,3 +90,3 @@\n-  assert(is_valid_base(_base), \"Address \" PTR_FORMAT \" was chosen as encoding base for range [\"\n-                               PTR_FORMAT \", \" PTR_FORMAT \") but is not a valid encoding base\",\n-                               p2i(_base), p2i(addr), p2i(addr + len));\n+  assert(is_valid_base(thebase), \"Address \" PTR_FORMAT \" was chosen as encoding base for range [\"\n+                              PTR_FORMAT \", \" PTR_FORMAT \") but is not a valid encoding base\",\n+                              p2i(thebase), p2i(addr), p2i(addr + len));\n@@ -91,0 +95,1 @@\n+  _base_copy = thebase;\n@@ -93,0 +98,13 @@\n+  assert(LogKlassAlignmentInBytes < (1 << encodingShiftWidth), \"Shift too large\");\n+  assert((((uintptr_t)thebase) & ~baseAddressMask) == 0, \"Base address \" PTR_FORMAT \" unaligned\", p2i(thebase));\n+\n+  _value = (UseCompactObjectHeaders ? ((uintptr_t)1 << useCompactObjectHeadersShift) : 0) |\n+           (UseCompressedClassPointers ? ((uintptr_t)1 << useCompressedClassPointersShift) : 0) |\n+           ((uintptr_t)LogKlassAlignmentInBytes << encodingShiftShift) |\n+           ((uintptr_t)thebase & baseAddressMask);\n+\n+  assert(use_compact_object_headers() == UseCompactObjectHeaders, \"Sanity\");\n+  assert(use_compressed_class_pointers() == UseCompressedClassPointers, \"Sanity\");\n+  assert(shift() == LogKlassAlignmentInBytes, \"Sanity\");\n+  assert(base() == thebase, \"Sanity\");\n+\n@@ -122,1 +140,0 @@\n-\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -69,4 +69,21 @@\n-  \/\/ Encoding base\n-  static address _base;\n-\n-  \/\/ Shift is actually a constant; we keep this just for the SA (see vmStructs.cpp and\n+  \/\/ A dense representation of values one often loads in quick succession, in order to fold\n+  \/\/ all of them into a single load:\n+  \/\/ - UseCompactObjectHeaders and UseCompressedClassPointers flags\n+  \/\/ - encoding base and encoding shift\n+  \/\/ We can encode everything (including the encoding base) in a 64-bit word. The encoding\n+  \/\/ base will always be page aligned, so we have a 12-bit alignment shadow to store the rest\n+  \/\/ of the data.\n+\n+  static uintptr_t _value;\n+  static constexpr int useCompactObjectHeadersShift = 0;\n+  static constexpr int useCompressedClassPointersShift = 1;\n+  static constexpr int encodingShiftShift = 2;\n+  static constexpr int encodingShiftWidth = 5;\n+  static constexpr int baseAddressMask = ~right_n_bits(12);\n+\n+  static void set_encoding_base(address base);\n+  static void set_encoding_shift(int shift);\n+  static void set_use_compact_headers(bool b);\n+  static void set_use_compressed_class_pointers(bool b);\n+\n+  \/\/ These members hold copies of encoding base and shift and only exist for SA (see vmStructs.cpp and\n@@ -74,0 +91,1 @@\n+  static address _base_copy;\n@@ -99,1 +117,1 @@\n-  static void     print_mode(outputStream* st);\n+  static void print_mode(outputStream* st);\n@@ -103,1 +121,3 @@\n-  static address  base()             { return  _base; }\n+  static inline address base() {\n+    return (address)(_value & baseAddressMask);\n+  }\n@@ -106,1 +126,3 @@\n-  static address  end()              { return base() + KlassEncodingMetaspaceMax; }\n+  static inline address  end() {\n+    return base() + KlassEncodingMetaspaceMax;\n+  }\n@@ -109,1 +131,6 @@\n-  static int      shift()            { return  LogKlassAlignmentInBytes; }\n+  static inline int shift() {\n+    return (_value >> encodingShiftShift) & right_n_bits(encodingShiftWidth);\n+  }\n+\n+  static inline bool use_compact_object_headers()    { return (_value >> useCompactObjectHeadersShift) & 1; }\n+  static inline bool use_compressed_class_pointers() { return (_value >> useCompressedClassPointersShift) & 1; }\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":35,"deletions":8,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    assert(UseCompressedClassPointers, \"expect compressed klass pointers\");\n+    assert(CompressedKlassPointers::use_compressed_class_pointers(), \"expect compressed klass pointers\");\n@@ -112,2 +112,2 @@\n-  if (UseCompactObjectHeaders) {\n-    assert(UseCompressedClassPointers, \"only with compressed class pointers\");\n+  if (CompressedKlassPointers::use_compact_object_headers()) {\n+    assert(CompressedKlassPointers::use_compressed_class_pointers(), \"only with compressed class pointers\");\n@@ -116,1 +116,1 @@\n-  } else if (UseCompressedClassPointers) {\n+  } else if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -125,2 +125,2 @@\n-  if (UseCompactObjectHeaders) {\n-    assert(UseCompressedClassPointers, \"only with compressed class pointers\");\n+  if (CompressedKlassPointers::use_compact_object_headers()) {\n+    assert(CompressedKlassPointers::use_compressed_class_pointers(), \"only with compressed class pointers\");\n@@ -129,1 +129,1 @@\n-  } else if (UseCompressedClassPointers) {\n+  } else if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -138,2 +138,2 @@\n-  if (UseCompactObjectHeaders) {\n-    assert(UseCompressedClassPointers, \"only with compressed class pointers\");\n+  if (CompressedKlassPointers::use_compact_object_headers()) {\n+    assert(CompressedKlassPointers::use_compressed_class_pointers(), \"only with compressed class pointers\");\n@@ -145,1 +145,1 @@\n-  } else if (UseCompressedClassPointers) {\n+  } else if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -160,1 +160,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -171,1 +171,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -181,1 +181,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-     static_field(CompressedKlassPointers,     _base,                           address)                                             \\\n+     static_field(CompressedKlassPointers,     _base_copy,                           address)                                        \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}