{"files":[{"patch":"@@ -261,1 +261,9 @@\n-    __ push(RegSet::of(r0), sp);\n+    \/\/ Note: we cannot push\/pop r0 around the call, because that\n+    \/\/ would mess with the stack pointer sp, and we need that to\n+    \/\/ remain intact for store_paramater\/load_argument to work correctly.\n+    \/\/ We swap r0 and res instead, which preserves current r0 in res.\n+    \/\/ The preserved value is later saved and restored around the\n+    \/\/ call in Runtime1::load_klass_id.\n+    __ mov(rscratch1, r0);\n+    __ mov(r0, res);\n+    __ mov(res, rscratch1);\n@@ -263,1 +271,1 @@\n-  __ far_jump(RuntimeAddress(Runtime1::entry_for(Runtime1::load_klass_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::load_klass_id)));\n@@ -265,2 +273,5 @@\n-    __ mov(res, r0);\n-    __ pop(RegSet::of(r0), sp);\n+    \/\/ Swap back r0 and res. This brings the call return value\n+    \/\/ from r0 into res, and the preserved value in res back into r0.\n+    __ mov(rscratch1, r0);\n+    __ mov(r0, res);\n+    __ mov(res, rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"}]}