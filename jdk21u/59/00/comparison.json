{"files":[{"patch":"@@ -82,0 +82,3 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/jfrEvents.hpp\"\n+#endif\n@@ -1117,0 +1120,5 @@\n+#if INCLUDE_JFR\n+  EventNativeLibraryLoad event;\n+  event.set_name(filename);\n+#endif\n+\n@@ -1124,0 +1132,7 @@\n+\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n+\n@@ -1137,0 +1152,6 @@\n+\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(error_report);\n+    event.commit();\n+#endif\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -982,0 +982,5 @@\n+#if INCLUDE_JFR\n+  EventNativeLibraryLoad event;\n+  event.set_name(filename);\n+#endif\n+\n@@ -987,0 +992,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n@@ -1001,0 +1011,5 @@\n+#if INCLUDE_JFR\n+  event.set_success(false);\n+  event.set_errorMessage(error_report);\n+  event.commit();\n+#endif\n@@ -1011,0 +1026,6 @@\n+\n+#if INCLUDE_JFR\n+  EventNativeLibraryLoad event;\n+  event.set_name(filename);\n+#endif\n+\n@@ -1016,0 +1037,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n@@ -1032,1 +1058,5 @@\n-\n+#if INCLUDE_JFR\n+  event.set_success(false);\n+  event.set_errorMessage(error_report);\n+  event.commit();\n+#endif\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1790,0 +1790,6 @@\n+\n+#if INCLUDE_JFR\n+  EventNativeLibraryLoad event;\n+  event.set_name(filename);\n+#endif\n+\n@@ -1801,0 +1807,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(error_report);\n+    event.commit();\n+#endif\n@@ -1804,0 +1815,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1531,1 +1531,4 @@\n-\n+#if INCLUDE_JFR\n+  EventNativeLibraryLoad event;\n+  event.set_name(name);\n+#endif\n@@ -1538,0 +1541,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(true);\n+    event.set_errorMessage(nullptr);\n+    event.commit();\n+#endif\n@@ -1551,0 +1559,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(ebuf);\n+    event.commit();\n+#endif\n@@ -1561,0 +1574,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(\"open on dll file did not work\");\n+    event.commit();\n+#endif\n@@ -1587,0 +1605,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(\"failed to get lib architecture\");\n+    event.commit();\n+#endif\n@@ -1631,0 +1654,5 @@\n+#if INCLUDE_JFR\n+    event.set_success(false);\n+    event.set_errorMessage(\"lib architecture matches, but other error occured\");\n+    event.commit();\n+#endif\n@@ -1644,0 +1672,5 @@\n+#if INCLUDE_JFR\n+  event.set_success(false);\n+  event.set_errorMessage(ebuf);\n+  event.commit();\n+#endif\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -941,0 +941,7 @@\n+  <Event name=\"NativeLibraryLoad\" category=\"Java Virtual Machine, Runtime\" label=\"Native Library Load\" thread=\"false\" stackTrace=\"true\" startTime=\"true\"\n+    description=\"Information about a dynamic library or other native image load operation\">\n+    <Field type=\"string\" name=\"name\" label=\"Name\" \/>\n+    <Field type=\"boolean\" name=\"success\" label=\"Success\" description=\"Success or failure of the load operation\" \/>\n+    <Field type=\"string\" name=\"errorMessage\" label=\"Error Message\" description=\"In case of a load error, error description\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -697,0 +697,6 @@\n+    <event name=\"jdk.NativeLibraryLoad\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -697,0 +697,6 @@\n+    <event name=\"jdk.NativeLibraryLoad\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.runtime;\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @bug 8313251\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.event.runtime.TestNativeLibraryLoadEvent\n+ *\/\n+public class TestNativeLibraryLoadEvent {\n+\n+    private final static String EVENT_NAME = EventNames.NativeLibraryLoad;\n+\n+    public static void main(String[] args) throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EVENT_NAME);\n+            recording.start();\n+            System.loadLibrary(\"instrument\");\n+            recording.stop();\n+\n+            List<String> expectedLibs = getExpectedLibs();\n+            for (RecordedEvent event : Events.fromRecording(recording)) {\n+                System.out.println(\"Event:\" + event);\n+                String lib = Events.assertField(event, \"name\").notEmpty().getValue();\n+                Events.assertField(event, \"success\");\n+                for (String expectedLib : new ArrayList<>(expectedLibs)) {\n+                    if (lib.contains(expectedLib)) {\n+                        expectedLibs.remove(expectedLib);\n+                    }\n+                }\n+            }\n+            assertTrue(expectedLibs.isEmpty(), \"Missing libraries:\" + expectedLibs.stream().collect(Collectors.joining(\", \")));\n+        }\n+    }\n+\n+    private static List<String> getExpectedLibs() throws Throwable {\n+        String libTemplate = null;\n+        if (Platform.isWindows()) {\n+            libTemplate = \"%s.dll\";\n+        } else if (Platform.isOSX()) {\n+            libTemplate = \"lib%s.dylib\";\n+        } else if (Platform.isLinux()) {\n+            libTemplate = \"lib%s.so\";\n+        } else if (Platform.isAix()) {\n+            libTemplate = \"lib%s.so\";\n+        }\n+\n+        if (libTemplate == null) {\n+            throw new Exception(\"Unsupported OS\");\n+        }\n+\n+        List<String> libs = new ArrayList<String>();\n+        String[] names = { \"instrument\" };\n+        for (String name : names) {\n+            libs.add(String.format(libTemplate, name));\n+        }\n+        return libs;\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeLibraryLoadEvent.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -186,0 +186,1 @@\n+    public static final String NativeLibraryLoad = PREFIX + \"NativeLibraryLoad\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}