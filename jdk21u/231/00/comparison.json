{"files":[{"patch":"@@ -78,13 +78,3 @@\n-    private static class Deallocator\n-        implements Runnable\n-    {\n-\n-        private long address;\n-        private long size;\n-        private int capacity;\n-\n-        private Deallocator(long address, long size, int capacity) {\n-            assert (address != 0);\n-            this.address = address;\n-            this.size = size;\n-            this.capacity = capacity;\n+    private record Deallocator(long address, long size, int capacity) implements Runnable {\n+        private Deallocator {\n+            assert address != 0;\n@@ -94,4 +84,0 @@\n-            if (address == 0) {\n-                \/\/ Paranoia\n-                return;\n-            }\n@@ -99,1 +85,0 @@\n-            address = 0;\n@@ -102,1 +87,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -119,22 +119,27 @@\n-        return fd != null ?\n-                new UnmapperProxy() {\n-                    @Override\n-                    public long address() {\n-                        return address;\n-                    }\n-\n-                    @Override\n-                    public FileDescriptor fileDescriptor() {\n-                        return fd;\n-                    }\n-\n-                    @Override\n-                    public boolean isSync() {\n-                        return isSync;\n-                    }\n-\n-                    @Override\n-                    public void unmap() {\n-                        Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n-                    }\n-                } : null;\n+        return fd == null\n+                ? null\n+                : new UnmapperProxy() {\n+\n+            \/\/ Ensure safe publication as MappedByteBuffer.this.address is not final\n+            private final long addr = address;\n+\n+            @Override\n+            public long address() {\n+                return addr;\n+            }\n+\n+            @Override\n+            public FileDescriptor fileDescriptor() {\n+                return fd;\n+            }\n+\n+            @Override\n+            public boolean isSync() {\n+                return isSync;\n+            }\n+\n+            @Override\n+            public void unmap() {\n+                Unsafe.getUnsafe().invokeCleaner(MappedByteBuffer.this);\n+            }\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1044,1 +1044,1 @@\n-    private abstract static class Unmapper\n+    private sealed abstract static class Unmapper\n@@ -1047,1 +1047,1 @@\n-        private volatile long address;\n+        private final long address;\n@@ -1084,2 +1084,0 @@\n-            if (address == 0)\n-                return;\n@@ -1087,1 +1085,0 @@\n-            address = 0;\n@@ -1104,1 +1101,1 @@\n-    private static class DefaultUnmapper extends Unmapper {\n+    private static final class DefaultUnmapper extends Unmapper {\n@@ -1137,1 +1134,1 @@\n-    private static class SyncUnmapper extends Unmapper {\n+    private static final class SyncUnmapper extends Unmapper {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}