{"files":[{"patch":"@@ -170,1 +170,1 @@\n-    private final Set<Pair<JCTree, RefSet<Ref>>> invocations = new HashSet<>();\n+    private final Set<Pair<JCMethodDecl, RefSet<Ref>>> invocations = new HashSet<>();\n@@ -593,1 +593,1 @@\n-            Pair<JCTree, RefSet<Ref>> invocation = Pair.of(site, refs.clone());\n+            Pair<JCMethodDecl, RefSet<Ref>> invocation = Pair.of(methodInfo.declaration, refs.clone());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -620,0 +620,30 @@\n+\n+    \/\/ Verify no infinite recursion loop occurs (JDK-8317818)\n+    public static class ThisEscapeRecursionExplosion {\n+        private Object obj;\n+        public ThisEscapeRecursionExplosion() {\n+            getObject();\n+        }\n+        private Object getObject() {\n+            if (this.obj == null) {\n+                this.obj = new Object();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+                getObject().hashCode();\n+            }\n+            return this.obj;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/warnings\/ThisEscape.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}