{"files":[{"patch":"@@ -49,1 +49,3 @@\n-java\/lang\/ScopedValue\/StressStackOverflow.java#default 8309646 linux-all\n+java\/lang\/ScopedValue\/StressStackOverflow.java#default 8309646 generic-all\n+java\/lang\/ScopedValue\/StressStackOverflow.java#no-TieredCompilation 8309646 generic-all\n+java\/lang\/ScopedValue\/StressStackOverflow.java#TieredStopAtLevel1 8309646 generic-all\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,7 @@\n- * @summary StressStackOverflow the recovery path for ScopedValue\n+ * @summary Stress ScopedValue stack overflow recovery path\n+ * @enablePreview\n+ * @run main\/othervm\/timeout=300 StressStackOverflow\n+ *\/\n+\n+\/*\n+ * @test id=no-TieredCompilation\n@@ -29,0 +35,5 @@\n+ *\/\n+\n+\/*\n+ * @test id=TieredStopAtLevel1\n+ * @enablePreview\n@@ -30,1 +41,0 @@\n- * @run main\/othervm\/timeout=300 StressStackOverflow\n@@ -40,0 +50,1 @@\n+import java.time.Duration;\n@@ -58,1 +69,1 @@\n-    static final long MINUTES = 60 * 1_000_000_000L; \/\/ 60 * 10**9 ns\n+    static final long DURATION_IN_NANOS = Duration.ofMinutes(2).toNanos();\n@@ -81,1 +92,1 @@\n-                if (System.nanoTime() - startTime > 3 * MINUTES) { \/\/ 3 minutes is long enough\n+                if (System.nanoTime() - startTime > DURATION_IN_NANOS) {\n@@ -235,1 +246,1 @@\n-                && System.nanoTime() - startTime <= 3 * MINUTES) { \/\/ 3 minutes is long enough\n+                && System.nanoTime() - startTime <= DURATION_IN_NANOS) {\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/StressStackOverflow.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"}]}