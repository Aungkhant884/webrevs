{"files":[{"patch":"@@ -16416,1 +16416,1 @@\n-instruct cmpFastLock(rFlagsReg cr, iRegP object, iRegP box, iRegPNoSp tmp, iRegPNoSp tmp2)\n+instruct cmpFastLock(rFlagsReg cr, iRegP object, iRegP box, iRegPNoSp tmp, iRegPNoSp tmp2, iRegPNoSp tmp3)\n@@ -16419,1 +16419,1 @@\n-  effect(TEMP tmp, TEMP tmp2);\n+  effect(TEMP tmp, TEMP tmp2, TEMP tmp3);\n@@ -16427,1 +16427,1 @@\n-    __ fast_lock($object$$Register, $box$$Register, $tmp$$Register, $tmp2$$Register);\n+    __ fast_lock($object$$Register, $box$$Register, $tmp$$Register, $tmp2$$Register, $tmp3$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-      __ unlock_object(r5, r4, r0, *stub->entry());\n+      __ unlock_object(r5, r4, r0, r6, *stub->entry());\n@@ -2561,0 +2561,1 @@\n+  Register temp = op->scratch_opr()->as_register();\n@@ -2570,1 +2571,1 @@\n-    int null_check_offset = __ lock_object(hdr, obj, lock, *op->stub()->entry());\n+    int null_check_offset = __ lock_object(hdr, obj, lock, temp, *op->stub()->entry());\n@@ -2577,1 +2578,1 @@\n-    __ unlock_object(hdr, obj, lock, *op->stub()->entry());\n+    __ unlock_object(hdr, obj, lock, temp, *op->stub()->entry());\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -317,0 +317,1 @@\n+  LIR_Opr scratch = new_register(T_INT);\n@@ -325,1 +326,1 @@\n-  monitor_enter(obj.result(), lock, syncTempOpr(), LIR_OprFact::illegalOpr,\n+  monitor_enter(obj.result(), lock, syncTempOpr(), scratch,\n@@ -338,0 +339,1 @@\n+  LIR_Opr scratch = new_register(T_INT);\n@@ -339,1 +341,1 @@\n-  monitor_exit(obj_temp, lock, syncTempOpr(), LIR_OprFact::illegalOpr, x->monitor_no());\n+  monitor_exit(obj_temp, lock, syncTempOpr(), scratch, x->monitor_no());\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register disp_hdr, Label& slow_case) {\n+int C1_MacroAssembler::lock_object(Register hdr, Register obj, Register disp_hdr, Register temp, Label& slow_case) {\n@@ -66,1 +66,1 @@\n-  assert_different_registers(hdr, obj, disp_hdr);\n+  assert_different_registers(hdr, obj, disp_hdr, temp, rscratch2);\n@@ -86,1 +86,1 @@\n-    lightweight_lock(obj, hdr, rscratch1, rscratch2, slow_case);\n+    lightweight_lock(obj, hdr, temp, rscratch2, slow_case);\n@@ -128,1 +128,1 @@\n-void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register disp_hdr, Label& slow_case) {\n+void C1_MacroAssembler::unlock_object(Register hdr, Register obj, Register disp_hdr, Register temp, Label& slow_case) {\n@@ -131,1 +131,1 @@\n-  assert(hdr != obj && hdr != disp_hdr && obj != disp_hdr, \"registers must be different\");\n+  assert_different_registers(hdr, obj, disp_hdr, temp, rscratch2);\n@@ -152,1 +152,1 @@\n-    lightweight_unlock(obj, hdr, rscratch1, rscratch2, slow_case);\n+    lightweight_unlock(obj, hdr, temp, rscratch2, slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+  \/\/ temp    : temporary register, must not be rscratch1 or rscratch2\n@@ -62,1 +63,1 @@\n-  int lock_object  (Register swap, Register obj, Register disp_hdr, Label& slow_case);\n+  int lock_object  (Register swap, Register obj, Register disp_hdr, Register temp, Label& slow_case);\n@@ -68,1 +69,2 @@\n-  void unlock_object(Register swap, Register obj, Register lock, Label& slow_case);\n+  \/\/ temp    : temporary register, must not be rscratch1 or rscratch2\n+  void unlock_object(Register swap, Register obj, Register lock, Register temp, Label& slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                                  Register tmp2Reg) {\n+                                  Register tmp2Reg, Register tmp3Reg) {\n@@ -107,1 +107,1 @@\n-    lightweight_lock(oop, disp_hdr, tmp, rscratch1, no_count);\n+    lightweight_lock(oop, disp_hdr, tmp, tmp3Reg, no_count);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  void fast_lock(Register object, Register box, Register tmp, Register tmp2);\n+  void fast_lock(Register object, Register box, Register tmp, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -728,1 +728,1 @@\n-\/\/      c_rarg0, c_rarg1, c_rarg2, c_rarg3, .. (param regs)\n+\/\/      c_rarg0, c_rarg1, c_rarg2, c_rarg3, c_rarg4, .. (param regs)\n@@ -743,0 +743,2 @@\n+    const Register tmp2 = c_rarg4;\n+    const Register tmp3 = c_rarg5;\n@@ -763,1 +765,1 @@\n-      lightweight_lock(obj_reg, tmp, rscratch1, rscratch2, slow_case);\n+      lightweight_lock(obj_reg, tmp, tmp2, tmp3, slow_case);\n@@ -861,0 +863,1 @@\n+    const Register tmp_reg    = c_rarg4;  \/\/ Temporary used by lightweight_unlock\n@@ -894,1 +897,1 @@\n-      lightweight_unlock(obj_reg, header_reg, swap_reg, rscratch1, slow_case);\n+      lightweight_unlock(obj_reg, header_reg, swap_reg, tmp_reg, slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2740,0 +2740,4 @@\n+#ifdef ASSERT\n+    \/\/ Poison rscratch1 which is written on !UseLSE branch\n+    mov(rscratch1, 0x1f1f1f1f1f1f1f1f);\n+#endif\n@@ -6224,1 +6228,1 @@\n-  assert_different_registers(obj, hdr, t1, t2);\n+  assert_different_registers(obj, hdr, t1, t2, rscratch1);\n@@ -6236,0 +6240,1 @@\n+  \/\/ Clobbers rscratch1 when UseLSE is false\n@@ -6256,1 +6261,1 @@\n-  assert_different_registers(obj, hdr, t1, t2);\n+  assert_different_registers(obj, hdr, t1, t2, rscratch1);\n@@ -6296,0 +6301,1 @@\n+  \/\/ Clobbers rscratch1 when UseLSE is false\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1762,0 +1762,1 @@\n+  const Register lock_tmp = r14;  \/\/ Temporary used by lightweight_lock\/unlock\n@@ -1815,1 +1816,1 @@\n-      __ lightweight_lock(obj_reg, swap_reg, tmp, rscratch1, slow_path_lock);\n+      __ lightweight_lock(obj_reg, swap_reg, tmp, lock_tmp, slow_path_lock);\n@@ -1956,1 +1957,1 @@\n-      __ lightweight_unlock(obj_reg, old_hdr, swap_reg, rscratch1, slow_path_unlock);\n+      __ lightweight_unlock(obj_reg, old_hdr, swap_reg, lock_tmp, slow_path_unlock);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}