{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit TempDirDoesNotExist\n@@ -30,1 +31,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -32,0 +32,1 @@\n+import jdk.test.lib.process.ProcessTools;\n@@ -34,0 +35,1 @@\n+import java.io.IOException;\n@@ -38,0 +40,1 @@\n+import java.util.stream.Stream;\n@@ -39,2 +42,5 @@\n-public class TempDirDoesNotExist {\n-    final static String ioWarningMsg = \"WARNING: java.io.tmpdir directory does not exist\";\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -42,1 +48,2 @@\n-    public static void main(String... args) throws Exception {\n+public class TempDirDoesNotExist {\n+    final static String WARNING = \"WARNING: java.io.tmpdir directory does not exist\";\n@@ -44,3 +51,1 @@\n-        String userDir = System.getProperty(\"user.home\");\n-        String timeStamp = System.currentTimeMillis() + \"\";\n-        String tempDir = Path.of(userDir,\"non-existing-\", timeStamp).toString();\n+    private static final String USER_DIR = System.getProperty(\"user.home\");\n@@ -48,0 +53,4 @@\n+    \/\/\n+    \/\/ This class is spawned to test combinations of parameters.\n+    \/\/\n+    public static void main(String... args) throws IOException {\n@@ -49,5 +58,24 @@\n-            if (arg.equals(\"io\")) {\n-                try {\n-                    File.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n+            switch (arg) {\n+                case \"io\" -> {\n+                    File file = null;\n+                    try {\n+                        file = File.createTempFile(\"prefix\", \".suffix\");\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    } finally {\n+                        if (file != null && file.exists())\n+                            if (!file.delete())\n+                                throw new RuntimeException(file + \" not deleted\");\n+                    }\n+                }\n+                case \"nio\" -> {\n+                Path path = null;\n+                    try {\n+                        path = Files.createTempFile(\"prefix\", \".suffix\");\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    } finally {\n+                        if (path != null)\n+                            if (!Files.deleteIfExists(path))\n+                                throw new RuntimeException(path + \" not deleted\");\n+                    }\n@@ -55,5 +83,2 @@\n-            } else if (arg.equals(\"nio\")) {\n-                try {\n-                    Files.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n+                default -> {\n+                    throw new RuntimeException(\"unknown case: \" + arg);\n@@ -61,2 +86,0 @@\n-            } else {\n-                throw new Exception(\"unknown case: \" + arg);\n@@ -65,0 +88,1 @@\n+    }\n@@ -66,16 +90,4 @@\n-        if (args.length == 0) {\n-            \/\/ standard test with default setting for java.io.tmpdir\n-            testMessageNotExist(0, ioWarningMsg, \"TempDirDoesNotExist\", \"io\");\n-            testMessageNotExist(0, ioWarningMsg, \"TempDirDoesNotExist\", \"nio\");\n-\n-            \/\/ valid custom java.io.tmpdir\n-            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n-                    \"TempDirDoesNotExist\", \"io\");\n-            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n-                    \"TempDirDoesNotExist\", \"nio\");\n-\n-            \/\/ invalid custom java.io.tmpdir\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirDoesNotExist\", \"io\");\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirDoesNotExist\", \"nio\");\n+    private static String tempDir() {\n+        String timeStamp = String.valueOf(System.currentTimeMillis());\n+        return Path.of(USER_DIR, \"non-existing-\", timeStamp).toString();\n+    }\n@@ -83,4 +95,12 @@\n-            \/\/ test with security manager\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n-                            + \" -Djava.security.manager\",\n-                    \"TempDirDoesNotExist\", \"io\");\n+    public static Stream<Arguments> tempDirSource() {\n+        return Stream.of(Arguments.of(List.of(\"-Djava.io.tmpdir=\" + tempDir(),\n+                                              \"TempDirDoesNotExist\", \"io\")),\n+                         Arguments.of(List.of(\"-Djava.io.tmpdir=\" + tempDir(),\n+                                              \"TempDirDoesNotExist\", \"nio\")),\n+                         Arguments.of(List.of(\"-Djava.io.tmpdir=\" + tempDir() +\n+                                              \" -Djava.security.manager\",\n+                                              \"TempDirDoesNotExist\", \"io\")),\n+                         Arguments.of(List.of(\"-Djava.io.tmpdir=\" + tempDir() +\n+                                              \" -Djava.security.manager\",\n+                                              \"TempDirDoesNotExist\", \"nio\")));\n+    }\n@@ -88,3 +108,8 @@\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n-                            + \" -Djava.security.manager\",\n-                    \"TempDirDoesNotExist\", \"nio\");\n+    public static Stream<Arguments> noTempDirSource() {\n+        return Stream.of(Arguments.of(List.of(\"TempDirDoesNotExist\", \"io\")),\n+                         Arguments.of(List.of(\"TempDirDoesNotExist\", \"nio\")),\n+                         Arguments.of(List.of(\"-Djava.io.tmpdir=\" + USER_DIR,\n+                                              \"TempDirDoesNotExist\", \"io\")),\n+                         Arguments.of(List.of(\"-Djava.io.tmpdir=\" + USER_DIR,\n+                                              \"TempDirDoesNotExist\", \"nio\")));\n+    }\n@@ -92,4 +117,5 @@\n-            \/\/ error message printed only once\n-            testMessageCounter(0, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirDoesNotExist\", \"io\", \"nio\");\n-        }\n+    public static Stream<Arguments> counterSource() {\n+        \/\/ standard test with default setting for java.io.tmpdir\n+        return Stream.of(Arguments.of(List.of(\"-Djava.io.tmpdir=\" + tempDir(),\n+                                             \"TempDirDoesNotExist\",\n+                                             \"io\", \"nio\")));\n@@ -98,3 +124,5 @@\n-    private static void testMessageExist(int exitValue, String errorMsg, String... options) throws Exception {\n-        ProcessTools.executeTestJvm(options).shouldContain(errorMsg)\n-                .shouldHaveExitValue(exitValue);\n+    @ParameterizedTest\n+    @MethodSource(\"tempDirSource\")\n+    public void existingMessage(List<String> options) throws Exception {\n+       ProcessTools.executeTestJvm(options).shouldContain(WARNING)\n+           .shouldHaveExitValue(0);\n@@ -103,2 +131,5 @@\n-    private static void testMessageNotExist(int exitValue, String errorMsg,String... options) throws Exception {\n-        ProcessTools.executeTestJvm(options).shouldNotContain(errorMsg).shouldHaveExitValue(exitValue);\n+    @ParameterizedTest\n+    @MethodSource(\"noTempDirSource\")\n+    public void nonexistentMessage(List<String> options) throws Exception {\n+        ProcessTools.executeTestJvm(options).shouldNotContain(WARNING)\n+            .shouldHaveExitValue(0);\n@@ -107,1 +138,3 @@\n-    private static void testMessageCounter(int exitValue,String... options) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"counterSource\")\n+    public void messageCounter(List<String> options) throws Exception {\n@@ -109,5 +142,7 @@\n-        List<String> list = originalOutput.asLines().stream().filter(line\n-                -> line.equalsIgnoreCase(ioWarningMsg)).collect(Collectors.toList());\n-        if (list.size() != 1 || originalOutput.getExitValue() != exitValue)\n-            throw new Exception(\"counter of messages is not one, but \" + list.size()\n-                    + \"\\n\" + originalOutput.asLines().toString() + \"\\n\");\n+        long count = originalOutput.asLines().stream().filter(\n+                line -> line.equalsIgnoreCase(WARNING)).count();\n+        assertEquals(1, count,\n+                     \"counter of messages is not one, but \" + count +\n+                     \"\\n\" + originalOutput.asLines().toString());\n+        int exitValue = originalOutput.getExitValue();\n+        assertEquals(0, exitValue);\n@@ -115,1 +150,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/io\/File\/TempDirDoesNotExist.java","additions":94,"deletions":59,"binary":false,"changes":153,"status":"modified"}]}