{"files":[{"patch":"@@ -71,2 +71,2 @@\n-    void setTcpkeepAliveProbes(int fd, final int value) throws SocketException {\n-        setTcpkeepAliveProbes0(fd, value);\n+    void setTcpKeepAliveProbes(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveProbes0(fd, value);\n@@ -86,2 +86,2 @@\n-    int getTcpkeepAliveProbes(int fd) throws SocketException {\n-        return getTcpkeepAliveProbes0(fd);\n+    int getTcpKeepAliveProbes(int fd) throws SocketException {\n+        return getTcpKeepAliveProbes0(fd);\n@@ -120,1 +120,1 @@\n-    private static native void setTcpkeepAliveProbes0(int fd, int value) throws SocketException;\n+    private static native void setTcpKeepAliveProbes0(int fd, int value) throws SocketException;\n@@ -124,1 +124,1 @@\n-    private static native int getTcpkeepAliveProbes0(int fd) throws SocketException;\n+    private static native int getTcpKeepAliveProbes0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/aix\/classes\/jdk\/net\/AIXSocketOptions.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n- * Method:    setTcpkeepAliveProbes0\n+ * Method:    setTcpKeepAliveProbes0\n@@ -156,1 +156,1 @@\n-JNIEXPORT void JNICALL Java_jdk_net_AIXSocketOptions_setTcpkeepAliveProbes0\n+JNIEXPORT void JNICALL Java_jdk_net_AIXSocketOptions_setTcpKeepAliveProbes0\n@@ -186,1 +186,1 @@\n- * Method:    getTcpkeepAliveProbes0\n+ * Method:    getTcpKeepAliveProbes0\n@@ -189,1 +189,1 @@\n-JNIEXPORT jint JNICALL Java_jdk_net_AIXSocketOptions_getTcpkeepAliveProbes0\n+JNIEXPORT jint JNICALL Java_jdk_net_AIXSocketOptions_getTcpKeepAliveProbes0\n","filename":"src\/jdk.net\/aix\/native\/libextnet\/AIXSocketOptions.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-    void setTcpkeepAliveProbes(int fd, final int value) throws SocketException {\n-        setTcpkeepAliveProbes0(fd, value);\n+    void setTcpKeepAliveProbes(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveProbes0(fd, value);\n@@ -86,2 +86,2 @@\n-    int getTcpkeepAliveProbes(int fd) throws SocketException {\n-        return getTcpkeepAliveProbes0(fd);\n+    int getTcpKeepAliveProbes(int fd) throws SocketException {\n+        return getTcpKeepAliveProbes0(fd);\n@@ -130,1 +130,1 @@\n-    private static native void setTcpkeepAliveProbes0(int fd, int value) throws SocketException;\n+    private static native void setTcpKeepAliveProbes0(int fd, int value) throws SocketException;\n@@ -134,1 +134,1 @@\n-    private static native int getTcpkeepAliveProbes0(int fd) throws SocketException;\n+    private static native int getTcpKeepAliveProbes0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/linux\/classes\/jdk\/net\/LinuxSocketOptions.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n- * Method:    setTcpkeepAliveProbes0\n+ * Method:    setTcpKeepAliveProbes0\n@@ -159,1 +159,1 @@\n-JNIEXPORT void JNICALL Java_jdk_net_LinuxSocketOptions_setTcpkeepAliveProbes0\n+JNIEXPORT void JNICALL Java_jdk_net_LinuxSocketOptions_setTcpKeepAliveProbes0\n@@ -189,1 +189,1 @@\n- * Method:    getTcpkeepAliveProbes0\n+ * Method:    getTcpKeepAliveProbes0\n@@ -192,1 +192,1 @@\n-JNIEXPORT jint JNICALL Java_jdk_net_LinuxSocketOptions_getTcpkeepAliveProbes0\n+JNIEXPORT jint JNICALL Java_jdk_net_LinuxSocketOptions_getTcpKeepAliveProbes0\n","filename":"src\/jdk.net\/linux\/native\/libextnet\/LinuxSocketOptions.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-    void setTcpkeepAliveProbes(int fd, final int value) throws SocketException {\n-        setTcpkeepAliveProbes0(fd, value);\n+    void setTcpKeepAliveProbes(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveProbes0(fd, value);\n@@ -72,2 +72,2 @@\n-    int getTcpkeepAliveProbes(int fd) throws SocketException {\n-        return getTcpkeepAliveProbes0(fd);\n+    int getTcpKeepAliveProbes(int fd) throws SocketException {\n+        return getTcpKeepAliveProbes0(fd);\n@@ -106,1 +106,1 @@\n-    private static native void setTcpkeepAliveProbes0(int fd, int value) throws SocketException;\n+    private static native void setTcpKeepAliveProbes0(int fd, int value) throws SocketException;\n@@ -110,1 +110,1 @@\n-    private static native int getTcpkeepAliveProbes0(int fd) throws SocketException;\n+    private static native int getTcpKeepAliveProbes0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/macosx\/classes\/jdk\/net\/MacOSXSocketOptions.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n- * Method:    setTcpkeepAliveProbes0\n+ * Method:    setTcpKeepAliveProbes0\n@@ -102,1 +102,1 @@\n-JNIEXPORT void JNICALL Java_jdk_net_MacOSXSocketOptions_setTcpkeepAliveProbes0\n+JNIEXPORT void JNICALL Java_jdk_net_MacOSXSocketOptions_setTcpKeepAliveProbes0\n@@ -132,1 +132,1 @@\n- * Method:    getTcpkeepAliveProbes0\n+ * Method:    getTcpKeepAliveProbes0\n@@ -135,1 +135,1 @@\n-JNIEXPORT jint JNICALL Java_jdk_net_MacOSXSocketOptions_getTcpkeepAliveProbes0\n+JNIEXPORT jint JNICALL Java_jdk_net_MacOSXSocketOptions_getTcpKeepAliveProbes0\n","filename":"src\/jdk.net\/macosx\/native\/libextnet\/MacOSXSocketOptions.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-                    setTcpkeepAliveProbes(fd, (Integer) value);\n+                    setTcpKeepAliveProbes(fd, (Integer) value);\n@@ -310,1 +310,1 @@\n-                    return getTcpkeepAliveProbes(fd);\n+                    return getTcpKeepAliveProbes(fd);\n@@ -346,1 +346,1 @@\n-    private static void setTcpkeepAliveProbes(FileDescriptor fd, int value)\n+    private static void setTcpKeepAliveProbes(FileDescriptor fd, int value)\n@@ -348,1 +348,1 @@\n-        platformSocketOptions.setTcpkeepAliveProbes(fdAccess.get(fd), value);\n+        platformSocketOptions.setTcpKeepAliveProbes(fdAccess.get(fd), value);\n@@ -366,2 +366,2 @@\n-    private static int getTcpkeepAliveProbes(FileDescriptor fd) throws SocketException {\n-        return platformSocketOptions.getTcpkeepAliveProbes(fdAccess.get(fd));\n+    private static int getTcpKeepAliveProbes(FileDescriptor fd) throws SocketException {\n+        return platformSocketOptions.getTcpKeepAliveProbes(fdAccess.get(fd));\n@@ -441,1 +441,1 @@\n-        void setTcpkeepAliveProbes(int fd, final int value) throws SocketException {\n+        void setTcpKeepAliveProbes(int fd, final int value) throws SocketException {\n@@ -465,1 +465,1 @@\n-        int getTcpkeepAliveProbes(int fd) throws SocketException {\n+        int getTcpKeepAliveProbes(int fd) throws SocketException {\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/ExtendedSocketOptions.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,5 @@\n+    @Override\n+    boolean keepAliveOptionsSupported() {\n+        return keepAliveOptionsSupported0();\n+    }\n+\n@@ -54,0 +59,31 @@\n+    @Override\n+    void setTcpKeepAliveProbes(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveProbes0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpKeepAliveProbes(int fd) throws SocketException {\n+        return getTcpKeepAliveProbes0(fd);\n+    }\n+\n+    @Override\n+    void setTcpKeepAliveTime(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveTime0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpKeepAliveTime(int fd) throws SocketException {\n+        return getTcpKeepAliveTime0(fd);\n+    }\n+\n+    @Override\n+    void setTcpKeepAliveIntvl(int fd, final int value) throws SocketException {\n+        setTcpKeepAliveIntvl0(fd, value);\n+    }\n+\n+    @Override\n+    int getTcpKeepAliveIntvl(int fd) throws SocketException {\n+        return getTcpKeepAliveIntvl0(fd);\n+    }\n+\n+    private static native boolean keepAliveOptionsSupported0();\n@@ -56,0 +92,6 @@\n+    private static native void setTcpKeepAliveProbes0(int fd, int value) throws SocketException;\n+    private static native int getTcpKeepAliveProbes0(int fd) throws SocketException;\n+    private static native void setTcpKeepAliveTime0(int fd, int value) throws SocketException;\n+    private static native int getTcpKeepAliveTime0(int fd) throws SocketException;\n+    private static native void setTcpKeepAliveIntvl0(int fd, int value) throws SocketException;\n+    private static native int getTcpKeepAliveIntvl0(int fd) throws SocketException;\n","filename":"src\/jdk.net\/windows\/classes\/jdk\/net\/WindowsSocketOptions.java","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,2 @@\n-        if (errno == ENOPROTOOPT) {\n+        int error = WSAGetLastError();\n+        if (error == WSAENOPROTOOPT) {\n@@ -46,0 +47,51 @@\n+static jint socketOptionSupported(jint level, jint optname) {\n+    WSADATA wsaData;\n+    jint error = WSAStartup(MAKEWORD(2, 2), &wsaData);\n+\n+    if (error != 0) {\n+        return 0;\n+    }\n+\n+    SOCKET sock;\n+    jint one = 1;\n+    jint rv;\n+    socklen_t sz = sizeof(one);\n+\n+    \/* First try IPv6; fall back to IPv4. *\/\n+    sock = socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP);\n+    if (sock == INVALID_SOCKET) {\n+        error = WSAGetLastError();\n+        if (error == WSAEPFNOSUPPORT || error == WSAEAFNOSUPPORT) {\n+            sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n+        }\n+        if (sock == INVALID_SOCKET) {\n+            return 0;\n+        }\n+    }\n+\n+    rv = getsockopt(sock, level, optname, (char*) &one, &sz);\n+    error = WSAGetLastError();\n+\n+    if (rv != 0 && error == WSAENOPROTOOPT) {\n+        rv = 0;\n+    } else {\n+        rv = 1;\n+    }\n+\n+    closesocket(sock);\n+    WSACleanup();\n+\n+    return rv;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    keepAliveOptionsSupported0\n+ * Signature: ()Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_jdk_net_WindowsSocketOptions_keepAliveOptionsSupported0\n+(JNIEnv *env, jobject unused) {\n+    return socketOptionSupported(IPPROTO_TCP, TCP_KEEPIDLE) && socketOptionSupported(IPPROTO_TCP, TCP_KEEPCNT)\n+            && socketOptionSupported(IPPROTO_TCP, TCP_KEEPINTVL);\n+}\n+\n@@ -106,0 +158,75 @@\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAliveProbes0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAliveProbes0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPCNT failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpKeepAliveProbes0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpKeepAliveProbes0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPCNT failed\");\n+    return optval;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAliveTime0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAliveTime0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPIDLE failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpKeepAliveTime0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpKeepAliveTime0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPIDLE failed\");\n+    return optval;\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    setTcpKeepAliveIntvl0\n+ * Signature: (II)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_net_WindowsSocketOptions_setTcpKeepAliveIntvl0\n+(JNIEnv *env, jobject unused, jint fd, jint optval) {\n+    jint rv = setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, (char*) &optval, sizeof(optval));\n+    handleError(env, rv, \"set option TCP_KEEPINTVL failed\");\n+}\n+\n+\/*\n+ * Class:     jdk_net_WindowsSocketOptions\n+ * Method:    getTcpKeepAliveIntvl0\n+ * Signature: (I)I;\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_net_WindowsSocketOptions_getTcpKeepAliveIntvl0\n+(JNIEnv *env, jobject unused, jint fd) {\n+    jint optval, rv;\n+    socklen_t sz = sizeof(optval);\n+    rv = getsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, (char*) &optval, &sz);\n+    handleError(env, rv, \"get option TCP_KEEPINTVL failed\");\n+    return optval;\n+}\n+\n","filename":"src\/jdk.net\/windows\/native\/libextnet\/WindowsSocketOptions.c","additions":129,"deletions":2,"binary":false,"changes":131,"status":"modified"}]}