{"files":[{"patch":"@@ -957,1 +957,1 @@\n-  HASHING3(LoadIndexed, true, type()->tag(), array()->subst(), index()->subst())\n+  HASHING3(LoadIndexed, true, elt_type(), array()->subst(), index()->subst())\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8313402\n+ * @summary C1: Incorrect LoadIndexed value numbering\n+ * @requires vm.compiler1.enabled\n+ * @library \/compiler\/patches \/test\/lib\n+ * @build java.base\/java.lang.Helper\n+ * @run main\/othervm -Xbatch -XX:CompileThreshold=100\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   compiler.c1.TestLoadIndexedMismatch\n+ *\/\n+\n+package compiler.c1;\n+\n+public class TestLoadIndexedMismatch {\n+    static final byte[] ARR = {42, 42};\n+    static final char EXPECTED_CHAR = (char)(42*256 + 42);\n+\n+    public static char work() {\n+        \/\/ LoadIndexed (B)\n+        byte b = ARR[0];\n+        \/\/ StringUTF16.charAt intrinsic, LoadIndexed (C)\n+        char c = Helper.charAt(ARR, 0);\n+        return c;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            char c = work();\n+            if (c != EXPECTED_CHAR) {\n+                throw new IllegalStateException(\"Read: \" + (int)c + \", expected: \" + (int)EXPECTED_CHAR);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestLoadIndexedMismatch.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}