{"files":[{"patch":"@@ -3921,1 +3921,1 @@\n-        while (token.kind != EOF) {\n+        OUTER: while (token.kind != EOF) {\n@@ -3936,0 +3936,2 @@\n+                if (token.kind == EOF)\n+                    break OUTER;\n@@ -4002,1 +4004,1 @@\n-                } else if (token.kind != EOF) {\n+                } else {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,2 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8312093\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8312093 8315452\n+\n@@ -63,0 +64,2 @@\n+import java.io.UncheckedIOException;\n+import java.io.Writer;\n@@ -73,0 +76,1 @@\n+import java.util.Objects;\n@@ -91,1 +95,2 @@\n-import java.util.Objects;\n+import com.sun.tools.javac.tree.JCTree.JCErroneous;\n+import com.sun.tools.javac.tree.Pretty;\n@@ -2426,0 +2431,22 @@\n+    @Test \/\/JDK-8315452\n+    void testPartialTopLevelModifiers() throws IOException {\n+        String code = \"\"\"\n+                      package test;\n+                      public\n+                      \"\"\";\n+        DiagnosticCollector<JavaFileObject> coll =\n+                new DiagnosticCollector<>();\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, coll,\n+                List.of(\"--enable-preview\", \"--source\", SOURCE_VERSION),\n+                null, Arrays.asList(new MyFileObject(code)));\n+        CompilationUnitTree cut = ct.parse().iterator().next();\n+\n+        String result = toStringWithErrors(cut).replaceAll(\"\\\\R\", \"\\n\");\n+        System.out.println(\"RESULT\\n\" + result);\n+        assertEquals(\"incorrect AST\",\n+                     result,\n+                     \"\"\"\n+                     package test;\n+                     (ERROR: public )\"\"\");\n+    }\n+\n@@ -2455,0 +2482,32 @@\n+\n+    private String toStringWithErrors(Tree tree) {\n+        StringWriter s = new StringWriter();\n+        try {\n+            new PrettyWithErrors(s, false).printExpr((JCTree) tree);\n+        } catch (IOException e) {\n+            \/\/ should never happen, because StringWriter is defined\n+            \/\/ never to throw any IOExceptions\n+            throw new AssertionError(e);\n+        }\n+        return s.toString();\n+    }\n+\n+    private static final class PrettyWithErrors extends Pretty {\n+\n+        public PrettyWithErrors(Writer out, boolean sourceOutput) {\n+            super(out, sourceOutput);\n+        }\n+\n+        @Override\n+        public void visitErroneous(JCErroneous tree) {\n+            try {\n+                print(\"(ERROR: \");\n+                print(tree.errs);\n+                print(\")\");\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":61,"deletions":2,"binary":false,"changes":63,"status":"modified"}]}