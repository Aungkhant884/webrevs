{"files":[{"patch":"@@ -56,5 +56,7 @@\n-\n-  if (UseLargePages && (MaxHeapSize \/ os::large_page_size()) < ShenandoahHeapRegion::MIN_NUM_REGIONS) {\n-    warning(\"Large pages size (\" SIZE_FORMAT \"K) is too large to afford page-sized regions, disabling uncommit\",\n-            os::large_page_size() \/ K);\n-    FLAG_SET_DEFAULT(ShenandoahUncommit, false);\n+  if (UseLargePages) {\n+    size_t large_page_size = os::large_page_size();\n+    if ((align_up(MaxHeapSize, large_page_size) \/ large_page_size) < ShenandoahHeapRegion::MIN_NUM_REGIONS) {\n+      warning(\"Large pages size (\" SIZE_FORMAT \"K) is too large to afford page-sized regions, disabling uncommit\",\n+              os::large_page_size() \/ K);\n+      FLAG_SET_DEFAULT(ShenandoahUncommit, false);\n+    }\n@@ -187,1 +189,1 @@\n-  ShenandoahHeapRegion::setup_sizes(MaxHeapSize);\n+  MaxHeapSize = ShenandoahHeapRegion::setup_sizes(MaxHeapSize);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shared\/space.inline.hpp\"\n@@ -468,1 +467,1 @@\n-void ShenandoahHeapRegion::setup_sizes(size_t max_heap_size) {\n+size_t ShenandoahHeapRegion::setup_sizes(size_t max_heap_size) {\n@@ -543,4 +542,7 @@\n-  \/\/ Make sure region size is at least one large page, if enabled.\n-  \/\/ The heap sizes would be rounded by heap initialization code by\n-  \/\/ page size, so we need to round up the region size too, to cover\n-  \/\/ the heap exactly.\n+  \/\/ Make sure region size and heap size are page aligned.\n+  \/\/ If large pages are used, we ensure that region size is aligned to large page size if\n+  \/\/ heap size is large enough to accommodate minimal number of regions. Otherwise, we align\n+  \/\/ region size to regular page size.\n+\n+  \/\/ Figure out page size to use, and aligns up heap to page size\n+  int page_size = os::vm_page_size();\n@@ -548,1 +550,10 @@\n-    region_size = MAX2(region_size, os::large_page_size());\n+    size_t large_page_size = os::large_page_size();\n+    max_heap_size = align_up(max_heap_size, large_page_size);\n+    if ((max_heap_size \/ align_up(region_size, large_page_size)) >= MIN_NUM_REGIONS) {\n+      page_size = (int)large_page_size;\n+    } else {\n+      \/\/ Should have been checked during argument initialization\n+      assert(!ShenandoahUncommit, \"Uncommit requires region size aligns to large page size\");\n+    }\n+  } else {\n+    max_heap_size = align_up(max_heap_size, page_size);\n@@ -551,0 +562,3 @@\n+  \/\/ Align region size to page size\n+  region_size = align_up(region_size, page_size);\n+\n@@ -613,0 +627,2 @@\n+\n+  return max_heap_size;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -253,1 +253,2 @@\n-  static void setup_sizes(size_t max_heap_size);\n+  \/\/ Return adjusted max heap size\n+  static size_t setup_sizes(size_t max_heap_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}