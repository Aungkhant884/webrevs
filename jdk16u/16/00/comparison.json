{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -3330,1 +3330,2 @@\n-    CallJavaNode* slow_call = generate_method_call_static(vmIntrinsics::_newArray);\n+    CallJavaNode* slow_call = uninitialized ? generate_method_call_virtual(vmIntrinsics::_allocateUninitializedArray) :\n+                                              generate_method_call_static(vmIntrinsics::_newArray);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8150465\n+ * @bug 8150465 8259339\n@@ -82,0 +82,1 @@\n+        testOK(null,            10, AllConstants::testVoid);\n@@ -91,0 +92,1 @@\n+        testOK(null,            10, LengthIsConstant::testVoid);\n@@ -100,0 +102,1 @@\n+        testOK(null,            10, ClassIsConstant::testVoid);\n@@ -109,0 +112,1 @@\n+        testOK(null,            10, NothingIsConstant::testVoid);\n@@ -114,0 +118,6 @@\n+            if (res == null) {\n+                if (expectClass != null) {\n+                    throw new IllegalStateException(\"Unexpected null result\");\n+                }\n+                continue;\n+            }\n@@ -151,0 +161,1 @@\n+    static volatile Class<?> classVoid    = void.class;\n@@ -164,0 +175,1 @@\n+        static Object testVoid()    { return UNSAFE.allocateUninitializedArray(void.class,     10); }\n@@ -180,0 +192,1 @@\n+        static Object testVoid()    { return UNSAFE.allocateUninitializedArray(void.class,     sampleLen); }\n@@ -196,0 +209,1 @@\n+        static Object testVoid()    { return UNSAFE.allocateUninitializedArray(classVoid,    10); }\n@@ -212,0 +226,1 @@\n+        static Object testVoid()    { return UNSAFE.allocateUninitializedArray(classVoid,    sampleLen); }\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/unsafe\/AllocateUninitializedArray.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}