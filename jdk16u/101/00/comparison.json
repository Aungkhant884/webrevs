{"files":[{"patch":"@@ -535,1 +535,24 @@\n-    return ac;\n+    Node* ld_addp = in(MemNode::Address);\n+    Node* src = ac->in(ArrayCopyNode::Src);\n+    const TypeAryPtr* ary_t = phase->type(src)->isa_aryptr();\n+\n+    \/\/ This is a load from a cloned array. The corresponding arraycopy ac must\n+    \/\/ have set the value for the load and we can return ac but only if the load\n+    \/\/ is known to be within bounds. This is checked below.\n+    if (ary_t != NULL && ld_addp->is_AddP()) {\n+      Node* ld_offs = ld_addp->in(AddPNode::Offset);\n+      BasicType ary_elem = ary_t->klass()->as_array_klass()->element_type()->basic_type();\n+      jlong header = arrayOopDesc::base_offset_in_bytes(ary_elem);\n+      jlong elemsize = type2aelembytes(ary_elem);\n+\n+      const TypeX*   ld_offs_t = phase->type(ld_offs)->isa_intptr_t();\n+      const TypeInt* sizetype  = ary_t->size();\n+\n+      if (ld_offs_t->_lo >= header && ld_offs_t->_hi < (sizetype->_lo * elemsize + header)) {\n+        \/\/ The load is known to be within bounds. It receives its value from ac.\n+        return ac;\n+      }\n+      \/\/ The load is known to be out-of-bounds.\n+    }\n+    \/\/ The load could be out-of-bounds. It must not be hoisted but must remain\n+    \/\/ dependent on the runtime range check. This is achieved by returning NULL.\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.gc.Serial\n+ * @bug 8262295\n+ * @library \/test\/lib \/\n+ * @summary Out of bounds array load on clone source crashes GC which\n+ *          interpretes the loaded value as oop. A small heap is configured to\n+ *          get a lot of GCs.\n+ *\n+ * @comment C2 generates the out of bounds load with serial, parallel and\n+ *          shenandoah gc but not with g1 and z gc. For simplicity serial gc is\n+ *          configured.\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UseSerialGC -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -XX:-BackgroundCompilation\n+ *                   -XX:CompileCommand=dontinline,*::*_dontinline\n+ *                   compiler.arraycopy.TestOutOfBoundsArrayLoad\n+ *\/\n+\n+package compiler.arraycopy;\n+\n+import compiler.whitebox.CompilerWhiteBoxTest;\n+\n+public class TestOutOfBoundsArrayLoad {\n+\n+    public static Object escape1;\n+    public static Object escape2;\n+\n+    public static void main(String[] args_ignored) {\n+        try {\n+            Object[] arrNotEmpty = {null, null, null, null, null, };\n+\n+            \/\/ Warm-up\n+            for (int i = CompilerWhiteBoxTest.THRESHOLD; i > 0; i--) {\n+                testMethod_dontinline(arrNotEmpty);\n+            }\n+            \/\/ Call testmethod with empty array often enough to trigger GC.\n+            \/\/ GC is assumed to crash.\n+            for (int i = 20_000_000; i > 0; i--) {\n+                \/\/ Trick for ParallelGC: empty[4] will be loaded in the testmethod\n+                \/\/ (out of bounds!) and interpreted as oop (or\n+                \/\/ narrowOop). PSScavenge::should_scavenge() will skip the loaded\n+                \/\/ value if it is before the young generation. So before calling the\n+                \/\/ test method we allocate the empty array and an array of -1 values\n+                \/\/ right behind it. So empty[4] will likely result in\n+                \/\/ 0xffffffffffffffff Which is not before the young generation.\n+                Object[] empty = new Object[0];\n+                long[] l = new long[4];\n+                l[0] = -1L; l[1] = -1L; l[2] = -1L; l[3] = -1L;\n+                escape2 = l;\n+                testMethod_dontinline(empty);\n+            }\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    public static void testMethod_dontinline(Object[] src) throws Exception {\n+        Object[] clone = src.clone();\n+        \/\/ Load L below is executed speculatively at this point from src without range check.\n+        \/\/ The result is put into the OopMap of the allocation in the next line.\n+        \/\/ If src.length is 0 then the loaded value is no heap reference and GC crashes.\n+        escape1 = new Object();\n+        if (src.length > 4) {\n+            escape2 = clone[4]; \/\/ Load L\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestOutOfBoundsArrayLoad.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}