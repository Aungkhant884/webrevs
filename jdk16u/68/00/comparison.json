{"files":[{"patch":"@@ -25,1 +25,2 @@\n- * @test\n+ * @test id=with_SerialGC\n+ * @requires vm.gc.Serial\n@@ -27,2 +28,34 @@\n- * @summary Test TypeConverterFactory is not leaking method handles\n- * @author Attila Szegedi\n+ * @summary Test TypeConverterFactory is not leaking method handles (Serial GC)\n+ * @run main\/othervm -XX:+UseSerialGC TypeConverterFactoryMemoryLeakTest\n+ *\/\n+\n+\/*\n+ * @test id=with_ParallelGC\n+ * @requires vm.gc.Parallel\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking method handles (Parallel GC)\n+ * @run main\/othervm -XX:+UseParallelGC TypeConverterFactoryMemoryLeakTest\n+ *\/\n+\n+\/*\n+ * @test id=with_G1GC\n+ * @requires vm.gc.G1\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking method handles (G1 GC)\n+ * @run main\/othervm -XX:+UseG1GC TypeConverterFactoryMemoryLeakTest\n+ *\/\n+\n+\/*\n+ * @test id=with_ZGC\n+ * @requires vm.gc.Z\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking method handles (Z GC)\n+ * @run main\/othervm -XX:+UseZGC TypeConverterFactoryMemoryLeakTest\n+ *\/\n+\n+\/*\n+ * @test id=with_ShenandoahGC\n+ * @requires vm.gc.Shenandoah\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking method handles (Shenandoah GC)\n+ * @run main\/othervm -XX:+UseShenandoahGC TypeConverterFactoryMemoryLeakTest\n@@ -37,1 +70,0 @@\n-import java.time.Duration;\n@@ -55,2 +87,3 @@\n-    \/\/ Usually succeeds in less than a second, but give it time\n-    private static final Duration MAX_DURATION = Duration.ofSeconds(15);\n+    \/\/ With explicit GC calls succeeds in 11-12 iterations depending on GC used.\n+    \/\/ 1000 should be a safe upper limit after which we can consider it failed.\n+    private static final int MAX_ITERATIONS = 1000;\n@@ -77,3 +110,1 @@\n-        long start = System.nanoTime();\n-        long deadline = start + MAX_DURATION.toNanos();\n-        while (System.nanoTime() < deadline) {\n+        for (int count = 0; count < MAX_ITERATIONS; count++) {\n@@ -82,0 +113,1 @@\n+            System.gc();\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryMemoryLeakTest.java","additions":41,"deletions":9,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -25,1 +25,2 @@\n- * @test\n+ * @test id=with_SerialGC\n+ * @requires vm.gc.Serial\n@@ -27,2 +28,34 @@\n- * @summary Test TypeConverterFactory is not leaking class loaders\n- * @author Attila Szegedi\n+ * @summary Test TypeConverterFactory is not leaking class loaders (Serial GC)\n+ * @run main\/othervm -XX:+UseSerialGC TypeConverterFactoryRetentionTests\n+ *\/\n+\n+\/*\n+ * @test id=with_ParallelGC\n+ * @requires vm.gc.Parallel\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking class loaders (Parallel GC)\n+ * @run main\/othervm -XX:+UseParallelGC TypeConverterFactoryRetentionTests\n+ *\/\n+\n+\/*\n+ * @test id=with_G1GC\n+ * @requires vm.gc.G1\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking class loaders (G1 GC)\n+ * @run main\/othervm -XX:+UseG1GC TypeConverterFactoryRetentionTests\n+ *\/\n+\n+\/*\n+ * @test id=with_ZGC\n+ * @requires vm.gc.Z\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking class loaders (Z GC)\n+ * @run main\/othervm -XX:+UseZGC TypeConverterFactoryRetentionTests\n+ *\/\n+\n+\/*\n+ * @test id=with_ShenandoahGC\n+ * @requires vm.gc.Shenandoah\n+ * @bug 8198540\n+ * @summary Test TypeConverterFactory is not leaking class loaders (Shenandoah GC)\n+ * @run main\/othervm -XX:+UseShenandoahGC TypeConverterFactoryRetentionTests\n@@ -36,1 +69,0 @@\n-import java.time.Duration;\n@@ -53,2 +85,3 @@\n-    \/\/ Usually succeeds in less than a second, but give it time\n-    private static final Duration MAX_DURATION = Duration.ofSeconds(15);\n+    \/\/ With explicit GC calls succeeds in 1-2 iterations depending on GC used.\n+    \/\/ 1000 should be a safe upper limit after which we can consider it failed.\n+    private static final int MAX_ITERATIONS = 1000;\n@@ -137,3 +170,1 @@\n-        long start = System.nanoTime();\n-        long deadline = start + MAX_DURATION.toNanos();\n-        while (System.nanoTime() < deadline) {\n+        for (int count = 0; count < MAX_ITERATIONS; count++) {\n@@ -146,0 +177,1 @@\n+            System.gc();\n@@ -168,3 +200,1 @@\n-        long start = System.nanoTime();\n-        long deadline = start + MAX_DURATION.toNanos();\n-        while (System.nanoTime() < deadline) {\n+        for (int count = 0; count < MAX_ITERATIONS; count++) {\n@@ -181,0 +211,1 @@\n+            System.gc();\n","filename":"test\/jdk\/jdk\/dynalink\/TypeConverterFactoryRetentionTests.java","additions":43,"deletions":12,"binary":false,"changes":55,"status":"modified"}]}