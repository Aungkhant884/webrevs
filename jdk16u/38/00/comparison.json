{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -200,2 +200,2 @@\n-  return FLAG_IS_CMDLINE(MaxMetaspaceSize) ? MaxMetaspaceSize :\n-                                             MemoryUsage::undefined_size();\n+  return !FLAG_IS_DEFAULT(MaxMetaspaceSize) ? MaxMetaspaceSize :\n+                                              MemoryUsage::undefined_size();\n","filename":"src\/hotspot\/share\/services\/memoryPool.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8260349\n+ * @summary test that setting via the env-var and options file shows up as expected\n+ * @library \/test\/lib\n+ * @run driver MaxMetaspaceSizeEnvVarTest\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryPoolMXBean;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class MaxMetaspaceSizeEnvVarTest {\n+\n+    \/\/ This is the test class we exec, passing the MaxMetaspaceSize flag\n+    \/\/ by different mechanisms.\n+    static class Main {\n+        public static void main(String[] args) throws Exception {\n+            long expected = Long.parseLong(args[0]);\n+            MemoryPoolMXBean metaspaceMemoryPool =\n+                ManagementFactory.getPlatformMXBeans(MemoryPoolMXBean.class)\n+                .stream()\n+                .filter(pool -> \"Metaspace\".equals(pool.getName()))\n+                .findFirst()\n+                .orElseThrow();\n+            long max = metaspaceMemoryPool.getUsage().getMax();\n+            System.out.println(\"Metaspace max usage is \" + max);\n+            if (max != expected) {\n+                throw new RuntimeException(\"Metaspace max \" + max +\n+                                           \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    static void report(String msg) {\n+        System.out.println(msg);\n+        System.err.println(msg);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        final String max = String.valueOf(9 * 1024 * 1024); \/\/ 9 MB\n+        final String flagRaw = \"MaxMetaspaceSize=\" + max;\n+        final String flag = \"-XX:\" + flagRaw;\n+        final String main = \"MaxMetaspaceSizeEnvVarTest$Main\";\n+\n+        ProcessBuilder pb = null;\n+        OutputAnalyzer output = null;\n+\n+        int test = 1;\n+        report(\"Test \" + test + \": flag not set\");\n+\n+        Main.main(new String[] { \"-1\" });  \/\/ -1 == undefined size\n+        report(\"------ end Test \" + test);\n+        test++;\n+\n+        report(\"Test \" + test + \": normal command-line flag\");\n+        pb = ProcessTools.createJavaProcessBuilder(flag, main, max);\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.reportDiagnosticSummary();\n+        report(\"------ end Test \" + test);\n+        test++;\n+\n+        String[] envVars = {\n+            \"JDK_JAVA_OPTIONS\",\n+            \"_JAVA_OPTIONS\",\n+            \"JAVA_TOOL_OPTIONS\"\n+        };\n+\n+        for (String envVar :  envVars) {\n+            report(\"Test \" + test + \": \" + envVar + \" env-var\");\n+            pb = ProcessTools.createJavaProcessBuilder(main, max);\n+            pb.environment().put(envVar, flag);\n+            output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.reportDiagnosticSummary();\n+            report(\"------ end Test \" + test);\n+            test++;\n+        }\n+\n+        report(\"Test \" + test + \": .hotspotrc file\");\n+        final String rcFile = \".hotspotrc\";\n+        final String rcFileFlag = \"-XX:Flags=\" + rcFile;\n+\n+        PrintWriter pw = new PrintWriter(rcFile);\n+        pw.println(flagRaw);\n+        pw.close();\n+        pb = ProcessTools.createJavaProcessBuilder(rcFileFlag, main, max);\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.reportDiagnosticSummary();\n+        report(\"------ end Test \" + test);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/MaxMetaspaceSizeEnvVarTest.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}