{"files":[{"patch":"@@ -2467,0 +2467,1 @@\n+  HandleMark hm(thread);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.ref.WeakReference;\n+\n+\/*\n+ * @test\n+ * @bug 8260473\n+ * @summary Handle leak might cause object not collected as expected\n+ *\n+ * @run main\/othervm -XX:-Inline -XX:-TieredCompilation -XX:CompileCommand=compileonly,UncommonTrapLeak.foo\n+ *                   -XX:CompileThreshold=100 -XX:-BackgroundCompilation UncommonTrapLeak\n+ *\n+ * @author Hui Shi\n+ *\/\n+public class UncommonTrapLeak {\n+    static WeakReference<Object> ref = null;\n+    static int val = 0;\n+    public static void main(String args[]) {\n+        for (int i = 0; i < 300; i++) {\n+            val++;\n+            foo(i);\n+            System.gc();\n+            if (ref.get() != null) {\n+                throw new RuntimeException(\"Failed: referent not collected after trap \" + ref.get());\n+            }\n+            if (i % 100 == 0) {\n+                System.out.println(i);\n+            }\n+        }\n+    }\n+\n+    static void foo(int i) {\n+        Object o = new Object();\n+        ref = new WeakReference<Object>(o);\n+        if (val == 200) {\n+            \/\/ trigger Deoptimization::uncommon_trap\n+            if (o instanceof UncommonTrapLeak) {\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/UncommonTrapLeak.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}