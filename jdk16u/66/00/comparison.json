{"files":[{"patch":"@@ -109,1 +109,7 @@\n-  HeapWord* res = _space->par_allocate(size);\n+  HeapWord* res = NULL;\n+  while (true) {\n+    \/\/ Try to allocate, assume space is available\n+    res = _space->par_allocate(size);\n+    if (res != NULL) {\n+      break;\n+    }\n@@ -111,1 +117,0 @@\n-  while (res == NULL) {\n@@ -113,17 +118,28 @@\n-    MutexLocker ml(Heap_lock);\n-\n-    size_t space_left = max_capacity() - capacity();\n-    size_t want_space = MAX2(size, EpsilonMinHeapExpand);\n-\n-    if (want_space < space_left) {\n-      \/\/ Enough space to expand in bulk:\n-      bool expand = _virtual_space.expand_by(want_space);\n-      assert(expand, \"Should be able to expand\");\n-    } else if (size < space_left) {\n-      \/\/ No space to expand in bulk, and this allocation is still possible,\n-      \/\/ take all the remaining space:\n-      bool expand = _virtual_space.expand_by(space_left);\n-      assert(expand, \"Should be able to expand\");\n-    } else {\n-      \/\/ No space left:\n-      return NULL;\n+    {\n+      MutexLocker ml(Heap_lock);\n+\n+      \/\/ Try to allocate under the lock, assume another thread was able to expand\n+      res = _space->par_allocate(size);\n+      if (res != NULL) {\n+        break;\n+      }\n+\n+      \/\/ Expand and loop back if space is available\n+      size_t space_left = max_capacity() - capacity();\n+      size_t want_space = MAX2(size, EpsilonMinHeapExpand);\n+\n+      if (want_space < space_left) {\n+        \/\/ Enough space to expand in bulk:\n+        bool expand = _virtual_space.expand_by(want_space);\n+        assert(expand, \"Should be able to expand\");\n+      } else if (size < space_left) {\n+        \/\/ No space to expand in bulk, and this allocation is still possible,\n+        \/\/ take all the remaining space:\n+        bool expand = _virtual_space.expand_by(space_left);\n+        assert(expand, \"Should be able to expand\");\n+      } else {\n+        \/\/ No space left:\n+        return NULL;\n+      }\n+\n+      _space->set_end((HeapWord *) _virtual_space.high());\n@@ -131,3 +147,0 @@\n-\n-    _space->set_end((HeapWord *) _virtual_space.high());\n-    res = _space->par_allocate(size);\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":35,"deletions":22,"binary":false,"changes":57,"status":"modified"}]}