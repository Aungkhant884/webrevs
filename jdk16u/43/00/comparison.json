{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -402,6 +403,4 @@\n-    tty->print_cr(\"ReleasePrimitiveArrayCritical: release array failed bounds \"\n-        \"check, incorrect pointer returned ? array: \" PTR_FORMAT \" carray: \"\n-        PTR_FORMAT, p2i(obj), p2i(carray));\n-    guarded.print_on(tty);\n-    NativeReportJNIFatalError(thr, \"ReleasePrimitiveArrayCritical: \"\n-        \"failed bounds check\");\n+    tty->print_cr(\"%s: release array failed bounds check, incorrect pointer returned ? array: \"\n+                  PTR_FORMAT \" carray: \" PTR_FORMAT, fn_name, p2i(obj), p2i(carray));\n+    DEBUG_ONLY(guarded.print_on(tty);) \/\/ This may crash.\n+    NativeReportJNIFatalError(thr, err_msg(\"%s: failed bounds check\", fn_name));\n@@ -410,5 +409,4 @@\n-    tty->print_cr(\"ReleasePrimitiveArrayCritical: unrecognized elements. array: \"\n-        PTR_FORMAT \" carray: \" PTR_FORMAT, p2i(obj), p2i(carray));\n-    guarded.print_on(tty);\n-    NativeReportJNIFatalError(thr, \"ReleasePrimitiveArrayCritical: \"\n-        \"unrecognized elements\");\n+    tty->print_cr(\"%s: unrecognized elements. array: \" PTR_FORMAT \" carray: \" PTR_FORMAT,\n+                  fn_name, p2i(obj), p2i(carray));\n+    DEBUG_ONLY(guarded.print_on(tty);) \/\/ This may crash.\n+    NativeReportJNIFatalError(thr, err_msg(\"%s: unrecognized elements\", fn_name));\n@@ -423,1 +421,1 @@\n-    void* obj, void* carray, jint mode) {\n+                                         void* obj, void* carray, jint mode, jboolean is_critical) {\n@@ -427,1 +425,0 @@\n-  \/\/ As we never make copies, mode 0 and JNI_COMMIT are the same.\n@@ -429,0 +426,3 @@\n+    memcpy(orig_result, carray, sz);\n+    GuardedMemory::free_copy(carray);\n+    break;\n@@ -431,0 +431,5 @@\n+    if (is_critical) {\n+      \/\/ For ReleasePrimitiveArrayCritical we must free the internal buffer\n+      \/\/ allocated through GuardedMemory.\n+      GuardedMemory::free_copy(carray);\n+    }\n@@ -433,0 +438,1 @@\n+    GuardedMemory::free_copy(carray);\n@@ -436,1 +442,1 @@\n-        PTR_FORMAT \" elements \" PTR_FORMAT, fn_name, mode, p2i(obj), p2i(carray));\n+                  PTR_FORMAT \" elements \" PTR_FORMAT, fn_name, mode, p2i(obj), p2i(carray));\n@@ -439,2 +445,0 @@\n-  \/\/ We always need to release the copy we made with GuardedMemory\n-  GuardedMemory::free_copy(carray);\n@@ -1718,1 +1722,1 @@\n-        thr, \"checked_jni_Release\"#Result\"ArrayElements\", array, elems, mode); \\\n+        thr, \"checked_jni_Release\"#Result\"ArrayElements\", array, elems, mode, JNI_FALSE); \\\n@@ -1887,1 +1891,2 @@\n-    void* orig_result = check_wrapped_array_release(thr, \"ReleasePrimitiveArrayCritical\", array, carray, mode);\n+    void* orig_result = check_wrapped_array_release(thr, \"ReleasePrimitiveArrayCritical\",\n+                                                    array, carray, mode, JNI_TRUE);\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8258077\n+ * @summary verify multiple release calls on a copied array work when checked\n+ * @library \/test\/lib\n+ * @run main\/native TestCheckedReleaseArrayElements launch\n+ *\/\n+\n+import java.util.Arrays;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Utils;\n+import jtreg.SkippedException;\n+\n+public class TestCheckedReleaseArrayElements {\n+\n+    static {\n+        System.loadLibrary(\"TestCheckedReleaseArrayElements\");\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        if (args == null || args.length == 0) {\n+            test();\n+        } else {\n+            \/\/ Uses executeProcess() instead of executeTestJvm() to avoid passing options\n+            \/\/ that might generate output on stderr (which should be empty for this test).\n+            ProcessBuilder pb =\n+                ProcessTools.createJavaProcessBuilder(\"-Xcheck:jni\",\n+                                                      \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n+                                                      \"TestCheckedReleaseArrayElements\");\n+            OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+            output.shouldHaveExitValue(0);\n+            output.stderrShouldBeEmpty();\n+            output.stdoutShouldNotBeEmpty();\n+        }\n+    }\n+\n+    \/*\n+     * If GetIntArrayElements returns a copy, we update the array in slices\n+     * calling ReleaseIntArrayElements with JNI_COMMIT to write-back the\n+     * updates, which are then checked. Finally we use JNI_ABORT to free\n+     * the copy.\n+     *\/\n+    public static void test() {\n+        final int slices = 3;\n+        final int sliceLength = 3;\n+        int[] arr = new int[slices * sliceLength];\n+\n+        if (!init(arr)) {\n+            throw new SkippedException(\"Test skipped as GetIntArrayElements did not make a copy\");\n+        }\n+\n+        System.out.println(\"Array before: \" + Arrays.toString(arr));\n+\n+        \/\/ We fill the array in slices so that arr[i] = i\n+        for (int i = 0; i < slices; i++) {\n+            int start = i * sliceLength;\n+            fill(arr, start, sliceLength);\n+            System.out.println(\"Array during: \" + Arrays.toString(arr));\n+            check(arr, (i + 1) * sliceLength);\n+        }\n+        System.out.println(\"Array after: \" + Arrays.toString(arr));\n+        cleanup(arr);\n+    }\n+\n+    \/*\n+     * Calls GetIntArrayElements and stashes the native pointer for\n+     * use by fill() if a copy was made.\n+     * Returns true if a copy was made else false.\n+    *\/\n+    static native boolean init(int[] arr);\n+\n+    \/*\n+     * Fills in target[start] to target[start+count-1], so that\n+     * target[i] == i. The update is done natively using the raw\n+     * pointer into the array.\n+     *\/\n+    static native void fill(int[] target, int start, int count);\n+\n+    \/*\n+     * Properly release the copied array\n+     *\/\n+    static native void cleanup(int[] target);\n+\n+\n+    static void check(int[] source, int count) {\n+        for (int i = 0; i < count; i++) {\n+            if (source[i] != i) {\n+                System.out.println(\"Failing source array: \" + Arrays.toString(source));\n+                throw new RuntimeException(\"Expected source[\" + i + \"] == \" +\n+                                           i + \" but got \" + source[i]);\n+            }\n+        }\n+        for (int i = count; i < source.length; i++) {\n+            if (source[i] != 0) {\n+                System.out.println(\"Failing source array: \" + Arrays.toString(source));\n+                throw new RuntimeException(\"Expected source[\" + i +\n+                                           \"] == 0 but got \" + source[i]);\n+            }\n+        }\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCheckedReleaseArrayElements.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8193234 8258077\n+ * @summary Check ReleasePrimitiveArrayCritical doesn't leak memory with\n+ * Xcheck:jni and JNI_COMMIT mode\n+ * @comment This is a manual test as you need to verify memory usage externally.\n+ * @library \/test\/lib\n+ * @run main\/othervm\/native\/manual -Xms4m -Xmx4m -Xcheck:jni TestCheckedReleaseCriticalArray\n+ *\/\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jtreg.SkippedException;\n+\n+public class TestCheckedReleaseCriticalArray {\n+\n+    static {\n+        System.loadLibrary(\"TestCheckedReleaseCriticalArray\");\n+    }\n+\n+    \/*\n+     * We repeatedly modify an array via the JNI critical functions, using\n+     * JNI_COMMIT mode. No memory leak should be observed on a VM that\n+     * provides direct array access.\n+     *\/\n+    public static void main(String[] args) {\n+        int[] array = new int[] { 1, 2, 3 };\n+        if (!modifyArray(array)) {\n+            \/\/ If the VM makes copies then we will leak them if we only ever use\n+            \/\/ JNI_COMMIT mode.\n+            throw new SkippedException(\"Test skipped as GetPrimitiveArrayCritical made a copy\");\n+        }\n+        while (true) {\n+            modifyArray(array);\n+        }\n+    }\n+\n+    private static native boolean modifyArray(int[] array);\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCheckedReleaseCriticalArray.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+\n+static jint* arr;\n+\n+JNIEXPORT jboolean JNICALL\n+Java_TestCheckedReleaseArrayElements_init(JNIEnv *env,\n+                                          jclass* clazz,\n+                                          jintArray target) {\n+  jboolean isCopy;\n+  arr = (*env)->GetIntArrayElements(env, target, &isCopy);\n+  if (arr == NULL) {\n+    (*env)->FatalError(env, \"Unexpected NULL return from GetIntArrayElements\");\n+  }\n+  if (isCopy == JNI_FALSE) {\n+    (*env)->ReleaseIntArrayElements(env, target, arr, JNI_ABORT);\n+  }\n+  return isCopy;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_TestCheckedReleaseArrayElements_cleanup(JNIEnv *env,\n+                                             jclass* clazz,\n+                                             jintArray target) {\n+  (*env)->ReleaseIntArrayElements(env, target, arr, JNI_ABORT);\n+}\n+\n+\n+JNIEXPORT void JNICALL\n+Java_TestCheckedReleaseArrayElements_fill(JNIEnv *env,\n+                                          jclass* clazz,\n+                                          jintArray target,\n+                                          jint start,\n+                                          jint count) {\n+  \/\/ Update a slice of the raw array\n+  int i;\n+  for (i = start; count > 0; i++, count--) {\n+    arr[i] = i;\n+  }\n+  \/\/ Write the results back to target, leaving it usable for future updates\n+  (*env)->ReleaseIntArrayElements(env, target, arr, JNI_COMMIT);\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/libTestCheckedReleaseArrayElements.c","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+\n+JNIEXPORT jboolean JNICALL\n+Java_TestCheckedReleaseCriticalArray_modifyArray(JNIEnv *env,\n+                                                 jclass clazz,\n+                                                 jintArray iarr) {\n+  jboolean isCopy;\n+  jint* arr = (jint *)(*env)->GetPrimitiveArrayCritical(env, iarr, &isCopy);\n+  if (arr == NULL) {\n+    (*env)->FatalError(env, \"Unexpected NULL return from GetPrimitiveArrayCritical\");\n+  }\n+  if (isCopy == JNI_FALSE) {\n+    jint len = (*env)->GetArrayLength(env, iarr);\n+    \/\/ make arbitrary changes to the array\n+    for (int i = 0; i < len; i++) {\n+      arr[i] *= 2;\n+    }\n+    \/\/ write-back using JNI_COMMIT to test for memory leak\n+    (*env)->ReleasePrimitiveArrayCritical(env, iarr, arr, JNI_COMMIT);\n+  }\n+  \/\/ we skip the test if the VM makes a copy - as it will definitely leak\n+  return !isCopy;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/libTestCheckedReleaseCriticalArray.c","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}