{"files":[{"patch":"@@ -2596,1 +2596,1 @@\n-    Label L_doLast;\n+    Label L_doLast, L_error;\n@@ -2626,1 +2626,1 @@\n-    \/\/ load unaligned from[0-15] to vsRet\n+    \/\/ load unaligned from[0-15] to vRet\n@@ -2741,0 +2741,5 @@\n+#ifdef ASSERT\n+    __ cmpwi           (CCR0, keylen, 60);\n+    __ bne             (CCR0, L_error);\n+#endif\n+\n@@ -2761,1 +2766,0 @@\n-    \/\/ store result (unaligned)\n@@ -2763,13 +2767,6 @@\n-    __ lvsl            (toPerm, to);\n-#else\n-    __ lvsr            (toPerm, to);\n-#endif\n-    __ vspltisb        (vTmp3, -1);\n-    __ vspltisb        (vTmp4, 0);\n-    __ lvx             (vTmp1, to);\n-    __ lvx             (vTmp2, fifteen, to);\n-#ifdef VM_LITTLE_ENDIAN\n-    __ vperm           (vTmp3, vTmp3, vTmp4, toPerm); \/\/ generate select mask\n-    __ vxor            (toPerm, toPerm, fSplt);       \/\/ swap bytes\n-#else\n-    __ vperm           (vTmp3, vTmp4, vTmp3, toPerm); \/\/ generate select mask\n+    \/\/ toPerm = 0x0F0E0D0C0B0A09080706050403020100\n+    __ lvsl            (toPerm, keypos); \/\/ keypos is a multiple of 16\n+    __ vxor            (toPerm, toPerm, fSplt);\n+\n+    \/\/ Swap Bytes\n+    __ vperm           (vRet, vRet, vRet, toPerm);\n@@ -2777,5 +2774,9 @@\n-    __ vperm           (vTmp4, vRet, vRet, toPerm);   \/\/ rotate data\n-    __ vsel            (vTmp2, vTmp4, vTmp2, vTmp3);\n-    __ vsel            (vTmp1, vTmp1, vTmp4, vTmp3);\n-    __ stvx            (vTmp2, fifteen, to);          \/\/ store this one first (may alias)\n-    __ stvx            (vTmp1, to);\n+\n+    \/\/ store result (unaligned)\n+    \/\/ Note: We can't use a read-modify-write sequence which touches additional Bytes.\n+    Register lo = temp, hi = fifteen; \/\/ Reuse\n+    __ vsldoi          (vTmp1, vRet, vRet, 8);\n+    __ mfvrd           (hi, vRet);\n+    __ mfvrd           (lo, vTmp1);\n+    __ std             (hi, 0 LITTLE_ENDIAN_ONLY(+ 8), to);\n+    __ std             (lo, 0 BIG_ENDIAN_ONLY(+ 8), to);\n@@ -2784,0 +2785,5 @@\n+\n+#ifdef ASSERT\n+    __ bind(L_error);\n+    __ stop(\"aescrypt_encryptBlock: invalid key length\");\n+#endif\n@@ -2797,3 +2803,1 @@\n-    Label L_doLast;\n-    Label L_do44;\n-    Label L_do52;\n+    Label L_doLast, L_do44, L_do52, L_error;\n@@ -2830,1 +2834,1 @@\n-    \/\/ load unaligned from[0-15] to vsRet\n+    \/\/ load unaligned from[0-15] to vRet\n@@ -2859,0 +2863,5 @@\n+#ifdef ASSERT\n+    __ cmpwi           (CCR0, keylen, 60);\n+    __ bne             (CCR0, L_error);\n+#endif\n+\n@@ -2895,0 +2904,1 @@\n+    __ align(32);\n@@ -2921,0 +2931,1 @@\n+    __ align(32);\n@@ -2998,10 +3009,0 @@\n-    \/\/ store result (unaligned)\n-#ifdef VM_LITTLE_ENDIAN\n-    __ lvsl            (toPerm, to);\n-#else\n-    __ lvsr            (toPerm, to);\n-#endif\n-    __ vspltisb        (vTmp3, -1);\n-    __ vspltisb        (vTmp4, 0);\n-    __ lvx             (vTmp1, to);\n-    __ lvx             (vTmp2, fifteen, to);\n@@ -3009,4 +3010,6 @@\n-    __ vperm           (vTmp3, vTmp3, vTmp4, toPerm); \/\/ generate select mask\n-    __ vxor            (toPerm, toPerm, fSplt);       \/\/ swap bytes\n-#else\n-    __ vperm           (vTmp3, vTmp4, vTmp3, toPerm); \/\/ generate select mask\n+    \/\/ toPerm = 0x0F0E0D0C0B0A09080706050403020100\n+    __ lvsl            (toPerm, keypos); \/\/ keypos is a multiple of 16\n+    __ vxor            (toPerm, toPerm, fSplt);\n+\n+    \/\/ Swap Bytes\n+    __ vperm           (vRet, vRet, vRet, toPerm);\n@@ -3014,5 +3017,9 @@\n-    __ vperm           (vTmp4, vRet, vRet, toPerm);   \/\/ rotate data\n-    __ vsel            (vTmp2, vTmp4, vTmp2, vTmp3);\n-    __ vsel            (vTmp1, vTmp1, vTmp4, vTmp3);\n-    __ stvx            (vTmp2, fifteen, to);          \/\/ store this one first (may alias)\n-    __ stvx            (vTmp1, to);\n+\n+    \/\/ store result (unaligned)\n+    \/\/ Note: We can't use a read-modify-write sequence which touches additional Bytes.\n+    Register lo = temp, hi = fifteen; \/\/ Reuse\n+    __ vsldoi          (vTmp1, vRet, vRet, 8);\n+    __ mfvrd           (hi, vRet);\n+    __ mfvrd           (lo, vTmp1);\n+    __ std             (hi, 0 LITTLE_ENDIAN_ONLY(+ 8), to);\n+    __ std             (lo, 0 BIG_ENDIAN_ONLY(+ 8), to);\n@@ -3021,0 +3028,5 @@\n+\n+#ifdef ASSERT\n+    __ bind(L_error);\n+    __ stop(\"aescrypt_decryptBlock: invalid key length\");\n+#endif\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":56,"deletions":44,"binary":false,"changes":100,"status":"modified"}]}