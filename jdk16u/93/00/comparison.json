{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,10 @@\n+    \/**\n+     * ERROR HANDLING GUIDELINES\n+     * (which exceptions to throw and catch and which not to throw and catch)\n+     *\n+     * - if there is an IOException (SocketException) when accessing the\n+     *   underlying Socket, pass it through\n+     *\n+     * - do not throw IOExceptions, throw SSLExceptions (or a subclass)\n+     *\/\n+\n@@ -450,0 +460,2 @@\n+            } catch (SocketException se) {\n+                handleException(se);\n@@ -1409,5 +1421,3 @@\n-            } catch (SSLException ssle) {\n-                throw ssle;\n-            } catch (InterruptedIOException iioe) {\n-                \/\/ don't change exception in case of timeouts or interrupts\n-                throw iioe;\n+            } catch (SSLException | InterruptedIOException | SocketException se) {\n+                \/\/ don't change exception in case of timeouts or interrupts or SocketException\n+                throw se;\n@@ -1474,5 +1484,3 @@\n-            } catch (SSLException ssle) {\n-                throw ssle;\n-            } catch (InterruptedIOException iioe) {\n-                \/\/ don't change exception in case of timeouts or interrupts\n-                throw iioe;\n+            } catch (SSLException | InterruptedIOException | SocketException se) {\n+                \/\/ don't change exception in case of timeouts or interrupts or SocketException.\n+                throw se;\n@@ -1690,0 +1698,10 @@\n+        if (cause instanceof SocketException) {\n+            try {\n+                conContext.fatal(alert, cause);\n+            } catch (Exception e) {\n+                \/\/ Just delivering the fatal alert, re-throw the socket exception instead.\n+            }\n+\n+            throw (SocketException)cause;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.net.SocketException;\n@@ -140,3 +141,3 @@\n-        } catch (InterruptedIOException iioe) {\n-            \/\/ don't close the Socket in case of timeouts or interrupts.\n-            throw iioe;\n+        } catch (InterruptedIOException | SocketException se) {\n+            \/\/ don't close the Socket in case of timeouts or interrupts or SocketException.\n+            throw se;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLTransport.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.net.SocketException;\n@@ -176,2 +177,2 @@\n-                    } catch (SSLException he) {\n-                        System.out.println(\"SERVER: caught expected \" + he);\n+                    } catch (SSLException | SocketException se) {\n+                        System.out.println(\"SERVER: caught expected \" + se);\n","filename":"test\/jdk\/java\/net\/httpclient\/InvalidSSLContextTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        } catch (SSLException ssle) {\n+        } catch (SSLException | SocketException se) {\n@@ -95,1 +95,1 @@\n-            ssle.printStackTrace(System.out);\n+            se.printStackTrace(System.out);\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLSession\/TestEnabledProtocols.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,1 +134,1 @@\n-        } catch (SSLException ssle) {\n+        } catch (SSLException | SocketException se) {\n@@ -136,1 +136,1 @@\n-                throw ssle;\n+                throw se;\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/TrustTrustedCert.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2021, Amazon and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8214339 8259662\n+ * @summary When a SocketException is thrown by the underlying layer, It\n+ *      should be thrown as is and not be transformed to an SSLException.\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm SSLSocketShouldThrowSocketException\n+ *\/\n+\n+import java.io.*;\n+import java.net.*;\n+import java.util.*;\n+import java.security.*;\n+import javax.net.ssl.*;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SSLSocketShouldThrowSocketException extends SSLSocketTemplate {\n+\n+    boolean handshake;\n+\n+    private final CountDownLatch clientTerminatedCondition = new CountDownLatch(1);\n+\n+    SSLSocketShouldThrowSocketException(boolean handshake) {\n+        this.handshake = handshake;\n+    }\n+\n+    @Override\n+    protected boolean isCustomizedClientConnection() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n+        clientTerminatedCondition.await(30L, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    protected void runClientApplication(int serverPort) throws Exception {\n+        Socket baseSocket = new Socket(\"localhost\", serverPort);\n+\n+        SSLSocketFactory sslsf =\n+                (SSLSocketFactory) SSLSocketFactory.getDefault();\n+        SSLSocket sslSocket = (SSLSocket)\n+                sslsf.createSocket(baseSocket, \"localhost\", serverPort, false);\n+\n+        if (this.handshake) {\n+            testHandshakeClose(baseSocket, sslSocket);\n+        } else {\n+            testDataClose(baseSocket, sslSocket);\n+        }\n+\n+        clientTerminatedCondition.countDown();\n+\n+    }\n+\n+    private void testHandshakeClose(Socket baseSocket, SSLSocket sslSocket) throws Exception {\n+        Thread aborter = new Thread() {\n+            @Override\n+            public void run() {\n+\n+                try {\n+                    Thread.sleep(10);\n+                    System.err.println(\"Closing the client socket : \" + System.nanoTime());\n+                    baseSocket.close();\n+                } catch (Exception ieo) {\n+                    ieo.printStackTrace();\n+                }\n+            }\n+        };\n+\n+        aborter.start();\n+\n+        try {\n+            \/\/ handshaking\n+            System.err.println(\"Client starting handshake: \" + System.nanoTime());\n+            sslSocket.startHandshake();\n+            throw new Exception(\"Start handshake did not throw an exception\");\n+        } catch (SocketException se) {\n+            System.err.println(\"Caught Expected SocketException\");\n+        }\n+\n+        aborter.join();\n+    }\n+\n+    private void testDataClose(Socket baseSocket, SSLSocket sslSocket) throws Exception{\n+\n+        CountDownLatch handshakeCondition = new CountDownLatch(1);\n+\n+        Thread aborter = new Thread() {\n+            @Override\n+            public void run() {\n+\n+                try {\n+                    handshakeCondition.await(10L, TimeUnit.SECONDS);\n+                    System.err.println(\"Closing the client socket : \" + System.nanoTime());\n+                    baseSocket.close();\n+                } catch (Exception ieo) {\n+                    ieo.printStackTrace();\n+                }\n+            }\n+        };\n+\n+        aborter.start();\n+\n+        try {\n+            \/\/ handshaking\n+            System.err.println(\"Client starting handshake: \" + System.nanoTime());\n+            sslSocket.startHandshake();\n+            handshakeCondition.countDown();\n+            System.err.println(\"Reading data from server\");\n+            BufferedReader is = new BufferedReader(\n+                    new InputStreamReader(sslSocket.getInputStream()));\n+            String data = is.readLine();\n+            throw new Exception(\"Start handshake did not throw an exception\");\n+        } catch (SocketException se) {\n+            System.err.println(\"Caught Expected SocketException\");\n+        }\n+\n+        aborter.join();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ SocketException should be throws during a handshake phase.\n+        (new SSLSocketShouldThrowSocketException(true)).run();\n+        \/\/ SocketException should be throw during the application data phase.\n+        (new SSLSocketShouldThrowSocketException(false)).run();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketShouldThrowSocketException.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm SSLExceptionForIOIssue\n+ * @run main\/othervm SocketExceptionForSocketIssues\n@@ -41,1 +41,1 @@\n-public class SSLExceptionForIOIssue implements SSLContextTemplate {\n+public class SocketExceptionForSocketIssues implements SSLContextTemplate {\n@@ -45,1 +45,1 @@\n-        new SSLExceptionForIOIssue().test();\n+        new SocketExceptionForSocketIssues().test();\n@@ -82,1 +82,1 @@\n-        } catch (SSLException ssle) {\n+        } catch (SocketException se) {\n@@ -84,1 +84,1 @@\n-            System.err.println(\"server exception: \" + ssle);\n+            System.err.println(\"server exception: \" + se);\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SocketExceptionForSocketIssues.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLExceptionForIOIssue.java","status":"renamed"}]}