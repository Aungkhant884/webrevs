[{"commit":{"message":"Clarify why we can extract the base address from AddP's mach implementation"},"files":[{"filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp"}],"sha":"1c1e9813634f6029f43fd5f5ebdfa6fb69bc6479"},{"commit":{"message":"Analyze indirect operands at the Ideal level"},"files":[{"filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp"}],"sha":"56a44f69d0b78ad1bb37352287d68dd716a77bd9"},{"commit":{"message":"Enable barrier elision tests for aarch64"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestZGCBarrierElision.java"}],"sha":"7ce4d5b8277a26c183fd6a3341e0cce536125ac2"},{"commit":{"message":"Simplify tests"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestZGCBarrierElision.java"}],"sha":"a4dea888974818e0861c8959ac93c2faf6df8466"},{"commit":{"message":"Extend barrier elision tests with atomic array accesses"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestZGCBarrierElision.java"}],"sha":"de1027168b330409725cf2b0f438d8b84bb10574"},{"commit":{"message":"Update test expectations"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestZGCBarrierElision.java"}],"sha":"daad720795cbc4c67f1486f4b9aea9b488a38989"}]