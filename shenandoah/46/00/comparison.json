{"files":[{"patch":"@@ -86,11 +86,0 @@\n-      jlong status = 0;\n-\n-      if (heap->is_concurrent_young_mark_in_progress()) status |= 1 << 0;\n-      if (heap->is_concurrent_old_mark_in_progress())   status |= 1 << 1;\n-      if (heap->is_evacuation_in_progress())            status |= 1 << 2;\n-      if (heap->is_update_refs_in_progress())           status |= 1 << 3;\n-      if (heap->is_degenerated_gc_in_progress())        status |= 1 << 4;\n-      if (heap->is_full_gc_in_progress())               status |= 1 << 5;\n-      if (heap->active_generation() != NULL) {\n-        status |= (heap->active_generation()->generation_mode() << 6);\n-      }\n@@ -98,1 +87,1 @@\n-      _status->set_value(status);\n+      _status->set_value(encode_heap_status(heap));\n@@ -126,0 +115,57 @@\n+\n+static int encode_phase(ShenandoahHeap* heap) {\n+  if (heap->is_evacuation_in_progress()) {\n+    return 2;\n+  }\n+  if (heap->is_update_refs_in_progress()) {\n+    return 3;\n+  }\n+  if (heap->is_concurrent_mark_in_progress()) {\n+    return 1;\n+  }\n+  assert(heap->is_idle(), \"What is it doing?\");\n+  return 0;\n+}\n+\n+static int get_generation_shift(ShenandoahGeneration* generation) {\n+  switch (generation->generation_mode()) {\n+    case GLOBAL: return 0;\n+    case OLD:    return 2;\n+    case YOUNG:  return 4;\n+    default:\n+      ShouldNotReachHere();\n+      return -1;\n+  }\n+}\n+\n+jlong ShenandoahHeapRegionCounters::encode_heap_status(ShenandoahHeap* heap) {\n+\n+  if (heap->is_idle()) {\n+    return 0;\n+  }\n+\n+  jlong status = 0;\n+  if (!heap->mode()->is_generational()) {\n+    status = encode_phase(heap);\n+  } else {\n+    int phase = encode_phase(heap);\n+    ShenandoahGeneration* generation = heap->active_generation();\n+    assert(generation != NULL, \"Expected active generation in this mode.\");\n+    int shift = get_generation_shift(generation);\n+    status |= ((phase & 0x3) << shift);\n+    if (heap->is_concurrent_old_mark_in_progress()) {\n+      status |= (1 << 2);\n+    }\n+    log_develop_trace(gc)(\"%s, phase=%u, old_mark=%s, status=%zu\",\n+      generation->name(), phase, BOOL_TO_STR(heap->is_concurrent_old_mark_in_progress()), status);\n+  }\n+\n+  if (heap->is_degenerated_gc_in_progress()) {\n+    status |= (1 << 6);\n+  }\n+  if (heap->is_full_gc_in_progress()) {\n+    status |= (1 << 7);\n+  }\n+\n+  return status;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":58,"deletions":12,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -40,3 +40,8 @@\n- *     - bit 0 set when marking in progress\n- *     - bit 1 set when evacuation in progress\n- *     - bit 2 set when update refs in progress\n+ *   | global | old   | young | mode |\n+ *   |  0..1  | 2..3  | 4..5  | 6..7 |\n+ *\n+ *   For each generation:\n+ *   0 = idle, 1 = marking, 2 = evacuating, 3 = updating refs\n+ *\n+ *   For mode:\n+ *   0 = concurrent, 1 = degenerated, 2 = full\n@@ -88,0 +93,3 @@\n+\n+private:\n+  static jlong encode_heap_status(ShenandoahHeap* heap) ;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}