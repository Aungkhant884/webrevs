{"files":[{"patch":"@@ -80,0 +80,1 @@\n+      _log_file->set_option(ShenandoahLogFileCount, ShenandoahLogFileSize);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -61,0 +62,79 @@\n+static uint number_of_digits(uint number) {\n+    return number < 10 ? 1 : (number < 100 ? 2 : 3);\n+}\n+\n+static bool is_regular_file(const char* filename) {\n+    struct stat st;\n+    int ret = os::stat(filename, &st);\n+    if (ret != 0) {\n+        return false;\n+    }\n+    return (st.st_mode & S_IFMT) == S_IFREG;\n+}\n+\n+static bool is_fifo_file(const char* filename) {\n+    struct stat st;\n+    int ret = os::stat(filename, &st);\n+    if (ret != 0) {\n+        return false;\n+    }\n+    return S_ISFIFO(st.st_mode);\n+}\n+\n+\/\/ Try to find the next number that should be used for file rotation.\n+\/\/ Return UINT_MAX on error.\n+static uint next_file_number(const char* filename,\n+                             uint number_of_digits,\n+                             uint filecount,\n+                             outputStream* errstream) {\n+    bool found = false;\n+    uint next_num = 0;\n+\n+    \/\/ len is filename + dot + digits + null char\n+    size_t len = strlen(filename) + number_of_digits + 2;\n+    char* archive_name = NEW_C_HEAP_ARRAY(char, len, mtLogging);\n+    char* oldest_name = NEW_C_HEAP_ARRAY(char, len, mtLogging);\n+\n+    for (uint i = 0; i < filecount; i++) {\n+        int ret = jio_snprintf(archive_name, len, \"%s.%0*u\",\n+                               filename, number_of_digits, i);\n+        assert(ret > 0 && static_cast<size_t>(ret) == len - 1,\n+               \"incorrect buffer length calculation\");\n+\n+        if (os::file_exists(archive_name) && !is_regular_file(archive_name)) {\n+            \/\/ We've encountered something that's not a regular file among the\n+            \/\/ possible file rotation targets. Fail immediately to prevent\n+            \/\/ problems later.\n+            errstream->print_cr(\"Possible rotation target file '%s' already exists \"\n+                                \"but is not a regular file.\", archive_name);\n+            next_num = UINT_MAX;\n+            break;\n+        }\n+\n+        \/\/ Stop looking if we find an unused file name\n+        if (!os::file_exists(archive_name)) {\n+            next_num = i;\n+            found = true;\n+            break;\n+        }\n+\n+        \/\/ Keep track of oldest existing log file\n+        if (!found\n+            || os::compare_file_modified_times(oldest_name, archive_name) > 0) {\n+            strcpy(oldest_name, archive_name);\n+            next_num = i;\n+            found = true;\n+        }\n+    }\n+\n+    FREE_C_HEAP_ARRAY(char, oldest_name);\n+    FREE_C_HEAP_ARRAY(char, archive_name);\n+    return next_num;\n+}\n+void ShenandoahLogFileOutput::set_option(uint file_count, size_t rotation_size) {\n+    if (file_count < MaxRotationFileCount) {\n+        _file_count = file_count;\n+    }\n+    _rotate_size = rotation_size;\n+}\n+\n@@ -62,1 +142,2 @@\n-  : _name(os::strdup_check_oom(name, mtLogging)), _file_name(NULL), _stream(NULL) {\n+  : _name(os::strdup_check_oom(name, mtLogging)), _file_name(NULL), _archive_name(NULL), _stream(NULL), _current_file(0), _file_count(DefaultFileCount), _is_default_file_count(true), _archive_name_len(0),\n+     _rotate_size(DefaultFileSize),  _current_size(0), _rotation_semaphore(1) {\n@@ -74,0 +155,1 @@\n+  os::free(_archive_name);\n@@ -93,4 +175,29 @@\n-  _stream = os::fopen(_file_name, ShenandoahLogFileOutput::FileOpenMode);\n-  if (_stream == NULL) {\n-    errstream->print_cr(\"Error opening log file '%s': %s\", _file_name, os::strerror(errno));\n-    _file_name = make_file_name(\".\/shenandoahSnapshots_pid%p.log\", _pid_str, _vm_start_time_str);\n+\n+    bool file_exist = os::file_exists(_file_name);\n+    if (file_exist && _is_default_file_count && is_fifo_file(_file_name)) {\n+        _file_count = 0; \/\/ Prevent file rotation for fifo's such as named pipes.\n+    }\n+\n+    if (_file_count > 0) {\n+        \/\/ compute digits with filecount - 1 since numbers will start from 0\n+        _file_count_max_digits = number_of_digits(_file_count - 1);\n+        _archive_name_len = 2 + strlen(_file_name) + _file_count_max_digits;\n+        _archive_name = NEW_C_HEAP_ARRAY(char, _archive_name_len, mtLogging);\n+        _archive_name[0] = 0;\n+    }\n+\n+    if (_file_count > 0 && file_exist) {\n+        if (!is_regular_file(_file_name)) {\n+            vm_exit_during_initialization(err_msg(\"Unable to log to file %s with log file rotation: \"\n+                                                   \"%s is not a regular file\", _file_name, _file_name));\n+        }\n+        _current_file = next_file_number(_file_name,\n+                                         _file_count_max_digits,\n+                                         _file_count,\n+                                         errstream);\n+        if (_current_file == UINT_MAX) {\n+            vm_exit_during_initialization(\"Current file reaches the maximum for integer. Unable to initialize the log output.\");\n+        }\n+        archive();\n+        increment_file_count();\n+    }\n@@ -98,2 +205,7 @@\n-    errstream->print_cr(\"Writing to default log file: %s\", _file_name);\n-  }\n+    if (_stream == NULL) {\n+        vm_exit_during_initialization(err_msg(\"Error opening log file '%s': %s\",\n+                                              _file_name, os::strerror(errno)));\n+    }\n+    if (_file_count == 0 && is_regular_file(_file_name)) {\n+        os::ftruncate(os::get_fileno(_stream), 0);\n+    }\n@@ -102,0 +214,13 @@\n+class ShenandoahRotationLocker : public StackObj {\n+    Semaphore& _sem;\n+\n+public:\n+    ShenandoahRotationLocker(Semaphore& sem) : _sem(sem) {\n+        sem.wait();\n+    }\n+\n+    ~ShenandoahRotationLocker() {\n+        _sem.signal();\n+    }\n+};\n+\n@@ -107,0 +232,4 @@\n+  if (_stream == NULL) {\n+      \/\/ An error has occurred with this output, avoid writing to it.\n+      return 0;\n+  }\n@@ -115,0 +244,1 @@\n+  _current_size += written;\n@@ -117,0 +247,1 @@\n+    _current_size += written;\n@@ -120,0 +251,11 @@\n+    _current_size += written;\n+  }\n+  jio_fprintf(_stream, \"\\n\", written);\n+  _current_size += written;\n+  written = flush() ? written : -1;\n+  if (written > 0) {\n+      _current_size += written;\n+\n+      if (should_rotate()) {\n+          rotate();\n+      }\n@@ -121,2 +263,51 @@\n-  jio_fprintf(_stream, \"\\n\");\n-  return flush() ? written : -1;\n+\n+  return written;\n+}\n+\n+void ShenandoahLogFileOutput::archive() {\n+    assert(_archive_name != NULL && _archive_name_len > 0, \"Rotation must be configured before using this function.\");\n+    int ret = jio_snprintf(_archive_name, _archive_name_len, \"%s.%0*u\",\n+                           _file_name, _file_count_max_digits, _current_file);\n+    assert(ret >= 0, \"Buffer should always be large enough\");\n+\n+    \/\/ Attempt to remove possibly existing archived log file before we rename.\n+    \/\/ Don't care if it fails, we really only care about the rename that follows.\n+    remove(_archive_name);\n+\n+    \/\/ Rename the file from ex hotspot.log to hotspot.log.2\n+    if (rename(_file_name, _archive_name) == -1) {\n+        jio_fprintf(defaultStream::error_stream(), \"Could not rename log file '%s' to '%s' (%s).\\n\",\n+                    _file_name, _archive_name, os::strerror(errno));\n+    }\n+}\n+\n+void ShenandoahLogFileOutput::force_rotate() {\n+    if (_file_count == 0) {\n+        \/\/ Rotation not possible\n+        return;\n+    }\n+\n+    ShenandoahRotationLocker lock(_rotation_semaphore);\n+    rotate();\n+}\n+\n+void ShenandoahLogFileOutput::rotate() {\n+    if (fclose(_stream)) {\n+        jio_fprintf(defaultStream::error_stream(), \"Error closing file '%s' during log rotation (%s).\\n\",\n+                    _file_name, os::strerror(errno));\n+    }\n+\n+    \/\/ Archive the current log file\n+    archive();\n+\n+    \/\/ Open the active log file using the same stream as before\n+    _stream = os::fopen(_file_name, FileOpenMode);\n+    if (_stream == NULL) {\n+        jio_fprintf(defaultStream::error_stream(), \"Could not reopen file '%s' during log rotation (%s).\\n\",\n+                    _file_name, os::strerror(errno));\n+        return;\n+    }\n+\n+    \/\/ Reset accumulated size, increase current file counter, and check for file count wrap-around.\n+    _current_size = 0;\n+    increment_file_count();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLogFileOutput.cpp","additions":200,"deletions":9,"binary":false,"changes":209,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/semaphore.hpp\"\n@@ -42,0 +43,2 @@\n+    static const size_t DefaultFileCount = 5;\n+    static const size_t DefaultFileSize = 20 * M;\n@@ -44,0 +47,1 @@\n+    static const uint   MaxRotationFileCount = 1000;\n@@ -49,0 +53,1 @@\n+    char* _archive_name;\n@@ -51,0 +56,9 @@\n+    uint  _current_file;\n+    uint  _file_count;\n+    uint  _file_count_max_digits;\n+    bool  _is_default_file_count;\n+\n+    size_t  _archive_name_len;\n+    size_t  _rotate_size;\n+    size_t  _current_size;\n+\n@@ -53,0 +67,2 @@\n+    Semaphore _rotation_semaphore;\n+\n@@ -54,0 +70,2 @@\n+    void archive();\n+    void rotate();\n@@ -56,0 +74,11 @@\n+    bool should_rotate() {\n+        return _file_count > 0 && _rotate_size > 0 && _current_size >= _rotate_size;\n+    }\n+\n+    void increment_file_count() {\n+        _current_file++;\n+        if (_current_file == _file_count) {\n+            _current_file = 0;\n+        }\n+    }\n+\n@@ -63,0 +92,2 @@\n+    void force_rotate();\n+    void set_option(uint file_count, size_t rotation_size);\n@@ -74,0 +105,1 @@\n+    const char* cur_log_file_name();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLogFileOutput.hpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -253,0 +253,10 @@\n+  product(uintx, ShenandoahLogFileCount, 5, \"Defines the maximum number of \"\\\n+          \"log files. Default is 5, maximum is 1000. Set to 0 to disable \"  \\\n+          \"rotation. Only includes rotated\/archived files. Doesn't include \"\\\n+          \"active log file.\")                                               \\\n+          range(0, 1000)                                                    \\\n+                                                                            \\\n+  product(size_t, ShenandoahLogFileSize, 20 * M, \"Defines the maximum size \"\\\n+          \"of the log file. Files over this size will be rotated. Default \" \\\n+          \"is 20MB. Set to 0 to disable rotation\")                          \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2022 Amazon.com, Inc. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @test id=adaptive\n+ * @test id=rotation\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRegionSamplingLogging.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+   \/*\n+    * Copyright (c) 2022 Amazon.com, Inc. All rights reserved.\n+    * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+    *\n+    * This code is free software; you can redistribute it and\/or modify it\n+    * under the terms of the GNU General Public License version 2 only, as\n+    * published by the Free Software Foundation.\n+    *\n+    * This code is distributed in the hope that it will be useful, but WITHOUT\n+    * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+    * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+    * version 2 for more details (a copy is included in the LICENSE file that\n+    * accompanied this code).\n+    *\n+    * You should have received a copy of the GNU General Public License version\n+    * 2 along with this work; if not, write to the Free Software Foundation,\n+    * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+    *\n+    * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+    * or visit www.oracle.com if you need additional information or have any\n+    * questions.\n+    *\n+    *\/\n+\n+   \/*\n+    * @test id=rotation\n+    * @requires vm.gc.Shenandoah\n+    *\n+    * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+    *      -XX:+ShenandoahRegionSampling -XX:+ShenandoahRegionSampling\n+    *      -XX:+ShenandoahLogRegionSampling -XX:ShenandoahRegionSamplingFile=region-snapshots-%p.log\n+    *      -XX:ShenandoahLogFileCount=3 -XX:ShenandoahLogFileSize=100\n+    *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive\n+    *      TestShenandoahLogRotation\n+    *\/\n+\n+   import java.io.File;\n+   import java.util.Arrays;\n+   import java.nio.file.Files;\n+\n+\n+\n+   public class TestShenandoahLogRotation {\n+\n+       static final long TARGET_MB = Long.getLong(\"target\", 1);\n+\n+       static volatile Object sink;\n+\n+       public static void main(String[] args) throws Exception {\n+           long count = TARGET_MB * 1024 * 1024 \/ 16;\n+           for (long c = 0; c < count; c++) {\n+               sink = new Object();\n+               Thread.sleep(1);\n+           }\n+\n+           File directory = new File(\".\");\n+           File[] files = directory.listFiles((dir, name) -> name.startsWith(\"region-snapshots\"));\n+           System.out.println(Arrays.toString(files));\n+           int smallFilesNumber = 0;\n+           for (File file : files) {\n+               if (file.length() < 100) {\n+                   smallFilesNumber++;\n+               }\n+           }\n+           \/\/ Expect one more log file since the ShenandoahLogFileCount doesn't include the active log file\n+           int expectedNumberOfFiles = 4;\n+           if (files.length != expectedNumberOfFiles) {\n+               throw new Error(\"There are \" + files.length + \" logs instead of the expected \" + expectedNumberOfFiles + \" \" + files[0].getAbsolutePath());\n+           }\n+           if (smallFilesNumber > 1) {\n+               throw new Error(\"There should maximum one log with size < \" + 100 + \"B\");\n+           }\n+       }\n+\n+   }\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestShenandoahLogRotation.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}