{"files":[{"patch":"@@ -1143,0 +1143,18 @@\n+  if (heap->mode()->is_generational() && heap->is_concurrent_old_mark_in_progress()) {\n+    \/\/ When the SATB barrier is left on to support concurrent old gen mark, it may pick up writes to\n+    \/\/ objects in the collection set. After those objects are evacuated, the pointers in the\n+    \/\/ SATB are no longer safe. Once we have finished update references, we are guaranteed that\n+    \/\/ no more writes to the collection set are possible.\n+    \/\/\n+    \/\/ This will transfer any old pointers in _active_ regions from the SATB to the old gen\n+    \/\/ mark queues. All other pointers will be discarded. This would also discard any pointers\n+    \/\/ in old regions that were included in a mixed evacuation. We aren't using the SATB filter\n+    \/\/ methods here because we cannot control when they execute. If the SATB filter runs _after_\n+    \/\/ a region has been recycled, we will not be able to detect the bad pointer.\n+    \/\/\n+    \/\/ We are not concerned about skipping this step in abbreviated cycles because regions\n+    \/\/ with no live objects cannot have been written to and so cannot have entries in the SATB\n+    \/\/ buffers.\n+    heap->transfer_old_pointers_from_satb();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,16 +48,1 @@\n-    if (!_heap->requires_marking(entry)) {\n-      \/\/ The object is already marked, don't need to mark it again\n-      return true;\n-    }\n-\n-    if (_heap->mode()->is_generational() && _heap->is_concurrent_old_mark_in_progress()) {\n-      \/\/ The SATB barrier is left on during concurrent marking of the old generation.\n-      \/\/ It is possible for the barrier to record an address of a reachable object\n-      \/\/ which exists in the collection set of a young generation collection. Once the\n-      \/\/ object is evacuated, the address left in the SATB buffer is no longer valid (or safe).\n-      ShenandoahHeapRegion* region = _heap->heap_region_containing(entry);\n-      return !region->is_active() || region->is_cset();\n-    }\n-\n-    \/\/ Keep this object in the SATB buffer.\n-    return false;\n+    return !_heap->requires_marking(entry);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSATBMarkQueueSet.cpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"}]}