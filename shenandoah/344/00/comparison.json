{"files":[{"patch":"@@ -195,1 +195,5 @@\n-    _old_generation->transition_to(ShenandoahOldGeneration::IDLE);\n+    if (has_coalesce_and_fill_candidates()) {\n+      _old_generation->transition_to(ShenandoahOldGeneration::WAITING_FOR_FILL);\n+    } else {\n+      _old_generation->transition_to(ShenandoahOldGeneration::IDLE);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -855,2 +855,3 @@\n-  return !is_explicit_gc(cause) &&\n-          (cause != GCCause::_shenandoah_concurrent_gc);\n+  return !is_explicit_gc(cause)\n+      && cause != GCCause::_shenandoah_concurrent_gc\n+      && cause != GCCause::_no_gc;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1305,1 +1305,1 @@\n-  {\n+  if (LogTarget(Debug, gc, free)::is_enabled()) {\n@@ -1327,1 +1327,1 @@\n-    log_info(gc, free)(\"FreeSet map legend:\"\n+    log_debug(gc, free)(\"FreeSet map legend:\"\n@@ -1330,1 +1330,1 @@\n-    log_info(gc, free)(\" mutator free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"], \"\n+    log_debug(gc, free)(\" mutator free range [\" SIZE_FORMAT \"..\" SIZE_FORMAT \"], \"\n@@ -1342,1 +1342,1 @@\n-        log_info(gc, free)(\" %6u: %s\", i-64, buffer);\n+        log_debug(gc, free)(\" %6u: %s\", i-64, buffer);\n@@ -1387,1 +1387,1 @@\n-    log_info(gc, free)(\" %6u: %s\", (uint) (_heap->num_regions() - remnant), buffer);\n+    log_debug(gc, free)(\" %6u: %s\", (uint) (_heap->num_regions() - remnant), buffer);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    heap->cancel_old_gc();\n+    assert(!heap->is_concurrent_old_mark_in_progress(), \"Old cycle should not be running.\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1166,12 +1166,18 @@\n-  log_info(gc)(\"Terminating old gc cycle.\");\n-\n-  \/\/ Stop marking\n-  old_generation()->cancel_marking();\n-  \/\/ Stop coalescing undead objects\n-  set_prepare_for_old_mark_in_progress(false);\n-  \/\/ Stop tracking old regions\n-  old_heuristics()->abandon_collection_candidates();\n-  \/\/ Remove old generation access to young generation mark queues\n-  young_generation()->set_old_gen_task_queues(nullptr);\n-  \/\/ Transition to IDLE now.\n-  _old_generation->transition_to(ShenandoahOldGeneration::IDLE);\n+  if (_old_generation->state() == ShenandoahOldGeneration::IDLE) {\n+    assert(!old_generation()->is_concurrent_mark_in_progress(), \"Cannot be marking in IDLE\");\n+    assert(!old_heuristics()->has_coalesce_and_fill_candidates(), \"Cannot have coalesce and fill candidates in IDLE\");\n+    assert(!old_heuristics()->unprocessed_old_collection_candidates(), \"Cannot have mixed collection candidates in IDLE\");\n+    assert(!young_generation()->is_bootstrap_cycle(), \"Cannot have old mark queues if IDLE\");\n+  } else {\n+    log_info(gc)(\"Terminating old gc cycle.\");\n+    \/\/ Stop marking\n+    old_generation()->cancel_marking();\n+    \/\/ Stop coalescing undead objects\n+    set_prepare_for_old_mark_in_progress(false);\n+    \/\/ Stop tracking old regions\n+    old_heuristics()->abandon_collection_candidates();\n+    \/\/ Remove old generation access to young generation mark queues\n+    young_generation()->set_old_gen_task_queues(nullptr);\n+    \/\/ Transition to IDLE now.\n+    _old_generation->transition_to(ShenandoahOldGeneration::IDLE);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -79,4 +79,6 @@\n-        if (start_old_cycle()) {\n-          log_info(gc)(\"Heuristics request for old collection accepted\");\n-        } else if (start_young_cycle()) {\n-          log_info(gc)(\"Heuristics request for young collection accepted\");\n+        if (_young_heuristics->should_start_gc()) {\n+          if (start_old_cycle()) {\n+            log_info(gc)(\"Heuristics request for old collection accepted\");\n+          } else if (request_concurrent_gc(YOUNG)) {\n+            log_info(gc)(\"Heuristics request for young collection accepted\");\n+          }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}