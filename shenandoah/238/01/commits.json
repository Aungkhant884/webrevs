[{"commit":{"message":"Merge branch 'master' into ref_proc_card_mark_fix"},"files":[],"sha":"4e6fb9435c8656e759834fe7435f94be15867556"},{"commit":{"message":"Add documentation comment & some assertions."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp"}],"sha":"cca3d009e66f7b36b581f62d1c8b4f871794130e"},{"commit":{"message":"When (generational) GC discovers j.l.Reference:s in both generations, then subsequent\nprocessing of the discovered list may create new old to young pointers\nwhich the young collector needs to know about. This fix takes care of\nmarking cards for that case.\n\nThe issue was revealed during a verification failure and subsequently\nverified by means of a check in the reference processing code to detect\nthe condition when the new cross generational pointer was being created\nwithout the associated card-marking. This typically happens when\ndiscovery is in both generations -- for young collections such Reference\nobjects in the old generation are discovered during the card scanning,\nand for global collections when objects are marked. The situation is\ntypically rare in the case of young collections because the Reference\nobjects typically lie on dirty cards and hold pointers to referents in\nthe young generation."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp"}],"sha":"65b6cc49fa818ad798d49cb390dcaaef231143ed"},{"commit":{"message":"Shelve for now. May not compile."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp"}],"sha":"e2a5cc86379d165bb392ba3cd23b3ba748d251fe"}]