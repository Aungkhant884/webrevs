{"files":[{"patch":"@@ -888,11 +888,1 @@\n-  size_t available = in_use > capacity ? 0 : capacity - in_use;\n-  \/\/ The collector reserve may eat into what the mutator is allowed to use. Make sure we are looking\n-  \/\/ at what is available to the mutator when deciding whether to start a GC.\n-  size_t usable = ShenandoahHeap::heap()->free_set()->available();\n-  if (usable < available) {\n-    log_debug(gc)(\"Usable (\" SIZE_FORMAT \"%s) is less than available (\" SIZE_FORMAT \"%s)\",\n-                  byte_size_in_proper_unit(usable), proper_unit_for_byte_size(usable),\n-                  byte_size_in_proper_unit(available), proper_unit_for_byte_size(available));\n-    available = usable;\n-  }\n-  return available;\n+  return in_use > capacity ? 0 : capacity - in_use;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,0 +61,9 @@\n+size_t ShenandoahGlobalGeneration::soft_available() const {\n+  size_t available = this->available();\n+\n+  \/\/ Make sure the code below treats available without the soft tail.\n+  assert(max_capacity() >= soft_max_capacity(), \"Max capacity must be greater than soft max capacity.\");\n+  size_t soft_tail = max_capacity() - soft_max_capacity();\n+  return (available > soft_tail) ? (available - soft_tail) : 0;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  virtual size_t soft_available() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -98,0 +98,12 @@\n+\n+size_t ShenandoahYoungGeneration::available() const {\n+  \/\/ The collector reserve may eat into what the mutator is allowed to use. Make sure we are looking\n+  \/\/ at what is available to the mutator when reporting how much memory is available.\n+  size_t available = this->ShenandoahGeneration::available();\n+  return MIN2(available, ShenandoahHeap::heap()->free_set()->available());\n+}\n+\n+size_t ShenandoahYoungGeneration::soft_available() const {\n+  size_t available = this->ShenandoahGeneration::soft_available();\n+  return MIN2(available, ShenandoahHeap::heap()->free_set()->available());\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+\n+  size_t available() const override;\n+  size_t soft_available() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}