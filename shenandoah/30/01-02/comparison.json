{"files":[{"patch":"@@ -143,0 +143,4 @@\n+\n+  HeapWord* top() {\n+    return _top;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/plab.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -123,1 +123,0 @@\n-    \/\/ SATB protocol requires to keep alive reacheable oops from roots at the beginning of GC\n@@ -125,0 +124,4 @@\n+    PLAB* plab = ShenandoahThreadLocalData::plab(thread);\n+    heap->retire_plab(plab);\n+\n+    \/\/ SATB protocol requires to keep alive reacheable oops from roots at the beginning of GC\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -426,5 +426,3 @@\n-  shenandoah_assert_heaplocked();\n-  try_recycle_trashed(r);\n-\n-  assert(r->is_empty(), \"Region must be empty after flipping from mutator to GC.\");\n-  r->set_affiliation(FREE);\n+  \/\/ We do not ensure that the region is no longer trash,\n+  \/\/ relying on try_allocate_in(), which always comes next,\n+  \/\/ to recycle trash before attempting to allocate anything in the region.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -856,1 +856,1 @@\n-  plab->retire();\n+  retire_plab(plab);\n@@ -883,0 +883,12 @@\n+void ShenandoahHeap::retire_plab(PLAB* plab) {\n+  size_t waste = plab->waste();\n+  HeapWord* top = plab->top();\n+  plab->retire();\n+  if (top != NULL && plab->waste() > waste) {\n+    \/\/ If retiring the plab created a filler object, then we\n+    \/\/ need to register it with our card scanner so it can\n+    \/\/ safely walk the region backing the plab.\n+    card_scan()->register_object(top);\n+  }\n+}\n+\n@@ -1227,1 +1239,1 @@\n-    plab->retire();\n+    ShenandoahHeap::heap()->retire_plab(plab);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+class PLAB;\n@@ -677,0 +678,1 @@\n+  void retire_plab(PLAB* plab);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -228,2 +228,6 @@\n-  if (obj != NULL) {\n-    return obj;\n+  if (obj == NULL) {\n+    obj = allocate_from_plab_slow(thread, size);\n+  }\n+\n+  if (mode()->is_generational() && obj != NULL) {\n+    ShenandoahHeap::heap()->card_scan()->register_object(obj);\n@@ -231,1 +235,2 @@\n-  return allocate_from_plab_slow(thread, size);\n+\n+  return obj;\n@@ -375,1 +380,3 @@\n-      card_scan()->register_object(copy);\n+      if (target_gen == OLD_GENERATION) {\n+        card_scan()->register_object(copy);\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}