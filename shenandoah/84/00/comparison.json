{"files":[{"patch":"@@ -380,2 +380,0 @@\n-  size_t                    *_old_used;\n-  size_t                    *_young_used;\n@@ -385,1 +383,1 @@\n-                                     size_t num_workers, size_t* old_used, size_t* young_used);\n+                                     size_t num_workers);\n@@ -400,4 +398,0 @@\n-  void add_to_young_used(size_t worker_id, size_t amount);\n-  void add_to_old_used(size_t worker_id, size_t amount);\n-  size_t young_used();\n-  size_t old_used();\n@@ -467,1 +461,0 @@\n-      _compactor->add_to_old_used(_worker_id, _old_compact_point - _old_to_region->bottom());\n@@ -477,1 +470,0 @@\n-      _compactor->add_to_young_used(_worker_id, _young_compact_point - _young_to_region->bottom());\n@@ -653,1 +645,1 @@\n-                                                                       size_t num_workers, size_t* old_used, size_t* young_used) :\n+                                                                       size_t num_workers) :\n@@ -656,7 +648,1 @@\n-    _worker_slices(worker_slices), _num_workers(num_workers),\n-    _old_used(old_used), _young_used(young_used) {\n-  for (size_t i = 0; i < _num_workers; i++) {\n-    _old_used[i] = 0;\n-    _young_used[i] = 0;\n-  }\n-}\n+    _worker_slices(worker_slices), _num_workers(num_workers) { }\n@@ -734,38 +720,0 @@\n-\/\/ Accumulate HeapWords of memory used in young-gen memory.\n-void ShenandoahPrepareForCompactionTask::add_to_young_used(size_t worker_id, size_t amount) {\n-  log_debug(gc)(\"Adding to _young_used for worker_id: \" SIZE_FORMAT \", amount: \" SIZE_FORMAT, worker_id, amount);\n-  _young_used[worker_id] += amount;\n-}\n-\n-\/\/ Accumulate HeapWords of memory used in old-gen memory.\n-void ShenandoahPrepareForCompactionTask::add_to_old_used(size_t worker_id, size_t amount) {\n-  log_debug(gc)(\"Adding to _old_used for worker_id: \" SIZE_FORMAT \", amount: \" SIZE_FORMAT, worker_id, amount);\n-  _old_used[worker_id] += amount;\n-}\n-\n-\/\/ Return total number of bytes used in young-gen memory\n-size_t ShenandoahPrepareForCompactionTask::young_used() {\n-  size_t result = 0;\n-  log_debug(gc)(\"Calculating young_used by accumulating worker totals\");\n-  for (size_t i = 0; i < _num_workers; i++) {\n-    log_debug(gc)(\"  worker [\" SIZE_FORMAT \"] contributed \" SIZE_FORMAT, i, _young_used[i]);\n-    result += _young_used[i];\n-  }\n-  result *= HeapWordSize;\n-  log_debug(gc)(\"Accumulated _young_used is: \" SIZE_FORMAT, result);\n-  return result;\n-}\n-\n-\/\/ Return total number of bytes used in old-gen memory\n-size_t ShenandoahPrepareForCompactionTask::old_used() {\n-  size_t result = 0;\n-  log_debug(gc)(\"Calculating old_used by accumulating worker totals\");\n-  for (size_t i = 0; i < _num_workers; i++) {\n-    log_debug(gc)(\"  worker [\" SIZE_FORMAT \"] contributed \" SIZE_FORMAT, i, _old_used[i]);\n-    result += _old_used[i];\n-  }\n-  log_debug(gc)(\"Accumulated _old_used is: \" SIZE_FORMAT, result);\n-  result *= HeapWordSize;\n-  return result;\n-}\n-\n@@ -792,11 +740,0 @@\n-\n-    if (r->is_humongous_start() && heap->mode()->is_generational()) {\n-      oop obj = cast_to_oop(r->bottom());\n-      size_t humongous_bytes = obj->size() * HeapWordSize;\n-      log_debug(gc)(\"Adjusting used for humongous %s object by \" SIZE_FORMAT, r->is_old()? \"OLD\": \"YOUNG\", humongous_bytes);\n-      if (r->is_old()) {\n-        heap->old_generation()->increase_used(humongous_bytes);\n-      } else {\n-        heap->young_generation()->increase_used(humongous_bytes);\n-      }\n-    }\n@@ -1073,4 +1010,1 @@\n-    size_t* old_used   = NEW_RESOURCE_ARRAY(size_t, num_workers);\n-    size_t* young_used = NEW_RESOURCE_ARRAY(size_t, num_workers);\n-\n-    ShenandoahPrepareForCompactionTask task(_preserved_marks, worker_slices, num_workers, old_used, young_used);\n+    ShenandoahPrepareForCompactionTask task(_preserved_marks, worker_slices, num_workers);\n@@ -1078,10 +1012,0 @@\n-\n-    if (heap->mode()->is_generational()) {\n-      log_debug(gc)(\"Usage after compacting regular objects is young: \" SIZE_FORMAT \", old: \" SIZE_FORMAT,\n-                    task.young_used(), task.old_used());\n-      heap->young_generation()->increase_used(task.young_used());\n-      heap->old_generation()->increase_used(task.old_used());\n-    }\n-\n-    FREE_RESOURCE_ARRAY(size_t, old_used, num_workers);\n-    FREE_RESOURCE_ARRAY(size_t, young_used, num_workers);\n@@ -1296,0 +1220,9 @@\n+    \/\/ Update final usage for generations\n+    if (_heap->mode()->is_generational() && live != 0) {\n+      if (r->is_young()) {\n+        _heap->young_generation()->increase_used(live);\n+      } else if (r->is_old()) {\n+        _heap->old_generation()->increase_used(live);\n+      }\n+    }\n+\n@@ -1435,0 +1368,5 @@\n+    if (heap->mode()->is_generational()) {\n+      heap->young_generation()->clear_used();\n+      heap->old_generation()->clear_used();\n+    }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":18,"deletions":80,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -361,0 +361,38 @@\n+class ShenandoahGenerationStatsClosure : public ShenandoahHeapRegionClosure {\n+ public:\n+  ShenandoahCalculateRegionStatsClosure old;\n+  ShenandoahCalculateRegionStatsClosure young;\n+  ShenandoahCalculateRegionStatsClosure global;\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n+    switch (r->affiliation()) {\n+      default:\n+        ShouldNotReachHere();\n+        return;\n+      case FREE: return;\n+      case YOUNG_GENERATION:\n+        young.heap_region_do(r);\n+        break;\n+      case OLD_GENERATION:\n+        old.heap_region_do(r);\n+        break;\n+    }\n+    global.heap_region_do(r);\n+  }\n+\n+  static void log_usage(ShenandoahGeneration* generation, ShenandoahCalculateRegionStatsClosure& stats) {\n+    log_debug(gc)(\"Safepoint verification: %s verified usage: \" SIZE_FORMAT \"%s, recorded usage: \" SIZE_FORMAT \"%s\",\n+                  generation->name(),\n+                  byte_size_in_proper_unit(generation->used()), proper_unit_for_byte_size(generation->used()),\n+                  byte_size_in_proper_unit(stats.used()), proper_unit_for_byte_size(stats.used()));\n+  }\n+\n+  static void validate_usage(const char* label, ShenandoahGeneration* generation, ShenandoahCalculateRegionStatsClosure& stats) {\n+    guarantee(stats.used() == generation->used(),\n+              \"%s: generation (%s) used size must be consistent: generation-used = \" SIZE_FORMAT \"%s, regions-used = \" SIZE_FORMAT \"%s\",\n+              label, generation->name(),\n+              byte_size_in_proper_unit(generation->used()), proper_unit_for_byte_size(generation->used()),\n+              byte_size_in_proper_unit(stats.used()), proper_unit_for_byte_size(stats.used()));\n+  }\n+};\n+\n@@ -782,6 +820,2 @@\n-    ShenandoahCalculateRegionStatsClosure cl;\n-    generation->heap_region_iterate(&cl);\n-\n-    log_debug(gc)(\"Safepoint verification: generation %s usage hereby calculated as: \" SIZE_FORMAT,\n-                  generation->name(), cl.used());\n-    log_debug(gc)(\"                                    previous tabulation of usage: \" SIZE_FORMAT, generation->used());\n+    ShenandoahGenerationStatsClosure cl;\n+    _heap->heap_region_iterate(&cl);\n@@ -789,0 +823,5 @@\n+    if (LogTarget(Debug, gc)::is_enabled()) {\n+      ShenandoahGenerationStatsClosure::log_usage(_heap->old_generation(), cl.old);\n+      ShenandoahGenerationStatsClosure::log_usage(_heap->young_generation(), cl.young);\n+      ShenandoahGenerationStatsClosure::log_usage(_heap->global_generation(), cl.global);\n+    }\n@@ -790,6 +829,3 @@\n-    size_t generation_used = generation->used();\n-    guarantee(cl.used() == generation_used,\n-              \"%s: generation (%s) used size must be consistent: generation-used = \" SIZE_FORMAT \"%s, regions-used = \" SIZE_FORMAT \"%s\",\n-              label, generation->name(),\n-              byte_size_in_proper_unit(generation_used), proper_unit_for_byte_size(generation_used),\n-              byte_size_in_proper_unit(cl.used()), proper_unit_for_byte_size(cl.used()));\n+    ShenandoahGenerationStatsClosure::validate_usage(label, _heap->old_generation(), cl.old);\n+    ShenandoahGenerationStatsClosure::validate_usage(label, _heap->young_generation(), cl.young);\n+    ShenandoahGenerationStatsClosure::validate_usage(label, _heap->global_generation(), cl.global);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":48,"deletions":12,"binary":false,"changes":60,"status":"modified"}]}