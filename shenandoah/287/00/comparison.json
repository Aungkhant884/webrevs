{"files":[{"patch":"@@ -128,9 +128,0 @@\n-      if (heap->is_concurrent_old_mark_in_progress()) {\n-        \/\/ We have come straight into a degenerated cycle without running a concurrent cycle\n-        \/\/ first and the SATB barrier is enabled to support concurrent old marking. The SATB buffer\n-        \/\/ may hold a mix of old and young pointers. The old pointers need to be transferred\n-        \/\/ to the old generation mark queues and the young pointers are _not_ part of this\n-        \/\/ snapshot, so they must be dropped here.\n-        heap->transfer_old_pointers_from_satb();\n-      }\n-\n@@ -159,1 +150,3 @@\n-          \/\/ the entire old gc before coming into this switch.\n+          \/\/ the entire old gc before coming into this switch. Note that cancel_marking on\n+          \/\/ the generation does NOT abandon incomplete SATB buffers as cancel_concurrent_mark does.\n+          \/\/ We need to separate out the old pointers which is done below.\n@@ -162,0 +155,9 @@\n+\n+        if (heap->is_concurrent_mark_in_progress()) {\n+          \/\/ If either old or young marking is in progress, the SATB barrier will be enabled.\n+          \/\/ The SATB buffer may hold a mix of old and young pointers. The old pointers need to be\n+          \/\/ transferred to the old generation mark queues and the young pointers are NOT part\n+          \/\/ of this snapshot, so they must be dropped here. It is safe to drop them here because\n+          \/\/ we will rescan the roots on this safepoint.\n+          heap->transfer_old_pointers_from_satb();\n+        }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  \/\/ it points at an object in the collection set, for example). There are\n+  \/\/ it points at an object that is later chosen for the collection set). There are\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+        options._verify_marked == ShenandoahVerifier::_verify_marked_complete_satb_empty ||\n@@ -260,0 +261,1 @@\n+      case ShenandoahVerifier::_verify_marked_complete_satb_empty:\n@@ -600,0 +602,14 @@\n+class ShenandoahVerifyNoIncompleteSatbBuffers : public ThreadClosure {\n+public:\n+  virtual void do_thread(Thread* thread) {\n+    SATBMarkQueue& queue = ShenandoahThreadLocalData::satb_mark_queue(thread);\n+    if (!is_empty(queue)) {\n+      fatal(\"All SATB buffers should have been flushed during mark\");\n+    }\n+  }\n+private:\n+  bool is_empty(SATBMarkQueue& queue) {\n+    return queue.buffer() == nullptr || queue.index() == queue.capacity();\n+  }\n+};\n+\n@@ -625,0 +641,4 @@\n+    if (_options._verify_marked == ShenandoahVerifier::_verify_marked_complete_satb_empty) {\n+      Threads::change_thread_claim_token();\n+    }\n+\n@@ -636,0 +656,5 @@\n+    if (_options._verify_marked == ShenandoahVerifier::_verify_marked_complete_satb_empty) {\n+      ShenandoahVerifyNoIncompleteSatbBuffers verify_satb;\n+      Threads::possibly_parallel_threads_do(true, &verify_satb);\n+    }\n+\n@@ -948,1 +973,4 @@\n-  if (ShenandoahVerifyLevel >= 4 && (marked == _verify_marked_complete || marked == _verify_marked_complete_except_references)) {\n+  if (ShenandoahVerifyLevel >= 4 &&\n+        (marked == _verify_marked_complete ||\n+         marked == _verify_marked_complete_except_references ||\n+         marked == _verify_marked_complete_satb_empty)) {\n@@ -1034,1 +1062,1 @@\n-          _verify_marked_complete_except_references,\n+          _verify_marked_complete_satb_empty,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -91,1 +91,6 @@\n-    _verify_marked_complete_except_references\n+    _verify_marked_complete_except_references,\n+\n+    \/\/ Objects should be marked in \"complete\" bitmap, except j.l.r.Reference referents, which\n+    \/\/ may be dangling after marking but before conc-weakrefs-processing. All SATB buffers must\n+    \/\/ be empty.\n+    _verify_marked_complete_satb_empty,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}