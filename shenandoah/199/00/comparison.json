{"files":[{"patch":"@@ -122,2 +122,2 @@\n-    _min_desired_young_size(0),\n-    _max_desired_young_size(0),\n+    _min_desired_young_regions(0),\n+    _max_desired_young_regions(0),\n@@ -147,1 +147,1 @@\n-    _min_desired_young_size = MAX2(NewSize, ShenandoahHeapRegion::region_size_bytes());\n+    _min_desired_young_regions = MAX2(uint(NewSize \/ ShenandoahHeapRegion::region_size_bytes()), 1U);\n@@ -149,1 +149,1 @@\n-      _max_desired_young_size = MAX2(MaxNewSize, ShenandoahHeapRegion::region_size_bytes());\n+      _max_desired_young_regions = MAX2(uint(MaxNewSize \/ ShenandoahHeapRegion::region_size_bytes()), 1U);\n@@ -151,1 +151,1 @@\n-      _use_adaptive_sizing = _min_desired_young_size != _max_desired_young_size;\n+      _use_adaptive_sizing = _min_desired_young_regions != _max_desired_young_regions;\n@@ -156,1 +156,1 @@\n-    _max_desired_young_size = MAX2(MaxNewSize, ShenandoahHeapRegion::region_size_bytes());\n+    _max_desired_young_regions = MAX2(uint(MaxNewSize \/ ShenandoahHeapRegion::region_size_bytes()), 1U);\n@@ -161,4 +161,3 @@\n-size_t ShenandoahGenerationSizer::calculate_min_size(size_t heap_size) {\n-  size_t default_value = (heap_size * ShenandoahMinYoungPercentage) \/ 100;\n-  default_value &= ~ShenandoahHeapRegion::region_size_bytes_mask();\n-  return MAX2(ShenandoahHeapRegion::region_size_bytes(), default_value);\n+size_t ShenandoahGenerationSizer::calculate_min_young_regions(size_t heap_region_count) {\n+  size_t min_young_regions = (heap_region_count * ShenandoahMinYoungPercentage) \/ 100;\n+  return MAX2(uint(min_young_regions), 1U);\n@@ -167,4 +166,3 @@\n-size_t ShenandoahGenerationSizer::calculate_max_size(size_t heap_size) {\n-  size_t default_value = (heap_size * ShenandoahMaxYoungPercentage) \/ 100;\n-  default_value &= ~ShenandoahHeapRegion::region_size_bytes_mask();\n-  return MAX2(ShenandoahHeapRegion::region_size_bytes(), default_value);\n+size_t ShenandoahGenerationSizer::calculate_max_young_regions(size_t heap_region_count) {\n+  size_t max_young_regions = (heap_region_count * ShenandoahMaxYoungPercentage) \/ 100;\n+  return MAX2(uint(max_young_regions), 1U);\n@@ -173,2 +171,2 @@\n-void ShenandoahGenerationSizer::recalculate_min_max_young_length(size_t heap_size) {\n-  assert(heap_size > 0, \"Heap must be initialized\");\n+void ShenandoahGenerationSizer::recalculate_min_max_young_length(size_t heap_region_count) {\n+  assert(heap_region_count > 0, \"Heap must be initialized\");\n@@ -178,2 +176,2 @@\n-      _min_desired_young_size = calculate_min_size(heap_size);\n-      _max_desired_young_size = calculate_max_size(heap_size);\n+      _min_desired_young_regions = calculate_min_young_regions(heap_region_count);\n+      _max_desired_young_regions = calculate_max_young_regions(heap_region_count);\n@@ -182,2 +180,2 @@\n-      _max_desired_young_size = calculate_max_size(heap_size);\n-      _max_desired_young_size = MAX2(_min_desired_young_size, _max_desired_young_size);\n+      _max_desired_young_regions = calculate_max_young_regions(heap_region_count);\n+      _max_desired_young_regions = MAX2(_min_desired_young_regions, _max_desired_young_regions);\n@@ -186,2 +184,2 @@\n-      _min_desired_young_size = calculate_min_size(heap_size);\n-      _min_desired_young_size = MIN2(_min_desired_young_size, _max_desired_young_size);\n+      _min_desired_young_regions = calculate_min_young_regions(heap_region_count);\n+      _min_desired_young_regions = MIN2(_min_desired_young_regions, _max_desired_young_regions);\n@@ -193,2 +191,2 @@\n-      _min_desired_young_size = MAX2((heap_size \/ (NewRatio + 1)), ShenandoahHeapRegion::region_size_bytes());\n-      _max_desired_young_size = _min_desired_young_size;\n+      _min_desired_young_regions = MAX2(uint(heap_region_count \/ (NewRatio + 1)), 1U);\n+      _max_desired_young_regions = _min_desired_young_regions;\n@@ -200,1 +198,1 @@\n-  assert(_min_desired_young_size <= _max_desired_young_size, \"Invalid min\/max young gen size values\");\n+  assert(_min_desired_young_regions <= _max_desired_young_regions, \"Invalid min\/max young gen size values\");\n@@ -204,1 +202,1 @@\n-  recalculate_min_max_young_length(heap_size);\n+  recalculate_min_max_young_length(heap_size \/ ShenandoahHeapRegion::region_size_bytes());\n@@ -264,1 +262,0 @@\n-  size_t bytes_to_transfer = regions_to_transfer * ShenandoahHeapRegion::region_size_bytes();\n@@ -266,1 +263,1 @@\n-    bytes_to_transfer = adjust_transfer_from_young(from, bytes_to_transfer);\n+    regions_to_transfer = adjust_transfer_from_young(from, regions_to_transfer);\n@@ -268,1 +265,1 @@\n-    bytes_to_transfer = adjust_transfer_to_young(to, bytes_to_transfer);\n+    regions_to_transfer = adjust_transfer_to_young(to, regions_to_transfer);\n@@ -271,2 +268,2 @@\n-  if (bytes_to_transfer == 0) {\n-    log_debug(gc)(\"No capacity available to transfer from: %s (\" SIZE_FORMAT \"%s) to: %s (\" SIZE_FORMAT \"%s)\",\n+  if (regions_to_transfer == 0) {\n+    log_info(gc)(\"No capacity available to transfer from: %s (\" SIZE_FORMAT \"%s) to: %s (\" SIZE_FORMAT \"%s)\",\n@@ -278,5 +275,3 @@\n-  assert(bytes_to_transfer <= regions_to_transfer * ShenandoahHeapRegion::region_size_bytes(), \"Cannot transfer more than available in free regions.\");\n-  log_info(gc)(\"Transfer \" SIZE_FORMAT \"%s from %s to %s\", byte_size_in_proper_unit(bytes_to_transfer),\n-               proper_unit_for_byte_size(bytes_to_transfer), from->name(), to->name());\n-  from->decrease_capacity(bytes_to_transfer);\n-  to->increase_capacity(bytes_to_transfer);\n+  log_info(gc)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s\", regions_to_transfer, from->name(), to->name());\n+  from->decrease_capacity(regions_to_transfer * ShenandoahHeapRegion::region_size_bytes());\n+  to->increase_capacity(regions_to_transfer * ShenandoahHeapRegion::region_size_bytes());\n@@ -286,1 +281,1 @@\n-size_t ShenandoahGenerationSizer::adjust_transfer_from_young(ShenandoahGeneration* from, size_t bytes_to_transfer) const {\n+size_t ShenandoahGenerationSizer::adjust_transfer_from_young(ShenandoahGeneration* from, size_t regions_to_transfer) const {\n@@ -288,2 +283,3 @@\n-  size_t new_young_size = from->max_capacity() - bytes_to_transfer;\n-  size_t minimum_size = min_young_size();\n+  size_t young_capacity_regions = from->max_capacity() \/ ShenandoahHeapRegion::region_size_bytes();\n+  size_t new_young_regions = young_capacity_regions - regions_to_transfer;\n+  size_t minimum_young_regions = min_young_regions();\n@@ -291,2 +287,2 @@\n-  if (new_young_size < minimum_size) {\n-    assert(minimum_size <= from->max_capacity(), \"Young is under minimum capacity.\");\n+  if (new_young_regions < minimum_young_regions) {\n+    assert(minimum_young_regions <= young_capacity_regions, \"Young is under minimum capacity.\");\n@@ -295,1 +291,1 @@\n-    bytes_to_transfer = align_down(from->max_capacity() - minimum_size, ShenandoahHeapRegion::region_size_bytes());\n+    regions_to_transfer = young_capacity_regions - minimum_young_regions;\n@@ -297,1 +293,1 @@\n-  return bytes_to_transfer;\n+  return regions_to_transfer;\n@@ -300,1 +296,1 @@\n-size_t ShenandoahGenerationSizer::adjust_transfer_to_young(ShenandoahGeneration* to, size_t bytes_to_transfer) const {\n+size_t ShenandoahGenerationSizer::adjust_transfer_to_young(ShenandoahGeneration* to, size_t regions_to_transfer) const {\n@@ -302,2 +298,3 @@\n-  size_t new_young_size = to->max_capacity() + bytes_to_transfer;\n-  size_t maximum_size = max_young_size();\n+  size_t young_capacity_regions = to->max_capacity() \/ ShenandoahHeapRegion::region_size_bytes();\n+  size_t new_young_regions = young_capacity_regions + regions_to_transfer;\n+  size_t maximum_young_regions = max_young_regions();\n@@ -305,2 +302,2 @@\n-  if (new_young_size > maximum_size) {\n-    assert(maximum_size >= to->max_capacity(), \"Young is over maximum capacity\");\n+  if (new_young_regions > maximum_young_regions) {\n+    assert(maximum_young_regions >= young_capacity_regions, \"Young is over maximum capacity\");\n@@ -309,1 +306,1 @@\n-    bytes_to_transfer = align_down(maximum_size - to->max_capacity(), ShenandoahHeapRegion::region_size_bytes());\n+    regions_to_transfer = maximum_young_regions - young_capacity_regions;\n@@ -311,1 +308,9 @@\n-  return bytes_to_transfer;\n+  return regions_to_transfer;\n+}\n+\n+size_t ShenandoahGenerationSizer::min_young_size() const {\n+  return min_young_regions() * ShenandoahHeapRegion::region_size_bytes();\n+}\n+\n+size_t ShenandoahGenerationSizer::max_young_size() const {\n+  return max_young_regions() * ShenandoahHeapRegion::region_size_bytes();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":55,"deletions":50,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -104,2 +104,2 @@\n-  size_t _min_desired_young_size;\n-  size_t _max_desired_young_size;\n+  size_t _min_desired_young_regions;\n+  size_t _max_desired_young_regions;\n@@ -110,2 +110,2 @@\n-  static size_t calculate_min_size(size_t heap_size);\n-  static size_t calculate_max_size(size_t heap_size);\n+  static size_t calculate_min_young_regions(size_t heap_region_count);\n+  static size_t calculate_max_young_regions(size_t heap_region_count);\n@@ -115,1 +115,1 @@\n-  void recalculate_min_max_young_length(size_t heap_size);\n+  void recalculate_min_max_young_length(size_t heap_region_count);\n@@ -119,2 +119,2 @@\n-  size_t adjust_transfer_from_young(ShenandoahGeneration* from, size_t bytes_to_transfer) const;\n-  size_t adjust_transfer_to_young(ShenandoahGeneration* to, size_t bytes_to_transfer) const;\n+  size_t adjust_transfer_from_young(ShenandoahGeneration* from, size_t regions_to_transfer) const;\n+  size_t adjust_transfer_to_young(ShenandoahGeneration* to, size_t regions_to_transfer) const;\n@@ -132,2 +132,4 @@\n-  size_t min_young_size() const {\n-    return _min_desired_young_size;\n+  \/\/ Minimum size of young generation in bytes as multiple of region size.\n+  size_t min_young_size() const;\n+  size_t min_young_regions() const {\n+    return _min_desired_young_regions;\n@@ -135,2 +137,5 @@\n-  size_t max_young_size() const {\n-    return _max_desired_young_size;\n+\n+  \/\/ Maximum size of young generation in bytes as multiple of region size.\n+  size_t max_young_size() const;\n+  size_t max_young_regions() const {\n+    return _max_desired_young_regions;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.hpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"}]}