{"files":[{"patch":"@@ -139,1 +139,1 @@\n-  size_t available = MIN2(_heap_stats->available(), ShenandoahHeap::heap()->free_set()->available());\n+  size_t available = _heap_stats->available();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,9 @@\n+\/*\n+ * This class serves as the base class for heuristics used to trigger and\n+ * choose the collection sets for young and global collections. It leans\n+ * heavily on the existing functionality of ShenandoahAdaptiveHeuristics.\n+ *\n+ * It differs from the base class primarily in that choosing the collection\n+ * set is responsible for mixed collections and in-place promotions of tenured\n+ * regions.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+\/*\n+ * This is a specialization of the generational heuristics which is aware\n+ * of old and young regions and respects the configured evacuation parameters\n+ * for such regions during a global collection of a generational heap.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"shenandoahAdaptiveHeuristics.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-  \/\/ Englightened interpretation: collect regions that have less than this amount of live.\n+  \/\/ Enlightened interpretation: collect regions that have less than this amount of live.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,13 @@\n+\/*\n+ * This heuristic is responsible for choosing a set of candidates for inclusion\n+ * in mixed collections. These candidates are chosen when marking of the old\n+ * generation is complete. Note that this list of candidates may live through\n+ * several mixed collections.\n+ *\n+ * This heuristic is also responsible for triggering old collections. It has its\n+ * own collection of triggers to decide whether to start an old collection. It does\n+ * _not_ use any of the functionality from the adaptive heuristics for triggers.\n+ * It also does not use any of the functionality from the heuristics base classes\n+ * to choose the collection set. For these reasons, it does not extend from\n+ * ShenandoahGenerationalHeuristics.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,2 +68,0 @@\n-\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,5 @@\n+\/*\n+ * This is a specialization of the generational heuristic which chooses\n+ * young regions for evacuation. This heuristic also has additional triggers\n+ * designed to expedite mixed collections and promotions.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -489,7 +489,0 @@\n-\/\/\n-\/\/ A side effect performed by this function is to tally up the number of regions and the number of live bytes\n-\/\/ that we plan to promote-in-place during the current GC cycle.  This information, which is stored with\n-\/\/ an invocation of heap->set_promotion_in_place_potential(), feeds into subsequent decisions about when to\n-\/\/ trigger the next GC and may identify special work to be done during this GC cycle if we choose to abbreviate it.\n-\/\/\n-\/\/ Returns bytes of old-gen memory consumed by selected aged regions\n@@ -953,2 +946,0 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  abbreviated = abbreviated && heap->mode()->is_generational();\n@@ -956,1 +947,1 @@\n-  heap->shenandoah_policy()->record_success_concurrent();\n+  ShenandoahHeap::heap()->shenandoah_policy()->record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  \/\/ at or above tenure age which contain more than ShenandoahOldGarbageThreshold\n+  \/\/ at or above tenure age and which contain more than ShenandoahOldGarbageThreshold\n@@ -89,0 +89,8 @@\n+  \/\/\n+  \/\/ A side effect performed by this function is to tally up the number of regions and\n+  \/\/ the number of live bytes that we plan to promote-in-place during the current GC cycle.\n+  \/\/ This information, which is stored with an invocation of heap->set_promotion_in_place_potential(),\n+  \/\/ feeds into subsequent decisions about when to trigger the next GC and may identify\n+  \/\/ special work to be done during this GC cycle if we choose to abbreviate it.\n+  \/\/\n+  \/\/ Returns bytes of old-gen memory consumed by selected aged regions\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}