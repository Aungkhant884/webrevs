{"files":[{"patch":"@@ -56,1 +56,0 @@\n-  _promotion_failed(false),\n@@ -470,4 +469,0 @@\n-void ShenandoahOldHeuristics::handle_promotion_failure() {\n-  _promotion_failed = true;\n-}\n-\n@@ -485,1 +480,0 @@\n-  _promotion_failed = false;\n@@ -544,1 +538,1 @@\n-  return ShenandoahHeuristics::should_start_gc();\n+  return this->ShenandoahHeuristics::should_start_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -78,5 +78,0 @@\n-  \/\/ Flag is set when promotion failure is detected (by gc thread), and cleared when\n-  \/\/ old generation collection begins (by control thread).\n-  \/\/ TODO: This is set, but never read.\n-  volatile bool _promotion_failed;\n-\n@@ -145,5 +140,0 @@\n-  \/\/ Promotion failure does not currently trigger old-gen collections.  Often, promotion failures occur because\n-  \/\/ old-gen is sized too small rather than because it is necessary to collect old gen.  We keep the method\n-  \/\/ here in case we decide to feed this signal to sizing or triggering heuristics in the future.\n-  void handle_promotion_failure();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeapCharacteristics.hpp\"\n@@ -56,1 +57,1 @@\n-  size_t max_capacity = ShenandoahHeap::heap()->max_capacity();\n+  size_t max_capacity = _heap_info->max_capacity();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeapCharacteristics.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -34,1 +34,1 @@\n-ShenandoahHeuristics* ShenandoahMode::initialize_heuristics(ShenandoahGeneration* generation) const {\n+ShenandoahHeuristics* ShenandoahMode::initialize_heuristics(ShenandoahHeapCharacteristics* heap_info) const {\n@@ -40,1 +40,1 @@\n-    return new ShenandoahAggressiveHeuristics(generation);\n+    return new ShenandoahAggressiveHeuristics(heap_info);\n@@ -42,1 +42,1 @@\n-    return new ShenandoahStaticHeuristics(generation);\n+    return new ShenandoahStaticHeuristics(heap_info);\n@@ -44,1 +44,1 @@\n-    return new ShenandoahAdaptiveHeuristics(generation);\n+    return new ShenandoahAdaptiveHeuristics(heap_info);\n@@ -46,1 +46,1 @@\n-    return new ShenandoahCompactHeuristics(generation);\n+    return new ShenandoahCompactHeuristics(heap_info);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-class ShenandoahGeneration;\n+class ShenandoahHeapCharacteristics;\n@@ -35,1 +35,0 @@\n-class ShenandoahOldHeuristics;\n@@ -56,1 +55,1 @@\n-  virtual ShenandoahHeuristics* initialize_heuristics(ShenandoahGeneration* generation) const;\n+  virtual ShenandoahHeuristics* initialize_heuristics(ShenandoahHeapCharacteristics* heap_info) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeapCharacteristics.hpp\"\n@@ -29,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -59,1 +59,1 @@\n-ShenandoahHeuristics* ShenandoahPassiveMode::initialize_heuristics(ShenandoahGeneration* generation) const {\n+ShenandoahHeuristics* ShenandoahPassiveMode::initialize_heuristics(ShenandoahHeapCharacteristics* heap_info) const {\n@@ -63,1 +63,1 @@\n-  return new ShenandoahPassiveHeuristics(generation);\n+  return new ShenandoahPassiveHeuristics(heap_info);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  virtual ShenandoahHeuristics* initialize_heuristics(ShenandoahGeneration* generation) const;\n+  virtual ShenandoahHeuristics* initialize_heuristics(ShenandoahHeapCharacteristics* heap_info) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -917,4 +917,0 @@\n-void ShenandoahHeap::handle_promotion_failure() {\n-  old_heuristics()->handle_promotion_failure();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -819,1 +819,0 @@\n-  void handle_promotion_failure();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -442,1 +442,0 @@\n-        handle_promotion_failure();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}