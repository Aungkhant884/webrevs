{"files":[{"patch":"@@ -137,1 +137,2 @@\n-  \/\/ the space. This would be the last action if there is nothing to evacuate.\n+  \/\/ the space. This would be the last action if there is nothing to evacuate.  Note that\n+  \/\/ we will not age young-gen objects in the case that we skip evacuation.\n@@ -1037,0 +1038,4 @@\n+  \/\/ Aging_cycle is only relevant during evacuation cycle for individual objects and during final mark for\n+  \/\/ entire regions.  Both of these relevant operations occur before final update refs.\n+  heap->set_aging_cycle(false);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+  uint age_period = 0;\n@@ -250,0 +251,1 @@\n+      heap->set_aging_cycle(false);\n@@ -253,0 +255,4 @@\n+            if ((generation == YOUNG) && (age_period-- == 0)) {\n+              heap->set_aging_cycle(true);\n+              age_period = ShenandoahAgingCyclePeriod - 1;\n+            }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,0 +71,4 @@\n+  \/\/ In case degenerated GC preempted evacuation or update-refs, clear the aging cycle now.  No harm in clearing it\n+  \/\/ redundantly if it is already clear.  We don't age during degenerated cycles.\n+  heap->set_aging_cycle(false);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1914,0 +1914,4 @@\n+void ShenandoahHeap::set_aging_cycle(bool in_progress) {\n+  _is_aging_cycle.set_cond(in_progress);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -354,0 +354,1 @@\n+  void set_aging_cycle(bool cond);\n@@ -370,0 +371,1 @@\n+  inline bool is_aging_cycle() const;\n@@ -496,0 +498,1 @@\n+  ShenandoahSharedFlag  _is_aging_cycle;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -415,1 +415,3 @@\n-      ShenandoahHeap::increase_object_age(copy_val, from_region->age() + 1);\n+      if (is_aging_cycle()) {\n+        ShenandoahHeap::increase_object_age(copy_val, from_region->age() + 1);\n+      }\n@@ -544,0 +546,4 @@\n+inline bool ShenandoahHeap::is_aging_cycle() const {\n+  return _is_aging_cycle.is_set();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-      } else {\n+      } else if (ShenandoahHeap::heap()->is_aging_cycle()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -430,1 +430,6 @@\n-          \" marking in the old generation.\")\n+          \" marking in the old generation.\")                                \\\n+                                                                            \\\n+  product(uintx, ShenandoahAgingCyclePeriod, 1, EXPERIMENTAL,               \\\n+          \"With generational mode, increment the age of objects and\"        \\\n+          \"regions each time this many young-gen GC cycles are completed.\")\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}