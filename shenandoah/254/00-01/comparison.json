{"files":[{"patch":"@@ -65,0 +65,1 @@\n+  _requested_generation(select_global_generation()),\n@@ -76,5 +77,0 @@\n-  if (ShenandoahHeap::heap()->mode()->is_generational()) {\n-    _requested_generation = ShenandoahGenerationType::GLOBAL_GEN;\n-  } else {\n-    _requested_generation = ShenandoahGenerationType::GLOBAL_NON_GEN;\n-  }\n@@ -101,2 +97,1 @@\n-  ShenandoahGenerationType const global = heap->mode()->is_generational() ? GLOBAL_GEN : GLOBAL_NON_GEN;\n-  ShenandoahGenerationType generation = global;\n+  ShenandoahGenerationType generation = select_global_generation();\n@@ -169,1 +164,1 @@\n-        generation = global;\n+        generation = select_global_generation();\n@@ -174,1 +169,1 @@\n-      generation = global;\n+      generation = select_global_generation();\n@@ -190,1 +185,1 @@\n-      generation = global;\n+      generation = select_global_generation();\n@@ -228,1 +223,1 @@\n-        if (generation == global) {\n+        if (generation == select_global_generation()) {\n@@ -254,1 +249,1 @@\n-    if (generation == global && (alloc_failure_pending || implicit_gc_requested || explicit_gc_requested || ShenandoahAlwaysClearSoftRefs)) {\n+    if (generation == select_global_generation() && (alloc_failure_pending || implicit_gc_requested || explicit_gc_requested || ShenandoahAlwaysClearSoftRefs)) {\n@@ -300,1 +295,1 @@\n-            generation = global;\n+            generation = select_global_generation();\n@@ -357,1 +352,1 @@\n-        assert(generation == global, \"Only unload classes during GLOBAL cycle\");\n+        assert(generation == select_global_generation(), \"Only unload classes during GLOBAL cycle\");\n@@ -1036,0 +1031,8 @@\n+\n+ShenandoahGenerationType ShenandoahControlThread::select_global_generation() {\n+  if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+    return GLOBAL_GEN;\n+  } else {\n+    return GLOBAL_NON_GEN;\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -187,0 +187,2 @@\n+  static ShenandoahGenerationType select_global_generation();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -281,0 +281,3 @@\n+  \/\/ Note: This is a very hot code path, so the code should be conditional on GENERATION template\n+  \/\/ parameter where possible, in order to generate the most efficient code.\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        if (_control_thread->request_concurrent_gc(GLOBAL_GEN)) {\n+        if (_control_thread->request_concurrent_gc(ShenandoahControlThread::select_global_generation())) {\n@@ -151,1 +151,1 @@\n-  return _global_heuristics->should_start_gc() && _control_thread->request_concurrent_gc(GLOBAL_GEN);\n+  return _global_heuristics->should_start_gc() && _control_thread->request_concurrent_gc(ShenandoahControlThread::select_global_generation());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}