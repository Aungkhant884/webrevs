{"files":[{"patch":"@@ -139,4 +139,0 @@\n-  if (ShenandoahIUBarrier) {\n-    assert(!ShenandoahHeap::heap()->mode()->is_generational(), \"Generational mode does not support IU barrier\");\n-  }\n-\n@@ -159,0 +155,4 @@\n+  if (ShenandoahIUBarrier) {\n+    assert(strcmp(ShenandoahGCMode, \"generational\"), \"Generational mode does not support IU barrier\");\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2457,0 +2457,1 @@\n+  uint mask;\n@@ -2462,1 +2463,1 @@\n-    set_gc_state_mask(YOUNG_MARKING, in_progress);\n+    mask = YOUNG_MARKING;\n@@ -2464,1 +2465,5 @@\n-    set_gc_state_mask(MARKING | YOUNG_MARKING, in_progress);\n+#ifdef ASSERT\n+    unsigned char gc_state = (unsigned) this->gc_state();\n+    assert(_gc_state.is_unset(MARKING | OLD_MARKING | YOUNG_MARKING), \"Expect all marking flags to be unset: %x\", gc_state);\n+#endif\n+    mask = MARKING | YOUNG_MARKING;\n@@ -2466,0 +2471,1 @@\n+  set_gc_state_mask(mask, in_progress);\n@@ -2470,0 +2476,1 @@\n+#ifdef ASSERT\n@@ -2471,3 +2478,4 @@\n-  assert((has_forwarded_objects() && (_gc_state.is_set(UPDATEREFS) || _gc_state.is_set(EVACUATION))) ||\n-         (!has_forwarded_objects() && (_gc_state.is_unset(UPDATEREFS) && _gc_state.is_unset(EVACUATION))),\n-         \"has_forwarded_objects() implies UPDATE_REFS or EVACUATION\");\n+  bool has_forwarded = has_forwarded_objects()? 1: 0;\n+  bool updating_or_evacuating = _gc_state.is_set(UPDATEREFS | EVACUATION)? 1: 0;\n+  assert (has_forwarded == updating_or_evacuating, \"Has forwarded objects iff updating or evacuating\");\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -420,1 +420,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+  \/\/ Returns true iff any bit set in mask is set in this.value.\n@@ -164,0 +165,8 @@\n+  \/\/ Returns true iff all bits set in mask are set in this.value.\n+  bool is_set_exactly(uint mask) const {\n+    assert (mask < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n+    uint uvalue = Atomic::load_acquire(&value);\n+    return (uvalue & mask) == mask;\n+  }\n+\n+  \/\/ Returns true iff all bits set in mask are unset in this.value.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSharedVariables.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -835,7 +835,4 @@\n-\n-      \/\/ if MARKING set, then either YOUNG_MARKING or OLD_MARKING is also set\n-      \/\/ if MARKING unset, both YOUNG_MARKING and OLD_MARKING are unset\n-      assert((((actual & ShenandoahHeap::MARKING) == 0) &&\n-              ((actual & (ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING)) == 0)) ||\n-             ((actual & ShenandoahHeap::MARKING) && (actual & (ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING))),\n-             \"Inconsistent gc marking state: %x\", actual);\n+      \n+      bool is_marking = (actual & ShenandoahHeap::MARKING)? 1: 0;\n+      bool is_marking_young_or_old = (actual & (ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING))? 1: 0;\n+      assert(is_marking == is_marking_young_or_old, \"MARKING iff (YOUNG_MARKING or OLD_MARKING), gc_state is: %x\", actual);\n@@ -851,2 +848,0 @@\n-\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}