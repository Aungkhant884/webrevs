{"files":[{"patch":"@@ -65,1 +65,1 @@\n-        __ mov(rscratch2, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n+        __ mov(rscratch2, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::MARKING);\n@@ -761,7 +761,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    __ tbz(tmp, ShenandoahHeap::YOUNG_MARKING_BITPOS, done);\n-  } else {\n-    __ mov(rscratch2, ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n-    __ tst(tmp, rscratch2);\n-    __ br(Assembler::EQ, done);\n-  }\n+  __ tbz(tmp, ShenandoahHeap::MARKING_BITPOS, done);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-                              : ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING;\n+                              : ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::MARKING;\n@@ -233,1 +233,1 @@\n-  __ andi_(tmp1, tmp1, ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n+  __ andi_(tmp1, tmp1, ShenandoahHeap::MARKING);\n@@ -967,1 +967,1 @@\n-  __ andi_(R12_tmp2, R12_tmp2, ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n+  __ andi_(R12_tmp2, R12_tmp2, ShenandoahHeap::MARKING);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-        flags = ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING;\n+        flags = ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::MARKING;\n@@ -281,1 +281,1 @@\n-  __ testb(gc_state, ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n+  __ testb(gc_state, ShenandoahHeap::MARKING);\n@@ -1105,1 +1105,1 @@\n-  __ testb(gc_state, ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n+  __ testb(gc_state, ShenandoahHeap::MARKING);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -245,1 +245,1 @@\n-  marking = __ AndI(ld, __ ConI(ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING));\n+  marking = __ AndI(ld, __ ConI(ShenandoahHeap::MARKING));\n@@ -326,1 +326,1 @@\n-      cmpx->in(1)->in(2) == phase->intcon(ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING)) {\n+      cmpx->in(1)->in(2) == phase->intcon(ShenandoahHeap::MARKING)) {\n@@ -944,1 +944,1 @@\n-      flags |= ShenandoahHeap::YOUNG_MARKING;\n+      flags |= ShenandoahHeap::MARKING;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1487,1 +1487,1 @@\n-    test_gc_state(ctrl, raw_mem, heap_stable_ctrl, phase, (ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING));\n+    test_gc_state(ctrl, raw_mem, heap_stable_ctrl, phase, ShenandoahHeap::MARKING);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,0 +155,4 @@\n+  if (ShenandoahIUBarrier) {\n+    assert(strcmp(ShenandoahGCMode, \"generational\"), \"Generational mode does not support IU barrier\");\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2457,2 +2457,7 @@\n-  if (has_forwarded_objects()) {\n-    set_gc_state_mask(YOUNG_MARKING | UPDATEREFS, in_progress);\n+  uint mask;\n+  assert(!has_forwarded_objects(), \"Young marking is not concurrent with evacuation\");\n+  if (!in_progress && is_concurrent_old_mark_in_progress()) {\n+    assert(mode()->is_generational(), \"Only generational GC has old marking\");\n+    assert(_gc_state.is_set(MARKING), \"concurrent_old_marking_in_progress implies MARKING\");\n+    \/\/ If old-marking is in progress when we turn off YOUNG_MARKING, leave MARKING (and OLD_MARKING) on\n+    mask = YOUNG_MARKING;\n@@ -2460,1 +2465,5 @@\n-    set_gc_state_mask(YOUNG_MARKING, in_progress);\n+#ifdef ASSERT\n+    unsigned char gc_state = (unsigned) this->gc_state();\n+    assert(_gc_state.is_unset(MARKING | OLD_MARKING | YOUNG_MARKING), \"Expect all marking flags to be unset: %x\", gc_state);\n+#endif\n+    mask = MARKING | YOUNG_MARKING;\n@@ -2462,1 +2471,1 @@\n-\n+  set_gc_state_mask(mask, in_progress);\n@@ -2467,3 +2476,9 @@\n-  if (has_forwarded_objects()) {\n-    set_gc_state_mask(OLD_MARKING | UPDATEREFS, in_progress);\n-  } else {\n+#ifdef ASSERT\n+  \/\/ has_forwarded_objects() iff UPDATEREFS or EVACUATION\n+  bool has_forwarded = has_forwarded_objects()? 1: 0;\n+  bool updating_or_evacuating = _gc_state.is_set(UPDATEREFS | EVACUATION)? 1: 0;\n+  assert (has_forwarded == updating_or_evacuating, \"Has forwarded objects iff updating or evacuating\");\n+#endif\n+  if (!in_progress && is_concurrent_young_mark_in_progress()) {\n+    \/\/ If young-marking is in progress when we turn off OLD_MARKING, leave MARKING (and YOUNG_MARKING) on\n+    assert(_gc_state.is_set(MARKING), \"concurrent_young_marking_in_progress implies MARKING\");\n@@ -2471,0 +2486,2 @@\n+  } else {\n+    set_gc_state_mask(MARKING | OLD_MARKING, in_progress);\n@@ -2472,1 +2489,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -317,2 +317,3 @@\n-    \/\/ Young regions are under marking: needs SATB barriers.\n-    YOUNG_MARKING_BITPOS    = 1,\n+    \/\/ Heap is under marking: needs SATB barriers.\n+    \/\/ For generational mode, it means either young or old marking, or both.\n+    MARKING_BITPOS    = 1,\n@@ -329,2 +330,5 @@\n-    \/\/ Old regions are under marking, still need SATB barriers.\n-    OLD_MARKING_BITPOS = 5\n+    \/\/ Young regions are under marking, need SATB barriers.\n+    YOUNG_MARKING_BITPOS = 5,\n+\n+    \/\/ Old regions are under marking, need SATB barriers.\n+    OLD_MARKING_BITPOS = 6\n@@ -336,1 +340,1 @@\n-    YOUNG_MARKING = 1 << YOUNG_MARKING_BITPOS,\n+    MARKING       = 1 << MARKING_BITPOS,\n@@ -340,0 +344,1 @@\n+    YOUNG_MARKING = 1 << YOUNG_MARKING_BITPOS,\n@@ -415,1 +420,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -661,1 +661,1 @@\n-  return _gc_state.is_unset(YOUNG_MARKING | OLD_MARKING | EVACUATION | UPDATEREFS);\n+  return _gc_state.is_unset(MARKING | EVACUATION | UPDATEREFS);\n@@ -665,1 +665,1 @@\n-  return _gc_state.is_set(YOUNG_MARKING | OLD_MARKING);\n+  return _gc_state.is_set(MARKING);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,2 @@\n-      if ((ov & mask_val) != 0) {\n+      \/\/ We require all bits of mask_val to be set\n+      if ((ov & mask_val) == mask_val) {\n@@ -131,1 +132,1 @@\n-        \/\/ successfully set\n+        \/\/ successfully set: if value returned from cmpxchg equals ov, then nv has overwritten value.\n@@ -159,0 +160,1 @@\n+  \/\/ Returns true iff any bit set in mask is set in this.value.\n@@ -163,0 +165,8 @@\n+  \/\/ Returns true iff all bits set in mask are set in this.value.\n+  bool is_set_exactly(uint mask) const {\n+    assert (mask < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n+    uint uvalue = Atomic::load_acquire(&value);\n+    return (uvalue & mask) == mask;\n+  }\n+\n+  \/\/ Returns true iff all bits set in mask are unset in this.value.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSharedVariables.hpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -768,3 +768,6 @@\n-    \/\/ TODO: This actually accepts more than just OLD_MARKING.\n-    \/\/ TODO: Also, only accept OLD_MARKING in generational mode.\n-    return (actual == expected) || (actual & ShenandoahHeap::OLD_MARKING);\n+    if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+      return ((actual & ~(ShenandoahHeap::OLD_MARKING | ShenandoahHeap::MARKING)) == expected);\n+    } else {\n+      assert((actual & ShenandoahHeap::OLD_MARKING) == 0, \"Should not mark old in non-generational mode\");\n+      return (actual == expected);\n+    }\n@@ -832,0 +835,5 @@\n+      \n+      bool is_marking = (actual & ShenandoahHeap::MARKING)? 1: 0;\n+      bool is_marking_young_or_old = (actual & (ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING))? 1: 0;\n+      assert(is_marking == is_marking_young_or_old, \"MARKING iff (YOUNG_MARKING or OLD_MARKING), gc_state is: %x\", actual);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}