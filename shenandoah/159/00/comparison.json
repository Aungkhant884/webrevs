{"files":[{"patch":"@@ -124,4 +124,3 @@\n-    if (_generation->generation_mode() == YOUNG) {\n-      ShenandoahConcurrentPhase gc_phase(\"Concurrent remembered set scanning\", ShenandoahPhaseTimings::init_scan_rset);\n-      _generation->scan_remembered_set(true \/* is_concurrent *\/);\n-    }\n+    entry_scan_remembered_set();\n+    \/\/ When RS scanning yields, we will need a check_cancellation_and_abort()\n+    \/\/ degeneration point here.\n@@ -376,0 +375,17 @@\n+void ShenandoahConcurrentGC::entry_scan_remembered_set() {\n+  if (_generation->generation_mode() == YOUNG) {\n+    ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+    TraceCollectorStats tcs(heap->monitoring_support()->concurrent_collection_counters());\n+    const char* msg = \"Concurrent remembered set scanning\";\n+    ShenandoahConcurrentPhase gc_phase(msg, ShenandoahPhaseTimings::init_scan_rset);\n+    EventMark em(\"%s\", msg);\n+\n+    ShenandoahWorkerScope scope(heap->workers(),\n+                                ShenandoahWorkerPolicy::calc_workers_for_rs_scanning(),\n+                                msg);\n+\n+    heap->try_inject_alloc_failure();\n+    _generation->scan_remembered_set(true \/* is_concurrent *\/);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+  void entry_scan_remembered_set();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -803,0 +803,1 @@\n+  heap->assert_gc_workers(nworkers);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+uint ShenandoahWorkerPolicy::_prev_conc_rs_scanning = 0;\n@@ -64,0 +65,9 @@\n+uint ShenandoahWorkerPolicy::calc_workers_for_rs_scanning() {\n+  uint active_workers = (_prev_conc_rs_scanning == 0) ? ConcGCThreads : _prev_conc_rs_scanning;\n+  _prev_conc_rs_scanning =\n+    WorkerPolicy::calc_active_conc_workers(ConcGCThreads,\n+                                           active_workers,\n+                                           Threads::number_of_non_daemon_threads());\n+  return _prev_conc_rs_scanning;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkerPolicy.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+  static uint _prev_conc_rs_scanning;\n@@ -51,0 +52,3 @@\n+  \/\/ Calculate the number of workers for remembered set scanning\n+  static uint calc_workers_for_rs_scanning();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkerPolicy.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}