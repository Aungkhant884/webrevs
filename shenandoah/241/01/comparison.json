{"files":[{"patch":"@@ -67,16 +67,7 @@\n-    \/\/ We expect this to really be needed only during global collections. Young collections\n-    \/\/ discover j.l.r.Refs in the old generation during scanning of dirty cards\n-    \/\/ and these point to (as yet unmarked) referents in the young generation (see\n-    \/\/ ShenandoahReferenceProcessor::should_discover). Those cards will continue to\n-    \/\/ remain dirty on account of this cross-generational pointer to the referent.\n-    \/\/ Similarly, old collections will never discover j.l.r.Refs in the young generation.\n-    \/\/ It is only global collections that discover in both generations. Here we can\n-    \/\/ end up with a j.l.R in the old generation on the discovered list that\n-    \/\/ is not already on a dirty card, but which may here end up with a successor in\n-    \/\/ the discovered list that is in the young generation. This is the singular case\n-    \/\/ where the card needs to be dirtied here. We, however, skip the extra global'ness check\n-    \/\/ and always mark the card (redundantly during young collections).\n-    \/\/ The asserts below check the expected invariants based on the description above.\n-    assert(!heap->active_generation()->is_old(), \"Expecting only young or global\");\n-    assert(heap->card_scan()->is_card_dirty(reinterpret_cast<HeapWord*>(field))\n-           || heap->active_generation()->is_global(), \"Expecting already dirty if young\");\n+    \/\/ For Shenandoah, each generation collects all the _referents_ that belong to the\n+    \/\/ collected generation. We can end up with discovered lists that contain a mixture\n+    \/\/ of old and young _references_. These references are linked together through the\n+    \/\/ discovered field in java.lang.Reference. In some cases, creating or editing this\n+    \/\/ list may result in the creation of _new_ old-to-young pointers which must dirty\n+    \/\/ the corresponding card. Failing to do this may cause heap verification errors and\n+    \/\/ lead to incorrect GC behavior.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"}]}