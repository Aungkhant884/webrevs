{"files":[{"patch":"@@ -93,1 +93,3 @@\n-      post_barrier(access, access.resolved_addr(), new_value.result());\n+      if (ShenandoahCardBarrier) {\n+        post_barrier(access, access.resolved_addr(), new_value.result());\n+      }\n@@ -100,1 +102,1 @@\n-  if (access.is_oop()) {\n+  if (ShenandoahCardBarrier && access.is_oop()) {\n@@ -132,1 +134,3 @@\n-    post_barrier(access, access.resolved_addr(), result);\n+    if (ShenandoahCardBarrier) {\n+      post_barrier(access, access.resolved_addr(), result);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  if (is_oop) {\n+  if (ShenandoahCardBarrier && is_oop) {\n@@ -388,3 +388,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n@@ -445,1 +443,3 @@\n-    store_check(masm, r3);\n+    if (ShenandoahCardBarrier) {\n+      store_check(masm, r3);\n+    }\n@@ -632,3 +632,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -107,1 +107,3 @@\n-      post_barrier(access, access.resolved_addr(), new_value.result());\n+      if (ShenandoahCardBarrier) {\n+        post_barrier(access, access.resolved_addr(), new_value.result());\n+      }\n@@ -121,1 +123,1 @@\n-  if (access.is_oop()) {\n+  if (ShenandoahCardBarrier && access.is_oop()) {\n@@ -162,1 +164,3 @@\n-    post_barrier(access, access.resolved_addr(), result);\n+    if (ShenandoahCardBarrier) {\n+      post_barrier(access, access.resolved_addr(), result);\n+    }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_ppc.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  if (is_reference_type(type)) {\n+  if (ShenandoahCardBarrier && is_reference_type(type)) {\n@@ -600,3 +600,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n@@ -644,1 +642,1 @@\n-  if (is_reference_type(type) && val != noreg) {\n+  if (ShenandoahCardBarrier && is_reference_type(type) && val != noreg) {\n@@ -798,3 +796,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -92,1 +92,3 @@\n-      post_barrier(access, access.resolved_addr(), new_value.result());\n+      if (ShenandoahCardBarrier) {\n+        post_barrier(access, access.resolved_addr(), new_value.result());\n+      }\n@@ -99,1 +101,1 @@\n-  if (access.is_oop()) {\n+  if (ShenandoahCardBarrier && access.is_oop()) {\n@@ -133,1 +135,3 @@\n-    post_barrier(access, access.resolved_addr(), result);\n+    if (ShenandoahCardBarrier) {\n+      post_barrier(access, access.resolved_addr(), result);\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-    if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+    if (ShenandoahCardBarrier) {\n@@ -211,4 +211,0 @@\n-  bool checkcast = (decorators & ARRAYCOPY_CHECKCAST) != 0;\n-  bool disjoint = (decorators & ARRAYCOPY_DISJOINT) != 0;\n-  bool obj_int = type == T_OBJECT LP64_ONLY(&& UseCompressedOops);\n-  Register tmp = rax;\n@@ -216,1 +212,6 @@\n-  if (is_reference_type(type)) {\n+  if (ShenandoahCardBarrier && is_reference_type(type)) {\n+    bool checkcast = (decorators & ARRAYCOPY_CHECKCAST) != 0;\n+    bool disjoint = (decorators & ARRAYCOPY_DISJOINT) != 0;\n+    bool obj_int = type == T_OBJECT LP64_ONLY(&& UseCompressedOops);\n+    Register tmp = rax;\n+\n@@ -648,3 +649,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n@@ -733,1 +732,0 @@\n-      \/\/ TODO: store_check missing in upstream\n@@ -735,1 +733,3 @@\n-      store_check(masm, tmp1);\n+      if (ShenandoahCardBarrier) {\n+        store_check(masm, tmp1);\n+      }\n@@ -944,3 +944,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-  if (access.is_oop()) {\n+  if (ShenandoahCardBarrier && access.is_oop()) {\n@@ -308,3 +308,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -475,3 +475,1 @@\n-  if (!ShenandoahHeap::heap()->mode()->is_generational()) {\n-    return;\n-  }\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n@@ -607,5 +605,7 @@\n-    bool anonymous = (decorators & ON_UNKNOWN_OOP_REF) != 0;\n-    bool is_array = (decorators & IS_ARRAY) != 0;\n-    bool use_precise = is_array || anonymous;\n-    post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n-                 adr, adr_idx, val.node(), access.type(), use_precise);\n+    if (ShenandoahCardBarrier) {\n+      const bool anonymous = (decorators & ON_UNKNOWN_OOP_REF) != 0;\n+      const bool is_array = (decorators & IS_ARRAY) != 0;\n+      const bool use_precise = is_array || anonymous;\n+      post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n+                   adr, adr_idx, val.node(), access.type(), use_precise);\n+    }\n@@ -737,2 +737,4 @@\n-    post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n-                 access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+    if (ShenandoahCardBarrier) {\n+      post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n+                   access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+    }\n@@ -794,2 +796,4 @@\n-    post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n-                 access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+    if (ShenandoahCardBarrier) {\n+      post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n+                   access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+    }\n@@ -812,2 +816,4 @@\n-    post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n-                 access.addr().node(), access.alias_idx(), val, T_OBJECT, true);\n+    if (ShenandoahCardBarrier) {\n+      post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n+                   access.addr().node(), access.alias_idx(), val, T_OBJECT, true);\n+    }\n@@ -1016,1 +1022,1 @@\n-  if (node->Opcode() == Op_CastP2X && ShenandoahHeap::heap()->mode()->is_generational()) {\n+  if (ShenandoahCardBarrier && node->Opcode() == Op_CastP2X) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -39,0 +39,8 @@\n+  \/\/ Exit if the user has asked ShenandoahCardBarrier to be disabled\n+  if (!FLAG_IS_DEFAULT(ShenandoahCardBarrier)) {\n+    SHENANDOAH_CHECK_FLAG_SET(ShenandoahCardBarrier);\n+  }\n+\n+  \/\/ Enable card-marking post-write barrier for tracking old to young pointers\n+  FLAG_SET_DEFAULT(ShenandoahCardBarrier, true);\n+\n@@ -58,0 +66,1 @@\n+  SHENANDOAH_CHECK_FLAG_SET(ShenandoahCardBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahCardBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahCardBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+  assert(strcmp(ShenandoahGCMode, \"generational\") != 0, \"Error\");\n+  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahCardBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+  FLAG_SET_DEFAULT(ShenandoahCardBarrier,            false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -521,0 +521,3 @@\n+  product(bool, ShenandoahCardBarrier, false, DIAGNOSTIC,                   \\\n+          \"Turn on\/off card-marking post-write barrier in Shenandoah\")      \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}