{"files":[{"patch":"@@ -1105,0 +1105,4 @@\n+  if (mode()->is_generational() && req.affiliation() == YOUNG_GENERATION && young_generation()->used() + req.size() >= young_generation()->max_capacity()) {\n+    return nullptr;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -44,2 +45,11 @@\n-  log_info(gc, init)(\"Heuristics: %s\",\n-                     heap->global_generation()->heuristics()->name());\n+  if (!heap->mode()->is_generational()) {\n+    log_info(gc, init)(\"Heuristics: %s\", heap->global_generation()->heuristics()->name());\n+  } else {\n+    log_info(gc, init)(\"Young Heuristics: %s\", heap->young_generation()->heuristics()->name());\n+    log_info(gc, init)(\"Old Heuristics: %s\", heap->old_generation()->heuristics()->name());\n+    log_info(gc, init)(\"Young Generation Max: \" SIZE_FORMAT \"%s\",\n+                       byte_size_in_proper_unit(heap->young_generation()->max_capacity()),\n+                       proper_unit_for_byte_size(heap->young_generation()->max_capacity()));\n+  }\n+\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"}]}