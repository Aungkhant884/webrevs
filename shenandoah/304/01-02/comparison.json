{"files":[{"patch":"@@ -454,4 +454,0 @@\n-uint ShenandoahOldHeuristics::last_old_region_index() const {\n-  return _last_old_region;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,5 +139,1 @@\n-  \/\/ How many old-collection regions were identified at the end of the most recent old-gen mark to require their\n-  \/\/ unmarked objects to be coalesced and filled?\n-  uint last_old_region_index() const;\n-\n-  \/\/ Fill in buffer with all of the old-collection regions that were identified at the end of the most recent old-gen\n+  \/\/ Fill in buffer with all the old-collection regions that were identified at the end of the most recent old-gen\n@@ -148,2 +144,6 @@\n-  bool has_coalesce_and_fill_candidates() const { return _last_old_region > 0; }\n-  size_t coalesce_and_fill_candidates() const { return _last_old_region; }\n+\n+  \/\/ True if there are old regions that need to be filled.\n+  bool has_coalesce_and_fill_candidates() const { return coalesce_and_fill_candidates_count() > 0; }\n+\n+  \/\/ Return the number of old regions that need to be filled.\n+  size_t coalesce_and_fill_candidates_count() const { return _last_old_region - _next_old_collection_candidate; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+    ShenandoahOldGeneration* old_generation = heap->old_generation();\n@@ -101,1 +102,11 @@\n-      assert(heap->old_generation()->task_queues()->is_empty(), \"Old gen task queues should be empty\");\n+      assert(old_generation->task_queues()->is_empty(), \"Old gen task queues should be empty\");\n+    }\n+\n+    if (_generation->is_global()) {\n+      \/\/ If we are in a global cycle, the old generation should not be marking. It is, however,\n+      \/\/ allowed to be holding regions for evacuation or coalescing.\n+      ShenandoahOldGeneration::State state = old_generation->state();\n+      assert(state == ShenandoahOldGeneration::IDLE\n+             || state == ShenandoahOldGeneration::WAITING_FOR_EVAC\n+             || state == ShenandoahOldGeneration::WAITING_FOR_FILL,\n+             \"Old generation cannot be in state: %s\", old_generation->state_name());\n@@ -290,1 +301,1 @@\n-            ((ShenandoahOldHeuristics *) heap->old_generation()->heuristics())->trigger_cannot_expand();\n+            heap->old_heuristics()->trigger_cannot_expand();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -686,2 +686,2 @@\n-                heap->old_heuristics()->unprocessed_old_collection_candidates(),\n-                heap->old_heuristics()->coalesce_and_fill_candidates());\n+                     heap->old_heuristics()->unprocessed_old_collection_candidates(),\n+                     heap->old_heuristics()->coalesce_and_fill_candidates_count());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -385,1 +385,2 @@\n-\/\/ cycle ends.\n+\/\/ cycle ends. Also note that a global collection will cause any evacuation or fill\n+\/\/ candidates to be abandoned, returning the old generation to the idle state.\n@@ -387,1 +388,1 @@\n-\/\/           +----------------- +-----------------+\n+\/\/           +----------------> +-----------------+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -120,0 +120,4 @@\n+  const char* state_name() const {\n+    return state_name(_state);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-\/\/ % make exploded-test TEST=\"gtest:ShenandoahOld*\" CONF=release TEST_OPTS=\"JAVA_OPTIONS=-XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\"\n+\/\/ % make exploded-test TEST=\"gtest:ShenandoahOld*\" CONF=release TEST_OPTS=\"JAVA_OPTIONS=-XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=generational\"\n@@ -100,0 +100,1 @@\n+    region->set_affiliation(OLD_GENERATION);\n@@ -101,2 +102,3 @@\n-    region->increase_live_data_alloc_words(1);\n-    region->set_top(region->bottom() + garbage_bytes \/ HeapWordSize);\n+    size_t live_bytes = ShenandoahHeapRegion::region_size_bytes() - garbage_bytes;\n+    region->increase_live_data_alloc_words(live_bytes \/ HeapWordSize);\n+    region->set_top(region->end());\n@@ -111,1 +113,1 @@\n-      garbage_total += make_garbage_above_threshold(region_idx++);\n+      garbage_total += make_garbage_above_collection_threshold(region_idx++);\n@@ -130,1 +132,1 @@\n-  size_t make_garbage_below_threshold(size_t region_idx) {\n+  size_t make_garbage_below_collection_threshold(size_t region_idx) {\n@@ -134,1 +136,1 @@\n-  size_t make_garbage_above_threshold(size_t region_idx) {\n+  size_t make_garbage_above_collection_threshold(size_t region_idx) {\n@@ -167,1 +169,1 @@\n-  EXPECT_EQ(0U, _heuristics->last_old_region_index());\n+  EXPECT_EQ(0U, _heuristics->coalesce_and_fill_candidates_count());\n@@ -177,1 +179,1 @@\n-  make_garbage_below_threshold(10);\n+  make_garbage_below_collection_threshold(10);\n@@ -179,1 +181,1 @@\n-  EXPECT_EQ(1U, _heuristics->last_old_region_index());\n+  EXPECT_EQ(1U, _heuristics->coalesce_and_fill_candidates_count());\n@@ -187,1 +189,1 @@\n-  make_garbage_above_threshold(10);\n+  make_garbage_above_collection_threshold(10);\n@@ -189,1 +191,1 @@\n-  EXPECT_EQ(1U, _heuristics->last_old_region_index());\n+  EXPECT_EQ(1U, _heuristics->coalesce_and_fill_candidates_count());\n@@ -197,1 +199,1 @@\n-  size_t garbage = make_garbage_above_threshold(10);\n+  size_t garbage = make_garbage_above_collection_threshold(10);\n@@ -209,2 +211,2 @@\n-  size_t g1 = make_garbage_above_threshold(100);\n-  size_t g2 = make_garbage_above_threshold(101);\n+  size_t g1 = make_garbage_above_collection_threshold(100);\n+  size_t g2 = make_garbage_above_collection_threshold(101);\n@@ -234,3 +236,3 @@\n-  size_t g1 = make_garbage_above_threshold(0);\n-  size_t g2 = make_garbage_above_threshold(1);\n-  size_t g3 = make_garbage_above_threshold(2);\n+  size_t g1 = make_garbage_above_collection_threshold(0);\n+  size_t g2 = make_garbage_above_collection_threshold(1);\n+  size_t g3 = make_garbage_above_collection_threshold(2);\n@@ -270,3 +272,3 @@\n-  size_t g1 = make_garbage_above_threshold(0);\n-  size_t g2 = make_garbage_above_threshold(1);\n-  size_t g3 = make_garbage_above_threshold(2);\n+  size_t g1 = make_garbage_above_collection_threshold(0);\n+  size_t g2 = make_garbage_above_collection_threshold(1);\n+  size_t g3 = make_garbage_above_collection_threshold(2);\n@@ -293,3 +295,3 @@\n-  size_t g1 = make_garbage_above_threshold(0);\n-  size_t g2 = make_garbage_above_threshold(1);\n-  size_t g3 = make_garbage_above_threshold(2);\n+  size_t g1 = make_garbage_above_collection_threshold(0);\n+  size_t g2 = make_garbage_above_collection_threshold(1);\n+  size_t g3 = make_garbage_above_collection_threshold(2);\n@@ -318,3 +320,3 @@\n-  size_t g1 = make_garbage_above_threshold(0);\n-  size_t g2 = make_garbage_above_threshold(1);\n-  size_t g3 = make_garbage_above_threshold(2);\n+  size_t g1 = make_garbage_above_collection_threshold(0);\n+  size_t g2 = make_garbage_above_collection_threshold(1);\n+  size_t g3 = make_garbage_above_collection_threshold(2);\n@@ -344,3 +346,3 @@\n-  size_t g1 = make_garbage_above_threshold(0);\n-  size_t g2 = make_garbage_above_threshold(1);\n-  size_t g3 = make_garbage_above_threshold(2);\n+  size_t g1 = make_garbage_above_collection_threshold(0);\n+  size_t g2 = make_garbage_above_collection_threshold(1);\n+  size_t g3 = make_garbage_above_collection_threshold(2);\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldHeuristic.cpp","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"}]}