{"files":[{"patch":"@@ -582,0 +582,1 @@\n+    \/\/ While individual regions report their true use, all humongous regions are marked used in the free set.\n@@ -584,5 +585,14 @@\n-\n-  \/\/ While individual regions report their true use, all humongous regions are\n-  \/\/ marked used in the free set.\n-  increase_used(ShenandoahHeapRegion::region_size_bytes() * num);\n-  generation->increase_used(words_size * HeapWordSize);\n+  size_t total_humongous_size = ShenandoahHeapRegion::region_size_bytes() * num;\n+  increase_used(total_humongous_size);\n+  if (_heap->mode()->is_generational()) {\n+    size_t humongous_waste = total_humongous_size - words_size * HeapWordSize;\n+    _heap->global_generation()->increase_used(words_size * HeapWordSize);\n+    _heap->global_generation()->increase_humongous_waste(humongous_waste);\n+    if (req.is_young()) {\n+      _heap->young_generation()->increase_used(words_size * HeapWordSize);\n+      _heap->young_generation()->increase_humongous_waste(humongous_waste);\n+    } else if (req.is_old()) {\n+      _heap->old_generation()->increase_used(words_size * HeapWordSize);\n+      _heap->old_generation()->increase_humongous_waste(humongous_waste);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+  \/\/ Used of free set represents the amount of is_mutator_free set that has been consumed since most recent rebuild.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -205,2 +205,1 @@\n-    \/\/ No need to old_gen->increase_used().  That was done when plabs were allocated, accounting for both old evacs and promotions.\n-\n+    \/\/ No need for old_gen->increase_used() as this was done when plabs were allocated.\n@@ -1505,1 +1504,0 @@\n-\n@@ -1509,1 +1507,0 @@\n-\n@@ -1512,0 +1509,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-  size_t v_adjusted_avail = adjusted_available();\n+  size_t v_humongous_waste = get_humongous_waste();\n@@ -167,3 +167,2 @@\n-                   \"soft capacity: \" SIZE_FORMAT \"%s, max capacity: \" SIZE_FORMAT \"%s, available: \" SIZE_FORMAT \"%s, \"\n-                   \"adjusted available: \" SIZE_FORMAT \"%s\",\n-                   msg, name(),\n+                   \"humongous waste: \" SIZE_FORMAT \"%s, soft capacity: \" SIZE_FORMAT \"%s, max capacity: \" SIZE_FORMAT \"%s, \"\n+                   \"available: \" SIZE_FORMAT \"%s\", msg, name(),\n@@ -172,0 +171,1 @@\n+                   byte_size_in_proper_unit(v_humongous_waste),   proper_unit_for_byte_size(v_humongous_waste),\n@@ -174,2 +174,1 @@\n-                   byte_size_in_proper_unit(v_available),         proper_unit_for_byte_size(v_available),\n-                   byte_size_in_proper_unit(v_adjusted_avail),    proper_unit_for_byte_size(v_adjusted_avail));\n+                   byte_size_in_proper_unit(v_available),         proper_unit_for_byte_size(v_available));\n@@ -894,1 +893,1 @@\n-  _affiliated_region_count(0), _used(0), _bytes_allocated_since_gc_start(0),\n+  _affiliated_region_count(0), _humongous_waste(0), _used(0), _bytes_allocated_since_gc_start(0),\n@@ -958,0 +957,1 @@\n+  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for generational usage\");\n@@ -961,1 +961,1 @@\n-  \/\/ future improvement: _humongous_waste = humongous_waste;\n+  _humongous_waste = humongous_waste;\n@@ -965,0 +965,1 @@\n+  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for generational usage\");\n@@ -979,0 +980,17 @@\n+void ShenandoahGeneration::increase_humongous_waste(size_t bytes) {\n+  if (bytes > 0) {\n+    shenandoah_assert_heaplocked_or_fullgc_safepoint();\n+    _humongous_waste += bytes;\n+  }\n+}\n+\n+void ShenandoahGeneration::decrease_humongous_waste(size_t bytes) {\n+  if (bytes > 0) {\n+    shenandoah_assert_heaplocked_or_fullgc_safepoint();\n+    assert(_humongous_waste >= bytes, \"Waste cannot be negative\");\n+    assert(ShenandoahHeap::heap()->is_full_gc_in_progress() || (_humongous_waste >= bytes),\n+           \"Waste (\" SIZE_FORMAT \") cannot be negative (after subtracting \" SIZE_FORMAT \")\", _humongous_waste, bytes);\n+    _humongous_waste -= bytes;\n+  }\n+}\n+\n@@ -998,1 +1016,1 @@\n-  size_t in_use = used();\n+  size_t in_use = used() + get_humongous_waste();\n@@ -1004,5 +1022,0 @@\n-  \/\/ TODO: ysr: remove this check & warning\n-  if (adjustment % ShenandoahHeapRegion::region_size_bytes() != 0) {\n-    log_warning(gc)(\"Adjustment (\" INTPTR_FORMAT \") should be a multiple of region size (\" SIZE_FORMAT \")\",\n-                    adjustment, ShenandoahHeapRegion::region_size_bytes());\n-  }\n@@ -1010,1 +1023,1 @@\n-         \"Adjustment to generation size must be multiple of region size\");\n+        \"Adjustment to generation size must be multiple of region size\");\n@@ -1021,1 +1034,1 @@\n-  size_t in_use = used();\n+  size_t in_use = used() + get_humongous_waste();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":29,"deletions":16,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -55,0 +55,8 @@\n+\n+  \/\/ How much free memory is left in the last region of humongous objects.\n+  \/\/ This is _not_ included in used, but it _is_ deducted from available,\n+  \/\/ which gives the heuristics a more accurate view of how much memory remains\n+  \/\/ for allocation. This figure is also included the heap status logging.\n+  \/\/ The units are bytes. The value is only changed on a safepoint or under the\n+  \/\/ heap lock.\n+  size_t _humongous_waste;\n@@ -199,0 +207,4 @@\n+  void increase_humongous_waste(size_t bytes);\n+  void decrease_humongous_waste(size_t bytes);\n+  size_t get_humongous_waste() const { return _humongous_waste; }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -285,2 +285,0 @@\n-    case _cset:\n-      \/\/ Reclaiming cset regions\n@@ -289,1 +287,9 @@\n-      \/\/ Reclaiming humongous regions\n+    {\n+      \/\/ Reclaiming humongous regions and reclaim humongous waste.  When this region is eventually recycled, we'll reclaim\n+      \/\/ its used memory.  At recycle time, we no longer recognize this as a humongous region.\n+      if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+        decrement_humongous_waste();\n+      }\n+    }\n+    case _cset:\n+      \/\/ Reclaiming cset regions\n@@ -658,1 +664,3 @@\n-  heap->generation_for(affiliation())->decrease_used(used());\n+  if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+    heap->generation_for(affiliation())->decrease_used(used());\n+  }\n@@ -1039,1 +1047,0 @@\n-        r->set_affiliation(OLD_GENERATION);\n@@ -1042,0 +1049,8 @@\n+        r->set_affiliation(OLD_GENERATION);\n+      }\n+\n+      ShenandoahHeapRegion* tail = heap->get_region(index_limit - 1);\n+      size_t waste = tail->free();\n+      if (waste != 0) {\n+        old_generation->increase_humongous_waste(waste);\n+        young_generation->decrease_humongous_waste(waste);\n@@ -1076,0 +1091,9 @@\n+\n+void ShenandoahHeapRegion::decrement_humongous_waste() const {\n+  assert(is_humongous(), \"Should only use this for humongous regions\");\n+  size_t waste_bytes = free();\n+  if (waste_bytes > 0) {\n+    ShenandoahHeap::heap()->generation_for(affiliation())->decrease_humongous_waste(waste_bytes);\n+    ShenandoahHeap::heap()->global_generation()->decrease_humongous_waste(waste_bytes);\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -464,0 +464,1 @@\n+  void decrement_humongous_waste() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-  size_t _used, _committed, _garbage, _regions;\n+  size_t _used, _committed, _garbage, _regions, _humongous_waste;\n@@ -352,1 +352,1 @@\n-  ShenandoahCalculateRegionStatsClosure() : _used(0), _committed(0), _garbage(0), _regions(0) {};\n+  ShenandoahCalculateRegionStatsClosure() : _used(0), _committed(0), _garbage(0), _regions(0), _humongous_waste(0) {};\n@@ -358,0 +358,3 @@\n+    if (r->is_humongous()) {\n+      _humongous_waste += r->free();\n+    }\n@@ -367,0 +370,1 @@\n+  size_t waste() { return _humongous_waste; }\n@@ -405,1 +409,1 @@\n-              \"%s: generation (%s) used size must be consistent: generation-used = \" SIZE_FORMAT \"%s, regions-used = \" SIZE_FORMAT \"%s\",\n+              \"%s: generation (%s) used size must be consistent: generation-used: \" SIZE_FORMAT \"%s, regions-used: \" SIZE_FORMAT \"%s\",\n@@ -420,0 +424,6 @@\n+    size_t humongous_waste = generation->get_humongous_waste();\n+    guarantee(stats.waste() == humongous_waste,\n+              \"%s: generation (%s) humongous waste must be consistent: generation: \" SIZE_FORMAT \"%s, regions: \" SIZE_FORMAT \"%s\",\n+              label, generation->name(),\n+              byte_size_in_proper_unit(humongous_waste), proper_unit_for_byte_size(humongous_waste),\n+              byte_size_in_proper_unit(stats.waste()),   proper_unit_for_byte_size(stats.waste()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"}]}