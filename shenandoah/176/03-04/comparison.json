{"files":[{"patch":"@@ -150,12 +150,18 @@\n-    DIRTY_RUN = 0,\n-    CLEAN_RUN = 1,\n-    DIRTY_CARDS = 2,\n-    CLEAN_CARDS = 3,\n-    MAX_DIRTY_RUN = 4,\n-    MAX_CLEAN_RUN = 5,\n-    DIRTY_OBJS = 6,\n-    CLEAN_OBJS = 7,\n-    DIRTY_SCANS = 8,\n-    CLEAN_SCANS= 9,\n-    ALTERNATIONS = 10,\n-    MAX_CARD_STAT_TYPE = 11\n+  DIRTY_RUN = 0,\n+  CLEAN_RUN = 1,\n+  DIRTY_CARDS = 2,\n+  CLEAN_CARDS = 3,\n+  MAX_DIRTY_RUN = 4,\n+  MAX_CLEAN_RUN = 5,\n+  DIRTY_OBJS = 6,\n+  CLEAN_OBJS = 7,\n+  DIRTY_SCANS = 8,\n+  CLEAN_SCANS= 9,\n+  ALTERNATIONS = 10,\n+  MAX_CARD_STAT_TYPE = 11\n+};\n+\n+enum CardStatLogType {\n+  CARD_STAT_SCAN_RS = 0,\n+  CARD_STAT_UPDATE_REFS = 1,\n+  MAX_CARD_STAT_LOG_TYPE = 2\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardStats.hpp","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -916,1 +916,1 @@\n-    heap->card_scan()->log_card_stats();\n+    heap->card_scan()->log_card_stats(nworkers, CARD_STAT_SCAN_RS);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2748,1 +2748,2 @@\n-  ShenandoahRegionChunkIterator work_list(workers()->active_workers());\n+  size_t nworkers = workers()->active_workers();\n+  ShenandoahRegionChunkIterator work_list(nworkers);\n@@ -2757,0 +2758,3 @@\n+  if (ShenandoahEnableCardStats) {\n+    card_scan()->log_card_stats(nworkers, CARD_STAT_UPDATE_REFS);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -686,1 +686,1 @@\n-\/\/  \n+\/\/\n@@ -692,1 +692,1 @@\n-\/\/  \n+\/\/\n@@ -697,1 +697,1 @@\n-\/\/      \n+\/\/\n@@ -714,1 +714,6 @@\n-   \"alternations\"};\n+   \"alternations\"\n+  };\n+\n+  const char* _card_stat_log_type[MAX_CARD_STAT_LOG_TYPE] = {\n+   \"Scan Remembered Set\", \"Update Refs\"\n+  };\n@@ -866,1 +871,1 @@\n-  void process_clusters(size_t first_cluster, size_t count, HeapWord *end_of_range, ClosureType *oops, bool is_concurrent, uint worker_id);\n+  inline void process_clusters(size_t first_cluster, size_t count, HeapWord *end_of_range, ClosureType *oops, bool is_concurrent, uint worker_id);\n@@ -873,1 +878,1 @@\n-  void process_humongous_clusters(ShenandoahHeapRegion* r, size_t first_cluster, size_t count,\n+  inline void process_humongous_clusters(ShenandoahHeapRegion* r, size_t first_cluster, size_t count,\n@@ -903,1 +908,2 @@\n-  void log_card_stats() PRODUCT_RETURN;\n+  void log_card_stats(size_t nworkers, CardStatLogType t) PRODUCT_RETURN;\n+private:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include <string>\n@@ -467,1 +468,1 @@\n-void ShenandoahScanRemembered<RememberedSet>::process_clusters(size_t first_cluster, size_t count, HeapWord *end_of_range,\n+inline void ShenandoahScanRemembered<RememberedSet>::process_clusters(size_t first_cluster, size_t count, HeapWord *end_of_range,\n@@ -803,1 +804,1 @@\n-void ShenandoahScanRemembered<RememberedSet>::log_card_stats() {\n+void ShenandoahScanRemembered<RememberedSet>::log_card_stats(size_t nworkers, CardStatLogType t) {\n@@ -805,1 +806,2 @@\n-  for (uint i = 0; i < ParallelGCThreads; i++) {\n+  log_info(gc, remset)(\"%s\", _card_stat_log_type[t]);\n+  for (uint i = 0; i < nworkers; i++) {\n@@ -821,0 +823,1 @@\n+    \/\/ Merge into the appropriate cumulative stats \n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}