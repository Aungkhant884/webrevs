{"files":[{"patch":"@@ -123,0 +123,36 @@\n+\/\/ Merge this HdrSeq into hdr2: clear optional and on-by-default\n+\/\/ Note: this method isn't intrinsically MT-safe; callers must take care\n+\/\/ of any mutual exclusion as necessary.\n+void HdrSeq::merge(HdrSeq* hdr2, bool clear_this) {\n+  for (int mag = 0; mag < MagBuckets; mag++) {\n+    if (_hdr[mag] != NULL) {\n+      int* that_bucket = hdr2->_hdr[mag];\n+      if (that_bucket == NULL) {\n+        if (clear_this) {\n+          \/\/ the target doesn't have any values, swap in ours.\n+          \/\/ Could this cause native memory fragmentation?\n+          hdr2->_hdr[mag] = _hdr[mag];\n+          _hdr[mag] = NULL;\n+        } else {\n+          \/\/ We can't clear this, so we create the entries & add in below\n+          that_bucket = NEW_C_HEAP_ARRAY(int, ValBuckets, mtInternal);\n+          for (int val = 0; val < ValBuckets; val++) {\n+            that_bucket[val] = _hdr[mag][val];\n+          }\n+          hdr2->_hdr[mag] = that_bucket;\n+        }\n+      } else {\n+        \/\/ Add in our values into target\n+        for (int val = 0; val < ValBuckets; val++) {\n+          that_bucket[val] += _hdr[mag][val];\n+          if (clear_this) {\n+            _hdr[mag][val] = 0;\n+          }\n+        }\n+      }\n+    }\n+  }\n+  \/\/ Merge up the class hierarchy\n+  NumberSeq::merge(hdr2, clear_this);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -53,0 +53,3 @@\n+\n+  \/\/ Merge this HdrSeq into hdr2, optionally clearing this HdrSeq\n+  void merge(HdrSeq* hdr2, bool clear_this = true);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -833,1 +833,1 @@\n-  guarantee(false, \"NYI\");\n+  worker_stats->merge(cum_stats);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,0 +113,22 @@\n+void AbsSeq::merge(AbsSeq* abs2, bool clear_this) {\n+\n+  if (num() == 0) return;  \/\/ nothing to do\n+\n+  abs2->_num += _num;\n+  abs2->_sum += _sum;\n+  abs2->_sum_of_squares += _sum_of_squares;\n+\n+  \/\/ Decaying stats need a bit more thought\n+  assert(abs2->_alpha == _alpha, \"Caution: merge incompatible?\");\n+  \/\/ guarantee(false, \"NYI\");\n+\n+  if (clear_this) {\n+    _num = 0;\n+    _sum = 0;\n+    _sum_of_squares = 0;\n+    _davg = 0;\n+    _dvariance = 0;\n+  }\n+}\n+\n+\n@@ -140,0 +162,16 @@\n+void NumberSeq::merge(NumberSeq* nseq2, bool clear_this) {\n+\n+  if (num() == 0) return;  \/\/ nothing to do\n+\n+  nseq2->_last = _last;   \/\/ this is newer than that\n+  nseq2->_maximum = MAX2(_maximum, nseq2->_maximum);\n+\n+  AbsSeq::merge(nseq2, clear_this);\n+\n+  if (clear_this) {\n+    nseq2->_last = 0;\n+    nseq2->_maximum = 0;\n+    assert(num() == 0, \"Not cleared\");\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/numberSeq.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -86,0 +86,3 @@\n+\n+  \/\/ Merge this AbsSeq into seq2, optionally clearing this AbsSeq\n+  void merge(AbsSeq* seq2, bool clear_this = true);\n@@ -105,0 +108,3 @@\n+\n+  \/\/ Merge this NumberSeq into seq2, optionally clearing this NumberSeq\n+  void merge(NumberSeq* seq2, bool clear_this = true);\n","filename":"src\/hotspot\/share\/utilities\/numberSeq.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}