{"files":[{"patch":"@@ -178,0 +178,7 @@\n+\n+    \/\/ Since we allow temporary violation of these constraints during Full GC, we want to enforce that the assertions are\n+    \/\/ made valid by the time Full GC completes.\n+    assert(heap->old_generation()->used_regions_size() <= heap->old_generation()->adjusted_capacity(),\n+           \"Old generation affiliated regions must be less than capacity\");\n+    assert(heap->young_generation()->used_regions_size() <= heap->young_generation()->adjusted_capacity(),\n+           \"Young generation affiliated regions must be less than capacity\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -985,1 +985,4 @@\n-      assert(regions * ShenandoahHeapRegion::region_size_bytes() <= heap->young_generation()->adjusted_capacity(),\n+      \/\/ During Full GC, we allow temporary violation of this requirement.  We enforce that this condition is\n+      \/\/ restored upon completion of Full GC.\n+      assert(heap->is_full_gc_in_progress() ||\n+             (regions * ShenandoahHeapRegion::region_size_bytes() <= heap->young_generation()->adjusted_capacity()),\n@@ -990,1 +993,4 @@\n-      assert(regions * ShenandoahHeapRegion::region_size_bytes() <= heap->old_generation()->adjusted_capacity(),\n+      \/\/ During Full GC, we allow temporary violation of this requirement.  We enforce that this condition is\n+      \/\/ restored upon completion of Full GC.\n+      assert(heap->is_full_gc_in_progress() ||\n+             (regions * ShenandoahHeapRegion::region_size_bytes() <= heap->old_generation()->adjusted_capacity()),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}