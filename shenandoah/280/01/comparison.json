{"files":[{"patch":"@@ -328,1 +328,0 @@\n-  size_t max_capacity = _generation->max_capacity();\n@@ -330,1 +329,1 @@\n-  size_t available = _generation->available();\n+  size_t available = _generation->soft_available();\n@@ -334,2 +333,2 @@\n-                \", max_capacity: \" SIZE_FORMAT \", allocated: \" SIZE_FORMAT,\n-                _generation->name(), available, capacity, max_capacity, allocated);\n+                \", allocated: \" SIZE_FORMAT,\n+                _generation->name(), available, capacity, allocated);\n@@ -381,1 +380,1 @@\n-  \/\/       accomodation to give us enough runway to recalibrate our \"average allocation rate\".\n+  \/\/       accommodation to give us enough runway to recalibrate our \"average allocation rate\".\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-    size_t old_evac_reserve_max = old_generation->soft_max_capacity() * ShenandoahOldEvacReserve \/ 100;\n+    size_t old_evac_reserve_max = old_generation->max_capacity() * ShenandoahOldEvacReserve \/ 100;\n@@ -270,1 +270,1 @@\n-      (((young_generation->soft_max_capacity() * ShenandoahEvacReserve) \/ 100) * ShenandoahOldEvacRatioPercent) \/ 100;\n+      (((young_generation->max_capacity() * ShenandoahEvacReserve) \/ 100) * ShenandoahOldEvacRatioPercent) \/ 100;\n@@ -900,1 +900,1 @@\n-  _adjusted_capacity(soft_max_capacity), _heuristics(nullptr) {\n+  _adjusted_capacity(max_capacity), _heuristics(nullptr) {\n@@ -997,1 +997,1 @@\n-  size_t result = soft_max_capacity() \/ ShenandoahHeapRegion::region_size_bytes();\n+  size_t result = max_capacity() \/ ShenandoahHeapRegion::region_size_bytes();\n@@ -1011,0 +1011,6 @@\n+  size_t in_use = used() + get_humongous_waste();\n+  size_t capacity = max_capacity();\n+  return in_use > capacity ? 0 : capacity - in_use;\n+}\n+\n+size_t ShenandoahGeneration::soft_available() const {\n@@ -1019,1 +1025,1 @@\n-  _adjusted_capacity = soft_max_capacity() + adjustment;\n+  _adjusted_capacity = max_capacity() + adjustment;\n@@ -1024,1 +1030,1 @@\n-  _adjusted_capacity = soft_max_capacity();\n+  _adjusted_capacity = max_capacity();\n@@ -1057,1 +1063,0 @@\n-  _soft_max_capacity += increment;\n@@ -1071,1 +1076,0 @@\n-  _soft_max_capacity -= decrement;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -114,0 +114,6 @@\n+  \/\/ Returns the memory available based on the _soft_ max heap capacity (soft_max_heap - used).\n+  \/\/ The soft max heap size may be adjusted lower than the max heap size to cause the trigger\n+  \/\/ to believe it has less memory available than is _really_ available. Lowering the soft\n+  \/\/ max heap size will cause the adaptive heuristic to run more frequent cycles.\n+  size_t soft_available() const;\n+\n@@ -119,2 +125,2 @@\n-  virtual size_t adjusted_available() const;\n-  virtual size_t adjusted_capacity() const;\n+  size_t adjusted_available() const;\n+  size_t adjusted_capacity() const;\n@@ -124,1 +130,1 @@\n-  virtual size_t adjusted_unaffiliated_regions() const;\n+  size_t adjusted_unaffiliated_regions() const;\n@@ -127,2 +133,2 @@\n-  virtual size_t adjust_available(intptr_t adjustment);\n-  virtual size_t unadjust_available();\n+  size_t adjust_available(intptr_t adjustment);\n+  size_t unadjust_available();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-  _generation_sizer.heap_size_changed(soft_max_capacity());\n+  _generation_sizer.heap_size_changed(max_capacity());\n@@ -823,5 +823,4 @@\n-    _generation_sizer.heap_size_changed(_soft_max_size);\n-    size_t soft_max_capacity_young = _generation_sizer.max_young_size();\n-    size_t soft_max_capacity_old = _soft_max_size - soft_max_capacity_young;\n-    _young_generation->set_soft_max_capacity(soft_max_capacity_young);\n-    _old_generation->set_soft_max_capacity(soft_max_capacity_old);\n+    size_t max_capacity_young = _generation_sizer.max_young_size();\n+    size_t min_capacity_young = _generation_sizer.min_young_size();\n+    size_t new_capacity_young = clamp(v, min_capacity_young, max_capacity_young);\n+    _young_generation->set_soft_max_capacity(new_capacity_young);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java#generational 8306333 generic-all\n@@ -90,1 +89,1 @@\n-\n+gc\/TestAllocHumongousFragment.java#generational 8306342 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}