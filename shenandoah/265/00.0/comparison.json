{"files":[{"patch":"@@ -160,1 +160,1 @@\n-  address jrt_address = NULL;\n+  address jrt_address = nullptr;\n@@ -726,1 +726,1 @@\n-                false, success_flag, NULL, true);\n+                false, success_flag, nullptr, true);\n@@ -1039,1 +1039,1 @@\n-  address jrt_address = NULL;\n+  address jrt_address = nullptr;\n@@ -1063,1 +1063,1 @@\n-  assert(jrt_address != NULL, \"load reference barrier runtime routine cannot be found\");\n+  assert(jrt_address != nullptr, \"load reference barrier runtime routine cannot be found\");\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-                       MacroAssembler::PreservationLevel preservation_level, Label* L_handle_null = NULL);\n+                       MacroAssembler::PreservationLevel preservation_level, Label* L_handle_null = nullptr);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-  \/\/ that checks that the *(rfp+frame::interpreter_frame_last_sp) == NULL.\n+  \/\/ that checks that the *(rfp+frame::interpreter_frame_last_sp) is null.\n@@ -286,1 +286,1 @@\n-  address target = NULL;\n+  address target = nullptr;\n@@ -471,1 +471,1 @@\n-\/\/ Upon entry to cmpxchg_oop, it is assured that new_val equals NULL\n+\/\/ Upon entry to cmpxchg_oop, it is assured that new_val equals null\n@@ -684,1 +684,1 @@\n-  address target  = NULL;\n+  address target  = nullptr;\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-    FLAG_SET_DEFAULT(ShenandoahSuspendibleWorkers, true);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-    FLAG_SET_DEFAULT(ShenandoahSuspendibleWorkers, true);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2320,14 +2320,2 @@\n-  while (true) {\n-    jbyte prev = _cancelled_gc.cmpxchg(CANCELLED, CANCELLABLE);\n-    if (prev == CANCELLABLE) return true;\n-    else if (prev == CANCELLED) return false;\n-    assert(ShenandoahSuspendibleWorkers, \"should not get here when not using suspendible workers\");\n-    assert(prev == NOT_CANCELLED, \"must be NOT_CANCELLED\");\n-    Thread* thread = Thread::current();\n-    if (thread->is_Java_thread()) {\n-      \/\/ We need to provide a safepoint here, otherwise we might\n-      \/\/ spin forever if a SP is pending.\n-      ThreadBlockInVM sp(JavaThread::cast(thread));\n-      SpinPause();\n-    }\n-  }\n+  jbyte prev = _cancelled_gc.cmpxchg(CANCELLED, CANCELLABLE);\n+  return prev == CANCELLABLE;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -463,6 +463,1 @@\n-    CANCELLED,\n-\n-    \/\/ GC has not been cancelled and must not be cancelled. At least\n-    \/\/ one worker thread checks for pending safepoint and may suspend\n-    \/\/ if a safepoint is pending.\n-    NOT_CANCELLED\n+    CANCELLED\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -251,6 +251,1 @@\n-  if (! (sts_active && ShenandoahSuspendibleWorkers)) {\n-    return cancelled_gc();\n-  }\n-\n-  jbyte prev = _cancelled_gc.cmpxchg(NOT_CANCELLED, CANCELLABLE);\n-  if (prev == CANCELLABLE || prev == NOT_CANCELLED) {\n+  if (sts_active && ShenandoahSuspendibleWorkers && !cancelled_gc()) {\n@@ -260,9 +255,1 @@\n-\n-    \/\/ Back to CANCELLABLE. The thread that poked NOT_CANCELLED first gets\n-    \/\/ to restore to CANCELLABLE.\n-    if (prev == CANCELLABLE) {\n-      _cancelled_gc.set(CANCELLABLE);\n-    }\n-    return false;\n-  } else {\n-    return true;\n+  return cancelled_gc();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -486,1 +486,1 @@\n-  product(bool, ShenandoahSuspendibleWorkers, false, EXPERIMENTAL,          \\\n+  product(bool, ShenandoahSuspendibleWorkers, true, EXPERIMENTAL,           \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-runtime\/ErrorHandling\/TestDwarf.java 8305489 linux-i586\n+runtime\/ErrorHandling\/TestDwarf.java 8305489 linux-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -698,0 +698,2 @@\n+com\/sun\/jdi\/JdbLastErrorTest.java                               8305913 windows-x64\n+\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}