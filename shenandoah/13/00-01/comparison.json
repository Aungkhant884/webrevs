{"files":[{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -221,0 +221,9 @@\n+tier1_gc_shenandoah_generational = \\\n+  gc\/shenandoah\/generational\/\n+\n+# No tier 2 tests for shenandoah_generational at this time\n+tier2_gc_shenandoah_generational =\n+\n+# No tier 3 tests for shenandoah_generational at this time\n+tier3_gc_shenandoah_generational =\n+\n@@ -254,0 +263,1 @@\n+# include shenandoah generational tests in tier3 shenandoah\n@@ -261,0 +271,1 @@\n+  :hotspot_gc_shenandoah_generational \\\n@@ -268,0 +279,5 @@\n+hotspot_gc_shenandoah_generational = \\\n+  :tier1_gc_shenandoah_generational \\\n+  :tier2_gc_shenandoah_generational \\\n+  :tier3_gc_shenandoah_generational\n+\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Amazon, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.shenandoah.generational;\n+\n+import sun.hotspot.WhiteBox;\n+\n+\/*\n+ * @test TestCLIModeGenerational\n+ * @requires vm.gc.Shenandoah\n+ * @summary Test argument processing for -XX:+ShenandoahGCMode=generational.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *      -XX:+IgnoreUnrecognizedVMOptions \n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      gc.shenandoah.generational.TestCLIModeGenerational\n+ *\/\n+\n+public class TestCLIModeGenerational {\n+\n+  private static WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+  public static void main(String args[]) throws Exception {\n+    Boolean using_shenandoah = wb.getBooleanVMFlag(\"UseShenandoahGC\");\n+    String gc_mode = wb.getStringVMFlag(\"ShenandoahGCMode\");\n+    if (!using_shenandoah || !gc_mode.equals(\"generational\"))\n+      throw new IllegalStateException(\"Command-line options not honored!\");\n+  }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestCLIModeGenerational.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2021, Amazon, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package gc.shenandoah.generational;\n+\n+import sun.hotspot.WhiteBox;\n+import java.util.Random;\n+\n+\/*\n+ * @test TestSimpleGenerational\n+ * @requires vm.gc.Shenandoah\n+ * @summary Confirm that card marking and remembered set scanning do not crash.\n+ * @library \/testlibrary \/test\/lib \/\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *      -XX:+IgnoreUnrecognizedVMOptions \n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n+ *      gc.shenandoah.generational.TestSimpleGenerational\n+ *\/\n+\n+\/* This used to be part of the run command, but caused problems.\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *\/\n+\n+public class TestSimpleGenerational {\n+  private static WhiteBox wb = WhiteBox.getWhiteBox();\n+  static private final int SeedForRandom = 46;\n+  \/\/ Sequence of random numbers should end with same value\n+  private static int ExpectedLastRandom = 272454100;\n+\n+\n+  public static class Node {\n+    static private final int NeighborCount = 5;\n+    static private final int IntArraySize = 8;\n+    static private Random random = new Random(SeedForRandom);\n+\n+    private int val;\n+    private Object field_o;\n+\n+    \/\/ Each Node instance holds references to two \"private\" arrays.\n+    \/\/ One array holds raw seething bits (primitive integers) and the\n+    \/\/ holds references.\n+    \n+    private int[] field_ints;\n+    private Node [] neighbors;\n+\n+    public Node(int val) {\n+      this.val = val;\n+      this.field_o = new Object();\n+      this.field_ints = new int[IntArraySize];\n+      this.field_ints[0] = 0xca;\n+      this.field_ints[1] = 0xfe;\n+      this.field_ints[2] = 0xba;\n+      this.field_ints[3] = 0xbe;\n+      this.field_ints[4] = 0xba;\n+      this.field_ints[5] = 0xad;\n+      this.field_ints[6] = 0xba;\n+      this.field_ints[7] = 0xbe;\n+\n+      this.neighbors = new Node[NeighborCount];\n+    }\n+\n+    public int value() {\n+      return val;\n+    }\n+\n+    \/\/ Copy each neighbor of n into a new node's neighbor array.\n+    \/\/ Then overwrite arbitrarily selected neighbor with newly allocated\n+    \/\/ leaf node.\n+    public static Node upheaval(Node n) {\n+      int first_val = random.nextInt();\n+      if (first_val < 0) first_val = -first_val;\n+      if (first_val < 0) first_val = 0;\n+      Node result = new Node(first_val);\n+      if (n != null) {\n+        for (int i = 0; i < NeighborCount; i++)\n+          result.neighbors[i] = n.neighbors[i];\n+      }\n+      int second_val = random.nextInt();\n+      if (second_val < 0) second_val = -second_val;\n+      if (second_val < 0) second_val = 0;\n+    \n+      int overwrite_index = first_val % NeighborCount;\n+      result.neighbors[overwrite_index] = new Node(second_val);\n+      return result;\n+    }\n+  }\n+\n+  public static void main(String args[]) throws Exception {\n+    Node n = null;\n+\n+    if (!wb.getBooleanVMFlag(\"UseShenandoahGC\") || \n+        !wb.getStringVMFlag(\"ShenandoahGCMode\").equals(\"generational\"))\n+      throw new IllegalStateException(\"Command-line options not honored!\");\n+\n+    for (int count = 10000; count > 0; count--) {\n+      n = Node.upheaval(n);\n+    }\n+\n+    if (n.value() != ExpectedLastRandom)\n+      throw new IllegalStateException(\"Random number sequence ended badly!\");\n+\n+  }\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestSimpleGenerational.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}