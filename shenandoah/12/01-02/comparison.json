{"files":[{"patch":"@@ -36,1 +36,0 @@\n-#include \"gc\/shenandoah\/shenandoahScanRemembered.hpp\"\n@@ -63,0 +62,1 @@\n+#include \"gc\/shenandoah\/shenandoahScanRemembered.inline.hpp\"\n@@ -76,1 +76,0 @@\n-#include \"gc\/shenandoah\/shenandoahScanRemembered.inline.hpp\"\n@@ -2728,4 +2727,3 @@\n-        \/\/       of the memory range known to hold newly evacuated objects.  Note that incrementing watermark to\n-        \/\/       account for objects newly evacuated into the region may result in otherwise unnecessary updating\n-        \/\/       of references contained within newly allocated objects that happen to be located between the\n-        \/\/       initial value of watermark and the updated value of watermark.\n+        \/\/       the memory range known to hold newly evacuated objects.  Regions that receive evacuated objects\n+        \/\/       are distinct from regions that serve new object allocation requests.  A region's watermark is not\n+        \/\/       increased when objects are newly allocated within that region during evacuation.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) Amazon.com, Inc. or its affiliates.  All rights reserved.\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates.  All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) Amazon.com, Inc. or its affiliates.  All rights reserved.\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates.  All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) Amazon.com, Inc. or its affiliates.  All rights reserved.\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates.  All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,15 +50,4 @@\n-  if (java_string->age() <= StringDeduplicationAgeThreshold) {\n-    const markWord mark = java_string->mark();\n-\n-    \/\/ Having\/had displaced header, too risk to deal with them, skip\n-    if (mark == markWord::INFLATING() || mark.has_displaced_mark_helper()) {\n-      return;\n-    }\n-\n-    \/\/ Increase string age and enqueue it when it rearches age threshold\n-    markWord new_mark = mark.incr_age();\n-    if (mark == java_string->cas_set_mark(new_mark, mark)) {\n-      if (mark.age() == StringDeduplicationAgeThreshold) {\n-        StringDedupQueue::push(ShenandoahWorkerSession::worker_id(), java_string);\n-      }\n-    }\n+  \/\/ String age is incremented when object is evacuated as with all objects.\n+  if (java_string->age() >= StringDeduplicationAgeThreshold) {\n+    \/\/ Enqueue string for deduplication when age reaches age threshold.\n+    StringDedupQueue::push(ShenandoahWorkerSession::worker_id(), java_string);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStringDedup.cpp","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"}]}