{"files":[{"patch":"@@ -41,0 +41,4 @@\n+double TimeHelper::counter_to_nanos(jlong counter) {\n+  return counter_to_seconds(counter) * NANOUNITS;\n+}\n+\n@@ -51,0 +55,5 @@\n+jlong TimeHelper::nanos_to_counter(jlong nanos) {\n+  jlong freq = os::elapsed_frequency() \/ NANOUNITS;\n+  return nanos * freq;\n+}\n+\n@@ -77,0 +86,4 @@\n+jlong elapsedTimer::nanoseconds() const {\n+  return (jlong)TimeHelper::counter_to_nanos(_counter);\n+}\n+\n@@ -107,0 +120,6 @@\n+jlong TimeStamp::nanoseconds() const {\n+  assert(is_updated(), \"must not be clear\");\n+  jlong new_count = os::elapsed_counter();\n+  return (jlong)TimeHelper::counter_to_nanos(new_count - _counter);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/timer.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  jlong nanoseconds() const;\n@@ -67,0 +68,2 @@\n+  \/\/ returns milliseconds since updated\n+  \/\/ (must not be in a cleared state:  must have been previously updated)\n@@ -68,0 +71,3 @@\n+  \/\/ returns nanoseconds since updated\n+  \/\/ (must not be in a cleared state:  must have been previously updated)\n+  jlong nanoseconds() const;\n@@ -78,0 +84,1 @@\n+  static double counter_to_nanos(jlong counter);\n@@ -80,0 +87,1 @@\n+  static jlong nanos_to_counter(jlong nanos);\n","filename":"src\/hotspot\/share\/runtime\/timer.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -154,2 +154,2 @@\n-  constructor_args.push_long(Management::ticks_to_ms(gcStatInfo->start_time()));\n-  constructor_args.push_long(Management::ticks_to_ms(gcStatInfo->end_time()));\n+  constructor_args.push_long(Management::ticks_to_ns(gcStatInfo->start_time()));\n+  constructor_args.push_long(Management::ticks_to_ns(gcStatInfo->end_time()));\n","filename":"src\/hotspot\/share\/services\/gcNotifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1860,2 +1860,2 @@\n-  gc_stat->start_time = Management::ticks_to_ms(stat.start_time());\n-  gc_stat->end_time = Management::ticks_to_ms(stat.end_time());\n+  gc_stat->start_time = Management::ticks_to_ns(stat.start_time());\n+  gc_stat->end_time = Management::ticks_to_ns(stat.end_time());\n@@ -2066,0 +2066,6 @@\n+\n+jlong Management::ticks_to_ns(jlong ticks) {\n+  assert(os::elapsed_frequency() > 0, \"Must be non-zero\");\n+  return (jlong)(((double)ticks \/ (double)os::elapsed_frequency())\n+                 * (double)1000000000.0);\n+}\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+  static jlong ticks_to_ns(jlong ticks) NOT_MANAGEMENT_RETURN_(0L);\n","filename":"src\/hotspot\/share\/services\/management.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -163,0 +163,1 @@\n+  jlong  gc_time_ns()                   { return _accumulated_timer.nanoseconds(); }\n","filename":"src\/hotspot\/share\/services\/memoryManager.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-        return startTime;\n+        return startTime \/ 1000_000L;\n@@ -137,1 +137,1 @@\n-        return endTime;\n+        return endTime \/ 1000_000L;\n@@ -146,1 +146,1 @@\n-        return endTime - startTime;\n+        return (endTime - startTime) \/ 1000_000L;\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/GcInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}