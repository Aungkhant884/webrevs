{"files":[{"patch":"@@ -708,1 +708,1 @@\n-    r->set_affiliation(req.affiliation(), false);\n+    r->set_affiliation(req.affiliation());\n@@ -718,0 +718,3 @@\n+      _heap->old_generation()->increment_affiliated_region_count();\n+    } else {\n+      _heap->young_generation()->increment_affiliated_region_count();\n@@ -915,1 +918,1 @@\n-    r->set_affiliation(req.affiliation(), false);\n+    r->set_affiliation(req.affiliation());\n@@ -922,0 +925,1 @@\n+  _heap->young_generation()->increase_affiliated_region_count(num);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -542,1 +542,1 @@\n-          new_to_region->set_affiliation(OLD_GENERATION, false);\n+          new_to_region->set_affiliation(OLD_GENERATION);\n@@ -568,1 +568,1 @@\n-          new_to_region->set_affiliation(OLD_GENERATION, false);\n+          new_to_region->set_affiliation(OLD_GENERATION);\n@@ -613,1 +613,1 @@\n-          new_to_region->set_affiliation(YOUNG_GENERATION, false);\n+          new_to_region->set_affiliation(YOUNG_GENERATION);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,1 +106,2 @@\n-      set_affiliation(affiliation, false);\n+      set_affiliation(affiliation);\n+      ShenandoahHeap::heap()->generation_for(affiliation)->increment_affiliated_region_count();\n@@ -126,1 +127,2 @@\n-     set_affiliation(YOUNG_GENERATION, false);\n+     set_affiliation(YOUNG_GENERATION);\n+     ShenandoahHeap::heap()->young_generation()->increment_affiliated_region_count();\n@@ -179,1 +181,2 @@\n-  set_affiliation(affiliation, false);\n+  set_affiliation(affiliation);\n+  ShenandoahHeap::heap()->generation_for(affiliation)->increment_affiliated_region_count();\n@@ -210,1 +213,2 @@\n-  set_affiliation(affiliation, false);\n+  set_affiliation(affiliation);\n+  ShenandoahHeap::heap()->generation_for(affiliation)->increment_affiliated_region_count();\n@@ -676,2 +680,2 @@\n-  set_affiliation(FREE, false);\n-\n+  ShenandoahHeap::heap()->generation_for(affiliation())->decrement_affiliated_region_count();\n+  set_affiliation(FREE);\n@@ -933,1 +937,1 @@\n-void ShenandoahHeapRegion::set_affiliation(ShenandoahAffiliation new_affiliation, bool defer_affiliated_region_count_updates) {\n+void ShenandoahHeapRegion::set_affiliation(ShenandoahAffiliation new_affiliation) {\n@@ -962,1 +966,0 @@\n-\n@@ -970,38 +973,15 @@\n-#ifdef KELVIN_DEPRECATE\n-  \/\/ my plan is to get rid of the defer_affiliated_region_count_updates argument so I can immediately update\n-  if (!defer_affiliated_region_count_updates) {\n-#endif\n-    if (is_young()) {\n-      heap->young_generation()->decrement_affiliated_region_count();\n-    } else if (is_old()) {\n-      heap->old_generation()->decrement_affiliated_region_count();\n-    }\n-    size_t regions;\n-    switch (new_affiliation) {\n-      case FREE:\n-        assert(!has_live(), \"Free region should not have live data\");\n-        break;\n-      case YOUNG_GENERATION:\n-        reset_age();\n-        regions = heap->young_generation()->increment_affiliated_region_count();\n-        \/\/ During Full GC, we allow temporary violation of this requirement.  We enforce that this condition is\n-        \/\/ restored upon completion of Full GC.\n-        assert(heap->is_full_gc_in_progress() ||\n-               (regions * ShenandoahHeapRegion::region_size_bytes() <= heap->young_generation()->soft_max_capacity()),\n-               \"Number of young regions cannot exceed capacity\");\n-        break;\n-      case OLD_GENERATION:\n-        regions = heap->old_generation()->increment_affiliated_region_count();\n-        \/\/ During Full GC, we allow temporary violation of this requirement.  We enforce that this condition is\n-        \/\/ restored upon completion of Full GC.\n-        assert(heap->is_full_gc_in_progress() ||\n-               (regions * ShenandoahHeapRegion::region_size_bytes() <= heap->old_generation()->soft_max_capacity()),\n-               \"Number of old regions cannot exceed capacity\");\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-        return;\n-    }\n-#ifdef KELVIN_DEPRECATE\n-  } else if (new_affiliation == YOUNG_GENERATION) {\n-    reset_age();\n+  size_t regions;\n+  switch (new_affiliation) {\n+    case FREE:\n+      assert(!has_live(), \"Free region should not have live data\");\n+      break;\n+    case YOUNG_GENERATION:\n+      reset_age();\n+      break;\n+    case OLD_GENERATION:\n+      \/\/ TODO: should we reset_age() for OLD as well?  Examine invocations of set_affiliation(). Some contexts redundantly\n+      \/\/       invoke reset_age().\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+      return;\n@@ -1009,1 +989,0 @@\n-#endif\n@@ -1054,0 +1033,1 @@\n+    young_gen->decrement_affiliated_region_count();\n@@ -1058,2 +1038,2 @@\n-    \/\/ set_affiliation() increments affiliated_regions for OLD, decrements for YOUNG\n-    set_affiliation(OLD_GENERATION, true);\n+    set_affiliation(OLD_GENERATION);\n+    old_gen->increment_affiliated_region_count();\n@@ -1130,0 +1110,1 @@\n+    young_generation->decrease_affiliated_region_count(spanned_regions);\n@@ -1142,1 +1123,1 @@\n-      r->set_affiliation(OLD_GENERATION, true);\n+      r->set_affiliation(OLD_GENERATION);\n@@ -1145,0 +1126,1 @@\n+    young_generation->increase_affiliated_region_count(spanned_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":32,"deletions":50,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-  void set_affiliation(ShenandoahAffiliation new_affiliation, bool defer_affiliated_region_count_updates);\n+  void set_affiliation(ShenandoahAffiliation new_affiliation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    region->set_affiliation(FREE, false);\n+    region->set_affiliation(FREE);\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldHeuristic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}