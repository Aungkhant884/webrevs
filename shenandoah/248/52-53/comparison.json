{"files":[{"patch":"@@ -187,1 +187,1 @@\n-      if (r->age() + 1 == InitialTenuringThreshold) {\n+      if (heap->is_aging_cycle() && (r->age() + 1 == InitialTenuringThreshold)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -960,12 +960,0 @@\n-#undef KELVIN_TLAB\n-#ifdef KELVIN_TLAB\n-void kelvin_breakpoint(ShenandoahAllocRequest req) {\n-  if (req.type() == ShenandoahAllocRequest::_alloc_tlab) {\n-    ShenandoahHeapLocker locker(ShenandoahHeap::heap()->lock());\n-    ShenandoahHeap::heap()->log_heap_status(\"At TLAB allocation failure\");\n-    ShenandoahHeap::heap()->free_set()->log_status();\n-  }\n-}\n-#endif\n-\n-\n@@ -982,3 +970,0 @@\n-#ifdef KELVIN_TLAB\n-    kelvin_breakpoint(req);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -283,0 +283,3 @@\n+        bool success;\n+        size_t region_xfer;\n+        const char* region_destination;\n@@ -284,1 +287,3 @@\n-          bool success = heap->generation_sizer()->transfer_to_young(old_region_surplus);\n+          region_xfer = old_region_surplus;\n+          region_destination = \"young\";\n+          success = heap->generation_sizer()->transfer_to_young(old_region_surplus);\n@@ -286,1 +291,3 @@\n-          bool success = heap->generation_sizer()->transfer_to_old(old_region_deficit);\n+          region_xfer = old_region_surplus;\n+          region_destination = \"old\";\n+          success = heap->generation_sizer()->transfer_to_old(old_region_deficit);\n@@ -290,0 +297,4 @@\n+        } else {\n+          region_destination = \"none\";\n+          region_xfer = 0;\n+          success = true;\n@@ -291,0 +302,9 @@\n+\n+        size_t young_available = heap->young_generation()->available();\n+        size_t old_available = heap->old_generation()->available();\n+        log_info(gc, ergo)(\"After cleanup, %s \" SIZE_FORMAT \" regions to %s to prepare for next gc, old available: \"\n+                           SIZE_FORMAT \"%s, young_available: \" SIZE_FORMAT \"%s\",\n+                           success? \"successfully transferred\": \"failed to transfer\", region_xfer, region_destination,\n+                           byte_size_in_proper_unit(old_available), proper_unit_for_byte_size(old_available),\n+                           byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available));\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1098,10 +1098,0 @@\n-#undef KELVIN_REBUILD\n-#ifdef KELVIN_REBUILD\n-  log_info(gc, free)(\"Rebuild free_set with old available: \" SIZE_FORMAT \" out of capacity: \" SIZE_FORMAT\n-                     \", young available: \" SIZE_FORMAT \" out of capacity: \" SIZE_FORMAT,\n-                     old_available, old_capacity, young_available, young_capacity);\n-  log_info(gc, free)(\"  young_unaffiliated: \" SIZE_FORMAT \", young_cset: \" SIZE_FORMAT \n-                     \", old_unaffiliated: \" SIZE_FORMAT \", old_cset: \" SIZE_FORMAT,\n-                     young_unaffiliated_regions, young_cset_regions, old_unaffiliated_regions, old_cset_regions);\n-#endif\n-\n@@ -1118,5 +1108,0 @@\n-#ifdef KELVIN_REBUILD\n-  log_info(gc, free)(\"old_region_surplus: \" SIZE_FORMAT \", old_region_deficit: \" SIZE_FORMAT,\n-                     old_region_surplus, old_region_deficit);\n-#endif\n-\n@@ -1157,7 +1142,0 @@\n-\n-#ifdef KELVIN_REBUILD\n-      log_info(gc, free)(\" ... has evacuation reserves: young_reserve \" SIZE_FORMAT \", promoted_reserve: \" SIZE_FORMAT\n-                         \", old evac reserve: \" SIZE_FORMAT, young_reserve, _heap->get_promoted_reserve(),\n-                         _heap->get_old_evac_reserve());\n-#endif\n-\n@@ -1201,23 +1179,0 @@\n-\n-#undef KELVIN_RESERVE\n-#ifdef KELVIN_RESERVE\n-  size_t old_unaffiliated = ShenandoahHeap::heap()->old_generation()->free_unaffiliated_regions();\n-  log_info(gc, free)(\"FreeSet reserve regions(young: \" SIZE_FORMAT \", old: \" SIZE_FORMAT \"), OldCollector capacity: \" SIZE_FORMAT\n-                     \", old unaffiliated regions: \" SIZE_FORMAT, to_reserve, to_reserve_old,\n-                     _free_sets.capacity_of(OldCollector), old_unaffiliated);\n-  if (to_reserve_old > _free_sets.capacity_of(OldCollector)) {\n-    size_t more_old_required = to_reserve_old - _free_sets.capacity_of(OldCollector);\n-    if (more_old_required > old_unaffiliated * ShenandoahHeapRegion::region_size_bytes()) {\n-      log_info(gc, free)(\" old is in deficit by \" SIZE_FORMAT,\n-                         more_old_required - old_unaffiliated * ShenandoahHeapRegion::region_size_bytes());\n-    } else {\n-      log_info(gc, free)(\" old has sufficient by \" SIZE_FORMAT,\n-                         old_unaffiliated * ShenandoahHeapRegion::region_size_bytes() - more_old_required);\n-    }\n-  } else {\n-    log_info(gc, free)(\" old has excess \" SIZE_FORMAT,\n-                       old_unaffiliated * ShenandoahHeapRegion::region_size_bytes() + \n-                       (_free_sets.capacity_of(OldCollector) - to_reserve_old));\n-  }\n-#endif\n-\n@@ -1341,23 +1296,0 @@\n-#define KELVIN_LOG_STATUS\n-#ifdef KELVIN_LOG_STATUS\n-    log_info(gc, free)(\"Retired young: \" SIZE_FORMAT \"%s (including regular waste: \"\n-                       SIZE_FORMAT \"%s and humongous: \" SIZE_FORMAT \"%s); Retired old: \" SIZE_FORMAT\n-                       \"%s (including regular waste: \" SIZE_FORMAT \"%s and humongous: \" SIZE_FORMAT \"%s)\",\n-                       byte_size_in_proper_unit(total_young),             proper_unit_for_byte_size(total_young),\n-                       byte_size_in_proper_unit(retired_young_waste),     proper_unit_for_byte_size(retired_young_waste),\n-                       byte_size_in_proper_unit(retired_young_humongous), proper_unit_for_byte_size(retired_young_humongous),\n-                       byte_size_in_proper_unit(total_old),               proper_unit_for_byte_size(total_old),\n-                       byte_size_in_proper_unit(retired_old_waste),       proper_unit_for_byte_size(retired_old_waste),\n-                       byte_size_in_proper_unit(retired_old_humongous),   proper_unit_for_byte_size(retired_old_humongous));\n-    log_info(gc, free)(\"Free set young is mutator available: \" SIZE_FORMAT \" + mutator consumed: \" SIZE_FORMAT\n-                       \" + collector available: \" SIZE_FORMAT \" + collector consumed: \" SIZE_FORMAT\n-                       \" + regular retired: \" SIZE_FORMAT \" + humongous (with waste): \" SIZE_FORMAT \" = \" SIZE_FORMAT,\n-                       available_mutator, consumed_mutator, available_collector, consumed_collector,\n-                       retired_young, retired_young_humongous, \n-                       (available_mutator + consumed_mutator + available_collector + consumed_collector +\n-                        retired_young + retired_young_humongous));\n-    log_info(gc, free)(\"Free set OLD is old_collector available: \" SIZE_FORMAT \" + old_collector consumed: \" SIZE_FORMAT\n-                       \" + regular retired: \" SIZE_FORMAT \" + humongous (with waste): \" SIZE_FORMAT \" = \" SIZE_FORMAT,\n-                       available_old_collector, consumed_old_collector, retired_old, retired_old_humongous, \n-                       (available_old_collector + consumed_old_collector + retired_old + retired_old_humongous));\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":0,"deletions":68,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -1541,0 +1541,39 @@\n+\n+    \/\/ We defer generation resizing actions until after cset regions have been recycled.  We do this even following an\n+    \/\/ abbreviated cycle.\n+    if (heap->mode()->is_generational()) {\n+      bool success;\n+      size_t region_xfer;\n+      const char* region_destination;\n+      ShenandoahYoungGeneration* young_gen = heap->young_generation();\n+      ShenandoahGeneration* old_gen = heap->old_generation();\n+\n+      size_t old_region_surplus = heap->get_old_region_surplus();\n+      size_t old_region_deficit = heap->get_old_region_deficit();\n+      if (old_region_surplus) {\n+        success = heap->generation_sizer()->transfer_to_young(old_region_surplus);\n+        region_destination = \"young\";\n+        region_xfer = old_region_surplus;\n+      } else if (old_region_deficit) {\n+        success = heap->generation_sizer()->transfer_to_old(old_region_deficit);\n+        region_destination = \"old\";\n+        region_xfer = old_region_deficit;\n+        if (!success) {\n+          ((ShenandoahOldHeuristics *) old_gen->heuristics())->trigger_cannot_expand();\n+        }\n+      } else {\n+        region_destination = \"none\";\n+        region_xfer = 0;\n+        success = true;\n+      }\n+      heap->set_old_region_surplus(0);\n+      heap->set_old_region_deficit(0);\n+      size_t young_available = young_gen->available();\n+      size_t old_available = old_gen->available();\n+      log_info(gc, ergo)(\"After cleanup, %s \" SIZE_FORMAT \" regions to %s to prepare for next gc, old available: \"\n+                         SIZE_FORMAT \"%s, young_available: \" SIZE_FORMAT \"%s\",\n+                         success? \"successfully transferred\": \"failed to transfer\", region_xfer, region_destination,\n+                         byte_size_in_proper_unit(old_available), proper_unit_for_byte_size(old_available),\n+                         byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available));\n+    }\n+    heap->clear_cancelled_gc(true \/* clear oom handler *\/);\n@@ -1542,1 +1581,0 @@\n-  heap->clear_cancelled_gc(true \/* clear oom handler *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -716,5 +716,0 @@\n-#undef KELVIN_AVAILABLE\n-#ifdef KELVIN_AVAILABLE\n-  log_info(gc, free)(\"%s::available() returning \" SIZE_FORMAT \" as capacity: \" SIZE_FORMAT \" minus used: \" SIZE_FORMAT,\n-                     name(), result, capacity, in_use);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1259,1 +1259,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}