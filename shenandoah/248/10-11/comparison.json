{"files":[{"patch":"@@ -790,1 +790,0 @@\n-\n@@ -793,4 +792,0 @@\n-        if (ShenandoahVerify) {\n-          heap->verifier()->verify_before_evacuation();\n-        }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -365,1 +365,10 @@\n-  if (!heap->collection_set()->is_empty()) {\n+  size_t humongous_regions_promoted = heap->get_promotable_humongous_regions();\n+  size_t regular_regions_promoted_in_place = heap->get_regular_regions_promoted_in_place();\n+  if (!heap->collection_set()->is_empty() || (humongous_regions_promoted + regular_regions_promoted_in_place > 0)) {\n+    \/\/ Even if the collection set is empty, we need to do evacuation if there are regions to be promoted in place.\n+    \/\/ Degenerated evacuation takes responsibility for registering objects and setting the remembered set cards to dirty.\n+\n+    if (ShenandoahVerify) {\n+      heap->verifier()->verify_before_evacuation();\n+    }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -696,1 +696,2 @@\n-  assert(_used >= bytes, \"cannot reduce bytes used by generation below zero\");\n+  assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n+\t (_used >= bytes), \"cannot reduce bytes used by generation below zero\");\n@@ -730,0 +731,1 @@\n+  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n@@ -735,1 +737,2 @@\n-  assert(_max_capacity + increment <= ShenandoahHeap::heap()->max_capacity(), \"Generation cannot be larger than heap size\");\n+  assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n+\t (_max_capacity + increment <= ShenandoahHeap::heap()->max_capacity()), \"Generation cannot be larger than heap size\");\n@@ -741,2 +744,2 @@\n-  assert(!ShenandoahHeap::heap()->mode()->is_generational() ||\n-         (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() >= _used),\n+  assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n+\t (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() >= _used),\n@@ -747,0 +750,1 @@\n+  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n@@ -760,2 +764,2 @@\n-  assert(!ShenandoahHeap::heap()->mode()->is_generational() ||\n-         (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() >= _used),\n+  assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n+\t (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() >= _used),\n@@ -763,2 +767,3 @@\n-  assert(_used <= _max_capacity, \"Cannot use more than capacity\");\n-  assert(!ShenandoahHeap::heap()->mode()->is_generational() ||\n+  assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n+\t (_used <= _max_capacity), \"Cannot use more than capacity\");\n+  assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1147,1 +1147,1 @@\n-          _verify_size_exact,           \/\/ expect generation and heap sizes to match exactly\n+          _verify_size_disable,        \/\/ if we degenerate during evacuation, usage not valid: padding and deferred accounting\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}