{"files":[{"patch":"@@ -209,1 +209,1 @@\n-    size_t capacity    = ShenandoahHeap::heap()->soft_max_capacity();\n+    size_t capacity    = ShenandoahHeap::heap()->max_capacity();\n@@ -337,1 +337,2 @@\n-  size_t available = _generation->available();\n+  size_t usage = _generation->used();\n+  size_t available = (capacity > usage)? capacity - usage: 0;\n@@ -408,1 +409,2 @@\n-  size_t available = _generation->available();\n+  size_t usage = _generation->used();\n+  size_t available = (capacity > usage)? capacity - usage: 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,2 @@\n-  size_t available    = _generation->available();\n+  size_t usage        = _generation->used();\n+  size_t available    = (capacity > usage)? capacity - usage: 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -558,1 +558,4 @@\n-  return _generation->soft_max_capacity() \/ 100 * min_free_threshold;\n+  \/\/ Note that soft_max_capacity() \/ 100 * min_free_threshold is smaller than max_capacity() \/ 100 * min_free_threshold.\n+  \/\/ We want to behave conservatively here, so use max_capacity().  By returning a larger value, we cause the GC to\n+  \/\/ trigger when the remaining amount of free shrinks below the larger threshold.\n+  return _generation->max_capacity() \/ 100 * min_free_threshold;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-    assert(heap->old_generation()->used_regions_size() <= heap->old_generation()->soft_max_capacity(),\n+    assert(heap->old_generation()->used_regions_size() <= heap->old_generation()->max_capacity(),\n@@ -185,1 +185,1 @@\n-    assert(heap->young_generation()->used_regions_size() <= heap->young_generation()->soft_max_capacity(),\n+    assert(heap->young_generation()->used_regions_size() <= heap->young_generation()->max_capacity(),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -699,1 +699,1 @@\n-  size_t result = soft_max_capacity() \/ ShenandoahHeapRegion::region_size_bytes();\n+  size_t result = max_capacity() \/ ShenandoahHeapRegion::region_size_bytes();\n@@ -714,1 +714,1 @@\n-  size_t soft_capacity = soft_max_capacity();\n+  size_t soft_capacity = max_capacity();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -518,1 +518,1 @@\n-    _generation_sizer.heap_size_changed(soft_max_capacity());\n+    _generation_sizer.heap_size_changed(max_capacity());\n@@ -526,1 +526,1 @@\n-    _global_generation = new ShenandoahGlobalGeneration(true, _max_workers, soft_max_capacity(), soft_max_capacity());\n+    _global_generation = new ShenandoahGlobalGeneration(true, _max_workers, max_capacity(), max_capacity());\n@@ -532,1 +532,1 @@\n-    _young_generation = new ShenandoahYoungGeneration(_max_workers, soft_max_capacity(), soft_max_capacity());\n+    _young_generation = new ShenandoahYoungGeneration(_max_workers, max_capacity(), max_capacity());\n@@ -534,1 +534,1 @@\n-    _global_generation = new ShenandoahGlobalGeneration(false, _max_workers, soft_max_capacity(), soft_max_capacity());\n+    _global_generation = new ShenandoahGlobalGeneration(false, _max_workers, max_capacity(), max_capacity());\n@@ -829,0 +829,2 @@\n+#ifdef KELVIN_DEPRECATE\n+  \/\/ soft_max affects heuristic triggers, but has no impact on generation sizes\n@@ -836,0 +838,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    log_info(gc, init)(\"Young Generation Initial Size: \" SIZE_FORMAT \"%s\",\n+    log_info(gc, init)(\"Young Generation Soft Size: \" SIZE_FORMAT \"%s\",\n@@ -57,1 +57,1 @@\n-    log_info(gc, init)(\"Old Generation Initial Size: \" SIZE_FORMAT \"%s\",\n+    log_info(gc, init)(\"Old Generation Soft Size: \" SIZE_FORMAT \"%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-    size_t generation_capacity = generation->soft_max_capacity();\n+    size_t generation_capacity = generation->max_capacity();\n@@ -450,1 +450,1 @@\n-        \/\/ Promoted-in-place regions are labeled as old, but generation->soft_max_capacity() has not yet been increased\n+        \/\/ Promoted-in-place regions are labeled as old, but generation->max_capacity() has not yet been increased\n@@ -453,1 +453,1 @@\n-        \/\/ Promoted-in-place regions are labeled as old, but generation->soft_max_capacity() has not yet been decreased\n+        \/\/ Promoted-in-place regions are labeled as old, but generation->max_capacity() has not yet been decreased\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}