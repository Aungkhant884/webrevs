{"files":[{"patch":"@@ -462,1 +462,3 @@\n-  _free_sets.make_free(idx, OldCollector, alloc_capacity(region));\n+  if (alloc_capacity(region) >= PLAB::min_size() * HeapWordSize) {\n+    _free_sets.make_free(idx, OldCollector, alloc_capacity(region));\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -228,1 +228,0 @@\n-  assert(heap->mode()->is_generational(), \"Only generational mode uses evacuation budgets.\");\n@@ -358,2 +357,0 @@\n-  assert(heap->mode()->is_generational(), \"Only generational mode uses evacuation budgets.\");\n-\n@@ -662,1 +659,0 @@\n-  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n@@ -672,1 +668,0 @@\n-  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n@@ -679,1 +674,0 @@\n-  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n@@ -689,1 +683,0 @@\n-  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n@@ -727,1 +720,0 @@\n-  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n@@ -748,1 +740,0 @@\n-  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Only generational mode accounts for used within generations\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}