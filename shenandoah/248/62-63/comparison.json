{"files":[{"patch":"@@ -822,10 +822,0 @@\n-\n-#ifdef KELVIN_DEPRECATE\n-  \/\/ soft_max affects heuristic triggers, but has no impact on generation sizes\n-  if (mode()->is_generational()) {\n-    size_t max_capacity_young = _generation_sizer.max_young_size();\n-    size_t min_capacity_young = _generation_sizer.min_young_size();\n-    size_t new_capacity_young = clamp(v, min_capacity_young, max_capacity_young);\n-    _young_generation->set_soft_max_capacity(new_capacity_young);\n-  }\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -406,1 +406,1 @@\n-  static void validate_usage(const bool adjust_for_padding, const bool adjust_for_deferred_accounting,\n+  static void validate_usage(const bool adjust_for_padding,\n@@ -411,18 +411,0 @@\n-    if (adjust_for_deferred_accounting) {\n-      ShenandoahGeneration* young_generation = heap->young_generation();\n-      size_t humongous_regions_promoted = heap->get_promotable_humongous_regions();\n-      size_t humongous_bytes_promoted = heap->get_promotable_humongous_usage();\n-      size_t total_regions_promoted = humongous_regions_promoted;\n-      size_t bytes_promoted_in_place = 0;\n-      if (total_regions_promoted > 0) {\n-        bytes_promoted_in_place = humongous_bytes_promoted;\n-      }\n-      if (generation->is_young()) {\n-        generation_used -= bytes_promoted_in_place;\n-        generation_used_regions -= total_regions_promoted;\n-      } else if (generation->is_old()) {\n-        generation_used += bytes_promoted_in_place;\n-        generation_used_regions += total_regions_promoted;\n-      }\n-      \/\/ else, global validation doesn't care where the promoted-in-place data is tallied.\n-    }\n@@ -446,11 +428,0 @@\n-    if (adjust_for_deferred_accounting) {\n-      humongous_regions_promoted = heap->get_promotable_humongous_regions();\n-      size_t transferred_regions = humongous_regions_promoted;\n-      if (generation->is_old()) {\n-        \/\/ Promoted-in-place regions are labeled as old, but generation->max_capacity() has not yet been increased\n-        generation_capacity += transferred_regions * ShenandoahHeapRegion::region_size_bytes();\n-      } else if (generation->is_young()) {\n-        \/\/ Promoted-in-place regions are labeled as old, but generation->max_capacity() has not yet been decreased\n-        generation_capacity -= transferred_regions * ShenandoahHeapRegion::region_size_bytes();\n-      }\n-    }\n@@ -463,14 +434,0 @@\n-    if (adjust_for_deferred_accounting) {\n-      size_t promoted_humongous_bytes = heap->get_promotable_humongous_usage();\n-      size_t promoted_regions_span = humongous_regions_promoted * ShenandoahHeapRegion::region_size_bytes();\n-      assert(promoted_regions_span >= promoted_humongous_bytes, \"sanity\");\n-      size_t promoted_waste = promoted_regions_span - promoted_humongous_bytes;\n-      if (generation->is_old()) {\n-        \/\/ Promoted-in-place regions are labeled as old, but generation->get_humongous_waste() has not yet been increased\n-        humongous_waste += promoted_waste;\n-      } else if (generation->is_young()) {\n-        \/\/ Promoted-in-place regions are labeled as old, but generation->get_humongous_waste() has not yet been decreased\n-        assert(humongous_waste >= promoted_waste, \"Cannot promote in place more waste than exists in young\");\n-        humongous_waste -= promoted_waste;\n-      }\n-    }\n@@ -931,11 +888,0 @@\n-\n-#ifdef KELVIN_DEPRECATE\n-    \/\/ I think I can also deprecate second argument to validate_usage:\n-    \/\/ that is always false\n-\n-    if (sizeness == _verify_size_adjusted_for_deferred_accounting) {\n-      ShenandoahGenerationStatsClosure::validate_usage(false, true, label, _heap->old_generation(), cl.old);\n-      ShenandoahGenerationStatsClosure::validate_usage(false, true, label, _heap->young_generation(), cl.young);\n-      ShenandoahGenerationStatsClosure::validate_usage(false, false, label, _heap->global_generation(), cl.global);\n-    } else\n-#endif\n@@ -943,3 +889,3 @@\n-      ShenandoahGenerationStatsClosure::validate_usage(false, false, label, _heap->old_generation(), cl.old);\n-      ShenandoahGenerationStatsClosure::validate_usage(true, false, label, _heap->young_generation(), cl.young);\n-      ShenandoahGenerationStatsClosure::validate_usage(true, false, label, _heap->global_generation(), cl.global);\n+      ShenandoahGenerationStatsClosure::validate_usage(false, label, _heap->old_generation(), cl.old);\n+      ShenandoahGenerationStatsClosure::validate_usage(true, label, _heap->young_generation(), cl.young);\n+      ShenandoahGenerationStatsClosure::validate_usage(true, label, _heap->global_generation(), cl.global);\n@@ -947,3 +893,3 @@\n-      ShenandoahGenerationStatsClosure::validate_usage(false, false, label, _heap->old_generation(), cl.old);\n-      ShenandoahGenerationStatsClosure::validate_usage(false, false, label, _heap->young_generation(), cl.young);\n-      ShenandoahGenerationStatsClosure::validate_usage(false, false, label, _heap->global_generation(), cl.global);\n+      ShenandoahGenerationStatsClosure::validate_usage(false, label, _heap->old_generation(), cl.old);\n+      ShenandoahGenerationStatsClosure::validate_usage(false, label, _heap->young_generation(), cl.young);\n+      ShenandoahGenerationStatsClosure::validate_usage(false, label, _heap->global_generation(), cl.global);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":7,"deletions":61,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -152,5 +152,1 @@\n-    _verify_size_adjusted_for_padding,\n-#ifdef KELVIN_DEPRECATE\n-    \/\/ Expect promote-in-place adjustments: usage within regions promoted in place is transferred at end of update refs\n-    _verify_size_adjusted_for_deferred_accounting\n-#endif\n+    _verify_size_adjusted_for_padding\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}