{"files":[{"patch":"@@ -458,4 +458,1 @@\n-  _promotion_failed = false;\n-  _cannot_expand_trigger = false;\n-  _fragmentation_trigger = false;\n-  _growth_trigger = false;\n+  clear_triggers();\n@@ -467,4 +464,1 @@\n-  _promotion_failed = false;\n-  _cannot_expand_trigger = false;\n-  _fragmentation_trigger = false;\n-  _growth_trigger = false;\n+  clear_triggers();\n@@ -476,4 +470,1 @@\n-  _promotion_failed = false;\n-  _cannot_expand_trigger = false;\n-  _fragmentation_trigger = false;\n-  _growth_trigger = false;\n+  clear_triggers();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -171,4 +171,0 @@\n-\n-#define shenandoah_assert_control_thread() \\\n-                    assert(Thread::current() == ShenandoahHeap::heap()->control_thread(), \"Expected control thread\")\n-\n@@ -231,1 +227,0 @@\n-#define shenandoah_assert_control_thread()\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -198,2 +198,0 @@\n-#ifdef ASSERT\n-  \/\/ If Assertions are on, we'll dump each region selected for the collection set.  Otherwise, too much detail.\n@@ -208,1 +206,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-      assert(false, \"The request type %d is unrecognized\", req.type());\n+      ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}