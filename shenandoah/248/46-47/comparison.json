{"files":[{"patch":"@@ -970,1 +970,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3067,35 +3067,0 @@\n-#ifdef KELVIN_DEPRECATE\n-    \/\/ Promote aged humongous regions.  We know that all of the regions to be transferred exist in young.\n-    size_t humongous_regions_promoted = get_promotable_humongous_regions();\n-    size_t humongous_bytes_promoted = get_promotable_humongous_usage();\n-    size_t humongous_waste_promoted =\n-      humongous_regions_promoted * ShenandoahHeapRegion::region_size_bytes() - humongous_bytes_promoted;\n-    size_t regular_regions_promoted_in_place = get_regular_regions_promoted_in_place();\n-    size_t total_regions_promoted = humongous_regions_promoted;\n-    size_t bytes_promoted_in_place = 0;\n-    if (total_regions_promoted > 0) {\n-      bytes_promoted_in_place = humongous_bytes_promoted;\n-      log_info(gc, ergo)(\"Promoted \" SIZE_FORMAT \" humongous and \" SIZE_FORMAT \" regular regions in place\"\n-                         \", representing total usage of \" SIZE_FORMAT,\n-                         humongous_regions_promoted, regular_regions_promoted_in_place, bytes_promoted_in_place);\n-      size_t free_old_regions = old_generation()->free_unaffiliated_regions();\n-      \/\/ usage, affiliated region counts, and humongous waste are now accounted when the regions are promoted\n-\n-      \/\/ Decrease usage within young before we transfer capacity to old in order to avoid certain assertion failures.\n-      young_generation()->decrease_humongous_waste(humongous_waste_promoted);\n-      young_generation()->decrease_used(bytes_promoted_in_place);\n-      young_generation()->decrease_affiliated_region_count(total_regions_promoted);\n-\n-      if (free_old_regions < total_regions_promoted) {\n-        \/\/ Regions that were promoted in place were transferred at the time they were promoted.\n-        size_t needed_regions = total_regions_promoted - free_old_regions;\n-        generation_sizer()->force_transfer_to_old(needed_regions);\n-      }\n-\n-      \/\/ usage, affiliated region counts, and humongous waste are now accounted when the regions are promoted\n-\n-      old_generation()->increase_affiliated_region_count(total_regions_promoted);\n-      old_generation()->increase_used(bytes_promoted_in_place);\n-      old_generation()->increase_humongous_waste(humongous_waste_promoted);\n-    }\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -106,2 +106,1 @@\n-      set_affiliation(affiliation);\n-      ShenandoahHeap::heap()->generation_for(affiliation)->increment_affiliated_region_count();\n+      assert(this->affiliation() == affiliation, \"Region affiliation should already be established\");\n@@ -127,2 +126,7 @@\n-     set_affiliation(YOUNG_GENERATION);\n-     ShenandoahHeap::heap()->young_generation()->increment_affiliated_region_count();\n+     if (affiliation() != YOUNG_GENERATION) {\n+       if (is_old()) {\n+\t ShenandoahHeap::heap()->old_generation()->decrement_affiliated_region_count();\n+       }\n+       set_affiliation(YOUNG_GENERATION);\n+       ShenandoahHeap::heap()->young_generation()->increment_affiliated_region_count();\n+     }\n@@ -181,0 +185,1 @@\n+  \/\/ Don't bother to account for affiliated regions during Full GC.  We recompute totals at end.\n@@ -182,1 +187,0 @@\n-  ShenandoahHeap::heap()->generation_for(affiliation)->increment_affiliated_region_count();\n@@ -214,1 +218,1 @@\n-  ShenandoahHeap::heap()->generation_for(affiliation)->increment_affiliated_region_count();\n+  \/\/ Don't bother to account for affiliated regions during Full GC.  We recompute totals at end.\n@@ -1037,1 +1041,0 @@\n-\n@@ -1039,0 +1042,1 @@\n+\n@@ -1126,1 +1130,1 @@\n-    young_generation->increase_affiliated_region_count(spanned_regions);\n+    old_generation->increase_affiliated_region_count(spanned_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}