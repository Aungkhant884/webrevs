{"files":[{"patch":"@@ -122,3 +122,3 @@\n-    \/\/ sort the promotion-eligible regions according to live-data-bytes so that we can first reclaim the larger numbers\n-    \/\/ of regions that require less evacuation effort.  This prioritizes garbage first, expanding the allocation pool before\n-    \/\/ we begin the work of reclaiming regions that require more effort.\n+    \/\/ Sort the promotion-eligible regions according to live-data-bytes so that we can first reclaim regions that require\n+    \/\/ less evacuation effort.  This prioritizes garbage first, expanding the allocation pool before we begin the work of\n+    \/\/ reclaiming regions that require more effort.\n@@ -145,0 +145,3 @@\n+            } else {\n+              \/\/ Since the remnant is so small that it cannot be filled, we don't have to worry about any accidental\n+              \/\/ allocations occuring within this region before the region is promoted in place.\n@@ -146,1 +149,0 @@\n-            \/\/ else, the remnant is too small to be allocated by any thread, so we don't have a problem.\n@@ -164,2 +166,2 @@\n-\n-        \/\/ Only anticipate to promote regular regions if garbage() is above threshold.  Note that certain regions that are\n+        \/\/ We only anticipate to promote regular regions if garbage() is above threshold.  Tenure-aged regions with less\n+        \/\/ garbage are promoted in place.  These take a different path to old-gen.  Note that certain regions that are\n@@ -167,4 +169,6 @@\n-        \/\/ the region would be promoted in place) may be eligible for promotion by the time promotion takes place because\n-        \/\/ more garbage is found within the region between now and then.  This should not happen if we are properly adapting\n-        \/\/ the tenure age.  We won't tenure objects until they exhibit at least one full GC pass without further decline\n-        \/\/ in population.\n+        \/\/ the region would be promoted in place) may be eligible for evacuation promotion by the time promotion takes\n+        \/\/ place during a subsequent GC pass because more garbage is found within the region between now and then.  This\n+        \/\/ should not happen if we are properly adapting the tenure age.  The theory behind adaptive tenuring threshold\n+        \/\/ is to choose the youngest age that demonstrates no \"significant\" futher loss of population since the previous\n+        \/\/ age.  If not this, we expect the tenure age to demonstrate linear population decay for at least two population\n+        \/\/ samples, whereas we expect to observe exponetial population decay for ages younger than the tenure age.\n@@ -172,4 +176,5 @@\n-        \/\/ If this does occur by accident, the most likely impact is that there will not be sufficient available space in\n-        \/\/ old-gen to hold the live data to be copied out of this region, so the region will not be selected for the\n-        \/\/ current collection set.  The region will be tallied into the anticipated promotion for the next cycle and\n-        \/\/ will be collected at that time.\n+        \/\/ In the case that certain regions which were anticipated to be promoted in place need to be promoted by\n+        \/\/ evacuation, it may be the case that there is not sufficient reserve within old-gen to hold evacuation of\n+        \/\/ these regions.  The likely outcome is that these regions will not be selected for evacuation or promotion\n+        \/\/ in the current cycle and we will anticipate that they will be promoted in the next cycle.  This will cause\n+        \/\/ us to reserve more old-gen memory so that these objects can be promoted in the subsequent cycle.\n@@ -178,2 +183,3 @@\n-        \/\/   If we are auto-tuning the tenure age and this occurs, use this as guidance that tenure age should be increased.\n-\n+        \/\/   If we are auto-tuning the tenure age and regions that were anticipated to be promoted in place end up\n+        \/\/   being promoted by evacuation, this event should feed into the tenure-age-selection heuristic so that\n+        \/\/   the tenure age can be increased.\n@@ -208,2 +214,2 @@\n-        \/\/ Note that we keep going even if one region is excluded from selection because we need to accumulate all\n-        \/\/ eligible regions into promo_potential if not preselected.\n+        \/\/ We keep going even if one region is excluded from selection because we need to accumulate all eligible\n+        \/\/ regions that are not preselected into promo_potential\n@@ -222,0 +228,1 @@\n+  size_t region_size_bytes = ShenandoahHeapRegion::region_size_bytes();\n@@ -247,1 +254,1 @@\n-  size_t old_garbage_threshold = (ShenandoahHeapRegion::region_size_bytes() * ShenandoahOldGarbageThreshold) \/ 100;\n+  size_t old_garbage_threshold = (region_size_bytes * ShenandoahOldGarbageThreshold) \/ 100;\n@@ -259,1 +266,0 @@\n-\n@@ -263,1 +269,0 @@\n-\n@@ -283,1 +288,0 @@\n-          \/\/ Set garbage value to maximum value to force this into the sorted collection set.\n@@ -286,0 +290,2 @@\n+          \/\/ Set garbage value to maximum value to force this into the sorted collection set.\n+          garbage = region_size_bytes;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":28,"deletions":22,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -389,5 +389,1 @@\n-  \/\/ Clear triggers that might have been set during OLD marking.  Conditions are different now that this phase has finished.\n-  _promotion_failed = false;\n-  _cannot_expand_trigger = false;\n-  _fragmentation_trigger = false;\n-  _growth_trigger = false;\n+  clear_triggers();\n@@ -397,1 +393,1 @@\n-  \/\/ Clear any triggers that were set during mixed evacuations.  Conditions are different now that this phase has finished.\n+  \/\/ Clear any triggers that were set during mixed evacuations.  Conditions may be different now that this phase has finished.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}