{"files":[{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -33,0 +33,3 @@\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n+ *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n+ *\n@@ -35,24 +38,0 @@\n- \/**\n-  * @test id=iu\n-  * @bug 8237837 8244721\n-  * @summary  Shenandoah: assert(mem == __null) failed: only one safepoint\n-  * @requires vm.flavor == \"server\"\n-  * @requires vm.gc.Shenandoah\n-  *\n-  * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n-  *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n-  *\n-  *\/\n-\n-  \/**\n-   * @test id=generational\n-   * @bug 8237837 8244721\n-   * @summary  Shenandoah: assert(mem == __null) failed: only one safepoint\n-   * @requires vm.flavor == \"server\"\n-   * @requires vm.gc.Shenandoah\n-   *\n-   * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n-   *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n-   *\n-   *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/BarrierInInfiniteLoop.java","additions":4,"deletions":25,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -34,10 +34,0 @@\n- \/**\n-  * @test id=generational\n-  * @bug 8231405\n-  * @summary barrier expansion breaks if barrier is right after call to rethrow stub\n-  * @requires vm.gc.Shenandoah\n-  *\n-  * @run main\/othervm -XX:CompileOnly=CallMultipleCatchProjs::test -Xcomp -Xverify:none -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational CallMultipleCatchProjs\n-  *\n-  *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/CallMultipleCatchProjs.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -36,11 +36,0 @@\n-\/**\n- * @test id=generational\n- * @bug 8238385\n- * @summary CTW: C2 (Shenandoah) compilation fails with \"Range check dependent CastII node was not removed\"\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc:+open\n- *\n- * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n- *                   FoldIfAfterExpansion\n- *\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/FoldIfAfterExpansion.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -35,11 +35,0 @@\n- \/**\n-  * @test id=generational\n-  * @bug 8237007 8260637\n-  * @summary Shenandoah: assert(_base == Tuple) failure during C2 compilation\n-  * @requires vm.flavor == \"server\"\n-  * @requires vm.gc.Shenandoah\n-  *\n-  * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational LRBRightAfterMemBar\n-  *\n-  *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/LRBRightAfterMemBar.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -35,11 +35,0 @@\n- \/**\n-  * @test id=generational\n-  * @bug 8258393 8263376\n-  * @summary Shenandoah: \"graph should be schedulable\" assert failure\n-  * @requires vm.flavor == \"server\"\n-  * @requires vm.gc.Shenandoah\n-  *\n-  * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation -XX:ShenandoahGCMode=generational TestBadRawMemoryAfterCall\n-  *\n-  *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBadRawMemoryAfterCall.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -32,7 +32,0 @@\n-\/*\n- * @test id=generational\n- * bug 8281811\n- * @summary assert(_base == Tuple) failed: Not a Tuple after JDK-8280799\n- * @requires vm.gc.Shenandoah\n- * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation -XX:LoopMaxUnroll=1 -XX:ShenandoahGCMode=generational TestBarrierAboveProj\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierAboveProj.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -34,10 +34,0 @@\n- \/**\n-  * @test id=generational\n-  * @bug 8252296\n-  * @summary Shenandoah: crash in CallNode::extract_projections\n-  * @requires vm.gc.Shenandoah\n-  *\n-  * @run main\/othervm -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:CompileOnly=TestBarrierExpandCallProjection::test TestBarrierExpandCallProjection\n-  *\n-  *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierExpandCallProjection.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -36,12 +36,0 @@\n- \/**\n-  * @test id=generational\n-  * @bug 8255400\n-  * @summary C2 failures after JDK-8255000\n-  * @requires vm.gc.Shenandoah\n-  * @modules java.base\/jdk.internal.misc:+open\n-  *\n-  * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestBarrierExpansionDeadMemPhi\n-  *\n-  *\n-  *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierExpansionDeadMemPhi.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/* @test id=default\n+\/* @test\n@@ -31,5 +31,0 @@\n-\/* @test id=generational\n- * @summary test C1 arraycopy intrinsic\n- * @requires vm.gc.Shenandoah\n- * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestC1ArrayCopyNPE\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestC1ArrayCopyNPE.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/* @test id=default\n+\/* @test\n@@ -34,8 +34,0 @@\n-\/* @test id=generational\n- * @summary test C1 vectorized mismatch intrinsic\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestC1VectorizedMismatch\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestC1VectorizedMismatch.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -35,10 +35,0 @@\n-\/**\n- * @test id=generational\n- * @key stress randomness\n- * @summary Logic that moves a null check in the expanded barrier may cause a memory access that doesn't depend on the barrier to bypass the null check\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\"\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n- *                   -XX:+StressGCM -XX:+StressLCM TestExpandedWBLostNullCheckDep\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestExpandedWBLostNullCheckDep.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -39,14 +39,0 @@\n-\/**\n- * @test id=generational\n- * @enablePreview\n- * @bug 8259937\n- * @summary guarantee(loc != NULL) failed: missing saved register with native invoke\n- *\n- * @requires vm.flavor == \"server\"\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm --enable-native-access=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions\n- *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational TestLinkToNativeRBP\n- *\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestLinkToNativeRBP.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -35,11 +35,0 @@\n-\/**\n- * @test id=generational\n- * @bug 8251527\n- * @summary CTW: C2 (Shenandoah) compilation fails with SEGV due to unhandled catchproj == NUL\n- * @requires vm.flavor == \"server\"\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:CompileOnly=TestLoadPinnedAfterCall.test -XX:CompileCommand=dontinline,TestLoadPinnedAfterCall.not_inlined -XX:-TieredCompilation -XX:-BackgroundCompilation TestLoadPinnedAfterCall\n- *\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestLoadPinnedAfterCall.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -36,12 +36,0 @@\n- *\n- *\/\n-\n-\/**\n- * @test id=generational\n- * @summary cast before unsafe access moved in dominating null check null path causes crash\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc:+open\n- *\n- * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation\n- *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n- *                   TestMaybeNullUnsafeAccess\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestMaybeNullUnsafeAccess.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -34,10 +34,0 @@\n-\/**\n- * @test id=generational\n- * @summary implicit null check on brooks pointer must not cause crash\n- * @requires vm.gc.Shenandoah\n- * @requires vm.bits == \"64\"\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation\n- *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n- *                   -Xmx4G -XX:HeapBaseMinAddress=0x800000000 TestNullCheck\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestNullCheck.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,26 +56,0 @@\n-\/*\n- * @test id=generational\n- * @summary Shenandoah reference CAS test\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc:+open\n- *\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational                                                 TestReferenceCAS\n- * @run main\/othervm -Diters=100   -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -Xint                                           TestReferenceCAS\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-TieredCompilation                          TestReferenceCAS\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:TieredStopAtLevel=1                         TestReferenceCAS\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:TieredStopAtLevel=4                         TestReferenceCAS\n- *\/\n-\n-\/*\n- * @test id=generational-no-coops\n- * @summary Shenandoah reference CAS test\n- * @requires vm.gc.Shenandoah\n- * @requires vm.bits == \"64\"\n- * @modules java.base\/jdk.internal.misc:+open\n- *\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops                          TestReferenceCAS\n- * @run main\/othervm -Diters=100   -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -Xint                    TestReferenceCAS\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -XX:-TieredCompilation   TestReferenceCAS\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -XX:TieredStopAtLevel=1  TestReferenceCAS\n- * @run main\/othervm -Diters=20000 -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-UseCompressedOops -XX:TieredStopAtLevel=4  TestReferenceCAS\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestReferenceCAS.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -36,12 +36,0 @@\n-\/**\n- * @test id=generational\n- * @bug 8244663\n- * @summary Shenandoah: C2 assertion fails in Matcher::collect_null_checks\n- * @requires vm.flavor == \"server\"\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement\n- *                   -XX:ShenandoahGCMode=generational\n- *                   -XX:CompileCommand=dontinline,TestShenandoahCmpPAfterCall::not_inlined TestShenandoahCmpPAfterCall\n- *\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestShenandoahCmpPAfterCall.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -35,11 +35,0 @@\n-\/**\n- * @test id=generational\n- * @bug 8247824\n- * @summary CTW: C2 (Shenandoah) compilation fails with SEGV in SBC2Support::pin_and_expand\n- * @requires vm.flavor == \"server\"\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:LoopMaxUnroll=0 TestShenandoahLRBInOuterStripMinedLoop\n- *\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestShenandoahLRBInOuterStripMinedLoop.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=iu\n+ * @test\n@@ -34,9 +34,0 @@\n-\/*\n- * @test id=generational\n- * bug 8280885\n- * @summary Shenandoah: Some tests failed with \"EA: missing allocation reference path\"\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=generational\n- *                   -XX:CompileCommand=dontinline,TestUnexpectedIUBarrierEA::notInlined TestUnexpectedIUBarrierEA\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnexpectedIUBarrierEA.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -35,10 +35,0 @@\n-\/**\n- * @test id=generational\n- * @summary Miscompilation in Unsafe off-heap swap routines\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc:+open\n- *\n- * @run main\/othervm -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-TieredCompilation\n- *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n- *                   TestUnsafeOffheapSwap\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnsafeOffheapSwap.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test id=default\n+ * @test\n@@ -36,13 +36,0 @@\n-\n- \/**\n-  * @test id=generational\n-  * @key stress randomness\n-  * @summary Clearing control during final graph reshape causes memory barrier to loose dependency on null check\n-  * @requires vm.gc.Shenandoah\n-  * @requires vm.flavor == \"server\"\n-  * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation\n-  *                   -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational\n-  *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM\n-  *                   TestWriteBarrierClearControl\n-  *\n-  *\/\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestWriteBarrierClearControl.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -81,1 +81,3 @@\n-            allocate(args[1]);\n+            \/\/ Called from test, size is second argument\n+            String size = args[1];\n+            allocate(size);\n@@ -85,0 +87,2 @@\n+        \/\/ Called from jtreg, size is first argument\n+        String size = args[0];\n@@ -90,1 +94,1 @@\n-                          \"test\", args[0]);\n+                          \"test\", size);\n@@ -96,1 +100,1 @@\n-                          \"test\", args[0]);\n+                          \"test\", size);\n@@ -104,1 +108,1 @@\n-                          \"test\", args[0]);\n+                          \"test\", size);\n@@ -110,1 +114,1 @@\n-                          \"test\", args[0]);\n+                          \"test\", size);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestAllocOutOfMemory.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}