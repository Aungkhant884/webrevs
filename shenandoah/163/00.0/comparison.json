{"files":[{"patch":"@@ -96,1 +96,1 @@\n-    satb_write_barrier_pre(masm, obj, pre_val, thread, tmp, tosca_live, expand_call);\n+    satb_write_barrier_pre(masm, obj, pre_val, thread, tmp, rscratch1, tosca_live, expand_call);\n@@ -104,1 +104,2 @@\n-                                                           Register tmp,\n+                                                           Register tmp1,\n+                                                           Register tmp2,\n@@ -116,2 +117,2 @@\n-  assert_different_registers(obj, pre_val, tmp, rscratch1);\n-  assert(pre_val != noreg &&  tmp != noreg, \"expecting a register\");\n+  assert_different_registers(obj, pre_val, tmp1, tmp2);\n+  assert(pre_val != noreg && tmp1 != noreg && tmp2 != noreg, \"expecting a register\");\n@@ -125,1 +126,1 @@\n-    __ ldrw(tmp, in_progress);\n+    __ ldrw(tmp1, in_progress);\n@@ -128,1 +129,1 @@\n-    __ ldrb(tmp, in_progress);\n+    __ ldrb(tmp1, in_progress);\n@@ -130,1 +131,1 @@\n-  __ cbzw(tmp, done);\n+  __ cbzw(tmp1, done);\n@@ -144,2 +145,2 @@\n-  __ ldr(tmp, index);                      \/\/ tmp := *index_adr\n-  __ cbz(tmp, runtime);                    \/\/ tmp == 0?\n+  __ ldr(tmp1, index);                      \/\/ tmp := *index_adr\n+  __ cbz(tmp1, runtime);                    \/\/ tmp == 0?\n@@ -148,4 +149,4 @@\n-  __ sub(tmp, tmp, wordSize);              \/\/ tmp := tmp - wordSize\n-  __ str(tmp, index);                      \/\/ *index_adr := tmp\n-  __ ldr(rscratch1, buffer);\n-  __ add(tmp, tmp, rscratch1);             \/\/ tmp := tmp + *buffer_adr\n+  __ sub(tmp1, tmp1, wordSize);             \/\/ tmp := tmp - wordSize\n+  __ str(tmp1, index);                      \/\/ *index_adr := tmp\n+  __ ldr(tmp2, buffer);\n+  __ add(tmp1, tmp1, tmp2);                 \/\/ tmp := tmp + *buffer_adr\n@@ -154,1 +155,1 @@\n-  __ str(pre_val, Address(tmp, 0));\n+  __ str(pre_val, Address(tmp1, 0));\n@@ -318,1 +319,1 @@\n-    satb_write_barrier_pre(masm, noreg, dst, rthread, tmp, true, false);\n+    satb_write_barrier_pre(masm, noreg, dst, rthread, tmp, rscratch1, true, false);\n@@ -339,1 +340,1 @@\n-                                            Register dst, Address src, Register tmp1, Register tmp_thread) {\n+                                            Register dst, Address src, Register tmp1, Register tmp2) {\n@@ -342,1 +343,1 @@\n-    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp_thread);\n+    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp2);\n@@ -356,1 +357,1 @@\n-    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp_thread);\n+    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp2);\n@@ -365,1 +366,1 @@\n-    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp_thread);\n+    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp2);\n@@ -376,1 +377,2 @@\n-                           tmp1 \/* tmp *\/,\n+                           tmp1 \/* tmp1 *\/,\n+                           tmp2 \/* tmp2 *\/,\n@@ -410,1 +412,1 @@\n-                                             Address dst, Register val, Register tmp1, Register tmp2) {\n+                                             Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) {\n@@ -413,1 +415,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2);\n+    BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2, tmp3);\n@@ -419,2 +421,2 @@\n-    if (dst.base() != r3) {\n-      __ mov(r3, dst.base());\n+    if (dst.base() != tmp3) {\n+      __ mov(tmp3, dst.base());\n@@ -423,1 +425,1 @@\n-    __ lea(r3, dst);\n+    __ lea(tmp3, dst);\n@@ -427,1 +429,1 @@\n-                               r3 \/* obj *\/,\n+                               tmp3 \/* obj *\/,\n@@ -435,1 +437,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(r3, 0), noreg, noreg, noreg);\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), noreg, noreg, noreg, noreg);\n@@ -444,1 +446,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(r3, 0), val, noreg, noreg);\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), val, noreg, noreg, noreg);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":30,"deletions":28,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-                              Register tmp,\n+                              Register tmp1,\n+                              Register tmp2,\n@@ -83,1 +84,1 @@\n-                       Register dst, Address src, Register tmp1, Register tmp_thread);\n+                       Register dst, Address src, Register tmp1, Register tmp2);\n@@ -85,1 +86,1 @@\n-                        Address dst, Register val, Register tmp1, Register tmp2);\n+                        Address dst, Register val, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -677,1 +677,1 @@\n-    card_addr = __ as_Address(ArrayAddress(cardtable, index));\n+    card_addr = __ as_Address(ArrayAddress(cardtable, index), rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,3 +64,1 @@\n-size_t CardTable::compute_byte_map_size() {\n-  assert(_guard_index == cards_required(_whole_heap.word_size()) - 1,\n-                                        \"uninitialized, check declaration order\");\n+size_t CardTable::compute_byte_map_size(size_t num_bytes) {\n@@ -69,1 +67,1 @@\n-  return align_up(_guard_index + 1, MAX2(_page_size, granularity));\n+  return align_up(num_bytes, MAX2(_page_size, granularity));\n@@ -74,2 +72,0 @@\n-  _guard_index(0),\n-  _last_valid_index(0),\n@@ -95,2 +91,1 @@\n-  _guard_index = cards_required(_whole_heap.word_size()) - 1;\n-  _last_valid_index = _guard_index - 1;\n+  size_t num_cards = cards_required(_whole_heap.word_size());\n@@ -98,1 +93,3 @@\n-  _byte_map_size = compute_byte_map_size();\n+  \/\/ each card takes 1 byte; + 1 for the guard card\n+  size_t num_bytes = num_cards + 1;\n+  _byte_map_size = compute_byte_map_size(num_bytes);\n@@ -111,1 +108,1 @@\n-  os::trace_page_sizes(\"Card Table\", _guard_index + 1, _guard_index + 1,\n+  os::trace_page_sizes(\"Card Table\", num_bytes, num_bytes,\n@@ -125,1 +122,1 @@\n-  assert(byte_for(high_bound-1) <= &_byte_map[_last_valid_index], \"Checking end of map\");\n+  assert(byte_for(high_bound-1) <= &_byte_map[last_valid_index()], \"Checking end of map\");\n@@ -127,6 +124,3 @@\n-  CardValue* guard_card = &_byte_map[_guard_index];\n-  HeapWord* guard_page = align_down((HeapWord*)guard_card, _page_size);\n-  _guard_region = MemRegion(guard_page, _page_size);\n-  os::commit_memory_or_exit((char*)guard_page, _page_size, _page_size,\n-                            !ExecMem, \"card table last card\");\n-  *guard_card = last_card;\n+  CardValue* guard_card = &_byte_map[num_cards];\n+  assert(is_aligned(guard_card, _page_size), \"must be on its own OS page\");\n+  _guard_region = MemRegion((HeapWord*)guard_card, _page_size);\n@@ -135,3 +129,3 @@\n-  log_trace(gc, barrier)(\"    &_byte_map[0]: \" INTPTR_FORMAT \"  &_byte_map[_last_valid_index]: \" INTPTR_FORMAT,\n-                  p2i(&_byte_map[0]), p2i(&_byte_map[_last_valid_index]));\n-  log_trace(gc, barrier)(\"    _byte_map_base: \" INTPTR_FORMAT, p2i(_byte_map_base));\n+  log_trace(gc, barrier)(\"    &_byte_map[0]: \" PTR_FORMAT \"  &_byte_map[last_valid_index()]: \" PTR_FORMAT,\n+                  p2i(&_byte_map[0]), p2i(&_byte_map[last_valid_index()]));\n+  log_trace(gc, barrier)(\"    _byte_map_base: \" PTR_FORMAT, p2i(_byte_map_base));\n@@ -175,0 +169,1 @@\n+  assert(mr.intersection(_guard_region).is_empty(), \"precondition\");\n@@ -181,2 +176,0 @@\n-  \/\/ Never include the guard page.\n-  result = result.minus(_guard_region);\n@@ -190,1 +183,0 @@\n-  debug_only(verify_guard();)\n@@ -304,1 +296,1 @@\n-    assert(index_for(new_region.last()) <  _guard_index,\n+    assert(index_for(new_region.last()) <=  last_valid_index(),\n@@ -333,1 +325,1 @@\n-  log_trace(gc, barrier)(\"    _covered[%d].start(): \" INTPTR_FORMAT \" _covered[%d].last(): \" INTPTR_FORMAT,\n+  log_trace(gc, barrier)(\"    _covered[%d].start(): \" PTR_FORMAT \" _covered[%d].last(): \" PTR_FORMAT,\n@@ -335,1 +327,1 @@\n-  log_trace(gc, barrier)(\"    _committed[%d].start(): \" INTPTR_FORMAT \"  _committed[%d].last(): \" INTPTR_FORMAT,\n+  log_trace(gc, barrier)(\"    _committed[%d].start(): \" PTR_FORMAT \"  _committed[%d].last(): \" PTR_FORMAT,\n@@ -337,1 +329,1 @@\n-  log_trace(gc, barrier)(\"    byte_for(start): \" INTPTR_FORMAT \"  byte_for(last): \" INTPTR_FORMAT,\n+  log_trace(gc, barrier)(\"    byte_for(start): \" PTR_FORMAT \"  byte_for(last): \" PTR_FORMAT,\n@@ -339,1 +331,1 @@\n-  log_trace(gc, barrier)(\"    addr_for(start): \" INTPTR_FORMAT \"  addr_for(last): \" INTPTR_FORMAT,\n+  log_trace(gc, barrier)(\"    addr_for(start): \" PTR_FORMAT \"  addr_for(last): \" PTR_FORMAT,\n@@ -345,1 +337,0 @@\n-  debug_only(verify_guard();)\n@@ -387,6 +378,0 @@\n-void CardTable::verify_guard() {\n-  \/\/ For product build verification\n-  guarantee(_byte_map[_guard_index] == last_card,\n-            \"card table guard has been modified\");\n-}\n-\n@@ -402,4 +387,0 @@\n-void CardTable::verify() {\n-  verify_guard();\n-}\n-\n@@ -416,1 +397,1 @@\n-        log_error(gc, verify)(\"== CT verification failed: [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"]\", p2i(start), p2i(end));\n+        log_error(gc, verify)(\"== CT verification failed: [\" PTR_FORMAT \",\" PTR_FORMAT \"]\", p2i(start), p2i(end));\n@@ -439,1 +420,1 @@\n-  st->print_cr(\"Card table byte_map: [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] _byte_map_base: \" INTPTR_FORMAT,\n+  st->print_cr(\"Card table byte_map: [\" PTR_FORMAT \",\" PTR_FORMAT \"] _byte_map_base: \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":22,"deletions":41,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -1204,1 +1204,2 @@\n-             n->in(0) != NULL) {\n+             n->in(0) != NULL &&\n+             n->outcnt() == 2) {\n@@ -1242,1 +1243,1 @@\n-bool ShenandoahBarrierSetC2::final_graph_reshaping(Compile* compile, Node* n, uint opcode) const {\n+bool ShenandoahBarrierSetC2::final_graph_reshaping(Compile* compile, Node* n, uint opcode, Unique_Node_List& dead_nodes) const {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-  virtual bool final_graph_reshaping(Compile* compile, Node* n, uint opcode) const;\n+  virtual bool final_graph_reshaping(Compile* compile, Node* n, uint opcode, Unique_Node_List& dead_nodes) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,3 +51,0 @@\n-  \/\/ Disable Loom\n-  SHENANDOAH_ERGO_DISABLE_FLAG(VMContinuations);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    msg.append(\"Raw heap memory:\\n%s\", ss.as_string());\n+    msg.append(\"Raw heap memory:\\n%s\", ss.freeze());\n@@ -77,2 +77,2 @@\n-  msg.append(\"  mark:%s\\n\", mw_ss.as_string());\n-  msg.append(\"  region: %s\", ss.as_string());\n+  msg.append(\"  mark:%s\\n\", mw_ss.freeze());\n+  msg.append(\"  region: %s\", ss.freeze());\n@@ -90,1 +90,1 @@\n-    msg.append(\"  region: %s\", ss.as_string());\n+    msg.append(\"  region: %s\", ss.freeze());\n@@ -95,1 +95,1 @@\n-    msg.append(\"  %s\", ss.as_string());\n+    msg.append(\"  %s\", ss.freeze());\n@@ -107,1 +107,1 @@\n-      msg.append(\"  region: %s\", ss.as_string());\n+      msg.append(\"  region: %s\", ss.freeze());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -145,0 +145,4 @@\n+  private:\n+    template <typename T>\n+    static void oop_store_common(T* addr, oop value);\n+\n@@ -186,1 +190,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-inline void ShenandoahBarrierSet::AccessBarrier<decorators, BarrierSetT>::oop_store_not_in_heap(T* addr, oop value) {\n+inline void ShenandoahBarrierSet::AccessBarrier<decorators, BarrierSetT>::oop_store_common(T* addr, oop value) {\n@@ -267,0 +267,6 @@\n+template <DecoratorSet decorators, typename BarrierSetT>\n+template <typename T>\n+inline void ShenandoahBarrierSet::AccessBarrier<decorators, BarrierSetT>::oop_store_not_in_heap(T* addr, oop value) {\n+  oop_store_common(addr, value);\n+}\n+\n@@ -272,2 +278,1 @@\n-  shenandoah_assert_not_in_cset_except    (addr, value, value == NULL || ShenandoahHeap::heap()->cancelled_gc() || !ShenandoahHeap::heap()->is_concurrent_mark_in_progress());\n-  oop_store_not_in_heap(addr, value);\n+  oop_store_common(addr, value);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                  p2i(&_read_byte_map[0]), p2i(&_read_byte_map[_last_valid_index]));\n+                  p2i(&_read_byte_map[0]), p2i(&_read_byte_map[last_valid_index()]));\n@@ -67,1 +67,1 @@\n-bool ShenandoahCardTable::is_in_young(oop obj) const {\n+bool ShenandoahCardTable::is_in_young(const void* obj) const {\n@@ -82,1 +82,1 @@\n-  return _last_valid_index;\n+  return CardTable::last_valid_index();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  virtual bool is_in_young(oop obj) const;\n+  virtual bool is_in_young(const void* obj) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-\n+  set_name(\"Shenandoah Control Thread\");\n@@ -776,0 +776,1 @@\n+         cause == GCCause::_codecache_GC_aggressive ||\n@@ -958,10 +959,0 @@\n-void ShenandoahControlThread::print() const {\n-  print_on(tty);\n-}\n-\n-void ShenandoahControlThread::print_on(outputStream* st) const {\n-  st->print(\"Shenandoah Concurrent Thread\");\n-  Thread::print_on(st);\n-  st->cr();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -174,6 +174,0 @@\n-  const char* name() const { return \"ShenandoahControlThread\";}\n-\n-  \/\/ Printing\n-  void print_on(outputStream* st) const;\n-  void print() const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-    size_t card_count = card_table->cards_required(heap_rs.size() \/ HeapWordSize) - 1;\n+    size_t card_count = card_table->cards_required(heap_rs.size() \/ HeapWordSize);\n@@ -1711,0 +1711,1 @@\n+  tcl->do_thread(_control_thread);\n@@ -1768,1 +1769,1 @@\n-      obj = ShenandoahBarrierSet::resolve_forwarded_not_null(obj);\n+      obj = ShenandoahBarrierSet::barrier_set()->load_reference_barrier(obj);\n@@ -1878,1 +1879,1 @@\n-      obj = ShenandoahBarrierSet::resolve_forwarded_not_null(obj);\n+      obj = ShenandoahBarrierSet::barrier_set()->load_reference_barrier(obj);\n@@ -2376,4 +2377,0 @@\n-void ShenandoahHeap::flush_nmethod(nmethod* nm) {\n-  ShenandoahCodeRoots::flush_nmethod(nm);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -653,1 +653,0 @@\n-  void flush_nmethod(nmethod* nm);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-  ResourceMark rm;\n@@ -94,1 +93,1 @@\n-  fatal(\"%s\", ss.as_string());\n+  fatal(\"%s\", ss.freeze());\n@@ -410,0 +409,1 @@\n+\n@@ -423,1 +423,4 @@\n-  st->print(\"|BTE \" INTPTR_FORMAT_W(12) \", \" INTPTR_FORMAT_W(12) \", \" INTPTR_FORMAT_W(12),\n+\n+#define SHR_PTR_FORMAT \"%12\" PRIxPTR\n+\n+  st->print(\"|BTE \" SHR_PTR_FORMAT  \", \" SHR_PTR_FORMAT \", \" SHR_PTR_FORMAT,\n@@ -425,1 +428,1 @@\n-  st->print(\"|TAMS \" INTPTR_FORMAT_W(12),\n+  st->print(\"|TAMS \" SHR_PTR_FORMAT,\n@@ -427,1 +430,1 @@\n-  st->print(\"|UWM \" INTPTR_FORMAT_W(12),\n+  st->print(\"|UWM \" SHR_PTR_FORMAT,\n@@ -439,0 +442,2 @@\n+\n+#undef SHR_PTR_FORMAT\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -37,4 +37,2 @@\n-#include \"runtime\/continuation.hpp\"\n-  \/\/ Tell the sweeper that we start a marking cycle.\n-  if (!Continuations::is_gc_marking_cycle_active()) {\n-    Continuations::on_gc_marking_cycle_start();\n+  if (!CodeCache::is_gc_marking_cycle_active()) {\n+    CodeCache::on_gc_marking_cycle_start();\n@@ -47,1 +45,0 @@\n-  \/\/ Tell the sweeper that we finished a marking cycle.\n@@ -51,1 +48,1 @@\n-    Continuations::on_gc_marking_cycle_finish();\n+    CodeCache::on_gc_marking_cycle_finish();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -171,1 +171,0 @@\n-    assert(heap->cancelled_gc() || Continuations::enabled(), \"What else?\");\n@@ -254,1 +253,1 @@\n-          oops->length(), _oops_count, count, p2i(nm()->oops_begin()), p2i(nm()->oops_end()), debug_stream.as_string());\n+          oops->length(), _oops_count, count, p2i(nm()->oops_begin()), p2i(nm()->oops_end()), debug_stream.freeze());\n@@ -303,3 +302,0 @@\n-  if (Thread::current()->is_Code_cache_sweeper_thread()) {\n-    wait_until_concurrent_iteration_done();\n-  }\n@@ -310,15 +306,0 @@\n-  ShenandoahReentrantLocker data_locker(data->lock());\n-  data->mark_unregistered();\n-}\n-\n-void ShenandoahNMethodTable::flush_nmethod(nmethod* nm) {\n-  assert(CodeCache_lock->owned_by_self(), \"Must have CodeCache_lock held\");\n-  assert(Thread::current()->is_Code_cache_sweeper_thread(), \"Must from Sweep thread\");\n-  ShenandoahNMethod* data = ShenandoahNMethod::gc_data(nm);\n-  assert(data != NULL, \"Sanity\");\n-\n-  \/\/ Can not alter the array when iteration is in progress\n-  wait_until_concurrent_iteration_done();\n-  log_flush_nmethod(nm);\n-\n-  ShenandoahLocker locker(&_lock);\n@@ -351,1 +332,0 @@\n-  assert(!iteration_in_progress(), \"Can not happen\");\n@@ -432,10 +412,0 @@\n-void ShenandoahNMethodTable::log_flush_nmethod(nmethod* nm) {\n-  LogTarget(Debug, gc, nmethod) log;\n-  if (!log.is_enabled()) {\n-    return;\n-  }\n-\n-  ResourceMark rm;\n-  log.print(\"Flush NMethod: (\" PTR_FORMAT \")\", p2i(nm));\n-}\n-\n@@ -516,5 +486,2 @@\n-      \/\/ A nmethod can become a zombie before it is unregistered.\n-      if (nmr->nm()->is_alive()) {\n-        nmr->assert_correct();\n-        f->do_code_blob(nmr->nm());\n-      }\n+      nmr->assert_correct();\n+      f->do_code_blob(nmr->nm());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":3,"deletions":36,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -604,1 +604,2 @@\n-          \/\/ failure if nextp points to end of heap.\n+          \/\/ failure if nextp points to end of heap. Must also not attempt to read past last\n+          \/\/ valid index for card table.\n@@ -606,0 +607,1 @@\n+          last_card = MIN2(last_card, last_valid_index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  virtual bool is_unloading(CompiledMethod* method) const {\n+  virtual bool has_dead_oop(CompiledMethod* method) const {\n@@ -179,1 +179,1 @@\n-      ShenandoahCodeRoots::purge(heap->workers());\n+      ShenandoahCodeRoots::purge();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -920,1 +920,0 @@\n-        ResourceMark rm;\n@@ -924,1 +923,1 @@\n-              label, reg_live, verf_live, ss.as_string());\n+              label, reg_live, verf_live, ss.freeze());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}