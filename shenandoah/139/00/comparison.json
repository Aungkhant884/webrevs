{"files":[{"patch":"@@ -153,2 +153,2 @@\n-void ShenandoahAdaptiveHeuristics::record_success_concurrent() {\n-  ShenandoahHeuristics::record_success_concurrent();\n+void ShenandoahAdaptiveHeuristics::record_success_concurrent(bool abbreviated) {\n+  ShenandoahHeuristics::record_success_concurrent(abbreviated);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  void record_success_concurrent();\n+  void record_success_concurrent(bool abbreviated);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -413,1 +413,1 @@\n-void ShenandoahHeuristics::record_success_concurrent() {\n+void ShenandoahHeuristics::record_success_concurrent(bool abbreviated) {\n@@ -417,2 +417,4 @@\n-  _gc_time_history->add(time_since_last_gc());\n-  _gc_times_learned++;\n+  if (!(abbreviated && ShenandoahAdaptiveIgnoreShortCycles)) {\n+    _gc_time_history->add(time_since_last_gc());\n+    _gc_times_learned++;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-  virtual void record_success_concurrent();\n+  virtual void record_success_concurrent(bool abbreviated);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -351,2 +351,2 @@\n-void ShenandoahOldHeuristics::record_success_concurrent() {\n-  _trigger_heuristic->record_success_concurrent();\n+void ShenandoahOldHeuristics::record_success_concurrent(bool abbreviated) {\n+  _trigger_heuristic->record_success_concurrent(abbreviated);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-  virtual void record_success_concurrent() override;\n+  virtual void record_success_concurrent(bool abbreviated) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  _mixed_evac (false),\n+  _abbreviated(false),\n@@ -217,0 +217,1 @@\n+    _abbreviated = true;\n@@ -218,0 +219,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  bool                        _mixed_evac; \/\/ true iff most recent evacuation includes old-gen HeapRegions\n+  bool                        _abbreviated;\n@@ -62,0 +62,1 @@\n+  bool abbreviated() const { return _abbreviated; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -540,1 +540,1 @@\n-    generation->heuristics()->record_success_concurrent();\n+    generation->heuristics()->record_success_concurrent(false);\n@@ -608,1 +608,1 @@\n-    generation->heuristics()->record_success_concurrent();\n+    generation->heuristics()->record_success_concurrent(gc.abbreviated());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -172,0 +172,10 @@\n+                                                                            \\\n+  product(bool, ShenandoahAdaptiveIgnoreShortCycles, true, EXPERIMENTAL,    \\\n+          \"The adaptive heuristic tracks a moving average of cycle \"        \\\n+          \"times in order to start a gc before memory is exhausted. \"       \\\n+          \"In some cases, Shenandoah may skip the evacuation and update \"   \\\n+          \"reference phases, resulting in a shorter cycle. These may skew \" \\\n+          \"the average cycle time downward and may cause the heuristic \"    \\\n+          \"to wait too long to start a cycle. Disabling this will have \"    \\\n+          \"the gc run less often, which will reduce CPU utilization, but\"   \\\n+          \"increase the risk of degenerated cycles.\")                       \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}