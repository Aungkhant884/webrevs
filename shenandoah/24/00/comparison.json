{"files":[{"patch":"@@ -367,1 +367,1 @@\n-    _heap->young_generation()->increase_used(ShenandoahHeapRegion::region_size_bytes() * num);\n+    _heap->young_generation()->increase_used(words_size * HeapWordSize);\n@@ -369,1 +369,1 @@\n-    _heap->old_generation()->increase_used(ShenandoahHeapRegion::region_size_bytes() * num);\n+    _heap->old_generation()->increase_used(words_size * HeapWordSize);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,0 +94,3 @@\n+\n+  \/\/ Apply closure to all regions affiliated with this generation (single threaded).\n+  virtual void heap_region_iterate(ShenandoahHeapRegionClosure* cl) = 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,0 +81,4 @@\n+void ShenandoahGlobalGeneration::heap_region_iterate(ShenandoahHeapRegionClosure *cl) {\n+  ShenandoahHeap::heap()->heap_region_iterate(cl);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+  void heap_region_iterate(ShenandoahHeapRegionClosure *cl) override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -819,1 +819,1 @@\n-void ShenandoahHeapRegion::promote() {\n+size_t ShenandoahHeapRegion::promote() {\n@@ -828,0 +828,3 @@\n+  ShenandoahGeneration *old_generation = heap->old_generation();\n+  ShenandoahGeneration *young_generation = heap->young_generation();\n+\n@@ -841,1 +844,2 @@\n-      heap->old_generation()->increase_used(used());\n+      old_generation->increase_used(r->used());\n+      young_generation->decrease_used(r->used());\n@@ -849,0 +853,1 @@\n+    return index_limit - index();\n@@ -865,1 +870,2 @@\n-    heap->old_generation()->increase_used(used());\n+    old_generation->increase_used(used());\n+    young_generation->decrease_used(used());\n@@ -867,0 +873,1 @@\n+    return 1;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -406,1 +406,2 @@\n-  void promote();\n+  \/\/ If this is a humongous start, returns the number of regions in the object.\n+  size_t promote();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -139,0 +139,5 @@\n+void ShenandoahOldGeneration::heap_region_iterate(ShenandoahHeapRegionClosure *cl) {\n+  ShenandoahGenerationRegionClosure<OLD> old_regions(cl);\n+  ShenandoahHeap::heap()->heap_region_iterate(&old_regions);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,0 +41,3 @@\n+\n+  void heap_region_iterate(ShenandoahHeapRegionClosure *cl) override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/shenandoah\/shenandoahScanRemembered.inline.hpp\"\n@@ -112,0 +113,6 @@\n+  ShenandoahHeap *heap = ShenandoahHeap::heap();\n+  if (heap->mode()->is_generational() && heap->is_gc_generation_young() && verify(RememberedSetRoots)) {\n+    shenandoah_assert_safepoint();\n+    heap->card_scan()->oops_do(oops);\n+  }\n+\n@@ -134,0 +141,5 @@\n+  ShenandoahHeap *heap = ShenandoahHeap::heap();\n+  if (heap->mode()->is_generational() && heap->is_gc_generation_young()) {\n+    heap->card_scan()->oops_do(oops);\n+  }\n+\n@@ -152,0 +164,5 @@\n+  ShenandoahHeap *heap = ShenandoahHeap::heap();\n+  if (heap->mode()->is_generational() && heap->is_gc_generation_young()) {\n+    heap->card_scan()->oops_do(oops);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-    AllRoots            = (SerialRoots | ThreadRoots | CodeRoots | CLDGRoots | WeakRoots | StringDedupRoots | JNIHandleRoots)\n+    RememberedSetRoots  = 1 << 7,\n+    AllRoots            = (SerialRoots | ThreadRoots | CodeRoots | CLDGRoots | WeakRoots | StringDedupRoots | JNIHandleRoots | RememberedSetRoots)\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -958,0 +958,1 @@\n+  void oops_do(OopClosure* cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -576,0 +576,36 @@\n+class ShenandoahOopIterateAdapter : public BasicOopIterateClosure {\n+ private:\n+  OopClosure* _cl;\n+ public:\n+  explicit ShenandoahOopIterateAdapter(OopClosure *cl) : _cl(cl) {}\n+\n+  void do_oop(oop *o) override {\n+    _cl->do_oop(o);\n+  }\n+\n+  void do_oop(narrowOop *o) override {\n+    _cl->do_oop(o);\n+  }\n+};\n+\n+template<typename RememberedSet>\n+inline void ShenandoahScanRemembered<RememberedSet>::oops_do(OopClosure *cl) {\n+  ShenandoahOopIterateAdapter adapter(cl);\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  for (size_t i = 0, n = heap->num_regions(); i < n; ++i) {\n+    ShenandoahHeapRegion* region = heap->get_region(i);\n+    if (region->affiliation() == OLD_GENERATION) {\n+      HeapWord *start_of_range = region->bottom();\n+      HeapWord *end_of_range = region->top();\n+      size_t start_cluster_no = cluster_for_addr(start_of_range);\n+      size_t num_heapwords = end_of_range - start_of_range;\n+      unsigned int cluster_size = CardTable::card_size_in_words *\n+                                  ShenandoahCardCluster<ShenandoahDirectCardMarkRememberedSet>::CardsPerCluster;\n+      size_t num_clusters = (size_t) ((num_heapwords - 1 + cluster_size) \/ cluster_size);\n+\n+      \/\/ Remembered set scanner\n+      process_clusters(start_cluster_no, num_clusters, end_of_range, &adapter);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -70,0 +71,1 @@\n+  ShenandoahGeneration* _generation;\n@@ -81,1 +83,2 @@\n-    _loc(NULL) {\n+    _loc(NULL),\n+    _generation(NULL) {\n@@ -86,0 +89,5 @@\n+\n+    if (_heap->mode()->is_generational()) {\n+      _generation = _heap->active_generation();\n+      assert(_generation != NULL, \"Expected active generation in this mode\");\n+    }\n@@ -109,1 +117,1 @@\n-      if (_map->par_mark(obj)) {\n+      if ( in_generation(obj) && _map->par_mark(obj)) {\n@@ -116,0 +124,9 @@\n+  bool in_generation(oop obj) {\n+    if (_generation == NULL) {\n+      return true;\n+    }\n+\n+    ShenandoahHeapRegion* region = _heap->heap_region_containing(obj);\n+    return _generation->contains(region);\n+  }\n+\n@@ -216,1 +233,8 @@\n-\n+    \/\/ We allow for marked or old here for two reasons:\n+    \/\/  1. If this is a young collect, old objects wouldn't be marked. We've\n+    \/\/     recently change the verifier traversal to only follow young objects\n+    \/\/     during a young collect so this _shouldn't_ be necessary.\n+    \/\/  2. At present, we do not clear dead objects from the remembered set.\n+    \/\/     Everything in the remembered set is old (ipso facto), so allowing for\n+    \/\/     'marked_or_old' covers the case of stale objects in rset.\n+    \/\/ TODO: Just use 'is_marked' here.\n@@ -230,1 +254,1 @@\n-        check(ShenandoahAsserts::_safe_all, obj, _heap->complete_marking_context()->is_marked(obj),\n+        check(ShenandoahAsserts::_safe_all, obj, _heap->complete_marking_context()->is_marked_or_old(obj),\n@@ -500,0 +524,1 @@\n+  ShenandoahGeneration* _generation;\n@@ -513,1 +538,7 @@\n-          _processed(0) {};\n+          _processed(0),\n+          _generation(NULL) {\n+    if (_heap->mode()->is_generational()) {\n+      _generation = _heap->active_generation();\n+      assert(_generation != NULL, \"Expected active generation in this mode.\");\n+    }\n+  };\n@@ -529,0 +560,4 @@\n+        if (!in_generation(r)) {\n+          continue;\n+        }\n+\n@@ -540,0 +575,4 @@\n+  bool in_generation(ShenandoahHeapRegion* r) {\n+    return _generation == NULL || _generation->contains(r);\n+  }\n+\n@@ -693,0 +732,21 @@\n+  ShenandoahGeneration *generation;\n+  if (_heap->mode()->is_generational()) {\n+    generation = _heap->active_generation();\n+    guarantee(generation != NULL, \"Need to know which generation to verify.\");\n+  } else {\n+    generation = NULL;\n+  }\n+\n+  if (generation != NULL) {\n+    ShenandoahHeapLocker lock(_heap->lock());\n+\n+    ShenandoahCalculateRegionStatsClosure cl;\n+    generation->heap_region_iterate(&cl);\n+    size_t generation_used = generation->used();\n+    guarantee(cl.used() == generation_used,\n+              \"%s: generation (%s) used size must be consistent: generation-used = \" SIZE_FORMAT \"%s, regions-used = \" SIZE_FORMAT \"%s\",\n+              label, generation->name(),\n+              byte_size_in_proper_unit(generation_used), proper_unit_for_byte_size(generation_used),\n+              byte_size_in_proper_unit(cl.used()), proper_unit_for_byte_size(cl.used()));\n+  }\n+\n@@ -696,1 +756,5 @@\n-    _heap->heap_region_iterate(&cl);\n+    if (generation != NULL) {\n+      generation->heap_region_iterate(&cl);\n+    } else {\n+      _heap->heap_region_iterate(&cl);\n+    }\n@@ -747,2 +811,1 @@\n-      if (r->is_old() && _heap->is_gc_generation_young()) {\n-        \/\/ Old regions don't have computed live data during young collections.\n+      if (generation != NULL && !generation->contains(r)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":71,"deletions":8,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-  volatile size_t _used;\n@@ -65,1 +64,0 @@\n-    _used(0),\n@@ -74,0 +72,3 @@\n+        \/\/ The thread that first encounters a humongous start region is responsible\n+        \/\/ for promoting the continuation regions so we need this guard here to\n+        \/\/ keep other worker threads from trying to promote the continuations.\n@@ -75,4 +76,2 @@\n-          r->promote();\n-          Atomic::inc(&_promoted);\n-        } else {\n-          Atomic::add(&_used, r->used());\n+          size_t promoted = r->promote();\n+          Atomic::add(&_promoted, promoted);\n@@ -90,1 +89,0 @@\n-  _used = task._used;\n@@ -130,0 +128,5 @@\n+void ShenandoahYoungGeneration::heap_region_iterate(ShenandoahHeapRegionClosure *cl) {\n+  ShenandoahGenerationRegionClosure<YOUNG> young_regions(cl);\n+  ShenandoahHeap::heap()->heap_region_iterate(&young_regions);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+  void heap_region_iterate(ShenandoahHeapRegionClosure *cl) override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}