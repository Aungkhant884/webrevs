{"files":[{"patch":"@@ -49,0 +49,14 @@\n+class ShenandoahGlobalCoalesceAndFill : public ShenandoahHeapRegionClosure {\n+ public:\n+  virtual void heap_region_do(ShenandoahHeapRegion* region) override {\n+    \/\/ old region is not in the collection set and was not immediately trashed\n+    if (region->is_old() && region->is_active() && !region->is_humongous()) {\n+      region->oop_fill_and_coalesce();\n+    }\n+  }\n+\n+  virtual bool is_thread_safe() override {\n+    return true;\n+  }\n+};\n+\n@@ -119,0 +133,4 @@\n+  if (heap->mode()->is_generational() && _generation->generation_mode() == GLOBAL) {\n+    entry_global_coalesce_and_fill();\n+  }\n+\n@@ -201,1 +219,2 @@\n-  if (ShenandoahHeap::heap()->mode()->is_generational() && (_generation->generation_mode() == YOUNG)) {\n+  if (ShenandoahHeap::heap()->mode()->is_generational()\n+    && (_generation->generation_mode() == YOUNG || (_generation->generation_mode() == GLOBAL && ShenandoahVerify))) {\n@@ -203,1 +222,2 @@\n-    \/\/ to the read-card-table.\n+    \/\/ to the read-card-table. The remembered sets are also swapped for GLOBAL collections\n+    \/\/ so that the verifier works with the correct copy of the card table when verifying.\n@@ -445,0 +465,15 @@\n+void ShenandoahConcurrentGC::entry_global_coalesce_and_fill() {\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+\n+  const char* msg = \"Coalescing and filling old regions in global collect\";\n+  ShenandoahConcurrentPhase gc_phase(msg, ShenandoahPhaseTimings::coalesce_and_fill);\n+\n+  TraceCollectorStats tcs(heap->monitoring_support()->concurrent_collection_counters());\n+  EventMark em(\"%s\", msg);\n+  ShenandoahWorkerScope scope(heap->workers(),\n+                              ShenandoahWorkerPolicy::calc_workers_for_conc_marking(),\n+                              \"concurrent coalesce and fill\");\n+\n+  op_global_coalesce_and_fill();\n+}\n+\n@@ -1007,0 +1042,6 @@\n+void ShenandoahConcurrentGC::op_global_coalesce_and_fill() {\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  ShenandoahGlobalCoalesceAndFill coalesce;\n+  heap->parallel_heap_region_iterate(&coalesce);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+  void entry_global_coalesce_and_fill();\n@@ -121,0 +122,1 @@\n+  void op_global_coalesce_and_fill();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2202,6 +2202,1 @@\n-            \/\/ This code is only relevant to GLOBAL GC.  With OLD GC, all coalescing and filling is done before any relevant\n-            \/\/ evacuations.\n-\n-            \/\/ This is an old region in a global cycle.  Make sure that the next cycle does not iterate over dead objects\n-            \/\/ which haven't had their references updated.  This is not a promotion.\n-            r->global_oop_iterate_and_fill_dead(&cl);\n+            _heap->marked_object_oop_iterate(r, &cl, update_watermark);\n@@ -2606,1 +2601,0 @@\n-  ShenandoahMarkingContext* mark_context = marking_context();\n@@ -2613,2 +2607,2 @@\n-  if (doing_mixed_evacuations()) {\n-    ctx = mark_context;\n+  if (doing_mixed_evacuations() || active_generation()->generation_mode() == GLOBAL) {\n+    ctx = complete_marking_context();\n@@ -2637,1 +2631,1 @@\n-        if (!scanner->verify_registration(obj_addr, obj->size())) {\n+        if (!scanner->verify_registration(obj_addr, ctx)) {\n@@ -2645,1 +2639,1 @@\n-          \/\/ ctx->is_marked() returns true if mark bit set (TAMS not relevant here)\n+          \/\/ ctx->is_marked() returns true if mark bit set or if obj above TAMS.\n@@ -2653,1 +2647,1 @@\n-            if (!scanner->verify_registration(obj_addr, obj->size())) {\n+            if (!scanner->verify_registration(obj_addr, ctx)) {\n@@ -2658,5 +2652,0 @@\n-          } \/\/ Else, this object is not live so we don't verify dirty cards contained therein.\n-\n-          if (ctx) {\n-            \/\/ TAMS not relevant here\n-            obj_addr = ctx->get_next_marked_addr(obj_addr, t);\n@@ -2664,1 +2653,8 @@\n-            obj_addr += obj->size();\n+            \/\/ This object is not live so we don't verify dirty cards contained therein\n+            ShenandoahHeapRegion* r = heap_region_containing(obj_addr);\n+            HeapWord* tams = ctx->top_at_mark_start(r);\n+            if (obj_addr >= tams) {\n+              obj_addr += obj->size();\n+            } else {\n+              obj_addr = ctx->get_next_marked_addr(obj_addr, tams);\n+            }\n@@ -2692,1 +2688,1 @@\n-    if ((obj_addr < registration_watermark) && !scanner->verify_registration(obj_addr, obj->size())) {\n+    if ((obj_addr < registration_watermark) && !scanner->verify_registration(obj_addr, ctx)) {\n@@ -2709,1 +2705,1 @@\n-        if ((obj_addr < registration_watermark) && !scanner->verify_registration(obj_addr, obj->size())) {\n+        if ((obj_addr < registration_watermark) && !scanner->verify_registration(obj_addr, ctx)) {\n@@ -2713,3 +2709,3 @@\n-      } \/\/ Else, this object is not live so we don't verify dirty cards contained therein.\n-\n-      if (ctx) {\n+        obj_addr += obj->size();\n+      } else {\n+        \/\/ This object is not live so we don't verify dirty cards contained therein\n@@ -2723,2 +2719,0 @@\n-      } else {\n-        obj_addr += obj->size();\n@@ -2757,2 +2751,2 @@\n-  if (doing_mixed_evacuations()) {\n-    ctx = marking_context();\n+  if (doing_mixed_evacuations() || active_generation()->generation_mode() == GLOBAL) {\n+    ctx = complete_marking_context();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":21,"deletions":27,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -444,3 +444,1 @@\n-  \/\/ Expect this to be invoked only from within threads perfoming old-gen GC, and expect\n-  \/\/ old-gen marking to be completed before these threads invoke this service.\n-  assert(heap->active_generation()->generation_mode() == OLD, \"sanity\");\n+  \/\/ Expect marking to be completed before these threads invoke this service.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -281,0 +281,1 @@\n+    ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -282,1 +283,1 @@\n-    shenandoah_assert_not_in_cset_except(p, obj, ShenandoahHeap::heap()->cancelled_gc());\n+    shenandoah_assert_not_in_cset_except(p, obj, heap->cancelled_gc());\n@@ -286,1 +287,1 @@\n-      if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+      if (heap->mode()->is_generational()) {\n@@ -292,3 +293,1 @@\n-        \/\/\n-        if ((GENERATION == YOUNG) && ShenandoahHeap::heap()->is_in(p) && ShenandoahHeap::heap()->is_in_old(p)) {\n-          RememberedScanner* scanner = ShenandoahHeap::heap()->card_scan();\n+        if (GENERATION == YOUNG && heap->is_in_old(p)) {\n@@ -296,4 +295,2 @@\n-          ShenandoahHeap::heap()->mark_card_as_dirty((HeapWord*)p);\n-        } else if ((GENERATION == GLOBAL) && in_generation<YOUNG>(obj) &&\n-                   ShenandoahHeap::heap()->is_in(p) && ShenandoahHeap::heap()->is_in_old(p)) {\n-          RememberedScanner* scanner = ShenandoahHeap::heap()->card_scan();\n+          heap->mark_card_as_dirty((HeapWord*)p);\n+        } else if (GENERATION == GLOBAL && heap->is_in_old(p) && heap->is_in_young(obj)) {\n@@ -301,1 +298,1 @@\n-          ShenandoahHeap::heap()->mark_card_as_dirty((HeapWord*)p);\n+          heap->mark_card_as_dirty((HeapWord*)p);\n@@ -312,2 +309,2 @@\n-      assert(ShenandoahHeap::heap()->is_in_young(obj), \"Expected young object.\");\n-      ShenandoahHeap::heap()->mark_card_as_dirty(p);\n+      assert(heap->is_in_young(obj), \"Expected young object.\");\n+      heap->mark_card_as_dirty(p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -54,2 +54,0 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+class ShenandoahMarkingContext;\n@@ -955,1 +956,1 @@\n-  bool verify_registration(HeapWord* address, size_t size_in_words);\n+  bool verify_registration(HeapWord* address, ShenandoahMarkingContext* ctx);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-ShenandoahScanRemembered<RememberedSet>::verify_registration(HeapWord* address, size_t size_in_words) {\n+ShenandoahScanRemembered<RememberedSet>::verify_registration(HeapWord* address, ShenandoahMarkingContext* ctx) {\n@@ -481,7 +481,0 @@\n-  ShenandoahMarkingContext* ctx;\n-\n-  if (heap->doing_mixed_evacuations()) {\n-    ctx = heap->marking_context();\n-  } else {\n-    ctx = nullptr;\n-  }\n@@ -524,2 +517,1 @@\n-      HeapWord* obj_addr = base_addr + offset;\n-      oop obj = oop(base_addr + offset);\n+      oop obj = cast_to_oop(base_addr + offset);\n@@ -540,4 +532,6 @@\n-    \/\/ If there is a following object registered, it should begin where this object ends.\n-    if ((base_addr + offset < _rs->whole_heap_end()) && _scc->has_object(end_card_index) &&\n-        ((addr_for_card_index(end_card_index) + _scc->get_first_start(end_card_index)) != (base_addr + offset))) {\n-      return false;\n+    if (end_card_index > index) {\n+      \/\/ If there is a following object registered on the next card, it should begin where this object ends.\n+      if ((base_addr + offset < _rs->whole_heap_end()) && _scc->has_object(end_card_index) &&\n+          ((addr_for_card_index(end_card_index) + _scc->get_first_start(end_card_index)) != (base_addr + offset))) {\n+        return false;\n+      }\n@@ -556,2 +550,1 @@\n-    \/\/ should represents this object.  Otherwise, last_offset is a don't care.\n-    HeapWord* end_of_interest = base_addr + max_offset;\n+    \/\/ should represent this object.  Otherwise, last_offset is a don't care.\n@@ -559,2 +552,0 @@\n-      HeapWord* obj_addr = base_addr + offset;\n-      oop obj = oop(base_addr + offset);\n@@ -562,1 +553,12 @@\n-      offset = ctx->get_next_marked_addr(base_addr + offset, end_of_interest) - base_addr;\n+      oop obj = cast_to_oop(base_addr + offset);\n+      ShenandoahHeapRegion* region = heap->heap_region_containing(obj);\n+      HeapWord* tams = ctx->top_at_mark_start(region);\n+      if (ctx->is_marked(obj)) {\n+        offset += obj->size();\n+      } else {\n+        offset = ctx->get_next_marked_addr(base_addr + offset, tams) - base_addr;\n+        if (offset == 0) {\n+          \/\/  no objects marked in this card\n+          break;\n+        }\n+      }\n@@ -564,1 +566,1 @@\n-    oop last_obj = oop(base_addr + prev_offset);\n+    oop last_obj = cast_to_oop(base_addr + prev_offset);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"}]}