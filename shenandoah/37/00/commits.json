[{"commit":{"message":"Resolve conflicts introduced during merge from master"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp"}],"sha":"8f353a63bbadc661b24a0be73a17e8a849720eaa"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"8b48c1ef7da295549096cb951e186973da38d530"},{"commit":{"message":"Remove some more instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"b6214e5d50fc70ef52f5b4fe8eae53f77282426c"},{"commit":{"message":"Remove extraneous instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp"}],"sha":"f6f3ee50536143183f7f909d5a0685223d82215f"},{"commit":{"message":"Register region affiliations in ShenandoahFullGC::compact_humongous_objects()\n\nSituations were arising under which humongous objects were relocated to regions that were\naffiliated as FREE.  This patch preserves the affiliation of each humongous object that\nis relocated during compaction."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp"}],"sha":"ac833af8088bc705b458512febfd8e979a80ba3a"},{"commit":{"message":"Fix white space"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"}],"sha":"f90fa257cf350593cb354996183f1c67c3e4460a"},{"commit":{"message":"Instrumentation to debug liveness tally\n\nWith this patch, Extremem workloads no longer crash and nearly all shenandoah tier1 tests succeed, in either of the following configurations:\n\n$ nohup make exploded-test TEST=test\/hotspot\/jtreg:tier1_gc_shenandoah CONF=fast \\\n  JTREG=\"JOBS=4;TIMEOUT_FACTOR=8;JAVA_OPTIONS=-XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:-RegisterReferences\" \\\n  >nohup.tier1_gc_shenandoah.out 2>nohup.tier1_gc_shenandoah.err &\n\n$ nohup make exploded-test TEST=test\/hotspot\/jtreg:tier1_gc_shenandoah CONF=fast \\\n  JTREG=\"JOBS=4;TIMEOUT_FACTOR=8;\" \\\n  >nohup.tier1_gc_shenandoah.out 2>nohup.tier1_gc_shenandoah.err &\n\nTypical runs exhibit 2-4 errors.  I have scrutinized one of the failures: TesetAllocLargeObj.java.  The failures are observed to\noccur (intermittently) when a Full GC shifts the location of a humongous object.  It has been observed that following relocation\nof the humongous object \"forward\" in memory (e.g. before full GC, object occupied slots 21-37, after full GC, it occupied slots 20-36),\nthe last continuous humongous region (e.g. region 37) is erroneously affiliated as a FREE region.\n\nIt appears that this error was not introduced by the patches on this branch.  This error was most likely pre-existing.  However, the\nerror was previously \"masked\" by conservative iteration over all FREE regions during the initialization of mark and update references\nGC phases.  Unlike mainline, this branch skips over FREE regions during these iterative passes."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp"}],"sha":"f8bf0791e1604bd58db3ff24322d391c0bb7712e"},{"commit":{"message":"Fix several bugs with lazy mark bitmaps"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp"}],"sha":"fc8d5d56e54540a6e95dfe10c2bbac9f18aa8161"},{"commit":{"message":"Disable instrumentation for jtreg testing"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp"}],"sha":"bdb46b2bf9a6225b90ee5000bf4a17a42ed4dbca"},{"commit":{"message":"Fix whitespace errors"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp"}],"sha":"854510fa879302835c9032a1d2a812bad8d885f6"},{"commit":{"message":"Progress in debugging concurrent old GC\n\nThis commit includes code to enable mark-through-ref during mixed evacuations,\nto use mark bits to restrict scanning of remembered sets during mixed evacuations.\nThis commit also includes a bunch of instrumentation that will eventually be removed.\nBut I'm leaving it in place for the moment because there are still some bugs that\nI'm trying to chase down."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp"}],"sha":"8fc5180205298a33b5c103bd76bdc32528b07375"},{"commit":{"message":"Merge Master"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"3c3cacdb0bf1cd0a9ea6271db6cbb4d0b025af80"},{"commit":{"message":"Add a comment to explain future TODO"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp"}],"sha":"77afd79e4d1369c5632e09daaeeed3100c53ea10"},{"commit":{"message":"Fix compile-time errors\nx"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp"}],"sha":"e0c9651eafe2457cd7ba16d1e740507a71523c02"},{"commit":{"message":"Assure that memory holding weak references from old to young is marked dirty\n\nDuring remembered set scanning, \"weak references\" are not passed to mark_through_ref,\nso dirty bits in the read-card-table may not be copied to the write-card-table.\nIn the case that a Reference object is dropped, meaning that its weak reference is\nnot going to be nulled, we dirty the associated card within the write-card-table.\nPatch provided by William Kemper."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp"}],"sha":"7504d46663e88d899a4fcfa0a5cc217f86fbe154"},{"commit":{"message":"Verification of heap at update-refs should ignore old-gen collection set"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"c84f556799552b2ddb3ab5130252658ce074e4e5"},{"commit":{"message":"Do not swap rem-set for OLD GC\n\nAlso, fix up some white-space issues."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"1ea14abc1af1460df1df1708d6c2af2a68ae2456"},{"commit":{"message":"Fix bug in verification of rem-set at update-refs\n\nAt update-refs, we need to use the write-card-table rather than the read-card-table."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"da02ff81d4ab48d8d0bd2d72e03d6f4523f289cc"},{"commit":{"message":"Restrict verify remset at update refs to regions not in collection set"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"c1de26d069d49982618764f1158289d52565a59c"},{"commit":{"message":"Cleanup promotion and global oop iterators\n\nChange names and parameters of these iterator functions to clarify role and\nimprove maintainability (and facilitate debugging) of some lingering errors."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"}],"sha":"bacc8074d22da3ae33bf9885849ab5a66cac1d90"},{"commit":{"message":"Handle GLOBAL GC and fix bugs\n\nThis patch adds support for GLOBAL GC and fixes a few discovered bugs:\n1. Remembered set verification enforces that any old-gen object containing an\n   interesting pointer has a dirty card either for the object's start or for\n   the memory that holds the interesting pointer.  Previously, it required that\n   the memory holding the interesting pointer had a dirty card.  We have since\n   discovered that our original enforcement is incompatible with the behavior of\n   the mutator card-marking write barrier.\n2. When iterating over heap regions to coalesce and fill, we stop coalescing at\n   top-of-mark-fill.  Above, this, we all objects without requiring a mark bit.\n3. In mark_through_ref, we add code to rebuild the remembered set during GLOBAL\n   GC.  This is because the remembered set has been cleaned during init_mark.\n\nThis patch successfully passes tier1 jtreg tests.  It intermittently passes\nhotspot-gc-shenandoah tests.  Once, we observed an assertion error with\ngc.shenandoah.generational.TestConcurrentEvac:\n  Object klass pointer must go to metaspace\nWe are also seeing intermittent errors during remembered set verification."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"}],"sha":"2d5cd45a3d26d853c80210c1b62bda23afc284ed"},{"commit":{"message":"Fix white space"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"}],"sha":"8d6680e01e67aa6f2d201b8ba7ef8e6d15994da3"},{"commit":{"message":"Merge branch 'master' of https:\/\/git.openjdk.java.net\/shenandoah into conc-rem-set-scan"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"}],"sha":"c7b610c7a13ee099c199a3da8d61ab8ba6d6b98d"},{"commit":{"message":"Fix error message for rem-set violation\n\nWhen we detect a violation during verification of remembered set at the start\nof updating references, we want to issue a different error message than when\nviolations are detected during verification of remembered set at start of\nconcurrent marking."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp"}],"sha":"51b5c43448d26005372a7b7235362a3442216f4b"},{"commit":{"message":"Remove extraneous instrumentation"},"files":[],"sha":"0437a8f50cc0bf823277f1b9b8e32afa4c652a78"},{"commit":{"message":"Change mutator card marking write barriers\n\nThis changes the mutator card-marking write barrier to always use \"precise\" mode.\nPrecise mode implies dirtying the card that holds the overwritten field rather than\ndirtying the card that holds the start of the overwritten object.  All of our\nremembered set implementation assumes precise card marking.\n\nAdditionally, this commit includes code to enable verification of remembered set at\nthe start of updating references."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp"}],"sha":"b85d91ef2a7c9cad2d450e1cee79f8f4a1926fa4"},{"commit":{"message":"Fix invocations of register_object_wo_lock()"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"}],"sha":"6b5cbae5da974bee496d838504150216ea34d127"},{"commit":{"message":"Fix indexing error in verify_registration\n\nCannot invoke card_index_for_addr(_whole_heap_end) as this results in assertion error.\nIn this commit, we change the way we compute end_card_index."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"af6068978887293b17ef6e6bbf1a5368b494428a"},{"commit":{"message":"Fix white space"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp"}],"sha":"a7146e9ab5109d1f7904da153a1c2f2b7d0ee09b"},{"commit":{"message":"Add remembered set verification to ShenandoahVerify\n\nThis patch also includes a small amount of instrumentation that needs to be removed\neventually."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp"}],"sha":"e3cdb06056dbf17e49ae03a98a635847570b356c"},{"commit":{"message":"Remove extraneous white space"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"}],"sha":"6cb2354841bfd1cd72f61dd85a0cc9e7efb8e957"},{"commit":{"message":"Merge branch 'master' of https:\/\/git.openjdk.java.net\/shenandoah into conc-rem-set-scan\n\nVarious merge conflicts were resolved by hand.  The results of merging do not run reliably.\nFurther code review and testing is under way."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp"}],"sha":"2ef7a1c57c633bccce3d1ebe81c83f142d616a50"},{"commit":{"message":"Remove extraneous instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"9f57c814080604ab3407b17803aee9cf25c1bb8f"},{"commit":{"message":"Removing instrumentation\n\nCode still compiles and runs the tests."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp"}],"sha":"3137925638f8d39bc18eece194076c72b7f54470"},{"commit":{"message":"Working with instrumentation\n\nTo make concurrent remembered set scanning work, I had to copy the remembered set\nto a read-only copy at init-mark safepoint and then initialize the remembered set\nto all clean.  The original plan was to simply swap pointers between a read-card-table\nand a write-card-table.  I found that the existing mutator write-barrier implementations\nwere not able to adjust to a change in location for the write-card-table.\n\nBefore upstreaming, I need to remove instrumentation and then confirm that I have not\nbroken anything."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"ccec192d94414149bfb13306d9cf919c88d102f9"},{"commit":{"message":"Clean up remembered set maintenance\n\nRemoved and replaced many direct accesses to ShenandoahCardTable.  Require code to use\nthe RememberedSet abstraction instead.  Removed unnecessary remembered set operations.\nTidied up other remembered set operations.  Inserted a bunch of instrumentation which will\nneed to be removed.  As currently implemented, this code works when I assume within\nprocess clusters that every card is dirty.  But it crashes with assertion failures resulting\nfrom failed forwarding of collection set objects when I only update references for dirty cards.\nNext step is to try to figure out which dirty bit is being lost by finding an interesting\npointer on a card that is marked clean.  If we're lucky, the nature of this inconsistency\nwill direct us to the code that has failed to dirty the relevant cards."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp"}],"sha":"813756d473a1d8f1a1d72c2fa0c14f977e7072e5"},{"commit":{"message":"Limit fill and coalesce to TAMS\n\nAll objects above TAMS are considered live though their mark bit is not set.  Note that young-gen\nevacuations that interrupt a long-running old-gen concurrent mark may promote objects into old-gen\nwhile the old-gen concurrent marking is ongoing.  These newly promoted objects will reside above TAMS\nand will be treated as live during the current old-gen marking pass, even though they will not be\nexplicitly marked."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"}],"sha":"6aedfa1c83f4bd8901c231ab3ec5d232b2b39724"}]