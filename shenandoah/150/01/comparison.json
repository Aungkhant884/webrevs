{"files":[{"patch":"@@ -244,1 +244,1 @@\n-  size_t min_threshold = capacity \/ 100 * ShenandoahMinFreeThreshold;\n+  size_t min_threshold = min_free_threshold();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  size_t min_threshold = capacity \/ 100 * ShenandoahMinFreeThreshold;\n+  size_t min_threshold = min_free_threshold();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -515,0 +515,8 @@\n+size_t ShenandoahHeuristics::min_free_threshold() {\n+  size_t min_free_threshold =\n+      _generation->generation_mode() == GenerationMode::OLD\n+          ? ShenandoahOldMinFreeThreshold\n+          : ShenandoahMinFreeThreshold;\n+  return _generation->soft_max_capacity() \/ 100 * min_free_threshold;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -122,0 +122,2 @@\n+  size_t min_free_threshold();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  size_t threshold_available = capacity \/ 100 * ShenandoahMinFreeThreshold;\n+  size_t threshold_available = min_free_threshold();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,4 +114,12 @@\n-          \"Percentage of free heap memory below which most heuristics \"     \\\n-          \"trigger collection independent of other triggers. Provides \"     \\\n-          \"a safety margin for many heuristics. In percents of (soft) \"     \\\n-          \"max heap size.\")                                                 \\\n+          \"Percentage of free heap memory (or young generation, in \"        \\\n+          \"generational mode) below which most heuristics trigger \"         \\\n+          \"collection independent of other triggers. Provides a safety \"    \\\n+          \"margin for many heuristics. In percents of (soft) max heap \"     \\\n+          \"size.\")                                                          \\\n+          range(0,100)                                                      \\\n+                                                                            \\\n+  product(uintx, ShenandoahOldMinFreeThreshold, 5, EXPERIMENTAL,            \\\n+          \"Percentage of free old generation heap memory below which most \" \\\n+          \"heuristics trigger collection independent of other triggers. \"   \\\n+          \"Provides a safety margin for many heuristics. In percents of \"   \\\n+          \"(soft) max heap size.\")                                          \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}