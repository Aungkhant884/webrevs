{"files":[{"patch":"@@ -431,0 +431,16 @@\n+\n+\/\/ unlike assert_heaplocked_or_safepoint(), this does not require current thread in safepoint to be a VM-thread\n+void ShenandoahAsserts::assert_heaplocked_or_fullgc_safepoint(const char* file, int line) {\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+\n+  if (heap->lock()->owned_by_self()) {\n+    return;\n+  }\n+\n+  if (ShenandoahSafepoint::is_at_shenandoah_safepoint()) {\n+    return;\n+  }\n+\n+  ShenandoahMessageBuffer msg(\"Heap lock must be owned by current thread, or be at safepoint\");\n+  report_vm_error(file, line, msg.buffer());\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+  static void assert_heaplocked_or_fullgc_safepoint(const char* file, int line);\n@@ -166,0 +167,3 @@\n+\n+#define shenandoah_assert_heaplocked_or_fullgc_safepoint() \\\n+                    ShenandoahAsserts::assert_heaplocked_or_fullgc_safepoint(__FILE__, __LINE__)\n@@ -216,0 +220,1 @@\n+#define shenandoah_assert_heaplocked_or_fullgc_safepoint()\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  uint8_t* _affiliations;       \/\/ Holds array of enum ShenandoahRegionAffiliation\n+  uint8_t* _affiliations;       \/\/ Holds array of enum ShenandoahRegionAffiliation, including FREE status in non-generational mode\n@@ -604,0 +604,3 @@\n+  inline void assert_lock_for_affiliation(ShenandoahRegionAffiliation orig_affiliation,\n+                                          ShenandoahRegionAffiliation new_affiliation);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -609,0 +609,22 @@\n+inline void ShenandoahHeap::assert_lock_for_affiliation(ShenandoahRegionAffiliation orig_affiliation,\n+                                                        ShenandoahRegionAffiliation new_affiliation) {\n+  \/\/ A lock is required when changing from FREE to NON-FREE.  Though it may be possible to elide the lock when\n+  \/\/ transitioning from in-use to FREE, the current implementation uses a lock for this transition.  A lock is\n+  \/\/ not required to change from YOUNG to OLD (i.e. when promoting humongous region).\n+  \/\/\n+  \/\/         new_affiliation is:     FREE   YOUNG   OLD\n+  \/\/  orig_affiliation is:  FREE      X       L      L\n+  \/\/                       YOUNG      L       X\n+  \/\/                         OLD      L       X      X\n+  \/\/  X means state transition won't happen (so don't care)\n+  \/\/  L means lock should be held\n+  \/\/  Blank means no lock required because affiliation visibility will not be required until subsequent safepoint\n+  \/\/\n+  \/\/ Note: during full GC, all transitions between states are possible.  During Full GC, we should be in a safepoint.\n+\n+  if ((orig_affiliation == ShenandoahRegionAffiliation::FREE) || (new_affiliation == ShenandoahRegionAffiliation::FREE)) {\n+    extern bool _is_at_shenandoah_safepoint();\n+    shenandoah_assert_heaplocked_or_fullgc_safepoint();\n+  }\n+}\n+\n@@ -610,0 +632,3 @@\n+#ifdef ASSERT\n+  assert_lock_for_affiliation(region_affiliation(r), new_affiliation);\n+#endif\n@@ -618,0 +643,3 @@\n+#ifdef ASSERT\n+  assert_lock_for_affiliation(region_affiliation(index), new_affiliation);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -115,1 +115,2 @@\n- switch (_state) {\n+  shenandoah_assert_heaplocked();\n+  switch (_state) {\n@@ -664,0 +665,1 @@\n+  shenandoah_assert_heaplocked();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}