{"files":[{"patch":"@@ -576,1 +576,15 @@\n-  size_t to_reserve = (_heap->max_capacity() \/ 100) * ShenandoahEvacReserve;\n+  if (!_heap->mode()->is_generational()) {\n+    size_t to_reserve = (_heap->max_capacity() \/ 100) * ShenandoahEvacReserve;\n+    reserve_regions(to_reserve);\n+  } else {\n+    size_t young_reserve = (_heap->young_generation()->max_capacity() \/ 100) * ShenandoahEvacReserve;\n+    size_t old_reserve = (_heap->old_generation()->max_capacity() \/ 100) * ShenandoahOldEvacReserve;\n+    size_t to_reserve = young_reserve + old_reserve;\n+    reserve_regions(to_reserve);\n+  }\n+\n+  recompute_bounds();\n+  assert_bounds();\n+}\n+\n+void ShenandoahFreeSet::reserve_regions(size_t to_reserve) {\n@@ -592,3 +606,0 @@\n-\n-  recompute_bounds();\n-  assert_bounds();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -108,0 +108,2 @@\n+\n+  void reserve_regions(size_t to_reserve);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}