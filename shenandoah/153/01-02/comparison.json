{"files":[{"patch":"@@ -151,4 +151,7 @@\n-  \/\/ First group does roughly half of heap, one region at a time.\n-  \/\/ Second group does roughly one quarter of heap, half of a region at a time, and so on.\n-  \/\/ Last group does the remnant of heap, one _smallest_chunk_size at a time.\n-  \/\/ Round down.\n+  \/\/ The group size s calculated from the number of regions.  Every group except the last processes the same number of chunks.\n+  \/\/ The last group processes however many chunks are required to finish the total scanning effort.  The chunk sizes are\n+  \/\/ different for each group.  The intention is that the first group processes roughly half of the heap, the second processes\n+  \/\/ a quarter of the remaining heap, the third processes an eight of what remains and so on.  The smallest chunk size\n+  \/\/ is represented by _smallest_chunk_size.  We do not divide work any smaller than this.  \n+  \/\/\n+  \/\/ Note that N\/2 + N\/4 + N\/8 + N\/16 + ...  sums to N if expanded to infinite terms.\n@@ -206,1 +209,1 @@\n-  size_t num_groups = 0;\n+  size_t spanned_groups = 0;\n@@ -214,1 +217,1 @@\n-      num_groups++;\n+      spanned_groups++;\n@@ -216,1 +219,4 @@\n-      if (num_groups >= _num_groups) {\n+      \/\/ _num_groups is the number of groups required to span the configured heap size.  We are not allowed\n+      \/\/ to change the number of groups.  The last group is responsible for spanning all chunks not spanned\n+      \/\/ by previously processed groups.\n+      if (spanned_groups >= _num_groups) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"}]}