{"files":[{"patch":"@@ -2559,1 +2559,1 @@\n-      work_chunk assignment;\n+      struct ShenandoahRegionChunk assignment;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  work_chunk assignment;\n+  struct ShenandoahRegionChunk assignment;\n@@ -246,6 +246,1 @@\n-    _heap(ShenandoahHeap::heap()),\n-    _group_size(calc_group_size()),\n-    _first_group_chunk_size(calc_first_group_chunk_size()),\n-    _num_groups(calc_num_groups()),\n-    _total_chunks(calc_total_chunks()),\n-    _index(0)\n+    ShenandoahRegionChunkIterator(ShenandoahHeap::heap(), worker_count)\n@@ -253,19 +248,0 @@\n-  assert(_smallest_chunk_size ==\n-         CardTable::card_size_in_words() * ShenandoahCardCluster<ShenandoahDirectCardMarkRememberedSet>::CardsPerCluster,\n-         \"_smallest_chunk_size is not valid\");\n-\n-  size_t words_in_region = ShenandoahHeapRegion::region_size_words();\n-  size_t group_span = _first_group_chunk_size * _group_size;\n-\n-  _region_index[0] = 0;\n-  _group_offset[0] = 0;\n-  for (size_t i = 1; i < _num_groups; i++) {\n-    _region_index[i] = _region_index[i-1] + (_group_offset[i-1] + group_span) \/ words_in_region;\n-    _group_offset[i] = (_group_offset[i-1] + group_span) % words_in_region;\n-    group_span \/= 2;\n-  }\n-  \/\/ Not necessary, but keeps things tidy\n-  for (size_t i = _num_groups; i < _maximum_groups; i++) {\n-    _region_index[i] = 0;\n-    _group_offset[i] = 0;\n-  }\n@@ -282,0 +258,4 @@\n+  assert(_smallest_chunk_size ==\n+         CardTable::card_size_in_words() * ShenandoahCardCluster<ShenandoahDirectCardMarkRememberedSet>::CardsPerCluster,\n+         \"_smallest_chunk_size is not valid\");\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1025,1 +1025,1 @@\n-typedef struct ChunkOfRegion {\n+struct ShenandoahRegionChunk {\n@@ -1029,1 +1029,1 @@\n-} work_chunk;\n+};\n@@ -1092,1 +1092,1 @@\n-  inline bool next(work_chunk *assignment);\n+  inline bool next(struct ShenandoahRegionChunk *assignment);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -824,1 +824,1 @@\n-inline bool ShenandoahRegionChunkIterator::next(work_chunk *assignment) {\n+inline bool ShenandoahRegionChunkIterator::next(struct ShenandoahRegionChunk *assignment) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}