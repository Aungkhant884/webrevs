{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2020, Red Hat, Inc. All rights reserved.\n@@ -30,4 +30,4 @@\n-enum ShenandoahGeneration {\n-  YOUNG_GEN,\n-  OLD_GEN,\n-  NO_GEN\n+enum ShenandoahRegionAffiliation {\n+  FREE,\n+  YOUNG_GENERATION,\n+  OLD_GENERATION\n@@ -67,1 +67,1 @@\n-  ShenandoahGeneration const _generation;\n+  ShenandoahRegionAffiliation const _affiliation;\n@@ -72,1 +72,1 @@\n-  ShenandoahAllocRequest(size_t _min_size, size_t _requested_size, Type _alloc_type, ShenandoahGeneration generation) :\n+  ShenandoahAllocRequest(size_t _min_size, size_t _requested_size, Type _alloc_type, ShenandoahRegionAffiliation affiliation) :\n@@ -74,1 +74,1 @@\n-          _actual_size(0), _alloc_type(_alloc_type), _generation(generation)\n+          _actual_size(0), _alloc_type(_alloc_type), _affiliation(affiliation)\n@@ -82,1 +82,1 @@\n-    return ShenandoahAllocRequest(min_size, requested_size, _alloc_tlab, YOUNG_GEN);\n+    return ShenandoahAllocRequest(min_size, requested_size, _alloc_tlab, YOUNG_GENERATION);\n@@ -86,1 +86,1 @@\n-    return ShenandoahAllocRequest(min_size, requested_size, _alloc_gclab, YOUNG_GEN);\n+    return ShenandoahAllocRequest(min_size, requested_size, _alloc_gclab, YOUNG_GENERATION);\n@@ -89,2 +89,2 @@\n-  static inline ShenandoahAllocRequest for_shared_gc(size_t requested_size, ShenandoahGeneration generation) {\n-    return ShenandoahAllocRequest(0, requested_size, _alloc_shared_gc, generation);\n+  static inline ShenandoahAllocRequest for_shared_gc(size_t requested_size, ShenandoahRegionAffiliation affiliation) {\n+    return ShenandoahAllocRequest(0, requested_size, _alloc_shared_gc, affiliation);\n@@ -94,1 +94,1 @@\n-    return ShenandoahAllocRequest(0, requested_size, _alloc_shared, YOUNG_GEN);\n+    return ShenandoahAllocRequest(0, requested_size, _alloc_shared, YOUNG_GENERATION);\n@@ -169,2 +169,2 @@\n-  ShenandoahGeneration generation() const {\n-    return _generation;\n+  ShenandoahRegionAffiliation affiliation() const {\n+    return _affiliation;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAllocRequest.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2016, 2020, Red Hat, Inc. All rights reserved.\n@@ -149,3 +149,3 @@\n-  if (r->generation() == NO_GEN) {\n-    r->set_generation(req.generation());\n-  } else if (r->generation() != req.generation()) {\n+  if (r->affiliation() == FREE) {\n+    r->set_affiliation(req.affiliation());\n+  } else if (r->affiliation() != req.affiliation()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2020, Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2020, Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_VM_GC_SHENANDOAH_SHENANDOAHGENERATION_HPP\n+#define SHARE_VM_GC_SHENANDOAH_SHENANDOAHGENERATION_HPP\n+\n+class ShenandoahGeneration {\n+public:\n+  ShenandoahGeneration();\n+};\n+\n+class ShenandoahYoungGeneration : public ShenandoahGeneration {\n+};\n+\n+class ShenandoahOldGeneration : public ShenandoahGeneration {\n+};\n+\n+#endif \/\/ SHARE_VM_GC_SHENANDOAH_SHENANDOAHGENERATION_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -719,0 +719,4 @@\n+bool ShenandoahHeap::is_in_young(const void* p) const {\n+  return heap_region_containing(p)->affiliation() == YOUNG_GENERATION;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -550,0 +550,2 @@\n+  bool is_in_young(const void* p) const;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -263,2 +263,2 @@\n-  ShenandoahGeneration target_gen = heap_region_containing(p)->generation();\n-  if (target_gen == YOUNG_GEN) {\n+  ShenandoahRegionAffiliation target_gen = heap_region_containing(p)->affiliation();\n+  if (target_gen == YOUNG_GENERATION) {\n@@ -285,1 +285,1 @@\n-    if (UseTLAB && target_gen == YOUNG_GEN) {\n+    if (UseTLAB && target_gen == YOUNG_GENERATION) {\n@@ -316,1 +316,1 @@\n-    if (target_gen == YOUNG_GEN) {\n+    if (target_gen == YOUNG_GENERATION) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2020, Red Hat, Inc. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"gc\/shenandoah\/shenandoahCardTable.hpp\"\n@@ -69,1 +70,1 @@\n-  _generation(NO_GEN) {\n+  _affiliation(ShenandoahRegionAffiliation::FREE) {\n@@ -364,2 +365,5 @@\n-  switch (_generation) {\n-    case YOUNG_GEN:\n+  switch (_affiliation) {\n+    case FREE:\n+      st->print(\"|F\");\n+      break;\n+    case YOUNG_GENERATION:\n@@ -368,1 +372,1 @@\n-    case OLD_GEN:\n+    case OLD_GENERATION:\n@@ -371,3 +375,0 @@\n-    case NO_GEN:\n-      st->print(\"| \");\n-      break;\n@@ -446,1 +447,1 @@\n-  _generation = NO_GEN;\n+  _affiliation = ShenandoahRegionAffiliation::FREE;\n@@ -680,0 +681,63 @@\n+\n+class UpdateOopCardValueClosure : public BasicOopIterateClosure {\n+  CardTable* _card_table;\n+\n+public:\n+  UpdateOopCardValueClosure(CardTable *card_table) : _card_table(card_table) { }\n+\n+  void do_oop(oop* p) {\n+    if (ShenandoahHeap::heap()->is_in_young(*p)) {\n+      volatile CardTable::CardValue* card_value = _card_table->byte_for(*p);\n+      *card_value = CardTable::dirty_card_val();\n+    }\n+  }\n+\n+  void do_oop(narrowOop* p) {\n+    ShouldNotReachHere();\n+  }\n+};\n+\n+class UpdateObjectCardValuesClosure : public BasicOopIterateClosure {\n+  UpdateOopCardValueClosure* _oop_closure;\n+\n+public:\n+  UpdateObjectCardValuesClosure(UpdateOopCardValueClosure *oop_closure) :\n+    _oop_closure(oop_closure) {\n+  }\n+\n+  void do_oop(oop* p) {\n+    (*p)->oop_iterate(_oop_closure);\n+  }\n+\n+  void do_oop(narrowOop* p) {\n+    ShouldNotReachHere();\n+  }\n+};\n+\n+void ShenandoahHeapRegion::set_affiliation(ShenandoahRegionAffiliation new_affiliation) {\n+  if (_affiliation == new_affiliation) {\n+    return;\n+  }\n+  CardTable* card_table = ShenandoahBarrierSet::barrier_set()->card_table();\n+  switch (new_affiliation) {\n+    case FREE:\n+      card_table->clear_MemRegion(MemRegion(_bottom, _end));\n+      break;\n+    case YOUNG_GENERATION:\n+      break;\n+    case OLD_GENERATION:\n+      if (_affiliation == YOUNG_GENERATION) {\n+        assert(SafepointSynchronize::is_at_safepoint(), \"old gen card values must be updated in a safepoint\");\n+        card_table->clear_MemRegion(MemRegion(_bottom, _end));\n+\n+        UpdateOopCardValueClosure oop_closure(card_table);\n+        UpdateObjectCardValuesClosure object_closure(&oop_closure);\n+        oop_iterate(&object_closure);\n+      }\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+      return;\n+  }\n+  _affiliation = new_affiliation;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":73,"deletions":9,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2020, Red Hat, Inc. All rights reserved.\n@@ -248,1 +248,1 @@\n-  ShenandoahGeneration _generation;\n+  ShenandoahRegionAffiliation _affiliation;\n@@ -391,2 +391,2 @@\n-  ShenandoahGeneration generation() const {\n-    return _generation;\n+  ShenandoahRegionAffiliation affiliation() const {\n+    return _affiliation;\n@@ -395,3 +395,1 @@\n-  void set_generation(ShenandoahGeneration generation) {\n-    _generation = generation;\n-  }\n+  void set_affiliation(ShenandoahRegionAffiliation new_affiliation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}