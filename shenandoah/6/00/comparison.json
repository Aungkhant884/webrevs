{"files":[{"patch":"@@ -30,0 +30,6 @@\n+enum ShenandoahGeneration {\n+  YOUNG_GEN,\n+  OLD_GEN,\n+  NO_GEN\n+};\n+\n@@ -61,0 +67,1 @@\n+  ShenandoahGeneration const _generation;\n@@ -65,1 +72,1 @@\n-  ShenandoahAllocRequest(size_t _min_size, size_t _requested_size, Type _alloc_type) :\n+  ShenandoahAllocRequest(size_t _min_size, size_t _requested_size, Type _alloc_type, ShenandoahGeneration generation) :\n@@ -67,1 +74,1 @@\n-          _actual_size(0), _alloc_type(_alloc_type)\n+          _actual_size(0), _alloc_type(_alloc_type), _generation(generation)\n@@ -75,1 +82,1 @@\n-    return ShenandoahAllocRequest(min_size, requested_size, _alloc_tlab);\n+    return ShenandoahAllocRequest(min_size, requested_size, _alloc_tlab, YOUNG_GEN);\n@@ -79,1 +86,1 @@\n-    return ShenandoahAllocRequest(min_size, requested_size, _alloc_gclab);\n+    return ShenandoahAllocRequest(min_size, requested_size, _alloc_gclab, YOUNG_GEN);\n@@ -82,2 +89,2 @@\n-  static inline ShenandoahAllocRequest for_shared_gc(size_t requested_size) {\n-    return ShenandoahAllocRequest(0, requested_size, _alloc_shared_gc);\n+  static inline ShenandoahAllocRequest for_shared_gc(size_t requested_size, ShenandoahGeneration generation) {\n+    return ShenandoahAllocRequest(0, requested_size, _alloc_shared_gc, generation);\n@@ -87,1 +94,1 @@\n-    return ShenandoahAllocRequest(0, requested_size, _alloc_shared);\n+    return ShenandoahAllocRequest(0, requested_size, _alloc_shared, YOUNG_GEN);\n@@ -161,0 +168,4 @@\n+\n+  ShenandoahGeneration generation() const {\n+    return _generation;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAllocRequest.hpp","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -149,0 +149,6 @@\n+  if (r->generation() == NO_GEN) {\n+    r->set_generation(req.generation());\n+  } else if (r->generation() != req.generation()) {\n+    return NULL;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -264,0 +264,13 @@\n+  ShenandoahGeneration target_gen = heap_region_containing(p)->generation();\n+  if (target_gen == YOUNG_GEN) {\n+    markWord mark = p->mark();\n+    if (mark.is_marked()) {\n+      \/\/ Already forwarded.\n+      return ShenandoahBarrierSet::resolve_forwarded(p);\n+    } else {\n+      if (mark.age() > InitialTenuringThreshold) {\n+        \/\/tty->print_cr(\"promoting object: \" PTR_FORMAT, p2i(p));\n+        \/\/target_gen = OLD_GEN;\n+      }\n+    }\n+  }\n@@ -276,1 +289,1 @@\n-    if (UseTLAB) {\n+    if (UseTLAB && target_gen == YOUNG_GEN) {\n@@ -280,1 +293,1 @@\n-      ShenandoahAllocRequest req = ShenandoahAllocRequest::for_shared_gc(size);\n+      ShenandoahAllocRequest req = ShenandoahAllocRequest::for_shared_gc(size, target_gen);\n@@ -305,0 +318,6 @@\n+\n+    \/\/ Increment age in young copies\n+    if (target_gen == YOUNG_GEN) {\n+      copy_val->incr_age();\n+    }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -68,1 +68,2 @@\n-  _update_watermark(start) {\n+  _update_watermark(start),\n+  _generation(NO_GEN) {\n@@ -363,0 +364,13 @@\n+  switch (_generation) {\n+    case YOUNG_GEN:\n+      st->print(\"|Y\");\n+      break;\n+    case OLD_GEN:\n+      st->print(\"|O\");\n+      break;\n+    case NO_GEN:\n+      st->print(\"| \");\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n@@ -432,0 +446,1 @@\n+  _generation = NO_GEN;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -248,0 +248,2 @@\n+  ShenandoahGeneration _generation;\n+\n@@ -389,0 +391,8 @@\n+  ShenandoahGeneration generation() const {\n+    return _generation;\n+  }\n+\n+  void set_generation(ShenandoahGeneration generation) {\n+    _generation = generation;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}