{"files":[{"patch":"@@ -239,3 +239,3 @@\n-      _hidden_old_collection_candidates = i;\n-      _first_coalesce_and_fill_candidate = i;\n-      _old_coalesce_and_fill_candidates = cand_idx - i;\n+      _hidden_old_collection_candidates = (uint)i;\n+      _first_coalesce_and_fill_candidate = (uint)i;\n+      _old_coalesce_and_fill_candidates = (uint)(cand_idx - i);\n@@ -255,1 +255,1 @@\n-  _hidden_old_collection_candidates = first_humongous_non_empty;\n+  _hidden_old_collection_candidates = (uint)first_humongous_non_empty;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,1 +70,3 @@\n-  ShenandoahConcurrentGC(generation), _allow_preemption(allow_preemption) {}\n+  ShenandoahConcurrentGC(generation), _allow_preemption(allow_preemption) {\n+  _coalesce_and_fill_region_array = NEW_C_HEAP_ARRAY(ShenandoahHeapRegion*, ShenandoahHeap::heap()->num_regions(), mtGC);\n+}\n@@ -149,4 +151,3 @@\n-  ShenandoahHeapRegion* coalesce_and_fill_region_array[coalesce_and_fill_regions_count];\n-\n-  old_heuristics->get_coalesce_and_fill_candidates(coalesce_and_fill_region_array);\n-  ShenandoahConcurrentCoalesceAndFillTask task(nworkers, coalesce_and_fill_region_array, coalesce_and_fill_regions_count);\n+  assert(coalesce_and_fill_regions_count <= heap->num_regions(), \"Sanity\");\n+  old_heuristics->get_coalesce_and_fill_candidates(_coalesce_and_fill_region_array);\n+  ShenandoahConcurrentCoalesceAndFillTask task(nworkers, _coalesce_and_fill_region_array, coalesce_and_fill_regions_count);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+  ShenandoahHeapRegion** _coalesce_and_fill_region_array;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}