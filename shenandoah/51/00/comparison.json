{"files":[{"patch":"@@ -49,1 +49,1 @@\n-ShenandoahConcurrentGC::ShenandoahConcurrentGC(ShenandoahGeneration* generation) :\n+ShenandoahConcurrentGC::ShenandoahConcurrentGC(ShenandoahGeneration* generation, bool do_old_gc_bootstrap) :\n@@ -52,0 +52,1 @@\n+  _do_old_gc_bootstrap(do_old_gc_bootstrap),\n@@ -438,1 +439,5 @@\n-  _generation->prepare_gc();\n+  if (_do_old_gc_bootstrap) {\n+    heap->global_generation()->prepare_gc();\n+  } else {\n+    _generation->prepare_gc();\n+  }\n@@ -483,1 +488,7 @@\n-  {\n+  if (_do_old_gc_bootstrap) {\n+    \/\/ Update region state for both young and old regions\n+    ShenandoahGCPhase phase(ShenandoahPhaseTimings::init_update_region_states);\n+    ShenandoahInitMarkUpdateRegionStateClosure cl;\n+    heap->parallel_heap_region_iterate(&cl);\n+  } else {\n+    \/\/ Update region state for only young regions\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  const bool                  _do_old_gc_bootstrap;\n@@ -54,1 +55,1 @@\n-  ShenandoahConcurrentGC(ShenandoahGeneration* generation);\n+  ShenandoahConcurrentGC(ShenandoahGeneration* generation, bool do_old_gc_bootstrap = false);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-      service_concurrent_cycle(heap->young_generation(), cause);\n+      service_concurrent_cycle(heap->young_generation(), cause, false);\n@@ -428,1 +428,1 @@\n-      service_concurrent_cycle(heap->global_generation(), cause);\n+      service_concurrent_cycle(heap->global_generation(), cause, false);\n@@ -456,1 +456,1 @@\n-\n+  young_generation->set_mark_incomplete();\n@@ -459,5 +459,1 @@\n-  service_concurrent_cycle(young_generation, cause);\n-\n-  \/\/ Young generation no longer needs this reference to the old concurrent\n-  \/\/ mark so clean it up.\n-  young_generation->set_old_gen_task_queues(NULL);\n+  service_concurrent_cycle(young_generation, cause, true);\n@@ -521,1 +517,3 @@\n-    \/\/ Cycle is complete\n+    \/\/ Old collection is complete, the young generation no longer needs this\n+    \/\/ reference to the old concurrent mark so clean it up.\n+    heap->young_generation()->set_old_gen_task_queues(NULL);\n@@ -540,1 +538,1 @@\n-void ShenandoahControlThread::service_concurrent_cycle(ShenandoahGeneration* generation, GCCause::Cause cause) {\n+void ShenandoahControlThread::service_concurrent_cycle(ShenandoahGeneration* generation, GCCause::Cause cause, bool do_old_gc_bootstrap) {\n@@ -584,1 +582,1 @@\n-  ShenandoahConcurrentGC gc(generation);\n+  ShenandoahConcurrentGC gc(generation, do_old_gc_bootstrap);\n@@ -657,0 +655,4 @@\n+\n+  \/\/ Just in case degenerated cycle preempted old-gen marking, clear the old-gen task queues.\n+  heap->young_generation()->set_old_gen_task_queues(NULL);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  void service_concurrent_cycle(ShenandoahGeneration* generation, GCCause::Cause cause);\n+  void service_concurrent_cycle(ShenandoahGeneration* generation, GCCause::Cause cause, bool reset_old_bitmap_specially);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+  \/\/ Reset mark bitmap for this generation (typically young)\n@@ -141,0 +142,1 @@\n+  \/\/ Capture Top At Mark Start for this generation (typically young)\n@@ -251,2 +253,0 @@\n-  \/\/ TODO: Add a phase for rset scan.\n-  \/\/ ShenandoahGCPhase phase(ShenandoahPhaseTimings::finish_mark);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-      \/\/ Young mark, bootstrapping old.\n+      \/\/ Young mark, bootstrapping old or concurrent with old marking.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,8 +116,2 @@\n-  if (_old_gen_task_queues != NULL) {\n-    \/\/ No generation filter on regions, we need to iterate all the regions.\n-    ShenandoahHeap::heap()->parallel_heap_region_iterate(cl);\n-  } else {\n-    \/\/ Just the young generations here.\n-    ShenandoahGenerationRegionClosure<YOUNG> young_regions(cl);\n-    ShenandoahHeap::heap()->parallel_heap_region_iterate(&young_regions);\n-  }\n+  ShenandoahGenerationRegionClosure<YOUNG> young_regions(cl);\n+  ShenandoahHeap::heap()->parallel_heap_region_iterate(&young_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"}]}