{"files":[{"patch":"@@ -404,1 +404,12 @@\n-    \/\/ Sort the regions that were initially rejected from the collection set in order of index.\n+    \/\/ Above, we have added into the set of mixed-evacuation candidates all old-gen regions for which the live memory\n+    \/\/ that they contain is below a particular old-garbage threshold.  Regions that were not selected for the collection\n+    \/\/ set hold enough live memory that it is not considered efficient (by \"garbage-first standards\") to compact these\n+    \/\/ at the current time.\n+    \/\/\n+    \/\/ However, if any of these regions that were rejected from the collection set reside within areas of memory that\n+    \/\/ might interfere with future humongous allocation requests, we will prioritize them for evacuation at this time.\n+    \/\/ Humongous allocations target the bottom of the heap.  We want old-gen regions to congregate at the top of the\n+    \/\/ heap.\n+    \/\/\n+    \/\/ Sort the regions that were initially rejected from the collection set in order of index.  This allows us to\n+    \/\/ focus our attention on the regions that have low index value (i.e. the old-gen regions at the bottom of the heap).\n@@ -560,4 +571,0 @@\n-    size_t first_active_region = heap->free_set()->first_old_region();\n-    size_t last_active_region = heap->free_set()->last_old_region();\n-    size_t span_of_active_regions = (last_active_region > first_active_region)? last_active_region + 1 - first_active_region: 0;\n-\n@@ -567,2 +574,1 @@\n-    size_t span_of_old_regions = (last_old_region > first_old_region)? last_old_region + 1 - first_old_region: 0;\n-\n+    size_t span_of_old_regions = (last_old_region >= first_old_region)? last_old_region + 1 - first_old_region: 0;\n@@ -571,4 +577,0 @@\n-    \/\/ New active regions may have came into play following the trigger.\n-    size_t first_region = MIN2(first_active_region, first_old_region);\n-    size_t last_region = MAX2(last_active_region, last_old_region);\n-\n@@ -577,2 +579,1 @@\n-                 SIZE_FORMAT \" to \" SIZE_FORMAT \" (\" SIZE_FORMAT\n-                 \"), density at time of trigger: %.1f%%\",\n+                 SIZE_FORMAT \" to \" SIZE_FORMAT \" (\" SIZE_FORMAT \"), densityr: %.1f%%\",\n@@ -580,1 +581,1 @@\n-                 first_region, last_region, (last_region + 1 - first_region), density * 100);\n+                 first_old_region, last_old_region, span_of_old_regions, density * 100);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -464,24 +464,0 @@\n-\/\/ Returns _max if there are no regular old regions\n-size_t ShenandoahFreeSet::first_old_region() {\n-  \/\/ if there are no OldCollector regions, leftmost equals max\n-  for (size_t i  = 0; i < _free_sets.leftmost(OldCollector); i++) {\n-    ShenandoahHeapRegion* r = _heap->get_region(i);\n-    if (r->is_old() && r->is_regular()) {\n-      return i;\n-    }\n-  }\n-  return _free_sets.leftmost(OldCollector); \/\/ which may equal max\n-}\n-\n-\/\/ Returns 0 if there are no regular old regions\n-size_t ShenandoahFreeSet::last_old_region() {\n-  \/\/ if there are no OldCollector regions, leftmost equals max\n-  for (size_t i = _free_sets.max() - 1; i > _free_sets.rightmost(OldCollector); i--) {\n-    ShenandoahHeapRegion* r = _heap->get_region(i);\n-    if (r->is_old() && r->is_regular()) {\n-      return i;\n-    }\n-  }\n-  return _free_sets.rightmost(OldCollector); \/\/ which may equal 0\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -221,4 +221,0 @@\n-  \/\/ index of first and regular old regions\n-  size_t first_old_region();\n-  size_t last_old_region();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3116,0 +3116,1 @@\n+  assert((last_old_region + 1 - first_old_region) * region_size_bytes >= old_generation()->used_regions_size(), \"sanity\");\n@@ -3163,1 +3164,0 @@\n-    bool triggered = false;\n@@ -3170,1 +3170,0 @@\n-        triggered = true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  product(uintx, ShenandoahGenerationalHumongousReserve, 16, EXPERIMENTAL,  \\\n+  product(uintx, ShenandoahGenerationalHumongousReserve, 0, EXPERIMENTAL,   \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}