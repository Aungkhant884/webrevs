[{"commit":{"message":"Respond to reviewer feedback"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"4129539b47fb276197147ee56a40771de5b438ce"},{"commit":{"message":"Whitespace"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"}],"sha":"dc8a6654deab302428c0289e3353abf4253e02f5"},{"commit":{"message":"Fix whitespace and other cosmetics"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp"}],"sha":"6dfea5d5dce5dc898f6a063353270bdb8a2ba4a2"},{"commit":{"message":"Remove debugging instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp"}],"sha":"0f9a475669ed01b7595d5a03ed152b2174be4263"},{"commit":{"message":"Simplify crossing map implementation\n(manually resolved merge conflict)\nThe crossing map maintains a record of the first and last objects\nstarting within each remembered set card's range of memory addresses.\nThe previous implementations used bit-shifts.  It was detected during\ntesting that the c++ compiler was emitting incorrect code in certain\nin-line expansions of the register_object() method.  gdb reports that\nthere are 56 distinct contexts holding the expansion of this function.\nThis simplified implementation does not exhibit the same broken\nbehavior."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp"}],"sha":"4751cfd758df8c95c619cb16b8d434857bdbd865"},{"commit":{"message":"Restore young-gen->used() and capacities at end of degenerated GC\n\nAlso disable certain debugging instrumentation."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp"}],"sha":"b28036a9e65bc69af699a75a0dce166bdba60d5b"},{"commit":{"message":"Claim credit for Old and Young GC following GLOBAL\/Full GC"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp"}],"sha":"178fdb390a9bddaf5ca6f6385aa31edb569ceb83"},{"commit":{"message":"Fix pad accounting for plab alignment\n\nIn the case that an extra card worth of padding memory is required in\norder to assure that the fill object that precedes the to-be-allocated\nplab is at least minimum fill size large, add this padding into the used\naccounting."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp"}],"sha":"c111b79ecaa579cef9aa7d4c9dfe03cc54d24be2"},{"commit":{"message":"Three changes:\n1. In ShenandoahOldHeuristics::prime_collection_set(), consume_old_collection_candidate() for each region added\n   to the primed collection set.  This corrects an accidental removal of this behavior in an earlier commit of\n   this same branch.\n2. In ShenandoahOldHeuristics::prime_collection_set(), be less conservate in limiting size of the primed collection\n   set.  Only subtract a region's free() memory from the evacuation budget if the budget is constrained by limited memory.\n3. In ShenandoahFullGC::do_it(), increase young_gen->used() by heap->get_young_evac_expended() before resetting\n   young evac expended."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"d5dce09e36f515b23649aa58cb7f0e8232227116"},{"commit":{"message":"Fix argument in instrumentation calls"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"195fabf6e1a3fed1e37d20e9e4f51c3ed6681301"},{"commit":{"message":"Fix bug in ShenandoahCardCluster::coalesce_objects()\n (manual resolution of merge conflict)\nAlso, make some improvements to PLAB allocations to reduce dependency on shared allocations, and added some\ninstrumentation to observe behavior of adjusted availability within both young-gen and old-gen."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"00fadd3999ad8fbc085dd7be985582598234e4da"},{"commit":{"message":"Multiple improvements (manually resolved merge conflict)\n1. Add command-line option ShenandoahGuaranteedyoungGCInterval\n2. Fix bugs in generation usage accounting (as detected by Shenandoah\n   Verifier)\n3. Reset GCLAB preferred size to minimum PLAB size when a GCLAB cannot\n   be allocated due to exceeding planned evacuation waste.\n4. Add a comment suggesting the minimum value of ShenandoahEvacWaste be\n   1.6 when running in generational mode."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"df0c7ad9b4ab9d718dee13e93cf28c871de68651"},{"commit":{"message":"Tidy up some loose ends\n\nReview of code revealed a few places where work remained on patches committed previously."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"7b119ab2883e0d7ffcbe54435f26868e365f13ed"},{"commit":{"message":"Fix up enforement of old-evacuation reserve\n\nMy initial erroneous implementation had assumed old-gen evacuations used gclabs and promotions used plabs.  This\nnew implementation understands that both old-gen evacuations and promotions use plabs."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"}],"sha":"a268e8d0de4555c90eb1a3137d61a67efc1bcff9"},{"commit":{"message":"Progress towards eliminating degenerated and full GC with large workload\n\nAs committed, this code is crashing when OLD is triggered.  I'm\ncommitting these changes in order to rebuild on an rr-enabled host where\nI can debug further.\n\nThis includes the following changes, which will most likely be\nupstreamed as a sequence of independent pull requests:\n\n1. We were resetting or incrementing the age of regions in final-mark.\nThis was the wrong place to do this, because it ignored the allocation\nof objects during evacuation, including the allocations for survivor\nobjects within survivor regions.  I've moved this code to final update\nreferences.\n\n2. I've changed the mechanism for biasing young-gen regions that have\nreached promotion age and changed the default values.  I find that I\nneed to multiply the garbage by 16 or more to get reasonable behavior,\nwhereas the original implementation was multiplying the garbage by only\n1.5.\n\n3. When choosing collection sets,  we were including regions that had\nvery little garbage (e.g. only 16 bytes of garbage!) if we had not yet\nreached our \"minimum amount of collected garbage\" heuristic threshold.\nI've removed this heuristic as it is wasteful and counterproductive.\nI've left a comment that we might want to revisit this design in the future.\n\n4. When choosing collection sets, in the case that we had met our our\n\"minimum amount of collected garbage\" heuristic, we were excluding regions\nthat had reached promotion age if the amount of garbage was less than\nShenandoahGarbageThreshold (default 25%).  I'm in the process of changing\nthis to include all promotion-age regions that fit within the ShenandoahEvacReserve\n(default 5% of generation capacity), still prioritizing so regions with more\ngarbage are inserted into the collection set before regions with less garbage.\nI had observed that the collection set was often ignoring large numbers of\npromotion-age regions even while it was well below its potential full evacuation\nreserve (I saw cases where the collection set was less than 50% of its evacuation\ncapacity while over 200 promotion-age regions were left out of the collection set).\n\n5. I also inserted some \"improvements\" into the should_start_gc() heuristics.  If\nlive-memory in generation is increasing or if previous gc was degenerated, I \"scale\"\nmy prediction of expected gc execution time so that we trigger the next gc sooner\nthan with original heuristic implementation.\n\n6.  Fixed up full GC so that it properly ages and promotes objects.  While the fixes\nabove are designed to greatly reduce the dependency on full GC, we need full GC to\nbehave better if it ever is invoked.\n\nOne area known to require additional attention is the implementation of\nmemory budget enforcment for old-gen evacuation and promotion.  Some of\nthe code in place assumes we have old-gen GCLABs.  That was a\nmisunderstanding on my part.  All old-gen allocations, both for\nevacuation and for promotion, use PLAB buffers.  I've started work on\nfixing this, as represented by a few declarations inserted into\nShenandoahThreadLocal class."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"9b65fc5fad2d69d9bbc8dd6ae024d3ac0da2b304"},{"commit":{"message":"Minor improvements to facilitate validation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"}],"sha":"d8f1b889ac953f7abb79cc353cfd1402c723413a"},{"commit":{"message":"Allow young-gen to borrrow memory from old-gen during evacuation and update-refs\n\nThis patch also enforces an upper bound on promotions to assure that promotion allocations do not\ntake memory that is set aside to hold the results of old-gen evacuations.\n\nRuns on some workloads.  Has not been thoroughly exercised.  Behavior has not been thoroughly scrutinized.\n\nIncludes some instrumentation which will be removed after further testing."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"5156121b6100913725e1f92d1fc1b8dab7b58e20"}]