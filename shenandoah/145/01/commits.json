[{"commit":{"message":"Improvements requested by reviewer"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"0741d705d4ccad853dfee35e4979a4aa3b3b26f2"},{"commit":{"message":"Fix whitespace"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"d5263dcbfc222fbafe5ac407735cfff6e07fcb10"},{"commit":{"message":"Merge remote-tracking branch 'GitFarmBranch\/pack-old-evacuations-tightly' into pack-old-evacuations-tightly"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"0d8c092e209f61f91ccb41312a028769147d0f4c"},{"commit":{"message":"Remove instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"ad5aa877778ac721ec1ae2e3b25079dc41acd0e6"},{"commit":{"message":"Improvements to comments and logging\n\nAlso some new instrumentation, which will be removed before upstreaming\nfinal patch."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"3eab5d81f70d7a2568aa85e3f3988196cc3c2da3"},{"commit":{"message":"Remove newline from inside log message"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"b8038cefb13908fe18ea4ca66f0a63bad8913d7f"},{"commit":{"message":"Fix response to PLAB promotion failures\n\nWhen promotion memory runs short, be more frugal in how we respond.\nAlso, fixup some comments and add some instrumentation."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"7beb9d4455f472bb177df54f9fe89518123f5442"},{"commit":{"message":"Fixup mismatched else clause"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"1c6e275fc3b86107d4a3cfeaa1b4cd7823dac08f"},{"commit":{"message":"Fix unbalanced braces"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"f5448c6096dc87101e81c064e4c9ecd359292061"},{"commit":{"message":"Handle promotion failure specially for unnamed threads\n\nUnnamed threads are unable to query the current value of GCId.  In the\nrare event that an unnamed thread experiences a promotion failure, the\nlog message needs to be handled differently than the normal case."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"0f6ef75a825dd6f6a11bceb9ef3467cdd9c078a0"},{"commit":{"message":"Fix merge conflict problems"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"4edd31b840e13843f891d9efbe17d0956107bfa4"},{"commit":{"message":"Be more careful about changing affiliation to YOUNG"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"cdb761aa9bcd118c0ee9eff72489c71bfaafa3ee"},{"commit":{"message":"Remove affiliation overwrite side effect from make_regular_bypass\n\nThis change makes the code more clear and easier to maintain."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"c14b8316439071840fecd49ad316fa6747c78a52"},{"commit":{"message":"Log messages for old and young only if is generational"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"de9e20acf3e518991d811b29aa8a64fffe76b644"},{"commit":{"message":"Add log messages to degen and full GC\n\nReport the amount of memory available in old and young at ends of each\nGC."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"}],"sha":"611ecb365e622b4d0af3fd61c9a5bc5e62d5890e"},{"commit":{"message":"Do not make_regular_bypass without heap lock\n\nMy first attempt to fix the unwanted relabeling of OLD regions to YOUNG\nrequired several invocations of\nShenandahHeapRegion::make_regular_bypass() from outside of the heap\nlock.  This violated protocol, resulting in upheaval."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"b97a20de6ff7e0973dcb128d1ddd6648ca40fa75"},{"commit":{"message":"Insert instrumentation for further testing"},"files":[],"sha":"69797df90a264b01bd1b446decd8764dd78219b4"},{"commit":{"message":"Fix error in calculation of future TLAB size"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"2e28ca46b2131490e1686276f81bbbe885db59c4"},{"commit":{"message":"Start young collect instead of old if mixed evacuations are pending\n\nReviewed-by: kdnilsen"},"files":[],"sha":"a800ee2e7717cfa506974e6484f1cfcb003ab4f5"},{"commit":{"message":"Filter out invalid pointers picked up by old gen SATB\n\nReviewed-by: kdnilsen"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"}],"sha":"627392cc82f78d9179df3923e3a660a375f8cfeb"},{"commit":{"message":"Fix assertion comparison\n\nShould be >= rather than >."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"06a9caa443985b5ac6aa9a68ea4b15993b331ac9"},{"commit":{"message":"Improve budgeting of aged young heap regions\n\nWhen a tenure-aged region is added to the collection set, we know that\nthe entirety of its live data is intended to be promoted.  Account for\nthis knowledge in the budgeting of the young-gen and old-gen evacuation\nbudgets."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"ea3555a3a851d3e7c5295f6e65fccc2109318904"},{"commit":{"message":"Fix full gc\n1. Correct off-by-one error in promotion eligibility test\n 2. Disable the post-compaction overwriting of region affiliations which was causing regions that had previously\n    been FREE and are now holding compacted old-gen data to be mislabeled as YOUNG.  In some cases, post-compaction\n    relabeling of OLD regions caused the total live memory in YOUNG to exceed its capacity, thus rejecting further\n    allocation requests, and immediately triggering another degenerated or Full GC."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"c29221ddab2db2cb91bd322cd8de5686e999bfd8"},{"commit":{"message":"Performance improvements for object promotion\n\nReset promoted\texpended at start of concurrent\tGC rather than end.  This corrects a bug that manifests when concurrent\nGC degenerates and we don't finish in the normal way.  Following a degenerated GC, we were failing to reset promoted\nexpended.\n\nFix up the remediation code that executes when PLAB allocation fails.  We had previously failed\tto provide any special\nhandling for threads that do not have PLABs so objects encountered by such a thread were always evacuated to young so\nthey could be promoted in a subsequent GC pass.\t While it was relatively harmless to leave these rare objects in young-gen\nmemory, a more\tsignificant impact was that this event would be logged as promotion failure and this would trigger immediate\nexecution of an\told-gen\tcollection, even when old-gen memory is\tplentiful.  Now, if a thread that does not have a PLAB\nneeds to promote an object, we use a shared allocation to obtain memory for the object's copy.  There seems to be a single\nJVM thread that is set up without a PLAB and this thread occassionally stumbles onto objects that need to be promoted.\n\nBe more\tgenerous in the\tcomputation of promotion reserve.  The miserly budget previously set aside was causing\npromotions to fail, resulting in significant increase in attempts at shared-memory allocations and causing older\nobjects\tto accumulate in young-gen.  During subsequent GC passes, these\tobjects\twould once again be likely to fail\nto promote, causing a a\trepeat of the problems just described.\n\nInsert code to account for round-off errors that occur in calculations and enforcement of promotion budgets.  The\nprevious failure to account for\tthese round-off\terrors was resulting in\twraparound arithmetic on the size_t type,\ncausing\tpromotion budget to be extremely large in some rare cases.  This would result in depletion of old-gen space\nto the extent that subsequent evacuations of old-gen could not be performed.\n\nAdd logging reports when promotions fail.\n\nAllow memory set aside to fulfill the minimum evacuation reserve in old-gen to be loaned to young-gen if the memory\nis not needed in the current pass to hold old-gen evacuations."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"d2c01fa7cd48fbf2f2ec1b74ed457716d86f6696"},{"commit":{"message":"Make promotion budget more generous\n\nThe reason to enforce a promotion budget is to make more memory\navailable for loaning to young-gen allocations during evacuation and\nupdate-refs phases of gc.  A second reason to enforce a promotion budget\nis to assure that old-gen memory does not get so full that there is no\nmemory available into which to copy objects during old-gen evacuations.\n\nWith this patch, if it is available, we set the promotion budget large\nenough to hold all of the live objects contained within the young-gen\ncollection set.\n\nManually resolved merge conflicts and brought in some additional context\nfrom the development branch."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"5e90289d31ca037db3f5e2010c08c638da7caa84"},{"commit":{"message":"Adjust PLAB use to pack more tightly into old-gen memory\n\nThis reduces likelihood of evacuation failures and delays the need for a\nsubsequent old evacuation."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"}],"sha":"0ac7a988ffc02c71edd0f0614f68a2b6f045a943"},{"commit":{"message":"Merge branch 'shenandoah-master' into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"4404d3cfaa9e1b569a0eae1910793d4c20901b2e"},{"commit":{"message":"Merge branch 'shenandoah-master' into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"}],"sha":"3bc4ebfc2929dd899c1949de7f0c8cb2068de898"},{"commit":{"message":"Merge branch 'shenandoah-master' into shenandoah"},"files":[],"sha":"6fa0626fa95c2c4fe3ef811235b3ec1f407e3034"},{"commit":{"message":"Only clear requested gc cause when it is handled\n\nReviewed-by: kdnilsen"},"files":[],"sha":"1641da95188ef3c482e5ecc7fef04ac1c40511fe"},{"commit":{"message":"Merge branch 'shenandoah-master' into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"}],"sha":"1aaf9d4a2fc2aba03eee4c3a3e8a11312844b0cc"},{"commit":{"message":"Merge branch 'shenandoah-master' into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"}],"sha":"8783e88361794ec49fe97aa321c24b4ed6d2b936"},{"commit":{"message":"Merge branch 'shenandoah-master' into shenandoah"},"files":[],"sha":"2fdc4a795aeb9a51d5e277ec6af4327d297d81b4"},{"commit":{"message":"Merge upstream into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"bf45e158c3b9caab677728130c04b2335c051970"},{"commit":{"message":"Merge upstream into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"1780cb27d23267e495331852a474ac3c328d0d67"},{"commit":{"message":"Merge upstream  into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"0b0de8acc3d71131a5223003e2b7147c9de0680f"},{"commit":{"message":"Merge upstream into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"357d0a81a975befec80d513a9ff2b91396df55b7"},{"commit":{"message":"Revert \"Mutator may fail to evacuate\"\n\nThis reverts commit 2132a6d151e4c46b71a220100fa478a8be676f13."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"eb6f4f4f95a00520025abc05b3c183a81cf78b3c"}]