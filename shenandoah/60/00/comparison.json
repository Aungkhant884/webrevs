{"files":[{"patch":"@@ -202,3 +202,5 @@\n-    \/\/ Also capture update_watermark for old-gen regions.\n-    ShenandoahCaptureUpdateWaterMarkForOld old_cl(complete_marking_context());\n-    heap->old_generation()->parallel_heap_region_iterate(&old_cl);\n+    if (generation_mode() == YOUNG) {\n+      \/\/ Also capture update_watermark for old-gen regions.\n+      ShenandoahCaptureUpdateWaterMarkForOld old_cl(complete_marking_context());\n+      heap->old_generation()->parallel_heap_region_iterate(&old_cl);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  bool prepare_regions_and_collection_set(bool concurrent);\n+  virtual bool prepare_regions_and_collection_set(bool concurrent);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,6 +100,1 @@\n-    {\n-      ShenandoahGCPhase phase(ShenandoahPhaseTimings::choose_cset);\n-      ShenandoahHeapLocker locker(heap->lock());\n-      \/\/ Old-gen choose_collection_set() does not directly manipulate heap->collection_set() so no need to clear it.\n-      _generation->heuristics()->choose_collection_set(nullptr, nullptr);\n-    }\n+    _generation->prepare_regions_and_collection_set(true);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahFreeSet.hpp\"\n@@ -32,0 +33,1 @@\n+#include \"gc\/shenandoah\/shenandoahMarkClosures.hpp\"\n@@ -182,0 +184,26 @@\n+\n+bool ShenandoahOldGeneration::prepare_regions_and_collection_set(bool concurrent) {\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  assert(!heap->is_full_gc_in_progress(), \"Only for concurrent and degenerated GC\");\n+\n+  {\n+    ShenandoahGCPhase phase(concurrent ? ShenandoahPhaseTimings::final_update_region_states : ShenandoahPhaseTimings::degen_gc_final_update_region_states);\n+    ShenandoahFinalMarkUpdateRegionStateClosure cl(complete_marking_context());\n+\n+    parallel_heap_region_iterate(&cl);\n+    heap->assert_pinned_region_status();\n+  }\n+\n+  {\n+    ShenandoahGCPhase phase(concurrent ? ShenandoahPhaseTimings::choose_cset : ShenandoahPhaseTimings::degen_gc_choose_cset);\n+    ShenandoahHeapLocker locker(heap->lock());\n+    heuristics()->choose_collection_set(nullptr, nullptr);\n+  }\n+\n+  {\n+    ShenandoahGCPhase phase(concurrent ? ShenandoahPhaseTimings::final_rebuild_freeset : ShenandoahPhaseTimings::degen_gc_final_rebuild_freeset);\n+    ShenandoahHeapLocker locker(heap->lock());\n+    heap->free_set()->rebuild();\n+  }\n+  return false;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+  bool prepare_regions_and_collection_set(bool concurrent) override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}