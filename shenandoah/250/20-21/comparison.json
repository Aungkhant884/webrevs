{"files":[{"patch":"@@ -47,1 +47,1 @@\n-  _membership = NEW_C_HEAP_ARRAY(FreeMemoryType, max_regions, mtGC);\n+  _membership = NEW_C_HEAP_ARRAY(ShenandoahFreeMemoryType, max_regions, mtGC);\n@@ -52,1 +52,1 @@\n-  FREE_C_HEAP_ARRAY(FreeMemoryType, _membership);\n+  FREE_C_HEAP_ARRAY(ShenandoahFreeMemoryType, _membership);\n@@ -62,4 +62,4 @@\n-    _left_mosts[idx] = _max;\n-    _right_mosts[idx] = 0;\n-    _left_mosts_empty[idx] = _max;\n-    _right_mosts_empty[idx] = 0;\n+    _leftmosts[idx] = _max;\n+    _rightmosts[idx] = 0;\n+    _leftmosts_empty[idx] = _max;\n+    _rightmosts_empty[idx] = 0;\n@@ -84,1 +84,1 @@\n-void ShenandoahSetsOfFree::increase_used(FreeMemoryType which_set, size_t bytes) {\n+void ShenandoahSetsOfFree::increase_used(ShenandoahFreeMemoryType which_set, size_t bytes) {\n@@ -92,4 +92,4 @@\n-inline void ShenandoahSetsOfFree::shrink_bounds_if_touched(FreeMemoryType set, size_t idx) {\n-  if (idx == _left_mosts[set]) {\n-    while ((_left_mosts[set] < _max) && !in_free_set(_left_mosts[set], set)) {\n-      _left_mosts[set]++;\n+inline void ShenandoahSetsOfFree::shrink_bounds_if_touched(ShenandoahFreeMemoryType set, size_t idx) {\n+  if (idx == _leftmosts[set]) {\n+    while ((_leftmosts[set] < _max) && !in_free_set(_leftmosts[set], set)) {\n+      _leftmosts[set]++;\n@@ -97,3 +97,3 @@\n-    if (_left_mosts_empty[set] < _left_mosts[set]) {\n-      \/\/ This gets us closer to where we need to be; we'll scan further when left_mosts_empty is requested.\n-      _left_mosts_empty[set] = _left_mosts[set];\n+    if (_leftmosts_empty[set] < _leftmosts[set]) {\n+      \/\/ This gets us closer to where we need to be; we'll scan further when leftmosts_empty is requested.\n+      _leftmosts_empty[set] = _leftmosts[set];\n@@ -102,3 +102,3 @@\n-  if (idx == _right_mosts[set]) {\n-    while (_right_mosts[set] > 0 && !in_free_set(_right_mosts[set], set)) {\n-      _right_mosts[set]--;\n+  if (idx == _rightmosts[set]) {\n+    while (_rightmosts[set] > 0 && !in_free_set(_rightmosts[set], set)) {\n+      _rightmosts[set]--;\n@@ -106,3 +106,3 @@\n-    if (_right_mosts_empty[set] > _right_mosts[set]) {\n-      \/\/ This gets us closer to where we need to be; we'll scan further when right_mosts_empty is requested.\n-      _right_mosts_empty[set] = _right_mosts[set];\n+    if (_rightmosts_empty[set] > _rightmosts[set]) {\n+      \/\/ This gets us closer to where we need to be; we'll scan further when rightmosts_empty is requested.\n+      _rightmosts_empty[set] = _rightmosts[set];\n@@ -113,1 +113,1 @@\n-inline void ShenandoahSetsOfFree::expand_bounds_maybe(FreeMemoryType set, size_t idx, size_t region_capacity) {\n+inline void ShenandoahSetsOfFree::expand_bounds_maybe(ShenandoahFreeMemoryType set, size_t idx, size_t region_capacity) {\n@@ -115,2 +115,2 @@\n-    if (_left_mosts_empty[set] > idx) {\n-      _left_mosts_empty[set] = idx;\n+    if (_leftmosts_empty[set] > idx) {\n+      _leftmosts_empty[set] = idx;\n@@ -118,2 +118,2 @@\n-    if (_right_mosts_empty[set] < idx) {\n-      _right_mosts_empty[set] = idx;\n+    if (_rightmosts_empty[set] < idx) {\n+      _rightmosts_empty[set] = idx;\n@@ -122,2 +122,2 @@\n-  if (_left_mosts[set] > idx) {\n-    _left_mosts[set] = idx;\n+  if (_leftmosts[set] > idx) {\n+    _leftmosts[set] = idx;\n@@ -125,2 +125,2 @@\n-  if (_right_mosts[set] < idx) {\n-    _right_mosts[set] = idx;\n+  if (_rightmosts[set] < idx) {\n+    _rightmosts[set] = idx;\n@@ -132,1 +132,1 @@\n-  FreeMemoryType orig_set = membership(idx);\n+  ShenandoahFreeMemoryType orig_set = membership(idx);\n@@ -142,1 +142,1 @@\n-void ShenandoahSetsOfFree::make_free(size_t idx, FreeMemoryType which_set, size_t region_capacity) {\n+void ShenandoahSetsOfFree::make_free(size_t idx, ShenandoahFreeMemoryType which_set, size_t region_capacity) {\n@@ -154,1 +154,1 @@\n-void ShenandoahSetsOfFree::move_to_set(size_t idx, FreeMemoryType new_set, size_t region_capacity) {\n+void ShenandoahSetsOfFree::move_to_set(size_t idx, ShenandoahFreeMemoryType new_set, size_t region_capacity) {\n@@ -157,1 +157,1 @@\n-  FreeMemoryType orig_set = _membership[idx];\n+  ShenandoahFreeMemoryType orig_set = _membership[idx];\n@@ -180,1 +180,1 @@\n-inline FreeMemoryType ShenandoahSetsOfFree::membership(size_t idx) const {\n+inline ShenandoahFreeMemoryType ShenandoahSetsOfFree::membership(size_t idx) const {\n@@ -187,1 +187,1 @@\n-inline bool ShenandoahSetsOfFree::in_free_set(size_t idx, FreeMemoryType test_set) const {\n+inline bool ShenandoahSetsOfFree::in_free_set(size_t idx, ShenandoahFreeMemoryType test_set) const {\n@@ -197,1 +197,1 @@\n-inline size_t ShenandoahSetsOfFree::left_most(FreeMemoryType which_set) const {\n+inline size_t ShenandoahSetsOfFree::leftmost(ShenandoahFreeMemoryType which_set) const {\n@@ -199,1 +199,1 @@\n-  size_t idx = _left_mosts[which_set];\n+  size_t idx = _leftmosts[which_set];\n@@ -208,1 +208,1 @@\n-inline size_t ShenandoahSetsOfFree::right_most(FreeMemoryType which_set) const {\n+inline size_t ShenandoahSetsOfFree::rightmost(ShenandoahFreeMemoryType which_set) const {\n@@ -210,2 +210,2 @@\n-  size_t idx = _right_mosts[which_set];\n-  assert ((_left_mosts[which_set] == _max) || in_free_set(idx, which_set), \"right-most region must be free\");\n+  size_t idx = _rightmosts[which_set];\n+  assert ((_leftmosts[which_set] == _max) || in_free_set(idx, which_set), \"right-most region must be free\");\n@@ -215,1 +215,1 @@\n-size_t ShenandoahSetsOfFree::left_most_empty(FreeMemoryType which_set) {\n+size_t ShenandoahSetsOfFree::leftmost_empty(ShenandoahFreeMemoryType which_set) {\n@@ -217,1 +217,1 @@\n-  for (size_t idx = _left_mosts_empty[which_set]; idx < _max; idx++) {\n+  for (size_t idx = _leftmosts_empty[which_set]; idx < _max; idx++) {\n@@ -219,1 +219,1 @@\n-      _left_mosts_empty[which_set] = idx;\n+      _leftmosts_empty[which_set] = idx;\n@@ -223,2 +223,2 @@\n-  _left_mosts_empty[which_set] = _max;\n-  _right_mosts_empty[which_set] = 0;\n+  _leftmosts_empty[which_set] = _max;\n+  _rightmosts_empty[which_set] = 0;\n@@ -228,1 +228,1 @@\n-inline size_t ShenandoahSetsOfFree::right_most_empty(FreeMemoryType which_set) {\n+inline size_t ShenandoahSetsOfFree::rightmost_empty(ShenandoahFreeMemoryType which_set) {\n@@ -230,1 +230,1 @@\n-  for (intptr_t idx = _right_mosts_empty[which_set]; idx >= 0; idx--) {\n+  for (intptr_t idx = _rightmosts_empty[which_set]; idx >= 0; idx--) {\n@@ -232,1 +232,1 @@\n-      _right_mosts_empty[which_set] = idx;\n+      _rightmosts_empty[which_set] = idx;\n@@ -236,2 +236,2 @@\n-  _left_mosts_empty[which_set] = _max;\n-  _right_mosts_empty[which_set] = 0;\n+  _leftmosts_empty[which_set] = _max;\n+  _rightmosts_empty[which_set] = 0;\n@@ -241,1 +241,1 @@\n-inline bool ShenandoahSetsOfFree::alloc_from_left_bias(FreeMemoryType which_set) {\n+inline bool ShenandoahSetsOfFree::alloc_from_left_bias(ShenandoahFreeMemoryType which_set) {\n@@ -246,1 +246,1 @@\n-void ShenandoahSetsOfFree::establish_alloc_bias(FreeMemoryType which_set) {\n+void ShenandoahSetsOfFree::establish_alloc_bias(ShenandoahFreeMemoryType which_set) {\n@@ -251,1 +251,1 @@\n-  size_t middle = (_left_mosts[which_set] + _right_mosts[which_set]) \/ 2;\n+  size_t middle = (_leftmosts[which_set] + _rightmosts[which_set]) \/ 2;\n@@ -255,1 +255,1 @@\n-  for (size_t index = _left_mosts[which_set]; index < middle; index++) {\n+  for (size_t index = _leftmosts[which_set]; index < middle; index++) {\n@@ -261,1 +261,1 @@\n-  for (size_t index = middle; index <= _right_mosts[which_set]; index++) {\n+  for (size_t index = middle; index <= _rightmosts[which_set]; index++) {\n@@ -280,4 +280,4 @@\n-  size_t left_mosts[NumFreeSets];\n-  size_t right_mosts[NumFreeSets];\n-  size_t empty_left_mosts[NumFreeSets];\n-  size_t empty_right_mosts[NumFreeSets];\n+  size_t leftmosts[NumFreeSets];\n+  size_t rightmosts[NumFreeSets];\n+  size_t empty_leftmosts[NumFreeSets];\n+  size_t empty_rightmosts[NumFreeSets];\n@@ -286,4 +286,4 @@\n-    left_mosts[i] = _max;\n-    empty_left_mosts[i] = _max;\n-    right_mosts[i] = 0;\n-    empty_right_mosts[i] = 0;\n+    leftmosts[i] = _max;\n+    empty_leftmosts[i] = _max;\n+    rightmosts[i] = 0;\n+    empty_rightmosts[i] = 0;\n@@ -293,1 +293,1 @@\n-    FreeMemoryType set = membership(i);\n+    ShenandoahFreeMemoryType set = membership(i);\n@@ -305,2 +305,2 @@\n-        if (i < left_mosts[set]) {\n-          left_mosts[set] = i;\n+        if (i < leftmosts[set]) {\n+          leftmosts[set] = i;\n@@ -308,2 +308,2 @@\n-        if (is_empty && (i < empty_left_mosts[set])) {\n-          empty_left_mosts[set] = i;\n+        if (is_empty && (i < empty_leftmosts[set])) {\n+          empty_leftmosts[set] = i;\n@@ -311,2 +311,2 @@\n-        if (i > right_mosts[set]) {\n-          right_mosts[set] = i;\n+        if (i > rightmosts[set]) {\n+          rightmosts[set] = i;\n@@ -314,2 +314,2 @@\n-        if (is_empty && (i > empty_right_mosts[set])) {\n-          empty_right_mosts[set] = i;\n+        if (is_empty && (i > empty_rightmosts[set])) {\n+          empty_rightmosts[set] = i;\n@@ -327,2 +327,2 @@\n-  assert (left_most(Mutator) <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, left_most(Mutator),  _max);\n-  assert (right_most(Mutator) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(Mutator),  _max);\n+  assert (leftmost(Mutator) <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, leftmost(Mutator),  _max);\n+  assert (rightmost(Mutator) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, rightmost(Mutator),  _max);\n@@ -330,4 +330,4 @@\n-  assert (left_most(Mutator) == _max || in_free_set(left_most(Mutator), Mutator),\n-          \"leftmost region should be free: \" SIZE_FORMAT,  left_most(Mutator));\n-  assert (left_most(Mutator) == _max || in_free_set(right_most(Mutator), Mutator),\n-          \"rightmost region should be free: \" SIZE_FORMAT, right_most(Mutator));\n+  assert (leftmost(Mutator) == _max || in_free_set(leftmost(Mutator), Mutator),\n+          \"leftmost region should be free: \" SIZE_FORMAT,  leftmost(Mutator));\n+  assert (leftmost(Mutator) == _max || in_free_set(rightmost(Mutator), Mutator),\n+          \"rightmost region should be free: \" SIZE_FORMAT, rightmost(Mutator));\n@@ -336,13 +336,13 @@\n-  size_t beg_off = left_mosts[Mutator];\n-  size_t end_off = right_mosts[Mutator];\n-  assert (beg_off >= left_most(Mutator),\n-          \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most(Mutator));\n-  assert (end_off <= right_most(Mutator),\n-          \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most(Mutator));\n-\n-  beg_off = empty_left_mosts[Mutator];\n-  end_off = empty_right_mosts[Mutator];\n-  assert (beg_off >= left_most_empty(Mutator),\n-          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most_empty(Mutator));\n-  assert (end_off <= right_most_empty(Mutator),\n-          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most_empty(Mutator));\n+  size_t beg_off = leftmosts[Mutator];\n+  size_t end_off = rightmosts[Mutator];\n+  assert (beg_off >= leftmost(Mutator),\n+          \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, leftmost(Mutator));\n+  assert (end_off <= rightmost(Mutator),\n+          \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, rightmost(Mutator));\n+\n+  beg_off = empty_leftmosts[Mutator];\n+  end_off = empty_rightmosts[Mutator];\n+  assert (beg_off >= leftmost_empty(Mutator),\n+          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, leftmost_empty(Mutator));\n+  assert (end_off <= rightmost_empty(Mutator),\n+          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, rightmost_empty(Mutator));\n@@ -351,2 +351,2 @@\n-  assert (left_most(Collector) <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, left_most(Collector),  _max);\n-  assert (right_most(Collector) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(Collector),  _max);\n+  assert (leftmost(Collector) <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, leftmost(Collector),  _max);\n+  assert (rightmost(Collector) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, rightmost(Collector),  _max);\n@@ -354,4 +354,4 @@\n-  assert (left_most(Collector) == _max || in_free_set(left_most(Collector), Collector),\n-          \"leftmost region should be free: \" SIZE_FORMAT,  left_most(Collector));\n-  assert (left_most(Collector) == _max || in_free_set(right_most(Collector), Collector),\n-          \"rightmost region should be free: \" SIZE_FORMAT, right_most(Collector));\n+  assert (leftmost(Collector) == _max || in_free_set(leftmost(Collector), Collector),\n+          \"leftmost region should be free: \" SIZE_FORMAT,  leftmost(Collector));\n+  assert (leftmost(Collector) == _max || in_free_set(rightmost(Collector), Collector),\n+          \"rightmost region should be free: \" SIZE_FORMAT, rightmost(Collector));\n@@ -360,13 +360,13 @@\n-  beg_off = left_mosts[Collector];\n-  end_off = right_mosts[Collector];\n-  assert (beg_off >= left_most(Collector),\n-          \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most(Collector));\n-  assert (end_off <= right_most(Collector),\n-          \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most(Collector));\n-\n-  beg_off = empty_left_mosts[Collector];\n-  end_off = empty_right_mosts[Collector];\n-  assert (beg_off >= left_most_empty(Collector),\n-          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most_empty(Collector));\n-  assert (end_off <= right_most_empty(Collector),\n-          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most_empty(Collector));\n+  beg_off = leftmosts[Collector];\n+  end_off = rightmosts[Collector];\n+  assert (beg_off >= leftmost(Collector),\n+          \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, leftmost(Collector));\n+  assert (end_off <= rightmost(Collector),\n+          \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, rightmost(Collector));\n+\n+  beg_off = empty_leftmosts[Collector];\n+  end_off = empty_rightmosts[Collector];\n+  assert (beg_off >= leftmost_empty(Collector),\n+          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, leftmost_empty(Collector));\n+  assert (end_off <= rightmost_empty(Collector),\n+          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, rightmost_empty(Collector));\n@@ -375,2 +375,2 @@\n-  assert (left_most(OldCollector) <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, left_most(OldCollector),  _max);\n-  assert (right_most(OldCollector) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(OldCollector),  _max);\n+  assert (leftmost(OldCollector) <= _max, \"leftmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, leftmost(OldCollector),  _max);\n+  assert (rightmost(OldCollector) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, rightmost(OldCollector),  _max);\n@@ -378,4 +378,4 @@\n-  assert (left_most(OldCollector) == _max || in_free_set(left_most(OldCollector), OldCollector),\n-          \"leftmost region should be free: \" SIZE_FORMAT,  left_most(OldCollector));\n-  assert (left_most(OldCollector) == _max || in_free_set(right_most(OldCollector), OldCollector),\n-          \"rightmost region should be free: \" SIZE_FORMAT, right_most(OldCollector));\n+  assert (leftmost(OldCollector) == _max || in_free_set(leftmost(OldCollector), OldCollector),\n+          \"leftmost region should be free: \" SIZE_FORMAT,  leftmost(OldCollector));\n+  assert (leftmost(OldCollector) == _max || in_free_set(rightmost(OldCollector), OldCollector),\n+          \"rightmost region should be free: \" SIZE_FORMAT, rightmost(OldCollector));\n@@ -384,13 +384,13 @@\n-  beg_off = left_mosts[OldCollector];\n-  end_off = right_mosts[OldCollector];\n-  assert (beg_off >= left_most(OldCollector),\n-          \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most(OldCollector));\n-  assert (end_off <= right_most(OldCollector),\n-          \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most(OldCollector));\n-\n-  beg_off = empty_left_mosts[OldCollector];\n-  end_off = empty_right_mosts[OldCollector];\n-  assert (beg_off >= left_most_empty(OldCollector),\n-          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most_empty(OldCollector));\n-  assert (end_off <= right_most_empty(OldCollector),\n-          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most_empty(OldCollector));\n+  beg_off = leftmosts[OldCollector];\n+  end_off = rightmosts[OldCollector];\n+  assert (beg_off >= leftmost(OldCollector),\n+          \"free regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, leftmost(OldCollector));\n+  assert (end_off <= rightmost(OldCollector),\n+          \"free regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, rightmost(OldCollector));\n+\n+  beg_off = empty_leftmosts[OldCollector];\n+  end_off = empty_rightmosts[OldCollector];\n+  assert (beg_off >= leftmost_empty(OldCollector),\n+          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, leftmost_empty(OldCollector));\n+  assert (end_off <= rightmost_empty(OldCollector),\n+          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, rightmost_empty(OldCollector));\n@@ -415,1 +415,1 @@\n-    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.right_most_empty(OldCollector): _free_sets.right_most(OldCollector);\n+    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.rightmost_empty(OldCollector): _free_sets.rightmost(OldCollector);\n@@ -417,1 +417,1 @@\n-    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.left_most_empty(OldCollector): _free_sets.left_most(OldCollector);\n+    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.leftmost_empty(OldCollector): _free_sets.leftmost(OldCollector);\n@@ -455,1 +455,1 @@\n-    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.right_most_empty(Collector): _free_sets.right_most(Collector);\n+    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.rightmost_empty(Collector): _free_sets.rightmost(Collector);\n@@ -457,1 +457,1 @@\n-    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.left_most_empty(Collector): _free_sets.left_most(Collector);\n+    (affiliation == ShenandoahAffiliation::FREE)? _free_sets.leftmost_empty(Collector): _free_sets.leftmost(Collector);\n@@ -522,1 +522,1 @@\n-      for (size_t idx = _free_sets.left_most(Mutator); idx <= _free_sets.right_most(Mutator); idx++) {\n+      for (size_t idx = _free_sets.leftmost(Mutator); idx <= _free_sets.rightmost(Mutator); idx++) {\n@@ -546,1 +546,1 @@\n-        for (size_t c = _free_sets.right_most(Collector) + 1; c > _free_sets.left_most(Collector); c--) {\n+        for (size_t c = _free_sets.rightmost(Collector) + 1; c > _free_sets.leftmost(Collector); c--) {\n@@ -606,1 +606,1 @@\n-        for (size_t c = _free_sets.right_most_empty(Mutator) + 1; c > _free_sets.left_most_empty(Mutator); c--) {\n+        for (size_t c = _free_sets.rightmost_empty(Mutator) + 1; c > _free_sets.leftmost_empty(Mutator); c--) {\n@@ -853,1 +853,1 @@\n-  size_t beg = _free_sets.left_most(Mutator);\n+  size_t beg = _free_sets.leftmost(Mutator);\n@@ -1140,3 +1140,3 @@\n-                       _free_sets.left_most(Mutator), _free_sets.right_most(Mutator),\n-                       _free_sets.left_most(Collector), _free_sets.right_most(Collector),\n-                       _free_sets.left_most(OldCollector), _free_sets.right_most(OldCollector),\n+                       _free_sets.leftmost(Mutator), _free_sets.rightmost(Mutator),\n+                       _free_sets.leftmost(Collector), _free_sets.rightmost(Collector),\n+                       _free_sets.leftmost(OldCollector), _free_sets.rightmost(OldCollector),\n@@ -1210,1 +1210,1 @@\n-      for (size_t idx = _free_sets.left_most(Mutator); idx <= _free_sets.right_most(Mutator); idx++) {\n+      for (size_t idx = _free_sets.leftmost(Mutator); idx <= _free_sets.rightmost(Mutator); idx++) {\n@@ -1270,1 +1270,1 @@\n-      for (size_t idx = _free_sets.left_most(Collector); idx <= _free_sets.right_most(Collector); idx++) {\n+      for (size_t idx = _free_sets.leftmost(Collector); idx <= _free_sets.rightmost(Collector); idx++) {\n@@ -1290,1 +1290,1 @@\n-      for (size_t idx = _free_sets.left_most(OldCollector); idx <= _free_sets.right_most(OldCollector); idx++) {\n+      for (size_t idx = _free_sets.leftmost(OldCollector); idx <= _free_sets.rightmost(OldCollector); idx++) {\n@@ -1337,1 +1337,1 @@\n-  for (size_t index = _free_sets.left_most(Mutator); index <= _free_sets.right_most(Mutator); index++) {\n+  for (size_t index = _free_sets.leftmost(Mutator); index <= _free_sets.rightmost(Mutator); index++) {\n@@ -1352,1 +1352,1 @@\n-  for (size_t index = _free_sets.left_most(Mutator); index <= _free_sets.right_most(Mutator); index++) {\n+  for (size_t index = _free_sets.leftmost(Mutator); index <= _free_sets.rightmost(Mutator); index++) {\n@@ -1358,1 +1358,1 @@\n-  for (size_t index = _free_sets.left_most(Collector); index <= _free_sets.right_most(Collector); index++) {\n+  for (size_t index = _free_sets.leftmost(Collector); index <= _free_sets.rightmost(Collector); index++) {\n@@ -1365,1 +1365,1 @@\n-    for (size_t index = _free_sets.left_most(OldCollector); index <= _free_sets.right_most(OldCollector); index++) {\n+    for (size_t index = _free_sets.leftmost(OldCollector); index <= _free_sets.rightmost(OldCollector); index++) {\n@@ -1399,1 +1399,1 @@\n-  for (size_t index = _free_sets.left_most(Mutator); index <= _free_sets.right_most(Mutator); index++) {\n+  for (size_t index = _free_sets.leftmost(Mutator); index <= _free_sets.rightmost(Mutator); index++) {\n@@ -1437,1 +1437,1 @@\n-  for (size_t index = _free_sets.left_most(Mutator); index <= _free_sets.right_most(Mutator); index++) {\n+  for (size_t index = _free_sets.leftmost(Mutator); index <= _free_sets.rightmost(Mutator); index++) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":149,"deletions":149,"binary":false,"changes":298,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-enum FreeMemoryType : uint8_t {\n+enum ShenandoahFreeMemoryType : uint8_t {\n@@ -46,5 +46,5 @@\n-  FreeMemoryType* _membership;\n-  size_t _left_mosts[NumFreeSets];\n-  size_t _right_mosts[NumFreeSets];\n-  size_t _left_mosts_empty[NumFreeSets];\n-  size_t _right_mosts_empty[NumFreeSets];\n+  ShenandoahFreeMemoryType* _membership;\n+  size_t _leftmosts[NumFreeSets];\n+  size_t _rightmosts[NumFreeSets];\n+  size_t _leftmosts_empty[NumFreeSets];\n+  size_t _rightmosts_empty[NumFreeSets];\n@@ -56,2 +56,2 @@\n-  inline void shrink_bounds_if_touched(FreeMemoryType set, size_t idx);\n-  inline void expand_bounds_maybe(FreeMemoryType set, size_t idx, size_t capacity);\n+  inline void shrink_bounds_if_touched(ShenandoahFreeMemoryType set, size_t idx);\n+  inline void expand_bounds_maybe(ShenandoahFreeMemoryType set, size_t idx, size_t capacity);\n@@ -73,1 +73,1 @@\n-  void make_free(size_t idx, FreeMemoryType which_set, size_t region_capacity);\n+  void make_free(size_t idx, ShenandoahFreeMemoryType which_set, size_t region_capacity);\n@@ -76,1 +76,1 @@\n-  void move_to_set(size_t idx, FreeMemoryType new_set, size_t region_capacity);\n+  void move_to_set(size_t idx, ShenandoahFreeMemoryType new_set, size_t region_capacity);\n@@ -78,1 +78,1 @@\n-  \/\/ Returns the FreeMemoryType affiliation of region idx, or NotFree if this region is not currently free.  This does\n+  \/\/ Returns the ShenandoahFreeMemoryType affiliation of region idx, or NotFree if this region is not currently free.  This does\n@@ -80,1 +80,1 @@\n-  inline FreeMemoryType membership(size_t idx) const;\n+  inline ShenandoahFreeMemoryType membership(size_t idx) const;\n@@ -84,1 +84,1 @@\n-  inline bool in_free_set(size_t idx, FreeMemoryType which_set) const;\n+  inline bool in_free_set(size_t idx, ShenandoahFreeMemoryType which_set) const;\n@@ -89,1 +89,1 @@\n-  \/\/ return value of -1 from left_most() or left_most_empty() denotes that the corresponding set is empty.\n+  \/\/ return value of -1 from leftmost() or leftmost_empty() denotes that the corresponding set is empty.\n@@ -92,1 +92,1 @@\n-  \/\/     left_most() and left_most_empty() return _max, right_most() and right_most_empty() return 0\n+  \/\/     leftmost() and leftmost_empty() return _max, rightmost() and rightmost_empty() return 0\n@@ -95,4 +95,4 @@\n-  inline size_t left_most(FreeMemoryType which_set) const;\n-  inline size_t right_most(FreeMemoryType which_set) const;\n-  size_t left_most_empty(FreeMemoryType which_set);\n-  size_t right_most_empty(FreeMemoryType which_set);\n+  inline size_t leftmost(ShenandoahFreeMemoryType which_set) const;\n+  inline size_t rightmost(ShenandoahFreeMemoryType which_set) const;\n+  size_t leftmost_empty(ShenandoahFreeMemoryType which_set);\n+  size_t rightmost_empty(ShenandoahFreeMemoryType which_set);\n@@ -100,1 +100,1 @@\n-  inline void increase_used(FreeMemoryType which_set, size_t bytes);\n+  inline void increase_used(ShenandoahFreeMemoryType which_set, size_t bytes);\n@@ -102,1 +102,1 @@\n-  inline size_t capacity_of(FreeMemoryType which_set) const {\n+  inline size_t capacity_of(ShenandoahFreeMemoryType which_set) const {\n@@ -107,1 +107,1 @@\n-  inline size_t used_by(FreeMemoryType which_set) const {\n+  inline size_t used_by(ShenandoahFreeMemoryType which_set) const {\n@@ -114,1 +114,1 @@\n-  inline size_t count(FreeMemoryType which_set) const { return _region_counts[which_set]; }\n+  inline size_t count(ShenandoahFreeMemoryType which_set) const { return _region_counts[which_set]; }\n@@ -118,1 +118,1 @@\n-  inline bool alloc_from_left_bias(FreeMemoryType which_set);\n+  inline bool alloc_from_left_bias(ShenandoahFreeMemoryType which_set);\n@@ -121,1 +121,1 @@\n-  void establish_alloc_bias(FreeMemoryType which_set);\n+  void establish_alloc_bias(ShenandoahFreeMemoryType which_set);\n@@ -135,1 +135,1 @@\n-  \/\/   if the set has no empty regions, leftmost_empty equals max and right_most_empty equals 0\n+  \/\/   if the set has no empty regions, leftmost_empty equals max and rightmost_empty equals 0\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"}]}