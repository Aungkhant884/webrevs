{"files":[{"patch":"@@ -220,6 +220,2 @@\n-  if ((idx == 0) && (_membership[idx] != which_set)) {\n-    return _max;\n-  } else {\n-    assert (in_free_set(idx, which_set), \"right-most region must be free\");\n-    return idx;\n-  }\n+  assert ((_left_mosts[which_set] == _max) || in_free_set(idx, which_set), \"right-most region must be free\");\n+  return idx;\n@@ -253,1 +249,1 @@\n-  return _max;\n+  return 0;\n@@ -344,1 +340,1 @@\n-  assert (right_most(Mutator) <= _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(Mutator),  _max);\n+  assert (right_most(Mutator) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(Mutator),  _max);\n@@ -362,1 +358,1 @@\n-          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most(Mutator));\n+          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most_empty(Mutator));\n@@ -364,1 +360,1 @@\n-          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most(Mutator));\n+          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most_empty(Mutator));\n@@ -368,1 +364,1 @@\n-  assert (right_most(Collector) <= _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(Collector),  _max);\n+  assert (right_most(Collector) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(Collector),  _max);\n@@ -386,1 +382,1 @@\n-          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most(Collector));\n+          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most_empty(Collector));\n@@ -388,1 +384,1 @@\n-          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most(Collector));\n+          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most_empty(Collector));\n@@ -392,1 +388,1 @@\n-  assert (right_most(OldCollector) <= _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(OldCollector),  _max);\n+  assert (right_most(OldCollector) < _max, \"rightmost in bounds: \"  SIZE_FORMAT \" < \" SIZE_FORMAT, right_most(OldCollector),  _max);\n@@ -410,1 +406,1 @@\n-          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most(OldCollector));\n+          \"free empty regions before the leftmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT, beg_off, left_most_empty(OldCollector));\n@@ -412,1 +408,1 @@\n-          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most(OldCollector));\n+          \"free empty regions past the rightmost: \" SIZE_FORMAT \", bound \" SIZE_FORMAT,  end_off, right_most_empty(OldCollector));\n@@ -622,1 +618,1 @@\n-        for (size_t c = _free_sets.right_most(Mutator) + 1; c > _free_sets.left_most(Mutator); c--) {\n+        for (size_t c = _free_sets.right_most_empty(Mutator) + 1; c > _free_sets.left_most_empty(Mutator); c--) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"}]}