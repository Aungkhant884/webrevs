{"files":[{"patch":"@@ -605,0 +605,7 @@\n+      \/\/ Also TODO:\n+      \/\/ if (GC is idle (out of cycle) and mutator allocation fails and there is memory reserved in Collector\n+      \/\/ or OldCollector sets, transfer a region of memory so that we can satisfy the allocation request, and\n+      \/\/ immediately trigger the start of GC.  Is better to satisfy the allocation than to trigger out-of-cycle\n+      \/\/ allocation failure (even if this means we have a little less memory to handle evacuations during the\n+      \/\/ subsequent GC pass).\n+\n@@ -1051,1 +1058,1 @@\n-  _free_sets.clear_all();\n+  _free_sets.clear_internal();\n@@ -1065,1 +1072,1 @@\n-      assert(!_free_sets.in_free_set(idx, NotFree), \"We are about to add it, it shouldn't be there already\");\n+      assert(_free_sets.in_free_set(idx, NotFree), \"We are about to make region free; it should not be free already\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+  friend class ShenandoahFreeSet;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}