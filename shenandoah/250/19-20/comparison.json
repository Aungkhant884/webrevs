{"files":[{"patch":"@@ -47,1 +47,1 @@\n-  _membership = NEW_C_HEAP_ARRAY(MemoryReserve, max_regions, mtGC);\n+  _membership = NEW_C_HEAP_ARRAY(FreeMemoryType, max_regions, mtGC);\n@@ -52,1 +52,1 @@\n-  FREE_C_HEAP_ARRAY(MemoryReserve, _membership);\n+  FREE_C_HEAP_ARRAY(FreeMemoryType, _membership);\n@@ -84,1 +84,1 @@\n-void ShenandoahSetsOfFree::increase_used(MemoryReserve which_set, size_t bytes) {\n+void ShenandoahSetsOfFree::increase_used(FreeMemoryType which_set, size_t bytes) {\n@@ -92,1 +92,1 @@\n-inline void ShenandoahSetsOfFree::shrink_bounds_if_touched(MemoryReserve set, size_t idx) {\n+inline void ShenandoahSetsOfFree::shrink_bounds_if_touched(FreeMemoryType set, size_t idx) {\n@@ -113,1 +113,1 @@\n-inline void ShenandoahSetsOfFree::expand_bounds_maybe(MemoryReserve set, size_t idx, size_t region_capacity) {\n+inline void ShenandoahSetsOfFree::expand_bounds_maybe(FreeMemoryType set, size_t idx, size_t region_capacity) {\n@@ -132,1 +132,1 @@\n-  MemoryReserve orig_set = membership(idx);\n+  FreeMemoryType orig_set = membership(idx);\n@@ -142,1 +142,1 @@\n-void ShenandoahSetsOfFree::make_free(size_t idx, MemoryReserve which_set, size_t region_capacity) {\n+void ShenandoahSetsOfFree::make_free(size_t idx, FreeMemoryType which_set, size_t region_capacity) {\n@@ -154,1 +154,1 @@\n-void ShenandoahSetsOfFree::move_to_set(size_t idx, MemoryReserve new_set, size_t region_capacity) {\n+void ShenandoahSetsOfFree::move_to_set(size_t idx, FreeMemoryType new_set, size_t region_capacity) {\n@@ -157,1 +157,1 @@\n-  MemoryReserve orig_set = _membership[idx];\n+  FreeMemoryType orig_set = _membership[idx];\n@@ -180,1 +180,1 @@\n-inline MemoryReserve ShenandoahSetsOfFree::membership(size_t idx) const {\n+inline FreeMemoryType ShenandoahSetsOfFree::membership(size_t idx) const {\n@@ -187,1 +187,1 @@\n-inline bool ShenandoahSetsOfFree::in_free_set(size_t idx, MemoryReserve test_set) const {\n+inline bool ShenandoahSetsOfFree::in_free_set(size_t idx, FreeMemoryType test_set) const {\n@@ -197,1 +197,1 @@\n-inline size_t ShenandoahSetsOfFree::left_most(MemoryReserve which_set) const {\n+inline size_t ShenandoahSetsOfFree::left_most(FreeMemoryType which_set) const {\n@@ -208,1 +208,1 @@\n-inline size_t ShenandoahSetsOfFree::right_most(MemoryReserve which_set) const {\n+inline size_t ShenandoahSetsOfFree::right_most(FreeMemoryType which_set) const {\n@@ -215,1 +215,1 @@\n-size_t ShenandoahSetsOfFree::left_most_empty(MemoryReserve which_set) {\n+size_t ShenandoahSetsOfFree::left_most_empty(FreeMemoryType which_set) {\n@@ -228,1 +228,1 @@\n-inline size_t ShenandoahSetsOfFree::right_most_empty(MemoryReserve which_set) {\n+inline size_t ShenandoahSetsOfFree::right_most_empty(FreeMemoryType which_set) {\n@@ -241,1 +241,1 @@\n-inline bool ShenandoahSetsOfFree::alloc_from_left_bias(MemoryReserve which_set) {\n+inline bool ShenandoahSetsOfFree::alloc_from_left_bias(FreeMemoryType which_set) {\n@@ -246,1 +246,1 @@\n-void ShenandoahSetsOfFree::establish_alloc_bias(MemoryReserve which_set) {\n+void ShenandoahSetsOfFree::establish_alloc_bias(FreeMemoryType which_set) {\n@@ -293,1 +293,1 @@\n-    MemoryReserve set = membership(i);\n+    FreeMemoryType set = membership(i);\n@@ -1010,1 +1010,1 @@\n-  _free_sets.clear_internal();\n+  _free_sets.clear_all();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-enum MemoryReserve : uint8_t {\n+enum FreeMemoryType : uint8_t {\n@@ -41,1 +41,0 @@\n-  friend class ShenandoahFreeSet;\n@@ -44,1 +43,1 @@\n-  size_t _max;\n+  size_t _max;                  \/\/ The maximum number of heap regions\n@@ -47,1 +46,1 @@\n-  MemoryReserve* _membership;\n+  FreeMemoryType* _membership;\n@@ -57,2 +56,2 @@\n-  inline void shrink_bounds_if_touched(MemoryReserve set, size_t idx);\n-  inline void expand_bounds_maybe(MemoryReserve set, size_t idx, size_t capacity);\n+  inline void shrink_bounds_if_touched(FreeMemoryType set, size_t idx);\n+  inline void expand_bounds_maybe(FreeMemoryType set, size_t idx, size_t capacity);\n@@ -74,1 +73,1 @@\n-  void make_free(size_t idx, MemoryReserve which_set, size_t region_capacity);\n+  void make_free(size_t idx, FreeMemoryType which_set, size_t region_capacity);\n@@ -77,1 +76,1 @@\n-  void move_to_set(size_t idx, MemoryReserve new_set, size_t region_capacity);\n+  void move_to_set(size_t idx, FreeMemoryType new_set, size_t region_capacity);\n@@ -79,1 +78,1 @@\n-  \/\/ Returns the MemoryReserve affiliation of region idx, or NotFree if this region is not currently free.  This does\n+  \/\/ Returns the FreeMemoryType affiliation of region idx, or NotFree if this region is not currently free.  This does\n@@ -81,1 +80,1 @@\n-  inline MemoryReserve membership(size_t idx) const;\n+  inline FreeMemoryType membership(size_t idx) const;\n@@ -85,11 +84,19 @@\n-  inline bool in_free_set(size_t idx, MemoryReserve which_set) const;\n-\n-  \/\/ Each of the following four methods returns _max to indicate absence of requested region.\n-  inline size_t left_most(MemoryReserve which_set) const;\n-  inline size_t right_most(MemoryReserve which_set) const;\n-  size_t left_most_empty(MemoryReserve which_set);\n-  size_t right_most_empty(MemoryReserve which_set);\n-\n-  inline void increase_used(MemoryReserve which_set, size_t bytes);\n-\n-  inline size_t capacity_of(MemoryReserve which_set) const {\n+  inline bool in_free_set(size_t idx, FreeMemoryType which_set) const;\n+\n+  \/\/ The following four methods return the left-most and right-most bounds on ranges of regions representing\n+  \/\/ the requested set.  The _empty variants represent bounds on the range that holds completely empty\n+  \/\/ regions, which are required for humongous allocations and desired for \"very large\" allocations.  A\n+  \/\/ return value of -1 from left_most() or left_most_empty() denotes that the corresponding set is empty.\n+  \/\/ In other words:\n+  \/\/   if the requested which_set is empty:\n+  \/\/     left_most() and left_most_empty() return _max, right_most() and right_most_empty() return 0\n+  \/\/   otherwise, expect the following:\n+  \/\/     0 <= leftmost <= leftmost_empty <= rightmost_empty <= rightmost < _max\n+  inline size_t left_most(FreeMemoryType which_set) const;\n+  inline size_t right_most(FreeMemoryType which_set) const;\n+  size_t left_most_empty(FreeMemoryType which_set);\n+  size_t right_most_empty(FreeMemoryType which_set);\n+\n+  inline void increase_used(FreeMemoryType which_set, size_t bytes);\n+\n+  inline size_t capacity_of(FreeMemoryType which_set) const {\n@@ -100,1 +107,1 @@\n-  inline size_t used_by(MemoryReserve which_set) const {\n+  inline size_t used_by(FreeMemoryType which_set) const {\n@@ -107,1 +114,1 @@\n-  inline size_t count(MemoryReserve which_set) const { return _region_counts[which_set]; }\n+  inline size_t count(FreeMemoryType which_set) const { return _region_counts[which_set]; }\n@@ -111,1 +118,1 @@\n-  inline bool alloc_from_left_bias(MemoryReserve which_set);\n+  inline bool alloc_from_left_bias(FreeMemoryType which_set);\n@@ -114,1 +121,1 @@\n-  void establish_alloc_bias(MemoryReserve which_set);\n+  void establish_alloc_bias(FreeMemoryType which_set);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":32,"deletions":25,"binary":false,"changes":57,"status":"modified"}]}