{"files":[{"patch":"@@ -168,3 +168,4 @@\n-    } else {\n-      size_t garbage = region->garbage();\n-      total_garbage += garbage;\n+    }\n+\n+    size_t garbage = region->garbage();\n+    total_garbage += garbage;\n@@ -172,0 +173,1 @@\n+    if (region->is_regular()) {\n@@ -175,36 +177,8 @@\n-    }\n-  }\n-\n-  \/\/ Give special treatment to humongous regions.  Assume humongous regions is entirely\n-  \/\/ garbage or entirely non-garbage.  Assume that a head humongous region and the associated\n-  \/\/ humongous continuous regions are uniformly entirely garbage or entirely non-garbage.\n-  \/\/\n-  \/\/ Sift garbage humongous regions to front, non-garbage humongous regions to end of array.\n-  size_t first_non_humongous_empty = 0;\n-  size_t first_humongous_non_empty = cand_idx;\n-\n-  size_t i = 0;\n-  while (i < first_humongous_non_empty) {\n-    ShenandoahHeapRegion* region = candidates[i]._region;\n-    if (region->is_humongous()) {\n-      if (region->get_live_data_bytes() == 0) {\n-        \/\/ Humongous region is entirely garbage.  Reclaim it.\n-        if (i == first_non_humongous_empty) {\n-          first_non_humongous_empty++;\n-        } else {\n-          RegionData swap_tmp = candidates[i];\n-          candidates[i] = candidates[first_non_humongous_empty];\n-          candidates[first_non_humongous_empty++] = swap_tmp;\n-        }\n-        i++;\n-      } else {\n-        \/\/ Humongous region is non garbage.  Don't reclaim it.\n-        if (i + 1 == first_humongous_non_empty) {\n-          first_humongous_non_empty--;\n-          i++;\n-        } else {\n-          RegionData swap_tmp = candidates[i];\n-          candidates[i] = candidates[--first_humongous_non_empty];\n-          candidates[first_humongous_non_empty] = swap_tmp;\n-          \/\/ Do not increment i so we can revisit swapped entry on next iteration\n-        }\n+    } else if (region->is_humongous_start()) {\n+      if (!region->has_live()) {\n+        \/\/ The humongous object is dead, we can just return this region and the continuations\n+        \/\/ immediately to the freeset - no evacuations are necessary here. The continuations\n+        \/\/ will be made into trash by this method, so they'll be skipped by the 'is_regular'\n+        \/\/ check above.\n+        size_t region_count = heap->trash_humongous_region_at(region);\n+        log_debug(gc)(\"Trashed \" SIZE_FORMAT \" regions for humongous object.\", region_count);\n@@ -212,2 +186,0 @@\n-    } else {\n-      i++;\n@@ -217,1 +189,0 @@\n-\n@@ -219,2 +190,1 @@\n-  QuickSort::sort<RegionData>(candidates + first_non_humongous_empty, (int)(first_humongous_non_empty - first_non_humongous_empty),\n-                              compare_by_garbage, false);\n+  QuickSort::sort<RegionData>(candidates, cand_idx, compare_by_garbage, false);\n@@ -233,1 +203,1 @@\n-  for (size_t i = first_non_humongous_empty; i < first_humongous_non_empty; i++) {\n+  for (size_t i = 0; i < cand_idx; i++) {\n@@ -245,3 +215,2 @@\n-      log_info(gc)(\"Old-gen mark evac (%u HR, %llu RR), %llu CF)\",\n-                   (unsigned int) first_non_humongous_empty,\n-                   (unsigned long long) (_hidden_old_collection_candidates - first_non_humongous_empty),\n+      log_info(gc)(\"Old-gen mark evac (%llu RR), %llu CF)\",\n+                   (unsigned long long) (_hidden_old_collection_candidates),\n@@ -255,1 +224,1 @@\n-  _hidden_old_collection_candidates = (uint)first_humongous_non_empty;\n+  _hidden_old_collection_candidates = (uint)cand_idx;\n@@ -261,3 +230,2 @@\n-  log_info(gc)(\"Old-gen mark evac (%u HR, %llu RR), %llu CF)\",\n-               (unsigned int) first_non_humongous_empty,\n-               (unsigned long long) (_hidden_old_collection_candidates - first_non_humongous_empty),\n+  log_info(gc)(\"Old-gen mark evac (%llu RR), %llu CF)\",\n+               (unsigned long long) (_hidden_old_collection_candidates),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":20,"deletions":52,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -1158,1 +1158,1 @@\n-void ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) {\n+size_t ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) {\n@@ -1178,0 +1178,1 @@\n+  return required_regions;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -705,1 +705,1 @@\n-  void trash_humongous_region_at(ShenandoahHeapRegion *r);\n+  size_t trash_humongous_region_at(ShenandoahHeapRegion *r);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}