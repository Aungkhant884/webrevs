{"files":[{"patch":"@@ -94,4 +94,6 @@\n-    if (start_global_cycle()) {\n-      log_info(gc)(\"Heuristics request for global collection accepted.\");\n-    } else if (start_young_cycle()) {\n-      log_info(gc)(\"Heuristics request for young collection accepted.\");\n+    if (_control_thread->gc_mode() == ShenandoahControlThread::none) {\n+      if (start_global_cycle()) {\n+        log_info(gc)(\"Heuristics request for global collection accepted.\");\n+      } else if (start_young_cycle()) {\n+        log_info(gc)(\"Heuristics request for young collection accepted.\");\n+      }\n@@ -108,2 +110,4 @@\n-    if (start_global_cycle()) {\n-      log_info(gc)(\"Heuristics request for global collection accepted.\");\n+    if (_control_thread->gc_mode() == ShenandoahControlThread::none) {\n+      if (start_global_cycle()) {\n+        log_info(gc)(\"Heuristics request for global collection accepted.\");\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        if (periodic && !output.getOutput().contains(\"Trigger: Time since last GC\")) {\n+        if (periodic && !output.getOutput().contains(\"Trigger (GLOBAL): Time since last GC\")) {\n@@ -52,1 +52,1 @@\n-        if (!periodic && output.getOutput().contains(\"Trigger: Time since last GC\")) {\n+        if (!periodic && output.getOutput().contains(\"Trigger (GLOBAL): Time since last GC\")) {\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}