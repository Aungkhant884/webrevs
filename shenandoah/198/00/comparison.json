{"files":[{"patch":"@@ -245,0 +245,8 @@\n+      log_info(gc, ergo)(\"At end of Concurrent GC, old_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s,\"\n+                         \" young_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s\",\n+                         byte_size_in_proper_unit(old_available), proper_unit_for_byte_size(old_available),\n+                         byte_size_in_proper_unit(old_gen->soft_max_capacity()),\n+                         proper_unit_for_byte_size(old_gen->soft_max_capacity()),\n+                         byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available),\n+                         byte_size_in_proper_unit(young_gen->soft_max_capacity()),\n+                         proper_unit_for_byte_size(young_gen->soft_max_capacity()));\n@@ -246,3 +254,0 @@\n-    log_info(gc, ergo)(\"At end of Concurrent GC, old_available: \" SIZE_FORMAT \"%s, young_available: \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(old_available), proper_unit_for_byte_size(old_available),\n-                       byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available));\n@@ -250,1 +255,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,1 +61,2 @@\n-    log_info(gc, ergo)(\"At end of Degenerated GC, old_available: \" SIZE_FORMAT \"%s, young_available: \" SIZE_FORMAT \"%s\",\n+    log_info(gc, ergo)(\"At end of Degenerated GC, old_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s,\"\n+                       \" young_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s\",\n@@ -63,1 +64,5 @@\n-                       byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available));\n+                       byte_size_in_proper_unit(heap->old_generation()->soft_max_capacity()),\n+                       proper_unit_for_byte_size(heap->old_generation()->soft_max_capacity()),\n+                       byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available),\n+                       byte_size_in_proper_unit(heap->young_generation()->soft_max_capacity()),\n+                       proper_unit_for_byte_size(heap->young_generation()->soft_max_capacity()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -68,0 +68,27 @@\n+\/\/ This is a temporary solution to work around a shortcoming with the existing free set implementation.\n+\/\/ TODO:\n+\/\/   Remove this function after restructing FreeSet representation.  A problem in the existing implementation is that old-gen\n+\/\/   regions are not considered to reside within the is_collector_free range.\n+\/\/\n+HeapWord* ShenandoahFreeSet::allocate_with_old_affiliation(ShenandoahAllocRequest& req, bool& in_new_region) {\n+  ShenandoahRegionAffiliation affiliation = ShenandoahRegionAffiliation::OLD_GENERATION;\n+\n+  size_t rightmost = MAX2(_collector_rightmost, _mutator_rightmost);\n+  size_t leftmost = MIN2(_collector_leftmost, _mutator_leftmost);\n+\n+  for (size_t c = rightmost + 1; c > leftmost; c--) {\n+    \/\/ size_t is unsigned, need to dodge underflow when _leftmost = 0\n+    size_t idx = c - 1;\n+    ShenandoahHeapRegion* r = _heap->get_region(idx);\n+    if (r->affiliation() == affiliation && !r->is_humongous()) {\n+      if (!r->is_cset() && !has_no_alloc_capacity(r)) {\n+        HeapWord* result = try_allocate_in(r, req, in_new_region);\n+        if (result != NULL) {\n+          return result;\n+        }\n+      }\n+    }\n+  }\n+  return nullptr;\n+}\n+\n@@ -148,1 +175,8 @@\n-      HeapWord* result = allocate_with_affiliation(req.affiliation(), req, in_new_region);\n+      HeapWord* result;\n+      if (req.affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION) {\n+        \/\/ TODO: this is a work around to address a deficiency in FreeSet representation.  A better solution fixes\n+        \/\/ the FreeSet implementation to deal more efficiently with old-gen regions as being in the \"collector free set\"\n+        result = allocate_with_old_affiliation(req, in_new_region);\n+      } else {\n+        result = allocate_with_affiliation(req.affiliation(), req, in_new_region);\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+  HeapWord* allocate_with_old_affiliation(ShenandoahAllocRequest& req, bool& in_new_region);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -179,1 +179,2 @@\n-    log_info(gc, ergo)(\"At end of Full GC, old_available: \" SIZE_FORMAT \"%s, young_available: \" SIZE_FORMAT \"%s\",\n+    log_info(gc, ergo)(\"At end of Full GC,  old_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s,\"\n+                       \" young_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s\",\n@@ -181,1 +182,5 @@\n-                       byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available));\n+                       byte_size_in_proper_unit(heap->old_generation()->soft_max_capacity()),\n+                       proper_unit_for_byte_size(heap->old_generation()->soft_max_capacity()),\n+                       byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available),\n+                       byte_size_in_proper_unit(heap->young_generation()->soft_max_capacity()),\n+                       proper_unit_for_byte_size(heap->young_generation()->soft_max_capacity()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3154,0 +3154,1 @@\n+    HeapWord* tams = ctx? ctx->top_at_mark_start(r): nullptr;\n@@ -3188,1 +3189,1 @@\n-                                            \"Verify init-mark remembered set violation\", \"object not properly registered\", __FILE__, __LINE__);\n+                                               \"Verify init-mark remembered set violation\", \"object not properly registered\", __FILE__, __LINE__);\n@@ -3193,2 +3194,2 @@\n-            assert(ctx->top_at_mark_start(r) == top, \"Expect tams == top at start of mark.\");\n-            obj_addr = ctx->get_next_marked_addr(obj_addr, top);\n+            assert(tams != nullptr, \"If object is not live, ctx and tams should be non-null\");\n+            obj_addr = ctx->get_next_marked_addr(obj_addr, tams);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}