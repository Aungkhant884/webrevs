{"files":[{"patch":"@@ -245,8 +245,0 @@\n-      log_info(gc, ergo)(\"At end of Concurrent GC, old_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s,\"\n-                         \" young_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s\",\n-                         byte_size_in_proper_unit(old_available), proper_unit_for_byte_size(old_available),\n-                         byte_size_in_proper_unit(old_gen->soft_max_capacity()),\n-                         proper_unit_for_byte_size(old_gen->soft_max_capacity()),\n-                         byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available),\n-                         byte_size_in_proper_unit(young_gen->soft_max_capacity()),\n-                         proper_unit_for_byte_size(young_gen->soft_max_capacity()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -477,1 +477,7 @@\n-  log_heap_status(heap);\n+  const char* msg;\n+  if (heap->cancelled_gc()) {\n+    msg = (generation == YOUNG)? \"At end of Interrupted Concurrent Young GC\": \"At end of Interrupted Concurrent Bootstrap GC\";\n+  } else {\n+    msg = (generation == YOUNG)? \"At end of Concurrent Young GC\": \"At end of Concurrent Bootstrap GC\";\n+  }\n+  heap->log_heap_status(msg);\n@@ -484,0 +490,1 @@\n+  ShenandoahOldGeneration::State original_state = old_generation->state();\n@@ -487,1 +494,1 @@\n-  switch (old_generation->state()) {\n+  switch (original_state) {\n@@ -540,0 +547,5 @@\n+        if (original_state == ShenandoahOldGeneration::MARKING) {\n+          heap->log_heap_status(\"At end of Concurrent Old Marking finishing increment\");\n+        }\n+      } else if (original_state == ShenandoahOldGeneration::MARKING) {\n+        heap->log_heap_status(\"At end of Concurrent Old Marking increment\");\n@@ -583,9 +595,0 @@\n-void ShenandoahControlThread::log_heap_status(const ShenandoahHeap* heap) {\n-  if (heap->mode()->is_generational()) {\n-    heap->young_generation()->log_status();\n-    heap->old_generation()->log_status();\n-  } else {\n-    heap->global_generation()->log_status();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -193,1 +193,0 @@\n-  void log_heap_status(const ShenandoahHeap* heap);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,10 +59,1 @@\n-    size_t old_available = heap->old_generation()->available();\n-    size_t young_available = heap->young_generation()->available();\n-    log_info(gc, ergo)(\"At end of Degenerated GC, old_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s,\"\n-                       \" young_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(old_available), proper_unit_for_byte_size(old_available),\n-                       byte_size_in_proper_unit(heap->old_generation()->soft_max_capacity()),\n-                       proper_unit_for_byte_size(heap->old_generation()->soft_max_capacity()),\n-                       byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available),\n-                       byte_size_in_proper_unit(heap->young_generation()->soft_max_capacity()),\n-                       proper_unit_for_byte_size(heap->young_generation()->soft_max_capacity()));\n+    heap->log_heap_status(\"At end of Degenerated GC\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -177,10 +177,1 @@\n-    size_t old_available = heap->old_generation()->available();\n-    size_t young_available = heap->young_generation()->available();\n-    log_info(gc, ergo)(\"At end of Full GC,  old_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s,\"\n-                       \" young_available: \" SIZE_FORMAT \"%s out of total: \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(old_available), proper_unit_for_byte_size(old_available),\n-                       byte_size_in_proper_unit(heap->old_generation()->soft_max_capacity()),\n-                       proper_unit_for_byte_size(heap->old_generation()->soft_max_capacity()),\n-                       byte_size_in_proper_unit(young_available), proper_unit_for_byte_size(young_available),\n-                       byte_size_in_proper_unit(heap->young_generation()->soft_max_capacity()),\n-                       proper_unit_for_byte_size(heap->young_generation()->soft_max_capacity()));\n+    heap->log_heap_status(\"At end of Full GC\");\n@@ -754,1 +745,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-void ShenandoahGeneration::log_status() const {\n+void ShenandoahGeneration::log_status(const char *msg) const {\n@@ -159,3 +159,5 @@\n-  LogGcInfo::print(\"%s generation used: \" SIZE_FORMAT \"%s, used regions: \" SIZE_FORMAT \"%s, \"\n-                   \"soft capacity: \" SIZE_FORMAT \"%s, max capacity: \" SIZE_FORMAT \" %s, available: \" SIZE_FORMAT \" %s\",\n-                   name(),\n+  size_t v_adjusted_avail = adjusted_available();\n+  LogGcInfo::print(\"%s: %s generation used: \" SIZE_FORMAT \"%s, used regions: \" SIZE_FORMAT \"%s, \"\n+                   \"soft capacity: \" SIZE_FORMAT \"%s, max capacity: \" SIZE_FORMAT \"%s, available: \" SIZE_FORMAT \"%s, \"\n+                   \"adjusted available: \" SIZE_FORMAT \"%s\",\n+                   msg, name(),\n@@ -166,1 +168,2 @@\n-                   byte_size_in_proper_unit(v_available), proper_unit_for_byte_size(v_available));\n+                   byte_size_in_proper_unit(v_available), proper_unit_for_byte_size(v_available),\n+                   byte_size_in_proper_unit(v_adjusted_avail), proper_unit_for_byte_size(v_adjusted_avail));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-  void log_status() const;\n+  void log_status(const char* msg) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3310,0 +3310,10 @@\n+\n+void ShenandoahHeap::log_heap_status(const char* msg) const {\n+  if (mode()->is_generational()) {\n+    young_generation()->log_status(msg);\n+    old_generation()->log_status(msg);\n+  } else {\n+    global_generation()->log_status(msg);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -858,0 +858,3 @@\n+\n+  void log_heap_status(const char *msg) const;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}