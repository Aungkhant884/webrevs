{"files":[{"patch":"@@ -67,1 +67,1 @@\n-        __ andi(t0, t0, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::MARKING);\n+        __ andi(t0, t0, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n@@ -645,1 +645,1 @@\n-  __ andi(tmp, tmp, ShenandoahHeap::MARKING);\n+  __ andi(tmp, tmp, ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"precompiled.hpp\"\n@@ -25,0 +26,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacTracker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -835,3 +835,3 @@\n-  const uint MaxReportsPerEpoch = 4;\n-  static uint last_report_epoch = 0;\n-  static uint epoch_report_count = 0;\n+  const size_t MaxReportsPerEpoch = 4;\n+  static size_t last_report_epoch = 0;\n+  static size_t epoch_report_count = 0;\n@@ -860,1 +860,1 @@\n-      log_info(gc, ergo)(\"Squelching additional promotion failure reports for epoch %d\", last_report_epoch);\n+      log_info(gc, ergo)(\"Squelching additional promotion failure reports for epoch \" SIZE_FORMAT, last_report_epoch);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    ls.print_cr(\"%li %li %lu %lu %lu\",\n+    ls.print_cr(JLONG_FORMAT \" \" JLONG_FORMAT \" \" SIZE_FORMAT \" \" SIZE_FORMAT \" \" SIZE_FORMAT,\n@@ -97,1 +97,1 @@\n-      ls.print(\"%li\", regions[0]->get_value());\n+      ls.print(JLONG_FORMAT, regions[0]->get_value());\n@@ -100,1 +100,1 @@\n-      ls.print(\" %li\", regions[i]->get_value());\n+      ls.print(\" \" JLONG_FORMAT, regions[i]->get_value());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -20,2 +20,7 @@\n-\/\/ interval - you can expect trouble.\n-\n+\/\/ interval - you can expect trouble. These tests will also not run in a build\n+\/\/ with asserts enabled because they use APIs that expect to run on a safepoint.\n+#ifdef ASSERT\n+#define SKIP_IF_NOT_SHENANDOAH()           \\\n+  tty->print_cr(\"skipped (debug build)\" ); \\\n+  return;\n+#else\n@@ -27,0 +32,1 @@\n+#endif\n@@ -48,3 +54,7 @@\n-    : _heap(ShenandoahHeap::heap()),\n-      _heuristics(_heap->old_heuristics()),\n-      _collection_set(_heap->collection_set()) {\n+    : _heap(nullptr),\n+      _heuristics(nullptr),\n+      _collection_set(nullptr) {\n+    SKIP_IF_NOT_SHENANDOAH();\n+    _heap = ShenandoahHeap::heap();\n+    _heuristics = _heap->old_heuristics();\n+    _collection_set = _heap->collection_set();\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldHeuristic.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}