{"files":[{"patch":"@@ -54,1 +54,1 @@\n-template<UpdateRefsMode UPDATE_REFS>\n+template<GenerationMode GENERATION, UpdateRefsMode UPDATE_REFS>\n@@ -63,1 +63,1 @@\n-    ShenandoahConcurrentMark::mark_through_ref<T, UPDATE_REFS, NO_DEDUP>(p, _heap, _queue, _mark_context, false);\n+    ShenandoahConcurrentMark::mark_through_ref<T, GENERATION, UPDATE_REFS, NO_DEDUP>(p, _heap, _queue, _mark_context, false);\n@@ -87,1 +87,2 @@\n-  ShenandoahRootScanner* _rp;\n+  ShenandoahConcurrentMark* const _scm;\n+  ShenandoahRootScanner* const _rp;\n@@ -89,1 +90,1 @@\n-  ShenandoahInitMarkRootsTask(ShenandoahRootScanner* rp) :\n+  ShenandoahInitMarkRootsTask(ShenandoahConcurrentMark* scm, ShenandoahRootScanner* rp) :\n@@ -91,0 +92,1 @@\n+    _scm(scm),\n@@ -99,1 +101,1 @@\n-    ShenandoahObjToScanQueueSet* queues = heap->concurrent_mark()->task_queues();\n+    ShenandoahObjToScanQueueSet* queues = _scm->task_queues();\n@@ -104,2 +106,16 @@\n-    ShenandoahInitMarkRootsClosure<UPDATE_REFS> mark_cl(q);\n-    do_work(heap, &mark_cl, worker_id);\n+    switch (_scm->generation_mode()) {\n+      case YOUNG: {\n+        ShenandoahInitMarkRootsClosure<YOUNG, UPDATE_REFS> mark_cl(q);\n+        do_work(heap, &mark_cl, worker_id);\n+        break;\n+      }\n+      case GLOBAL: {\n+        ShenandoahInitMarkRootsClosure<GLOBAL, UPDATE_REFS> mark_cl(q);\n+        do_work(heap, &mark_cl, worker_id);\n+        break;\n+      }\n+      default: {\n+        ShouldNotReachHere();\n+        break;\n+      }\n+    }\n@@ -164,0 +180,1 @@\n+template <GenerationMode GENERATION>\n@@ -166,1 +183,1 @@\n-  ShenandoahSATBBufferClosure* _satb_cl;\n+  ShenandoahSATBBufferClosure<GENERATION>* _satb_cl;\n@@ -172,1 +189,1 @@\n-  ShenandoahSATBAndRemarkCodeRootsThreadsClosure(ShenandoahSATBBufferClosure* satb_cl, OopClosure* cl, MarkingCodeBlobClosure* code_cl) :\n+  ShenandoahSATBAndRemarkCodeRootsThreadsClosure(ShenandoahSATBBufferClosure<GENERATION>* satb_cl, OopClosure* cl, MarkingCodeBlobClosure* code_cl) :\n@@ -230,0 +247,1 @@\n+template <GenerationMode GENERATION>\n@@ -255,1 +273,1 @@\n-      ShenandoahSATBBufferClosure cl(q);\n+      ShenandoahSATBBufferClosure<GENERATION> cl(q);\n@@ -260,1 +278,1 @@\n-        ShenandoahMarkResolveRefsClosure resolve_mark_cl(q, rp);\n+        ShenandoahMarkResolveRefsClosure<GENERATION> resolve_mark_cl(q, rp);\n@@ -262,3 +280,3 @@\n-        ShenandoahSATBAndRemarkCodeRootsThreadsClosure tc(&cl,\n-                                                          ShenandoahStoreValEnqueueBarrier ? &resolve_mark_cl : NULL,\n-                                                          do_nmethods ? &blobsCl : NULL);\n+        ShenandoahSATBAndRemarkCodeRootsThreadsClosure<GENERATION> tc(&cl,\n+                                                                      ShenandoahStoreValEnqueueBarrier ? &resolve_mark_cl : NULL,\n+                                                                      do_nmethods ? &blobsCl : NULL);\n@@ -267,1 +285,1 @@\n-        ShenandoahMarkRefsClosure mark_cl(q, rp);\n+        ShenandoahMarkRefsClosure<GENERATION> mark_cl(q, rp);\n@@ -269,3 +287,3 @@\n-        ShenandoahSATBAndRemarkCodeRootsThreadsClosure tc(&cl,\n-                                                          ShenandoahStoreValEnqueueBarrier ? &mark_cl : NULL,\n-                                                          do_nmethods ? &blobsCl : NULL);\n+        ShenandoahSATBAndRemarkCodeRootsThreadsClosure<GENERATION> tc(&cl,\n+                                                                      ShenandoahStoreValEnqueueBarrier ? &mark_cl : NULL,\n+                                                                      do_nmethods ? &blobsCl : NULL);\n@@ -305,1 +323,1 @@\n-    ShenandoahInitMarkRootsTask<RESOLVE> mark_roots(&root_proc);\n+    ShenandoahInitMarkRootsTask<RESOLVE> mark_roots(this, &root_proc);\n@@ -310,1 +328,1 @@\n-    ShenandoahInitMarkRootsTask<NONE> mark_roots(&root_proc);\n+    ShenandoahInitMarkRootsTask<NONE> mark_roots(this, &root_proc);\n@@ -396,0 +414,1 @@\n+  ShenandoahConcurrentMark*           _scm;\n@@ -402,1 +421,2 @@\n-  ShenandoahMarkConcurrentRootsTask(ShenandoahObjToScanQueueSet* qs,\n+  ShenandoahMarkConcurrentRootsTask(ShenandoahConcurrentMark* scm,\n+                                    ShenandoahObjToScanQueueSet* qs,\n@@ -409,1 +429,2 @@\n-ShenandoahMarkConcurrentRootsTask::ShenandoahMarkConcurrentRootsTask(ShenandoahObjToScanQueueSet* qs,\n+ShenandoahMarkConcurrentRootsTask::ShenandoahMarkConcurrentRootsTask(ShenandoahConcurrentMark* scm,\n+                                                                     ShenandoahObjToScanQueueSet* qs,\n@@ -414,0 +435,1 @@\n+  _scm(scm),\n@@ -423,2 +445,16 @@\n-  ShenandoahMarkResolveRefsClosure cl(q, _rp);\n-  _rs.oops_do(&cl, worker_id);\n+  switch (_scm->generation_mode()) {\n+    case YOUNG: {\n+      ShenandoahMarkResolveRefsClosure<YOUNG> cl(q, _rp);\n+      _rs.oops_do(&cl, worker_id);\n+      break;\n+    }\n+    case GLOBAL: {\n+      ShenandoahMarkResolveRefsClosure<GLOBAL> cl(q, _rp);\n+      _rs.oops_do(&cl, worker_id);\n+      break;\n+    }\n+    default: {\n+      ShouldNotReachHere();\n+      break;\n+    }\n+  }\n@@ -438,1 +474,1 @@\n-    ShenandoahMarkConcurrentRootsTask task(task_queues(), rp, ShenandoahPhaseTimings::conc_mark_roots, nworkers);\n+    ShenandoahMarkConcurrentRootsTask task(this, task_queues(), rp, ShenandoahPhaseTimings::conc_mark_roots, nworkers);\n@@ -466,6 +502,25 @@\n-      if (_heap->has_forwarded_objects()) {\n-        ShenandoahProcessConcurrentRootsTask<ShenandoahMarkResolveRefsClosure> task(this, phase, nworkers);\n-        _heap->workers()->run_task(&task);\n-      } else {\n-        ShenandoahProcessConcurrentRootsTask<ShenandoahMarkRefsClosure> task(this, phase, nworkers);\n-        _heap->workers()->run_task(&task);\n+      switch (generation_mode()) {\n+         case YOUNG: {\n+           if (_heap->has_forwarded_objects()) {\n+             ShenandoahProcessConcurrentRootsTask<ShenandoahMarkResolveRefsClosure<YOUNG>> task(this, phase, nworkers);\n+             _heap->workers()->run_task(&task);\n+           } else {\n+             ShenandoahProcessConcurrentRootsTask<ShenandoahMarkRefsClosure<YOUNG>> task(this, phase, nworkers);\n+             _heap->workers()->run_task(&task);\n+           }\n+           break;\n+         }\n+         case GLOBAL: {\n+           if (_heap->has_forwarded_objects()) {\n+             ShenandoahProcessConcurrentRootsTask<ShenandoahMarkResolveRefsClosure<GLOBAL>> task(this, phase, nworkers);\n+             _heap->workers()->run_task(&task);\n+           } else {\n+             ShenandoahProcessConcurrentRootsTask<ShenandoahMarkRefsClosure<GLOBAL>> task(this, phase, nworkers);\n+             _heap->workers()->run_task(&task);\n+           }\n+           break;\n+         }\n+         default: {\n+           ShouldNotReachHere();\n+           break;\n+         }\n@@ -490,2 +545,16 @@\n-      ShenandoahFinalMarkingTask task(this, &terminator, ShenandoahStringDedup::is_enabled());\n-      _heap->workers()->run_task(&task);\n+      switch (generation_mode()) {\n+        case YOUNG: {\n+          ShenandoahFinalMarkingTask<YOUNG> task(this, &terminator, ShenandoahStringDedup::is_enabled());\n+          _heap->workers()->run_task(&task);\n+          break;\n+        }\n+        case GLOBAL: {\n+          ShenandoahFinalMarkingTask<GLOBAL> task(this, &terminator, ShenandoahStringDedup::is_enabled());\n+          _heap->workers()->run_task(&task);\n+          break;\n+        }\n+        default: {\n+          ShouldNotReachHere();\n+          break;\n+        }\n+      }\n@@ -516,1 +585,1 @@\n-template <bool CANCELLABLE>\n+template <GenerationMode GENERATION, bool CANCELLABLE>\n@@ -528,2 +597,2 @@\n-        ShenandoahMarkUpdateRefsMetadataDedupClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkUpdateRefsMetadataDedupClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkUpdateRefsMetadataDedupClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkUpdateRefsMetadataDedupClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -531,2 +600,2 @@\n-        ShenandoahMarkUpdateRefsMetadataClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkUpdateRefsMetadataClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkUpdateRefsMetadataClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkUpdateRefsMetadataClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -536,2 +605,2 @@\n-        ShenandoahMarkRefsMetadataDedupClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkRefsMetadataDedupClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkRefsMetadataDedupClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkRefsMetadataDedupClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -539,2 +608,2 @@\n-        ShenandoahMarkRefsMetadataClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkRefsMetadataClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkRefsMetadataClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkRefsMetadataClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -546,2 +615,2 @@\n-        ShenandoahMarkUpdateRefsDedupClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkUpdateRefsDedupClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkUpdateRefsDedupClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkUpdateRefsDedupClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -549,2 +618,2 @@\n-        ShenandoahMarkUpdateRefsClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkUpdateRefsClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkUpdateRefsClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkUpdateRefsClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -554,2 +623,2 @@\n-        ShenandoahMarkRefsDedupClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkRefsDedupClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkRefsDedupClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkRefsDedupClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -557,2 +626,2 @@\n-        ShenandoahMarkRefsClosure cl(q, rp);\n-        mark_loop_work<ShenandoahMarkRefsClosure, CANCELLABLE>(&cl, ld, w, t);\n+        ShenandoahMarkRefsClosure<GENERATION> cl(q, rp);\n+        mark_loop_work<ShenandoahMarkRefsClosure<GENERATION>, GENERATION, CANCELLABLE>(&cl, ld, w, t);\n@@ -566,1 +635,1 @@\n-template <class T, bool CANCELLABLE>\n+template <class T, GenerationMode GENERATION, bool CANCELLABLE>\n@@ -605,1 +674,1 @@\n-  ShenandoahSATBBufferClosure drain_satb(q);\n+  ShenandoahSATBBufferClosure<GENERATION> drain_satb(q);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":121,"deletions":52,"binary":false,"changes":173,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  GenerationMode const _generation_mode;\n@@ -43,0 +44,2 @@\n+  ShenandoahConcurrentMark(GenerationMode generation_mode) : _generation_mode(generation_mode) { }\n+\n@@ -46,0 +49,2 @@\n+  GenerationMode generation_mode() const { return _generation_mode; }\n+\n@@ -60,1 +65,1 @@\n-  template <class T, bool CANCELLABLE>\n+  template <class T, GenerationMode GENERATION, bool CANCELLABLE>\n@@ -63,1 +68,1 @@\n-  template <bool CANCELLABLE>\n+  template <GenerationMode GENERATION, bool CANCELLABLE>\n@@ -67,6 +72,22 @@\n-  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor* rp,\n-                 bool cancellable, bool strdedup) {\n-    if (cancellable) {\n-      mark_loop_prework<true>(worker_id, terminator, rp, strdedup);\n-    } else {\n-      mark_loop_prework<false>(worker_id, terminator, rp, strdedup);\n+  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp, bool cancellable, bool strdedup) {\n+    switch (generation_mode()) {\n+      case YOUNG: {\n+        if (cancellable) {\n+          mark_loop_prework<YOUNG, true>(worker_id, terminator, rp, strdedup);\n+        } else {\n+          mark_loop_prework<YOUNG, false>(worker_id, terminator, rp, strdedup);\n+        }\n+        break;\n+      }\n+      case GLOBAL: {\n+        if (cancellable) {\n+          mark_loop_prework<GLOBAL, true>(worker_id, terminator, rp, strdedup);\n+        } else {\n+          mark_loop_prework<GLOBAL, false>(worker_id, terminator, rp, strdedup);\n+        }\n+        break;\n+      }\n+      default: {\n+        ShouldNotReachHere();\n+        break;\n+      }\n@@ -76,1 +97,1 @@\n-  template<class T, UpdateRefsMode UPDATE_REFS, StringDedupMode STRING_DEDUP>\n+  template<class T, GenerationMode GENERATION, UpdateRefsMode UPDATE_REFS, StringDedupMode STRING_DEDUP>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.hpp","additions":30,"deletions":9,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -205,0 +205,1 @@\n+template <GenerationMode GENERATION>\n@@ -231,1 +232,1 @@\n-      ShenandoahConcurrentMark::mark_through_ref<oop, NONE, STRING_DEDUP>(p, _heap, _queue, _mark_context, false);\n+      ShenandoahConcurrentMark::mark_through_ref<oop, GENERATION, NONE, STRING_DEDUP>(p, _heap, _queue, _mark_context, false);\n@@ -236,1 +237,1 @@\n-template<class T, UpdateRefsMode UPDATE_REFS, StringDedupMode STRING_DEDUP>\n+template<class T, GenerationMode GENERATION, UpdateRefsMode UPDATE_REFS, StringDedupMode STRING_DEDUP>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -39,0 +40,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n@@ -206,1 +208,7 @@\n-          service_concurrent_normal_cycle(cause);\n+          if (heap->mode()->is_generational()) {\n+            \/\/ TODO: Only young collections for now.\n+            \/\/ We'll add old collections later.\n+            service_concurrent_normal_cycle(cause, heap->young_generation());\n+          } else {\n+            service_concurrent_normal_cycle(cause, heap->global_generation());\n+          }\n@@ -349,1 +357,1 @@\n-void ShenandoahControlThread::service_concurrent_normal_cycle(GCCause::Cause cause) {\n+void ShenandoahControlThread::service_concurrent_normal_cycle(GCCause::Cause cause, ShenandoahGeneration* generation) {\n@@ -398,1 +406,1 @@\n-  heap->vmop_entry_init_mark();\n+  heap->vmop_entry_init_mark(generation);\n@@ -401,1 +409,1 @@\n-  heap->entry_mark();\n+  heap->entry_mark(generation);\n@@ -405,1 +413,1 @@\n-  heap->vmop_entry_final_mark();\n+  heap->vmop_entry_final_mark(generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  void service_concurrent_normal_cycle(GCCause::Cause cause);\n+  void service_concurrent_normal_cycle(GCCause::Cause cause, ShenandoahGeneration* generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,0 +149,2 @@\n+  try_recycle_trashed(r);\n+\n@@ -155,2 +157,0 @@\n-  try_recycle_trashed(r);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -28,1 +28,7 @@\n-class ShenandoahGeneration {\n+#include \"memory\/allocation.hpp\"\n+#include \"gc\/shenandoah\/shenandoahConcurrentMark.hpp\"\n+\n+class ShenandoahGeneration : public CHeapObj<mtGC> {\n+private:\n+  GenerationMode const _generation_mode;\n+  ShenandoahConcurrentMark* const _scm;\n@@ -30,2 +36,4 @@\n-  ShenandoahGeneration();\n-};\n+  ShenandoahGeneration(GenerationMode generation_mode) :\n+    _generation_mode(generation_mode),\n+    _scm(new ShenandoahConcurrentMark(generation_mode)) {\n+  }\n@@ -33,2 +41,1 @@\n-class ShenandoahYoungGeneration : public ShenandoahGeneration {\n-};\n+  inline GenerationMode generation_mode() const { return _generation_mode; }\n@@ -36,1 +43,1 @@\n-class ShenandoahOldGeneration : public ShenandoahGeneration {\n+  inline ShenandoahConcurrentMark* concurrent_mark() const { return _scm; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2020, Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_VM_GC_SHENANDOAH_SHENANDOAHGLOBALGENERATION_HPP\n+#define SHARE_VM_GC_SHENANDOAH_SHENANDOAHGLOBALGENERATION_HPP\n+\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n+\n+\/\/ A \"generation\" that represents the whole heap.\n+class ShenandoahGlobalGeneration : public ShenandoahGeneration {\n+public:\n+  ShenandoahGlobalGeneration() : ShenandoahGeneration(GLOBAL) { }\n+};\n+\n+#endif \/\/ SHARE_VM_GC_SHENANDOAH_SHENANDOAHGLOBALGENERATION_HPP\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"gc\/shenandoah\/shenandoahGlobalGeneration.hpp\"\n@@ -69,0 +70,1 @@\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -487,0 +489,2 @@\n+  _young_generation(new ShenandoahYoungGeneration()),\n+  _global_generation(new ShenandoahGlobalGeneration()),\n@@ -491,1 +495,0 @@\n-  _scm(new ShenandoahConcurrentMark()),\n@@ -621,1 +624,2 @@\n-  _scm->initialize(_max_workers);\n+  young_generation()->concurrent_mark()->initialize(_max_workers);\n+  global_generation()->concurrent_mark()->initialize(_max_workers);\n@@ -1586,1 +1590,1 @@\n-void ShenandoahHeap::op_init_mark() {\n+void ShenandoahHeap::op_init_mark(ShenandoahGeneration* generation) {\n@@ -1621,1 +1625,1 @@\n-  concurrent_mark()->mark_roots(ShenandoahPhaseTimings::scan_roots);\n+  generation->concurrent_mark()->mark_roots(ShenandoahPhaseTimings::scan_roots);\n@@ -1635,2 +1639,2 @@\n-void ShenandoahHeap::op_mark() {\n-  concurrent_mark()->mark_from_roots();\n+void ShenandoahHeap::op_mark(ShenandoahGeneration* generation) {\n+  generation->concurrent_mark()->mark_from_roots();\n@@ -1686,1 +1690,1 @@\n-void ShenandoahHeap::op_final_mark() {\n+void ShenandoahHeap::op_final_mark(ShenandoahGeneration* generation) {\n@@ -1695,1 +1699,1 @@\n-    concurrent_mark()->finish_mark_from_roots(\/* full_gc = *\/ false);\n+    generation->concurrent_mark()->finish_mark_from_roots(\/* full_gc = *\/ false);\n@@ -1795,1 +1799,1 @@\n-    concurrent_mark()->cancel();\n+    generation->concurrent_mark()->cancel();\n@@ -2187,1 +2191,1 @@\n-      op_init_mark();\n+      op_init_mark(ShenandoahHeap::heap()->global_generation());\n@@ -2194,1 +2198,1 @@\n-      op_final_mark();\n+      op_final_mark(ShenandoahHeap::heap()->global_generation());\n@@ -2796,1 +2800,1 @@\n-    concurrent_mark()->update_roots(ShenandoahPhaseTimings::degen_gc_update_roots);\n+    global_generation()->concurrent_mark()->update_roots(ShenandoahPhaseTimings::degen_gc_update_roots);\n@@ -2922,1 +2926,1 @@\n-void ShenandoahHeap::vmop_entry_init_mark() {\n+void ShenandoahHeap::vmop_entry_init_mark(ShenandoahGeneration* generation) {\n@@ -2927,1 +2931,1 @@\n-  VM_ShenandoahInitMark op;\n+  VM_ShenandoahInitMark op(generation);\n@@ -2931,1 +2935,1 @@\n-void ShenandoahHeap::vmop_entry_final_mark() {\n+void ShenandoahHeap::vmop_entry_final_mark(ShenandoahGeneration* generation) {\n@@ -2936,1 +2940,1 @@\n-  VM_ShenandoahFinalMarkStartEvac op;\n+  VM_ShenandoahFinalMarkStartEvac op(generation);\n@@ -2975,1 +2979,1 @@\n-void ShenandoahHeap::entry_init_mark() {\n+void ShenandoahHeap::entry_init_mark(ShenandoahGeneration* generation) {\n@@ -2984,1 +2988,1 @@\n-  op_init_mark();\n+  op_init_mark(generation);\n@@ -2987,1 +2991,1 @@\n-void ShenandoahHeap::entry_final_mark() {\n+void ShenandoahHeap::entry_final_mark(ShenandoahGeneration* generation) {\n@@ -2996,1 +3000,1 @@\n-  op_final_mark();\n+  op_final_mark(generation);\n@@ -3048,1 +3052,1 @@\n-void ShenandoahHeap::entry_mark() {\n+void ShenandoahHeap::entry_mark(ShenandoahGeneration* generation) {\n@@ -3060,1 +3064,1 @@\n-  op_mark();\n+  op_mark(generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":26,"deletions":22,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+class ShenandoahGeneration;\n@@ -60,1 +61,0 @@\n-class ShenandoahMarkCompact;\n@@ -373,2 +373,2 @@\n-  void vmop_entry_init_mark();\n-  void vmop_entry_final_mark();\n+  void vmop_entry_init_mark(ShenandoahGeneration* generation);\n+  void vmop_entry_final_mark(ShenandoahGeneration* generation);\n@@ -382,2 +382,2 @@\n-  void entry_init_mark();\n-  void entry_final_mark();\n+  void entry_init_mark(ShenandoahGeneration* generation);\n+  void entry_final_mark(ShenandoahGeneration* generation);\n@@ -392,1 +392,1 @@\n-  void entry_mark();\n+  void entry_mark(ShenandoahGeneration* generation);\n@@ -407,2 +407,2 @@\n-  void op_init_mark();\n-  void op_final_mark();\n+  void op_init_mark(ShenandoahGeneration* generation);\n+  void op_final_mark(ShenandoahGeneration* generation);\n@@ -417,1 +417,1 @@\n-  void op_mark();\n+  void op_mark(ShenandoahGeneration* generation);\n@@ -443,0 +443,2 @@\n+  ShenandoahGeneration*      _young_generation;\n+  ShenandoahGeneration*      _global_generation;\n@@ -448,1 +450,0 @@\n-  ShenandoahConcurrentMark*  _scm;\n@@ -459,0 +460,2 @@\n+  ShenandoahGeneration*      young_generation()  const { return _young_generation;  }\n+  ShenandoahGeneration*      global_generation() const { return _global_generation; }\n@@ -463,1 +466,0 @@\n-  ShenandoahConcurrentMark*  concurrent_mark()         { return _scm;               }\n@@ -521,0 +523,1 @@\n+\n@@ -523,0 +526,1 @@\n+\n@@ -671,0 +675,1 @@\n+\n@@ -725,0 +730,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -117,1 +118,1 @@\n-      heap->concurrent_mark()->cancel();\n+      heap->global_generation()->concurrent_mark()->cancel();\n@@ -124,1 +125,1 @@\n-      heap->concurrent_mark()->update_roots(ShenandoahPhaseTimings::full_gc_update_roots);\n+      heap->global_generation()->concurrent_mark()->update_roots(ShenandoahPhaseTimings::full_gc_update_roots);\n@@ -241,1 +242,1 @@\n-  ShenandoahConcurrentMark* cm = heap->concurrent_mark();\n+  ShenandoahConcurrentMark* cm = heap->global_generation()->concurrent_mark();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkCompact.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,5 @@\n+enum GenerationMode {\n+  YOUNG,\n+  GLOBAL\n+};\n+\n@@ -55,1 +60,1 @@\n-  template <class T, UpdateRefsMode UPDATE_MODE, StringDedupMode STRING_DEDUP>\n+  template <class T, GenerationMode GENERATION, UpdateRefsMode UPDATE_MODE, StringDedupMode STRING_DEDUP>\n@@ -70,0 +75,1 @@\n+template <GenerationMode GENERATION>\n@@ -73,1 +79,1 @@\n-  inline void do_oop_work(T* p)     { work<T, CONCURRENT, NO_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, CONCURRENT, NO_DEDUP>(p); }\n@@ -84,0 +90,1 @@\n+template <GenerationMode GENERATION>\n@@ -87,1 +94,1 @@\n-  inline void do_oop_work(T* p)     { work<T, CONCURRENT, ENQUEUE_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, CONCURRENT, ENQUEUE_DEDUP>(p); }\n@@ -98,0 +105,1 @@\n+template <GenerationMode GENERATION>\n@@ -101,1 +109,1 @@\n-  inline void do_oop_work(T* p)     { work<T, CONCURRENT, NO_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, CONCURRENT, NO_DEDUP>(p); }\n@@ -112,0 +120,1 @@\n+template <GenerationMode GENERATION>\n@@ -115,1 +124,1 @@\n-  inline void do_oop_work(T* p)     { work<T, CONCURRENT, ENQUEUE_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, CONCURRENT, ENQUEUE_DEDUP>(p); }\n@@ -126,0 +135,1 @@\n+template <GenerationMode GENERATION>\n@@ -129,1 +139,1 @@\n-  inline void do_oop_work(T* p)     { work<T, NONE, NO_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, NONE, NO_DEDUP>(p); }\n@@ -140,0 +150,1 @@\n+template <GenerationMode GENERATION>\n@@ -143,1 +154,1 @@\n-  inline void do_oop_work(T* p)     { work<T, NONE, ENQUEUE_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, NONE, ENQUEUE_DEDUP>(p); }\n@@ -154,0 +165,1 @@\n+template <GenerationMode GENERATION>\n@@ -157,1 +169,1 @@\n-  inline void do_oop_work(T* p)     { work<T, RESOLVE, NO_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, RESOLVE, NO_DEDUP>(p); }\n@@ -168,0 +180,1 @@\n+template <GenerationMode GENERATION>\n@@ -171,1 +184,1 @@\n-  inline void do_oop_work(T* p)     { work<T, NONE, NO_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, NONE, NO_DEDUP>(p); }\n@@ -182,0 +195,1 @@\n+template <GenerationMode GENERATION>\n@@ -185,1 +199,1 @@\n-  inline void do_oop_work(T* p)     { work<T, NONE, ENQUEUE_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T, GENERATION, NONE, ENQUEUE_DEDUP>(p); }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -31,1 +32,1 @@\n-template<class T, UpdateRefsMode UPDATE_REFS, StringDedupMode STRING_DEDUP>\n+template<class T, GenerationMode GENERATION, UpdateRefsMode UPDATE_REFS, StringDedupMode STRING_DEDUP>\n@@ -33,1 +34,1 @@\n-  ShenandoahConcurrentMark::mark_through_ref<T, UPDATE_REFS, STRING_DEDUP>(p, _heap, _queue, _mark_context, _weak);\n+  ShenandoahConcurrentMark::mark_through_ref<T, GENERATION, UPDATE_REFS, STRING_DEDUP>(p, _heap, _queue, _mark_context, _weak);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n@@ -46,1 +47,1 @@\n-  ShenandoahHeap::heap()->entry_init_mark();\n+  ShenandoahHeap::heap()->entry_init_mark(_generation);\n@@ -51,1 +52,1 @@\n-  ShenandoahHeap::heap()->entry_final_mark();\n+  ShenandoahHeap::heap()->entry_final_mark(_generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+private:\n+  ShenandoahGeneration* _generation;\n@@ -56,1 +58,1 @@\n-  VM_ShenandoahInitMark() : VM_ShenandoahOperation() {};\n+  VM_ShenandoahInitMark(ShenandoahGeneration* generation) : VM_ShenandoahOperation(), _generation(generation) {};\n@@ -63,0 +65,2 @@\n+private:\n+  ShenandoahGeneration* _generation;\n@@ -64,1 +68,1 @@\n-  VM_ShenandoahFinalMarkStartEvac() : VM_ShenandoahOperation() {};\n+  VM_ShenandoahFinalMarkStartEvac(ShenandoahGeneration* generation) : VM_ShenandoahOperation(), _generation(generation) {};\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2020, Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_VM_GC_SHENANDOAH_SHENANDOAHYOUNGGENERATION_HPP\n+#define SHARE_VM_GC_SHENANDOAH_SHENANDOAHYOUNGGENERATION_HPP\n+\n+#include \"gc\/shenandoah\/shenandoahGeneration.hpp\"\n+\n+class ShenandoahYoungGeneration : public ShenandoahGeneration {\n+public:\n+  ShenandoahYoungGeneration() : ShenandoahGeneration(YOUNG) { }\n+};\n+\n+#endif \/\/ SHARE_VM_GC_SHENANDOAH_SHENANDOAHYOUNGGENERATION_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}