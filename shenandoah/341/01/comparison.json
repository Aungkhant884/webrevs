{"files":[{"patch":"@@ -505,0 +505,1 @@\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -506,1 +507,0 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -522,1 +522,0 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -525,1 +524,13 @@\n-    if (current_usage > trigger_threshold) {\n+    size_t heap_size = heap->capacity();\n+    size_t consecutive_young_cycles;\n+    if ((current_usage < ShenandoahGenerationalIgnoreOldGrowthBelowPercentage * heap_size \/ 100) &&\n+        ((consecutive_young_cycles = heap->control_thread()->consecutive_young_collections())\n+         < ShenandoahGenerationalDoNotIgnoreGrowthAfterYoungCycles)) {\n+      log_info(gc)(\"Ignoring Trigger (OLD): Old has overgrown: usage (\" SIZE_FORMAT \"%s) is below threshold (\" SIZE_FORMAT\n+                   \"%s) after \" SIZE_FORMAT \" consecutive completed young GCs\",\n+                   byte_size_in_proper_unit(current_usage), proper_unit_for_byte_size(current_usage),\n+                   byte_size_in_proper_unit(ShenandoahGenerationalDoNotIgnoreGrowthAfterYoungCycles),\n+                   proper_unit_for_byte_size(ShenandoahGenerationalDoNotIgnoreGrowthAfterYoungCycles),\n+                   consecutive_young_cycles);\n+      _growth_trigger = false;\n+    } else if (current_usage > trigger_threshold) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-#endif \/\/ SHARE_GC_SHENANDOAH_HEURISTICS_SHENANDOAHYOUNGHEURISTICS_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_GC_SHENANDOAH_HEURISTICS_SHENANDOAHYOUNGHEURISTICS_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+  _consecutive_young = 0;\n@@ -623,0 +624,1 @@\n+    _consecutive_young = 0;\n@@ -716,0 +718,5 @@\n+    if (generation->is_young()) {\n+      _consecutive_young++;\n+    } else {\n+      _consecutive_young = 0;\n+    }\n@@ -812,0 +819,1 @@\n+  _consecutive_young = 0;\n@@ -839,0 +847,5 @@\n+  if (_degen_generation->is_young()) {\n+    _consecutive_young++;\n+  } else {\n+    _consecutive_young = 0;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -106,0 +106,2 @@\n+  volatile size_t _consecutive_young;\n+  shenandoah_padding(4);\n@@ -176,0 +178,2 @@\n+  inline size_t consecutive_young_collections() { return _consecutive_young; };\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -178,1 +178,2 @@\n-    _growth_before_compaction(INITIAL_GROWTH_BEFORE_COMPACTION)\n+    _growth_before_compaction(INITIAL_GROWTH_BEFORE_COMPACTION),\n+    _min_growth_before_compaction ((ShenandoahGenerationalMinOldGenGrowthPercent * FRACTIONAL_DENOMINATOR) \/ 100)\n@@ -191,2 +192,3 @@\n-  if (_growth_before_compaction > MINIMUM_GROWTH_BEFORE_COMPACTION) {\n-    _growth_before_compaction \/= 2;\n+  _growth_before_compaction \/= 2;\n+  if (_growth_before_compaction < _min_growth_before_compaction) {\n+    _growth_before_compaction = _min_growth_before_compaction;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,2 +101,1 @@\n-  static const size_t INITIAL_GROWTH_BEFORE_COMPACTION = FRACTIONAL_DENOMINATOR \/ 2;          \/\/  50.0%\n-  static const size_t MINIMUM_GROWTH_BEFORE_COMPACTION = FRACTIONAL_DENOMINATOR \/ 8;          \/\/  12.5%\n+  static const size_t INITIAL_GROWTH_BEFORE_COMPACTION = FRACTIONAL_DENOMINATOR \/ 2;        \/\/  50.0%\n@@ -109,1 +108,2 @@\n-  static const uint16_t INITIAL_LIVE_FRACTION = FRACTIONAL_DENOMINATOR \/ 32;                    \/\/   3.125%\n+  static const uint16_t INITIAL_LIVE_FRACTION = FRACTIONAL_DENOMINATOR \/ 32;                \/\/   3.125%\n+\n@@ -111,1 +111,4 @@\n-  size_t _growth_before_compaction; \/\/ How much growth in usage before we trigger old collection, per 65_536\n+  \n+  \/\/ How much growth in usage before we trigger old collection, per FRACTIONAL_DENOMINATOR (65_536)\n+  size_t _growth_before_compaction;\n+  const size_t _min_growth_before_compaction;                                               \/\/ Default is 12.5%\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,0 +38,27 @@\n+  product(double, ShenandoahGenerationalMinOldGenGrowthPercent,             \\\n+          12.5, EXPERIMENTAL,                                               \\\n+          \"(Generational mode only) If the usage within old generation \"    \\\n+          \"has grown by at least this percent of its live memory size \"     \\\n+          \"at completion of the most recent old-generation marking \"        \\\n+          \"effort, heuristics may trigger the start of a new old-gen \"      \\\n+          \"collection.\")                                                    \\\n+          range(0.0,100.0)                                                  \\\n+                                                                            \\\n+  product(uintx, ShenandoahGenerationalIgnoreOldGrowthBelowPercentage,      \\\n+          5, EXPERIMENTAL,                                                  \\\n+          \"(Generational mode only) If the total usage of the old \"         \\\n+          \"generation is smaller than this percent, we do not trigger \"     \\\n+          \"old gen collections even if old has grown, except when \"         \\\n+          \"ShenandoahGenerationalDoNotIgnoreGrowthAfterYoungCycles \"        \\\n+          \"consecutive cycles have been completed following the \"           \\\n+          \"preceding old-gen collection.\")                                  \\\n+          range(0,100)                                                      \\\n+                                                                            \\\n+  product(uintx, ShenandoahGenerationalDoNotIgnoreGrowthAfterYoungCycles,   \\\n+          50, EXPERIMENTAL,                                                 \\\n+          \"(Generational mode only) Even if the usage of old generation \"   \\\n+          \"is below ShenandoahGenerationalIgnoreOldGrowthBelowPercentage, \" \\\n+          \"trigger an old-generation mark if old has grown and this \"       \\\n+          \"many young-gen consecutive young-gen collections have been \"     \\\n+          \"completed following the preceding old-gen collection.\")          \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}