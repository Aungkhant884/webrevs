{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahCollectorPolicy.hpp\"\n@@ -505,0 +506,1 @@\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -506,1 +508,0 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -522,1 +523,0 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -525,1 +525,13 @@\n-    if (current_usage > trigger_threshold) {\n+    size_t heap_size = heap->capacity();\n+    size_t consecutive_young_cycles;\n+    if ((current_usage < ShenandoahIgnoreOldGrowthBelowPercentage * heap_size \/ 100) &&\n+        ((consecutive_young_cycles = heap->shenandoah_policy()->consecutive_young_gc_count())\n+         < ShenandoahDoNotIgnoreGrowthAfterYoungCycles)) {\n+      log_info(gc)(\"Ignoring Trigger (OLD): Old has overgrown: usage (\" SIZE_FORMAT \"%s) is below threshold (\" SIZE_FORMAT\n+                   \"%s) after \" SIZE_FORMAT \" consecutive completed young GCs\",\n+                   byte_size_in_proper_unit(current_usage), proper_unit_for_byte_size(current_usage),\n+                   byte_size_in_proper_unit(ShenandoahDoNotIgnoreGrowthAfterYoungCycles),\n+                   proper_unit_for_byte_size(ShenandoahDoNotIgnoreGrowthAfterYoungCycles),\n+                   consecutive_young_cycles);\n+      _growth_trigger = false;\n+    } else if (current_usage > trigger_threshold) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-#endif \/\/ SHARE_GC_SHENANDOAH_HEURISTICS_SHENANDOAHYOUNGHEURISTICS_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_GC_SHENANDOAH_HEURISTICS_SHENANDOAHYOUNGHEURISTICS_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+  _consecutive_young_gcs(0),\n@@ -87,1 +88,6 @@\n-void ShenandoahCollectorPolicy::record_success_concurrent() {\n+void ShenandoahCollectorPolicy::record_success_concurrent(bool is_young) {\n+  if (is_young) {\n+    _consecutive_young_gcs++;\n+  } else {\n+    _consecutive_young_gcs = 0;\n+  }\n@@ -100,0 +106,1 @@\n+  _consecutive_young_gcs = 0;\n@@ -104,0 +111,1 @@\n+  _consecutive_young_gcs = 0;\n@@ -107,1 +115,6 @@\n-void ShenandoahCollectorPolicy::record_success_degenerated() {\n+void ShenandoahCollectorPolicy::record_success_degenerated(bool is_young) {\n+  if (is_young) {\n+    _consecutive_young_gcs++;\n+  } else {\n+    _consecutive_young_gcs = 0;\n+  }\n@@ -112,0 +125,1 @@\n+  _consecutive_young_gcs = 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+  volatile size_t _consecutive_young_gcs;\n@@ -72,1 +73,1 @@\n-  void record_success_concurrent();\n+  void record_success_concurrent(bool is_young);\n@@ -75,1 +76,1 @@\n-  void record_success_degenerated();\n+  void record_success_degenerated(bool is_young);\n@@ -97,0 +98,4 @@\n+\n+  inline size_t consecutive_young_gc_count() const {\n+    return _consecutive_young_gcs;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -840,1 +840,1 @@\n-  heap->shenandoah_policy()->record_success_degenerated();\n+  heap->shenandoah_policy()->record_success_degenerated(_degen_generation->is_young());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1019,1 +1019,1 @@\n-  ShenandoahHeap::heap()->shenandoah_policy()->record_success_concurrent();\n+  ShenandoahHeap::heap()->shenandoah_policy()->record_success_concurrent(is_young());\n@@ -1024,1 +1024,1 @@\n-  ShenandoahHeap::heap()->shenandoah_policy()->record_success_degenerated();\n+  ShenandoahHeap::heap()->shenandoah_policy()->record_success_degenerated(is_young());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -178,1 +178,2 @@\n-    _growth_before_compaction(INITIAL_GROWTH_BEFORE_COMPACTION)\n+    _growth_before_compaction(INITIAL_GROWTH_BEFORE_COMPACTION),\n+    _min_growth_before_compaction ((ShenandoahMinOldGenGrowthPercent * FRACTIONAL_DENOMINATOR) \/ 100)\n@@ -191,2 +192,3 @@\n-  if (_growth_before_compaction > MINIMUM_GROWTH_BEFORE_COMPACTION) {\n-    _growth_before_compaction \/= 2;\n+  _growth_before_compaction \/= 2;\n+  if (_growth_before_compaction < _min_growth_before_compaction) {\n+    _growth_before_compaction = _min_growth_before_compaction;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,2 +101,1 @@\n-  static const size_t INITIAL_GROWTH_BEFORE_COMPACTION = FRACTIONAL_DENOMINATOR \/ 2;          \/\/  50.0%\n-  static const size_t MINIMUM_GROWTH_BEFORE_COMPACTION = FRACTIONAL_DENOMINATOR \/ 8;          \/\/  12.5%\n+  static const size_t INITIAL_GROWTH_BEFORE_COMPACTION = FRACTIONAL_DENOMINATOR \/ 2;        \/\/  50.0%\n@@ -105,1 +104,1 @@\n-  \/\/ needs to consume 3.125% of the total heap size.  And we \"pretend\" that we start out with this amount of live\n+  \/\/ needs to consume 6.25% of the total heap size.  And we \"pretend\" that we start out with this amount of live\n@@ -107,3 +106,4 @@\n-  \/\/ approximation of the old-gen memory requirement, in other words when old-gen usage is 150% of 3.125%, which\n-  \/\/ is 4.6875% of the total heap size.\n-  static const uint16_t INITIAL_LIVE_FRACTION = FRACTIONAL_DENOMINATOR \/ 32;                    \/\/   3.125%\n+  \/\/ approximation of the old-gen memory requirement, in other words when old-gen usage is 150% of 6.25%, which\n+  \/\/ is 9.375% of the total heap size.\n+  static const uint16_t INITIAL_LIVE_FRACTION = FRACTIONAL_DENOMINATOR \/ 16;                \/\/   6.25%\n+\n@@ -111,1 +111,4 @@\n-  size_t _growth_before_compaction; \/\/ How much growth in usage before we trigger old collection, per 65_536\n+\n+  \/\/ How much growth in usage before we trigger old collection, per FRACTIONAL_DENOMINATOR (65_536)\n+  size_t _growth_before_compaction;\n+  const size_t _min_growth_before_compaction;                                               \/\/ Default is 12.5%\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,0 +38,25 @@\n+  product(double, ShenandoahMinOldGenGrowthPercent,12.5, EXPERIMENTAL,      \\\n+          \"(Generational mode only) If the usage within old generation \"    \\\n+          \"has grown by at least this percent of its live memory size \"     \\\n+          \"at completion of the most recent old-generation marking \"        \\\n+          \"effort, heuristics may trigger the start of a new old-gen \"      \\\n+          \"collection.\")                                                    \\\n+          range(0.0,100.0)                                                  \\\n+                                                                            \\\n+  product(uintx, ShenandoahIgnoreOldGrowthBelowPercentage,10, EXPERIMENTAL, \\\n+          \"(Generational mode only) If the total usage of the old \"         \\\n+          \"generation is smaller than this percent, we do not trigger \"     \\\n+          \"old gen collections even if old has grown, except when \"         \\\n+          \"ShenandoahGenerationalDoNotIgnoreGrowthAfterYoungCycles \"        \\\n+          \"consecutive cycles have been completed following the \"           \\\n+          \"preceding old-gen collection.\")                                  \\\n+          range(0,100)                                                      \\\n+                                                                            \\\n+  product(uintx, ShenandoahDoNotIgnoreGrowthAfterYoungCycles,               \\\n+          50, EXPERIMENTAL,                                                 \\\n+          \"(Generational mode only) Even if the usage of old generation \"   \\\n+          \"is below ShenandoahIgnoreOldGrowthBelowPercentage, \"             \\\n+          \"trigger an old-generation mark if old has grown and this \"       \\\n+          \"many consecutive young-gen collections have been \"               \\\n+          \"completed following the preceding old-gen collection.\")          \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}