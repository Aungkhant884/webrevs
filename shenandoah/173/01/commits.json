[{"commit":{"message":"Add comment to explain ShenandoahRegionChunkIterator"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"}],"sha":"256d88da19280e63038384c9c91876a1ba13e339"},{"commit":{"message":"Fix whitespace and typos in comments"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"}],"sha":"9704b3487d2e4383fadcfead4cce2b3990ff1f5b"},{"commit":{"message":"Merge remote-tracking branch 'GitFarmBranch\/smaller-remset-rebase' into load-balance-remset-scan"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"e212b907cda0ecdaecb77697b381ad8dd124b031"},{"commit":{"message":"Fix typo in comment"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"05aa26b1ab0cf6c36c34977faa99aa7dd9964374"},{"commit":{"message":"Remove instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"ee1beb3636df533fe2c430b14c72845055abd2c7"},{"commit":{"message":"Add detail to assertion failure message"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"}],"sha":"7582466d8ba168a2e6043ed50721a33cd5325e57"},{"commit":{"message":"Fix calculation of adjustment to last ShenandoahRegionChunk group"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"}],"sha":"61e1c1db6d367f80092362d9cc0da4fcdda4b777"},{"commit":{"message":"Fix handling of smaller heap regions and disable debug messages"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"}],"sha":"158ee7e4de4cd96a2bdeff80fc176a178be575fa"},{"commit":{"message":"Increase size of largest ShenandoahRegionChunk\n\nSize was 1 MB.  New size is 4 MB.  This decreases the number of chunks\nrequired to span all of memory, which decreases the number of\nsynchronizations required to obtain chunk assignments. which decreases\nthe number of synchronizations required to obtain chunk assignments.\nwhich decreases the number of synchronizations required to obtain chunk\nassignments. which decreases the number of synchronizations required to\nobtain chunk assignments."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"}],"sha":"7d7361e766b4218c7b874ef2690fe0a33a2cf466"},{"commit":{"message":"Fix initialization of ShenandoahRegionChunkIterator\n\nThere was an off-by-one error in computation of _region_index when\nprevious group offset plus this group remainder sum to more than the\nShenandoah heap region size."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"}],"sha":"caa6eac027f3841973563a490ae2143eacb84f71"},{"commit":{"message":"Disable instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"18c5c80399f644d3f1dcc3874346dc6d30eee599"},{"commit":{"message":"Fix smaller remset calculations\n\nThe original implementation was overly simplistic.  This patch expands\nthe size of the initial group so that it subsumes all groups with chunk\nsize equal to or larger than the maximum chunk size.  With this fix, the\nmaximum separation between largest chunk size and smallest chunk size is\n4 groups."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"74dc9c0055980dfe590097bc67e0d1124ed02441"},{"commit":{"message":"Remove instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"84261082678ea5fa255e6c1c39cf59615e692501"},{"commit":{"message":"Use smaller ChunkSize for remembered set scanning\n\nPrior to this change, the first half of remembered set scanning assigned\nentire regions at a time to individual GC worker threads.  This was\nobserved to result in too much imbalance between the work performed by\nindividual threads.  With this fix, the maximum ChunkSize is the smaller\nof the region size and 1mb.  This fix was observed to improve worst-case\nremembered set scanning by 50% on a workload that had approximately 10GB\nold-gen and 52 GB heap size."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"1cfc48b3192f44d4f7a5ec214ebf75f6c10bc9eb"}]