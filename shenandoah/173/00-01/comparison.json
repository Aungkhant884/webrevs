{"files":[{"patch":"@@ -1009,0 +1009,11 @@\n+\/\/ ShenandoahRegionChunkIterator divides the total remembered set scanning effort into assignments (ShenandoahRegionChunks)\n+\/\/ that are assigned one at a time to worker threads.  Note that the effort required to scan a range of memory is not\n+\/\/ necessarily a linear function of the size of the range.  Some memory ranges hold only a small number of live objects.\n+\/\/ Some ranges hold primarily primitive (non-pointer data).  We start with larger assignment sizes because larger assignments\n+\/\/ can be processed with less coordination effort.  We expect that the GC worker threads that receive more difficult assignments\n+\/\/ will work longer on those assignments.  Meanwhile, other worker will threads repeatedly accept and complete multiple\n+\/\/ easier assignments.  As the total amount of work remaining to be completed decreases, we decrease the size of assignments\n+\/\/ given to individual threads.  This reduces the likelihood that significant imbalance between worker thread assignments\n+\/\/ will be introduced when there is less meaningful work to be performed by the remaining worker threads while they wait for\n+\/\/ worker threads with difficult assignments to finish.\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}