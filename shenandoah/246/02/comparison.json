{"files":[{"patch":"@@ -99,1 +99,1 @@\n-  bool is_global = (_generation->generation_mode() == GLOBAL);\n+  bool is_global = _generation->is_global();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  assert(_generation->generation_mode() != OLD, \"Old GC invokes ShenandoahOldHeuristics::choose_collection_set()\");\n+  assert(!_generation->is_old(), \"Old GC invokes ShenandoahOldHeuristics::choose_collection_set()\");\n@@ -144,1 +144,1 @@\n-        assert (_generation->generation_mode() != OLD, \"OLD is handled elsewhere\");\n+        assert(!_generation->is_old(), \"OLD is handled elsewhere\");\n@@ -372,3 +372,3 @@\n-  return ((_generation->generation_mode() == GLOBAL)\n-          || (_generation->generation_mode() == YOUNG && region->affiliation() == YOUNG_GENERATION)\n-          || (_generation->generation_mode() == OLD && region->affiliation() == OLD_GENERATION));\n+  return _generation->is_global()\n+          || (_generation->is_young() && region->is_young())\n+          || (_generation->is_old()   && region->is_old());\n@@ -378,4 +378,1 @@\n-  size_t min_free_threshold =\n-      _generation->generation_mode() == GenerationMode::OLD\n-          ? ShenandoahOldMinFreeThreshold\n-          : ShenandoahMinFreeThreshold;\n+  size_t min_free_threshold = _generation->is_old() ? ShenandoahOldMinFreeThreshold : ShenandoahMinFreeThreshold;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  \/\/ if (_generation->generation_mode() == GLOBAL) _region_data represents\n+  \/\/ if (_generation->type() == GLOBAL) _region_data represents\n@@ -80,1 +80,1 @@\n-  \/\/ if (_generation->generation_mode() == OLD) _region_data represents\n+  \/\/ if (_generation->type() == OLD) _region_data represents\n@@ -82,1 +82,1 @@\n-  \/\/ if (_generation->generation_mode() == YOUNG) _region_data represents\n+  \/\/ if (_generation->type() == YOUNG) _region_data represents\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  assert(_generation->generation_mode() == OLD, \"This service only available for old-gc heuristics\");\n+  assert(_generation->is_old(), \"This service only available for old-gc heuristics\");\n@@ -215,1 +215,1 @@\n-  assert(_generation->generation_mode() == OLD, \"This service only available for old-gc heuristics\");\n+  assert(_generation->is_old(), \"This service only available for old-gc heuristics\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -67,49 +66,0 @@\n-\n-const char* affiliation_name(oop ptr) {\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  assert(heap->is_in(ptr), \"Oop must be in the heap.\");\n-  ShenandoahHeapRegion* region = heap->heap_region_containing(ptr);\n-  return affiliation_name(region->affiliation());\n-}\n-\n-const char affiliation_code(ShenandoahRegionAffiliation type) {\n-  switch(type) {\n-    case ShenandoahRegionAffiliation::FREE:\n-      return 'F';\n-    case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n-      return 'Y';\n-    case ShenandoahRegionAffiliation::OLD_GENERATION:\n-      return 'O';\n-    default:\n-      ShouldNotReachHere();\n-      return 'X';\n-  }\n-}\n-\n-const char* affiliation_name(ShenandoahRegionAffiliation type) {\n-  switch (type) {\n-    case ShenandoahRegionAffiliation::FREE:\n-      return \"FREE\";\n-    case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n-      return \"YOUNG\";\n-    case ShenandoahRegionAffiliation::OLD_GENERATION:\n-      return \"OLD\";\n-    default:\n-      ShouldNotReachHere();\n-      return nullptr;\n-  }\n-}\n-\n-const char* generation_name(GenerationMode mode) {\n-  switch (mode) {\n-    case GenerationMode::GLOBAL:\n-      return \"Global\";\n-    case GenerationMode::OLD:\n-      return \"Old\";\n-    case GenerationMode::YOUNG:\n-      return \"Young\";\n-    default:\n-      ShouldNotReachHere();\n-      return nullptr;\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -29,18 +29,0 @@\n-#include \"oops\/oopsHierarchy.hpp\"\n-\n-enum GenerationMode {\n-  YOUNG,\n-  OLD,\n-  GLOBAL\n-};\n-\n-enum ShenandoahRegionAffiliation {\n-  FREE,\n-  YOUNG_GENERATION,\n-  OLD_GENERATION\n-};\n-\n-const char* affiliation_name(oop ptr);\n-const char* affiliation_name(ShenandoahRegionAffiliation type);\n-const char affiliation_code(ShenandoahRegionAffiliation type);\n-const char* generation_name(GenerationMode mode);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHAFFILIATION_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHAFFILIATION_HPP\n+\n+enum ShenandoahAffiliation {\n+  FREE,\n+  YOUNG_GENERATION,\n+  OLD_GENERATION,\n+};\n+\n+inline const char* shenandoah_affiliation_code(ShenandoahAffiliation type) {\n+  switch(type) {\n+    case FREE:\n+      return \"F\";\n+    case YOUNG_GENERATION:\n+      return \"Y\";\n+    case OLD_GENERATION:\n+      return \"O\";\n+    default:\n+      ShouldNotReachHere();\n+      return \"?\";\n+  }\n+}\n+\n+inline const char* shenandoah_affiliation_name(ShenandoahAffiliation type) {\n+  switch (type) {\n+    case FREE:\n+      return \"FREE\";\n+    case YOUNG_GENERATION:\n+      return \"YOUNG\";\n+    case OLD_GENERATION:\n+      return \"OLD\";\n+    default:\n+      ShouldNotReachHere();\n+      return \"?\";\n+  }\n+}\n+\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHAFFILIATION_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAffiliation.hpp","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahAffiliation.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n@@ -66,1 +66,1 @@\n-  ShenandoahRegionAffiliation const _affiliation;\n+  ShenandoahAffiliation const _affiliation;\n@@ -71,1 +71,1 @@\n-  ShenandoahAllocRequest(size_t _min_size, size_t _requested_size, Type _alloc_type, ShenandoahRegionAffiliation affiliation) :\n+  ShenandoahAllocRequest(size_t _min_size, size_t _requested_size, Type _alloc_type, ShenandoahAffiliation affiliation) :\n@@ -81,1 +81,1 @@\n-    return ShenandoahAllocRequest(min_size, requested_size, _alloc_tlab, ShenandoahRegionAffiliation::YOUNG_GENERATION);\n+    return ShenandoahAllocRequest(min_size, requested_size, _alloc_tlab, ShenandoahAffiliation::YOUNG_GENERATION);\n@@ -85,1 +85,1 @@\n-    return ShenandoahAllocRequest(min_size, requested_size, _alloc_gclab, ShenandoahRegionAffiliation::YOUNG_GENERATION);\n+    return ShenandoahAllocRequest(min_size, requested_size, _alloc_gclab, ShenandoahAffiliation::YOUNG_GENERATION);\n@@ -89,1 +89,1 @@\n-    return ShenandoahAllocRequest(min_size, requested_size, _alloc_plab, ShenandoahRegionAffiliation::OLD_GENERATION);\n+    return ShenandoahAllocRequest(min_size, requested_size, _alloc_plab, ShenandoahAffiliation::OLD_GENERATION);\n@@ -92,1 +92,1 @@\n-  static inline ShenandoahAllocRequest for_shared_gc(size_t requested_size, ShenandoahRegionAffiliation affiliation) {\n+  static inline ShenandoahAllocRequest for_shared_gc(size_t requested_size, ShenandoahAffiliation affiliation) {\n@@ -97,1 +97,1 @@\n-    return ShenandoahAllocRequest(0, requested_size, _alloc_shared, ShenandoahRegionAffiliation::YOUNG_GENERATION);\n+    return ShenandoahAllocRequest(0, requested_size, _alloc_shared, ShenandoahAffiliation::YOUNG_GENERATION);\n@@ -183,1 +183,1 @@\n-  ShenandoahRegionAffiliation affiliation() const {\n+  ShenandoahAffiliation affiliation() const {\n@@ -186,0 +186,4 @@\n+\n+  const char* affiliation_name() const {\n+    return shenandoah_affiliation_name(_affiliation);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAllocRequest.hpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  if (r->affiliation() == YOUNG_GENERATION) {\n+  if (r->is_young()) {\n@@ -100,1 +100,1 @@\n-  } else if (r->affiliation() == OLD_GENERATION) {\n+  } else if (r->is_old()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  if (!heap->cancelled_gc() && heap->mode()->is_generational() && _generation->generation_mode() == GLOBAL) {\n+  if (!heap->cancelled_gc() && heap->mode()->is_generational() && _generation->is_global()) {\n@@ -373,1 +373,1 @@\n-  if (_generation->generation_mode() == YOUNG) {\n+  if (_generation->is_young()) {\n@@ -625,1 +625,1 @@\n-      if (_generation->generation_mode() == YOUNG || (_generation->generation_mode() == GLOBAL && ShenandoahVerify)) {\n+      if (_generation->is_young() || (_generation->is_global() && ShenandoahVerify)) {\n@@ -633,1 +633,1 @@\n-    if (_generation->generation_mode() == GLOBAL) {\n+    if (_generation->is_global()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-template <GenerationMode GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -99,1 +99,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -145,1 +145,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -163,1 +163,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -177,1 +177,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -193,1 +193,1 @@\n-  switch (_generation->generation_mode()) {\n+  switch (_generation->type()) {\n@@ -234,1 +234,1 @@\n-    switch (_generation->generation_mode()) {\n+    switch (_generation->type()) {\n@@ -304,1 +304,1 @@\n-  switch (_generation->generation_mode()) {\n+  switch (_generation->type()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-template <GenerationMode GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -33,1 +33,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -38,2 +38,2 @@\n-  template <GenerationMode GENERATION> friend class ShenandoahConcurrentMarkingTask;\n-  template <GenerationMode GENERATION> friend class ShenandoahFinalMarkingTask;\n+  template <ShenandoahGenerationType GENERATION> friend class ShenandoahConcurrentMarkingTask;\n+  template <ShenandoahGenerationType GENERATION> friend class ShenandoahFinalMarkingTask;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  _requested_generation(GenerationMode::GLOBAL),\n+  _requested_generation(ShenandoahGenerationType::GLOBAL),\n@@ -96,1 +96,1 @@\n-  GenerationMode generation = GLOBAL;\n+  ShenandoahGenerationType generation = GLOBAL;\n@@ -151,1 +151,1 @@\n-      generation = _degen_generation->generation_mode();\n+      generation = _degen_generation->type();\n@@ -463,1 +463,1 @@\n-  const ShenandoahHeap* heap, const GenerationMode generation, GCCause::Cause cause) {\n+        const ShenandoahHeap* heap, const ShenandoahGenerationType generation, GCCause::Cause cause) {\n@@ -685,1 +685,1 @@\n-    assert(generation->generation_mode() != OLD, \"Old GC takes a different control path\");\n+    assert(!generation->is_old(), \"Old GC takes a different control path\");\n@@ -756,1 +756,1 @@\n-  if (_degen_generation->generation_mode() == GLOBAL) {\n+  if (_degen_generation->is_global()) {\n@@ -760,1 +760,1 @@\n-    assert(_degen_generation->generation_mode() == YOUNG, \"Expected degenerated young cycle, if not global.\");\n+    assert(_degen_generation->is_young(), \"Expected degenerated young cycle, if not global.\");\n@@ -826,1 +826,1 @@\n-bool ShenandoahControlThread::request_concurrent_gc(GenerationMode generation) {\n+bool ShenandoahControlThread::request_concurrent_gc(ShenandoahGenerationType generation) {\n@@ -842,1 +842,1 @@\n-    log_info(gc)(\"Preempting old generation mark to allow %s GC.\", generation_name(generation));\n+    log_info(gc)(\"Preempting old generation mark to allow %s GC.\", shenandoah_generation_name(generation));\n@@ -862,1 +862,1 @@\n-bool ShenandoahControlThread::preempt_old_marking(GenerationMode generation) {\n+bool ShenandoahControlThread::preempt_old_marking(ShenandoahGenerationType generation) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  GenerationMode       _requested_generation;\n+  ShenandoahGenerationType _requested_generation;\n@@ -139,1 +139,1 @@\n-  bool preempt_old_marking(GenerationMode generation);\n+  bool preempt_old_marking(ShenandoahGenerationType generation);\n@@ -161,1 +161,1 @@\n-  bool request_concurrent_gc(GenerationMode generation);\n+  bool request_concurrent_gc(ShenandoahGenerationType generation);\n@@ -176,1 +176,1 @@\n-                                       const GenerationMode generation,\n+                                       const ShenandoahGenerationType generation,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    if (_generation->generation_mode() == GenerationMode::GLOBAL) {\n+    if (_generation->is_global()) {\n@@ -136,1 +136,1 @@\n-      heap->set_unload_classes((!heap->mode()->is_generational() || _generation->generation_mode() == GLOBAL) && _generation->heuristics()->can_unload_classes());\n+      heap->set_unload_classes((!heap->mode()->is_generational() || _generation->is_global()) && _generation->heuristics()->can_unload_classes());\n@@ -138,1 +138,1 @@\n-      if (heap->mode()->is_generational() && (_generation->generation_mode() == YOUNG || (_generation->generation_mode() == GLOBAL && ShenandoahVerify))) {\n+      if (heap->mode()->is_generational() && (_generation->is_young() || (_generation->is_global() && ShenandoahVerify))) {\n@@ -188,1 +188,1 @@\n-      if (heap->mode()->is_generational() && _generation->generation_mode() == GLOBAL) {\n+      if (heap->mode()->is_generational() && _generation->is_global()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahAffiliation.hpp\"\n@@ -75,1 +76,1 @@\n-  ShenandoahRegionAffiliation affiliation = ShenandoahRegionAffiliation::OLD_GENERATION;\n+  ShenandoahAffiliation affiliation = ShenandoahAffiliation::OLD_GENERATION;\n@@ -96,1 +97,1 @@\n-HeapWord* ShenandoahFreeSet::allocate_with_affiliation(ShenandoahRegionAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region) {\n+HeapWord* ShenandoahFreeSet::allocate_with_affiliation(ShenandoahAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region) {\n@@ -110,1 +111,1 @@\n-  log_debug(gc, free)(\"Could not allocate collector region with affiliation: %s for request \" PTR_FORMAT, affiliation_name(affiliation), p2i(&req));\n+  log_debug(gc, free)(\"Could not allocate collector region with affiliation: %s for request \" PTR_FORMAT, shenandoah_affiliation_name(affiliation), p2i(&req));\n@@ -132,1 +133,1 @@\n-      case ShenandoahRegionAffiliation::OLD_GENERATION:\n+      case ShenandoahAffiliation::OLD_GENERATION:\n@@ -139,1 +140,1 @@\n-      case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n+      case ShenandoahAffiliation::YOUNG_GENERATION:\n@@ -146,1 +147,1 @@\n-      case ShenandoahRegionAffiliation::FREE:\n+      case ShenandoahAffiliation::FREE:\n@@ -159,1 +160,1 @@\n-        if (is_mutator_free(idx) && (allow_new_region || r->affiliation() != ShenandoahRegionAffiliation::FREE)) {\n+        if (is_mutator_free(idx) && (allow_new_region || r->is_affiliated())) {\n@@ -193,1 +194,1 @@\n-        if (req.affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION) {\n+        if (req.is_old()) {\n@@ -254,1 +255,1 @@\n-  if (r->affiliation() == ShenandoahRegionAffiliation::FREE) {\n+  if (!r->is_affiliated()) {\n@@ -272,1 +273,1 @@\n-           affiliation_name(req.affiliation()), affiliation_name(r->affiliation()));\n+           req.affiliation_name(), r->affiliation_name());\n@@ -335,1 +336,1 @@\n-          assert(r->affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION, \"All PLABs reside in old-gen\");\n+          assert(r->is_old(), \"All PLABs reside in old-gen\");\n@@ -387,1 +388,1 @@\n-        assert(r->affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION, \"All PLABs reside in old-gen\");\n+        assert(r->is_old(), \"All PLABs reside in old-gen\");\n@@ -420,1 +421,1 @@\n-      if (r->affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION) {\n+      if (r->is_old()) {\n@@ -496,1 +497,1 @@\n-  assert(req.affiliation() == ShenandoahRegionAffiliation::YOUNG_GENERATION, \"Humongous regions always allocated in YOUNG\");\n+  assert(req.is_young(), \"Humongous regions always allocated in YOUNG\");\n@@ -577,1 +578,1 @@\n-                        p2i(r->bottom()), p2i(r->end()), p2i(ctx->top_bitmap(r)), affiliation_name(req.affiliation()));\n+                        p2i(r->bottom()), p2i(r->end()), p2i(ctx->top_bitmap(r)), req.affiliation_name());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  HeapWord* allocate_with_affiliation(ShenandoahRegionAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region);\n+  HeapWord* allocate_with_affiliation(ShenandoahAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -455,1 +455,1 @@\n-  ShenandoahRegionAffiliation    _from_affiliation;\n+  ShenandoahAffiliation          _from_affiliation;\n@@ -482,1 +482,1 @@\n-      if (_from_affiliation == ShenandoahRegionAffiliation::OLD_GENERATION) {\n+      if (_from_affiliation == ShenandoahAffiliation::OLD_GENERATION) {\n@@ -488,1 +488,1 @@\n-        assert(_from_affiliation == ShenandoahRegionAffiliation::YOUNG_GENERATION, \"from_region must be OLD or YOUNG\");\n+        assert(_from_affiliation == ShenandoahAffiliation::YOUNG_GENERATION, \"from_region must be OLD or YOUNG\");\n@@ -540,1 +540,1 @@\n-    if ((_from_affiliation == ShenandoahRegionAffiliation::YOUNG_GENERATION) &&\n+    if ((_from_affiliation == ShenandoahAffiliation::YOUNG_GENERATION) &&\n@@ -562,1 +562,1 @@\n-    if (promote_object || (_from_affiliation == ShenandoahRegionAffiliation::OLD_GENERATION)) {\n+    if (promote_object || (_from_affiliation == ShenandoahAffiliation::OLD_GENERATION)) {\n@@ -597,1 +597,1 @@\n-      assert(_from_affiliation == ShenandoahRegionAffiliation::YOUNG_GENERATION,\n+      assert(_from_affiliation == ShenandoahAffiliation::YOUNG_GENERATION,\n@@ -753,1 +753,1 @@\n-                    worker_id, affiliation_name(from_region->affiliation()),\n+                    worker_id, from_region->affiliation_name(),\n@@ -888,1 +888,1 @@\n-                 affiliation_name(r->affiliation()),  r->index());\n+                 r->affiliation_name(),  r->index());\n@@ -893,1 +893,1 @@\n-                 \"Humongous Start %s Region \" SIZE_FORMAT \" should have live\", affiliation_name(r->affiliation()),  r->index());\n+                 \"Humongous Start %s Region \" SIZE_FORMAT \" should have live\", r->affiliation_name(),  r->index());\n@@ -898,1 +898,1 @@\n-               \"Humongous Continuation %s Region \" SIZE_FORMAT \" should have live\", affiliation_name(r->affiliation()),  r->index());\n+               \"Humongous Continuation %s Region \" SIZE_FORMAT \" should have live\", r->affiliation_name(),  r->index());\n@@ -1393,1 +1393,1 @@\n-        ShenandoahRegionAffiliation original_affiliation = r->affiliation();\n+        ShenandoahAffiliation original_affiliation = r->affiliation();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -780,1 +780,1 @@\n-  assert(generation_mode() != OLD, \"Only YOUNG and GLOBAL GC perform evacuations\");\n+  assert(!is_old(), \"Only YOUNG and GLOBAL GC perform evacuations\");\n@@ -787,1 +787,1 @@\n-    if (generation_mode() == YOUNG) {\n+    if (is_young()) {\n@@ -845,1 +845,1 @@\n-    if (contains(r) && (r->affiliation() != FREE)) {\n+    if (contains(r) && r->is_affiliated()) {\n@@ -882,1 +882,1 @@\n-ShenandoahGeneration::ShenandoahGeneration(GenerationMode generation_mode,\n+ShenandoahGeneration::ShenandoahGeneration(ShenandoahGenerationType type,\n@@ -886,1 +886,1 @@\n-  _generation_mode(generation_mode),\n+  _type(type),\n@@ -918,1 +918,1 @@\n-  assert(generation_mode() == YOUNG, \"Should only scan remembered set for young generation.\");\n+  assert(is_young(), \"Should only scan remembered set for young generation.\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -38,0 +38,1 @@\n+class ShenandoahMode;\n@@ -41,1 +42,1 @@\n-  GenerationMode const _generation_mode;\n+  ShenandoahGenerationType const _type;\n@@ -73,1 +74,1 @@\n-  ShenandoahGeneration(GenerationMode generation_mode, uint max_workers, size_t max_capacity, size_t soft_max_capacity);\n+  ShenandoahGeneration(ShenandoahGenerationType type, uint max_workers, size_t max_capacity, size_t soft_max_capacity);\n@@ -76,3 +77,3 @@\n-  bool is_young() const  { return _generation_mode == YOUNG; }\n-  bool is_old() const    { return _generation_mode == OLD; }\n-  bool is_global() const { return _generation_mode == GLOBAL; }\n+  bool is_young() const  { return _type == YOUNG; }\n+  bool is_old() const    { return _type == OLD; }\n+  bool is_global() const { return _type == GLOBAL; }\n@@ -80,1 +81,1 @@\n-  inline GenerationMode generation_mode() const { return _generation_mode; }\n+  inline ShenandoahGenerationType type() const { return _type; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONTYPE_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONTYPE_HPP\n+\n+enum ShenandoahGenerationType {\n+    YOUNG,\n+    OLD,\n+    GLOBAL\n+};\n+\n+inline const char* shenandoah_generation_name(ShenandoahGenerationType mode) {\n+  switch (mode) {\n+    case GLOBAL:\n+      return \"Global\";\n+    case OLD:\n+      return \"Old\";\n+    case YOUNG:\n+      return \"Young\";\n+    default:\n+      ShouldNotReachHere();\n+      return \"?\";\n+  }\n+}\n+\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONTYPE_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationType.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -377,1 +377,1 @@\n-      _affiliations[i] = ShenandoahRegionAffiliation::FREE;\n+      _affiliations[i] = ShenandoahAffiliation::FREE;\n@@ -453,1 +453,1 @@\n-  switch (generation->generation_mode()) {\n+  switch (generation->type()) {\n@@ -464,1 +464,1 @@\n-  switch (generation->generation_mode()) {\n+  switch (generation->type()) {\n@@ -692,1 +692,1 @@\n-  return _gc_generation != nullptr && _gc_generation->generation_mode() == YOUNG;\n+  return _gc_generation != nullptr && _gc_generation->is_young();\n@@ -1297,1 +1297,1 @@\n-        if (req.affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION) {\n+        if (req.is_old()) {\n@@ -1342,1 +1342,1 @@\n-        if ((req.affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION) && req.is_gc_alloc() &&\n+        if (req.is_old() && req.is_gc_alloc() &&\n@@ -1854,2 +1854,1 @@\n-  if (mode()->is_generational() &&\n-      ((generation->generation_mode() == GLOBAL) || upgraded_to_full())) {\n+  if (mode()->is_generational() && (generation->is_global() || upgraded_to_full())) {\n@@ -2642,1 +2641,1 @@\n-        if (!_heap->mode()->is_generational() || (r->affiliation() == ShenandoahRegionAffiliation::YOUNG_GENERATION)) {\n+        if (!_heap->mode()->is_generational() || r->is_young()) {\n@@ -2645,2 +2644,2 @@\n-        } else if (r->affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION) {\n-          if (_heap->active_generation()->generation_mode() == GLOBAL) {\n+        } else if (r->is_old()) {\n+          if (_heap->active_generation()->is_global()) {\n@@ -2671,1 +2670,1 @@\n-                 affiliation_name(r->affiliation()), r->index());\n+                 r->affiliation_name(), r->index());\n@@ -2683,1 +2682,1 @@\n-    if (_heap->mode()->is_generational() && (_heap->active_generation()->generation_mode() != GLOBAL)) {\n+    if (_heap->mode()->is_generational() && !_heap->active_generation()->is_global()) {\n@@ -2696,1 +2695,1 @@\n-        if (r->is_active() && !r->is_cset() && (r->affiliation() == ShenandoahRegionAffiliation::OLD_GENERATION)) {\n+        if (r->is_active() && !r->is_cset() && r->is_old()) {\n@@ -3118,1 +3117,1 @@\n-  if (region->affiliation() != OLD_GENERATION) {\n+  if (!region->is_old()) {\n@@ -3126,1 +3125,1 @@\n-  if (region->affiliation() != YOUNG_GENERATION) {\n+  if (!region->is_young()) {\n@@ -3151,1 +3150,1 @@\n-  if (is_old_bitmap_stable() || active_generation()->generation_mode() == GLOBAL) {\n+  if (is_old_bitmap_stable() || active_generation()->is_global()) {\n@@ -3286,1 +3285,1 @@\n-  if (is_old_bitmap_stable() || active_generation()->generation_mode() == GLOBAL) {\n+  if (is_old_bitmap_stable() || active_generation()->is_global()) {\n@@ -3303,1 +3302,1 @@\n-ShenandoahGeneration* ShenandoahHeap::generation_for(ShenandoahRegionAffiliation affiliation) const {\n+ShenandoahGeneration* ShenandoahHeap::generation_for(ShenandoahAffiliation affiliation) const {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n@@ -39,0 +38,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -72,0 +72,1 @@\n+class ShenandoahMode;\n@@ -121,1 +122,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -274,1 +275,1 @@\n-  uint8_t* _affiliations;       \/\/ Holds array of enum ShenandoahRegionAffiliation, including FREE status in non-generational mode\n+  uint8_t* _affiliations;       \/\/ Holds array of enum ShenandoahAffiliation, including FREE status in non-generational mode\n@@ -550,1 +551,1 @@\n-  ShenandoahGeneration*      generation_for(ShenandoahRegionAffiliation affiliation) const;\n+  ShenandoahGeneration*      generation_for(ShenandoahAffiliation affiliation) const;\n@@ -615,2 +616,2 @@\n-  inline void assert_lock_for_affiliation(ShenandoahRegionAffiliation orig_affiliation,\n-                                          ShenandoahRegionAffiliation new_affiliation);\n+  inline void assert_lock_for_affiliation(ShenandoahAffiliation orig_affiliation,\n+                                          ShenandoahAffiliation new_affiliation);\n@@ -638,2 +639,2 @@\n-  inline ShenandoahRegionAffiliation region_affiliation(const ShenandoahHeapRegion* r);\n-  inline void set_affiliation(ShenandoahHeapRegion* r, ShenandoahRegionAffiliation new_affiliation);\n+  inline ShenandoahAffiliation region_affiliation(const ShenandoahHeapRegion* r);\n+  inline void set_affiliation(ShenandoahHeapRegion* r, ShenandoahAffiliation new_affiliation);\n@@ -641,2 +642,2 @@\n-  inline ShenandoahRegionAffiliation region_affiliation(size_t index);\n-  inline void set_affiliation(size_t index, ShenandoahRegionAffiliation new_affiliation);\n+  inline ShenandoahAffiliation region_affiliation(size_t index);\n+  inline void set_affiliation(size_t index, ShenandoahAffiliation new_affiliation);\n@@ -784,1 +785,1 @@\n-  inline oop try_evacuate_object(oop src, Thread* thread, ShenandoahHeapRegion* from_region, ShenandoahRegionAffiliation target_gen);\n+  inline oop try_evacuate_object(oop src, Thread* thread, ShenandoahHeapRegion* from_region, ShenandoahAffiliation target_gen);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-  ShenandoahRegionAffiliation target_gen = r->affiliation();\n+  ShenandoahAffiliation target_gen = r->affiliation();\n@@ -371,1 +371,1 @@\n-                                               ShenandoahRegionAffiliation target_gen) {\n+                                               ShenandoahAffiliation target_gen) {\n@@ -579,1 +579,1 @@\n-  case ShenandoahRegionAffiliation::FREE:\n+  case ShenandoahAffiliation::FREE:\n@@ -582,1 +582,1 @@\n-  case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n+  case ShenandoahAffiliation::YOUNG_GENERATION:\n@@ -585,1 +585,1 @@\n-  case ShenandoahRegionAffiliation::OLD_GENERATION:\n+  case ShenandoahAffiliation::OLD_GENERATION:\n@@ -595,1 +595,1 @@\n-  return is_in(p) && (_affiliations[heap_region_index_containing(p)] == ShenandoahRegionAffiliation::YOUNG_GENERATION);\n+  return is_in(p) && (_affiliations[heap_region_index_containing(p)] == ShenandoahAffiliation::YOUNG_GENERATION);\n@@ -599,1 +599,1 @@\n-  return is_in(p) && (_affiliations[heap_region_index_containing(p)] == ShenandoahRegionAffiliation::OLD_GENERATION);\n+  return is_in(p) && (_affiliations[heap_region_index_containing(p)] == ShenandoahAffiliation::OLD_GENERATION);\n@@ -606,2 +606,2 @@\n-inline ShenandoahRegionAffiliation ShenandoahHeap::region_affiliation(const ShenandoahHeapRegion *r) {\n-  return (ShenandoahRegionAffiliation) _affiliations[r->index()];\n+inline ShenandoahAffiliation ShenandoahHeap::region_affiliation(const ShenandoahHeapRegion *r) {\n+  return (ShenandoahAffiliation) _affiliations[r->index()];\n@@ -610,2 +610,2 @@\n-inline void ShenandoahHeap::assert_lock_for_affiliation(ShenandoahRegionAffiliation orig_affiliation,\n-                                                        ShenandoahRegionAffiliation new_affiliation) {\n+inline void ShenandoahHeap::assert_lock_for_affiliation(ShenandoahAffiliation orig_affiliation,\n+                                                        ShenandoahAffiliation new_affiliation) {\n@@ -626,1 +626,1 @@\n-  if ((orig_affiliation == ShenandoahRegionAffiliation::FREE) || (new_affiliation == ShenandoahRegionAffiliation::FREE)) {\n+  if ((orig_affiliation == ShenandoahAffiliation::FREE) || (new_affiliation == ShenandoahAffiliation::FREE)) {\n@@ -632,1 +632,1 @@\n-inline void ShenandoahHeap::set_affiliation(ShenandoahHeapRegion* r, ShenandoahRegionAffiliation new_affiliation) {\n+inline void ShenandoahHeap::set_affiliation(ShenandoahHeapRegion* r, ShenandoahAffiliation new_affiliation) {\n@@ -639,2 +639,2 @@\n-inline ShenandoahRegionAffiliation ShenandoahHeap::region_affiliation(size_t index) {\n-  return (ShenandoahRegionAffiliation) _affiliations[index];\n+inline ShenandoahAffiliation ShenandoahHeap::region_affiliation(size_t index) {\n+  return (ShenandoahAffiliation) _affiliations[index];\n@@ -643,1 +643,1 @@\n-inline void ShenandoahHeap::set_affiliation(size_t index, ShenandoahRegionAffiliation new_affiliation) {\n+inline void ShenandoahHeap::set_affiliation(size_t index, ShenandoahAffiliation new_affiliation) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-void ShenandoahHeapRegion::make_regular_allocation(ShenandoahRegionAffiliation affiliation) {\n+void ShenandoahHeapRegion::make_regular_allocation(ShenandoahAffiliation affiliation) {\n@@ -175,1 +175,1 @@\n-void ShenandoahHeapRegion::make_humongous_start_bypass(ShenandoahRegionAffiliation affiliation) {\n+void ShenandoahHeapRegion::make_humongous_start_bypass(ShenandoahAffiliation affiliation) {\n@@ -206,1 +206,1 @@\n-void ShenandoahHeapRegion::make_humongous_cont_bypass(ShenandoahRegionAffiliation affiliation) {\n+void ShenandoahHeapRegion::make_humongous_cont_bypass(ShenandoahAffiliation affiliation) {\n@@ -251,1 +251,1 @@\n-      assert(affiliation() != FREE, \"Pinned region should not be FREE\");\n+      assert(is_affiliated(), \"Pinned region should be affiliated\");\n@@ -413,13 +413,1 @@\n-  switch (ShenandoahHeap::heap()->region_affiliation(this)) {\n-    case ShenandoahRegionAffiliation::FREE:\n-      st->print(\"|F\");\n-      break;\n-    case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n-      st->print(\"|Y\");\n-      break;\n-    case ShenandoahRegionAffiliation::OLD_GENERATION:\n-      st->print(\"|O\");\n-      break;\n-    default:\n-      ShouldNotReachHere();\n-  }\n+  st->print(\"|%s\", shenandoah_affiliation_code(affiliation()));\n@@ -938,1 +926,1 @@\n-void ShenandoahHeapRegion::set_affiliation(ShenandoahRegionAffiliation new_affiliation) {\n+void ShenandoahHeapRegion::set_affiliation(ShenandoahAffiliation new_affiliation) {\n@@ -941,1 +929,1 @@\n-  ShenandoahRegionAffiliation region_affiliation = heap->region_affiliation(this);\n+  ShenandoahAffiliation region_affiliation = heap->region_affiliation(this);\n@@ -946,1 +934,1 @@\n-                  index(), affiliation_name(region_affiliation), affiliation_name(new_affiliation),\n+                  index(), shenandoah_affiliation_name(region_affiliation), shenandoah_affiliation_name(new_affiliation),\n@@ -973,1 +961,1 @@\n-    index(), affiliation_name(region_affiliation), affiliation_name(new_affiliation));\n+    index(), shenandoah_affiliation_name(region_affiliation), shenandoah_affiliation_name(new_affiliation));\n@@ -975,1 +963,1 @@\n-  if (region_affiliation == ShenandoahRegionAffiliation::YOUNG_GENERATION) {\n+  if (region_affiliation == ShenandoahAffiliation::YOUNG_GENERATION) {\n@@ -977,1 +965,1 @@\n-  } else if (region_affiliation == ShenandoahRegionAffiliation::OLD_GENERATION) {\n+  } else if (region_affiliation == ShenandoahAffiliation::OLD_GENERATION) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":11,"deletions":23,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahAffiliation.hpp\"\n@@ -172,1 +173,1 @@\n-  void make_regular_allocation(ShenandoahRegionAffiliation affiliation);\n+  void make_regular_allocation(ShenandoahAffiliation affiliation);\n@@ -177,2 +178,2 @@\n-  void make_humongous_start_bypass(ShenandoahRegionAffiliation affiliation);\n-  void make_humongous_cont_bypass(ShenandoahRegionAffiliation affiliation);\n+  void make_humongous_start_bypass(ShenandoahAffiliation affiliation);\n+  void make_humongous_cont_bypass(ShenandoahAffiliation affiliation);\n@@ -205,0 +206,1 @@\n+  inline bool is_affiliated() const;\n@@ -448,1 +450,2 @@\n-  inline ShenandoahRegionAffiliation affiliation() const;\n+  inline ShenandoahAffiliation affiliation() const;\n+  inline const char* affiliation_name() const;\n@@ -450,1 +453,1 @@\n-  void set_affiliation(ShenandoahRegionAffiliation new_affiliation);\n+  void set_affiliation(ShenandoahAffiliation new_affiliation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-         affiliation_name(affiliation()), index(), live_bytes, used_bytes, s * HeapWordSize);\n+         affiliation_name(), index(), live_bytes, used_bytes, s * HeapWordSize);\n@@ -210,1 +210,1 @@\n-inline ShenandoahRegionAffiliation ShenandoahHeapRegion::affiliation() const {\n+inline ShenandoahAffiliation ShenandoahHeapRegion::affiliation() const {\n@@ -214,0 +214,4 @@\n+inline const char* ShenandoahHeapRegion::affiliation_name() const {\n+  return shenandoah_affiliation_name(affiliation());\n+}\n+\n@@ -227,1 +231,1 @@\n-  return ShenandoahHeap::heap()->region_affiliation(this) == YOUNG_GENERATION;\n+  return affiliation() == YOUNG_GENERATION;\n@@ -231,1 +235,5 @@\n-  return ShenandoahHeap::heap()->region_affiliation(this) == OLD_GENERATION;\n+  return affiliation() == OLD_GENERATION;\n+}\n+\n+inline bool ShenandoahHeapRegion::is_affiliated() const {\n+  return affiliation() != FREE;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  switch (generation->generation_mode()) {\n+  switch (generation->type()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-template <GenerationMode GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+template <ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -91,1 +91,1 @@\n-void ShenandoahMark::mark_loop(GenerationMode generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp, StringDedup::Requests* const req) {\n+void ShenandoahMark::mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp, StringDedup::Requests* const req) {\n@@ -110,2 +110,2 @@\n-void ShenandoahMark::mark_loop(GenerationMode generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-               bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n+void ShenandoahMark::mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+                               bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n@@ -139,1 +139,1 @@\n-template <class T, GenerationMode GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+template <class T, ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -148,1 +148,1 @@\n-  assert(heap->active_generation()->generation_mode() == GENERATION, \"Sanity\");\n+  assert(heap->active_generation()->type() == GENERATION, \"Sanity\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  template<class T, GenerationMode GENERATION>\n+  template<class T, ShenandoahGenerationType GENERATION>\n@@ -79,1 +79,1 @@\n-  template <class T, GenerationMode GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+  template <class T, ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -82,1 +82,1 @@\n-  template <GenerationMode GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+  template <ShenandoahGenerationType GENERATION, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n@@ -85,1 +85,1 @@\n-  template <GenerationMode GENERATION>\n+  template <ShenandoahGenerationType GENERATION>\n@@ -96,1 +96,1 @@\n-  void mark_loop(GenerationMode generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+  void mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n@@ -99,1 +99,1 @@\n-  void mark_loop(GenerationMode generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n+  void mark_loop(ShenandoahGenerationType generation, uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    assert(region->affiliation() != FREE, \"Do not count live data within Free Regular Region \" SIZE_FORMAT, region_idx);\n+    assert(region->is_affiliated(), \"Do not count live data within Free Regular Region \" SIZE_FORMAT, region_idx);\n@@ -133,1 +133,1 @@\n-    assert(region->affiliation() != FREE, \"Do not count live data within FREE Humongous Start Region \" SIZE_FORMAT, region_idx);\n+    assert(region->is_affiliated(), \"Do not count live data within FREE Humongous Start Region \" SIZE_FORMAT, region_idx);\n@@ -137,1 +137,1 @@\n-      assert(chain_reg->affiliation() != FREE, \"Do not count live data within FREE Humongous Continuation Region \" SIZE_FORMAT, i);\n+      assert(chain_reg->is_affiliated(), \"Do not count live data within FREE Humongous Continuation Region \" SIZE_FORMAT, i);\n@@ -240,1 +240,1 @@\n-template <GenerationMode GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -265,1 +265,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -278,1 +278,1 @@\n-template<class T, GenerationMode GENERATION>\n+template<class T, ShenandoahGenerationType GENERATION>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    if ((r->affiliation() != FREE) && heap->is_bitmap_slice_committed(r) && !is_bitmap_clear_range(r->bottom(), r->end())) {\n+    if (r->is_affiliated() && heap->is_bitmap_slice_committed(r) && !is_bitmap_clear_range(r->bottom(), r->end())) {\n@@ -86,1 +86,1 @@\n-                affiliation_name(r->affiliation()), r->index(), p2i(top_bitmap));\n+                r->affiliation_name(), r->index(), p2i(top_bitmap));\n@@ -88,1 +88,1 @@\n-  if (r->affiliation() != FREE) {\n+  if (r->is_affiliated()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  if (r->affiliation() != FREE) {\n+  if (r->is_affiliated()) {\n@@ -94,1 +94,1 @@\n-                  affiliation_name(r->affiliation()), idx, (unsigned long long) old_tams, (unsigned long long) new_tams);\n+                  r->affiliation_name(), idx, (unsigned long long) old_tams, (unsigned long long) new_tams);\n@@ -98,1 +98,1 @@\n-                    affiliation_name(r->affiliation()), idx);\n+                    r->affiliation_name(), idx);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-  if (from->generation_mode() == YOUNG) {\n+  if (from->is_young()) {\n@@ -282,1 +282,1 @@\n-  assert(from->generation_mode() == YOUNG, \"Expect to transfer from young\");\n+  assert(from->is_young(), \"Expect to transfer from young\");\n@@ -297,1 +297,1 @@\n-  assert(to->generation_mode() == YOUNG, \"Can only transfer between young and old.\");\n+  assert(to->is_young(), \"Can only transfer between young and old.\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    assert(_mark.generation()->generation_mode() == OLD, \"Generation of Old-Gen GC should be OLD\");\n+    assert(_mark.generation()->is_old(), \"Generation of Old-Gen GC should be OLD\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,2 @@\n-  return region->affiliation() != YOUNG_GENERATION;\n+  \/\/ TODO: Should this be region->is_old() instead?\n+  return !region->is_young();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  template <class T, GenerationMode GENERATION>\n+  template <class T, ShenandoahGenerationType GENERATION>\n@@ -75,1 +75,1 @@\n-  template <class T, GenerationMode GENERATION>\n+  template <class T, ShenandoahGenerationType GENERATION>\n@@ -86,1 +86,1 @@\n-template <GenerationMode GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -100,1 +100,1 @@\n-template <GenerationMode GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-template<class T, GenerationMode GENERATION>\n+template<class T, ShenandoahGenerationType GENERATION>\n@@ -39,1 +39,1 @@\n-template<class T, GenerationMode GENERATION>\n+template<class T, ShenandoahGenerationType GENERATION>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n@@ -391,1 +390,1 @@\n-          p2i(reference), reference_type_name(type), affiliation_name(reference));\n+          p2i(reference), reference_type_name(type), ShenandoahHeap::heap()->heap_region_containing(reference)->affiliation_name());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -57,1 +57,1 @@\n-template<GenerationMode GENERATION>\n+template<ShenandoahGenerationType GENERATION>\n@@ -63,1 +63,1 @@\n-template <GenerationMode GENERATION>\n+template <ShenandoahGenerationType GENERATION>\n@@ -120,1 +120,1 @@\n-    if (_generation->generation_mode() == YOUNG) {\n+    if (_generation->is_young()) {\n@@ -141,1 +141,1 @@\n-  switch (_generation->generation_mode()) {\n+  switch (_generation->type()) {\n@@ -163,1 +163,1 @@\n-  mark_loop(_generation->generation_mode(),\n+  mark_loop(_generation->type(),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    if (region->affiliation() == OLD_GENERATION) {\n+    if (region->is_old()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  return region->affiliation() != OLD_GENERATION;\n+  return !region->is_old();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}