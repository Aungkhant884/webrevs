{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahLogFileOutput.hpp\"\n@@ -35,0 +36,1 @@\n+#include \"utilities\/defaultStream.hpp\"\n@@ -37,1 +39,1 @@\n-  _last_sample_millis(0)\n+  _last_sample_millis(0), _log_file(nullptr)\n@@ -46,1 +48,1 @@\n-    strcpy(_name_space, cns);\n+    strcpy(_name_space, cns); \/\/ copy cns into _name_space\n@@ -62,0 +64,1 @@\n+    \/\/ Initializing performance data resources for each region\n@@ -71,0 +74,5 @@\n+\n+    if (ShenandoahLogRegionSampling) {\n+      _log_file = new ShenandoahLogFileOutput(ShenandoahRegionSamplingFile, _timestamp->get_value());\n+      _log_file->initialize(tty);\n+    }\n@@ -76,0 +84,1 @@\n+  if (_log_file != NULL) FREE_C_HEAP_OBJ(_log_file);\n@@ -83,1 +92,1 @@\n-            Atomic::cmpxchg(&_last_sample_millis, last, current) == last) {\n+        Atomic::cmpxchg(&_last_sample_millis, last, current) == last) {\n@@ -111,0 +120,5 @@\n+\n+        \/\/ If logging enabled, dump current region snapshot to log file\n+        if (ShenandoahLogRegionSampling && _log_file != NULL) {\n+          _log_file->write_snapshot(_regions_data, _timestamp, _status, num_regions, rs >> 10);\n+        }\n@@ -160,1 +174,1 @@\n-      generation->name(), phase, BOOL_TO_STR(heap->is_concurrent_old_mark_in_progress()), status);\n+                          generation->name(), phase, BOOL_TO_STR(heap->is_concurrent_old_mark_in_progress()), status);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"logging\/logFileStreamOutput.hpp\"\n+#include \"gc\/shenandoah\/shenandoahLogFileOutput.hpp\"\n@@ -89,0 +91,2 @@\n+  uint _count = 0;\n+  ShenandoahLogFileOutput* _log_file;\n@@ -96,0 +100,1 @@\n+\n@@ -99,0 +104,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,216 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"jvm.h\"\n+#include \"logging\/logConfiguration.hpp\"\n+#include \"logging\/logFileStreamOutput.hpp\"\n+#include \"runtime\/arguments.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n+#include \"runtime\/perfData.inline.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/defaultStream.hpp\"\n+\n+#include \"gc\/shenandoah\/shenandoahLogFileOutput.hpp\"\n+\n+const char* const ShenandoahLogFileOutput::Prefix = \"file=\";\n+const char* const ShenandoahLogFileOutput::FileOpenMode = \"w+\";\n+const char* const ShenandoahLogFileOutput::PidFilenamePlaceholder = \"%p\";\n+const char* const ShenandoahLogFileOutput::TimestampFilenamePlaceholder = \"%t\";\n+const char* const ShenandoahLogFileOutput::TimestampFormat = \"%Y-%m-%d_%H-%M-%S\";\n+char        ShenandoahLogFileOutput::_pid_str[PidBufferSize];\n+char        ShenandoahLogFileOutput::_vm_start_time_str[StartTimeBufferSize];\n+\n+#define WRITE_LOG_WITH_RESULT_CHECK(op, total)                \\\n+{                                                             \\\n+  int result = op;                                            \\\n+  if (result < 0) {                                           \\\n+    if (!_write_error_is_shown) {                             \\\n+      jio_fprintf(defaultStream::error_stream(),              \\\n+                  \"Could not write log: %s\\n\", name());       \\\n+      jio_fprintf(_stream, \"\\nERROR: Could not write log\\n\"); \\\n+      _write_error_is_shown = true;                           \\\n+      return -1;                                              \\\n+    }                                                         \\\n+  }                                                           \\\n+  total += result;                                            \\\n+}\n+\n+ShenandoahLogFileOutput::ShenandoahLogFileOutput(const char* name, jlong vm_start_time)\n+  : _name(os::strdup_check_oom(name, mtLogging)), _file_name(NULL), _stream(NULL) {\n+  set_file_name_parameters(vm_start_time);\n+  _file_name = make_file_name(name, _pid_str, _vm_start_time_str);\n+}\n+\n+ShenandoahLogFileOutput::~ShenandoahLogFileOutput() {\n+  if (_stream != NULL) {\n+    if (fclose(_stream) != 0) {\n+      jio_fprintf(defaultStream::error_stream(), \"Could not close log file '%s' (%s).\\n\",\n+                  _file_name, os::strerror(errno));\n+    }\n+  }\n+  os::free(_file_name);\n+  os::free(const_cast<char*>(_name));\n+}\n+\n+bool ShenandoahLogFileOutput::flush() {\n+  bool result = true;\n+  if (fflush(_stream) != 0) {\n+    if (!_write_error_is_shown) {\n+      jio_fprintf(defaultStream::error_stream(),\n+                  \"Could not flush log: %s (%s (%d))\\n\", name(), os::strerror(errno), errno);\n+      jio_fprintf(_stream, \"\\nERROR: Could not flush log (%d)\\n\", errno);\n+      _write_error_is_shown = true;\n+    }\n+    result = false;\n+  }\n+  return result;\n+}\n+\n+void ShenandoahLogFileOutput::initialize(outputStream* errstream) {\n+  _stream = os::fopen(_file_name, ShenandoahLogFileOutput::FileOpenMode);\n+  if (_stream == NULL) {\n+    errstream->print_cr(\"Error opening log file '%s': %s\", _file_name, os::strerror(errno));\n+    _file_name = make_file_name(\".\/shenandoahSnapshots_pid%p.log\", _pid_str, _vm_start_time_str);\n+    _stream = os::fopen(_file_name, ShenandoahLogFileOutput::FileOpenMode);\n+    errstream->print_cr(\"Writing to default log file: %s\", _file_name);\n+  }\n+}\n+\n+int ShenandoahLogFileOutput::write_snapshot(PerfLongVariable** regions,\n+                                            PerfLongVariable* ts,\n+                                            PerfLongVariable* status,\n+                                            size_t num_regions,\n+                                            size_t rs) {\n+  int written = 0;\n+  FileLocker flocker(_stream);\n+  WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%lli %lli %u %u\\n\",\n+                                          ts->get_value(),\n+                                          status->get_value(),\n+                                          num_regions,\n+                                          rs),written);\n+  if (num_regions > 0) {\n+    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%lli\", regions[0]->get_value()), written);\n+  }\n+  for (uint i = 1; i < num_regions; ++i) {\n+    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" %lli\", regions[i]->get_value()), written);\n+  }\n+  jio_fprintf(_stream, \"\\n\");\n+  return flush() ? written : -1;\n+}\n+\n+void ShenandoahLogFileOutput::set_file_name_parameters(jlong vm_start_time) {\n+  int res = jio_snprintf(_pid_str, sizeof(_pid_str), \"%d\", os::current_process_id());\n+  assert(res > 0, \"PID buffer too small\");\n+\n+  struct tm local_time;\n+  time_t utc_time = vm_start_time \/ 1000;\n+  os::localtime_pd(&utc_time, &local_time);\n+  res = (int)strftime(_vm_start_time_str, sizeof(_vm_start_time_str), TimestampFormat, &local_time);\n+  assert(res > 0, \"VM start time buffer too small.\");\n+}\n+\n+char* ShenandoahLogFileOutput::make_file_name(const char* file_name,\n+                                              const char* pid_string,\n+                                              const char* timestamp_string) {\n+  char* result = NULL;\n+\n+  \/\/ Lets start finding out if we have any %d and\/or %t in the name.\n+  \/\/ We will only replace the first occurrence of any placeholder\n+  const char* pid = strstr(file_name, PidFilenamePlaceholder);\n+  const char* timestamp = strstr(file_name, TimestampFilenamePlaceholder);\n+\n+  if (pid == NULL && timestamp == NULL) {\n+    \/\/ We found no place-holders, return the simple filename\n+    return os::strdup_check_oom(file_name, mtLogging);\n+  }\n+\n+  \/\/ At least one of the place-holders were found in the file_name\n+  const char* first = \"\";\n+  size_t first_pos = SIZE_MAX;\n+  size_t first_replace_len = 0;\n+\n+  const char* second = \"\";\n+  size_t second_pos = SIZE_MAX;\n+  size_t second_replace_len = 0;\n+\n+  \/\/ If we found a %p, then setup our variables accordingly\n+  if (pid != NULL) {\n+    if (timestamp == NULL || pid < timestamp) {\n+      first = pid_string;\n+      first_pos = pid - file_name;\n+      first_replace_len = strlen(PidFilenamePlaceholder);\n+    } else {\n+      second = pid_string;\n+      second_pos = pid - file_name;\n+      second_replace_len = strlen(PidFilenamePlaceholder);\n+    }\n+  }\n+\n+  if (timestamp != NULL) {\n+    if (pid == NULL || timestamp < pid) {\n+      first = timestamp_string;\n+      first_pos = timestamp - file_name;\n+      first_replace_len = strlen(TimestampFilenamePlaceholder);\n+    } else {\n+      second = timestamp_string;\n+      second_pos = timestamp - file_name;\n+      second_replace_len = strlen(TimestampFilenamePlaceholder);\n+    }\n+  }\n+\n+  size_t first_len = strlen(first);\n+  size_t second_len = strlen(second);\n+\n+  \/\/ Allocate the new buffer, size it to hold all we want to put in there +1.\n+  size_t result_len =  strlen(file_name) + first_len - first_replace_len + second_len - second_replace_len;\n+  result = NEW_C_HEAP_ARRAY(char, result_len + 1, mtLogging);\n+\n+  \/\/ Assemble the strings\n+  size_t file_name_pos = 0;\n+  size_t i = 0;\n+  while (i < result_len) {\n+    if (file_name_pos == first_pos) {\n+      \/\/ We are in the range of the first placeholder\n+      strcpy(result + i, first);\n+      \/\/ Bump output buffer position with length of replacing string\n+      i += first_len;\n+      \/\/ Bump source buffer position to skip placeholder\n+      file_name_pos += first_replace_len;\n+    } else if (file_name_pos == second_pos) {\n+      \/\/ We are in the range of the second placeholder\n+      strcpy(result + i, second);\n+      i += second_len;\n+      file_name_pos += second_replace_len;\n+    } else {\n+      \/\/ Else, copy char by char of the original file\n+      result[i] = file_name[file_name_pos++];\n+      i++;\n+    }\n+  }\n+  \/\/ Add terminating char\n+  result[result_len] = '\\0';\n+  return result;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLogFileOutput.cpp","additions":216,"deletions":0,"binary":false,"changes":216,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2013, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHLOGFILEOUTPUT_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHLOGFILEOUTPUT_HPP\n+\n+#include \"logging\/logFileStreamOutput.hpp\"\n+#include \"logging\/logFileOutput.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"runtime\/perfData.inline.hpp\"\n+\n+\/\/ Log file output to capture Shenandoah GC data.\n+\n+class ShenandoahLogFileOutput : public CHeapObj<mtClass> {\n+private:\n+    static const char* const FileOpenMode;\n+    static const char* const PidFilenamePlaceholder;\n+    static const char* const TimestampFilenamePlaceholder;\n+    static const char* const TimestampFormat;\n+    static const size_t StartTimeBufferSize = 20;\n+    static const size_t PidBufferSize = 21;\n+    static char         _pid_str[PidBufferSize];\n+    static char         _vm_start_time_str[StartTimeBufferSize];\n+\n+    const char* _name;\n+    char* _file_name;\n+    FILE* _stream;\n+\n+    bool _write_error_is_shown;\n+\n+    bool parse_options(const char* options, outputStream* errstream);\n+    char *make_file_name(const char* file_name, const char* pid_string, const char* timestamp_string);\n+\n+    bool flush();\n+\n+public:\n+    ShenandoahLogFileOutput(const char *name, jlong vm_start_time);\n+    ~ShenandoahLogFileOutput();\n+\n+    void initialize(outputStream* errstream);\n+\n+    int write_snapshot(PerfLongVariable** regions,\n+                       PerfLongVariable* ts,\n+                       PerfLongVariable* status,\n+                       size_t num_regions,\n+                       size_t rs);\n+\n+    const char* name() const {\n+      return _name;\n+    }\n+\n+    static const char* const Prefix;\n+    static void set_file_name_parameters(jlong start_time);\n+};\n+#endif \/\/SHARE_GC_SHENANDOAH_SHENANDOAHLOGFILEOUTPUT_HPP\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLogFileOutput.hpp","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -210,0 +210,9 @@\n+  product(bool, ShenandoahLogRegionSampling, false,                         \\\n+          \"Save region sampling stream to ShenandoahRegionSamplingFile\")    \\\n+                                                                            \\\n+  product(ccstr, ShenandoahRegionSamplingFile,                              \\\n+          \".\/shenandoahSnapshots_pid%p.log\",                                \\\n+          \"If ShenandoahLogRegionSampling is on, save sampling data stream \"\\\n+          \"to this file [default: .\/shenandoahSnapshots_pid%p.log] \"        \\\n+          \"(%p replaced with pid)\")                                         \\\n+                                                                            \\\n@@ -435,2 +444,1 @@\n-\n-\/\/ end of GC_SHENANDOAH_FLAGS\n+ \/\/ end of GC_SHENANDOAH_FLAGS\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -79,14 +79,0 @@\n-class FileLocker : public StackObj {\n-private:\n-  FILE *_file;\n-\n-public:\n-  FileLocker(FILE *file) : _file(file) {\n-    os::flockfile(_file);\n-  }\n-\n-  ~FileLocker() {\n-    os::funlockfile(_file);\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -101,0 +101,14 @@\n+class FileLocker : public StackObj {\n+private:\n+    FILE *_file;\n+\n+public:\n+    FileLocker(FILE *file) : _file(file) {\n+      os::flockfile(_file);\n+    }\n+\n+    ~FileLocker() {\n+      os::funlockfile(_file);\n+    }\n+};\n+\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2017, 2018, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test id=adaptive\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+ShenandoahRegionSampling -XX:+ShenandoahRegionSampling\n+ *      -XX:+ShenandoahLogRegionSampling -XX:ShenandoahRegionSamplingFile=region-snapshots-%p.log\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive\n+ *      TestRegionSamplingLogging\n+ *\/\n+\n+import java.io.File;\n+import java.util.Arrays;\n+\n+public class TestRegionSamplingLogging {\n+\n+    static final long TARGET_MB = Long.getLong(\"target\", 2_000); \/\/ 2 Gb allocation\n+\n+    static volatile Object sink;\n+\n+    public static void main(String[] args) throws Exception {\n+        long count = TARGET_MB * 1024 * 1024 \/ 16;\n+        for (long c = 0; c < count; c++) {\n+            sink = new Object();\n+        }\n+\n+        File directory = new File(\".\");\n+        File[] files = directory.listFiles((dir, name) -> name.startsWith(\"region-snapshots\") && name.endsWith(\".log\"));\n+        System.out.println(Arrays.toString(files));\n+        if (files == null || files.length == 0) {\n+            throw new IllegalStateException(\"Did not find expected snapshot log file.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRegionSamplingLogging.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}