{"files":[{"patch":"@@ -393,1 +393,0 @@\n-    __ membar(Assembler::StoreLoad);\n@@ -399,3 +398,0 @@\n-    \/\/ if (ct->scanned_concurrently()) {\n-    \/\/  __ membar(Assembler::StoreStore);\n-    \/\/ }\n@@ -650,3 +646,0 @@\n-  \/\/ if (ct->scanned_concurrently()) {\n-  \/\/   __ membar(__ StoreStore);\n-  \/\/ }\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -659,3 +659,0 @@\n-\/\/    if (ct->scanned_concurrently()) {\n-\/\/      __ membar(Assembler::StoreLoad);\n-\/\/    }\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -356,3 +356,0 @@\n-\/\/    if (ct->scanned_concurrently()) {\n-\/\/      __ membar_storeload();\n-\/\/    }\n@@ -367,3 +364,0 @@\n-\/\/    if (ct->scanned_concurrently()) {\n-\/\/      __ membar_storestore();\n-\/\/    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -525,4 +525,0 @@\n-\/\/    if (ct->scanned_concurrently()) {\n-\/\/      kit->insert_mem_bar(Op_MemBarVolatile, oop_store);\n-\/\/      __ sync_kit(kit);\n-\/\/    }\n@@ -541,6 +537,1 @@\n-\/\/  if(!ct->scanned_concurrently()) {\n-    __ store(__ ctrl(), card_adr, zero, T_BYTE, adr_type, MemNode::unordered);\n-\/\/  } else {\n-\/\/    \/\/ Specialized path for CM store barrier\n-\/\/    __ storeCM(__ ctrl(), card_adr, zero, oop_store, adr_idx, T_BYTE, adr_type);\n-\/\/  }\n+  __ store(__ ctrl(), card_adr, zero, T_BYTE, adr_type, MemNode::unordered);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -50,0 +50,3 @@\n+  \/\/ This helps most multi-core hardware hosts, enable by default\n+  SHENANDOAH_ERGO_ENABLE_FLAG(UseCondCardMark);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -199,6 +199,1 @@\n-    \/\/ if (card_table()->scanned_concurrently()) {\n-    \/\/   \/\/ Perform a releasing store if the card table is scanned concurrently\n-    \/\/   Atomic::release_store(byte, CardTable::dirty_card_val());\n-    \/\/ } else {\n-      *byte = CardTable::dirty_card_val();\n-    \/\/ }\n+    *byte = CardTable::dirty_card_val();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}