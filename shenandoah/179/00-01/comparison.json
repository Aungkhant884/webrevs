{"files":[{"patch":"@@ -103,1 +103,1 @@\n-      if (_heap->old_generation()->used_regions_size() >= _heap->old_generation()->adjusted_capacity()) {\n+      if (_heap->old_generation()->adjusted_unaffiliated_regions() <= 0) {\n@@ -109,1 +109,1 @@\n-      if (_heap->young_generation()->used_regions_size() >= _heap->young_generation()->adjusted_capacity()) {\n+      if (_heap->young_generation()->adjusted_unaffiliated_regions() <= 0) {\n@@ -402,2 +402,1 @@\n-  size_t avail_young_regions = ((_heap->young_generation()->adjusted_capacity() - _heap->young_generation()->used_regions_size())\n-                                \/ ShenandoahHeapRegion::region_size_bytes());\n+  size_t avail_young_regions = _heap->young_generation()->adjusted_unaffiliated_regions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -986,0 +986,4 @@\n+size_t ShenandoahGeneration::adjusted_unaffiliated_regions() {\n+  return (adjusted_capacity() - used_regions_size()) \/ ShenandoahHeapRegion::region_size_bytes();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,0 +100,4 @@\n+  \/\/ This is the number of FREE regions that are eligible to be affiliated with this generation according to the current\n+  \/\/ adjusted capacity.\n+  virtual size_t adjusted_unaffiliated_regions();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1017,29 +1017,22 @@\n-  size_t available_old_regions = ((old_generation->adjusted_capacity() - old_generation->used_regions_size()) \/\n-                                  ShenandoahHeapRegion::region_size_bytes());\n-\n-  if (spanned_regions <= available_old_regions) {\n-    log_debug(gc)(\"promoting humongous region \" SIZE_FORMAT \", spanning \" SIZE_FORMAT, index(), spanned_regions);\n-\n-    \/\/ Since this region may have served previously as OLD, it may hold obsolete object range info.\n-    heap->card_scan()->reset_object_range(bottom(), bottom() + spanned_regions * ShenandoahHeapRegion::region_size_words());\n-    \/\/ Since the humongous region holds only one object, no lock is necessary for this register_object() invocation.\n-    heap->card_scan()->register_object_wo_lock(bottom());\n-\n-    \/\/ For this region and each humongous continuation region spanned by this humongous object, change\n-    \/\/ affiliation to OLD_GENERATION and adjust the generation-use tallies.  The remnant of memory\n-    \/\/ in the last humongous region that is not spanned by obj is currently not used.\n-    for (size_t i = index(); i < index_limit; i++) {\n-      ShenandoahHeapRegion* r = heap->get_region(i);\n-      log_debug(gc)(\"promoting humongous region \" SIZE_FORMAT \", from \" PTR_FORMAT \" to \" PTR_FORMAT,\n-                    r->index(), p2i(r->bottom()), p2i(r->top()));\n-      \/\/ We mark the entire humongous object's range as dirty after loop terminates, so no need to dirty the range here\n-      r->set_affiliation(OLD_GENERATION);\n-      old_generation->increase_used(r->used());\n-      young_generation->decrease_used(r->used());\n-    }\n-    if (obj->is_typeArray()) {\n-      \/\/ Primitive arrays don't need to be scanned.  See above TODO question about requiring\n-      \/\/ region promotion at safepoint.\n-      log_debug(gc)(\"Clean cards for promoted humongous object (Region \" SIZE_FORMAT \") from \" PTR_FORMAT \" to \" PTR_FORMAT,\n-                    index(), p2i(bottom()), p2i(bottom() + obj->size()));\n-      heap->card_scan()->mark_range_as_clean(bottom(), obj->size());\n+\n+  {\n+    \/\/ We need to grab the heap lock in order to avoid a race when changing the affiliations of spanned_regions from\n+    \/\/ young to old.\n+    ShenandoahHeapLocker locker(heap->lock());\n+    size_t available_old_regions = old_generation->adjusted_unaffiliated_regions();\n+    if (spanned_regions <= available_old_regions) {\n+      log_debug(gc)(\"promoting humongous region \" SIZE_FORMAT \", spanning \" SIZE_FORMAT, index(), spanned_regions);\n+\n+      \/\/ For this region and each humongous continuation region spanned by this humongous object, change\n+      \/\/ affiliation to OLD_GENERATION and adjust the generation-use tallies.  The remnant of memory\n+      \/\/ in the last humongous region that is not spanned by obj is currently not used.\n+      for (size_t i = index(); i < index_limit; i++) {\n+        ShenandoahHeapRegion* r = heap->get_region(i);\n+        log_debug(gc)(\"promoting humongous region \" SIZE_FORMAT \", from \" PTR_FORMAT \" to \" PTR_FORMAT,\n+                      r->index(), p2i(r->bottom()), p2i(r->top()));\n+        \/\/ We mark the entire humongous object's range as dirty after loop terminates, so no need to dirty the range here\n+        r->set_affiliation(OLD_GENERATION);\n+        old_generation->increase_used(r->used());\n+        young_generation->decrease_used(r->used());\n+      }\n+      \/\/ Then fall through to finish the promotion after releasing the heap lock.\n@@ -1047,3 +1040,1 @@\n-      log_debug(gc)(\"Dirty cards for promoted humongous object (Region \" SIZE_FORMAT \") from \" PTR_FORMAT \" to \" PTR_FORMAT,\n-                    index(), p2i(bottom()), p2i(bottom() + obj->size()));\n-      heap->card_scan()->mark_range_as_dirty(bottom(), obj->size());\n+      return 0;\n@@ -1051,1 +1042,12 @@\n-    return index_limit - index();\n+  }\n+\n+  \/\/ Since this region may have served previously as OLD, it may hold obsolete object range info.\n+  heap->card_scan()->reset_object_range(bottom(), bottom() + spanned_regions * ShenandoahHeapRegion::region_size_words());\n+  \/\/ Since the humongous region holds only one object, no lock is necessary for this register_object() invocation.\n+  heap->card_scan()->register_object_wo_lock(bottom());\n+      \n+  if (obj->is_typeArray()) {\n+    \/\/ Primitive arrays don't need to be scanned.\n+    log_debug(gc)(\"Clean cards for promoted humongous object (Region \" SIZE_FORMAT \") from \" PTR_FORMAT \" to \" PTR_FORMAT,\n+                  index(), p2i(bottom()), p2i(bottom() + obj->size()));\n+    heap->card_scan()->mark_range_as_clean(bottom(), obj->size());\n@@ -1053,1 +1055,3 @@\n-    return 0;\n+    log_debug(gc)(\"Dirty cards for promoted humongous object (Region \" SIZE_FORMAT \") from \" PTR_FORMAT \" to \" PTR_FORMAT,\n+                  index(), p2i(bottom()), p2i(bottom() + obj->size()));\n+    heap->card_scan()->mark_range_as_dirty(bottom(), obj->size());\n@@ -1055,0 +1059,1 @@\n+  return index_limit - index();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":39,"deletions":34,"binary":false,"changes":73,"status":"modified"}]}