{"files":[{"patch":"@@ -85,0 +85,2 @@\n+\/\/ Copy the write-version of the card-table into the read-version, clearing the\n+\/\/ write-copy.\n@@ -93,3 +95,2 @@\n-    if (r->is_old()) {\n-      _scanner->merge_write_table(r->bottom(), ShenandoahHeapRegion::region_size_words());\n-    }\n+    assert(r->is_old(), \"Don't waste time doing this for non-old regions\");\n+    _scanner->merge_write_table(r->bottom(), ShenandoahHeapRegion::region_size_words());\n@@ -113,3 +114,2 @@\n-    if (region->is_old()) {\n-      _scanner->reset_remset(region->bottom(), ShenandoahHeapRegion::region_size_words());\n-    }\n+    assert(region->is_old(), \"Don't waste time doing this for non-old regions\");\n+    _scanner->reset_remset(region->bottom(), ShenandoahHeapRegion::region_size_words());\n@@ -204,4 +204,3 @@\n-\/\/ If a concurrent cycle fails _after_ the card table has been swapped we need to update the read card\n-\/\/ table with any writes that have occurred during the transition to the degenerated cycle. Without this,\n-\/\/ newly created objects which are only referenced by old objects could be lost when the remembered set\n-\/\/ is scanned during the degenerated mark.\n+\/\/ Copy the write-version of the card-table into the read-version, clearing the\n+\/\/ write-version. The work is done at a safepoint and in parallel by the GC\n+\/\/ worker threads.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -3343,2 +3343,2 @@\n-  \/\/ Visit young and free regions\n-  if (!region->is_old()) {\n+  \/\/ Visit young regions\n+  if (region->is_young()) {\n@@ -3351,2 +3351,2 @@\n-  \/\/ Visit old and free regions\n-  if (!region->is_young()) {\n+  \/\/ Visit old regions\n+  if (region->is_old()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}