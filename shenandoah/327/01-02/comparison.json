{"files":[{"patch":"@@ -112,1 +112,1 @@\n-  \/\/      application to allocate something. This is why we limit CSet to some fraction of\n+  \/\/      application allocate during concurrent GC. This is why we limit CSet to some fraction of\n@@ -143,0 +143,1 @@\n+  \/\/ Regions are sorted in terms of decreasing garbage\n@@ -150,0 +151,12 @@\n+      \/\/ TODO: This region has too much live data, so cannot be included in CSET.  It is still possible that some\n+      \/\/ other region that has less garbage would also have less live data (i.e. total usage is smaller) and so could\n+      \/\/ still be included in the CSET.  Change this to continue.\n+\n+#define KELVIN_PUZZLE\n+#ifdef KELVIN_PUZZLE\n+      if (cur_cset * 8 < max_cset * 7) {\n+        \/\/ we're less than 7\/8 of evac capacity.  why stop early?\n+        log_info(gc)(\"KELVIN: abandoning cset search after \" SIZE_FORMAT \" of \" SIZE_FORMAT \" regions.  Last region live: \" SIZE_FORMAT,\n+                     idx + 1, size, r->get_live_data_bytes());\n+      }\n+#endif\n@@ -159,0 +172,4 @@\n+#ifdef KELVIN_PUZZLE\n+  log_info(gc)(\"CSET constructed from \" SIZE_FORMAT \" candidates is full at \" SIZE_FORMAT \" of budgeted: \" SIZE_FORMAT\n+               \",  garbage: \" SIZE_FORMAT, size, cur_cset, max_cset, cur_garbage);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -214,0 +214,5 @@\n+#define KELVIN_FULL\n+#ifdef KELVIN_FULL\n+  log_info(gc)(\"ShenHeuristics::should_degen_cycle() has cycles_in_a_row: %u, Threshold: \" SIZE_FORMAT,\n+               _degenerated_cycles_in_a_row, (size_t) ShenandoahFullGCThreshold);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -163,0 +163,5 @@\n+#define KELVIN_FULL\n+#ifdef KELVIN_FULL\n+        log_info(gc)(\"Going to full because old_gen_evacuation_failed is %s, should_degen_is %s\\n\",\n+                     old_gen_evacuation_failed? \"true\": \"false\", heuristics->should_degenerate_cycle()? \"true\": \"false\");\n+#endif\n@@ -899,0 +904,4 @@\n+#define KELVIN_CONTROL\n+#ifdef KELVIN_CONTROL\n+  log_info(gc)(\"request_concurrent_gc(%s)\", shenandoah_generation_name(generation));\n+#endif\n@@ -910,0 +919,3 @@\n+#ifdef KELVIN_CONTROL\n+    log_info(gc)(\"request_concurrent_gc() returns true after waiting on _regulator_lock for _mode == none\");\n+#endif\n@@ -923,0 +935,3 @@\n+#ifdef KELVIN_CONTROL\n+    log_info(gc)(\"request_concurrent_gc() returns true after waiting on _regulator_lock for preempting old mark\");\n+#endif\n@@ -925,0 +940,3 @@\n+#ifdef KELVIN_CONTROL\n+  log_info(gc)(\"request_concurrent_gc() returns false because not ready to service request\");\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#undef KELVIN_TRACE\n+#define KELVIN_TRACE\n@@ -72,1 +72,0 @@\n-#undef KELVIN_TRACE\n@@ -97,1 +96,1 @@\n-#ifdef KELVIN_TRACE\n+#ifdef KELVIN_EXTERNAL_TRACE\n@@ -100,0 +99,8 @@\n+        \/\/ TODO: there may be a race that results in deadlock or livelock over the ShenandoahControlThread::_regulator_lock.\n+        \/\/ We need to DEBUG this.  Could it be that on rare occasion, the V() is performed before the P() operation, and\n+        \/\/ thus the P() operation never gets released?  In one 20 minute execution of an Extremem workload, the last\n+        \/\/ heuristic request was accepted at time 559.076s, and this was 2.261s after sleeping 1ms following the previous\n+        \/\/ invocation of regulator_sleep(), which occurred at time 557.979.  After this, no more heuristics requests were\n+        \/\/ accepted during the remaining 700s of execution.  Rather, we limped along, repeatedly ignoring heuristics requests\n+        \/\/ until we experienced allocation failures, at which point we would perform degen or full GCs.  \n+\n@@ -113,1 +120,1 @@\n-#ifdef KELVIN_TRACE\n+#ifdef KELVIN_EXTERNAL_TRACE\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}