{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n@@ -209,0 +210,3 @@\n+  if (strcmp(ShenandoahGCMode, \"generational\") == 0) {\n+    return new ShenandoahGenerationalHeap(new ShenandoahCollectorPolicy());\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahInitLogger.hpp\"\n+#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n+#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n+\n+#include \"logging\/log.hpp\"\n+\n+class ShenandoahGenerationalInitLogger : public ShenandoahInitLogger {\n+public:\n+  static void print() {\n+    ShenandoahGenerationalInitLogger logger;\n+    logger.print_all();\n+  }\n+\n+  void print_heap() override {\n+    ShenandoahInitLogger::print_heap();\n+\n+    ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n+\n+    ShenandoahYoungGeneration* young = heap->young_generation();\n+    log_info(gc, init)(\"Young Generation Soft Size: \" PROPERFMT, PROPERFMTARGS(young->soft_max_capacity()));\n+    log_info(gc, init)(\"Young Generation Max: \" PROPERFMT, PROPERFMTARGS(young->max_capacity()));\n+\n+    ShenandoahOldGeneration* old = heap->old_generation();\n+    log_info(gc, init)(\"Old Generation Soft Size: \" PROPERFMT, PROPERFMTARGS(old->soft_max_capacity()));\n+    log_info(gc, init)(\"Old Generation Max: \" PROPERFMT, PROPERFMTARGS(old->max_capacity()));\n+  }\n+\n+protected:\n+  void print_gc_specific() override {\n+    ShenandoahInitLogger::print_gc_specific();\n+\n+    ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n+    log_info(gc, init)(\"Young Heuristics: %s\", heap->young_generation()->heuristics()->name());\n+    log_info(gc, init)(\"Old Heuristics: %s\", heap->old_generation()->heuristics()->name());\n+  }\n+};\n+\n+ShenandoahGenerationalHeap* ShenandoahGenerationalHeap::heap() {\n+  CollectedHeap* heap = Universe::heap();\n+  return checked_cast<ShenandoahGenerationalHeap*>(heap);\n+}\n+\n+void ShenandoahGenerationalHeap::print_init_logger() const {\n+  ShenandoahGenerationalInitLogger logger;\n+  logger.print_all();\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP\n+\n+#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n+\n+class ShenandoahGenerationalHeap : public ShenandoahHeap {\n+public:\n+  explicit ShenandoahGenerationalHeap(ShenandoahCollectorPolicy* policy) : ShenandoahHeap(policy) {}\n+\n+  static ShenandoahGenerationalHeap* heap();\n+\n+  void print_init_logger() const override;\n+};\n+\n+#endif \/\/SHARE_GC_SHENANDOAH_SHENANDOAHGENERATIONALHEAP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -490,1 +490,1 @@\n-  ShenandoahInitLogger::print();\n+  print_init_logger();\n@@ -495,0 +495,4 @@\n+void ShenandoahHeap::print_init_logger() const {\n+  ShenandoahInitLogger::print();\n+}\n+\n@@ -729,0 +733,3 @@\n+ShenandoahHeuristics* ShenandoahHeap::heuristics() {\n+  return _global_generation->heuristics();\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+  ShenandoahHeuristics* heuristics();\n@@ -201,1 +202,1 @@\n-\n+  virtual void print_init_logger() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n-#include \"gc\/shenandoah\/shenandoahYoungGeneration.hpp\"\n@@ -35,1 +33,0 @@\n-#include \"runtime\/globals.hpp\"\n@@ -38,0 +35,5 @@\n+void ShenandoahInitLogger::print() {\n+  ShenandoahInitLogger init_log;\n+  init_log.print_all();\n+}\n+\n@@ -41,40 +43,4 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-\n-  log_info(gc, init)(\"Mode: %s\",\n-                     heap->mode()->name());\n-\n-  if (!heap->mode()->is_generational()) {\n-    log_info(gc, init)(\"Heuristics: %s\", heap->global_generation()->heuristics()->name());\n-  } else {\n-    log_info(gc, init)(\"Young Heuristics: %s\", heap->young_generation()->heuristics()->name());\n-    log_info(gc, init)(\"Young Generation Soft Size: \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(heap->young_generation()->soft_max_capacity()),\n-                       proper_unit_for_byte_size(heap->young_generation()->soft_max_capacity()));\n-    log_info(gc, init)(\"Young Generation Max: \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(heap->young_generation()->max_capacity()),\n-                       proper_unit_for_byte_size(heap->young_generation()->max_capacity()));\n-    log_info(gc, init)(\"Old Heuristics: %s\", heap->old_generation()->heuristics()->name());\n-    log_info(gc, init)(\"Old Generation Soft Size: \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(heap->old_generation()->soft_max_capacity()),\n-                       proper_unit_for_byte_size(heap->old_generation()->soft_max_capacity()));\n-    log_info(gc, init)(\"Old Generation Max: \" SIZE_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(heap->old_generation()->max_capacity()),\n-                       proper_unit_for_byte_size(heap->old_generation()->max_capacity()));\n-  }\n-\n-\n-\n-  log_info(gc, init)(\"Heap Region Count: \" SIZE_FORMAT,\n-                     ShenandoahHeapRegion::region_count());\n-\n-  log_info(gc, init)(\"Heap Region Size: \" SIZE_FORMAT \"%s\",\n-                     byte_size_in_exact_unit(ShenandoahHeapRegion::region_size_bytes()),\n-                     exact_unit_for_byte_size(ShenandoahHeapRegion::region_size_bytes()));\n-\n-  log_info(gc, init)(\"TLAB Size Max: \" SIZE_FORMAT \"%s\",\n-                     byte_size_in_exact_unit(ShenandoahHeapRegion::max_tlab_size_bytes()),\n-                     exact_unit_for_byte_size(ShenandoahHeapRegion::max_tlab_size_bytes()));\n-\n-  log_info(gc, init)(\"Humongous Object Threshold: \" SIZE_FORMAT \"%s\",\n-          byte_size_in_exact_unit(ShenandoahHeapRegion::humongous_threshold_bytes()),\n-          exact_unit_for_byte_size(ShenandoahHeapRegion::humongous_threshold_bytes()));\n+  log_info(gc, init)(\"Heap Region Count: \" SIZE_FORMAT, ShenandoahHeapRegion::region_count());\n+  log_info(gc, init)(\"Heap Region Size: \" PROPERFMT, PROPERFMTARGS(ShenandoahHeapRegion::region_size_bytes()));\n+  log_info(gc, init)(\"TLAB Size Max: \" PROPERFMT, PROPERFMTARGS(ShenandoahHeapRegion::max_tlab_size_bytes()));\n+  log_info(gc, init)(\"Humongous Object Threshold: \" PROPERFMT, PROPERFMTARGS(ShenandoahHeapRegion::humongous_threshold_bytes()));\n@@ -83,3 +49,6 @@\n-void ShenandoahInitLogger::print() {\n-  ShenandoahInitLogger init_log;\n-  init_log.print_all();\n+void ShenandoahInitLogger::print_gc_specific() {\n+  GCInitLogger::print_gc_specific();\n+\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  log_info(gc, init)(\"Mode: %s\", heap->mode()->name());\n+  log_info(gc, init)(\"Heuristics: %s\", heap->heuristics()->name());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":15,"deletions":46,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n-  virtual void print_heap();\n+  void print_heap() override;\n+  void print_gc_specific() override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}