{"files":[{"patch":"@@ -325,0 +325,4 @@\n+\n+    if (heap->mode()->is_generational()) {\n+      phase5_restore_generation_accounts();\n+    }\n@@ -1481,0 +1485,58 @@\n+\n+void ShenandoahFullGC::phase5_restore_generation_accounts() {\n+  GCTraceTime(Info, gc, phases) time(\"Phase 5: Restore generation accounts\", _gc_timer);\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  size_t num_regions = heap->num_regions();\n+  size_t young_usage = 0;\n+  size_t young_regions = 0;\n+  size_t young_humongous_waste = 0;\n+  size_t old_usage = 0;\n+  size_t old_regions = 0;\n+  size_t old_humongous_waste = 0;\n+  ShenandoahHeapRegion* r;\n+\n+  for (size_t i = 0; i < num_regions; i++) {\n+    switch (heap->region_affiliation(i)) {\n+      case ShenandoahRegionAffiliation::FREE:\n+        break;\n+      case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n+        r = heap->get_region(i);\n+        young_regions++;\n+        young_usage += r->used();\n+        if (r->is_humongous()) {\n+          ShenandoahHeapRegion* start = r->humongous_start_region();\n+          HeapWord* obj_addr = start->bottom();\n+          oop obj = cast_to_oop(obj_addr);\n+          size_t word_size = obj->size();\n+          HeapWord* end_addr = obj_addr + word_size;\n+          if (end_addr < r->end()) {\n+            size_t humongous_waste = (r->end() - end_addr) * HeapWordSize;\n+            young_humongous_waste += humongous_waste;\n+          }\n+          \/\/ else, this region is entirely spanned by humongous object so contributes no humongous waste\n+        }\n+        break;\n+      case ShenandoahRegionAffiliation::OLD_GENERATION:\n+        r = heap->get_region(i);\n+        old_regions++;\n+        old_usage += r->used();\n+        if (r->is_humongous()) {\n+          ShenandoahHeapRegion* start = r->humongous_start_region();\n+          HeapWord* obj_addr = start->bottom();\n+          oop obj = cast_to_oop(obj_addr);\n+          size_t word_size = obj->size();\n+          HeapWord* end_addr = obj_addr + word_size;\n+          if (end_addr < r->end()) {\n+            size_t humongous_waste = (r->end() - end_addr) * HeapWordSize;\n+            old_humongous_waste += humongous_waste;\n+          }\n+          \/\/ else, this region is entirely spanned by humongous object so contributes no humongous waste\n+        }\n+        break;\n+      default:\n+        assert(false, \"Should not reach\");\n+    }\n+  }\n+  heap->old_generation()->establish_usage(old_regions, old_usage, old_humongous_waste);\n+  heap->young_generation()->establish_usage(young_regions, young_usage, young_humongous_waste);\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+  void phase5_restore_generation_accounts();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -946,0 +946,7 @@\n+void ShenandoahGeneration::establish_usage(size_t num_regions, size_t num_bytes, size_t humongous_waste) {\n+  assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"must be at a safepoint\");\n+  _affiliated_region_count = num_regions;\n+  _used = num_bytes;\n+  \/\/ future improvement: _humongous_waste = humongous_waste;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -186,0 +186,2 @@\n+  void establish_usage(size_t num_regions, size_t num_bytes, size_t humongous_waste);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}