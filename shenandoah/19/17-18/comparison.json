{"files":[{"patch":"@@ -29,0 +29,2 @@\n+#include \"runtime\/java.hpp\"\n+#include \"utilities\/formatBuffer.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -491,0 +491,6 @@\n+  \/\/ Reference processing is disabled when old generation mark is in progress.\n+  \/\/ This is because we must leave the SATB barrier on to cover the old generation\n+  \/\/ snapshot. However, in some cases, the referent of a weak reference may be\n+  \/\/ NULL'd out after final mark. With the SATB barrier enabled, this reference\n+  \/\/ will be enqueued in the SATB buffer and will thereby poison the next cycle.\n+  rp->set_enabled(!heap->is_concurrent_old_mark_in_progress());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-      if (_preemption_requested.is_set() || _requested_gc_cause == GCCause::_shenandoah_concurrent_gc) {\n+      if (_requested_gc_cause == GCCause::_shenandoah_concurrent_gc) {\n@@ -193,0 +193,6 @@\n+\n+        \/\/ Don't start a new old marking if there is one already in progress.\n+        if (generation == OLD && heap->is_concurrent_old_mark_in_progress()) {\n+          mode = resume_old;\n+        }\n+\n@@ -199,0 +205,2 @@\n+        \/\/ Nobody asked us to do anything, but we have an old generation mark\n+        \/\/ in progress, so resume working on that.\n@@ -439,0 +447,3 @@\n+  assert(!heap->is_concurrent_old_mark_in_progress(), \"Old already in progress.\");\n+  assert(old_generation->task_queues()->is_empty(), \"Old mark queues should be empty.\");\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+class ShenandoahHeapRegionClosure;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"memory\/padded.hpp\"\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPadding.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,2 @@\n-  _stats() {\n+  _stats(),\n+  _enabled(true) {\n@@ -369,1 +370,1 @@\n-  if (!RegisterReferences) {\n+  if (!RegisterReferences || !_enabled) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,0 +143,2 @@\n+  bool _enabled;\n+\n@@ -191,0 +193,4 @@\n+\n+  void set_enabled(bool enabled) {\n+    _enabled = enabled;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}