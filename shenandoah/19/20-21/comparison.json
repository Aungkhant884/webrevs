{"files":[{"patch":"@@ -957,1 +957,4 @@\n-    heap->purge_old_satb_buffers();\n+    \/\/ Purge the SATB buffers, transferring any valid, old pointers to the\n+    \/\/ old generation mark queue. From here on, no mutator will have access\n+    \/\/ to anything that will be trashed and recycled.\n+    heap->purge_old_satb_buffers(false \/* abandon *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -463,6 +463,1 @@\n-  if (heap->cancelled_gc()) {\n-    \/\/ Bootstrap cycle was cancelled. Now we expect to run a degenerated\n-    \/\/ young cycle. Clear anything out of old generation mark queues.\n-    old_generation->task_queues()->clear();\n-    old_generation->set_mark_incomplete();\n-  } else {\n+  if (!heap->cancelled_gc()) {\n@@ -474,1 +469,1 @@\n-    \/\/ Bit of a hack here to keep the phase timings happy as we transition\n+    \/\/ TODO: Bit of a hack here to keep the phase timings happy as we transition\n@@ -540,9 +535,0 @@\n-\n-    if (is_alloc_failure_gc()) {\n-      \/\/ Cancelled for degeneration, not just to run a young cycle.\n-      \/\/ We can't complete a global cycle with the partial marking\n-      \/\/ information in the old generation mark queues so we force\n-      \/\/ the degenerated cycle to be global and from outside the cycle.\n-      generation->task_queues()->clear();\n-      generation->set_mark_incomplete();\n-    }\n@@ -730,1 +716,1 @@\n-  if (_preemption_requested.is_set() || _gc_requested.is_set()) {\n+  if (_preemption_requested.is_set() || _gc_requested.is_set() || ShenandoahHeap::heap()->cancelled_gc()) {\n@@ -746,1 +732,0 @@\n-    set_gc_mode(cancelling);\n@@ -791,1 +776,0 @@\n-    set_gc_mode(cancelling);\n@@ -908,1 +892,0 @@\n-    case cancelling:        return \"cancelling\";\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -74,2 +74,1 @@\n-    marking_old,\n-    cancelling\n+    marking_old\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-  assert(heap->old_generation()->task_queues()->is_empty(), \"Old gen task queues should be empty.\");\n@@ -91,1 +90,1 @@\n-    heap->set_concurrent_old_mark_in_progress(false);\n+    heap->old_generation()->cancel_marking();\n@@ -93,0 +92,1 @@\n+  assert(heap->old_generation()->task_queues()->is_empty(), \"Old gen task queues should be empty.\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -198,0 +198,1 @@\n+  set_mark_incomplete();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    heap->purge_old_satb_buffers();\n+    heap->purge_old_satb_buffers(true \/* abandon *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2365,2 +2365,2 @@\n-void ShenandoahHeap::purge_old_satb_buffers() {\n-  static_cast<ShenandoahOldGeneration*>(_old_generation)->purge_satb_buffers();\n+void ShenandoahHeap::purge_old_satb_buffers(bool abandon) {\n+  ((ShenandoahOldGeneration*)_old_generation)->purge_satb_buffers(abandon);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -411,0 +411,1 @@\n+\n@@ -690,1 +691,1 @@\n-  void purge_old_satb_buffers();\n+  void purge_old_satb_buffers(bool abandon);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-void ShenandoahOldGeneration::purge_satb_buffers() {\n+void ShenandoahOldGeneration::purge_satb_buffers(bool abandon) {\n@@ -149,1 +149,0 @@\n-\n@@ -152,2 +151,0 @@\n-  uint nworkers = heap->workers()->active_workers();\n-  StrongRootsScope scope(nworkers);\n@@ -155,2 +152,9 @@\n-  ShenandoahPurgeSATBTask purge_satb_task(task_queues());\n-  heap->workers()->run_task(&purge_satb_task);\n+  if (abandon) {\n+    ShenandoahBarrierSet::satb_mark_queue_set().abandon_partial_marking();\n+  } else {\n+    uint nworkers = heap->workers()->active_workers();\n+    StrongRootsScope scope(nworkers);\n+\n+    ShenandoahPurgeSATBTask purge_satb_task(task_queues());\n+    heap->workers()->run_task(&purge_satb_task);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  void purge_satb_buffers();\n+  void purge_satb_buffers(bool abandon);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}