{"files":[{"patch":"@@ -92,3 +92,1 @@\n-      if (access.is_oop()) {\n-        post_barrier(access, access.resolved_addr(), new_value.result());\n-      }\n+      post_barrier(access, access.resolved_addr(), new_value.result());\n@@ -98,0 +96,1 @@\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-void ShenandoahBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj, Address dst) {\n+void ShenandoahBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj) {\n@@ -381,2 +381,0 @@\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  assert(bs->kind() == BarrierSet::ShenandoahBarrierSet, \"Wrong barrier set kind\");\n@@ -384,1 +382,1 @@\n-  ShenandoahBarrierSet* ctbs = barrier_set_cast<ShenandoahBarrierSet>(bs);\n+  ShenandoahBarrierSet* ctbs = ShenandoahBarrierSet::barrier_set();\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  void store_check(MacroAssembler* masm, Register obj, Address dst);\n+  void store_check(MacroAssembler* masm, Register obj);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,3 +91,1 @@\n-      if (access.is_oop()) {\n-        post_barrier(access, access.resolved_addr(), new_value.result());\n-      }\n+      post_barrier(access, access.resolved_addr(), new_value.result());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -623,1 +623,1 @@\n-void ShenandoahBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj, Address dst) {\n+void ShenandoahBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj) {\n@@ -630,1 +630,0 @@\n-  BarrierSet* bs = BarrierSet::barrier_set();\n@@ -632,1 +631,1 @@\n-  ShenandoahBarrierSet* ctbs = barrier_set_cast<ShenandoahBarrierSet>(bs);\n+  ShenandoahBarrierSet* ctbs = ShenandoahBarrierSet::barrier_set();\n@@ -715,1 +714,1 @@\n-      store_check(masm, tmp1, dst);\n+      store_check(masm, tmp1);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  void store_check(MacroAssembler* masm, Register obj, Address dst);\n+  void store_check(MacroAssembler* masm, Register obj);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -373,1 +373,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -697,1 +697,1 @@\n-  if (_preemption_requested.is_set()) {\n+  if (_preemption_requested.is_set() || _gc_requested.is_set()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2289,16 +2289,0 @@\n-\/\/ Used mainly for debugging.  Otherwise, should be in-lined.\n-uint ShenandoahHeap::object_age(oop obj) {\n-  markWord w = obj->has_displaced_mark() ? obj->displaced_mark() : obj->mark();\n-  return w.age();\n-}\n-\n-void ShenandoahHeap::increase_object_age(oop obj, uint additional_age) {\n-  markWord w = obj->has_displaced_mark() ? obj->displaced_mark() : obj->mark();\n-  w = w.set_age(MIN2(markWord::max_age, w.age() + additional_age));\n-  if (obj->has_displaced_mark()) {\n-    obj->set_displaced_mark(w);\n-  } else {\n-    obj->set_mark(w);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -691,3 +691,1 @@\n-  static uint object_age(oop obj);\n-\n-  static void increase_object_age(oop obj, uint additional_age);\n+  static inline void increase_object_age(oop obj, uint additional_age);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-#undef TRACE_PROMOTION\n-\n@@ -258,6 +256,0 @@\n-#ifdef TRACE_PROMOTION\n-  const char *source_region = ((from_region->affiliation() == YOUNG_GENERATION)? \"young\"\n-                               : ((from_region->affiliation() == OLD_GENERATION)? \"old\": \"free\"));\n-  const char *dest_region = (target_gen == OLD_GENERATION)? \"old\": \"young\";\n-#endif\n-\n@@ -303,8 +295,0 @@\n-#ifdef TRACE_PROMOTION\n-    printf(\"endeavoring to increase young-gen object %llx (previously known as %llx) age of %d by %d\\n\",\n-           (unsigned long long) cast_from_oop<HeapWord *>(copy_val),\n-           (unsigned long long) cast_from_oop<HeapWord *>(p),\n-           ShenandoahHeap::object_age(copy_val), from_region->age() + 1);\n-    fflush(stdout);\n-#endif\n-\n@@ -325,7 +309,0 @@\n-#ifdef TRACE_PROMOTION\n-    printf(\"successfully copied %s object %llx to %s %llx\\n\",\n-           source_region, (unsigned long long) cast_from_oop<HeapWord *>(p),\n-           dest_region, (unsigned long long) copy);\n-    fflush(stdout);\n-#endif\n-\n@@ -346,10 +323,0 @@\n-#ifdef TRACE_PROMOTION\n-    ShenandoahHeapRegion* r = ShenandoahHeap::heap_region_containing(p);\n-    const char *source_region = ((r->affiliation() == YOUNG_GENERATION)? \"young\"\n-                                 : ((r->affiliation() == OLD_GENERATION)? \"old\": \"free\"));\n-    const char *dest_region = (target_gen == OLD_GENERATION)? \"old\": \"young\";\n-\n-    printf(\"attempt to copy %s object %llx to %s %llx failed because another thread won race!\\n\",\n-           source_region, (unsigned long long) cast_from_oop<HeapWord *>(p), dest_region, (unsigned long long) copy);\n-    fflush(stdout);\n-#endif\n@@ -358,6 +325,0 @@\n-#ifdef TRACE_PROMOTION\n-      if (target_gen == OLD_GENERATION) {\n-        printf(\" ... undoing gclab allocation\\n\");\n-        fflush(stdout);\n-      }\n-#endif\n@@ -366,6 +327,0 @@\n-#ifdef TRACE_PROMOTION\n-      if (target_gen == OLD_GENERATION) {\n-        printf(\" ... filling abandoned copy with innocence\\n\");\n-        fflush(stdout);\n-      }\n-#endif\n@@ -380,0 +335,11 @@\n+void ShenandoahHeap::increase_object_age(oop obj, uint additional_age) {\n+  markWord w = obj->has_displaced_mark() ? obj->displaced_mark() : obj->mark();\n+  w = w.set_age(MIN2(markWord::max_age, w.age() + additional_age));\n+  if (obj->has_displaced_mark()) {\n+    obj->set_displaced_mark(w);\n+  } else {\n+    obj->set_mark(w);\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":11,"deletions":45,"binary":false,"changes":56,"status":"modified"}]}