{"files":[{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        __ mov(rscratch2, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::OLD_MARKING);\n+        __ mov(rscratch2, ShenandoahHeap::HAS_FORWARDED | ShenandoahHeap::YOUNG_MARKING | ShenandoahHeap::OLD_MARKING);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n@@ -60,0 +59,1 @@\n+class ShenandoahGeneration;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,3 +27,0 @@\n-#include \"logging\/log.hpp\"\n-#include \"logging\/logTag.hpp\"\n-#include \"runtime\/globals_extension.hpp\"\n@@ -36,0 +33,8 @@\n+  \/\/ When we fill in dead objects during update refs, we use oop::size,\n+  \/\/ which depends on the klass being loaded. However, if these dead objects\n+  \/\/ were the last referrers to the klass, it will be unloaded and we'll\n+  \/\/ crash. Class unloading is disabled until we're able to sort this out.\n+  FLAG_SET_ERGO(ClassUnloading, false);\n+  FLAG_SET_ERGO(ClassUnloadingWithConcurrentMark, false);\n+  FLAG_SET_ERGO(ShenandoahUnloadClassesFrequency, 0);\n+\n@@ -37,0 +42,1 @@\n+    \/\/ Leaving this here for the day we re-enable class unloading\n@@ -44,4 +50,0 @@\n-  \/\/ HEY! Disabled while M7 work is in progress.\n-  FLAG_SET_ERGO(ShenandoahUnloadClassesFrequency, 0);\n-  FLAG_SET_ERGO(RegisterReferences, false);\n-\n@@ -54,0 +56,14 @@\n+  SHENANDOAH_CHECK_FLAG_UNSET(ClassUnloading);\n+}\n+\n+const char *affiliation_name(ShenandoahRegionAffiliation type) {\n+  switch (type) {\n+    case ShenandoahRegionAffiliation::FREE:\n+      return \"FREE\";\n+    case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n+      return \"YOUNG\";\n+    case ShenandoahRegionAffiliation::OLD_GENERATION:\n+      return \"OLD\";\n+    default:\n+      return \"UnrecognizedAffiliation\";\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -30,1 +30,13 @@\n-class ShenandoahHeuristics;\n+enum GenerationMode {\n+  YOUNG,\n+  OLD,\n+  GLOBAL\n+};\n+\n+enum ShenandoahRegionAffiliation {\n+  FREE,\n+  YOUNG_GENERATION,\n+  OLD_GENERATION\n+};\n+\n+const char *affiliation_name(ShenandoahRegionAffiliation type);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"runtime\/java.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,6 +29,1 @@\n-\n-enum ShenandoahRegionAffiliation {\n-  FREE,\n-  YOUNG_GENERATION,\n-  OLD_GENERATION\n-};\n+#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAllocRequest.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -159,10 +159,0 @@\n-  if (strcmp(ShenandoahGCMode, \"generational\") == 0) {\n-    \/\/ When we fill in dead objects during update refs, we use oop::size,\n-    \/\/ which depends on the klass being loaded. However, if these dead objects\n-    \/\/ were the last referrers to the klass, it will be unloaded and we'll\n-    \/\/ crash. Class unloading is disabled until we're able to sort this out.\n-    FLAG_SET_DEFAULT(ClassUnloading, false);\n-    FLAG_SET_DEFAULT(ClassUnloadingWithConcurrentMark, false);\n-    FLAG_SET_DEFAULT(ShenandoahUnloadClassesFrequency, 0);\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#undef DEBUG_TRACE\n@@ -177,17 +176,0 @@\n-#ifdef DEBUG_TRACE\n-static const char *affiliation_name(ShenandoahRegionAffiliation a) {\n-\n-  switch (a) {\n-    case ShenandoahRegionAffiliation::FREE:\n-        return \"FREE\";\n-        break;\n-    case ShenandoahRegionAffiliation::YOUNG_GENERATION:\n-        return \"YOUNG_GENERATION\";\n-    case ShenandoahRegionAffiliation::OLD_GENERATION:\n-        return \"OLD_GENERATION\";\n-    default:\n-        return \"UnrecognizedAffiliation\";\n-  }\n-}\n-#endif\n-\n@@ -205,6 +187,0 @@\n-#ifdef DEBUG_TRACE\n-    printf(\"try_allocate_in(), converting region @ (%llx, %llx, %llx) to %s\\n\",\n-           (unsigned long long) r->bottom(), (unsigned long long) r->top(), (unsigned long long) r->end(),\n-           affiliation_name(req.affiliation()));\n-    fflush(stdout);\n-#endif\n@@ -381,6 +357,0 @@\n-#ifdef DEBUG_TRACE\n-    printf(\"allocate_contiguous(), setting region (%llx, %llx, %llx) to %s\\n\",\n-           (unsigned long long) r->bottom(), (unsigned long long) r->top(), (unsigned long long) r->end(),\n-           affiliation_name(req.affiliation()));\n-    fflush(stdout);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/mode\/shenandoahGenerationalMode.hpp\"\n@@ -55,1 +56,0 @@\n-class ShenandoahMode;\n@@ -108,6 +108,0 @@\n-enum GenerationMode {\n-  YOUNG,\n-  OLD,\n-  GLOBAL\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -322,2 +322,0 @@\n-\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-#include \"shenandoahGeneration.hpp\"\n@@ -51,1 +50,0 @@\n-#undef DEBUG_TRACE\n@@ -340,3 +338,0 @@\n-  if (_affiliation == FREE) {\n-    \/\/assert(_live_data == 0, \"Setting non-zero live data (%zu) on FREE region\", s);\n-  }\n@@ -521,5 +516,1 @@\n-#ifdef DEBUG_TRACE\n-  printf(\"SHR::recycle(), setting region (%llx, %llx, %llx) to FREE\\n\",\n-         (unsigned long long) bottom(), (unsigned long long) top(), (unsigned long long) end());\n-  fflush(stdout);\n-#endif\n+\n@@ -772,0 +763,3 @@\n+  log_trace(gc)(\"Changing affiliation of region %zu from %s to %s\",\n+    index(), affiliation_name(_affiliation), affiliation_name(new_affiliation));\n+\n@@ -846,5 +840,0 @@\n-#ifdef DEBUG_TRACE\n-      printf(\"promoting humongous region (%llx, %llx, %llx), setting affiliation to OLD_GENERATION\\n\",\n-             (unsigned long long) r->bottom(), (unsigned long long) r->top(), (unsigned long long) r->end());\n-      fflush(stdout);\n-#endif\n@@ -874,5 +863,0 @@\n-#ifdef DEBUG_TRACE\n-    printf(\"promoting normal region (%llx, %llx, %llx), setting affiliation to OLD_GENERATION\\n\",\n-           (unsigned long long) bottom(), (unsigned long long) top(), (unsigned long long) end());\n-    fflush(stdout);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#undef DEBUG_TRACE\n-\n@@ -111,7 +109,0 @@\n-\n-#ifdef DEBUG_TRACE\n-  printf(\"SHR::garbage(), used: %lld\\n\", (long long) used());\n-  fflush(stdout);\n-  printf(\"   get_live_data_bytes: %lld\\n\", (long long) get_live_data_bytes());\n-  fflush(stdout);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n@@ -3,0 +27,2 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahHeapRegion.hpp\"\n@@ -4,0 +30,7 @@\n+#include \"gc\/shenandoah\/shenandoahMarkingContext.hpp\"\n+#include \"gc\/shenandoah\/shenandoahSharedVariables.hpp\"\n+\n+\n+ShenandoahFinalMarkUpdateRegionStateClosure::ShenandoahFinalMarkUpdateRegionStateClosure(\n+  ShenandoahMarkingContext *ctx) :\n+  _ctx(ctx), _lock(ShenandoahHeap::heap()->lock()) {}\n@@ -55,0 +88,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n@@ -19,2 +19,1 @@\n- * Please contac    _ctx(ShenandoahHeap::heap()->complete_marking_context()), _lock(ShenandoahHeap::heap()->lock()) {}\n- Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n@@ -29,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -31,4 +29,3 @@\n-#include \"gc\/shenandoah\/shenandoahHeapRegion.hpp\"\n-#include \"gc\/shenandoah\/shenandoahSharedVariables.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMarkingContext.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMarkClosures.hpp\"\n+\n+class ShenandoahMarkingContext;\n+class ShenandoahHeapRegion;\n@@ -41,2 +38,1 @@\n-  ShenandoahFinalMarkUpdateRegionStateClosure(ShenandoahMarkingContext* ctx) :\n-    _ctx(ctx), _lock(ShenandoahHeap::heap()->lock()) {}\n+  ShenandoahFinalMarkUpdateRegionStateClosure(ShenandoahMarkingContext* ctx);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkClosures.hpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n@@ -4,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n@@ -5,1 +29,0 @@\n-#include \"gc\/shenandoah\/shenandoahConcurrentMark.hpp\"\n@@ -7,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.hpp","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n@@ -7,0 +30,3 @@\n+class ShenandoahHeapRegion;\n+class ShenandoahHeapRegionClosure;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c), Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Amazon.com, Inc. and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHSCANREMEMBERED_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHSCANREMEMBERED_HPP\n+\n@@ -209,3 +212,0 @@\n-#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHSCANREMEMBERED_HPP\n-#define SHARE_GC_SHENANDOAH_SHENANDOAHSCANREMEMBERED_HPP\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Amazon.com, Inc. or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Amazon.com, Inc. or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}