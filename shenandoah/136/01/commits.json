[{"commit":{"message":"Enhance logging information"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"}],"sha":"b249a2c5157449636cff28d8d882a6bffc463ab4"},{"commit":{"message":"Do not use shared allocation for promotions smaller than PLAB::min_size"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"9278fe5c09f6109cd1000966cccbe8d3f41f0014"},{"commit":{"message":"Fix whitespace errors"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"98be07c74317708940a73203976b9196aa0ca96d"},{"commit":{"message":"Merge remote-tracking branch 'GitFarmBranch\/balance-without-cancel' into balance-without-cancel"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"82f6b9e99f8010955973871f342629165d67a81d"},{"commit":{"message":"Remove instrumentation"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"}],"sha":"35f930c8cda6a78bb1c4997483b82400903eae73"},{"commit":{"message":"Fix up miscalculations for memory loaned from old-gen"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"53fc6fa1585d54d3742a5f99e6d730023ffda852"},{"commit":{"message":"Fix assertion error\n\nRequire >= rather than > in assertion."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"}],"sha":"bbfa4e7ada524d64a2b8ce7741938d91bf050fa5"},{"commit":{"message":"Only clear requested gc cause when it is handled\n\nReviewed-by: kdnilsen"},"files":[],"sha":"34c21d1cfe90f7f31eae4410c59764f7f652f8c8"},{"commit":{"message":"Use state from collection set to know if mixed collection is in progress\n\nReviewed-by: kdnilsen\n\nManually merged CONFLICTS found in shenandoahHeap.cpp,\nshenandoahGeneration.cpp, and shenandoahHeuristics.cpp"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"}],"sha":"4e43e593cb26264016db250cfc3c26751dbce75c"},{"commit":{"message":"Fix concurrent mark worker timings\n\nReviewed-by: kdnilsen"},"files":[],"sha":"40250788f64cfd560e95f8e3f08c36938dda667d"},{"commit":{"message":"Include mark worker performance in report for concurrent mark phase\n\nReviewed-by: kdnilsen"},"files":[],"sha":"5319e4f0be695f61bccaf0bbce622f34bd3dd84f"},{"commit":{"message":"Improved timing reports\n\nReviewed-by: kdnilsen"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"}],"sha":"fad3160d8641164eb82c3f896dedfb9bada481e1"},{"commit":{"message":"Cool down regulator after request to start GC is accepted\n\nReviewed-by: kdnilsen"},"files":[],"sha":"8f234b27417662569a9f0ae4082e4d0688f81d39"},{"commit":{"message":"Refactor code for reserving and borrowing\n\nCareful reviews of logs revealed errors in the budgeting of memory\nbetween young evacuation reserve, old evacuation reserve, promotion\nreserve, and allocation supplement.  This code was refactored to make it\neasier to maintain and to correct the errors."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"090f4c903006ef4ff734fd6fb62530c06b21b705"},{"commit":{"message":"Fix memory reservation several errors\n\nThese fixes allow promotions to flow more freely, young-gen collections\nto run more frequently.  Performance is much improved."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"}],"sha":"775f9f6c4671961912c092344be8a51d8915483c"},{"commit":{"message":"Refinements and instrumentation to explore promotion\n\nPerformance issues seem to derive from promotion tradeoffs.  Still\ninvestigating."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"5ac4a4c111a9ff17775a56bfe31b7d2a92f169d5"},{"commit":{"message":"Repack ShenandoahThreadLocalData fields for alignment\n\nPrevious code reported an assertion fail because offset of a field >\n128."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"}],"sha":"b9ab21d1d7829a0a7170e71b2b4e0b3e1e00fee6"},{"commit":{"message":"Fix update-references bug in load-balancing change\n\nThe closure that processes oops needs to be instantiated with a range\nthat reaches all the way to top() because responsibility for updating\nof an object is held by the chunk within which the object starts."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"a48f27c447b1d8a12d4974749ea46ca05c1eee6e"},{"commit":{"message":"Fix minor typo"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"3a8a15ac5128bb621083f91187214b5cdc228631"},{"commit":{"message":"Reserve certain old-gen regions to support compaction of old-gen\n\nThese regions can be used only for compaction of old-gen memory.\nFollowing compaction of old-gen memory, at least the same number of\nregions will become free as a result of compaction within old-gen\nmemory.  Promotions will be rejected (and deferred until a subsequent\nevacuation phase) if they would need to occupy regions that are reserved\nfor compaction of old-gen memory."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"65cf39fbba56cb3ef36c912ad2902f513e506b99"},{"commit":{"message":"Fix invocations of get_next_marked_addr\n\nThere were a few places in existing code that misused this service.\nget_next_marked_addr expects a start and end arguments to delineate\nthe range of addresses within which to search for the next marked\nobject.  If the next marked object is found at the start address, it\nreturns the start address.  Some existing code assumed it would not find\nan object at this address, but would find the \"next\" object after this\none.  This patch corrects the misunderstanding and fixes other erroneous\nusage based on the mistaken belief that get_next_marked_addr returns\nnullptr if there are no marked objects within the range.  Instead, it\nreturns the value of the end argument."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"db54c8d0fbdb0fbf154d7fad32e37d77e18cf321"},{"commit":{"message":"Fix update heap refs for mixed evac\n\nI had been using marking_context->is_marked(obj) to detect whether an object\nresided at address obj.  This only works if obj < TAMS.  When obj >=\nTAMS, I needed to use the remembered set crossing map.  This patch\nimplements a fix."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"}],"sha":"9c9d22f7a753174205d50a8426490c6e837c1876"},{"commit":{"message":"Do not clear cancel at start of FullGC\n\nThis reverts a previous commit on this branch.  It turns out that\nclearing the cancel flag introduces other problems.  The better way to\naddress this issue is to \"do not abort caolesce and fill during fullgc\""},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"194804bd1ad179a55ab2140970b535983e111ffe"},{"commit":{"message":"Fix typo"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"cc48d7b3fb50deb2849afc3f072860a6cdf426dd"},{"commit":{"message":"Relax enforcement of evacuation budget\n\nReviewed-by: kdnilsen"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"}],"sha":"803ae561f7f43058b41e3541378c45edd9401867"},{"commit":{"message":"Global mark is not old mark\n\nReviewed-by: kdnilsen"},"files":[],"sha":"616dd00ee5b7fffb9b42da703cb926960ffaf0a7"},{"commit":{"message":"Do not abort coalesce and fill during fullgc\n\nReviewed-by: wkemper"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"}],"sha":"73ba5de1187f81c0789e16b2b443d4e9eda2baeb"},{"commit":{"message":"Fix updaterefs problem with empty subranges"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"7e0b0ca84f5059b8416587772344679f4f5f3c45"},{"commit":{"message":"Add options to control evacuation efficiency\n\nTwo options added with defaults values that seem to improve generational\nevacuation performance, reducing likelihood of evacuation failures and\nthus reducing frequency of degeneration and upgraded full GC.  The\noptions are:\n-XX:ShenandoahGenerationalEvacWaste=1.6 (default)\n-XX:ShenandoahMaxEvacLABRatio-16"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp"}],"sha":"4854ed9dee630a003df461d160e645fe2a56f79c"},{"commit":{"message":"Clear cancel at start of FullGC\n\nOtherwise, coalesce-and-fill of pinned regions may not run to\ncompletion."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"}],"sha":"b65f8c7d5f40a11b99578a5aaf22985b13bc23c6"},{"commit":{"message":"Merge branch 'shenandoah' of ssh:\/\/git.amazon.com\/pkg\/OpenJDKTipSrc into balance-without-cancel"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"}],"sha":"9306602017932968beed45e326662d4d24f945fd"},{"commit":{"message":"Merge upstream into shenandoah"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"}],"sha":"357d0a81a975befec80d513a9ff2b91396df55b7"},{"commit":{"message":"Revert \"Mutator may fail to evacuate\"\n\nThis reverts commit 2132a6d151e4c46b71a220100fa478a8be676f13."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"}],"sha":"eb6f4f4f95a00520025abc05b3c183a81cf78b3c"},{"commit":{"message":"Fix missing punctionation accidentally removed"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"}],"sha":"4e6f3b942259203c58940de5b083cea035a4dfb2"},{"commit":{"message":"Minor improvements in comments"},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"}],"sha":"bc9f4aa642062ed6f0c56199567acaa406df7b3d"},{"commit":{"message":"Do not cancel work already committed\n\nAnd doing mixed-evac update heap refs, scan entirety of old-gen rather\nthan limiting to DIRTY cards."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"9877177a38c7b42d5846f2cbfde12ebe68c6010b"},{"commit":{"message":"Fix updating refs for objects aligned with cluster start\n\nAlso fix DEBUG builds, as there were compiler errors that only showed up\nwhen assertion checking is enabled.\n\nAnd fixed computation of _smallest_chunk_size, which was incorrect."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"db5548d7003ded7db7d32053d36359c6ebe04dbe"},{"commit":{"message":"Disable cancellation of rem-set scan\n\nSimplifying the code to focus debugging on one feature at a time.\nPrioritize upstreaming on load balancing code.  After this works, we'll\nfocus on support for cancellation."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"beaa8edd099c96a36666c9cf5fc597a4d3e83f30"},{"commit":{"message":"Make remembered set scanning cancellable and balanced\n\nDebugging instrumentation is present but disabled.  This commit provides\nsignificant improvement in load balancing and has demonstrated\nsuccessful cancellation.  However, crashes have also been observed.  At\nleast some of the crashes seem likely to be caused by errors introduced\nalong this particular branch."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp"}],"sha":"912f251ebc576da7adbec479f196a644b54d9eac"}]