{"files":[{"patch":"@@ -222,0 +222,3 @@\n+\n+  size_t bytes_evacuated = collection_set->get_bytes_reserved_for_evacuation();\n+  log_info(gc, ergo)(\"Total Evacuation: \" SIZE_FORMAT \"%s\", bytes_evacuated, proper_unit_for_byte_size(bytes_evacuated));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+  size_t collected_old_bytes = 0;\n@@ -101,0 +102,1 @@\n+      collected_old_bytes += r->garbage();\n@@ -108,2 +110,4 @@\n-    log_info(gc)(\"Old-gen piggyback evac (\" UINT32_FORMAT \" regions, \" SIZE_FORMAT \" %s)\",\n-                 included_old_regions, byte_size_in_proper_unit(evacuated_old_bytes), proper_unit_for_byte_size(evacuated_old_bytes));\n+    log_info(gc)(\"Old-gen piggyback evac (\" UINT32_FORMAT \" regions, evacuating: \"\n+                 SIZE_FORMAT \"%s, reclaiming: \" SIZE_FORMAT \"%s)\", included_old_regions,\n+                 byte_size_in_proper_unit(evacuated_old_bytes), proper_unit_for_byte_size(evacuated_old_bytes),\n+                 byte_size_in_proper_unit(collected_old_bytes), proper_unit_for_byte_size(collected_old_bytes));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -426,1 +426,3 @@\n-      \/\/       of objects of age 1, which is twice the number of objexts of age 2, and so on.)\n+      \/\/       of objects of age 1, which is twice the number of objects of age 2, and so on.  For example,\n+      \/\/       if tenure age is 1, 1\/3 of young evac will be promoted.  If tenure age is 2, 1\/7 of young evac\n+      \/\/       will be promoted.)\n@@ -429,0 +431,4 @@\n+#undef KELVIN_TRACE_PROMOTION_BUDGET\n+#ifdef KELVIN_TRACE_PROMOTION_BUDGET\n+      printf(\"PromotionBudget: previously_promoted: \" SIZE_FORMAT \"\\n\", previously_promoted);\n+#endif\n@@ -432,0 +438,5 @@\n+#ifdef KELVIN_TRACE_PROMOTION_BUDGET\n+      printf(\"PromotionBudget: initial promotion_reserve: \" SIZE_FORMAT \", old_avail: \" SIZE_FORMAT\n+             \", old_evac_commit: \" SIZE_FORMAT \", old regions loaned for young_evac: \" SIZE_FORMAT \"\\n\",\n+             promotion_reserve, old_generation->available(), old_evacuation_committed, old_regions_loaned_for_young_evac);\n+#endif\n@@ -437,0 +448,4 @@\n+#ifdef KELVIN_TRACE_PROMOTION_BUDGET\n+      printf(\"PromotionBudget: promotion_reserve limited by previously promoted: \" SIZE_FORMAT \"\\n\",\n+             promotion_reserve);\n+#endif\n@@ -445,0 +460,9 @@\n+#ifdef KELVIN_TRACE_PROMOTION_BUDGET\n+      printf(\"PromotionBudget: promotion_reserve limited by fraction of young evac: \" SIZE_FORMAT\n+             \", young_evac: \" SIZE_FORMAT \", divisor: \" SIZE_FORMAT  \"\\n\",\n+             promotion_reserve, young_evacuation_committed, promotion_divisor);\n+#endif\n+      if (collection_set->get_old_bytes_reserved_for_evacuation() == 0) {\n+        \/\/ Setting old evacuation reserve to zero denotes that there is no old-gen evacuation in this pass.\n+        heap->set_old_evac_reserve(0);\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1194,0 +1194,1 @@\n+  bool allow_allocation = true;\n@@ -1217,0 +1218,5 @@\n+          if (get_old_evac_reserve() == 0) {\n+            \/\/ There are no old-gen evacuations in this pass.  There's no value in creating a plab that cannot\n+            \/\/ be used for promotions.\n+            allow_allocation = false;\n+          }\n@@ -1242,2 +1248,1 @@\n-\n-  HeapWord* result = _free_set->allocate(req, in_new_region);\n+  HeapWord* result = (allow_allocation)? _free_set->allocate(req, in_new_region): nullptr;\n@@ -1258,0 +1263,7 @@\n+#undef KELVIN_MYSTERY\n+#ifdef KELVIN_MYSTERY\n+            printf(PTR_FORMAT \": disabling promotions for requested bytes: \" SIZE_FORMAT \", promotion_expended: \" SIZE_FORMAT\n+                   \", promotion_reserved: \" SIZE_FORMAT \"\\n\",\n+                   p2i(thread), requested_bytes, get_promoted_expended(), get_promoted_reserve());\n+            fflush(stdout);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -315,0 +315,6 @@\n+#undef KELVIN_SCRUTINY\n+#ifdef KELVIN_SCRUTINY\n+    printf(PTR_FORMAT \": refreshing plab for allocation of size: \" SIZE_FORMAT \", remaining_words: \" SIZE_FORMAT\n+           \", is_promotion: %s\\n\", p2i(thread), size, plab->words_remaining(), is_promotion? \"true\": \"false\");\n+    fflush(stdout);\n+#endif\n@@ -318,0 +324,7 @@\n+#ifdef KELVIN_SCRUTINY\n+  else if (obj == nullptr) {\n+    printf(PTR_FORMAT \": Not refreshing plab for allocation of size: \" SIZE_FORMAT \", remaining_words: \" SIZE_FORMAT\n+           \", is_promotion: %s\\n\", p2i(thread), size, plab->words_remaining(), is_promotion? \"true\": \"false\");\n+    fflush(stdout);\n+  }\n+#endif\n@@ -394,0 +407,1 @@\n+#undef KELVIN_SPECIAL_SCRUTINY\n@@ -408,0 +422,5 @@\n+#ifdef KELVIN_SPECIAL_SCRUTINY\n+                 printf(PTR_FORMAT \": plab_alloc failed for size \" SIZE_FORMAT \", remaining words: \" SIZE_FORMAT \", retry with min plab size\\n\",\n+                        p2i(thread), size, plab->words_remaining());\n+                 fflush(stdout);\n+#endif\n@@ -413,0 +432,4 @@\n+#ifdef KELVIN_SPECIAL_SCRUTINY\n+                   printf(PTR_FORMAT \": disabling plab retres because plab alloc retry failed\\n\", p2i(thread));\n+                   fflush(stdout);\n+#endif\n@@ -417,0 +440,7 @@\n+#ifdef KELVIN_SPECIAL_SCRUTINY\n+               else {\n+                 printf(PTR_FORMAT \": plab_alloc failed for size \" SIZE_FORMAT \", remaining words: \" SIZE_FORMAT \", preserving plab to force shared allocation\\n\",\n+                        p2i(thread), size, plab->words_remaining());\n+                 fflush(stdout);\n+               }\n+#endif\n@@ -418,0 +448,6 @@\n+#ifdef KELVIN_SPECIAL_SCRUTINY\n+               if (!ShenandoahThreadLocalData::plab_retries_enabled(thread)) {\n+                 printf(PTR_FORMAT \": enabling plab retries because plab alloc succeeded\\n\", p2i(thread));\n+                 fflush(stdout);\n+               }\n+#endif\n@@ -432,3 +468,18 @@\n-      ShenandoahAllocRequest req = ShenandoahAllocRequest::for_shared_gc(size, target_gen);\n-      copy = allocate_memory(req, is_promotion);\n-      alloc_from_lab = false;\n+      if (!is_promotion || (size > PLAB::min_size())) {\n+        ShenandoahAllocRequest req = ShenandoahAllocRequest::for_shared_gc(size, target_gen);\n+        copy = allocate_memory(req, is_promotion);\n+        alloc_from_lab = false;\n+#ifdef KELVIN_SPECIAL_SCRUTINY\n+        printf(PTR_FORMAT \": tried shared allocation of size \" SIZE_FORMAT \", is_promotion: %s, %s\\n\",\n+               p2i(thread), size, is_promotion? \"true\": \"false\", (copy == nullptr)? \"failed\": \"succeeded\");\n+        fflush(stdout);\n+#endif\n+      }\n+      \/\/ else, we leave copy equal to NULL, signalling a promotion failure below if appropriate\n+#ifdef KELVIN_SPECIAL_SCRUTINY\n+      else {\n+        printf(PTR_FORMAT \": did NOT try shared allocation of size \" SIZE_FORMAT \", is_promotion: %s\\n\",\n+               p2i(thread), size, is_promotion? \"true\": \"false\");\n+        fflush(stdout);\n+      }\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":54,"deletions":3,"binary":false,"changes":57,"status":"modified"}]}