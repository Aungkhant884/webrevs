{"files":[{"patch":"@@ -229,1 +229,1 @@\n-  \/\/ Check if are need to learn a bit about the application\n+  \/\/ Check if we need to learn a bit about the application\n@@ -255,0 +255,3 @@\n+  log_debug(gc)(\"%s: average GC time: %.2f ms, allocation rate: %.0f %s\/s\",\n+    _generation->name(), avg_cycle_time * 1000, byte_size_in_proper_unit(avg_alloc_rate), proper_unit_for_byte_size(avg_alloc_rate));\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -263,0 +263,3 @@\n+  log_debug(gc)(\"%s: average GC time: %.2f ms, allocation rate: %.0f %s\/s\",\n+                _generation->name(), avg_cycle_time * 1000, byte_size_in_proper_unit(avg_alloc_rate), proper_unit_for_byte_size(avg_alloc_rate));\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveOldHeuristics.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -245,0 +245,1 @@\n+        _heap->generation_for(req.affiliation())->increase_allocated(waste);\n@@ -387,1 +388,3 @@\n-    _heap->notify_mutator_alloc_words(ShenandoahHeapRegion::region_size_words() - remainder, true);\n+    size_t waste = ShenandoahHeapRegion::region_size_words() - remainder;\n+    _heap->notify_mutator_alloc_words(waste, true);\n+    _heap->generation_for(req.affiliation())->increase_allocated(waste * HeapWordSize);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -120,1 +120,9 @@\n-  return ShenandoahHeap::heap()->bytes_allocated_since_gc_start();\n+  return Atomic::load(&_bytes_allocated_since_gc_start);;\n+}\n+\n+void ShenandoahGeneration::reset_bytes_allocated_since_gc_start() {\n+  Atomic::store(&_bytes_allocated_since_gc_start, (size_t)0);\n+}\n+\n+void ShenandoahGeneration::increase_allocated(size_t bytes) {\n+  Atomic::add(&_bytes_allocated_since_gc_start, bytes, memory_order_relaxed);\n@@ -276,1 +284,1 @@\n-  _affiliated_region_count(0), _used(0),\n+  _affiliated_region_count(0), _used(0), _bytes_allocated_since_gc_start(0),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+  volatile size_t _bytes_allocated_since_gc_start;\n@@ -78,0 +79,4 @@\n+  size_t bytes_allocated_since_gc_start();\n+  void reset_bytes_allocated_since_gc_start();\n+  void increase_allocated(size_t bytes);\n+\n@@ -82,2 +87,0 @@\n-  virtual size_t bytes_allocated_since_gc_start();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -506,1 +506,0 @@\n-  _bytes_allocated_since_gc_start(0),\n@@ -694,4 +693,0 @@\n-void ShenandoahHeap::increase_allocated(size_t bytes) {\n-  Atomic::add(&_bytes_allocated_since_gc_start, bytes, memory_order_relaxed);\n-}\n-\n@@ -703,1 +698,1 @@\n-  increase_allocated(bytes);\n+\n@@ -1022,0 +1017,1 @@\n+    ShenandoahGeneration* alloc_generation = generation_for(req.affiliation());\n@@ -1024,0 +1020,1 @@\n+    size_t actual_bytes = actual * HeapWordSize;\n@@ -1031,0 +1028,1 @@\n+      alloc_generation->increase_allocated(actual_bytes);\n@@ -1039,1 +1037,4 @@\n-      increase_used(actual*HeapWordSize);\n+      if (req.is_old()) {\n+        old_generation()->increase_allocated(actual_bytes);\n+      }\n+      increase_used(actual_bytes);\n@@ -2019,4 +2020,0 @@\n-size_t ShenandoahHeap::bytes_allocated_since_gc_start() {\n-  return Atomic::load(&_bytes_allocated_since_gc_start);\n-}\n-\n@@ -2024,1 +2021,6 @@\n-  Atomic::store(&_bytes_allocated_since_gc_start, (size_t)0);\n+  if (mode()->is_generational()) {\n+    young_generation()->reset_bytes_allocated_since_gc_start();\n+    old_generation()->reset_bytes_allocated_since_gc_start();\n+  }\n+\n+  global_generation()->reset_bytes_allocated_since_gc_start();\n@@ -2743,0 +2745,13 @@\n+\n+ShenandoahGeneration* ShenandoahHeap::generation_for(ShenandoahRegionAffiliation affiliation) const {\n+  if (!mode()->is_generational()) {\n+    return global_generation();\n+  } else if (affiliation == YOUNG_GENERATION) {\n+    return young_generation();\n+  } else if (affiliation == OLD_GENERATION) {\n+    return old_generation();\n+  }\n+\n+  ShouldNotReachHere();\n+  return nullptr;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -226,1 +226,0 @@\n-  volatile size_t _bytes_allocated_since_gc_start;\n@@ -240,1 +239,0 @@\n-  void increase_allocated(size_t bytes);\n@@ -242,1 +240,0 @@\n-  size_t bytes_allocated_since_gc_start();\n@@ -464,0 +461,1 @@\n+  ShenandoahGeneration*      generation_for(ShenandoahRegionAffiliation affiliation) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}