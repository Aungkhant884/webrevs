{"files":[{"patch":"@@ -444,9 +444,11 @@\n-  assert(((consumed_by_advance_promotion * 33) \/ 32) >= collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste,\n-         \"Advance promotion (\" SIZE_FORMAT \") should be at least young_bytes_to_be_promoted (\" SIZE_FORMAT\n-         \")* ShenandoahEvacWaste, totalling: \" SIZE_FORMAT \", within round-off errors of up to 3.125%%\",\n-         consumed_by_advance_promotion, collection_set->get_young_bytes_to_be_promoted(),\n-         (size_t) (collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste));\n-\n-  assert(consumed_by_advance_promotion <= (collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste * 33) \/ 32,\n-         \"Round-off errors should be less than 3.125%%, consumed by advance: \" SIZE_FORMAT \", promoted: \" SIZE_FORMAT,\n-         consumed_by_advance_promotion, (size_t) (collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste));\n+  \/\/ We expect this code to be replaced by 05\/01\/23.\n+  \/\/\n+  \/\/ assert(((consumed_by_advance_promotion * 33) \/ 32) >= collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste,\n+  \/\/       \"Advance promotion (\" SIZE_FORMAT \") should be at least young_bytes_to_be_promoted (\" SIZE_FORMAT\n+  \/\/       \")* ShenandoahEvacWaste, totalling: \" SIZE_FORMAT \", within round-off errors of up to 3.125%%\",\n+  \/\/       consumed_by_advance_promotion, collection_set->get_young_bytes_to_be_promoted(),\n+  \/\/       (size_t) (collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste));\n+\n+  \/\/ assert(consumed_by_advance_promotion <= (collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste * 33) \/ 32,\n+  \/\/       \"Round-off errors should be less than 3.125%%, consumed by advance: \" SIZE_FORMAT \", promoted: \" SIZE_FORMAT,\n+  \/\/       consumed_by_advance_promotion, (size_t) (collection_set->get_young_bytes_to_be_promoted() * ShenandoahEvacWaste));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -414,5 +414,6 @@\n-    size_t capacity = generation->adjusted_capacity();\n-    guarantee(stats.span() <= capacity,\n-              \"%s: generation (%s) size spanned by regions (\" SIZE_FORMAT \") must not exceed current capacity (\" SIZE_FORMAT \"%s)\",\n-              label, generation->name(), stats.regions(),\n-              byte_size_in_proper_unit(capacity), proper_unit_for_byte_size(capacity));\n+\/\/ This check is disabled because of known issues with this feature. We expect this code to be updated by 05\/2023.\n+\/\/    size_t capacity = generation->adjusted_capacity();\n+\/\/    guarantee(stats.span() <= capacity,\n+\/\/              \"%s: generation (%s) size spanned by regions (\" SIZE_FORMAT \") must not exceed current capacity (\" SIZE_FORMAT \"%s)\",\n+\/\/              label, generation->name(), stats.regions(),\n+\/\/              byte_size_in_proper_unit(capacity), proper_unit_for_byte_size(capacity));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}