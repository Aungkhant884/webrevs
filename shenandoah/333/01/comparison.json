{"files":[{"patch":"@@ -51,0 +51,1 @@\n+#include \"logging\/log.hpp\"\n@@ -908,0 +909,1 @@\n+\n@@ -909,1 +911,6 @@\n-    ml.wait();\n+    while (_mode == none) {\n+      bool timeout = ml.wait(5);\n+      if (LogTarget(Debug, gc, thread)::is_enabled() && timeout) {\n+        log_debug(gc, thread)(\"Regulator thread timed out waiting for cycle to start\");\n+      }\n+    }\n@@ -915,0 +922,1 @@\n+    assert(_mode == servicing_old, \"Cannot preempt old if old cycle isn't running.\");\n@@ -922,1 +930,6 @@\n-    ml.wait();\n+    while (_mode == servicing_old) {\n+      bool timeout = ml.wait(5);\n+      if (LogTarget(Debug, gc, thread)::is_enabled() && timeout) {\n+        log_debug(gc, thread)(\"Regulator thread timed out waiting to preempt old cycle\");\n+      }\n+    }\n@@ -1090,1 +1103,0 @@\n-    _mode = new_mode;\n@@ -1092,0 +1104,1 @@\n+    _mode = new_mode;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        if (_control_thread->request_concurrent_gc(ShenandoahControlThread::select_global_generation())) {\n+        if (request_concurrent_gc(ShenandoahControlThread::select_global_generation())) {\n@@ -140,0 +140,7 @@\n+  if (LogTarget(Debug, gc, thread)::is_enabled()) {\n+    double elapsed = os::elapsedTime() - current;\n+    double hiccup = elapsed - double(_sleep);\n+    if (hiccup > 0.001) {\n+      log_debug(gc, thread)(\"Regulator hiccup time: %.3fs\", hiccup);\n+    }\n+  }\n@@ -143,2 +150,17 @@\n-  return !ShenandoahHeap::heap()->doing_mixed_evacuations() && !ShenandoahHeap::heap()->collection_set()->has_old_regions() &&\n-    _old_heuristics->should_start_gc() && _control_thread->request_concurrent_gc(OLD);\n+  \/\/ TODO: These first two checks might be vestigial\n+  return !ShenandoahHeap::heap()->doing_mixed_evacuations()\n+      && !ShenandoahHeap::heap()->collection_set()->has_old_regions()\n+      && _old_heuristics->should_start_gc()\n+      && request_concurrent_gc(OLD);\n+}\n+\n+bool ShenandoahRegulatorThread::request_concurrent_gc(ShenandoahGenerationType generation) {\n+  double now = os::elapsedTime();\n+  bool accepted = _control_thread->request_concurrent_gc(generation);\n+  if (LogTarget(Debug, gc, thread)::is_enabled() && accepted) {\n+    double wait_time = os::elapsedTime() - now;\n+    if (wait_time > 0.001) {\n+      log_debug(gc, thread)(\"Regulator waited %.3fs for control thread to acknowledge request.\", wait_time);\n+    }\n+  }\n+  return accepted;\n@@ -148,1 +170,1 @@\n-  return _young_heuristics->should_start_gc() && _control_thread->request_concurrent_gc(YOUNG);\n+  return _young_heuristics->should_start_gc() && request_concurrent_gc(YOUNG);\n@@ -152,1 +174,1 @@\n-  return _global_heuristics->should_start_gc() && _control_thread->request_concurrent_gc(ShenandoahControlThread::select_global_generation());\n+  return _global_heuristics->should_start_gc() && request_concurrent_gc(ShenandoahControlThread::select_global_generation());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+\n+  bool request_concurrent_gc(ShenandoahGenerationType generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}