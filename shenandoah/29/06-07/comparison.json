{"files":[{"patch":"@@ -58,12 +58,13 @@\n-  if (ShenandoahGCHeuristics != NULL) {\n-    if (strcmp(ShenandoahGCHeuristics, \"aggressive\") == 0) {\n-      return new ShenandoahAggressiveOldHeuristics(generation);\n-    } else if (strcmp(ShenandoahGCHeuristics, \"static\") == 0) {\n-      return new ShenandoahStaticOldHeuristics(generation);\n-    } else if (strcmp(ShenandoahGCHeuristics, \"adaptive\") == 0) {\n-      return new ShenandoahAdaptiveOldHeuristics(generation);\n-    } else if (strcmp(ShenandoahGCHeuristics, \"compact\") == 0) {\n-      return new ShenandoahCompactOldHeuristics(generation);\n-    } else {\n-      vm_exit_during_initialization(\"Unknown -XX:ShenandoahGCHeuristics option\");\n-    }\n+  assert(ShenandoahGCHeuristics != NULL, \"ShenandoahGCHeuristics should not equal NULL\");\n+  if (strcmp(ShenandoahGCHeuristics, \"aggressive\") == 0) {\n+    return new ShenandoahAggressiveOldHeuristics(generation);\n+  } else if (strcmp(ShenandoahGCHeuristics, \"static\") == 0) {\n+    return new ShenandoahStaticOldHeuristics(generation);\n+  } else if (strcmp(ShenandoahGCHeuristics, \"adaptive\") == 0) {\n+    return new ShenandoahAdaptiveOldHeuristics(generation);\n+  } else if (strcmp(ShenandoahGCHeuristics, \"compact\") == 0) {\n+    return new ShenandoahCompactOldHeuristics(generation);\n+  } else {\n+    vm_exit_during_initialization(\"Unknown -XX:ShenandoahGCHeuristics option\");\n+    ShouldNotReachHere();\n+    return NULL;\n@@ -71,2 +72,0 @@\n-  ShouldNotReachHere();\n-  return NULL;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.cpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -65,5 +65,2 @@\n-  if (ShenandoahGCHeuristics != NULL) {\n-    return new ShenandoahPassiveOldHeuristics(generation);\n-  }\n-  ShouldNotReachHere();\n-  return NULL;\n+  assert(ShenandoahGCHeuristics != NULL, \"ShenandoahGCHeuristics should not equal NULL\");\n+  return new ShenandoahPassiveOldHeuristics(generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n- protected:\n+protected:\n@@ -130,1 +130,1 @@\n- private:\n+private:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  _old_heuristics(NULL),\n+  _old_heuristics(nullptr),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,0 +72,7 @@\n+void ShenandoahOldGC::entry_old_evacuations() {\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  ShenandoahOldHeuristics* old_heuristics = heap->old_heuristics();\n+  entry_coalesce_and_fill();\n+  old_heuristics->start_old_evacuations();\n+}\n+\n@@ -84,5 +91,1 @@\n-  ShenandoahOldHeuristics* old_heuristics = heap->old_heuristics();\n-\n-  entry_coalesce_and_fill();\n-\n-  old_heuristics->start_old_evacuations();\n+  entry_old_evacuations();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-  void entry_coalesce_and_fill();\n@@ -39,0 +38,2 @@\n+  void entry_old_evacuations();\n+  void entry_coalesce_and_fill();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}