[{"commit":{"message":"Change definition of CollectionThresholdGarbagePercent\n\nThis is now defined to equal ShenandoahGarbageThreshold, which seems to have\na default value of 25.  The effect on running workloads is to choose more\nregions for the collection set than was observed with the previous\nconfiguration.\n\nAlso addressed several improvements in white space and comments.\n\nThe code now runs tier1 and hotspot_gc_shenandoah without regressions.  It\nalso succsessfully runs an Extremem stress test up until the point of\nfailure due to triggering of full GC (after 113 completed GC passes, including\ntwo old-gen GC passes)."},"files":[{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp"},{"filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/generational\/TestConcurrentEvac.java"}],"sha":"c8377a534be405d2e2969701a2ceebc016389eaa"}]