{"files":[{"patch":"@@ -112,3 +112,0 @@\n-const size_t ShenandoahRegionChunkIterator::_smallest_chunk_size_words = (_clusters_in_smallest_chunk * CardTable::card_size_in_words() *\n-                                                  ShenandoahCardCluster<ShenandoahDirectCardMarkRememberedSet>::CardsPerCluster);\n-\n@@ -145,1 +142,1 @@\n-  size_t smallest_group_span = _smallest_chunk_size_words * _regular_group_size;\n+  size_t smallest_group_span = smallest_chunk_size_words() * _regular_group_size;\n@@ -185,1 +182,1 @@\n-  size_t smallest_group_span = _smallest_chunk_size_words * _regular_group_size;\n+  size_t smallest_group_span = smallest_chunk_size_words() * _regular_group_size;\n@@ -222,1 +219,1 @@\n-        size_t chunk_span = _smallest_chunk_size_words;\n+        size_t chunk_span = smallest_chunk_size_words();\n@@ -257,2 +254,2 @@\n-  assert(_smallest_chunk_size_words == expected_chunk_size_words, \"_smallest_chunk_size (\" SIZE_FORMAT\") is not valid because it does not equal (\" SIZE_FORMAT \")\",\n-      _smallest_chunk_size_words, expected_chunk_size_words);\n+  assert(smallest_chunk_size_words() == expected_chunk_size_words, \"_smallest_chunk_size (\" SIZE_FORMAT\") is not valid because it does not equal (\" SIZE_FORMAT \")\",\n+         smallest_chunk_size_words(), expected_chunk_size_words);\n@@ -262,1 +259,1 @@\n-  assert(_smallest_chunk_size_words << (_maximum_groups - 1) == _maximum_chunk_size_words,\n+  assert(smallest_chunk_size_words() << (_maximum_groups - 1) == _maximum_chunk_size_words,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -497,1 +497,1 @@\n-  static constexpr size_t CardsPerCluster = 64;\n+  static const size_t CardsPerCluster = 64;\n@@ -1024,1 +1024,1 @@\n-  static const size_t _maximum_chunk_size_words = (4 * M) \/ HeapWordSize;\n+  static const size_t _maximum_chunk_size_words = (4 * 1024 * 1024) \/ HeapWordSize;\n@@ -1026,1 +1026,1 @@\n-  static constexpr size_t _clusters_in_smallest_chunk = 4;\n+  static const size_t _clusters_in_smallest_chunk = 4;\n@@ -1028,2 +1028,2 @@\n-  \/\/ smallest_chunk_size is 4 clusters (i.e. 128 KiB).  Note that there are 64 cards per cluster.  Each cluster spans\n-  \/\/ 128 KiB (using a 64 bit word).\n+  \/\/ smallest_chunk_size is 4 clusters (i.e. 128 KiB).  Note that there are 64 words per card and there are 64 cards per\n+  \/\/ cluster.  Each cluster spans 128 KiB.\n@@ -1032,1 +1032,6 @@\n-  static const size_t _smallest_chunk_size_words;\n+  \/\/ We can't perform this computation here, because of encapsulation and initialization constraints.  We paste\n+  \/\/ the magic number here, and assert that this number matches the intended computation in constructor.\n+  static size_t smallest_chunk_size_words() {\n+      return _clusters_in_smallest_chunk * CardTable::card_size_in_words() *\n+             ShenandoahCardCluster<ShenandoahDirectCardMarkRememberedSet>::CardsPerCluster;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}