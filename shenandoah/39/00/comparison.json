{"files":[{"patch":"@@ -686,1 +686,3 @@\n-  void mark_card_as_dirty(HeapWord* location);\n+  void dirty_cards(HeapWord* start, HeapWord* end);\n+  void clear_cards(HeapWord* start, HeapWord* end);\n+  void mark_card_as_dirty(void* location);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -629,1 +629,1 @@\n-    _card_scan->mark_range_as_empty(region->bottom(), (uint32_t) (region->end() - region->bottom()));\n+    _card_scan->mark_range_as_empty(region->bottom(), pointer_delta(region->end(), region->bottom()));\n@@ -633,1 +633,13 @@\n-inline void ShenandoahHeap::mark_card_as_dirty(HeapWord* location) {\n+inline void ShenandoahHeap::dirty_cards(HeapWord* start, HeapWord* end) {\n+  assert(mode()->is_generational(), \"Should only be used for generational mode\");\n+  size_t words = pointer_delta(end, start);\n+  _card_scan->mark_range_as_dirty(start, words);\n+}\n+\n+inline void ShenandoahHeap::clear_cards(HeapWord* start, HeapWord* end) {\n+  assert(mode()->is_generational(), \"Should only be used for generational mode\");\n+  size_t words = pointer_delta(end, start);\n+  _card_scan->mark_range_as_clean(start, words);\n+}\n+\n+inline void ShenandoahHeap::mark_card_as_dirty(void* location) {\n@@ -635,1 +647,1 @@\n-    _card_scan->mark_card_as_dirty(location);\n+    _card_scan->mark_card_as_dirty((HeapWord*)location);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -486,0 +486,1 @@\n+    HeapWord* tams = marking_context->top_at_mark_start(this);\n@@ -497,2 +498,2 @@\n-        HeapWord* next_marked_obj = marking_context->get_next_marked_addr(obj_addr, t);\n-        assert(next_marked_obj <= t, \"next marked object cannot exceed top\");\n+        HeapWord* next_marked_obj = marking_context->get_next_marked_addr(obj_addr, tams);\n+        assert(next_marked_obj <= tams, \"next marked object cannot exceed top at mark start\");\n@@ -833,2 +834,1 @@\n-      volatile CardTable::CardValue* card_value = ShenandoahBarrierSet::barrier_set()->card_table()->byte_for(address);\n-      *card_value = CardTable::dirty_card_val();\n+      ShenandoahHeap::heap()->mark_card_as_dirty(address);\n@@ -877,4 +877,4 @@\n-      if (top() < end()) {\n-        ShenandoahHeap::fill_with_object(top(), (end() - top()) \/ HeapWordSize);\n-        heap->card_scan()->register_object(top());\n-        ShenandoahBarrierSet::barrier_set()->card_table()->clear_MemRegion(MemRegion(top(), end()));\n+      if (r->top() < r->end()) {\n+        ShenandoahHeap::fill_with_object(r->top(), (r->end() - r->top()) \/ HeapWordSize);\n+        heap->card_scan()->register_object(r->top());\n+        heap->clear_cards(r->top(), r->end());\n@@ -882,1 +882,1 @@\n-      ShenandoahBarrierSet::barrier_set()->card_table()->dirty_MemRegion(MemRegion(bottom(), top()));\n+      heap->dirty_cards(r->bottom(), r->top());\n@@ -897,1 +897,0 @@\n-    ShenandoahBarrierSet::barrier_set()->card_table()->clear_MemRegion(MemRegion(top(), end()));\n@@ -902,0 +901,1 @@\n+    heap->dirty_cards(bottom(), top());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-      ShenandoahHeap::heap()->mark_card_as_dirty((HeapWord*)p);\n+      ShenandoahHeap::heap()->mark_card_as_dirty(p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}