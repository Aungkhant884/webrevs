{"files":[{"patch":"@@ -58,0 +58,2 @@\n+const uint ShenandoahAdaptiveHeuristics::MINIMUM_RESIZE_INTERVAL = 10;\n+\n@@ -238,0 +240,1 @@\n+  ++_cycles_since_last_resize;\n@@ -486,4 +489,3 @@\n-  if (_gc_times_learned < ShenandoahLearningSteps) {\n-    \/\/ We aren't going to attempt to resize our generation until we have 'learned'\n-    \/\/ something about it. This provides a kind of cool down period after we've made\n-    \/\/ a change, to help prevent thrashing.\n+  if (_cycles_since_last_resize <= MINIMUM_RESIZE_INTERVAL) {\n+    log_info(gc, ergo)(\"Not resizing %s for another \" UINT32_FORMAT \" cycles.\",\n+        _generation->name(),  _cycles_since_last_resize);\n@@ -495,0 +497,1 @@\n+    log_info(gc, ergo)(\"Could not increase size of %s, begin gc cycle.\", _generation->name());\n@@ -498,0 +501,1 @@\n+  log_info(gc)(\"Increased size of %s generation, re-evaluate trigger criteria\", _generation->name());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -88,0 +88,7 @@\n+  \/\/ At least this many cycles must execute before the heuristic will attempt\n+  \/\/ to resize its generation. This is to prevent the heuristic from rapidly\n+  \/\/ maxing out the generation size (which only forces the collector for the\n+  \/\/ other generation to run more frequently, defeating the purpose of improving\n+  \/\/ MMU).\n+  const static uint MINIMUM_RESIZE_INTERVAL;\n+\n@@ -131,0 +138,4 @@\n+\n+  \/\/ Do not attempt to resize the generation for this heuristic until this\n+  \/\/ value is greater than MINIMUM_RESIZE_INTERVAL.\n+  uint _cycles_since_last_resize;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1008,1 +1008,0 @@\n-  heuristics()->reset_gc_learning();\n@@ -1017,1 +1016,0 @@\n-  heuristics()->reset_gc_learning();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}