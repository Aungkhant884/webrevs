{"files":[{"patch":"@@ -1,14 +0,0 @@\n-This repository contains source code of tests and tools for Java FX.\n-\n-For more information, please consult README files whithin subdirectories.\n-\n-Layout:\n-tools - test tools\n-tools\/Jemmy - JemmyFX tool and accompanying tools.\n-bigapps - test suites based on using real world applicashions.\n-bigapps\/EnsembleTests - tests using the Ensemble app.\n-\n-It is possible, although not required, to set tested JavaFX version by calling\n-$ ant -Djavafx.rt=<Java FX RE location> jar\n-javafx.rt must be set so that there is lib\/jfxrt.jar within it.\n-\n","filename":"README","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -0,0 +1,72 @@\n+# JFX-Tests\n+\n+This repository contains the tests and tools for JavaFX.\n+\n+\n+## Layout\n+\n+- tools - test tools\n+- tools\/Jemmy - JemmyFX tool and accompanying tools.\n+- bigapps - test suites based on using real world applications.[Not working yet]\n+- bigapps\/EnsembleTests - tests using the Ensemble app [Not working yet]\n+- functional - This directory contains functional test suites for JavaFX.\n+\n+## Dependencies\n+\n+1) Bash Shell\n+2) JDK (version 19+)\n+3) JavaFX sdk (SDK built out of the latest javafx-mainline or downloaded)\n+4) ant (version 1.10 and above)\n+5) Jtreg - We need a jtreg that contains lib\/junit.jar file. e.g. version jtreg-6.2.1. See [Jtreg](https:\/\/openjdk.org\/jtreg)\n+6) Jemmy-v3 library\n+   - git clone https:\/\/github.com\/openjdk\/jemmy-v3.git\n+   - cd jemmy-v3\/core\n+   - ant build\n+\n+   This builds 4 Jemmy jar files in jemmy-v3\/core\/build \n+\n+\n+## Building and Running tests\n+\n+### Runing tests present under `functional` directory\n+\n+As of now, 3DTests, ControlsTests, FxmlTests and SceneGraphTests compile and can be run from these respective directories.\n+NOTE : They do not run from the top level `jfx-tests` directory.\n+\n+1) Change to bash shell\n+2) export SHELL=\/bin\/bash\n+3) Set JAVA_HOME\n+4) Set PATH to java and ant executables\n+5) Clone the test repo\n+git clone https:\/\/github.com\/openjdk\/jfx-tests.git\n+(OR - clone your own personal fork of the - https:\/\/github.com\/openjdk\/jfx-tests repository)\n+\n+6) **To execute 'SceneGraphTests' tests**\n+\n+- cd jfx-tests\/functional\/SceneGraphTests\n+- Issue following command (replace the local paths appropriately) to run a set of SceneGraphTests tests\n+\n+`ant -v -Djemmy-v3.jars=<Path to Jemmy repository>\/jemmy-v3\/core\/build -Djavafx.home=<Path to a locally built OR downloaded JavaFX sdk> -Djtreg.home=<Path to Jtreg tool> test`\n+\n+- To run a single test provide - `-Dtests=<Path and test file name from SceneGraphTests\/tests>` before `test` in above command\n+\n+7) **Generating golden images**\n+\n+A golden image is a manually verified image of the expected graphical output of a test. Many of the javafx functional tests depend upon golden images for image comparison and and assertion testing.\n+In the absence of a centrally hosted directory of golden images, you must generate these golden images once and then subsequently run the tests. Here are the steps to generate golden images\n+\n+a) Run the required tests (e.g. functional\/SceneGraphTests) as described in step (6) above. This test run results in multiple test failures, but generates screenshots of test window in `build\/images` directory. If satisfied with the expected graphical output, these images can be used as golden images by copying them to `build\/golden\/SceneGraphTests\/prism\/mac` directory (for a test run on macOS). Note - this directory structure needs to be created if not present.\n+\n+b) After placing the golden images in the directory mentioned above, re-run the tests using step (6).\n+\n+### Runing tests present under `bigapps` directory\n+\n+These tests do not run\n+\n+TODO: Make these tests runnable\n+\n+### Runing tests present under `bigapps\/EnsembleTests` directory\n+\n+These tests do not run\n+\n+TODO: Make these tests runnable\n","filename":"README.md","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}