{"files":[{"patch":"@@ -2563,0 +2563,1 @@\n+      warning(\"Option --illegal-access is deprecated and will be removed in a future release.\");\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n- * Used by ModuleBootstrap for archiving the boot layer and the builder needed to\n- * set the IllegalAccessLogger.\n+ * Used by ModuleBootstrap for archiving the boot layer.\n@@ -37,1 +36,0 @@\n-    private final IllegalAccessLogger.Builder builder;\n@@ -39,2 +37,1 @@\n-    private ArchivedBootLayer(ModuleLayer bootLayer,\n-                              IllegalAccessLogger.Builder builder) {\n+    private ArchivedBootLayer(ModuleLayer bootLayer) {\n@@ -42,1 +39,0 @@\n-        this.builder = builder;\n@@ -49,4 +45,0 @@\n-    IllegalAccessLogger.Builder illegalAccessLoggerBuilder() {\n-        return builder;\n-    }\n-\n@@ -57,2 +49,2 @@\n-    static void archive(ModuleLayer layer, IllegalAccessLogger.Builder builder) {\n-        archivedBootLayer = new ArchivedBootLayer(layer, builder);\n+    static void archive(ModuleLayer layer) {\n+        archivedBootLayer = new ArchivedBootLayer(layer);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ArchivedBootLayer.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.util.Map;\n-import java.util.Set;\n@@ -36,1 +34,1 @@\n- * the system module finder, and the maps used to create the IllegalAccessLogger.\n+ * and the system module finder.\n@@ -46,2 +44,0 @@\n-    private final Map<String, Set<String>> concealedPackagesToOpen;\n-    private final Map<String, Set<String>> exportedPackagesToOpen;\n@@ -53,3 +49,1 @@\n-                                Function<String, ClassLoader> classLoaderFunction,\n-                                Map<String, Set<String>> concealedPackagesToOpen,\n-                                Map<String, Set<String>> exportedPackagesToOpen) {\n+                                Function<String, ClassLoader> classLoaderFunction) {\n@@ -61,2 +55,0 @@\n-        this.concealedPackagesToOpen = concealedPackagesToOpen;\n-        this.exportedPackagesToOpen = exportedPackagesToOpen;\n@@ -77,8 +69,0 @@\n-    Map<String, Set<String>> concealedPackagesToOpen() {\n-        return concealedPackagesToOpen;\n-    }\n-\n-    Map<String, Set<String>> exportedPackagesToOpen() {\n-        return exportedPackagesToOpen;\n-    }\n-\n@@ -113,3 +97,1 @@\n-                        Function<String, ClassLoader> classLoaderFunction,\n-                        Map<String, Set<String>> concealedPackagesToOpen,\n-                        Map<String, Set<String>> exportedPackagesToOpen) {\n+                        Function<String, ClassLoader> classLoaderFunction) {\n@@ -120,3 +102,1 @@\n-                                                      classLoaderFunction,\n-                                                      concealedPackagesToOpen,\n-                                                      exportedPackagesToOpen);\n+                                                      classLoaderFunction);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ArchivedModuleGraph.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -144,4 +144,4 @@\n-               getProperty(\"jdk.module.patch.0\") == null &&    \/\/ --patch-module\n-               getProperty(\"jdk.module.main\") == null &&\n-               getProperty(\"jdk.module.addmods.0\") == null  && \/\/ --add-modules\n-               getProperty(\"jdk.module.limitmods\") == null &&\n+               getProperty(\"jdk.module.patch.0\") == null &&       \/\/ --patch-module\n+               getProperty(\"jdk.module.main\") == null &&          \/\/ --module\n+               getProperty(\"jdk.module.addmods.0\") == null  &&    \/\/ --add-modules\n+               getProperty(\"jdk.module.limitmods\") == null &&     \/\/ --limit-modules\n@@ -151,1 +151,1 @@\n-               getProperty(\"jdk.module.illegalAccess\") == null;\n+               getProperty(\"jdk.module.illegalAccess\") == null;   \/\/ --illegal-access\n@@ -175,6 +175,0 @@\n-\n-            \/\/ IllegalAccessLogger needs to be set\n-            var illegalAccessLoggerBuilder = archivedBootLayer.illegalAccessLoggerBuilder();\n-            if (illegalAccessLoggerBuilder != null) {\n-                illegalAccessLoggerBuilder.complete();\n-            }\n@@ -195,1 +189,0 @@\n-\n@@ -199,0 +192,1 @@\n+        String illegalAccess = getAndRemoveProperty(\"jdk.module.illegalAccess\");\n@@ -230,1 +224,2 @@\n-                && !isPatched) {\n+                && !isPatched\n+                && illegalAccess == null) {\n@@ -467,13 +462,5 @@\n-        Map<String, Set<String>> concealedPackagesToOpen;\n-        Map<String, Set<String>> exportedPackagesToOpen;\n-        if (archivedModuleGraph != null) {\n-            concealedPackagesToOpen = archivedModuleGraph.concealedPackagesToOpen();\n-            exportedPackagesToOpen = archivedModuleGraph.exportedPackagesToOpen();\n-        } else {\n-            concealedPackagesToOpen = systemModules.concealedPackagesToOpen();\n-            exportedPackagesToOpen = systemModules.exportedPackagesToOpen();\n-        }\n-        IllegalAccessLogger.Builder builder =\n-            addIllegalAccess(upgradeModulePath,\n-                             concealedPackagesToOpen,\n-                             exportedPackagesToOpen,\n+        if (illegalAccess != null) {\n+            assert systemModules != null;\n+            addIllegalAccess(illegalAccess,\n+                             systemModules,\n+                             upgradeModulePath,\n@@ -482,0 +469,2 @@\n+        }\n+\n@@ -498,4 +487,1 @@\n-                                        clf,\n-                                        concealedPackagesToOpen,\n-                                        exportedPackagesToOpen);\n-\n+                                        clf);\n@@ -503,1 +489,1 @@\n-                ArchivedBootLayer.archive(bootLayer, builder);\n+                ArchivedBootLayer.archive(bootLayer);\n@@ -797,2 +783,2 @@\n-     * Process the --illegal-access option (and its default) to open packages\n-     * of system modules in the boot layer to code in unnamed modules.\n+     * Process the --illegal-access option to open packages of system modules\n+     * in the boot layer to code in unnamed modules.\n@@ -800,24 +786,17 @@\n-    private static IllegalAccessLogger.Builder\n-        addIllegalAccess(ModuleFinder upgradeModulePath,\n-                         Map<String, Set<String>> concealedPackagesToOpen,\n-                         Map<String, Set<String>> exportedPackagesToOpen,\n-                         ModuleLayer bootLayer,\n-                         boolean extraExportsOrOpens) {\n-        String value = getAndRemoveProperty(\"jdk.module.illegalAccess\");\n-        IllegalAccessLogger.Mode mode = IllegalAccessLogger.Mode.ONESHOT;\n-        if (value != null) {\n-            switch (value) {\n-                case \"deny\":\n-                    return null;\n-                case \"permit\":\n-                    break;\n-                case \"warn\":\n-                    mode = IllegalAccessLogger.Mode.WARN;\n-                    break;\n-                case \"debug\":\n-                    mode = IllegalAccessLogger.Mode.DEBUG;\n-                    break;\n-                default:\n-                    fail(\"Value specified to --illegal-access not recognized:\"\n-                            + \" '\" + value + \"'\");\n-                    return null;\n+    private static void addIllegalAccess(String illegalAccess,\n+                                         SystemModules systemModules,\n+                                         ModuleFinder upgradeModulePath,\n+                                         ModuleLayer bootLayer,\n+                                         boolean extraExportsOrOpens) {\n+\n+        if (illegalAccess.equals(\"deny\"))\n+            return;  \/\/ nothing to do\n+\n+        IllegalAccessLogger.Mode mode = switch (illegalAccess) {\n+            case \"permit\" -> IllegalAccessLogger.Mode.ONESHOT;\n+            case \"warn\"   -> IllegalAccessLogger.Mode.WARN;\n+            case \"debug\"  -> IllegalAccessLogger.Mode.DEBUG;\n+            default -> {\n+                fail(\"Value specified to --illegal-access not recognized:\"\n+                        + \" '\" + illegalAccess + \"'\");\n+                yield null;\n@@ -825,3 +804,1 @@\n-        }\n-        IllegalAccessLogger.Builder builder\n-            = new IllegalAccessLogger.Builder(mode, System.err);\n+        };\n@@ -829,0 +806,3 @@\n+        var builder = new IllegalAccessLogger.Builder(mode, System.err);\n+        Map<String, Set<String>> concealedPackagesToOpen = systemModules.concealedPackagesToOpen();\n+        Map<String, Set<String>> exportedPackagesToOpen = systemModules.exportedPackagesToOpen();\n@@ -890,1 +870,0 @@\n-        return builder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":40,"deletions":61,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,5 +242,0 @@\n-    public void testDeny(String action, Result expectedResult) throws Exception {\n-        run(action, expectedResult, \"--illegal-access=deny\");\n-    }\n-\n-    @Test(dataProvider = \"permitCases\")\n@@ -251,0 +246,5 @@\n+    @Test(dataProvider = \"denyCases\")\n+    public void testDeny(String action, Result expectedResult) throws Exception {\n+        run(action, expectedResult, \"--illegal-access=deny\");\n+    }\n+\n@@ -270,1 +270,0 @@\n-\n@@ -275,2 +274,2 @@\n-        \/\/ warning\n-        run(\"reflectPublicMemberNonExportedPackage\", successWithWarning());\n+        \/\/ not accessible\n+        run(\"reflectPublicMemberNonExportedPackage\", fail(\"IllegalAccessException\"));\n@@ -278,1 +277,1 @@\n-        \/\/ no warning due to --add-exports\n+        \/\/ should succeed with --add-exports\n@@ -282,5 +281,6 @@\n-        \/\/ attempt two illegal accesses, one allowed by --add-exports\n-        run(\"reflectPublicMemberNonExportedPackage\"\n-                + \",setAccessibleNonPublicMemberExportedPackage\",\n-            successWithWarning(),\n-            \"--add-exports\", \"java.base\/sun.security.x509=ALL-UNNAMED\");\n+        \/\/ not accessible\n+        run(\"setAccessibleNonPublicMemberNonExportedPackage\", fail(\"InaccessibleObjectException\"));\n+\n+        \/\/ should fail as --add-exports does not open package\n+        run(\"setAccessibleNonPublicMemberNonExportedPackage\", fail(\"InaccessibleObjectException\"),\n+                \"--add-exports\", \"java.base\/sun.nio.ch=ALL-UNNAMED\");\n@@ -293,2 +293,6 @@\n-        \/\/ warning\n-        run(\"setAccessibleNonPublicMemberExportedPackage\", successWithWarning());\n+        \/\/ not accessible\n+        run(\"reflectPublicMemberNonExportedPackage\", fail(\"IllegalAccessException\"));\n+\n+        \/\/ should succeed with --add-opens\n+        run(\"reflectPublicMemberNonExportedPackage\", successNoWarning(),\n+                \"--add-opens\", \"java.base\/sun.security.x509=ALL-UNNAMED\");\n@@ -296,1 +300,4 @@\n-        \/\/ no warning due to --add-opens\n+        \/\/ not accessible\n+        run(\"setAccessibleNonPublicMemberExportedPackage\", fail(\"InaccessibleObjectException\"));\n+\n+        \/\/ should succeed with --add-opens\n@@ -299,6 +306,0 @@\n-\n-        \/\/ attempt two illegal accesses, one allowed by --add-opens\n-        run(\"reflectPublicMemberNonExportedPackage\"\n-                + \",setAccessibleNonPublicMemberExportedPackage\",\n-            successWithWarning(),\n-            \"--add-opens\", \"java.base\/java.lang=ALL-UNNAMED\");\n@@ -383,6 +384,2 @@\n-        run(jarfile, \"setAccessibleNonPublicMemberExportedPackage\", successWithWarning());\n-\n-        \/\/ attempt two illegal accesses, one allowed by Add-Exports\n-        run(jarfile, \"reflectPublicMemberNonExportedPackage,\"\n-                + \"setAccessibleNonPublicMemberExportedPackage\",\n-            successWithWarning());\n+        run(jarfile, \"reflectPublicMemberNonExportedPackage\", successNoWarning(),\n+                \"--illegal-access=permit\");\n@@ -406,6 +403,2 @@\n-        run(jarfile, \"reflectPublicMemberNonExportedPackage\", successWithWarning());\n-\n-        \/\/ attempt two illegal accesses, one allowed by Add-Opens\n-        run(jarfile, \"reflectPublicMemberNonExportedPackage,\"\n-                + \"setAccessibleNonPublicMemberExportedPackage\",\n-            successWithWarning());\n+        run(jarfile, \"setAccessibleNonPublicMemberExportedPackage\", successNoWarning(),\n+                \"--illegal-access=permit\");\n@@ -415,2 +408,2 @@\n-     * Test that default behavior is to print a warning on the first illegal\n-     * access only.\n+     * Test that --illegal-access=permit behavior is to print a warning on the\n+     * first illegal access only.\n@@ -421,1 +414,2 @@\n-        int warningCount = count(run(action1).asLines(), \"WARNING\");\n+        int warningCount = count(run(action1, \"--illegal-access=permit\").asLines(), \"WARNING\");\n+        assertTrue(warningCount > 0);  \/\/ multi line warning\n@@ -424,1 +418,1 @@\n-        List<String> output1 = run(action1 + \",\" + action1).asLines();\n+        List<String> output1 = run(action1 + \",\" + action1, \"--illegal-access=permit\").asLines();\n@@ -428,1 +422,1 @@\n-        List<String> output2 = run(action1 + \",\" + action2).asLines();\n+        List<String> output2 = run(action1 + \",\" + action2, \"--illegal-access=permit\").asLines();\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/IllegalAccessTest.java","additions":35,"deletions":41,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @modules java.base\/sun.security.util\n+ * @modules java.base\/sun.security.util:open\n","filename":"test\/lib-test\/jdk\/test\/lib\/hexdump\/ASN1FormatterTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}