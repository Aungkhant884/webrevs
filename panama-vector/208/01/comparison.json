{"files":[{"patch":"@@ -584,0 +584,1 @@\n+  const TypeInstPtr* elem_klass    = gvn().type(argument(0))->isa_instptr();\n@@ -593,0 +594,7 @@\n+  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  if (!elem_type->is_primitive_type()) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n+    }\n+    return false; \/\/ should be primitive type\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -533,0 +533,2 @@\n+        case LaneType.SK_HALFFLOAT:\n+            return HalffloatVector.fromMemorySegment(rsp.check(Halffloat.class), ms, 0, bo, m.check(Halffloat.class)).check0(rsp);\n@@ -595,0 +597,7 @@\n+            case LaneType.SK_HALFFLOAT: {\n+                short[] a = new short[rlength];\n+                for (int i = 0; i < limit; i++) {\n+                    a[i] = Halffloat.valueOf((float) lanes[i]);\n+                }\n+                return HalffloatVector.fromArray(dsp.check(Halffloat.class), a, 0).check0(dsp);\n+            }\n@@ -645,0 +654,7 @@\n+            case LaneType.SK_HALFFLOAT: {\n+                short[] a = new short[rlength];\n+                for (int i = 0; i < limit; i++) {\n+                    a[i] = Halffloat.valueOf((float) lanes[i]);\n+                }\n+                return HalffloatVector.fromArray(dsp.check(Halffloat.class), a, 0).check0(dsp);\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2697,1 +2697,1 @@\n-            short e = a[i];\n+            short e = (short) Halffloat.valueOf(a[i]).floatValue();\n@@ -2715,1 +2715,1 @@\n-            res[i] = (double) a[i];\n+            res[i] = (double) Halffloat.valueOf(a[i]).floatValue();\n@@ -3853,1 +3853,1 @@\n-            super(shape, LaneType.of(short.class),\n+            super(shape, LaneType.of(Halffloat.class),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/HalffloatVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -665,0 +665,2 @@\n+    \/** Convert {@code byteVal} to {@code (halffloat)byteVal}. *\/\n+    public static final Conversion<Byte,Halffloat> B2H = convert(\"B2H\", 'C', byte.class, Halffloat.class, VO_KIND_CAST, VO_ALL);\n@@ -675,0 +677,2 @@\n+    \/** Convert {@code doubleVal} to {@code (halffloat)doubleVal}. *\/\n+    public static final Conversion<Double,Halffloat> D2H = convert(\"D2H\", 'C', double.class, Halffloat.class, VO_KIND_CAST, VO_ALL);\n@@ -685,0 +689,2 @@\n+    \/** Convert {@code floatVal} to {@code (halffloat)floatVal}. *\/\n+    public static final Conversion<Float,Halffloat> F2H = convert(\"F2H\", 'C', float.class, Halffloat.class, VO_KIND_CAST, VO_ALL);\n@@ -695,0 +701,2 @@\n+    \/** Convert {@code intVal} to {@code (halffloat)intVal}. *\/\n+    public static final Conversion<Integer,Halffloat> I2H = convert(\"I2H\", 'C', int.class, Halffloat.class, VO_KIND_CAST, VO_ALL);\n@@ -705,0 +713,2 @@\n+    \/** Convert {@code longVal} to {@code (halffloat)longVal}. *\/\n+    public static final Conversion<Long,Halffloat> L2H = convert(\"L2H\", 'C', long.class, Halffloat.class, VO_KIND_CAST, VO_ALL);\n@@ -715,0 +725,15 @@\n+    \/** Convert {@code shortVal} to {@code (halffloat)shortVal}. *\/\n+    public static final Conversion<Short,Halffloat> S2H = convert(\"S2H\", 'C', short.class, Halffloat.class, VO_KIND_CAST, VO_ALL);\n+    \/** Convert {@code halffloatVal} to {@code (byte)halffloatVal}. *\/\n+    public static final Conversion<Halffloat,Byte> H2B = convert(\"H2B\", 'C', Halffloat.class, byte.class, VO_KIND_CAST, VO_ALL);\n+    \/** Convert {@code halffloatVal} to {@code (short)halffloatVal}. *\/\n+    public static final Conversion<Halffloat,Short> H2S = convert(\"H2S\", 'C', Halffloat.class, short.class, VO_KIND_CAST, VO_ALL);\n+    \/** Convert {@code halffloatVal} to {@code (double)halffloatVal}. *\/\n+    public static final Conversion<Halffloat,Double> H2D = convert(\"H2D\", 'C', Halffloat.class, double.class, VO_KIND_CAST, VO_ALL);\n+    \/** Convert {@code halffloatVal} to {@code (float)halffloatVal}. *\/\n+    public static final Conversion<Halffloat,Float> H2F = convert(\"H2F\", 'C', Halffloat.class, float.class, VO_KIND_CAST, VO_ALL);\n+    \/** Convert {@code halffloatVal} to {@code (int)halffloatVal}. *\/\n+    public static final Conversion<Halffloat,Integer> H2I = convert(\"H2I\", 'C', Halffloat.class, int.class, VO_KIND_CAST, VO_ALL);\n+    \/** Convert {@code halffloatVal} to {@code (long)halffloatVal}. *\/\n+    public static final Conversion<Halffloat,Long> H2L = convert(\"H2L\", 'C', Halffloat.class, long.class, VO_KIND_CAST, VO_ALL);\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -3547,0 +3547,3 @@\n+#if[FP16]\n+            $type$ e = (short) Halffloat.valueOf(a[i]).floatValue();\n+#else[FP16]\n@@ -3548,0 +3551,1 @@\n+#end[FP16]\n@@ -3588,0 +3592,3 @@\n+#if[FP16]\n+            res[i] = (double) Halffloat.valueOf(a[i]).floatValue();\n+#else[FP16]\n@@ -3589,0 +3596,1 @@\n+#end[FP16]\n@@ -5422,1 +5430,1 @@\n-            super(shape, LaneType.of($type$.class),\n+            super(shape, LaneType.of($elemtype$.class),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.incubator.vector.Halffloat;\n@@ -159,0 +160,25 @@\n+    interface ToHalffloatF {\n+        short apply(int i);\n+    }\n+\n+    static short[] fill_halffloat(int s, ToHalffloatF f) {\n+        return fill_halffloat(new short[s], f);\n+    }\n+\n+    static short[] fill_halffloat(short[] a, ToHalffloatF f) {\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = f.apply(i);\n+        }\n+        if (a.length > 7) {\n+            a[0] = Halffloat.MAX_VALUE;\n+            a[1] = Halffloat.MIN_VALUE;\n+            a[2] = Halffloat.NEGATIVE_INFINITY;\n+            a[3] = Halffloat.POSITIVE_INFINITY;\n+            a[4] = Halffloat.NaN;\n+            a[5] = (short)0.0;\n+            a[6] = Short.MIN_VALUE;\n+        }\n+        return a;\n+    }\n+\n+\n@@ -183,0 +209,4 @@\n+    static final List<IntFunction<short[]>> HALFFLOAT_GENERATORS = List.of(\n+            withToString(\"Halffloat(i)\", (int s) -> fill_halffloat(s, i -> (short) (i * 100 + 1)))\n+    );\n+\n@@ -202,0 +232,3 @@\n+        else if (src == Halffloat.class) {\n+            return HALFFLOAT_GENERATORS;\n+        }\n@@ -209,1 +242,1 @@\n-        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class, Halffloat.class)) {\n@@ -213,1 +246,1 @@\n-            for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+            for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class, Halffloat.class)) {\n@@ -228,1 +261,1 @@\n-        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class, Halffloat.class)) {\n@@ -233,1 +266,1 @@\n-                for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+                for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class, Halffloat.class)) {\n@@ -248,1 +281,1 @@\n-        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class, Halffloat.class)) {\n@@ -251,1 +284,1 @@\n-                for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+                for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class, Halffloat.class)) {\n@@ -264,1 +297,0 @@\n-\n@@ -274,1 +306,2 @@\n-        else if (to == float.class)\n+        \/\/ Treat halffloat as float.\n+        else if (to == float.class || to == Halffloat.class)\n@@ -338,0 +371,2 @@\n+                                    VectorSpecies srcSpecies,\n+                                    VectorSpecies dstSpecies,\n@@ -339,0 +374,4 @@\n+        if (srcSpecies.elementType() == dstSpecies.elementType()) {\n+            System.arraycopy(src, srcPos, dest, destPos, length);\n+            return;\n+        }\n@@ -341,1 +380,8 @@\n-            Array.set(dest, destPos + i, c.apply(v));\n+            if (srcSpecies.elementType() == Halffloat.class) {\n+                 v = (Number) Halffloat.valueOf(v.shortValue()).floatValue();\n+            }\n+            v = (Number) c.apply(v);\n+            if (dstSpecies.elementType() == Halffloat.class) {\n+                 v = (Number) Halffloat.valueOf(v.floatValue());\n+            }\n+            Array.set(dest, destPos + i, v);\n@@ -423,2 +469,8 @@\n-        Object expected = Array.newInstance(destSpecies.elementType(), out_len);\n-        Object actual = Array.newInstance(destSpecies.elementType(), out_len);\n+        Object expected = null, actual = null;\n+        if (destSpecies.elementType() == Halffloat.class) {\n+            expected = Array.newInstance(short.class , out_len);\n+            actual = Array.newInstance(short.class, out_len);\n+        } else {\n+            expected = Array.newInstance(destSpecies.elementType(), out_len);\n+            actual = Array.newInstance(destSpecies.elementType(), out_len);\n+        }\n@@ -435,1 +487,1 @@\n-                copyConversionArray(in, i, expected, start_idx + j, src_species_len, convertValue);\n+                copyConversionArray(in, i, expected, start_idx + j, src_species_len, srcSpecies, destSpecies, convertValue);\n@@ -438,1 +490,1 @@\n-                copyConversionArray(in, start_idx + i, expected, j, dst_species_len, convertValue);\n+                copyConversionArray(in, start_idx + i, expected, j, dst_species_len, srcSpecies, destSpecies, convertValue);\n@@ -475,0 +527,4 @@\n+        if (srcSpecies.elementType() == Halffloat.class || dstSpecies.elementType() == Halffloat.class) {\n+            return;\n+        }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorConversionTest.java","additions":69,"deletions":13,"binary":false,"changes":82,"status":"modified"}]}