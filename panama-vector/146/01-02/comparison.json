{"files":[{"patch":"@@ -4111,1 +4111,1 @@\n-  if (opcode == Op_VectorCompress) {\n+  if (opcode == Op_CompressV) {\n@@ -4137,1 +4137,1 @@\n-    assert(opcode == Op_VectorExpand, \"\");\n+    assert(opcode == Op_ExpandV, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8745,4 +8745,4 @@\n-instruct evcompress_expand_reg(vec dst, vec src, kReg mask) %{\n-  match(Set dst (CompressV src mask));\n-  match(Set dst (ExpandV src mask));\n-  format %{ \"vcompress_expand $dst, $src, $mask\" %}\n+instruct vcompress_expand_reg(vec dst, vec src, kReg mask) %{\n+  match(Set dst (CompressV (Binary dst src) mask));\n+  match(Set dst (ExpandV (Binary dst src) mask));\n+  format %{ \"vector_compress_expand $dst, $src, $mask\" %}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4238,1 +4238,0 @@\n-    \"VectorCompress\", \"VectorExpand\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -431,2 +431,0 @@\n-macro(VectorExpand)\n-macro(VectorCompress)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2264,2 +2264,2 @@\n-    case Op_VectorCompress:\n-    case Op_VectorExpand:\n+    case Op_CompressV:\n+    case Op_ExpandV:\n@@ -2488,2 +2488,2 @@\n-    case Op_VectorCompress:\n-    case Op_VectorExpand: {\n+    case Op_CompressV:\n+    case Op_ExpandV: {\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -177,2 +177,2 @@\n-class VectorExpandNode;\n-class VectorCompressNode;\n+class ExpandVNode;\n+class CompressVNode;\n@@ -715,2 +715,2 @@\n-        DEFINE_CLASS_ID(VectorCompress, Vector, 3)\n-        DEFINE_CLASS_ID(VectorExpand, Vector, 4)\n+        DEFINE_CLASS_ID(CompressV, Vector, 3)\n+        DEFINE_CLASS_ID(ExpandV, Vector, 4)\n@@ -945,2 +945,2 @@\n-  DEFINE_CLASS_QUERY(VectorCompress);\n-  DEFINE_CLASS_QUERY(VectorExpand);\n+  DEFINE_CLASS_QUERY(CompressV);\n+  DEFINE_CLASS_QUERY(ExpandV);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -573,2 +573,2 @@\n-  case Op_VectorExpand: return new VectorExpandNode(n1, n2, n3, vt);\n-  case Op_VectorCompress: return new VectorCompressNode(n1, n2, n3, vt);\n+  case Op_ExpandV: return new ExpandVNode(n1, n2, n3, vt);\n+  case Op_CompressV: return new CompressVNode(n1, n2, n3, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -718,5 +718,6 @@\n-class CompressVNode : public VectorNode {\n-public:\n-  CompressVNode(Node* vec1, Node* mask)\n-    : VectorNode(vec1, mask, vec1->bottom_type()->is_vect()) {}\n-\n+class CompressVNode: public VectorNode {\n+ public:\n+  CompressVNode(Node* vec1, Node* vec2, Node* mask, const TypeVect* vt) :\n+      VectorNode(vec1, vec2, mask, vt) {\n+    init_class_id(Class_CompressV);\n+  }\n@@ -724,2 +725,0 @@\n-  Node* vec1() const { return in(1); }\n-  Node* vec_mask() const { return in(2); }\n@@ -730,5 +729,6 @@\n-class ExpandVNode : public VectorNode {\n-public:\n-  ExpandVNode(Node* vec1, Node* mask)\n-    : VectorNode(vec1, mask, vec1->bottom_type()->is_vect()) {}\n-\n+class ExpandVNode: public VectorNode {\n+ public:\n+  ExpandVNode(Node* vec1, Node* vec2, Node* mask, const TypeVect* vt) :\n+      VectorNode(vec1, vec2, mask, vt) {\n+    init_class_id(Class_ExpandV);\n+  }\n@@ -736,2 +736,0 @@\n-  Node* vec1() const { return in(1); }\n-  Node* vec_mask() const { return in(2); }\n@@ -1351,18 +1349,0 @@\n-class VectorExpandNode: public VectorNode {\n- public:\n-  VectorExpandNode(Node* vec1, Node* vec2, Node* mask, const TypeVect* vt) :\n-      VectorNode(vec1, vec2, mask, vt) {\n-    init_class_id(Class_VectorExpand);\n-  }\n-  virtual int Opcode() const;\n-};\n-\n-class VectorCompressNode: public VectorNode {\n- public:\n-  VectorCompressNode(Node* vec1, Node* vec2, Node* mask, const TypeVect* vt) :\n-      VectorNode(vec1, vec2, mask, vt) {\n-    init_class_id(Class_VectorCompress);\n-  }\n-  virtual int Opcode() const;\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":12,"deletions":32,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -452,1 +452,1 @@\n-        case T_DOUBLE: return Op_VectorExpand;\n+        case T_DOUBLE: return Op_ExpandV;\n@@ -464,1 +464,1 @@\n-        case T_DOUBLE: return Op_VectorCompress;\n+        case T_DOUBLE: return Op_CompressV;\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,0 +461,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -469,0 +472,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -472,0 +475,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -472,0 +475,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -472,0 +475,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -472,0 +475,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -472,0 +475,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,0 +474,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -482,0 +485,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -480,0 +480,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n@@ -488,0 +491,3 @@\n+        if (m.allTrue()) {\n+            return this;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}