{"files":[{"patch":"@@ -7833,0 +7833,156 @@\n+void Assembler::vpcompressps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x8A, (0xC0 | encode));\n+}\n+\n+void Assembler::vpcompresspd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x8A, (0xC0 | encode));\n+}\n+\n+void Assembler::vpcompressb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_avx512_vbmi2(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x63, (0xC0 | encode));\n+}\n+\n+void Assembler::vpcompressw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_avx512_vbmi2(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x63, (0xC0 | encode));\n+}\n+\n+void Assembler::vpcompressd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x8B, (0xC0 | encode));\n+}\n+\n+void Assembler::vpcompressq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(src->encoding(), 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x8B, (0xC0 | encode));\n+}\n+\n+void Assembler::vpexpandps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x88, (0xC0 | encode));\n+}\n+\n+void Assembler::vpexpandpd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x88, (0xC0 | encode));\n+}\n+\n+void Assembler::vpexpandb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_avx512_vbmi2(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x62, (0xC0 | encode));\n+}\n+\n+void Assembler::vpexpandw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_avx512_vbmi2(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x62, (0xC0 | encode));\n+}\n+\n+void Assembler::vpexpandd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x89, (0xC0 | encode));\n+}\n+\n+void Assembler::vpexpandq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x89, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":156,"deletions":0,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -2545,0 +2545,15 @@\n+  \/\/ Vector compress\/expand instructions.\n+  void vpcompressb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpcompressw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpcompressd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpcompressq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpcompressps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpcompresspd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+\n+  void vpexpandb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpexpandw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpexpandd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpexpandq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpexpandps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void vpexpandpd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -4108,0 +4108,28 @@\n+\n+void C2_MacroAssembler::vpcompress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n+                                          bool merge, BasicType bt, int vec_enc) {\n+  if (opcode == Op_VectorCompress) {\n+    switch(bt) {\n+      case T_BYTE: vpcompressb(dst, mask, src, merge, vec_enc); break;\n+      case T_CHAR:\n+      case T_SHORT: vpcompressw(dst, mask, src, merge, vec_enc); break;\n+      case T_INT: vpcompressd(dst, mask, src, merge, vec_enc); break;\n+      case T_FLOAT: vpcompressps(dst, mask, src, merge, vec_enc); break;\n+      case T_LONG: vpcompressq(dst, mask, src, merge, vec_enc); break;\n+      case T_DOUBLE: vpcompresspd(dst, mask, src, merge, vec_enc); break;\n+      default: fatal(\"Unsupported type\"); break;\n+    }\n+  } else {\n+    assert(opcode == Op_VectorExpand, \"\");\n+    switch(bt) {\n+      case T_BYTE: vpexpandb(dst, mask, src, merge, vec_enc); break;\n+      case T_CHAR:\n+      case T_SHORT: vpexpandw(dst, mask, src, merge, vec_enc); break;\n+      case T_INT : vpexpandd(dst, mask, src, merge, vec_enc); break;\n+      case T_FLOAT: vpexpandps(dst, mask, src, merge, vec_enc); break;\n+      case T_LONG: vpexpandq(dst, mask, src, merge, vec_enc); break;\n+      case T_DOUBLE: vpexpandpd(dst, mask, src, merge, vec_enc); break;\n+      default: fatal(\"Unsupported type\"); break;\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -95,0 +95,3 @@\n+  void vpcompress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n+                         bool merge, BasicType bt, int vec_enc);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1837,0 +1837,12 @@\n+    case Op_VectorExpand:\n+    case Op_VectorCompress:\n+      if (!VM_Version::supports_evex()) {\n+        return false;\n+      }\n+      if (size_in_bits < 512 && !VM_Version::supports_avx512vl()) {\n+        return false;\n+      }\n+      if (is_subword_type(bt) && !VM_Version::supports_avx512_vbmi2()) {\n+        return false;\n+      }\n+      break;\n@@ -4567,1 +4579,1 @@\n-    __ insertps($dst$$XMMRegister, $val$$XMMRegister, $idx$$constant);\n+    __ insertps($dst$$XMMRegister, $val$$XMMRegister, $idx$$constant << 4);\n@@ -4587,1 +4599,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4593,1 +4605,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -8728,0 +8740,16 @@\n+\n+\/\/ --------------------------------- Compress\/Expand Operations ---------------------------\n+\n+instruct vcompexpr_evex(vec dst, vec src, kReg mask) %{\n+  match(Set dst (VectorCompress (Binary dst src) mask));\n+  match(Set dst (VectorExpand (Binary dst src) mask));\n+  format %{ \"vpcompress_expand $dst,$src,$mask\\t! vector compress\/expand operation\" %}\n+  ins_encode %{\n+    int vector_len = vector_length_encoding(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int opcode      = this->ideal_Opcode();\n+    __ vpcompress_expand(opcode, $dst$$XMMRegister, $src$$XMMRegister, $mask$$KRegister, true, bt, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -4237,0 +4237,1 @@\n+    \"VectorCompress\", \"VectorExpand\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1094,0 +1094,11 @@\n+  do_intrinsic(_VectorComExp, jdk_internal_vm_vector_VectorSupport, vector_comexp_op_name, vector_comexp_op_sig, F_S)                           \\\n+   do_signature(vector_comexp_op_sig, \"(I\"                                                                                                     \\\n+                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n+                                      \"Ljava\/lang\/Class;Ljava\/lang\/Class;\"                                                                     \\\n+                                      \"I\"                                                                                                      \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                          \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                          \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\"                                                      \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$ComExpOperation;)\"                                                \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                         \\\n+   do_name(vector_comexp_op_name,     \"comExpOp\")                                                                                              \\\n@@ -1202,1 +1213,1 @@\n-  LAST_COMPILER_INLINE = _VectorMaskOp,\n+  LAST_COMPILER_INLINE = _VectorComExp,\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -700,0 +700,1 @@\n+  case vmIntrinsics::_VectorComExp:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -429,0 +429,2 @@\n+macro(VectorExpand)\n+macro(VectorCompress)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -683,0 +683,2 @@\n+  case vmIntrinsics::_VectorComExp:\n+    return inline_vector_comexp();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,0 +332,1 @@\n+  bool inline_vector_comexp();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2264,0 +2264,2 @@\n+    case Op_VectorCompress:\n+    case Op_VectorExpand:\n@@ -2483,0 +2485,7 @@\n+      n->del_req(3);\n+      break;\n+    }\n+    case Op_VectorCompress:\n+    case Op_VectorExpand: {\n+      n->set_req(1, new BinaryNode(n->in(1), n->in(2)));\n+      n->set_req(2, n->in(3));\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -177,0 +177,2 @@\n+class VectorExpandNode;\n+class VectorCompressNode;\n@@ -713,0 +715,2 @@\n+        DEFINE_CLASS_ID(VectorCompress, Vector, 3)\n+        DEFINE_CLASS_ID(VectorExpand, Vector, 4)\n@@ -941,0 +945,2 @@\n+  DEFINE_CLASS_QUERY(VectorCompress);\n+  DEFINE_CLASS_QUERY(VectorExpand);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2691,0 +2691,97 @@\n+\/\/ public static\n+\/\/ <V extends Vector<E>,\n+\/\/  M extends VectorMask<E>,\n+\/\/  E>\n+\/\/  V comExpOp(int opr,\n+\/\/             Class<? extends V> vClass, Class<? extends M> mClass, Class<E> eClass,\n+\/\/             int length, V v1, V v2, M m,\n+\/\/             CmpExpOperation<V, M> defaultImpl)\n+bool LibraryCallKit::inline_vector_comexp() {\n+  const TypeInt*     opr          = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* vector_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* mask_klass   = gvn().type(argument(2))->isa_instptr();\n+  const TypeInstPtr* elem_klass   = gvn().type(argument(3))->isa_instptr();\n+  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n+\n+  if (vector_klass == NULL || elem_klass == NULL || mask_klass == NULL || vlen == NULL ||\n+      vector_klass->const_oop() == NULL || mask_klass->const_oop() == NULL ||\n+      elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n+                    NodeClassNames[argument(0)->Opcode()],\n+                    NodeClassNames[argument(1)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()]);\n+    }\n+    return false; \/\/ not enough info for intrinsification\n+  }\n+\n+  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  if (!elem_type->is_primitive_type()) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n+    }\n+    return false; \/\/ should be primitive type\n+  }\n+  if (!is_klass_initialized(vector_klass)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** klass argument not initialized\");\n+    }\n+    return false;\n+  }\n+\n+  BasicType elem_bt = elem_type->basic_type();\n+  int num_elem = vlen->get_con();\n+  int opc = VectorSupport::vop2ideal(opr->get_con(), elem_bt);\n+\n+  ciKlass* vbox_klass = vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  const TypeInstPtr* vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, vbox_klass);\n+\n+  if (!arch_supports_vector(opc, num_elem, elem_bt, VecMaskUseLoad)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: opc=%d vlen=%d etype=%s ismask=useload\",\n+                    opc, num_elem, type2name(elem_bt));\n+    }\n+    return false; \/\/ not supported\n+  }\n+\n+  Node* opd1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  if (opd1 == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** unbox failed v2=%s\",\n+                    NodeClassNames[argument(5)->Opcode()]);\n+    }\n+    return false;\n+  }\n+\n+  Node* opd2 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  if (opd2 == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** unbox failed v1=%s\",\n+                     NodeClassNames[argument(6)->Opcode()]);\n+    }\n+    return false;\n+  }\n+\n+  ciKlass* mbox_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  assert(is_vector_mask(mbox_klass), \"argument(7) should be a mask class\");\n+  const TypeInstPtr* mbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, mbox_klass);\n+\n+  Node* mask = unbox_vector(argument(7), mbox_type, elem_bt, num_elem);\n+  if (mask == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** unbox failed mask=%s\",\n+                    NodeClassNames[argument(7)->Opcode()]);\n+    }\n+    return false;\n+  }\n+\n+  const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n+  Node* operation = gvn().transform(VectorNode::make(opc, opd1, opd2, mask, vt));\n+\n+  \/\/ Wrap it up in VectorBox to keep object type information.\n+  Node* vbox = box_vector(operation, vbox_type, elem_bt, num_elem);\n+  set_result(vbox);\n+  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(elem_bt))));\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":97,"deletions":0,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -573,0 +573,2 @@\n+  case Op_VectorExpand: return new VectorExpandNode(n1, n2, n3, vt);\n+  case Op_VectorCompress: return new VectorCompressNode(n1, n2, n3, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1327,0 +1327,18 @@\n+class VectorExpandNode: public VectorNode {\n+ public:\n+  VectorExpandNode(Node* vec1, Node* vec2, Node* mask, const TypeVect* vt) :\n+      VectorNode(vec1, vec2, mask, vt) {\n+    init_class_id(Class_VectorExpand);\n+  }\n+  virtual int Opcode() const;\n+};\n+\n+class VectorCompressNode: public VectorNode {\n+ public:\n+  VectorCompressNode(Node* vec1, Node* vec2, Node* mask, const TypeVect* vt) :\n+      VectorNode(vec1, vec2, mask, vt) {\n+    init_class_id(Class_VectorCompress);\n+  }\n+  virtual int Opcode() const;\n+};\n+\n@@ -1331,1 +1349,0 @@\n-    \/\/ assert(mask->is_VectorMask(), \"VectorBlendNode requires that third argument be a mask\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -445,0 +445,24 @@\n+    case VECTOR_OP_EXPAND: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_VectorExpand;\n+        default: fatal(\"EXPAND: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n+    case VECTOR_OP_COMPRESS: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_VectorCompress;\n+        default: fatal(\"COMPRESS: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -91,0 +91,3 @@\n+    VECTOR_OP_COMPRESS = 25,\n+    VECTOR_OP_EXPAND = 26,\n+\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,0 +78,4 @@\n+    \/\/ Compression expansion operations\n+    public static final int VECTOR_OP_COMPRESS = 25;\n+    public static final int VECTOR_OP_EXPAND = 26;\n+\n@@ -624,0 +628,20 @@\n+    public interface ComExpOperation<V extends Vector<?>,\n+                                     M extends VectorMask<?>> {\n+        V apply(V v1, V v2, M m);\n+    }\n+\n+    @IntrinsicCandidate\n+    public static\n+    <V extends Vector<E>,\n+     M extends VectorMask<E>,\n+     E>\n+    V comExpOp(int opr,\n+              Class<? extends V> vClass, Class<? extends M> mClass, Class<E> eClass,\n+              int length, V v1, V v2, M m,\n+              ComExpOperation<V, M> defaultImpl) {\n+        assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n+        return defaultImpl.apply(v1, v2, m);\n+    }\n+\n+    \/* ============================================================================ *\/\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -354,0 +354,24 @@\n+    static ByteVector expandHelper(Vector<Byte> v1, Vector<Byte> v2, VectorMask<Byte> m) {\n+        VectorSpecies<Byte> vsp = m.vectorSpecies();\n+        ByteVector r  = (ByteVector) v1;\n+        ByteVector vi = (ByteVector) v2;\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static ByteVector compressHelper(Vector<Byte> v1, Vector<Byte> v2, VectorMask<Byte> m) {\n+        VectorSpecies<Byte> vsp = m.vectorSpecies();\n+        ByteVector r  = (ByteVector) v1;\n+        ByteVector vi = (ByteVector) v2;\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2374,8 +2398,3 @@\n-      int j = 0;\n-      ByteVector v = ByteVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    byte.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2397,7 +2416,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    byte.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2419,8 +2434,3 @@\n-      int j = 0;\n-      ByteVector v = ByteVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    byte.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n@@ -2429,0 +2439,1 @@\n+\n@@ -2442,7 +2453,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    byte.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":37,"deletions":30,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -354,0 +354,24 @@\n+    static DoubleVector expandHelper(Vector<Double> v1, Vector<Double> v2, VectorMask<Double> m) {\n+        VectorSpecies<Double> vsp = m.vectorSpecies();\n+        DoubleVector r  = (DoubleVector) v1;\n+        DoubleVector vi = (DoubleVector) v2;\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static DoubleVector compressHelper(Vector<Double> v1, Vector<Double> v2, VectorMask<Double> m) {\n+        VectorSpecies<Double> vsp = m.vectorSpecies();\n+        DoubleVector r  = (DoubleVector) v1;\n+        DoubleVector vi = (DoubleVector) v2;\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2220,8 +2244,3 @@\n-      int j = 0;\n-      DoubleVector v = DoubleVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    double.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2243,7 +2262,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    double.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2265,8 +2280,3 @@\n-      int j = 0;\n-      DoubleVector v = DoubleVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    double.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n@@ -2275,0 +2285,1 @@\n+\n@@ -2288,7 +2299,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    double.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":37,"deletions":30,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -354,0 +354,24 @@\n+    static FloatVector expandHelper(Vector<Float> v1, Vector<Float> v2, VectorMask<Float> m) {\n+        VectorSpecies<Float> vsp = m.vectorSpecies();\n+        FloatVector r  = (FloatVector) v1;\n+        FloatVector vi = (FloatVector) v2;\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static FloatVector compressHelper(Vector<Float> v1, Vector<Float> v2, VectorMask<Float> m) {\n+        VectorSpecies<Float> vsp = m.vectorSpecies();\n+        FloatVector r  = (FloatVector) v1;\n+        FloatVector vi = (FloatVector) v2;\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2232,8 +2256,3 @@\n-      int j = 0;\n-      FloatVector v = FloatVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    float.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2255,7 +2274,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    float.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2277,8 +2292,3 @@\n-      int j = 0;\n-      FloatVector v = FloatVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    float.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n@@ -2287,0 +2297,1 @@\n+\n@@ -2300,7 +2311,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    float.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":37,"deletions":30,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -354,0 +354,24 @@\n+    static IntVector expandHelper(Vector<Integer> v1, Vector<Integer> v2, VectorMask<Integer> m) {\n+        VectorSpecies<Integer> vsp = m.vectorSpecies();\n+        IntVector r  = (IntVector) v1;\n+        IntVector vi = (IntVector) v2;\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static IntVector compressHelper(Vector<Integer> v1, Vector<Integer> v2, VectorMask<Integer> m) {\n+        VectorSpecies<Integer> vsp = m.vectorSpecies();\n+        IntVector r  = (IntVector) v1;\n+        IntVector vi = (IntVector) v2;\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2373,8 +2397,3 @@\n-      int j = 0;\n-      IntVector v = IntVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    int.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2396,7 +2415,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    int.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2418,8 +2433,3 @@\n-      int j = 0;\n-      IntVector v = IntVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    int.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n@@ -2428,0 +2438,1 @@\n+\n@@ -2441,7 +2452,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    int.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":37,"deletions":30,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -354,0 +354,24 @@\n+    static LongVector expandHelper(Vector<Long> v1, Vector<Long> v2, VectorMask<Long> m) {\n+        VectorSpecies<Long> vsp = m.vectorSpecies();\n+        LongVector r  = (LongVector) v1;\n+        LongVector vi = (LongVector) v2;\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static LongVector compressHelper(Vector<Long> v1, Vector<Long> v2, VectorMask<Long> m) {\n+        VectorSpecies<Long> vsp = m.vectorSpecies();\n+        LongVector r  = (LongVector) v1;\n+        LongVector vi = (LongVector) v2;\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2239,8 +2263,3 @@\n-      int j = 0;\n-      LongVector v = LongVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    long.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2262,7 +2281,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    long.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2284,8 +2299,3 @@\n-      int j = 0;\n-      LongVector v = LongVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    long.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n@@ -2294,0 +2304,1 @@\n+\n@@ -2307,7 +2318,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    long.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":37,"deletions":30,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -354,0 +354,24 @@\n+    static ShortVector expandHelper(Vector<Short> v1, Vector<Short> v2, VectorMask<Short> m) {\n+        VectorSpecies<Short> vsp = m.vectorSpecies();\n+        ShortVector r  = (ShortVector) v1;\n+        ShortVector vi = (ShortVector) v2;\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static ShortVector compressHelper(Vector<Short> v1, Vector<Short> v2, VectorMask<Short> m) {\n+        VectorSpecies<Short> vsp = m.vectorSpecies();\n+        ShortVector r  = (ShortVector) v1;\n+        ShortVector vi = (ShortVector) v2;\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2374,8 +2398,3 @@\n-      int j = 0;\n-      ShortVector v = ShortVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    short.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2397,7 +2416,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    short.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2419,8 +2434,3 @@\n-      int j = 0;\n-      ShortVector v = ShortVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    short.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n@@ -2429,0 +2439,1 @@\n+\n@@ -2442,7 +2453,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    short.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":37,"deletions":30,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -358,0 +358,24 @@\n+    static $abstractvectortype$ expandHelper(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, VectorMask<$Boxtype$> m) {\n+        VectorSpecies<$Boxtype$> vsp = m.vectorSpecies();\n+        $abstractvectortype$ r  = ($abstractvectortype$) v1;\n+        $abstractvectortype$ vi = ($abstractvectortype$) v2;\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static $abstractvectortype$ compressHelper(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, VectorMask<$Boxtype$> m) {\n+        VectorSpecies<$Boxtype$> vsp = m.vectorSpecies();\n+        $abstractvectortype$ r  = ($abstractvectortype$) v1;\n+        $abstractvectortype$ vi = ($abstractvectortype$) v2;\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2671,8 +2695,3 @@\n-      int j = 0;\n-      $Type$Vector v = $Type$Vector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    $type$.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2694,7 +2713,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    $type$.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> compressHelper(v1, v2, m1));\n@@ -2716,8 +2731,3 @@\n-      int j = 0;\n-      $Type$Vector v = $Type$Vector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    $type$.class, length(), vspecies().zero(), this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n@@ -2726,0 +2736,1 @@\n+\n@@ -2739,7 +2750,3 @@\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    $type$.class, length(), v, this, m,\n+                                    (v1, v2, m1) -> expandHelper(v1, v2, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":37,"deletions":30,"binary":false,"changes":67,"status":"modified"}]}