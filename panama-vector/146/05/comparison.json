{"files":[{"patch":"@@ -7833,0 +7833,78 @@\n+void Assembler::evexpandps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x88, (0xC0 | encode));\n+}\n+\n+void Assembler::evexpandpd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x88, (0xC0 | encode));\n+}\n+\n+void Assembler::evpexpandb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_avx512_vbmi2(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x62, (0xC0 | encode));\n+}\n+\n+void Assembler::evpexpandw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_avx512_vbmi2(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x62, (0xC0 | encode));\n+}\n+\n+void Assembler::evpexpandd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x89, (0xC0 | encode));\n+}\n+\n+void Assembler::evpexpandq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  assert(vector_len == AVX_512bit || VM_Version::supports_avx512vl(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false,\/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  if (merge) {\n+    attributes.reset_is_clear_context();\n+  }\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0x89, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2545,0 +2545,15 @@\n+  \/\/ Vector compress\/expand instructions.\n+  void evpcompressb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evpcompressw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evpcompressd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evpcompressq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evcompressps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evcompresspd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+\n+  void evpexpandb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evpexpandw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evpexpandd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evpexpandq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evexpandps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+  void evexpandpd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n+\n@@ -2702,8 +2717,0 @@\n-  \/\/ Vector compresses\n-  void evpcompressb(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n-  void evpcompressw(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n-  void evpcompressd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n-  void evpcompressq(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n-  void evcompressps(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n-  void evcompresspd(XMMRegister dst, KRegister mask, XMMRegister src, bool merge, int vector_len);\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2276,27 +2276,0 @@\n-void C2_MacroAssembler::evcompress(BasicType type, XMMRegister dst, KRegister kmask,\n-                                   XMMRegister src, bool merge, int vector_len) {\n-  switch(type) {\n-  case T_BYTE:\n-    evpcompressb(dst, kmask, src, merge, vector_len);\n-    break;\n-  case T_SHORT:\n-    evpcompressw(dst, kmask, src, merge, vector_len);\n-    break;\n-  case T_INT:\n-    evpcompressd(dst, kmask, src, merge, vector_len);\n-    break;\n-  case T_FLOAT:\n-    evcompressps(dst, kmask, src, merge, vector_len);\n-    break;\n-  case T_LONG:\n-    evpcompressq(dst, kmask, src, merge, vector_len);\n-    break;\n-  case T_DOUBLE:\n-    evcompresspd(dst, kmask, src, merge, vector_len);\n-    break;\n-  default:\n-    assert(false,\"Should not reach here.\");\n-    break;\n-  }\n-}\n-\n@@ -4135,0 +4108,56 @@\n+\n+void C2_MacroAssembler::compress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n+                                          bool merge, BasicType bt, int vec_enc) {\n+  if (opcode == Op_CompressV) {\n+    switch(bt) {\n+    case T_BYTE:\n+      evpcompressb(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_CHAR:\n+    case T_SHORT:\n+      evpcompressw(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_INT:\n+      evpcompressd(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_FLOAT:\n+      evcompressps(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_LONG:\n+      evpcompressq(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_DOUBLE:\n+      evcompresspd(dst, mask, src, merge, vec_enc);\n+      break;\n+    default:\n+      fatal(\"Unsupported type\");\n+      break;\n+    }\n+  } else {\n+    assert(opcode == Op_ExpandV, \"\");\n+    switch(bt) {\n+    case T_BYTE:\n+      evpexpandb(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_CHAR:\n+    case T_SHORT:\n+      evpexpandw(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_INT:\n+      evpexpandd(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_FLOAT:\n+      evexpandps(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_LONG:\n+      evpexpandq(dst, mask, src, merge, vec_enc);\n+      break;\n+    case T_DOUBLE:\n+      evexpandpd(dst, mask, src, merge, vec_enc);\n+      break;\n+    default:\n+      fatal(\"Unsupported type\");\n+      break;\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":56,"deletions":27,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -95,0 +95,3 @@\n+  void compress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n+                       bool merge, BasicType bt, int vec_enc);\n+\n@@ -144,3 +147,0 @@\n-  \/\/ compress\n-  void evcompress(BasicType type, XMMRegister dst, KRegister kmask, XMMRegister src, bool merge, int vector_len);\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4581,1 +4581,1 @@\n-    __ insertps($dst$$XMMRegister, $val$$XMMRegister, $idx$$constant);\n+    __ insertps($dst$$XMMRegister, $val$$XMMRegister, $idx$$constant << 4);\n@@ -4601,1 +4601,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4607,1 +4607,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -8742,0 +8742,16 @@\n+\n+\/\/ --------------------------------- Compress\/Expand Operations ---------------------------\n+\n+instruct vcompress_expand_reg_evex(vec dst, vec src, kReg mask) %{\n+  match(Set dst (CompressV src mask));\n+  match(Set dst (ExpandV src mask));\n+  format %{ \"vector_compress_expand $dst, $src, $mask\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vector_len = vector_length_encoding(this);\n+    BasicType bt  = Matcher::vector_element_basic_type(this);\n+    __ compress_expand(opcode, $dst$$XMMRegister, $src$$XMMRegister, $mask$$KRegister, false, bt, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -9250,14 +9266,0 @@\n-instruct evcompress_reg(vec dst, vec src, kReg mask) %{\n-  predicate(UseAVX > 2);\n-  match(Set dst (CompressV src mask));\n-  format %{ \"vcompress $dst, $src, $mask\" %}\n-  ins_encode %{\n-    assert(Matcher::vector_length_in_bytes(this) >= 16, \"sanity\");\n-    int vector_len = vector_length_encoding(this);\n-    BasicType etype = Matcher::vector_element_basic_type(this);\n-    \/\/ Zeroing-masking\n-    __ evcompress(etype, $dst$$XMMRegister, $mask$$KRegister, $src$$XMMRegister, false \/*merge*\/, vector_len);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1094,12 +1094,11 @@\n-  do_intrinsic(_VectorSelectiveOp, jdk_internal_vm_vector_VectorSupport, vector_selective_op_name, vector_selective_op_sig, F_S)               \\\n-   do_signature(vector_selective_op_sig, \"(Z\"                                                                                                  \\\n-                                         \"Ljava\/lang\/Class;\"                                                                                   \\\n-                                         \"Ljava\/lang\/Class;\"                                                                                   \\\n-                                         \"Ljava\/lang\/Class;\"                                                                                   \\\n-                                         \"I\"                                                                                                   \\\n-                                         \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                       \\\n-                                         \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\"                                                   \\\n-                                         \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSelectiveOp;)\"                                           \\\n-                                         \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                      \\\n-   do_name(vector_selective_op_name, \"selectiveOp\")                                                                                            \\\n-                                                                                                                                               \\\n+  do_intrinsic(_VectorComExp, jdk_internal_vm_vector_VectorSupport, vector_comexp_op_name, vector_comexp_op_sig, F_S)                           \\\n+   do_signature(vector_comexp_op_sig, \"(I\"                                                                                                     \\\n+                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n+                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n+                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n+                                      \"I\"                                                                                                      \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                          \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\"                                                      \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$ComExpOperation;)\"                                                \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                         \\\n+   do_name(vector_comexp_op_name,     \"comExpOp\")                                                                                              \\\n@@ -1214,1 +1213,1 @@\n-  LAST_COMPILER_INLINE = _VectorSelectiveOp,\n+  LAST_COMPILER_INLINE = _VectorComExp,\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -700,1 +700,1 @@\n-  case vmIntrinsics::_VectorSelectiveOp:\n+  case vmIntrinsics::_VectorComExp:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -683,1 +683,1 @@\n-  case vmIntrinsics::_VectorSelectiveOp:\n+  case vmIntrinsics::_VectorComExp:\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -333,0 +333,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2264,0 +2264,2 @@\n+    case Op_CompressV:\n+    case Op_ExpandV:\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,0 +177,2 @@\n+class ExpandVNode;\n+class CompressVNode;\n@@ -713,0 +715,2 @@\n+        DEFINE_CLASS_ID(CompressV, Vector, 3)\n+        DEFINE_CLASS_ID(ExpandV, Vector, 4)\n@@ -941,0 +945,2 @@\n+  DEFINE_CLASS_QUERY(CompressV);\n+  DEFINE_CLASS_QUERY(ExpandV);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2695,6 +2695,4 @@\n-\/\/ V selectiveOp(boolean is_compress,\n-\/\/               Class<? extends V> vClass, Class<M> mClass, Class<E> eClass,\n-\/\/               int length,\n-\/\/               V v, M m,\n-\/\/               VectorSelectiveOp<V, M> defaultImpl)\n-\/\/\n+\/\/  V comExpOp(int opr,\n+\/\/             Class<? extends V> vClass, Class<? extends M> mClass, Class<E> eClass,\n+\/\/             int length, V v, M m,\n+\/\/             CmpExpOperation<V, M> defaultImpl)\n@@ -2708,3 +2706,3 @@\n-  if (vector_klass == NULL || mask_klass == NULL || elem_klass == NULL || opr == NULL || vlen == NULL ||\n-      vector_klass->const_oop() == NULL || mask_klass->const_oop() == NULL || elem_klass->const_oop() == NULL ||\n-      !(opr == TypeInt::ONE || opr == TypeInt::ZERO) || !vlen->is_con()) {\n+  if (vector_klass == NULL || elem_klass == NULL || mask_klass == NULL || vlen == NULL ||\n+      vector_klass->const_oop() == NULL || mask_klass->const_oop() == NULL ||\n+      elem_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -2737,9 +2735,1 @@\n-  const Type* vmask_type = gvn().type(argument(6));\n-  if (vmask_type->maybe_null()) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** null mask values are not allowed for compress\/expand\");\n-    }\n-    return false;\n-  }\n-\n-  bool is_compress = (opr == TypeInt::ONE);\n+  BasicType elem_bt = elem_type->basic_type();\n@@ -2747,1 +2737,1 @@\n-  int sopc = is_compress ? Op_CompressV : Op_ExpandV;\n+  int opc = VectorSupport::vop2ideal(opr->get_con(), elem_bt);\n@@ -2749,2 +2739,2 @@\n-  BasicType elem_bt = elem_type->basic_type();\n-  BasicType mask_bt = elem_bt;\n+  ciKlass* vbox_klass = vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  const TypeInstPtr* vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, vbox_klass);\n@@ -2752,1 +2742,1 @@\n-  if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskUsePred)) {\n+  if (!arch_supports_vector(opc, num_elem, elem_bt, VecMaskUseLoad)) {\n@@ -2754,2 +2744,2 @@\n-      tty->print_cr(\"  ** not supported: arity=2 op=compress vlen=%d etype=%s ismask=useload\",\n-                    num_elem, type2name(elem_bt));\n+      tty->print_cr(\"  ** not supported: opc=%d vlen=%d etype=%s ismask=useload\",\n+                    opc, num_elem, type2name(elem_bt));\n@@ -2759,2 +2749,9 @@\n-  ciKlass* vbox_klass = vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n-  const TypeInstPtr* vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, vbox_klass);\n+\n+  Node* opd1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  if (opd1 == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** unbox failed vector=%s\",\n+                    NodeClassNames[argument(5)->Opcode()]);\n+    }\n+    return false;\n+  }\n@@ -2763,0 +2760,1 @@\n+  assert(is_vector_mask(mbox_klass), \"argument(6) should be a mask class\");\n@@ -2765,5 +2763,7 @@\n-  Node* vec1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n-  Node* mask = unbox_vector(argument(6), mbox_type, mask_bt, num_elem);\n-\n-  if (vec1 == NULL || mask == NULL) {\n-    return false; \/\/ operand unboxing failed\n+  Node* mask = unbox_vector(argument(6), mbox_type, elem_bt, num_elem);\n+  if (mask == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** unbox failed mask=%s\",\n+                    NodeClassNames[argument(6)->Opcode()]);\n+    }\n+    return false;\n@@ -2772,4 +2772,2 @@\n-  Node* ret;\n-  if (is_compress) {\n-    ret = gvn().transform(new CompressVNode(vec1, mask));\n-  }\n+  const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n+  Node* operation = gvn().transform(VectorNode::make(opc, opd1, mask, vt));\n@@ -2777,2 +2775,3 @@\n-  Node* box = box_vector(ret, vbox_type, elem_bt, num_elem);\n-  set_result(box);\n+  \/\/ Wrap it up in VectorBox to keep object type information.\n+  Node* vbox = box_vector(operation, vbox_type, elem_bt, num_elem);\n+  set_result(vbox);\n@@ -2782,1 +2781,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":36,"deletions":38,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -551,0 +551,3 @@\n+\n+  case Op_ExpandV: return new ExpandVNode(n1, n2, vt);\n+  case Op_CompressV: return new CompressVNode(n1, n2, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -718,5 +718,6 @@\n-class CompressVNode : public VectorNode {\n-public:\n-  CompressVNode(Node* vec1, Node* mask)\n-    : VectorNode(vec1, mask, vec1->bottom_type()->is_vect()) {}\n-\n+class CompressVNode: public VectorNode {\n+ public:\n+  CompressVNode(Node* vec, Node* mask, const TypeVect* vt) :\n+      VectorNode(vec, mask, vt) {\n+    init_class_id(Class_CompressV);\n+  }\n@@ -724,2 +725,0 @@\n-  Node* vec1() const { return in(1); }\n-  Node* vec_mask() const { return in(2); }\n@@ -730,5 +729,6 @@\n-class ExpandVNode : public VectorNode {\n-public:\n-  ExpandVNode(Node* vec1, Node* mask)\n-    : VectorNode(vec1, mask, vec1->bottom_type()->is_vect()) {}\n-\n+class ExpandVNode: public VectorNode {\n+ public:\n+  ExpandVNode(Node* vec, Node* mask, const TypeVect* vt) :\n+      VectorNode(vec, mask, vt) {\n+    init_class_id(Class_ExpandV);\n+  }\n@@ -736,2 +736,0 @@\n-  Node* vec1() const { return in(1); }\n-  Node* vec_mask() const { return in(2); }\n@@ -1355,1 +1353,0 @@\n-    \/\/ assert(mask->is_VectorMask(), \"VectorBlendNode requires that third argument be a mask\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -445,0 +445,24 @@\n+    case VECTOR_OP_EXPAND: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_ExpandV;\n+        default: fatal(\"EXPAND: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n+    case VECTOR_OP_COMPRESS: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_CompressV;\n+        default: fatal(\"COMPRESS: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -91,0 +91,3 @@\n+    VECTOR_OP_COMPRESS = 25,\n+    VECTOR_OP_EXPAND = 26,\n+\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,0 +78,4 @@\n+    \/\/ Compression expansion operations\n+    public static final int VECTOR_OP_COMPRESS = 25;\n+    public static final int VECTOR_OP_EXPAND = 26;\n+\n@@ -624,0 +628,20 @@\n+    public interface ComExpOperation<V extends Vector<?>,\n+                                     M extends VectorMask<?>> {\n+        V apply(V v, M m);\n+    }\n+\n+    @IntrinsicCandidate\n+    public static\n+    <V extends Vector<E>,\n+     M extends VectorMask<E>,\n+     E>\n+    V comExpOp(int opr,\n+              Class<? extends V> vClass, Class<? extends M> mClass, Class<E> eClass,\n+              int length, V v, M m,\n+              ComExpOperation<V, M> defaultImpl) {\n+        assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n+        return defaultImpl.apply(v, m);\n+    }\n+\n+    \/* ============================================================================ *\/\n+\n@@ -654,21 +678,0 @@\n-    public interface VectorSelectiveOp<V extends Vector<?>,\n-                                       M extends VectorMask<?>> {\n-        V apply(V v, M m);\n-    }\n-\n-    @IntrinsicCandidate\n-    public static\n-    <V extends Vector<E>,\n-     M extends VectorMask<E>,\n-     E>\n-    V selectiveOp(boolean is_compress,\n-                  Class<? extends V> vClass, Class<M> mClass, Class<E> eClass,\n-                  int length,\n-                  V v, M m,\n-                  VectorSelectiveOp<V, M> defaultImpl) {\n-        assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n-        return defaultImpl.apply(v, m);\n-    }\n-\n-    \/* ============================================================================ *\/\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -354,0 +354,30 @@\n+    static ByteVector expandHelper(Vector<Byte> v, VectorMask<Byte> m) {\n+        VectorSpecies<Byte> vsp = m.vectorSpecies();\n+        ByteVector r  = (ByteVector) vsp.zero();\n+        ByteVector vi = (ByteVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static ByteVector compressHelper(Vector<Byte> v, VectorMask<Byte> m) {\n+        VectorSpecies<Byte> vsp = m.vectorSpecies();\n+        ByteVector r  = (ByteVector) vsp.zero();\n+        ByteVector vi = (ByteVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2374,8 +2404,3 @@\n-      int j = 0;\n-      ByteVector v = ByteVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    byte.class, length(), this, m,\n+                                    (v1, m1) -> compressHelper(v1, m1));\n@@ -2397,8 +2422,3 @@\n-      int j = 0;\n-      ByteVector v = ByteVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    byte.class, length(), this, m,\n+                                    (v1, m1) -> expandHelper(v1, m1));\n@@ -2407,0 +2427,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -354,0 +354,30 @@\n+    static DoubleVector expandHelper(Vector<Double> v, VectorMask<Double> m) {\n+        VectorSpecies<Double> vsp = m.vectorSpecies();\n+        DoubleVector r  = (DoubleVector) vsp.zero();\n+        DoubleVector vi = (DoubleVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static DoubleVector compressHelper(Vector<Double> v, VectorMask<Double> m) {\n+        VectorSpecies<Double> vsp = m.vectorSpecies();\n+        DoubleVector r  = (DoubleVector) vsp.zero();\n+        DoubleVector vi = (DoubleVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2220,8 +2250,3 @@\n-      int j = 0;\n-      DoubleVector v = DoubleVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    double.class, length(), this, m,\n+                                    (v1, m1) -> compressHelper(v1, m1));\n@@ -2243,8 +2268,3 @@\n-      int j = 0;\n-      DoubleVector v = DoubleVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    double.class, length(), this, m,\n+                                    (v1, m1) -> expandHelper(v1, m1));\n@@ -2253,0 +2273,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -354,0 +354,30 @@\n+    static FloatVector expandHelper(Vector<Float> v, VectorMask<Float> m) {\n+        VectorSpecies<Float> vsp = m.vectorSpecies();\n+        FloatVector r  = (FloatVector) vsp.zero();\n+        FloatVector vi = (FloatVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static FloatVector compressHelper(Vector<Float> v, VectorMask<Float> m) {\n+        VectorSpecies<Float> vsp = m.vectorSpecies();\n+        FloatVector r  = (FloatVector) vsp.zero();\n+        FloatVector vi = (FloatVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2232,8 +2262,3 @@\n-      int j = 0;\n-      FloatVector v = FloatVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    float.class, length(), this, m,\n+                                    (v1, m1) -> compressHelper(v1, m1));\n@@ -2255,8 +2280,3 @@\n-      int j = 0;\n-      FloatVector v = FloatVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    float.class, length(), this, m,\n+                                    (v1, m1) -> expandHelper(v1, m1));\n@@ -2265,0 +2285,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -354,0 +354,30 @@\n+    static IntVector expandHelper(Vector<Integer> v, VectorMask<Integer> m) {\n+        VectorSpecies<Integer> vsp = m.vectorSpecies();\n+        IntVector r  = (IntVector) vsp.zero();\n+        IntVector vi = (IntVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static IntVector compressHelper(Vector<Integer> v, VectorMask<Integer> m) {\n+        VectorSpecies<Integer> vsp = m.vectorSpecies();\n+        IntVector r  = (IntVector) vsp.zero();\n+        IntVector vi = (IntVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2373,8 +2403,3 @@\n-      int j = 0;\n-      IntVector v = IntVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    int.class, length(), this, m,\n+                                    (v1, m1) -> compressHelper(v1, m1));\n@@ -2396,8 +2421,3 @@\n-      int j = 0;\n-      IntVector v = IntVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    int.class, length(), this, m,\n+                                    (v1, m1) -> expandHelper(v1, m1));\n@@ -2406,0 +2426,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -354,0 +354,30 @@\n+    static LongVector expandHelper(Vector<Long> v, VectorMask<Long> m) {\n+        VectorSpecies<Long> vsp = m.vectorSpecies();\n+        LongVector r  = (LongVector) vsp.zero();\n+        LongVector vi = (LongVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static LongVector compressHelper(Vector<Long> v, VectorMask<Long> m) {\n+        VectorSpecies<Long> vsp = m.vectorSpecies();\n+        LongVector r  = (LongVector) vsp.zero();\n+        LongVector vi = (LongVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2239,8 +2269,3 @@\n-      int j = 0;\n-      LongVector v = LongVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    long.class, length(), this, m,\n+                                    (v1, m1) -> compressHelper(v1, m1));\n@@ -2262,8 +2287,3 @@\n-      int j = 0;\n-      LongVector v = LongVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    long.class, length(), this, m,\n+                                    (v1, m1) -> expandHelper(v1, m1));\n@@ -2272,0 +2292,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -354,0 +354,30 @@\n+    static ShortVector expandHelper(Vector<Short> v, VectorMask<Short> m) {\n+        VectorSpecies<Short> vsp = m.vectorSpecies();\n+        ShortVector r  = (ShortVector) vsp.zero();\n+        ShortVector vi = (ShortVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static ShortVector compressHelper(Vector<Short> v, VectorMask<Short> m) {\n+        VectorSpecies<Short> vsp = m.vectorSpecies();\n+        ShortVector r  = (ShortVector) vsp.zero();\n+        ShortVector vi = (ShortVector) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2374,8 +2404,3 @@\n-      int j = 0;\n-      ShortVector v = ShortVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    short.class, length(), this, m,\n+                                    (v1, m1) -> compressHelper(v1, m1));\n@@ -2397,8 +2422,3 @@\n-      int j = 0;\n-      ShortVector v = ShortVector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    short.class, length(), this, m,\n+                                    (v1, m1) -> expandHelper(v1, m1));\n@@ -2407,0 +2427,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -358,0 +358,30 @@\n+    static $abstractvectortype$ expandHelper(Vector<$Boxtype$> v, VectorMask<$Boxtype$> m) {\n+        VectorSpecies<$Boxtype$> vsp = m.vectorSpecies();\n+        $abstractvectortype$ r  = ($abstractvectortype$) vsp.zero();\n+        $abstractvectortype$ vi = ($abstractvectortype$) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0,j = 0; i < vsp.length(); i++) {\n+            if(m.laneIsSet(i)) {\n+                r = r.withLane(i, vi.lane(j++));\n+            }\n+        }\n+        return r;\n+    }\n+\n+    static $abstractvectortype$ compressHelper(Vector<$Boxtype$> v, VectorMask<$Boxtype$> m) {\n+        VectorSpecies<$Boxtype$> vsp = m.vectorSpecies();\n+        $abstractvectortype$ r  = ($abstractvectortype$) vsp.zero();\n+        $abstractvectortype$ vi = ($abstractvectortype$) v;\n+        if (m.allTrue()) {\n+            return vi;\n+        }\n+        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n+                r = r.withLane(j++, vi.lane(i));\n+            }\n+        }\n+        return r;\n+    }\n+\n@@ -2671,8 +2701,3 @@\n-      int j = 0;\n-      $Type$Vector v = $Type$Vector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                    $type$.class, length(), this, m,\n+                                    (v1, m1) -> compressHelper(v1, m1));\n@@ -2694,8 +2719,3 @@\n-      int j = 0;\n-      $Type$Vector v = $Type$Vector.zero(species());\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n+      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                    $type$.class, length(), this, m,\n+                                    (v1, m1) -> expandHelper(v1, m1));\n@@ -2704,0 +2724,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"}]}