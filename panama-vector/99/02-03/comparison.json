{"files":[{"patch":"@@ -3914,2 +3914,0 @@\n-    case Op_AbsVD:\n-    case Op_MulVB:\n@@ -3984,2 +3982,0 @@\n-    case Op_AbsVD:\n-    case Op_MulVB:\n@@ -3991,1 +3987,1 @@\n-void C2_MacroAssembler::masked_op(int ideal_opc, BasicType etype, KRegister dst,\n+void C2_MacroAssembler::masked_op(int ideal_opc, int mask_len, KRegister dst,\n@@ -3993,0 +3989,11 @@\n+  BasicType etype = T_ILLEGAL;\n+  switch(mask_len) {\n+    case 2:\n+    case 4:\n+    case 8:  etype = T_BYTE; break;\n+    case 16: etype = T_SHORT; break;\n+    case 32: etype = T_INT; break;\n+    case 64: etype = T_LONG; break;\n+    default: fatal(\"Unsupported type\"); break;\n+  }\n+  assert(etype != T_ILLEGAL, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-  void masked_op(int ideal_opc, BasicType eType, KRegister dst,\n+  void masked_op(int ideal_opc, int mask_len, KRegister dst,\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8299,0 +8299,19 @@\n+void MacroAssembler::evpperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n+  switch(type) {\n+    case T_BOOLEAN:\n+    case T_BYTE:\n+      evppermb(dst, mask, nds, src, merge, vector_len); break;\n+    case T_CHAR:\n+    case T_SHORT:\n+      evppermw(dst, mask, nds, src, merge, vector_len); break;\n+    case T_INT:\n+    case T_FLOAT:\n+      evppermd(dst, mask, nds, src, merge, vector_len); break;\n+    case T_LONG:\n+    case T_DOUBLE:\n+      evppermq(dst, mask, nds, src, merge, vector_len); break;\n+    default:\n+      fatal(\"Unexpected type argument %s\", type2name(type)); break;\n+  }\n+}\n+\n@@ -8425,19 +8444,0 @@\n-void MacroAssembler::evpperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n-  switch(type) {\n-    case T_BOOLEAN:\n-    case T_BYTE:\n-      evppermb(dst, mask, nds, src, merge, vector_len); break;\n-    case T_CHAR:\n-    case T_SHORT:\n-      evppermw(dst, mask, nds, src, merge, vector_len); break;\n-    case T_INT:\n-    case T_FLOAT:\n-      evppermd(dst, mask, nds, src, merge, vector_len); break;\n-    case T_LONG:\n-    case T_DOUBLE:\n-      evppermq(dst, mask, nds, src, merge, vector_len); break;\n-    default:\n-      fatal(\"Unexpected type argument %s\", type2name(type)); break;\n-  }\n-}\n-\n@@ -8448,2 +8448,1 @@\n-    kandbl(kscratch, kscratch, src);\n-    ktestbl(kscratch, kscratch);\n+    ktestbl(kscratch, src);\n@@ -8463,2 +8462,1 @@\n-    korbl(kscratch, kscratch, src);\n-    kortestbl(kscratch, kscratch);\n+    kortestbl(kscratch, src);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -8996,1 +8996,1 @@\n-                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc);\n+                   $dst$$XMMRegister, $src2$$XMMRegister, false, vlen_enc);\n@@ -9010,1 +9010,1 @@\n-                   $dst$$XMMRegister, $src2$$Address, true, vlen_enc);\n+                   $dst$$XMMRegister, $src2$$Address, false, vlen_enc);\n@@ -9150,2 +9150,3 @@\n-    assert(0 == Type::cmp(mask1->bottom_type(),mask2->bottom_type()), \"\");\n-    __ masked_op(this->ideal_Opcode(), T_LONG, $dst$$KRegister, $src1$$KRegister, $src2$$KRegister);\n+    assert(0 == Type::cmp(mask1->bottom_type(), mask2->bottom_type()), \"\");\n+    uint masklen = vector_length(this);\n+    __ masked_op(this->ideal_Opcode(), masklen, $dst$$KRegister, $src1$$KRegister, $src2$$KRegister);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}