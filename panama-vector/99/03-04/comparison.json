{"files":[{"patch":"@@ -8908,1 +8908,1 @@\n-void Assembler::evppermb(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpermb(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n@@ -8920,1 +8920,1 @@\n-void Assembler::evppermb(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n+void Assembler::evpermb(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n@@ -8934,1 +8934,1 @@\n-void Assembler::evppermw(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpermw(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n@@ -8946,1 +8946,1 @@\n-void Assembler::evppermw(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n+void Assembler::evpermw(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n@@ -8960,1 +8960,1 @@\n-void Assembler::evppermd(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpermd(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n@@ -8972,1 +8972,1 @@\n-void Assembler::evppermd(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n+void Assembler::evpermd(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n@@ -8986,1 +8986,1 @@\n-void Assembler::evppermq(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpermq(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n@@ -8998,1 +8998,1 @@\n-void Assembler::evppermq(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n+void Assembler::evpermq(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n@@ -10960,0 +10960,7 @@\n+void Assembler::evpmovm2b(XMMRegister dst, KRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx512vlbw(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_F3, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x28, (0xC0 | encode));\n+}\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2321,8 +2321,8 @@\n-  void evppermb(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n-  void evppermb(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n-  void evppermw(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n-  void evppermw(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n-  void evppermd(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n-  void evppermd(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n-  void evppermq(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n-  void evppermq(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n+  void evpermb(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n+  void evpermb(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n+  void evpermw(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n+  void evpermw(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n+  void evpermd(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n+  void evpermd(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n+  void evpermq(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n+  void evpermq(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n@@ -2653,0 +2653,1 @@\n+  void evpmovm2b(XMMRegister dst, KRegister src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3885,1 +3885,1 @@\n-      evpperm(eType, dst, mask, src2, src1, merge, vlen_enc); break;\n+      evperm(eType, dst, mask, src2, src1, merge, vlen_enc); break;\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8280,1 +8280,1 @@\n-void MacroAssembler::evpperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n+void MacroAssembler::evperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len) {\n@@ -8284,1 +8284,1 @@\n-      evppermb(dst, mask, nds, src, merge, vector_len); break;\n+      evpermb(dst, mask, nds, src, merge, vector_len); break;\n@@ -8287,1 +8287,1 @@\n-      evppermw(dst, mask, nds, src, merge, vector_len); break;\n+      evpermw(dst, mask, nds, src, merge, vector_len); break;\n@@ -8290,1 +8290,1 @@\n-      evppermd(dst, mask, nds, src, merge, vector_len); break;\n+      evpermd(dst, mask, nds, src, merge, vector_len); break;\n@@ -8293,1 +8293,1 @@\n-      evppermq(dst, mask, nds, src, merge, vector_len); break;\n+      evpermq(dst, mask, nds, src, merge, vector_len); break;\n@@ -8299,1 +8299,1 @@\n-void MacroAssembler::evpperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n+void MacroAssembler::evperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len) {\n@@ -8303,1 +8303,1 @@\n-      evppermb(dst, mask, nds, src, merge, vector_len); break;\n+      evpermb(dst, mask, nds, src, merge, vector_len); break;\n@@ -8306,1 +8306,1 @@\n-      evppermw(dst, mask, nds, src, merge, vector_len); break;\n+      evpermw(dst, mask, nds, src, merge, vector_len); break;\n@@ -8309,1 +8309,1 @@\n-      evppermd(dst, mask, nds, src, merge, vector_len); break;\n+      evpermd(dst, mask, nds, src, merge, vector_len); break;\n@@ -8312,1 +8312,1 @@\n-      evppermq(dst, mask, nds, src, merge, vector_len); break;\n+      evpermq(dst, mask, nds, src, merge, vector_len); break;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1696,2 +1696,2 @@\n-  void evpperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n-  void evpperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n+  void evperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, bool merge, int vector_len);\n+  void evperm(BasicType type, XMMRegister dst, KRegister mask, XMMRegister nds, Address src, bool merge, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3764,1 +3764,1 @@\n-  format %{ \"load_vector_gather $dst, $mem, $idx\\t! using $tmp and k2 as TEMP\" %}\n+  format %{ \"load_vector_gather $dst, $mem, $idx\\t! using $tmp and ktmp as TEMP\" %}\n@@ -3784,1 +3784,1 @@\n-  format %{ \"load_vector_gather_masked $dst, $mem, $idx, $mask\\t! using $tmp and k2 as TEMP\" %}\n+  format %{ \"load_vector_gather_masked $dst, $mem, $idx, $mask\\t! using $tmp and ktmp as TEMP\" %}\n@@ -7085,1 +7085,1 @@\n-instruct evcmpFD(kReg dst, vec src1, vec src2, immI8 cond, rRegP scratch) %{\n+instruct evcmpFD(kReg dst, vec src1, vec src2, immI8 cond) %{\n@@ -7089,2 +7089,1 @@\n-  effect(TEMP scratch);\n-  format %{ \"vector_compare_evex $dst,$src1,$src2,$cond\\t! using $scratch as TEMP\" %}\n+  format %{ \"vector_compare_evex $dst,$src1,$src2,$cond\\t!\" %}\n@@ -7196,1 +7195,1 @@\n-instruct evcmp(kReg dst, vec src1, vec src2, immI8 cond, rRegP scratch) %{\n+instruct evcmp(kReg dst, vec src1, vec src2, immI8 cond) %{\n@@ -7201,2 +7200,1 @@\n-  effect(TEMP scratch);\n-  format %{ \"vector_compared_evex $dst,$src1,$src2,$cond\\t! using $scratch as TEMP\" %}\n+  format %{ \"vector_compared_evex $dst,$src1,$src2,$cond\\t!\" %}\n@@ -7380,1 +7378,1 @@\n-            NULL == n->in(2)->bottom_type()->isa_vectmask() &&\n+            n->in(2)->bottom_type()->isa_vectmask() == NULL &&\n@@ -7394,1 +7392,1 @@\n-            NULL == n->in(2)->bottom_type()->isa_vectmask() &&\n+            n->in(2)->bottom_type()->isa_vectmask() == NULL &&\n@@ -7407,1 +7405,1 @@\n-  predicate(vector_length_in_bytes(n) == 64 && NULL == n->in(2)->bottom_type()->isa_vectmask());\n+  predicate(vector_length_in_bytes(n) == 64 && n->in(2)->bottom_type()->isa_vectmask() == NULL);\n@@ -7742,2 +7740,1 @@\n-    __ kandbl($ktmp$$KRegister, $ktmp$$KRegister, $src1$$KRegister);\n-    __ ktestbl($ktmp$$KRegister, $ktmp$$KRegister);\n+    __ ktestbl($ktmp$$KRegister, $src1$$KRegister);\n@@ -7787,2 +7784,1 @@\n-    int vlen_in_bytes = vector_length_in_bytes(in(1));\n-    int vlen_enc = vector_length_encoding(vlen_in_bytes);\n+    int vlen_enc = vector_length_encoding(in(1));\n@@ -7799,1 +7795,1 @@\n-            NULL == n->in(1)->bottom_type()->isa_vectmask());\n+            n->in(1)->bottom_type()->isa_vectmask() == NULL);\n@@ -7817,1 +7813,1 @@\n-            NULL == n->in(1)->bottom_type()->isa_vectmask());\n+            n->in(1)->bottom_type()->isa_vectmask() == NULL);\n@@ -7902,1 +7898,2 @@\n-  predicate(VM_Version::supports_avx512bw());\n+  predicate(VM_Version::supports_avx512bw() &&\n+            n->in(1)->bottom_type()->isa_vectmask() == NULL);\n@@ -7915,1 +7912,1 @@\n-  predicate(UseAVX > 2);\n+  predicate(UseAVX > 2 && n->in(1)->bottom_type()->isa_vectmask() == NULL);\n@@ -7931,1 +7928,1 @@\n-  predicate(UseAVX > 2 && NULL == n->in(1)->bottom_type()->isa_vectmask());\n+  predicate(UseAVX > 2 && n->in(1)->bottom_type()->isa_vectmask() == NULL);\n@@ -7946,1 +7943,1 @@\n-instruct vstoreMask_evex(vec dst, kReg mask, immI size, rRegP scratch) %{\n+instruct vstoreMask_evex(vec dst, kReg mask, immI size) %{\n@@ -7949,1 +7946,1 @@\n-  effect(TEMP scratch);\n+  effect(TEMP_DEF dst);\n@@ -7953,3 +7950,2 @@\n-    __ vpxor($dst$$XMMRegister, $dst$$XMMRegister, $dst$$XMMRegister, dst_vlen_enc);\n-    __ evmovdqub($dst$$XMMRegister, $mask$$KRegister, ExternalAddress(vector_masked_cmp_bits()),\n-                  true, dst_vlen_enc, $scratch$$Register);\n+    __ evpmovm2b($dst$$XMMRegister, $mask$$KRegister, dst_vlen_enc);\n+    __ vpabsb($dst$$XMMRegister, $dst$$XMMRegister, dst_vlen_enc);\n@@ -8607,1 +8603,0 @@\n-  predicate(UseAVX > 2);\n@@ -8626,1 +8621,0 @@\n-  predicate(UseAVX > 2);\n@@ -8645,1 +8639,0 @@\n-  predicate(UseAVX > 2);\n@@ -8659,1 +8652,0 @@\n-  predicate(UseAVX > 2);\n@@ -8673,1 +8665,0 @@\n-  predicate(UseAVX > 2);\n@@ -8687,1 +8678,0 @@\n-  predicate(UseAVX > 2);\n@@ -8701,1 +8691,0 @@\n-  predicate(UseAVX > 2);\n@@ -8715,1 +8704,0 @@\n-  predicate(UseAVX > 2);\n@@ -8729,1 +8717,0 @@\n-  predicate(UseAVX > 2);\n@@ -8748,1 +8735,0 @@\n-  predicate(UseAVX > 2);\n@@ -8767,1 +8753,0 @@\n-  predicate(UseAVX > 2);\n@@ -8785,1 +8770,0 @@\n-  predicate(UseAVX > 2);\n@@ -8803,1 +8787,0 @@\n-  predicate(UseAVX > 2);\n@@ -8818,1 +8801,0 @@\n-  predicate(UseAVX > 2);\n@@ -8833,1 +8815,0 @@\n-  predicate(UseAVX > 2);\n@@ -8850,1 +8831,0 @@\n-  predicate(UseAVX > 2);\n@@ -8866,1 +8846,0 @@\n-  predicate(UseAVX > 2);\n@@ -8883,1 +8862,0 @@\n-  predicate(UseAVX > 2);\n@@ -8899,1 +8877,0 @@\n-  predicate(UseAVX > 2);\n@@ -8916,1 +8893,0 @@\n-  predicate(UseAVX > 2);\n@@ -8932,1 +8908,0 @@\n-  predicate(UseAVX > 2);\n@@ -8946,1 +8921,0 @@\n-  predicate(UseAVX > 2);\n@@ -8960,1 +8934,0 @@\n-  predicate(UseAVX > 2);\n@@ -8974,1 +8947,0 @@\n-  predicate(UseAVX > 2);\n@@ -8988,1 +8960,0 @@\n-  predicate(UseAVX > 2);\n@@ -9001,14 +8972,0 @@\n-instruct vrearrangev_mem_masked(vec dst, memory src2, kReg mask) %{\n-  predicate(UseAVX > 2);\n-  match(Set dst (VectorRearrange (Binary dst src2) mask));\n-  format %{ \"vprearrange_masked $dst, $dst, $src2\\t! rearrange masked operation\" %}\n-  ins_encode %{\n-    int vlen_enc = vector_length_encoding(this);\n-    BasicType bt = vector_element_basic_type(this);\n-    int opc = this->ideal_Opcode();\n-    __ evmasked_op(opc, bt, $mask$$KRegister, $dst$$XMMRegister,\n-                   $dst$$XMMRegister, $src2$$Address, false, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -9033,1 +8990,0 @@\n-  predicate(UseAVX > 2);\n@@ -9048,1 +9004,0 @@\n-  predicate(UseAVX > 2);\n@@ -9063,1 +9018,0 @@\n-  predicate(UseAVX > 2);\n@@ -9108,1 +9062,1 @@\n-      default: assert(false, \"%s\", type2name(src1_elem_bt));\n+      default: assert(false, \"%s\", type2name(src1_elem_bt)); break;\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":22,"deletions":68,"binary":false,"changes":90,"status":"modified"}]}