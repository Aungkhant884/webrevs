{"files":[{"patch":"@@ -2434,0 +2434,10 @@\n+\/\/ Vector calling convention not yet implemented.\n+const bool Matcher::supports_vector_calling_convention(void) {\n+  return false;\n+}\n+\n+OptoRegPair Matcher::vector_return_value(uint ideal_reg) {\n+  Unimplemented();\n+  return OptoRegPair(0, 0);\n+}\n+\n@@ -8747,0 +8757,55 @@\n+instruct castFF(vRegF dst)\n+%{\n+  match(Set dst (CastFF dst));\n+\n+  size(0);\n+  format %{ \"# castFF of $dst\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_cost(0);\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n+instruct castDD(vRegD dst)\n+%{\n+  match(Set dst (CastDD dst));\n+\n+  size(0);\n+  format %{ \"# castDD of $dst\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_cost(0);\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n+instruct castVVD(vecD dst)\n+%{\n+  match(Set dst (CastVV dst));\n+\n+  size(0);\n+  format %{ \"# castVV of $dst\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_cost(0);\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n+instruct castVVX(vecX dst)\n+%{\n+  match(Set dst (CastVV dst));\n+\n+  size(0);\n+  format %{ \"# castVV of $dst\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_cost(0);\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n+instruct castVV(vReg dst)\n+%{\n+  match(Set dst (CastVV dst));\n+\n+  size(0);\n+  format %{ \"# castVV of $dst\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_cost(0);\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -877,1 +877,1 @@\n-instruct reduce_max2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, vecX tmp, rFlagsReg cr)\n+instruct reduce_max2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, vecD tmp, rFlagsReg cr)\n@@ -883,2 +883,1 @@\n-  format %{ \"dup   $tmp, T2D, $vsrc\\n\\t\"\n-            \"smaxv $tmp, T4S, $tmp\\n\\t\"\n+  format %{ \"smaxp $tmp, T2S, $vsrc, $vsrc\\n\\t\"\n@@ -890,2 +889,1 @@\n-    __ dup(as_FloatRegister($tmp$$reg), __ T2D, as_FloatRegister($vsrc$$reg));\n-    __ smaxv(as_FloatRegister($tmp$$reg), __ T4S, as_FloatRegister($tmp$$reg));\n+    __ smaxp(as_FloatRegister($tmp$$reg), __ T2S, as_FloatRegister($vsrc$$reg), as_FloatRegister($vsrc$$reg));\n@@ -899,1 +897,1 @@\n-instruct reduce_min2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, vecX tmp, rFlagsReg cr)\n+instruct reduce_min2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, vecD tmp, rFlagsReg cr)\n@@ -905,2 +903,1 @@\n-  format %{ \"dup   $tmp, T2D, $vsrc\\n\\t\"\n-            \"sminv $tmp, T4S, $tmp\\n\\t\"\n+  format %{ \"sminp $tmp, T2S, $vsrc, $vsrc\\n\\t\"\n@@ -912,2 +909,1 @@\n-    __ dup(as_FloatRegister($tmp$$reg), __ T2D, as_FloatRegister($vsrc$$reg));\n-    __ sminv(as_FloatRegister($tmp$$reg), __ T4S, as_FloatRegister($tmp$$reg));\n+    __ sminp(as_FloatRegister($tmp$$reg), __ T2S, as_FloatRegister($vsrc$$reg), as_FloatRegister($vsrc$$reg));\n@@ -1850,1 +1846,1 @@\n-instruct vcmeq8B(vecD dst, vecD src1, vecD src2, immI cond)\n+instruct vcmpD(vecD dst, vecD src1, vecD src2, immI cond)\n@@ -1852,878 +1848,1 @@\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T8B, $src1, $src2\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmeq16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T16B, $src1, $src2\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4H, $src1, $src2\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmeq8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T8H, $src1, $src2\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2S, $src1, $src2\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmeq4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4S, $src1, $src2\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2D, $src1, $src2\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2S, $src1, $src2\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmeq4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T4S, $src1, $src2\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2D, $src1, $src2\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8B, $src1, $src2\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T16B, $src1, $src2\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4H, $src1, $src2\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8H, $src1, $src2\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2S, $src1, $src2\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4S, $src1, $src2\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2D, $src1, $src2\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2S, $src1, $src2\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T4S, $src1, $src2\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2D, $src1, $src2\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8B, $src1, $src2\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T16B, $src1, $src2\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4H, $src1, $src2\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8H, $src1, $src2\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2S, $src1, $src2\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4S, $src1, $src2\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2D, $src1, $src2\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T2S, $src1, $src2\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T4S, $src1, $src2\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T2D, $src1, $src2\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmne8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T8B, $src1, $src2\\n\\t# vector cmp (8B)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T16B, $src1, $src2\\n\\t# vector cmp (16B)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4H, $src1, $src2\\n\\t# vector cmp (4S)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T8H, $src1, $src2\\n\\t# vector cmp (8S)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2S, $src1, $src2\\n\\t# vector cmp (2I)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4S, $src1, $src2\\n\\t# vector cmp (4I)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2D, $src1, $src2\\n\\t# vector cmp (2L)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2S, $src1, $src2\\n\\t# vector cmp (2F)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T4S, $src1, $src2\\n\\t# vector cmp (4F)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2D, $src1, $src2\\n\\t# vector cmp (2D)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmlt8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8B, $src2, $src1\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T16B, $src2, $src1\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4H, $src2, $src1\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8H, $src2, $src1\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2S, $src2, $src1\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4S, $src2, $src1\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2D, $src2, $src1\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2S, $src2, $src1\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T4S, $src2, $src1\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2D, $src2, $src1\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8B, $src2, $src1\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmle16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T16B, $src2, $src1\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4H, $src2, $src1\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmle8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8H, $src2, $src1\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2S, $src2, $src1\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmle4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4S, $src2, $src1\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2D, $src2, $src1\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n@@ -2731,1 +1850,1 @@\n-  format %{ \"fcmge  $dst, T2S, $src2, $src1\\t# vector cmp (2F)\" %}\n+  format %{ \"vcmpD  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -2734,2 +1853,4 @@\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    assert(type2aelembytes(bt) != 8, \"not supported\");\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ false);\n@@ -2740,16 +1861,1 @@\n-instruct vcmle4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T4S, $src2, $src1\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2D(vecX dst, vecX src1, vecX src2, immI cond)\n+instruct vcmpX(vecX dst, vecX src1, vecX src2, immI cond)\n@@ -2757,3 +1863,1 @@\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n@@ -2761,1 +1865,1 @@\n-  format %{ \"fcmge  $dst, T2D, $src2, $src1\\t# vector cmp (2D)\" %}\n+  format %{ \"vcmpX  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -2764,2 +1868,3 @@\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ true);\n@@ -4057,1 +3162,1 @@\n-instruct reduce_add2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, iRegINoSp tmp, iRegINoSp tmp2)\n+instruct reduce_add2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, vecD vtmp, iRegINoSp itmp)\n@@ -4062,5 +3167,4 @@\n-  effect(TEMP tmp, TEMP tmp2);\n-  format %{ \"umov  $tmp, $vsrc, S, 0\\n\\t\"\n-            \"umov  $tmp2, $vsrc, S, 1\\n\\t\"\n-            \"addw  $tmp, $isrc, $tmp\\n\\t\"\n-            \"addw  $dst, $tmp, $tmp2\\t# add reduction2I\"\n+  effect(TEMP vtmp, TEMP itmp);\n+  format %{ \"addpv  $vtmp, T2S, $vsrc, $vsrc\\n\\t\"\n+            \"umov  $itmp, $vtmp, S, 0\\n\\t\"\n+            \"addw  $dst, $itmp, $isrc\\t# add reduction2I\"\n@@ -4069,4 +3173,4 @@\n-    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n-    __ umov($tmp2$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n-    __ addw($tmp$$Register, $isrc$$Register, $tmp$$Register);\n-    __ addw($dst$$Register, $tmp$$Register, $tmp2$$Register);\n+    __ addpv(as_FloatRegister($vtmp$$reg), __ T2S,\n+             as_FloatRegister($vsrc$$reg), as_FloatRegister($vsrc$$reg));\n+    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 0);\n+    __ addw($dst$$Register, $itmp$$Register, $isrc$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":28,"deletions":924,"binary":false,"changes":952,"status":"modified"},{"patch":"@@ -499,1 +499,1 @@\n-instruct reduce_$1`'2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, vecX tmp, rFlagsReg cr)\n+instruct reduce_$1`'2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, vecD tmp, rFlagsReg cr)\n@@ -505,2 +505,1 @@\n-  format %{ \"dup   $tmp, T2D, $vsrc\\n\\t\"\n-            \"s$1v $tmp, T4S, $tmp\\n\\t\"\n+  format %{ \"s$1p $tmp, T2S, $vsrc, $vsrc\\n\\t\"\n@@ -512,2 +511,1 @@\n-    __ dup(as_FloatRegister($tmp$$reg), __ T2D, as_FloatRegister($vsrc$$reg));\n-    __ s$1v(as_FloatRegister($tmp$$reg), __ T4S, as_FloatRegister($tmp$$reg));\n+    __ s$1p(as_FloatRegister($tmp$$reg), __ T2S, as_FloatRegister($vsrc$$reg), as_FloatRegister($vsrc$$reg));\n@@ -869,49 +867,2 @@\n-define(`VECTOR_CMP_EQ_GT_GE', `\n-instruct vcm$1$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == $2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::$1 &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"$6cm$1  $dst, T$2$5, $src1, $src2\\t# vector cmp ($2$3)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ $6cm$1(as_FloatRegister($dst$$reg), __ T$2$5,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop$7);\n-%}')dnl\n-dnl                $1   $2 $3 $4 $5 $6 $7\n-VECTOR_CMP_EQ_GT_GE(eq, 8, B, D, B,  , 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 16,B, X, B,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 4, S, D, H,  , 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 8, S, X, H,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, I, D, S,  , 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 4, I, X, S,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, L, X, D,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, F, D, S, f, 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 4, F, X, S, f, 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, D, X, D, f, 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 8, B, D, B,  , 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 16,B, X, B,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 4, S, D, H,  , 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 8, S, X, H,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, I, D, S,  , 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 4, I, X, S,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, L, X, D,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, F, D, S, f, 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 4, F, X, S, f, 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, D, X, D, f, 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 8, B, D, B,  , 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 16,B, X, B,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 4, S, D, H,  , 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 8, S, X, H,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, I, D, S,  , 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 4, I, X, S,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, L, X, D,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, F, D, S, f, 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 4, F, X, S, f, 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, D, X, D, f, 128)\n-dnl\n-define(`VECTOR_CMP_NE', `\n-instruct vcmne$1$2`'(vec$3 dst, vec$3 src1, vec$3 src2, immI cond)\n+\n+instruct vcmpD(vecD dst, vecD src1, vecD src2, immI cond)\n@@ -919,3 +870,1 @@\n-  predicate(n->as_Vector()->length() == $1 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($2));\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n@@ -923,2 +872,1 @@\n-  format %{ \"$5cmeq  $dst, T$1$4, $src1, $src2\\n\\t# vector cmp ($1$2)\"\n-            \"not   $dst, T$6, $dst\\t\" %}\n+  format %{ \"vcmpD  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -927,3 +875,4 @@\n-    __ $5cmeq(as_FloatRegister($dst$$reg), __ T$1$4,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T$6, as_FloatRegister($dst$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    assert(type2aelembytes(bt) != 8, \"not supported\");\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ false);\n@@ -931,16 +880,4 @@\n-  ins_pipe(pipe_slow);\n-%}')dnl\n-dnl           $1 $2 $3 $4 $5 $6\n-VECTOR_CMP_NE(8, B, D, B,  , 8B)\n-VECTOR_CMP_NE(16,B, X, B,  , 16B)\n-VECTOR_CMP_NE(4, S, D, H,  , 8B)\n-VECTOR_CMP_NE(8, S, X, H,  , 16B)\n-VECTOR_CMP_NE(2, I, D, S,  , 8B)\n-VECTOR_CMP_NE(4, I, X, S,  , 16B)\n-VECTOR_CMP_NE(2, L, X, D,  , 16B)\n-VECTOR_CMP_NE(2, F, D, S, f, 8B)\n-VECTOR_CMP_NE(4, F, X, S, f, 16B)\n-VECTOR_CMP_NE(2, D, X, D, f, 16B)\n-dnl\n-define(`VECTOR_CMP_LT_LE', `\n-instruct vcm$1$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2, immI cond)\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vcmpX(vecX dst, vecX src1, vecX src2, immI cond)\n@@ -948,3 +885,1 @@\n-  predicate(n->as_Vector()->length() == $2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::$1 &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n@@ -952,1 +887,1 @@\n-  format %{ \"$6cm$7  $dst, T$2$5, $src2, $src1\\t# vector cmp ($2$3)\" %}\n+  format %{ \"vcmpX  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -955,2 +890,3 @@\n-    __ $6cm$7(as_FloatRegister($dst$$reg), __ T$2$5,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ true);\n@@ -958,24 +894,2 @@\n-  ins_pipe(vdop$8);\n-%}')dnl\n-dnl              $1  $2 $3 $4 $5 $6 $7  $8\n-VECTOR_CMP_LT_LE(lt, 8, B, D, B,  , gt, 64)\n-VECTOR_CMP_LT_LE(lt, 16,B, X, B,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 4, S, D, H,  , gt, 64)\n-VECTOR_CMP_LT_LE(lt, 8, S, X, H,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, I, D, S,  , gt, 64)\n-VECTOR_CMP_LT_LE(lt, 4, I, X, S,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, L, X, D,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, F, D, S, f, gt, 64)\n-VECTOR_CMP_LT_LE(lt, 4, F, X, S, f, gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, D, X, D, f, gt, 128)\n-VECTOR_CMP_LT_LE(le, 8, B, D, B,  , ge, 64)\n-VECTOR_CMP_LT_LE(le, 16,B, X, B,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 4, S, D, H,  , ge, 64)\n-VECTOR_CMP_LT_LE(le, 8, S, X, H,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, I, D, S,  , ge, 64)\n-VECTOR_CMP_LT_LE(le, 4, I, X, S,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, L, X, D,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, F, D, S, f, ge, 64)\n-VECTOR_CMP_LT_LE(le, 4, F, X, S, f, ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, D, X, D, f, ge, 128)\n-dnl\n+  ins_pipe(vdop128);\n+%}\n@@ -1608,1 +1522,1 @@\n-instruct reduce_add$1$2`'(iRegINoSp dst, iRegIorL2I isrc, vec$3 vsrc, ifelse($1, 2, iRegINoSp tmp, vecX vtmp), iRegINoSp ifelse($1, 2, tmp2, itmp))\n+instruct reduce_add$1$2`'(iRegINoSp dst, iRegIorL2I isrc, vec$3 vsrc, vec$3 vtmp, iRegINoSp itmp)\n@@ -1613,5 +1527,2 @@\n-  effect(TEMP ifelse($1, 2, tmp, vtmp), TEMP ifelse($1, 2, tmp2, itmp));\n-  format %{ ifelse($1, 2, `\"umov  $tmp, $vsrc, S, 0\\n\\t\"\n-            \"umov  $tmp2, $vsrc, S, 1\\n\\t\"\n-            \"addw  $tmp, $isrc, $tmp\\n\\t\"\n-            \"addw  $dst, $tmp, $tmp2\\t# add reduction2I\"',`\"addv  $vtmp, T4S, $vsrc\\n\\t\"\n+  effect(TEMP vtmp, TEMP itmp);\n+  format %{ ifelse($1, 2, `\"addpv  $vtmp, T2S, $vsrc, $vsrc\\n\\t\"',`\"addv  $vtmp, T4S, $vsrc\\n\\t\"')\n@@ -1619,1 +1530,1 @@\n-            \"addw  $dst, $itmp, $isrc\\t# add reduction4I\"')\n+            \"addw  $dst, $itmp, $isrc\\t# add reduction$1I\"\n@@ -1622,5 +1533,3 @@\n-    ifelse($1, 2, `__ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n-    __ umov($tmp2$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n-    __ addw($tmp$$Register, $isrc$$Register, $tmp$$Register);\n-    __ addw($dst$$Register, $tmp$$Register, $tmp2$$Register);', `__ addv(as_FloatRegister($vtmp$$reg), __ T4S,\n-            as_FloatRegister($vsrc$$reg));\n+    ifelse($1, 2, `__ addpv(as_FloatRegister($vtmp$$reg), __ T2S,\n+             as_FloatRegister($vsrc$$reg), as_FloatRegister($vsrc$$reg));', `__ addv(as_FloatRegister($vtmp$$reg), __ T4S,\n+            as_FloatRegister($vsrc$$reg));')\n@@ -1628,1 +1537,1 @@\n-    __ addw($dst$$Register, $itmp$$Register, $isrc$$Register);')\n+    __ addw($dst$$Register, $itmp$$Register, $isrc$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":30,"deletions":121,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -1533,1 +1533,1 @@\n-    T8B, T16B, T4H, T8H, T2S, T4S, T1D, T2D, T1Q\n+    T8B, T16B, T4H, T8H, T2S, T4S, T1D, T2D, T1Q, INVALID_ARRANGEMENT\n@@ -1536,0 +1536,8 @@\n+private:\n+\n+  static SIMD_Arrangement _esize2arrangement_table[9][2];\n+\n+public:\n+\n+  static SIMD_Arrangement esize2arrangement(int esize, bool isQ);\n+\n@@ -2407,0 +2415,2 @@\n+  INSN(smaxp,  0, 0b101001, false); \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S\n+  INSN(sminp,  0, 0b101011, false); \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S\n@@ -2411,0 +2421,1 @@\n+  INSN(cmhs,   1, 0b001111, true);  \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -681,0 +681,5 @@\n+  \/\/ lr could be poisoned with PAC signature during throw_pending_exception\n+  \/\/ if it was tail-call optimized by compiler, since lr is not callee-saved\n+  \/\/ reload it with proper value\n+  adr(lr, l);\n+\n@@ -5339,0 +5344,43 @@\n+void MacroAssembler::neon_compare(FloatRegister dst, BasicType bt, FloatRegister src1,\n+                                  FloatRegister src2, int cond, bool isQ) {\n+  SIMD_Arrangement size = esize2arrangement(type2aelembytes(bt), isQ);\n+  if (bt == T_FLOAT || bt == T_DOUBLE) {\n+    switch (cond) {\n+      case BoolTest::eq: fcmeq(dst, size, src1, src2); break;\n+      case BoolTest::ne: {\n+        fcmeq(dst, size, src1, src2);\n+        notr(dst, T16B, dst);\n+        break;\n+      }\n+      case BoolTest::ge: fcmge(dst, size, src1, src2); break;\n+      case BoolTest::gt: fcmgt(dst, size, src1, src2); break;\n+      case BoolTest::le: fcmge(dst, size, src2, src1); break;\n+      case BoolTest::lt: fcmgt(dst, size, src2, src1); break;\n+      default:\n+        assert(false, \"unsupported\");\n+        ShouldNotReachHere();\n+    }\n+  } else {\n+    switch (cond) {\n+      case BoolTest::eq: cmeq(dst, size, src1, src2); break;\n+      case BoolTest::ne: {\n+        cmeq(dst, size, src1, src2);\n+        notr(dst, T16B, dst);\n+        break;\n+      }\n+      case BoolTest::ge: cmge(dst, size, src1, src2); break;\n+      case BoolTest::gt: cmgt(dst, size, src1, src2); break;\n+      case BoolTest::le: cmge(dst, size, src2, src1); break;\n+      case BoolTest::lt: cmgt(dst, size, src2, src1); break;\n+      case BoolTest::uge: cmhs(dst, size, src1, src2); break;\n+      case BoolTest::ugt: cmhi(dst, size, src1, src2); break;\n+      case BoolTest::ult: cmhi(dst, size, src2, src1); break;\n+      case BoolTest::ule: cmhs(dst, size, src2, src1); break;\n+      default:\n+        assert(false, \"unsupported\");\n+        ShouldNotReachHere();\n+    }\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1581,0 +1581,1 @@\n+    case Op_VectorCmpMasked:\n@@ -1588,0 +1589,7 @@\n+    case Op_VectorMaskFirstTrue:\n+    case Op_VectorMaskLastTrue:\n+    case Op_VectorMaskTrueCount:\n+      if (!is_LP64 || UseAVX < 1) {\n+         return false;\n+      }\n+      break;\n@@ -1674,0 +1682,1 @@\n+    case Op_VectorCmpMasked:\n@@ -6886,1 +6895,1 @@\n-  predicate((UseAVX <= 2 || !VM_Version::supports_avx512vl()) && \n+  predicate((UseAVX <= 2 || !VM_Version::supports_avx512vl()) &&\n@@ -6904,1 +6913,1 @@\n-  predicate((UseAVX == 2 || !VM_Version::supports_avx512vl()) && \n+  predicate((UseAVX == 2 || !VM_Version::supports_avx512vl()) &&\n@@ -6923,1 +6932,1 @@\n-  predicate((UseAVX == 2 || !VM_Version::supports_avx512vl()) && \n+  predicate((UseAVX == 2 || !VM_Version::supports_avx512vl()) &&\n@@ -6941,2 +6950,2 @@\n-  predicate(UseAVX > 2 && \n-            (VM_Version::supports_avx512vl() ||  \n+  predicate(UseAVX > 2 &&\n+            (VM_Version::supports_avx512vl() ||\n@@ -8081,1 +8090,28 @@\n-\/\/ ---------------------------------- Masked Block Copy ------------------------------------\n+\/\/ ---------------------------------- Masked Operations ------------------------------------\n+\n+instruct vmask_cmp_node(rRegI dst, vec src1, vec src2, kReg mask, kReg ktmp1, kReg ktmp2, rFlagsReg cr) %{\n+  match(Set dst (VectorCmpMasked src1 (Binary src2 mask)));\n+  effect(TEMP_DEF dst, TEMP ktmp1, TEMP ktmp2, KILL cr);\n+  format %{ \"vector_mask_cmp $src1, $src2, $mask \\t! vector mask comparison\" %}\n+  ins_encode %{\n+    assert(vector_length_encoding(this, $src1) == vector_length_encoding(this, $src2), \"mismatch\");\n+    assert(vector_element_basic_type(this, $src1) == vector_element_basic_type(this, $src2), \"mismatch\");\n+\n+    Label DONE;\n+    int vlen_enc = vector_length_encoding(this, $src1);\n+    BasicType elem_bt = vector_element_basic_type(this, $src1);\n+\n+    __ knotql($ktmp2$$KRegister, $mask$$KRegister);\n+    __ mov64($dst$$Register, -1L);\n+    __ evpcmp(elem_bt, $ktmp1$$KRegister, $mask$$KRegister, $src1$$XMMRegister, $src2$$XMMRegister, Assembler::eq, vlen_enc);\n+    __ kortestql($ktmp2$$KRegister, $ktmp1$$KRegister);\n+    __ jccb(Assembler::carrySet, DONE);\n+    __ kmovql($dst$$Register, $ktmp1$$KRegister);\n+    __ notq($dst$$Register);\n+    __ tzcntq($dst$$Register, $dst$$Register);\n+    __ bind(DONE);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+\n@@ -8125,0 +8161,62 @@\n+\n+instruct vmask_truecount_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp) %{\n+  predicate(VM_Version::supports_avx512vlbw());\n+  match(Set dst (VectorMaskTrueCount mask));\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP ktmp, TEMP xtmp);\n+  format %{ \"vector_truecount_evex $mask \\t! vector mask true count\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen_enc = vector_length_encoding(this, $mask);\n+    int mask_len = vector_length(this, $mask);\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $tmp$$Register, $ktmp$$KRegister, mask_len, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vmask_first_or_last_true_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp, rFlagsReg cr) %{\n+  predicate(VM_Version::supports_avx512vlbw());\n+  match(Set dst (VectorMaskFirstTrue mask));\n+  match(Set dst (VectorMaskLastTrue mask));\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP ktmp, TEMP xtmp, KILL cr);\n+  format %{ \"vector_mask_first_or_last_true_evex $mask \\t! vector first\/last true location\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen_enc = vector_length_encoding(this, $mask);\n+    int mask_len = vector_length(this, $mask);\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $tmp$$Register, $ktmp$$KRegister, mask_len, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vmask_truecount_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1) %{\n+  predicate(!VM_Version::supports_avx512vlbw());\n+  match(Set dst (VectorMaskTrueCount mask));\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP xtmp, TEMP xtmp1);\n+  format %{ \"vector_truecount_avx $mask \\t! vector mask true count\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen_enc = vector_length_encoding(this, $mask);\n+    int mask_len = vector_length(this, $mask);\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $xtmp1$$XMMRegister, $tmp$$Register, mask_len, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vmask_first_or_last_true_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx512vlbw());\n+  match(Set dst (VectorMaskFirstTrue mask));\n+  match(Set dst (VectorMaskLastTrue mask));\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP xtmp, TEMP xtmp1, KILL cr);\n+  format %{ \"vector_mask_first_or_last_true_avx $mask \\t! vector first\/last true location\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    int vlen_enc = vector_length_encoding(this, $mask);\n+    int mask_len = vector_length(this, $mask);\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $xtmp1$$XMMRegister, $tmp$$Register, mask_len, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n@@ -8126,0 +8224,22 @@\n+\n+instruct castVV(vec dst)\n+%{\n+  match(Set dst (CastVV dst));\n+\n+  size(0);\n+  format %{ \"# castVV of $dst\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_cost(0);\n+  ins_pipe(empty);\n+%}\n+\n+instruct castVVLeg(legVec dst)\n+%{\n+  match(Set dst (CastVV dst));\n+\n+  size(0);\n+  format %{ \"# castVV of $dst\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_cost(0);\n+  ins_pipe(empty);\n+%}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":126,"deletions":6,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -3414,0 +3414,1 @@\n+  case Op_VectorCmpMasked:\n@@ -4063,1 +4064,2 @@\n-  if (superelem->is_array_klass())\n+  ciType* subelem = subk;\n+  if (superelem->is_array_klass()) {\n@@ -4065,0 +4067,4 @@\n+  }\n+  if (subelem->is_array_klass()) {\n+    subelem = subelem->as_array_klass()->base_element_type();\n+  }\n@@ -4071,0 +4077,1 @@\n+        !(subelem->is_klass() && subelem->as_klass()->is_interface()) &&\n@@ -4072,1 +4079,1 @@\n-      return SSC_always_false;\n+      return SSC_always_false;  \/\/ (2) true path dead; no dynamic test needed\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/stubRoutines.hpp\"\n@@ -353,1 +354,4 @@\n-        tty->print_cr(\"  ** svml call failed\");\n+        tty->print_cr(\"  ** svml call failed for %s_%s_%d\",\n+                         (elem_bt == T_FLOAT)?\"float\":\"double\",\n+                         VectorSupport::svmlname[opr->get_con() - VectorSupport::VECTOR_OP_SVML_START],\n+                         num_elem * type2aelembytes(elem_bt));\n@@ -478,0 +482,54 @@\n+\/\/ <E, M>\n+\/\/ int maskReductionCoerced(int oper, Class<? extends M> maskClass, Class<?> elemClass,\n+\/\/                          int length, M m, VectorMaskOp<M> defaultImpl)\n+bool LibraryCallKit::inline_vector_mask_operation() {\n+  const TypeInt*     oper       = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* mask_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen       = gvn().type(argument(3))->isa_int();\n+  Node*              mask       = argument(4);\n+\n+  if (mask_klass == NULL || elem_klass == NULL || mask->is_top() || vlen == NULL) {\n+    return false; \/\/ dead code\n+  }\n+\n+  if (!is_klass_initialized(mask_klass)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** klass argument not initialized\");\n+    }\n+    return false;\n+  }\n+\n+  int num_elem = vlen->get_con();\n+  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  BasicType elem_bt = elem_type->basic_type();\n+\n+  if (!arch_supports_vector(Op_LoadVector, num_elem, T_BOOLEAN, VecMaskNotUsed)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n+                    Op_LoadVector, num_elem, type2name(T_BOOLEAN));\n+    }\n+    return false; \/\/ not supported\n+  }\n+\n+  int mopc = VectorSupport::vop2ideal(oper->get_con(), elem_bt);\n+  if (!arch_supports_vector(mopc, num_elem, elem_bt, VecMaskNotUsed)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n+                    mopc, num_elem, type2name(elem_bt));\n+    }\n+    return false; \/\/ not supported\n+  }\n+\n+  const Type* elem_ty = Type::get_const_basic_type(elem_bt);\n+  ciKlass* mbox_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  const TypeInstPtr* mask_box_type = TypeInstPtr::make_exact(TypePtr::NotNull, mbox_klass);\n+  Node* mask_vec = unbox_vector(mask, mask_box_type, elem_bt, num_elem, true);\n+  Node* store_mask = gvn().transform(VectorStoreMaskNode::make(gvn(), mask_vec, elem_bt, num_elem));\n+  Node* maskoper = gvn().transform(VectorMaskOpNode::make(store_mask, TypeInt::INT, mopc));\n+  set_result(maskoper);\n+\n+  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(elem_bt))));\n+  return true;\n+}\n+\n@@ -523,1 +581,5 @@\n-  Node* shuffle_vec = unbox_vector(shuffle, shuffle_box_type, elem_bt, num_elem, true);\n+  \/\/ shuffle is a byte array\n+  Node* shuffle_vec = unbox_vector(shuffle, shuffle_box_type, T_BYTE, num_elem, true);\n+\n+  \/\/ cast byte to target element type\n+  shuffle_vec = gvn().transform(VectorCastNode::make(cast_vopc, shuffle_vec, elem_bt, num_elem));\n@@ -1227,1 +1289,1 @@\n-    if (!Matcher::supports_unsigned_vector_comparison(num_elem, elem_bt)) {\n+    if (!Matcher::supports_vector_comparison_unsigned(num_elem, elem_bt)) {\n@@ -1346,1 +1408,2 @@\n-static void get_svml_address(int op, int bits, BasicType bt, const char** name_ptr, address* addr_ptr) {\n+static address get_svml_address(int vop, int bits, BasicType bt, char* name_ptr, int name_len) {\n+  address addr = NULL;\n@@ -1349,380 +1412,22 @@\n-  assert(addr_ptr != NULL, \"unexpected\");\n-\n-#ifdef __VECTOR_API_MATH_INTRINSICS_COMMON\n-  \/\/ Since the addresses are resolved at runtime, using switch instead of table - otherwise might get NULL addresses.\n-  if (bt == T_FLOAT) {\n-    switch(op) {\n-      case VectorSupport::VECTOR_OP_EXP: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_exp_float64\";  *addr_ptr = StubRoutines::vector_exp_float64();  break;\n-            case 128: *name_ptr = \"vector_exp_float128\"; *addr_ptr = StubRoutines::vector_exp_float128(); break;\n-            case 256: *name_ptr = \"vector_exp_float256\"; *addr_ptr = StubRoutines::vector_exp_float256(); break;\n-            case 512: *name_ptr = \"vector_exp_float512\"; *addr_ptr = StubRoutines::vector_exp_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_LOG1P: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_log1p_float64\";  *addr_ptr = StubRoutines::vector_log1p_float64();  break;\n-            case 128: *name_ptr = \"vector_log1p_float128\"; *addr_ptr = StubRoutines::vector_log1p_float128(); break;\n-            case 256: *name_ptr = \"vector_log1p_float256\"; *addr_ptr = StubRoutines::vector_log1p_float256(); break;\n-            case 512: *name_ptr = \"vector_log1p_float512\"; *addr_ptr = StubRoutines::vector_log1p_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_LOG: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_log_float64\";  *addr_ptr = StubRoutines::vector_log_float64();  break;\n-            case 128: *name_ptr = \"vector_log_float128\"; *addr_ptr = StubRoutines::vector_log_float128(); break;\n-            case 256: *name_ptr = \"vector_log_float256\"; *addr_ptr = StubRoutines::vector_log_float256(); break;\n-            case 512: *name_ptr = \"vector_log_float512\"; *addr_ptr = StubRoutines::vector_log_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_LOG10: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_log10_float64\";  *addr_ptr = StubRoutines::vector_log10_float64();  break;\n-            case 128: *name_ptr = \"vector_log10_float128\"; *addr_ptr = StubRoutines::vector_log10_float128(); break;\n-            case 256: *name_ptr = \"vector_log10_float256\"; *addr_ptr = StubRoutines::vector_log10_float256(); break;\n-            case 512: *name_ptr = \"vector_log10_float512\"; *addr_ptr = StubRoutines::vector_log10_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_EXPM1: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_expm1_float64\";  *addr_ptr = StubRoutines::vector_expm1_float64();  break;\n-            case 128: *name_ptr = \"vector_expm1_float128\"; *addr_ptr = StubRoutines::vector_expm1_float128(); break;\n-            case 256: *name_ptr = \"vector_expm1_float256\"; *addr_ptr = StubRoutines::vector_expm1_float256(); break;\n-            case 512: *name_ptr = \"vector_expm1_float512\"; *addr_ptr = StubRoutines::vector_expm1_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_SIN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_sin_float64\";  *addr_ptr = StubRoutines::vector_sin_float64();  break;\n-            case 128: *name_ptr = \"vector_sin_float128\"; *addr_ptr = StubRoutines::vector_sin_float128(); break;\n-            case 256: *name_ptr = \"vector_sin_float256\"; *addr_ptr = StubRoutines::vector_sin_float256(); break;\n-            case 512: *name_ptr = \"vector_sin_float512\"; *addr_ptr = StubRoutines::vector_sin_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_COS: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_cos_float64\";  *addr_ptr = StubRoutines::vector_cos_float64();  break;\n-            case 128: *name_ptr = \"vector_cos_float128\"; *addr_ptr = StubRoutines::vector_cos_float128(); break;\n-            case 256: *name_ptr = \"vector_cos_float256\"; *addr_ptr = StubRoutines::vector_cos_float256(); break;\n-            case 512: *name_ptr = \"vector_cos_float512\"; *addr_ptr = StubRoutines::vector_cos_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_TAN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_tan_float64\";  *addr_ptr = StubRoutines::vector_tan_float64();  break;\n-            case 128: *name_ptr = \"vector_tan_float128\"; *addr_ptr = StubRoutines::vector_tan_float128(); break;\n-            case 256: *name_ptr = \"vector_tan_float256\"; *addr_ptr = StubRoutines::vector_tan_float256(); break;\n-            case 512: *name_ptr = \"vector_tan_float512\"; *addr_ptr = StubRoutines::vector_tan_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_SINH: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_sinh_float64\";  *addr_ptr = StubRoutines::vector_sinh_float64();  break;\n-            case 128: *name_ptr = \"vector_sinh_float128\"; *addr_ptr = StubRoutines::vector_sinh_float128(); break;\n-            case 256: *name_ptr = \"vector_sinh_float256\"; *addr_ptr = StubRoutines::vector_sinh_float256(); break;\n-            case 512: *name_ptr = \"vector_sinh_float512\"; *addr_ptr = StubRoutines::vector_sinh_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_COSH: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_cosh_float64\";  *addr_ptr = StubRoutines::vector_cosh_float64();  break;\n-            case 128: *name_ptr = \"vector_cosh_float128\"; *addr_ptr = StubRoutines::vector_cosh_float128(); break;\n-            case 256: *name_ptr = \"vector_cosh_float256\"; *addr_ptr = StubRoutines::vector_cosh_float256(); break;\n-            case 512: *name_ptr = \"vector_cosh_float512\"; *addr_ptr = StubRoutines::vector_cosh_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_TANH: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_tanh_float64\";  *addr_ptr = StubRoutines::vector_tanh_float64();  break;\n-            case 128: *name_ptr = \"vector_tanh_float128\"; *addr_ptr = StubRoutines::vector_tanh_float128(); break;\n-            case 256: *name_ptr = \"vector_tanh_float256\"; *addr_ptr = StubRoutines::vector_tanh_float256(); break;\n-            case 512: *name_ptr = \"vector_tanh_float512\"; *addr_ptr = StubRoutines::vector_tanh_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ASIN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_asin_float64\";  *addr_ptr = StubRoutines::vector_asin_float64();  break;\n-            case 128: *name_ptr = \"vector_asin_float128\"; *addr_ptr = StubRoutines::vector_asin_float128(); break;\n-            case 256: *name_ptr = \"vector_asin_float256\"; *addr_ptr = StubRoutines::vector_asin_float256(); break;\n-            case 512: *name_ptr = \"vector_asin_float512\"; *addr_ptr = StubRoutines::vector_asin_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ACOS: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_acos_float64\";  *addr_ptr = StubRoutines::vector_acos_float64();  break;\n-            case 128: *name_ptr = \"vector_acos_float128\"; *addr_ptr = StubRoutines::vector_acos_float128(); break;\n-            case 256: *name_ptr = \"vector_acos_float256\"; *addr_ptr = StubRoutines::vector_acos_float256(); break;\n-            case 512: *name_ptr = \"vector_acos_float512\"; *addr_ptr = StubRoutines::vector_acos_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ATAN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_atan_float64\";  *addr_ptr = StubRoutines::vector_atan_float64();  break;\n-            case 128: *name_ptr = \"vector_atan_float128\"; *addr_ptr = StubRoutines::vector_atan_float128(); break;\n-            case 256: *name_ptr = \"vector_atan_float256\"; *addr_ptr = StubRoutines::vector_atan_float256(); break;\n-            case 512: *name_ptr = \"vector_atan_float512\"; *addr_ptr = StubRoutines::vector_atan_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_CBRT: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_cbrt_float64\";  *addr_ptr = StubRoutines::vector_cbrt_float64();  break;\n-            case 128: *name_ptr = \"vector_cbrt_float128\"; *addr_ptr = StubRoutines::vector_cbrt_float128(); break;\n-            case 256: *name_ptr = \"vector_cbrt_float256\"; *addr_ptr = StubRoutines::vector_cbrt_float256(); break;\n-            case 512: *name_ptr = \"vector_cbrt_float512\"; *addr_ptr = StubRoutines::vector_cbrt_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-       case VectorSupport::VECTOR_OP_HYPOT: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_hypot_float64\";  *addr_ptr = StubRoutines::vector_hypot_float64();  break;\n-            case 128: *name_ptr = \"vector_hypot_float128\"; *addr_ptr = StubRoutines::vector_hypot_float128(); break;\n-            case 256: *name_ptr = \"vector_hypot_float256\"; *addr_ptr = StubRoutines::vector_hypot_float256(); break;\n-            case 512: *name_ptr = \"vector_hypot_float512\"; *addr_ptr = StubRoutines::vector_hypot_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_POW: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_pow_float64\";  *addr_ptr = StubRoutines::vector_pow_float64();  break;\n-            case 128: *name_ptr = \"vector_pow_float128\"; *addr_ptr = StubRoutines::vector_pow_float128(); break;\n-            case 256: *name_ptr = \"vector_pow_float256\"; *addr_ptr = StubRoutines::vector_pow_float256(); break;\n-            case 512: *name_ptr = \"vector_pow_float512\"; *addr_ptr = StubRoutines::vector_pow_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ATAN2: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_atan2_float64\";  *addr_ptr = StubRoutines::vector_atan2_float64();  break;\n-            case 128: *name_ptr = \"vector_atan2_float128\"; *addr_ptr = StubRoutines::vector_atan2_float128(); break;\n-            case 256: *name_ptr = \"vector_atan2_float256\"; *addr_ptr = StubRoutines::vector_atan2_float256(); break;\n-            case 512: *name_ptr = \"vector_atan2_float512\"; *addr_ptr = StubRoutines::vector_atan2_float512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      default:\n-        *name_ptr = \"invalid\";\n-        *addr_ptr = NULL;\n-        break;\n-    }\n-  } else {\n-    assert(bt == T_DOUBLE, \"must be FP type only\");\n-    switch(op) {\n-      case VectorSupport::VECTOR_OP_EXP: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_exp_double64\";  *addr_ptr = StubRoutines::vector_exp_double64();  break;\n-            case 128: *name_ptr = \"vector_exp_double128\"; *addr_ptr = StubRoutines::vector_exp_double128(); break;\n-            case 256: *name_ptr = \"vector_exp_double256\"; *addr_ptr = StubRoutines::vector_exp_double256(); break;\n-            case 512: *name_ptr = \"vector_exp_double512\"; *addr_ptr = StubRoutines::vector_exp_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_LOG1P: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_log1p_double64\";  *addr_ptr = StubRoutines::vector_log1p_double64();  break;\n-            case 128: *name_ptr = \"vector_log1p_double128\"; *addr_ptr = StubRoutines::vector_log1p_double128(); break;\n-            case 256: *name_ptr = \"vector_log1p_double256\"; *addr_ptr = StubRoutines::vector_log1p_double256(); break;\n-            case 512: *name_ptr = \"vector_log1p_double512\"; *addr_ptr = StubRoutines::vector_log1p_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_LOG: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_log_double64\";  *addr_ptr = StubRoutines::vector_log_double64();  break;\n-            case 128: *name_ptr = \"vector_log_double128\"; *addr_ptr = StubRoutines::vector_log_double128(); break;\n-            case 256: *name_ptr = \"vector_log_double256\"; *addr_ptr = StubRoutines::vector_log_double256(); break;\n-            case 512: *name_ptr = \"vector_log_double512\"; *addr_ptr = StubRoutines::vector_log_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_LOG10: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_log10_double64\";  *addr_ptr = StubRoutines::vector_log10_double64();  break;\n-            case 128: *name_ptr = \"vector_log10_double128\"; *addr_ptr = StubRoutines::vector_log10_double128(); break;\n-            case 256: *name_ptr = \"vector_log10_double256\"; *addr_ptr = StubRoutines::vector_log10_double256(); break;\n-            case 512: *name_ptr = \"vector_log10_double512\"; *addr_ptr = StubRoutines::vector_log10_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_EXPM1: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_expm1_double64\";  *addr_ptr = StubRoutines::vector_expm1_double64();  break;\n-            case 128: *name_ptr = \"vector_expm1_double128\"; *addr_ptr = StubRoutines::vector_expm1_double128(); break;\n-            case 256: *name_ptr = \"vector_expm1_double256\"; *addr_ptr = StubRoutines::vector_expm1_double256(); break;\n-            case 512: *name_ptr = \"vector_expm1_double512\"; *addr_ptr = StubRoutines::vector_expm1_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_SIN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_sin_double64\";  *addr_ptr = StubRoutines::vector_sin_double64();  break;\n-            case 128: *name_ptr = \"vector_sin_double128\"; *addr_ptr = StubRoutines::vector_sin_double128(); break;\n-            case 256: *name_ptr = \"vector_sin_double256\"; *addr_ptr = StubRoutines::vector_sin_double256(); break;\n-            case 512: *name_ptr = \"vector_sin_double512\"; *addr_ptr = StubRoutines::vector_sin_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_COS: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_cos_double64\";  *addr_ptr = StubRoutines::vector_cos_double64();  break;\n-            case 128: *name_ptr = \"vector_cos_double128\"; *addr_ptr = StubRoutines::vector_cos_double128(); break;\n-            case 256: *name_ptr = \"vector_cos_double256\"; *addr_ptr = StubRoutines::vector_cos_double256(); break;\n-            case 512: *name_ptr = \"vector_cos_double512\"; *addr_ptr = StubRoutines::vector_cos_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_TAN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_tan_double64\";  *addr_ptr = StubRoutines::vector_tan_double64();  break;\n-            case 128: *name_ptr = \"vector_tan_double128\"; *addr_ptr = StubRoutines::vector_tan_double128(); break;\n-            case 256: *name_ptr = \"vector_tan_double256\"; *addr_ptr = StubRoutines::vector_tan_double256(); break;\n-            case 512: *name_ptr = \"vector_tan_double512\"; *addr_ptr = StubRoutines::vector_tan_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_SINH: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_sinh_double64\";  *addr_ptr = StubRoutines::vector_sinh_double64();  break;\n-            case 128: *name_ptr = \"vector_sinh_double128\"; *addr_ptr = StubRoutines::vector_sinh_double128(); break;\n-            case 256: *name_ptr = \"vector_sinh_double256\"; *addr_ptr = StubRoutines::vector_sinh_double256(); break;\n-            case 512: *name_ptr = \"vector_sinh_double512\"; *addr_ptr = StubRoutines::vector_sinh_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_COSH: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_cosh_double64\";  *addr_ptr = StubRoutines::vector_cosh_double64();  break;\n-            case 128: *name_ptr = \"vector_cosh_double128\"; *addr_ptr = StubRoutines::vector_cosh_double128(); break;\n-            case 256: *name_ptr = \"vector_cosh_double256\"; *addr_ptr = StubRoutines::vector_cosh_double256(); break;\n-            case 512: *name_ptr = \"vector_cosh_double512\"; *addr_ptr = StubRoutines::vector_cosh_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_TANH: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_tanh_double64\";  *addr_ptr = StubRoutines::vector_tanh_double64();  break;\n-            case 128: *name_ptr = \"vector_tanh_double128\"; *addr_ptr = StubRoutines::vector_tanh_double128(); break;\n-            case 256: *name_ptr = \"vector_tanh_double256\"; *addr_ptr = StubRoutines::vector_tanh_double256(); break;\n-            case 512: *name_ptr = \"vector_tanh_double512\"; *addr_ptr = StubRoutines::vector_tanh_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ASIN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_asin_double64\";  *addr_ptr = StubRoutines::vector_asin_double64();  break;\n-            case 128: *name_ptr = \"vector_asin_double128\"; *addr_ptr = StubRoutines::vector_asin_double128(); break;\n-            case 256: *name_ptr = \"vector_asin_double256\"; *addr_ptr = StubRoutines::vector_asin_double256(); break;\n-            case 512: *name_ptr = \"vector_asin_double512\"; *addr_ptr = StubRoutines::vector_asin_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ACOS: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_acos_double64\";  *addr_ptr = StubRoutines::vector_acos_double64();  break;\n-            case 128: *name_ptr = \"vector_acos_double128\"; *addr_ptr = StubRoutines::vector_acos_double128(); break;\n-            case 256: *name_ptr = \"vector_acos_double256\"; *addr_ptr = StubRoutines::vector_acos_double256(); break;\n-            case 512: *name_ptr = \"vector_acos_double512\"; *addr_ptr = StubRoutines::vector_acos_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ATAN: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_atan_double64\";  *addr_ptr = StubRoutines::vector_atan_double64();  break;\n-            case 128: *name_ptr = \"vector_atan_double128\"; *addr_ptr = StubRoutines::vector_atan_double128(); break;\n-            case 256: *name_ptr = \"vector_atan_double256\"; *addr_ptr = StubRoutines::vector_atan_double256(); break;\n-            case 512: *name_ptr = \"vector_atan_double512\"; *addr_ptr = StubRoutines::vector_atan_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_CBRT: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_cbrt_double64\";  *addr_ptr = StubRoutines::vector_cbrt_double64();  break;\n-            case 128: *name_ptr = \"vector_cbrt_double128\"; *addr_ptr = StubRoutines::vector_cbrt_double128(); break;\n-            case 256: *name_ptr = \"vector_cbrt_double256\"; *addr_ptr = StubRoutines::vector_cbrt_double256(); break;\n-            case 512: *name_ptr = \"vector_cbrt_double512\"; *addr_ptr = StubRoutines::vector_cbrt_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_HYPOT: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_hypot_double64\";  *addr_ptr = StubRoutines::vector_hypot_double64();  break;\n-            case 128: *name_ptr = \"vector_hypot_double128\"; *addr_ptr = StubRoutines::vector_hypot_double128(); break;\n-            case 256: *name_ptr = \"vector_hypot_double256\"; *addr_ptr = StubRoutines::vector_hypot_double256(); break;\n-            case 512: *name_ptr = \"vector_hypot_double512\"; *addr_ptr = StubRoutines::vector_hypot_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_POW: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_pow_double64\";  *addr_ptr = StubRoutines::vector_pow_double64();  break;\n-            case 128: *name_ptr = \"vector_pow_double128\"; *addr_ptr = StubRoutines::vector_pow_double128(); break;\n-            case 256: *name_ptr = \"vector_pow_double256\"; *addr_ptr = StubRoutines::vector_pow_double256(); break;\n-            case 512: *name_ptr = \"vector_pow_double512\"; *addr_ptr = StubRoutines::vector_pow_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-      case VectorSupport::VECTOR_OP_ATAN2: {\n-          switch(bits) {\n-            case 64:  *name_ptr = \"vector_atan2_double64\";  *addr_ptr = StubRoutines::vector_atan2_double64();  break;\n-            case 128: *name_ptr = \"vector_atan2_double128\"; *addr_ptr = StubRoutines::vector_atan2_double128(); break;\n-            case 256: *name_ptr = \"vector_atan2_double256\"; *addr_ptr = StubRoutines::vector_atan2_double256(); break;\n-            case 512: *name_ptr = \"vector_atan2_double512\"; *addr_ptr = StubRoutines::vector_atan2_double512(); break;\n-            default: Unimplemented(); break;\n-          }\n-        }\n-        break;\n-\n-      default:\n-        *name_ptr = \"invalid\";\n-        *addr_ptr = NULL;\n-        break;\n-    }\n+  assert((vop >= VectorSupport::VECTOR_OP_SVML_START) && (vop <= VectorSupport::VECTOR_OP_SVML_END), \"unexpected\");\n+  int op = vop - VectorSupport::VECTOR_OP_SVML_START;\n+\n+  switch(bits) {\n+    case 64:  \/\/fallthough\n+    case 128: \/\/fallthough\n+    case 256: \/\/fallthough\n+    case 512:\n+      if (bt == T_FLOAT) {\n+        snprintf(name_ptr, name_len, \"vector_%s_float%d\", VectorSupport::svmlname[op], bits);\n+        addr = StubRoutines::_vector_f_math[exact_log2(bits\/64)][op];\n+      } else {\n+        assert(bt == T_DOUBLE, \"must be FP type only\");\n+        snprintf(name_ptr, name_len, \"vector_%s_double%d\", VectorSupport::svmlname[op], bits);\n+        addr = StubRoutines::_vector_d_math[exact_log2(bits\/64)][op];\n+      }\n+      break;\n+    default:\n+      snprintf(name_ptr, name_len, \"invalid\");\n+      addr = NULL;\n+      Unimplemented();\n+      break;\n@@ -1730,4 +1435,2 @@\n-#else\n-  *name_ptr = \"invalid\";\n-  *addr_ptr = NULL;\n-#endif \/\/ __VECTOR_API_MATH_INTRINSICS_COMMON\n+\n+  return addr;\n@@ -1742,2 +1445,1 @@\n-  const char* name = NULL;\n-  address addr = NULL;\n+  char name[100] = \"\";\n@@ -1746,1 +1448,1 @@\n-  get_svml_address(vector_api_op_id, vt->length_in_bytes() * BitsPerByte, bt, &name, &addr);\n+  address addr = get_svml_address(vector_api_op_id, vt->length_in_bytes() * BitsPerByte, bt, name, 100);\n@@ -1893,1 +1595,1 @@\n-  if (is_vector_shuffle(vbox_klass_from) || is_vector_shuffle(vbox_klass_to)) {\n+  if (is_vector_shuffle(vbox_klass_from)) {\n@@ -1908,2 +1610,2 @@\n-  if (is_mask && elem_bt_from != elem_bt_to) {\n-    return false; \/\/ type mismatch\n+  if (is_mask && (type2aelembytes(elem_bt_from) != type2aelembytes(elem_bt_to))) {\n+    return false; \/\/ elem size mismatch\n@@ -1911,0 +1613,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":97,"deletions":394,"binary":false,"changes":491,"status":"modified"},{"patch":"@@ -803,0 +803,2 @@\n+\/\/------------------------------StoreVectorMaskedNode--------------------------------\n+\/\/ Store Vector to memory under the influence of a predicate register(mask).\n@@ -821,0 +823,2 @@\n+\/\/------------------------------LoadVectorMaskedNode--------------------------------\n+\/\/ Load Vector from memory under the influence of a predicate register(mask).\n@@ -839,0 +843,15 @@\n+\n+\/\/------------------------------VectorCmpMaskedNode--------------------------------\n+\/\/ Vector Comparison under the influence of a predicate register(mask).\n+class VectorCmpMaskedNode : public TypeNode {\n+  public:\n+   VectorCmpMaskedNode(Node* src1, Node* src2, Node* mask, const Type* ty): TypeNode(ty, 4)  {\n+     init_req(1, src1);\n+     init_req(2, src2);\n+     init_req(3, mask);\n+   }\n+\n+  virtual int Opcode() const;\n+};\n+\n+\n@@ -841,1 +860,1 @@\n-  VectorMaskGenNode(Node* length, const Type* ty, const Type* ety): TypeNode(ty, 2), _elemType(ety) {\n+  VectorMaskGenNode(Node* length, const Type* ty, BasicType ety): TypeNode(ty, 2), _elemType(ety) {\n@@ -846,1 +865,1 @@\n-  const Type* get_elem_type()  { return _elemType;}\n+  BasicType get_elem_type()  { return _elemType;}\n@@ -853,1 +872,40 @@\n-   const Type* _elemType;\n+   BasicType _elemType;\n+};\n+\n+class VectorMaskOpNode : public TypeNode {\n+ public:\n+  VectorMaskOpNode(Node* mask, const Type* ty, int mopc):\n+    TypeNode(ty, 2), _mopc(mopc) {\n+    assert(mask->Opcode() == Op_VectorStoreMask, \"\");\n+    init_req(1, mask);\n+  }\n+\n+  virtual int Opcode() const;\n+  virtual  uint  size_of() const { return sizeof(VectorMaskOpNode); }\n+  virtual uint  ideal_reg() const { return Op_RegI; }\n+  int get_mask_Opcode() const { return _mopc;}\n+  static Node* make(Node* mask, const Type* ty, int mopc);\n+\n+  private:\n+    int _mopc;\n+};\n+\n+class VectorMaskTrueCountNode : public VectorMaskOpNode {\n+ public:\n+  VectorMaskTrueCountNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskTrueCount) {}\n+  virtual int Opcode() const;\n+};\n+\n+class VectorMaskFirstTrueNode : public VectorMaskOpNode {\n+ public:\n+  VectorMaskFirstTrueNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskFirstTrue) {}\n+  virtual int Opcode() const;\n+};\n+\n+class VectorMaskLastTrueNode : public VectorMaskOpNode {\n+ public:\n+  VectorMaskLastTrueNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskLastTrue) {}\n+  virtual int Opcode() const;\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":61,"deletions":3,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -155,0 +155,5 @@\n+\/\/ Convert pointer to intptr_t, for use in printing pointers.\n+inline intptr_t p2i(const volatile void* p) {\n+  return (intptr_t) p;\n+}\n+\n@@ -420,1 +425,1 @@\n-  assert(left >= right, \"avoid underflow\");\n+  assert(left >= right, \"avoid underflow - left: \" PTR_FORMAT \" right: \" PTR_FORMAT, p2i(left), p2i(right));\n@@ -1093,5 +1098,0 @@\n-\/\/ Convert pointer to intptr_t, for use in printing pointers.\n-inline intptr_t p2i(const void * p) {\n-  return (intptr_t) p;\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1464,0 +1464,3 @@\n+          [\"smaxp\", \"smaxp\", \"8B\"], [\"smaxp\", \"smaxp\", \"16B\"],\n+          [\"smaxp\", \"smaxp\", \"4H\"], [\"smaxp\", \"smaxp\", \"8H\"],\n+          [\"smaxp\", \"smaxp\", \"2S\"], [\"smaxp\", \"smaxp\", \"4S\"],\n@@ -1469,0 +1472,3 @@\n+          [\"sminp\", \"sminp\", \"8B\"], [\"sminp\", \"sminp\", \"16B\"],\n+          [\"sminp\", \"sminp\", \"4H\"], [\"sminp\", \"sminp\", \"8H\"],\n+          [\"sminp\", \"sminp\", \"2S\"], [\"sminp\", \"sminp\", \"4S\"],\n@@ -1481,0 +1487,8 @@\n+          [\"cmhi\", \"cmhi\", \"8B\"], [\"cmhi\", \"cmhi\", \"16B\"],\n+          [\"cmhi\", \"cmhi\", \"4H\"], [\"cmhi\", \"cmhi\", \"8H\"],\n+          [\"cmhi\", \"cmhi\", \"2S\"], [\"cmhi\", \"cmhi\", \"4S\"],\n+          [\"cmhi\", \"cmhi\", \"2D\"],\n+          [\"cmhs\", \"cmhs\", \"8B\"], [\"cmhs\", \"cmhs\", \"16B\"],\n+          [\"cmhs\", \"cmhs\", \"4H\"], [\"cmhs\", \"cmhs\", \"8H\"],\n+          [\"cmhs\", \"cmhs\", \"2S\"], [\"cmhs\", \"cmhs\", \"4S\"],\n+          [\"cmhs\", \"cmhs\", \"2D\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -635,9 +635,21 @@\n-    __ fmax(v26, __ T2S, v27, v28);                    \/\/       fmax    v26.2S, v27.2S, v28.2S\n-    __ fmax(v28, __ T4S, v29, v30);                    \/\/       fmax    v28.4S, v29.4S, v30.4S\n-    __ fmax(v1, __ T2D, v2, v3);                       \/\/       fmax    v1.2D, v2.2D, v3.2D\n-    __ minv(v27, __ T8B, v28, v29);                    \/\/       smin    v27.8B, v28.8B, v29.8B\n-    __ minv(v0, __ T16B, v1, v2);                      \/\/       smin    v0.16B, v1.16B, v2.16B\n-    __ minv(v20, __ T4H, v21, v22);                    \/\/       smin    v20.4H, v21.4H, v22.4H\n-    __ minv(v28, __ T8H, v29, v30);                    \/\/       smin    v28.8H, v29.8H, v30.8H\n-    __ minv(v15, __ T2S, v16, v17);                    \/\/       smin    v15.2S, v16.2S, v17.2S\n-    __ minv(v12, __ T4S, v13, v14);                    \/\/       smin    v12.4S, v13.4S, v14.4S\n+    __ smaxp(v26, __ T8B, v27, v28);                   \/\/       smaxp   v26.8B, v27.8B, v28.8B\n+    __ smaxp(v28, __ T16B, v29, v30);                  \/\/       smaxp   v28.16B, v29.16B, v30.16B\n+    __ smaxp(v1, __ T4H, v2, v3);                      \/\/       smaxp   v1.4H, v2.4H, v3.4H\n+    __ smaxp(v27, __ T8H, v28, v29);                   \/\/       smaxp   v27.8H, v28.8H, v29.8H\n+    __ smaxp(v0, __ T2S, v1, v2);                      \/\/       smaxp   v0.2S, v1.2S, v2.2S\n+    __ smaxp(v20, __ T4S, v21, v22);                   \/\/       smaxp   v20.4S, v21.4S, v22.4S\n+    __ fmax(v28, __ T2S, v29, v30);                    \/\/       fmax    v28.2S, v29.2S, v30.2S\n+    __ fmax(v15, __ T4S, v16, v17);                    \/\/       fmax    v15.4S, v16.4S, v17.4S\n+    __ fmax(v12, __ T2D, v13, v14);                    \/\/       fmax    v12.2D, v13.2D, v14.2D\n+    __ minv(v10, __ T8B, v11, v12);                    \/\/       smin    v10.8B, v11.8B, v12.8B\n+    __ minv(v28, __ T16B, v29, v30);                   \/\/       smin    v28.16B, v29.16B, v30.16B\n+    __ minv(v28, __ T4H, v29, v30);                    \/\/       smin    v28.4H, v29.4H, v30.4H\n+    __ minv(v19, __ T8H, v20, v21);                    \/\/       smin    v19.8H, v20.8H, v21.8H\n+    __ minv(v22, __ T2S, v23, v24);                    \/\/       smin    v22.2S, v23.2S, v24.2S\n+    __ minv(v10, __ T4S, v11, v12);                    \/\/       smin    v10.4S, v11.4S, v12.4S\n+    __ sminp(v4, __ T8B, v5, v6);                      \/\/       sminp   v4.8B, v5.8B, v6.8B\n+    __ sminp(v30, __ T16B, v31, v0);                   \/\/       sminp   v30.16B, v31.16B, v0.16B\n+    __ sminp(v20, __ T4H, v21, v22);                   \/\/       sminp   v20.4H, v21.4H, v22.4H\n+    __ sminp(v8, __ T8H, v9, v10);                     \/\/       sminp   v8.8H, v9.8H, v10.8H\n+    __ sminp(v30, __ T2S, v31, v0);                    \/\/       sminp   v30.2S, v31.2S, v0.2S\n+    __ sminp(v17, __ T4S, v18, v19);                   \/\/       sminp   v17.4S, v18.4S, v19.4S\n@@ -645,14 +657,14 @@\n-    __ fmin(v28, __ T4S, v29, v30);                    \/\/       fmin    v28.4S, v29.4S, v30.4S\n-    __ fmin(v28, __ T2D, v29, v30);                    \/\/       fmin    v28.2D, v29.2D, v30.2D\n-    __ cmeq(v19, __ T8B, v20, v21);                    \/\/       cmeq    v19.8B, v20.8B, v21.8B\n-    __ cmeq(v22, __ T16B, v23, v24);                   \/\/       cmeq    v22.16B, v23.16B, v24.16B\n-    __ cmeq(v10, __ T4H, v11, v12);                    \/\/       cmeq    v10.4H, v11.4H, v12.4H\n-    __ cmeq(v4, __ T8H, v5, v6);                       \/\/       cmeq    v4.8H, v5.8H, v6.8H\n-    __ cmeq(v30, __ T2S, v31, v0);                     \/\/       cmeq    v30.2S, v31.2S, v0.2S\n-    __ cmeq(v20, __ T4S, v21, v22);                    \/\/       cmeq    v20.4S, v21.4S, v22.4S\n-    __ cmeq(v8, __ T2D, v9, v10);                      \/\/       cmeq    v8.2D, v9.2D, v10.2D\n-    __ fcmeq(v30, __ T2S, v31, v0);                    \/\/       fcmeq   v30.2S, v31.2S, v0.2S\n-    __ fcmeq(v17, __ T4S, v18, v19);                   \/\/       fcmeq   v17.4S, v18.4S, v19.4S\n-    __ fcmeq(v10, __ T2D, v11, v12);                   \/\/       fcmeq   v10.2D, v11.2D, v12.2D\n-    __ cmgt(v27, __ T8B, v28, v29);                    \/\/       cmgt    v27.8B, v28.8B, v29.8B\n-    __ cmgt(v2, __ T16B, v3, v4);                      \/\/       cmgt    v2.16B, v3.16B, v4.16B\n+    __ fmin(v27, __ T4S, v28, v29);                    \/\/       fmin    v27.4S, v28.4S, v29.4S\n+    __ fmin(v2, __ T2D, v3, v4);                       \/\/       fmin    v2.2D, v3.2D, v4.2D\n+    __ cmeq(v24, __ T8B, v25, v26);                    \/\/       cmeq    v24.8B, v25.8B, v26.8B\n+    __ cmeq(v4, __ T16B, v5, v6);                      \/\/       cmeq    v4.16B, v5.16B, v6.16B\n+    __ cmeq(v3, __ T4H, v4, v5);                       \/\/       cmeq    v3.4H, v4.4H, v5.4H\n+    __ cmeq(v8, __ T8H, v9, v10);                      \/\/       cmeq    v8.8H, v9.8H, v10.8H\n+    __ cmeq(v22, __ T2S, v23, v24);                    \/\/       cmeq    v22.2S, v23.2S, v24.2S\n+    __ cmeq(v17, __ T4S, v18, v19);                    \/\/       cmeq    v17.4S, v18.4S, v19.4S\n+    __ cmeq(v13, __ T2D, v14, v15);                    \/\/       cmeq    v13.2D, v14.2D, v15.2D\n+    __ fcmeq(v4, __ T2S, v5, v6);                      \/\/       fcmeq   v4.2S, v5.2S, v6.2S\n+    __ fcmeq(v28, __ T4S, v29, v30);                   \/\/       fcmeq   v28.4S, v29.4S, v30.4S\n+    __ fcmeq(v23, __ T2D, v24, v25);                   \/\/       fcmeq   v23.2D, v24.2D, v25.2D\n+    __ cmgt(v21, __ T8B, v22, v23);                    \/\/       cmgt    v21.8B, v22.8B, v23.8B\n+    __ cmgt(v25, __ T16B, v26, v27);                   \/\/       cmgt    v25.16B, v26.16B, v27.16B\n@@ -660,17 +672,31 @@\n-    __ cmgt(v4, __ T8H, v5, v6);                       \/\/       cmgt    v4.8H, v5.8H, v6.8H\n-    __ cmgt(v3, __ T2S, v4, v5);                       \/\/       cmgt    v3.2S, v4.2S, v5.2S\n-    __ cmgt(v8, __ T4S, v9, v10);                      \/\/       cmgt    v8.4S, v9.4S, v10.4S\n-    __ cmgt(v22, __ T2D, v23, v24);                    \/\/       cmgt    v22.2D, v23.2D, v24.2D\n-    __ fcmgt(v17, __ T2S, v18, v19);                   \/\/       fcmgt   v17.2S, v18.2S, v19.2S\n-    __ fcmgt(v13, __ T4S, v14, v15);                   \/\/       fcmgt   v13.4S, v14.4S, v15.4S\n-    __ fcmgt(v4, __ T2D, v5, v6);                      \/\/       fcmgt   v4.2D, v5.2D, v6.2D\n-    __ cmge(v28, __ T8B, v29, v30);                    \/\/       cmge    v28.8B, v29.8B, v30.8B\n-    __ cmge(v23, __ T16B, v24, v25);                   \/\/       cmge    v23.16B, v24.16B, v25.16B\n-    __ cmge(v21, __ T4H, v22, v23);                    \/\/       cmge    v21.4H, v22.4H, v23.4H\n-    __ cmge(v25, __ T8H, v26, v27);                    \/\/       cmge    v25.8H, v26.8H, v27.8H\n-    __ cmge(v24, __ T2S, v25, v26);                    \/\/       cmge    v24.2S, v25.2S, v26.2S\n-    __ cmge(v3, __ T4S, v4, v5);                       \/\/       cmge    v3.4S, v4.4S, v5.4S\n-    __ cmge(v23, __ T2D, v24, v25);                    \/\/       cmge    v23.2D, v24.2D, v25.2D\n-    __ fcmge(v26, __ T2S, v27, v28);                   \/\/       fcmge   v26.2S, v27.2S, v28.2S\n-    __ fcmge(v23, __ T4S, v24, v25);                   \/\/       fcmge   v23.4S, v24.4S, v25.4S\n-    __ fcmge(v14, __ T2D, v15, v16);                   \/\/       fcmge   v14.2D, v15.2D, v16.2D\n+    __ cmgt(v3, __ T8H, v4, v5);                       \/\/       cmgt    v3.8H, v4.8H, v5.8H\n+    __ cmgt(v23, __ T2S, v24, v25);                    \/\/       cmgt    v23.2S, v24.2S, v25.2S\n+    __ cmgt(v26, __ T4S, v27, v28);                    \/\/       cmgt    v26.4S, v27.4S, v28.4S\n+    __ cmgt(v23, __ T2D, v24, v25);                    \/\/       cmgt    v23.2D, v24.2D, v25.2D\n+    __ cmhi(v14, __ T8B, v15, v16);                    \/\/       cmhi    v14.8B, v15.8B, v16.8B\n+    __ cmhi(v21, __ T16B, v22, v23);                   \/\/       cmhi    v21.16B, v22.16B, v23.16B\n+    __ cmhi(v3, __ T4H, v4, v5);                       \/\/       cmhi    v3.4H, v4.4H, v5.4H\n+    __ cmhi(v23, __ T8H, v24, v25);                    \/\/       cmhi    v23.8H, v24.8H, v25.8H\n+    __ cmhi(v8, __ T2S, v9, v10);                      \/\/       cmhi    v8.2S, v9.2S, v10.2S\n+    __ cmhi(v24, __ T4S, v25, v26);                    \/\/       cmhi    v24.4S, v25.4S, v26.4S\n+    __ cmhi(v19, __ T2D, v20, v21);                    \/\/       cmhi    v19.2D, v20.2D, v21.2D\n+    __ cmhs(v15, __ T8B, v16, v17);                    \/\/       cmhs    v15.8B, v16.8B, v17.8B\n+    __ cmhs(v16, __ T16B, v17, v18);                   \/\/       cmhs    v16.16B, v17.16B, v18.16B\n+    __ cmhs(v2, __ T4H, v3, v4);                       \/\/       cmhs    v2.4H, v3.4H, v4.4H\n+    __ cmhs(v1, __ T8H, v2, v3);                       \/\/       cmhs    v1.8H, v2.8H, v3.8H\n+    __ cmhs(v0, __ T2S, v1, v2);                       \/\/       cmhs    v0.2S, v1.2S, v2.2S\n+    __ cmhs(v24, __ T4S, v25, v26);                    \/\/       cmhs    v24.4S, v25.4S, v26.4S\n+    __ cmhs(v4, __ T2D, v5, v6);                       \/\/       cmhs    v4.2D, v5.2D, v6.2D\n+    __ fcmgt(v3, __ T2S, v4, v5);                      \/\/       fcmgt   v3.2S, v4.2S, v5.2S\n+    __ fcmgt(v11, __ T4S, v12, v13);                   \/\/       fcmgt   v11.4S, v12.4S, v13.4S\n+    __ fcmgt(v30, __ T2D, v31, v0);                    \/\/       fcmgt   v30.2D, v31.2D, v0.2D\n+    __ cmge(v27, __ T8B, v28, v29);                    \/\/       cmge    v27.8B, v28.8B, v29.8B\n+    __ cmge(v9, __ T16B, v10, v11);                    \/\/       cmge    v9.16B, v10.16B, v11.16B\n+    __ cmge(v25, __ T4H, v26, v27);                    \/\/       cmge    v25.4H, v26.4H, v27.4H\n+    __ cmge(v2, __ T8H, v3, v4);                       \/\/       cmge    v2.8H, v3.8H, v4.8H\n+    __ cmge(v12, __ T2S, v13, v14);                    \/\/       cmge    v12.2S, v13.2S, v14.2S\n+    __ cmge(v17, __ T4S, v18, v19);                    \/\/       cmge    v17.4S, v18.4S, v19.4S\n+    __ cmge(v30, __ T2D, v31, v0);                     \/\/       cmge    v30.2D, v31.2D, v0.2D\n+    __ fcmge(v1, __ T2S, v2, v3);                      \/\/       fcmge   v1.2S, v2.2S, v3.2S\n+    __ fcmge(v12, __ T4S, v13, v14);                   \/\/       fcmge   v12.4S, v13.4S, v14.4S\n+    __ fcmge(v28, __ T2D, v29, v30);                   \/\/       fcmge   v28.2D, v29.2D, v30.2D\n@@ -841,9 +867,9 @@\n-    __ swp(Assembler::xword, r21, r3, r24);            \/\/       swp     x21, x3, [x24]\n-    __ ldadd(Assembler::xword, r8, r25, r20);          \/\/       ldadd   x8, x25, [x20]\n-    __ ldbic(Assembler::xword, r16, r17, r2);          \/\/       ldclr   x16, x17, [x2]\n-    __ ldeor(Assembler::xword, r1, r0, r24);           \/\/       ldeor   x1, x0, [x24]\n-    __ ldorr(Assembler::xword, r4, r3, r12);           \/\/       ldset   x4, x3, [x12]\n-    __ ldsmin(Assembler::xword, zr, r28, r10);         \/\/       ldsmin  xzr, x28, [x10]\n-    __ ldsmax(Assembler::xword, r26, r2, r12);         \/\/       ldsmax  x26, x2, [x12]\n-    __ ldumin(Assembler::xword, r16, zr, r1);          \/\/       ldumin  x16, xzr, [x1]\n-    __ ldumax(Assembler::xword, r13, r29, r0);         \/\/       ldumax  x13, x29, [x0]\n+    __ swp(Assembler::xword, r0, r19, r12);            \/\/       swp     x0, x19, [x12]\n+    __ ldadd(Assembler::xword, r17, r22, r13);         \/\/       ldadd   x17, x22, [x13]\n+    __ ldbic(Assembler::xword, r28, r30, sp);          \/\/       ldclr   x28, x30, [sp]\n+    __ ldeor(Assembler::xword, r1, r26, r28);          \/\/       ldeor   x1, x26, [x28]\n+    __ ldorr(Assembler::xword, r4, r30, r4);           \/\/       ldset   x4, x30, [x4]\n+    __ ldsmin(Assembler::xword, r6, r30, r26);         \/\/       ldsmin  x6, x30, [x26]\n+    __ ldsmax(Assembler::xword, r16, r9, r8);          \/\/       ldsmax  x16, x9, [x8]\n+    __ ldumin(Assembler::xword, r12, r0, r20);         \/\/       ldumin  x12, x0, [x20]\n+    __ ldumax(Assembler::xword, r1, r24, r2);          \/\/       ldumax  x1, x24, [x2]\n@@ -852,9 +878,9 @@\n-    __ swpa(Assembler::xword, r19, r12, r17);          \/\/       swpa    x19, x12, [x17]\n-    __ ldadda(Assembler::xword, r22, r13, r28);        \/\/       ldadda  x22, x13, [x28]\n-    __ ldbica(Assembler::xword, r30, zr, r1);          \/\/       ldclra  x30, xzr, [x1]\n-    __ ldeora(Assembler::xword, r26, r28, r4);         \/\/       ldeora  x26, x28, [x4]\n-    __ ldorra(Assembler::xword, r30, r4, r6);          \/\/       ldseta  x30, x4, [x6]\n-    __ ldsmina(Assembler::xword, r30, r26, r15);       \/\/       ldsmina x30, x26, [x15]\n-    __ ldsmaxa(Assembler::xword, r9, r8, r12);         \/\/       ldsmaxa x9, x8, [x12]\n-    __ ldumina(Assembler::xword, r0, r20, r1);         \/\/       ldumina x0, x20, [x1]\n-    __ ldumaxa(Assembler::xword, r24, r2, r0);         \/\/       ldumaxa x24, x2, [x0]\n+    __ swpa(Assembler::xword, r0, r9, r24);            \/\/       swpa    x0, x9, [x24]\n+    __ ldadda(Assembler::xword, r26, r16, r30);        \/\/       ldadda  x26, x16, [x30]\n+    __ ldbica(Assembler::xword, r3, r10, r23);         \/\/       ldclra  x3, x10, [x23]\n+    __ ldeora(Assembler::xword, r10, r4, r15);         \/\/       ldeora  x10, x4, [x15]\n+    __ ldorra(Assembler::xword, r2, r11, r8);          \/\/       ldseta  x2, x11, [x8]\n+    __ ldsmina(Assembler::xword, r10, r15, r17);       \/\/       ldsmina x10, x15, [x17]\n+    __ ldsmaxa(Assembler::xword, r2, r10, r12);        \/\/       ldsmaxa x2, x10, [x12]\n+    __ ldumina(Assembler::xword, r12, r15, r13);       \/\/       ldumina x12, x15, [x13]\n+    __ ldumaxa(Assembler::xword, r2, r7, r20);         \/\/       ldumaxa x2, x7, [x20]\n@@ -863,9 +889,9 @@\n-    __ swpal(Assembler::xword, r9, r24, r26);          \/\/       swpal   x9, x24, [x26]\n-    __ ldaddal(Assembler::xword, r16, r30, r3);        \/\/       ldaddal x16, x30, [x3]\n-    __ ldbical(Assembler::xword, r10, r23, r10);       \/\/       ldclral x10, x23, [x10]\n-    __ ldeoral(Assembler::xword, r4, r16, r2);         \/\/       ldeoral x4, x16, [x2]\n-    __ ldorral(Assembler::xword, r11, r8, r10);        \/\/       ldsetal x11, x8, [x10]\n-    __ ldsminal(Assembler::xword, r15, r17, r2);       \/\/       ldsminal        x15, x17, [x2]\n-    __ ldsmaxal(Assembler::xword, r10, r12, r12);      \/\/       ldsmaxal        x10, x12, [x12]\n-    __ lduminal(Assembler::xword, r15, r13, r2);       \/\/       lduminal        x15, x13, [x2]\n-    __ ldumaxal(Assembler::xword, r7, r20, r26);       \/\/       ldumaxal        x7, x20, [x26]\n+    __ swpal(Assembler::xword, r26, r16, r4);          \/\/       swpal   x26, x16, [x4]\n+    __ ldaddal(Assembler::xword, r2, r4, r12);         \/\/       ldaddal x2, x4, [x12]\n+    __ ldbical(Assembler::xword, r16, r21, r16);       \/\/       ldclral x16, x21, [x16]\n+    __ ldeoral(Assembler::xword, r16, r11, r21);       \/\/       ldeoral x16, x11, [x21]\n+    __ ldorral(Assembler::xword, r23, r12, r26);       \/\/       ldsetal x23, x12, [x26]\n+    __ ldsminal(Assembler::xword, r23, r28, r14);      \/\/       ldsminal        x23, x28, [x14]\n+    __ ldsmaxal(Assembler::xword, r11, r24, r1);       \/\/       ldsmaxal        x11, x24, [x1]\n+    __ lduminal(Assembler::xword, r12, zr, r10);       \/\/       lduminal        x12, xzr, [x10]\n+    __ ldumaxal(Assembler::xword, r16, r7, r2);        \/\/       ldumaxal        x16, x7, [x2]\n@@ -874,9 +900,9 @@\n-    __ swpl(Assembler::xword, r16, r4, r2);            \/\/       swpl    x16, x4, [x2]\n-    __ ldaddl(Assembler::xword, r4, r12, r15);         \/\/       ldaddl  x4, x12, [x15]\n-    __ ldbicl(Assembler::xword, r21, r16, r15);        \/\/       ldclrl  x21, x16, [x15]\n-    __ ldeorl(Assembler::xword, r11, r21, r23);        \/\/       ldeorl  x11, x21, [x23]\n-    __ ldorrl(Assembler::xword, r12, r26, r23);        \/\/       ldsetl  x12, x26, [x23]\n-    __ ldsminl(Assembler::xword, r28, r14, r11);       \/\/       ldsminl x28, x14, [x11]\n-    __ ldsmaxl(Assembler::xword, r24, r1, r12);        \/\/       ldsmaxl x24, x1, [x12]\n-    __ lduminl(Assembler::xword, zr, r10, r16);        \/\/       lduminl xzr, x10, [x16]\n-    __ ldumaxl(Assembler::xword, r7, r2, r3);          \/\/       ldumaxl x7, x2, [x3]\n+    __ swpl(Assembler::xword, r3, r13, r19);           \/\/       swpl    x3, x13, [x19]\n+    __ ldaddl(Assembler::xword, r17, r16, r3);         \/\/       ldaddl  x17, x16, [x3]\n+    __ ldbicl(Assembler::xword, r1, r11, r30);         \/\/       ldclrl  x1, x11, [x30]\n+    __ ldeorl(Assembler::xword, r5, r8, r15);          \/\/       ldeorl  x5, x8, [x15]\n+    __ ldorrl(Assembler::xword, r29, r30, r0);         \/\/       ldsetl  x29, x30, [x0]\n+    __ ldsminl(Assembler::xword, r20, r7, r20);        \/\/       ldsminl x20, x7, [x20]\n+    __ ldsmaxl(Assembler::xword, r23, r28, r21);       \/\/       ldsmaxl x23, x28, [x21]\n+    __ lduminl(Assembler::xword, r27, r25, r5);        \/\/       lduminl x27, x25, [x5]\n+    __ ldumaxl(Assembler::xword, r1, r23, r16);        \/\/       ldumaxl x1, x23, [x16]\n@@ -885,9 +911,9 @@\n-    __ swp(Assembler::word, r13, r19, r17);            \/\/       swp     w13, w19, [x17]\n-    __ ldadd(Assembler::word, r16, r3, r1);            \/\/       ldadd   w16, w3, [x1]\n-    __ ldbic(Assembler::word, r11, r30, r5);           \/\/       ldclr   w11, w30, [x5]\n-    __ ldeor(Assembler::word, r8, r15, r29);           \/\/       ldeor   w8, w15, [x29]\n-    __ ldorr(Assembler::word, r30, r0, r20);           \/\/       ldset   w30, w0, [x20]\n-    __ ldsmin(Assembler::word, r7, r20, r23);          \/\/       ldsmin  w7, w20, [x23]\n-    __ ldsmax(Assembler::word, r28, r21, r27);         \/\/       ldsmax  w28, w21, [x27]\n-    __ ldumin(Assembler::word, r25, r5, r1);           \/\/       ldumin  w25, w5, [x1]\n-    __ ldumax(Assembler::word, r23, r16, sp);          \/\/       ldumax  w23, w16, [sp]\n+    __ swp(Assembler::word, zr, r5, r12);              \/\/       swp     wzr, w5, [x12]\n+    __ ldadd(Assembler::word, r9, r28, r15);           \/\/       ldadd   w9, w28, [x15]\n+    __ ldbic(Assembler::word, r29, r22, sp);           \/\/       ldclr   w29, w22, [sp]\n+    __ ldeor(Assembler::word, r19, zr, r5);            \/\/       ldeor   w19, wzr, [x5]\n+    __ ldorr(Assembler::word, r14, r16, sp);           \/\/       ldset   w14, w16, [sp]\n+    __ ldsmin(Assembler::word, r16, r27, r20);         \/\/       ldsmin  w16, w27, [x20]\n+    __ ldsmax(Assembler::word, r16, r12, r11);         \/\/       ldsmax  w16, w12, [x11]\n+    __ ldumin(Assembler::word, r9, r6, r30);           \/\/       ldumin  w9, w6, [x30]\n+    __ ldumax(Assembler::word, r17, r27, r28);         \/\/       ldumax  w17, w27, [x28]\n@@ -896,9 +922,9 @@\n-    __ swpa(Assembler::word, r5, r12, r9);             \/\/       swpa    w5, w12, [x9]\n-    __ ldadda(Assembler::word, r28, r15, r29);         \/\/       ldadda  w28, w15, [x29]\n-    __ ldbica(Assembler::word, r22, zr, r19);          \/\/       ldclra  w22, wzr, [x19]\n-    __ ldeora(Assembler::word, zr, r5, r14);           \/\/       ldeora  wzr, w5, [x14]\n-    __ ldorra(Assembler::word, r16, zr, r15);          \/\/       ldseta  w16, wzr, [x15]\n-    __ ldsmina(Assembler::word, r27, r20, r16);        \/\/       ldsmina w27, w20, [x16]\n-    __ ldsmaxa(Assembler::word, r12, r11, r9);         \/\/       ldsmaxa w12, w11, [x9]\n-    __ ldumina(Assembler::word, r6, r30, r17);         \/\/       ldumina w6, w30, [x17]\n-    __ ldumaxa(Assembler::word, r27, r28, r30);        \/\/       ldumaxa w27, w28, [x30]\n+    __ swpa(Assembler::word, r30, r7, r10);            \/\/       swpa    w30, w7, [x10]\n+    __ ldadda(Assembler::word, r20, r10, r4);          \/\/       ldadda  w20, w10, [x4]\n+    __ ldbica(Assembler::word, r24, r17, r17);         \/\/       ldclra  w24, w17, [x17]\n+    __ ldeora(Assembler::word, r22, r3, r29);          \/\/       ldeora  w22, w3, [x29]\n+    __ ldorra(Assembler::word, r15, r22, r19);         \/\/       ldseta  w15, w22, [x19]\n+    __ ldsmina(Assembler::word, r19, r22, r2);         \/\/       ldsmina w19, w22, [x2]\n+    __ ldsmaxa(Assembler::word, r15, r6, r12);         \/\/       ldsmaxa w15, w6, [x12]\n+    __ ldumina(Assembler::word, r16, r11, r13);        \/\/       ldumina w16, w11, [x13]\n+    __ ldumaxa(Assembler::word, r23, r1, r30);         \/\/       ldumaxa w23, w1, [x30]\n@@ -907,9 +933,9 @@\n-    __ swpal(Assembler::word, r7, r10, r20);           \/\/       swpal   w7, w10, [x20]\n-    __ ldaddal(Assembler::word, r10, r4, r24);         \/\/       ldaddal w10, w4, [x24]\n-    __ ldbical(Assembler::word, r17, r17, r22);        \/\/       ldclral w17, w17, [x22]\n-    __ ldeoral(Assembler::word, r3, r29, r15);         \/\/       ldeoral w3, w29, [x15]\n-    __ ldorral(Assembler::word, r22, r19, r19);        \/\/       ldsetal w22, w19, [x19]\n-    __ ldsminal(Assembler::word, r22, r2, r15);        \/\/       ldsminal        w22, w2, [x15]\n-    __ ldsmaxal(Assembler::word, r6, r12, r16);        \/\/       ldsmaxal        w6, w12, [x16]\n-    __ lduminal(Assembler::word, r11, r13, r23);       \/\/       lduminal        w11, w13, [x23]\n-    __ ldumaxal(Assembler::word, r1, r30, r19);        \/\/       ldumaxal        w1, w30, [x19]\n+    __ swpal(Assembler::word, r19, r5, r17);           \/\/       swpal   w19, w5, [x17]\n+    __ ldaddal(Assembler::word, r2, r16, r22);         \/\/       ldaddal w2, w16, [x22]\n+    __ ldbical(Assembler::word, r13, r10, r21);        \/\/       ldclral w13, w10, [x21]\n+    __ ldeoral(Assembler::word, r29, r27, r12);        \/\/       ldeoral w29, w27, [x12]\n+    __ ldorral(Assembler::word, r27, r3, r1);          \/\/       ldsetal w27, w3, [x1]\n+    __ ldsminal(Assembler::word, zr, r24, r19);        \/\/       ldsminal        wzr, w24, [x19]\n+    __ ldsmaxal(Assembler::word, r17, r9, r28);        \/\/       ldsmaxal        w17, w9, [x28]\n+    __ lduminal(Assembler::word, r27, r15, r7);        \/\/       lduminal        w27, w15, [x7]\n+    __ ldumaxal(Assembler::word, r21, r23, sp);        \/\/       ldumaxal        w21, w23, [sp]\n@@ -918,9 +944,9 @@\n-    __ swpl(Assembler::word, r5, r17, r2);             \/\/       swpl    w5, w17, [x2]\n-    __ ldaddl(Assembler::word, r16, r22, r13);         \/\/       ldaddl  w16, w22, [x13]\n-    __ ldbicl(Assembler::word, r10, r21, r29);         \/\/       ldclrl  w10, w21, [x29]\n-    __ ldeorl(Assembler::word, r27, r12, r27);         \/\/       ldeorl  w27, w12, [x27]\n-    __ ldorrl(Assembler::word, r3, r1, sp);            \/\/       ldsetl  w3, w1, [sp]\n-    __ ldsminl(Assembler::word, r24, r19, r17);        \/\/       ldsminl w24, w19, [x17]\n-    __ ldsmaxl(Assembler::word, r9, r28, r27);         \/\/       ldsmaxl w9, w28, [x27]\n-    __ lduminl(Assembler::word, r15, r7, r21);         \/\/       lduminl w15, w7, [x21]\n-    __ ldumaxl(Assembler::word, r23, zr, r25);         \/\/       ldumaxl w23, wzr, [x25]\n+    __ swpl(Assembler::word, r25, r2, sp);             \/\/       swpl    w25, w2, [sp]\n+    __ ldaddl(Assembler::word, r27, r16, r10);         \/\/       ldaddl  w27, w16, [x10]\n+    __ ldbicl(Assembler::word, r23, r19, r3);          \/\/       ldclrl  w23, w19, [x3]\n+    __ ldeorl(Assembler::word, r16, r0, r25);          \/\/       ldeorl  w16, w0, [x25]\n+    __ ldorrl(Assembler::word, r26, r23, r2);          \/\/       ldsetl  w26, w23, [x2]\n+    __ ldsminl(Assembler::word, r16, r12, r4);         \/\/       ldsminl w16, w12, [x4]\n+    __ ldsmaxl(Assembler::word, r28, r30, r29);        \/\/       ldsmaxl w28, w30, [x29]\n+    __ lduminl(Assembler::word, r16, r27, r6);         \/\/       lduminl w16, w27, [x6]\n+    __ ldumaxl(Assembler::word, r9, r29, r15);         \/\/       ldumaxl w9, w29, [x15]\n@@ -929,4 +955,4 @@\n-    __ bcax(v2, __ T16B, v30, v26, v17);               \/\/       bcax            v2.16B, v30.16B, v26.16B, v17.16B\n-    __ eor3(v10, __ T16B, v22, v17, v2);               \/\/       eor3            v10.16B, v22.16B, v17.16B, v2.16B\n-    __ rax1(v17, __ T2D, v0, v24);                     \/\/       rax1            v17.2D, v0.2D, v24.2D\n-    __ xar(v25, __ T2D, v22, v2, 37);                  \/\/       xar             v25.2D, v22.2D, v2.2D, #37\n+    __ bcax(v7, __ T16B, v4, v7, v15);                 \/\/       bcax            v7.16B, v4.16B, v7.16B, v15.16B\n+    __ eor3(v9, __ T16B, v22, v8, v2);                 \/\/       eor3            v9.16B, v22.16B, v8.16B, v2.16B\n+    __ rax1(v27, __ T2D, v20, v30);                    \/\/       rax1            v27.2D, v20.2D, v30.2D\n+    __ xar(v5, __ T2D, v26, v0, 34);                   \/\/       xar             v5.2D, v26.2D, v0.2D, #34\n@@ -935,4 +961,4 @@\n-    __ sha512h(v12, __ T2D, v3, v27);                  \/\/       sha512h         q12, q3, v27.2D\n-    __ sha512h2(v29, __ T2D, v28, v16);                \/\/       sha512h2                q29, q28, v16.2D\n-    __ sha512su0(v26, __ T2D, v6);                     \/\/       sha512su0               v26.2D, v6.2D\n-    __ sha512su1(v9, __ T2D, v28, v17);                \/\/       sha512su1               v9.2D, v28.2D, v17.2D\n+    __ sha512h(v14, __ T2D, v3, v25);                  \/\/       sha512h         q14, q3, v25.2D\n+    __ sha512h2(v8, __ T2D, v27, v21);                 \/\/       sha512h2                q8, q27, v21.2D\n+    __ sha512su0(v26, __ T2D, v26);                    \/\/       sha512su0               v26.2D, v26.2D\n+    __ sha512su1(v24, __ T2D, v22, v0);                \/\/       sha512su1               v24.2D, v22.2D, v0.2D\n@@ -941,0 +967,1 @@\n+<<<<<<< HEAD\n@@ -993,0 +1020,52 @@\n+=======\n+    __ sve_add(z4, __ B, z6, z17);                     \/\/       add     z4.b, z6.b, z17.b\n+    __ sve_sub(z3, __ H, z15, z1);                     \/\/       sub     z3.h, z15.h, z1.h\n+    __ sve_fadd(z6, __ D, z5, z9);                     \/\/       fadd    z6.d, z5.d, z9.d\n+    __ sve_fmul(z7, __ D, z20, z22);                   \/\/       fmul    z7.d, z20.d, z22.d\n+    __ sve_fsub(z5, __ D, z10, z8);                    \/\/       fsub    z5.d, z10.d, z8.d\n+    __ sve_abs(z30, __ B, p1, z17);                    \/\/       abs     z30.b, p1\/m, z17.b\n+    __ sve_add(z11, __ B, p7, z28);                    \/\/       add     z11.b, p7\/m, z11.b, z28.b\n+    __ sve_asr(z26, __ H, p5, z28);                    \/\/       asr     z26.h, p5\/m, z26.h, z28.h\n+    __ sve_cnt(z13, __ D, p7, z16);                    \/\/       cnt     z13.d, p7\/m, z16.d\n+    __ sve_lsl(z5, __ H, p0, z13);                     \/\/       lsl     z5.h, p0\/m, z5.h, z13.h\n+    __ sve_lsr(z15, __ S, p2, z26);                    \/\/       lsr     z15.s, p2\/m, z15.s, z26.s\n+    __ sve_mul(z11, __ S, p1, z22);                    \/\/       mul     z11.s, p1\/m, z11.s, z22.s\n+    __ sve_neg(z4, __ S, p0, z19);                     \/\/       neg     z4.s, p0\/m, z19.s\n+    __ sve_not(z17, __ H, p3, z14);                    \/\/       not     z17.h, p3\/m, z14.h\n+    __ sve_smax(z2, __ S, p4, z3);                     \/\/       smax    z2.s, p4\/m, z2.s, z3.s\n+    __ sve_smin(z23, __ B, p1, z6);                    \/\/       smin    z23.b, p1\/m, z23.b, z6.b\n+    __ sve_sub(z17, __ S, p3, z27);                    \/\/       sub     z17.s, p3\/m, z17.s, z27.s\n+    __ sve_fabs(z16, __ D, p1, z2);                    \/\/       fabs    z16.d, p1\/m, z2.d\n+    __ sve_fadd(z3, __ D, p1, z6);                     \/\/       fadd    z3.d, p1\/m, z3.d, z6.d\n+    __ sve_fdiv(z19, __ D, p3, z12);                   \/\/       fdiv    z19.d, p3\/m, z19.d, z12.d\n+    __ sve_fmax(z8, __ D, p6, z19);                    \/\/       fmax    z8.d, p6\/m, z8.d, z19.d\n+    __ sve_fmin(z0, __ S, p2, z23);                    \/\/       fmin    z0.s, p2\/m, z0.s, z23.s\n+    __ sve_fmul(z19, __ D, p7, z13);                   \/\/       fmul    z19.d, p7\/m, z19.d, z13.d\n+    __ sve_fneg(z6, __ S, p0, z7);                     \/\/       fneg    z6.s, p0\/m, z7.s\n+    __ sve_frintm(z17, __ S, p6, z8);                  \/\/       frintm  z17.s, p6\/m, z8.s\n+    __ sve_frintn(z22, __ D, p5, z22);                 \/\/       frintn  z22.d, p5\/m, z22.d\n+    __ sve_frintp(z2, __ D, p0, z15);                  \/\/       frintp  z2.d, p0\/m, z15.d\n+    __ sve_fsqrt(z20, __ D, p1, z4);                   \/\/       fsqrt   z20.d, p1\/m, z4.d\n+    __ sve_fsub(z7, __ D, p0, z8);                     \/\/       fsub    z7.d, p0\/m, z7.d, z8.d\n+    __ sve_fmla(z19, __ S, p5, z4, z15);               \/\/       fmla    z19.s, p5\/m, z4.s, z15.s\n+    __ sve_fmls(z22, __ D, p2, z25, z5);               \/\/       fmls    z22.d, p2\/m, z25.d, z5.d\n+    __ sve_fnmla(z16, __ S, p3, z22, z11);             \/\/       fnmla   z16.s, p3\/m, z22.s, z11.s\n+    __ sve_fnmls(z13, __ D, p2, z20, z16);             \/\/       fnmls   z13.d, p2\/m, z20.d, z16.d\n+    __ sve_mla(z15, __ H, p1, z4, z17);                \/\/       mla     z15.h, p1\/m, z4.h, z17.h\n+    __ sve_mls(z6, __ S, p7, z4, z28);                 \/\/       mls     z6.s, p7\/m, z4.s, z28.s\n+    __ sve_and(z29, z26, z9);                          \/\/       and     z29.d, z26.d, z9.d\n+    __ sve_eor(z2, z11, z28);                          \/\/       eor     z2.d, z11.d, z28.d\n+    __ sve_orr(z7, z1, z26);                           \/\/       orr     z7.d, z1.d, z26.d\n+    __ sve_bic(z17, z14, z8);                          \/\/       bic     z17.d, z14.d, z8.d\n+\n+\/\/ SVEReductionOp\n+    __ sve_andv(v21, __ S, p6, z5);                    \/\/       andv s21, p6, z5.s\n+    __ sve_orv(v21, __ S, p4, z22);                    \/\/       orv s21, p4, z22.s\n+    __ sve_eorv(v29, __ B, p5, z19);                   \/\/       eorv b29, p5, z19.b\n+    __ sve_smaxv(v4, __ B, p4, z23);                   \/\/       smaxv b4, p4, z23.b\n+    __ sve_sminv(v19, __ D, p1, z23);                  \/\/       sminv d19, p1, z23.d\n+    __ sve_fminv(v19, __ S, p0, z8);                   \/\/       fminv s19, p0, z8.s\n+    __ sve_fmaxv(v14, __ D, p6, z17);                  \/\/       fmaxv d14, p6, z17.d\n+    __ sve_fadda(v21, __ S, p1, z30);                  \/\/       fadda s21, p1, s21, z30.s\n+    __ sve_uaddv(v10, __ B, p5, z12);                  \/\/       uaddv d10, p5, z12.b\n+>>>>>>> master\n@@ -1011,0 +1090,1 @@\n+<<<<<<< HEAD\n@@ -1018,0 +1098,9 @@\n+=======\n+    0x14000000,     0x17ffffd7,     0x140002fb,     0x94000000,\n+    0x97ffffd4,     0x940002f8,     0x3400000a,     0x34fffa2a,\n+    0x34005eaa,     0x35000008,     0x35fff9c8,     0x35005e48,\n+    0xb400000b,     0xb4fff96b,     0xb4005deb,     0xb500001d,\n+    0xb5fff91d,     0xb5005d9d,     0x10000013,     0x10fff8b3,\n+    0x10005d33,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305cb6,     0x3758000c,     0x375ff7cc,     0x37585c4c,\n+>>>>>>> master\n@@ -1022,0 +1111,1 @@\n+<<<<<<< HEAD\n@@ -1035,0 +1125,15 @@\n+=======\n+    0x54005a20,     0x54000001,     0x54fff541,     0x540059c1,\n+    0x54000002,     0x54fff4e2,     0x54005962,     0x54000002,\n+    0x54fff482,     0x54005902,     0x54000003,     0x54fff423,\n+    0x540058a3,     0x54000003,     0x54fff3c3,     0x54005843,\n+    0x54000004,     0x54fff364,     0x540057e4,     0x54000005,\n+    0x54fff305,     0x54005785,     0x54000006,     0x54fff2a6,\n+    0x54005726,     0x54000007,     0x54fff247,     0x540056c7,\n+    0x54000008,     0x54fff1e8,     0x54005668,     0x54000009,\n+    0x54fff189,     0x54005609,     0x5400000a,     0x54fff12a,\n+    0x540055aa,     0x5400000b,     0x54fff0cb,     0x5400554b,\n+    0x5400000c,     0x54fff06c,     0x540054ec,     0x5400000d,\n+    0x54fff00d,     0x5400548d,     0x5400000e,     0x54ffefae,\n+    0x5400542e,     0x5400000f,     0x54ffef4f,     0x540053cf,\n+>>>>>>> master\n@@ -1066,0 +1171,1 @@\n+<<<<<<< HEAD\n@@ -1067,0 +1173,3 @@\n+=======\n+    0xbd1b1869,     0x5800441b,     0x1800000b,     0xf8945060,\n+>>>>>>> master\n@@ -1131,0 +1240,1 @@\n+<<<<<<< HEAD\n@@ -1215,0 +1325,74 @@\n+=======\n+    0x0eb36651,     0x4ebf67dd,     0x0e3ca77a,     0x4e3ea7bc,\n+    0x0e63a441,     0x4e7da79b,     0x0ea2a420,     0x4eb6a6b4,\n+    0x0e3ef7bc,     0x4e31f60f,     0x4e6ef5ac,     0x0e2c6d6a,\n+    0x4e3e6fbc,     0x0e7e6fbc,     0x4e756e93,     0x0eb86ef6,\n+    0x4eac6d6a,     0x0e26aca4,     0x4e20affe,     0x0e76aeb4,\n+    0x4e6aad28,     0x0ea0affe,     0x4eb3ae51,     0x0eacf56a,\n+    0x4ebdf79b,     0x4ee4f462,     0x2e3a8f38,     0x6e268ca4,\n+    0x2e658c83,     0x6e6a8d28,     0x2eb88ef6,     0x6eb38e51,\n+    0x6eef8dcd,     0x0e26e4a4,     0x4e3ee7bc,     0x4e79e717,\n+    0x0e3736d5,     0x4e3b3759,     0x0e7a3738,     0x4e653483,\n+    0x0eb93717,     0x4ebc377a,     0x4ef93717,     0x2e3035ee,\n+    0x6e3736d5,     0x2e653483,     0x6e793717,     0x2eaa3528,\n+    0x6eba3738,     0x6ef53693,     0x2e313e0f,     0x6e323e30,\n+    0x2e643c62,     0x6e633c41,     0x2ea23c20,     0x6eba3f38,\n+    0x6ee63ca4,     0x2ea5e483,     0x6eade58b,     0x6ee0e7fe,\n+    0x0e3d3f9b,     0x4e2b3d49,     0x0e7b3f59,     0x4e643c62,\n+    0x0eae3dac,     0x4eb33e51,     0x4ee03ffe,     0x2e23e441,\n+    0x6e2ee5ac,     0x6e7ee7bc,     0xba5fd3e3,     0x3a5f03e5,\n+    0xfa411be4,     0x7a42cbe2,     0x93df03ff,     0xc820ffff,\n+    0x8822fc7f,     0xc8247cbf,     0x88267fff,     0x4e010fe0,\n+    0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,     0x4e071fe1,\n+    0x4e042c20,     0x4e062c20,     0x4e052c20,     0x4e083c20,\n+    0x0e0c3c20,     0x0e0a3c20,     0x0e073c20,     0x4cc0ac3f,\n+    0x05a08020,     0x04b0e3e0,     0x0470e7e1,     0x042f9c20,\n+    0x043f9c35,     0x047f9c20,     0x04ff9c20,     0x04299420,\n+    0x04319160,     0x0461943e,     0x04a19020,     0x042053ff,\n+    0x047f5401,     0x25208028,     0x2538cfe0,     0x2578d001,\n+    0x25b8efe2,     0x25f8f007,     0xa400a3e0,     0xa4a8a7ea,\n+    0xa547a814,     0xa4084ffe,     0xa55c53e0,     0xa5e1540b,\n+    0xe400fbf6,     0xe408ffff,     0xe547e400,     0xe4014be0,\n+    0xe4a84fe0,     0xe5f15000,     0x858043e0,     0x85a043ff,\n+    0xe59f5d08,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8208193,     0xf83101b6,     0xf83c13fe,\n+    0xf821239a,     0xf824309e,     0xf826535e,     0xf8304109,\n+    0xf82c7280,     0xf8216058,     0xf8a08309,     0xf8ba03d0,\n+    0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,     0xf8aa522f,\n+    0xf8a2418a,     0xf8ac71af,     0xf8a26287,     0xf8fa8090,\n+    0xf8e20184,     0xf8f01215,     0xf8f022ab,     0xf8f7334c,\n+    0xf8f751dc,     0xf8eb4038,     0xf8ec715f,     0xf8f06047,\n+    0xf863826d,     0xf8710070,     0xf86113cb,     0xf86521e8,\n+    0xf87d301e,     0xf8745287,     0xf87742bc,     0xf87b70b9,\n+    0xf8616217,     0xb83f8185,     0xb82901fc,     0xb83d13f6,\n+    0xb83320bf,     0xb82e33f0,     0xb830529b,     0xb830416c,\n+    0xb82973c6,     0xb831639b,     0xb8be8147,     0xb8b4008a,\n+    0xb8b81231,     0xb8b623a3,     0xb8af3276,     0xb8b35056,\n+    0xb8af4186,     0xb8b071ab,     0xb8b763c1,     0xb8f38225,\n+    0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,     0xb8fb3023,\n+    0xb8ff5278,     0xb8f14389,     0xb8fb70ef,     0xb8f563f7,\n+    0xb87983e2,     0xb87b0150,     0xb8771073,     0xb8702320,\n+    0xb87a3057,     0xb870508c,     0xb87c43be,     0xb87070db,\n+    0xb86961fd,     0xce273c87,     0xce080ac9,     0xce7e8e9b,\n+    0xce808b45,     0xce79806e,     0xce758768,     0xcec0835a,\n+    0xce608ad8,     0x043100c4,     0x046105e3,     0x65c900a6,\n+    0x65d60a87,     0x65c80545,     0x0416a63e,     0x04001f8b,\n+    0x0450979a,     0x04dabe0d,     0x045381a5,     0x04918b4f,\n+    0x049006cb,     0x0497a264,     0x045eadd1,     0x04881062,\n+    0x040a04d7,     0x04810f71,     0x04dca450,     0x65c084c3,\n+    0x65cd8d93,     0x65c69a68,     0x65878ae0,     0x65c29db3,\n+    0x049da0e6,     0x6582b911,     0x65c0b6d6,     0x65c1a1e2,\n+    0x65cda494,     0x65c18107,     0x65af1493,     0x65e52b36,\n+    0x65ab4ed0,     0x65f06a8d,     0x0451448f,     0x049c7c86,\n+    0x0429335d,     0x04bc3162,     0x047a3027,     0x04e831d1,\n+    0x049a38b5,     0x049832d5,     0x0419367d,     0x040832e4,\n+    0x04ca26f3,     0x65872113,     0x65c63a2e,     0x659827d5,\n+    0x0401358a,\n+>>>>>>> master\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":304,"deletions":120,"binary":false,"changes":424,"status":"modified"}]}