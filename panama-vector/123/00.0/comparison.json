{"files":[{"patch":"@@ -2644,0 +2644,7 @@\n+    if (u->is_LoadStore()) {\n+      \/\/ On AArch64, LoadStoreNodes (i.e. compare and swap\n+      \/\/ instructions) only take register indirect as an operand, so\n+      \/\/ any attempt to use an AddPNode as an input to a LoadStoreNode\n+      \/\/ must fail.\n+      return false;\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4778,1 +4778,8 @@\n-\/\/    scratch1 = cnt & 7;\n+\/\/    if (cnt == 0) {\n+\/\/      return;\n+\/\/    }\n+\/\/    if ((p & 8) != 0) {\n+\/\/      *p++ = v;\n+\/\/    }\n+\/\/\n+\/\/    scratch1 = cnt & 14;\n@@ -4781,1 +4788,1 @@\n-\/\/    switch (scratch1) {\n+\/\/    switch (scratch1 \/ 2) {\n@@ -4783,2 +4790,3 @@\n-\/\/        cnt -= 8;\n-\/\/          p[-8] = v;\n+\/\/        cnt -= 16;\n+\/\/          p[-16] = v;\n+\/\/          p[-15] = v;\n@@ -4786,1 +4794,2 @@\n-\/\/          p[-7] = v;\n+\/\/          p[-14] = v;\n+\/\/          p[-13] = v;\n@@ -4788,1 +4797,2 @@\n-\/\/          p[-6] = v;\n+\/\/          p[-12] = v;\n+\/\/          p[-11] = v;\n@@ -4791,0 +4801,1 @@\n+\/\/          p[-2] = v;\n@@ -4793,1 +4804,1 @@\n-\/\/          p += 8;\n+\/\/          p += 16;\n@@ -4795,0 +4806,3 @@\n+\/\/    }\n+\/\/    if ((cnt & 1) == 1) {\n+\/\/      *p++ = v;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2776,1 +2776,1 @@\n-  if (can_reshape && !in(0)->is_Loop()) {\n+  if (can_reshape && !in(0)->is_Region()) {\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1358,1 +1358,1 @@\n-          offset < k->size_helper() * wordSize) {\n+          offset < k->layout_helper_size_in_bytes()) {\n@@ -1382,1 +1382,1 @@\n-    } else if (offset < 0 || offset >= k->size_helper() * wordSize) {\n+    } else if (offset < 0 || offset >= k->layout_helper_size_in_bytes()) {\n@@ -1392,0 +1392,1 @@\n+      assert(offset < canonical_holder->layout_helper_size_in_bytes(), \"\");\n@@ -1664,1 +1665,1 @@\n-          tinst->offset() >= (tinst->klass()->as_instance_klass()->size_helper() * wordSize)) {\n+          tinst->offset() >= (tinst->klass()->as_instance_klass()->layout_helper_size_in_bytes())) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1761,2 +1761,1 @@\n-      \/\/ In case the size exceeds the arch size, we do the minimum.\n-      int num_elem_for_cast = MIN2(num_elem_from, Matcher::max_vector_size(elem_bt_to));\n+      int num_elem_for_cast = num_elem_from;\n@@ -1781,1 +1780,1 @@\n-      int num_elem_for_resize = MAX2(num_elem_to, Matcher::min_vector_size(elem_bt_from));\n+      int num_elem_for_resize = num_elem_to;\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}