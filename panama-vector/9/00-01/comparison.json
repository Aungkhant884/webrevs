{"files":[{"patch":"@@ -5157,2 +5157,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5184,4 +5186,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5195,1 +5197,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5213,2 +5215,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5217,1 +5219,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5157,2 +5157,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5184,4 +5186,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5195,1 +5197,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5213,2 +5215,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5217,1 +5219,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5157,2 +5157,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5184,4 +5186,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5195,1 +5197,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5213,2 +5215,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5217,1 +5219,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5157,2 +5157,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5184,4 +5186,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5195,1 +5197,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5213,2 +5215,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5217,1 +5219,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5166,1 +5166,0 @@\n-\n@@ -5205,2 +5204,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5209,1 +5208,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4906,2 +4906,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4933,4 +4935,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4944,1 +4946,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4962,2 +4964,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4966,1 +4968,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4906,2 +4906,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4933,4 +4935,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4944,1 +4946,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4962,2 +4964,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4966,1 +4968,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4906,2 +4906,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4933,4 +4935,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4944,1 +4946,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4962,2 +4964,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4966,1 +4968,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4906,2 +4906,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4933,4 +4935,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4944,1 +4946,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4962,2 +4964,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4966,1 +4968,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4915,1 +4915,0 @@\n-\n@@ -4954,2 +4953,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4958,1 +4957,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4884,2 +4884,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4911,4 +4913,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4922,1 +4924,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4940,2 +4942,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4944,1 +4946,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4884,2 +4884,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4911,4 +4913,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4922,1 +4924,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4940,2 +4942,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4944,1 +4946,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4884,2 +4884,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4911,4 +4913,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4922,1 +4924,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4940,2 +4942,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4944,1 +4946,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4884,2 +4884,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -4911,4 +4913,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -4922,1 +4924,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -4940,2 +4942,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4944,1 +4946,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4893,1 +4893,0 @@\n-\n@@ -4932,2 +4931,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -4936,1 +4935,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5112,2 +5112,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5139,4 +5141,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5150,1 +5152,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5168,2 +5170,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5172,1 +5174,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5112,2 +5112,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5139,4 +5141,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5150,1 +5152,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5168,2 +5170,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5172,1 +5174,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5112,2 +5112,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5139,4 +5141,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5150,1 +5152,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5168,2 +5170,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5172,1 +5174,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5112,2 +5112,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5139,4 +5141,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5150,1 +5152,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5168,2 +5170,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5172,1 +5174,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5121,1 +5121,0 @@\n-\n@@ -5160,2 +5159,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5164,1 +5163,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4995,2 +4995,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5022,4 +5024,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5033,1 +5035,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5051,2 +5053,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5055,1 +5057,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4995,2 +4995,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5022,4 +5024,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5033,1 +5035,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5051,2 +5053,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5055,1 +5057,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4995,2 +4995,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5022,4 +5024,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5033,1 +5035,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5051,2 +5053,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5055,1 +5057,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4995,2 +4995,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5022,4 +5024,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5033,1 +5035,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5051,2 +5053,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5055,1 +5057,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5004,1 +5004,0 @@\n-\n@@ -5043,2 +5042,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5047,1 +5046,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5136,2 +5136,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5163,4 +5165,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5174,1 +5176,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5192,2 +5194,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5196,1 +5198,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5136,2 +5136,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5163,4 +5165,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5174,1 +5176,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5192,2 +5194,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5196,1 +5198,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5136,2 +5136,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5163,4 +5165,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5174,1 +5176,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5192,2 +5194,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5196,1 +5198,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5136,2 +5136,4 @@\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-\n+            int expectedTcount = 0;\n+            for (int j = i; j < i + SPECIES.length(); j++) {\n+                expectedTcount += a[j] ? 1 : 0;\n+            }\n@@ -5163,4 +5165,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -5174,1 +5176,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -5192,2 +5194,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5196,1 +5198,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -5145,1 +5145,0 @@\n-\n@@ -5184,2 +5183,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -5188,1 +5187,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -421,3 +421,0 @@\n-#if[!MaxBit]\n-            int expectedTcount = Long.bitCount(vmask.toLong());\n-#else[!MaxBit]\n@@ -428,2 +425,0 @@\n-#end[!MaxBit]\n-\n@@ -456,4 +451,4 @@\n-                {0xFFFFFFFFFFFFFFFFl},\n-                {0x0000000000000000l},\n-                {0x5555555555555555l},\n-                {0x0123456789abcdefl},\n+                {0xFFFFFFFFFFFFFFFFL},\n+                {0x0000000000000000L},\n+                {0x5555555555555555L},\n+                {0x0123456789abcdefL},\n@@ -467,1 +462,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1l << (SPECIES.length()-1)) << 1)-1));\n+        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n@@ -486,2 +481,2 @@\n-            var actualMask = SPECIES.indexInRange(i+offset, limit);\n-            var expectedMask = SPECIES.maskAll(true).indexInRange(i+offset, limit);\n+            var actualMask = SPECIES.indexInRange(i + offset, limit);\n+            var expectedMask = SPECIES.maskAll(true).indexInRange(i + offset, limit);\n@@ -490,1 +485,1 @@\n-                int index = i+j+offset;\n+                int index = i + j + offset;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"}]}