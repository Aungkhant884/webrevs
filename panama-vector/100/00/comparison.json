{"files":[{"patch":"@@ -167,4 +167,0 @@\n-      case Op_VectorMaskTrueCount:\n-      case Op_VectorMaskLastTrue:\n-      case Op_VectorMaskFirstTrue:\n-        return false;\n@@ -3340,1 +3336,1 @@\n-instruct vtest_alltrue(iRegINoSp dst, vReg src1, vReg src2, pRegGov pTmp, rFlagsReg cr)\n+instruct vtest_alltrue(iRegINoSp dst, vReg src1, vReg src2, pReg pTmp, rFlagsReg cr)\n@@ -3360,1 +3356,1 @@\n-instruct vtest_anytrue(iRegINoSp dst, vReg src1, vReg src2, pRegGov pTmp, rFlagsReg cr)\n+instruct vtest_anytrue(iRegINoSp dst, vReg src1, vReg src2, pReg pTmp, rFlagsReg cr)\n@@ -3848,0 +3844,201 @@\n+\/\/ ---------------------------- Vector mask reductions ---------------------------\n+\n+instruct vmask_truecount(iRegINoSp dst, vReg src, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (VectorMaskTrueCount src));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"vmask_truecount $dst, $src\\t# vector mask truecount (sve)\" %}\n+  ins_encode %{\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B,\n+                           as_FloatRegister($src$$reg), ptrue, as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmask_firsttrue(iRegINoSp dst, vReg src, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (VectorMaskFirstTrue src));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(3 * SVE_COST);\n+  format %{ \"vmask_firsttrue $dst, $src\\t# vector mask firsttrue (sve)\" %}\n+  ins_encode %{\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B,\n+                           as_FloatRegister($src$$reg), ptrue, as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmask_lasttrue(iRegINoSp dst, vReg src, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (VectorMaskLastTrue src));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"vmask_lasttrue $dst, $src\\t# vector mask lasttrue (sve)\" %}\n+  ins_encode %{\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B,\n+                           as_FloatRegister($src$$reg), ptrue, as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmask_truecount_partial(iRegINoSp dst, vReg src, pRegGov ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (VectorMaskTrueCount src));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(3 * SVE_COST);\n+  format %{ \"vmask_truecount $dst, $src\\t# vector mask truecount partial (sve)\" %}\n+  ins_encode %{\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister($ptmp$$reg), __ B, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B, as_FloatRegister($src$$reg),\n+                           as_PRegister($ptmp$$reg), as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmask_firsttrue_partial(iRegINoSp dst, vReg src, pRegGov pgtmp, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (VectorMaskFirstTrue src));\n+  effect(TEMP pgtmp, TEMP ptmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"vmask_firsttrue $dst, $src\\t# vector mask firsttrue partial (sve)\" %}\n+  ins_encode %{\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister($pgtmp$$reg), __ B, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B, as_FloatRegister($src$$reg),\n+                           as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmask_lasttrue_partial(iRegINoSp dst, vReg src, pRegGov ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (VectorMaskLastTrue src));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(5 * SVE_COST);\n+  format %{ \"vmask_lasttrue $dst, $src\\t# vector mask lasttrue partial (sve)\" %}\n+  ins_encode %{\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister($ptmp$$reg), __ B, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B, as_FloatRegister($src$$reg),\n+                           as_PRegister($ptmp$$reg), as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ----------------- Vector mask reductions combined with VectorMaskStore ---------------\n+\n+instruct vstoremask_truecount(iRegINoSp dst, vReg src, immI esize, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (VectorMaskTrueCount (VectorStoreMask src esize)));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"vstoremask_truecount $dst, $src\\t# vector mask truecount (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), vector_length(this, $src));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vstoremask_firsttrue(iRegINoSp dst, vReg src, immI esize, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (VectorMaskFirstTrue (VectorStoreMask src esize)));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(3 * SVE_COST);\n+  format %{ \"vstoremask_firsttrue $dst, $src\\t# vector mask firsttrue (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), vector_length(this, $src));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vstoremask_lasttrue(iRegINoSp dst, vReg src, immI esize, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (VectorMaskLastTrue (VectorStoreMask src esize)));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"vstoremask_lasttrue $dst, $src\\t# vector mask lasttrue (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), vector_length(this, $src));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vstoremask_truecount_partial(iRegINoSp dst, vReg src, immI esize, pRegGov ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (VectorMaskTrueCount (VectorStoreMask src esize)));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(3 * SVE_COST);\n+  format %{ \"vstoremask_truecount $dst, $src\\t# vector mask truecount partial (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister($ptmp$$reg), variant, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister($ptmp$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vstoremask_firsttrue_partial(iRegINoSp dst, vReg src, immI esize, pRegGov pgtmp, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (VectorMaskFirstTrue (VectorStoreMask src esize)));\n+  effect(TEMP pgtmp, TEMP ptmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"vstoremask_firsttrue $dst, $src\\t# vector mask firsttrue partial (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister($pgtmp$$reg), variant, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vstoremask_lasttrue_partial(iRegINoSp dst, vReg src, immI esize, pRegGov ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (VectorMaskLastTrue (VectorStoreMask src esize)));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost(5 * SVE_COST);\n+  format %{ \"vstoremask_lasttrue $dst, $src\\t# vector mask lasttrue partial (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister($ptmp$$reg), variant, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister($ptmp$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":203,"deletions":6,"binary":false,"changes":209,"status":"modified"},{"patch":"@@ -162,4 +162,0 @@\n-      case Op_VectorMaskTrueCount:\n-      case Op_VectorMaskLastTrue:\n-      case Op_VectorMaskFirstTrue:\n-        return false;\n@@ -2092,1 +2088,1 @@\n-instruct vtest_$1`'(iRegINoSp dst, vReg src1, vReg src2, pRegGov pTmp, rFlagsReg cr)\n+instruct vtest_$1`'(iRegINoSp dst, vReg src1, vReg src2, pReg pTmp, rFlagsReg cr)\n@@ -2538,0 +2534,42 @@\n+\n+dnl\n+dnl VMASK_REDUCTION($1,     $2,      $3  )\n+dnl VMASK_REDUCTION(suffix, op_name, cost)\n+define(`VMASK_REDUCTION', `\n+instruct vmask_$1(iRegINoSp dst, vReg src, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst ($2 src));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost($3 * SVE_COST);\n+  format %{ \"vmask_$1 $dst, $src\\t# vector mask $1 (sve)\" %}\n+  ins_encode %{\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B,\n+                           as_FloatRegister($src$$reg), ptrue, as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+\/\/ ---------------------------- Vector mask reductions ---------------------------\n+VMASK_REDUCTION(truecount, VectorMaskTrueCount, 2)\n+VMASK_REDUCTION(firsttrue, VectorMaskFirstTrue, 3)\n+VMASK_REDUCTION(lasttrue,  VectorMaskLastTrue, 4)\n+dnl\n+dnl VMASK_REDUCTION_PARTIAL($1,     $2,      $3  )\n+dnl VMASK_REDUCTION_PARTIAL(suffix, op_name, cost)\n+define(`VMASK_REDUCTION_PARTIAL', `\n+instruct vmask_$1_partial(iRegINoSp dst, vReg src, pRegGov ifelse($1, `firsttrue', `pgtmp, pReg ptmp', `ptmp'), rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst ($2 src));\n+  effect(TEMP ifelse($1, `firsttrue', `pgtmp, TEMP ptmp', `ptmp'), KILL cr);\n+  ins_cost($3 * SVE_COST);\n+  format %{ \"vmask_$1 $dst, $src\\t# vector mask $1 partial (sve)\" %}\n+  ins_encode %{\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), __ B, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, __ B, as_FloatRegister($src$$reg),\n+                           as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), as_PRegister($ptmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n@@ -2539,0 +2577,3 @@\n+VMASK_REDUCTION_PARTIAL(truecount, VectorMaskTrueCount, 3)\n+VMASK_REDUCTION_PARTIAL(firsttrue, VectorMaskFirstTrue, 4)\n+VMASK_REDUCTION_PARTIAL(lasttrue,  VectorMaskLastTrue, 5)\n@@ -2540,0 +2581,51 @@\n+dnl\n+dnl VSTOREMASK_REDUCTION($1,     $2,      $3  )\n+dnl VSTOREMASK_REDUCTION(suffix, op_name, cost)\n+define(`VSTOREMASK_REDUCTION', `\n+instruct vstoremask_$1(iRegINoSp dst, vReg src, immI esize, pReg ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst ($2 (VectorStoreMask src esize)));\n+  effect(TEMP ptmp, KILL cr);\n+  ins_cost($3 * SVE_COST);\n+  format %{ \"vstoremask_$1 $dst, $src\\t# vector mask $1 (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), vector_length(this, $src));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+\/\/ ----------------- Vector mask reductions combined with VectorMaskStore ---------------\n+VSTOREMASK_REDUCTION(truecount, VectorMaskTrueCount, 2)\n+VSTOREMASK_REDUCTION(firsttrue, VectorMaskFirstTrue, 3)\n+VSTOREMASK_REDUCTION(lasttrue,  VectorMaskLastTrue, 4)\n+dnl\n+dnl VSTOREMASK_REDUCTION_PARTIAL($1,     $2,      $3  )\n+dnl VSTOREMASK_REDUCTION_PARTIAL(suffix, op_name, cost)\n+define(`VSTOREMASK_REDUCTION_PARTIAL', `\n+instruct vstoremask_$1_partial(iRegINoSp dst, vReg src, immI esize, pRegGov ifelse($1, `firsttrue', `pgtmp, pReg ptmp', `ptmp'), rFlagsReg cr) %{\n+  predicate(UseSVE > 0 &&\n+            n->in(1)->in(1)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst ($2 (VectorStoreMask src esize)));\n+  effect(TEMP ifelse($1, `firsttrue', `pgtmp, TEMP ptmp', `ptmp'), KILL cr);\n+  ins_cost($3 * SVE_COST);\n+  format %{ \"vstoremask_$1 $dst, $src\\t# vector mask $1 partial (sve)\" %}\n+  ins_encode %{\n+    int size = $esize$$constant;\n+    assert(size == 1 || size == 2 || size == 4 || size == 8, \"unsupported element size\");\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ mov(rscratch1, vector_length(this, $src));\n+    __ sve_whilelo(as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), variant, zr, rscratch1);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+VSTOREMASK_REDUCTION_PARTIAL(truecount, VectorMaskTrueCount, 3)\n+VSTOREMASK_REDUCTION_PARTIAL(firsttrue, VectorMaskFirstTrue, 4)\n+VSTOREMASK_REDUCTION_PARTIAL(lasttrue,  VectorMaskLastTrue, 5)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":97,"deletions":5,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -3194,8 +3194,0 @@\n-  \/\/ SVE predicate count\n-  void sve_cntp(Register Xd, SIMD_RegVariant T, PRegister Pg, PRegister Pn) {\n-    starti;\n-    assert(T != Q, \"invalid size\");\n-    f(0b00100101, 31, 24), f(T, 23, 22), f(0b10000010, 21, 14);\n-    prf(Pg, 10), f(0, 9), prf(Pn, 5), rf(Xd, 0);\n-  }\n-\n@@ -3353,4 +3345,2 @@\n-  \/\/ Predicate scan (SVE)\n-\n-  \/\/ Break after the first true condition\n-  void sve_brka(PRegister pd, PRegister pg, PRegister pn, bool isMerge) {\n+  \/\/ SVE predicate reverse\n+  void sve_rev(PRegister Pd, SIMD_RegVariant T, PRegister Pn) {\n@@ -3358,2 +3348,11 @@\n-    f(0b00100101, 31, 24), f(0b00, 23, 22), f(0b01000001, 21, 14),\n-    prf(pg, 10), f(0b0, 9), prf(pn, 5), f(isMerge ? 1 : 0, 4), prf(pd, 0);\n+    assert(T != Q, \"invalid size\");\n+    f(0b00000101, 31, 24), f(T, 23, 22), f(0b1101000100000, 21, 9);\n+    prf(Pn, 5), f(0, 4), prf(Pd, 0);\n+  }\n+\n+\/\/ SVE predicate break after\/before first true condition\n+#define INSN(NAME, op) \\\n+  void NAME(PRegister Pd, PRegister Pg, PRegister Pn, bool isMerge) {      \\\n+    starti;                                                                \\\n+    f(0b00100101, 31, 24), f(op, 23, 22), f(0b01000001, 21, 14);           \\\n+    prf(Pg, 10), f(0b0, 9), prf(Pn, 5), f(isMerge ? 1 : 0, 4), prf(Pd, 0); \\\n@@ -3362,0 +3361,4 @@\n+  INSN(sve_brka, 0b00);\n+  INSN(sve_brkb, 0b10);\n+#undef INSN\n+\n@@ -3376,1 +3379,7 @@\n-  \/\/ Predicate count and increment scalar (SVE)\n+  \/\/ Set scalar to active predicate element count\n+  void sve_cntp(Register Xd, SIMD_RegVariant T, PRegister Pg, PRegister Pn) {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    f(0b00100101, 31, 24), f(T, 23, 22), f(0b10000010, 21, 14);\n+    prf(Pg, 10), f(0, 9), prf(Pn, 5), rf(Xd, 0);\n+  }\n@@ -3378,1 +3387,1 @@\n-  \/\/ Set scalar to the number of Active predicate elements that are TRUE\n+  \/\/ Increment scalar by active predicate element count\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -977,0 +977,26 @@\n+\n+void C2_MacroAssembler::sve_vmask_reduction(int opc, Register dst, SIMD_RegVariant size, FloatRegister src,\n+                                            PRegister pg, PRegister pn, int length) {\n+  assert(pg->is_governing(), \"This register has to be a governing predicate register\");\n+  \/\/ The conditional flags will be clobbered by this function\n+  sve_cmpne(pn, size, pg, src, 0);\n+  switch (opc) {\n+    case Op_VectorMaskTrueCount:\n+      sve_cntp(dst, size, ptrue, pn);\n+      break;\n+    case Op_VectorMaskFirstTrue:\n+      sve_brkb(pn, pg, pn, false);\n+      sve_cntp(dst, size, ptrue, pn);\n+      break;\n+    case Op_VectorMaskLastTrue:\n+      sve_rev(pn, size, pn);\n+      sve_brkb(pn, ptrue, pn, false);\n+      sve_cntp(dst, size, ptrue, pn);\n+      movw(rscratch1, length - 1);\n+      subw(dst, rscratch1, dst);\n+      break;\n+    default:\n+      assert(false, \"unsupported\");\n+      ShouldNotReachHere();\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -64,0 +64,3 @@\n+  void sve_vmask_reduction(int opc, Register dst, SIMD_RegVariant size, FloatRegister src,\n+                           PRegister pg, PRegister pn, int length = MaxVectorSize);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1586,11 +1586,17 @@\n-                        [\"cntb\",   \"__ sve_cntb(r9);\",                                   \"cntb\\tx9\"],\n-                        [\"cnth\",   \"__ sve_cnth(r10);\",                                  \"cnth\\tx10\"],\n-                        [\"cntw\",   \"__ sve_cntw(r11);\",                                  \"cntw\\tx11\"],\n-                        [\"cntd\",   \"__ sve_cntd(r12);\",                                  \"cntd\\tx12\"],\n-                        [\"brka\",   \"__ sve_brka(p2, p0, p2, false);\",                    \"brka\\tp2.b, p0\/z, p2.b\"],\n-                        [\"brka\",   \"__ sve_brka(p1, p2, p3, true);\",                     \"brka\\tp1.b, p2\/m, p3.b\"],\n-                        [\"incp\",   \"__ sve_incp(r0, __ B, p2);\",                         \"incp\\tx0, p2.b\"],\n-                        [\"whilelt\",   \"__ sve_whilelt(p0, __ B, r1, r28);\",              \"whilelt\\tp0.b, x1, x28\"],\n-                        [\"whilele\",   \"__ sve_whilele(p2, __ H, r11, r8);\",              \"whilele\\tp2.h, x11, x8\"],\n-                        [\"whilelo\",   \"__ sve_whilelo(p3, __ S, r7, r2);\",               \"whilelo\\tp3.s, x7, x2\"],\n-                        [\"whilels\",   \"__ sve_whilels(p4, __ D, r17, r10);\",             \"whilels\\tp4.d, x17, x10\"],\n+                        [\"cntb\",    \"__ sve_cntb(r9);\",                                   \"cntb\\tx9\"],\n+                        [\"cnth\",    \"__ sve_cnth(r10);\",                                  \"cnth\\tx10\"],\n+                        [\"cntw\",    \"__ sve_cntw(r11);\",                                  \"cntw\\tx11\"],\n+                        [\"cntd\",    \"__ sve_cntd(r12);\",                                  \"cntd\\tx12\"],\n+                        [\"brka\",    \"__ sve_brka(p2, p0, p2, false);\",                    \"brka\\tp2.b, p0\/z, p2.b\"],\n+                        [\"brka\",    \"__ sve_brka(p1, p2, p3, true);\",                     \"brka\\tp1.b, p2\/m, p3.b\"],\n+                        [\"brkb\",    \"__ sve_brkb(p1, p2, p3, false);\",                    \"brkb\\tp1.b, p2\/z, p3.b\"],\n+                        [\"brkb\",    \"__ sve_brkb(p2, p3, p4, true);\",                     \"brkb\\tp2.b, p3\/m, p4.b\"],\n+                        [\"rev\",     \"__ sve_rev(p0, __ B, p1);\",                          \"rev\\tp0.b, p1.b\"],\n+                        [\"rev\",     \"__ sve_rev(p1, __ H, p2);\",                          \"rev\\tp1.h, p2.h\"],\n+                        [\"rev\",     \"__ sve_rev(p2, __ S, p3);\",                          \"rev\\tp2.s, p3.s\"],\n+                        [\"rev\",     \"__ sve_rev(p3, __ D, p4);\",                          \"rev\\tp3.d, p4.d\"],\n+                        [\"incp\",    \"__ sve_incp(r0, __ B, p2);\",                         \"incp\\tx0, p2.b\"],\n+                        [\"whilelt\", \"__ sve_whilelt(p0, __ B, r1, r28);\",                 \"whilelt\\tp0.b, x1, x28\"],\n+                        [\"whilele\", \"__ sve_whilele(p2, __ H, r11, r8);\",                 \"whilele\\tp2.h, x11, x8\"],\n+                        [\"whilelo\", \"__ sve_whilelo(p3, __ S, r7, r2);\",                  \"whilelo\\tp3.s, x7, x2\"],\n+                        [\"whilels\", \"__ sve_whilels(p4, __ D, r17, r10);\",                \"whilels\\tp4.d, x17, x10\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -781,0 +781,6 @@\n+    __ sve_brkb(p1, p2, p3, false);                    \/\/       brkb    p1.b, p2\/z, p3.b\n+    __ sve_brkb(p2, p3, p4, true);                     \/\/       brkb    p2.b, p3\/m, p4.b\n+    __ sve_rev(p0, __ B, p1);                          \/\/       rev     p0.b, p1.b\n+    __ sve_rev(p1, __ H, p2);                          \/\/       rev     p1.h, p2.h\n+    __ sve_rev(p2, __ S, p3);                          \/\/       rev     p2.s, p3.s\n+    __ sve_rev(p3, __ D, p4);                          \/\/       rev     p3.d, p4.d\n@@ -1045,7 +1051,7 @@\n-    0x14000000,     0x17ffffd7,     0x1400034c,     0x94000000,\n-    0x97ffffd4,     0x94000349,     0x3400000a,     0x34fffa2a,\n-    0x340068ca,     0x35000008,     0x35fff9c8,     0x35006868,\n-    0xb400000b,     0xb4fff96b,     0xb400680b,     0xb500001d,\n-    0xb5fff91d,     0xb50067bd,     0x10000013,     0x10fff8b3,\n-    0x10006753,     0x90000013,     0x36300016,     0x3637f836,\n-    0x363066d6,     0x3758000c,     0x375ff7cc,     0x3758666c,\n+    0x14000000,     0x17ffffd7,     0x14000352,     0x94000000,\n+    0x97ffffd4,     0x9400034f,     0x3400000a,     0x34fffa2a,\n+    0x3400698a,     0x35000008,     0x35fff9c8,     0x35006928,\n+    0xb400000b,     0xb4fff96b,     0xb40068cb,     0xb500001d,\n+    0xb5fff91d,     0xb500687d,     0x10000013,     0x10fff8b3,\n+    0x10006813,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36306796,     0x3758000c,     0x375ff7cc,     0x3758672c,\n@@ -1056,13 +1062,13 @@\n-    0x54006440,     0x54000001,     0x54fff541,     0x540063e1,\n-    0x54000002,     0x54fff4e2,     0x54006382,     0x54000002,\n-    0x54fff482,     0x54006322,     0x54000003,     0x54fff423,\n-    0x540062c3,     0x54000003,     0x54fff3c3,     0x54006263,\n-    0x54000004,     0x54fff364,     0x54006204,     0x54000005,\n-    0x54fff305,     0x540061a5,     0x54000006,     0x54fff2a6,\n-    0x54006146,     0x54000007,     0x54fff247,     0x540060e7,\n-    0x54000008,     0x54fff1e8,     0x54006088,     0x54000009,\n-    0x54fff189,     0x54006029,     0x5400000a,     0x54fff12a,\n-    0x54005fca,     0x5400000b,     0x54fff0cb,     0x54005f6b,\n-    0x5400000c,     0x54fff06c,     0x54005f0c,     0x5400000d,\n-    0x54fff00d,     0x54005ead,     0x5400000e,     0x54ffefae,\n-    0x54005e4e,     0x5400000f,     0x54ffef4f,     0x54005def,\n+    0x54006500,     0x54000001,     0x54fff541,     0x540064a1,\n+    0x54000002,     0x54fff4e2,     0x54006442,     0x54000002,\n+    0x54fff482,     0x540063e2,     0x54000003,     0x54fff423,\n+    0x54006383,     0x54000003,     0x54fff3c3,     0x54006323,\n+    0x54000004,     0x54fff364,     0x540062c4,     0x54000005,\n+    0x54fff305,     0x54006265,     0x54000006,     0x54fff2a6,\n+    0x54006206,     0x54000007,     0x54fff247,     0x540061a7,\n+    0x54000008,     0x54fff1e8,     0x54006148,     0x54000009,\n+    0x54fff189,     0x540060e9,     0x5400000a,     0x54fff12a,\n+    0x5400608a,     0x5400000b,     0x54fff0cb,     0x5400602b,\n+    0x5400000c,     0x54fff06c,     0x54005fcc,     0x5400000d,\n+    0x54fff00d,     0x54005f6d,     0x5400000e,     0x54ffefae,\n+    0x54005f0e,     0x5400000f,     0x54ffef4f,     0x54005eaf,\n@@ -1100,1 +1106,1 @@\n-    0xbd1b1869,     0x58004e3b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x58004efb,     0x1800000b,     0xf8945060,\n@@ -1201,56 +1207,58 @@\n-    0x25104042,     0x25104871,     0x252c8840,     0x253c1420,\n-    0x25681572,     0x25a21ce3,     0x25ea1e34,     0x0522c020,\n-    0x05e6c0a4,     0x2401a001,     0x2443a051,     0x24858881,\n-    0x24c78cd1,     0x240b8142,     0x24918213,     0x250f9001,\n-    0x25508051,     0x25802491,     0x25df28c1,     0x25850c81,\n-    0x251e10d1,     0x65816001,     0x65c36051,     0x65854891,\n-    0x65c74cc1,     0x658b4152,     0x65d14203,     0x05733820,\n-    0x05b238a4,     0x05f138e6,     0x0570396a,     0x65d0a001,\n-    0x65d6a443,     0x65d4a826,     0x6594ac26,     0x6554ac26,\n-    0x6556ac26,     0x6552ac26,     0x65cbac85,     0x65caac01,\n-    0x65dea833,     0x659ca509,     0x65d8a801,     0x65dcac01,\n-    0x655cb241,     0x0520a1e0,     0x0521a601,     0x052281e0,\n-    0x05238601,     0x04a14026,     0x0568aca7,     0x05b23230,\n-    0x853040af,     0xc5b040af,     0xe57080af,     0xe5b080af,\n-    0x1e601000,     0x1e603000,     0x1e621000,     0x1e623000,\n-    0x1e641000,     0x1e643000,     0x1e661000,     0x1e663000,\n-    0x1e681000,     0x1e683000,     0x1e6a1000,     0x1e6a3000,\n-    0x1e6c1000,     0x1e6c3000,     0x1e6e1000,     0x1e6e3000,\n-    0x1e701000,     0x1e703000,     0x1e721000,     0x1e723000,\n-    0x1e741000,     0x1e743000,     0x1e761000,     0x1e763000,\n-    0x1e781000,     0x1e783000,     0x1e7a1000,     0x1e7a3000,\n-    0x1e7c1000,     0x1e7c3000,     0x1e7e1000,     0x1e7e3000,\n-    0xf8208193,     0xf83101b6,     0xf83c13fe,     0xf821239a,\n-    0xf824309e,     0xf826535e,     0xf8304109,     0xf82c7280,\n-    0xf8216058,     0xf8a08309,     0xf8ba03d0,     0xf8a312ea,\n-    0xf8aa21e4,     0xf8a2310b,     0xf8aa522f,     0xf8a2418a,\n-    0xf8ac71af,     0xf8a26287,     0xf8fa8090,     0xf8e20184,\n-    0xf8f01215,     0xf8f022ab,     0xf8f7334c,     0xf8f751dc,\n-    0xf8eb4038,     0xf8ec715f,     0xf8f06047,     0xf863826d,\n-    0xf8710070,     0xf86113cb,     0xf86521e8,     0xf87d301e,\n-    0xf8745287,     0xf87742bc,     0xf87b70b9,     0xf8616217,\n-    0xb83f8185,     0xb82901fc,     0xb83d13f6,     0xb83320bf,\n-    0xb82e33f0,     0xb830529b,     0xb830416c,     0xb82973c6,\n-    0xb831639b,     0xb8be8147,     0xb8b4008a,     0xb8b81231,\n-    0xb8b623a3,     0xb8af3276,     0xb8b35056,     0xb8af4186,\n-    0xb8b071ab,     0xb8b763c1,     0xb8f38225,     0xb8e202d0,\n-    0xb8ed12aa,     0xb8fd219b,     0xb8fb3023,     0xb8ff5278,\n-    0xb8f14389,     0xb8fb70ef,     0xb8f563f7,     0xb87983e2,\n-    0xb87b0150,     0xb8771073,     0xb8702320,     0xb87a3057,\n-    0xb870508c,     0xb87c43be,     0xb87070db,     0xb86961fd,\n-    0xce273c87,     0xce080ac9,     0xce7e8e9b,     0xce808b45,\n-    0xce79806e,     0xce758768,     0xcec0835a,     0xce608ad8,\n-    0x043100c4,     0x046105e3,     0x65c900a6,     0x65d60a87,\n-    0x65c80545,     0x0416a63e,     0x04001f8b,     0x0450979a,\n-    0x04dabe0d,     0x045381a5,     0x04918b4f,     0x049006cb,\n-    0x0497a264,     0x045eadd1,     0x04881062,     0x040a04d7,\n-    0x04810f71,     0x04dca450,     0x65c084c3,     0x65cd8d93,\n-    0x65c69a68,     0x65878ae0,     0x65c29db3,     0x049da0e6,\n-    0x6582b911,     0x65c0b6d6,     0x65c1a1e2,     0x65cda494,\n-    0x65c18107,     0x65af1493,     0x65e52b36,     0x65ab4ed0,\n-    0x65f06a8d,     0x0451448f,     0x049c7c86,     0x0429335d,\n-    0x04bc3162,     0x047a3027,     0x04e831d1,     0x2493b8a5,\n-    0x249d9604,     0x24d18095,     0x24d7b491,     0x05686853,\n-    0x05f16f0e,     0x041a27d5,     0x0418358a,     0x04992709,\n-    0x044838c4,     0x048a39bb,     0x65c736de,     0x65863d3e,\n-    0x65d82693,     0x044129a9,\n+    0x25104042,     0x25104871,     0x25904861,     0x25904c92,\n+    0x05344020,     0x05744041,     0x05b44062,     0x05f44083,\n+    0x252c8840,     0x253c1420,     0x25681572,     0x25a21ce3,\n+    0x25ea1e34,     0x0522c020,     0x05e6c0a4,     0x2401a001,\n+    0x2443a051,     0x24858881,     0x24c78cd1,     0x240b8142,\n+    0x24918213,     0x250f9001,     0x25508051,     0x25802491,\n+    0x25df28c1,     0x25850c81,     0x251e10d1,     0x65816001,\n+    0x65c36051,     0x65854891,     0x65c74cc1,     0x658b4152,\n+    0x65d14203,     0x05733820,     0x05b238a4,     0x05f138e6,\n+    0x0570396a,     0x65d0a001,     0x65d6a443,     0x65d4a826,\n+    0x6594ac26,     0x6554ac26,     0x6556ac26,     0x6552ac26,\n+    0x65cbac85,     0x65caac01,     0x65dea833,     0x659ca509,\n+    0x65d8a801,     0x65dcac01,     0x655cb241,     0x0520a1e0,\n+    0x0521a601,     0x052281e0,     0x05238601,     0x04a14026,\n+    0x0568aca7,     0x05b23230,     0x853040af,     0xc5b040af,\n+    0xe57080af,     0xe5b080af,     0x1e601000,     0x1e603000,\n+    0x1e621000,     0x1e623000,     0x1e641000,     0x1e643000,\n+    0x1e661000,     0x1e663000,     0x1e681000,     0x1e683000,\n+    0x1e6a1000,     0x1e6a3000,     0x1e6c1000,     0x1e6c3000,\n+    0x1e6e1000,     0x1e6e3000,     0x1e701000,     0x1e703000,\n+    0x1e721000,     0x1e723000,     0x1e741000,     0x1e743000,\n+    0x1e761000,     0x1e763000,     0x1e781000,     0x1e783000,\n+    0x1e7a1000,     0x1e7a3000,     0x1e7c1000,     0x1e7c3000,\n+    0x1e7e1000,     0x1e7e3000,     0xf8208193,     0xf83101b6,\n+    0xf83c13fe,     0xf821239a,     0xf824309e,     0xf826535e,\n+    0xf8304109,     0xf82c7280,     0xf8216058,     0xf8a08309,\n+    0xf8ba03d0,     0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,\n+    0xf8aa522f,     0xf8a2418a,     0xf8ac71af,     0xf8a26287,\n+    0xf8fa8090,     0xf8e20184,     0xf8f01215,     0xf8f022ab,\n+    0xf8f7334c,     0xf8f751dc,     0xf8eb4038,     0xf8ec715f,\n+    0xf8f06047,     0xf863826d,     0xf8710070,     0xf86113cb,\n+    0xf86521e8,     0xf87d301e,     0xf8745287,     0xf87742bc,\n+    0xf87b70b9,     0xf8616217,     0xb83f8185,     0xb82901fc,\n+    0xb83d13f6,     0xb83320bf,     0xb82e33f0,     0xb830529b,\n+    0xb830416c,     0xb82973c6,     0xb831639b,     0xb8be8147,\n+    0xb8b4008a,     0xb8b81231,     0xb8b623a3,     0xb8af3276,\n+    0xb8b35056,     0xb8af4186,     0xb8b071ab,     0xb8b763c1,\n+    0xb8f38225,     0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,\n+    0xb8fb3023,     0xb8ff5278,     0xb8f14389,     0xb8fb70ef,\n+    0xb8f563f7,     0xb87983e2,     0xb87b0150,     0xb8771073,\n+    0xb8702320,     0xb87a3057,     0xb870508c,     0xb87c43be,\n+    0xb87070db,     0xb86961fd,     0xce273c87,     0xce080ac9,\n+    0xce7e8e9b,     0xce808b45,     0xce79806e,     0xce758768,\n+    0xcec0835a,     0xce608ad8,     0x043100c4,     0x046105e3,\n+    0x65c900a6,     0x65d60a87,     0x65c80545,     0x0416a63e,\n+    0x04001f8b,     0x0450979a,     0x04dabe0d,     0x045381a5,\n+    0x04918b4f,     0x049006cb,     0x0497a264,     0x045eadd1,\n+    0x04881062,     0x040a04d7,     0x04810f71,     0x04dca450,\n+    0x65c084c3,     0x65cd8d93,     0x65c69a68,     0x65878ae0,\n+    0x65c29db3,     0x049da0e6,     0x6582b911,     0x65c0b6d6,\n+    0x65c1a1e2,     0x65cda494,     0x65c18107,     0x65af1493,\n+    0x65e52b36,     0x65ab4ed0,     0x65f06a8d,     0x0451448f,\n+    0x049c7c86,     0x0429335d,     0x04bc3162,     0x047a3027,\n+    0x04e831d1,     0x2493b8a5,     0x249d9604,     0x24d18095,\n+    0x24d7b491,     0x05686853,     0x05f16f0e,     0x041a27d5,\n+    0x0418358a,     0x04992709,     0x044838c4,     0x048a39bb,\n+    0x65c736de,     0x65863d3e,     0x65d82693,     0x044129a9,\n+\n@@ -1259,0 +1267,1 @@\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":86,"deletions":77,"binary":false,"changes":163,"status":"modified"}]}