{"files":[{"patch":"@@ -886,1 +886,1 @@\n-   do_signature(vector_rearrange_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                                  \\\n+   do_signature(vector_rearrange_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                 \\\n@@ -888,0 +888,1 @@\n+                                       \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\"                                                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-\/\/           UnaryOperation<V, M> defaultImpl) {\n+\/\/           UnaryOperation<V, M> defaultImpl)\n@@ -230,1 +230,1 @@\n-\/\/            BinaryOperation<V, M> defaultImpl) {\n+\/\/            BinaryOperation<V, M> defaultImpl)\n@@ -236,1 +236,1 @@\n-\/\/             TernaryOperation<V, M> defaultImpl) {\n+\/\/             TernaryOperation<V, M> defaultImpl)\n@@ -792,1 +792,1 @@\n-\/\/               StoreVectorOperation<C, V> defaultImpl) {\n+\/\/               StoreVectorOperation<C, V> defaultImpl)\n@@ -1337,1 +1337,1 @@\n-\/\/                       ReductionOperation<V, M> defaultImpl) {\n+\/\/                       ReductionOperation<V, M> defaultImpl)\n@@ -1491,1 +1491,1 @@\n-\/\/                                BiFunction<V, V, Boolean> defaultImpl) {\n+\/\/                                BiFunction<V, V, Boolean> defaultImpl)\n@@ -1555,1 +1555,1 @@\n-\/\/         VectorBlendOp<V,M> defaultImpl) { ...\n+\/\/         VectorBlendOp<V,M> defaultImpl)\n@@ -1628,1 +1628,1 @@\n-\/\/            VectorCompareOp<V,M> defaultImpl) { ...\n+\/\/            VectorCompareOp<V,M> defaultImpl)\n@@ -1744,5 +1744,7 @@\n-\/\/ <V extends Vector, Sh extends Shuffle>\n-\/\/  V rearrangeOp(Class<V> vectorClass, Class<Sh> shuffleClass, Class< ? > elementType, int vlen,\n-\/\/    V v1, Sh sh,\n-\/\/    VectorSwizzleOp<V, Sh, S, E> defaultImpl) { ...\n-\n+\/\/ <V extends Vector<E>,\n+\/\/     Sh extends VectorShuffle<E>,\n+\/\/     M extends VectorMask<E>,\n+\/\/     E>\n+\/\/ V rearrangeOp(Class<? extends V> vectorClass, Class<Sh> shuffleClass, Class<M> maskClass, Class<?> elementType, int vlen,\n+\/\/               V v1, Sh sh, M m,\n+\/\/               VectorRearrangeOp<V,Sh,M,E> defaultImpl)\n@@ -1752,2 +1754,3 @@\n-  const TypeInstPtr* elem_klass    = gvn().type(argument(2))->isa_instptr();\n-  const TypeInt*     vlen          = gvn().type(argument(3))->isa_int();\n+  const TypeInstPtr* mask_klass    = gvn().type(argument(2))->isa_instptr();\n+  const TypeInstPtr* elem_klass    = gvn().type(argument(3))->isa_instptr();\n+  const TypeInt*     vlen          = gvn().type(argument(4))->isa_int();\n@@ -1755,1 +1758,1 @@\n-  if (vector_klass == NULL || shuffle_klass == NULL || elem_klass == NULL || vlen == NULL) {\n+  if (vector_klass == NULL || shuffle_klass == NULL || elem_klass == NULL || mask_klass == NULL || vlen == NULL) {\n@@ -1758,2 +1761,5 @@\n-  if (shuffle_klass->const_oop() == NULL || vector_klass->const_oop() == NULL ||\n-    elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (shuffle_klass->const_oop() == NULL ||\n+      mask_klass->const_oop()    == NULL ||\n+      vector_klass->const_oop()  == NULL ||\n+      elem_klass->const_oop()    == NULL ||\n+      !vlen->is_con()) {\n@@ -1761,1 +1767,1 @@\n-      tty->print_cr(\"  ** missing constant: vclass=%s sclass=%s etype=%s vlen=%s\",\n+      tty->print_cr(\"  ** missing constant: vclass=%s sclass=%s mclass=%s etype=%s vlen=%s\",\n@@ -1765,1 +1771,2 @@\n-                    NodeClassNames[argument(3)->Opcode()]);\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()]);\n@@ -1769,1 +1776,3 @@\n-  if (!is_klass_initialized(vector_klass) || !is_klass_initialized(shuffle_klass)) {\n+  if (!is_klass_initialized(vector_klass)  ||\n+      !is_klass_initialized(shuffle_klass) ||\n+      !is_klass_initialized(mask_klass)) {\n@@ -1806,2 +1815,26 @@\n-  Node* v1 = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n-  Node* shuffle = unbox_vector(argument(5), shbox_type, shuffle_bt, num_elem);\n+  ciKlass* mbox_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  const TypeInstPtr* mbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, mbox_klass);\n+\n+  Node* v1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  Node* shuffle = unbox_vector(argument(6), shbox_type, shuffle_bt, num_elem);\n+\n+  bool is_masked_op = argument(7)->bottom_type() != TypePtr::NULL_PTR;\n+  Node* mask = is_masked_op ? unbox_vector(argument(7), mbox_type, elem_bt, num_elem) : NULL;\n+  if (is_masked_op && mask == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=3 op=shuffle\/rearrange vlen=%d etype=%s ismask=useload is_masked_op=1\",\n+                    num_elem, type2name(elem_bt));\n+    }\n+    return false;\n+  }\n+\n+  bool use_predicate = is_masked_op && arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, VecMaskUsePred);\n+  if (is_masked_op && !use_predicate &&\n+       (!arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad) ||\n+        !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=3 op=shuffle\/rearrange vlen=%d etype=%s ismask=useload is_masked_op=1\",\n+                    num_elem, type2name(elem_bt));\n+    }\n+    return false;\n+  }\n@@ -1809,1 +1842,1 @@\n-  if (v1 == NULL || shuffle == NULL) {\n+  if (v1 == NULL || shuffle == NULL || mask == NULL) {\n@@ -1813,1 +1846,14 @@\n-  Node* rearrange = gvn().transform(new VectorRearrangeNode(v1, shuffle));\n+  Node* rearrange = new VectorRearrangeNode(v1, shuffle);\n+  if (is_masked_op) {\n+    if (use_predicate) {\n+      rearrange->add_req(mask);\n+      rearrange->add_flag(Node::Flag_is_predicated_vector);\n+    } else {\n+      const TypeVect* vt = v1->bottom_type()->is_vect();\n+      rearrange = gvn().transform(rearrange);\n+      Node* zero = gvn().makecon(TypeInt::ZERO);\n+      Node* zerovec = gvn().transform(VectorNode::scalar2vector(zero, num_elem, Type::get_const_basic_type(elem_bt)));\n+      rearrange = new VectorBlendNode(zerovec, rearrange, mask);\n+    }\n+  }\n+  rearrange = gvn().transform(rearrange);\n@@ -1883,1 +1929,1 @@\n-\/\/                 VectorBroadcastIntOp<V> defaultImpl) {\n+\/\/                 VectorBroadcastIntOp<V> defaultImpl)\n@@ -2024,1 +2070,1 @@\n-\/\/           VectorConvertOp<VOUT, VIN, S> defaultImpl) {\n+\/\/           VectorConvertOp<VOUT, VIN, S> defaultImpl)\n@@ -2214,1 +2260,1 @@\n-\/\/           VecInsertOp<V> defaultImpl) {\n+\/\/           VecInsertOp<V> defaultImpl)\n@@ -2307,1 +2353,1 @@\n-\/\/               VecExtractOp<V> defaultImpl) {\n+\/\/               VecExtractOp<V> defaultImpl)\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":75,"deletions":29,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -449,1 +449,0 @@\n-\n@@ -452,0 +451,1 @@\n+            M  extends VectorMask<E>,\n@@ -453,1 +453,1 @@\n-        V apply(V v1, Sh shuffle);\n+        V apply(V v1, Sh shuffle, M mask);\n@@ -460,0 +460,1 @@\n+            M  extends VectorMask<E>,\n@@ -461,3 +462,3 @@\n-    V rearrangeOp(Class<? extends V> vectorClass, Class<Sh> shuffleClass, Class<?> elementType, int vlen,\n-                  V v1, Sh sh,\n-                  VectorRearrangeOp<V,Sh, E> defaultImpl) {\n+    V rearrangeOp(Class<? extends V> vectorClass, Class<Sh> shuffleClass, Class<M> maskClass, Class<?> elementType, int vlen,\n+                  V v1, Sh sh, M m,\n+                  VectorRearrangeOp<V,Sh,M,E> defaultImpl) {\n@@ -465,1 +466,1 @@\n-        return defaultImpl.apply(v1, sh);\n+        return defaultImpl.apply(v1, sh, m);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Byte128Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Byte256Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Byte512Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Byte64Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    ByteMaxMask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2254,3 +2254,3 @@\n-            getClass(), shuffletype, byte.class, length(),\n-            this, shuffle,\n-            (v1, s_) -> v1.uOp((i, a) -> {\n+            getClass(), shuffletype, null, byte.class, length(),\n+            this, shuffle, null,\n+            (v1, s_, m_) -> v1.uOp((i, a) -> {\n@@ -2273,1 +2273,1 @@\n-    <S extends VectorShuffle<Byte>>\n+    <S extends VectorShuffle<Byte>, M extends VectorMask<Byte>>\n@@ -2275,0 +2275,1 @@\n+                                           Class<M> masktype,\n@@ -2276,9 +2277,3 @@\n-                                           VectorMask<Byte> m) {\n-        ByteVector unmasked =\n-            VectorSupport.rearrangeOp(\n-                getClass(), shuffletype, byte.class, length(),\n-                this, shuffle,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n-                    int ei = s_.laneSource(i);\n-                    return ei < 0 ? 0 : v1.lane(ei);\n-                }));\n+                                           M m) {\n+\n+        m.check(masktype, this);\n@@ -2290,1 +2285,7 @@\n-        return broadcast((byte)0).blend(unmasked, m);\n+        return VectorSupport.rearrangeOp(\n+                   getClass(), shuffletype, masktype, byte.class, length(),\n+                   this, shuffle, m,\n+                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                        int ei = s_.laneSource(i);\n+                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                   }));\n@@ -2313,3 +2314,3 @@\n-                getClass(), shuffletype, byte.class, length(),\n-                this, ws,\n-                (v0, s_) -> v0.uOp((i, a) -> {\n+                getClass(), shuffletype, null, byte.class, length(),\n+                this, ws, null,\n+                (v0, s_, m_) -> v0.uOp((i, a) -> {\n@@ -2321,3 +2322,3 @@\n-                getClass(), shuffletype, byte.class, length(),\n-                v, ws,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n+                getClass(), shuffletype, null, byte.class, length(),\n+                v, ws, null,\n+                (v1, s_, m_) -> v1.uOp((i, a) -> {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Double128Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Double256Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Double512Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Double64Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    DoubleMaxMask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2106,3 +2106,3 @@\n-            getClass(), shuffletype, double.class, length(),\n-            this, shuffle,\n-            (v1, s_) -> v1.uOp((i, a) -> {\n+            getClass(), shuffletype, null, double.class, length(),\n+            this, shuffle, null,\n+            (v1, s_, m_) -> v1.uOp((i, a) -> {\n@@ -2125,1 +2125,1 @@\n-    <S extends VectorShuffle<Double>>\n+    <S extends VectorShuffle<Double>, M extends VectorMask<Double>>\n@@ -2127,0 +2127,1 @@\n+                                           Class<M> masktype,\n@@ -2128,9 +2129,3 @@\n-                                           VectorMask<Double> m) {\n-        DoubleVector unmasked =\n-            VectorSupport.rearrangeOp(\n-                getClass(), shuffletype, double.class, length(),\n-                this, shuffle,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n-                    int ei = s_.laneSource(i);\n-                    return ei < 0 ? 0 : v1.lane(ei);\n-                }));\n+                                           M m) {\n+\n+        m.check(masktype, this);\n@@ -2142,1 +2137,7 @@\n-        return broadcast((double)0).blend(unmasked, m);\n+        return VectorSupport.rearrangeOp(\n+                   getClass(), shuffletype, masktype, double.class, length(),\n+                   this, shuffle, m,\n+                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                        int ei = s_.laneSource(i);\n+                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                   }));\n@@ -2165,3 +2166,3 @@\n-                getClass(), shuffletype, double.class, length(),\n-                this, ws,\n-                (v0, s_) -> v0.uOp((i, a) -> {\n+                getClass(), shuffletype, null, double.class, length(),\n+                this, ws, null,\n+                (v0, s_, m_) -> v0.uOp((i, a) -> {\n@@ -2173,3 +2174,3 @@\n-                getClass(), shuffletype, double.class, length(),\n-                v, ws,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n+                getClass(), shuffletype, null, double.class, length(),\n+                v, ws, null,\n+                (v1, s_, m_) -> v1.uOp((i, a) -> {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Float128Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Float256Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Float512Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    Float64Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -443,0 +443,1 @@\n+                                    FloatMaxMask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2118,3 +2118,3 @@\n-            getClass(), shuffletype, float.class, length(),\n-            this, shuffle,\n-            (v1, s_) -> v1.uOp((i, a) -> {\n+            getClass(), shuffletype, null, float.class, length(),\n+            this, shuffle, null,\n+            (v1, s_, m_) -> v1.uOp((i, a) -> {\n@@ -2137,1 +2137,1 @@\n-    <S extends VectorShuffle<Float>>\n+    <S extends VectorShuffle<Float>, M extends VectorMask<Float>>\n@@ -2139,0 +2139,1 @@\n+                                           Class<M> masktype,\n@@ -2140,9 +2141,3 @@\n-                                           VectorMask<Float> m) {\n-        FloatVector unmasked =\n-            VectorSupport.rearrangeOp(\n-                getClass(), shuffletype, float.class, length(),\n-                this, shuffle,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n-                    int ei = s_.laneSource(i);\n-                    return ei < 0 ? 0 : v1.lane(ei);\n-                }));\n+                                           M m) {\n+\n+        m.check(masktype, this);\n@@ -2154,1 +2149,7 @@\n-        return broadcast((float)0).blend(unmasked, m);\n+        return VectorSupport.rearrangeOp(\n+                   getClass(), shuffletype, masktype, float.class, length(),\n+                   this, shuffle, m,\n+                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                        int ei = s_.laneSource(i);\n+                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                   }));\n@@ -2177,3 +2178,3 @@\n-                getClass(), shuffletype, float.class, length(),\n-                this, ws,\n-                (v0, s_) -> v0.uOp((i, a) -> {\n+                getClass(), shuffletype, null, float.class, length(),\n+                this, ws, null,\n+                (v0, s_, m_) -> v0.uOp((i, a) -> {\n@@ -2185,3 +2186,3 @@\n-                getClass(), shuffletype, float.class, length(),\n-                v, ws,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n+                getClass(), shuffletype, null, float.class, length(),\n+                v, ws, null,\n+                (v1, s_, m_) -> v1.uOp((i, a) -> {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Int128Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Int256Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Int512Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Int64Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    IntMaxMask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2253,3 +2253,3 @@\n-            getClass(), shuffletype, int.class, length(),\n-            this, shuffle,\n-            (v1, s_) -> v1.uOp((i, a) -> {\n+            getClass(), shuffletype, null, int.class, length(),\n+            this, shuffle, null,\n+            (v1, s_, m_) -> v1.uOp((i, a) -> {\n@@ -2272,1 +2272,1 @@\n-    <S extends VectorShuffle<Integer>>\n+    <S extends VectorShuffle<Integer>, M extends VectorMask<Integer>>\n@@ -2274,0 +2274,1 @@\n+                                           Class<M> masktype,\n@@ -2275,9 +2276,3 @@\n-                                           VectorMask<Integer> m) {\n-        IntVector unmasked =\n-            VectorSupport.rearrangeOp(\n-                getClass(), shuffletype, int.class, length(),\n-                this, shuffle,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n-                    int ei = s_.laneSource(i);\n-                    return ei < 0 ? 0 : v1.lane(ei);\n-                }));\n+                                           M m) {\n+\n+        m.check(masktype, this);\n@@ -2289,1 +2284,7 @@\n-        return broadcast((int)0).blend(unmasked, m);\n+        return VectorSupport.rearrangeOp(\n+                   getClass(), shuffletype, masktype, int.class, length(),\n+                   this, shuffle, m,\n+                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                        int ei = s_.laneSource(i);\n+                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                   }));\n@@ -2312,3 +2313,3 @@\n-                getClass(), shuffletype, int.class, length(),\n-                this, ws,\n-                (v0, s_) -> v0.uOp((i, a) -> {\n+                getClass(), shuffletype, null, int.class, length(),\n+                this, ws, null,\n+                (v0, s_, m_) -> v0.uOp((i, a) -> {\n@@ -2320,3 +2321,3 @@\n-                getClass(), shuffletype, int.class, length(),\n-                v, ws,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n+                getClass(), shuffletype, null, int.class, length(),\n+                v, ws, null,\n+                (v1, s_, m_) -> v1.uOp((i, a) -> {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -446,0 +446,1 @@\n+                                    Long128Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -446,0 +446,1 @@\n+                                    Long256Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -446,0 +446,1 @@\n+                                    Long512Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -446,0 +446,1 @@\n+                                    Long64Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -446,0 +446,1 @@\n+                                    LongMaxMask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2119,3 +2119,3 @@\n-            getClass(), shuffletype, long.class, length(),\n-            this, shuffle,\n-            (v1, s_) -> v1.uOp((i, a) -> {\n+            getClass(), shuffletype, null, long.class, length(),\n+            this, shuffle, null,\n+            (v1, s_, m_) -> v1.uOp((i, a) -> {\n@@ -2138,1 +2138,1 @@\n-    <S extends VectorShuffle<Long>>\n+    <S extends VectorShuffle<Long>, M extends VectorMask<Long>>\n@@ -2140,0 +2140,1 @@\n+                                           Class<M> masktype,\n@@ -2141,9 +2142,3 @@\n-                                           VectorMask<Long> m) {\n-        LongVector unmasked =\n-            VectorSupport.rearrangeOp(\n-                getClass(), shuffletype, long.class, length(),\n-                this, shuffle,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n-                    int ei = s_.laneSource(i);\n-                    return ei < 0 ? 0 : v1.lane(ei);\n-                }));\n+                                           M m) {\n+\n+        m.check(masktype, this);\n@@ -2155,1 +2150,7 @@\n-        return broadcast((long)0).blend(unmasked, m);\n+        return VectorSupport.rearrangeOp(\n+                   getClass(), shuffletype, masktype, long.class, length(),\n+                   this, shuffle, m,\n+                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                        int ei = s_.laneSource(i);\n+                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                   }));\n@@ -2178,3 +2179,3 @@\n-                getClass(), shuffletype, long.class, length(),\n-                this, ws,\n-                (v0, s_) -> v0.uOp((i, a) -> {\n+                getClass(), shuffletype, null, long.class, length(),\n+                this, ws, null,\n+                (v0, s_, m_) -> v0.uOp((i, a) -> {\n@@ -2186,3 +2187,3 @@\n-                getClass(), shuffletype, long.class, length(),\n-                v, ws,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n+                getClass(), shuffletype, null, long.class, length(),\n+                v, ws, null,\n+                (v1, s_, m_) -> v1.uOp((i, a) -> {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Short128Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Short256Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Short512Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    Short64Mask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                    ShortMaxMask.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2254,3 +2254,3 @@\n-            getClass(), shuffletype, short.class, length(),\n-            this, shuffle,\n-            (v1, s_) -> v1.uOp((i, a) -> {\n+            getClass(), shuffletype, null, short.class, length(),\n+            this, shuffle, null,\n+            (v1, s_, m_) -> v1.uOp((i, a) -> {\n@@ -2273,1 +2273,1 @@\n-    <S extends VectorShuffle<Short>>\n+    <S extends VectorShuffle<Short>, M extends VectorMask<Short>>\n@@ -2275,0 +2275,1 @@\n+                                           Class<M> masktype,\n@@ -2276,9 +2277,3 @@\n-                                           VectorMask<Short> m) {\n-        ShortVector unmasked =\n-            VectorSupport.rearrangeOp(\n-                getClass(), shuffletype, short.class, length(),\n-                this, shuffle,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n-                    int ei = s_.laneSource(i);\n-                    return ei < 0 ? 0 : v1.lane(ei);\n-                }));\n+                                           M m) {\n+\n+        m.check(masktype, this);\n@@ -2290,1 +2285,7 @@\n-        return broadcast((short)0).blend(unmasked, m);\n+        return VectorSupport.rearrangeOp(\n+                   getClass(), shuffletype, masktype, short.class, length(),\n+                   this, shuffle, m,\n+                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                        int ei = s_.laneSource(i);\n+                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                   }));\n@@ -2313,3 +2314,3 @@\n-                getClass(), shuffletype, short.class, length(),\n-                this, ws,\n-                (v0, s_) -> v0.uOp((i, a) -> {\n+                getClass(), shuffletype, null, short.class, length(),\n+                this, ws, null,\n+                (v0, s_, m_) -> v0.uOp((i, a) -> {\n@@ -2321,3 +2322,3 @@\n-                getClass(), shuffletype, short.class, length(),\n-                v, ws,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n+                getClass(), shuffletype, null, short.class, length(),\n+                v, ws, null,\n+                (v1, s_, m_) -> v1.uOp((i, a) -> {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2541,3 +2541,3 @@\n-            getClass(), shuffletype, $type$.class, length(),\n-            this, shuffle,\n-            (v1, s_) -> v1.uOp((i, a) -> {\n+            getClass(), shuffletype, null, $type$.class, length(),\n+            this, shuffle, null,\n+            (v1, s_, m_) -> v1.uOp((i, a) -> {\n@@ -2560,1 +2560,1 @@\n-    <S extends VectorShuffle<$Boxtype$>>\n+    <S extends VectorShuffle<$Boxtype$>, M extends VectorMask<$Boxtype$>>\n@@ -2562,0 +2562,1 @@\n+                                           Class<M> masktype,\n@@ -2563,9 +2564,3 @@\n-                                           VectorMask<$Boxtype$> m) {\n-        $abstractvectortype$ unmasked =\n-            VectorSupport.rearrangeOp(\n-                getClass(), shuffletype, $type$.class, length(),\n-                this, shuffle,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n-                    int ei = s_.laneSource(i);\n-                    return ei < 0 ? 0 : v1.lane(ei);\n-                }));\n+                                           M m) {\n+\n+        m.check(masktype, this);\n@@ -2577,1 +2572,7 @@\n-        return broadcast(($type$)0).blend(unmasked, m);\n+        return VectorSupport.rearrangeOp(\n+                   getClass(), shuffletype, masktype, $type$.class, length(),\n+                   this, shuffle, m,\n+                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                        int ei = s_.laneSource(i);\n+                        return ei < 0  || !m_.laneIsSet(i) ? 0 : v1.lane(ei);\n+                   }));\n@@ -2600,3 +2601,3 @@\n-                getClass(), shuffletype, $type$.class, length(),\n-                this, ws,\n-                (v0, s_) -> v0.uOp((i, a) -> {\n+                getClass(), shuffletype, null, $type$.class, length(),\n+                this, ws, null,\n+                (v0, s_, m_) -> v0.uOp((i, a) -> {\n@@ -2608,3 +2609,3 @@\n-                getClass(), shuffletype, $type$.class, length(),\n-                v, ws,\n-                (v1, s_) -> v1.uOp((i, a) -> {\n+                getClass(), shuffletype, null, $type$.class, length(),\n+                v, ws, null,\n+                (v1, s_, m_) -> v1.uOp((i, a) -> {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -462,0 +462,1 @@\n+                                    $masktype$.class,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}