{"files":[{"patch":"@@ -1758,1 +1758,4 @@\n-  if (vector_klass == NULL || shuffle_klass == NULL || elem_klass == NULL || mask_klass == NULL || vlen == NULL) {\n+  if (vector_klass == NULL  ||\n+      shuffle_klass == NULL ||\n+      elem_klass == NULL    ||\n+      vlen == NULL) {\n@@ -1762,1 +1765,0 @@\n-      mask_klass->const_oop()    == NULL ||\n@@ -1767,1 +1769,1 @@\n-      tty->print_cr(\"  ** missing constant: vclass=%s sclass=%s mclass=%s etype=%s vlen=%s\",\n+      tty->print_cr(\"  ** missing constant: vclass=%s sclass=%s etype=%s vlen=%s\",\n@@ -1770,1 +1772,0 @@\n-                    NodeClassNames[argument(2)->Opcode()],\n@@ -1777,2 +1778,1 @@\n-      !is_klass_initialized(shuffle_klass) ||\n-      !is_klass_initialized(mask_klass)) {\n+      !is_klass_initialized(shuffle_klass)) {\n@@ -1802,1 +1802,7 @@\n-  if (!arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, VecMaskNotUsed)) {\n+\n+  bool is_masked_op = argument(7)->bottom_type() != TypePtr::NULL_PTR;\n+  bool use_predicate = is_masked_op;\n+  if (is_masked_op &&\n+      (mask_klass == NULL ||\n+       mask_klass->const_oop() == NULL ||\n+       !is_klass_initialized(mask_klass))) {\n@@ -1804,2 +1810,13 @@\n-      tty->print_cr(\"  ** not supported: arity=2 op=shuffle\/rearrange vlen=%d etype=%s ismask=no\",\n-                    num_elem, type2name(elem_bt));\n+      tty->print_cr(\"  ** mask_klass argument not initialized\");\n+    }\n+  }\n+  if (!arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, is_masked_op ? VecMaskUsePred : VecMaskNotUsed)) {\n+    use_predicate = false;\n+    if(!is_masked_op ||\n+       (!arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad) ||\n+        !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: arity=2 op=shuffle\/rearrange vlen=%d etype=%s ismask=no\",\n+                      num_elem, type2name(elem_bt));\n+      }\n+      return false; \/\/ not supported\n@@ -1807,1 +1824,0 @@\n-    return false; \/\/ not supported\n@@ -1815,3 +1831,0 @@\n-  ciKlass* mbox_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n-  const TypeInstPtr* mbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, mbox_klass);\n-\n@@ -1821,8 +1834,2 @@\n-  bool is_masked_op = argument(7)->bottom_type() != TypePtr::NULL_PTR;\n-  Node* mask = is_masked_op ? unbox_vector(argument(7), mbox_type, elem_bt, num_elem) : NULL;\n-  if (is_masked_op && mask == NULL) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=3 op=shuffle\/rearrange vlen=%d etype=%s ismask=useload is_masked_op=1\",\n-                    num_elem, type2name(elem_bt));\n-    }\n-    return false;\n+  if (v1 == NULL || shuffle == NULL) {\n+    return false; \/\/ operand unboxing failed\n@@ -1831,7 +1838,11 @@\n-  bool use_predicate = is_masked_op && arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, VecMaskUsePred);\n-  if (is_masked_op && !use_predicate &&\n-       (!arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad) ||\n-        !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=3 op=shuffle\/rearrange vlen=%d etype=%s ismask=useload is_masked_op=1\",\n-                    num_elem, type2name(elem_bt));\n+  Node* mask = NULL;\n+  if (is_masked_op) {\n+    ciKlass* mbox_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+    const TypeInstPtr* mbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, mbox_klass);\n+    mask = unbox_vector(argument(7), mbox_type, elem_bt, num_elem);\n+    if (mask == NULL) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: arity=3 op=shuffle\/rearrange vlen=%d etype=%s ismask=useload is_masked_op=1\",\n+                      num_elem, type2name(elem_bt));\n+      }\n+      return false;\n@@ -1839,5 +1850,0 @@\n-    return false;\n-  }\n-\n-  if (v1 == NULL || shuffle == NULL || mask == NULL) {\n-    return false; \/\/ operand unboxing failed\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":39,"deletions":33,"binary":false,"changes":72,"status":"modified"}]}