{"files":[{"patch":"@@ -2399,0 +2399,2 @@\n+    case Op_OnSpinWait:\n+      return VM_Version::supports_on_spin_wait();\n@@ -2439,3 +2441,0 @@\n-    \/\/ We don't have VectorReinterpret with bit_size less than 64 support for\n-    \/\/ now, even for byte type. To be refined with fully VectorCast support.\n-    case Op_VectorReinterpret:\n@@ -2459,17 +2458,0 @@\n-    \/\/ Some types of VectorCast are not implemented for now.\n-    case Op_VectorCastI2X:\n-      if (bt == T_BYTE) {\n-        return false;\n-      }\n-      break;\n-    case Op_VectorCastS2X:\n-      if (vlen < 4 || bit_size < 64) {\n-        return false;\n-      }\n-      break;\n-    case Op_VectorCastF2X:\n-    case Op_VectorCastD2X:\n-      if (bt == T_INT || bt == T_SHORT || bt == T_BYTE || bt == T_LONG) {\n-        return false;\n-      }\n-      break;\n@@ -8620,0 +8602,1 @@\n+  match(StoreStoreFence);\n@@ -10957,1 +10940,0 @@\n-  match(Set dst (MulI src1 (SubI zero src2)));\n@@ -11009,1 +10991,0 @@\n-  match(Set dst (MulL src1 (SubL zero src2)));\n@@ -11059,1 +11040,0 @@\n-  match(Set dst (MulL (ConvI2L src1) (SubL zero (ConvI2L src2))));\n@@ -14419,0 +14399,12 @@\n+instruct onspinwait() %{\n+  match(OnSpinWait);\n+  ins_cost(INSN_COST);\n+\n+  format %{ \"onspinwait\" %}\n+\n+  ins_encode %{\n+    __ spin_wait();\n+  %}\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -4555,1 +4555,1 @@\n-instruct vcvtFtoX_extend(vReg dst, vReg src)\n+instruct vcvtFtoI(vReg dst, vReg src)\n@@ -4558,2 +4558,1 @@\n-            (n->bottom_type()->is_vect()->element_basic_type() == T_INT ||\n-             n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_INT));\n@@ -4562,1 +4561,1 @@\n-  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I\/L vector\" %}\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I vector\" %}\n@@ -4564,4 +4563,14 @@\n-    BasicType to_bt = Matcher::vector_element_basic_type(this);\n-    if (to_bt == T_LONG) {\n-      __ sve_vector_extend(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($dst$$reg), __ S);\n-    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoL(vReg dst, vReg src)\n+%{\n+  predicate(UseSVE > 0 &&\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+  match(Set dst (VectorCastF2X src));\n+  ins_cost(SVE_COST * 2);\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to L vector\" %}\n+  ins_encode %{\n+    __ sve_sunpklo(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($src$$reg));\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($dst$$reg), __ S);\n@@ -4600,1 +4609,1 @@\n-    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($src$$reg), __ D);\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ D);\n@@ -5381,1 +5390,1 @@\n-instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, rFlagsReg cr) %{\n+instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pReg ptmp, rFlagsReg cr) %{\n@@ -5385,1 +5394,1 @@\n-  effect(TEMP pgtmp, KILL cr);\n+  effect(TEMP ptmp, KILL cr);\n@@ -5391,2 +5400,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size, Matcher::vector_length(this, $src));\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($src$$reg));\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), size, Matcher::vector_length(this, $src));\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp$$reg), as_PRegister($src$$reg));\n@@ -5397,1 +5406,1 @@\n-instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, pReg ptmp, rFlagsReg cr) %{\n+instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pReg ptmp1, pReg ptmp2, rFlagsReg cr) %{\n@@ -5401,1 +5410,1 @@\n-  effect(TEMP pgtmp, TEMP ptmp, KILL cr);\n+  effect(TEMP ptmp1, TEMP ptmp2, KILL cr);\n@@ -5407,1 +5416,1 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size,\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp1$$reg), size,\n@@ -5409,2 +5418,2 @@\n-    __ sve_brkb(as_PRegister($ptmp$$reg), as_PRegister($pgtmp$$reg), as_PRegister($src$$reg), false);\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg));\n+    __ sve_brkb(as_PRegister($ptmp2$$reg), as_PRegister($ptmp1$$reg), as_PRegister($src$$reg), false);\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp1$$reg), as_PRegister($ptmp2$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2306,1 +2306,1 @@\n-instruct vcvtFtoX_extend(vReg dst, vReg src)\n+instruct vcvtFtoI(vReg dst, vReg src)\n@@ -2309,2 +2309,1 @@\n-            (n->bottom_type()->is_vect()->element_basic_type() == T_INT ||\n-             n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_INT));\n@@ -2313,1 +2312,1 @@\n-  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I\/L vector\" %}\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I vector\" %}\n@@ -2315,4 +2314,14 @@\n-    BasicType to_bt = Matcher::vector_element_basic_type(this);\n-    if (to_bt == T_LONG) {\n-      __ sve_vector_extend(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($dst$$reg), __ S);\n-    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoL(vReg dst, vReg src)\n+%{\n+  predicate(UseSVE > 0 &&\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+  match(Set dst (VectorCastF2X src));\n+  ins_cost(SVE_COST * 2);\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to L vector\" %}\n+  ins_encode %{\n+    __ sve_sunpklo(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($src$$reg));\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($dst$$reg), __ S);\n@@ -2351,1 +2360,1 @@\n-    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($src$$reg), __ D);\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ D);\n@@ -3031,1 +3040,1 @@\n-instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, rFlagsReg cr) %{\n+instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pReg ptmp, rFlagsReg cr) %{\n@@ -3035,1 +3044,1 @@\n-  effect(TEMP pgtmp, KILL cr);\n+  effect(TEMP ptmp, KILL cr);\n@@ -3041,2 +3050,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size, Matcher::vector_length(this, $src));\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($src$$reg));\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), size, Matcher::vector_length(this, $src));\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp$$reg), as_PRegister($src$$reg));\n@@ -3047,1 +3056,1 @@\n-instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, pReg ptmp, rFlagsReg cr) %{\n+instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pReg ptmp1, pReg ptmp2, rFlagsReg cr) %{\n@@ -3051,1 +3060,1 @@\n-  effect(TEMP pgtmp, TEMP ptmp, KILL cr);\n+  effect(TEMP ptmp1, TEMP ptmp2, KILL cr);\n@@ -3057,1 +3066,1 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size,\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp1$$reg), size,\n@@ -3059,2 +3068,2 @@\n-    __ sve_brkb(as_PRegister($ptmp$$reg), as_PRegister($pgtmp$$reg), as_PRegister($src$$reg), false);\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg));\n+    __ sve_brkb(as_PRegister($ptmp2$$reg), as_PRegister($ptmp1$$reg), as_PRegister($src$$reg), false);\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp1$$reg), as_PRegister($ptmp2$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2826,0 +2826,10 @@\n+  \/\/ Advanced SIMD scalar copy\n+  void dup(FloatRegister Vd, SIMD_RegVariant T, FloatRegister Vn, int index = 0)\n+  {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    f(0b01011110000, 31, 21);\n+    f((1 << T) | (index << (T + 1)), 20, 16);\n+    f(0b000001, 15, 10), rf(Vn, 5), rf(Vd, 0);\n+  }\n+\n@@ -2904,0 +2914,1 @@\n+  INSN(fcvtzs, 0, 0b10, 0b01, 0b11011);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4149,0 +4149,1 @@\n+    !strcmp(_opType,\"StoreStoreFence\") ||\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  do_intrinsic(_hashCode,                 java_lang_Object,       hashCode_name, void_int_signature,             F_R)   \\\n+  do_intrinsic(_hashCode,                 java_lang_Object,       hashCode_name, void_int_signature,             F_RN)  \\\n@@ -112,1 +112,1 @@\n-  do_intrinsic(_getClass,                 java_lang_Object,       getClass_name, void_class_signature,           F_R)   \\\n+  do_intrinsic(_getClass,                 java_lang_Object,       getClass_name, void_class_signature,           F_RN)  \\\n@@ -114,1 +114,1 @@\n-  do_intrinsic(_clone,                    java_lang_Object,       clone_name, void_object_signature,             F_R)   \\\n+  do_intrinsic(_clone,                    java_lang_Object,       clone_name, void_object_signature,             F_RN)  \\\n@@ -116,1 +116,1 @@\n-  do_intrinsic(_notify,                   java_lang_Object,       notify_name, void_method_signature,            F_R)   \\\n+  do_intrinsic(_notify,                   java_lang_Object,       notify_name, void_method_signature,            F_RN)  \\\n@@ -118,1 +118,1 @@\n-  do_intrinsic(_notifyAll,                java_lang_Object,       notifyAll_name, void_method_signature,         F_R)   \\\n+  do_intrinsic(_notifyAll,                java_lang_Object,       notifyAll_name, void_method_signature,         F_RN)  \\\n@@ -143,0 +143,1 @@\n+  do_name(unsignedMultiplyHigh_name,\"unsignedMultiplyHigh\")                                                             \\\n@@ -176,0 +177,1 @@\n+  do_intrinsic(_unsignedMultiplyHigh,     java_lang_Math,         unsignedMultiplyHigh_name, long2_long_signature, F_S) \\\n@@ -191,1 +193,11 @@\n-  do_intrinsic(_floatToRawIntBits,        java_lang_Float,        floatToRawIntBits_name,   float_int_signature, F_S)   \\\n+  \/* StrictMath intrinsics, similar to what we have in Math. *\/                                                         \\\n+  do_intrinsic(_min_strict,               java_lang_StrictMath,   min_name,           int2_int_signature,        F_S)   \\\n+  do_intrinsic(_max_strict,               java_lang_StrictMath,   max_name,           int2_int_signature,        F_S)   \\\n+  do_intrinsic(_minF_strict,              java_lang_StrictMath,   min_name,           float2_float_signature,    F_S)   \\\n+  do_intrinsic(_maxF_strict,              java_lang_StrictMath,   max_name,           float2_float_signature,    F_S)   \\\n+  do_intrinsic(_minD_strict,              java_lang_StrictMath,   min_name,           double2_double_signature,  F_S)   \\\n+  do_intrinsic(_maxD_strict,              java_lang_StrictMath,   max_name,           double2_double_signature,  F_S)   \\\n+  \/* Special flavor of dsqrt intrinsic to handle the \"native\" method in StrictMath. Otherwise the same as in Math. *\/   \\\n+  do_intrinsic(_dsqrt_strict,             java_lang_StrictMath,   sqrt_name,          double_double_signature,   F_SN)  \\\n+                                                                                                                        \\\n+  do_intrinsic(_floatToRawIntBits,        java_lang_Float,        floatToRawIntBits_name,   float_int_signature, F_SN)  \\\n@@ -195,1 +207,1 @@\n-  do_intrinsic(_intBitsToFloat,           java_lang_Float,        intBitsToFloat_name,      int_float_signature, F_S)   \\\n+  do_intrinsic(_intBitsToFloat,           java_lang_Float,        intBitsToFloat_name,      int_float_signature, F_SN)  \\\n@@ -197,1 +209,1 @@\n-  do_intrinsic(_doubleToRawLongBits,      java_lang_Double,       doubleToRawLongBits_name, double_long_signature, F_S) \\\n+  do_intrinsic(_doubleToRawLongBits,      java_lang_Double,       doubleToRawLongBits_name, double_long_signature, F_SN)\\\n@@ -201,1 +213,1 @@\n-  do_intrinsic(_longBitsToDouble,         java_lang_Double,       longBitsToDouble_name,    long_double_signature, F_S) \\\n+  do_intrinsic(_longBitsToDouble,         java_lang_Double,       longBitsToDouble_name,    long_double_signature, F_SN)\\\n@@ -222,1 +234,1 @@\n-  do_intrinsic(_identityHashCode,         java_lang_System,       identityHashCode_name, object_int_signature,   F_S)   \\\n+  do_intrinsic(_identityHashCode,         java_lang_System,       identityHashCode_name, object_int_signature,   F_SN)  \\\n@@ -224,1 +236,1 @@\n-  do_intrinsic(_currentTimeMillis,        java_lang_System,       currentTimeMillis_name, void_long_signature,   F_S)   \\\n+  do_intrinsic(_currentTimeMillis,        java_lang_System,       currentTimeMillis_name, void_long_signature,   F_SN)  \\\n@@ -227,1 +239,1 @@\n-  do_intrinsic(_nanoTime,                 java_lang_System,       nanoTime_name,          void_long_signature,   F_S)   \\\n+  do_intrinsic(_nanoTime,                 java_lang_System,       nanoTime_name,          void_long_signature,   F_SN)  \\\n@@ -232,1 +244,1 @@\n-  do_intrinsic(_arraycopy,                java_lang_System,       arraycopy_name, arraycopy_signature,           F_S)   \\\n+  do_intrinsic(_arraycopy,                java_lang_System,       arraycopy_name, arraycopy_signature,           F_SN)  \\\n@@ -235,1 +247,1 @@\n-  do_intrinsic(_currentThread,            java_lang_Thread,       currentThread_name, currentThread_signature,   F_S)   \\\n+  do_intrinsic(_currentThread,            java_lang_Thread,       currentThread_name, currentThread_signature,   F_SN)  \\\n@@ -392,3 +404,3 @@\n-  do_intrinsic(_Reference_get,            java_lang_ref_Reference, get_name,    void_object_signature, F_R)             \\\n-  do_intrinsic(_Reference_refersTo0,     java_lang_ref_Reference, refersTo0_name, object_boolean_signature, F_R)        \\\n-  do_intrinsic(_PhantomReference_refersTo0, java_lang_ref_PhantomReference, refersTo0_name, object_boolean_signature, F_R) \\\n+  do_intrinsic(_Reference_get,              java_lang_ref_Reference, get_name,       void_object_signature,    F_R)     \\\n+  do_intrinsic(_Reference_refersTo0,        java_lang_ref_Reference, refersTo0_name, object_boolean_signature, F_RN)    \\\n+  do_intrinsic(_PhantomReference_refersTo0, java_lang_ref_PhantomReference, refersTo0_name, object_boolean_signature, F_RN) \\\n@@ -518,1 +530,1 @@\n-  do_intrinsic(_loadFence,                jdk_internal_misc_Unsafe,     loadFence_name, loadFence_signature,           F_RN)     \\\n+  do_intrinsic(_loadFence,                jdk_internal_misc_Unsafe,     loadFence_name, loadFence_signature,           F_R)      \\\n@@ -521,1 +533,1 @@\n-  do_intrinsic(_storeFence,               jdk_internal_misc_Unsafe,     storeFence_name, storeFence_signature,         F_RN)     \\\n+  do_intrinsic(_storeFence,               jdk_internal_misc_Unsafe,     storeFence_name, storeFence_signature,         F_R)      \\\n@@ -524,0 +536,3 @@\n+  do_intrinsic(_storeStoreFence,          jdk_internal_misc_Unsafe,     storeStoreFence_name, storeStoreFence_signature, F_R)    \\\n+   do_name(     storeStoreFence_name,                                   \"storeStoreFence\")                                       \\\n+   do_alias(    storeStoreFence_signature,                              void_method_signature)                                   \\\n@@ -1107,1 +1122,1 @@\n-  do_intrinsic(_park,                     jdk_internal_misc_Unsafe,     park_name, park_signature,                     F_R)    \\\n+  do_intrinsic(_park,                     jdk_internal_misc_Unsafe,     park_name, park_signature,                     F_RN)   \\\n@@ -1110,1 +1125,1 @@\n-  do_intrinsic(_unpark,                   jdk_internal_misc_Unsafe,     unpark_name, unpark_signature,                 F_R)    \\\n+  do_intrinsic(_unpark,                   jdk_internal_misc_Unsafe,     unpark_name, unpark_signature,                 F_RN)   \\\n@@ -1246,3 +1261,3 @@\n-    F_R,                        \/\/ !static ?native !synchronized (R=\"regular\")\n-    F_S,                        \/\/  static ?native !synchronized\n-    F_Y,                        \/\/ !static ?native  synchronized\n+    F_R,                        \/\/ !static !native !synchronized (R=\"regular\")\n+    F_S,                        \/\/  static !native !synchronized\n+    F_Y,                        \/\/ !static !native  synchronized\n@@ -1258,0 +1273,44 @@\n+  static constexpr bool is_flag_static(Flags flags) {\n+    switch (flags) {\n+      case F_S:\n+      case F_SN:\n+        return true;\n+      case F_R:\n+      case F_Y:\n+      case F_RN:\n+        return false;\n+      default:\n+        ShouldNotReachHere();\n+        return false;\n+    }\n+  }\n+\n+  static constexpr bool is_flag_synchronized(Flags flags) {\n+    switch (flags) {\n+      case F_Y:\n+        return true;\n+      case F_RN:\n+      case F_SN:\n+      case F_S:\n+      case F_R:\n+        return false;\n+      default:\n+        ShouldNotReachHere();\n+        return false;\n+    }\n+  }\n+\n+  static constexpr bool is_flag_native(Flags flags) {\n+    switch (flags) {\n+      case F_RN:\n+      case F_SN:\n+        return true;\n+      case F_S:\n+      case F_R:\n+      case F_Y:\n+        return false;\n+      default:\n+        ShouldNotReachHere();\n+        return false;\n+    }\n+  }\n@@ -1309,3 +1368,9 @@\n-    assert(    class_for(id) == holder, \"correct id\");\n-    assert(     name_for(id) == name,   \"correct id\");\n-    assert(signature_for(id) == sig,    \"correct id\");\n+    assert(    class_for(id) == holder, \"correct class: %s\",     name_at(id));\n+    assert(     name_for(id) == name,   \"correct name: %s\",      name_at(id));\n+    assert(signature_for(id) == sig,    \"correct signature: %s\", name_at(id));\n+    assert(      is_flag_static(flags_for(id)) == ((flags & JVM_ACC_STATIC)       != 0),\n+                 \"correct static flag: %s\", name_at(id));\n+    assert(is_flag_synchronized(flags_for(id)) == ((flags & JVM_ACC_SYNCHRONIZED) != 0),\n+           \"correct synchronized flag: %s\", name_at(id));\n+    assert(      is_flag_native(flags_for(id)) == ((flags & JVM_ACC_NATIVE)       != 0),\n+                 \"correct native flag: %s\", name_at(id));\n@@ -1320,1 +1385,1 @@\n-  static Flags              flags_for(ID id);\n+  static Flags          flags_for(ID id);\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":93,"deletions":28,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -107,1 +107,2 @@\n-    Compile C(env, target, entry_bci, subsume_loads, do_escape_analysis, eliminate_boxing, do_locks_coarsening, install_code, directive);\n+    Options options(subsume_loads, do_escape_analysis, eliminate_boxing, do_locks_coarsening, install_code);\n+    Compile C(env, target, entry_bci, options, directive);\n@@ -429,0 +430,3 @@\n+  case vmIntrinsics::_unsignedMultiplyHigh:\n+    if (!Matcher::match_rule_supported(Op_UMulHiL)) return false;\n+    break;\n@@ -454,0 +458,1 @@\n+  case vmIntrinsics::_maxF_strict:\n@@ -457,0 +462,1 @@\n+  case vmIntrinsics::_minF_strict:\n@@ -460,0 +466,1 @@\n+  case vmIntrinsics::_maxD_strict:\n@@ -463,0 +470,1 @@\n+  case vmIntrinsics::_minD_strict:\n@@ -507,0 +515,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n@@ -513,0 +522,2 @@\n+  case vmIntrinsics::_min_strict:\n+  case vmIntrinsics::_max_strict:\n@@ -608,0 +619,1 @@\n+  case vmIntrinsics::_storeStoreFence:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -222,0 +222,1 @@\n+macro(StoreStoreFence)\n@@ -241,0 +242,1 @@\n+macro(UMulHiL)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,0 +264,1 @@\n+  case vmIntrinsics::_dsqrt_strict:\n@@ -273,3 +274,0 @@\n-  case vmIntrinsics::_min:\n-  case vmIntrinsics::_max:                      return inline_min_max(intrinsic_id());\n-\n@@ -289,0 +287,1 @@\n+  case vmIntrinsics::_unsignedMultiplyHigh:     return inline_math_unsignedMultiplyHigh();\n@@ -469,0 +468,1 @@\n+  case vmIntrinsics::_storeStoreFence:\n@@ -633,0 +633,6 @@\n+  case vmIntrinsics::_min:\n+  case vmIntrinsics::_max:\n+  case vmIntrinsics::_min_strict:\n+  case vmIntrinsics::_max_strict:\n+    return inline_min_max(intrinsic_id());\n+\n@@ -637,1 +643,5 @@\n-    return inline_fp_min_max(intrinsic_id());\n+  case vmIntrinsics::_maxF_strict:\n+  case vmIntrinsics::_minF_strict:\n+  case vmIntrinsics::_maxD_strict:\n+  case vmIntrinsics::_minD_strict:\n+      return inline_fp_min_max(intrinsic_id());\n@@ -1606,1 +1616,3 @@\n-  case vmIntrinsics::_dsqrt:  n = new SqrtDNode(C, control(),  arg);  break;\n+  case vmIntrinsics::_dsqrt:\n+  case vmIntrinsics::_dsqrt_strict:\n+                              n = new SqrtDNode(C, control(),  arg);  break;\n@@ -1749,1 +1761,3 @@\n-  case vmIntrinsics::_dsqrt:  return Matcher::match_rule_supported(Op_SqrtD) ? inline_double_math(id) : false;\n+  case vmIntrinsics::_dsqrt:\n+  case vmIntrinsics::_dsqrt_strict:\n+                              return Matcher::match_rule_supported(Op_SqrtD) ? inline_double_math(id) : false;\n@@ -1876,0 +1890,5 @@\n+bool LibraryCallKit::inline_math_unsignedMultiplyHigh() {\n+  set_result(_gvn.transform(new UMulHiLNode(argument(0), argument(2))));\n+  return true;\n+}\n+\n@@ -1886,1 +1905,1 @@\n-  bool want_max = (id == vmIntrinsics::_max);\n+  bool want_max = (id == vmIntrinsics::_max || id == vmIntrinsics::_max_strict);\n@@ -2698,0 +2717,3 @@\n+    case vmIntrinsics::_storeStoreFence:\n+      insert_mem_bar(Op_StoreStoreFence);\n+      return true;\n@@ -6214,1 +6236,1 @@\n-  Node* objAESCryptKey = load_array_element(control(), objSessionK, intcon(0), TypeAryPtr::OOPS);\n+  Node* objAESCryptKey = load_array_element(objSessionK, intcon(0), TypeAryPtr::OOPS, \/* set_ctrl *\/ true);\n@@ -6803,1 +6825,1 @@\n-  \/\/ htbl entries is set to 96 only fox x86-64\n+  \/\/ Does this target support this intrinsic?\n@@ -6806,5 +6828,10 @@\n-  \/\/ new array to hold 48 computed htbl entries\n-  Node* subkeyHtbl_48_entries = new_array(klass_node, intcon(Matcher::htbl_entries), 0);\n-  if (subkeyHtbl_48_entries == NULL) return false;\n-\n-  Node* subkeyHtbl_48_entries_start = array_element_address(subkeyHtbl_48_entries, intcon(0), T_LONG);\n+  Node* subkeyHtbl_48_entries_start;\n+  if (Matcher::htbl_entries != 0) {\n+    \/\/ new array to hold 48 computed htbl entries\n+    Node* subkeyHtbl_48_entries = new_array(klass_node, intcon(Matcher::htbl_entries), 0);\n+    if (subkeyHtbl_48_entries == NULL) return false;\n+    subkeyHtbl_48_entries_start = array_element_address(subkeyHtbl_48_entries, intcon(0), T_LONG);\n+  } else {\n+    \/\/ This target doesn't need the extra-large Htbl.\n+    subkeyHtbl_48_entries_start = ConvL2X(intcon(0));\n+  }\n@@ -7055,0 +7082,2 @@\n+  case vmIntrinsics::_maxF_strict:\n+  case vmIntrinsics::_minF_strict:\n@@ -7061,0 +7090,2 @@\n+  case vmIntrinsics::_maxD_strict:\n+  case vmIntrinsics::_minD_strict:\n@@ -7070,5 +7101,19 @@\n-  case vmIntrinsics::_maxF:  n = new MaxFNode(a, b);  break;\n-  case vmIntrinsics::_minF:  n = new MinFNode(a, b);  break;\n-  case vmIntrinsics::_maxD:  n = new MaxDNode(a, b);  break;\n-  case vmIntrinsics::_minD:  n = new MinDNode(a, b);  break;\n-  default:  fatal_unexpected_iid(id);  break;\n+  case vmIntrinsics::_maxF:\n+  case vmIntrinsics::_maxF_strict:\n+    n = new MaxFNode(a, b);\n+    break;\n+  case vmIntrinsics::_minF:\n+  case vmIntrinsics::_minF_strict:\n+    n = new MinFNode(a, b);\n+    break;\n+  case vmIntrinsics::_maxD:\n+  case vmIntrinsics::_maxD_strict:\n+    n = new MaxDNode(a, b);\n+    break;\n+  case vmIntrinsics::_minD:\n+  case vmIntrinsics::_minD_strict:\n+    n = new MinDNode(a, b);\n+    break;\n+  default:\n+    fatal_unexpected_iid(id);\n+    break;\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":64,"deletions":19,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -213,0 +213,1 @@\n+  bool inline_math_unsignedMultiplyHigh();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+class LShiftNode;\n@@ -767,0 +768,1 @@\n+    DEFINE_CLASS_ID(LShift,   Node, 18)\n@@ -897,0 +899,1 @@\n+  DEFINE_CLASS_QUERY(LShift)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -696,0 +696,8 @@\n+  if (mask_vec == NULL) {\n+    if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** unbox failed mask=%s\",\n+                      NodeClassNames[argument(4)->Opcode()]);\n+    }\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -707,1 +707,0 @@\n-  nonstatic_field(Thread,                      _active_handles,                               JNIHandleBlock*)                       \\\n@@ -720,1 +719,0 @@\n-  nonstatic_field(JavaThread,                  _async_exception_condition,                    JavaThread::AsyncExceptionCondition)   \\\n@@ -732,0 +730,1 @@\n+  nonstatic_field(JavaThread,                  _active_handles,                               JNIHandleBlock*)                       \\\n@@ -828,1 +827,0 @@\n-  nonstatic_field(ciMethodData,                _current_mileage,                              int)                                   \\\n@@ -889,3 +887,1 @@\n-  c2_nonstatic_field(Compile,                  _subsume_loads,                                const bool)                            \\\n-  c2_nonstatic_field(Compile,                  _do_escape_analysis,                           const bool)                            \\\n-  c2_nonstatic_field(Compile,                  _eliminate_boxing,                             const bool)                            \\\n+  c2_nonstatic_field(Compile,                  _options,                                      const Options)                         \\\n@@ -894,0 +890,6 @@\n+  c2_nonstatic_field(Options,                  _subsume_loads,                                const bool)                            \\\n+  c2_nonstatic_field(Options,                  _do_escape_analysis,                           const bool)                            \\\n+  c2_nonstatic_field(Options,                  _eliminate_boxing,                             const bool)                            \\\n+  c2_nonstatic_field(Options,                  _do_locks_coarsening,                          const bool)                            \\\n+  c2_nonstatic_field(Options,                  _install_code,                                 const bool)                            \\\n+                                                                                                                                     \\\n@@ -1445,0 +1447,1 @@\n+  declare_c2_toplevel_type(Options)                                       \\\n@@ -1674,0 +1677,1 @@\n+  declare_c2_type(UMulHiLNode, Node)                                      \\\n@@ -1960,1 +1964,0 @@\n-  declare_integer_type(JavaThread::AsyncExceptionCondition)               \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1525,0 +1525,1 @@\n+                        [\"dup\",    \"__ dup(v0, __ S, v1);\",                              \"dup\\ts0, v1.s[0]\"],\n@@ -1538,0 +1539,1 @@\n+                        [\"fcvtzs\", \"__ fcvtzs(v0, __ T4S, v1);\",                         \"fcvtzs\\tv0.4s, v1.4s\"],\n@@ -1799,1 +1801,2 @@\n-print \"\\n  };\"\n+print\n+print \"  };\"\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -715,0 +715,1 @@\n+    __ dup(v0, __ S, v1);                              \/\/       dup     s0, v1.s[0]\n@@ -728,0 +729,1 @@\n+    __ fcvtzs(v0, __ T4S, v1);                         \/\/       fcvtzs  v0.4s, v1.4s\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}