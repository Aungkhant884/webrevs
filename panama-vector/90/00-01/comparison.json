{"files":[{"patch":"@@ -332,4 +332,5 @@\n-    VecMaskUseLoad,\n-    VecMaskUseStore,\n-    VecMaskUseAll,\n-    VecMaskNotUsed\n+    VecMaskUseLoad  = 1 << 0,\n+    VecMaskUseStore = 1 << 1,\n+    VecMaskUseAll   = VecMaskUseLoad | VecMaskUseStore,\n+    VecMaskUsePred  = 1 << 2,\n+    VecMaskNotUsed  = 1 << 3\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-  if (mask_use_type == VecMaskUseAll || mask_use_type == VecMaskUseLoad) {\n+  if ((mask_use_type & VecMaskUseLoad) != 0) {\n@@ -174,1 +174,1 @@\n-  if (mask_use_type == VecMaskUseAll || mask_use_type == VecMaskUseStore) {\n+  if ((mask_use_type & VecMaskUseStore) != 0) {\n@@ -186,0 +186,13 @@\n+  if ((mask_use_type & VecMaskUsePred) != 0) {\n+    if (!Matcher::has_predicated_vectors() ||\n+        !Matcher::match_rule_supported_vector_masked(sopc, num_elem, type)) {\n+      #ifndef PRODUCT\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"Rejected vector mask predicate using (%s,%s,%d) because architecture does not support it\",\n+                      NodeClassNames[sopc], type2name(type), num_elem);\n+      }\n+    #endif\n+      return false;\n+    }\n+  }\n+\n@@ -337,1 +350,1 @@\n-      tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d\",\n+      tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d is_masked_op=%d\",\n@@ -339,1 +352,1 @@\n-                    is_vector_mask(vbox_klass) ? 1 : 0);\n+                    is_vector_mask(vbox_klass) ? 1 : 0, is_masked_op ? 1 : 0);\n@@ -344,0 +357,10 @@\n+  \/\/ Return true if current platform has implemented the masked operation with predicate feature.\n+  bool use_predicate = is_masked_op && sopc != 0 && arch_supports_vector(sopc, num_elem, elem_bt, VecMaskUsePred);\n+  if (is_masked_op && !use_predicate && !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=0 is_masked_op=1\",\n+                    n, sopc, num_elem, type2name(elem_bt));\n+    }\n+    return false;\n+  }\n+\n@@ -383,1 +406,0 @@\n-  bool use_predicate = false;\n@@ -396,7 +418,0 @@\n-\n-    \/\/ Return true if current platform has implemented the masked operation with predicate feature.\n-    use_predicate = sopc != 0 && Matcher::has_predicated_vectors() &&\n-                    Matcher::match_rule_supported_vector_masked(sopc, num_elem, elem_bt);\n-    if (!use_predicate && !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad)) {\n-      return false;\n-    }\n@@ -953,4 +968,2 @@\n-  int sopc = is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked;\n-  bool use_predicate = Matcher::has_predicated_vectors() &&\n-                       arch_supports_vector(sopc, num_elem, elem_bt, VecMaskUseLoad) &&\n-                       Matcher::match_rule_supported_vector_masked(sopc, num_elem, elem_bt);\n+  bool use_predicate = arch_supports_vector(is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked,\n+                                            num_elem, elem_bt, (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":29,"deletions":16,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -3623,1 +3623,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Byte>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -3656,1 +3656,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Byte>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -4108,1 +4108,1 @@\n-                                      AbstractMask<Byte> m,\n+                                      VectorMask<Byte> m,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3220,1 +3220,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Double>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -3648,1 +3648,1 @@\n-                                      AbstractMask<Double> m,\n+                                      VectorMask<Double> m,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3207,1 +3207,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Float>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -3635,1 +3635,1 @@\n-                                      AbstractMask<Float> m,\n+                                      VectorMask<Float> m,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3344,1 +3344,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Integer>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -3772,1 +3772,1 @@\n-                                      AbstractMask<Integer> m,\n+                                      VectorMask<Integer> m,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3242,1 +3242,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Long>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -3661,1 +3661,1 @@\n-                                      AbstractMask<Long> m,\n+                                      VectorMask<Long> m,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3609,1 +3609,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Short>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -3641,1 +3641,1 @@\n-                (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<Short>) vm,\n+                (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -4102,1 +4102,1 @@\n-                                      AbstractMask<Short> m,\n+                                      VectorMask<Short> m,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4579,1 +4579,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<$Boxtype$>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -4612,1 +4612,1 @@\n-                (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<$Boxtype$>) vm,\n+                (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -4646,1 +4646,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, off, (AbstractMask<$Boxtype$>) vm,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n@@ -5169,1 +5169,1 @@\n-                                      AbstractMask<$Boxtype$> m,\n+                                      VectorMask<$Boxtype$> m,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}