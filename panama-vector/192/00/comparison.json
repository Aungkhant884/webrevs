{"files":[{"patch":"@@ -6003,0 +6003,52 @@\n+\n+\/\/------------------------------ ReverseV -----------------------------------\n+\n+instruct vreverseD(vecD dst, vecD src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (ReverseV src));\n+  ins_cost(2 * INSN_COST);\n+  format %{ \"ReverseV $dst, $src\\t# vector (D)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, false);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vreverseX(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (ReverseV src));\n+  ins_cost(2 * INSN_COST);\n+  format %{ \"ReverseV $dst, $src\\t# vector (X)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, true);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/---------------------------- ReverseBytesV --------------------------------\n+\n+instruct vreverseBytesD(vecD dst, vecD src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (ReverseBytesV src));\n+  ins_cost(INSN_COST);\n+  format %{ \"ReverseBytesV $dst, $src\\t# vector (D)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ neon_reverse_bytes(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, false);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vreverseBytesX(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (ReverseBytesV src));\n+  ins_cost(INSN_COST);\n+  format %{ \"ReverseBytesV $dst, $src\\t# vector (X)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ neon_reverse_bytes(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, true);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2667,0 +2667,24 @@\n+\n+dnl\n+dnl REVERSE($1,        $2,      $3,   $4  )\n+dnl REVERSE(insn_name, op_name, type, insn)\n+define(`REVERSE', `\n+instruct $1(vec$3 dst, vec$3 src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == ifelse($3, D, 8, 16));\n+  match(Set dst ($2 src));\n+  ins_cost(ifelse($2, `ReverseV', `2 * ', `')INSN_COST);\n+  format %{ \"$2 $dst, $src\\t# vector ($3)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ $4(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, ifelse($3, D, false, true));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+\/\/------------------------------ ReverseV -----------------------------------\n+REVERSE(vreverseD, ReverseV, D, neon_reverse_bits)\n+REVERSE(vreverseX, ReverseV, X, neon_reverse_bits)\n+\n+\/\/---------------------------- ReverseBytesV --------------------------------\n+REVERSE(vreverseBytesD, ReverseBytesV, D, neon_reverse_bytes)\n+REVERSE(vreverseBytesX, ReverseBytesV, X, neon_reverse_bytes)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -5904,1 +5904,1 @@\n-instruct countLeadingZerosV(vReg dst, vReg src) %{\n+instruct vcountLeadingZeros(vReg dst, vReg src) %{\n@@ -5909,1 +5909,1 @@\n-  format %{ \"countLeadingZerosV $dst, $src\\t# vector (sve)\" %}\n+  format %{ \"sve_clz $dst, $src\\t# vector (sve)\" %}\n@@ -5920,1 +5920,1 @@\n-instruct countLeadingZerosV_masked(vReg dst_src, pRegGov pg) %{\n+instruct vcountLeadingZeros_masked(vReg dst_src, pRegGov pg) %{\n@@ -5924,1 +5924,1 @@\n-  format %{ \"countLeadingZerosV $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  format %{ \"sve_clz $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n@@ -5936,1 +5936,1 @@\n-instruct countTrailingZerosV(vReg dst, vReg src) %{\n+instruct vcountTrailingZeros(vReg dst, vReg src) %{\n@@ -5941,1 +5941,2 @@\n-  format %{ \"countTrailingZerosV $dst, $src\\t# vector (sve)\" %}\n+  format %{ \"sve_rbit $dst, $src\\n\\t\"\n+            \"sve_clz  $dst, $dst\\t# vector (sve)\" %}\n@@ -5953,1 +5954,1 @@\n-instruct countTrailingZerosV_masked(vReg dst_src, pRegGov pg) %{\n+instruct vcountTrailingZeros_masked(vReg dst_src, pRegGov pg) %{\n@@ -5957,1 +5958,2 @@\n-  format %{ \"countTrailingZerosV $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  format %{ \"sve_rbit $dst_src, $pg, $dst_src\\n\\t\"\n+            \"sve_clz  $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n@@ -5968,0 +5970,75 @@\n+\n+\/\/ ---------------------------------- ReverseV ------------------------------------\n+\n+instruct vreverse(vReg dst, vReg src) %{\n+  predicate(UseSVE > 0 &&\n+            !n->as_Vector()->is_predicated_vector());\n+  match(Set dst (ReverseV src));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_rbit $dst, $src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_rbit(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n+instruct vreverse_masked(vReg dst_src, pRegGov pg) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst_src (ReverseV dst_src pg));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_rbit $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_rbit(as_FloatRegister($dst_src$$reg), size,\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ -------------------------------- ReverseBytesV ---------------------------------\n+\n+instruct vreverseBytes(vReg dst, vReg src) %{\n+  predicate(UseSVE > 0 &&\n+            !n->as_Vector()->is_predicated_vector());\n+  match(Set dst (ReverseBytesV src));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_revb $dst, $src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    if (bt == T_BYTE) {\n+      if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+        __ sve_orr(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+      }\n+    } else {\n+      __ sve_revb(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n+instruct vreverseBytes_masked(vReg dst_src, pRegGov pg) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst_src (ReverseBytesV dst_src pg));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_revb $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    if (bt == T_BYTE) {\n+      \/\/ do nothing\n+    } else {\n+      __ sve_revb(as_FloatRegister($dst_src$$reg), size,\n+          as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":85,"deletions":8,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -3362,4 +3362,4 @@\n-dnl CLTZ($1     )\n-dnl CLTZ(op_name)\n-define(`CLTZ', `\n-instruct count$1(vReg dst, vReg src) %{\n+dnl BITWISE_UNARY($1,        $2,      $3  )\n+dnl BITWISE_UNARY(insn_name, op_name, insn)\n+define(`BITWISE_UNARY', `\n+instruct $1(vReg dst, vReg src) %{\n@@ -3368,3 +3368,4 @@\n-  match(Set dst (Count$1 src));\n-  ins_cost(ifelse($1, `TrailingZerosV', `2 * ', `')SVE_COST);\n-  format %{ \"count$1 $dst, $src\\t# vector (sve)\" %}\n+  match(Set dst ($2 src));\n+  ins_cost(ifelse($2, `CountTrailingZerosV', `2 * ', `')SVE_COST);\n+  format %{ ifelse($2, `CountTrailingZerosV', `\"sve_rbit $dst, $src\\n\\t\"\n+            \"$3  $dst, $dst', `\"$3 $dst, $src')\\t# vector (sve)\" %}\n@@ -3374,3 +3375,11 @@\n-ifelse($1, `TrailingZerosV', `\n-    __ sve_rbit(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));', `')\n-    __ sve_clz(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($ifelse($1, `LeadingZerosV', src, dst)$$reg));\n+ifelse($2, `CountTrailingZerosV', `\n+    __ sve_rbit(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));', `')dnl\n+ifelse($2, `ReverseBytesV', `\n+    if (bt == T_BYTE) {\n+      if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+        __ sve_orr(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_FloatRegister($src$$reg));\n+      }\n+    } else {\n+      __ $3(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));\n+    }', `\n+    __ $3(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($ifelse($2, `CountTrailingZerosV', dst, src)$$reg));')\n@@ -3381,4 +3390,3 @@\n-dnl\n-dnl CLTZ_PREDICATE($1     )\n-dnl CLTZ_PREDICATE(op_name)\n-define(`CLTZ_PREDICATE', `\n+dnl BITWISE_UNARY_PREDICATE($1,        $2,      $3  )\n+dnl BITWISE_UNARY_PREDICATE(insn_name, op_name, insn)\n+define(`BITWISE_UNARY_PREDICATE', `\n@@ -3387,1 +3395,1 @@\n-instruct count$1_masked(vReg dst_src, pRegGov pg) %{\n+instruct $1_masked(vReg dst_src, pRegGov pg) %{\n@@ -3389,3 +3397,4 @@\n-  match(Set dst_src (Count$1 dst_src pg));\n-  ins_cost(ifelse($1, `TrailingZerosV', `2 * ', `')SVE_COST);\n-  format %{ \"count$1 $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  match(Set dst_src ($2 dst_src pg));\n+  ins_cost(ifelse($2, `CountTrailingZerosV', `2 * ', `')SVE_COST);\n+  format %{ ifelse($2, `CountTrailingZerosV', `\"sve_rbit $dst_src, $pg, $dst_src\\n\\t\"\n+            \"$3  $dst_src, $pg, $dst_src', `\"$3 $dst_src, $pg, $dst_src')\\t# vector (sve)\" %}\n@@ -3395,1 +3404,1 @@\n-ifelse($1, `TrailingZerosV', `\n+ifelse($2, `CountTrailingZerosV', `\n@@ -3397,3 +3406,10 @@\n-        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));', `')\n-    __ sve_clz(as_FloatRegister($dst_src$$reg), size,\n-        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));', `')dnl\n+ifelse($2, `ReverseBytesV', `\n+    if (bt == T_BYTE) {\n+      \/\/ do nothing\n+    } else {\n+      __ $3(as_FloatRegister($dst_src$$reg), size,\n+          as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+    }', `\n+    __ $3(as_FloatRegister($dst_src$$reg), size,\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));')\n@@ -3405,2 +3421,2 @@\n-CLTZ(LeadingZerosV)\n-CLTZ_PREDICATE(LeadingZerosV)\n+BITWISE_UNARY(vcountLeadingZeros, CountLeadingZerosV, sve_clz)\n+BITWISE_UNARY_PREDICATE(vcountLeadingZeros, CountLeadingZerosV, sve_clz)\n@@ -3409,2 +3425,11 @@\n-CLTZ(TrailingZerosV)\n-CLTZ_PREDICATE(TrailingZerosV)\n+BITWISE_UNARY(vcountTrailingZeros, CountTrailingZerosV, sve_clz)\n+BITWISE_UNARY_PREDICATE(vcountTrailingZeros, CountTrailingZerosV, sve_clz)\n+\n+\/\/ ---------------------------------- ReverseV ------------------------------------\n+BITWISE_UNARY(vreverse, ReverseV, sve_rbit)\n+BITWISE_UNARY_PREDICATE(vreverse, ReverseV, sve_rbit)\n+\n+\/\/ -------------------------------- ReverseBytesV ---------------------------------\n+BITWISE_UNARY(vreverseBytes, ReverseBytesV, sve_revb)\n+BITWISE_UNARY_PREDICATE(vreverseBytes, ReverseBytesV, sve_revb)\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":51,"deletions":26,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -3131,1 +3131,0 @@\n-  INSN(sve_rbit, 0b00000101, 0b100111100); \/\/ vector reverse bits\n@@ -3735,0 +3734,13 @@\n+\/\/ SVE reverse within elements\n+#define INSN(NAME, opc, cond)                                                        \\\n+  void NAME(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg,  FloatRegister Zn) {  \\\n+    starti;                                                                          \\\n+    assert(cond, \"invalid size\");                                                    \\\n+    f(0b00000101, 31, 24), f(T, 23, 22), f(0b1001, 21, 18), f(opc, 17, 16);          \\\n+    f(0b100, 15, 13), pgrf(Pg, 10), rf(Zn, 5), rf(Zd, 0);                            \\\n+  }\n+\n+  INSN(sve_revb, 0b00, T == H || T == S || T == D);\n+  INSN(sve_rbit, 0b11, T != Q);\n+#undef INSN\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1388,0 +1388,11 @@\n+  assert(bt == T_BYTE || bt == T_SHORT || bt == T_INT || bt == T_LONG, \"unsupported basic type\");\n+  SIMD_Arrangement size = isQ ? T16B : T8B;\n+  if (bt == T_BYTE) {\n+    rbit(dst, size, src);\n+  } else {\n+    neon_reverse_bytes(dst, src, bt, isQ);\n+    rbit(dst, size, dst);\n+  }\n+}\n+\n+void C2_MacroAssembler::neon_reverse_bytes(FloatRegister dst, FloatRegister src, BasicType bt, bool isQ) {\n@@ -1392,1 +1403,3 @@\n-      rbit(dst, size, src);\n+      if (dst != src) {\n+        orr(dst, size, src, src);\n+      }\n@@ -1396,1 +1409,0 @@\n-      rbit(dst, size, dst);\n@@ -1400,1 +1412,0 @@\n-      rbit(dst, size, dst);\n@@ -1404,1 +1415,0 @@\n-      rbit(dst, size, dst);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+  void neon_reverse_bytes(FloatRegister dst, FloatRegister src, BasicType bt, bool isQ);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-    _last_flag                       = Flag_is_removed_by_peephole\n+    _last_flag                       = Flag_is_predicated_using_blend\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1842,0 +1842,1 @@\n+                       [\"revb\", \"ZPZ\", \"m\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1146,28 +1146,29 @@\n-    __ sve_smax(z19, __ S, p3, z17);                   \/\/       smax    z19.s, p3\/m, z19.s, z17.s\n-    __ sve_smin(z16, __ B, p1, z0);                    \/\/       smin    z16.b, p1\/m, z16.b, z0.b\n-    __ sve_sub(z11, __ H, p2, z15);                    \/\/       sub     z11.h, p2\/m, z11.h, z15.h\n-    __ sve_fabs(z15, __ D, p1, z15);                   \/\/       fabs    z15.d, p1\/m, z15.d\n-    __ sve_fadd(z5, __ D, p0, z10);                    \/\/       fadd    z5.d, p0\/m, z5.d, z10.d\n-    __ sve_fdiv(z26, __ S, p0, z0);                    \/\/       fdiv    z26.s, p0\/m, z26.s, z0.s\n-    __ sve_fmax(z19, __ D, p7, z10);                   \/\/       fmax    z19.d, p7\/m, z19.d, z10.d\n-    __ sve_fmin(z3, __ D, p5, z7);                     \/\/       fmin    z3.d, p5\/m, z3.d, z7.d\n-    __ sve_fmul(z28, __ S, p3, z21);                   \/\/       fmul    z28.s, p3\/m, z28.s, z21.s\n-    __ sve_fneg(z26, __ D, p3, z17);                   \/\/       fneg    z26.d, p3\/m, z17.d\n-    __ sve_frintm(z17, __ D, p3, z2);                  \/\/       frintm  z17.d, p3\/m, z2.d\n-    __ sve_frintn(z16, __ S, p5, z20);                 \/\/       frintn  z16.s, p5\/m, z20.s\n-    __ sve_frintp(z19, __ D, p0, z1);                  \/\/       frintp  z19.d, p0\/m, z1.d\n-    __ sve_fsqrt(z17, __ D, p2, z16);                  \/\/       fsqrt   z17.d, p2\/m, z16.d\n-    __ sve_fsub(z21, __ S, p0, z4);                    \/\/       fsub    z21.s, p0\/m, z21.s, z4.s\n-    __ sve_fmad(z23, __ D, p3, z6, z11);               \/\/       fmad    z23.d, p3\/m, z6.d, z11.d\n-    __ sve_fmla(z14, __ S, p4, z29, z12);              \/\/       fmla    z14.s, p4\/m, z29.s, z12.s\n-    __ sve_fmls(z3, __ D, p5, z9, z3);                 \/\/       fmls    z3.d, p5\/m, z9.d, z3.d\n-    __ sve_fnmla(z27, __ S, p0, z19, z22);             \/\/       fnmla   z27.s, p0\/m, z19.s, z22.s\n-    __ sve_fnmls(z25, __ S, p5, z13, z5);              \/\/       fnmls   z25.s, p5\/m, z13.s, z5.s\n-    __ sve_mla(z25, __ S, p1, z21, z17);               \/\/       mla     z25.s, p1\/m, z21.s, z17.s\n-    __ sve_mls(z0, __ H, p0, z9, z19);                 \/\/       mls     z0.h, p0\/m, z9.h, z19.h\n-    __ sve_and(z7, z11, z14);                          \/\/       and     z7.d, z11.d, z14.d\n-    __ sve_eor(z17, z11, z13);                         \/\/       eor     z17.d, z11.d, z13.d\n-    __ sve_orr(z17, z30, z17);                         \/\/       orr     z17.d, z30.d, z17.d\n-    __ sve_bic(z15, z14, z26);                         \/\/       bic     z15.d, z14.d, z26.d\n-    __ sve_uzp1(z27, __ H, z22, z7);                   \/\/       uzp1    z27.h, z22.h, z7.h\n-    __ sve_uzp2(z5, __ H, z27, z27);                   \/\/       uzp2    z5.h, z27.h, z27.h\n+    __ sve_revb(z19, __ S, p3, z17);                   \/\/       revb    z19.s, p3\/m, z17.s\n+    __ sve_smax(z16, __ B, p1, z0);                    \/\/       smax    z16.b, p1\/m, z16.b, z0.b\n+    __ sve_smin(z11, __ H, p2, z15);                   \/\/       smin    z11.h, p2\/m, z11.h, z15.h\n+    __ sve_sub(z15, __ D, p1, z15);                    \/\/       sub     z15.d, p1\/m, z15.d, z15.d\n+    __ sve_fabs(z5, __ D, p0, z10);                    \/\/       fabs    z5.d, p0\/m, z10.d\n+    __ sve_fadd(z26, __ S, p0, z0);                    \/\/       fadd    z26.s, p0\/m, z26.s, z0.s\n+    __ sve_fdiv(z19, __ D, p7, z10);                   \/\/       fdiv    z19.d, p7\/m, z19.d, z10.d\n+    __ sve_fmax(z3, __ D, p5, z7);                     \/\/       fmax    z3.d, p5\/m, z3.d, z7.d\n+    __ sve_fmin(z28, __ S, p3, z21);                   \/\/       fmin    z28.s, p3\/m, z28.s, z21.s\n+    __ sve_fmul(z26, __ D, p3, z17);                   \/\/       fmul    z26.d, p3\/m, z26.d, z17.d\n+    __ sve_fneg(z17, __ D, p3, z2);                    \/\/       fneg    z17.d, p3\/m, z2.d\n+    __ sve_frintm(z16, __ S, p5, z20);                 \/\/       frintm  z16.s, p5\/m, z20.s\n+    __ sve_frintn(z19, __ D, p0, z1);                  \/\/       frintn  z19.d, p0\/m, z1.d\n+    __ sve_frintp(z17, __ D, p2, z16);                 \/\/       frintp  z17.d, p2\/m, z16.d\n+    __ sve_fsqrt(z21, __ S, p0, z4);                   \/\/       fsqrt   z21.s, p0\/m, z4.s\n+    __ sve_fsub(z23, __ S, p3, z6);                    \/\/       fsub    z23.s, p3\/m, z23.s, z6.s\n+    __ sve_fmad(z20, __ S, p3, z16, z29);              \/\/       fmad    z20.s, p3\/m, z16.s, z29.s\n+    __ sve_fmla(z3, __ S, p0, z22, z9);                \/\/       fmla    z3.s, p0\/m, z22.s, z9.s\n+    __ sve_fmls(z24, __ D, p7, z3, z19);               \/\/       fmls    z24.d, p7\/m, z3.d, z19.d\n+    __ sve_fnmla(z7, __ S, p6, z21, z13);              \/\/       fnmla   z7.s, p6\/m, z21.s, z13.s\n+    __ sve_fnmls(z7, __ D, p6, z5, z21);               \/\/       fnmls   z7.d, p6\/m, z5.d, z21.d\n+    __ sve_mla(z17, __ S, p0, z3, z9);                 \/\/       mla     z17.s, p0\/m, z3.s, z9.s\n+    __ sve_mls(z11, __ S, p2, z11, z14);               \/\/       mls     z11.s, p2\/m, z11.s, z14.s\n+    __ sve_and(z17, z11, z13);                         \/\/       and     z17.d, z11.d, z13.d\n+    __ sve_eor(z17, z30, z17);                         \/\/       eor     z17.d, z30.d, z17.d\n+    __ sve_orr(z15, z14, z26);                         \/\/       orr     z15.d, z14.d, z26.d\n+    __ sve_bic(z27, z22, z7);                          \/\/       bic     z27.d, z22.d, z7.d\n+    __ sve_uzp1(z5, __ H, z27, z27);                   \/\/       uzp1    z5.h, z27.h, z27.h\n+    __ sve_uzp2(z0, __ S, z14, z24);                   \/\/       uzp2    z0.s, z14.s, z24.s\n@@ -1176,9 +1177,9 @@\n-    __ sve_andv(v0, __ S, p3, z24);                    \/\/       andv s0, p3, z24.s\n-    __ sve_orv(v20, __ S, p0, z3);                     \/\/       orv s20, p0, z3.s\n-    __ sve_eorv(v25, __ D, p1, z25);                   \/\/       eorv d25, p1, z25.d\n-    __ sve_smaxv(v17, __ H, p4, z1);                   \/\/       smaxv h17, p4, z1.h\n-    __ sve_sminv(v14, __ B, p7, z13);                  \/\/       sminv b14, p7, z13.b\n-    __ sve_fminv(v17, __ D, p0, z30);                  \/\/       fminv d17, p0, z30.d\n-    __ sve_fmaxv(v22, __ S, p5, z29);                  \/\/       fmaxv s22, p5, z29.s\n-    __ sve_fadda(v8, __ S, p0, z0);                    \/\/       fadda s8, p0, s8, z0.s\n-    __ sve_uaddv(v23, __ S, p5, z0);                   \/\/       uaddv d23, p5, z0.s\n+    __ sve_andv(v20, __ S, p0, z3);                    \/\/       andv s20, p0, z3.s\n+    __ sve_orv(v25, __ D, p1, z25);                    \/\/       orv d25, p1, z25.d\n+    __ sve_eorv(v17, __ H, p4, z1);                    \/\/       eorv h17, p4, z1.h\n+    __ sve_smaxv(v14, __ B, p7, z13);                  \/\/       smaxv b14, p7, z13.b\n+    __ sve_sminv(v17, __ S, p0, z30);                  \/\/       sminv s17, p0, z30.s\n+    __ sve_fminv(v22, __ S, p5, z29);                  \/\/       fminv s22, p5, z29.s\n+    __ sve_fmaxv(v8, __ S, p0, z0);                    \/\/       fmaxv s8, p0, z0.s\n+    __ sve_fadda(v23, __ D, p5, z0);                   \/\/       fadda d23, p5, d23, z0.d\n+    __ sve_uaddv(v25, __ H, p6, z23);                  \/\/       uaddv d25, p6, z23.h\n@@ -1203,7 +1204,7 @@\n-    0x14000000,     0x17ffffd7,     0x140003da,     0x94000000,\n-    0x97ffffd4,     0x940003d7,     0x3400000a,     0x34fffa2a,\n-    0x34007a8a,     0x35000008,     0x35fff9c8,     0x35007a28,\n-    0xb400000b,     0xb4fff96b,     0xb40079cb,     0xb500001d,\n-    0xb5fff91d,     0xb500797d,     0x10000013,     0x10fff8b3,\n-    0x10007913,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307896,     0x3758000c,     0x375ff7cc,     0x3758782c,\n+    0x14000000,     0x17ffffd7,     0x140003db,     0x94000000,\n+    0x97ffffd4,     0x940003d8,     0x3400000a,     0x34fffa2a,\n+    0x34007aaa,     0x35000008,     0x35fff9c8,     0x35007a48,\n+    0xb400000b,     0xb4fff96b,     0xb40079eb,     0xb500001d,\n+    0xb5fff91d,     0xb500799d,     0x10000013,     0x10fff8b3,\n+    0x10007933,     0x90000013,     0x36300016,     0x3637f836,\n+    0x363078b6,     0x3758000c,     0x375ff7cc,     0x3758784c,\n@@ -1214,13 +1215,13 @@\n-    0x54007600,     0x54000001,     0x54fff541,     0x540075a1,\n-    0x54000002,     0x54fff4e2,     0x54007542,     0x54000002,\n-    0x54fff482,     0x540074e2,     0x54000003,     0x54fff423,\n-    0x54007483,     0x54000003,     0x54fff3c3,     0x54007423,\n-    0x54000004,     0x54fff364,     0x540073c4,     0x54000005,\n-    0x54fff305,     0x54007365,     0x54000006,     0x54fff2a6,\n-    0x54007306,     0x54000007,     0x54fff247,     0x540072a7,\n-    0x54000008,     0x54fff1e8,     0x54007248,     0x54000009,\n-    0x54fff189,     0x540071e9,     0x5400000a,     0x54fff12a,\n-    0x5400718a,     0x5400000b,     0x54fff0cb,     0x5400712b,\n-    0x5400000c,     0x54fff06c,     0x540070cc,     0x5400000d,\n-    0x54fff00d,     0x5400706d,     0x5400000e,     0x54ffefae,\n-    0x5400700e,     0x5400000f,     0x54ffef4f,     0x54006faf,\n+    0x54007620,     0x54000001,     0x54fff541,     0x540075c1,\n+    0x54000002,     0x54fff4e2,     0x54007562,     0x54000002,\n+    0x54fff482,     0x54007502,     0x54000003,     0x54fff423,\n+    0x540074a3,     0x54000003,     0x54fff3c3,     0x54007443,\n+    0x54000004,     0x54fff364,     0x540073e4,     0x54000005,\n+    0x54fff305,     0x54007385,     0x54000006,     0x54fff2a6,\n+    0x54007326,     0x54000007,     0x54fff247,     0x540072c7,\n+    0x54000008,     0x54fff1e8,     0x54007268,     0x54000009,\n+    0x54fff189,     0x54007209,     0x5400000a,     0x54fff12a,\n+    0x540071aa,     0x5400000b,     0x54fff0cb,     0x5400714b,\n+    0x5400000c,     0x54fff06c,     0x540070ec,     0x5400000d,\n+    0x54fff00d,     0x5400708d,     0x5400000e,     0x54ffefae,\n+    0x5400702e,     0x5400000f,     0x54ffef4f,     0x54006fcf,\n@@ -1440,11 +1441,11 @@\n-    0x04dea693,     0x045809a9,     0x05678313,     0x04880e33,\n-    0x040a0410,     0x044109eb,     0x04dca5ef,     0x65c08145,\n-    0x658d801a,     0x65c69d53,     0x65c794e3,     0x65828ebc,\n-    0x04ddae3a,     0x65c2ac51,     0x6580b690,     0x65c1a033,\n-    0x65cdaa11,     0x65818095,     0x65eb8cd7,     0x65ac13ae,\n-    0x65e33523,     0x65b6427b,     0x65a575b9,     0x049146b9,\n-    0x04536120,     0x042e3167,     0x04ad3171,     0x047133d1,\n-    0x04fa31cf,     0x05676adb,     0x057b6f65,     0x049a2f00,\n-    0x04982074,     0x04d92739,     0x04483031,     0x040a3dae,\n-    0x65c723d1,     0x658637b6,     0x65982008,     0x04813417,\n-\n+    0x04dea693,     0x045809a9,     0x05678313,     0x05a48e33,\n+    0x04080410,     0x044a09eb,     0x04c105ef,     0x04dca145,\n+    0x6580801a,     0x65cd9d53,     0x65c694e3,     0x65878ebc,\n+    0x65c28e3a,     0x04ddac51,     0x6582b690,     0x65c0a033,\n+    0x65c1aa11,     0x658da095,     0x65818cd7,     0x65bd8e14,\n+    0x65a902c3,     0x65f33c78,     0x65ad5aa7,     0x65f578a7,\n+    0x04894071,     0x048e696b,     0x042d3171,     0x04b133d1,\n+    0x047a31cf,     0x04e732db,     0x057b6b65,     0x05b86dc0,\n+    0x049a2074,     0x04d82739,     0x04593031,     0x04083dae,\n+    0x048a23d1,     0x658737b6,     0x65862008,     0x65d83417,\n+    0x04413af9,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":69,"deletions":68,"binary":false,"changes":137,"status":"modified"}]}